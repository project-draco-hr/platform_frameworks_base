{
  checkGlError("onDrawFrame start");
  st.getTransformMatrix(mSTMatrix);
  Size dimens;
  try {
    dimens=LegacyCameraDevice.getTextureSize(st);
  }
 catch (  LegacyExceptionUtils.BufferQueueAbandonedException e) {
    throw new IllegalStateException("Surface abandoned, skipping drawFrame...",e);
  }
  Matrix.setIdentityM(mMVPMatrix,0);
  float texWidth=dimens.getWidth();
  float texHeight=dimens.getHeight();
  if (texWidth <= 0 || texHeight <= 0) {
    throw new IllegalStateException("Illegal intermediate texture with dimension of 0");
  }
  float widthRatio=width / texWidth;
  float heightRatio=height / texHeight;
  float actual=(widthRatio < heightRatio) ? heightRatio : widthRatio;
  if (DEBUG) {
    Log.d(TAG,"Scaling factor " + actual + " used for "+ width+ "x"+ height+ " surface, intermediate buffer size is "+ texWidth+ "x"+ texHeight);
  }
  int viewportW=(int)(actual * texWidth);
  int viewportH=(int)(actual * texHeight);
  float dx=(width - viewportW) / 2f;
  float dy=(height - viewportH) / 2f;
  if (DEBUG) {
    Log.d(TAG,"Translation " + dx + ","+ dy+ " used for "+ width+ "x"+ height+ " surface");
  }
  GLES20.glViewport((int)dx,(int)dy,viewportW,viewportH);
  if (DEBUG) {
    GLES20.glClearColor(1.0f,0.0f,0.0f,1.0f);
    GLES20.glClear(GLES20.GL_DEPTH_BUFFER_BIT | GLES20.GL_COLOR_BUFFER_BIT);
  }
  GLES20.glUseProgram(mProgram);
  checkGlError("glUseProgram");
  GLES20.glActiveTexture(GLES20.GL_TEXTURE0);
  GLES20.glBindTexture(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,mTextureID);
  mTriangleVertices.position(TRIANGLE_VERTICES_DATA_POS_OFFSET);
  GLES20.glVertexAttribPointer(maPositionHandle,VERTEX_POS_SIZE,GLES20.GL_FLOAT,false,TRIANGLE_VERTICES_DATA_STRIDE_BYTES,mTriangleVertices);
  checkGlError("glVertexAttribPointer maPosition");
  GLES20.glEnableVertexAttribArray(maPositionHandle);
  checkGlError("glEnableVertexAttribArray maPositionHandle");
  mTriangleVertices.position(TRIANGLE_VERTICES_DATA_UV_OFFSET);
  GLES20.glVertexAttribPointer(maTextureHandle,VERTEX_UV_SIZE,GLES20.GL_FLOAT,false,TRIANGLE_VERTICES_DATA_STRIDE_BYTES,mTriangleVertices);
  checkGlError("glVertexAttribPointer maTextureHandle");
  GLES20.glEnableVertexAttribArray(maTextureHandle);
  checkGlError("glEnableVertexAttribArray maTextureHandle");
  GLES20.glUniformMatrix4fv(muMVPMatrixHandle,1,false,mMVPMatrix,0);
  GLES20.glUniformMatrix4fv(muSTMatrixHandle,1,false,mSTMatrix,0);
  GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP,0,4);
  checkGlError("glDrawArrays");
}
