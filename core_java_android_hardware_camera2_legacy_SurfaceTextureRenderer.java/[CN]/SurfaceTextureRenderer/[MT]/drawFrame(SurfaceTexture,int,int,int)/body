{
  checkGlError("onDrawFrame start");
  st.getTransformMatrix(mSTMatrix);
  Matrix.setIdentityM(mMVPMatrix,0);
  Size dimens;
  try {
    dimens=LegacyCameraDevice.getTextureSize(st);
  }
 catch (  LegacyExceptionUtils.BufferQueueAbandonedException e) {
    throw new IllegalStateException("Surface abandoned, skipping drawFrame...",e);
  }
  float texWidth=dimens.getWidth();
  float texHeight=dimens.getHeight();
  if (texWidth <= 0 || texHeight <= 0) {
    throw new IllegalStateException("Illegal intermediate texture with dimension of 0");
  }
  RectF intermediate=new RectF(0,0,texWidth,texHeight);
  RectF output=new RectF(0,0,width,height);
  android.graphics.Matrix boxingXform=new android.graphics.Matrix();
  boxingXform.setRectToRect(output,intermediate,android.graphics.Matrix.ScaleToFit.CENTER);
  boxingXform.mapRect(output);
  float scaleX=intermediate.width() / output.width();
  float scaleY=intermediate.height() / output.height();
  Matrix.scaleM(mMVPMatrix,0,scaleX,scaleY,1);
  if (DEBUG) {
    Log.d(TAG,"Scaling factors (S_x = " + scaleX + ",S_y = "+ scaleY+ ") used for "+ width+ "x"+ height+ " surface, intermediate buffer size is "+ texWidth+ "x"+ texHeight);
  }
  GLES20.glViewport(0,0,width,height);
  if (DEBUG) {
    GLES20.glClearColor(1.0f,0.0f,0.0f,1.0f);
    GLES20.glClear(GLES20.GL_DEPTH_BUFFER_BIT | GLES20.GL_COLOR_BUFFER_BIT);
  }
  GLES20.glUseProgram(mProgram);
  checkGlError("glUseProgram");
  GLES20.glActiveTexture(GLES20.GL_TEXTURE0);
  GLES20.glBindTexture(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,mTextureID);
  FloatBuffer triangleVertices;
switch (flipType) {
case FLIP_TYPE_HORIZONTAL:
    triangleVertices=mHorizontalFlipTriangleVertices;
  break;
case FLIP_TYPE_VERTICAL:
triangleVertices=mVerticalFlipTriangleVertices;
break;
case FLIP_TYPE_BOTH:
triangleVertices=mBothFlipTriangleVertices;
break;
default :
triangleVertices=mRegularTriangleVertices;
break;
}
triangleVertices.position(TRIANGLE_VERTICES_DATA_POS_OFFSET);
GLES20.glVertexAttribPointer(maPositionHandle,VERTEX_POS_SIZE,GLES20.GL_FLOAT,false,TRIANGLE_VERTICES_DATA_STRIDE_BYTES,triangleVertices);
checkGlError("glVertexAttribPointer maPosition");
GLES20.glEnableVertexAttribArray(maPositionHandle);
checkGlError("glEnableVertexAttribArray maPositionHandle");
triangleVertices.position(TRIANGLE_VERTICES_DATA_UV_OFFSET);
GLES20.glVertexAttribPointer(maTextureHandle,VERTEX_UV_SIZE,GLES20.GL_FLOAT,false,TRIANGLE_VERTICES_DATA_STRIDE_BYTES,triangleVertices);
checkGlError("glVertexAttribPointer maTextureHandle");
GLES20.glEnableVertexAttribArray(maTextureHandle);
checkGlError("glEnableVertexAttribArray maTextureHandle");
GLES20.glUniformMatrix4fv(muMVPMatrixHandle,1,false,mMVPMatrix,0);
GLES20.glUniformMatrix4fv(muSTMatrixHandle,1,false,mSTMatrix,0);
GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP,0,4);
checkGlError("glDrawArrays");
}
