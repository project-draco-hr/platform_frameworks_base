{
  final float ar=scurve(stretch,7.5f);
  final float ag=scurve(stretch,8.0f);
  final float ab=scurve(stretch,8.5f);
  if (DEBUG) {
    Slog.d(TAG,"drawVStretch: stretch=" + stretch + ", ar="+ ar+ ", ag="+ ag+ ", ab="+ ab);
  }
  GLES10.glBlendFunc(GLES10.GL_ONE,GLES10.GL_ONE);
  GLES10.glEnable(GLES10.GL_BLEND);
  GLES10.glVertexPointer(2,GLES10.GL_FLOAT,0,mVertexBuffer);
  GLES10.glEnableClientState(GLES10.GL_VERTEX_ARRAY);
  GLES10.glDisable(GLES10.GL_TEXTURE_2D);
  GLES10.glEnable(GLES11Ext.GL_TEXTURE_EXTERNAL_OES);
  GLES10.glBindTexture(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,mTexNames[0]);
  GLES10.glTexEnvx(GLES10.GL_TEXTURE_ENV,GLES10.GL_TEXTURE_ENV_MODE,mMode == MODE_WARM_UP ? GLES10.GL_MODULATE : GLES10.GL_REPLACE);
  GLES10.glTexParameterx(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,GLES10.GL_TEXTURE_MAG_FILTER,GLES10.GL_LINEAR);
  GLES10.glTexParameterx(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,GLES10.GL_TEXTURE_MIN_FILTER,GLES10.GL_LINEAR);
  GLES10.glTexParameterx(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,GLES10.GL_TEXTURE_WRAP_S,GLES10.GL_CLAMP_TO_EDGE);
  GLES10.glTexParameterx(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,GLES10.GL_TEXTURE_WRAP_T,GLES10.GL_CLAMP_TO_EDGE);
  GLES10.glEnable(GLES11Ext.GL_TEXTURE_EXTERNAL_OES);
  GLES10.glTexCoordPointer(2,GLES10.GL_FLOAT,0,mTexCoordBuffer);
  GLES10.glEnableClientState(GLES10.GL_TEXTURE_COORD_ARRAY);
  setVStretchQuad(mVertexBuffer,mDisplayWidth,mDisplayHeight,ar);
  GLES10.glColorMask(true,false,false,true);
  GLES10.glDrawArrays(GLES10.GL_TRIANGLE_FAN,0,4);
  setVStretchQuad(mVertexBuffer,mDisplayWidth,mDisplayHeight,ag);
  GLES10.glColorMask(false,true,false,true);
  GLES10.glDrawArrays(GLES10.GL_TRIANGLE_FAN,0,4);
  setVStretchQuad(mVertexBuffer,mDisplayWidth,mDisplayHeight,ab);
  GLES10.glColorMask(false,false,true,true);
  GLES10.glDrawArrays(GLES10.GL_TRIANGLE_FAN,0,4);
  GLES10.glDisable(GLES11Ext.GL_TEXTURE_EXTERNAL_OES);
  GLES10.glDisableClientState(GLES10.GL_TEXTURE_COORD_ARRAY);
  GLES10.glColorMask(true,true,true,true);
  if (mMode == MODE_COOL_DOWN) {
    GLES10.glColor4f(ag,ag,ag,1.0f);
    GLES10.glDrawArrays(GLES10.GL_TRIANGLE_FAN,0,4);
  }
  GLES10.glDisableClientState(GLES10.GL_VERTEX_ARRAY);
  GLES10.glDisable(GLES10.GL_BLEND);
}
