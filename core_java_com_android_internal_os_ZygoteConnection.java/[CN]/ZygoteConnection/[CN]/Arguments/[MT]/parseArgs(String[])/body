{
  int curArg=0;
  for (; curArg < args.length; curArg++) {
    String arg=args[curArg];
    if (arg.equals("--")) {
      curArg++;
      break;
    }
 else     if (arg.startsWith("--setuid=")) {
      if (uidSpecified) {
        throw new IllegalArgumentException("Duplicate arg specified");
      }
      uidSpecified=true;
      uid=Integer.parseInt(arg.substring(arg.indexOf('=') + 1));
    }
 else     if (arg.startsWith("--setgid=")) {
      if (gidSpecified) {
        throw new IllegalArgumentException("Duplicate arg specified");
      }
      gidSpecified=true;
      gid=Integer.parseInt(arg.substring(arg.indexOf('=') + 1));
    }
 else     if (arg.startsWith("--target-sdk-version=")) {
      if (targetSdkVersionSpecified) {
        throw new IllegalArgumentException("Duplicate target-sdk-version specified");
      }
      targetSdkVersionSpecified=true;
      targetSdkVersion=Integer.parseInt(arg.substring(arg.indexOf('=') + 1));
    }
 else     if (arg.equals("--enable-debugger")) {
      debugFlags|=Zygote.DEBUG_ENABLE_DEBUGGER;
    }
 else     if (arg.equals("--enable-safemode")) {
      debugFlags|=Zygote.DEBUG_ENABLE_SAFEMODE;
    }
 else     if (arg.equals("--enable-checkjni")) {
      debugFlags|=Zygote.DEBUG_ENABLE_CHECKJNI;
    }
 else     if (arg.equals("--enable-jni-logging")) {
      debugFlags|=Zygote.DEBUG_ENABLE_JNI_LOGGING;
    }
 else     if (arg.equals("--enable-assert")) {
      debugFlags|=Zygote.DEBUG_ENABLE_ASSERT;
    }
 else     if (arg.equals("--peer-wait")) {
      peerWait=true;
    }
 else     if (arg.equals("--runtime-init")) {
      runtimeInit=true;
    }
 else     if (arg.startsWith("--seinfo=")) {
      if (seInfoSpecified) {
        throw new IllegalArgumentException("Duplicate arg specified");
      }
      seInfoSpecified=true;
      seInfo=arg.substring(arg.indexOf('=') + 1);
    }
 else     if (arg.startsWith("--capabilities=")) {
      if (capabilitiesSpecified) {
        throw new IllegalArgumentException("Duplicate arg specified");
      }
      capabilitiesSpecified=true;
      String capString=arg.substring(arg.indexOf('=') + 1);
      String[] capStrings=capString.split(",",2);
      if (capStrings.length == 1) {
        effectiveCapabilities=Long.decode(capStrings[0]);
        permittedCapabilities=effectiveCapabilities;
      }
 else {
        permittedCapabilities=Long.decode(capStrings[0]);
        effectiveCapabilities=Long.decode(capStrings[1]);
      }
    }
 else     if (arg.startsWith("--rlimit=")) {
      String[] limitStrings=arg.substring(arg.indexOf('=') + 1).split(",");
      if (limitStrings.length != 3) {
        throw new IllegalArgumentException("--rlimit= should have 3 comma-delimited ints");
      }
      int[] rlimitTuple=new int[limitStrings.length];
      for (int i=0; i < limitStrings.length; i++) {
        rlimitTuple[i]=Integer.parseInt(limitStrings[i]);
      }
      if (rlimits == null) {
        rlimits=new ArrayList();
      }
      rlimits.add(rlimitTuple);
    }
 else     if (arg.equals("-classpath")) {
      if (classpath != null) {
        throw new IllegalArgumentException("Duplicate arg specified");
      }
      try {
        classpath=args[++curArg];
      }
 catch (      IndexOutOfBoundsException ex) {
        throw new IllegalArgumentException("-classpath requires argument");
      }
    }
 else     if (arg.startsWith("--setgroups=")) {
      if (gids != null) {
        throw new IllegalArgumentException("Duplicate arg specified");
      }
      String[] params=arg.substring(arg.indexOf('=') + 1).split(",");
      gids=new int[params.length];
      for (int i=params.length - 1; i >= 0; i--) {
        gids[i]=Integer.parseInt(params[i]);
      }
    }
 else     if (arg.equals("--invoke-with")) {
      if (invokeWith != null) {
        throw new IllegalArgumentException("Duplicate arg specified");
      }
      try {
        invokeWith=args[++curArg];
      }
 catch (      IndexOutOfBoundsException ex) {
        throw new IllegalArgumentException("--invoke-with requires argument");
      }
    }
 else     if (arg.startsWith("--nice-name=")) {
      if (niceName != null) {
        throw new IllegalArgumentException("Duplicate arg specified");
      }
      niceName=arg.substring(arg.indexOf('=') + 1);
    }
 else {
      break;
    }
  }
  if (runtimeInit && classpath != null) {
    throw new IllegalArgumentException("--runtime-init and -classpath are incompatible");
  }
  remainingArgs=new String[args.length - curArg];
  System.arraycopy(args,curArg,remainingArgs,0,remainingArgs.length);
}
