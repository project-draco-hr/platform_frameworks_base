{
  String args[];
  Arguments parsedArgs=null;
  FileDescriptor[] descriptors;
  try {
    args=readArgumentList();
    descriptors=mSocket.getAncillaryFileDescriptors();
  }
 catch (  IOException ex) {
    Log.w(TAG,"IOException on command socket " + ex.getMessage());
    closeSocket();
    return true;
  }
  if (args == null) {
    closeSocket();
    return true;
  }
  PrintStream newStderr=null;
  if (descriptors != null && descriptors.length >= 3) {
    newStderr=new PrintStream(new FileOutputStream(descriptors[2]));
  }
  int pid=-1;
  FileDescriptor childPipeFd=null;
  FileDescriptor serverPipeFd=null;
  try {
    parsedArgs=new Arguments(args);
    applyUidSecurityPolicy(parsedArgs,peer);
    applyRlimitSecurityPolicy(parsedArgs,peer);
    applyCapabilitiesSecurityPolicy(parsedArgs,peer);
    applyInvokeWithSecurityPolicy(parsedArgs,peer);
    applyDebuggerSystemProperty(parsedArgs);
    applyInvokeWithSystemProperty(parsedArgs);
    int[][] rlimits=null;
    if (parsedArgs.rlimits != null) {
      rlimits=parsedArgs.rlimits.toArray(intArray2d);
    }
    if (parsedArgs.runtimeInit && parsedArgs.invokeWith != null) {
      FileDescriptor[] pipeFds=new FileDescriptor[2];
      ZygoteInit.pipe(pipeFds);
      childPipeFd=pipeFds[1];
      serverPipeFd=pipeFds[0];
      ZygoteInit.setCloseOnExec(serverPipeFd,true);
    }
    pid=Zygote.forkAndSpecialize(parsedArgs.uid,parsedArgs.gid,parsedArgs.gids,parsedArgs.debugFlags,rlimits);
  }
 catch (  IOException ex) {
    logAndPrintError(newStderr,"Exception creating pipe",ex);
  }
catch (  IllegalArgumentException ex) {
    logAndPrintError(newStderr,"Invalid zygote arguments",ex);
  }
catch (  ZygoteSecurityException ex) {
    logAndPrintError(newStderr,"Zygote security policy prevents request: ",ex);
  }
  try {
    if (pid == 0) {
      ZygoteInit.closeDescriptorQuietly(serverPipeFd);
      serverPipeFd=null;
      handleChildProc(parsedArgs,descriptors,childPipeFd,newStderr);
      return true;
    }
 else {
      ZygoteInit.closeDescriptorQuietly(childPipeFd);
      childPipeFd=null;
      return handleParentProc(pid,descriptors,serverPipeFd,parsedArgs);
    }
  }
  finally {
    ZygoteInit.closeDescriptorQuietly(childPipeFd);
    ZygoteInit.closeDescriptorQuietly(serverPipeFd);
  }
}
