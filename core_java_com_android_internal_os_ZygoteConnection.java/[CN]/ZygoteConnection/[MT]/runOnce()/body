{
  String args[];
  Arguments parsedArgs=null;
  FileDescriptor[] descriptors;
  try {
    args=readArgumentList();
    descriptors=mSocket.getAncillaryFileDescriptors();
  }
 catch (  IOException ex) {
    Log.w(TAG,"IOException on command socket " + ex.getMessage());
    closeSocket();
    return true;
  }
  if (args == null) {
    closeSocket();
    return true;
  }
  PrintStream newStderr=null;
  if (descriptors != null && descriptors.length >= 3) {
    newStderr=new PrintStream(new FileOutputStream(descriptors[2]));
  }
  int pid;
  try {
    parsedArgs=new Arguments(args);
    applyUidSecurityPolicy(parsedArgs,peer);
    applyDebuggerSecurityPolicy(parsedArgs);
    applyRlimitSecurityPolicy(parsedArgs,peer);
    applyCapabilitiesSecurityPolicy(parsedArgs,peer);
    int[][] rlimits=null;
    if (parsedArgs.rlimits != null) {
      rlimits=parsedArgs.rlimits.toArray(intArray2d);
    }
    pid=Zygote.forkAndSpecialize(parsedArgs.uid,parsedArgs.gid,parsedArgs.gids,parsedArgs.enableDebugger,rlimits);
  }
 catch (  IllegalArgumentException ex) {
    logAndPrintError(newStderr,"Invalid zygote arguments",ex);
    pid=-1;
  }
catch (  ZygoteSecurityException ex) {
    logAndPrintError(newStderr,"Zygote security policy prevents request: ",ex);
    pid=-1;
  }
  if (pid == 0) {
    handleChildProc(parsedArgs,descriptors,newStderr);
    return true;
  }
 else {
    return handleParentProc(pid,descriptors,parsedArgs);
  }
}
