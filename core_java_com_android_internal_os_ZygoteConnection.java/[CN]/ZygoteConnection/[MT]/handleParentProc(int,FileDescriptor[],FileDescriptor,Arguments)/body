{
  if (pid > 0) {
    setChildPgid(pid);
  }
  if (descriptors != null) {
    for (    FileDescriptor fd : descriptors) {
      IoUtils.closeQuietly(fd);
    }
  }
  boolean usingWrapper=false;
  if (pipeFd != null && pid > 0) {
    DataInputStream is=new DataInputStream(new FileInputStream(pipeFd));
    int innerPid=-1;
    try {
      innerPid=is.readInt();
    }
 catch (    IOException ex) {
      Log.w(TAG,"Error reading pid from wrapped process, child may have died",ex);
    }
 finally {
      try {
        is.close();
      }
 catch (      IOException ex) {
      }
    }
    if (innerPid > 0) {
      int parentPid=innerPid;
      while (parentPid > 0 && parentPid != pid) {
        parentPid=Process.getParentPid(parentPid);
      }
      if (parentPid > 0) {
        Log.i(TAG,"Wrapped process has pid " + innerPid);
        pid=innerPid;
        usingWrapper=true;
      }
 else {
        Log.w(TAG,"Wrapped process reported a pid that is not a child of " + "the process that we forked: childPid=" + pid + " innerPid="+ innerPid);
      }
    }
  }
  try {
    mSocketOutStream.writeInt(pid);
    mSocketOutStream.writeBoolean(usingWrapper);
  }
 catch (  IOException ex) {
    Log.e(TAG,"Error reading from command socket",ex);
    return true;
  }
  if (parsedArgs.peerWait) {
    try {
      mSocket.close();
    }
 catch (    IOException ex) {
      Log.e(TAG,"Zygote: error closing sockets",ex);
    }
    return true;
  }
  return false;
}
