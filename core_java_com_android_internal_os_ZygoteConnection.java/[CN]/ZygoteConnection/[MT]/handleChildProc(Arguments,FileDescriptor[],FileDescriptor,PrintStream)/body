{
  if (parsedArgs.peerWait) {
    try {
      ZygoteInit.setCloseOnExec(mSocket.getFileDescriptor(),true);
      sPeerWaitSocket=mSocket;
    }
 catch (    IOException ex) {
      Log.e(TAG,"Zygote Child: error setting peer wait " + "socket to be close-on-exec",ex);
    }
  }
 else {
    closeSocket();
    ZygoteInit.closeServerSocket();
  }
  if (descriptors != null) {
    try {
      ZygoteInit.reopenStdio(descriptors[0],descriptors[1],descriptors[2]);
      for (      FileDescriptor fd : descriptors) {
        IoUtils.closeQuietly(fd);
      }
      newStderr=System.err;
    }
 catch (    IOException ex) {
      Log.e(TAG,"Error reopening stdio",ex);
    }
  }
  if (parsedArgs.niceName != null) {
    Process.setArgV0(parsedArgs.niceName);
  }
  if (parsedArgs.runtimeInit) {
    if (parsedArgs.invokeWith != null) {
      WrapperInit.execApplication(parsedArgs.invokeWith,parsedArgs.niceName,parsedArgs.targetSdkVersion,pipeFd,parsedArgs.remainingArgs);
    }
 else {
      RuntimeInit.zygoteInit(parsedArgs.targetSdkVersion,parsedArgs.remainingArgs);
    }
  }
 else {
    String className;
    try {
      className=parsedArgs.remainingArgs[0];
    }
 catch (    ArrayIndexOutOfBoundsException ex) {
      logAndPrintError(newStderr,"Missing required class name argument",null);
      return;
    }
    String[] mainArgs=new String[parsedArgs.remainingArgs.length - 1];
    System.arraycopy(parsedArgs.remainingArgs,1,mainArgs,0,mainArgs.length);
    if (parsedArgs.invokeWith != null) {
      WrapperInit.execStandalone(parsedArgs.invokeWith,parsedArgs.classpath,className,mainArgs);
    }
 else {
      ClassLoader cloader;
      if (parsedArgs.classpath != null) {
        cloader=new PathClassLoader(parsedArgs.classpath,ClassLoader.getSystemClassLoader());
      }
 else {
        cloader=ClassLoader.getSystemClassLoader();
      }
      try {
        ZygoteInit.invokeStaticMain(cloader,className,mainArgs);
      }
 catch (      RuntimeException ex) {
        logAndPrintError(newStderr,"Error starting.",ex);
      }
    }
  }
}
