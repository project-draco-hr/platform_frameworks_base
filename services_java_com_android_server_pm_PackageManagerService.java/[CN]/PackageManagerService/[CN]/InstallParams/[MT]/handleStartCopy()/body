{
  int ret=PackageManager.INSTALL_SUCCEEDED;
  boolean fwdLocked=(flags & PackageManager.INSTALL_FORWARD_LOCK) != 0;
  boolean onSd=(flags & PackageManager.INSTALL_EXTERNAL) != 0;
  boolean onInt=(flags & PackageManager.INSTALL_INTERNAL) != 0;
  if (onInt && onSd) {
    Slog.w(TAG,"Conflicting flags specified for installing on both internal and external");
    ret=PackageManager.INSTALL_FAILED_INVALID_INSTALL_LOCATION;
  }
 else   if (fwdLocked && onSd) {
    Slog.w(TAG,"Cannot install fwd locked apps on sdcard");
    ret=PackageManager.INSTALL_FAILED_INVALID_INSTALL_LOCATION;
  }
 else {
    final long lowThreshold;
    final DeviceStorageMonitorService dsm=(DeviceStorageMonitorService)ServiceManager.getService(DeviceStorageMonitorService.SERVICE);
    if (dsm == null) {
      Log.w(TAG,"Couldn't get low memory threshold; no free limit imposed");
      lowThreshold=0L;
    }
 else {
      lowThreshold=dsm.getMemoryLowThreshold();
    }
    final PackageInfoLite pkgLite;
    try {
      mContext.grantUriPermission(DEFAULT_CONTAINER_PACKAGE,packageURI,Intent.FLAG_GRANT_READ_URI_PERMISSION);
      pkgLite=mContainerService.getMinimalPackageInfo(packageURI,flags,lowThreshold);
    }
  finally {
      mContext.revokeUriPermission(packageURI,Intent.FLAG_GRANT_READ_URI_PERMISSION);
    }
    int loc=pkgLite.recommendedInstallLocation;
    if (loc == PackageHelper.RECOMMEND_FAILED_INVALID_LOCATION) {
      ret=PackageManager.INSTALL_FAILED_INVALID_INSTALL_LOCATION;
    }
 else     if (loc == PackageHelper.RECOMMEND_FAILED_ALREADY_EXISTS) {
      ret=PackageManager.INSTALL_FAILED_ALREADY_EXISTS;
    }
 else     if (loc == PackageHelper.RECOMMEND_FAILED_INSUFFICIENT_STORAGE) {
      ret=PackageManager.INSTALL_FAILED_INSUFFICIENT_STORAGE;
    }
 else     if (loc == PackageHelper.RECOMMEND_FAILED_INVALID_APK) {
      ret=PackageManager.INSTALL_FAILED_INVALID_APK;
    }
 else     if (loc == PackageHelper.RECOMMEND_FAILED_INVALID_URI) {
      ret=PackageManager.INSTALL_FAILED_INVALID_URI;
    }
 else     if (loc == PackageHelper.RECOMMEND_MEDIA_UNAVAILABLE) {
      ret=PackageManager.INSTALL_FAILED_MEDIA_UNAVAILABLE;
    }
 else {
      loc=installLocationPolicy(pkgLite,flags);
      if (!onSd && !onInt) {
        if (loc == PackageHelper.RECOMMEND_INSTALL_EXTERNAL) {
          flags|=PackageManager.INSTALL_EXTERNAL;
          flags&=~PackageManager.INSTALL_INTERNAL;
        }
 else {
          flags|=PackageManager.INSTALL_INTERNAL;
          flags&=~PackageManager.INSTALL_EXTERNAL;
        }
      }
    }
  }
  final InstallArgs args=createInstallArgs(this);
  if (ret == PackageManager.INSTALL_SUCCEEDED) {
    final Intent verification=new Intent(Intent.ACTION_PACKAGE_NEEDS_VERIFICATION,packageURI);
    verification.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
    final List<ResolveInfo> receivers=queryIntentReceivers(verification,null,PackageManager.GET_DISABLED_COMPONENTS);
    if (isVerificationEnabled() && receivers.size() > 0) {
      if (DEBUG_INSTALL) {
        Slog.d(TAG,"Found " + receivers.size() + " verifiers for intent "+ verification.toString());
      }
      final int verificationId=mPendingVerificationToken++;
      verification.putExtra(PackageManager.EXTRA_VERIFICATION_ID,verificationId);
      verification.putExtra(PackageManager.EXTRA_VERIFICATION_INSTALLER_PACKAGE,installerPackageName);
      verification.putExtra(PackageManager.EXTRA_VERIFICATION_INSTALL_FLAGS,flags);
      if (verificationURI != null) {
        verification.putExtra(PackageManager.EXTRA_VERIFICATION_URI,verificationURI);
      }
      mPendingVerification.append(verificationId,args);
      mContext.sendOrderedBroadcast(verification,android.Manifest.permission.PACKAGE_VERIFICATION_AGENT,new BroadcastReceiver(){
        @Override public void onReceive(        Context context,        Intent intent){
          final Message msg=mHandler.obtainMessage(CHECK_PENDING_VERIFICATION);
          msg.arg1=verificationId;
          mHandler.sendMessageDelayed(msg,getVerificationTimeout());
        }
      }
,null,0,null,null);
    }
 else {
      mArgs=args;
      ret=args.copyApk(mContainerService,true);
    }
  }
 else {
    mArgs=args;
  }
  mRet=ret;
}
