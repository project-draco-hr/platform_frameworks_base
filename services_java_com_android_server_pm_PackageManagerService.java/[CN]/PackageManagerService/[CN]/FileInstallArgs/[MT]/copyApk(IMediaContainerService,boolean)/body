{
  if (temp) {
    createCopyFile();
  }
  File codeFile=new File(codeFileName);
  if (!created) {
    try {
      codeFile.createNewFile();
      if (!setPermissions()) {
        return PackageManager.INSTALL_FAILED_INSUFFICIENT_STORAGE;
      }
    }
 catch (    IOException e) {
      Slog.w(TAG,"Failed to create file " + codeFile);
      return PackageManager.INSTALL_FAILED_INSUFFICIENT_STORAGE;
    }
  }
  ParcelFileDescriptor out=null;
  try {
    out=ParcelFileDescriptor.open(codeFile,ParcelFileDescriptor.MODE_READ_WRITE);
  }
 catch (  FileNotFoundException e) {
    Slog.e(TAG,"Failed to create file descriptor for : " + codeFileName);
    return PackageManager.INSTALL_FAILED_INSUFFICIENT_STORAGE;
  }
  int ret=PackageManager.INSTALL_FAILED_INSUFFICIENT_STORAGE;
  try {
    mContext.grantUriPermission(DEFAULT_CONTAINER_PACKAGE,packageURI,Intent.FLAG_GRANT_READ_URI_PERMISSION);
    ret=imcs.copyResource(packageURI,out);
  }
  finally {
    IoUtils.closeQuietly(out);
    mContext.revokeUriPermission(packageURI,Intent.FLAG_GRANT_READ_URI_PERMISSION);
  }
  if (isFwdLocked()) {
    final File destResourceFile=new File(getResourcePath());
    try {
      PackageHelper.extractPublicFiles(codeFileName,destResourceFile);
    }
 catch (    IOException e) {
      Slog.e(TAG,"Couldn't create a new zip file for the public parts of a" + " forward-locked app.");
      destResourceFile.delete();
      return PackageManager.INSTALL_FAILED_INSUFFICIENT_STORAGE;
    }
  }
  return ret;
}
