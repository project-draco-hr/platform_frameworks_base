{
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.INSTALL_PACKAGES,null);
  PackageSetting pkgSetting;
  final int uid=Binder.getCallingUid();
  if (UserHandle.getUserId(uid) != userId) {
    mContext.enforceCallingPermission(android.Manifest.permission.INTERACT_ACROSS_USERS_FULL,"installExistingPackage for user " + userId);
  }
  if (isUserRestricted(userId,UserManager.DISALLOW_INSTALL_APPS)) {
    return PackageManager.INSTALL_FAILED_USER_RESTRICTED;
  }
  long callingId=Binder.clearCallingIdentity();
  try {
    boolean sendAdded=false;
    boolean isSystem=false;
    Bundle extras=new Bundle(1);
synchronized (mPackages) {
      pkgSetting=mSettings.mPackages.get(packageName);
      if (pkgSetting == null) {
        return PackageManager.INSTALL_FAILED_INVALID_URI;
      }
      if (!pkgSetting.getInstalled(userId)) {
        pkgSetting.setInstalled(true,userId);
        mSettings.writePackageRestrictionsLPr(userId);
        extras.putInt(Intent.EXTRA_UID,UserHandle.getUid(userId,pkgSetting.appId));
        sendAdded=true;
        isSystem=(pkgSetting.pkgFlags & ApplicationInfo.FLAG_SYSTEM) != 0;
      }
    }
    if (sendAdded) {
      sendPackageBroadcast(Intent.ACTION_PACKAGE_ADDED,packageName,extras,null,null,new int[]{userId});
      if (isSystem) {
        Intent bcIntent=new Intent(Intent.ACTION_BOOT_COMPLETED).addFlags(Intent.FLAG_INCLUDE_STOPPED_PACKAGES).setPackage(packageName);
        try {
          IActivityManager am=ActivityManagerNative.getDefault();
          am.broadcastIntent(null,bcIntent,null,null,0,null,null,null,android.app.AppOpsManager.OP_NONE,false,false,userId);
        }
 catch (        RemoteException e) {
          Slog.w(TAG,"Unable to bootstrap installed package",e);
        }
      }
    }
  }
  finally {
    Binder.restoreCallingIdentity(callingId);
  }
  return PackageManager.INSTALL_SUCCEEDED;
}
