{
  int pFlags=args.flags;
  String installerPackageName=args.installerPackageName;
  File tmpPackageFile=new File(args.getCodePath());
  boolean forwardLocked=((pFlags & PackageManager.INSTALL_FORWARD_LOCK) != 0);
  boolean onSd=((pFlags & PackageManager.INSTALL_EXTERNAL) != 0);
  boolean replace=false;
  int scanMode=(onSd ? 0 : SCAN_MONITOR) | SCAN_FORCE_DEX | SCAN_UPDATE_SIGNATURE| (newInstall ? SCAN_NEW_INSTALL : 0);
  res.returnCode=PackageManager.INSTALL_SUCCEEDED;
  int parseFlags=PackageParser.PARSE_CHATTY | (forwardLocked ? PackageParser.PARSE_FORWARD_LOCK : 0) | (onSd ? PackageParser.PARSE_ON_SDCARD : 0);
  parseFlags|=mDefParseFlags;
  PackageParser pp=new PackageParser(tmpPackageFile.getPath());
  pp.setSeparateProcesses(mSeparateProcesses);
  final PackageParser.Package pkg=pp.parsePackage(tmpPackageFile,null,mMetrics,parseFlags);
  if (pkg == null) {
    res.returnCode=pp.getParseError();
    return;
  }
  String pkgName=res.name=pkg.packageName;
  if ((pkg.applicationInfo.flags & ApplicationInfo.FLAG_TEST_ONLY) != 0) {
    if ((pFlags & PackageManager.INSTALL_ALLOW_TEST) == 0) {
      res.returnCode=PackageManager.INSTALL_FAILED_TEST_ONLY;
      return;
    }
  }
  if (GET_CERTIFICATES && !pp.collectCertificates(pkg,parseFlags)) {
    res.returnCode=pp.getParseError();
    return;
  }
  if (args.manifestDigest != null) {
    if (DEBUG_INSTALL) {
      final String parsedManifest=pkg.manifestDigest == null ? "null" : pkg.manifestDigest.toString();
      Slog.d(TAG,"Comparing manifests: " + args.manifestDigest.toString() + " vs. "+ parsedManifest);
    }
    if (!args.manifestDigest.equals(pkg.manifestDigest)) {
      res.returnCode=PackageManager.INSTALL_FAILED_PACKAGE_CHANGED;
      return;
    }
  }
 else   if (DEBUG_INSTALL) {
    final String parsedManifest=pkg.manifestDigest == null ? "null" : pkg.manifestDigest.toString();
    Slog.d(TAG,"manifestDigest was not present, but parser got: " + parsedManifest);
  }
  pp=null;
  String oldCodePath=null;
  boolean systemApp=false;
synchronized (mPackages) {
    if ((pFlags & PackageManager.INSTALL_REPLACE_EXISTING) != 0) {
      String oldName=mSettings.mRenamedPackages.get(pkgName);
      if (pkg.mOriginalPackages != null && pkg.mOriginalPackages.contains(oldName) && mPackages.containsKey(oldName)) {
        pkg.setPackageName(oldName);
        pkgName=pkg.packageName;
        replace=true;
      }
 else       if (mPackages.containsKey(pkgName)) {
        replace=true;
      }
    }
    PackageSetting ps=mSettings.mPackages.get(pkgName);
    if (ps != null) {
      oldCodePath=mSettings.mPackages.get(pkgName).codePathString;
      if (ps.pkg != null && ps.pkg.applicationInfo != null) {
        systemApp=(ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0;
      }
    }
  }
  if (systemApp && onSd) {
    Slog.w(TAG,"Cannot install updates to system apps on sdcard");
    res.returnCode=PackageManager.INSTALL_FAILED_INVALID_INSTALL_LOCATION;
    return;
  }
  if (!args.doRename(res.returnCode,pkgName,oldCodePath)) {
    res.returnCode=PackageManager.INSTALL_FAILED_INSUFFICIENT_STORAGE;
    return;
  }
  setApplicationInfoPaths(pkg,args.getCodePath(),args.getResourcePath());
  pkg.applicationInfo.nativeLibraryDir=args.getNativeLibraryPath();
  if (replace) {
    replacePackageLI(pkg,parseFlags,scanMode,installerPackageName,res);
  }
 else {
    installNewPackageLI(pkg,parseFlags,scanMode,installerPackageName,res);
  }
}
