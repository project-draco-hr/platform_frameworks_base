{
  if (!sUserManager.exists(userId))   return null;
  final String resultsAction=intent.getAction();
  List<ResolveInfo> results=queryIntentActivities(intent,resolvedType,flags | PackageManager.GET_RESOLVED_FILTER,userId);
  if (DEBUG_INTENT_MATCHING) {
    Log.v(TAG,"Query " + intent + ": "+ results);
  }
  int specificsPos=0;
  int N;
  if (specifics != null) {
    for (int i=0; i < specifics.length; i++) {
      final Intent sintent=specifics[i];
      if (sintent == null) {
        continue;
      }
      if (DEBUG_INTENT_MATCHING) {
        Log.v(TAG,"Specific #" + i + ": "+ sintent);
      }
      String action=sintent.getAction();
      if (resultsAction != null && resultsAction.equals(action)) {
        action=null;
      }
      ResolveInfo ri=null;
      ActivityInfo ai=null;
      ComponentName comp=sintent.getComponent();
      if (comp == null) {
        ri=resolveIntent(sintent,specificTypes != null ? specificTypes[i] : null,flags,userId);
        if (ri == null) {
          continue;
        }
        if (ri == mResolveInfo) {
        }
        ai=ri.activityInfo;
        comp=new ComponentName(ai.applicationInfo.packageName,ai.name);
      }
 else {
        ai=getActivityInfo(comp,flags,userId);
        if (ai == null) {
          continue;
        }
      }
      if (DEBUG_INTENT_MATCHING)       Log.v(TAG,"Specific #" + i + ": "+ ai);
      N=results.size();
      int j;
      for (j=specificsPos; j < N; j++) {
        ResolveInfo sri=results.get(j);
        if ((sri.activityInfo.name.equals(comp.getClassName()) && sri.activityInfo.applicationInfo.packageName.equals(comp.getPackageName())) || (action != null && sri.filter.matchAction(action))) {
          results.remove(j);
          if (DEBUG_INTENT_MATCHING)           Log.v(TAG,"Removing duplicate item from " + j + " due to specific "+ specificsPos);
          if (ri == null) {
            ri=sri;
          }
          j--;
          N--;
        }
      }
      if (ri == null) {
        ri=new ResolveInfo();
        ri.activityInfo=ai;
      }
      results.add(specificsPos,ri);
      ri.specificIndex=i;
      specificsPos++;
    }
  }
  N=results.size();
  for (int i=specificsPos; i < N - 1; i++) {
    final ResolveInfo rii=results.get(i);
    if (rii.filter == null) {
      continue;
    }
    final Iterator<String> it=rii.filter.actionsIterator();
    if (it == null) {
      continue;
    }
    while (it.hasNext()) {
      final String action=it.next();
      if (resultsAction != null && resultsAction.equals(action)) {
        continue;
      }
      for (int j=i + 1; j < N; j++) {
        final ResolveInfo rij=results.get(j);
        if (rij.filter != null && rij.filter.hasAction(action)) {
          results.remove(j);
          if (DEBUG_INTENT_MATCHING)           Log.v(TAG,"Removing duplicate item from " + j + " due to action "+ action+ " at "+ i);
          j--;
          N--;
        }
      }
    }
    if ((flags & PackageManager.GET_RESOLVED_FILTER) == 0) {
      rii.filter=null;
    }
  }
  if (caller != null) {
    N=results.size();
    for (int i=0; i < N; i++) {
      ActivityInfo ainfo=results.get(i).activityInfo;
      if (caller.getPackageName().equals(ainfo.applicationInfo.packageName) && caller.getClassName().equals(ainfo.name)) {
        results.remove(i);
        break;
      }
    }
  }
  if ((flags & PackageManager.GET_RESOLVED_FILTER) == 0) {
    N=results.size();
    for (int i=0; i < N; i++) {
      results.get(i).filter=null;
    }
  }
  if (DEBUG_INTENT_MATCHING)   Log.v(TAG,"Result: " + results);
  return results;
}
