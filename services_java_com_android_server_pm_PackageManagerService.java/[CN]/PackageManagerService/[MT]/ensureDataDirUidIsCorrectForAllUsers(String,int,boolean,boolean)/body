{
  boolean mismatch=false;
  for (  int userId : sUserManager.getUserIds()) {
    final File dataPath=getDataPathForPackage(packageName,userId);
    int currentUid=0;
    try {
      final StructStat stat=Libcore.os.stat(dataPath.getPath());
      currentUid=stat.st_uid;
    }
 catch (    ErrnoException e) {
      Slog.e(TAG,"Couldn't stat path " + dataPath.getPath(),e);
    }
    final int expectedUid=UserHandle.getUid(userId,appUid);
    if (currentUid != expectedUid) {
      if (currentUid == 0) {
        final int ret;
synchronized (mInstaller) {
          ret=mInstaller.fixUid(packageName,expectedUid,userId);
        }
        if (ret >= 0) {
          String msg="Package " + packageName + " unexpectedly changed to uid 0; recovered to "+ expectedUid;
          reportSettingsProblem(Log.WARN,msg);
        }
 else {
          mismatch=true;
          String prefix=isSystemApp ? "System package " : "Third party package ";
          String msg=prefix + packageName + " has changed from uid: "+ currentUid+ " to "+ expectedUid;
          reportSettingsProblem(Log.WARN,msg);
        }
      }
    }
  }
  if (mismatch) {
    if (isSystemApp || isBootScan) {
      int ret;
synchronized (mInstallLock) {
        ret=removeDataDirsLI(packageName);
      }
      if (ret >= 0) {
        String prefix=isSystemApp ? "System package " : "Third party package ";
        String msg=prefix + packageName + " old data erased";
        reportSettingsProblem(Log.WARN,msg);
synchronized (mInstallLock) {
          ret=createDataDirsLI(packageName,appUid);
        }
        if (ret == -1) {
          msg=prefix + packageName + " could not have data directory re-created after delete.";
          reportSettingsProblem(Log.WARN,msg);
          mLastScanError=PackageManager.INSTALL_FAILED_INSUFFICIENT_STORAGE;
          return false;
        }
      }
 else {
        mHasSystemUidErrors=true;
        return false;
      }
    }
 else {
      mLastScanError=PackageManager.INSTALL_FAILED_UID_CHANGED;
      return false;
    }
  }
  return true;
}
