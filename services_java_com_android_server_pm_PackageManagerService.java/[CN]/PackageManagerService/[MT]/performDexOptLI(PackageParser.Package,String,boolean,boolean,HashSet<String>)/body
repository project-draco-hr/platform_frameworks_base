{
  final String instructionSet=instructionSetOverride != null ? instructionSetOverride : getAppInstructionSet(pkg.applicationInfo);
  if (done != null) {
    done.add(pkg.packageName);
    if (pkg.usesLibraries != null) {
      performDexOptLibsLI(pkg.usesLibraries,instructionSet,forceDex,defer,done);
    }
    if (pkg.usesOptionalLibraries != null) {
      performDexOptLibsLI(pkg.usesOptionalLibraries,instructionSet,forceDex,defer,done);
    }
  }
  boolean performed=false;
  if ((pkg.applicationInfo.flags & ApplicationInfo.FLAG_HAS_CODE) != 0) {
    String path=pkg.mScanPath;
    int ret=0;
    try {
      if (forceDex || dalvik.system.DexFile.isDexOptNeededInternal(path,pkg.packageName,instructionSet,defer)) {
        if (!forceDex && defer) {
          if (mDeferredDexOpt == null) {
            mDeferredDexOpt=new HashSet<PackageParser.Package>();
          }
          mDeferredDexOpt.add(pkg);
          return DEX_OPT_DEFERRED;
        }
 else {
          Log.i(TAG,"Running dexopt on: " + pkg.applicationInfo.packageName + " (instructionSet="+ instructionSet+ ")");
          final int sharedGid=UserHandle.getSharedAppGid(pkg.applicationInfo.uid);
          ret=mInstaller.dexopt(path,sharedGid,!isForwardLocked(pkg),pkg.packageName,instructionSet);
          pkg.mDidDexOpt=true;
          performed=true;
        }
      }
    }
 catch (    FileNotFoundException e) {
      Slog.w(TAG,"Apk not found for dexopt: " + path);
      ret=-1;
    }
catch (    IOException e) {
      Slog.w(TAG,"IOException reading apk: " + path,e);
      ret=-1;
    }
catch (    dalvik.system.StaleDexCacheError e) {
      Slog.w(TAG,"StaleDexCacheError when reading apk: " + path,e);
      ret=-1;
    }
catch (    Exception e) {
      Slog.w(TAG,"Exception when doing dexopt : ",e);
      ret=-1;
    }
    if (ret < 0) {
      return DEX_OPT_FAILED;
    }
  }
  return performed ? DEX_OPT_PERFORMED : DEX_OPT_SKIPPED;
}
