{
  String packageName=ps.name;
  removePackageLI(ps,(flags & REMOVE_CHATTY) != 0);
  final PackageSetting deletedPs;
synchronized (mPackages) {
    deletedPs=mSettings.mPackages.get(packageName);
    if (outInfo != null) {
      outInfo.removedPackage=packageName;
      outInfo.removedUsers=deletedPs != null ? deletedPs.queryInstalledUsers(sUserManager.getUserIds(),true) : null;
    }
  }
  if ((flags & PackageManager.DELETE_KEEP_DATA) == 0) {
    removeDataDirsLI(packageName);
    schedulePackageCleaning(packageName,UserHandle.USER_ALL,true);
  }
synchronized (mPackages) {
    if (deletedPs != null) {
      if ((flags & PackageManager.DELETE_KEEP_DATA) == 0) {
        if (outInfo != null) {
          outInfo.removedAppId=mSettings.removePackageLPw(packageName);
        }
        if (deletedPs != null) {
          updatePermissionsLPw(deletedPs.name,null,0);
          if (deletedPs.sharedUser != null) {
            mSettings.updateSharedUserPermsLPw(deletedPs,mGlobalGids);
          }
        }
        clearPackagePreferredActivitiesLPw(deletedPs.name,UserHandle.USER_ALL);
      }
    }
    if (writeSettings) {
      mSettings.writeLPr();
    }
  }
  if (outInfo != null) {
    final int appId=outInfo.removedAppId;
    if (appId != -1) {
      final KeyStore keyStore=KeyStore.getInstance();
      if (keyStore != null) {
        for (        final int userId : sUserManager.getUserIds()) {
          keyStore.clearUid(UserHandle.getUid(userId,appId));
        }
      }
    }
  }
}
