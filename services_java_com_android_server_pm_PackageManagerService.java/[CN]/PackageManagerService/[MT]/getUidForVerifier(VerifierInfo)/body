{
synchronized (mPackages) {
    final PackageParser.Package pkg=mPackages.get(verifierInfo.packageName);
    if (pkg == null) {
      return -1;
    }
 else     if (pkg.mSignatures.length != 1) {
      Slog.i(TAG,"Verifier package " + verifierInfo.packageName + " has more than one signature; ignoring");
      return -1;
    }
    final byte[] expectedPublicKey;
    try {
      final Signature verifierSig=pkg.mSignatures[0];
      final PublicKey publicKey=verifierSig.getPublicKey();
      expectedPublicKey=publicKey.getEncoded();
    }
 catch (    CertificateException e) {
      return -1;
    }
    final byte[] actualPublicKey=verifierInfo.publicKey.getEncoded();
    if (!Arrays.equals(actualPublicKey,expectedPublicKey)) {
      Slog.i(TAG,"Verifier package " + verifierInfo.packageName + " does not have the expected public key; ignoring");
      return -1;
    }
    return pkg.applicationInfo.uid;
  }
}
