{
  PackageMonitor monitor=new PackageMonitor(){
    @Override public void onPackageModified(    String packageName){
synchronized (mLock) {
        UserState userState=getOrCreateUserStateLocked(getChangingUserId());
        Iterator<ComponentName> iterator=userState.getEnabledServices().iterator();
        while (iterator.hasNext()) {
          ComponentName componentName=iterator.next();
          if (packageName.equals(componentName.getPackageName())) {
            userState.updateIfNeededLocked();
          }
        }
      }
    }
    @Override public void onPackageRemoved(    String packageName,    int uid){
synchronized (mLock) {
        UserState userState=getOrCreateUserStateLocked(getChangingUserId());
        Iterator<ComponentName> iterator=userState.getEnabledServices().iterator();
        while (iterator.hasNext()) {
          ComponentName componentName=iterator.next();
          if (packageName.equals(componentName.getPackageName())) {
            iterator.remove();
            persistComponentNamesToSettingLocked(Settings.Secure.ENABLED_PRINT_SERVICES,userState.getEnabledServices(),getChangingUserId());
            userState.updateIfNeededLocked();
            return;
          }
        }
      }
    }
    @Override public boolean onHandleForceStop(    Intent intent,    String[] stoppedPackages,    int uid,    boolean doit){
synchronized (mLock) {
        UserState userState=getOrCreateUserStateLocked(getChangingUserId());
        boolean stoppedSomePackages=false;
        Iterator<ComponentName> iterator=userState.getEnabledServices().iterator();
        while (iterator.hasNext()) {
          ComponentName componentName=iterator.next();
          String componentPackage=componentName.getPackageName();
          for (          String stoppedPackage : stoppedPackages) {
            if (componentPackage.equals(stoppedPackage)) {
              if (!doit) {
                return true;
              }
              stoppedSomePackages=true;
              break;
            }
          }
        }
        if (stoppedSomePackages) {
          userState.updateIfNeededLocked();
        }
        return false;
      }
    }
    @Override public void onPackageAdded(    String packageName,    int uid){
      Intent intent=new Intent(android.printservice.PrintService.SERVICE_INTERFACE);
      intent.setPackage(packageName);
      List<ResolveInfo> installedServices=mContext.getPackageManager().queryIntentServicesAsUser(intent,PackageManager.GET_SERVICES,getChangingUserId());
      if (installedServices == null) {
        return;
      }
      final int installedServiceCount=installedServices.size();
      for (int i=0; i < installedServiceCount; i++) {
        ServiceInfo serviceInfo=installedServices.get(i).serviceInfo;
        ComponentName component=new ComponentName(serviceInfo.packageName,serviceInfo.name);
        String label=serviceInfo.loadLabel(mContext.getPackageManager()).toString();
        showEnableInstalledPrintServiceNotification(component,label,getChangingUserId());
      }
    }
    private void persistComponentNamesToSettingLocked(    String settingName,    Set<ComponentName> componentNames,    int userId){
      StringBuilder builder=new StringBuilder();
      for (      ComponentName componentName : componentNames) {
        if (builder.length() > 0) {
          builder.append(COMPONENT_NAME_SEPARATOR);
        }
        builder.append(componentName.flattenToShortString());
      }
      Settings.Secure.putStringForUser(mContext.getContentResolver(),settingName,builder.toString(),userId);
    }
  }
;
  monitor.register(mContext,BackgroundThread.getHandler().getLooper(),UserHandle.ALL,true);
  IntentFilter intentFilter=new IntentFilter();
  intentFilter.addAction(Intent.ACTION_USER_SWITCHED);
  intentFilter.addAction(Intent.ACTION_USER_REMOVED);
  mContext.registerReceiverAsUser(new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      String action=intent.getAction();
      if (Intent.ACTION_USER_SWITCHED.equals(action)) {
        switchUser(intent.getIntExtra(Intent.EXTRA_USER_HANDLE,0));
      }
 else       if (Intent.ACTION_USER_REMOVED.equals(action)) {
        removeUser(intent.getIntExtra(Intent.EXTRA_USER_HANDLE,0));
      }
    }
  }
,UserHandle.ALL,intentFilter,null,BackgroundThread.getHandler());
}
