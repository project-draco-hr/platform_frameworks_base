{
  PackageMonitor monitor=new PackageMonitor(){
    @Override public void onSomePackagesChanged(){
synchronized (mLock) {
        if (getChangingUserId() != mCurrentUserId) {
          return;
        }
        if (readConfigurationForUserStateLocked()) {
          onUserStateChangedLocked();
        }
      }
    }
    @Override public void onPackageRemoved(    String packageName,    int uid){
synchronized (mLock) {
        if (getChangingUserId() != mCurrentUserId) {
          return;
        }
        Iterator<ComponentName> iterator=mEnabledServiceNames.iterator();
        while (iterator.hasNext()) {
          ComponentName componentName=iterator.next();
          if (packageName.equals(componentName.getPackageName())) {
            iterator.remove();
            onEnabledServiceNamesChangedLocked();
            return;
          }
        }
      }
    }
    @Override public boolean onHandleForceStop(    Intent intent,    String[] stoppedPackages,    int uid,    boolean doit){
synchronized (mLock) {
        if (getChangingUserId() != mCurrentUserId) {
          return false;
        }
        Iterator<ComponentName> iterator=mEnabledServiceNames.iterator();
        while (iterator.hasNext()) {
          ComponentName componentName=iterator.next();
          String componentPackage=componentName.getPackageName();
          for (          String stoppedPackage : stoppedPackages) {
            if (componentPackage.equals(stoppedPackage)) {
              if (!doit) {
                return true;
              }
              iterator.remove();
              onEnabledServiceNamesChangedLocked();
            }
          }
        }
        return false;
      }
    }
    private void onEnabledServiceNamesChangedLocked(){
      persistComponentNamesToSettingLocked(Settings.Secure.ENABLED_PRINT_SERVICES,mEnabledServiceNames,mCurrentUserId);
      onUserStateChangedLocked();
    }
  }
;
  monitor.register(mContext,null,UserHandle.ALL,true);
  IntentFilter intentFilter=new IntentFilter();
  intentFilter.addAction(Intent.ACTION_USER_SWITCHED);
  mContext.registerReceiverAsUser(new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      String action=intent.getAction();
      if (Intent.ACTION_USER_SWITCHED.equals(action)) {
        switchUser(intent.getIntExtra(Intent.EXTRA_USER_HANDLE,0));
      }
    }
  }
,UserHandle.ALL,intentFilter,null,null);
}
