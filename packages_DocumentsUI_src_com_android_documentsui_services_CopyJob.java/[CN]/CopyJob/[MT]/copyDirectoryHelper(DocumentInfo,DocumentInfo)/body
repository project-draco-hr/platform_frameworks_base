{
  final String queryColumns[]=new String[]{Document.COLUMN_DISPLAY_NAME,Document.COLUMN_DOCUMENT_ID,Document.COLUMN_MIME_TYPE,Document.COLUMN_SIZE,Document.COLUMN_FLAGS};
  Cursor cursor=null;
  boolean success=true;
  final Uri queryUri=buildChildDocumentsUri(srcDir.authority,srcDir.documentId);
  try {
    try {
      cursor=getClient(srcDir).query(queryUri,queryColumns,null,null,null);
    }
 catch (    RemoteException|RuntimeException e) {
      throw new ResourceException("Failed to query children of %s due to an exception.",srcDir.derivedUri,e);
    }
    DocumentInfo src;
    while (cursor.moveToNext() && !isCanceled()) {
      try {
        src=DocumentInfo.fromCursor(cursor,srcDir.authority);
        processDocument(src,srcDir,destDir);
      }
 catch (      RuntimeException e) {
        Log.e(TAG,"Failed to recursively process a file %s due to an exception.".format(srcDir.derivedUri.toString()),e);
        success=false;
      }
    }
  }
 catch (  RuntimeException e) {
    Log.e(TAG,"Failed to copy a file %s to %s. ".format(srcDir.derivedUri.toString(),destDir.derivedUri.toString()),e);
    success=false;
  }
 finally {
    IoUtils.closeQuietly(cursor);
  }
  if (!success) {
    throw new RuntimeException("Some files failed to copy during a recursive " + "directory copy.");
  }
}
