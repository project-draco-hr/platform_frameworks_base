{
  mSnapshotCpuTime=Process.getElapsedCpuTime() - mSnapshotCpuTime;
  mSnapshotExecTime=SystemClock.uptimeMillis() - mSnapshotExecTime;
  stopAllocCounting();
  long nativeMax=Debug.getNativeHeapSize() / 1024;
  long nativeAllocated=Debug.getNativeHeapAllocatedSize() / 1024;
  long nativeFree=Debug.getNativeHeapFreeSize() / 1024;
  Debug.MemoryInfo memInfo=new Debug.MemoryInfo();
  Debug.getMemoryInfo(memInfo);
  Runtime runtime=Runtime.getRuntime();
  long dalvikMax=runtime.totalMemory() / 1024;
  long dalvikFree=runtime.freeMemory() / 1024;
  long dalvikAllocated=dalvikMax - dalvikFree;
  Bundle binderCounts=getBinderCounts();
  for (  String key : binderCounts.keySet()) {
    mPerfSnapshot.putLong(key,binderCounts.getLong(key));
  }
  Bundle allocCounts=getAllocCounts();
  for (  String key : allocCounts.keySet()) {
    mPerfSnapshot.putLong(key,allocCounts.getLong(key));
  }
  mPerfSnapshot.putLong(METRIC_KEY_EXECUTION_TIME,mSnapshotExecTime);
  mPerfSnapshot.putLong(METRIC_KEY_CPU_TIME,mSnapshotCpuTime);
  mPerfSnapshot.putLong(METRIC_KEY_NATIVE_SIZE,nativeMax);
  mPerfSnapshot.putLong(METRIC_KEY_NATIVE_ALLOCATED,nativeAllocated);
  mPerfSnapshot.putLong(METRIC_KEY_NATIVE_FREE,nativeFree);
  mPerfSnapshot.putLong(METRIC_KEY_NATIVE_PSS,memInfo.nativePss);
  mPerfSnapshot.putLong(METRIC_KEY_NATIVE_PRIVATE_DIRTY,memInfo.nativePrivateDirty);
  mPerfSnapshot.putLong(METRIC_KEY_NATIVE_SHARED_DIRTY,memInfo.nativeSharedDirty);
  mPerfSnapshot.putLong(METRIC_KEY_JAVA_SIZE,dalvikMax);
  mPerfSnapshot.putLong(METRIC_KEY_JAVA_ALLOCATED,dalvikAllocated);
  mPerfSnapshot.putLong(METRIC_KEY_JAVA_FREE,dalvikFree);
  mPerfSnapshot.putLong(METRIC_KEY_JAVA_PSS,memInfo.dalvikPss);
  mPerfSnapshot.putLong(METRIC_KEY_JAVA_PRIVATE_DIRTY,memInfo.dalvikPrivateDirty);
  mPerfSnapshot.putLong(METRIC_KEY_JAVA_SHARED_DIRTY,memInfo.dalvikSharedDirty);
  mPerfSnapshot.putLong(METRIC_KEY_OTHER_PSS,memInfo.otherPss);
  mPerfSnapshot.putLong(METRIC_KEY_OTHER_PRIVATE_DIRTY,memInfo.otherPrivateDirty);
  mPerfSnapshot.putLong(METRIC_KEY_OTHER_SHARED_DIRTY,memInfo.otherSharedDirty);
}
