{
  HandlerCaller.SomeArgs args;
switch (msg.what) {
case MSG_SHOW_IM_PICKER:
    showInputMethodMenu();
  return true;
case MSG_UNBIND_INPUT:
try {
  ((IInputMethod)msg.obj).unbindInput();
}
 catch (RemoteException e) {
}
return true;
case MSG_BIND_INPUT:
args=(HandlerCaller.SomeArgs)msg.obj;
try {
((IInputMethod)args.arg1).bindInput((InputBinding)args.arg2);
}
 catch (RemoteException e) {
}
return true;
case MSG_SHOW_SOFT_INPUT:
try {
((IInputMethod)msg.obj).showSoftInput();
}
 catch (RemoteException e) {
}
return true;
case MSG_HIDE_SOFT_INPUT:
try {
((IInputMethod)msg.obj).hideSoftInput();
}
 catch (RemoteException e) {
}
return true;
case MSG_ATTACH_TOKEN:
args=(HandlerCaller.SomeArgs)msg.obj;
try {
((IInputMethod)args.arg1).attachToken((IBinder)args.arg2);
}
 catch (RemoteException e) {
}
return true;
case MSG_CREATE_SESSION:
args=(HandlerCaller.SomeArgs)msg.obj;
try {
((IInputMethod)args.arg1).createSession((IInputMethodCallback)args.arg2);
}
 catch (RemoteException e) {
}
return true;
case MSG_START_INPUT:
args=(HandlerCaller.SomeArgs)msg.obj;
try {
SessionState session=(SessionState)args.arg1;
setEnabledSessionInMainThread(session);
session.method.startInput((EditorInfo)args.arg2);
}
 catch (RemoteException e) {
}
return true;
case MSG_RESTART_INPUT:
args=(HandlerCaller.SomeArgs)msg.obj;
try {
SessionState session=(SessionState)args.arg1;
setEnabledSessionInMainThread(session);
session.method.restartInput((EditorInfo)args.arg2);
}
 catch (RemoteException e) {
}
return true;
case MSG_UNBIND_METHOD:
try {
((IInputMethodClient)msg.obj).onUnbindMethod(msg.arg1);
}
 catch (RemoteException e) {
}
return true;
case MSG_BIND_METHOD:
args=(HandlerCaller.SomeArgs)msg.obj;
try {
((IInputMethodClient)args.arg1).onBindMethod((InputBindResult)args.arg2);
}
 catch (RemoteException e) {
Log.w(TAG,"Client died receiving input method " + args.arg2);
}
return true;
}
return false;
}
