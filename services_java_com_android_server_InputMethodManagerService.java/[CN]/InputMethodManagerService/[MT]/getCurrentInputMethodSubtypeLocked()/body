{
  if (mCurMethodId == null) {
    return null;
  }
  final boolean subtypeIsSelected=mSettings.getSelectedInputMethodSubtypeHashCode() != NOT_A_SUBTYPE_ID;
  final InputMethodInfo imi=mMethodMap.get(mCurMethodId);
  if (imi == null || imi.getSubtypeCount() == 0) {
    return null;
  }
  if (!subtypeIsSelected || mCurrentSubtype == null || !isValidSubtypeId(imi,mCurrentSubtype.hashCode())) {
    int subtypeId=getSelectedInputMethodSubtypeId(mCurMethodId);
    if (subtypeId == NOT_A_SUBTYPE_ID) {
      List<InputMethodSubtype> explicitlyOrImplicitlyEnabledSubtypes=getEnabledInputMethodSubtypeListLocked(imi,true);
      if (explicitlyOrImplicitlyEnabledSubtypes.size() == 1) {
        mCurrentSubtype=explicitlyOrImplicitlyEnabledSubtypes.get(0);
      }
 else       if (explicitlyOrImplicitlyEnabledSubtypes.size() > 1) {
        mCurrentSubtype=findLastResortApplicableSubtypeLocked(mRes,explicitlyOrImplicitlyEnabledSubtypes,SUBTYPE_MODE_KEYBOARD,null,true);
        if (mCurrentSubtype == null) {
          mCurrentSubtype=findLastResortApplicableSubtypeLocked(mRes,explicitlyOrImplicitlyEnabledSubtypes,null,null,true);
        }
      }
    }
 else {
      mCurrentSubtype=getSubtypes(imi).get(subtypeId);
    }
  }
  return mCurrentSubtype;
}
