{
  List<InputMethodInfo> imis=mSettings.getEnabledInputMethodListLocked();
  InputMethodInfo mostApplicableIMI=null;
  int mostApplicableSubtypeId=NOT_A_SUBTYPE_ID;
  boolean foundInSystemIME=false;
  for (  InputMethodInfo imi : imis) {
    int subtypeId=NOT_A_SUBTYPE_ID;
    if (mCurrentSubtype != null) {
      subtypeId=findLastResortApplicableSubtypeLocked(mSettings.getEnabledInputMethodSubtypeListLocked(imi),mode,mCurrentSubtype.getLocale(),NOT_A_SUBTYPE_ID);
      if (subtypeId == NOT_A_SUBTYPE_ID) {
        subtypeId=findLastResortApplicableSubtypeLocked(imi.getSubtypes(),mode,mCurrentSubtype.getLocale(),NOT_A_SUBTYPE_ID);
      }
    }
    if (subtypeId == NOT_A_SUBTYPE_ID) {
      subtypeId=findLastResortApplicableSubtypeLocked(mSettings.getEnabledInputMethodSubtypeListLocked(imi),mode,null,NOT_A_SUBTYPE_ID);
    }
    if (subtypeId == NOT_A_SUBTYPE_ID) {
      subtypeId=findLastResortApplicableSubtypeLocked(imi.getSubtypes(),mode,null,NOT_A_SUBTYPE_ID);
    }
    if (subtypeId != NOT_A_SUBTYPE_ID) {
      if (imi.getId().equals(mCurMethodId)) {
        mostApplicableIMI=imi;
        mostApplicableSubtypeId=subtypeId;
        break;
      }
 else       if ((imi.getServiceInfo().applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0) {
        mostApplicableIMI=imi;
        mostApplicableSubtypeId=subtypeId;
        foundInSystemIME=true;
      }
 else       if (!foundInSystemIME) {
        mostApplicableIMI=imi;
        mostApplicableSubtypeId=subtypeId;
      }
    }
  }
  if (DEBUG) {
    Slog.w(TAG,"Most applicable shortcut input method subtype was:" + mostApplicableIMI.getId() + ","+ mostApplicableSubtypeId);
  }
  if (mostApplicableIMI != null && mostApplicableSubtypeId != NOT_A_SUBTYPE_ID) {
    ArrayList<Parcelable> ret=new ArrayList<Parcelable>(2);
    return new Pair<InputMethodInfo,InputMethodSubtype>(mostApplicableIMI,mostApplicableIMI.getSubtypes().get(mostApplicableSubtypeId));
  }
 else {
    return null;
  }
}
