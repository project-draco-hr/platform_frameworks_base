{
  if (enabledMayChange) {
    List<InputMethodInfo> enabled=mSettings.getEnabledInputMethodListLocked();
    for (int i=0; i < enabled.size(); i++) {
      InputMethodInfo imm=enabled.get(i);
      try {
        ApplicationInfo ai=mIPackageManager.getApplicationInfo(imm.getPackageName(),PackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS,mSettings.getCurrentUserId());
        if (ai.enabledSetting == PackageManager.COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED) {
          mIPackageManager.setApplicationEnabledSetting(imm.getPackageName(),PackageManager.COMPONENT_ENABLED_STATE_DEFAULT,PackageManager.DONT_KILL_APP,mSettings.getCurrentUserId());
        }
      }
 catch (      RemoteException e) {
      }
    }
  }
  String id=mSettings.getSelectedInputMethod();
  if (TextUtils.isEmpty(id) && chooseNewDefaultIMELocked()) {
    id=mSettings.getSelectedInputMethod();
  }
  if (!TextUtils.isEmpty(id)) {
    try {
      setInputMethodLocked(id,mSettings.getSelectedInputMethodSubtypeId(id));
    }
 catch (    IllegalArgumentException e) {
      Slog.w(TAG,"Unknown input method from prefs: " + id,e);
      mCurMethodId=null;
      unbindCurrentMethodLocked(true,false);
    }
    mShortcutInputMethodsAndSubtypes.clear();
  }
 else {
    mCurMethodId=null;
    unbindCurrentMethodLocked(true,false);
  }
}
