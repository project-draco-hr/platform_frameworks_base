{
  final List<InputMethodSubtype> subtypes=getSubtypes(imi);
  final String systemLocale=res.getConfiguration().locale.toString();
  if (TextUtils.isEmpty(systemLocale))   return new ArrayList<InputMethodSubtype>();
  final HashMap<String,InputMethodSubtype> applicableModeAndSubtypesMap=new HashMap<String,InputMethodSubtype>();
  final int N=subtypes.size();
  boolean containsKeyboardSubtype=false;
  for (int i=0; i < N; ++i) {
    InputMethodSubtype subtype=subtypes.get(i);
    if (subtype.overridesImplicitlyEnabledSubtype()) {
      final String mode=subtype.getMode();
      if (!applicableModeAndSubtypesMap.containsKey(mode)) {
        applicableModeAndSubtypesMap.put(mode,subtype);
      }
    }
  }
  if (applicableModeAndSubtypesMap.size() > 0) {
    return new ArrayList<InputMethodSubtype>(applicableModeAndSubtypesMap.values());
  }
  for (int i=0; i < N; ++i) {
    final InputMethodSubtype subtype=subtypes.get(i);
    final String locale=subtype.getLocale();
    final String mode=subtype.getMode();
    if (systemLocale.startsWith(locale)) {
      final InputMethodSubtype applicableSubtype=applicableModeAndSubtypesMap.get(mode);
      if (applicableSubtype != null) {
        if (systemLocale.equals(applicableSubtype.getLocale()))         continue;
        if (!systemLocale.equals(locale))         continue;
      }
      applicableModeAndSubtypesMap.put(mode,subtype);
      if (!containsKeyboardSubtype && SUBTYPE_MODE_KEYBOARD.equalsIgnoreCase(subtype.getMode())) {
        containsKeyboardSubtype=true;
      }
    }
  }
  final ArrayList<InputMethodSubtype> applicableSubtypes=new ArrayList<InputMethodSubtype>(applicableModeAndSubtypesMap.values());
  if (!containsKeyboardSubtype) {
    InputMethodSubtype lastResortKeyboardSubtype=findLastResortApplicableSubtypeLocked(res,subtypes,SUBTYPE_MODE_KEYBOARD,systemLocale,true);
    if (lastResortKeyboardSubtype != null) {
      applicableSubtypes.add(lastResortKeyboardSubtype);
    }
  }
  return applicableSubtypes;
}
