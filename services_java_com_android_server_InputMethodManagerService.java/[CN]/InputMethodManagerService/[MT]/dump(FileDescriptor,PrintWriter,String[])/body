{
  if (mContext.checkCallingPermission("android.permission.DUMP") != PackageManager.PERMISSION_GRANTED) {
    pw.println("Permission Denial: can't dump InputMethodManager from from pid=" + Binder.getCallingPid() + ", uid="+ Binder.getCallingUid());
    return;
  }
synchronized (mMethodMap) {
    final Printer p=new PrintWriterPrinter(pw);
    p.println("Current Input Method Manager state:");
    int N=mMethodList.size();
    p.println("  Input Methods:");
    for (int i=0; i < N; i++) {
      InputMethodInfo info=mMethodList.get(i);
      p.println("  InputMethod #" + i + ":");
      info.dump(p,"    ");
    }
    p.println("  Clients:");
    for (    ClientState ci : mClients.values()) {
      p.println("  Client " + ci + ":");
      p.println("    client=" + ci.client);
      p.println("    inputContext=" + ci.inputContext);
      p.println("    sessionRequested=" + ci.sessionRequested);
      p.println("    curSession=" + ci.curSession);
    }
    p.println("  mInputMethodIcon=" + mInputMethodIcon);
    p.println("  mInputMethodData=" + mInputMethodData);
    p.println("  mCurrentMethod=" + mCurMethodId);
    p.println("  mCurSeq=" + mCurSeq + " mCurClient="+ mCurClient);
    p.println("  mCurId=" + mCurId + " mHaveConnect="+ mHaveConnection+ " mBoundToMethod="+ mBoundToMethod);
    p.println("  mCurToken=" + mCurToken);
    p.println("  mCurIntent=" + mCurIntent);
    p.println("  mCurMethod=" + mCurMethod);
    p.println("  mEnabledSession=" + mEnabledSession);
    p.println("  mShowRequested=" + mShowRequested + " mShowExplicitlyRequested="+ mShowExplicitlyRequested+ " mInputShown="+ mInputShown);
    p.println("  mScreenOn=" + mScreenOn);
  }
}
