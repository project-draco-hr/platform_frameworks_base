{
  if (DEBUG)   Slog.v(TAG,"Show switching menu");
  final Context context=mContext;
  final PackageManager pm=context.getPackageManager();
  String lastInputMethodId=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.DEFAULT_INPUT_METHOD);
  int lastInputMethodSubtypeId=getSelectedInputMethodSubtypeId(lastInputMethodId);
  if (DEBUG)   Slog.v(TAG,"Current IME: " + lastInputMethodId);
synchronized (mMethodMap) {
    final HashMap<InputMethodInfo,List<InputMethodSubtype>> immis=getExplicitlyOrImplicitlyEnabledInputMethodsAndSubtypeListLocked();
    if (immis == null || immis.size() == 0) {
      return;
    }
    hideInputMethodMenuLocked();
    final Map<CharSequence,Pair<InputMethodInfo,Integer>> imMap=new TreeMap<CharSequence,Pair<InputMethodInfo,Integer>>(Collator.getInstance());
    for (    InputMethodInfo imi : immis.keySet()) {
      if (imi == null)       continue;
      List<InputMethodSubtype> explicitlyOrImplicitlyEnabledSubtypeList=immis.get(imi);
      HashSet<String> enabledSubtypeSet=new HashSet<String>();
      for (      InputMethodSubtype subtype : explicitlyOrImplicitlyEnabledSubtypeList) {
        enabledSubtypeSet.add(String.valueOf(subtype.hashCode()));
      }
      ArrayList<InputMethodSubtype> subtypes=getSubtypes(imi);
      CharSequence label=imi.loadLabel(pm);
      if (showSubtypes && enabledSubtypeSet.size() > 0) {
        final int subtypeCount=imi.getSubtypeCount();
        for (int j=0; j < subtypeCount; ++j) {
          InputMethodSubtype subtype=imi.getSubtypeAt(j);
          if (enabledSubtypeSet.contains(String.valueOf(subtype.hashCode()))) {
            CharSequence title;
            int nameResId=subtype.getNameResId();
            String mode=subtype.getMode();
            if (nameResId != 0) {
              title=pm.getText(imi.getPackageName(),nameResId,imi.getServiceInfo().applicationInfo);
            }
 else {
              CharSequence language=subtype.getLocale();
              title=label + "," + (mode == null ? "" : mode)+ ","+ (language == null ? "" : language);
            }
            imMap.put(title,new Pair<InputMethodInfo,Integer>(imi,j));
          }
        }
      }
 else {
        imMap.put(label,new Pair<InputMethodInfo,Integer>(imi,NOT_A_SUBTYPE_ID));
      }
    }
    final int N=imMap.size();
    mItems=imMap.keySet().toArray(new CharSequence[N]);
    mIms=new InputMethodInfo[N];
    mSubtypeIds=new int[N];
    int checkedItem=0;
    for (int i=0; i < N; ++i) {
      Pair<InputMethodInfo,Integer> value=imMap.get(mItems[i]);
      mIms[i]=value.first;
      mSubtypeIds[i]=value.second;
      if (mIms[i].getId().equals(lastInputMethodId)) {
        int subtypeId=mSubtypeIds[i];
        if ((subtypeId == NOT_A_SUBTYPE_ID) || (lastInputMethodSubtypeId == NOT_A_SUBTYPE_ID && subtypeId == 0) || (subtypeId == lastInputMethodSubtypeId)) {
          checkedItem=i;
        }
      }
    }
    AlertDialog.OnClickListener adocl=new AlertDialog.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int which){
        hideInputMethodMenu();
      }
    }
;
    TypedArray a=context.obtainStyledAttributes(null,com.android.internal.R.styleable.DialogPreference,com.android.internal.R.attr.alertDialogStyle,0);
    mDialogBuilder=new AlertDialog.Builder(context).setTitle(com.android.internal.R.string.select_input_method).setOnCancelListener(new OnCancelListener(){
      public void onCancel(      DialogInterface dialog){
        hideInputMethodMenu();
      }
    }
).setIcon(a.getDrawable(com.android.internal.R.styleable.DialogPreference_dialogTitle));
    a.recycle();
    mDialogBuilder.setSingleChoiceItems(mItems,checkedItem,new AlertDialog.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int which){
synchronized (mMethodMap) {
          if (mIms == null || mIms.length <= which || mSubtypeIds == null || mSubtypeIds.length <= which) {
            return;
          }
          InputMethodInfo im=mIms[which];
          int subtypeId=mSubtypeIds[which];
          hideInputMethodMenu();
          if (im != null) {
            if ((subtypeId < 0) || (subtypeId >= im.getSubtypeCount())) {
              subtypeId=NOT_A_SUBTYPE_ID;
            }
            setInputMethodLocked(im.getId(),subtypeId);
          }
        }
      }
    }
);
    if (showSubtypes) {
      mDialogBuilder.setPositiveButton(com.android.internal.R.string.configure_input_methods,new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int whichButton){
          showConfigureInputMethods();
        }
      }
);
    }
    mSwitchingDialog=mDialogBuilder.create();
    mSwitchingDialog.getWindow().setType(WindowManager.LayoutParams.TYPE_INPUT_METHOD_DIALOG);
    mSwitchingDialog.show();
  }
}
