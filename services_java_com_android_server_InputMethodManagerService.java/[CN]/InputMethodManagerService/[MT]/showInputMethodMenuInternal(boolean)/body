{
  if (DEBUG)   Slog.v(TAG,"Show switching menu");
  final Context context=mContext;
  final PackageManager pm=context.getPackageManager();
  final boolean isScreenLocked=mKeyguardManager != null && mKeyguardManager.isKeyguardLocked() && mKeyguardManager.isKeyguardSecure();
  String lastInputMethodId=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.DEFAULT_INPUT_METHOD);
  int lastInputMethodSubtypeId=getSelectedInputMethodSubtypeId(lastInputMethodId);
  if (DEBUG)   Slog.v(TAG,"Current IME: " + lastInputMethodId);
synchronized (mMethodMap) {
    final HashMap<InputMethodInfo,List<InputMethodSubtype>> immis=getExplicitlyOrImplicitlyEnabledInputMethodsAndSubtypeListLocked();
    if (immis == null || immis.size() == 0) {
      return;
    }
    hideInputMethodMenuLocked();
    final List<ImeSubtypeListItem> imList=mImListManager.getSortedInputMethodAndSubtypeList(showSubtypes,mInputShown,isScreenLocked);
    if (lastInputMethodSubtypeId == NOT_A_SUBTYPE_ID) {
      final InputMethodSubtype currentSubtype=getCurrentInputMethodSubtype();
      if (currentSubtype != null) {
        final InputMethodInfo currentImi=mMethodMap.get(mCurMethodId);
        lastInputMethodSubtypeId=getSubtypeIdFromHashCode(currentImi,currentSubtype.hashCode());
      }
    }
    final int N=imList.size();
    mIms=new InputMethodInfo[N];
    mSubtypeIds=new int[N];
    int checkedItem=0;
    for (int i=0; i < N; ++i) {
      final ImeSubtypeListItem item=imList.get(i);
      mIms[i]=item.mImi;
      mSubtypeIds[i]=item.mSubtypeId;
      if (mIms[i].getId().equals(lastInputMethodId)) {
        int subtypeId=mSubtypeIds[i];
        if ((subtypeId == NOT_A_SUBTYPE_ID) || (lastInputMethodSubtypeId == NOT_A_SUBTYPE_ID && subtypeId == 0) || (subtypeId == lastInputMethodSubtypeId)) {
          checkedItem=i;
        }
      }
    }
    final TypedArray a=context.obtainStyledAttributes(null,com.android.internal.R.styleable.DialogPreference,com.android.internal.R.attr.alertDialogStyle,0);
    mDialogBuilder=new AlertDialog.Builder(context).setTitle(com.android.internal.R.string.select_input_method).setOnCancelListener(new OnCancelListener(){
      @Override public void onCancel(      DialogInterface dialog){
        hideInputMethodMenu();
      }
    }
).setIcon(a.getDrawable(com.android.internal.R.styleable.DialogPreference_dialogTitle));
    a.recycle();
    final ImeSubtypeListAdapter adapter=new ImeSubtypeListAdapter(context,com.android.internal.R.layout.simple_list_item_2_single_choice,imList,checkedItem);
    mDialogBuilder.setSingleChoiceItems(adapter,checkedItem,new AlertDialog.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
synchronized (mMethodMap) {
          if (mIms == null || mIms.length <= which || mSubtypeIds == null || mSubtypeIds.length <= which) {
            return;
          }
          InputMethodInfo im=mIms[which];
          int subtypeId=mSubtypeIds[which];
          hideInputMethodMenu();
          if (im != null) {
            if ((subtypeId < 0) || (subtypeId >= im.getSubtypeCount())) {
              subtypeId=NOT_A_SUBTYPE_ID;
            }
            setInputMethodLocked(im.getId(),subtypeId);
          }
        }
      }
    }
);
    if (showSubtypes && !isScreenLocked) {
      mDialogBuilder.setPositiveButton(com.android.internal.R.string.configure_input_methods,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int whichButton){
          showConfigureInputMethods();
        }
      }
);
    }
    mSwitchingDialog=mDialogBuilder.create();
    mSwitchingDialog.setCanceledOnTouchOutside(true);
    mSwitchingDialog.getWindow().setType(WindowManager.LayoutParams.TYPE_INPUT_METHOD_DIALOG);
    mSwitchingDialog.getWindow().getAttributes().setTitle("Select input method");
    mSwitchingDialog.show();
  }
}
