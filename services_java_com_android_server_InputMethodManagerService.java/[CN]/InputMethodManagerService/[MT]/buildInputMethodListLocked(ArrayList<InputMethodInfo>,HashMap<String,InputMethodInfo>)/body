{
  if (DEBUG) {
    Slog.d(TAG,"--- re-buildInputMethodList " + ", \n ------ \n" + getStackTrace());
  }
  list.clear();
  map.clear();
  final PackageManager pm=mContext.getPackageManager();
  String disabledSysImes=mSettings.getDisabledSystemInputMethods();
  if (disabledSysImes == null)   disabledSysImes="";
  final List<ResolveInfo> services=pm.queryIntentServicesAsUser(new Intent(InputMethod.SERVICE_INTERFACE),PackageManager.GET_META_DATA | PackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS,mSettings.getCurrentUserId());
  final HashMap<String,List<InputMethodSubtype>> additionalSubtypes=mFileManager.getAllAdditionalInputMethodSubtypes();
  for (int i=0; i < services.size(); ++i) {
    ResolveInfo ri=services.get(i);
    ServiceInfo si=ri.serviceInfo;
    ComponentName compName=new ComponentName(si.packageName,si.name);
    if (!android.Manifest.permission.BIND_INPUT_METHOD.equals(si.permission)) {
      Slog.w(TAG,"Skipping input method " + compName + ": it does not require the permission "+ android.Manifest.permission.BIND_INPUT_METHOD);
      continue;
    }
    if (DEBUG)     Slog.d(TAG,"Checking " + compName);
    try {
      InputMethodInfo p=new InputMethodInfo(mContext,ri,additionalSubtypes);
      list.add(p);
      final String id=p.getId();
      map.put(id,p);
      if (InputMethodUtils.isDefaultEnabledIme(mSystemReady,p,mContext)) {
        setInputMethodEnabledLocked(id,true);
      }
      if (DEBUG) {
        Slog.d(TAG,"Found a third-party input method " + p);
      }
    }
 catch (    XmlPullParserException e) {
      Slog.w(TAG,"Unable to load input method " + compName,e);
    }
catch (    IOException e) {
      Slog.w(TAG,"Unable to load input method " + compName,e);
    }
  }
  final String defaultImiId=mSettings.getSelectedInputMethod();
  if (!TextUtils.isEmpty(defaultImiId)) {
    if (!map.containsKey(defaultImiId)) {
      Slog.w(TAG,"Default IME is uninstalled. Choose new default IME.");
      if (chooseNewDefaultIMELocked()) {
        updateFromSettingsLocked(true);
      }
    }
 else {
      setInputMethodEnabledLocked(defaultImiId,true);
    }
  }
}
