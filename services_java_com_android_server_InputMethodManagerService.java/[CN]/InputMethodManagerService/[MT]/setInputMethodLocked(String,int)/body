{
  InputMethodInfo info=mMethodMap.get(id);
  if (info == null) {
    throw new IllegalArgumentException("Unknown id: " + id);
  }
  if (id.equals(mCurMethodId)) {
    final int subtypeCount=info.getSubtypeCount();
    if (subtypeCount <= 0) {
      return;
    }
    final InputMethodSubtype oldSubtype=mCurrentSubtype;
    final InputMethodSubtype newSubtype;
    if (subtypeId >= 0 && subtypeId < subtypeCount) {
      newSubtype=info.getSubtypeAt(subtypeId);
    }
 else {
      newSubtype=getCurrentInputMethodSubtypeLocked();
    }
    if (newSubtype == null || oldSubtype == null) {
      Slog.w(TAG,"Illegal subtype state: old subtype = " + oldSubtype + ", new subtype = "+ newSubtype);
      return;
    }
    if (newSubtype != oldSubtype) {
      setSelectedInputMethodAndSubtypeLocked(info,subtypeId,true);
      if (mCurMethod != null) {
        try {
          refreshImeWindowVisibilityLocked();
          mCurMethod.changeInputMethodSubtype(newSubtype);
        }
 catch (        RemoteException e) {
          Slog.w(TAG,"Failed to call changeInputMethodSubtype");
        }
      }
    }
    return;
  }
  final long ident=Binder.clearCallingIdentity();
  try {
    setSelectedInputMethodAndSubtypeLocked(info,subtypeId,false);
    mCurMethodId=id;
    if (ActivityManagerNative.isSystemReady()) {
      Intent intent=new Intent(Intent.ACTION_INPUT_METHOD_CHANGED);
      intent.addFlags(Intent.FLAG_RECEIVER_REPLACE_PENDING);
      intent.putExtra("input_method_id",id);
      mContext.sendBroadcast(intent);
    }
    unbindCurrentClientLocked();
  }
  finally {
    Binder.restoreCallingIdentity(ident);
  }
}
