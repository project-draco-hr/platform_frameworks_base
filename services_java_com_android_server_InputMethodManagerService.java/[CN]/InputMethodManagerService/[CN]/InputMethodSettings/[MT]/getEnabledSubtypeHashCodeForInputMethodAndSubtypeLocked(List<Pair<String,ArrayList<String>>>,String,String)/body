{
  for (  Pair<String,ArrayList<String>> enabledIme : enabledImes) {
    if (enabledIme.first.equals(imeId)) {
      final ArrayList<String> explicitlyEnabledSubtypes=enabledIme.second;
      if (explicitlyEnabledSubtypes.size() == 0) {
        InputMethodInfo ime=mMethodMap.get(imeId);
        if (ime != null && ime.getSubtypes().size() > 0) {
          List<InputMethodSubtype> implicitlySelectedSubtypes=getApplicableSubtypesLocked(mRes,ime.getSubtypes());
          if (implicitlySelectedSubtypes != null) {
            final int N=implicitlySelectedSubtypes.size();
            for (int i=0; i < N; ++i) {
              final InputMethodSubtype st=implicitlySelectedSubtypes.get(i);
              if (String.valueOf(st.hashCode()).equals(subtypeHashCode)) {
                return subtypeHashCode;
              }
            }
          }
        }
      }
 else {
        for (        String s : explicitlyEnabledSubtypes) {
          if (s.equals(subtypeHashCode)) {
            return s;
          }
        }
      }
      return NOT_A_SUBTYPE_ID_STR;
    }
  }
  return null;
}
