{
  for (  Pair<String,ArrayList<String>> enabledIme : enabledImes) {
    if (enabledIme.first.equals(imeId)) {
      final ArrayList<String> explicitlyEnabledSubtypes=enabledIme.second;
      final InputMethodInfo imi=mMethodMap.get(imeId);
      if (explicitlyEnabledSubtypes.size() == 0) {
        if (imi != null && imi.getSubtypeCount() > 0) {
          List<InputMethodSubtype> implicitlySelectedSubtypes=getImplicitlyApplicableSubtypesLocked(mRes,imi);
          if (implicitlySelectedSubtypes != null) {
            final int N=implicitlySelectedSubtypes.size();
            for (int i=0; i < N; ++i) {
              final InputMethodSubtype st=implicitlySelectedSubtypes.get(i);
              if (String.valueOf(st.hashCode()).equals(subtypeHashCode)) {
                return subtypeHashCode;
              }
            }
          }
        }
      }
 else {
        for (        String s : explicitlyEnabledSubtypes) {
          if (s.equals(subtypeHashCode)) {
            try {
              final int hashCode=Integer.valueOf(subtypeHashCode);
              if (isValidSubtypeId(imi,hashCode)) {
                return s;
              }
 else {
                return NOT_A_SUBTYPE_ID_STR;
              }
            }
 catch (            NumberFormatException e) {
              return NOT_A_SUBTYPE_ID_STR;
            }
          }
        }
      }
      return NOT_A_SUBTYPE_ID_STR;
    }
  }
  return null;
}
