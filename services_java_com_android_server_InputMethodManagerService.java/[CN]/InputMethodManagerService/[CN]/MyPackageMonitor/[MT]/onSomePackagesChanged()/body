{
synchronized (mMethodMap) {
    InputMethodInfo curIm=null;
    String curInputMethodId=Settings.Secure.getString(mContext.getContentResolver(),Settings.Secure.DEFAULT_INPUT_METHOD);
    final int N=mMethodList.size();
    if (curInputMethodId != null) {
      for (int i=0; i < N; i++) {
        InputMethodInfo imi=mMethodList.get(i);
        if (imi.getId().equals(curInputMethodId)) {
          curIm=imi;
        }
        int change=isPackageDisappearing(imi.getPackageName());
        if (change == PACKAGE_TEMPORARY_CHANGE || change == PACKAGE_PERMANENT_CHANGE) {
          Slog.i(TAG,"Input method uninstalled, disabling: " + imi.getComponent());
          setInputMethodEnabledLocked(imi.getId(),false);
        }
      }
    }
    buildInputMethodListLocked(mMethodList,mMethodMap);
    boolean changed=false;
    if (curIm != null) {
      int change=isPackageDisappearing(curIm.getPackageName());
      if (change == PACKAGE_TEMPORARY_CHANGE || change == PACKAGE_PERMANENT_CHANGE) {
        ServiceInfo si=null;
        try {
          si=mContext.getPackageManager().getServiceInfo(curIm.getComponent(),0);
        }
 catch (        PackageManager.NameNotFoundException ex) {
        }
        if (si == null) {
          Slog.i(TAG,"Current input method removed: " + curInputMethodId);
          if (!chooseNewDefaultIMELocked()) {
            changed=true;
            curIm=null;
            curInputMethodId="";
            Slog.i(TAG,"Unsetting current input method");
            Settings.Secure.putString(mContext.getContentResolver(),Settings.Secure.DEFAULT_INPUT_METHOD,curInputMethodId);
          }
        }
      }
    }
    if (curIm == null) {
      changed=chooseNewDefaultIMELocked();
    }
    if (changed) {
      updateFromSettingsLocked();
    }
  }
}
