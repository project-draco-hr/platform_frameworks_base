{
  if (!isChangingPackagesOfCurrentUser()) {
    return;
  }
synchronized (mMethodMap) {
    InputMethodInfo curIm=null;
    String curInputMethodId=mSettings.getSelectedInputMethod();
    final int N=mMethodList.size();
    if (curInputMethodId != null) {
      for (int i=0; i < N; i++) {
        InputMethodInfo imi=mMethodList.get(i);
        final String imiId=imi.getId();
        if (imiId.equals(curInputMethodId)) {
          curIm=imi;
        }
        int change=isPackageDisappearing(imi.getPackageName());
        if (isPackageModified(imi.getPackageName())) {
          mFileManager.deleteAllInputMethodSubtypes(imiId);
        }
        if (change == PACKAGE_TEMPORARY_CHANGE || change == PACKAGE_PERMANENT_CHANGE) {
          Slog.i(TAG,"Input method uninstalled, disabling: " + imi.getComponent());
          setInputMethodEnabledLocked(imi.getId(),false);
        }
      }
    }
    buildInputMethodListLocked(mMethodList,mMethodMap);
    boolean changed=false;
    if (curIm != null) {
      int change=isPackageDisappearing(curIm.getPackageName());
      if (change == PACKAGE_TEMPORARY_CHANGE || change == PACKAGE_PERMANENT_CHANGE) {
        ServiceInfo si=null;
        try {
          si=mIPackageManager.getServiceInfo(curIm.getComponent(),0,mSettings.getCurrentUserId());
        }
 catch (        RemoteException ex) {
        }
        if (si == null) {
          Slog.i(TAG,"Current input method removed: " + curInputMethodId);
          setImeWindowVisibilityStatusHiddenLocked();
          if (!chooseNewDefaultIMELocked()) {
            changed=true;
            curIm=null;
            Slog.i(TAG,"Unsetting current input method");
            resetSelectedInputMethodAndSubtypeLocked("");
          }
        }
      }
    }
    if (curIm == null) {
      changed=chooseNewDefaultIMELocked();
    }
    if (changed) {
      updateFromSettingsLocked(false);
    }
  }
}
