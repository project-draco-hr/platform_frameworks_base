{
  boolean res=(enableNative() == 0);
  if (res) {
    int retryCount=2;
    boolean running=false;
    while ((retryCount-- > 0) && !running) {
      mEventLoop.start();
      int pollCount=5;
      while ((pollCount-- > 0) && !running) {
        if (mEventLoop.isEventLoopRunning()) {
          running=true;
          break;
        }
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
        }
      }
    }
    if (!running) {
      log("bt EnableThread giving up");
      res=false;
      disableNative();
    }
  }
  if (mEnableCallback != null) {
    try {
      mEnableCallback.onEnableResult(res ? BluetoothDevice.RESULT_SUCCESS : BluetoothDevice.RESULT_FAILURE);
    }
 catch (    RemoteException e) {
    }
  }
  if (res) {
    mIsEnabled=true;
    if (mSaveSetting) {
      persistBluetoothOnSetting(true);
    }
    mIsDiscovering=false;
    mBondState.loadBondState();
    mHandler.sendMessageDelayed(mHandler.obtainMessage(REGISTER_SDP_RECORDS),3000);
    mEventLoop.onModeChanged(getModeNative());
  }
  Intent intent=null;
  if (res) {
    intent=new Intent(BluetoothIntent.ENABLED_ACTION);
  }
 else {
    intent=new Intent(BluetoothIntent.DISABLED_ACTION);
  }
  intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT);
  mContext.sendBroadcast(intent,BLUETOOTH_PERM);
  mEnableThread=null;
}
