{
  if (mIsEnabled) {
    pw.println("\nBluetooth ENABLED: " + getAddress() + " ("+ getName()+ ")");
    pw.println("\nisDiscovering() = " + isDiscovering());
    BluetoothHeadset headset=new BluetoothHeadset(mContext,null);
    String[] addresses=listRemoteDevices();
    pw.println("\n--Known devices--");
    for (    String address : addresses) {
      pw.printf("%s %10s (%d) %s\n",address,toBondStateString(mBondState.getBondState(address)),mBondState.getAttempt(address),getRemoteName(address));
    }
    addresses=listAclConnections();
    pw.println("\n--ACL connected devices--");
    for (    String address : addresses) {
      pw.println(address);
    }
    pw.println("\n--Headset Service--");
switch (headset.getState()) {
case BluetoothHeadset.STATE_DISCONNECTED:
      pw.println("getState() = STATE_DISCONNECTED");
    break;
case BluetoothHeadset.STATE_CONNECTING:
  pw.println("getState() = STATE_CONNECTING");
break;
case BluetoothHeadset.STATE_CONNECTED:
pw.println("getState() = STATE_CONNECTED");
break;
case BluetoothHeadset.STATE_ERROR:
pw.println("getState() = STATE_ERROR");
break;
}
pw.println("getHeadsetAddress() = " + headset.getHeadsetAddress());
headset.close();
}
 else {
pw.println("\nBluetooth DISABLED");
}
pw.println("\nmIsAirplaneSensitive = " + mIsAirplaneSensitive);
}
