{
  boolean isRunning=false;
  if (mFocusAnimator != null) {
    isRunning=mFocusAnimator.isRunning();
    mFocusAnimator.removeAllListeners();
    mFocusAnimator.cancel();
  }
  if (focused) {
    int secondaryColor=getSecondaryColor(mCurrentPrimaryColor,mCurrentPrimaryColorIsDark);
    int[][] states=new int[][]{new int[]{android.R.attr.state_enabled},new int[]{android.R.attr.state_pressed}};
    int[] newStates=new int[]{android.R.attr.state_enabled,android.R.attr.state_pressed};
    int[] colors=new int[]{secondaryColor,secondaryColor};
    mBackground.setColor(new ColorStateList(states,colors));
    mBackground.setState(newStates);
    int currentColor=mBackgroundColor.getColor();
    int lightPrimaryColor=getSecondaryColor(mCurrentPrimaryColor,mCurrentPrimaryColorIsDark);
    ValueAnimator backgroundColor=ValueAnimator.ofObject(new ArgbEvaluator(),lightPrimaryColor,currentColor);
    backgroundColor.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationStart(      Animator animation){
        mBackground.setState(new int[]{});
      }
    }
);
    backgroundColor.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
      @Override public void onAnimationUpdate(      ValueAnimator animation){
        mBackgroundColor.setColor((Integer)animation.getAnimatedValue());
      }
    }
);
    backgroundColor.setRepeatCount(ValueAnimator.INFINITE);
    backgroundColor.setRepeatMode(ValueAnimator.REVERSE);
    ObjectAnimator translation=ObjectAnimator.ofFloat(this,"translationZ",15f);
    translation.setRepeatCount(ValueAnimator.INFINITE);
    translation.setRepeatMode(ValueAnimator.REVERSE);
    mFocusAnimator=new AnimatorSet();
    mFocusAnimator.playTogether(backgroundColor,translation);
    mFocusAnimator.setStartDelay(750);
    mFocusAnimator.setDuration(750);
    mFocusAnimator.start();
  }
 else {
    if (isRunning) {
      int currentColor=mBackgroundColor.getColor();
      ValueAnimator backgroundColor=ValueAnimator.ofObject(new ArgbEvaluator(),currentColor,mCurrentPrimaryColor);
      backgroundColor.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
        @Override public void onAnimationUpdate(        ValueAnimator animation){
          mBackgroundColor.setColor((Integer)animation.getAnimatedValue());
        }
      }
);
      ObjectAnimator translation=ObjectAnimator.ofFloat(this,"translationZ",0f);
      mFocusAnimator=new AnimatorSet();
      mFocusAnimator.playTogether(backgroundColor,translation);
      mFocusAnimator.setDuration(150);
      mFocusAnimator.start();
    }
 else {
      mBackground.setState(new int[]{});
      setTranslationZ(0f);
    }
  }
}
