{
  String language="", country="", variant="";
  if (!TextUtils.isEmpty(localeString)) {
    String[] split=localeString.split("[" + LOCALE_DELIMITER_OLD + LOCALE_DELIMITER_NEW+ "]");
    language=split[0].toLowerCase();
    if (split.length == 0) {
      Log.w(TAG,"Failed to convert " + localeString + " to a valid Locale object. Only"+ " separators");
      return null;
    }
    if (split.length > 3) {
      Log.w(TAG,"Failed to convert " + localeString + " to a valid Locale object. Too"+ " many separators");
      return null;
    }
    if (split.length >= 2) {
      country=split[1].toUpperCase();
    }
    if (split.length >= 3) {
      variant=split[2];
    }
  }
  String normalizedLanguage=sNormalizeLanguage.get(language);
  if (normalizedLanguage != null) {
    language=normalizedLanguage;
  }
  String normalizedCountry=sNormalizeCountry.get(country);
  if (normalizedCountry != null) {
    country=normalizedCountry;
  }
  if (DBG)   Log.d(TAG,"parseLocalePref(" + language + ","+ country+ ","+ variant+ ")");
  Locale result=new Locale(language,country,variant);
  try {
    result.getISO3Language();
    result.getISO3Country();
    return result;
  }
 catch (  MissingResourceException e) {
    Log.w(TAG,"Failed to convert " + localeString + " to a valid Locale object.");
    return null;
  }
}
