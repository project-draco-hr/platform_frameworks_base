{
  if (sGlobals.mService == null) {
    Log.w(TAG,"WallpaperService not running");
    throw new RuntimeException(new DeadSystemException());
  }
  if (which != FLAG_SYSTEM && which != FLAG_LOCK) {
    throw new IllegalArgumentException("Must request exactly one kind of wallpaper");
  }
  Resources resources=mContext.getResources();
  horizontalAlignment=Math.max(0,Math.min(1,horizontalAlignment));
  verticalAlignment=Math.max(0,Math.min(1,verticalAlignment));
  InputStream wpStream=openDefaultWallpaper(mContext,which);
  if (wpStream == null) {
    if (DEBUG) {
      Log.w(TAG,"default wallpaper stream " + which + " is null");
    }
    return null;
  }
 else {
    InputStream is=new BufferedInputStream(wpStream);
    if (outWidth <= 0 || outHeight <= 0) {
      Bitmap fullSize=BitmapFactory.decodeStream(is,null,null);
      return new BitmapDrawable(resources,fullSize);
    }
 else {
      int inWidth;
      int inHeight;
{
        BitmapFactory.Options options=new BitmapFactory.Options();
        options.inJustDecodeBounds=true;
        BitmapFactory.decodeStream(is,null,options);
        if (options.outWidth != 0 && options.outHeight != 0) {
          inWidth=options.outWidth;
          inHeight=options.outHeight;
        }
 else {
          Log.e(TAG,"default wallpaper dimensions are 0");
          return null;
        }
      }
      is=new BufferedInputStream(openDefaultWallpaper(mContext,which));
      RectF cropRectF;
      outWidth=Math.min(inWidth,outWidth);
      outHeight=Math.min(inHeight,outHeight);
      if (scaleToFit) {
        cropRectF=getMaxCropRect(inWidth,inHeight,outWidth,outHeight,horizontalAlignment,verticalAlignment);
      }
 else {
        float left=(inWidth - outWidth) * horizontalAlignment;
        float right=left + outWidth;
        float top=(inHeight - outHeight) * verticalAlignment;
        float bottom=top + outHeight;
        cropRectF=new RectF(left,top,right,bottom);
      }
      Rect roundedTrueCrop=new Rect();
      cropRectF.roundOut(roundedTrueCrop);
      if (roundedTrueCrop.width() <= 0 || roundedTrueCrop.height() <= 0) {
        Log.w(TAG,"crop has bad values for full size image");
        return null;
      }
      int scaleDownSampleSize=Math.min(roundedTrueCrop.width() / outWidth,roundedTrueCrop.height() / outHeight);
      BitmapRegionDecoder decoder=null;
      try {
        decoder=BitmapRegionDecoder.newInstance(is,true);
      }
 catch (      IOException e) {
        Log.w(TAG,"cannot open region decoder for default wallpaper");
      }
      Bitmap crop=null;
      if (decoder != null) {
        BitmapFactory.Options options=new BitmapFactory.Options();
        if (scaleDownSampleSize > 1) {
          options.inSampleSize=scaleDownSampleSize;
        }
        crop=decoder.decodeRegion(roundedTrueCrop,options);
        decoder.recycle();
      }
      if (crop == null) {
        is=new BufferedInputStream(openDefaultWallpaper(mContext,which));
        Bitmap fullSize=null;
        BitmapFactory.Options options=new BitmapFactory.Options();
        if (scaleDownSampleSize > 1) {
          options.inSampleSize=scaleDownSampleSize;
        }
        fullSize=BitmapFactory.decodeStream(is,null,options);
        if (fullSize != null) {
          crop=Bitmap.createBitmap(fullSize,roundedTrueCrop.left,roundedTrueCrop.top,roundedTrueCrop.width(),roundedTrueCrop.height());
        }
      }
      if (crop == null) {
        Log.w(TAG,"cannot decode default wallpaper");
        return null;
      }
      if (outWidth > 0 && outHeight > 0 && (crop.getWidth() != outWidth || crop.getHeight() != outHeight)) {
        Matrix m=new Matrix();
        RectF cropRect=new RectF(0,0,crop.getWidth(),crop.getHeight());
        RectF returnRect=new RectF(0,0,outWidth,outHeight);
        m.setRectToRect(cropRect,returnRect,Matrix.ScaleToFit.FILL);
        Bitmap tmp=Bitmap.createBitmap((int)returnRect.width(),(int)returnRect.height(),Bitmap.Config.ARGB_8888);
        if (tmp != null) {
          Canvas c=new Canvas(tmp);
          Paint p=new Paint();
          p.setFilterBitmap(true);
          c.drawBitmap(crop,m,p);
          crop=tmp;
        }
      }
      return new BitmapDrawable(resources,crop);
    }
  }
}
