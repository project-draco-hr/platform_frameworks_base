{
  try {
    Bundle params=new Bundle();
    ParcelFileDescriptor fd=mService.getWallpaper(this,params);
    if (fd != null) {
      int width=params.getInt("width",0);
      int height=params.getInt("height",0);
      if (width <= 0 || height <= 0) {
        Bitmap bm=BitmapFactory.decodeFileDescriptor(fd.getFileDescriptor(),null,null);
        try {
          fd.close();
        }
 catch (        IOException e) {
        }
        if (bm != null) {
          bm.setDensity(DisplayMetrics.DENSITY_DEVICE);
        }
        return bm;
      }
      BitmapFactory.Options options=new BitmapFactory.Options();
      options.inDither=false;
      options.inPreferredConfig=Bitmap.Config.ARGB_8888;
      Bitmap bm=BitmapFactory.decodeFileDescriptor(fd.getFileDescriptor(),null,options);
      try {
        fd.close();
      }
 catch (      IOException e) {
      }
      if (bm == null) {
        return bm;
      }
      bm.setDensity(DisplayMetrics.DENSITY_DEVICE);
      Bitmap newbm=Bitmap.createBitmap(width,height,bm.getConfig());
      newbm.setDensity(DisplayMetrics.DENSITY_DEVICE);
      Canvas c=new Canvas(newbm);
      c.setDensity(DisplayMetrics.DENSITY_DEVICE);
      Rect targetRect=new Rect();
      targetRect.left=targetRect.top=0;
      targetRect.right=bm.getWidth();
      targetRect.bottom=bm.getHeight();
      int deltaw=width - targetRect.right;
      int deltah=height - targetRect.bottom;
      if (deltaw > 0 || deltah > 0) {
        float scale=1.0f;
        if (deltaw > deltah) {
          scale=width / (float)targetRect.right;
        }
 else {
          scale=height / (float)targetRect.bottom;
        }
        targetRect.right=(int)(targetRect.right * scale);
        targetRect.bottom=(int)(targetRect.bottom * scale);
        deltaw=width - targetRect.right;
        deltah=height - targetRect.bottom;
      }
      targetRect.offset(deltaw / 2,deltah / 2);
      Paint paint=new Paint();
      paint.setFilterBitmap(true);
      paint.setDither(true);
      c.drawBitmap(bm,null,targetRect,paint);
      bm.recycle();
      return newbm;
    }
  }
 catch (  RemoteException e) {
  }
  return null;
}
