{
  cancelAnimator(mCircleAnimator);
  cancelAnimator(mPreviewClipper);
  mFinishing=true;
  mCircleStartRadius=mCircleRadius;
  final float maxCircleSize=getMaxCircleSize();
  Animator animatorToRadius;
  if (mSupportHardware) {
    initHwProperties();
    animatorToRadius=getRtAnimatorToRadius(maxCircleSize);
    startRtAlphaFadeIn();
  }
 else {
    animatorToRadius=getAnimatorToRadius(maxCircleSize);
  }
  mFlingAnimationUtils.applyDismissing(animatorToRadius,mCircleRadius,maxCircleSize,velocity,maxCircleSize);
  animatorToRadius.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      mAnimationEndRunnable.run();
      mFinishing=false;
      mCircleRadius=maxCircleSize;
      invalidate();
    }
  }
);
  animatorToRadius.start();
  setImageAlpha(0,true);
  if (mPreviewView != null) {
    mPreviewView.setVisibility(View.VISIBLE);
    mPreviewClipper=ViewAnimationUtils.createCircularReveal(mPreviewView,getLeft() + mCenterX,getTop() + mCenterY,mCircleRadius,maxCircleSize);
    mFlingAnimationUtils.applyDismissing(mPreviewClipper,mCircleRadius,maxCircleSize,velocity,maxCircleSize);
    mPreviewClipper.addListener(mClipEndListener);
    mPreviewClipper.start();
    if (mSupportHardware) {
      startRtCircleFadeOut(animatorToRadius.getDuration());
    }
  }
}
