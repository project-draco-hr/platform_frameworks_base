{
  final int selectorLeft=0;
  final int selectorTop=mSelectorY;
  final int selectorRight=mMeasuredWidth;
  final int selectorBottom=mSelectorY + mSelectorHeight;
  mSelector.setBounds(selectorLeft,selectorTop,selectorRight,selectorBottom);
  mSelector.draw(canvas);
  if (mTextList == null) {
    return;
  }
  final TextPaint textPaintDark=mTextPaintDark;
  if (hasFocus()) {
    final int topLeft=0;
    final int topTop=0;
    final int topRight=selectorRight;
    final int topBottom=selectorTop + SELECTOR_ARROW_HEIGHT;
    final String text1=mText1;
    final String text2=mText2;
    final String text3=mText3;
    final String text4=mText4;
    final String text5=mText5;
    final TextPaint textPaintLight=mTextPaintLight;
    canvas.save();
    canvas.clipRect(topLeft,topTop,topRight,topBottom);
    drawText(canvas,text1,TEXT1_Y + mTotalAnimatedDistance,textPaintLight);
    drawText(canvas,text2,TEXT2_Y + mTotalAnimatedDistance,textPaintLight);
    drawText(canvas,text3,TEXT3_Y + mTotalAnimatedDistance,textPaintLight);
    canvas.restore();
    canvas.save();
    canvas.clipRect(selectorLeft,selectorTop + SELECTOR_ARROW_HEIGHT,selectorRight,selectorBottom - SELECTOR_ARROW_HEIGHT);
    drawText(canvas,text2,TEXT2_Y + mTotalAnimatedDistance,textPaintDark);
    drawText(canvas,text3,TEXT3_Y + mTotalAnimatedDistance,textPaintDark);
    drawText(canvas,text4,TEXT4_Y + mTotalAnimatedDistance,textPaintDark);
    canvas.restore();
    final int bottomLeft=0;
    final int bottomTop=selectorBottom - SELECTOR_ARROW_HEIGHT;
    final int bottomRight=selectorRight;
    final int bottomBottom=mMeasuredHeight;
    canvas.save();
    canvas.clipRect(bottomLeft,bottomTop,bottomRight,bottomBottom);
    drawText(canvas,text3,TEXT3_Y + mTotalAnimatedDistance,textPaintLight);
    drawText(canvas,text4,TEXT4_Y + mTotalAnimatedDistance,textPaintLight);
    drawText(canvas,text5,TEXT5_Y + mTotalAnimatedDistance,textPaintLight);
    canvas.restore();
  }
 else {
    drawText(canvas,mText3,TEXT3_Y,textPaintDark);
  }
  if (mIsAnimationRunning) {
    if ((Math.abs(mTotalAnimatedDistance) + mDistanceOfEachAnimation) > SCROLL_DISTANCE) {
      mTotalAnimatedDistance=0;
      if (mScrollMode == SCROLL_MODE_UP) {
        int oldPos=mCurrentSelectedPos;
        int newPos=getNewIndex(1);
        if (newPos >= 0) {
          mCurrentSelectedPos=newPos;
          if (mListener != null) {
            mListener.onChanged(this,oldPos,mCurrentSelectedPos,mTextList);
          }
        }
        if (newPos < 0 || ((newPos >= mTextList.length - 1) && !mWrapAround)) {
          mStopAnimation=true;
        }
        calculateTextPositions();
      }
 else       if (mScrollMode == SCROLL_MODE_DOWN) {
        int oldPos=mCurrentSelectedPos;
        int newPos=getNewIndex(-1);
        if (newPos >= 0) {
          mCurrentSelectedPos=newPos;
          if (mListener != null) {
            mListener.onChanged(this,oldPos,mCurrentSelectedPos,mTextList);
          }
        }
        if (newPos < 0 || (newPos == 0 && !mWrapAround)) {
          mStopAnimation=true;
        }
        calculateTextPositions();
      }
      if (mStopAnimation) {
        final int previousScrollMode=mScrollMode;
        mIsAnimationRunning=false;
        mStopAnimation=false;
        mScrollMode=SCROLL_MODE_NONE;
        if ("".equals(mTextList[mCurrentSelectedPos])) {
          mScrollMode=previousScrollMode;
          scroll();
          mStopAnimation=true;
        }
      }
    }
 else {
      if (mScrollMode == SCROLL_MODE_UP) {
        mTotalAnimatedDistance-=mDistanceOfEachAnimation;
      }
 else       if (mScrollMode == SCROLL_MODE_DOWN) {
        mTotalAnimatedDistance+=mDistanceOfEachAnimation;
      }
    }
    if (mDelayBetweenAnimations > 0) {
      postInvalidateDelayed(mDelayBetweenAnimations);
    }
 else {
      invalidate();
    }
  }
}
