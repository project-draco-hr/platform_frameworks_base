{
  BreakInfo breakInfo=new BreakInfo();
  int lineNum=0;
  float width=0, printedWidth=0;
  boolean breakFound=false, goodBreakFound=false;
  int breakIndex=0, goodBreakIndex=0;
  float breakWidth=0, goodBreakWidth=0;
  int firstTabIndex=Integer.MAX_VALUE;
  float maxWidth=mLineWidth.getLineWidth(lineNum);
  int numPrimitives=mPrimitives.size();
  for (int i=0; i < numPrimitives; i++) {
    Primitive p=mPrimitives.get(i);
    if (p.type == PrimitiveType.BOX || p.type == PrimitiveType.GLUE) {
      width+=p.width;
      if (p.type == PrimitiveType.BOX) {
        printedWidth=width;
      }
    }
 else     if (p.type == PrimitiveType.VARIABLE) {
      width=mTabStops.width(width);
      firstTabIndex=Math.min(firstTabIndex,i);
    }
    if (printedWidth > maxWidth) {
      if (breakFound || goodBreakFound) {
        if (goodBreakFound) {
          i=goodBreakIndex;
          lineNum++;
          maxWidth=mLineWidth.getLineWidth(lineNum);
          breakInfo.mBreaksList.add(mPrimitives.get(goodBreakIndex).location);
          breakInfo.mWidthsList.add(goodBreakWidth);
          breakInfo.mFlagsList.add(firstTabIndex < goodBreakIndex);
          firstTabIndex=Integer.MAX_VALUE;
        }
 else {
          i=breakIndex;
          lineNum++;
          maxWidth=mLineWidth.getLineWidth(lineNum);
          breakInfo.mBreaksList.add(mPrimitives.get(breakIndex).location);
          breakInfo.mWidthsList.add(breakWidth);
          breakInfo.mFlagsList.add(firstTabIndex < breakIndex);
          firstTabIndex=Integer.MAX_VALUE;
        }
        printedWidth=width=0;
        goodBreakFound=breakFound=false;
        goodBreakWidth=breakWidth=0;
        continue;
      }
 else {
      }
    }
    if (p.type == PrimitiveType.PENALTY && p.penalty < PENALTY_INFINITY) {
      if (p.penalty == -PENALTY_INFINITY) {
        lineNum++;
        maxWidth=mLineWidth.getLineWidth(lineNum);
        breakInfo.mBreaksList.add(p.location);
        breakInfo.mWidthsList.add(printedWidth);
        breakInfo.mFlagsList.add(firstTabIndex < i);
        firstTabIndex=Integer.MAX_VALUE;
        printedWidth=width=0;
        goodBreakFound=breakFound=false;
        goodBreakWidth=breakWidth=0;
        continue;
      }
      if (i > breakIndex && (printedWidth <= maxWidth || !breakFound)) {
        breakFound=true;
        breakIndex=i;
        breakWidth=printedWidth;
      }
      if (i > goodBreakIndex && printedWidth <= maxWidth) {
        goodBreakFound=true;
        goodBreakIndex=i;
        goodBreakWidth=printedWidth;
      }
    }
 else     if (p.type == PrimitiveType.WORD_BREAK) {
      if (i > breakIndex && (printedWidth <= maxWidth || !breakFound)) {
        breakFound=true;
        breakIndex=i;
        breakWidth=printedWidth;
      }
    }
  }
  if (breakFound || goodBreakFound) {
    if (goodBreakFound) {
      breakInfo.mBreaksList.add(mPrimitives.get(goodBreakIndex).location);
      breakInfo.mWidthsList.add(goodBreakWidth);
      breakInfo.mFlagsList.add(firstTabIndex < goodBreakIndex);
    }
 else {
      breakInfo.mBreaksList.add(mPrimitives.get(breakIndex).location);
      breakInfo.mWidthsList.add(breakWidth);
      breakInfo.mFlagsList.add(firstTabIndex < breakIndex);
    }
  }
  breakInfo.copyTo(lineBreaks);
}
