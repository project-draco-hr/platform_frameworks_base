{
  if (mDayOfWeekView != null) {
    mDayOfWeekView.setText(mCurrentDate.getDisplayName(Calendar.DAY_OF_WEEK,Calendar.LONG,Locale.getDefault()));
  }
  final String bestDateTimePattern=DateFormat.getBestDateTimePattern(mCurrentLocale,"yMMMd");
  int[] viewIndices=getMonthDayYearIndexes(bestDateTimePattern);
  mMonthAndDayLayout.removeAllViews();
  mDateLayout.removeView(mSelectedYearView);
  if (viewIndices[YEAR_INDEX] == 0) {
    mDateLayout.addView(mSelectedYearView,0);
  }
 else {
    mDateLayout.addView(mSelectedYearView,1);
  }
  if (viewIndices[MONTH_INDEX] > viewIndices[DAY_INDEX]) {
    mMonthAndDayLayout.addView(mSelectedDayTextView);
    mMonthAndDayLayout.addView(mSelectedMonthTextView);
  }
 else {
    mMonthAndDayLayout.addView(mSelectedMonthTextView);
    mMonthAndDayLayout.addView(mSelectedDayTextView);
  }
  mSelectedMonthTextView.setText(mCurrentDate.getDisplayName(Calendar.MONTH,Calendar.SHORT,Locale.getDefault()).toUpperCase(Locale.getDefault()));
  mSelectedDayTextView.setText(mDayFormat.format(mCurrentDate.getTime()));
  mSelectedYearView.setText(mYearFormat.format(mCurrentDate.getTime()));
  long millis=mCurrentDate.getTimeInMillis();
  mAnimator.setDateMillis(millis);
  int flags=DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_NO_YEAR;
  String monthAndDayText=DateUtils.formatDateTime(mContext,millis,flags);
  mMonthAndDayLayout.setContentDescription(monthAndDayText);
  if (announce) {
    flags=DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_SHOW_YEAR;
    String fullDateText=DateUtils.formatDateTime(mContext,millis,flags);
    mAnimator.announceForAccessibility(fullDateText);
  }
  updatePickers();
}
