{
  if (soundModel == null || callback == null || recognitionConfig == null) {
    Slog.w(TAG,"Passed in bad data to startGenericRecognition().");
    return STATUS_ERROR;
  }
synchronized (mLock) {
    if (mModuleProperties == null) {
      Slog.w(TAG,"Attempting startRecognition without the capability");
      return STATUS_ERROR;
    }
    if (mModule == null) {
      mModule=SoundTrigger.attachModule(mModuleProperties.id,this,null);
      if (mModule == null) {
        Slog.w(TAG,"startRecognition cannot attach to sound trigger module");
        return STATUS_ERROR;
      }
    }
    if (!mRecognitionRunning) {
      initializeTelephonyAndPowerStateListeners();
    }
    ModelData modelData=getOrCreateGenericModelData(modelId);
    IRecognitionStatusCallback oldCallback=modelData.getCallback();
    if (oldCallback != null) {
      Slog.w(TAG,"Canceling previous recognition for model id: " + modelId);
      try {
        oldCallback.onError(STATUS_ERROR);
      }
 catch (      RemoteException e) {
        Slog.w(TAG,"RemoteException in onDetectionStopped",e);
      }
      modelData.clearCallback();
    }
    if (!modelData.isModelLoaded()) {
      int[] handle=new int[]{INVALID_VALUE};
      int status=mModule.loadSoundModel(soundModel,handle);
      if (status != SoundTrigger.STATUS_OK) {
        Slog.w(TAG,"loadSoundModel call failed with " + status);
        return status;
      }
      if (handle[0] == INVALID_VALUE) {
        Slog.w(TAG,"loadSoundModel call returned invalid sound model handle");
        return STATUS_ERROR;
      }
      modelData.setHandle(handle[0]);
    }
    modelData.setCallback(callback);
    modelData.setRecognitionConfig(recognitionConfig);
    return startGenericRecognitionLocked(modelData,false);
  }
}
