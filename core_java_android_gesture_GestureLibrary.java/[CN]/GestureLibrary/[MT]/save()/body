{
  if (!mChanged) {
    return true;
  }
  boolean result=false;
  DataOutputStream out=null;
  try {
    File file=new File(mGestureFileName);
    if (!file.getParentFile().exists()) {
      if (!file.getParentFile().mkdirs()) {
        return false;
      }
    }
    long start;
    if (PROFILE_LOADING_SAVING) {
      start=SystemClock.elapsedRealtime();
    }
    final HashMap<String,ArrayList<Gesture>> maps=mNamedGestures;
    out=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(file),GestureConstants.IO_BUFFER_SIZE));
    out.writeShort(FILE_FORMAT_VERSION);
    out.writeInt(maps.size());
    for (    Map.Entry<String,ArrayList<Gesture>> entry : maps.entrySet()) {
      final String key=entry.getKey();
      final ArrayList<Gesture> examples=entry.getValue();
      final int count=examples.size();
      out.writeUTF(key);
      out.writeInt(count);
      for (int i=0; i < count; i++) {
        examples.get(i).serialize(out);
      }
    }
    out.flush();
    if (PROFILE_LOADING_SAVING) {
      long end=SystemClock.elapsedRealtime();
      Log.d(LOG_TAG,"Saving gestures library = " + (end - start) + " ms");
    }
    mChanged=false;
    result=true;
  }
 catch (  IOException ex) {
    Log.d(LOG_TAG,"Failed to save gestures:",ex);
  }
 finally {
    GestureUtilities.closeStream(out);
  }
  return result;
}
