{
  mContext=context;
  mService=service;
  mLinearOutSlowInInterpolator=AnimationUtils.loadInterpolator(context,com.android.internal.R.interpolator.linear_out_slow_in);
  mFastOutLinearInInterpolator=AnimationUtils.loadInterpolator(context,com.android.internal.R.interpolator.fast_out_linear_in);
  mFastOutSlowInInterpolator=AnimationUtils.loadInterpolator(context,com.android.internal.R.interpolator.fast_out_slow_in);
  mConfigShortAnimTime=context.getResources().getInteger(com.android.internal.R.integer.config_shortAnimTime);
  mDecelerateInterpolator=AnimationUtils.loadInterpolator(context,com.android.internal.R.interpolator.decelerate_cubic);
  mThumbnailFadeInInterpolator=new Interpolator(){
    @Override public float getInterpolation(    float input){
      if (input < RECENTS_THUMBNAIL_FADEIN_FRACTION) {
        return 0f;
      }
      float t=(input - RECENTS_THUMBNAIL_FADEIN_FRACTION) / (1f - RECENTS_THUMBNAIL_FADEIN_FRACTION);
      return mFastOutLinearInInterpolator.getInterpolation(t);
    }
  }
;
  mThumbnailFadeOutInterpolator=new Interpolator(){
    @Override public float getInterpolation(    float input){
      if (input < RECENTS_THUMBNAIL_FADEOUT_FRACTION) {
        float t=input / RECENTS_THUMBNAIL_FADEOUT_FRACTION;
        return mLinearOutSlowInInterpolator.getInterpolation(t);
      }
      return 1f;
    }
  }
;
  mClipRevealTranslationY=(int)(CLIP_REVEAL_TRANSLATION_Y_DP * mContext.getResources().getDisplayMetrics().density);
}
