{
  Animation a;
  if (mNextAppTransitionType == NEXT_TRANSIT_TYPE_CUSTOM) {
    a=loadAnimation(mNextAppTransitionPackage,enter ? mNextAppTransitionEnter : mNextAppTransitionExit);
    if (DEBUG_APP_TRANSITIONS || DEBUG_ANIM)     Slog.v(TAG,"applyAnimation:" + " anim=" + a + " nextAppTransition=ANIM_CUSTOM"+ " transit="+ transit+ " isEntrance="+ enter+ " Callers="+ Debug.getCallers(3));
  }
 else   if (mNextAppTransitionType == NEXT_TRANSIT_TYPE_SCALE_UP) {
    a=createScaleUpAnimationLocked(transit,enter,appWidth,appHeight);
    if (DEBUG_APP_TRANSITIONS || DEBUG_ANIM)     Slog.v(TAG,"applyAnimation:" + " anim=" + a + " nextAppTransition=ANIM_SCALE_UP"+ " transit="+ transit+ " isEntrance="+ enter+ " Callers="+ Debug.getCallers(3));
  }
 else   if (mNextAppTransitionType == NEXT_TRANSIT_TYPE_THUMBNAIL_SCALE_UP || mNextAppTransitionType == NEXT_TRANSIT_TYPE_THUMBNAIL_SCALE_DOWN) {
    mNextAppTransitionScaleUp=(mNextAppTransitionType == NEXT_TRANSIT_TYPE_THUMBNAIL_SCALE_UP);
    a=createAlternateThumbnailEnterExitAnimationLocked(getThumbnailTransitionState(enter),appWidth,appHeight,orientation,transit,containingFrame,contentInsets,isFullScreen);
    if (DEBUG_APP_TRANSITIONS || DEBUG_ANIM) {
      String animName=mNextAppTransitionScaleUp ? "ANIM_THUMBNAIL_SCALE_UP" : "ANIM_THUMBNAIL_SCALE_DOWN";
      Slog.v(TAG,"applyAnimation:" + " anim=" + a + " nextAppTransition="+ animName+ " transit="+ transit+ " isEntrance="+ enter+ " Callers="+ Debug.getCallers(3));
    }
  }
 else {
    int animAttr=0;
switch (transit) {
case TRANSIT_ACTIVITY_OPEN:
      animAttr=enter ? WindowAnimation_activityOpenEnterAnimation : WindowAnimation_activityOpenExitAnimation;
    break;
case TRANSIT_ACTIVITY_CLOSE:
  animAttr=enter ? WindowAnimation_activityCloseEnterAnimation : WindowAnimation_activityCloseExitAnimation;
break;
case TRANSIT_TASK_OPEN:
animAttr=enter ? WindowAnimation_taskOpenEnterAnimation : WindowAnimation_taskOpenExitAnimation;
break;
case TRANSIT_TASK_CLOSE:
animAttr=enter ? WindowAnimation_taskCloseEnterAnimation : WindowAnimation_taskCloseExitAnimation;
break;
case TRANSIT_TASK_TO_FRONT:
animAttr=enter ? WindowAnimation_taskToFrontEnterAnimation : WindowAnimation_taskToFrontExitAnimation;
break;
case TRANSIT_TASK_TO_BACK:
animAttr=enter ? WindowAnimation_taskToBackEnterAnimation : WindowAnimation_taskToBackExitAnimation;
break;
case TRANSIT_WALLPAPER_OPEN:
animAttr=enter ? WindowAnimation_wallpaperOpenEnterAnimation : WindowAnimation_wallpaperOpenExitAnimation;
break;
case TRANSIT_WALLPAPER_CLOSE:
animAttr=enter ? WindowAnimation_wallpaperCloseEnterAnimation : WindowAnimation_wallpaperCloseExitAnimation;
break;
case TRANSIT_WALLPAPER_INTRA_OPEN:
animAttr=enter ? WindowAnimation_wallpaperIntraOpenEnterAnimation : WindowAnimation_wallpaperIntraOpenExitAnimation;
break;
case TRANSIT_WALLPAPER_INTRA_CLOSE:
animAttr=enter ? WindowAnimation_wallpaperIntraCloseEnterAnimation : WindowAnimation_wallpaperIntraCloseExitAnimation;
break;
}
a=animAttr != 0 ? loadAnimation(lp,animAttr) : null;
if (DEBUG_APP_TRANSITIONS || DEBUG_ANIM) Slog.v(TAG,"applyAnimation:" + " anim=" + a + " animAttr=0x"+ Integer.toHexString(animAttr)+ " transit="+ transit+ " isEntrance="+ enter+ " Callers="+ Debug.getCallers(3));
}
return a;
}
