{
  Animation a;
  final int appWidth=containingFrame.width();
  final int appHeight=containingFrame.height();
  getDefaultNextAppTransitionStartRect(mTmpRect);
  final int thumbWidthI=mTmpRect.width();
  final float thumbWidth=thumbWidthI > 0 ? thumbWidthI : 1;
  final int thumbHeightI=mTmpRect.height();
  final float thumbHeight=thumbHeightI > 0 ? thumbHeightI : 1;
  float scale=1f;
  int scaledTopDecor=0;
switch (thumbTransitState) {
case THUMBNAIL_TRANSITION_ENTER_SCALE_UP:
{
      if (freeform) {
        a=createAspectScaledThumbnailEnterFreeformAnimationLocked(containingFrame,surfaceInsets,taskId);
      }
 else {
        mTmpFromClipRect.set(containingFrame);
        mTmpToClipRect.set(containingFrame);
        mTmpFromClipRect.offsetTo(0,0);
        mTmpToClipRect.offsetTo(0,0);
        mTmpFromClipRect.inset(contentInsets);
        scale=thumbWidth / (appWidth - contentInsets.left - contentInsets.right);
        scaledTopDecor=(int)(scale * contentInsets.top);
        int unscaledThumbHeight=(int)(thumbHeight / scale);
        mTmpFromClipRect.bottom=mTmpFromClipRect.top + unscaledThumbHeight;
        mNextAppTransitionInsets.set(contentInsets);
        Animation scaleAnim=new ScaleAnimation(scale,1,scale,1,computePivot(mTmpRect.left - containingFrame.left,scale),computePivot(mTmpRect.top - containingFrame.top,scale));
        Animation clipAnim=new ClipRectAnimation(mTmpFromClipRect,mTmpToClipRect);
        Animation translateAnim=new TranslateAnimation(0,0,-scaledTopDecor,0);
        AnimationSet set=new AnimationSet(true);
        set.addAnimation(clipAnim);
        set.addAnimation(scaleAnim);
        set.addAnimation(translateAnim);
        a=set;
      }
      break;
    }
case THUMBNAIL_TRANSITION_EXIT_SCALE_UP:
{
    if (transit == TRANSIT_WALLPAPER_INTRA_OPEN) {
      a=new AlphaAnimation(1,0);
    }
 else {
      a=new AlphaAnimation(1,1);
    }
    break;
  }
case THUMBNAIL_TRANSITION_ENTER_SCALE_DOWN:
{
  if (transit == TRANSIT_WALLPAPER_INTRA_OPEN) {
    a=new AlphaAnimation(0,1);
  }
 else {
    a=new AlphaAnimation(1,1);
  }
  break;
}
case THUMBNAIL_TRANSITION_EXIT_SCALE_DOWN:
{
if (freeform) {
  a=createAspectScaledThumbnailExitFreeformAnimationLocked(containingFrame,surfaceInsets,taskId);
}
 else {
  mTmpFromClipRect.set(containingFrame);
  mTmpToClipRect.set(containingFrame);
  mTmpFromClipRect.offsetTo(0,0);
  mTmpToClipRect.offsetTo(0,0);
  mTmpToClipRect.inset(contentInsets);
  scale=thumbWidth / (appWidth - contentInsets.left - contentInsets.right);
  scaledTopDecor=(int)(scale * contentInsets.top);
  int unscaledThumbHeight=(int)(thumbHeight / scale);
  mTmpToClipRect.bottom=mTmpToClipRect.top + unscaledThumbHeight;
  mNextAppTransitionInsets.set(contentInsets);
  Animation scaleAnim=new ScaleAnimation(1,scale,1,scale,computePivot(mTmpRect.left - containingFrame.left,scale),computePivot(mTmpRect.top - containingFrame.top,scale));
  Animation clipAnim=new ClipRectAnimation(mTmpFromClipRect,mTmpToClipRect);
  Animation translateAnim=new TranslateAnimation(0,0,0,-scaledTopDecor);
  AnimationSet set=new AnimationSet(true);
  set.addAnimation(clipAnim);
  set.addAnimation(scaleAnim);
  set.addAnimation(translateAnim);
  a=set;
  a.setZAdjustment(Animation.ZORDER_TOP);
}
break;
}
default :
throw new RuntimeException("Invalid thumbnail transition state");
}
int duration=Math.max(THUMBNAIL_APP_TRANSITION_ALPHA_DURATION,THUMBNAIL_APP_TRANSITION_DURATION);
return prepareThumbnailAnimationWithDuration(a,appWidth,appHeight,duration,TOUCH_RESPONSE_INTERPOLATOR);
}
