{
  Log.d(TAG,"onFinished() " + Arrays.toString(uris));
  final ContentResolver resolver=getContentResolver();
  final ContentValues values=new ContentValues();
  final String rawStack=DocumentStack.serialize(mStack);
  if (mAction == ACTION_CREATE) {
    values.clear();
    values.put(RecentsProvider.COL_PATH,rawStack);
    resolver.insert(RecentsProvider.buildRecentCreate(),values);
  }
 else   if (mAction == ACTION_OPEN) {
    for (    Uri uri : uris) {
      values.clear();
      values.put(RecentsProvider.COL_URI,uri.toString());
      resolver.insert(RecentsProvider.buildRecentOpen(),values);
    }
  }
  final String packageName=getCallingPackage();
  values.clear();
  values.put(RecentsProvider.COL_PATH,rawStack);
  resolver.insert(RecentsProvider.buildResume(packageName),values);
  final Intent intent=new Intent();
  if (uris.length == 1) {
    intent.setData(uris[0]);
  }
 else   if (uris.length > 1) {
    final ClipData clipData=new ClipData(null,mDisplayState.acceptMimes,new ClipData.Item(uris[0]));
    for (int i=1; i < uris.length; i++) {
      clipData.addItem(new ClipData.Item(uris[i]));
    }
    intent.setClipData(clipData);
  }
  intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION | Intent.FLAG_PERSIST_GRANT_URI_PERMISSION);
  setResult(Activity.RESULT_OK,intent);
  finish();
}
