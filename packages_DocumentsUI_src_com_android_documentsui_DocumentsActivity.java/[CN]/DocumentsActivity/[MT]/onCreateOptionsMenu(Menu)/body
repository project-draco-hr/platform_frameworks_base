{
  super.onCreateOptionsMenu(menu);
  getMenuInflater().inflate(R.menu.activity,menu);
  if (mShowAsDialog) {
    for (int i=0; i < menu.size(); i++) {
      final MenuItem item=menu.getItem(i);
switch (item.getItemId()) {
case R.id.menu_advanced:
case R.id.menu_file_size:
        break;
default :
      item.setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);
  }
}
}
final MenuItem searchMenu=menu.findItem(R.id.menu_search);
mSearchView=(SearchView)searchMenu.getActionView();
mSearchView.setOnQueryTextListener(new OnQueryTextListener(){
@Override public boolean onQueryTextSubmit(String query){
  mSearchExpanded=true;
  mState.currentSearch=query;
  mSearchView.clearFocus();
  onCurrentDirectoryChanged(ANIM_NONE);
  return true;
}
@Override public boolean onQueryTextChange(String newText){
  return false;
}
}
);
searchMenu.setOnActionExpandListener(new OnActionExpandListener(){
@Override public boolean onMenuItemActionExpand(MenuItem item){
  mSearchExpanded=true;
  updateActionBar();
  return true;
}
@Override public boolean onMenuItemActionCollapse(MenuItem item){
  mSearchExpanded=false;
  if (mIgnoreNextCollapse) {
    mIgnoreNextCollapse=false;
    return true;
  }
  mState.currentSearch=null;
  onCurrentDirectoryChanged(ANIM_NONE);
  return true;
}
}
);
mSearchView.setOnCloseListener(new SearchView.OnCloseListener(){
@Override public boolean onClose(){
  mSearchExpanded=false;
  if (mIgnoreNextClose) {
    mIgnoreNextClose=false;
    return false;
  }
  mState.currentSearch=null;
  onCurrentDirectoryChanged(ANIM_NONE);
  return false;
}
}
);
return true;
}
