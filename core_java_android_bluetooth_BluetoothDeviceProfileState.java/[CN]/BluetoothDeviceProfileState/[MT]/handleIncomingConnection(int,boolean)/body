{
  boolean ret=false;
  Log.i(TAG,"handleIncomingConnection:" + command + ":"+ accept);
switch (command) {
case CONNECT_HFP_INCOMING:
    if (!accept) {
      ret=mHeadsetService.rejectIncomingConnect(mDevice);
      sendMessage(TRANSITION_TO_STABLE);
      updateIncomingAllowedTimer();
    }
 else     if (mHeadsetState == BluetoothHeadset.STATE_CONNECTING) {
      writeTimerValue(0);
      ret=mHeadsetService.acceptIncomingConnect(mDevice);
    }
 else     if (mHeadsetState == BluetoothHeadset.STATE_DISCONNECTED) {
      writeTimerValue(0);
      handleConnectionOfOtherProfiles(command);
      ret=mHeadsetService.createIncomingConnect(mDevice);
    }
  break;
case CONNECT_A2DP_INCOMING:
if (!accept) {
  ret=mA2dpService.allowIncomingConnect(mDevice,false);
  sendMessage(TRANSITION_TO_STABLE);
  updateIncomingAllowedTimer();
}
 else {
  writeTimerValue(0);
  ret=mA2dpService.allowIncomingConnect(mDevice,true);
  handleConnectionOfOtherProfiles(command);
}
break;
case CONNECT_HID_INCOMING:
if (!accept) {
ret=mService.allowIncomingHidConnect(mDevice,false);
sendMessage(TRANSITION_TO_STABLE);
updateIncomingAllowedTimer();
}
 else {
writeTimerValue(0);
ret=mService.allowIncomingHidConnect(mDevice,true);
}
break;
default :
Log.e(TAG,"Waiting for incoming connection but state changed to:" + command);
break;
}
return ret;
}
