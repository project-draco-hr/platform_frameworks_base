{
  log("OutgoingHandsfree State -> Processing Message: " + message.what);
  Message deferMsg=new Message();
  int command=message.what;
switch (command) {
case CONNECT_HFP_OUTGOING:
    if (command != mCommand) {
      deferMessage(message);
    }
  break;
case CONNECT_HFP_INCOMING:
if (mCommand == CONNECT_HFP_OUTGOING) {
  cancelCommand(CONNECT_HFP_OUTGOING);
  transitionTo(mIncomingHandsfree);
}
 else {
  deferMessage(message);
}
break;
case CONNECT_A2DP_INCOMING:
transitionTo(mIncomingA2dp);
if (mStatus) {
deferMsg.what=mCommand;
deferMessage(deferMsg);
}
break;
case CONNECT_A2DP_OUTGOING:
deferMessage(message);
break;
case DISCONNECT_HFP_OUTGOING:
if (mCommand == CONNECT_HFP_OUTGOING) {
cancelCommand(CONNECT_HFP_OUTGOING);
processCommand(DISCONNECT_HFP_OUTGOING);
}
break;
case DISCONNECT_HFP_INCOMING:
cancelCommand(CONNECT_HFP_OUTGOING);
break;
case DISCONNECT_A2DP_OUTGOING:
deferMessage(message);
break;
case DISCONNECT_A2DP_INCOMING:
if (mStatus) {
deferMsg.what=mCommand;
deferMessage(deferMsg);
}
break;
case DISCONNECT_PBAP_OUTGOING:
case UNPAIR:
case AUTO_CONNECT_PROFILES:
case CONNECT_OTHER_PROFILES:
deferMessage(message);
break;
case TRANSITION_TO_STABLE:
transitionTo(mBondedDevice);
break;
default :
return NOT_HANDLED;
}
return HANDLED;
}
