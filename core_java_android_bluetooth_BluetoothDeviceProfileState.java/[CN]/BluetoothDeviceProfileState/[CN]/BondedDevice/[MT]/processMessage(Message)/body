{
  log("ACL Connected State -> Processing Message: " + message.what);
switch (message.what) {
case CONNECT_HFP_OUTGOING:
case DISCONNECT_HFP_OUTGOING:
    transitionTo(mOutgoingHandsfree);
  break;
case CONNECT_HFP_INCOMING:
transitionTo(mIncomingHandsfree);
break;
case DISCONNECT_HFP_INCOMING:
transitionTo(mIncomingHandsfree);
break;
case CONNECT_A2DP_OUTGOING:
case DISCONNECT_A2DP_OUTGOING:
transitionTo(mOutgoingA2dp);
break;
case CONNECT_A2DP_INCOMING:
case DISCONNECT_A2DP_INCOMING:
transitionTo(mIncomingA2dp);
break;
case CONNECT_HID_OUTGOING:
case DISCONNECT_HID_OUTGOING:
transitionTo(mOutgoingHid);
break;
case CONNECT_HID_INCOMING:
case DISCONNECT_HID_INCOMING:
transitionTo(mIncomingHid);
break;
case UNPAIR:
if (mHeadsetState != BluetoothHeadset.STATE_DISCONNECTED) {
sendMessage(DISCONNECT_HFP_OUTGOING);
deferMessage(message);
break;
}
 else if (mA2dpState != BluetoothA2dp.STATE_DISCONNECTED) {
sendMessage(DISCONNECT_A2DP_OUTGOING);
deferMessage(message);
break;
}
 else if (mHidState != BluetoothInputDevice.STATE_DISCONNECTED) {
sendMessage(DISCONNECT_HID_OUTGOING);
deferMessage(message);
break;
}
processCommand(UNPAIR);
break;
case AUTO_CONNECT_PROFILES:
if (isPhoneDocked(mDevice)) {
break;
}
 else if (!mHeadsetServiceConnected) {
deferMessage(message);
}
 else {
if (mHeadsetService.getPriority(mDevice) == BluetoothHeadset.PRIORITY_AUTO_CONNECT && !mHeadsetService.isConnected(mDevice)) {
mHeadsetService.connectHeadset(mDevice);
}
if (mA2dpService != null && mA2dpService.getSinkPriority(mDevice) == BluetoothA2dp.PRIORITY_AUTO_CONNECT && mA2dpService.getConnectedSinks().length == 0) {
mA2dpService.connectSink(mDevice);
}
if (mService.getInputDevicePriority(mDevice) == BluetoothInputDevice.PRIORITY_AUTO_CONNECT) {
mService.connectInputDevice(mDevice);
}
}
break;
case TRANSITION_TO_STABLE:
break;
default :
return NOT_HANDLED;
}
return HANDLED;
}
