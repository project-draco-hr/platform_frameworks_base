{
  log("IncomingHid State->Processing Message: " + message.what);
  Message deferMsg=new Message();
switch (message.what) {
case CONNECT_HFP_OUTGOING:
case CONNECT_HFP_INCOMING:
case DISCONNECT_HFP_OUTGOING:
case CONNECT_A2DP_INCOMING:
case CONNECT_A2DP_OUTGOING:
case DISCONNECT_A2DP_OUTGOING:
case CONNECT_HID_OUTGOING:
case CONNECT_HID_INCOMING:
case DISCONNECT_HID_OUTGOING:
    deferMessage(message);
  break;
case CONNECTION_ACCESS_REQUEST_REPLY:
mConnectionAccessReplyReceived=true;
int val=message.arg1;
setTrust(val);
handleIncomingConnection(CONNECT_HID_INCOMING,val == BluetoothDevice.CONNECTION_ACCESS_YES);
break;
case CONNECTION_ACCESS_REQUEST_EXPIRY:
if (!mConnectionAccessReplyReceived) {
handleIncomingConnection(CONNECT_HID_INCOMING,false);
sendConnectionAccessRemovalIntent();
sendMessage(TRANSITION_TO_STABLE);
}
break;
case DISCONNECT_HFP_INCOMING:
break;
case DISCONNECT_HID_INCOMING:
case DISCONNECT_A2DP_INCOMING:
break;
case DISCONNECT_PBAP_OUTGOING:
case UNPAIR:
case AUTO_CONNECT_PROFILES:
deferMessage(message);
break;
case TRANSITION_TO_STABLE:
transitionTo(mBondedDevice);
break;
default :
return NOT_HANDLED;
}
return HANDLED;
}
