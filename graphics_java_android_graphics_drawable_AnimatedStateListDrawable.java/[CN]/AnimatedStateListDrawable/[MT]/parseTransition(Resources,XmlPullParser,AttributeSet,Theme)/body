{
  final TypedArray a=obtainAttributes(r,theme,attrs,R.styleable.AnimatedStateListDrawableTransition);
  final int fromId=a.getResourceId(R.styleable.AnimatedStateListDrawableTransition_fromId,0);
  final int toId=a.getResourceId(R.styleable.AnimatedStateListDrawableTransition_toId,0);
  final boolean reversible=a.getBoolean(R.styleable.AnimatedStateListDrawableTransition_reversible,false);
  Drawable dr=a.getDrawable(R.styleable.AnimatedStateListDrawableTransition_drawable);
  a.recycle();
  if (dr == null) {
    int type;
    while ((type=parser.next()) == XmlPullParser.TEXT) {
    }
    if (type != XmlPullParser.START_TAG) {
      throw new XmlPullParserException(parser.getPositionDescription() + ": <transition> tag requires a 'drawable' attribute or " + "child tag defining a drawable");
    }
    dr=Drawable.createFromXmlInner(r,parser,attrs,theme);
  }
  return mState.addTransition(fromId,toId,dr,reversible);
}
