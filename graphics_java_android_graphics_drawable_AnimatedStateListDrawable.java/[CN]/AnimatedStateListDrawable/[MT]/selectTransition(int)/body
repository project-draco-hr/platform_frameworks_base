{
  final int fromIndex;
  final Transition currentTransition=mTransition;
  if (currentTransition != null) {
    if (toIndex == mTransitionToIndex) {
      return true;
    }
 else     if (toIndex == mTransitionFromIndex && currentTransition.canReverse()) {
      currentTransition.reverse();
      mTransitionToIndex=mTransitionFromIndex;
      mTransitionFromIndex=toIndex;
      return true;
    }
    fromIndex=mTransitionToIndex;
    currentTransition.stop();
  }
 else {
    fromIndex=getCurrentIndex();
  }
  mTransition=null;
  mTransitionFromIndex=-1;
  mTransitionToIndex=-1;
  final AnimatedStateListState state=mState;
  final int fromId=state.getKeyframeIdAt(fromIndex);
  final int toId=state.getKeyframeIdAt(toIndex);
  if (toId == 0 || fromId == 0) {
    return false;
  }
  final int transitionIndex=state.indexOfTransition(fromId,toId);
  if (transitionIndex < 0) {
    return false;
  }
  boolean hasReversibleFlag=state.transitionHasReversibleFlag(fromId,toId);
  selectDrawable(transitionIndex);
  final Transition transition;
  final Drawable d=getCurrent();
  if (d instanceof AnimationDrawable) {
    final boolean reversed=state.isTransitionReversed(fromId,toId);
    transition=new AnimationDrawableTransition((AnimationDrawable)d,reversed,hasReversibleFlag);
  }
 else   if (d instanceof AnimatedVectorDrawable) {
    final boolean reversed=state.isTransitionReversed(fromId,toId);
    transition=new AnimatedVectorDrawableTransition((AnimatedVectorDrawable)d,reversed,hasReversibleFlag);
  }
 else   if (d instanceof Animatable) {
    transition=new AnimatableTransition((Animatable)d);
  }
 else {
    return false;
  }
  transition.start();
  mTransition=transition;
  mTransitionFromIndex=fromIndex;
  mTransitionToIndex=toIndex;
  return true;
}
