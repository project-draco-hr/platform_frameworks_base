{
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.DUMP,TAG);
  final IndentingPrintWriter pw=new IndentingPrintWriter(writer,"  ");
  final long ident=Binder.clearCallingIdentity();
  try {
    if (args == null || args.length == 0 || "-a".equals(args[0])) {
      pw.println("USB Manager State:");
      pw.increaseIndent();
      if (mDeviceManager != null) {
        mDeviceManager.dump(pw);
      }
      if (mHostManager != null) {
        mHostManager.dump(pw);
      }
      if (mPortManager != null) {
        mPortManager.dump(pw);
      }
      mAlsaManager.dump(pw);
synchronized (mLock) {
        for (int i=0; i < mSettingsByUser.size(); i++) {
          final int userId=mSettingsByUser.keyAt(i);
          final UsbSettingsManager settings=mSettingsByUser.valueAt(i);
          pw.println("Settings for user " + userId + ":");
          pw.increaseIndent();
          settings.dump(pw);
          pw.decreaseIndent();
        }
      }
    }
 else     if (args.length == 4 && "set-port-roles".equals(args[0])) {
      final String portId=args[1];
      final int powerRole;
switch (args[2]) {
case "source":
        powerRole=UsbPort.POWER_ROLE_SOURCE;
      break;
case "sink":
    powerRole=UsbPort.POWER_ROLE_SINK;
  break;
case "no-power":
powerRole=0;
break;
default :
pw.println("Invalid power role: " + args[2]);
return;
}
final int dataRole;
switch (args[3]) {
case "host":
dataRole=UsbPort.DATA_ROLE_HOST;
break;
case "device":
dataRole=UsbPort.DATA_ROLE_DEVICE;
break;
case "no-data":
dataRole=0;
break;
default :
pw.println("Invalid data role: " + args[3]);
return;
}
if (mPortManager != null) {
mPortManager.setPortRoles(portId,powerRole,dataRole,pw);
pw.println();
mPortManager.dump(pw);
}
}
 else if (args.length == 3 && "add-port".equals(args[0])) {
final String portId=args[1];
final int supportedModes;
switch (args[2]) {
case "ufp":
supportedModes=UsbPort.MODE_UFP;
break;
case "dfp":
supportedModes=UsbPort.MODE_DFP;
break;
case "dual":
supportedModes=UsbPort.MODE_DUAL;
break;
case "none":
supportedModes=0;
break;
default :
pw.println("Invalid mode: " + args[2]);
return;
}
if (mPortManager != null) {
mPortManager.addSimulatedPort(portId,supportedModes,pw);
pw.println();
mPortManager.dump(pw);
}
}
 else if (args.length == 5 && "connect-port".equals(args[0])) {
final String portId=args[1];
final int mode;
final boolean canChangeMode=args[2].endsWith("?");
switch (canChangeMode ? removeLastChar(args[2]) : args[2]) {
case "ufp":
mode=UsbPort.MODE_UFP;
break;
case "dfp":
mode=UsbPort.MODE_DFP;
break;
default :
pw.println("Invalid mode: " + args[2]);
return;
}
final int powerRole;
final boolean canChangePowerRole=args[3].endsWith("?");
switch (canChangePowerRole ? removeLastChar(args[3]) : args[3]) {
case "source":
powerRole=UsbPort.POWER_ROLE_SOURCE;
break;
case "sink":
powerRole=UsbPort.POWER_ROLE_SINK;
break;
default :
pw.println("Invalid power role: " + args[3]);
return;
}
final int dataRole;
final boolean canChangeDataRole=args[4].endsWith("?");
switch (canChangeDataRole ? removeLastChar(args[4]) : args[4]) {
case "host":
dataRole=UsbPort.DATA_ROLE_HOST;
break;
case "device":
dataRole=UsbPort.DATA_ROLE_DEVICE;
break;
default :
pw.println("Invalid data role: " + args[4]);
return;
}
if (mPortManager != null) {
mPortManager.connectSimulatedPort(portId,mode,canChangeMode,powerRole,canChangePowerRole,dataRole,canChangeDataRole,pw);
pw.println();
mPortManager.dump(pw);
}
}
 else if (args.length == 2 && "disconnect-port".equals(args[0])) {
final String portId=args[1];
if (mPortManager != null) {
mPortManager.disconnectSimulatedPort(portId,pw);
pw.println();
mPortManager.dump(pw);
}
}
 else if (args.length == 2 && "remove-port".equals(args[0])) {
final String portId=args[1];
if (mPortManager != null) {
mPortManager.removeSimulatedPort(portId,pw);
pw.println();
mPortManager.dump(pw);
}
}
 else if (args.length == 1 && "reset".equals(args[0])) {
if (mPortManager != null) {
mPortManager.resetSimulation(pw);
pw.println();
mPortManager.dump(pw);
}
}
 else if (args.length == 1 && "ports".equals(args[0])) {
if (mPortManager != null) {
mPortManager.dump(pw);
}
}
 else {
pw.println("Dump current USB state or issue command:");
pw.println("  ports");
pw.println("  set-port-roles <id> <source|sink|no-power> <host|device|no-data>");
pw.println("  add-port <id> <ufp|dfp|dual|none>");
pw.println("  connect-port <id> <ufp|dfp><?> <source|sink><?> <host|device><?>");
pw.println("    (add ? suffix if mode, power role, or data role can be changed)");
pw.println("  disconnect-port <id>");
pw.println("  remove-port <id>");
pw.println("  reset");
pw.println();
pw.println("Example USB type C port role switch:");
pw.println("  dumpsys usb set-port-roles \"default\" source device");
pw.println();
pw.println("Example USB type C port simulation with full capabilities:");
pw.println("  dumpsys usb add-port \"matrix\" dual");
pw.println("  dumpsys usb connect-port \"matrix\" ufp? sink? device?");
pw.println("  dumpsys usb ports");
pw.println("  dumpsys usb disconnect-port \"matrix\"");
pw.println("  dumpsys usb remove-port \"matrix\"");
pw.println("  dumpsys usb reset");
pw.println();
pw.println("Example USB type C port where only power role can be changed:");
pw.println("  dumpsys usb add-port \"matrix\" dual");
pw.println("  dumpsys usb connect-port \"matrix\" dfp source? host");
pw.println("  dumpsys usb reset");
pw.println();
pw.println("Example USB OTG port where id pin determines function:");
pw.println("  dumpsys usb add-port \"matrix\" dual");
pw.println("  dumpsys usb connect-port \"matrix\" dfp source host");
pw.println("  dumpsys usb reset");
pw.println();
pw.println("Example USB device-only port:");
pw.println("  dumpsys usb add-port \"matrix\" ufp");
pw.println("  dumpsys usb connect-port \"matrix\" ufp sink device");
pw.println("  dumpsys usb reset");
}
}
  finally {
Binder.restoreCallingIdentity(ident);
}
}
