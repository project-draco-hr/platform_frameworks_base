{
  boolean bluetoothOff;
  boolean radioOff;
  BroadcastReceiver br=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      actionDone();
    }
  }
;
  Log.i(TAG,"Sending shutdown broadcast...");
  mActionDone=false;
  mContext.sendOrderedBroadcast(new Intent(Intent.ACTION_SHUTDOWN),null,br,mHandler,0,null,null);
  final long endTime=System.currentTimeMillis() + MAX_BROADCAST_TIME;
synchronized (mActionDoneSync) {
    while (!mActionDone) {
      long delay=endTime - System.currentTimeMillis();
      if (delay <= 0) {
        Log.w(TAG,"Shutdown broadcast timed out");
        break;
      }
      try {
        mActionDoneSync.wait(delay);
      }
 catch (      InterruptedException e) {
      }
    }
  }
  Log.i(TAG,"Shutting down activity manager...");
  final IActivityManager am=ActivityManagerNative.asInterface(ServiceManager.checkService("activity"));
  if (am != null) {
    try {
      am.shutdown(MAX_BROADCAST_TIME);
    }
 catch (    RemoteException e) {
    }
  }
  final ITelephony phone=ITelephony.Stub.asInterface(ServiceManager.checkService("phone"));
  final IBluetooth bluetooth=IBluetooth.Stub.asInterface(ServiceManager.checkService(BluetoothAdapter.BLUETOOTH_SERVICE));
  final IMountService mount=IMountService.Stub.asInterface(ServiceManager.checkService("mount"));
  try {
    bluetoothOff=bluetooth == null || bluetooth.getBluetoothState() == BluetoothAdapter.STATE_OFF;
    if (!bluetoothOff) {
      Log.w(TAG,"Disabling Bluetooth...");
      bluetooth.disable(false);
    }
  }
 catch (  RemoteException ex) {
    Log.e(TAG,"RemoteException during bluetooth shutdown",ex);
    bluetoothOff=true;
  }
  try {
    radioOff=phone == null || !phone.isRadioOn();
    if (!radioOff) {
      Log.w(TAG,"Turning off radio...");
      phone.setRadio(false);
    }
  }
 catch (  RemoteException ex) {
    Log.e(TAG,"RemoteException during radio shutdown",ex);
    radioOff=true;
  }
  Log.i(TAG,"Waiting for Bluetooth and Radio...");
  for (int i=0; i < MAX_NUM_PHONE_STATE_READS; i++) {
    if (!bluetoothOff) {
      try {
        bluetoothOff=bluetooth.getBluetoothState() == BluetoothAdapter.STATE_OFF;
      }
 catch (      RemoteException ex) {
        Log.e(TAG,"RemoteException during bluetooth shutdown",ex);
        bluetoothOff=true;
      }
    }
    if (!radioOff) {
      try {
        radioOff=!phone.isRadioOn();
      }
 catch (      RemoteException ex) {
        Log.e(TAG,"RemoteException during radio shutdown",ex);
        radioOff=true;
      }
    }
    if (radioOff && bluetoothOff) {
      Log.i(TAG,"Radio and Bluetooth shutdown complete.");
      break;
    }
    SystemClock.sleep(PHONE_STATE_POLL_SLEEP_MSEC);
  }
  IMountShutdownObserver observer=new IMountShutdownObserver.Stub(){
    public void onShutDownComplete(    int statusCode) throws RemoteException {
      Log.w(TAG,"Result code " + statusCode + " from MountService.shutdown");
      actionDone();
    }
  }
;
  Log.i(TAG,"Shutting down MountService");
  mActionDone=false;
  final long endShutTime=System.currentTimeMillis() + MAX_SHUTDOWN_WAIT_TIME;
synchronized (mActionDoneSync) {
    try {
      if (mount != null) {
        mount.shutdown(observer);
      }
 else {
        Log.w(TAG,"MountService unavailable for shutdown");
      }
    }
 catch (    Exception e) {
      Log.e(TAG,"Exception during MountService shutdown",e);
    }
    while (!mActionDone) {
      long delay=endShutTime - System.currentTimeMillis();
      if (delay <= 0) {
        Log.w(TAG,"Shutdown wait timed out");
        break;
      }
      try {
        mActionDoneSync.wait(delay);
      }
 catch (      InterruptedException e) {
      }
    }
  }
  if (mReboot) {
    Log.i(TAG,"Rebooting, reason: " + mRebootReason);
    try {
      Power.reboot(mRebootReason);
    }
 catch (    Exception e) {
      Log.e(TAG,"Reboot failed, will attempt shutdown instead",e);
    }
  }
  Log.i(TAG,"Performing low-level shutdown...");
  Power.shutdown();
}
