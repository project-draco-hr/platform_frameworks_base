{
  super.onCreate(savedInstanceState);
  if (Log.isLoggable(TAG,Log.VERBOSE)) {
    Log.v(TAG,"ChooseTypeAndAccountActivity.onCreate(savedInstanceState=" + savedInstanceState + ")");
  }
  final AccountManager accountManager=AccountManager.get(this);
  final Intent intent=getIntent();
  String selectedAccountName=null;
  boolean selectedAddNewAccount=false;
  if (savedInstanceState != null) {
    mPendingRequest=savedInstanceState.getInt(KEY_INSTANCE_STATE_PENDING_REQUEST);
    mExistingAccounts=savedInstanceState.getParcelableArray(KEY_INSTANCE_STATE_EXISTING_ACCOUNTS);
    selectedAccountName=savedInstanceState.getString(KEY_INSTANCE_STATE_SELECTED_ACCOUNT_NAME);
    selectedAddNewAccount=savedInstanceState.getBoolean(KEY_INSTANCE_STATE_SELECTED_ADD_ACCOUNT,false);
  }
 else {
    mPendingRequest=REQUEST_NULL;
    mExistingAccounts=null;
    Account selectedAccount=(Account)intent.getParcelableExtra(EXTRA_SELECTED_ACCOUNT);
    if (selectedAccount != null) {
      selectedAccountName=selectedAccount.name;
    }
  }
  if (Log.isLoggable(TAG,Log.VERBOSE)) {
    Log.v(TAG,"selected account name is " + selectedAccountName);
  }
  final HashMap<String,AuthenticatorDescription> typeToAuthDescription=new HashMap<String,AuthenticatorDescription>();
  for (  AuthenticatorDescription desc : accountManager.getAuthenticatorTypes()) {
    typeToAuthDescription.put(desc.type,desc);
  }
  Set<Account> setOfAllowableAccounts=null;
  final ArrayList<Parcelable> validAccounts=intent.getParcelableArrayListExtra(EXTRA_ALLOWABLE_ACCOUNTS_ARRAYLIST);
  if (validAccounts != null) {
    setOfAllowableAccounts=new HashSet<Account>(validAccounts.size());
    for (    Parcelable parcelable : validAccounts) {
      setOfAllowableAccounts.add((Account)parcelable);
    }
  }
  Set<String> setOfRelevantAccountTypes=null;
  final String[] allowedAccountTypes=intent.getStringArrayExtra(EXTRA_ALLOWABLE_ACCOUNT_TYPES_STRING_ARRAY);
  if (allowedAccountTypes != null) {
    setOfRelevantAccountTypes=new HashSet<String>(allowedAccountTypes.length);
    Set<String> setOfAllowedAccountTypes=new HashSet<String>(allowedAccountTypes.length);
    for (    String type : allowedAccountTypes) {
      setOfAllowedAccountTypes.add(type);
    }
    AuthenticatorDescription[] descs=AccountManager.get(this).getAuthenticatorTypes();
    Set<String> supportedAccountTypes=new HashSet<String>(descs.length);
    for (    AuthenticatorDescription desc : descs) {
      supportedAccountTypes.add(desc.type);
    }
    for (    String acctType : setOfAllowedAccountTypes) {
      if (supportedAccountTypes.contains(acctType)) {
        setOfRelevantAccountTypes.add(acctType);
      }
    }
  }
  final Account[] accounts=accountManager.getAccounts();
  mAccounts=new ArrayList<Account>(accounts.length);
  mSelectedItemIndex=SELECTED_ITEM_NONE;
  for (  Account account : accounts) {
    if (setOfAllowableAccounts != null && !setOfAllowableAccounts.contains(account)) {
      continue;
    }
    if (setOfRelevantAccountTypes != null && !setOfRelevantAccountTypes.contains(account.type)) {
      continue;
    }
    if (account.name.equals(selectedAccountName)) {
      mSelectedItemIndex=mAccounts.size();
    }
    mAccounts.add(account);
  }
  if (mPendingRequest == REQUEST_NULL) {
    if (mAccounts.isEmpty()) {
      if (setOfRelevantAccountTypes.size() == 1) {
        runAddAccountForAuthenticator(setOfRelevantAccountTypes.iterator().next());
      }
 else {
        startChooseAccountTypeActivity();
      }
      return;
    }
    if (!intent.getBooleanExtra(EXTRA_ALWAYS_PROMPT_FOR_ACCOUNT,false) && mAccounts.size() == 1) {
      Account account=mAccounts.get(0);
      setResultAndFinish(account.name,account.type);
      return;
    }
  }
  setContentView(R.layout.choose_type_and_account);
  final String descriptionOverride=intent.getStringExtra(EXTRA_DESCRIPTION_TEXT_OVERRIDE);
  TextView descriptionView=(TextView)findViewById(R.id.description);
  if (!TextUtils.isEmpty(descriptionOverride)) {
    descriptionView.setText(descriptionOverride);
  }
 else {
    descriptionView.setVisibility(View.GONE);
  }
  String[] listItems=new String[mAccounts.size() + 1];
  for (int i=0; i < mAccounts.size(); i++) {
    listItems[i]=mAccounts.get(i).name;
  }
  listItems[mAccounts.size()]=getResources().getString(R.string.add_account_button_label);
  ListView list=(ListView)findViewById(android.R.id.list);
  list.setAdapter(new ArrayAdapter<String>(this,android.R.layout.simple_list_item_single_choice,listItems));
  list.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
  list.setItemsCanFocus(false);
  list.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View v,    int position,    long id){
      mSelectedItemIndex=position;
      mOkButton.setEnabled(true);
    }
  }
);
  if (selectedAddNewAccount) {
    mSelectedItemIndex=mAccounts.size();
  }
  if (mSelectedItemIndex != SELECTED_ITEM_NONE) {
    list.setItemChecked(mSelectedItemIndex,true);
    if (Log.isLoggable(TAG,Log.VERBOSE)) {
      Log.v(TAG,"List item " + mSelectedItemIndex + " should be selected");
    }
  }
  mOkButton=(Button)findViewById(android.R.id.button2);
  mOkButton.setEnabled(mSelectedItemIndex != SELECTED_ITEM_NONE);
}
