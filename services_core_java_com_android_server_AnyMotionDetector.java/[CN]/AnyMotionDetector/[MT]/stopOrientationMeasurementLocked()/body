{
  if (DEBUG)   Slog.d(TAG,"stopOrientationMeasurement. mMeasurementInProgress=" + mMeasurementInProgress);
  int status=RESULT_UNKNOWN;
  if (mMeasurementInProgress) {
    mSensorManager.unregisterListener(mListener);
    mHandler.removeCallbacks(mMeasurementTimeout);
    long detectionEndTime=SystemClock.elapsedRealtime();
    mMeasurementInProgress=false;
    mPreviousGravityVector=mCurrentGravityVector;
    mCurrentGravityVector=mRunningStats.getRunningAverage();
    if (DEBUG) {
      Slog.d(TAG,"mRunningStats = " + mRunningStats.toString());
      String currentGravityVectorString=(mCurrentGravityVector == null) ? "null" : mCurrentGravityVector.toString();
      String previousGravityVectorString=(mPreviousGravityVector == null) ? "null" : mPreviousGravityVector.toString();
      Slog.d(TAG,"mCurrentGravityVector = " + currentGravityVectorString);
      Slog.d(TAG,"mPreviousGravityVector = " + previousGravityVectorString);
    }
    mRunningStats.reset();
    status=getStationaryStatus();
    if (DEBUG)     Slog.d(TAG,"getStationaryStatus() returned " + status);
    if (status != RESULT_UNKNOWN) {
      mWakeLock.release();
      if (DEBUG) {
        Slog.d(TAG,"Moved from STATE_ACTIVE to STATE_INACTIVE. status = " + status);
      }
      mState=STATE_INACTIVE;
    }
 else {
      if (DEBUG)       Slog.d(TAG,"stopOrientationMeasurementLocked(): another measurement" + " scheduled in " + ORIENTATION_MEASUREMENT_INTERVAL_MILLIS + " milliseconds.");
      Message msg=Message.obtain(mHandler,mSensorRestart);
      msg.setAsynchronous(true);
      mHandler.sendMessageDelayed(msg,ORIENTATION_MEASUREMENT_INTERVAL_MILLIS);
    }
  }
  return status;
}
