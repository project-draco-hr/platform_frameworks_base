{
  if ((mPreviousGravityVector == null) || (mCurrentGravityVector == null)) {
    return RESULT_UNKNOWN;
  }
  Vector3 previousGravityVectorNormalized=mPreviousGravityVector.normalized();
  Vector3 currentGravityVectorNormalized=mCurrentGravityVector.normalized();
  float angle=previousGravityVectorNormalized.angleBetween(currentGravityVectorNormalized);
  if (DEBUG)   Slog.d(TAG,"getStationaryStatus: angle = " + angle);
  if ((angle < THRESHOLD_ANGLE) && (mRunningStats.getEnergy() < THRESHOLD_ENERGY)) {
    return RESULT_STATIONARY;
  }
 else   if (Float.isNaN(angle)) {
    return RESULT_MOVED;
  }
  long diffTime=mCurrentGravityVector.timeMillisSinceBoot - mPreviousGravityVector.timeMillisSinceBoot;
  if (diffTime > STALE_MEASUREMENT_TIMEOUT_MILLIS) {
    if (DEBUG)     Slog.d(TAG,"getStationaryStatus: mPreviousGravityVector is too stale at " + diffTime + " ms ago. Returning RESULT_UNKNOWN.");
    return RESULT_UNKNOWN;
  }
  return RESULT_MOVED;
}
