{
  if (mFirstPassLatch == null) {
    final RootsCache roots=DocumentsApplication.getRootsCache(getContext());
    for (    RootInfo root : roots.getRoots()) {
      if ((root.flags & Root.FLAG_SUPPORTS_RECENTS) != 0) {
        final RecentTask task=new RecentTask(root.authority,root.rootId);
        mTasks.put(root,task);
      }
    }
    mFirstPassLatch=new CountDownLatch(mTasks.size());
    for (    RecentTask task : mTasks.values()) {
      sExecutor.execute(task);
    }
    try {
      mFirstPassLatch.await(MAX_FIRST_PASS_WAIT_MILLIS,TimeUnit.MILLISECONDS);
      mFirstPassDone=true;
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(e);
    }
  }
  List<Cursor> cursors=Lists.newArrayList();
  for (  RecentTask task : mTasks.values()) {
    if (task.isDone()) {
      try {
        cursors.add(task.get());
      }
 catch (      InterruptedException e) {
        throw new RuntimeException(e);
      }
catch (      ExecutionException e) {
        Log.w(TAG,"Failed to load " + task.authority + ", "+ task.rootId,e);
      }
    }
  }
  final DirectoryResult result=new DirectoryResult();
  if (cursors.size() > 0) {
    final MergeCursor merged=new MergeCursor(cursors.toArray(new Cursor[cursors.size()]));
    final SortingCursorWrapper sorted=new SortingCursorWrapper(merged,State.SORT_ORDER_LAST_MODIFIED){
      @Override public void close(){
      }
    }
;
    result.cursor=sorted;
  }
  return result;
}
