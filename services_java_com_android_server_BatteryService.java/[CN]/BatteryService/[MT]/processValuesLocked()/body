{
  boolean logOutlier=false;
  long dischargeDuration=0;
  mBatteryLevelCritical=(mBatteryLevel <= mCriticalBatteryLevel);
  if (mAcOnline) {
    mPlugType=BatteryManager.BATTERY_PLUGGED_AC;
  }
 else   if (mUsbOnline) {
    mPlugType=BatteryManager.BATTERY_PLUGGED_USB;
  }
 else   if (mWirelessOnline) {
    mPlugType=BatteryManager.BATTERY_PLUGGED_WIRELESS;
  }
 else {
    mPlugType=BATTERY_PLUGGED_NONE;
  }
  if (DEBUG) {
    Slog.d(TAG,"Processing new values: " + "mAcOnline=" + mAcOnline + ", mUsbOnline="+ mUsbOnline+ ", mWirelessOnline="+ mWirelessOnline+ ", mBatteryStatus="+ mBatteryStatus+ ", mBatteryHealth="+ mBatteryHealth+ ", mBatteryPresent="+ mBatteryPresent+ ", mBatteryLevel="+ mBatteryLevel+ ", mBatteryTechnology="+ mBatteryTechnology+ ", mBatteryVoltage="+ mBatteryVoltage+ ", mBatteryTemperature="+ mBatteryTemperature+ ", mBatteryLevelCritical="+ mBatteryLevelCritical+ ", mPlugType="+ mPlugType);
  }
  try {
    mBatteryStats.setBatteryState(mBatteryStatus,mBatteryHealth,mPlugType,mBatteryLevel,mBatteryTemperature,mBatteryVoltage);
  }
 catch (  RemoteException e) {
  }
  shutdownIfNoPowerLocked();
  shutdownIfOverTempLocked();
  if (mBatteryStatus != mLastBatteryStatus || mBatteryHealth != mLastBatteryHealth || mBatteryPresent != mLastBatteryPresent || mBatteryLevel != mLastBatteryLevel || mPlugType != mLastPlugType || mBatteryVoltage != mLastBatteryVoltage || mBatteryTemperature != mLastBatteryTemperature || mInvalidCharger != mLastInvalidCharger) {
    if (mPlugType != mLastPlugType) {
      if (mLastPlugType == BATTERY_PLUGGED_NONE) {
        if (mDischargeStartTime != 0 && mDischargeStartLevel != mBatteryLevel) {
          dischargeDuration=SystemClock.elapsedRealtime() - mDischargeStartTime;
          logOutlier=true;
          EventLog.writeEvent(EventLogTags.BATTERY_DISCHARGE,dischargeDuration,mDischargeStartLevel,mBatteryLevel);
          mDischargeStartTime=0;
        }
      }
 else       if (mPlugType == BATTERY_PLUGGED_NONE) {
        mDischargeStartTime=SystemClock.elapsedRealtime();
        mDischargeStartLevel=mBatteryLevel;
      }
    }
    if (mBatteryStatus != mLastBatteryStatus || mBatteryHealth != mLastBatteryHealth || mBatteryPresent != mLastBatteryPresent || mPlugType != mLastPlugType) {
      EventLog.writeEvent(EventLogTags.BATTERY_STATUS,mBatteryStatus,mBatteryHealth,mBatteryPresent ? 1 : 0,mPlugType,mBatteryTechnology);
    }
    if (mBatteryLevel != mLastBatteryLevel) {
      EventLog.writeEvent(EventLogTags.BATTERY_LEVEL,mBatteryLevel,mBatteryVoltage,mBatteryTemperature);
    }
    if (mBatteryLevelCritical && !mLastBatteryLevelCritical && mPlugType == BATTERY_PLUGGED_NONE) {
      dischargeDuration=SystemClock.elapsedRealtime() - mDischargeStartTime;
      logOutlier=true;
    }
    final boolean plugged=mPlugType != BATTERY_PLUGGED_NONE;
    final boolean oldPlugged=mLastPlugType != BATTERY_PLUGGED_NONE;
    final boolean sendBatteryLow=!plugged && mBatteryStatus != BatteryManager.BATTERY_STATUS_UNKNOWN && mBatteryLevel <= mLowBatteryWarningLevel && (oldPlugged || mLastBatteryLevel > mLowBatteryWarningLevel);
    sendIntentLocked();
    if (mPlugType != 0 && mLastPlugType == 0) {
      mHandler.post(new Runnable(){
        @Override public void run(){
          Intent statusIntent=new Intent(Intent.ACTION_POWER_CONNECTED);
          statusIntent.setFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT);
          mContext.sendBroadcastAsUser(statusIntent,UserHandle.ALL);
        }
      }
);
    }
 else     if (mPlugType == 0 && mLastPlugType != 0) {
      mHandler.post(new Runnable(){
        @Override public void run(){
          Intent statusIntent=new Intent(Intent.ACTION_POWER_DISCONNECTED);
          statusIntent.setFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT);
          mContext.sendBroadcastAsUser(statusIntent,UserHandle.ALL);
        }
      }
);
    }
    if (sendBatteryLow) {
      mSentLowBatteryBroadcast=true;
      mHandler.post(new Runnable(){
        @Override public void run(){
          Intent statusIntent=new Intent(Intent.ACTION_BATTERY_LOW);
          statusIntent.setFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT);
          mContext.sendBroadcastAsUser(statusIntent,UserHandle.ALL);
        }
      }
);
    }
 else     if (mSentLowBatteryBroadcast && mLastBatteryLevel >= mLowBatteryCloseWarningLevel) {
      mSentLowBatteryBroadcast=false;
      mHandler.post(new Runnable(){
        @Override public void run(){
          Intent statusIntent=new Intent(Intent.ACTION_BATTERY_OKAY);
          statusIntent.setFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT);
          mContext.sendBroadcastAsUser(statusIntent,UserHandle.ALL);
        }
      }
);
    }
    mLed.updateLightsLocked();
    if (logOutlier && dischargeDuration != 0) {
      logOutlierLocked(dischargeDuration);
    }
    mLastBatteryStatus=mBatteryStatus;
    mLastBatteryHealth=mBatteryHealth;
    mLastBatteryPresent=mBatteryPresent;
    mLastBatteryLevel=mBatteryLevel;
    mLastPlugType=mPlugType;
    mLastBatteryVoltage=mBatteryVoltage;
    mLastBatteryTemperature=mBatteryTemperature;
    mLastBatteryLevelCritical=mBatteryLevelCritical;
    mLastInvalidCharger=mInvalidCharger;
  }
}
