{
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println("Permission Denial: can't dump Battery service from from pid=" + Binder.getCallingPid() + ", uid="+ Binder.getCallingUid());
    return;
  }
synchronized (mLock) {
    if (args == null || args.length == 0 || "-a".equals(args[0])) {
      pw.println("Current Battery Service state:");
      if (mUpdatesStopped) {
        pw.println("  (UPDATES STOPPED -- use 'reset' to restart)");
      }
      pw.println("  AC powered: " + mAcOnline);
      pw.println("  USB powered: " + mUsbOnline);
      pw.println("  Wireless powered: " + mWirelessOnline);
      pw.println("  status: " + mBatteryStatus);
      pw.println("  health: " + mBatteryHealth);
      pw.println("  present: " + mBatteryPresent);
      pw.println("  level: " + mBatteryLevel);
      pw.println("  scale: " + BATTERY_SCALE);
      pw.println("  voltage:" + mBatteryVoltage);
      pw.println("  temperature: " + mBatteryTemperature);
      pw.println("  technology: " + mBatteryTechnology);
    }
 else     if (args.length == 3 && "set".equals(args[0])) {
      String key=args[1];
      String value=args[2];
      try {
        boolean update=true;
        if ("ac".equals(key)) {
          mAcOnline=Integer.parseInt(value) != 0;
        }
 else         if ("usb".equals(key)) {
          mUsbOnline=Integer.parseInt(value) != 0;
        }
 else         if ("wireless".equals(key)) {
          mWirelessOnline=Integer.parseInt(value) != 0;
        }
 else         if ("status".equals(key)) {
          mBatteryStatus=Integer.parseInt(value);
        }
 else         if ("level".equals(key)) {
          mBatteryLevel=Integer.parseInt(value);
        }
 else         if ("invalid".equals(key)) {
          mInvalidCharger=Integer.parseInt(value);
        }
 else {
          pw.println("Unknown set option: " + key);
          update=false;
        }
        if (update) {
          long ident=Binder.clearCallingIdentity();
          try {
            mUpdatesStopped=true;
            processValuesLocked();
          }
  finally {
            Binder.restoreCallingIdentity(ident);
          }
        }
      }
 catch (      NumberFormatException ex) {
        pw.println("Bad value: " + value);
      }
    }
 else     if (args.length == 1 && "reset".equals(args[0])) {
      long ident=Binder.clearCallingIdentity();
      try {
        mUpdatesStopped=false;
        updateLocked();
      }
  finally {
        Binder.restoreCallingIdentity(ident);
      }
    }
 else {
      pw.println("Dump current battery state, or:");
      pw.println("  set ac|usb|wireless|status|level|invalid <value>");
      pw.println("  reset");
    }
  }
}
