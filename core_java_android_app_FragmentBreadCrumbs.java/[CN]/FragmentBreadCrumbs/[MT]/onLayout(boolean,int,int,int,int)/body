{
  final int childCount=getChildCount();
  if (childCount == 0) {
    return;
  }
  final View child=getChildAt(0);
  final int childTop=mPaddingTop;
  final int childBottom=mPaddingTop + child.getMeasuredHeight() - mPaddingBottom;
  int childLeft;
  int childRight;
  final int layoutDirection=getLayoutDirection();
  final int horizontalGravity=mGravity & Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK;
switch (Gravity.getAbsoluteGravity(horizontalGravity,layoutDirection)) {
case Gravity.RIGHT:
    childRight=mRight - mLeft - mPaddingRight;
  childLeft=childRight - child.getMeasuredWidth();
break;
case Gravity.CENTER_HORIZONTAL:
childLeft=mPaddingLeft + (mRight - mLeft - child.getMeasuredWidth()) / 2;
childRight=childLeft + child.getMeasuredWidth();
break;
case Gravity.LEFT:
default :
childLeft=mPaddingLeft;
childRight=childLeft + child.getMeasuredWidth();
break;
}
if (childLeft < mPaddingLeft) {
childLeft=mPaddingLeft;
}
if (childRight > mRight - mLeft - mPaddingRight) {
childRight=mRight - mLeft - mPaddingRight;
}
child.layout(childLeft,childTop,childRight,childBottom);
}
