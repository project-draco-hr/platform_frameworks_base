{
  super.onActivityCreated(savedInstanceState);
  final Context context=getActivity();
  final State state=getDisplayState(DirectoryFragment.this);
  mAdapter=new DocumentsAdapter();
  mType=getArguments().getInt(EXTRA_TYPE);
  mCallbacks=new LoaderCallbacks<DirectoryResult>(){
    @Override public Loader<DirectoryResult> onCreateLoader(    int id,    Bundle args){
      final RootInfo root=getArguments().getParcelable(EXTRA_ROOT);
      final DocumentInfo doc=getArguments().getParcelable(EXTRA_DOC);
      final String query=getArguments().getString(EXTRA_QUERY);
      Uri contentsUri;
switch (mType) {
case TYPE_NORMAL:
        contentsUri=DocumentsContract.buildChildDocumentsUri(doc.authority,doc.documentId);
      if (state.action == ACTION_MANAGE) {
        contentsUri=DocumentsContract.setManageMode(contentsUri);
      }
    return new DirectoryLoader(context,mType,root,doc,contentsUri,state.userSortOrder);
case TYPE_SEARCH:
  contentsUri=DocumentsContract.buildSearchDocumentsUri(doc.authority,doc.documentId,query);
if (state.action == ACTION_MANAGE) {
  contentsUri=DocumentsContract.setManageMode(contentsUri);
}
return new DirectoryLoader(context,mType,root,doc,contentsUri,state.userSortOrder);
case TYPE_RECENT_OPEN:
final RootsCache roots=DocumentsApplication.getRootsCache(context);
final List<RootInfo> matchingRoots=roots.getMatchingRoots(state);
return new RecentLoader(context,matchingRoots,state.acceptMimes);
default :
throw new IllegalStateException("Unknown type " + mType);
}
}
@Override public void onLoadFinished(Loader<DirectoryResult> loader,DirectoryResult result){
if (!isAdded()) return;
mAdapter.swapCursor(result.cursor);
if (result.mode != MODE_UNKNOWN) {
state.derivedMode=result.mode;
}
state.derivedSortOrder=result.sortOrder;
((DocumentsActivity)context).onStateChanged();
updateDisplayState();
if (mLastSortOrder != state.derivedSortOrder) {
mLastSortOrder=state.derivedSortOrder;
mListView.smoothScrollToPosition(0);
mGridView.smoothScrollToPosition(0);
}
}
@Override public void onLoaderReset(Loader<DirectoryResult> loader){
mAdapter.swapCursor(null);
}
}
;
getLoaderManager().restartLoader(mLoaderId,null,mCallbacks);
updateDisplayState();
}
