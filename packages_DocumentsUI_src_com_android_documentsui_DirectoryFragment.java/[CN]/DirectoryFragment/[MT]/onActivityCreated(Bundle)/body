{
  super.onActivityCreated(savedInstanceState);
  final Context context=getActivity();
  mAdapter=new DocumentsAdapter();
  mType=getArguments().getInt(EXTRA_TYPE);
  mCallbacks=new LoaderCallbacks<DirectoryResult>(){
    @Override public Loader<DirectoryResult> onCreateLoader(    int id,    Bundle args){
      final State state=getDisplayState(DirectoryFragment.this);
      final String authority=getArguments().getString(EXTRA_AUTHORITY);
      final String rootId=getArguments().getString(EXTRA_ROOT_ID);
      final String docId=getArguments().getString(EXTRA_DOC_ID);
      final String query=getArguments().getString(EXTRA_QUERY);
      Uri contentsUri;
switch (mType) {
case TYPE_NORMAL:
        contentsUri=DocumentsContract.buildChildDocumentsUri(authority,docId);
      return new DirectoryLoader(context,rootId,contentsUri,state.sortOrder);
case TYPE_SEARCH:
    contentsUri=DocumentsContract.buildSearchDocumentsUri(authority,docId,query);
  return new DirectoryLoader(context,rootId,contentsUri,state.sortOrder);
case TYPE_RECENT_OPEN:
final RootsCache roots=DocumentsApplication.getRootsCache(context);
final List<RootInfo> matchingRoots=roots.getMatchingRoots(state);
return new RecentLoader(context,matchingRoots);
default :
throw new IllegalStateException("Unknown type " + mType);
}
}
@Override public void onLoadFinished(Loader<DirectoryResult> loader,DirectoryResult result){
mAdapter.swapCursor(result.cursor);
}
@Override public void onLoaderReset(Loader<DirectoryResult> loader){
mAdapter.swapCursor(null);
}
}
;
updateDisplayState();
}
