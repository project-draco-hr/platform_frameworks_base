{
  final Context context=inflater.getContext();
  final View view=inflater.inflate(R.layout.fragment_directory,container,false);
  mEmptyView=view.findViewById(android.R.id.empty);
  mListView=(ListView)view.findViewById(R.id.list);
  mListView.setOnItemClickListener(mItemListener);
  mListView.setMultiChoiceModeListener(mMultiListener);
  mGridView=(GridView)view.findViewById(R.id.grid);
  mGridView.setOnItemClickListener(mItemListener);
  mGridView.setMultiChoiceModeListener(mMultiListener);
  mAdapter=new DocumentsAdapter();
  final Uri uri=getArguments().getParcelable(EXTRA_URI);
  mType=getArguments().getInt(EXTRA_TYPE);
  mCallbacks=new LoaderCallbacks<DirectoryResult>(){
    @Override public Loader<DirectoryResult> onCreateLoader(    int id,    Bundle args){
      final DisplayState state=getDisplayState(DirectoryFragment.this);
      mFilter=new MimePredicate(state.acceptMimes);
      Uri contentsUri;
      if (mType == TYPE_NORMAL) {
        contentsUri=DocumentsContract.buildChildDocumentsUri(uri.getAuthority(),DocumentsContract.getDocumentId(uri));
      }
 else       if (mType == TYPE_RECENT_OPEN) {
        contentsUri=RecentsProvider.buildRecentOpen();
      }
 else {
        contentsUri=uri;
      }
      final Comparator<DocumentInfo> sortOrder;
      if (state.sortOrder == SORT_ORDER_LAST_MODIFIED || mType == TYPE_RECENT_OPEN) {
        sortOrder=new DocumentInfo.LastModifiedComparator();
      }
 else       if (state.sortOrder == SORT_ORDER_DISPLAY_NAME) {
        sortOrder=new DocumentInfo.DisplayNameComparator();
      }
 else       if (state.sortOrder == SORT_ORDER_SIZE) {
        sortOrder=new DocumentInfo.SizeComparator();
      }
 else {
        throw new IllegalArgumentException("Unknown sort order " + state.sortOrder);
      }
      return new DirectoryLoader(context,contentsUri,mType,null,sortOrder);
    }
    @Override public void onLoadFinished(    Loader<DirectoryResult> loader,    DirectoryResult result){
      mAdapter.swapDocuments(result.contents);
    }
    @Override public void onLoaderReset(    Loader<DirectoryResult> loader){
      mAdapter.swapDocuments(null);
    }
  }
;
  updateDisplayState();
  return view;
}
