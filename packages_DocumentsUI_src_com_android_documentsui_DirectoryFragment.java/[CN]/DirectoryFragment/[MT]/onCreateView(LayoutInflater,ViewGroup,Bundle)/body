{
  final Context context=inflater.getContext();
  final View view=inflater.inflate(R.layout.fragment_directory,container,false);
  mListView=(ListView)view.findViewById(R.id.list);
  mListView.setOnItemClickListener(mItemListener);
  mListView.setMultiChoiceModeListener(mMultiListener);
  mGridView=(GridView)view.findViewById(R.id.grid);
  mGridView.setOnItemClickListener(mItemListener);
  mGridView.setMultiChoiceModeListener(mMultiListener);
  mAdapter=new DocumentsAdapter(context);
  updateMode();
  final Uri docsUri=getArguments().getParcelable(EXTRA_DOCS_URI);
  mFlags=getDocumentFlags(context,docsUri);
  mCallbacks=new LoaderCallbacks<Cursor>(){
    @Override public Loader<Cursor> onCreateLoader(    int id,    Bundle args){
      final DisplayState state=getDisplayState(DirectoryFragment.this);
      final String sortOrder;
      if (state.sortBy == DisplayState.SORT_BY_NAME) {
        sortOrder=DocumentColumns.DISPLAY_NAME + " ASC";
      }
 else       if (state.sortBy == DisplayState.SORT_BY_DATE) {
        sortOrder=DocumentColumns.LAST_MODIFIED + " DESC";
      }
 else {
        sortOrder=null;
      }
      final Uri contentsUri;
      if (docsUri.getQueryParameter(DocumentsContract.PARAM_QUERY) != null) {
        contentsUri=docsUri;
      }
 else {
        contentsUri=DocumentsContract.buildContentsUri(docsUri);
      }
      return new CursorLoader(context,contentsUri,null,null,null,sortOrder);
    }
    @Override public void onLoadFinished(    Loader<Cursor> loader,    Cursor data){
      mAdapter.swapCursor(data);
    }
    @Override public void onLoaderReset(    Loader<Cursor> loader){
      mAdapter.swapCursor(null);
    }
  }
;
  return view;
}
