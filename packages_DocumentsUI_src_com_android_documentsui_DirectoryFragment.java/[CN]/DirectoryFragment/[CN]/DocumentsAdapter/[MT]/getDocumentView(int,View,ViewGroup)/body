{
  final Context context=parent.getContext();
  final State state=getDisplayState(DirectoryFragment.this);
  final RootsCache roots=DocumentsApplication.getRootsCache(context);
  final ThumbnailCache thumbs=DocumentsApplication.getThumbnailsCache(context,mThumbSize);
  if (convertView == null) {
    final LayoutInflater inflater=LayoutInflater.from(context);
    if (state.derivedMode == MODE_LIST) {
      convertView=inflater.inflate(R.layout.item_doc_list,parent,false);
    }
 else     if (state.derivedMode == MODE_GRID) {
      convertView=inflater.inflate(R.layout.item_doc_grid,parent,false);
    }
 else {
      throw new IllegalStateException();
    }
  }
  final Cursor cursor=getItem(position);
  final String docAuthority=getCursorString(cursor,RootCursorWrapper.COLUMN_AUTHORITY);
  final String docRootId=getCursorString(cursor,RootCursorWrapper.COLUMN_ROOT_ID);
  final String docId=getCursorString(cursor,Document.COLUMN_DOCUMENT_ID);
  final String docMimeType=getCursorString(cursor,Document.COLUMN_MIME_TYPE);
  final String docDisplayName=getCursorString(cursor,Document.COLUMN_DISPLAY_NAME);
  final long docLastModified=getCursorLong(cursor,Document.COLUMN_LAST_MODIFIED);
  final int docIcon=getCursorInt(cursor,Document.COLUMN_ICON);
  final int docFlags=getCursorInt(cursor,Document.COLUMN_FLAGS);
  final String docSummary=getCursorString(cursor,Document.COLUMN_SUMMARY);
  final long docSize=getCursorLong(cursor,Document.COLUMN_SIZE);
  final ImageView icon=(ImageView)convertView.findViewById(android.R.id.icon);
  final TextView title=(TextView)convertView.findViewById(android.R.id.title);
  final View line2=convertView.findViewById(R.id.line2);
  final ImageView icon1=(ImageView)convertView.findViewById(android.R.id.icon1);
  final TextView summary=(TextView)convertView.findViewById(android.R.id.summary);
  final TextView date=(TextView)convertView.findViewById(R.id.date);
  final TextView size=(TextView)convertView.findViewById(R.id.size);
  final ThumbnailAsyncTask oldTask=(ThumbnailAsyncTask)icon.getTag();
  if (oldTask != null) {
    oldTask.cancel(false);
  }
  final boolean supportsThumbnail=(docFlags & Document.FLAG_SUPPORTS_THUMBNAIL) != 0;
  final boolean allowThumbnail=(state.derivedMode == MODE_GRID) || MimePredicate.mimeMatches(LIST_THUMBNAIL_MIMES,docMimeType);
  if (supportsThumbnail && allowThumbnail) {
    final Uri uri=DocumentsContract.buildDocumentUri(docAuthority,docId);
    final Bitmap cachedResult=thumbs.get(uri);
    if (cachedResult != null) {
      icon.setImageBitmap(cachedResult);
    }
 else {
      final ThumbnailAsyncTask task=new ThumbnailAsyncTask(icon,mThumbSize);
      icon.setImageBitmap(null);
      icon.setTag(task);
      task.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,uri);
    }
  }
 else   if (docIcon != 0) {
    icon.setImageDrawable(IconUtils.loadPackageIcon(context,docAuthority,docIcon));
  }
 else {
    icon.setImageDrawable(IconUtils.loadMimeIcon(context,docMimeType));
  }
  title.setText(docDisplayName);
  boolean hasLine2=false;
  if (mType == TYPE_RECENT_OPEN) {
    final RootInfo root=roots.getRoot(docAuthority,docRootId);
    icon1.setVisibility(View.VISIBLE);
    icon1.setImageDrawable(root.loadIcon(context));
    summary.setText(root.getDirectoryString());
    summary.setVisibility(View.VISIBLE);
    summary.setTextAlignment(TextView.TEXT_ALIGNMENT_TEXT_END);
    hasLine2=true;
  }
 else {
    icon1.setVisibility(View.GONE);
    if (docSummary != null) {
      summary.setText(docSummary);
      summary.setVisibility(View.VISIBLE);
      hasLine2=true;
    }
 else {
      summary.setVisibility(View.INVISIBLE);
    }
  }
  if (docLastModified == -1) {
    date.setText(null);
  }
 else {
    date.setText(formatTime(context,docLastModified));
    hasLine2=true;
  }
  if (state.showSize) {
    size.setVisibility(View.VISIBLE);
    if (Document.MIME_TYPE_DIR.equals(docMimeType) || docSize == -1) {
      size.setText(null);
    }
 else {
      size.setText(Formatter.formatFileSize(context,docSize));
      hasLine2=true;
    }
  }
 else {
    size.setVisibility(View.GONE);
  }
  line2.setVisibility(hasLine2 ? View.VISIBLE : View.GONE);
  final boolean enabled=Document.MIME_TYPE_DIR.equals(docMimeType) || MimePredicate.mimeMatches(state.acceptMimes,docMimeType);
  if (enabled) {
    setEnabledRecursive(convertView,true);
    icon.setAlpha(1f);
    icon1.setAlpha(1f);
  }
 else {
    setEnabledRecursive(convertView,false);
    icon.setAlpha(0.5f);
    icon1.setAlpha(0.5f);
  }
  return convertView;
}
