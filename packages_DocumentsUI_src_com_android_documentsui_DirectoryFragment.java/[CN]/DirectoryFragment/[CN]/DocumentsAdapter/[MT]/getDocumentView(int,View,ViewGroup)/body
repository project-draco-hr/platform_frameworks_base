{
  final Context context=parent.getContext();
  final State state=getDisplayState(DirectoryFragment.this);
  final DocumentInfo doc=getArguments().getParcelable(EXTRA_DOC);
  final RootsCache roots=DocumentsApplication.getRootsCache(context);
  final ThumbnailCache thumbs=DocumentsApplication.getThumbnailsCache(context,mThumbSize);
  if (convertView == null) {
    final LayoutInflater inflater=LayoutInflater.from(context);
    if (state.derivedMode == MODE_LIST) {
      convertView=inflater.inflate(R.layout.item_doc_list,parent,false);
    }
 else     if (state.derivedMode == MODE_GRID) {
      convertView=inflater.inflate(R.layout.item_doc_grid,parent,false);
      final FrameLayout grid=(FrameLayout)convertView;
      final int gridPadding=getResources().getDimensionPixelSize(R.dimen.grid_padding);
      final Drawable fg=grid.getForeground();
      final Drawable bg=grid.getBackground();
      grid.setForeground(null);
      grid.setBackground(null);
      grid.setForeground(new InsetDrawable(fg,gridPadding));
      grid.setBackground(new InsetDrawable(bg,gridPadding));
    }
 else {
      throw new IllegalStateException();
    }
  }
  final Cursor cursor=getItem(position);
  final String docAuthority=getCursorString(cursor,RootCursorWrapper.COLUMN_AUTHORITY);
  final String docRootId=getCursorString(cursor,RootCursorWrapper.COLUMN_ROOT_ID);
  final String docId=getCursorString(cursor,Document.COLUMN_DOCUMENT_ID);
  final String docMimeType=getCursorString(cursor,Document.COLUMN_MIME_TYPE);
  final String docDisplayName=getCursorString(cursor,Document.COLUMN_DISPLAY_NAME);
  final long docLastModified=getCursorLong(cursor,Document.COLUMN_LAST_MODIFIED);
  final int docIcon=getCursorInt(cursor,Document.COLUMN_ICON);
  final int docFlags=getCursorInt(cursor,Document.COLUMN_FLAGS);
  final String docSummary=getCursorString(cursor,Document.COLUMN_SUMMARY);
  final long docSize=getCursorLong(cursor,Document.COLUMN_SIZE);
  final View line1=convertView.findViewById(R.id.line1);
  final View line2=convertView.findViewById(R.id.line2);
  final View icon=convertView.findViewById(android.R.id.icon);
  final ImageView iconMime=(ImageView)convertView.findViewById(R.id.icon_mime);
  final ImageView iconThumb=(ImageView)convertView.findViewById(R.id.icon_thumb);
  final TextView title=(TextView)convertView.findViewById(android.R.id.title);
  final ImageView icon1=(ImageView)convertView.findViewById(android.R.id.icon1);
  final ImageView icon2=(ImageView)convertView.findViewById(android.R.id.icon2);
  final TextView summary=(TextView)convertView.findViewById(android.R.id.summary);
  final TextView date=(TextView)convertView.findViewById(R.id.date);
  final TextView size=(TextView)convertView.findViewById(R.id.size);
  final ThumbnailAsyncTask oldTask=(ThumbnailAsyncTask)iconThumb.getTag();
  if (oldTask != null) {
    oldTask.reallyCancel();
    iconThumb.setTag(null);
  }
  iconMime.animate().cancel();
  iconThumb.animate().cancel();
  final boolean supportsThumbnail=(docFlags & Document.FLAG_SUPPORTS_THUMBNAIL) != 0;
  final boolean allowThumbnail=(state.derivedMode == MODE_GRID) || MimePredicate.mimeMatches(MimePredicate.VISUAL_MIMES,docMimeType);
  final boolean showThumbnail=supportsThumbnail && allowThumbnail;
  boolean cacheHit=false;
  if (showThumbnail) {
    final Uri uri=DocumentsContract.buildDocumentUri(docAuthority,docId);
    final Bitmap cachedResult=thumbs.get(uri);
    if (cachedResult != null) {
      iconThumb.setImageBitmap(cachedResult);
      cacheHit=true;
    }
 else {
      iconThumb.setImageDrawable(null);
      final ThumbnailAsyncTask task=new ThumbnailAsyncTask(uri,iconMime,iconThumb,mThumbSize);
      iconThumb.setTag(task);
      task.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
    }
  }
  if (cacheHit) {
    iconMime.setAlpha(0f);
    iconThumb.setAlpha(1f);
  }
 else {
    iconMime.setAlpha(1f);
    iconThumb.setAlpha(0f);
    if (docIcon != 0) {
      iconMime.setImageDrawable(IconUtils.loadPackageIcon(context,docAuthority,docIcon));
    }
 else {
      iconMime.setImageDrawable(IconUtils.loadMimeIcon(context,docMimeType,docAuthority,docId,state.derivedMode));
    }
  }
  boolean hasLine1=false;
  boolean hasLine2=false;
  final boolean hideTitle=(state.derivedMode == MODE_GRID) && mHideGridTitles;
  if (!hideTitle) {
    title.setText(docDisplayName);
    hasLine1=true;
  }
  Drawable iconDrawable=null;
  if (mType == TYPE_RECENT_OPEN) {
    final RootInfo root=roots.getRootBlocking(docAuthority,docRootId);
    iconDrawable=root.loadIcon(context);
    if (summary != null) {
      final boolean alwaysShowSummary=getResources().getBoolean(R.bool.always_show_summary);
      if (alwaysShowSummary) {
        summary.setText(root.getDirectoryString());
        summary.setVisibility(View.VISIBLE);
        hasLine2=true;
      }
 else {
        if (iconDrawable != null && roots.isIconUniqueBlocking(root)) {
          summary.setVisibility(View.INVISIBLE);
        }
 else {
          summary.setText(root.getDirectoryString());
          summary.setVisibility(View.VISIBLE);
          summary.setTextAlignment(TextView.TEXT_ALIGNMENT_TEXT_END);
          hasLine2=true;
        }
      }
    }
  }
 else {
    if (Document.MIME_TYPE_DIR.equals(docMimeType) && state.derivedMode == MODE_GRID && showThumbnail) {
      iconDrawable=context.getResources().getDrawable(R.drawable.ic_root_folder);
    }
    if (summary != null) {
      if (docSummary != null) {
        summary.setText(docSummary);
        summary.setVisibility(View.VISIBLE);
        hasLine2=true;
      }
 else {
        summary.setVisibility(View.INVISIBLE);
      }
    }
  }
  if (icon1 != null)   icon1.setVisibility(View.GONE);
  if (icon2 != null)   icon2.setVisibility(View.GONE);
  if (iconDrawable != null) {
    if (hasLine1) {
      icon1.setVisibility(View.VISIBLE);
      icon1.setImageDrawable(iconDrawable);
    }
 else {
      icon2.setVisibility(View.VISIBLE);
      icon2.setImageDrawable(iconDrawable);
    }
  }
  if (docLastModified == -1) {
    date.setText(null);
  }
 else {
    date.setText(formatTime(context,docLastModified));
    hasLine2=true;
  }
  if (state.showSize) {
    size.setVisibility(View.VISIBLE);
    if (Document.MIME_TYPE_DIR.equals(docMimeType) || docSize == -1) {
      size.setText(null);
    }
 else {
      size.setText(Formatter.formatFileSize(context,docSize));
      hasLine2=true;
    }
  }
 else {
    size.setVisibility(View.GONE);
  }
  if (line1 != null) {
    line1.setVisibility(hasLine1 ? View.VISIBLE : View.GONE);
  }
  if (line2 != null) {
    line2.setVisibility(hasLine2 ? View.VISIBLE : View.GONE);
  }
  boolean enabled=Document.MIME_TYPE_DIR.equals(docMimeType) || MimePredicate.mimeMatches(state.acceptMimes,docMimeType);
  if (state.action == ACTION_CREATE && (docFlags & Document.FLAG_SUPPORTS_WRITE) == 0) {
    enabled=false;
  }
  if (enabled) {
    setEnabledRecursive(convertView,true);
    icon.setAlpha(1f);
    if (icon1 != null)     icon1.setAlpha(1f);
    if (icon2 != null)     icon2.setAlpha(1f);
  }
 else {
    setEnabledRecursive(convertView,false);
    icon.setAlpha(0.5f);
    if (icon1 != null)     icon1.setAlpha(0.5f);
    if (icon2 != null)     icon2.setAlpha(0.5f);
  }
  return convertView;
}
