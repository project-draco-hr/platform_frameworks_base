{
  final Context context=parent.getContext();
  final DisplayState state=getDisplayState(DirectoryFragment.this);
  final RootsCache roots=DocumentsApplication.getRootsCache(context);
  final ThumbnailCache thumbs=DocumentsApplication.getThumbnailsCache(context,mThumbSize);
  if (convertView == null) {
    final LayoutInflater inflater=LayoutInflater.from(context);
    if (state.mode == MODE_LIST) {
      convertView=inflater.inflate(R.layout.item_doc_list,parent,false);
    }
 else     if (state.mode == MODE_GRID) {
      convertView=inflater.inflate(R.layout.item_doc_grid,parent,false);
    }
 else {
      throw new IllegalStateException();
    }
  }
  final Cursor cursor=getItem(position);
  final String docId=getCursorString(cursor,Document.COLUMN_DOCUMENT_ID);
  final String docMimeType=getCursorString(cursor,Document.COLUMN_MIME_TYPE);
  final String docDisplayName=getCursorString(cursor,Document.COLUMN_DISPLAY_NAME);
  final long docLastModified=getCursorLong(cursor,Document.COLUMN_LAST_MODIFIED);
  final int docIcon=getCursorInt(cursor,Document.COLUMN_ICON);
  final int docFlags=getCursorInt(cursor,Document.COLUMN_FLAGS);
  final String docSummary=getCursorString(cursor,Document.COLUMN_SUMMARY);
  final long docSize=getCursorLong(cursor,Document.COLUMN_SIZE);
  final ImageView icon=(ImageView)convertView.findViewById(android.R.id.icon);
  final TextView title=(TextView)convertView.findViewById(android.R.id.title);
  final View summaryGrid=convertView.findViewById(R.id.summary_grid);
  final ImageView icon1=(ImageView)convertView.findViewById(android.R.id.icon1);
  final TextView summary=(TextView)convertView.findViewById(android.R.id.summary);
  final TextView date=(TextView)convertView.findViewById(R.id.date);
  final TextView size=(TextView)convertView.findViewById(R.id.size);
  final ThumbnailAsyncTask oldTask=(ThumbnailAsyncTask)icon.getTag();
  if (oldTask != null) {
    oldTask.cancel(false);
  }
  if ((docFlags & Document.FLAG_SUPPORTS_THUMBNAIL) != 0) {
    final Uri uri=DocumentsContract.buildDocumentUri(mAuthority,docId);
    final Bitmap cachedResult=thumbs.get(uri);
    if (cachedResult != null) {
      icon.setImageBitmap(cachedResult);
    }
 else {
      final ThumbnailAsyncTask task=new ThumbnailAsyncTask(icon,mThumbSize);
      icon.setImageBitmap(null);
      icon.setTag(task);
      task.execute(uri);
    }
  }
 else   if (docIcon != 0) {
    icon.setImageDrawable(DocumentInfo.loadIcon(context,mAuthority,docIcon));
  }
 else {
    icon.setImageDrawable(RootsCache.resolveDocumentIcon(context,docMimeType));
  }
  title.setText(docDisplayName);
  icon1.setVisibility(View.GONE);
  if (docSummary != null) {
    summary.setText(docSummary);
    summary.setVisibility(View.VISIBLE);
  }
 else {
    summary.setVisibility(View.INVISIBLE);
  }
  if (summaryGrid != null) {
    summaryGrid.setVisibility((summary.getVisibility() == View.VISIBLE) ? View.VISIBLE : View.GONE);
  }
  if (docLastModified == -1) {
    date.setText(null);
  }
 else {
    date.setText(formatTime(context,docLastModified));
  }
  if (state.showSize) {
    size.setVisibility(View.VISIBLE);
    if (Document.MIME_TYPE_DIR.equals(docMimeType) || docSize == -1) {
      size.setText(null);
    }
 else {
      size.setText(Formatter.formatFileSize(context,docSize));
    }
  }
 else {
    size.setVisibility(View.GONE);
  }
  return convertView;
}
