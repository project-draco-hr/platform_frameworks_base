{
  final XmlSerializer serializer=Xml.newSerializer();
  final StringWriter writer=new StringWriter();
  serializer.setOutput(writer);
  serializer.startDocument("UTF-8",true);
  serializer.startTag("",TAG_PROJECT);
  serializer.attribute("",ATTR_ASPECT_RATIO,Integer.toString(mAspectRatio));
  boolean firstMediaItem=true;
  serializer.startTag("",TAG_MEDIA_ITEMS);
  for (  MediaItem mediaItem : mMediaItems) {
    serializer.startTag("",TAG_MEDIA_ITEM);
    serializer.attribute("",ATTR_ID,mediaItem.getId());
    serializer.attribute("",ATTR_TYPE,mediaItem.getClass().getSimpleName());
    serializer.attribute("",ATTR_FILENAME,mediaItem.getFilename());
    serializer.attribute("",ATTR_RENDERING_MODE,Integer.toString(mediaItem.getRenderingMode()));
    if (mediaItem instanceof MediaVideoItem) {
      final MediaVideoItem mvi=(MediaVideoItem)mediaItem;
      serializer.attribute("",ATTR_BEGIN_TIME,Long.toString(mvi.getBoundaryBeginTime()));
      serializer.attribute("",ATTR_END_TIME,Long.toString(mvi.getBoundaryEndTime()));
      serializer.attribute("",ATTR_VOLUME,Integer.toString(mvi.getVolume()));
      if (mvi.getAudioWaveformFilename() != null) {
        serializer.attribute("",ATTR_AUDIO_WAVEFORM_FILENAME,mvi.getAudioWaveformFilename());
      }
    }
 else     if (mediaItem instanceof MediaImageItem) {
      serializer.attribute("",ATTR_DURATION,Long.toString(mediaItem.getDuration()));
    }
    if (firstMediaItem) {
      firstMediaItem=false;
      final Transition beginTransition=mediaItem.getBeginTransition();
      if (beginTransition != null) {
        serializer.startTag("",TAG_BEGIN_TRANSITION);
        serializer.attribute("",ATTR_ID,beginTransition.getId());
        serializer.attribute("",ATTR_TYPE,beginTransition.getClass().getSimpleName());
        serializer.attribute("",ATTR_DURATION,Long.toString(beginTransition.getDuration()));
        serializer.attribute("",ATTR_BEHAVIOR,Integer.toString(beginTransition.getBehavior()));
        serializer.endTag("",TAG_BEGIN_TRANSITION);
      }
    }
    final Transition endTransition=mediaItem.getEndTransition();
    if (endTransition != null) {
      serializer.startTag("",TAG_END_TRANSITION);
      serializer.attribute("",ATTR_ID,endTransition.getId());
      serializer.attribute("",ATTR_TYPE,endTransition.getClass().getSimpleName());
      serializer.attribute("",ATTR_DURATION,Long.toString(endTransition.getDuration()));
      serializer.attribute("",ATTR_BEHAVIOR,Integer.toString(endTransition.getBehavior()));
      if (endTransition instanceof TransitionSliding) {
        serializer.attribute("",ATTR_DIRECTION,Integer.toString(((TransitionSliding)endTransition).getDirection()));
      }
 else       if (endTransition instanceof TransitionAlpha) {
        TransitionAlpha ta=(TransitionAlpha)endTransition;
        serializer.attribute("",ATTR_BLENDING,Integer.toString(ta.getBlendingPercent()));
        serializer.attribute("",ATTR_INVERT,Boolean.toString(ta.isInvert()));
        serializer.attribute("",ATTR_MASK,ta.getMaskFilename());
      }
      serializer.endTag("",TAG_END_TRANSITION);
    }
    serializer.endTag("",TAG_MEDIA_ITEM);
  }
  serializer.endTag("",TAG_MEDIA_ITEMS);
  serializer.endTag("",TAG_PROJECT);
  serializer.endDocument();
  final FileOutputStream out=new FileOutputStream(new File(getPath(),PROJECT_FILENAME));
  out.write(writer.toString().getBytes());
  out.flush();
  out.close();
}
