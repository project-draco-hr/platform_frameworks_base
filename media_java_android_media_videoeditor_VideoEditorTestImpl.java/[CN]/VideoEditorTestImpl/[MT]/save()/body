{
  final XmlSerializer serializer=Xml.newSerializer();
  final StringWriter writer=new StringWriter();
  serializer.setOutput(writer);
  serializer.startDocument("UTF-8",true);
  serializer.startTag("",TAG_PROJECT);
  serializer.attribute("",ATTR_ASPECT_RATIO,Integer.toString(mAspectRatio));
  serializer.startTag("",TAG_MEDIA_ITEMS);
  for (  MediaItem mediaItem : mMediaItems) {
    serializer.startTag("",TAG_MEDIA_ITEM);
    serializer.attribute("",ATTR_ID,mediaItem.getId());
    serializer.attribute("",ATTR_TYPE,mediaItem.getClass().getSimpleName());
    serializer.attribute("",ATTR_FILENAME,mediaItem.getFilename());
    serializer.attribute("",ATTR_RENDERING_MODE,Integer.toString(mediaItem.getRenderingMode()));
    if (mediaItem instanceof MediaVideoItem) {
      final MediaVideoItem mvi=(MediaVideoItem)mediaItem;
      serializer.attribute("",ATTR_BEGIN_TIME,Long.toString(mvi.getBoundaryBeginTime()));
      serializer.attribute("",ATTR_END_TIME,Long.toString(mvi.getBoundaryEndTime()));
      serializer.attribute("",ATTR_VOLUME,Integer.toString(mvi.getVolume()));
      if (mvi.getAudioWaveformFilename() != null) {
        serializer.attribute("",ATTR_AUDIO_WAVEFORM_FILENAME,mvi.getAudioWaveformFilename());
      }
    }
 else     if (mediaItem instanceof MediaImageItem) {
      serializer.attribute("",ATTR_DURATION,Long.toString(mediaItem.getDuration()));
    }
    serializer.endTag("",TAG_MEDIA_ITEM);
  }
  serializer.endTag("",TAG_MEDIA_ITEMS);
  serializer.startTag("",TAG_TRANSITIONS);
  for (  Transition transition : mTransitions) {
    serializer.startTag("",TAG_TRANSITION);
    serializer.attribute("",ATTR_ID,transition.getId());
    serializer.attribute("",ATTR_TYPE,transition.getClass().getSimpleName());
    serializer.attribute("",ATTR_DURATION,Long.toString(transition.getDuration()));
    serializer.attribute("",ATTR_BEHAVIOR,Integer.toString(transition.getBehavior()));
    final MediaItem afterMediaItem=transition.getAfterMediaItem();
    if (afterMediaItem != null) {
      serializer.attribute("",ATTR_AFTER_MEDIA_ITEM_ID,afterMediaItem.getId());
    }
    final MediaItem beforeMediaItem=transition.getBeforeMediaItem();
    if (beforeMediaItem != null) {
      serializer.attribute("",ATTR_BEFORE_MEDIA_ITEM_ID,beforeMediaItem.getId());
    }
    if (transition instanceof TransitionSliding) {
      serializer.attribute("",ATTR_DIRECTION,Integer.toString(((TransitionSliding)transition).getDirection()));
    }
 else     if (transition instanceof TransitionAlpha) {
      TransitionAlpha ta=(TransitionAlpha)transition;
      serializer.attribute("",ATTR_BLENDING,Integer.toString(ta.getBlendingPercent()));
      serializer.attribute("",ATTR_INVERT,Boolean.toString(ta.isInvert()));
      if (ta.getMaskFilename() != null) {
        serializer.attribute("",ATTR_MASK,ta.getMaskFilename());
      }
    }
    serializer.endTag("",TAG_TRANSITION);
  }
  serializer.endTag("",TAG_TRANSITIONS);
  serializer.endTag("",TAG_PROJECT);
  serializer.endDocument();
  final FileOutputStream out=new FileOutputStream(new File(getPath(),PROJECT_FILENAME));
  out.write(writer.toString().getBytes());
  out.flush();
  out.close();
}
