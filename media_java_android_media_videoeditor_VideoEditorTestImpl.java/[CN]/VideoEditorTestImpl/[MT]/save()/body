{
  final XmlSerializer serializer=Xml.newSerializer();
  final StringWriter writer=new StringWriter();
  serializer.setOutput(writer);
  serializer.startDocument("UTF-8",true);
  serializer.startTag("",TAG_PROJECT);
  serializer.attribute("",ATTR_ASPECT_RATIO,Integer.toString(mAspectRatio));
  serializer.startTag("",TAG_MEDIA_ITEMS);
  for (  MediaItem mediaItem : mMediaItems) {
    serializer.startTag("",TAG_MEDIA_ITEM);
    serializer.attribute("",ATTR_ID,mediaItem.getId());
    serializer.attribute("",ATTR_TYPE,mediaItem.getClass().getSimpleName());
    serializer.attribute("",ATTR_FILENAME,mediaItem.getFilename());
    serializer.attribute("",ATTR_RENDERING_MODE,Integer.toString(mediaItem.getRenderingMode()));
    if (mediaItem instanceof MediaVideoItem) {
      final MediaVideoItem mvi=(MediaVideoItem)mediaItem;
      serializer.attribute("",ATTR_BEGIN_TIME,Long.toString(mvi.getBoundaryBeginTime()));
      serializer.attribute("",ATTR_END_TIME,Long.toString(mvi.getBoundaryEndTime()));
      serializer.attribute("",ATTR_VOLUME,Integer.toString(mvi.getVolume()));
      if (mvi.getAudioWaveformFilename() != null) {
        serializer.attribute("",ATTR_AUDIO_WAVEFORM_FILENAME,mvi.getAudioWaveformFilename());
      }
    }
 else     if (mediaItem instanceof MediaImageItem) {
      serializer.attribute("",ATTR_DURATION,Long.toString(mediaItem.getTimelineDuration()));
    }
    final List<Overlay> overlays=mediaItem.getAllOverlays();
    if (overlays.size() > 0) {
      serializer.startTag("",TAG_OVERLAYS);
      for (      Overlay overlay : overlays) {
        serializer.startTag("",TAG_OVERLAY);
        serializer.attribute("",ATTR_ID,overlay.getId());
        serializer.attribute("",ATTR_TYPE,overlay.getClass().getSimpleName());
        serializer.attribute("",ATTR_BEGIN_TIME,Long.toString(overlay.getStartTime()));
        serializer.attribute("",ATTR_DURATION,Long.toString(overlay.getDuration()));
        if (overlay instanceof OverlayFrame) {
          final OverlayFrame overlayFrame=(OverlayFrame)overlay;
          overlayFrame.save(getPath());
          if (overlayFrame.getFilename() != null) {
            serializer.attribute("",ATTR_FILENAME,overlayFrame.getFilename());
          }
        }
        serializer.startTag("",TAG_OVERLAY_USER_ATTRIBUTES);
        final Map<String,String> userAttributes=overlay.getUserAttributes();
        for (        String name : userAttributes.keySet()) {
          final String value=userAttributes.get(name);
          if (value != null) {
            serializer.attribute("",name,value);
          }
        }
        serializer.endTag("",TAG_OVERLAY_USER_ATTRIBUTES);
        serializer.endTag("",TAG_OVERLAY);
      }
      serializer.endTag("",TAG_OVERLAYS);
    }
    final List<Effect> effects=mediaItem.getAllEffects();
    if (effects.size() > 0) {
      serializer.startTag("",TAG_EFFECTS);
      for (      Effect effect : effects) {
        serializer.startTag("",TAG_EFFECT);
        serializer.attribute("",ATTR_ID,effect.getId());
        serializer.attribute("",ATTR_TYPE,effect.getClass().getSimpleName());
        serializer.attribute("",ATTR_BEGIN_TIME,Long.toString(effect.getStartTime()));
        serializer.attribute("",ATTR_DURATION,Long.toString(effect.getDuration()));
        if (effect instanceof EffectColor) {
          final EffectColor colorEffect=(EffectColor)effect;
          serializer.attribute("",ATTR_COLOR_EFFECT_TYPE,Integer.toString(colorEffect.getType()));
          if (colorEffect.getType() == EffectColor.TYPE_COLOR) {
            serializer.attribute("",ATTR_COLOR_EFFECT_VALUE,Integer.toString(colorEffect.getParam()));
          }
        }
 else         if (effect instanceof EffectKenBurns) {
          final Rect startRect=((EffectKenBurns)effect).getStartRect();
          serializer.attribute("",ATTR_START_RECT_L,Integer.toString(startRect.left));
          serializer.attribute("",ATTR_START_RECT_T,Integer.toString(startRect.top));
          serializer.attribute("",ATTR_START_RECT_R,Integer.toString(startRect.right));
          serializer.attribute("",ATTR_START_RECT_B,Integer.toString(startRect.bottom));
          final Rect endRect=((EffectKenBurns)effect).getEndRect();
          serializer.attribute("",ATTR_END_RECT_L,Integer.toString(endRect.left));
          serializer.attribute("",ATTR_END_RECT_T,Integer.toString(endRect.top));
          serializer.attribute("",ATTR_END_RECT_R,Integer.toString(endRect.right));
          serializer.attribute("",ATTR_END_RECT_B,Integer.toString(endRect.bottom));
        }
        serializer.endTag("",TAG_EFFECT);
      }
      serializer.endTag("",TAG_EFFECTS);
    }
    serializer.endTag("",TAG_MEDIA_ITEM);
  }
  serializer.endTag("",TAG_MEDIA_ITEMS);
  serializer.startTag("",TAG_TRANSITIONS);
  for (  Transition transition : mTransitions) {
    serializer.startTag("",TAG_TRANSITION);
    serializer.attribute("",ATTR_ID,transition.getId());
    serializer.attribute("",ATTR_TYPE,transition.getClass().getSimpleName());
    serializer.attribute("",ATTR_DURATION,Long.toString(transition.getDuration()));
    serializer.attribute("",ATTR_BEHAVIOR,Integer.toString(transition.getBehavior()));
    final MediaItem afterMediaItem=transition.getAfterMediaItem();
    if (afterMediaItem != null) {
      serializer.attribute("",ATTR_AFTER_MEDIA_ITEM_ID,afterMediaItem.getId());
    }
    final MediaItem beforeMediaItem=transition.getBeforeMediaItem();
    if (beforeMediaItem != null) {
      serializer.attribute("",ATTR_BEFORE_MEDIA_ITEM_ID,beforeMediaItem.getId());
    }
    if (transition instanceof TransitionSliding) {
      serializer.attribute("",ATTR_DIRECTION,Integer.toString(((TransitionSliding)transition).getDirection()));
    }
 else     if (transition instanceof TransitionAlpha) {
      TransitionAlpha ta=(TransitionAlpha)transition;
      serializer.attribute("",ATTR_BLENDING,Integer.toString(ta.getBlendingPercent()));
      serializer.attribute("",ATTR_INVERT,Boolean.toString(ta.isInvert()));
      if (ta.getMaskFilename() != null) {
        serializer.attribute("",ATTR_MASK,ta.getMaskFilename());
      }
    }
    serializer.endTag("",TAG_TRANSITION);
  }
  serializer.endTag("",TAG_TRANSITIONS);
  serializer.startTag("",TAG_AUDIO_TRACKS);
  for (  AudioTrack at : mAudioTracks) {
    serializer.startTag("",TAG_AUDIO_TRACK);
    serializer.attribute("",ATTR_ID,at.getId());
    serializer.attribute("",ATTR_FILENAME,at.getFilename());
    serializer.attribute("",ATTR_START_TIME,Long.toString(at.getStartTime()));
    serializer.attribute("",ATTR_BEGIN_TIME,Long.toString(at.getBoundaryBeginTime()));
    serializer.attribute("",ATTR_END_TIME,Long.toString(at.getBoundaryEndTime()));
    serializer.attribute("",ATTR_VOLUME,Integer.toString(at.getVolume()));
    serializer.attribute("",ATTR_LOOP,Boolean.toString(at.isLooping()));
    if (at.getAudioWaveformFilename() != null) {
      serializer.attribute("",ATTR_AUDIO_WAVEFORM_FILENAME,at.getAudioWaveformFilename());
    }
    serializer.endTag("",TAG_AUDIO_TRACK);
  }
  serializer.endTag("",TAG_AUDIO_TRACKS);
  serializer.endTag("",TAG_PROJECT);
  serializer.endDocument();
  final FileOutputStream out=new FileOutputStream(new File(getPath(),PROJECT_FILENAME));
  out.write(writer.toString().getBytes());
  out.flush();
  out.close();
}
