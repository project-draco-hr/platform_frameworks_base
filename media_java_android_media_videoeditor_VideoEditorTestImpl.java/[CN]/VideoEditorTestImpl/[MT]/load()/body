{
  final File file=new File(mProjectPath,PROJECT_FILENAME);
  final XmlPullParser parser=Xml.newPullParser();
  parser.setInput(new FileInputStream(file),"UTF-8");
  int eventType=parser.getEventType();
  String name;
  while (eventType != XmlPullParser.END_DOCUMENT) {
switch (eventType) {
case XmlPullParser.START_TAG:
{
        name=parser.getName();
        if (name.equals(TAG_PROJECT)) {
          mAspectRatio=Integer.parseInt(parser.getAttributeValue("",ATTR_ASPECT_RATIO));
        }
 else         if (name.equals(TAG_MEDIA_ITEM)) {
          final String mediaItemId=parser.getAttributeValue("",ATTR_ID);
          final String type=parser.getAttributeValue("",ATTR_TYPE);
          final String filename=parser.getAttributeValue("",ATTR_FILENAME);
          final int renderingMode=Integer.parseInt(parser.getAttributeValue("",ATTR_RENDERING_MODE));
          final MediaItem mediaItem;
          if (MediaImageItem.class.getSimpleName().equals(type)) {
            final long durationMs=Long.parseLong(parser.getAttributeValue("",ATTR_DURATION));
            mediaItem=new MediaImageItem(mediaItemId,filename,durationMs,renderingMode);
          }
 else           if (MediaVideoItem.class.getSimpleName().equals(type)) {
            final String audioWaveformFilename=parser.getAttributeValue("",ATTR_AUDIO_WAVEFORM_FILENAME);
            mediaItem=new MediaVideoItem(mediaItemId,filename,renderingMode,audioWaveformFilename);
            final long beginTimeMs=Long.parseLong(parser.getAttributeValue("",ATTR_BEGIN_TIME));
            final long endTimeMs=Long.parseLong(parser.getAttributeValue("",ATTR_END_TIME));
            ((MediaVideoItem)mediaItem).setExtractBoundaries(beginTimeMs,endTimeMs);
            final int volumePercent=Integer.parseInt(parser.getAttributeValue("",ATTR_VOLUME));
            ((MediaVideoItem)mediaItem).setVolume(volumePercent);
          }
 else {
            Log.e(TAG,"Unknown media item type: " + type);
            mediaItem=null;
          }
          mMediaItems.add(mediaItem);
        }
        break;
      }
default :
{
      break;
    }
}
eventType=parser.next();
}
computeTimelineDuration();
}
