{
  if (regionOp == Region.Op.DIFFERENCE.nativeInt) {
    if (shape1 == null) {
      return null;
    }
    Area result=new Area(shape1);
    result.subtract(shape2 instanceof Area ? (Area)shape2 : new Area(shape2));
    return result;
  }
 else   if (regionOp == Region.Op.INTERSECT.nativeInt) {
    if (shape1 == null) {
      return new Area(shape2);
    }
    Area result=new Area(shape1);
    result.intersect(shape2 instanceof Area ? (Area)shape2 : new Area(shape2));
    return result;
  }
 else   if (regionOp == Region.Op.UNION.nativeInt) {
    if (shape1 == null) {
      return new Area(shape2);
    }
    Area result=new Area(shape1);
    result.add(shape2 instanceof Area ? (Area)shape2 : new Area(shape2));
    return result;
  }
 else   if (regionOp == Region.Op.XOR.nativeInt) {
    if (shape1 == null) {
      return new Area(shape2);
    }
    Area result=new Area(shape1);
    result.exclusiveOr(shape2 instanceof Area ? (Area)shape2 : new Area(shape2));
    return result;
  }
 else   if (regionOp == Region.Op.REVERSE_DIFFERENCE.nativeInt) {
    Area result=new Area(shape2);
    if (shape1 != null) {
      result.subtract(shape1 instanceof Area ? (Area)shape1 : new Area(shape1));
    }
    return result;
  }
  return null;
}
