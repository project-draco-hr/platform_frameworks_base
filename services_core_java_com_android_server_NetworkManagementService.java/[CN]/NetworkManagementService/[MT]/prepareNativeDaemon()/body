{
  boolean nativeServiceAvailable=false;
  try {
    mNetdService=INetd.Stub.asInterface(ServiceManager.getService(NETD_SERVICE_NAME));
    nativeServiceAvailable=mNetdService.isAlive();
  }
 catch (  RemoteException e) {
  }
  if (!nativeServiceAvailable) {
    Slog.wtf(TAG,"Can't connect to NativeNetdService " + NETD_SERVICE_NAME);
  }
  mBandwidthControlEnabled=false;
  final boolean hasKernelSupport=new File("/proc/net/xt_qtaguid/ctrl").exists();
  if (hasKernelSupport) {
    Slog.d(TAG,"enabling bandwidth control");
    try {
      mConnector.execute("bandwidth","enable");
      mBandwidthControlEnabled=true;
    }
 catch (    NativeDaemonConnectorException e) {
      Log.wtf(TAG,"problem enabling bandwidth controls",e);
    }
  }
 else {
    Slog.i(TAG,"not enabling bandwidth control");
  }
  SystemProperties.set(PROP_QTAGUID_ENABLED,mBandwidthControlEnabled ? "1" : "0");
  if (mBandwidthControlEnabled) {
    try {
      getBatteryStats().noteNetworkStatsEnabled();
    }
 catch (    RemoteException e) {
    }
  }
  try {
    mConnector.execute("strict","enable");
    mStrictEnabled=true;
  }
 catch (  NativeDaemonConnectorException e) {
    Log.wtf(TAG,"Failed strict enable",e);
  }
synchronized (mQuotaLock) {
    int size=mActiveQuotas.size();
    if (size > 0) {
      if (DBG)       Slog.d(TAG,"Pushing " + size + " active quota rules");
      final HashMap<String,Long> activeQuotas=mActiveQuotas;
      mActiveQuotas=Maps.newHashMap();
      for (      Map.Entry<String,Long> entry : activeQuotas.entrySet()) {
        setInterfaceQuota(entry.getKey(),entry.getValue());
      }
    }
    size=mActiveAlerts.size();
    if (size > 0) {
      if (DBG)       Slog.d(TAG,"Pushing " + size + " active alert rules");
      final HashMap<String,Long> activeAlerts=mActiveAlerts;
      mActiveAlerts=Maps.newHashMap();
      for (      Map.Entry<String,Long> entry : activeAlerts.entrySet()) {
        setInterfaceAlert(entry.getKey(),entry.getValue());
      }
    }
    size=mUidRejectOnQuota.size();
    if (size > 0) {
      if (DBG)       Slog.d(TAG,"Pushing " + size + " active UID rules");
      final SparseBooleanArray uidRejectOnQuota=mUidRejectOnQuota;
      mUidRejectOnQuota=new SparseBooleanArray();
      for (int i=0; i < uidRejectOnQuota.size(); i++) {
        setUidNetworkRules(uidRejectOnQuota.keyAt(i),uidRejectOnQuota.valueAt(i));
      }
    }
    size=mUidCleartextPolicy.size();
    if (size > 0) {
      if (DBG)       Slog.d(TAG,"Pushing " + size + " active UID cleartext policies");
      final SparseIntArray local=mUidCleartextPolicy;
      mUidCleartextPolicy=new SparseIntArray();
      for (int i=0; i < local.size(); i++) {
        setUidCleartextNetworkPolicy(local.keyAt(i),local.valueAt(i));
      }
    }
    setFirewallEnabled(mFirewallEnabled || LockdownVpnTracker.isEnabled());
    syncFirewallChainLocked(FIREWALL_CHAIN_NONE,mUidFirewallRules,"");
    syncFirewallChainLocked(FIREWALL_CHAIN_STANDBY,mUidFirewallStandbyRules,"standby ");
    syncFirewallChainLocked(FIREWALL_CHAIN_DOZABLE,mUidFirewallDozableRules,"dozable ");
    syncFirewallChainLocked(FIREWALL_CHAIN_POWERSAVE,mUidFirewallPowerSaveRules,"powersave ");
    if (mFirewallChainStates.get(FIREWALL_CHAIN_STANDBY)) {
      setFirewallChainEnabled(FIREWALL_CHAIN_STANDBY,true);
    }
    if (mFirewallChainStates.get(FIREWALL_CHAIN_DOZABLE)) {
      setFirewallChainEnabled(FIREWALL_CHAIN_DOZABLE,true);
    }
    if (mFirewallChainStates.get(FIREWALL_CHAIN_POWERSAVE)) {
      setFirewallChainEnabled(FIREWALL_CHAIN_POWERSAVE,true);
    }
  }
}
