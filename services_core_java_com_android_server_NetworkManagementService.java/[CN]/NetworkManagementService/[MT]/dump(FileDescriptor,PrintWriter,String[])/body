{
  mContext.enforceCallingOrSelfPermission(DUMP,TAG);
  pw.println("NetworkManagementService NativeDaemonConnector Log:");
  mConnector.dump(fd,pw,args);
  pw.println();
  pw.print("Bandwidth control enabled: ");
  pw.println(mBandwidthControlEnabled);
  pw.print("mMobileActivityFromRadio=");
  pw.print(mMobileActivityFromRadio);
  pw.print(" mLastPowerStateFromRadio=");
  pw.println(mLastPowerStateFromRadio);
  pw.print("mNetworkActive=");
  pw.println(mNetworkActive);
synchronized (mQuotaLock) {
    pw.print("Active quota ifaces: ");
    pw.println(mActiveQuotas.toString());
    pw.print("Active alert ifaces: ");
    pw.println(mActiveAlerts.toString());
    pw.print("Data saver mode: ");
    pw.println(mDataSaverMode);
    dumpUidRuleOnQuotaLocked(pw,"blacklist",mUidRejectOnMetered);
    dumpUidRuleOnQuotaLocked(pw,"whitelist",mUidAllowOnMetered);
  }
synchronized (mUidFirewallRules) {
    dumpUidFirewallRule(pw,"",mUidFirewallRules);
  }
  pw.print("UID firewall standby chain enabled: ");
  pw.println(mFirewallChainStates.get(FIREWALL_CHAIN_STANDBY));
synchronized (mUidFirewallStandbyRules) {
    dumpUidFirewallRule(pw,FIREWALL_CHAIN_NAME_STANDBY,mUidFirewallStandbyRules);
  }
  pw.print("UID firewall dozable chain enabled: ");
  pw.println(mFirewallChainStates.get(FIREWALL_CHAIN_DOZABLE));
synchronized (mUidFirewallDozableRules) {
    dumpUidFirewallRule(pw,FIREWALL_CHAIN_NAME_DOZABLE,mUidFirewallDozableRules);
  }
  pw.println("UID firewall powersave chain enabled: " + mFirewallChainStates.get(FIREWALL_CHAIN_POWERSAVE));
synchronized (mUidFirewallPowerSaveRules) {
    dumpUidFirewallRule(pw,FIREWALL_CHAIN_NAME_POWERSAVE,mUidFirewallPowerSaveRules);
  }
synchronized (mIdleTimerLock) {
    pw.println("Idle timers:");
    for (    HashMap.Entry<String,IdleTimerParams> ent : mActiveIdleTimers.entrySet()) {
      pw.print("  ");
      pw.print(ent.getKey());
      pw.println(":");
      IdleTimerParams params=ent.getValue();
      pw.print("    timeout=");
      pw.print(params.timeout);
      pw.print(" type=");
      pw.print(params.type);
      pw.print(" networkCount=");
      pw.println(params.networkCount);
    }
  }
  pw.print("Firewall enabled: ");
  pw.println(mFirewallEnabled);
  pw.print("Netd service status: ");
  if (mNetdService == null) {
    pw.println("disconnected");
  }
 else {
    try {
      final boolean alive=mNetdService.isAlive();
      pw.println(alive ? "alive" : "dead");
    }
 catch (    RemoteException e) {
      pw.println("unreachable");
    }
  }
}
