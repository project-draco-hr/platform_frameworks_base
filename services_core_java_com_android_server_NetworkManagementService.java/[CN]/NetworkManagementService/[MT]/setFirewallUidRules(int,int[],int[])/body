{
  enforceSystemUid();
synchronized (mQuotaLock) {
    SparseIntArray uidFirewallRules=getUidFirewallRules(chain);
    SparseIntArray newRules=new SparseIntArray();
    for (int index=uids.length - 1; index >= 0; --index) {
      int uid=uids[index];
      int rule=rules[index];
      updateFirewallUidRuleLocked(chain,uid,rule);
      newRules.put(uid,rule);
    }
    SparseIntArray rulesToRemove=new SparseIntArray();
    for (int index=uidFirewallRules.size() - 1; index >= 0; --index) {
      int uid=uidFirewallRules.keyAt(index);
      if (newRules.indexOfKey(uid) < 0) {
        rulesToRemove.put(uid,FIREWALL_RULE_DEFAULT);
      }
    }
    for (int index=rulesToRemove.size() - 1; index >= 0; --index) {
      int uid=rulesToRemove.keyAt(index);
      updateFirewallUidRuleLocked(chain,uid,FIREWALL_RULE_DEFAULT);
    }
    try {
switch (chain) {
case FIREWALL_CHAIN_DOZABLE:
        mNetdService.firewallReplaceUidChain("fw_dozable",true,uids);
      break;
case FIREWALL_CHAIN_STANDBY:
    mNetdService.firewallReplaceUidChain("fw_standby",false,uids);
  break;
case FIREWALL_CHAIN_POWERSAVE:
mNetdService.firewallReplaceUidChain("fw_powersave",true,uids);
break;
case FIREWALL_CHAIN_NONE:
default :
Slog.d(TAG,"setFirewallUidRules() called on invalid chain: " + chain);
}
}
 catch (RemoteException e) {
Slog.w(TAG,"Error flushing firewall chain " + chain,e);
}
}
}
