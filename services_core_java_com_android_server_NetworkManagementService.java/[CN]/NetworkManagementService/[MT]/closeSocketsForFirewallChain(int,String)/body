{
  UidRange[] ranges;
  int[] exemptUids;
  SparseIntArray rules=getUidFirewallRules(chain);
  int numUids=0;
  if (getFirewallType(chain) == FIREWALL_TYPE_WHITELIST) {
    ranges=new UidRange[]{new UidRange(Process.FIRST_APPLICATION_UID,Integer.MAX_VALUE)};
    exemptUids=new int[rules.size()];
    for (int i=0; i < exemptUids.length; i++) {
      if (rules.valueAt(i) == NetworkPolicyManager.FIREWALL_RULE_ALLOW) {
        exemptUids[numUids]=rules.keyAt(i);
        numUids++;
      }
    }
    if (numUids != exemptUids.length) {
      exemptUids=Arrays.copyOf(exemptUids,numUids);
    }
  }
 else {
    ranges=new UidRange[rules.size()];
    for (int i=0; i < ranges.length; i++) {
      if (rules.valueAt(i) == NetworkPolicyManager.FIREWALL_RULE_DENY) {
        int uid=rules.keyAt(i);
        ranges[numUids]=new UidRange(uid,uid);
        numUids++;
      }
    }
    if (numUids != ranges.length) {
      ranges=Arrays.copyOf(ranges,numUids);
    }
    exemptUids=new int[0];
  }
  try {
    mNetdService.socketDestroy(ranges,exemptUids);
  }
 catch (  RemoteException|ServiceSpecificException e) {
    Slog.e(TAG,"Error closing sockets after enabling chain " + chainName + ": "+ e);
  }
}
