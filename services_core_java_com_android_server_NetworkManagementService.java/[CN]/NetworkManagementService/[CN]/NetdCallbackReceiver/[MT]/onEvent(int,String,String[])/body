{
  String errorMessage=String.format("Invalid event from daemon (%s)",raw);
switch (code) {
case NetdResponseCode.InterfaceChange:
    if (cooked.length < 4 || !cooked[1].equals("Iface")) {
      throw new IllegalStateException(errorMessage);
    }
  if (cooked[2].equals("added")) {
    notifyInterfaceAdded(cooked[3]);
    return true;
  }
 else   if (cooked[2].equals("removed")) {
    notifyInterfaceRemoved(cooked[3]);
    return true;
  }
 else   if (cooked[2].equals("changed") && cooked.length == 5) {
    notifyInterfaceStatusChanged(cooked[3],cooked[4].equals("up"));
    return true;
  }
 else   if (cooked[2].equals("linkstate") && cooked.length == 5) {
    notifyInterfaceLinkStateChanged(cooked[3],cooked[4].equals("up"));
    return true;
  }
throw new IllegalStateException(errorMessage);
case NetdResponseCode.BandwidthControl:
if (cooked.length < 5 || !cooked[1].equals("limit")) {
throw new IllegalStateException(errorMessage);
}
if (cooked[2].equals("alert")) {
notifyLimitReached(cooked[3],cooked[4]);
return true;
}
throw new IllegalStateException(errorMessage);
case NetdResponseCode.InterfaceClassActivity:
if (cooked.length < 4 || !cooked[1].equals("IfaceClass")) {
throw new IllegalStateException(errorMessage);
}
boolean isActive=cooked[2].equals("active");
notifyInterfaceClassActivity(cooked[3],isActive);
return true;
case NetdResponseCode.InterfaceAddressChange:
if (cooked.length < 7 || !cooked[1].equals("Address")) {
throw new IllegalStateException(errorMessage);
}
String iface=cooked[4];
LinkAddress address;
try {
int flags=Integer.parseInt(cooked[5]);
int scope=Integer.parseInt(cooked[6]);
address=new LinkAddress(cooked[3],flags,scope);
}
 catch (NumberFormatException e) {
throw new IllegalStateException(errorMessage,e);
}
catch (IllegalArgumentException e) {
throw new IllegalStateException(errorMessage,e);
}
if (cooked[2].equals("updated")) {
notifyAddressUpdated(iface,address);
}
 else {
notifyAddressRemoved(iface,address);
}
return true;
case NetdResponseCode.InterfaceDnsServerInfo:
long lifetime;
if (cooked.length == 6 && cooked[1].equals("DnsInfo") && cooked[2].equals("servers")) {
try {
lifetime=Long.parseLong(cooked[4]);
}
 catch (NumberFormatException e) {
throw new IllegalStateException(errorMessage);
}
String[] servers=cooked[5].split(",");
notifyInterfaceDnsServerInfo(cooked[3],lifetime,servers);
}
return true;
default :
break;
}
return false;
}
