{
  super.tileProfilingStop();
  if (mCallback == null) {
    tileProfilingClear();
    return;
  }
  TileData data[][]=new TileData[super.tileProfilingNumFrames()][];
  for (int frame=0; frame < data.length; frame++) {
    data[frame]=new TileData[tileProfilingNumTilesInFrame(frame)];
    for (int tile=0; tile < data[frame].length; tile++) {
      int left=tileProfilingGetInt(frame,tile,"left");
      int top=tileProfilingGetInt(frame,tile,"top");
      int right=tileProfilingGetInt(frame,tile,"right");
      int bottom=tileProfilingGetInt(frame,tile,"bottom");
      boolean isReady=super.tileProfilingGetInt(frame,tile,"isReady") == 1;
      int level=tileProfilingGetInt(frame,tile,"level");
      float scale=tileProfilingGetFloat(frame,tile,"scale");
      data[frame][tile]=new TileData(left,top,right,bottom,isReady,level,scale);
    }
  }
  super.tileProfilingClear();
  mCallback.profileCallback(data);
}
