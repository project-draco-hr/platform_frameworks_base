{
  tileProfilingStop();
  mIsTesting=false;
  if (mCallback == null) {
    tileProfilingClear();
    return;
  }
  RunData data=new RunData(super.tileProfilingNumFrames());
  data.singleStats.put(getResources().getString(R.string.render_millis),(double)mContentInvalMillis);
  double framerate=animFramerate();
  Log.d(LOGTAG,"anim framerate was " + framerate);
  data.singleStats.put(getResources().getString(R.string.animation_framerate),framerate);
  for (int frame=0; frame < data.frames.length; frame++) {
    data.frames[frame]=new TileData[tileProfilingNumTilesInFrame(frame)];
    for (int tile=0; tile < data.frames[frame].length; tile++) {
      int left=tileProfilingGetInt(frame,tile,"left");
      int top=tileProfilingGetInt(frame,tile,"top");
      int right=tileProfilingGetInt(frame,tile,"right");
      int bottom=tileProfilingGetInt(frame,tile,"bottom");
      boolean isReady=super.tileProfilingGetInt(frame,tile,"isReady") == 1;
      int level=tileProfilingGetInt(frame,tile,"level");
      float scale=tileProfilingGetFloat(frame,tile,"scale");
      data.frames[frame][tile]=data.new TileData(left,top,right,bottom,isReady,level,scale);
    }
  }
  tileProfilingClear();
  mCallback.profileCallback(data);
}
