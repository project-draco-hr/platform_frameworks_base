{
  super(infoID);
  if (payload.remaining() < 6) {
    throw new ProtocolException("Runt civic location:" + payload.remaining());
  }
  int locType=payload.get() & BYTE_MASK;
  if (locType != RFC4776) {
    throw new ProtocolException("Bad Civic location type: " + locType);
  }
  int locSubType=payload.get() & BYTE_MASK;
  if (locSubType != GEOCONF_CIVIC4) {
    throw new ProtocolException("Unexpected Civic location sub-type: " + locSubType + " (cannot handle sub elements)");
  }
  int length=payload.get() & BYTE_MASK;
  if (length > payload.remaining()) {
    throw new ProtocolException("Invalid CA type length: " + length);
  }
  int what=payload.get() & BYTE_MASK;
  mLocationType=what < LocationType.values().length ? LocationType.values()[what] : null;
  mLocale=Locale.forLanguageTag(Constants.getString(payload,2,StandardCharsets.US_ASCII));
  mValues=new HashMap<CAType,String>();
  while (payload.hasRemaining()) {
    int caTypeNumber=payload.get() & BYTE_MASK;
    CAType caType=s_caTypes.get(caTypeNumber);
    int caValLen=payload.get() & BYTE_MASK;
    if (caValLen > payload.remaining()) {
      throw new ProtocolException("Bad CA value length: " + caValLen);
    }
    byte[] caValOctets=new byte[caValLen];
    payload.get(caValOctets);
    if (caType != null) {
      mValues.put(caType,new String(caValOctets,StandardCharsets.UTF_8));
    }
  }
}
