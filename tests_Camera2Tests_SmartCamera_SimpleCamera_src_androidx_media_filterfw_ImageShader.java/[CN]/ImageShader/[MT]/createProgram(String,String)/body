{
  int vertexShader=loadShader(GLES20.GL_VERTEX_SHADER,vertexSource);
  if (vertexShader == 0) {
    throw new RuntimeException("Could not create shader-program as vertex shader " + "could not be compiled!");
  }
  int pixelShader=loadShader(GLES20.GL_FRAGMENT_SHADER,fragmentSource);
  if (pixelShader == 0) {
    throw new RuntimeException("Could not create shader-program as fragment shader " + "could not be compiled!");
  }
  int program=GLES20.glCreateProgram();
  if (program != 0) {
    GLES20.glAttachShader(program,vertexShader);
    GLToolbox.checkGlError("glAttachShader");
    GLES20.glAttachShader(program,pixelShader);
    GLToolbox.checkGlError("glAttachShader");
    GLES20.glLinkProgram(program);
    int[] linkStatus=new int[1];
    GLES20.glGetProgramiv(program,GLES20.GL_LINK_STATUS,linkStatus,0);
    if (linkStatus[0] != GLES20.GL_TRUE) {
      String info=GLES20.glGetProgramInfoLog(program);
      GLES20.glDeleteProgram(program);
      program=0;
      throw new RuntimeException("Could not link program: " + info);
    }
  }
  GLES20.glDeleteShader(vertexShader);
  GLES20.glDeleteShader(pixelShader);
  return program;
}
