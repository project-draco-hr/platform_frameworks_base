{
  ProgramUniform uniform=getProgramUniform(uniformName,true);
  useProgram();
  int len=values.length;
switch (uniform.getType()) {
case GLES20.GL_FLOAT:
    checkUniformAssignment(uniform,len,1);
  GLES20.glUniform1fv(uniform.getLocation(),len,values,0);
break;
case GLES20.GL_FLOAT_VEC2:
checkUniformAssignment(uniform,len,2);
GLES20.glUniform2fv(uniform.getLocation(),len / 2,values,0);
break;
case GLES20.GL_FLOAT_VEC3:
checkUniformAssignment(uniform,len,3);
GLES20.glUniform3fv(uniform.getLocation(),len / 3,values,0);
break;
case GLES20.GL_FLOAT_VEC4:
checkUniformAssignment(uniform,len,4);
GLES20.glUniform4fv(uniform.getLocation(),len / 4,values,0);
break;
case GLES20.GL_FLOAT_MAT2:
checkUniformAssignment(uniform,len,4);
GLES20.glUniformMatrix2fv(uniform.getLocation(),len / 4,false,values,0);
break;
case GLES20.GL_FLOAT_MAT3:
checkUniformAssignment(uniform,len,9);
GLES20.glUniformMatrix3fv(uniform.getLocation(),len / 9,false,values,0);
break;
case GLES20.GL_FLOAT_MAT4:
checkUniformAssignment(uniform,len,16);
GLES20.glUniformMatrix4fv(uniform.getLocation(),len / 16,false,values,0);
break;
default :
throw new RuntimeException("Cannot assign float-array to incompatible uniform type " + "for uniform '" + uniformName + "'!");
}
GLToolbox.checkGlError("Set uniform value (" + uniformName + ")");
}
