{
  if (mIsConst) {
switch (mComponents) {
case 1:
      GLES20.glVertexAttrib1fv(mIndex,mValues);
    break;
case 2:
  GLES20.glVertexAttrib2fv(mIndex,mValues);
break;
case 3:
GLES20.glVertexAttrib3fv(mIndex,mValues);
break;
case 4:
GLES20.glVertexAttrib4fv(mIndex,mValues);
break;
default :
return false;
}
GLES20.glDisableVertexAttribArray(mIndex);
}
 else {
if (mValues != null) {
GLES20.glBindBuffer(GLES20.GL_ARRAY_BUFFER,0);
GLES20.glVertexAttribPointer(mIndex,mComponents,mType,mShouldNormalize,mStride,mValues);
}
 else {
GLES20.glBindBuffer(GLES20.GL_ARRAY_BUFFER,mVbo);
GLES20.glVertexAttribPointer(mIndex,mComponents,mType,mShouldNormalize,mStride,mOffset);
}
GLES20.glEnableVertexAttribArray(mIndex);
}
GLToolbox.checkGlError("Set vertex-attribute values");
return true;
}
