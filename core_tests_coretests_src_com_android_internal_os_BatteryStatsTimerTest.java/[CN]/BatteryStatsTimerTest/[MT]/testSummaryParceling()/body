{
  TimeBase timeBase=new TimeBase();
  timeBase.setRunning(true,10,20);
  timeBase.setRunning(false,45,60);
  Assert.assertEquals(40,timeBase.getRealtime(200));
  MockClocks clocks=new MockClocks();
  TestTimer timer1=new TestTimer(clocks,0,timeBase);
  timer1.setCount(1);
  timer1.setLoadedCount(2);
  timer1.setLastCount(3);
  timer1.setUnpluggedCount(4);
  timer1.setTotalTime(9223372036854775807L);
  timer1.setLoadedTime(9223372036854775806L);
  timer1.setLastTime(9223372036854775805L);
  timer1.setUnpluggedTime(9223372036854775804L);
  timer1.setTimeBeforeMark(9223372036854775803L);
  Parcel parcel=Parcel.obtain();
  timer1.nextComputeRunTime=9223372036854775800L;
  timer1.nextComputeCurrentCount=1;
  timer1.writeSummaryFromParcelLocked(parcel,201);
  Assert.assertEquals(40,timer1.lastComputeRunTimeRealtime);
  TestTimer timer2=new TestTimer(clocks,0,timeBase);
  timer2.setCount(666);
  timer2.setLoadedCount(666);
  timer2.setLastCount(666);
  timer2.setUnpluggedCount(666);
  timer2.setTotalTime(666);
  timer2.setLoadedTime(666);
  timer2.setLastTime(666);
  timer2.setUnpluggedTime(666);
  timer2.setTimeBeforeMark(666);
  parcel.setDataPosition(0);
  parcel.setDataPosition(0);
  timer2.readSummaryFromParcelLocked(parcel);
  Assert.assertEquals(1,timer2.getCount());
  Assert.assertEquals(1,timer2.getLoadedCount());
  Assert.assertEquals(0,timer2.getLastCount());
  Assert.assertEquals(1,timer2.getUnpluggedCount());
  Assert.assertEquals(9223372036854775800L,timer2.getTotalTime());
  Assert.assertEquals(9223372036854775800L,timer2.getLoadedTime());
  Assert.assertEquals(0,timer2.getLastTime());
  Assert.assertEquals(9223372036854775800L,timer2.getUnpluggedTime());
  Assert.assertEquals(9223372036854775800L,timer2.getTimeBeforeMark());
  parcel.recycle();
}
