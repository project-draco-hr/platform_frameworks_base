{
  TimeBase timeBase=new TimeBase();
  MockClocks clocks=new MockClocks();
  TestTimer timer1=new TestTimer(clocks,0,timeBase);
  timer1.setCount(1);
  timer1.setLoadedCount(2);
  timer1.setLastCount(3);
  timer1.setUnpluggedCount(4);
  timer1.setTotalTime(9223372036854775807L);
  timer1.setLoadedTime(9223372036854775806L);
  timer1.setLastTime(9223372036854775805L);
  timer1.setUnpluggedTime(9223372036854775804L);
  timer1.setTimeBeforeMark(9223372036854775803L);
  timer1.nextComputeRunTime=201;
  Parcel parcel=Parcel.obtain();
  Timer.writeTimerToParcel(parcel,timer1,77);
  parcel.setDataPosition(0);
  Assert.assertTrue("parcel null object",parcel.readInt() != 0);
  TestTimer timer2=new TestTimer(clocks,0,timeBase,parcel);
  Assert.assertEquals(1,timer2.getCount());
  Assert.assertEquals(2,timer2.getLoadedCount());
  Assert.assertEquals(0,timer2.getLastCount());
  Assert.assertEquals(4,timer2.getUnpluggedCount());
  Assert.assertEquals(201,timer2.getTotalTime());
  Assert.assertEquals(9223372036854775806L,timer2.getLoadedTime());
  Assert.assertEquals(0,timer2.getLastTime());
  Assert.assertEquals(9223372036854775804L,timer2.getUnpluggedTime());
  Assert.assertEquals(9223372036854775803L,timer2.getTimeBeforeMark());
  parcel.recycle();
}
