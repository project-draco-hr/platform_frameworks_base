{
  int[] colors=new int[256];
  for (int i=0; i < 256; i++) {
    colors[i]=(i << 24) | (0xFF << 16) | (0x80 << 8)| 0;
  }
  Bitmap.Config config=Bitmap.Config.ARGB_8888;
  Bitmap bm1=Bitmap.createBitmap(colors,16,16,config);
  Bitmap bm2=Bitmap.createBitmap(16,16,config);
  bm2.setPixels(colors,0,16,0,0,16,16);
  final int tolerance=1;
  for (int i=0; i < 256; i++) {
    int c0=colors[i];
    int c1=bm1.getPixel(i % 16,i / 16);
    int c2=bm2.getPixel(i % 16,i / 16);
    assertEquals("getPixel",c1,c2);
    int a0=Color.alpha(c0);
    int a1=Color.alpha(c1);
    assertEquals("alpha",a0,a1);
    int r0=Color.red(c0);
    int r1=Color.red(c1);
    int rr=computePrePostMul(a0,r0);
    assertTrue("red",Math.abs(rr - r1) <= tolerance);
    int g0=Color.green(c0);
    int g1=Color.green(c1);
    int gg=computePrePostMul(a0,g0);
    assertTrue("green",Math.abs(gg - g1) <= tolerance);
    int b0=Color.blue(c0);
    int b1=Color.blue(c1);
    int bb=computePrePostMul(a0,b0);
    assertTrue("blue",Math.abs(bb - b1) <= tolerance);
    if (false) {
      int cc=Color.argb(a0,rr,gg,bb);
      android.util.Log.d("skia","original " + Integer.toHexString(c0) + " set+get "+ Integer.toHexString(c1)+ " local "+ Integer.toHexString(cc));
    }
  }
}
