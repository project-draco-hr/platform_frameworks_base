{
  final CameraCaptureSession session=this;
  return new CameraDevice.StateListener(){
    private boolean mBusy=false;
    private boolean mActive=false;
    @Override public void onOpened(    CameraDevice camera){
      throw new AssertionError("Camera must already be open before creating a session");
    }
    @Override public void onDisconnected(    CameraDevice camera){
      close();
    }
    @Override public void onError(    CameraDevice camera,    int error){
      Log.wtf(TAG,"Got device error " + error);
    }
    @Override public void onActive(    CameraDevice camera){
      mIdleDrainer.taskStarted();
      mActive=true;
      mStateListener.onActive(session);
    }
    @Override public void onIdle(    CameraDevice camera){
      boolean isAborting;
synchronized (session) {
        isAborting=mAborting;
      }
      if (mBusy && isAborting) {
        mAbortDrainer.taskFinished();
synchronized (session) {
          mAborting=false;
        }
      }
      if (mActive) {
        mIdleDrainer.taskFinished();
      }
      mBusy=false;
      mActive=false;
      mStateListener.onReady(session);
    }
    @Override public void onBusy(    CameraDevice camera){
      mBusy=true;
      Log.w(TAG,"Device is now busy; do not submit new captures (TODO: allow this)");
      mStateListener.onActive(session);
    }
    @Override public void onUnconfigured(    CameraDevice camera){
      mUnconfigureDrainer.taskFinished();
    }
  }
;
}
