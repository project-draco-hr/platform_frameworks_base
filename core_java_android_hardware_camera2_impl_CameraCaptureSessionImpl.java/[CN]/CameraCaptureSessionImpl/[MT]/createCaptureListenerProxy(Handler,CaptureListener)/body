{
  CameraDevice.CaptureListener localListener=new CameraDevice.CaptureListener(){
    @Override public void onCaptureSequenceCompleted(    CameraDevice camera,    int sequenceId,    long frameNumber){
      finishPendingSequence(sequenceId);
    }
    @Override public void onCaptureSequenceAborted(    CameraDevice camera,    int sequenceId){
      finishPendingSequence(sequenceId);
    }
  }
;
  if (listener == null) {
    return localListener;
  }
  InvokeDispatcher<CameraDevice.CaptureListener> localSink=new InvokeDispatcher<>(localListener);
  InvokeDispatcher<CaptureListener> userListenerSink=new InvokeDispatcher<>(listener);
  HandlerDispatcher<CaptureListener> handlerPassthrough=new HandlerDispatcher<>(userListenerSink,handler);
  DuckTypingDispatcher<CameraDevice.CaptureListener,CaptureListener> duckToSession=new DuckTypingDispatcher<>(handlerPassthrough,CaptureListener.class);
  ArgumentReplacingDispatcher<CameraDevice.CaptureListener,CameraCaptureSessionImpl> replaceDeviceWithSession=new ArgumentReplacingDispatcher<>(duckToSession,0,this);
  BroadcastDispatcher<CameraDevice.CaptureListener> broadcaster=new BroadcastDispatcher<CameraDevice.CaptureListener>(replaceDeviceWithSession,localSink);
  return new ListenerProxies.DeviceCaptureListenerProxy(broadcaster);
}
