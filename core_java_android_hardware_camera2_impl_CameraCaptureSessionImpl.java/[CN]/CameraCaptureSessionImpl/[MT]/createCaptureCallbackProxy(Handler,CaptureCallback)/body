{
  CameraDeviceImpl.CaptureCallback localCallback=new CameraDeviceImpl.CaptureCallback(){
    @Override public void onCaptureSequenceCompleted(    CameraDevice camera,    int sequenceId,    long frameNumber){
      finishPendingSequence(sequenceId);
    }
    @Override public void onCaptureSequenceAborted(    CameraDevice camera,    int sequenceId){
      finishPendingSequence(sequenceId);
    }
  }
;
  if (callback == null) {
    return localCallback;
  }
  InvokeDispatcher<CameraDeviceImpl.CaptureCallback> localSink=new InvokeDispatcher<>(localCallback);
  InvokeDispatcher<CaptureCallback> userCallbackSink=new InvokeDispatcher<>(callback);
  HandlerDispatcher<CaptureCallback> handlerPassthrough=new HandlerDispatcher<>(userCallbackSink,handler);
  DuckTypingDispatcher<CameraDeviceImpl.CaptureCallback,CaptureCallback> duckToSession=new DuckTypingDispatcher<>(handlerPassthrough,CaptureCallback.class);
  ArgumentReplacingDispatcher<CameraDeviceImpl.CaptureCallback,CameraCaptureSessionImpl> replaceDeviceWithSession=new ArgumentReplacingDispatcher<>(duckToSession,0,this);
  BroadcastDispatcher<CameraDeviceImpl.CaptureCallback> broadcaster=new BroadcastDispatcher<CameraDeviceImpl.CaptureCallback>(replaceDeviceWithSession,localSink);
  return new CallbackProxies.DeviceCaptureCallbackProxy(broadcaster);
}
