{
  mTouchExcludeRegion.set(mBaseDisplayRect);
  final int delta=mService.dipToPixel(RESIZE_HANDLE_WIDTH_IN_DP,mDisplayMetrics);
  boolean addBackFocusedTask=false;
  mNonResizeableRegion.setEmpty();
  for (int stackNdx=mStacks.size() - 1; stackNdx >= 0; --stackNdx) {
    TaskStack stack=mStacks.get(stackNdx);
    final ArrayList<Task> tasks=stack.getTasks();
    for (int taskNdx=tasks.size() - 1; taskNdx >= 0; --taskNdx) {
      final Task task=tasks.get(taskNdx);
      final WindowState win=task.getTopVisibleAppMainWindow();
      if (win == null) {
        continue;
      }
      final boolean isFreeformed=task.inFreeformWorkspace();
      if (task != focusedTask || isFreeformed) {
        task.getDimBounds(mTmpRect);
        if (isFreeformed) {
          if (task == focusedTask) {
            addBackFocusedTask=true;
            mTmpRect2.set(mTmpRect);
          }
          mTmpRect.inset(-delta,-delta);
          mTmpRect.intersect(mContentRect);
        }
        mTouchExcludeRegion.op(mTmpRect,Region.Op.DIFFERENCE);
      }
      if (task.isDockedInEffect() && !task.isResizeable()) {
        stack.getBounds(mTmpRect);
        mNonResizeableRegion.op(mTmpRect,Region.Op.UNION);
        break;
      }
    }
  }
  if (addBackFocusedTask) {
    mTouchExcludeRegion.op(mTmpRect2,Region.Op.UNION);
  }
  if (mTapDetector != null) {
    mTapDetector.setTouchExcludeRegion(mTouchExcludeRegion,mNonResizeableRegion);
  }
}
