{
  super(delegator,context);
  final TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.CalendarView,defStyleAttr,defStyleRes);
  mShowWeekNumber=a.getBoolean(R.styleable.CalendarView_showWeekNumber,DEFAULT_SHOW_WEEK_NUMBER);
  mFirstDayOfWeek=a.getInt(R.styleable.CalendarView_firstDayOfWeek,LocaleData.get(Locale.getDefault()).firstDayOfWeek);
  final String minDate=a.getString(R.styleable.CalendarView_minDate);
  if (TextUtils.isEmpty(minDate) || !parseDate(minDate,mMinDate)) {
    parseDate(DEFAULT_MIN_DATE,mMinDate);
  }
  final String maxDate=a.getString(R.styleable.CalendarView_maxDate);
  if (TextUtils.isEmpty(maxDate) || !parseDate(maxDate,mMaxDate)) {
    parseDate(DEFAULT_MAX_DATE,mMaxDate);
  }
  if (mMaxDate.before(mMinDate)) {
    throw new IllegalArgumentException("Max date cannot be before min date.");
  }
  mShownWeekCount=a.getInt(R.styleable.CalendarView_shownWeekCount,DEFAULT_SHOWN_WEEK_COUNT);
  mSelectedWeekBackgroundColor=a.getColor(R.styleable.CalendarView_selectedWeekBackgroundColor,0);
  mFocusedMonthDateColor=a.getColor(R.styleable.CalendarView_focusedMonthDateColor,0);
  mUnfocusedMonthDateColor=a.getColor(R.styleable.CalendarView_unfocusedMonthDateColor,0);
  mWeekSeparatorLineColor=a.getColor(R.styleable.CalendarView_weekSeparatorLineColor,0);
  mWeekNumberColor=a.getColor(R.styleable.CalendarView_weekNumberColor,0);
  mSelectedDateVerticalBar=a.getDrawable(R.styleable.CalendarView_selectedDateVerticalBar);
  mDateTextAppearanceResId=a.getResourceId(R.styleable.CalendarView_dateTextAppearance,R.style.TextAppearance_Small);
  updateDateTextSize();
  mWeekDayTextAppearanceResId=a.getResourceId(R.styleable.CalendarView_weekDayTextAppearance,DEFAULT_WEEK_DAY_TEXT_APPEARANCE_RES_ID);
  a.recycle();
  DisplayMetrics displayMetrics=mDelegator.getResources().getDisplayMetrics();
  mWeekMinVisibleHeight=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,UNSCALED_WEEK_MIN_VISIBLE_HEIGHT,displayMetrics);
  mListScrollTopOffset=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,UNSCALED_LIST_SCROLL_TOP_OFFSET,displayMetrics);
  mBottomBuffer=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,UNSCALED_BOTTOM_BUFFER,displayMetrics);
  mSelectedDateVerticalBarWidth=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,UNSCALED_SELECTED_DATE_VERTICAL_BAR_WIDTH,displayMetrics);
  mWeekSeperatorLineWidth=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,UNSCALED_WEEK_SEPARATOR_LINE_WIDTH,displayMetrics);
  LayoutInflater layoutInflater=(LayoutInflater)mContext.getSystemService(Service.LAYOUT_INFLATER_SERVICE);
  View content=layoutInflater.inflate(R.layout.calendar_view,null,false);
  mDelegator.addView(content);
  mListView=(ListView)mDelegator.findViewById(R.id.list);
  mDayNamesHeader=(ViewGroup)content.findViewById(R.id.day_names);
  mMonthName=(TextView)content.findViewById(R.id.month_name);
  setUpHeader();
  setUpListView();
  setUpAdapter();
  mTempDate.setTimeInMillis(System.currentTimeMillis());
  if (mTempDate.before(mMinDate)) {
    goTo(mMinDate,false,true,true);
  }
 else   if (mMaxDate.before(mTempDate)) {
    goTo(mMaxDate,false,true,true);
  }
 else {
    goTo(mTempDate,false,true,true);
  }
  mDelegator.invalidate();
}
