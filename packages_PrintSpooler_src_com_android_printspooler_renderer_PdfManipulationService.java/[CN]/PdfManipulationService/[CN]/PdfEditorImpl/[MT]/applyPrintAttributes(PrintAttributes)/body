{
synchronized (mLock) {
    throwIfNotOpened();
    if (DEBUG) {
      Log.i(LOG_TAG,"applyPrintAttributes()");
    }
    Rect mediaBox=new Rect();
    Rect cropBox=new Rect();
    Matrix transform=new Matrix();
    final boolean layoutDirectionRtl=getResources().getConfiguration().getLayoutDirection() == View.LAYOUT_DIRECTION_RTL;
    final int dstWidthPts=pointsFromMils(attributes.getMediaSize().getWidthMils());
    final int dstHeightPts=pointsFromMils(attributes.getMediaSize().getHeightMils());
    final boolean scaleForPrinting=mEditor.shouldScaleForPrinting();
    final int pageCount=mEditor.getPageCount();
    for (int i=0; i < pageCount; i++) {
      if (!mEditor.getPageMediaBox(i,mediaBox)) {
        Log.e(LOG_TAG,"Malformed PDF file");
        return;
      }
      final int srcWidthPts=mediaBox.width();
      final int srcHeightPts=mediaBox.height();
      mediaBox.right=dstWidthPts;
      mediaBox.bottom=dstHeightPts;
      mEditor.setPageMediaBox(i,mediaBox);
      transform.setTranslate(0,srcHeightPts - dstHeightPts);
      final float scale;
      if (scaleForPrinting) {
        scale=Math.min((float)dstWidthPts / srcWidthPts,(float)dstHeightPts / srcHeightPts);
        transform.postScale(scale,scale);
      }
 else {
        scale=1.0f;
      }
      if (mEditor.getPageCropBox(i,cropBox)) {
        cropBox.left=(int)(cropBox.left * scale + 0.5f);
        cropBox.top=(int)(cropBox.top * scale + 0.5f);
        cropBox.right=(int)(cropBox.right * scale + 0.5f);
        cropBox.bottom=(int)(cropBox.bottom * scale + 0.5f);
        cropBox.intersect(mediaBox);
        mEditor.setPageCropBox(i,cropBox);
      }
      if (layoutDirectionRtl) {
        final float dx=dstWidthPts - (int)(srcWidthPts * scale + 0.5f);
        final float dy=0;
        transform.postTranslate(dx,dy);
      }
      Margins minMargins=attributes.getMinMargins();
      final int paddingLeftPts=pointsFromMils(minMargins.getLeftMils());
      final int paddingTopPts=pointsFromMils(minMargins.getTopMils());
      final int paddingRightPts=pointsFromMils(minMargins.getRightMils());
      final int paddingBottomPts=pointsFromMils(minMargins.getBottomMils());
      Rect clip=new Rect(mediaBox);
      clip.left+=paddingLeftPts;
      clip.top+=paddingTopPts;
      clip.right-=paddingRightPts;
      clip.bottom-=paddingBottomPts;
      mEditor.setTransformAndClip(i,transform,clip);
    }
  }
}
