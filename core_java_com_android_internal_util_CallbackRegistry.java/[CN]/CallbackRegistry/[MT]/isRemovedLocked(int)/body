{
  if (index < Long.SIZE) {
    final long bitMask=1L << index;
    return (mFirst64Removed & bitMask) != 0;
  }
 else   if (mRemainderRemoved == null) {
    return false;
  }
 else {
    final int maskIndex=(index / Long.SIZE) - 1;
    if (maskIndex >= mRemainderRemoved.length) {
      return false;
    }
 else {
      final long bits=mRemainderRemoved[maskIndex];
      final long bitMask=1L << (index % Long.SIZE);
      return (bits & bitMask) != 0;
    }
  }
}
