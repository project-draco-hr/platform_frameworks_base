{
  ScaleGestureDetector detector=mZoomManager.getMultiTouchGestureDetector();
  long eventTime=event.getEventTime();
  x=Math.min(x,getViewWidth() - 1);
  y=Math.min(y,getViewHeightWithTitle() - 1);
  int deltaX=mLastTouchX - x;
  int deltaY=mLastTouchY - y;
  int contentX=viewToContentX(x + getScrollX());
  int contentY=viewToContentY(y + getScrollY());
switch (action) {
case MotionEvent.ACTION_DOWN:
{
      mConfirmMove=false;
      mInitialHitTestResult=null;
      if (!mEditTextScroller.isFinished()) {
        mEditTextScroller.abortAnimation();
      }
      if (!mScroller.isFinished()) {
        mScroller.abortAnimation();
        mTouchMode=TOUCH_DRAG_START_MODE;
        mConfirmMove=true;
        nativeSetIsScrolling(false);
      }
 else       if (mPrivateHandler.hasMessages(RELEASE_SINGLE_TAP)) {
        mPrivateHandler.removeMessages(RELEASE_SINGLE_TAP);
        removeTouchHighlight();
        if (deltaX * deltaX + deltaY * deltaY < mDoubleTapSlopSquare) {
          mTouchMode=TOUCH_DOUBLE_TAP_MODE;
        }
 else {
          mTouchMode=TOUCH_INIT_MODE;
        }
      }
 else {
        mTouchMode=TOUCH_INIT_MODE;
        TouchHighlightData data=new TouchHighlightData();
        data.mX=contentX;
        data.mY=contentY;
        data.mNativeLayerRect=new Rect();
        if (mNativeClass != 0) {
          data.mNativeLayer=nativeScrollableLayer(mNativeClass,contentX,contentY,data.mNativeLayerRect,null);
        }
 else {
          data.mNativeLayer=0;
        }
        data.mSlop=viewToContentDimension(mNavSlop);
        removeTouchHighlight();
        if (!mBlockWebkitViewMessages) {
          mWebViewCore.sendMessageAtFrontOfQueue(EventHub.HIT_TEST,data);
        }
        if (mLogEvent && eventTime - mLastTouchUpTime < 1000) {
          EventLog.writeEvent(EventLogTags.BROWSER_DOUBLE_TAP_DURATION,(eventTime - mLastTouchUpTime),eventTime);
        }
        mSelectionStarted=false;
        if (mSelectingText) {
          ensureSelectionHandles();
          int shiftedY=y - getTitleHeight() + getScrollY();
          int shiftedX=x + getScrollX();
          if (mSelectHandleCenter != null && mSelectHandleCenter.getBounds().contains(shiftedX,shiftedY)) {
            mSelectionStarted=true;
            mSelectDraggingCursor=mSelectCursorBase;
            mSelectDraggingOffset=mSelectHandleCenterOffset;
            mSelectDraggingTextQuad=mSelectCursorBaseTextQuad;
            mPrivateHandler.removeMessages(CLEAR_CARET_HANDLE);
            hidePasteButton();
          }
 else           if (mSelectHandleLeft != null && mSelectHandleLeft.getBounds().contains(shiftedX,shiftedY)) {
            mSelectionStarted=true;
            mSelectDraggingCursor=mSelectCursorBase;
            mSelectDraggingOffset=mSelectHandleLeftOffset;
            mSelectDraggingTextQuad=mSelectCursorBaseTextQuad;
          }
 else           if (mSelectHandleRight != null && mSelectHandleRight.getBounds().contains(shiftedX,shiftedY)) {
            mSelectionStarted=true;
            mSelectDraggingCursor=mSelectCursorExtent;
            mSelectDraggingOffset=mSelectHandleRightOffset;
            mSelectDraggingTextQuad=mSelectCursorExtentTextQuad;
          }
 else           if (mIsCaretSelection) {
            selectionDone();
          }
          if (DebugFlags.WEB_VIEW) {
            Log.v(LOGTAG,"select=" + contentX + ","+ contentY);
          }
        }
      }
      if (!mSelectingText && (mTouchMode == TOUCH_INIT_MODE || mTouchMode == TOUCH_DOUBLE_TAP_MODE)) {
        mPrivateHandler.sendEmptyMessageDelayed(SWITCH_TO_SHORTPRESS,TAP_TIMEOUT);
        mPrivateHandler.sendEmptyMessageDelayed(SWITCH_TO_LONGPRESS,LONG_PRESS_TIMEOUT);
      }
      startTouch(x,y,eventTime);
      if (mIsEditingText) {
        mTouchInEditText=mEditTextContentBounds.contains(contentX,contentY);
      }
      break;
    }
case MotionEvent.ACTION_MOVE:
{
    if (!mConfirmMove && (deltaX * deltaX + deltaY * deltaY) >= mTouchSlopSquare) {
      mPrivateHandler.removeMessages(SWITCH_TO_SHORTPRESS);
      mPrivateHandler.removeMessages(SWITCH_TO_LONGPRESS);
      mConfirmMove=true;
      if (mTouchMode == TOUCH_DOUBLE_TAP_MODE) {
        mTouchMode=TOUCH_INIT_MODE;
      }
      removeTouchHighlight();
    }
    if (mSelectingText && mSelectionStarted) {
      if (DebugFlags.WEB_VIEW) {
        Log.v(LOGTAG,"extend=" + contentX + ","+ contentY);
      }
      ViewParent parent=mWebView.getParent();
      if (parent != null) {
        parent.requestDisallowInterceptTouchEvent(true);
      }
      if (deltaX != 0 || deltaY != 0) {
        int handleX=contentX + viewToContentDimension(mSelectDraggingOffset.x);
        int handleY=contentY + viewToContentDimension(mSelectDraggingOffset.y);
        mSelectDraggingCursor.set(handleX,handleY);
        boolean inCursorText=mSelectDraggingTextQuad.containsPoint(handleX,handleY);
        boolean inEditBounds=mEditTextContentBounds.contains(handleX,handleY);
        if (mIsEditingText && !inEditBounds) {
          beginScrollEdit();
        }
 else {
          endScrollEdit();
        }
        if (inCursorText || (mIsEditingText && !inEditBounds)) {
          snapDraggingCursor();
        }
        updateWebkitSelection();
        if (!inCursorText && mIsEditingText && inEditBounds) {
          snapDraggingCursor();
        }
        mLastTouchX=x;
        mLastTouchY=y;
        invalidate();
      }
      break;
    }
    if (mTouchMode == TOUCH_DONE_MODE) {
      break;
    }
    if (mVelocityTracker == null) {
      Log.e(LOGTAG,"Got null mVelocityTracker when " + " mTouchMode = " + mTouchMode);
    }
 else {
      mVelocityTracker.addMovement(event);
    }
    if (mTouchMode != TOUCH_DRAG_MODE && mTouchMode != TOUCH_DRAG_LAYER_MODE && mTouchMode != TOUCH_DRAG_TEXT_MODE) {
      if (!mConfirmMove) {
        break;
      }
      mAverageAngle=calculateDragAngle(deltaX,deltaY);
      if (detector == null || !detector.isInProgress()) {
        if (mAverageAngle < HSLOPE_TO_START_SNAP) {
          mSnapScrollMode=SNAP_X;
          mSnapPositive=deltaX > 0;
          mAverageAngle=ANGLE_HORIZ;
        }
 else         if (mAverageAngle > VSLOPE_TO_START_SNAP) {
          mSnapScrollMode=SNAP_Y;
          mSnapPositive=deltaY > 0;
          mAverageAngle=ANGLE_VERT;
        }
      }
      mTouchMode=TOUCH_DRAG_MODE;
      mLastTouchX=x;
      mLastTouchY=y;
      deltaX=0;
      deltaY=0;
      startScrollingLayer(x,y);
      startDrag();
    }
    boolean keepScrollBarsVisible=false;
    if (deltaX == 0 && deltaY == 0) {
      keepScrollBarsVisible=true;
    }
 else {
      mAverageAngle+=(calculateDragAngle(deltaX,deltaY) - mAverageAngle) / MMA_WEIGHT_N;
      if (mSnapScrollMode != SNAP_NONE) {
        if (mSnapScrollMode == SNAP_Y) {
          if (mAverageAngle < VSLOPE_TO_BREAK_SNAP) {
            mSnapScrollMode=SNAP_NONE;
          }
        }
        if (mSnapScrollMode == SNAP_X) {
          if (mAverageAngle > HSLOPE_TO_BREAK_SNAP) {
            mSnapScrollMode=SNAP_NONE;
          }
        }
      }
 else {
        if (mAverageAngle < HSLOPE_TO_START_SNAP) {
          mSnapScrollMode=SNAP_X;
          mSnapPositive=deltaX > 0;
          mAverageAngle=(mAverageAngle + ANGLE_HORIZ) / 2;
        }
 else         if (mAverageAngle > VSLOPE_TO_START_SNAP) {
          mSnapScrollMode=SNAP_Y;
          mSnapPositive=deltaY > 0;
          mAverageAngle=(mAverageAngle + ANGLE_VERT) / 2;
        }
      }
      if (mSnapScrollMode != SNAP_NONE) {
        if ((mSnapScrollMode & SNAP_X) == SNAP_X) {
          deltaY=0;
        }
 else {
          deltaX=0;
        }
      }
      if (deltaX * deltaX + deltaY * deltaY > mTouchSlopSquare) {
        mHeldMotionless=MOTIONLESS_FALSE;
        nativeSetIsScrolling(true);
      }
 else {
        mHeldMotionless=MOTIONLESS_TRUE;
        nativeSetIsScrolling(false);
        keepScrollBarsVisible=true;
      }
      mLastTouchTime=eventTime;
      boolean allDrag=doDrag(deltaX,deltaY);
      if (allDrag) {
        mLastTouchX=x;
        mLastTouchY=y;
      }
 else {
        int contentDeltaX=(int)Math.floor(deltaX * mZoomManager.getInvScale());
        int roundedDeltaX=contentToViewDimension(contentDeltaX);
        int contentDeltaY=(int)Math.floor(deltaY * mZoomManager.getInvScale());
        int roundedDeltaY=contentToViewDimension(contentDeltaY);
        mLastTouchX-=roundedDeltaX;
        mLastTouchY-=roundedDeltaY;
      }
    }
    if (keepScrollBarsVisible && mTouchMode != TOUCH_DRAG_LAYER_MODE && mTouchMode != TOUCH_DRAG_TEXT_MODE) {
      if (mHeldMotionless != MOTIONLESS_TRUE) {
        mHeldMotionless=MOTIONLESS_TRUE;
        invalidate();
      }
      mWebViewPrivate.awakenScrollBars(ViewConfiguration.getScrollDefaultDelay(),false);
      mPrivateHandler.sendMessageDelayed(mPrivateHandler.obtainMessage(AWAKEN_SCROLL_BARS),ViewConfiguration.getScrollDefaultDelay());
      return;
    }
 else {
      mPrivateHandler.removeMessages(AWAKEN_SCROLL_BARS);
    }
    break;
  }
case MotionEvent.ACTION_UP:
{
  endScrollEdit();
  if (!mConfirmMove && mIsEditingText && mSelectionStarted&& mIsCaretSelection) {
    showPasteWindow();
    stopTouch();
    break;
  }
  mLastTouchUpTime=eventTime;
  if (mSentAutoScrollMessage) {
    mAutoScrollX=mAutoScrollY=0;
  }
switch (mTouchMode) {
case TOUCH_DOUBLE_TAP_MODE:
    mPrivateHandler.removeMessages(SWITCH_TO_SHORTPRESS);
  mPrivateHandler.removeMessages(SWITCH_TO_LONGPRESS);
mTouchMode=TOUCH_DONE_MODE;
break;
case TOUCH_INIT_MODE:
case TOUCH_SHORTPRESS_START_MODE:
case TOUCH_SHORTPRESS_MODE:
mPrivateHandler.removeMessages(SWITCH_TO_SHORTPRESS);
mPrivateHandler.removeMessages(SWITCH_TO_LONGPRESS);
if (!mConfirmMove) {
if (mSelectingText) {
if (!mSelectionStarted) {
selectionDone();
}
break;
}
if (mTouchMode == TOUCH_INIT_MODE && (canZoomIn() || canZoomOut())) {
mPrivateHandler.sendEmptyMessageDelayed(RELEASE_SINGLE_TAP,ViewConfiguration.getDoubleTapTimeout());
}
break;
}
case TOUCH_DRAG_MODE:
case TOUCH_DRAG_LAYER_MODE:
case TOUCH_DRAG_TEXT_MODE:
mPrivateHandler.removeMessages(DRAG_HELD_MOTIONLESS);
mPrivateHandler.removeMessages(AWAKEN_SCROLL_BARS);
if (eventTime - mLastTouchTime <= MIN_FLING_TIME) {
if (mVelocityTracker == null) {
Log.e(LOGTAG,"Got null mVelocityTracker");
}
 else {
mVelocityTracker.addMovement(event);
}
mHeldMotionless=MOTIONLESS_IGNORE;
doFling();
break;
}
 else {
if (mScroller.springBack(getScrollX(),getScrollY(),0,computeMaxScrollX(),0,computeMaxScrollY())) {
invalidate();
}
}
mHeldMotionless=MOTIONLESS_TRUE;
invalidate();
case TOUCH_DRAG_START_MODE:
mLastVelocity=0;
WebViewCore.resumePriority();
if (!mSelectingText) {
WebViewCore.resumeUpdatePicture(mWebViewCore);
}
break;
}
stopTouch();
break;
}
case MotionEvent.ACTION_CANCEL:
{
if (mTouchMode == TOUCH_DRAG_MODE) {
mScroller.springBack(getScrollX(),getScrollY(),0,computeMaxScrollX(),0,computeMaxScrollY());
invalidate();
}
cancelTouch();
break;
}
}
}
