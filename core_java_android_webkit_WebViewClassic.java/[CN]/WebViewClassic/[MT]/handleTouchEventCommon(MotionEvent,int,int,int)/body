{
  long eventTime=ev.getEventTime();
  x=Math.min(x,getViewWidth() - 1);
  y=Math.min(y,getViewHeightWithTitle() - 1);
  int deltaX=mLastTouchX - x;
  int deltaY=mLastTouchY - y;
  int contentX=viewToContentX(x + getScrollX());
  int contentY=viewToContentY(y + getScrollY());
switch (action) {
case MotionEvent.ACTION_DOWN:
{
      mPreventDefault=PREVENT_DEFAULT_NO;
      mConfirmMove=false;
      mInitialHitTestResult=null;
      if (!mScroller.isFinished()) {
        mScroller.abortAnimation();
        mTouchMode=TOUCH_DRAG_START_MODE;
        mConfirmMove=true;
        nativeSetIsScrolling(false);
      }
 else       if (mPrivateHandler.hasMessages(RELEASE_SINGLE_TAP)) {
        mPrivateHandler.removeMessages(RELEASE_SINGLE_TAP);
        removeTouchHighlight();
        if (deltaX * deltaX + deltaY * deltaY < mDoubleTapSlopSquare) {
          mTouchMode=TOUCH_DOUBLE_TAP_MODE;
        }
 else {
          doShortPress();
          mTouchMode=TOUCH_INIT_MODE;
          mDeferTouchProcess=!mBlockWebkitViewMessages && (!inFullScreenMode() && mForwardTouchEvents) ? hitFocusedPlugin(contentX,contentY) : false;
        }
      }
 else {
        mTouchMode=TOUCH_INIT_MODE;
        mDeferTouchProcess=!mBlockWebkitViewMessages && (!inFullScreenMode() && mForwardTouchEvents) ? hitFocusedPlugin(contentX,contentY) : false;
        TouchHighlightData data=new TouchHighlightData();
        data.mX=contentX;
        data.mY=contentY;
        data.mNativeLayerRect=new Rect();
        data.mNativeLayer=nativeScrollableLayer(contentX,contentY,data.mNativeLayerRect,null);
        data.mSlop=viewToContentDimension(mNavSlop);
        mTouchHighlightRegion.setEmpty();
        if (!mBlockWebkitViewMessages) {
          mTouchHighlightRequested=System.currentTimeMillis();
          mWebViewCore.sendMessageAtFrontOfQueue(EventHub.HIT_TEST,data);
        }
        if (DEBUG_TOUCH_HIGHLIGHT) {
          if (getSettings().getNavDump()) {
            mTouchHighlightX=x + getScrollX();
            mTouchHighlightY=y + getScrollY();
            mPrivateHandler.postDelayed(new Runnable(){
              @Override public void run(){
                mTouchHighlightX=mTouchHighlightY=0;
                invalidate();
              }
            }
,TOUCH_HIGHLIGHT_ELAPSE_TIME);
          }
        }
        if (mLogEvent && eventTime - mLastTouchUpTime < 1000) {
          EventLog.writeEvent(EventLogTags.BROWSER_DOUBLE_TAP_DURATION,(eventTime - mLastTouchUpTime),eventTime);
        }
        mSelectionStarted=false;
        if (mSelectingText) {
          int shiftedY=y - getTitleHeight() + getScrollY();
          int shiftedX=x + getScrollX();
          if (mSelectHandleCenter != null && mSelectHandleCenter.getBounds().contains(shiftedX,shiftedY)) {
            mSelectionStarted=true;
            mSelectDraggingCursor=mSelectCursorBase;
            mPrivateHandler.removeMessages(CLEAR_CARET_HANDLE);
            hidePasteButton();
          }
 else           if (mSelectHandleLeft != null && mSelectHandleLeft.getBounds().contains(shiftedX,shiftedY)) {
            mSelectionStarted=true;
            mSelectDraggingCursor=mSelectCursorBase;
          }
 else           if (mSelectHandleRight != null && mSelectHandleRight.getBounds().contains(shiftedX,shiftedY)) {
            mSelectionStarted=true;
            mSelectDraggingCursor=mSelectCursorExtent;
          }
 else           if (mIsCaretSelection) {
            selectionDone();
          }
          if (mSelectDraggingCursor != null) {
            mSelectDraggingOffset.set(mSelectDraggingCursor.left - contentX,mSelectDraggingCursor.top - contentY);
          }
          if (DebugFlags.WEB_VIEW) {
            Log.v(LOGTAG,"select=" + contentX + ","+ contentY);
          }
        }
      }
      if (!mSelectingText && (mTouchMode == TOUCH_INIT_MODE || mTouchMode == TOUCH_DOUBLE_TAP_MODE)) {
        mPrivateHandler.sendEmptyMessageDelayed(SWITCH_TO_SHORTPRESS,TAP_TIMEOUT);
        mPrivateHandler.sendEmptyMessageDelayed(SWITCH_TO_LONGPRESS,LONG_PRESS_TIMEOUT);
        if (inFullScreenMode() || mDeferTouchProcess) {
          mPreventDefault=PREVENT_DEFAULT_YES;
        }
 else         if (!mBlockWebkitViewMessages && mForwardTouchEvents) {
          mPreventDefault=PREVENT_DEFAULT_MAYBE_YES;
        }
 else {
          mPreventDefault=PREVENT_DEFAULT_NO;
        }
        if (shouldForwardTouchEvent()) {
          TouchEventData ted=new TouchEventData();
          ted.mAction=action;
          ted.mIds=new int[1];
          ted.mIds[0]=ev.getPointerId(0);
          ted.mPoints=new Point[1];
          ted.mPoints[0]=new Point(contentX,contentY);
          ted.mPointsInView=new Point[1];
          ted.mPointsInView[0]=new Point(x,y);
          ted.mMetaState=ev.getMetaState();
          ted.mReprocess=mDeferTouchProcess;
          ted.mNativeLayer=nativeScrollableLayer(contentX,contentY,ted.mNativeLayerRect,null);
          ted.mSequence=mTouchEventQueue.nextTouchSequence();
          mTouchEventQueue.preQueueTouchEventData(ted);
          mWebViewCore.sendMessage(EventHub.TOUCH_EVENT,ted);
          if (mDeferTouchProcess) {
            mLastTouchX=x;
            mLastTouchY=y;
            break;
          }
          if (!inFullScreenMode()) {
            mPrivateHandler.removeMessages(PREVENT_DEFAULT_TIMEOUT);
            mPrivateHandler.sendMessageDelayed(mPrivateHandler.obtainMessage(PREVENT_DEFAULT_TIMEOUT,action,0),TAP_TIMEOUT);
          }
        }
      }
      startTouch(x,y,eventTime);
      break;
    }
case MotionEvent.ACTION_MOVE:
{
    boolean firstMove=false;
    if (!mConfirmMove && (deltaX * deltaX + deltaY * deltaY) >= mTouchSlopSquare) {
      mPrivateHandler.removeMessages(SWITCH_TO_SHORTPRESS);
      mPrivateHandler.removeMessages(SWITCH_TO_LONGPRESS);
      mConfirmMove=true;
      firstMove=true;
      if (mTouchMode == TOUCH_DOUBLE_TAP_MODE) {
        mTouchMode=TOUCH_INIT_MODE;
      }
      removeTouchHighlight();
    }
    if (mSelectingText && mSelectionStarted) {
      if (DebugFlags.WEB_VIEW) {
        Log.v(LOGTAG,"extend=" + contentX + ","+ contentY);
      }
      ViewParent parent=mWebView.getParent();
      if (parent != null) {
        parent.requestDisallowInterceptTouchEvent(true);
      }
      if (deltaX != 0 || deltaY != 0) {
        mSelectDraggingCursor.offsetTo(contentX + mSelectDraggingOffset.x,contentY + mSelectDraggingOffset.y);
        updateWebkitSelection();
        mLastTouchX=x;
        mLastTouchY=y;
        invalidate();
      }
      break;
    }
    if (shouldForwardTouchEvent() && mConfirmMove && (firstMove || eventTime - mLastSentTouchTime > mCurrentTouchInterval)) {
      TouchEventData ted=new TouchEventData();
      ted.mAction=action;
      ted.mIds=new int[1];
      ted.mIds[0]=ev.getPointerId(0);
      ted.mPoints=new Point[1];
      ted.mPoints[0]=new Point(contentX,contentY);
      ted.mPointsInView=new Point[1];
      ted.mPointsInView[0]=new Point(x,y);
      ted.mMetaState=ev.getMetaState();
      ted.mReprocess=mDeferTouchProcess;
      ted.mNativeLayer=mCurrentScrollingLayerId;
      ted.mNativeLayerRect.set(mScrollingLayerRect);
      ted.mSequence=mTouchEventQueue.nextTouchSequence();
      mTouchEventQueue.preQueueTouchEventData(ted);
      mWebViewCore.sendMessage(EventHub.TOUCH_EVENT,ted);
      mLastSentTouchTime=eventTime;
      if (mDeferTouchProcess) {
        break;
      }
      if (firstMove && !inFullScreenMode()) {
        mPrivateHandler.sendMessageDelayed(mPrivateHandler.obtainMessage(PREVENT_DEFAULT_TIMEOUT,action,0),TAP_TIMEOUT);
      }
    }
    if (mTouchMode == TOUCH_DONE_MODE || mPreventDefault == PREVENT_DEFAULT_YES) {
      break;
    }
    if (mVelocityTracker == null) {
      Log.e(LOGTAG,"Got null mVelocityTracker when " + "mPreventDefault = " + mPreventDefault + " mDeferTouchProcess = "+ mDeferTouchProcess+ " mTouchMode = "+ mTouchMode);
    }
 else {
      mVelocityTracker.addMovement(ev);
    }
    if (mTouchMode != TOUCH_DRAG_MODE && mTouchMode != TOUCH_DRAG_LAYER_MODE) {
      if (!mConfirmMove) {
        break;
      }
      if (mPreventDefault == PREVENT_DEFAULT_MAYBE_YES || mPreventDefault == PREVENT_DEFAULT_NO_FROM_TOUCH_DOWN) {
        mLastTouchTime=eventTime;
        break;
      }
      final ScaleGestureDetector detector=mZoomManager.getMultiTouchGestureDetector();
      mAverageAngle=calculateDragAngle(deltaX,deltaY);
      if (detector == null || !detector.isInProgress()) {
        if (mAverageAngle < HSLOPE_TO_START_SNAP) {
          mSnapScrollMode=SNAP_X;
          mSnapPositive=deltaX > 0;
          mAverageAngle=ANGLE_HORIZ;
        }
 else         if (mAverageAngle > VSLOPE_TO_START_SNAP) {
          mSnapScrollMode=SNAP_Y;
          mSnapPositive=deltaY > 0;
          mAverageAngle=ANGLE_VERT;
        }
      }
      mTouchMode=TOUCH_DRAG_MODE;
      mLastTouchX=x;
      mLastTouchY=y;
      deltaX=0;
      deltaY=0;
      startScrollingLayer(x,y);
      startDrag();
    }
    boolean done=false;
    boolean keepScrollBarsVisible=false;
    if (deltaX == 0 && deltaY == 0) {
      keepScrollBarsVisible=done=true;
    }
 else {
      mAverageAngle+=(calculateDragAngle(deltaX,deltaY) - mAverageAngle) / MMA_WEIGHT_N;
      if (mSnapScrollMode != SNAP_NONE) {
        if (mSnapScrollMode == SNAP_Y) {
          if (mAverageAngle < VSLOPE_TO_BREAK_SNAP) {
            mSnapScrollMode=SNAP_NONE;
          }
        }
        if (mSnapScrollMode == SNAP_X) {
          if (mAverageAngle > HSLOPE_TO_BREAK_SNAP) {
            mSnapScrollMode=SNAP_NONE;
          }
        }
      }
 else {
        if (mAverageAngle < HSLOPE_TO_START_SNAP) {
          mSnapScrollMode=SNAP_X;
          mSnapPositive=deltaX > 0;
          mAverageAngle=(mAverageAngle + ANGLE_HORIZ) / 2;
        }
 else         if (mAverageAngle > VSLOPE_TO_START_SNAP) {
          mSnapScrollMode=SNAP_Y;
          mSnapPositive=deltaY > 0;
          mAverageAngle=(mAverageAngle + ANGLE_VERT) / 2;
        }
      }
      if (mSnapScrollMode != SNAP_NONE) {
        if ((mSnapScrollMode & SNAP_X) == SNAP_X) {
          deltaY=0;
        }
 else {
          deltaX=0;
        }
      }
      mLastTouchX=x;
      mLastTouchY=y;
      if (deltaX * deltaX + deltaY * deltaY > mTouchSlopSquare) {
        mHeldMotionless=MOTIONLESS_FALSE;
        nativeSetIsScrolling(true);
      }
 else {
        mHeldMotionless=MOTIONLESS_TRUE;
        nativeSetIsScrolling(false);
        keepScrollBarsVisible=true;
      }
      mLastTouchTime=eventTime;
    }
    doDrag(deltaX,deltaY);
    if (keepScrollBarsVisible && mTouchMode != TOUCH_DRAG_LAYER_MODE) {
      if (mHeldMotionless != MOTIONLESS_TRUE) {
        mHeldMotionless=MOTIONLESS_TRUE;
        invalidate();
      }
      mWebViewPrivate.awakenScrollBars(ViewConfiguration.getScrollDefaultDelay(),false);
      mPrivateHandler.sendMessageDelayed(mPrivateHandler.obtainMessage(AWAKEN_SCROLL_BARS),ViewConfiguration.getScrollDefaultDelay());
      return !done;
    }
 else {
      mPrivateHandler.removeMessages(AWAKEN_SCROLL_BARS);
    }
    break;
  }
case MotionEvent.ACTION_UP:
{
  if (shouldForwardTouchEvent()) {
    TouchEventData ted=new TouchEventData();
    ted.mIds=new int[1];
    ted.mIds[0]=ev.getPointerId(0);
    ted.mAction=action;
    ted.mPoints=new Point[1];
    ted.mPoints[0]=new Point(contentX,contentY);
    ted.mPointsInView=new Point[1];
    ted.mPointsInView[0]=new Point(x,y);
    ted.mMetaState=ev.getMetaState();
    ted.mReprocess=mDeferTouchProcess;
    ted.mNativeLayer=mCurrentScrollingLayerId;
    ted.mNativeLayerRect.set(mScrollingLayerRect);
    ted.mSequence=mTouchEventQueue.nextTouchSequence();
    mTouchEventQueue.preQueueTouchEventData(ted);
    mWebViewCore.sendMessage(EventHub.TOUCH_EVENT,ted);
  }
  mLastTouchUpTime=eventTime;
  if (mSentAutoScrollMessage) {
    mAutoScrollX=mAutoScrollY=0;
  }
switch (mTouchMode) {
case TOUCH_DOUBLE_TAP_MODE:
    mPrivateHandler.removeMessages(SWITCH_TO_SHORTPRESS);
  mPrivateHandler.removeMessages(SWITCH_TO_LONGPRESS);
if (inFullScreenMode() || mDeferTouchProcess) {
  TouchEventData ted=new TouchEventData();
  ted.mIds=new int[1];
  ted.mIds[0]=ev.getPointerId(0);
  ted.mAction=WebViewCore.ACTION_DOUBLETAP;
  ted.mPoints=new Point[1];
  ted.mPoints[0]=new Point(contentX,contentY);
  ted.mPointsInView=new Point[1];
  ted.mPointsInView[0]=new Point(x,y);
  ted.mMetaState=ev.getMetaState();
  ted.mReprocess=mDeferTouchProcess;
  ted.mNativeLayer=nativeScrollableLayer(contentX,contentY,ted.mNativeLayerRect,null);
  ted.mSequence=mTouchEventQueue.nextTouchSequence();
  mTouchEventQueue.preQueueTouchEventData(ted);
  mWebViewCore.sendMessage(EventHub.TOUCH_EVENT,ted);
}
 else if (mPreventDefault != PREVENT_DEFAULT_YES) {
  mZoomManager.handleDoubleTap(mLastTouchX,mLastTouchY);
  mTouchMode=TOUCH_DONE_MODE;
}
break;
case TOUCH_INIT_MODE:
case TOUCH_SHORTPRESS_START_MODE:
case TOUCH_SHORTPRESS_MODE:
mPrivateHandler.removeMessages(SWITCH_TO_SHORTPRESS);
mPrivateHandler.removeMessages(SWITCH_TO_LONGPRESS);
if (mConfirmMove) {
Log.w(LOGTAG,"Miss a drag as we are waiting for" + " WebCore's response for touch down.");
if (mPreventDefault != PREVENT_DEFAULT_YES && (computeMaxScrollX() > 0 || computeMaxScrollY() > 0)) {
WebViewCore.reducePriority();
WebViewCore.pauseUpdatePicture(mWebViewCore);
}
 else {
invalidate();
break;
}
}
 else {
if (mSelectingText) {
if (!mSelectionStarted) {
selectionDone();
}
break;
}
if (mTouchMode == TOUCH_INIT_MODE && (canZoomIn() || canZoomOut())) {
mPrivateHandler.sendEmptyMessageDelayed(RELEASE_SINGLE_TAP,ViewConfiguration.getDoubleTapTimeout());
}
 else {
doShortPress();
}
break;
}
case TOUCH_DRAG_MODE:
case TOUCH_DRAG_LAYER_MODE:
mPrivateHandler.removeMessages(DRAG_HELD_MOTIONLESS);
mPrivateHandler.removeMessages(AWAKEN_SCROLL_BARS);
if (eventTime - mLastTouchTime <= MIN_FLING_TIME) {
if (mVelocityTracker == null) {
Log.e(LOGTAG,"Got null mVelocityTracker when " + "mPreventDefault = " + mPreventDefault + " mDeferTouchProcess = "+ mDeferTouchProcess);
}
 else {
mVelocityTracker.addMovement(ev);
}
mHeldMotionless=MOTIONLESS_IGNORE;
doFling();
break;
}
 else {
if (mScroller.springBack(getScrollX(),getScrollY(),0,computeMaxScrollX(),0,computeMaxScrollY())) {
invalidate();
}
}
mHeldMotionless=MOTIONLESS_TRUE;
invalidate();
case TOUCH_DRAG_START_MODE:
mLastVelocity=0;
WebViewCore.resumePriority();
if (!mSelectingText) {
WebViewCore.resumeUpdatePicture(mWebViewCore);
}
break;
}
stopTouch();
break;
}
case MotionEvent.ACTION_CANCEL:
{
if (mTouchMode == TOUCH_DRAG_MODE) {
mScroller.springBack(getScrollX(),getScrollY(),0,computeMaxScrollX(),0,computeMaxScrollY());
invalidate();
}
cancelWebCoreTouchEvent(contentX,contentY,false);
cancelTouch();
break;
}
}
return true;
}
