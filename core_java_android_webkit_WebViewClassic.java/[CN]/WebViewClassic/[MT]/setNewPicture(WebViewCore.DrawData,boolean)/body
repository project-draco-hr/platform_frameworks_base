{
  if (mNativeClass == 0) {
    if (mDelaySetPicture != null) {
      throw new IllegalStateException("Tried to setNewPicture with" + " a delay picture already set! (memory leak)");
    }
    mDelaySetPicture=draw;
    return;
  }
  WebViewCore.ViewState viewState=draw.mViewState;
  boolean isPictureAfterFirstLayout=viewState != null;
  if (updateBaseLayer) {
    setBaseLayer(draw.mBaseLayer,getSettings().getShowVisualIndicator(),isPictureAfterFirstLayout);
  }
  final Point viewSize=draw.mViewSize;
  final boolean updateLayout=viewSize.x == mLastWidthSent && viewSize.y == mLastHeightSent;
  mSendScrollEvent=false;
  recordNewContentSize(draw.mContentSize.x,draw.mContentSize.y,updateLayout);
  if (isPictureAfterFirstLayout) {
    mLastWidthSent=0;
    mZoomManager.onFirstLayout(draw);
    int scrollX=viewState.mShouldStartScrolledRight ? getContentWidth() : viewState.mScrollX;
    int scrollY=viewState.mScrollY;
    contentScrollTo(scrollX,scrollY,false);
    if (!mDrawHistory) {
      hideSoftKeyboard();
    }
  }
  mSendScrollEvent=true;
  int functor=0;
  ViewRootImpl viewRoot=mWebView.getViewRootImpl();
  if (mWebView.isHardwareAccelerated() && viewRoot != null) {
    functor=nativeGetDrawGLFunction(mNativeClass);
    viewRoot.attachFunctor(functor);
  }
  if (functor == 0 || mWebView.getLayerType() != View.LAYER_TYPE_NONE) {
    mWebView.invalidate();
  }
  mZoomManager.onNewPicture(draw);
  if (isPictureAfterFirstLayout) {
    mViewManager.postReadyToDrawAll();
  }
  scrollEditWithCursor();
  if (mPictureListener != null) {
    if (!mWebView.isHardwareAccelerated() || mWebView.getLayerType() == View.LAYER_TYPE_SOFTWARE) {
      mPictureListener.onNewPicture(getWebView(),capturePicture());
    }
  }
}
