{
  mIsKeySentByMe=true;
  Editable editable=getEditable();
  CharSequence original=editable.subSequence(start,end);
  boolean isCharacterAdd=false;
  boolean isCharacterDelete=false;
  int textLength=text.length();
  int originalLength=original.length();
  if (textLength > originalLength) {
    isCharacterAdd=(textLength == originalLength + 1) && TextUtils.regionMatches(text,0,original,0,originalLength);
  }
 else   if (originalLength > textLength) {
    isCharacterDelete=(textLength == originalLength - 1) && TextUtils.regionMatches(text,0,original,0,textLength);
  }
  if (isCharacterAdd) {
    sendCharacter(text.charAt(textLength - 1));
  }
 else   if (isCharacterDelete) {
    sendKey(KeyEvent.KEYCODE_DEL);
  }
 else   if ((textLength != originalLength) || !TextUtils.regionMatches(text,0,original,0,textLength)) {
    Message replaceMessage=mPrivateHandler.obtainMessage(REPLACE_TEXT,start,end,text.toString());
    mPrivateHandler.sendMessage(replaceMessage);
  }
  if (mAutoCompletePopup != null) {
    StringBuilder newText=new StringBuilder();
    newText.append(editable.subSequence(0,start));
    newText.append(text);
    newText.append(editable.subSequence(end,editable.length()));
    mAutoCompletePopup.setText(newText.toString());
  }
  mIsKeySentByMe=false;
}
