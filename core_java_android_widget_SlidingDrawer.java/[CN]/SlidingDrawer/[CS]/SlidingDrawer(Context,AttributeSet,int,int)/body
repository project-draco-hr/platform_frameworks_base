{
  super(context,attrs,defStyleAttr,defStyleRes);
  final TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.SlidingDrawer,defStyleAttr,defStyleRes);
  int orientation=a.getInt(R.styleable.SlidingDrawer_orientation,ORIENTATION_VERTICAL);
  mVertical=orientation == ORIENTATION_VERTICAL;
  mBottomOffset=(int)a.getDimension(R.styleable.SlidingDrawer_bottomOffset,0.0f);
  mTopOffset=(int)a.getDimension(R.styleable.SlidingDrawer_topOffset,0.0f);
  mAllowSingleTap=a.getBoolean(R.styleable.SlidingDrawer_allowSingleTap,true);
  mAnimateOnClick=a.getBoolean(R.styleable.SlidingDrawer_animateOnClick,true);
  int handleId=a.getResourceId(R.styleable.SlidingDrawer_handle,0);
  if (handleId == 0) {
    throw new IllegalArgumentException("The handle attribute is required and must refer " + "to a valid child.");
  }
  int contentId=a.getResourceId(R.styleable.SlidingDrawer_content,0);
  if (contentId == 0) {
    throw new IllegalArgumentException("The content attribute is required and must refer " + "to a valid child.");
  }
  if (handleId == contentId) {
    throw new IllegalArgumentException("The content and handle attributes must refer " + "to different children.");
  }
  mHandleId=handleId;
  mContentId=contentId;
  final float density=getResources().getDisplayMetrics().density;
  mTapThreshold=(int)(TAP_THRESHOLD * density + 0.5f);
  mMaximumTapVelocity=(int)(MAXIMUM_TAP_VELOCITY * density + 0.5f);
  mMaximumMinorVelocity=(int)(MAXIMUM_MINOR_VELOCITY * density + 0.5f);
  mMaximumMajorVelocity=(int)(MAXIMUM_MAJOR_VELOCITY * density + 0.5f);
  mMaximumAcceleration=(int)(MAXIMUM_ACCELERATION * density + 0.5f);
  mVelocityUnits=(int)(VELOCITY_UNITS * density + 0.5f);
  a.recycle();
  setAlwaysDrawnWithCacheEnabled(false);
}
