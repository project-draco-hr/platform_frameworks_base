{
  if (!Intent.isAccessUriMode(modeFlags)) {
    return -1;
  }
  if (targetPkg != null) {
    if (DEBUG_URI_PERMISSION)     Slog.v(TAG,"Checking grant " + targetPkg + " permission to "+ grantUri);
  }
  final IPackageManager pm=AppGlobals.getPackageManager();
  if (!ContentResolver.SCHEME_CONTENT.equals(grantUri.uri.getScheme())) {
    if (DEBUG_URI_PERMISSION)     Slog.v(TAG,"Can't grant URI permission for non-content URI: " + grantUri);
    return -1;
  }
  final String authority=grantUri.uri.getAuthority();
  final ProviderInfo pi=getProviderInfoLocked(authority,grantUri.sourceUserId);
  if (pi == null) {
    Slog.w(TAG,"No content provider found for permission check: " + grantUri.uri.toSafeString());
    return -1;
  }
  int targetUid=lastTargetUid;
  if (targetUid < 0 && targetPkg != null) {
    try {
      targetUid=pm.getPackageUid(targetPkg,UserHandle.getUserId(callingUid));
      if (targetUid < 0) {
        if (DEBUG_URI_PERMISSION)         Slog.v(TAG,"Can't grant URI permission no uid for: " + targetPkg);
        return -1;
      }
    }
 catch (    RemoteException ex) {
      return -1;
    }
  }
  if (targetUid >= 0) {
    if (checkHoldingPermissionsLocked(pm,pi,grantUri,targetUid,modeFlags)) {
      if (DEBUG_URI_PERMISSION)       Slog.v(TAG,"Target " + targetPkg + " already has full permission to "+ grantUri);
      return -1;
    }
  }
 else {
    boolean allowed=pi.exported;
    if ((modeFlags & Intent.FLAG_GRANT_READ_URI_PERMISSION) != 0) {
      if (pi.readPermission != null) {
        allowed=false;
      }
    }
    if ((modeFlags & Intent.FLAG_GRANT_WRITE_URI_PERMISSION) != 0) {
      if (pi.writePermission != null) {
        allowed=false;
      }
    }
    if (allowed) {
      return -1;
    }
  }
  if (!pi.grantUriPermissions) {
    throw new SecurityException("Provider " + pi.packageName + "/"+ pi.name+ " does not allow granting of Uri permissions (uri "+ grantUri+ ")");
  }
  if (pi.uriPermissionPatterns != null) {
    final int N=pi.uriPermissionPatterns.length;
    boolean allowed=false;
    for (int i=0; i < N; i++) {
      if (pi.uriPermissionPatterns[i] != null && pi.uriPermissionPatterns[i].match(grantUri.uri.getPath())) {
        allowed=true;
        break;
      }
    }
    if (!allowed) {
      throw new SecurityException("Provider " + pi.packageName + "/"+ pi.name+ " does not allow granting of permission to path of Uri "+ grantUri);
    }
  }
  if (UserHandle.getAppId(callingUid) != Process.SYSTEM_UID) {
    if (!checkHoldingPermissionsLocked(pm,pi,grantUri,callingUid,modeFlags)) {
      if (!checkUriPermissionLocked(grantUri,callingUid,modeFlags)) {
        throw new SecurityException("Uid " + callingUid + " does not have permission to uri "+ grantUri);
      }
    }
  }
  return targetUid;
}
