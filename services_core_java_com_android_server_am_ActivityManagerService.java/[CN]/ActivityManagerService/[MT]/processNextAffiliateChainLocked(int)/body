{
  final TaskRecord startTask=mRecentTasks.get(start);
  final int affiliateId=startTask.mAffiliatedTaskId;
  if (startTask.taskId == affiliateId && startTask.mPrevAffiliate == null && startTask.mNextAffiliate == null) {
    startTask.inRecents=true;
    return start + 1;
  }
  mTmpRecents.clear();
  for (int i=mRecentTasks.size() - 1; i >= start; --i) {
    final TaskRecord task=mRecentTasks.get(i);
    if (task.mAffiliatedTaskId == affiliateId) {
      mRecentTasks.remove(i);
      mTmpRecents.add(task);
    }
  }
  Collections.sort(mTmpRecents,mTaskRecordComparator);
  final TaskRecord first=mTmpRecents.get(0);
  first.inRecents=true;
  if (first.mNextAffiliate != null) {
    Slog.w(TAG,"Link error 1 first.next=" + first.mNextAffiliate);
    first.setNextAffiliate(null);
    notifyTaskPersisterLocked(first,false);
  }
  final int tmpSize=mTmpRecents.size();
  for (int i=0; i < tmpSize - 1; ++i) {
    final TaskRecord next=mTmpRecents.get(i);
    final TaskRecord prev=mTmpRecents.get(i + 1);
    if (next.mPrevAffiliate != prev) {
      Slog.w(TAG,"Link error 2 next=" + next + " prev="+ next.mPrevAffiliate+ " setting prev="+ prev);
      next.setPrevAffiliate(prev);
      notifyTaskPersisterLocked(next,false);
    }
    if (prev.mNextAffiliate != next) {
      Slog.w(TAG,"Link error 3 prev=" + prev + " next="+ prev.mNextAffiliate+ " setting next="+ next);
      prev.setNextAffiliate(next);
      notifyTaskPersisterLocked(prev,false);
    }
    prev.inRecents=true;
  }
  final TaskRecord last=mTmpRecents.get(tmpSize - 1);
  if (last.mPrevAffiliate != null) {
    Slog.w(TAG,"Link error 4 last.prev=" + last.mPrevAffiliate);
    last.setPrevAffiliate(null);
    notifyTaskPersisterLocked(last,false);
  }
  mRecentTasks.addAll(start,mTmpRecents);
  return start + tmpSize;
}
