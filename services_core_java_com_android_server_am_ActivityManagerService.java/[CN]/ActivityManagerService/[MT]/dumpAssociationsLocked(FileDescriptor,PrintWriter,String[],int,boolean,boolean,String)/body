{
  pw.println("ACTIVITY MANAGER ASSOCIATIONS (dumpsys activity associations)");
  int dumpUid=0;
  if (dumpPackage != null) {
    IPackageManager pm=AppGlobals.getPackageManager();
    try {
      dumpUid=pm.getPackageUid(dumpPackage,0);
    }
 catch (    RemoteException e) {
    }
  }
  boolean printedAnything=false;
  final long now=SystemClock.uptimeMillis();
  for (int i1=0, N1=mAssociations.size(); i1 < N1; i1++) {
    ArrayMap<ComponentName,SparseArray<ArrayMap<String,Association>>> targetComponents=mAssociations.valueAt(i1);
    for (int i2=0, N2=targetComponents.size(); i2 < N2; i2++) {
      SparseArray<ArrayMap<String,Association>> sourceUids=targetComponents.valueAt(i2);
      for (int i3=0, N3=sourceUids.size(); i3 < N3; i3++) {
        ArrayMap<String,Association> sourceProcesses=sourceUids.valueAt(i3);
        for (int i4=0, N4=sourceProcesses.size(); i4 < N4; i4++) {
          Association ass=sourceProcesses.valueAt(i4);
          if (dumpPackage != null) {
            if (!ass.mTargetComponent.getPackageName().equals(dumpPackage) && UserHandle.getAppId(ass.mSourceUid) != dumpUid) {
              continue;
            }
          }
          printedAnything=true;
          pw.print("  ");
          pw.print(ass.mTargetProcess);
          pw.print("/");
          UserHandle.formatUid(pw,ass.mTargetUid);
          pw.print(" <- ");
          pw.print(ass.mSourceProcess);
          pw.print("/");
          UserHandle.formatUid(pw,ass.mSourceUid);
          pw.println();
          pw.print("    via ");
          pw.print(ass.mTargetComponent.flattenToShortString());
          pw.println();
          pw.print("    ");
          long dur=ass.mTime;
          if (ass.mNesting > 0) {
            dur+=now - ass.mStartTime;
          }
          TimeUtils.formatDuration(dur,pw);
          pw.print(" (");
          pw.print(ass.mCount);
          pw.println(" times)");
          if (ass.mNesting > 0) {
            pw.print("    ");
            pw.print(" Currently active: ");
            TimeUtils.formatDuration(now - ass.mStartTime,pw);
            pw.println();
          }
        }
      }
    }
  }
  if (!printedAnything) {
    pw.println("  (nothing)");
  }
}
