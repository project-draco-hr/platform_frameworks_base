{
  enforceNotIsolatedCaller("getPersistedUriPermissions");
  Preconditions.checkNotNull(packageName,"packageName");
  final int callingUid=Binder.getCallingUid();
  final IPackageManager pm=AppGlobals.getPackageManager();
  try {
    final int packageUid=pm.getPackageUid(packageName,UserHandle.getUserId(callingUid));
    if (packageUid != callingUid) {
      throw new SecurityException("Package " + packageName + " does not belong to calling UID "+ callingUid);
    }
  }
 catch (  RemoteException e) {
    throw new SecurityException("Failed to verify package name ownership");
  }
  final ArrayList<android.content.UriPermission> result=Lists.newArrayList();
synchronized (this) {
    if (incoming) {
      final ArrayMap<GrantUri,UriPermission> perms=mGrantedUriPermissions.get(callingUid);
      if (perms == null) {
        Slog.w(TAG,"No permission grants found for " + packageName);
      }
 else {
        for (        UriPermission perm : perms.values()) {
          if (packageName.equals(perm.targetPkg) && perm.persistedModeFlags != 0) {
            result.add(perm.buildPersistedPublicApiObject());
          }
        }
      }
    }
 else {
      final int size=mGrantedUriPermissions.size();
      for (int i=0; i < size; i++) {
        final ArrayMap<GrantUri,UriPermission> perms=mGrantedUriPermissions.valueAt(i);
        for (        UriPermission perm : perms.values()) {
          if (packageName.equals(perm.sourcePkg) && perm.persistedModeFlags != 0) {
            result.add(perm.buildPersistedPublicApiObject());
          }
        }
      }
    }
  }
  return new ParceledListSlice<android.content.UriPermission>(result);
}
