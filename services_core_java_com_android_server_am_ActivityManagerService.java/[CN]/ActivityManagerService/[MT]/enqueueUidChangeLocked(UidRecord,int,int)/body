{
  final UidRecord.ChangeItem pendingChange;
  if (uidRec == null || uidRec.pendingChange == null) {
    if (mPendingUidChanges.size() == 0) {
      if (DEBUG_UID_OBSERVERS)       Slog.i(TAG_UID_OBSERVERS,"*** Enqueueing dispatch uid changed!");
      mUiHandler.obtainMessage(DISPATCH_UIDS_CHANGED_UI_MSG).sendToTarget();
    }
    final int NA=mAvailUidChanges.size();
    if (NA > 0) {
      pendingChange=mAvailUidChanges.remove(NA - 1);
      if (DEBUG_UID_OBSERVERS)       Slog.i(TAG_UID_OBSERVERS,"Retrieving available item: " + pendingChange);
    }
 else {
      pendingChange=new UidRecord.ChangeItem();
      if (DEBUG_UID_OBSERVERS)       Slog.i(TAG_UID_OBSERVERS,"Allocating new item: " + pendingChange);
    }
    if (uidRec != null) {
      uidRec.pendingChange=pendingChange;
      if (change == UidRecord.CHANGE_GONE && !uidRec.idle) {
        change=UidRecord.CHANGE_GONE_IDLE;
      }
    }
 else     if (uid < 0) {
      throw new IllegalArgumentException("No UidRecord or uid");
    }
    pendingChange.uidRecord=uidRec;
    pendingChange.uid=uidRec != null ? uidRec.uid : uid;
    mPendingUidChanges.add(pendingChange);
  }
 else {
    pendingChange=uidRec.pendingChange;
    if (change == UidRecord.CHANGE_GONE && pendingChange.change == UidRecord.CHANGE_IDLE) {
      change=UidRecord.CHANGE_GONE_IDLE;
    }
  }
  pendingChange.change=change;
  pendingChange.processState=uidRec != null ? uidRec.setProcState : ActivityManager.PROCESS_STATE_NONEXISTENT;
}
