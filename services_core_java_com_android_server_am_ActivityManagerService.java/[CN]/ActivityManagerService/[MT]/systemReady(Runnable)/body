{
synchronized (this) {
    if (mSystemReady) {
      if (goingCallback != null) {
        goingCallback.run();
      }
      return;
    }
    mLocalDeviceIdleController=LocalServices.getService(DeviceIdleController.LocalService.class);
    mUserController.onSystemReady();
    mRecentTasks.onSystemReadyLocked();
    if (!mDidUpdate) {
      if (mWaitingUpdate) {
        return;
      }
      final ArrayList<ComponentName> doneReceivers=new ArrayList<ComponentName>();
      mWaitingUpdate=deliverPreBootCompleted(new Runnable(){
        public void run(){
synchronized (ActivityManagerService.this) {
            mDidUpdate=true;
          }
          showBootMessage(mContext.getText(R.string.android_upgrading_complete),false);
          writeLastDonePreBootReceivers(doneReceivers);
          systemReady(goingCallback);
        }
      }
,doneReceivers);
      if (mWaitingUpdate) {
        return;
      }
      mDidUpdate=true;
    }
    mAppOpsService.systemReady();
    mSystemReady=true;
  }
  ArrayList<ProcessRecord> procsToKill=null;
synchronized (mPidsSelfLocked) {
    for (int i=mPidsSelfLocked.size() - 1; i >= 0; i--) {
      ProcessRecord proc=mPidsSelfLocked.valueAt(i);
      if (!isAllowedWhileBooting(proc.info)) {
        if (procsToKill == null) {
          procsToKill=new ArrayList<ProcessRecord>();
        }
        procsToKill.add(proc);
      }
    }
  }
synchronized (this) {
    if (procsToKill != null) {
      for (int i=procsToKill.size() - 1; i >= 0; i--) {
        ProcessRecord proc=procsToKill.get(i);
        Slog.i(TAG,"Removing system update proc: " + proc);
        removeProcessLocked(proc,true,false,"system update done");
      }
    }
    mProcessesReady=true;
  }
  Slog.i(TAG,"System now ready");
  EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_AMS_READY,SystemClock.uptimeMillis());
synchronized (this) {
    if (mFactoryTest == FactoryTest.FACTORY_TEST_LOW_LEVEL) {
      ResolveInfo ri=mContext.getPackageManager().resolveActivity(new Intent(Intent.ACTION_FACTORY_TEST),STOCK_PM_FLAGS);
      CharSequence errorMsg=null;
      if (ri != null) {
        ActivityInfo ai=ri.activityInfo;
        ApplicationInfo app=ai.applicationInfo;
        if ((app.flags & ApplicationInfo.FLAG_SYSTEM) != 0) {
          mTopAction=Intent.ACTION_FACTORY_TEST;
          mTopData=null;
          mTopComponent=new ComponentName(app.packageName,ai.name);
        }
 else {
          errorMsg=mContext.getResources().getText(com.android.internal.R.string.factorytest_not_system);
        }
      }
 else {
        errorMsg=mContext.getResources().getText(com.android.internal.R.string.factorytest_no_action);
      }
      if (errorMsg != null) {
        mTopAction=null;
        mTopData=null;
        mTopComponent=null;
        Message msg=Message.obtain();
        msg.what=SHOW_FACTORY_ERROR_UI_MSG;
        msg.getData().putCharSequence("msg",errorMsg);
        mUiHandler.sendMessage(msg);
      }
    }
  }
  retrieveSettings();
  final int currentUserId;
synchronized (this) {
    currentUserId=mUserController.getCurrentUserIdLocked();
    readGrantedUriPermissionsLocked();
  }
  if (goingCallback != null)   goingCallback.run();
  mBatteryStatsService.noteEvent(BatteryStats.HistoryItem.EVENT_USER_RUNNING_START,Integer.toString(currentUserId),currentUserId);
  mBatteryStatsService.noteEvent(BatteryStats.HistoryItem.EVENT_USER_FOREGROUND_START,Integer.toString(currentUserId),currentUserId);
  mSystemServiceManager.startUser(currentUserId);
synchronized (this) {
    startPersistentApps(PackageManager.MATCH_ENCRYPTION_AWARE);
    mBooting=true;
    if (UserManager.isSplitSystemUser()) {
      ComponentName cName=new ComponentName(mContext,SystemUserHomeActivity.class);
      try {
        AppGlobals.getPackageManager().setComponentEnabledSetting(cName,PackageManager.COMPONENT_ENABLED_STATE_ENABLED,0,UserHandle.USER_SYSTEM);
      }
 catch (      RemoteException e) {
        throw e.rethrowAsRuntimeException();
      }
    }
    startHomeActivityLocked(currentUserId,"systemReady");
    try {
      if (AppGlobals.getPackageManager().hasSystemUidErrors()) {
        Slog.e(TAG,"UIDs on the system are inconsistent, you need to wipe your" + " data partition or your device will be unstable.");
        mUiHandler.obtainMessage(SHOW_UID_ERROR_UI_MSG).sendToTarget();
      }
    }
 catch (    RemoteException e) {
    }
    if (!Build.isBuildConsistent()) {
      Slog.e(TAG,"Build fingerprint is not consistent, warning user");
      mUiHandler.obtainMessage(SHOW_FINGERPRINT_ERROR_UI_MSG).sendToTarget();
    }
    long ident=Binder.clearCallingIdentity();
    try {
      Intent intent=new Intent(Intent.ACTION_USER_STARTED);
      intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY | Intent.FLAG_RECEIVER_FOREGROUND);
      intent.putExtra(Intent.EXTRA_USER_HANDLE,currentUserId);
      broadcastIntentLocked(null,null,intent,null,null,0,null,null,null,AppOpsManager.OP_NONE,null,false,false,MY_PID,Process.SYSTEM_UID,currentUserId);
      intent=new Intent(Intent.ACTION_USER_STARTING);
      intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
      intent.putExtra(Intent.EXTRA_USER_HANDLE,currentUserId);
      broadcastIntentLocked(null,null,intent,null,new IIntentReceiver.Stub(){
        @Override public void performReceive(        Intent intent,        int resultCode,        String data,        Bundle extras,        boolean ordered,        boolean sticky,        int sendingUser) throws RemoteException {
        }
      }
,0,null,null,new String[]{INTERACT_ACROSS_USERS},AppOpsManager.OP_NONE,null,true,false,MY_PID,Process.SYSTEM_UID,UserHandle.USER_ALL);
    }
 catch (    Throwable t) {
      Slog.wtf(TAG,"Failed sending first user broadcasts",t);
    }
 finally {
      Binder.restoreCallingIdentity(ident);
    }
    mStackSupervisor.resumeFocusedStackTopActivityLocked();
    mUserController.sendUserSwitchBroadcastsLocked(-1,currentUserId);
  }
}
