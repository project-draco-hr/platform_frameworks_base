{
  if (sort && !isCompact) {
    Collections.sort(items,new Comparator<MemItem>(){
      @Override public int compare(      MemItem lhs,      MemItem rhs){
        if (lhs.pss < rhs.pss) {
          return 1;
        }
 else         if (lhs.pss > rhs.pss) {
          return -1;
        }
        return 0;
      }
    }
);
  }
  for (int i=0; i < items.size(); i++) {
    MemItem mi=items.get(i);
    if (!isCompact) {
      pw.printf("%s%s: %s\n",prefix,stringifyKBSize(mi.pss),mi.label);
    }
 else     if (mi.isProc) {
      pw.print("proc,");
      pw.print(tag);
      pw.print(",");
      pw.print(mi.shortLabel);
      pw.print(",");
      pw.print(mi.id);
      pw.print(",");
      pw.print(mi.pss);
      pw.println(mi.hasActivities ? ",a" : ",e");
    }
 else {
      pw.print(tag);
      pw.print(",");
      pw.print(mi.shortLabel);
      pw.print(",");
      pw.println(mi.pss);
    }
    if (mi.subitems != null) {
      dumpMemItems(pw,prefix + "           ",mi.shortLabel,mi.subitems,true,isCompact);
    }
  }
}
