{
  int i;
  if (userId == UserHandle.USER_ALL && packageName == null) {
    Slog.w(TAG,"Can't force stop all processes of all users, that is insane!");
  }
  if (appId < 0 && packageName != null) {
    try {
      appId=UserHandle.getAppId(AppGlobals.getPackageManager().getPackageUid(packageName,MATCH_DEBUG_TRIAGED_MISSING,0));
    }
 catch (    RemoteException e) {
    }
  }
  if (doit) {
    if (packageName != null) {
      Slog.i(TAG,"Force stopping " + packageName + " appid="+ appId+ " user="+ userId+ ": "+ reason);
    }
 else {
      Slog.i(TAG,"Force stopping u" + userId + ": "+ reason);
    }
    mAppErrors.resetProcessCrashTimeLocked(packageName == null,appId,userId);
  }
  boolean didSomething=killPackageProcessesLocked(packageName,appId,userId,ProcessList.INVALID_ADJ,callerWillRestart,true,doit,evenPersistent,packageName == null ? ("stop user " + userId) : ("stop " + packageName));
  if (mStackSupervisor.finishDisabledPackageActivitiesLocked(packageName,null,doit,evenPersistent,userId)) {
    if (!doit) {
      return true;
    }
    didSomething=true;
  }
  if (mServices.bringDownDisabledPackageServicesLocked(packageName,null,userId,evenPersistent,true,doit)) {
    if (!doit) {
      return true;
    }
    didSomething=true;
  }
  if (packageName == null) {
    mStickyBroadcasts.remove(userId);
  }
  ArrayList<ContentProviderRecord> providers=new ArrayList<>();
  if (mProviderMap.collectPackageProvidersLocked(packageName,null,doit,evenPersistent,userId,providers)) {
    if (!doit) {
      return true;
    }
    didSomething=true;
  }
  for (i=providers.size() - 1; i >= 0; i--) {
    removeDyingProviderLocked(null,providers.get(i),true);
  }
  removeUriPermissionsForPackageLocked(packageName,userId,false);
  if (doit) {
    for (i=mBroadcastQueues.length - 1; i >= 0; i--) {
      didSomething|=mBroadcastQueues[i].cleanupDisabledPackageReceiversLocked(packageName,null,userId,doit);
    }
  }
  if (packageName == null || uninstalling) {
    if (mIntentSenderRecords.size() > 0) {
      Iterator<WeakReference<PendingIntentRecord>> it=mIntentSenderRecords.values().iterator();
      while (it.hasNext()) {
        WeakReference<PendingIntentRecord> wpir=it.next();
        if (wpir == null) {
          it.remove();
          continue;
        }
        PendingIntentRecord pir=wpir.get();
        if (pir == null) {
          it.remove();
          continue;
        }
        if (packageName == null) {
          if (pir.key.userId != userId) {
            continue;
          }
        }
 else {
          if (UserHandle.getAppId(pir.uid) != appId) {
            continue;
          }
          if (userId != UserHandle.USER_ALL && pir.key.userId != userId) {
            continue;
          }
          if (!pir.key.packageName.equals(packageName)) {
            continue;
          }
        }
        if (!doit) {
          return true;
        }
        didSomething=true;
        it.remove();
        pir.canceled=true;
        if (pir.key.activity != null && pir.key.activity.pendingResults != null) {
          pir.key.activity.pendingResults.remove(pir.ref);
        }
      }
    }
  }
  if (doit) {
    if (purgeCache && packageName != null) {
      AttributeCache ac=AttributeCache.instance();
      if (ac != null) {
        ac.removePackage(packageName);
      }
    }
    if (mBooted) {
      mStackSupervisor.resumeFocusedStackTopActivityLocked();
      mStackSupervisor.scheduleIdleLocked();
    }
  }
  return didSomething;
}
