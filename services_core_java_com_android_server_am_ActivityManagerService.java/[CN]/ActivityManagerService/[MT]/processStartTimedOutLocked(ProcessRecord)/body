{
  final int pid=app.pid;
  boolean gone=false;
synchronized (mPidsSelfLocked) {
    ProcessRecord knownApp=mPidsSelfLocked.get(pid);
    if (knownApp != null && knownApp.thread == null) {
      mPidsSelfLocked.remove(pid);
      gone=true;
    }
  }
  if (gone) {
    Slog.w(TAG,"Process " + app + " failed to attach");
    EventLog.writeEvent(EventLogTags.AM_PROCESS_START_TIMEOUT,app.userId,pid,app.uid,app.processName);
    mProcessNames.remove(app.processName,app.uid);
    mIsolatedProcesses.remove(app.uid);
    if (mHeavyWeightProcess == app) {
      mHandler.sendMessage(mHandler.obtainMessage(CANCEL_HEAVY_NOTIFICATION_MSG,mHeavyWeightProcess.userId,0));
      mHeavyWeightProcess=null;
    }
    mBatteryStatsService.noteEvent(BatteryStats.HistoryItem.EVENT_PROC_FINISHED,app.processName,app.info.uid);
    if (app.isolated) {
      mBatteryStatsService.removeIsolatedUid(app.uid,app.info.uid);
    }
    checkAppInLaunchingProvidersLocked(app,true);
    mServices.processStartTimedOutLocked(app);
    killUnneededProcessLocked(app,"start timeout");
    if (mBackupTarget != null && mBackupTarget.app.pid == pid) {
      Slog.w(TAG,"Unattached app died before backup, skipping");
      try {
        IBackupManager bm=IBackupManager.Stub.asInterface(ServiceManager.getService(Context.BACKUP_SERVICE));
        bm.agentDisconnected(app.info.packageName);
      }
 catch (      RemoteException e) {
      }
    }
    if (isPendingBroadcastProcessLocked(pid)) {
      Slog.w(TAG,"Unattached app died before broadcast acknowledged, skipping");
      skipPendingBroadcastLocked(pid);
    }
  }
 else {
    Slog.w(TAG,"Spurious process start timeout - pid not known for " + app);
  }
}
