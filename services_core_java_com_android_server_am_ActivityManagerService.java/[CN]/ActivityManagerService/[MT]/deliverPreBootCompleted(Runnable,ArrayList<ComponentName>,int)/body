{
  boolean waitingUpdate=false;
  Intent intent=new Intent(Intent.ACTION_PRE_BOOT_COMPLETED);
  List<ResolveInfo> ris=null;
  try {
    ris=AppGlobals.getPackageManager().queryIntentReceivers(intent,null,0,userId);
  }
 catch (  RemoteException e) {
  }
  if (ris != null) {
    for (int i=ris.size() - 1; i >= 0; i--) {
      if ((ris.get(i).activityInfo.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) == 0) {
        ris.remove(i);
      }
    }
    intent.addFlags(Intent.FLAG_RECEIVER_BOOT_UPGRADE);
    if (userId == UserHandle.USER_OWNER) {
      ArrayList<ComponentName> lastDoneReceivers=readLastDonePreBootReceivers();
      for (int i=0; i < ris.size(); i++) {
        ActivityInfo ai=ris.get(i).activityInfo;
        ComponentName comp=new ComponentName(ai.packageName,ai.name);
        if (lastDoneReceivers.contains(comp)) {
          ris.remove(i);
          i--;
          doneReceivers.add(comp);
        }
      }
    }
    final int[] users=userId == UserHandle.USER_OWNER ? getUsersLocked() : new int[]{userId};
    for (int i=0; i < ris.size(); i++) {
      ActivityInfo ai=ris.get(i).activityInfo;
      ComponentName comp=new ComponentName(ai.packageName,ai.name);
      doneReceivers.add(comp);
      intent.setComponent(comp);
      for (int j=0; j < users.length; j++) {
        IIntentReceiver finisher=null;
        if (i == ris.size() - 1 && j == users.length - 1 && onFinishCallback != null) {
          finisher=new IIntentReceiver.Stub(){
            public void performReceive(            Intent intent,            int resultCode,            String data,            Bundle extras,            boolean ordered,            boolean sticky,            int sendingUser){
              mHandler.post(onFinishCallback);
            }
          }
;
        }
        Slog.i(TAG,"Sending system update to " + intent.getComponent() + " for user "+ users[j]);
        broadcastIntentLocked(null,null,intent,null,finisher,0,null,null,null,AppOpsManager.OP_NONE,true,false,MY_PID,Process.SYSTEM_UID,users[j]);
        if (finisher != null) {
          waitingUpdate=true;
        }
      }
    }
  }
  return waitingUpdate;
}
