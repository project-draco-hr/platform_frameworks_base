{
  long startTime=SystemClock.elapsedRealtime();
  ProcessRecord app;
  if (!isolated) {
    app=getProcessRecordLocked(processName,info.uid,keepIfLarge);
    checkTime(startTime,"startProcess: after getProcessRecord");
    if ((intentFlags & Intent.FLAG_FROM_BACKGROUND) != 0) {
      if (mBadProcesses.get(info.processName,info.uid) != null) {
        if (DEBUG_PROCESSES)         Slog.v(TAG,"Bad process: " + info.uid + "/"+ info.processName);
        return null;
      }
    }
 else {
      if (DEBUG_PROCESSES)       Slog.v(TAG,"Clearing bad process: " + info.uid + "/"+ info.processName);
      mProcessCrashTimes.remove(info.processName,info.uid);
      if (mBadProcesses.get(info.processName,info.uid) != null) {
        EventLog.writeEvent(EventLogTags.AM_PROC_GOOD,UserHandle.getUserId(info.uid),info.uid,info.processName);
        mBadProcesses.remove(info.processName,info.uid);
        if (app != null) {
          app.bad=false;
        }
      }
    }
  }
 else {
    app=null;
  }
  if (DEBUG_PROCESSES)   Slog.v(TAG,"startProcess: name=" + processName + " app="+ app+ " knownToBeDead="+ knownToBeDead+ " thread="+ (app != null ? app.thread : null)+ " pid="+ (app != null ? app.pid : -1));
  if (app != null && app.pid > 0) {
    if (!knownToBeDead || app.thread == null) {
      if (DEBUG_PROCESSES)       Slog.v(TAG,"App already running: " + app);
      app.addPackage(info.packageName,info.versionCode,mProcessStats);
      checkTime(startTime,"startProcess: done, added package to proc");
      return app;
    }
    if (DEBUG_PROCESSES || DEBUG_CLEANUP)     Slog.v(TAG,"App died: " + app);
    checkTime(startTime,"startProcess: bad proc running, killing");
    Process.killProcessGroup(app.uid,app.pid);
    handleAppDiedLocked(app,true,true);
    checkTime(startTime,"startProcess: done killing old proc");
  }
  String hostingNameStr=hostingName != null ? hostingName.flattenToShortString() : null;
  if (app == null) {
    checkTime(startTime,"startProcess: creating new process record");
    app=newProcessRecordLocked(info,processName,isolated,isolatedUid);
    if (app == null) {
      Slog.w(TAG,"Failed making new process record for " + processName + "/"+ info.uid+ " isolated="+ isolated);
      return null;
    }
    app.crashHandler=crashHandler;
    mProcessNames.put(processName,app.uid,app);
    if (isolated) {
      mIsolatedProcesses.put(app.uid,app);
    }
    checkTime(startTime,"startProcess: done creating new process record");
  }
 else {
    app.addPackage(info.packageName,info.versionCode,mProcessStats);
    checkTime(startTime,"startProcess: added package to existing proc");
  }
  if (!mProcessesReady && !isAllowedWhileBooting(info) && !allowWhileBooting) {
    if (!mProcessesOnHold.contains(app)) {
      mProcessesOnHold.add(app);
    }
    if (DEBUG_PROCESSES)     Slog.v(TAG,"System not ready, putting on hold: " + app);
    checkTime(startTime,"startProcess: returning with proc on hold");
    return app;
  }
  checkTime(startTime,"startProcess: stepping in to startProcess");
  startProcessLocked(app,hostingType,hostingNameStr,abiOverride,entryPoint,entryPointArgs);
  checkTime(startTime,"startProcess: done starting proc!");
  return (app.pid != 0) ? app : null;
}
