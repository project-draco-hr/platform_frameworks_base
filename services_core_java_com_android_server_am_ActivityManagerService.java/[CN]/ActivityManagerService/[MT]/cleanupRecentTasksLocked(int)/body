{
  if (mRecentTasks == null) {
    return;
  }
  final HashMap<ComponentName,ActivityInfo> availActCache=new HashMap<>();
  final HashMap<String,ApplicationInfo> availAppCache=new HashMap<>();
  final IPackageManager pm=AppGlobals.getPackageManager();
  final ActivityInfo dummyAct=new ActivityInfo();
  final ApplicationInfo dummyApp=new ApplicationInfo();
  int N=mRecentTasks.size();
  int[] users=userId == UserHandle.USER_ALL ? getUsersLocked() : new int[]{userId};
  for (  int user : users) {
    for (int i=0; i < N; i++) {
      TaskRecord task=mRecentTasks.get(i);
      if (task.userId != user) {
        continue;
      }
      if (task.autoRemoveRecents && task.getTopActivity() == null) {
        mRecentTasks.remove(i);
        task.removedFromRecents();
        i--;
        N--;
        Slog.w(TAG,"Removing auto-remove without activity: " + task);
        continue;
      }
      if (task.realActivity != null) {
        ActivityInfo ai=availActCache.get(task.realActivity);
        if (ai == null) {
          try {
            ai=pm.getActivityInfo(task.realActivity,PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_DISABLED_COMPONENTS,user);
          }
 catch (          RemoteException e) {
            continue;
          }
          if (ai == null) {
            ai=dummyAct;
          }
          availActCache.put(task.realActivity,ai);
        }
        if (ai == dummyAct) {
          ApplicationInfo app=availAppCache.get(task.realActivity.getPackageName());
          if (app == null) {
            try {
              app=pm.getApplicationInfo(task.realActivity.getPackageName(),PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_DISABLED_COMPONENTS,user);
            }
 catch (            RemoteException e) {
              continue;
            }
            if (app == null) {
              app=dummyApp;
            }
            availAppCache.put(task.realActivity.getPackageName(),app);
          }
          if (app == dummyApp || (app.flags & ApplicationInfo.FLAG_INSTALLED) == 0) {
            mRecentTasks.remove(i);
            task.removedFromRecents();
            i--;
            N--;
            Slog.w(TAG,"Removing no longer valid recent: " + task);
            continue;
          }
 else {
            if (task.isAvailable) {
              if (DEBUG_RECENTS)               Slog.d(TAG,"Making recent unavailable: " + task);
            }
            task.isAvailable=false;
          }
        }
 else {
          if (!ai.enabled || !ai.applicationInfo.enabled || (ai.applicationInfo.flags & ApplicationInfo.FLAG_INSTALLED) == 0) {
            if (task.isAvailable) {
              if (DEBUG_RECENTS)               Slog.d(TAG,"Making recent unavailable: " + task + " (enabled="+ ai.enabled+ "/"+ ai.applicationInfo.enabled+ " flags="+ Integer.toHexString(ai.applicationInfo.flags)+ ")");
            }
            task.isAvailable=false;
          }
 else {
            if (!task.isAvailable) {
              if (DEBUG_RECENTS)               Slog.d(TAG,"Making recent available: " + task);
            }
            task.isAvailable=true;
          }
        }
      }
    }
  }
  for (int i=0; i < N; i=processNextAffiliateChainLocked(i)) {
  }
  mTmpRecents.clear();
}
