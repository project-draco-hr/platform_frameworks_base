{
  final int callingUid=Binder.getCallingUid();
  userId=handleIncomingUser(Binder.getCallingPid(),callingUid,userId,false,true,"getRecentTasks",null);
synchronized (this) {
    final boolean allowed=checkCallingPermission(android.Manifest.permission.GET_TASKS) == PackageManager.PERMISSION_GRANTED;
    if (!allowed) {
      Slog.w(TAG,"getRecentTasks: caller " + callingUid + " does not hold GET_TASKS; limiting output");
    }
    final boolean detailed=checkCallingPermission(android.Manifest.permission.GET_DETAILED_TASKS) == PackageManager.PERMISSION_GRANTED;
    IPackageManager pm=AppGlobals.getPackageManager();
    final int N=mRecentTasks.size();
    ArrayList<ActivityManager.RecentTaskInfo> res=new ArrayList<ActivityManager.RecentTaskInfo>(maxNum < N ? maxNum : N);
    final Set<Integer> includedUsers;
    if ((flags & ActivityManager.RECENT_INCLUDE_PROFILES) != 0) {
      includedUsers=getProfileIdsLocked(userId);
    }
 else {
      includedUsers=new HashSet<Integer>();
    }
    includedUsers.add(Integer.valueOf(userId));
    for (int i=0; i < N && maxNum > 0; i++) {
      TaskRecord tr=mRecentTasks.get(i);
      if (!includedUsers.contains(Integer.valueOf(tr.userId)))       continue;
      if (i == 0 || ((flags & ActivityManager.RECENT_WITH_EXCLUDED) != 0) || (tr.intent == null) || ((tr.intent.getFlags() & Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS) == 0)) {
        if (!allowed) {
          if (!tr.isHomeTask() && tr.creatorUid != callingUid) {
            continue;
          }
        }
        ActivityManager.RecentTaskInfo rti=new ActivityManager.RecentTaskInfo();
        rti.id=tr.numActivities > 0 ? tr.taskId : -1;
        rti.persistentId=tr.taskId;
        rti.baseIntent=new Intent(tr.intent != null ? tr.intent : tr.affinityIntent);
        if (!detailed) {
          rti.baseIntent.replaceExtras((Bundle)null);
        }
        rti.origActivity=tr.origActivity;
        rti.description=tr.lastDescription;
        rti.stackId=tr.stack.mStackId;
        rti.userId=tr.userId;
        final ArrayList<ActivityRecord> activities=tr.mActivities;
        int activityNdx;
        final int numActivities=activities.size();
        for (activityNdx=Math.min(numActivities,1); activityNdx < numActivities; ++activityNdx) {
          final ActivityRecord r=activities.get(activityNdx);
          if (r.intent != null && (r.intent.getFlags() & Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET) != 0) {
            break;
          }
        }
        for (--activityNdx; activityNdx >= 0; --activityNdx) {
          final ActivityRecord r=activities.get(activityNdx);
          if (r.activityLabel != null || r.activityIcon != null) {
            rti.activityLabel=r.activityLabel;
            rti.activityIcon=r.activityIcon;
            break;
          }
        }
        if ((flags & ActivityManager.RECENT_IGNORE_UNAVAILABLE) != 0) {
          try {
            if (rti.origActivity != null) {
              if (pm.getActivityInfo(rti.origActivity,0,userId) == null) {
                continue;
              }
            }
 else             if (rti.baseIntent != null) {
              if (pm.queryIntentActivities(rti.baseIntent,null,0,userId) == null) {
                continue;
              }
            }
          }
 catch (          RemoteException e) {
          }
        }
        res.add(rti);
        maxNum--;
      }
    }
    return res;
  }
}
