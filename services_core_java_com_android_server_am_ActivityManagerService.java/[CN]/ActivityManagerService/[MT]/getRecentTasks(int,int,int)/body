{
  final int callingUid=Binder.getCallingUid();
  userId=mUserController.handleIncomingUser(Binder.getCallingPid(),callingUid,userId,false,ALLOW_FULL_ONLY,"getRecentTasks",null);
  final boolean includeProfiles=(flags & ActivityManager.RECENT_INCLUDE_PROFILES) != 0;
  final boolean withExcluded=(flags & ActivityManager.RECENT_WITH_EXCLUDED) != 0;
synchronized (this) {
    final boolean allowed=isGetTasksAllowed("getRecentTasks",Binder.getCallingPid(),callingUid);
    final boolean detailed=checkCallingPermission(android.Manifest.permission.GET_DETAILED_TASKS) == PackageManager.PERMISSION_GRANTED;
    final int recentsCount=mRecentTasks.size();
    ArrayList<ActivityManager.RecentTaskInfo> res=new ArrayList<>(maxNum < recentsCount ? maxNum : recentsCount);
    final Set<Integer> includedUsers;
    if (includeProfiles) {
      includedUsers=mUserController.getProfileIds(userId);
    }
 else {
      includedUsers=new HashSet<>();
    }
    includedUsers.add(Integer.valueOf(userId));
    for (int i=0; i < recentsCount && maxNum > 0; i++) {
      TaskRecord tr=mRecentTasks.get(i);
      if (!includedUsers.contains(Integer.valueOf(tr.userId))) {
        if (DEBUG_RECENTS)         Slog.d(TAG_RECENTS,"Skipping, not user: " + tr);
        continue;
      }
      if (i == 0 || withExcluded || (tr.intent == null) || ((tr.intent.getFlags() & Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS) == 0)) {
        if (!allowed) {
          if (!tr.isHomeTask() && tr.effectiveUid != callingUid) {
            if (DEBUG_RECENTS)             Slog.d(TAG_RECENTS,"Skipping, not allowed: " + tr);
            continue;
          }
        }
        if ((flags & ActivityManager.RECENT_IGNORE_HOME_STACK_TASKS) != 0) {
          if (tr.stack != null && tr.stack.isHomeStack()) {
            if (DEBUG_RECENTS)             Slog.d(TAG_RECENTS,"Skipping, home stack task: " + tr);
            continue;
          }
        }
        if ((flags & ActivityManager.RECENT_INGORE_DOCKED_STACK_TASKS) != 0) {
          if (tr.stack != null && tr.stack.isDockedStack()) {
            if (DEBUG_RECENTS)             Slog.d(TAG_RECENTS,"Skipping, docked stack task: " + tr);
            continue;
          }
        }
        if ((flags & ActivityManager.RECENT_INGORE_PINNED_STACK_TASKS) != 0) {
          if (tr.stack != null && tr.stack.isPinnedStack()) {
            if (DEBUG_RECENTS)             Slog.d(TAG_RECENTS,"Skipping, pinned stack task: " + tr);
            continue;
          }
        }
        if (tr.autoRemoveRecents && tr.getTopActivity() == null) {
          if (DEBUG_RECENTS)           Slog.d(TAG_RECENTS,"Skipping, auto-remove without activity: " + tr);
          continue;
        }
        if ((flags & ActivityManager.RECENT_IGNORE_UNAVAILABLE) != 0 && !tr.isAvailable) {
          if (DEBUG_RECENTS)           Slog.d(TAG_RECENTS,"Skipping, unavail real act: " + tr);
          continue;
        }
        ActivityManager.RecentTaskInfo rti=createRecentTaskInfoFromTaskRecord(tr);
        if (!detailed) {
          rti.baseIntent.replaceExtras((Bundle)null);
        }
        res.add(rti);
        maxNum--;
      }
    }
    return res;
  }
}
