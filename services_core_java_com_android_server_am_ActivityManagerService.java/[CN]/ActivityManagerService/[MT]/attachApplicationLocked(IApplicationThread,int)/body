{
  ProcessRecord app;
  if (pid != MY_PID && pid >= 0) {
synchronized (mPidsSelfLocked) {
      app=mPidsSelfLocked.get(pid);
    }
  }
 else {
    app=null;
  }
  if (app == null) {
    Slog.w(TAG,"No pending application record for pid " + pid + " (IApplicationThread "+ thread+ "); dropping process");
    EventLog.writeEvent(EventLogTags.AM_DROP_PROCESS,pid);
    if (pid > 0 && pid != MY_PID) {
      Process.killProcessQuiet(pid);
    }
 else {
      try {
        thread.scheduleExit();
      }
 catch (      Exception e) {
      }
    }
    return false;
  }
  if (app.thread != null) {
    handleAppDiedLocked(app,true,true);
  }
  if (DEBUG_ALL)   Slog.v(TAG,"Binding process pid " + pid + " to record "+ app);
  final String processName=app.processName;
  try {
    AppDeathRecipient adr=new AppDeathRecipient(app,pid,thread);
    thread.asBinder().linkToDeath(adr,0);
    app.deathRecipient=adr;
  }
 catch (  RemoteException e) {
    app.resetPackageList(mProcessStats);
    startProcessLocked(app,"link fail",processName);
    return false;
  }
  EventLog.writeEvent(EventLogTags.AM_PROC_BOUND,app.userId,app.pid,app.processName);
  app.makeActive(thread,mProcessStats);
  app.curAdj=app.setAdj=app.verifiedAdj=ProcessList.INVALID_ADJ;
  app.curSchedGroup=app.setSchedGroup=ProcessList.SCHED_GROUP_DEFAULT;
  app.forcingToForeground=null;
  updateProcessForegroundLocked(app,false,false);
  app.hasShownUi=false;
  app.debugging=false;
  app.cached=false;
  app.killedByAm=false;
  app.unlocked=StorageManager.isUserKeyUnlocked(app.userId);
  mHandler.removeMessages(PROC_START_TIMEOUT_MSG,app);
  boolean normalMode=mProcessesReady || isAllowedWhileBooting(app.info);
  List<ProviderInfo> providers=normalMode ? generateApplicationProvidersLocked(app) : null;
  if (providers != null && checkAppInLaunchingProvidersLocked(app)) {
    Message msg=mHandler.obtainMessage(CONTENT_PROVIDER_PUBLISH_TIMEOUT_MSG);
    msg.obj=app;
    mHandler.sendMessageDelayed(msg,CONTENT_PROVIDER_PUBLISH_TIMEOUT);
  }
  if (!normalMode) {
    Slog.i(TAG,"Launching preboot mode app: " + app);
  }
  if (DEBUG_ALL)   Slog.v(TAG,"New app record " + app + " thread="+ thread.asBinder()+ " pid="+ pid);
  try {
    int testMode=IApplicationThread.DEBUG_OFF;
    if (mDebugApp != null && mDebugApp.equals(processName)) {
      testMode=mWaitForDebugger ? IApplicationThread.DEBUG_WAIT : IApplicationThread.DEBUG_ON;
      app.debugging=true;
      if (mDebugTransient) {
        mDebugApp=mOrigDebugApp;
        mWaitForDebugger=mOrigWaitForDebugger;
      }
    }
    String profileFile=app.instrumentationProfileFile;
    ParcelFileDescriptor profileFd=null;
    int samplingInterval=0;
    boolean profileAutoStop=false;
    if (mProfileApp != null && mProfileApp.equals(processName)) {
      mProfileProc=app;
      profileFile=mProfileFile;
      profileFd=mProfileFd;
      samplingInterval=mSamplingInterval;
      profileAutoStop=mAutoStopProfiler;
    }
    boolean enableTrackAllocation=false;
    if (mTrackAllocationApp != null && mTrackAllocationApp.equals(processName)) {
      enableTrackAllocation=true;
      mTrackAllocationApp=null;
    }
    boolean isRestrictedBackupMode=false;
    if (mBackupTarget != null && mBackupAppName.equals(processName)) {
      isRestrictedBackupMode=mBackupTarget.appInfo.uid >= Process.FIRST_APPLICATION_UID && ((mBackupTarget.backupMode == BackupRecord.RESTORE) || (mBackupTarget.backupMode == BackupRecord.RESTORE_FULL) || (mBackupTarget.backupMode == BackupRecord.BACKUP_FULL));
    }
    if (app.instrumentationClass != null) {
      notifyPackageUse(app.instrumentationClass.getPackageName(),PackageManager.NOTIFY_PACKAGE_USE_INSTRUMENTATION);
    }
    if (DEBUG_CONFIGURATION)     Slog.v(TAG_CONFIGURATION,"Binding proc " + processName + " with config "+ mConfiguration);
    ApplicationInfo appInfo=app.instrumentationInfo != null ? app.instrumentationInfo : app.info;
    app.compat=compatibilityInfoForPackageLocked(appInfo);
    if (profileFd != null) {
      profileFd=profileFd.dup();
    }
    ProfilerInfo profilerInfo=profileFile == null ? null : new ProfilerInfo(profileFile,profileFd,samplingInterval,profileAutoStop);
    thread.bindApplication(processName,appInfo,providers,app.instrumentationClass,profilerInfo,app.instrumentationArguments,app.instrumentationWatcher,app.instrumentationUiAutomationConnection,testMode,mBinderTransactionTrackingEnabled,enableTrackAllocation,isRestrictedBackupMode || !normalMode,app.persistent,new Configuration(mConfiguration),app.compat,getCommonServicesLocked(app.isolated),mCoreSettingsObserver.getCoreSettingsLocked());
    updateLruProcessLocked(app,false,null);
    app.lastRequestedGc=app.lastLowMemory=SystemClock.uptimeMillis();
  }
 catch (  Exception e) {
    Slog.wtf(TAG,"Exception thrown during bind of " + app,e);
    app.resetPackageList(mProcessStats);
    app.unlinkDeathRecipient();
    startProcessLocked(app,"bind fail",processName);
    return false;
  }
  mPersistentStartingProcesses.remove(app);
  if (DEBUG_PROCESSES && mProcessesOnHold.contains(app))   Slog.v(TAG_PROCESSES,"Attach application locked removing on hold: " + app);
  mProcessesOnHold.remove(app);
  boolean badApp=false;
  boolean didSomething=false;
  if (normalMode) {
    try {
      if (mStackSupervisor.attachApplicationLocked(app)) {
        didSomething=true;
      }
    }
 catch (    Exception e) {
      Slog.wtf(TAG,"Exception thrown launching activities in " + app,e);
      badApp=true;
    }
  }
  if (!badApp) {
    try {
      didSomething|=mServices.attachApplicationLocked(app,processName);
    }
 catch (    Exception e) {
      Slog.wtf(TAG,"Exception thrown starting services in " + app,e);
      badApp=true;
    }
  }
  if (!badApp && isPendingBroadcastProcessLocked(pid)) {
    try {
      didSomething|=sendPendingBroadcastsLocked(app);
    }
 catch (    Exception e) {
      Slog.wtf(TAG,"Exception thrown dispatching broadcasts in " + app,e);
      badApp=true;
    }
  }
  if (!badApp && mBackupTarget != null && mBackupTarget.appInfo.uid == app.uid) {
    if (DEBUG_BACKUP)     Slog.v(TAG_BACKUP,"New app is backup target, launching agent for " + app);
    notifyPackageUse(mBackupTarget.appInfo.packageName,PackageManager.NOTIFY_PACKAGE_USE_BACKUP);
    try {
      thread.scheduleCreateBackupAgent(mBackupTarget.appInfo,compatibilityInfoForPackageLocked(mBackupTarget.appInfo),mBackupTarget.backupMode);
    }
 catch (    Exception e) {
      Slog.wtf(TAG,"Exception thrown creating backup agent in " + app,e);
      badApp=true;
    }
  }
  if (badApp) {
    app.kill("error during init",true);
    handleAppDiedLocked(app,false,true);
    return false;
  }
  if (!didSomething) {
    updateOomAdjLocked();
  }
  return true;
}
