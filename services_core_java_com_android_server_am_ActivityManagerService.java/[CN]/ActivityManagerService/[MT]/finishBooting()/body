{
  mPackageMonitor.register(mContext,Looper.getMainLooper(),false);
synchronized (this) {
    final int NP=mProcessesOnHold.size();
    if (NP > 0) {
      ArrayList<ProcessRecord> procs=new ArrayList<ProcessRecord>(mProcessesOnHold);
      for (int ip=0; ip < NP; ip++) {
        if (DEBUG_PROCESSES)         Slog.v(TAG,"Starting process on hold: " + procs.get(ip));
        startProcessLocked(procs.get(ip),"on-hold",null,null,null,null);
      }
    }
    if (mFactoryTest != FactoryTest.FACTORY_TEST_LOW_LEVEL) {
      Message nmsg=mHandler.obtainMessage(CHECK_EXCESSIVE_WAKE_LOCKS_MSG);
      mHandler.sendMessageDelayed(nmsg,POWER_CHECK_DELAY);
      SystemProperties.set("sys.boot_completed","1");
      SystemProperties.set("dev.bootcomplete","1");
      for (int i=0; i < mStartedUsers.size(); i++) {
        UserStartedState uss=mStartedUsers.valueAt(i);
        if (uss.mState == UserStartedState.STATE_BOOTING) {
          uss.mState=UserStartedState.STATE_RUNNING;
          final int userId=mStartedUsers.keyAt(i);
          Intent intent=new Intent(Intent.ACTION_BOOT_COMPLETED,null);
          intent.putExtra(Intent.EXTRA_USER_HANDLE,userId);
          intent.addFlags(Intent.FLAG_RECEIVER_NO_ABORT);
          broadcastIntentLocked(null,null,intent,null,new IIntentReceiver.Stub(){
            @Override public void performReceive(            Intent intent,            int resultCode,            String data,            Bundle extras,            boolean ordered,            boolean sticky,            int sendingUser){
synchronized (ActivityManagerService.this) {
                requestPssAllProcsLocked(SystemClock.uptimeMillis(),true,false);
              }
            }
          }
,0,null,null,android.Manifest.permission.RECEIVE_BOOT_COMPLETED,AppOpsManager.OP_NONE,true,false,MY_PID,Process.SYSTEM_UID,userId);
        }
      }
      scheduleStartProfilesLocked();
    }
  }
}
