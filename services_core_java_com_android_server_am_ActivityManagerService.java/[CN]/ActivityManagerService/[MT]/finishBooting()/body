{
synchronized (this) {
    if (!mBootAnimationComplete) {
      mCallFinishBooting=true;
      return;
    }
    mCallFinishBooting=false;
  }
  ArraySet<String> completedIsas=new ArraySet<String>();
  for (  String abi : Build.SUPPORTED_ABIS) {
    Process.zygoteProcess.establishZygoteConnectionForAbi(abi);
    final String instructionSet=VMRuntime.getInstructionSet(abi);
    if (!completedIsas.contains(instructionSet)) {
      try {
        mInstaller.markBootComplete(VMRuntime.getInstructionSet(abi));
      }
 catch (      InstallerException e) {
        Slog.w(TAG,"Unable to mark boot complete for abi: " + abi + " ("+ e.getMessage()+ ")");
      }
      completedIsas.add(instructionSet);
    }
  }
  IntentFilter pkgFilter=new IntentFilter();
  pkgFilter.addAction(Intent.ACTION_QUERY_PACKAGE_RESTART);
  pkgFilter.addDataScheme("package");
  mContext.registerReceiver(new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      String[] pkgs=intent.getStringArrayExtra(Intent.EXTRA_PACKAGES);
      if (pkgs != null) {
        for (        String pkg : pkgs) {
synchronized (ActivityManagerService.this) {
            if (forceStopPackageLocked(pkg,-1,false,false,false,false,false,0,"query restart")) {
              setResultCode(Activity.RESULT_OK);
              return;
            }
          }
        }
      }
    }
  }
,pkgFilter);
  IntentFilter dumpheapFilter=new IntentFilter();
  dumpheapFilter.addAction(DumpHeapActivity.ACTION_DELETE_DUMPHEAP);
  mContext.registerReceiver(new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      if (intent.getBooleanExtra(DumpHeapActivity.EXTRA_DELAY_DELETE,false)) {
        mHandler.sendEmptyMessageDelayed(POST_DUMP_HEAP_NOTIFICATION_MSG,5 * 60 * 1000);
      }
 else {
        mHandler.sendEmptyMessage(POST_DUMP_HEAP_NOTIFICATION_MSG);
      }
    }
  }
,dumpheapFilter);
  mSystemServiceManager.startBootPhase(SystemService.PHASE_BOOT_COMPLETED);
synchronized (this) {
    final int NP=mProcessesOnHold.size();
    if (NP > 0) {
      ArrayList<ProcessRecord> procs=new ArrayList<ProcessRecord>(mProcessesOnHold);
      for (int ip=0; ip < NP; ip++) {
        if (DEBUG_PROCESSES)         Slog.v(TAG_PROCESSES,"Starting process on hold: " + procs.get(ip));
        startProcessLocked(procs.get(ip),"on-hold",null);
      }
    }
    if (mFactoryTest != FactoryTest.FACTORY_TEST_LOW_LEVEL) {
      Message nmsg=mHandler.obtainMessage(CHECK_EXCESSIVE_WAKE_LOCKS_MSG);
      mHandler.sendMessageDelayed(nmsg,POWER_CHECK_DELAY);
      SystemProperties.set("sys.boot_completed","1");
      if (!"trigger_restart_min_framework".equals(SystemProperties.get("vold.decrypt")) || "".equals(SystemProperties.get("vold.encrypt_progress"))) {
        SystemProperties.set("dev.bootcomplete","1");
      }
      mUserController.sendBootCompletedLocked(new IIntentReceiver.Stub(){
        @Override public void performReceive(        Intent intent,        int resultCode,        String data,        Bundle extras,        boolean ordered,        boolean sticky,        int sendingUser){
synchronized (ActivityManagerService.this) {
            requestPssAllProcsLocked(SystemClock.uptimeMillis(),true,false);
          }
        }
      }
);
      scheduleStartProfilesLocked();
    }
  }
}
