{
  final ActivityRecord sourceRecord;
  final int targetUid;
  final String targetPackage;
synchronized (this) {
    if (resultTo == null) {
      throw new SecurityException("Must be called from an activity");
    }
    sourceRecord=mStackSupervisor.isInAnyStackLocked(resultTo);
    if (sourceRecord == null) {
      throw new SecurityException("Called with bad activity token: " + resultTo);
    }
    if (!sourceRecord.info.packageName.equals("android")) {
      throw new SecurityException("Must be called from an activity that is declared in the android package");
    }
    if (sourceRecord.app == null) {
      throw new SecurityException("Called without a process attached to activity");
    }
    if (UserHandle.getAppId(sourceRecord.app.uid) != Process.SYSTEM_UID) {
      if (sourceRecord.app.uid != sourceRecord.launchedFromUid) {
        throw new SecurityException("Calling activity in uid " + sourceRecord.app.uid + " must be system uid or original calling uid "+ sourceRecord.launchedFromUid);
      }
    }
    if (ignoreTargetSecurity) {
      if (intent.getComponent() == null) {
        throw new SecurityException("Component must be specified with ignoreTargetSecurity");
      }
      if (intent.getSelector() != null) {
        throw new SecurityException("Selector not allowed with ignoreTargetSecurity");
      }
    }
    targetUid=sourceRecord.launchedFromUid;
    targetPackage=sourceRecord.launchedFromPackage;
  }
  if (userId == UserHandle.USER_NULL) {
    userId=UserHandle.getUserId(sourceRecord.app.uid);
  }
  try {
    int ret=mActivityStarter.startActivityMayWait(null,targetUid,targetPackage,intent,resolvedType,null,null,resultTo,resultWho,requestCode,startFlags,null,null,null,bOptions,ignoreTargetSecurity,userId,null,null);
    return ret;
  }
 catch (  SecurityException e) {
    throw e;
  }
}
