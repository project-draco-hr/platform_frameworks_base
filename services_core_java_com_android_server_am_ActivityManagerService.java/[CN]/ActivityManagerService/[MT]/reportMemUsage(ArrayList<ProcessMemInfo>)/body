{
  final SparseArray<ProcessMemInfo> infoMap=new SparseArray<>(memInfos.size());
  for (int i=0, N=memInfos.size(); i < N; i++) {
    ProcessMemInfo mi=memInfos.get(i);
    infoMap.put(mi.pid,mi);
  }
  updateCpuStatsNow();
synchronized (mProcessCpuTracker) {
    final int N=mProcessCpuTracker.countStats();
    for (int i=0; i < N; i++) {
      ProcessCpuTracker.Stats st=mProcessCpuTracker.getStats(i);
      if (st.vsize > 0) {
        long pss=Debug.getPss(st.pid,null);
        if (pss > 0) {
          if (infoMap.indexOfKey(st.pid) < 0) {
            ProcessMemInfo mi=new ProcessMemInfo(st.name,st.pid,ProcessList.NATIVE_ADJ,-1,"native",null);
            mi.pss=pss;
            memInfos.add(mi);
          }
        }
      }
    }
  }
  long totalPss=0;
  for (int i=0, N=memInfos.size(); i < N; i++) {
    ProcessMemInfo mi=memInfos.get(i);
    if (mi.pss == 0) {
      mi.pss=Debug.getPss(mi.pid,null);
    }
    totalPss+=mi.pss;
  }
  Collections.sort(memInfos,new Comparator<ProcessMemInfo>(){
    @Override public int compare(    ProcessMemInfo lhs,    ProcessMemInfo rhs){
      if (lhs.oomAdj != rhs.oomAdj) {
        return lhs.oomAdj < rhs.oomAdj ? -1 : 1;
      }
      if (lhs.pss != rhs.pss) {
        return lhs.pss < rhs.pss ? 1 : -1;
      }
      return 0;
    }
  }
);
  StringBuilder tag=new StringBuilder(128);
  StringBuilder stack=new StringBuilder(128);
  tag.append("Low on memory -- ");
  appendMemBucket(tag,totalPss,"total",false);
  appendMemBucket(stack,totalPss,"total",true);
  StringBuilder fullNativeBuilder=new StringBuilder(1024);
  StringBuilder shortNativeBuilder=new StringBuilder(1024);
  StringBuilder fullJavaBuilder=new StringBuilder(1024);
  boolean firstLine=true;
  int lastOomAdj=Integer.MIN_VALUE;
  long extraNativeRam=0;
  long cachedPss=0;
  for (int i=0, N=memInfos.size(); i < N; i++) {
    ProcessMemInfo mi=memInfos.get(i);
    if (mi.oomAdj >= ProcessList.CACHED_APP_MIN_ADJ) {
      cachedPss+=mi.pss;
    }
    if (mi.oomAdj != ProcessList.NATIVE_ADJ && (mi.oomAdj < ProcessList.SERVICE_ADJ || mi.oomAdj == ProcessList.HOME_APP_ADJ || mi.oomAdj == ProcessList.PREVIOUS_APP_ADJ)) {
      if (lastOomAdj != mi.oomAdj) {
        lastOomAdj=mi.oomAdj;
        if (mi.oomAdj <= ProcessList.FOREGROUND_APP_ADJ) {
          tag.append(" / ");
        }
        if (mi.oomAdj >= ProcessList.FOREGROUND_APP_ADJ) {
          if (firstLine) {
            stack.append(":");
            firstLine=false;
          }
          stack.append("\n\t at ");
        }
 else {
          stack.append("$");
        }
      }
 else {
        tag.append(" ");
        stack.append("$");
      }
      if (mi.oomAdj <= ProcessList.FOREGROUND_APP_ADJ) {
        appendMemBucket(tag,mi.pss,mi.name,false);
      }
      appendMemBucket(stack,mi.pss,mi.name,true);
      if (mi.oomAdj >= ProcessList.FOREGROUND_APP_ADJ && ((i + 1) >= N || memInfos.get(i + 1).oomAdj != lastOomAdj)) {
        stack.append("(");
        for (int k=0; k < DUMP_MEM_OOM_ADJ.length; k++) {
          if (DUMP_MEM_OOM_ADJ[k] == mi.oomAdj) {
            stack.append(DUMP_MEM_OOM_LABEL[k]);
            stack.append(":");
            stack.append(DUMP_MEM_OOM_ADJ[k]);
          }
        }
        stack.append(")");
      }
    }
    appendMemInfo(fullNativeBuilder,mi);
    if (mi.oomAdj == ProcessList.NATIVE_ADJ) {
      if (mi.pss >= 1000) {
        appendMemInfo(shortNativeBuilder,mi);
      }
 else {
        extraNativeRam+=mi.pss;
      }
    }
 else {
      if (extraNativeRam > 0) {
        appendBasicMemEntry(shortNativeBuilder,ProcessList.NATIVE_ADJ,-1,extraNativeRam,"(Other native)");
        shortNativeBuilder.append('\n');
        extraNativeRam=0;
      }
      appendMemInfo(fullJavaBuilder,mi);
    }
  }
  fullJavaBuilder.append("           ");
  ProcessList.appendRamKb(fullJavaBuilder,totalPss);
  fullJavaBuilder.append(" kB: TOTAL\n");
  MemInfoReader memInfo=new MemInfoReader();
  memInfo.readMemInfo();
  final long[] infos=memInfo.getRawInfo();
  StringBuilder memInfoBuilder=new StringBuilder(1024);
  Debug.getMemInfo(infos);
  memInfoBuilder.append("  MemInfo: ");
  memInfoBuilder.append(infos[Debug.MEMINFO_SLAB]).append(" kB slab, ");
  memInfoBuilder.append(infos[Debug.MEMINFO_SHMEM]).append(" kB shmem, ");
  memInfoBuilder.append(infos[Debug.MEMINFO_VM_ALLOC_USED]).append(" kB vm alloc, ");
  memInfoBuilder.append(infos[Debug.MEMINFO_PAGE_TABLES]).append(" kB page tables ");
  memInfoBuilder.append(infos[Debug.MEMINFO_KERNEL_STACK]).append(" kB kernel stack\n");
  memInfoBuilder.append("           ");
  memInfoBuilder.append(infos[Debug.MEMINFO_BUFFERS]).append(" kB buffers, ");
  memInfoBuilder.append(infos[Debug.MEMINFO_CACHED]).append(" kB cached, ");
  memInfoBuilder.append(infos[Debug.MEMINFO_MAPPED]).append(" kB mapped, ");
  memInfoBuilder.append(infos[Debug.MEMINFO_FREE]).append(" kB free\n");
  if (infos[Debug.MEMINFO_ZRAM_TOTAL] != 0) {
    memInfoBuilder.append("  ZRAM: ");
    memInfoBuilder.append(infos[Debug.MEMINFO_ZRAM_TOTAL]);
    memInfoBuilder.append(" kB RAM, ");
    memInfoBuilder.append(infos[Debug.MEMINFO_SWAP_TOTAL]);
    memInfoBuilder.append(" kB swap total, ");
    memInfoBuilder.append(infos[Debug.MEMINFO_SWAP_FREE]);
    memInfoBuilder.append(" kB swap free\n");
  }
  final long[] ksm=getKsmInfo();
  if (ksm[KSM_SHARING] != 0 || ksm[KSM_SHARED] != 0 || ksm[KSM_UNSHARED] != 0 || ksm[KSM_VOLATILE] != 0) {
    memInfoBuilder.append("  KSM: ");
    memInfoBuilder.append(ksm[KSM_SHARING]);
    memInfoBuilder.append(" kB saved from shared ");
    memInfoBuilder.append(ksm[KSM_SHARED]);
    memInfoBuilder.append(" kB\n");
    memInfoBuilder.append("       ");
    memInfoBuilder.append(ksm[KSM_UNSHARED]);
    memInfoBuilder.append(" kB unshared; ");
    memInfoBuilder.append(ksm[KSM_VOLATILE]);
    memInfoBuilder.append(" kB volatile\n");
  }
  memInfoBuilder.append("  Free RAM: ");
  memInfoBuilder.append(cachedPss + memInfo.getCachedSizeKb() + memInfo.getFreeSizeKb());
  memInfoBuilder.append(" kB\n");
  memInfoBuilder.append("  Used RAM: ");
  memInfoBuilder.append(totalPss - cachedPss + memInfo.getKernelUsedSizeKb());
  memInfoBuilder.append(" kB\n");
  memInfoBuilder.append("  Lost RAM: ");
  memInfoBuilder.append(memInfo.getTotalSizeKb() - totalPss - memInfo.getFreeSizeKb()- memInfo.getCachedSizeKb()- memInfo.getKernelUsedSizeKb());
  memInfoBuilder.append(" kB\n");
  Slog.i(TAG,"Low on memory:");
  Slog.i(TAG,shortNativeBuilder.toString());
  Slog.i(TAG,fullJavaBuilder.toString());
  Slog.i(TAG,memInfoBuilder.toString());
  StringBuilder dropBuilder=new StringBuilder(1024);
  dropBuilder.append("Low on memory:");
  dropBuilder.append(stack);
  dropBuilder.append('\n');
  dropBuilder.append(fullNativeBuilder);
  dropBuilder.append(fullJavaBuilder);
  dropBuilder.append('\n');
  dropBuilder.append(memInfoBuilder);
  dropBuilder.append('\n');
  StringWriter catSw=new StringWriter();
synchronized (ActivityManagerService.this) {
    PrintWriter catPw=new FastPrintWriter(catSw,false,256);
    String[] emptyArgs=new String[]{};
    catPw.println();
    dumpProcessesLocked(null,catPw,emptyArgs,0,false,null);
    catPw.println();
    mServices.dumpServicesLocked(null,catPw,emptyArgs,0,false,false,null);
    catPw.println();
    dumpActivitiesLocked(null,catPw,emptyArgs,0,false,false,null);
    catPw.flush();
  }
  dropBuilder.append(catSw.toString());
  addErrorToDropBox("lowmem",null,"system_server",null,null,tag.toString(),dropBuilder.toString(),null,null);
synchronized (ActivityManagerService.this) {
    long now=SystemClock.uptimeMillis();
    if (mLastMemUsageReportTime < now) {
      mLastMemUsageReportTime=now;
    }
  }
}
