{
  EventLogTags.writeAmPss(proc.pid,proc.uid,proc.processName,pss * 1024,uss * 1024);
  proc.lastPssTime=now;
  proc.baseProcessTracker.addPss(pss,uss,true,proc.pkgList);
  if (DEBUG_PSS)   Slog.d(TAG_PSS,"PSS of " + proc.toShortString() + ": "+ pss+ " lastPss="+ proc.lastPss+ " state="+ ProcessList.makeProcStateString(procState));
  if (proc.initialIdlePss == 0) {
    proc.initialIdlePss=pss;
  }
  proc.lastPss=pss;
  if (procState >= ActivityManager.PROCESS_STATE_HOME) {
    proc.lastCachedPss=pss;
  }
  final SparseArray<Pair<Long,String>> watchUids=mMemWatchProcesses.getMap().get(proc.processName);
  Long check=null;
  if (watchUids != null) {
    Pair<Long,String> val=watchUids.get(proc.uid);
    if (val == null) {
      val=watchUids.get(0);
    }
    if (val != null) {
      check=val.first;
    }
  }
  if (check != null) {
    if ((pss * 1024) >= check && proc.thread != null && mMemWatchDumpProcName == null) {
      boolean isDebuggable="1".equals(SystemProperties.get(SYSTEM_DEBUGGABLE,"0"));
      if (!isDebuggable) {
        if ((proc.info.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0) {
          isDebuggable=true;
        }
      }
      if (isDebuggable) {
        Slog.w(TAG,"Process " + proc + " exceeded pss limit "+ check+ "; reporting");
        final ProcessRecord myProc=proc;
        final File heapdumpFile=DumpHeapProvider.getJavaFile();
        mMemWatchDumpProcName=proc.processName;
        mMemWatchDumpFile=heapdumpFile.toString();
        mMemWatchDumpPid=proc.pid;
        mMemWatchDumpUid=proc.uid;
        BackgroundThread.getHandler().post(new Runnable(){
          @Override public void run(){
            revokeUriPermission(ActivityThread.currentActivityThread().getApplicationThread(),DumpHeapActivity.JAVA_URI,Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION,UserHandle.myUserId());
            ParcelFileDescriptor fd=null;
            try {
              heapdumpFile.delete();
              fd=ParcelFileDescriptor.open(heapdumpFile,ParcelFileDescriptor.MODE_CREATE | ParcelFileDescriptor.MODE_TRUNCATE | ParcelFileDescriptor.MODE_READ_WRITE);
              IApplicationThread thread=myProc.thread;
              if (thread != null) {
                try {
                  if (true || DEBUG_PSS)                   Slog.d(TAG_PSS,"Requesting dump heap from " + myProc + " to "+ heapdumpFile);
                  thread.dumpHeap(true,heapdumpFile.toString(),fd);
                }
 catch (                RemoteException e) {
                }
              }
            }
 catch (            FileNotFoundException e) {
              e.printStackTrace();
            }
 finally {
              if (fd != null) {
                try {
                  fd.close();
                }
 catch (                IOException e) {
                }
              }
            }
          }
        }
);
      }
 else {
        Slog.w(TAG,"Process " + proc + " exceeded pss limit "+ check+ ", but debugging not enabled");
      }
    }
  }
}
