{
  if (userHandle == UserHandle.USER_ALL && packageName == null) {
    throw new IllegalArgumentException("Must narrow by either package or user");
  }
  boolean persistChanged=false;
  int N=mGrantedUriPermissions.size();
  for (int i=0; i < N; i++) {
    final int targetUid=mGrantedUriPermissions.keyAt(i);
    final ArrayMap<GrantUri,UriPermission> perms=mGrantedUriPermissions.valueAt(i);
    if (userHandle == UserHandle.USER_ALL || userHandle == UserHandle.getUserId(targetUid)) {
      for (Iterator<UriPermission> it=perms.values().iterator(); it.hasNext(); ) {
        final UriPermission perm=it.next();
        if (packageName == null || perm.sourcePkg.equals(packageName) || perm.targetPkg.equals(packageName)) {
          persistChanged|=perm.revokeModes(persistable ? ~0 : ~Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION);
          if (perm.modeFlags == 0) {
            it.remove();
          }
        }
      }
      if (perms.isEmpty()) {
        mGrantedUriPermissions.remove(targetUid);
        N--;
        i--;
      }
    }
  }
  if (persistChanged) {
    schedulePersistUriGrants();
  }
}
