{
  if (DEBUG_URI_PERMISSION)   Slog.v(TAG,"checkHoldingPermissionsLocked: uri=" + grantUri + " uid="+ uid);
  if (UserHandle.getUserId(uid) != grantUri.sourceUserId) {
    return false;
  }
  if (pi.applicationInfo.uid == uid) {
    return true;
  }
 else   if (!pi.exported) {
    return false;
  }
  boolean readMet=(modeFlags & Intent.FLAG_GRANT_READ_URI_PERMISSION) == 0;
  boolean writeMet=(modeFlags & Intent.FLAG_GRANT_WRITE_URI_PERMISSION) == 0;
  try {
    if (!readMet && pi.readPermission != null && (pm.checkUidPermission(pi.readPermission,uid) == PERMISSION_GRANTED)) {
      readMet=true;
    }
    if (!writeMet && pi.writePermission != null && (pm.checkUidPermission(pi.writePermission,uid) == PERMISSION_GRANTED)) {
      writeMet=true;
    }
    boolean allowDefaultRead=pi.readPermission == null;
    boolean allowDefaultWrite=pi.writePermission == null;
    final PathPermission[] pps=pi.pathPermissions;
    if (pps != null) {
      final String path=grantUri.uri.getPath();
      int i=pps.length;
      while (i > 0 && (!readMet || !writeMet)) {
        i--;
        PathPermission pp=pps[i];
        if (pp.match(path)) {
          if (!readMet) {
            final String pprperm=pp.getReadPermission();
            if (DEBUG_URI_PERMISSION)             Slog.v(TAG,"Checking read perm for " + pprperm + " for "+ pp.getPath()+ ": match="+ pp.match(path)+ " check="+ pm.checkUidPermission(pprperm,uid));
            if (pprperm != null) {
              if (pm.checkUidPermission(pprperm,uid) == PERMISSION_GRANTED) {
                readMet=true;
              }
 else {
                allowDefaultRead=false;
              }
            }
          }
          if (!writeMet) {
            final String ppwperm=pp.getWritePermission();
            if (DEBUG_URI_PERMISSION)             Slog.v(TAG,"Checking write perm " + ppwperm + " for "+ pp.getPath()+ ": match="+ pp.match(path)+ " check="+ pm.checkUidPermission(ppwperm,uid));
            if (ppwperm != null) {
              if (pm.checkUidPermission(ppwperm,uid) == PERMISSION_GRANTED) {
                writeMet=true;
              }
 else {
                allowDefaultWrite=false;
              }
            }
          }
        }
      }
    }
    if (allowDefaultRead)     readMet=true;
    if (allowDefaultWrite)     writeMet=true;
  }
 catch (  RemoteException e) {
    return false;
  }
  return readMet && writeMet;
}
