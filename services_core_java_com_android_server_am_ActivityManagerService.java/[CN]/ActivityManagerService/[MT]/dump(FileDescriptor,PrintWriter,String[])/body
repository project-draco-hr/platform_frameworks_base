{
  if (checkCallingPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println("Permission Denial: can't dump ActivityManager from from pid=" + Binder.getCallingPid() + ", uid="+ Binder.getCallingUid()+ " without permission "+ android.Manifest.permission.DUMP);
    return;
  }
  boolean dumpAll=false;
  boolean dumpClient=false;
  String dumpPackage=null;
  int opti=0;
  while (opti < args.length) {
    String opt=args[opti];
    if (opt == null || opt.length() <= 0 || opt.charAt(0) != '-') {
      break;
    }
    opti++;
    if ("-a".equals(opt)) {
      dumpAll=true;
    }
 else     if ("-c".equals(opt)) {
      dumpClient=true;
    }
 else     if ("-h".equals(opt)) {
      pw.println("Activity manager dump options:");
      pw.println("  [-a] [-c] [-h] [cmd] ...");
      pw.println("  cmd may be one of:");
      pw.println("    a[ctivities]: activity stack state");
      pw.println("    b[roadcasts] [PACKAGE_NAME] [history [-s]]: broadcast state");
      pw.println("    i[ntents] [PACKAGE_NAME]: pending intent state");
      pw.println("    p[rocesses] [PACKAGE_NAME]: process state");
      pw.println("    o[om]: out of memory management");
      pw.println("    prov[iders] [COMP_SPEC ...]: content provider state");
      pw.println("    provider [COMP_SPEC]: provider client-side state");
      pw.println("    s[ervices] [COMP_SPEC ...]: service state");
      pw.println("    service [COMP_SPEC]: service client-side state");
      pw.println("    package [PACKAGE_NAME]: all state related to given package");
      pw.println("    all: dump all activities");
      pw.println("    top: dump the top activity");
      pw.println("  cmd may also be a COMP_SPEC to dump activities.");
      pw.println("  COMP_SPEC may be a component name (com.foo/.myApp),");
      pw.println("    a partial substring in a component name, a");
      pw.println("    hex object identifier.");
      pw.println("  -a: include all available server state.");
      pw.println("  -c: include client state.");
      return;
    }
 else {
      pw.println("Unknown argument: " + opt + "; use -h for help");
    }
  }
  long origId=Binder.clearCallingIdentity();
  boolean more=false;
  if (opti < args.length) {
    String cmd=args[opti];
    opti++;
    if ("activities".equals(cmd) || "a".equals(cmd)) {
synchronized (this) {
        dumpActivitiesLocked(fd,pw,args,opti,true,dumpClient,null);
      }
    }
 else     if ("broadcasts".equals(cmd) || "b".equals(cmd)) {
      String[] newArgs;
      String name;
      if (opti >= args.length) {
        name=null;
        newArgs=EMPTY_STRING_ARRAY;
      }
 else {
        name=args[opti];
        opti++;
        newArgs=new String[args.length - opti];
        if (args.length > 2)         System.arraycopy(args,opti,newArgs,0,args.length - opti);
      }
synchronized (this) {
        dumpBroadcastsLocked(fd,pw,args,opti,true,name);
      }
    }
 else     if ("intents".equals(cmd) || "i".equals(cmd)) {
      String[] newArgs;
      String name;
      if (opti >= args.length) {
        name=null;
        newArgs=EMPTY_STRING_ARRAY;
      }
 else {
        name=args[opti];
        opti++;
        newArgs=new String[args.length - opti];
        if (args.length > 2)         System.arraycopy(args,opti,newArgs,0,args.length - opti);
      }
synchronized (this) {
        dumpPendingIntentsLocked(fd,pw,args,opti,true,name);
      }
    }
 else     if ("processes".equals(cmd) || "p".equals(cmd)) {
      String[] newArgs;
      String name;
      if (opti >= args.length) {
        name=null;
        newArgs=EMPTY_STRING_ARRAY;
      }
 else {
        name=args[opti];
        opti++;
        newArgs=new String[args.length - opti];
        if (args.length > 2)         System.arraycopy(args,opti,newArgs,0,args.length - opti);
      }
synchronized (this) {
        dumpProcessesLocked(fd,pw,args,opti,true,name);
      }
    }
 else     if ("oom".equals(cmd) || "o".equals(cmd)) {
synchronized (this) {
        dumpOomLocked(fd,pw,args,opti,true);
      }
    }
 else     if ("provider".equals(cmd)) {
      String[] newArgs;
      String name;
      if (opti >= args.length) {
        name=null;
        newArgs=EMPTY_STRING_ARRAY;
      }
 else {
        name=args[opti];
        opti++;
        newArgs=new String[args.length - opti];
        if (args.length > 2)         System.arraycopy(args,opti,newArgs,0,args.length - opti);
      }
      if (!dumpProvider(fd,pw,name,newArgs,0,dumpAll)) {
        pw.println("No providers match: " + name);
        pw.println("Use -h for help.");
      }
    }
 else     if ("providers".equals(cmd) || "prov".equals(cmd)) {
synchronized (this) {
        dumpProvidersLocked(fd,pw,args,opti,true,null);
      }
    }
 else     if ("service".equals(cmd)) {
      String[] newArgs;
      String name;
      if (opti >= args.length) {
        name=null;
        newArgs=EMPTY_STRING_ARRAY;
      }
 else {
        name=args[opti];
        opti++;
        newArgs=new String[args.length - opti];
        if (args.length > 2)         System.arraycopy(args,opti,newArgs,0,args.length - opti);
      }
      if (!mServices.dumpService(fd,pw,name,newArgs,0,dumpAll)) {
        pw.println("No services match: " + name);
        pw.println("Use -h for help.");
      }
    }
 else     if ("package".equals(cmd)) {
      String[] newArgs;
      if (opti >= args.length) {
        pw.println("package: no package name specified");
        pw.println("Use -h for help.");
      }
 else {
        dumpPackage=args[opti];
        opti++;
        newArgs=new String[args.length - opti];
        if (args.length > 2)         System.arraycopy(args,opti,newArgs,0,args.length - opti);
        args=newArgs;
        opti=0;
        more=true;
      }
    }
 else     if ("services".equals(cmd) || "s".equals(cmd)) {
synchronized (this) {
        mServices.dumpServicesLocked(fd,pw,args,opti,true,dumpClient,null);
      }
    }
 else {
      if (!dumpActivity(fd,pw,cmd,args,opti,dumpAll)) {
        pw.println("Bad activity command, or no activities match: " + cmd);
        pw.println("Use -h for help.");
      }
    }
    if (!more) {
      Binder.restoreCallingIdentity(origId);
      return;
    }
  }
synchronized (this) {
    dumpPendingIntentsLocked(fd,pw,args,opti,dumpAll,dumpPackage);
    pw.println();
    if (dumpAll) {
      pw.println("-------------------------------------------------------------------------------");
    }
    dumpBroadcastsLocked(fd,pw,args,opti,dumpAll,dumpPackage);
    pw.println();
    if (dumpAll) {
      pw.println("-------------------------------------------------------------------------------");
    }
    dumpProvidersLocked(fd,pw,args,opti,dumpAll,dumpPackage);
    pw.println();
    if (dumpAll) {
      pw.println("-------------------------------------------------------------------------------");
    }
    mServices.dumpServicesLocked(fd,pw,args,opti,dumpAll,dumpClient,dumpPackage);
    pw.println();
    if (dumpAll) {
      pw.println("-------------------------------------------------------------------------------");
    }
    dumpActivitiesLocked(fd,pw,args,opti,dumpAll,dumpClient,dumpPackage);
    pw.println();
    if (dumpAll) {
      pw.println("-------------------------------------------------------------------------------");
    }
    dumpProcessesLocked(fd,pw,args,opti,dumpAll,dumpPackage);
  }
  Binder.restoreCallingIdentity(origId);
}
