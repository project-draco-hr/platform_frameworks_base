{
  if (DEBUG_URI_PERMISSION)   Slog.v(TAG,"readGrantedUriPermissions()");
  final long now=System.currentTimeMillis();
  FileInputStream fis=null;
  try {
    fis=mGrantFile.openRead();
    final XmlPullParser in=Xml.newPullParser();
    in.setInput(fis,null);
    int type;
    while ((type=in.next()) != END_DOCUMENT) {
      final String tag=in.getName();
      if (type == START_TAG) {
        if (TAG_URI_GRANT.equals(tag)) {
          final int sourceUserId;
          final int targetUserId;
          final int userHandle=readIntAttribute(in,ATTR_USER_HANDLE,UserHandle.USER_NULL);
          if (userHandle != UserHandle.USER_NULL) {
            sourceUserId=userHandle;
            targetUserId=userHandle;
          }
 else {
            sourceUserId=readIntAttribute(in,ATTR_SOURCE_USER_ID);
            targetUserId=readIntAttribute(in,ATTR_TARGET_USER_ID);
          }
          final String sourcePkg=in.getAttributeValue(null,ATTR_SOURCE_PKG);
          final String targetPkg=in.getAttributeValue(null,ATTR_TARGET_PKG);
          final Uri uri=Uri.parse(in.getAttributeValue(null,ATTR_URI));
          final boolean prefix=readBooleanAttribute(in,ATTR_PREFIX);
          final int modeFlags=readIntAttribute(in,ATTR_MODE_FLAGS);
          final long createdTime=readLongAttribute(in,ATTR_CREATED_TIME,now);
          final ProviderInfo pi=getProviderInfoLocked(uri.getAuthority(),sourceUserId);
          if (pi != null && sourcePkg.equals(pi.packageName)) {
            int targetUid=-1;
            try {
              targetUid=AppGlobals.getPackageManager().getPackageUid(targetPkg,targetUserId);
            }
 catch (            RemoteException e) {
            }
            if (targetUid != -1) {
              final UriPermission perm=findOrCreateUriPermissionLocked(sourcePkg,targetPkg,targetUid,new GrantUri(sourceUserId,uri,prefix));
              perm.initPersistedModes(modeFlags,createdTime);
            }
          }
 else {
            Slog.w(TAG,"Persisted grant for " + uri + " had source "+ sourcePkg+ " but instead found "+ pi);
          }
        }
      }
    }
  }
 catch (  FileNotFoundException e) {
  }
catch (  IOException e) {
    Log.wtf(TAG,"Failed reading Uri grants",e);
  }
catch (  XmlPullParserException e) {
    Log.wtf(TAG,"Failed reading Uri grants",e);
  }
 finally {
    IoUtils.closeQuietly(fis);
  }
}
