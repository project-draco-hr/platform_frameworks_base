{
  FileObserver observer=new FileObserver(tracesPath,FileObserver.CLOSE_WRITE){
    @Override public synchronized void onEvent(    int event,    String path){
      notify();
    }
  }
;
  try {
    observer.startWatching();
    if (firstPids != null) {
      try {
        int num=firstPids.size();
        for (int i=0; i < num; i++) {
synchronized (observer) {
            if (DEBUG_ANR)             Slog.d(TAG,"Collecting stacks for pid " + firstPids.get(i));
            final long sime=SystemClock.elapsedRealtime();
            Process.sendSignal(firstPids.get(i),Process.SIGNAL_QUIT);
            observer.wait(1000);
            if (DEBUG_ANR)             Slog.d(TAG,"Done with pid " + firstPids.get(i) + " in "+ (SystemClock.elapsedRealtime() - sime)+ "ms");
          }
        }
      }
 catch (      InterruptedException e) {
        Slog.wtf(TAG,e);
      }
    }
    if (nativeProcs != null) {
      int[] pids=Process.getPidsForCommands(nativeProcs);
      if (pids != null) {
        for (        int pid : pids) {
          if (DEBUG_ANR)           Slog.d(TAG,"Collecting stacks for native pid " + pid);
          final long sime=SystemClock.elapsedRealtime();
          Debug.dumpNativeBacktraceToFile(pid,tracesPath);
          if (DEBUG_ANR)           Slog.d(TAG,"Done with native pid " + pid + " in "+ (SystemClock.elapsedRealtime() - sime)+ "ms");
        }
      }
    }
    if (processCpuTracker != null) {
      processCpuTracker.init();
      System.gc();
      processCpuTracker.update();
      try {
synchronized (processCpuTracker) {
          processCpuTracker.wait(500);
        }
      }
 catch (      InterruptedException e) {
      }
      processCpuTracker.update();
      final int N=processCpuTracker.countWorkingStats();
      int numProcs=0;
      for (int i=0; i < N && numProcs < 5; i++) {
        ProcessCpuTracker.Stats stats=processCpuTracker.getWorkingStats(i);
        if (lastPids.indexOfKey(stats.pid) >= 0) {
          numProcs++;
          try {
synchronized (observer) {
              if (DEBUG_ANR)               Slog.d(TAG,"Collecting stacks for extra pid " + stats.pid);
              final long stime=SystemClock.elapsedRealtime();
              Process.sendSignal(stats.pid,Process.SIGNAL_QUIT);
              observer.wait(1000);
              if (DEBUG_ANR)               Slog.d(TAG,"Done with extra pid " + stats.pid + " in "+ (SystemClock.elapsedRealtime() - stime)+ "ms");
            }
          }
 catch (          InterruptedException e) {
            Slog.wtf(TAG,e);
          }
        }
 else         if (DEBUG_ANR) {
          Slog.d(TAG,"Skipping next CPU consuming process, not a java proc: " + stats.pid);
        }
      }
    }
  }
  finally {
    observer.stopWatching();
  }
}
