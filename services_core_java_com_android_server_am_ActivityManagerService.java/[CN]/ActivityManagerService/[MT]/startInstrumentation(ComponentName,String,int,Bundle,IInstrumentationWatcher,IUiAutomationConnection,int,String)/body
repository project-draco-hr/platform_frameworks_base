{
  enforceNotIsolatedCaller("startInstrumentation");
  userId=mUserController.handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,ALLOW_FULL_ONLY,"startInstrumentation",null);
  if (arguments != null && arguments.hasFileDescriptors()) {
    throw new IllegalArgumentException("File descriptors passed in Bundle");
  }
synchronized (this) {
    InstrumentationInfo ii=null;
    ApplicationInfo ai=null;
    try {
      ii=mContext.getPackageManager().getInstrumentationInfo(className,STOCK_PM_FLAGS);
      ai=AppGlobals.getPackageManager().getApplicationInfo(ii.targetPackage,STOCK_PM_FLAGS,userId);
    }
 catch (    PackageManager.NameNotFoundException e) {
    }
catch (    RemoteException e) {
    }
    if (ii == null) {
      reportStartInstrumentationFailureLocked(watcher,className,"Unable to find instrumentation info for: " + className);
      return false;
    }
    if (ai == null) {
      reportStartInstrumentationFailureLocked(watcher,className,"Unable to find instrumentation target package: " + ii.targetPackage);
      return false;
    }
    if (!ai.hasCode()) {
      reportStartInstrumentationFailureLocked(watcher,className,"Instrumentation target has no code: " + ii.targetPackage);
      return false;
    }
    int match=mContext.getPackageManager().checkSignatures(ii.targetPackage,ii.packageName);
    if (match < 0 && match != PackageManager.SIGNATURE_FIRST_NOT_SIGNED) {
      String msg="Permission Denial: starting instrumentation " + className + " from pid="+ Binder.getCallingPid()+ ", uid="+ Binder.getCallingPid()+ " not allowed because package "+ ii.packageName+ " does not have a signature matching the target "+ ii.targetPackage;
      reportStartInstrumentationFailureLocked(watcher,className,msg);
      throw new SecurityException(msg);
    }
    final long origId=Binder.clearCallingIdentity();
    forceStopPackageLocked(ii.targetPackage,-1,true,false,true,true,false,userId,"start instr");
    ProcessRecord app=addAppLocked(ai,false,abiOverride);
    app.instrumentationClass=className;
    app.instrumentationInfo=ai;
    app.instrumentationProfileFile=profileFile;
    app.instrumentationArguments=arguments;
    app.instrumentationWatcher=watcher;
    app.instrumentationUiAutomationConnection=uiAutomationConnection;
    app.instrumentationResultClass=className;
    Binder.restoreCallingIdentity(origId);
  }
  return true;
}
