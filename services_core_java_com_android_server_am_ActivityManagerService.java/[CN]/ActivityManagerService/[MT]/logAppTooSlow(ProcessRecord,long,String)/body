{
  if (true || IS_USER_BUILD) {
    return;
  }
  String tracesPath=SystemProperties.get("dalvik.vm.stack-trace-file",null);
  if (tracesPath == null || tracesPath.length() == 0) {
    return;
  }
  StrictMode.ThreadPolicy oldPolicy=StrictMode.allowThreadDiskReads();
  StrictMode.allowThreadDiskWrites();
  try {
    final File tracesFile=new File(tracesPath);
    final File tracesDir=tracesFile.getParentFile();
    final File tracesTmp=new File(tracesDir,"__tmp__");
    try {
      if (tracesFile.exists()) {
        tracesTmp.delete();
        tracesFile.renameTo(tracesTmp);
      }
      StringBuilder sb=new StringBuilder();
      Time tobj=new Time();
      tobj.set(System.currentTimeMillis());
      sb.append(tobj.format("%Y-%m-%d %H:%M:%S"));
      sb.append(": ");
      TimeUtils.formatDuration(SystemClock.uptimeMillis() - startTime,sb);
      sb.append(" since ");
      sb.append(msg);
      FileOutputStream fos=new FileOutputStream(tracesFile);
      fos.write(sb.toString().getBytes());
      if (app == null) {
        fos.write("\n*** No application process!".getBytes());
      }
      fos.close();
      FileUtils.setPermissions(tracesFile.getPath(),0666,-1,-1);
    }
 catch (    IOException e) {
      Slog.w(TAG,"Unable to prepare slow app traces file: " + tracesPath,e);
      return;
    }
    if (app != null) {
      ArrayList<Integer> firstPids=new ArrayList<Integer>();
      firstPids.add(app.pid);
      dumpStackTraces(tracesPath,firstPids,null,null,null);
    }
    File lastTracesFile=null;
    File curTracesFile=null;
    for (int i=9; i >= 0; i--) {
      String name=String.format(Locale.US,"slow%02d.txt",i);
      curTracesFile=new File(tracesDir,name);
      if (curTracesFile.exists()) {
        if (lastTracesFile != null) {
          curTracesFile.renameTo(lastTracesFile);
        }
 else {
          curTracesFile.delete();
        }
      }
      lastTracesFile=curTracesFile;
    }
    tracesFile.renameTo(curTracesFile);
    if (tracesTmp.exists()) {
      tracesTmp.renameTo(tracesFile);
    }
  }
  finally {
    StrictMode.setThreadPolicy(oldPolicy);
  }
}
