{
  final int callingUserId=UserHandle.getUserId(callingUid);
  if (callingUserId == userId) {
    return userId;
  }
  int targetUserId=unsafeConvertIncomingUser(userId);
  if (callingUid != 0 && callingUid != Process.SYSTEM_UID) {
    final boolean allow;
    if (checkComponentPermission(INTERACT_ACROSS_USERS_FULL,callingPid,callingUid,-1,true) == PackageManager.PERMISSION_GRANTED) {
      allow=true;
    }
 else     if (allowMode == ALLOW_FULL_ONLY) {
      allow=false;
    }
 else     if (checkComponentPermission(INTERACT_ACROSS_USERS,callingPid,callingUid,-1,true) != PackageManager.PERMISSION_GRANTED) {
      allow=false;
    }
 else     if (allowMode == ALLOW_NON_FULL) {
      allow=true;
    }
 else     if (allowMode == ALLOW_NON_FULL_IN_PROFILE) {
synchronized (mUserProfileGroupIdsSelfLocked) {
        int callingProfile=mUserProfileGroupIdsSelfLocked.get(callingUserId,UserInfo.NO_PROFILE_GROUP_ID);
        int targetProfile=mUserProfileGroupIdsSelfLocked.get(targetUserId,UserInfo.NO_PROFILE_GROUP_ID);
        allow=callingProfile != UserInfo.NO_PROFILE_GROUP_ID && callingProfile == targetProfile;
      }
    }
 else {
      throw new IllegalArgumentException("Unknown mode: " + allowMode);
    }
    if (!allow) {
      if (userId == UserHandle.USER_CURRENT_OR_SELF) {
        targetUserId=callingUserId;
      }
 else {
        StringBuilder builder=new StringBuilder(128);
        builder.append("Permission Denial: ");
        builder.append(name);
        if (callerPackage != null) {
          builder.append(" from ");
          builder.append(callerPackage);
        }
        builder.append(" asks to run as user ");
        builder.append(userId);
        builder.append(" but is calling from user ");
        builder.append(UserHandle.getUserId(callingUid));
        builder.append("; this requires ");
        builder.append(INTERACT_ACROSS_USERS_FULL);
        if (allowMode != ALLOW_FULL_ONLY) {
          builder.append(" or ");
          builder.append(INTERACT_ACROSS_USERS);
        }
        String msg=builder.toString();
        Slog.w(TAG,msg);
        throw new SecurityException(msg);
      }
    }
  }
  if (!allowAll && targetUserId < 0) {
    throw new IllegalArgumentException("Call does not support special user #" + targetUserId);
  }
  return targetUserId;
}
