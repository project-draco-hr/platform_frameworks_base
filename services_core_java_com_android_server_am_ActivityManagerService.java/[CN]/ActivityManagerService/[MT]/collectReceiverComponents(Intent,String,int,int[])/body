{
  int pmFlags=STOCK_PM_FLAGS | MATCH_DEBUG_TRIAGED_MISSING;
  List<ResolveInfo> receivers=null;
  try {
    HashSet<ComponentName> singleUserReceivers=null;
    boolean scannedFirstReceivers=false;
    for (    int user : users) {
      if (callingUid == Process.SHELL_UID && mUserController.hasUserRestriction(UserManager.DISALLOW_DEBUGGING_FEATURES,user) && !isPermittedShellBroadcast(intent)) {
        continue;
      }
      List<ResolveInfo> newReceivers=AppGlobals.getPackageManager().queryIntentReceivers(intent,resolvedType,pmFlags,user);
      if (user != UserHandle.USER_SYSTEM && newReceivers != null) {
        for (int i=0; i < newReceivers.size(); i++) {
          ResolveInfo ri=newReceivers.get(i);
          if ((ri.activityInfo.flags & ActivityInfo.FLAG_SYSTEM_USER_ONLY) != 0) {
            newReceivers.remove(i);
            i--;
          }
        }
      }
      if (newReceivers != null && newReceivers.size() == 0) {
        newReceivers=null;
      }
      if (receivers == null) {
        receivers=newReceivers;
      }
 else       if (newReceivers != null) {
        if (!scannedFirstReceivers) {
          scannedFirstReceivers=true;
          for (int i=0; i < receivers.size(); i++) {
            ResolveInfo ri=receivers.get(i);
            if ((ri.activityInfo.flags & ActivityInfo.FLAG_SINGLE_USER) != 0) {
              ComponentName cn=new ComponentName(ri.activityInfo.packageName,ri.activityInfo.name);
              if (singleUserReceivers == null) {
                singleUserReceivers=new HashSet<ComponentName>();
              }
              singleUserReceivers.add(cn);
            }
          }
        }
        for (int i=0; i < newReceivers.size(); i++) {
          ResolveInfo ri=newReceivers.get(i);
          if ((ri.activityInfo.flags & ActivityInfo.FLAG_SINGLE_USER) != 0) {
            ComponentName cn=new ComponentName(ri.activityInfo.packageName,ri.activityInfo.name);
            if (singleUserReceivers == null) {
              singleUserReceivers=new HashSet<ComponentName>();
            }
            if (!singleUserReceivers.contains(cn)) {
              singleUserReceivers.add(cn);
              receivers.add(ri);
            }
          }
 else {
            receivers.add(ri);
          }
        }
      }
    }
  }
 catch (  RemoteException ex) {
  }
  return receivers;
}
