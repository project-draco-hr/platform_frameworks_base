{
  ArrayList<ProcessRecord> procs=new ArrayList<>();
  final int NP=mProcessNames.getMap().size();
  for (int ip=0; ip < NP; ip++) {
    SparseArray<ProcessRecord> apps=mProcessNames.getMap().valueAt(ip);
    final int NA=apps.size();
    for (int ia=0; ia < NA; ia++) {
      ProcessRecord app=apps.valueAt(ia);
      if (app.persistent && !evenPersistent) {
        continue;
      }
      if (app.removed) {
        if (doit) {
          procs.add(app);
        }
        continue;
      }
      if (app.setAdj < minOomAdj) {
        continue;
      }
      if (packageName == null) {
        if (userId != UserHandle.USER_ALL && app.userId != userId) {
          continue;
        }
        if (appId >= 0 && UserHandle.getAppId(app.uid) != appId) {
          continue;
        }
      }
 else {
        final boolean isDep=app.pkgDeps != null && app.pkgDeps.contains(packageName);
        if (!isDep && UserHandle.getAppId(app.uid) != appId) {
          continue;
        }
        if (userId != UserHandle.USER_ALL && app.userId != userId) {
          continue;
        }
        if (!app.pkgList.containsKey(packageName) && !isDep) {
          continue;
        }
      }
      if (!doit) {
        return true;
      }
      app.removed=true;
      procs.add(app);
    }
  }
  int N=procs.size();
  for (int i=0; i < N; i++) {
    removeProcessLocked(procs.get(i),callerWillRestart,allowRestart,reason);
  }
  updateOomAdjLocked();
  return N > 0;
}
