{
  enforceNotIsolatedCaller("clearApplicationUserData");
  final DevicePolicyManagerInternal dpmi=LocalServices.getService(DevicePolicyManagerInternal.class);
  if (dpmi != null && dpmi.hasDeviceOwnerOrProfileOwner(packageName,userId)) {
    throw new SecurityException("Cannot clear data for a device owner or a profile owner");
  }
  int uid=Binder.getCallingUid();
  int pid=Binder.getCallingPid();
  userId=mUserController.handleIncomingUser(pid,uid,userId,false,ALLOW_FULL_ONLY,"clearApplicationUserData",null);
  long callingId=Binder.clearCallingIdentity();
  try {
    IPackageManager pm=AppGlobals.getPackageManager();
    int pkgUid=-1;
synchronized (this) {
      try {
        pkgUid=pm.getPackageUid(packageName,MATCH_UNINSTALLED_PACKAGES,userId);
      }
 catch (      RemoteException e) {
      }
      if (pkgUid == -1) {
        Slog.w(TAG,"Invalid packageName: " + packageName);
        if (observer != null) {
          try {
            observer.onRemoveCompleted(packageName,false);
          }
 catch (          RemoteException e) {
            Slog.i(TAG,"Observer no longer exists.");
          }
        }
        return false;
      }
      if (uid == pkgUid || checkComponentPermission(android.Manifest.permission.CLEAR_APP_USER_DATA,pid,uid,-1,true) == PackageManager.PERMISSION_GRANTED) {
        forceStopPackageLocked(packageName,pkgUid,"clear data");
      }
 else {
        throw new SecurityException("PID " + pid + " does not have permission "+ android.Manifest.permission.CLEAR_APP_USER_DATA+ " to clear data"+ " of package "+ packageName);
      }
      for (int i=mRecentTasks.size() - 1; i >= 0; i--) {
        final TaskRecord tr=mRecentTasks.get(i);
        final String taskPackageName=tr.getBaseIntent().getComponent().getPackageName();
        if (tr.userId != userId)         continue;
        if (!taskPackageName.equals(packageName))         continue;
        removeTaskByIdLocked(tr.taskId,false,REMOVE_FROM_RECENTS);
      }
    }
    try {
      pm.clearApplicationUserData(packageName,observer,userId);
synchronized (this) {
        removeUriPermissionsForPackageLocked(packageName,userId,true);
      }
      INotificationManager inm=NotificationManager.getService();
      inm.removeAutomaticZenRules(packageName);
      inm.setNotificationPolicyAccessGranted(packageName,false);
      Intent intent=new Intent(Intent.ACTION_PACKAGE_DATA_CLEARED,Uri.fromParts("package",packageName,null));
      intent.putExtra(Intent.EXTRA_UID,pkgUid);
      broadcastIntentInPackage("android",Process.SYSTEM_UID,intent,null,null,0,null,null,null,null,false,false,userId);
    }
 catch (    RemoteException e) {
    }
  }
  finally {
    Binder.restoreCallingIdentity(callingId);
  }
  return true;
}
