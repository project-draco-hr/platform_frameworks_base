{
switch (msg.what) {
case SHOW_ERROR_MSG:
{
      HashMap<String,Object> data=(HashMap<String,Object>)msg.obj;
      boolean showBackground=Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.ANR_SHOW_BACKGROUND,0) != 0;
synchronized (ActivityManagerService.this) {
        ProcessRecord proc=(ProcessRecord)data.get("app");
        AppErrorResult res=(AppErrorResult)data.get("result");
        if (proc != null && proc.crashDialog != null) {
          Slog.e(TAG,"App already has crash dialog: " + proc);
          if (res != null) {
            res.set(0);
          }
          return;
        }
        boolean isBackground=(UserHandle.getAppId(proc.uid) >= Process.FIRST_APPLICATION_UID && proc.pid != MY_PID);
        for (        int userId : mCurrentProfileIds) {
          isBackground&=(proc.userId != userId);
        }
        if (isBackground && !showBackground) {
          Slog.w(TAG,"Skipping crash dialog of " + proc + ": background");
          if (res != null) {
            res.set(0);
          }
          return;
        }
        if (mShowDialogs && !mSleeping && !mShuttingDown) {
          Dialog d=new AppErrorDialog(mContext,ActivityManagerService.this,res,proc);
          d.show();
          proc.crashDialog=d;
        }
 else {
          if (res != null) {
            res.set(0);
          }
        }
      }
      ensureBootCompleted();
    }
  break;
case SHOW_NOT_RESPONDING_MSG:
{
synchronized (ActivityManagerService.this) {
    HashMap<String,Object> data=(HashMap<String,Object>)msg.obj;
    ProcessRecord proc=(ProcessRecord)data.get("app");
    if (proc != null && proc.anrDialog != null) {
      Slog.e(TAG,"App already has anr dialog: " + proc);
      return;
    }
    Intent intent=new Intent("android.intent.action.ANR");
    if (!mProcessesReady) {
      intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY | Intent.FLAG_RECEIVER_FOREGROUND);
    }
    broadcastIntentLocked(null,null,intent,null,null,0,null,null,null,AppOpsManager.OP_NONE,false,false,MY_PID,Process.SYSTEM_UID,0);
    if (mShowDialogs) {
      Dialog d=new AppNotRespondingDialog(ActivityManagerService.this,mContext,proc,(ActivityRecord)data.get("activity"),msg.arg1 != 0);
      d.show();
      proc.anrDialog=d;
    }
 else {
      killAppAtUsersRequest(proc,null);
    }
  }
  ensureBootCompleted();
}
break;
case SHOW_STRICT_MODE_VIOLATION_MSG:
{
HashMap<String,Object> data=(HashMap<String,Object>)msg.obj;
synchronized (ActivityManagerService.this) {
ProcessRecord proc=(ProcessRecord)data.get("app");
if (proc == null) {
  Slog.e(TAG,"App not found when showing strict mode dialog.");
  break;
}
if (proc.crashDialog != null) {
  Slog.e(TAG,"App already has strict mode dialog: " + proc);
  return;
}
AppErrorResult res=(AppErrorResult)data.get("result");
if (mShowDialogs && !mSleeping && !mShuttingDown) {
  Dialog d=new StrictModeViolationDialog(mContext,ActivityManagerService.this,res,proc);
  d.show();
  proc.crashDialog=d;
}
 else {
  res.set(0);
}
}
ensureBootCompleted();
}
break;
case SHOW_FACTORY_ERROR_MSG:
{
Dialog d=new FactoryErrorDialog(mContext,msg.getData().getCharSequence("msg"));
d.show();
ensureBootCompleted();
}
break;
case WAIT_FOR_DEBUGGER_MSG:
{
synchronized (ActivityManagerService.this) {
ProcessRecord app=(ProcessRecord)msg.obj;
if (msg.arg1 != 0) {
if (!app.waitedForDebugger) {
Dialog d=new AppWaitingForDebuggerDialog(ActivityManagerService.this,mContext,app);
app.waitDialog=d;
app.waitedForDebugger=true;
d.show();
}
}
 else {
if (app.waitDialog != null) {
app.waitDialog.dismiss();
app.waitDialog=null;
}
}
}
}
break;
case SHOW_UID_ERROR_MSG:
{
if (mShowDialogs) {
AlertDialog d=new BaseErrorDialog(mContext);
d.getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ERROR);
d.setCancelable(false);
d.setTitle(mContext.getText(R.string.android_system_label));
d.setMessage(mContext.getText(R.string.system_error_wipe_data));
d.setButton(DialogInterface.BUTTON_POSITIVE,mContext.getText(R.string.ok),obtainMessage(DISMISS_DIALOG_MSG,d));
d.show();
}
}
break;
case SHOW_FINGERPRINT_ERROR_MSG:
{
if (mShowDialogs) {
AlertDialog d=new BaseErrorDialog(mContext);
d.getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ERROR);
d.setCancelable(false);
d.setTitle(mContext.getText(R.string.android_system_label));
d.setMessage(mContext.getText(R.string.system_error_manufacturer));
d.setButton(DialogInterface.BUTTON_POSITIVE,mContext.getText(R.string.ok),obtainMessage(DISMISS_DIALOG_MSG,d));
d.show();
}
}
break;
case SHOW_COMPAT_MODE_DIALOG_MSG:
{
synchronized (ActivityManagerService.this) {
ActivityRecord ar=(ActivityRecord)msg.obj;
if (mCompatModeDialog != null) {
if (mCompatModeDialog.mAppInfo.packageName.equals(ar.info.applicationInfo.packageName)) {
return;
}
mCompatModeDialog.dismiss();
mCompatModeDialog=null;
}
if (ar != null && false) {
if (mCompatModePackages.getPackageAskCompatModeLocked(ar.packageName)) {
int mode=mCompatModePackages.computeCompatModeLocked(ar.info.applicationInfo);
if (mode == ActivityManager.COMPAT_MODE_DISABLED || mode == ActivityManager.COMPAT_MODE_ENABLED) {
mCompatModeDialog=new CompatModeDialog(ActivityManagerService.this,mContext,ar.info.applicationInfo);
mCompatModeDialog.show();
}
}
}
}
break;
}
case START_USER_SWITCH_MSG:
{
showUserSwitchDialog(msg.arg1,(String)msg.obj);
break;
}
case DISMISS_DIALOG_MSG:
{
final Dialog d=(Dialog)msg.obj;
d.dismiss();
break;
}
}
}
