{
switch (msg.what) {
case CAMERA_MSG_SHUTTER:
    if (mShutterCallback != null) {
      mShutterCallback.onShutter();
    }
  return;
case CAMERA_MSG_RAW_IMAGE:
if (mRawImageCallback != null) {
  mRawImageCallback.onPictureTaken((byte[])msg.obj,mCamera);
}
return;
case CAMERA_MSG_COMPRESSED_IMAGE:
if (mJpegCallback != null) {
mJpegCallback.onPictureTaken((byte[])msg.obj,mCamera);
}
return;
case CAMERA_MSG_PREVIEW_FRAME:
if (mPreviewCallback != null) {
PreviewCallback cb=mPreviewCallback;
if (mOneShot) {
mPreviewCallback=null;
}
 else if (!mWithBuffer) {
setHasPreviewCallback(true,false);
}
cb.onPreviewFrame((byte[])msg.obj,mCamera);
}
return;
case CAMERA_MSG_POSTVIEW_FRAME:
if (mPostviewCallback != null) {
mPostviewCallback.onPictureTaken((byte[])msg.obj,mCamera);
}
return;
case CAMERA_MSG_FOCUS:
if (mAutoFocusCallback != null) {
mAutoFocusCallback.onAutoFocus(msg.arg1 == 0 ? false : true,mCamera);
}
return;
case CAMERA_MSG_ZOOM:
if (mZoomListener != null) {
mZoomListener.onZoomChange(msg.arg1,msg.arg2 != 0,mCamera);
}
return;
case CAMERA_MSG_METADATA_FACE:
if (mFaceListener != null) {
mFaceListener.onFaceDetection((Face[])msg.obj,mCamera);
}
return;
case CAMERA_MSG_ERROR:
Log.e(TAG,"Error " + msg.arg1);
if (mErrorCallback != null) {
mErrorCallback.onError(msg.arg1,mCamera);
}
return;
default :
Log.e(TAG,"Unknown message type " + msg.what);
return;
}
}
