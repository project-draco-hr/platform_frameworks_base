{
  if (DEBUG) {
    Slog.d(TAG,"onInteractiveChangeFinished");
  }
synchronized (mLock) {
    if (!interactive) {
      if (mActualPowerState != POWER_STATE_ASLEEP) {
        mActualPowerState=POWER_STATE_ASLEEP;
        mPendingGoToSleepBroadcast=true;
        if (mUserActivityPending) {
          mUserActivityPending=false;
          mHandler.removeMessages(MSG_USER_ACTIVITY);
        }
        mHandler.post(new Runnable(){
          @Override public void run(){
            int why=WindowManagerPolicy.OFF_BECAUSE_OF_USER;
switch (mLastGoToSleepReason) {
case PowerManager.GO_TO_SLEEP_REASON_DEVICE_ADMIN:
              why=WindowManagerPolicy.OFF_BECAUSE_OF_ADMIN;
            break;
case PowerManager.GO_TO_SLEEP_REASON_TIMEOUT:
          why=WindowManagerPolicy.OFF_BECAUSE_OF_TIMEOUT;
        break;
    }
    EventLog.writeEvent(EventLogTags.POWER_SCREEN_STATE,0,why,0,0);
    mPolicy.goingToSleep(why);
    mActivityManagerInternal.goingToSleep();
  }
}
);
updatePendingBroadcastLocked();
}
}
}
if (!interactive) {
try {
mBatteryStats.noteInteractive(false);
}
 catch (RemoteException ex) {
}
}
}
