{
  mHandler.post(new Runnable(){
    @Override public void run(){
      mActivityManagerInternal.onWakefulnessChanged(wakefulness);
    }
  }
);
  boolean interactiveChanged=false;
synchronized (mLock) {
    if (interactive) {
      interactiveChanged=(mActualInteractiveState != INTERACTIVE_STATE_AWAKE);
      if (interactiveChanged) {
        mActualInteractiveState=INTERACTIVE_STATE_AWAKE;
        mPendingWakeUpBroadcast=true;
        mHandler.post(new Runnable(){
          @Override public void run(){
            EventLog.writeEvent(EventLogTags.POWER_SCREEN_STATE,1,0,0,0);
            mPolicy.wakingUp();
          }
        }
);
        updatePendingBroadcastLocked();
      }
    }
 else {
      interactiveChanged=(mActualInteractiveState != INTERACTIVE_STATE_ASLEEP);
      if (interactiveChanged) {
        mActualInteractiveState=INTERACTIVE_STATE_ASLEEP;
        mPendingGoToSleepBroadcast=true;
        if (mUserActivityPending) {
          mUserActivityPending=false;
          mHandler.removeMessages(MSG_USER_ACTIVITY);
        }
        mHandler.post(new Runnable(){
          @Override public void run(){
            int why=WindowManagerPolicy.OFF_BECAUSE_OF_USER;
switch (reason) {
case PowerManager.GO_TO_SLEEP_REASON_DEVICE_ADMIN:
              why=WindowManagerPolicy.OFF_BECAUSE_OF_ADMIN;
            break;
case PowerManager.GO_TO_SLEEP_REASON_TIMEOUT:
          why=WindowManagerPolicy.OFF_BECAUSE_OF_TIMEOUT;
        break;
    }
    EventLog.writeEvent(EventLogTags.POWER_SCREEN_STATE,0,why,0,0);
    mPolicy.goingToSleep(why);
  }
}
);
updatePendingBroadcastLocked();
}
}
}
if (interactiveChanged) {
try {
mBatteryStats.noteInteractive(interactive);
}
 catch (RemoteException ex) {
}
}
}
