{
  Details details=new Details(parcelableCall.getHandle(),parcelableCall.getHandlePresentation(),parcelableCall.getCallerDisplayName(),parcelableCall.getCallerDisplayNamePresentation(),parcelableCall.getAccountHandle(),parcelableCall.getCapabilities(),parcelableCall.getProperties(),parcelableCall.getDisconnectCause(),parcelableCall.getConnectTimeMillis(),parcelableCall.getGatewayInfo(),parcelableCall.getVideoState(),parcelableCall.getStatusHints(),parcelableCall.getExtras());
  boolean detailsChanged=!Objects.equals(mDetails,details);
  if (detailsChanged) {
    mDetails=details;
  }
  boolean cannedTextResponsesChanged=false;
  if (mCannedTextResponses == null && parcelableCall.getCannedSmsResponses() != null && !parcelableCall.getCannedSmsResponses().isEmpty()) {
    mCannedTextResponses=Collections.unmodifiableList(parcelableCall.getCannedSmsResponses());
  }
  boolean videoCallChanged=!Objects.equals(mVideoCall,parcelableCall.getVideoCall());
  if (videoCallChanged) {
    mVideoCall=parcelableCall.getVideoCall();
  }
  int state=stateFromParcelableCallState(parcelableCall.getState());
  boolean stateChanged=mState != state;
  if (stateChanged) {
    mState=state;
  }
  String parentId=parcelableCall.getParentCallId();
  boolean parentChanged=!Objects.equals(mParentId,parentId);
  if (parentChanged) {
    mParentId=parentId;
  }
  List<String> childCallIds=parcelableCall.getChildCallIds();
  boolean childrenChanged=!Objects.equals(childCallIds,mChildrenIds);
  if (childrenChanged) {
    mChildrenIds.clear();
    mChildrenIds.addAll(parcelableCall.getChildCallIds());
    mChildrenCached=false;
  }
  List<String> conferenceableCallIds=parcelableCall.getConferenceableCallIds();
  List<Call> conferenceableCalls=new ArrayList<Call>(conferenceableCallIds.size());
  for (  String otherId : conferenceableCallIds) {
    if (callIdMap.containsKey(otherId)) {
      conferenceableCalls.add(callIdMap.get(otherId));
    }
  }
  if (!Objects.equals(mConferenceableCalls,conferenceableCalls)) {
    mConferenceableCalls.clear();
    mConferenceableCalls.addAll(conferenceableCalls);
    fireConferenceableCallsChanged();
  }
  if (stateChanged) {
    fireStateChanged(mState);
  }
  if (detailsChanged) {
    fireDetailsChanged(mDetails);
  }
  if (cannedTextResponsesChanged) {
    fireCannedTextResponsesLoaded(mCannedTextResponses);
  }
  if (videoCallChanged) {
    fireVideoCallChanged(mVideoCall);
  }
  if (parentChanged) {
    fireParentChanged(getParent());
  }
  if (childrenChanged) {
    fireChildrenChanged(getChildren());
  }
  if (mState == STATE_DISCONNECTED) {
    fireCallDestroyed();
    mPhone.internalRemoveCall(this);
  }
}
