{
  final int numItems=mListView.getAdapter().getCount();
  for (int i=0; i < numItems - 1; i++) {
    sendKeys(KeyEvent.KEYCODE_DPAD_DOWN);
  }
  assertEquals("should have moved to last position",numItems - 1,mListView.getSelectedItemPosition());
  int listTop=mListView.getListPaddingTop();
  final int listBottom=mListView.getHeight() - mListView.getListPaddingBottom();
  for (int i=0; i < numItems; i++) {
    int expectedPostion=numItems - (i + 1);
    assertEquals("wrong selection at position " + expectedPostion,expectedPostion,mListView.getSelectedItemPosition());
    final int topFadingEdge=listTop + mListView.getVerticalFadingEdgeLength();
    final View firstChild=mListView.getChildAt(0);
    final View lastChild=mListView.getChildAt(mListView.getChildCount() - 1);
    final int firstVisiblePosition=firstChild.getId();
    int topThreshold=(firstVisiblePosition > 0) ? topFadingEdge : listTop;
    String prefix="after " + i + " up presses, ";
    assertTrue(prefix + "selected item is above top threshold (fading edge or top as " + "appropriate)",mListView.getSelectedView().getTop() >= topThreshold);
    assertTrue(prefix + "first item in list must be at very top or just above",firstChild.getTop() <= 0);
    assertTrue(prefix + "last item in list should be at very bottom or just below",lastChild.getBottom() >= listBottom);
    sendKeys(KeyEvent.KEYCODE_DPAD_UP);
  }
}
