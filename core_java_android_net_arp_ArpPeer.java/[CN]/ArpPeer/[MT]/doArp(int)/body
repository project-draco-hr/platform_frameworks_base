{
  ByteBuffer buf=ByteBuffer.allocate(MAX_LENGTH);
  byte[] desiredIp=mPeer.getAddress();
  long timeout=SystemClock.elapsedRealtime() + timeoutMillis;
  buf.clear();
  buf.order(ByteOrder.BIG_ENDIAN);
  buf.putShort((short)ETHERNET_TYPE);
  buf.putShort(RawSocket.ETH_P_IP);
  buf.put((byte)MAC_ADDR_LENGTH);
  buf.put((byte)IPV4_LENGTH);
  buf.putShort((short)1);
  buf.put(mMyMac);
  buf.put(mMyAddr.getAddress());
  buf.put(new byte[MAC_ADDR_LENGTH]);
  buf.put(desiredIp);
  buf.flip();
  mSocket.write(L2_BROADCAST,buf.array(),0,buf.limit());
  byte[] recvBuf=new byte[MAX_LENGTH];
  while (SystemClock.elapsedRealtime() < timeout) {
    long duration=(long)timeout - SystemClock.elapsedRealtime();
    int readLen=mSocket.read(recvBuf,0,recvBuf.length,-1,(int)duration);
    if ((readLen >= ARP_LENGTH) && (recvBuf[0] == 0) && (recvBuf[1] == ETHERNET_TYPE)&& (recvBuf[2] == 8)&& (recvBuf[3] == 0)&& (recvBuf[4] == MAC_ADDR_LENGTH)&& (recvBuf[5] == IPV4_LENGTH)&& (recvBuf[6] == 0)&& (recvBuf[7] == 2)&& (recvBuf[14] == desiredIp[0])&& (recvBuf[15] == desiredIp[1])&& (recvBuf[16] == desiredIp[2])&& (recvBuf[17] == desiredIp[3])) {
      byte[] result=new byte[MAC_ADDR_LENGTH];
      System.arraycopy(recvBuf,8,result,0,MAC_ADDR_LENGTH);
      return result;
    }
  }
  return null;
}
