{
  int geofenceId=request.getId();
  if (DEBUG) {
    String message=String.format("addCircularFence: monitoringType=%d, %s",monitoringType,request);
    Log.d(TAG,message);
  }
  boolean result;
synchronized (mGeofences) {
    mGeofences.put(geofenceId,callback);
  }
switch (monitoringType) {
case GeofenceHardware.MONITORING_TYPE_GPS_HARDWARE:
    if (mGpsService == null)     return false;
  try {
    result=mGpsService.addCircularHardwareGeofence(request.getId(),request.getLatitude(),request.getLongitude(),request.getRadius(),request.getLastTransition(),request.getMonitorTransitions(),request.getNotificationResponsiveness(),request.getUnknownTimer());
  }
 catch (  RemoteException e) {
    Log.e(TAG,"AddGeofence: Remote Exception calling LocationManagerService");
    result=false;
  }
break;
case GeofenceHardware.MONITORING_TYPE_FUSED_HARDWARE:
if (mFusedService == null) {
return false;
}
try {
mFusedService.addGeofences(new GeofenceHardwareRequestParcelable[]{request});
result=true;
}
 catch (RemoteException e) {
Log.e(TAG,"AddGeofence: RemoteException calling LocationManagerService");
result=false;
}
break;
default :
result=false;
}
if (result) {
Message m=mReaperHandler.obtainMessage(REAPER_GEOFENCE_ADDED,callback);
m.arg1=monitoringType;
mReaperHandler.sendMessage(m);
}
 else {
synchronized (mGeofences) {
mGeofences.remove(geofenceId);
}
}
if (DEBUG) Log.d(TAG,"addCircularFence: Result is: " + result);
return result;
}
