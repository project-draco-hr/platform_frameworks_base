{
  if (normComponents == null) {
    normComponents=new float[numComponents + normOffset];
  }
switch (transferType) {
case DataBuffer.TYPE_BYTE:
    byte ba[]=(byte[])pixel;
  for (int i=0, idx=normOffset; i < numComponents; i++, idx++) {
    normComponents[idx]=(ba[i] & 0xff) * scaleFactors[i];
  }
break;
case DataBuffer.TYPE_USHORT:
short usa[]=(short[])pixel;
for (int i=0, idx=normOffset; i < numComponents; i++, idx++) {
normComponents[idx]=(usa[i] & 0xffff) * scaleFactors[i];
}
break;
case DataBuffer.TYPE_INT:
int ia[]=(int[])pixel;
for (int i=0, idx=normOffset; i < numComponents; i++, idx++) {
normComponents[idx]=ia[i] * scaleFactors[i];
}
break;
case DataBuffer.TYPE_SHORT:
short sa[]=(short[])pixel;
for (int i=0, idx=normOffset; i < numComponents; i++, idx++) {
normComponents[idx]=sa[i] * scaleFactors[i];
}
break;
case DataBuffer.TYPE_FLOAT:
float fa[]=(float[])pixel;
for (int i=0, idx=normOffset; i < numComponents; i++, idx++) {
normComponents[idx]=fa[i];
}
break;
case DataBuffer.TYPE_DOUBLE:
double da[]=(double[])pixel;
for (int i=0, idx=normOffset; i < numComponents; i++, idx++) {
normComponents[idx]=(float)da[i];
}
break;
default :
throw new IllegalArgumentException(Messages.getString("awt.21A"));
}
if (needAlphaDivide) {
float alpha=normComponents[normOffset + numColorComponents];
for (int i=0, idx=normOffset; i < numColorComponents; i++, idx++) {
normComponents[idx]/=alpha;
}
}
if (needScale) {
for (int i=0, idx=normOffset; i < numColorComponents; i++, idx++) {
normComponents[idx]=minVals[i] + ranges[i] * normComponents[idx];
}
}
return normComponents;
}
