{
  is_sRGB=cs.isCS_sRGB();
  is_LINEAR_RGB=(cs == LUTColorConverter.LINEAR_RGB_CS);
  if (hasAlpha && bits[numColorComponents] != 8 && integral) {
    alphaLUT=new byte[maxValues[numColorComponents] + 1];
    for (int i=0; i <= maxValues[numColorComponents]; i++) {
      alphaLUT[i]=(byte)(scaleFactors[numColorComponents] * i + 0.5f);
    }
  }
  if (is_LINEAR_RGB) {
    if (maxBitLength > 8) {
      LINEAR_RGB_Length=16;
      from_LINEAR_RGB_LUT=LUTColorConverter.getFrom16lRGBtosRGB_LUT();
      to_LINEAR_16RGB_LUT=LUTColorConverter.getFromsRGBto16lRGB_LUT();
    }
 else {
      LINEAR_RGB_Length=8;
      from_LINEAR_RGB_LUT=LUTColorConverter.getFrom8lRGBtosRGB_LUT();
      to_LINEAR_8RGB_LUT=LUTColorConverter.getFromsRGBto8lRGB_LUT();
    }
    fFactor=((1 << LINEAR_RGB_Length) - 1);
  }
 else {
    fFactor=255.0f;
  }
  if (!isAlphaPremultiplied && integral) {
    colorLUTs=new byte[3][];
    if (is_sRGB) {
      for (int i=0; i < numColorComponents; i++) {
        if (bits[i] != 8) {
          for (int j=0; j < i; j++) {
            if (bits[i] == bits[j]) {
              colorLUTs[i]=colorLUTs[j];
              break;
            }
          }
          colorLUTs[i]=new byte[maxValues[i] + 1];
          for (int j=0; j <= maxValues[0]; j++) {
            colorLUTs[i][j]=(byte)(scaleFactors[i] * j + 0.5f);
          }
        }
      }
    }
    if (is_LINEAR_RGB) {
      for (int i=0; i < numColorComponents; i++) {
        if (bits[i] != LINEAR_RGB_Length) {
          for (int j=0; j < i; j++) {
            if (bits[i] == bits[j]) {
              colorLUTs[i]=colorLUTs[j];
              break;
            }
          }
          colorLUTs[i]=new byte[maxValues[i] + 1];
          for (int j=0; j <= maxValues[0]; j++) {
            int idx;
            if (LINEAR_RGB_Length == 8) {
              idx=(int)(scaleFactors[i] * j + 0.5f);
            }
 else {
              idx=(int)(scaleFactors[i] * j * 257.0f + 0.5f);
            }
            colorLUTs[i][j]=from_LINEAR_RGB_LUT[idx];
          }
        }
      }
    }
  }
}
