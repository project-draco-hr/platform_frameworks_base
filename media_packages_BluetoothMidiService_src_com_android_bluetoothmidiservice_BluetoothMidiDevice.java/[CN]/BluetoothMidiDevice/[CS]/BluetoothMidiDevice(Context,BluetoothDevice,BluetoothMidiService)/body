{
  mBluetoothDevice=device;
  mService=service;
  mBluetoothGatt=mBluetoothDevice.connectGatt(context,false,mGattCallback);
  mMidiManager=(MidiManager)context.getSystemService(Context.MIDI_SERVICE);
  Bundle properties=new Bundle();
  properties.putString(MidiDeviceInfo.PROPERTY_NAME,mBluetoothGatt.getDevice().getName());
  properties.putParcelable(MidiDeviceInfo.PROPERTY_BLUETOOTH_DEVICE,mBluetoothGatt.getDevice());
  MidiReceiver[] inputPortReceivers=new MidiReceiver[1];
  inputPortReceivers[0]=mEventScheduler.getReceiver();
  mDeviceServer=mMidiManager.createDeviceServer(inputPortReceivers,1,null,null,properties,MidiDeviceInfo.TYPE_BLUETOOTH,null);
  mOutputReceiver=mDeviceServer.getOutputPortReceivers()[0];
  new Thread("BluetoothMidiDevice " + mBluetoothDevice){
    @Override public void run(){
      while (true) {
        MidiEvent event;
        try {
          event=(MidiEvent)mEventScheduler.waitNextEvent();
        }
 catch (        InterruptedException e) {
          continue;
        }
        if (event == null) {
          break;
        }
        try {
          mPacketEncoder.sendWithTimestamp(event.data,0,event.count,event.getTimestamp());
        }
 catch (        IOException e) {
          Log.e(TAG,"mPacketAccumulator.sendWithTimestamp failed",e);
        }
        mEventScheduler.addEventToPool(event);
      }
      Log.d(TAG,"BluetoothMidiDevice thread exit");
    }
  }
.start();
}
