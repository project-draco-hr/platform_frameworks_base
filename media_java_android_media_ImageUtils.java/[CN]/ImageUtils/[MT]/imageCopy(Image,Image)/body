{
  if (src == null || dst == null) {
    throw new IllegalArgumentException("Images should be non-null");
  }
  if (src.getFormat() != dst.getFormat()) {
    throw new IllegalArgumentException("Src and dst images should have the same format");
  }
  if (src.getFormat() == ImageFormat.PRIVATE || dst.getFormat() == ImageFormat.PRIVATE) {
    throw new IllegalArgumentException("PRIVATE format images are not copyable");
  }
  if (!(dst.getOwner() instanceof ImageWriter)) {
    throw new IllegalArgumentException("Destination image is not from ImageWriter. Only" + " the images from ImageWriter are writable");
  }
  Size srcSize=new Size(src.getWidth(),src.getHeight());
  Size dstSize=new Size(dst.getWidth(),dst.getHeight());
  if (!srcSize.equals(dstSize)) {
    throw new IllegalArgumentException("source image size " + srcSize + " is different"+ " with "+ "destination image size "+ dstSize);
  }
  Plane[] srcPlanes=src.getPlanes();
  Plane[] dstPlanes=dst.getPlanes();
  ByteBuffer srcBuffer=null;
  ByteBuffer dstBuffer=null;
  for (int i=0; i < srcPlanes.length; i++) {
    srcBuffer=srcPlanes[i].getBuffer();
    int srcPos=srcBuffer.position();
    srcBuffer.rewind();
    dstBuffer=dstPlanes[i].getBuffer();
    dstBuffer.rewind();
    dstBuffer.put(srcBuffer);
    srcBuffer.position(srcPos);
    dstBuffer.rewind();
  }
}
