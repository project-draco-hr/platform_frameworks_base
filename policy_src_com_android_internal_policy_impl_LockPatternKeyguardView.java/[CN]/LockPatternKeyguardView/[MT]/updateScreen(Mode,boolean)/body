{
  if (DEBUG_CONFIGURATION)   Log.v(TAG,"**** UPDATE SCREEN: mode=" + mode + " last mode="+ mMode+ ", force = "+ force,new RuntimeException());
  mMode=mode;
  if (mode == Mode.LockScreen || mShowLockBeforeUnlock) {
    if (force || mLockScreen == null) {
      recreateLockScreen();
    }
  }
  final UnlockMode unlockMode=getUnlockMode();
  if (mode == Mode.UnlockScreen && unlockMode != UnlockMode.Unknown) {
    if (force || mUnlockScreen == null || unlockMode != mUnlockScreenMode) {
      boolean restartFaceLock=mFaceUnlock.stopIfRunning();
      recreateUnlockScreen(unlockMode);
      if (restartFaceLock || force) {
        mFaceUnlock.activateIfAble(mHasOverlay);
      }
    }
  }
  final View goneScreen=(mode == Mode.LockScreen) ? mUnlockScreen : mLockScreen;
  final View visibleScreen=(mode == Mode.LockScreen) ? mLockScreen : mUnlockScreen;
  mWindowController.setNeedsInput(((KeyguardScreen)visibleScreen).needsInput());
  if (DEBUG_CONFIGURATION) {
    Log.v(TAG,"Gone=" + goneScreen);
    Log.v(TAG,"Visible=" + visibleScreen);
  }
  if (mScreenOn) {
    if (goneScreen != null && goneScreen.getVisibility() == View.VISIBLE) {
      ((KeyguardScreen)goneScreen).onPause();
    }
    if (visibleScreen.getVisibility() != View.VISIBLE) {
      ((KeyguardScreen)visibleScreen).onResume();
    }
  }
  if (goneScreen != null) {
    goneScreen.setVisibility(View.GONE);
  }
  visibleScreen.setVisibility(View.VISIBLE);
  requestLayout();
  if (!visibleScreen.requestFocus()) {
    throw new IllegalStateException("keyguard screen must be able to take " + "focus when shown " + visibleScreen.getClass().getCanonicalName());
  }
}
