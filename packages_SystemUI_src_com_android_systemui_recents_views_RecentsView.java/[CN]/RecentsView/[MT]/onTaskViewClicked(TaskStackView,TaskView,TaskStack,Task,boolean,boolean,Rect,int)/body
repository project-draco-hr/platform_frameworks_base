{
  if (mCb != null) {
    mCb.onTaskViewClicked();
  }
  TaskViewTransform transform=new TaskViewTransform();
  View sourceView;
  int offsetX=0;
  int offsetY=0;
  float stackScroll=stackView.getScroller().getStackScroll();
  if (tv == null) {
    sourceView=stackView;
    offsetX=(int)transform.rect.left;
    offsetY=getMeasuredHeight();
  }
 else {
    sourceView=tv.mThumbnailView;
  }
  final SystemServicesProxy ssp=Recents.getSystemServices();
  boolean screenPinningRequested=false;
  ActivityOptions opts=ActivityOptions.makeBasic();
  ActivityOptions.OnAnimationStartedListener animStartedListener=null;
  final IAppTransitionAnimationSpecsFuture transitionFuture;
  if (task.thumbnail != null && task.thumbnail.getWidth() > 0 && task.thumbnail.getHeight() > 0) {
    animStartedListener=new ActivityOptions.OnAnimationStartedListener(){
      @Override public void onAnimationStarted(){
        cancelLaunchedTaskWindowTransition(task);
        if (lockToTask) {
          postDelayed(new Runnable(){
            @Override public void run(){
              EventBus.getDefault().send(new ScreenPinningRequestEvent(getContext(),ssp));
            }
          }
,350);
        }
      }
    }
;
    transitionFuture=getAppTransitionFuture(stackView,tv,offsetX,offsetY,stackScroll,destinationStack);
    screenPinningRequested=true;
  }
 else {
    transitionFuture=null;
  }
  if (boundsValid) {
    opts.setBounds(bounds.isEmpty() ? null : bounds);
  }
  final ActivityOptions launchOpts=opts;
  final boolean finalScreenPinningRequested=screenPinningRequested;
  final OnAnimationStartedListener finalAnimStartedListener=animStartedListener;
  final Runnable launchRunnable=new Runnable(){
    @Override public void run(){
      if (task.isActive) {
        ssp.moveTaskToFront(task.key.id,launchOpts);
      }
 else {
        if (ssp.startActivityFromRecents(getContext(),task.key.id,task.activityLabel,launchOpts)) {
          if (!finalScreenPinningRequested) {
            EventBus.getDefault().send(new ScreenPinningRequestEvent(getContext(),ssp));
          }
        }
 else {
          EventBus.getDefault().send(new DismissTaskViewEvent(task,tv));
          if (mCb != null) {
            mCb.onTaskLaunchFailed();
          }
          MetricsLogger.count(getContext(),"overview_task_launch_failed",1);
        }
      }
      if (transitionFuture != null) {
        IRemoteCallback.Stub callback=new IRemoteCallback.Stub(){
          @Override public void sendResult(          Bundle data) throws RemoteException {
            post(new Runnable(){
              @Override public void run(){
                if (finalAnimStartedListener != null) {
                  finalAnimStartedListener.onAnimationStarted();
                }
              }
            }
);
          }
        }
;
        try {
          WindowManagerGlobal.getWindowManagerService().overridePendingAppTransitionMultiThumbFuture(transitionFuture,callback,true);
        }
 catch (        RemoteException e) {
          Log.w(TAG,"Failed to override transition: " + e);
        }
      }
    }
  }
;
  int taskIndexFromFront=0;
  int taskIndex=stack.indexOfTask(task);
  if (taskIndex > -1) {
    taskIndexFromFront=stack.getTaskCount() - taskIndex - 1;
  }
  MetricsLogger.histogram(getContext(),"overview_task_launch_index",taskIndexFromFront);
  if (tv == null) {
    launchRunnable.run();
  }
 else {
    if (task.group != null && !task.group.isFrontMostTask(task)) {
      stackView.startLaunchTaskAnimation(tv,launchRunnable,lockToTask);
    }
 else {
      stackView.startLaunchTaskAnimation(tv,null,lockToTask);
      launchRunnable.run();
    }
  }
}
