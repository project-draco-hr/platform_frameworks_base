{
  final int GROUP_1_COUNT=10;
  final String GROUP_1_QUERY="group1 ";
  final String GROUP_1_LINE2="line2 ";
  writeEntries(GROUP_1_COUNT,GROUP_1_QUERY,GROUP_1_LINE2);
  checkOpenCursorCount(GROUP_1_COUNT);
  writeDelay();
  final int GROUP_2_COUNT=10;
  final String GROUP_2_QUERY="group2 ";
  final String GROUP_2_LINE2="line2 ";
  writeEntries(GROUP_2_COUNT,GROUP_2_QUERY,GROUP_2_LINE2);
  checkOpenCursorCount(GROUP_1_COUNT + GROUP_2_COUNT);
  writeDelay();
  final int GROUP_3_COUNT=5;
  final String GROUP_3_QUERY=GROUP_1_QUERY;
  final String GROUP_3_LINE2="refreshed ";
  writeEntries(GROUP_3_COUNT,GROUP_3_QUERY,GROUP_3_LINE2);
  checkOpenCursorCount(GROUP_1_COUNT + GROUP_2_COUNT);
  int newGroup1Count=GROUP_1_COUNT - GROUP_3_COUNT;
  checkResultCounts(GROUP_1_QUERY,newGroup1Count,newGroup1Count,null,GROUP_1_LINE2);
  checkResultCounts(GROUP_2_QUERY,GROUP_2_COUNT,GROUP_2_COUNT,null,null);
  checkResultCounts(GROUP_3_QUERY,GROUP_3_COUNT,GROUP_3_COUNT,null,GROUP_3_LINE2);
  Cursor c=getQueryCursor(null);
  int colQuery=c.getColumnIndexOrThrow(SearchManager.SUGGEST_COLUMN_QUERY);
  int colDisplay1=c.getColumnIndexOrThrow(SearchManager.SUGGEST_COLUMN_TEXT_1);
  int colDisplay2=c.getColumnIndex(SearchManager.SUGGEST_COLUMN_TEXT_2);
  c.moveToPosition(0);
  assertTrue("group 3 did not properly reorder to head of list",checkRow(c,colQuery,colDisplay1,colDisplay2,GROUP_3_QUERY,GROUP_3_LINE2));
  c.move(GROUP_3_COUNT - 1);
  assertTrue("group 3 did not properly reorder to head of list",checkRow(c,colQuery,colDisplay1,colDisplay2,GROUP_3_QUERY,GROUP_3_LINE2));
  c.move(1);
  assertTrue("group 2 not in expected position after reordering",checkRow(c,colQuery,colDisplay1,colDisplay2,GROUP_2_QUERY,GROUP_2_LINE2));
  c.move(GROUP_2_COUNT - 1);
  assertTrue("group 2 not in expected position after reordering",checkRow(c,colQuery,colDisplay1,colDisplay2,GROUP_2_QUERY,GROUP_2_LINE2));
  c.move(1);
  assertTrue("group 1 not in expected position after reordering",checkRow(c,colQuery,colDisplay1,colDisplay2,GROUP_1_QUERY,GROUP_1_LINE2));
  c.move(newGroup1Count - 1);
  assertTrue("group 1 not in expected position after reordering",checkRow(c,colQuery,colDisplay1,colDisplay2,GROUP_1_QUERY,GROUP_1_LINE2));
  c.close();
}
