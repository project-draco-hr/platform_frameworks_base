{
  final int action=message.what;
switch (action) {
case MSG_CREATE_PRINTER_DISCOVERY_SESSION:
{
      PrinterDiscoverySession session=onCreatePrinterDiscoverySession();
      if (session == null) {
        throw new NullPointerException("session cannot be null");
      }
      if (session.getId() == mLastSessionId) {
        throw new IllegalStateException("cannot reuse session instances");
      }
      mDiscoverySession=session;
      mLastSessionId=session.getId();
      session.setObserver(mClient);
    }
  break;
case MSG_DESTROY_PRINTER_DISCOVERY_SESSION:
{
  if (mDiscoverySession != null) {
    mDiscoverySession.destroy();
    mDiscoverySession=null;
  }
}
break;
case MSG_START_PRINTER_DISCOVERY:
{
if (mDiscoverySession != null) {
List<PrinterId> priorityList=(ArrayList<PrinterId>)message.obj;
mDiscoverySession.startPrinterDiscovery(priorityList);
}
}
break;
case MSG_STOP_PRINTER_DISCOVERY:
{
if (mDiscoverySession != null) {
mDiscoverySession.stopPrinterDiscovery();
}
}
break;
case MSG_VALIDATE_PRINTERS:
{
if (mDiscoverySession != null) {
List<PrinterId> printerIds=(List<PrinterId>)message.obj;
mDiscoverySession.validatePrinters(printerIds);
}
}
break;
case MSG_START_PRINTER_STATE_TRACKING:
{
if (mDiscoverySession != null) {
PrinterId printerId=(PrinterId)message.obj;
mDiscoverySession.startPrinterStateTracking(printerId);
}
}
break;
case MSG_STOP_PRINTER_STATE_TRACKING:
{
if (mDiscoverySession != null) {
PrinterId printerId=(PrinterId)message.obj;
mDiscoverySession.stopPrinterStateTracking(printerId);
}
}
break;
case MSG_ON_REQUEST_CANCEL_PRINTJOB:
{
PrintJobInfo printJobInfo=(PrintJobInfo)message.obj;
onRequestCancelPrintJob(new PrintJob(printJobInfo,mClient));
}
break;
case MSG_ON_PRINTJOB_QUEUED:
{
PrintJobInfo printJobInfo=(PrintJobInfo)message.obj;
if (DEBUG) {
Log.i(LOG_TAG,"Queued: " + printJobInfo);
}
onPrintJobQueued(new PrintJob(printJobInfo,mClient));
}
break;
case MSG_SET_CLEINT:
{
mClient=(IPrintServiceClient)message.obj;
if (mClient != null) {
onConnected();
}
 else {
onDisconnected();
}
}
break;
default :
{
throw new IllegalArgumentException("Unknown message: " + action);
}
}
}
