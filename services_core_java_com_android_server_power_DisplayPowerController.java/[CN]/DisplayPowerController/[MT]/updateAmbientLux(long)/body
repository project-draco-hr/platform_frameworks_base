{
  if (!mAmbientLuxValid) {
    final long timeWhenSensorWarmedUp=mLightSensorWarmUpTimeConfig + mLightSensorEnableTime;
    if (time < timeWhenSensorWarmedUp) {
      if (DEBUG) {
        Slog.d(TAG,"updateAmbientLux: Sensor not  ready yet: " + "time=" + time + ", timeWhenSensorWarmedUp="+ timeWhenSensorWarmedUp);
      }
      mHandler.sendEmptyMessageAtTime(MSG_UPDATE_AMBIENT_LUX,timeWhenSensorWarmedUp);
      return;
    }
    setAmbientLux(calculateAmbientLux(time));
    mAmbientLuxValid=true;
    if (DEBUG) {
      Slog.d(TAG,"updateAmbientLux: Initializing: " + "mAmbientLightRingBuffer=" + mAmbientLightRingBuffer + ", mAmbientLux="+ mAmbientLux);
    }
    updateAutoBrightness(true);
  }
  long nextBrightenTransition=nextAmbientLightBrighteningTransition(time);
  long nextDarkenTransition=nextAmbientLightDarkeningTransition(time);
  if (nextBrightenTransition == 0) {
    setAmbientLux(calculateAmbientLux(time));
    if (DEBUG) {
      Slog.d(TAG,"updateAmbientLux: Brightened: " + "mBrighteningLuxThreshold=" + mBrighteningLuxThreshold + ", mAmbientLightRingBuffer="+ mAmbientLightRingBuffer+ ", mAmbientLux="+ mAmbientLux);
    }
    updateAutoBrightness(true);
    nextBrightenTransition=nextAmbientLightBrighteningTransition(time);
  }
 else   if (nextDarkenTransition == 0) {
    setAmbientLux(calculateAmbientLux(time));
    if (DEBUG) {
      Slog.d(TAG,"updateAmbientLux: Darkened: " + "mDarkeningLuxThreshold=" + mDarkeningLuxThreshold + ", mAmbientLightRingBuffer="+ mAmbientLightRingBuffer+ ", mAmbientLux="+ mAmbientLux);
    }
    updateAutoBrightness(true);
    nextDarkenTransition=nextAmbientLightDarkeningTransition(time);
  }
  long nextTransitionTime=Math.min(nextDarkenTransition,nextBrightenTransition);
  if (nextTransitionTime > time) {
    if (DEBUG) {
      Slog.d(TAG,"updateAmbientLux: Scheduling ambient lux update for " + nextTransitionTime + TimeUtils.formatUptime(nextTransitionTime));
    }
    mHandler.sendEmptyMessageAtTime(MSG_UPDATE_AMBIENT_LUX,nextTransitionTime);
  }
}
