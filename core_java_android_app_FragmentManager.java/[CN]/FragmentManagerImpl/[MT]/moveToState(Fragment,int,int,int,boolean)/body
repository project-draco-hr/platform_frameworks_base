{
  if (DEBUG && false)   Log.v(TAG,"moveToState: " + f + " oldState="+ f.mState+ " newState="+ newState+ " mRemoving="+ f.mRemoving+ " Callers="+ Debug.getCallers(5));
  if ((!f.mAdded || f.mDetached) && newState > Fragment.CREATED) {
    newState=Fragment.CREATED;
  }
  if (f.mRemoving && newState > f.mState) {
    newState=f.mState;
  }
  if (f.mDeferStart && f.mState < Fragment.STARTED && newState > Fragment.STOPPED) {
    newState=Fragment.STOPPED;
  }
  if (f.mState < newState) {
    if (f.mFromLayout && !f.mInLayout) {
      return;
    }
    if (f.mAnimatingAway != null) {
      f.mAnimatingAway=null;
      moveToState(f,f.mStateAfterAnimating,0,0,true);
    }
switch (f.mState) {
case Fragment.INITIALIZING:
      if (DEBUG)       Log.v(TAG,"moveto CREATED: " + f);
    if (f.mSavedFragmentState != null) {
      f.mSavedViewState=f.mSavedFragmentState.getSparseParcelableArray(FragmentManagerImpl.VIEW_STATE_TAG);
      f.mTarget=getFragment(f.mSavedFragmentState,FragmentManagerImpl.TARGET_STATE_TAG);
      if (f.mTarget != null) {
        f.mTargetRequestCode=f.mSavedFragmentState.getInt(FragmentManagerImpl.TARGET_REQUEST_CODE_STATE_TAG,0);
      }
      f.mUserVisibleHint=f.mSavedFragmentState.getBoolean(FragmentManagerImpl.USER_VISIBLE_HINT_TAG,true);
      if (!f.mUserVisibleHint) {
        f.mDeferStart=true;
        if (newState > Fragment.STOPPED) {
          newState=Fragment.STOPPED;
        }
      }
    }
  f.mActivity=mActivity;
f.mParentFragment=mParent;
f.mFragmentManager=mParent != null ? mParent.mChildFragmentManager : mActivity.mFragments;
f.mCalled=false;
f.onAttach(mActivity);
if (!f.mCalled) {
throw new SuperNotCalledException("Fragment " + f + " did not call through to super.onAttach()");
}
if (f.mParentFragment == null) {
mActivity.onAttachFragment(f);
}
if (!f.mRetaining) {
f.performCreate(f.mSavedFragmentState);
}
f.mRetaining=false;
if (f.mFromLayout) {
f.mView=f.performCreateView(f.getLayoutInflater(f.mSavedFragmentState),null,f.mSavedFragmentState);
if (f.mView != null) {
f.mView.setSaveFromParentEnabled(false);
if (f.mHidden) f.mView.setVisibility(View.GONE);
f.onViewCreated(f.mView,f.mSavedFragmentState);
}
}
case Fragment.CREATED:
if (newState > Fragment.CREATED) {
if (DEBUG) Log.v(TAG,"moveto ACTIVITY_CREATED: " + f);
if (!f.mFromLayout) {
ViewGroup container=null;
if (f.mContainerId != 0) {
container=(ViewGroup)mContainer.findViewById(f.mContainerId);
if (container == null && !f.mRestored) {
throwException(new IllegalArgumentException("No view found for id 0x" + Integer.toHexString(f.mContainerId) + " ("+ f.getResources().getResourceName(f.mContainerId)+ ") for fragment "+ f));
}
}
f.mContainer=container;
f.mView=f.performCreateView(f.getLayoutInflater(f.mSavedFragmentState),container,f.mSavedFragmentState);
if (f.mView != null) {
f.mView.setSaveFromParentEnabled(false);
if (container != null) {
Animator anim=loadAnimator(f,transit,true,transitionStyle);
if (anim != null) {
anim.setTarget(f.mView);
anim.start();
}
container.addView(f.mView);
}
if (f.mHidden) f.mView.setVisibility(View.GONE);
f.onViewCreated(f.mView,f.mSavedFragmentState);
}
}
f.performActivityCreated(f.mSavedFragmentState);
if (f.mView != null) {
f.restoreViewState(f.mSavedFragmentState);
}
f.mSavedFragmentState=null;
}
case Fragment.ACTIVITY_CREATED:
case Fragment.STOPPED:
if (newState > Fragment.STOPPED) {
if (DEBUG) Log.v(TAG,"moveto STARTED: " + f);
f.performStart();
}
case Fragment.STARTED:
if (newState > Fragment.STARTED) {
if (DEBUG) Log.v(TAG,"moveto RESUMED: " + f);
f.mResumed=true;
f.performResume();
f.mSavedFragmentState=null;
f.mSavedViewState=null;
}
}
}
 else if (f.mState > newState) {
switch (f.mState) {
case Fragment.RESUMED:
if (newState < Fragment.RESUMED) {
if (DEBUG) Log.v(TAG,"movefrom RESUMED: " + f);
f.performPause();
f.mResumed=false;
}
case Fragment.STARTED:
if (newState < Fragment.STARTED) {
if (DEBUG) Log.v(TAG,"movefrom STARTED: " + f);
f.performStop();
}
case Fragment.STOPPED:
case Fragment.ACTIVITY_CREATED:
if (newState < Fragment.ACTIVITY_CREATED) {
if (DEBUG) Log.v(TAG,"movefrom ACTIVITY_CREATED: " + f);
if (f.mView != null) {
if (!mActivity.isFinishing() && f.mSavedViewState == null) {
saveFragmentViewState(f);
}
}
f.performDestroyView();
if (f.mView != null && f.mContainer != null) {
Animator anim=null;
if (mCurState > Fragment.INITIALIZING && !mDestroyed) {
anim=loadAnimator(f,transit,false,transitionStyle);
}
if (anim != null) {
final ViewGroup container=f.mContainer;
final View view=f.mView;
final Fragment fragment=f;
container.startViewTransition(view);
f.mAnimatingAway=anim;
f.mStateAfterAnimating=newState;
anim.addListener(new AnimatorListenerAdapter(){
@Override public void onAnimationEnd(Animator anim){
container.endViewTransition(view);
if (fragment.mAnimatingAway != null) {
fragment.mAnimatingAway=null;
moveToState(fragment,fragment.mStateAfterAnimating,0,0,true);
}
}
}
);
anim.setTarget(f.mView);
anim.start();
}
f.mContainer.removeView(f.mView);
}
f.mContainer=null;
f.mView=null;
}
case Fragment.CREATED:
if (newState < Fragment.CREATED) {
if (mDestroyed) {
if (f.mAnimatingAway != null) {
Animator anim=f.mAnimatingAway;
f.mAnimatingAway=null;
anim.cancel();
}
}
if (f.mAnimatingAway != null) {
f.mStateAfterAnimating=newState;
newState=Fragment.CREATED;
}
 else {
if (DEBUG) Log.v(TAG,"movefrom CREATED: " + f);
if (!f.mRetaining) {
f.performDestroy();
}
f.mCalled=false;
f.onDetach();
if (!f.mCalled) {
throw new SuperNotCalledException("Fragment " + f + " did not call through to super.onDetach()");
}
if (!keepActive) {
if (!f.mRetaining) {
makeInactive(f);
}
 else {
f.mActivity=null;
f.mParentFragment=null;
f.mFragmentManager=null;
}
}
}
}
}
}
f.mState=newState;
}
