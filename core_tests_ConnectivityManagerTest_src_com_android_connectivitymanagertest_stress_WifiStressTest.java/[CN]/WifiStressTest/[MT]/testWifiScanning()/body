{
  int scanTimeSum=0;
  int i;
  int ssidAppearInScanResultsCount=0;
  for (i=0; i < mScanIterations; i++) {
    log("testWifiScanning: iteration: " + i);
    int averageScanTime=0;
    if (i > 0) {
      averageScanTime=scanTimeSum / i;
    }
    writeOutput(String.format("iteration %d out of %d",i,mScanIterations));
    writeOutput(String.format("average scanning time is %d",averageScanTime));
    writeOutput(String.format("ssid appear %d out of %d scan iterations",ssidAppearInScanResultsCount,i));
    long startTime=System.currentTimeMillis();
    scanResultAvailable=false;
    assertTrue("start scan failed",mWifiManager.startScan());
    while (true) {
      if ((System.currentTimeMillis() - startTime) > WIFI_SCAN_TIMEOUT) {
        fail("Wifi scanning takes more than " + WIFI_SCAN_TIMEOUT + " ms");
      }
synchronized (this) {
        try {
          wait(WAIT_FOR_SCAN_RESULT);
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
        if (scanResultAvailable) {
          long scanTime=(System.currentTimeMillis() - startTime);
          scanTimeSum+=scanTime;
          break;
        }
      }
    }
    if ((mWifiManager.getScanResults() == null) || (mWifiManager.getScanResults().size() <= 0)) {
      fail("Scan results are empty ");
    }
    List<ScanResult> netList=mWifiManager.getScanResults();
    if (netList != null) {
      log("size of scan result list: " + netList.size());
      for (int s=0; s < netList.size(); s++) {
        ScanResult sr=netList.get(s);
        log(String.format("scan result for %s is: %s",sr.SSID,sr.toString()));
        log(String.format("signal level for %s is %d ",sr.SSID,sr.level));
        if (sr.SSID.equals(mSsid)) {
          ssidAppearInScanResultsCount+=1;
          log("Number of times " + mSsid + " appear in the scan list: "+ ssidAppearInScanResultsCount);
          break;
        }
      }
    }
  }
  if (i == mScanIterations) {
    writeOutput(String.format("iteration %d out of %d",i,mScanIterations));
    writeOutput(String.format("average scanning time is %d",scanTimeSum / mScanIterations));
    writeOutput(String.format("ssid appear %d out of %d scan iterations",ssidAppearInScanResultsCount,mScanIterations));
  }
}
