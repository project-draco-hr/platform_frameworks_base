{
  long scanTimeSum=0, i, averageScanTime=-1;
  int ssidAppearInScanResultsCount=0;
  for (i=1; i <= mScanIterations; i++) {
    logv("testWifiScanning: iteration: " + i);
    averageScanTime=scanTimeSum / i;
    writeOutput(String.format("iteration %d out of %d",i,mScanIterations));
    writeOutput(String.format("average scanning time is %d",averageScanTime));
    writeOutput(String.format("ssid appear %d out of %d scan iterations",ssidAppearInScanResultsCount,i));
    List<ScanResult> scanResultLocal=null;
    long start=0;
synchronized (mWifiScanResultLock) {
      start=SystemClock.uptimeMillis();
      assertTrue("start scan failed",mWifiManager.startScan());
      try {
        mWifiScanResultLock.wait(WAIT_FOR_SCAN_RESULT);
      }
 catch (      InterruptedException e) {
      }
      scanTimeSum+=SystemClock.uptimeMillis() - start;
      scanResultLocal=mLastScanResult;
    }
    if (scanResultLocal == null || scanResultLocal.isEmpty()) {
      fail("Scan results are empty ");
    }
    logv("size of scan result list: " + scanResultLocal.size());
    for (    ScanResult sr : scanResultLocal) {
      logv(String.format("scan result: " + sr.toString()));
      if (mSsid.equals(sr.SSID)) {
        ssidAppearInScanResultsCount+=1;
        break;
      }
    }
  }
  Bundle result=new Bundle();
  result.putLong("actual-iterations",i - 1);
  result.putLong("avg-scan-time",averageScanTime);
  result.putInt("ap-discovered",ssidAppearInScanResultsCount);
  getInstrumentation().sendStatus(Activity.RESULT_FIRST_USER,result);
  if (i == mScanIterations + 1) {
    writeOutput(String.format("iteration %d out of %d",i - 1,mScanIterations));
    writeOutput(String.format("average scanning time is %d",scanTimeSum / (i - 1)));
    writeOutput(String.format("ssid appear %d out of %d scan iterations",ssidAppearInScanResultsCount,i - 1));
  }
}
