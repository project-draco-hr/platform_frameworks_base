{
  int value=Settings.Global.getInt(mRunner.getContext().getContentResolver(),Settings.Global.WIFI_SLEEP_POLICY,-1);
  log("wifi sleep policy is: " + value);
  if (value != Settings.Global.WIFI_SLEEP_POLICY_DEFAULT) {
    Settings.Global.putInt(mRunner.getContext().getContentResolver(),Settings.Global.WIFI_SLEEP_POLICY,Settings.Global.WIFI_SLEEP_POLICY_DEFAULT);
    log("set wifi sleep policy to default value");
  }
  Settings.Global.putLong(mRunner.getContext().getContentResolver(),Settings.Global.WIFI_IDLE_MS,WIFI_IDLE_MS);
  WifiConfiguration config=new WifiConfiguration();
  config.SSID=mSsid;
  config.allowedKeyManagement.set(KeyMgmt.WPA_PSK);
  if (mPassword.matches("[0-9A-Fa-f]{64}")) {
    config.preSharedKey=mPassword;
  }
 else {
    config.preSharedKey='"' + mPassword + '"';
  }
  config.setIpAssignment(IpAssignment.DHCP);
  config.setProxySettings(ProxySettings.NONE);
  assertTrue("Failed to connect to Wi-Fi network: " + mSsid,connectToWifiWithConfiguration(config));
  assertTrue(waitForWifiState(WifiManager.WIFI_STATE_ENABLED,SHORT_TIMEOUT));
  assertTrue(waitForNetworkState(ConnectivityManager.TYPE_WIFI,State.CONNECTED,WIFI_CONNECTION_TIMEOUT));
  assertTrue("Wi-Fi is connected, but no data connection.",pingTest(null));
  int i;
  long sum=0;
  for (i=0; i < mReconnectIterations; i++) {
    writeOutput(String.format("iteration %d out of %d",i,mReconnectIterations));
    log("iteration: " + i);
    turnScreenOff();
    long start=SystemClock.uptimeMillis();
    PowerManager pm=(PowerManager)mRunner.getContext().getSystemService(Context.POWER_SERVICE);
    while (pm.isScreenOn() && ((SystemClock.uptimeMillis() - start) < SCREEN_OFF_TIMER)) {
      sleep(100,"wait for screen off");
    }
    assertFalse(pm.isScreenOn());
    sleep(WIFI_IDLE_MS + WIFI_SHUTDOWN_DELAY,"Interruped while wait for wifi to be idle");
    assertTrue("Wait for Wi-Fi to idle timeout",waitForNetworkState(ConnectivityManager.TYPE_WIFI,State.DISCONNECTED,6 * SHORT_TIMEOUT));
    if (!mWifiOnlyFlag) {
      assertTrue("Wait for cellular connection timeout",waitForNetworkState(ConnectivityManager.TYPE_MOBILE,State.CONNECTED,2 * LONG_TIMEOUT));
    }
    sleep(mWifiSleepTime,"Interrupted while device is in sleep mode");
    assertEquals("Wi-Fi is reconnected",State.DISCONNECTED,mCM.getNetworkInfo(ConnectivityManager.TYPE_WIFI).getState());
    if (!mWifiOnlyFlag) {
      assertEquals("Cellular connection is down",State.CONNECTED,mCM.getNetworkInfo(ConnectivityManager.TYPE_MOBILE).getState());
      assertTrue("Mobile is connected, but no data connection.",pingTest(null));
    }
    turnScreenOn();
    sleep(2 * 1000,"wait 2 seconds for lock screen");
    mRunner.sendKeyDownUpSync(KeyEvent.KEYCODE_MENU);
    long startTime=SystemClock.uptimeMillis();
    assertTrue("Wait for Wi-Fi enable timeout after wake up",waitForWifiState(WifiManager.WIFI_STATE_ENABLED,SHORT_TIMEOUT));
    assertTrue("Wait for Wi-Fi connection timeout after wake up",waitForNetworkState(ConnectivityManager.TYPE_WIFI,State.CONNECTED,WIFI_CONNECTION_TIMEOUT));
    long connectionTime=SystemClock.uptimeMillis() - startTime;
    sum+=connectionTime;
    log("average reconnection time is: " + sum / (i + 1));
    assertTrue("Reconnect to Wi-Fi network, but no data connection.",pingTest(null));
  }
  if (i == mReconnectIterations) {
    writeOutput(String.format("iteration %d out of %d",i,mReconnectIterations));
  }
}
