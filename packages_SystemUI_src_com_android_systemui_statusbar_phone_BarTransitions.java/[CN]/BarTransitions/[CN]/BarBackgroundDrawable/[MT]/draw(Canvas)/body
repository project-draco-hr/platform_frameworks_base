{
  int targetGradientAlpha=0, targetColor=0;
  if (mMode == MODE_WARNING) {
    targetColor=mWarning;
  }
 else   if (mMode == MODE_TRANSLUCENT) {
    targetColor=mSemiTransparent;
  }
 else   if (mMode == MODE_SEMI_TRANSPARENT) {
    targetColor=mSemiTransparent;
  }
 else   if (mMode == MODE_TRANSPARENT || mMode == MODE_LIGHTS_OUT_TRANSPARENT) {
    targetColor=mTransparent;
  }
 else {
    targetColor=mOpaque;
  }
  if (!mAnimating) {
    mColor=targetColor;
    mGradientAlpha=targetGradientAlpha;
  }
 else {
    final long now=SystemClock.elapsedRealtime();
    if (now >= mEndTime) {
      mAnimating=false;
      mColor=targetColor;
      mGradientAlpha=targetGradientAlpha;
    }
 else {
      final float t=(now - mStartTime) / (float)(mEndTime - mStartTime);
      final float v=Math.max(0,Math.min(Interpolators.LINEAR.getInterpolation(t),1));
      mGradientAlpha=(int)(v * targetGradientAlpha + mGradientAlphaStart * (1 - v));
      mColor=Color.argb((int)(v * Color.alpha(targetColor) + Color.alpha(mColorStart) * (1 - v)),(int)(v * Color.red(targetColor) + Color.red(mColorStart) * (1 - v)),(int)(v * Color.green(targetColor) + Color.green(mColorStart) * (1 - v)),(int)(v * Color.blue(targetColor) + Color.blue(mColorStart) * (1 - v)));
    }
  }
  if (mGradientAlpha > 0) {
    mGradient.setAlpha(mGradientAlpha);
    mGradient.draw(canvas);
  }
  if (Color.alpha(mColor) > 0) {
    canvas.drawColor(mColor);
  }
  if (mAnimating) {
    invalidateSelf();
  }
}
