{
  final int hash;
  int index;
  if (key == null) {
    hash=0;
    index=indexOfNull();
  }
 else {
    hash=key.hashCode();
    index=indexOf(key,hash);
  }
  if (index >= 0) {
    index=(index << 1) + 1;
    final V old=(V)mArray[index];
    mArray[index]=value;
    return old;
  }
  index=~index;
  if (mSize >= mHashes.length) {
    final int n=mSize >= (BASE_SIZE * 2) ? (mSize + (mSize >> 1)) : (mSize >= BASE_SIZE ? (BASE_SIZE * 2) : BASE_SIZE);
    if (DEBUG)     Log.d(TAG,"put: grow from " + mHashes.length + " to "+ n);
    final int[] ohashes=mHashes;
    final Object[] oarray=mArray;
    allocArrays(n);
    if (mHashes.length > 0) {
      if (DEBUG)       Log.d(TAG,"put: copy 0-" + mSize + " to 0");
      System.arraycopy(ohashes,0,mHashes,0,ohashes.length);
      System.arraycopy(oarray,0,mArray,0,oarray.length);
    }
    freeArrays(ohashes,oarray,mSize);
  }
  if (index < mSize) {
    if (DEBUG)     Log.d(TAG,"put: move " + index + "-"+ (mSize - index)+ " to "+ (index + 1));
    System.arraycopy(mHashes,index,mHashes,index + 1,mSize - index);
    System.arraycopy(mArray,index << 1,mArray,(index + 1) << 1,(mSize - index) << 1);
  }
  mHashes[index]=hash;
  mArray[index << 1]=key;
  mArray[(index << 1) + 1]=value;
  mSize++;
  return null;
}
