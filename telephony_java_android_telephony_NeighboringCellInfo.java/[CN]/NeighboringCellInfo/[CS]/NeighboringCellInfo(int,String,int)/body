{
  mRssi=rssi;
  mNetworkType=NETWORK_TYPE_UNKNOWN;
  mPsc=UNKNOWN_CID;
  mLac=UNKNOWN_CID;
  mCid=UNKNOWN_CID;
  int l=location.length();
  if (l > 8)   return;
  if (l < 8) {
    for (int i=0; i < (8 - l); i++) {
      location="0" + location;
    }
  }
  try {
switch (radioType) {
case NETWORK_TYPE_GPRS:
case NETWORK_TYPE_EDGE:
      mNetworkType=radioType;
    if (!location.equalsIgnoreCase("FFFFFFFF")) {
      mCid=Integer.parseInt(location.substring(4),16);
      mLac=Integer.parseInt(location.substring(0,4),16);
    }
  break;
case NETWORK_TYPE_UMTS:
case NETWORK_TYPE_HSDPA:
case NETWORK_TYPE_HSUPA:
case NETWORK_TYPE_HSPA:
mNetworkType=radioType;
mPsc=Integer.parseInt(location,16);
break;
}
}
 catch (NumberFormatException e) {
mPsc=UNKNOWN_CID;
mLac=UNKNOWN_CID;
mCid=UNKNOWN_CID;
mNetworkType=NETWORK_TYPE_UNKNOWN;
}
}
