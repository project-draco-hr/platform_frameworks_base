{
switch (msg.what) {
case GLOBAL_PSS:
{
      if (mHaveGlobalPss) {
        mHaveGlobalPss=false;
        if (localLOGV)         Log.v(TAG,"Received global pss, logging.");
        logGlobalMemory();
      }
    }
  break;
case MONITOR:
{
  if (mHavePss) {
    mHavePss=false;
    if (localLOGV)     Log.v(TAG,"Have pss, checking memory.");
    checkMemory();
  }
  if (mHaveGlobalPss) {
    mHaveGlobalPss=false;
    if (localLOGV)     Log.v(TAG,"Have global pss, logging.");
    logGlobalMemory();
  }
  long now=SystemClock.uptimeMillis();
  int rebootInterval=mReqRebootInterval >= 0 ? mReqRebootInterval : Settings.Gservices.getInt(mResolver,Settings.Gservices.REBOOT_INTERVAL,REBOOT_DEFAULT_INTERVAL);
  if (mRebootInterval != rebootInterval) {
    mRebootInterval=rebootInterval;
    checkReboot(false);
  }
  long memCheckInterval=Settings.Gservices.getLong(mResolver,Settings.Gservices.MEMCHECK_INTERVAL,MEMCHECK_DEFAULT_INTERVAL) * 1000;
  if ((mLastMemCheckTime + memCheckInterval) < now) {
    mLastMemCheckTime=now;
    if (localLOGV)     Log.v(TAG,"Collecting memory usage.");
    collectMemory();
    mHavePss=true;
    long memCheckRealtimeInterval=Settings.Gservices.getLong(mResolver,Settings.Gservices.MEMCHECK_LOG_REALTIME_INTERVAL,MEMCHECK_DEFAULT_LOG_REALTIME_INTERVAL) * 1000;
    long realtimeNow=SystemClock.elapsedRealtime();
    if ((mLastMemCheckRealtime + memCheckRealtimeInterval) < realtimeNow) {
      mLastMemCheckRealtime=realtimeNow;
      if (localLOGV)       Log.v(TAG,"Collecting global memory usage.");
      collectGlobalMemory();
      mHaveGlobalPss=true;
    }
  }
  final int size=mMonitors.size();
  for (int i=0; i < size; i++) {
    mCurrentMonitor=mMonitors.get(i);
    mCurrentMonitor.monitor();
  }
synchronized (Watchdog.this) {
    mCompleted=true;
    mCurrentMonitor=null;
  }
}
break;
}
}
