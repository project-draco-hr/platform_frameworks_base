{
  List<PendingIntent> enterIntents=new LinkedList<PendingIntent>();
  List<PendingIntent> exitIntents=new LinkedList<PendingIntent>();
synchronized (mLock) {
    mLastLocation=location;
    removeExpiredFencesLocked();
    for (    GeofenceState state : mFences) {
      if (mBlacklist.isBlacklisted(state.mPackageName)) {
        if (D)         Log.d(TAG,"skipping geofence processing for blacklisted app: " + state.mPackageName);
        continue;
      }
      int event=state.processLocation(location);
      if ((event & GeofenceState.FLAG_ENTER) != 0) {
        enterIntents.add(state.mIntent);
      }
      if ((event & GeofenceState.FLAG_EXIT) != 0) {
        exitIntents.add(state.mIntent);
      }
    }
    updateProviderRequirementsLocked();
  }
  for (  PendingIntent intent : exitIntents) {
    sendIntentExit(intent);
  }
  for (  PendingIntent intent : enterIntents) {
    sendIntentEnter(intent);
  }
}
