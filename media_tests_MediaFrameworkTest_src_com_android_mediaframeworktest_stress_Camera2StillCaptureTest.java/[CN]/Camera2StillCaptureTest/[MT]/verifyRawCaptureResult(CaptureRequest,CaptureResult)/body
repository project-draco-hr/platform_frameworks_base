{
  assertNotNull(rawRequest);
  assertNotNull(rawResult);
  Rational[] empty=new Rational[]{Rational.ZERO,Rational.ZERO,Rational.ZERO};
  Rational[] neutralColorPoint=mCollector.expectKeyValueNotNull("NeutralColorPoint",rawResult,CaptureResult.SENSOR_NEUTRAL_COLOR_POINT);
  if (neutralColorPoint != null) {
    mCollector.expectEquals("NeutralColorPoint length",empty.length,neutralColorPoint.length);
    mCollector.expectNotEquals("NeutralColorPoint cannot be all zeroes, ",empty,neutralColorPoint);
    mCollector.expectValuesGreaterOrEqual("NeutralColorPoint",neutralColorPoint,Rational.ZERO);
  }
  mCollector.expectKeyValueGreaterOrEqual(rawResult,CaptureResult.SENSOR_GREEN_SPLIT,0.0f);
  Pair<Double,Double>[] noiseProfile=mCollector.expectKeyValueNotNull("NoiseProfile",rawResult,CaptureResult.SENSOR_NOISE_PROFILE);
  if (noiseProfile != null) {
    mCollector.expectEquals("NoiseProfile length",noiseProfile.length,4);
    for (    Pair<Double,Double> p : noiseProfile) {
      mCollector.expectTrue("NoiseProfile coefficients " + p + " must have: S > 0, O >= 0",p.first > 0 && p.second >= 0);
    }
  }
  Integer hotPixelMode=mCollector.expectKeyValueNotNull("HotPixelMode",rawResult,CaptureResult.HOT_PIXEL_MODE);
  Boolean hotPixelMapMode=mCollector.expectKeyValueNotNull("HotPixelMapMode",rawResult,CaptureResult.STATISTICS_HOT_PIXEL_MAP_MODE);
  Point[] hotPixelMap=rawResult.get(CaptureResult.STATISTICS_HOT_PIXEL_MAP);
  Size pixelArraySize=mStaticInfo.getPixelArraySizeChecked();
  boolean[] availableHotPixelMapModes=mStaticInfo.getValueFromKeyNonNull(CameraCharacteristics.STATISTICS_INFO_AVAILABLE_HOT_PIXEL_MAP_MODES);
  if (hotPixelMode != null) {
    Integer requestMode=mCollector.expectKeyValueNotNull(rawRequest,CaptureRequest.HOT_PIXEL_MODE);
    if (requestMode != null) {
      mCollector.expectKeyValueEquals(rawResult,CaptureResult.HOT_PIXEL_MODE,requestMode);
    }
  }
  if (hotPixelMapMode != null) {
    Boolean requestMapMode=mCollector.expectKeyValueNotNull(rawRequest,CaptureRequest.STATISTICS_HOT_PIXEL_MAP_MODE);
    if (requestMapMode != null) {
      mCollector.expectKeyValueEquals(rawResult,CaptureResult.STATISTICS_HOT_PIXEL_MAP_MODE,requestMapMode);
    }
    if (!hotPixelMapMode) {
      mCollector.expectTrue("HotPixelMap must be empty",hotPixelMap == null || hotPixelMap.length == 0);
    }
 else {
      mCollector.expectTrue("HotPixelMap must not be empty",hotPixelMap != null);
      mCollector.expectNotNull("AvailableHotPixelMapModes must not be null",availableHotPixelMapModes);
      if (availableHotPixelMapModes != null) {
        mCollector.expectContains("HotPixelMapMode",availableHotPixelMapModes,true);
      }
      int height=pixelArraySize.getHeight();
      int width=pixelArraySize.getWidth();
      for (      Point p : hotPixelMap) {
        mCollector.expectTrue("Hotpixel " + p + " must be in pixelArray "+ pixelArraySize,p.x >= 0 && p.x < width && p.y >= 0 && p.y < height);
      }
    }
  }
}
