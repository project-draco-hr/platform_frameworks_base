{
  mSortedAndFiltered.clear();
  mGroupsWithSummaries.clear();
  final int N=mEntries.size();
  for (int i=0; i < N; i++) {
    Entry entry=mEntries.valueAt(i);
    StatusBarNotification sbn=entry.notification;
    if (shouldFilterOut(sbn)) {
      continue;
    }
    if (sbn.getNotification().isGroupSummary()) {
      mGroupsWithSummaries.add(sbn.getGroupKey());
    }
    mSortedAndFiltered.add(entry);
  }
  if (!mGroupsWithSummaries.isEmpty()) {
    final int M=mSortedAndFiltered.size();
    for (int i=M - 1; i >= 0; i--) {
      Entry ent=mSortedAndFiltered.get(i);
      StatusBarNotification sbn=ent.notification;
      if (sbn.getNotification().isGroupChild() && mGroupsWithSummaries.contains(sbn.getGroupKey())) {
        mSortedAndFiltered.remove(i);
      }
    }
  }
  Collections.sort(mSortedAndFiltered,mRankingComparator);
}
