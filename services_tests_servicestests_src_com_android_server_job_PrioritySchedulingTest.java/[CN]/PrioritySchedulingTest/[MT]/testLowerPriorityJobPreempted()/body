{
  JobInfo job1=new JobInfo.Builder(111,kJobServiceComponent).setPriority(1).setOverrideDeadline(7000L).build();
  JobInfo job2=new JobInfo.Builder(222,kJobServiceComponent).setPriority(1).setOverrideDeadline(7000L).build();
  JobInfo job3=new JobInfo.Builder(333,kJobServiceComponent).setPriority(1).setOverrideDeadline(7000L).build();
  JobInfo job4=new JobInfo.Builder(444,kJobServiceComponent).setPriority(2).setMinimumLatency(2000L).setOverrideDeadline(7000L).build();
  mJobScheduler.schedule(job1);
  mJobScheduler.schedule(job2);
  mJobScheduler.schedule(job3);
  mJobScheduler.schedule(job4);
  Thread.sleep(10000);
  Event job4Execution=new Event(TestEnvironment.EVENT_START_JOB,444);
  ArrayList<Event> executedEvents=kTestEnvironment.getExecutedEvents();
  boolean wasJob4Executed=executedEvents.contains(job4Execution);
  boolean wasSomeJobPreempted=false;
  for (  Event event : executedEvents) {
    if (event.event == TestEnvironment.EVENT_PREEMPT_JOB) {
      wasSomeJobPreempted=true;
      break;
    }
  }
  assertTrue("No job was preempted.",wasSomeJobPreempted);
  assertTrue("Lower priority jobs were not preempted.",wasJob4Executed);
}
