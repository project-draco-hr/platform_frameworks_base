{
  final SimpleMonthView v=new SimpleMonthView(container.getContext());
  v.setOnDayClickListener(mOnDayClickListener);
  v.setMonthTextAppearance(mMonthTextAppearance);
  v.setDayOfWeekTextAppearance(mDayOfWeekTextAppearance);
  v.setDayTextAppearance(mDayTextAppearance);
  if (mDaySelectorColor != null) {
    v.setDaySelectorColor(mDaySelectorColor);
  }
  if (mDayHighlightColor != null) {
    v.setDayHighlightColor(mDayHighlightColor);
  }
  if (mCalendarTextColor != null) {
    v.setMonthTextColor(mCalendarTextColor);
    v.setDayOfWeekTextColor(mCalendarTextColor);
    v.setDayTextColor(mCalendarTextColor);
  }
  final int month=getMonthForPosition(position);
  final int year=getYearForPosition(position);
  final int selectedDay;
  if (mSelectedDay.get(Calendar.MONTH) == month) {
    selectedDay=mSelectedDay.get(Calendar.DAY_OF_MONTH);
  }
 else {
    selectedDay=-1;
  }
  final int enabledDayRangeStart;
  if (mMinDate.get(Calendar.MONTH) == month && mMinDate.get(Calendar.YEAR) == year) {
    enabledDayRangeStart=mMinDate.get(Calendar.DAY_OF_MONTH);
  }
 else {
    enabledDayRangeStart=1;
  }
  final int enabledDayRangeEnd;
  if (mMaxDate.get(Calendar.MONTH) == month && mMaxDate.get(Calendar.YEAR) == year) {
    enabledDayRangeEnd=mMaxDate.get(Calendar.DAY_OF_MONTH);
  }
 else {
    enabledDayRangeEnd=31;
  }
  v.setMonthParams(selectedDay,month,year,mFirstDayOfWeek,enabledDayRangeStart,enabledDayRangeEnd);
  mItems.put(position,v);
  container.addView(v);
  return v;
}
