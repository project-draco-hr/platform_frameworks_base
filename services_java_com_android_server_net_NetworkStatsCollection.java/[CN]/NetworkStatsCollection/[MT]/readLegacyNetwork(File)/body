{
  final AtomicFile inputFile=new AtomicFile(file);
  DataInputStream in=null;
  try {
    in=new DataInputStream(new BufferedInputStream(inputFile.openRead()));
    final int magic=in.readInt();
    if (magic != FILE_MAGIC) {
      throw new ProtocolException("unexpected magic: " + magic);
    }
    final int version=in.readInt();
switch (version) {
case VERSION_NETWORK_INIT:
{
        final int size=in.readInt();
        for (int i=0; i < size; i++) {
          final NetworkIdentitySet ident=new NetworkIdentitySet(in);
          final NetworkStatsHistory history=new NetworkStatsHistory(in);
          final Key key=new Key(ident,UID_ALL,SET_ALL,TAG_NONE);
          recordHistory(key,history);
        }
        break;
      }
default :
{
      throw new ProtocolException("unexpected version: " + version);
    }
}
}
 catch (FileNotFoundException e) {
}
 finally {
IoUtils.closeQuietly(in);
}
}
