{
  long parentNodeId=root.getParentNodeId();
  int accessibilityViewId=AccessibilityNodeInfo.getAccessibilityViewId(parentNodeId);
  while (accessibilityViewId != AccessibilityNodeInfo.UNDEFINED_ITEM_ID) {
    if (outInfos.size() >= MAX_ACCESSIBILITY_NODE_INFO_BATCH_SIZE) {
      return;
    }
    final int virtualDescendantId=AccessibilityNodeInfo.getVirtualDescendantId(parentNodeId);
    if (virtualDescendantId != AccessibilityNodeInfo.UNDEFINED_ITEM_ID || accessibilityViewId == providerHost.getAccessibilityViewId()) {
      final AccessibilityNodeInfo parent;
      if (virtualDescendantId != AccessibilityNodeInfo.UNDEFINED_ITEM_ID) {
        parent=provider.createAccessibilityNodeInfo(virtualDescendantId);
      }
 else {
        parent=provider.createAccessibilityNodeInfo(AccessibilityNodeProvider.HOST_VIEW_ID);
      }
      if (parent == null) {
        return;
      }
      outInfos.add(parent);
      parentNodeId=parent.getParentNodeId();
      accessibilityViewId=AccessibilityNodeInfo.getAccessibilityViewId(parentNodeId);
    }
 else {
      prefetchPredecessorsOfRealNode(providerHost,outInfos);
      return;
    }
  }
}
