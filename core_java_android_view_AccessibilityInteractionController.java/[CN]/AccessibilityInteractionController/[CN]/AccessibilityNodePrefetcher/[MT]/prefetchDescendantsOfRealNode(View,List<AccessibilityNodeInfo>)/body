{
  if (!(root instanceof ViewGroup)) {
    return;
  }
  ViewGroup rootGroup=(ViewGroup)root;
  HashMap<View,AccessibilityNodeInfo> addedChildren=new HashMap<View,AccessibilityNodeInfo>();
  ChildListForAccessibility children=ChildListForAccessibility.obtain(rootGroup,false);
  try {
    final int childCount=children.getChildCount();
    for (int i=0; i < childCount; i++) {
      if (outInfos.size() >= MAX_ACCESSIBILITY_NODE_INFO_BATCH_SIZE) {
        return;
      }
      View child=children.getChildAt(i);
      if (isShown(child)) {
        AccessibilityNodeProvider provider=child.getAccessibilityNodeProvider();
        if (provider == null) {
          AccessibilityNodeInfo info=child.createAccessibilityNodeInfo();
          if (info != null) {
            outInfos.add(info);
            addedChildren.put(child,null);
          }
        }
 else {
          AccessibilityNodeInfo info=provider.createAccessibilityNodeInfo(AccessibilityNodeInfo.UNDEFINED);
          if (info != null) {
            outInfos.add(info);
            addedChildren.put(child,info);
          }
        }
      }
    }
  }
  finally {
    children.recycle();
  }
  if (outInfos.size() < MAX_ACCESSIBILITY_NODE_INFO_BATCH_SIZE) {
    for (    Map.Entry<View,AccessibilityNodeInfo> entry : addedChildren.entrySet()) {
      View addedChild=entry.getKey();
      AccessibilityNodeInfo virtualRoot=entry.getValue();
      if (virtualRoot == null) {
        prefetchDescendantsOfRealNode(addedChild,outInfos);
      }
 else {
        AccessibilityNodeProvider provider=addedChild.getAccessibilityNodeProvider();
        prefetchDescendantsOfVirtualNode(virtualRoot,provider,outInfos);
      }
    }
  }
}
