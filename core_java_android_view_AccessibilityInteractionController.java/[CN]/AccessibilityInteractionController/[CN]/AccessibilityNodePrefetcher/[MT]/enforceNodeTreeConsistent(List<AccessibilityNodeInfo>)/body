{
  LongSparseArray<AccessibilityNodeInfo> nodeMap=new LongSparseArray<AccessibilityNodeInfo>();
  final int nodeCount=nodes.size();
  for (int i=0; i < nodeCount; i++) {
    AccessibilityNodeInfo node=nodes.get(i);
    nodeMap.put(node.getSourceNodeId(),node);
  }
  AccessibilityNodeInfo root=nodeMap.valueAt(0);
  AccessibilityNodeInfo parent=root;
  while (parent != null) {
    root=parent;
    parent=nodeMap.get(parent.getParentNodeId());
  }
  AccessibilityNodeInfo accessFocus=null;
  AccessibilityNodeInfo inputFocus=null;
  HashSet<AccessibilityNodeInfo> seen=new HashSet<AccessibilityNodeInfo>();
  Queue<AccessibilityNodeInfo> fringe=new LinkedList<AccessibilityNodeInfo>();
  fringe.add(root);
  while (!fringe.isEmpty()) {
    AccessibilityNodeInfo current=fringe.poll();
    if (!seen.add(current)) {
      throw new IllegalStateException("Duplicate node: " + current + " in window:"+ mViewRootImpl.mAttachInfo.mAccessibilityWindowId);
    }
    if (current.isAccessibilityFocused()) {
      if (accessFocus != null) {
        throw new IllegalStateException("Duplicate accessibility focus:" + current + " in window:"+ mViewRootImpl.mAttachInfo.mAccessibilityWindowId);
      }
 else {
        accessFocus=current;
      }
    }
    if (current.isFocused()) {
      if (inputFocus != null) {
        throw new IllegalStateException("Duplicate input focus: " + current + " in window:"+ mViewRootImpl.mAttachInfo.mAccessibilityWindowId);
      }
 else {
        inputFocus=current;
      }
    }
    final int childCount=current.getChildCount();
    for (int j=0; j < childCount; j++) {
      final long childId=current.getChildId(j);
      final AccessibilityNodeInfo child=nodeMap.get(childId);
      if (child != null) {
        fringe.add(child);
      }
    }
  }
  for (int j=nodeMap.size() - 1; j >= 0; j--) {
    AccessibilityNodeInfo info=nodeMap.valueAt(j);
    if (!seen.contains(info)) {
      throw new IllegalStateException("Disconnected node: " + info);
    }
  }
}
