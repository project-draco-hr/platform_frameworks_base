{
  final long parentNodeId=current.getParentNodeId();
  final int parentAccessibilityViewId=AccessibilityNodeInfo.getAccessibilityViewId(parentNodeId);
  final int parentVirtualDescendantId=AccessibilityNodeInfo.getVirtualDescendantId(parentNodeId);
  if (parentVirtualDescendantId != AccessibilityNodeInfo.UNDEFINED_ITEM_ID || parentAccessibilityViewId == providerHost.getAccessibilityViewId()) {
    final AccessibilityNodeInfo parent;
    if (parentVirtualDescendantId != AccessibilityNodeInfo.UNDEFINED_ITEM_ID) {
      parent=provider.createAccessibilityNodeInfo(parentVirtualDescendantId);
    }
 else {
      parent=provider.createAccessibilityNodeInfo(AccessibilityNodeProvider.HOST_VIEW_ID);
    }
    if (parent != null) {
      final int childCount=parent.getChildCount();
      for (int i=0; i < childCount; i++) {
        if (outInfos.size() >= MAX_ACCESSIBILITY_NODE_INFO_BATCH_SIZE) {
          return;
        }
        final long childNodeId=parent.getChildId(i);
        if (childNodeId != current.getSourceNodeId()) {
          final int childVirtualDescendantId=AccessibilityNodeInfo.getVirtualDescendantId(childNodeId);
          AccessibilityNodeInfo child=provider.createAccessibilityNodeInfo(childVirtualDescendantId);
          if (child != null) {
            outInfos.add(child);
          }
        }
      }
    }
  }
 else {
    prefetchSiblingsOfRealNode(providerHost,outInfos);
  }
}
