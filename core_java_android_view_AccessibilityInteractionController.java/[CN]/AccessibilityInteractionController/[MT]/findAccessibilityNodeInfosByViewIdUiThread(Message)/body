{
  final int flags=message.arg1;
  final int accessibilityViewId=message.arg2;
  SomeArgs args=(SomeArgs)message.obj;
  final int interactionId=args.argi1;
  final IAccessibilityInteractionConnectionCallback callback=(IAccessibilityInteractionConnectionCallback)args.arg1;
  final MagnificationSpec spec=(MagnificationSpec)args.arg2;
  final String viewId=(String)args.arg3;
  final Region interactiveRegion=(Region)args.arg4;
  args.recycle();
  final List<AccessibilityNodeInfo> infos=mTempAccessibilityNodeInfoList;
  infos.clear();
  try {
    if (mViewRootImpl.mView == null || mViewRootImpl.mAttachInfo == null) {
      return;
    }
    mViewRootImpl.mAttachInfo.mAccessibilityFetchFlags=flags;
    View root=null;
    if (accessibilityViewId != AccessibilityNodeInfo.UNDEFINED_ITEM_ID) {
      root=findViewByAccessibilityId(accessibilityViewId);
    }
 else {
      root=mViewRootImpl.mView;
    }
    if (root != null) {
      final int resolvedViewId=root.getContext().getResources().getIdentifier(viewId,null,null);
      if (resolvedViewId <= 0) {
        return;
      }
      if (mAddNodeInfosForViewId == null) {
        mAddNodeInfosForViewId=new AddNodeInfosForViewId();
      }
      mAddNodeInfosForViewId.init(resolvedViewId,infos);
      root.findViewByPredicate(mAddNodeInfosForViewId);
      mAddNodeInfosForViewId.reset();
    }
  }
  finally {
    try {
      mViewRootImpl.mAttachInfo.mAccessibilityFetchFlags=0;
      applyAppScaleAndMagnificationSpecIfNeeded(infos,spec);
      if (spec != null) {
        spec.recycle();
      }
      adjustIsVisibleToUserIfNeeded(infos,interactiveRegion);
      callback.setFindAccessibilityNodeInfosResult(infos,interactionId);
    }
 catch (    RemoteException re) {
    }
  }
}
