{
  final int flags=message.arg1;
  SomeArgs args=(SomeArgs)message.obj;
  final int accessibilityViewId=args.argi1;
  final int virtualDescendantId=args.argi2;
  final int interactionId=args.argi3;
  final IAccessibilityInteractionConnectionCallback callback=(IAccessibilityInteractionConnectionCallback)args.arg1;
  final MagnificationSpec spec=(MagnificationSpec)args.arg2;
  args.recycle();
  List<AccessibilityNodeInfo> infos=mTempAccessibilityNodeInfoList;
  infos.clear();
  try {
    if (mViewRootImpl.mView == null || mViewRootImpl.mAttachInfo == null) {
      return;
    }
    mViewRootImpl.mAttachInfo.mIncludeNotImportantViews=(flags & INCLUDE_NOT_IMPORTANT_VIEWS) != 0;
    View root=null;
    if (accessibilityViewId == AccessibilityNodeInfo.UNDEFINED) {
      root=mViewRootImpl.mView;
    }
 else {
      root=findViewByAccessibilityId(accessibilityViewId);
    }
    if (root != null && isShown(root)) {
      mPrefetcher.prefetchAccessibilityNodeInfos(root,virtualDescendantId,flags,infos);
    }
  }
  finally {
    try {
      mViewRootImpl.mAttachInfo.mIncludeNotImportantViews=false;
      applyAppScaleAndMagnificationSpecIfNeeded(infos,spec);
      if (spec != null) {
        spec.recycle();
      }
      callback.setFindAccessibilityNodeInfosResult(infos,interactionId);
      infos.clear();
    }
 catch (    RemoteException re) {
    }
  }
}
