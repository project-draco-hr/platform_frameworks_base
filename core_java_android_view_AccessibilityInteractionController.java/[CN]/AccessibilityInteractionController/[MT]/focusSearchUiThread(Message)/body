{
  final int flags=message.arg1;
  final int accessibilityViewId=message.arg2;
  SomeArgs args=(SomeArgs)message.obj;
  final int virtualDescendantId=args.argi1;
  final int direction=args.argi2;
  final int interactionId=args.argi3;
  final IAccessibilityInteractionConnectionCallback callback=(IAccessibilityInteractionConnectionCallback)args.arg1;
  mPool.release(args);
  AccessibilityNodeInfo next=null;
  try {
    if (mViewRootImpl.mView == null || mViewRootImpl.mAttachInfo == null) {
      return;
    }
    mViewRootImpl.mAttachInfo.mIncludeNotImportantViews=(flags & INCLUDE_NOT_IMPORTANT_VIEWS) != 0;
    View root=null;
    if (accessibilityViewId != AccessibilityNodeInfo.UNDEFINED) {
      root=findViewByAccessibilityId(accessibilityViewId);
    }
 else {
      root=mViewRootImpl.mView;
    }
    if (root != null && isShown(root)) {
      if ((direction & View.FOCUS_ACCESSIBILITY) == View.FOCUS_ACCESSIBILITY) {
        AccessibilityNodeProvider provider=root.getAccessibilityNodeProvider();
        if (provider != null) {
          next=provider.accessibilityFocusSearch(direction,virtualDescendantId);
          if (next != null) {
            return;
          }
        }
        View nextView=root.focusSearch(direction);
        while (nextView != null) {
          provider=nextView.getAccessibilityNodeProvider();
          if (provider != null) {
            next=provider.accessibilityFocusSearch(direction,View.NO_ID);
            if (next != null) {
              break;
            }
            nextView=nextView.focusSearch(direction);
          }
 else {
            next=nextView.createAccessibilityNodeInfo();
            break;
          }
        }
      }
 else {
        View nextView=root.focusSearch(direction);
        if (nextView != null) {
          next=nextView.createAccessibilityNodeInfo();
        }
      }
    }
  }
  finally {
    try {
      mViewRootImpl.mAttachInfo.mIncludeNotImportantViews=false;
      callback.setFindAccessibilityNodeInfoResult(next,interactionId);
    }
 catch (    RemoteException re) {
    }
  }
}
