{
  final int flags=message.arg1;
  final int focusType=message.arg2;
  SomeArgs args=(SomeArgs)message.obj;
  final int interactionId=args.argi1;
  final int accessibilityViewId=args.argi2;
  final int virtualDescendantId=args.argi3;
  final IAccessibilityInteractionConnectionCallback callback=(IAccessibilityInteractionConnectionCallback)args.arg1;
  final MagnificationSpec spec=(MagnificationSpec)args.arg2;
  final Region interactiveRegion=(Region)args.arg3;
  args.recycle();
  AccessibilityNodeInfo focused=null;
  try {
    if (mViewRootImpl.mView == null || mViewRootImpl.mAttachInfo == null) {
      return;
    }
    mViewRootImpl.mAttachInfo.mAccessibilityFetchFlags=flags;
    View root=null;
    if (accessibilityViewId != AccessibilityNodeInfo.UNDEFINED_ITEM_ID) {
      root=findViewByAccessibilityId(accessibilityViewId);
    }
 else {
      root=mViewRootImpl.mView;
    }
    if (root != null && isShown(root)) {
switch (focusType) {
case AccessibilityNodeInfo.FOCUS_ACCESSIBILITY:
{
          View host=mViewRootImpl.mAccessibilityFocusedHost;
          if (host == null || !ViewRootImpl.isViewDescendantOf(host,root)) {
            break;
          }
          if (!isShown(host)) {
            break;
          }
          AccessibilityNodeProvider provider=host.getAccessibilityNodeProvider();
          if (provider != null) {
            if (mViewRootImpl.mAccessibilityFocusedVirtualView != null) {
              focused=AccessibilityNodeInfo.obtain(mViewRootImpl.mAccessibilityFocusedVirtualView);
            }
          }
 else           if (virtualDescendantId == AccessibilityNodeInfo.UNDEFINED_ITEM_ID) {
            focused=host.createAccessibilityNodeInfo();
          }
        }
      break;
case AccessibilityNodeInfo.FOCUS_INPUT:
{
      View target=root.findFocus();
      if (target == null || !isShown(target)) {
        break;
      }
      AccessibilityNodeProvider provider=target.getAccessibilityNodeProvider();
      if (provider != null) {
        focused=provider.findFocus(focusType);
      }
      if (focused == null) {
        focused=target.createAccessibilityNodeInfo();
      }
    }
  break;
default :
throw new IllegalArgumentException("Unknown focus type: " + focusType);
}
}
}
  finally {
try {
mViewRootImpl.mAttachInfo.mAccessibilityFetchFlags=0;
applyAppScaleAndMagnificationSpecIfNeeded(focused,spec);
if (spec != null) {
spec.recycle();
}
adjustIsVisibleToUserIfNeeded(focused,interactiveRegion);
callback.setFindAccessibilityNodeInfoResult(focused,interactionId);
}
 catch (RemoteException re) {
}
}
}
