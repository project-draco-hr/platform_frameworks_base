{
  int transactionId;
  short secs;
  Inet4Address clientIp;
  Inet4Address yourIp;
  Inet4Address nextIp;
  Inet4Address relayIp;
  byte[] clientMac;
  List<Inet4Address> dnsServers=new ArrayList<Inet4Address>();
  Inet4Address gateway=null;
  Inet4Address serverIdentifier=null;
  Inet4Address netMask=null;
  String message=null;
  String vendorId=null;
  String vendorInfo=null;
  byte[] expectedParams=null;
  String hostName=null;
  String domainName=null;
  Inet4Address ipSrc=null;
  Inet4Address ipDst=null;
  Inet4Address bcAddr=null;
  Inet4Address requestedIp=null;
  Short mtu=null;
  Short maxMessageSize=null;
  Integer leaseTime=null;
  Integer T1=null;
  Integer T2=null;
  byte dhcpType=(byte)0xFF;
  packet.order(ByteOrder.BIG_ENDIAN);
  if (pktType == ENCAP_L2) {
    if (packet.remaining() < MIN_PACKET_LENGTH_L2) {
      throw new ParseException("L2 packet too short, %d < %d",packet.remaining(),MIN_PACKET_LENGTH_L2);
    }
    byte[] l2dst=new byte[6];
    byte[] l2src=new byte[6];
    packet.get(l2dst);
    packet.get(l2src);
    short l2type=packet.getShort();
    if (l2type != OsConstants.ETH_P_IP)     throw new ParseException("Unexpected L2 type 0x%04x, expected 0x%04x",l2type,OsConstants.ETH_P_IP);
  }
  if (pktType <= ENCAP_L3) {
    if (packet.remaining() < MIN_PACKET_LENGTH_L3) {
      throw new ParseException("L3 packet too short, %d < %d",packet.remaining(),MIN_PACKET_LENGTH_L3);
    }
    byte ipTypeAndLength=packet.get();
    int ipVersion=(ipTypeAndLength & 0xf0) >> 4;
    if (ipVersion != 4) {
      throw new ParseException("Invalid IP version %d",ipVersion);
    }
    byte ipDiffServicesField=packet.get();
    short ipTotalLength=packet.getShort();
    short ipIdentification=packet.getShort();
    byte ipFlags=packet.get();
    byte ipFragOffset=packet.get();
    byte ipTTL=packet.get();
    byte ipProto=packet.get();
    short ipChksm=packet.getShort();
    ipSrc=readIpAddress(packet);
    ipDst=readIpAddress(packet);
    if (ipProto != IP_TYPE_UDP) {
      throw new ParseException("Protocol not UDP: %d",ipProto);
    }
    int optionWords=((ipTypeAndLength & 0x0f) - 5);
    for (int i=0; i < optionWords; i++) {
      packet.getInt();
    }
    short udpSrcPort=packet.getShort();
    short udpDstPort=packet.getShort();
    short udpLen=packet.getShort();
    short udpChkSum=packet.getShort();
    if (!isPacketToOrFromClient(udpSrcPort,udpDstPort) && !isPacketServerToServer(udpSrcPort,udpDstPort)) {
      return null;
    }
  }
  if (pktType > ENCAP_BOOTP || packet.remaining() < MIN_PACKET_LENGTH_BOOTP) {
    throw new ParseException("Invalid type or BOOTP packet too short, %d < %d",packet.remaining(),MIN_PACKET_LENGTH_BOOTP);
  }
  byte type=packet.get();
  byte hwType=packet.get();
  int addrLen=packet.get() & 0xff;
  byte hops=packet.get();
  transactionId=packet.getInt();
  secs=packet.getShort();
  short bootpFlags=packet.getShort();
  boolean broadcast=(bootpFlags & 0x8000) != 0;
  byte[] ipv4addr=new byte[4];
  try {
    packet.get(ipv4addr);
    clientIp=(Inet4Address)Inet4Address.getByAddress(ipv4addr);
    packet.get(ipv4addr);
    yourIp=(Inet4Address)Inet4Address.getByAddress(ipv4addr);
    packet.get(ipv4addr);
    nextIp=(Inet4Address)Inet4Address.getByAddress(ipv4addr);
    packet.get(ipv4addr);
    relayIp=(Inet4Address)Inet4Address.getByAddress(ipv4addr);
  }
 catch (  UnknownHostException ex) {
    throw new ParseException("Invalid IPv4 address: %s",Arrays.toString(ipv4addr));
  }
  if (addrLen > HWADDR_LEN) {
    addrLen=ETHER_BROADCAST.length;
  }
  clientMac=new byte[addrLen];
  packet.get(clientMac);
  packet.position(packet.position() + (16 - addrLen) + 64+ 128);
  int dhcpMagicCookie=packet.getInt();
  if (dhcpMagicCookie != DHCP_MAGIC_COOKIE) {
    throw new ParseException("Bad magic cookie 0x%08x, should be 0x%08x",dhcpMagicCookie,DHCP_MAGIC_COOKIE);
  }
  boolean notFinishedOptions=true;
  while ((packet.position() < packet.limit()) && notFinishedOptions) {
    try {
      byte optionType=packet.get();
      if (optionType == DHCP_OPTION_END) {
        notFinishedOptions=false;
      }
 else       if (optionType == DHCP_OPTION_PAD) {
      }
 else {
        int optionLen=packet.get() & 0xFF;
        int expectedLen=0;
switch (optionType) {
case DHCP_SUBNET_MASK:
          netMask=readIpAddress(packet);
        expectedLen=4;
      break;
case DHCP_ROUTER:
    gateway=readIpAddress(packet);
  expectedLen=4;
break;
case DHCP_DNS_SERVER:
for (expectedLen=0; expectedLen < optionLen; expectedLen+=4) {
dnsServers.add(readIpAddress(packet));
}
break;
case DHCP_HOST_NAME:
expectedLen=optionLen;
hostName=readAsciiString(packet,optionLen,false);
break;
case DHCP_MTU:
expectedLen=2;
mtu=Short.valueOf(packet.getShort());
break;
case DHCP_DOMAIN_NAME:
expectedLen=optionLen;
domainName=readAsciiString(packet,optionLen,false);
break;
case DHCP_BROADCAST_ADDRESS:
bcAddr=readIpAddress(packet);
expectedLen=4;
break;
case DHCP_REQUESTED_IP:
requestedIp=readIpAddress(packet);
expectedLen=4;
break;
case DHCP_LEASE_TIME:
leaseTime=Integer.valueOf(packet.getInt());
expectedLen=4;
break;
case DHCP_MESSAGE_TYPE:
dhcpType=packet.get();
expectedLen=1;
break;
case DHCP_SERVER_IDENTIFIER:
serverIdentifier=readIpAddress(packet);
expectedLen=4;
break;
case DHCP_PARAMETER_LIST:
expectedParams=new byte[optionLen];
packet.get(expectedParams);
expectedLen=optionLen;
break;
case DHCP_MESSAGE:
expectedLen=optionLen;
message=readAsciiString(packet,optionLen,false);
break;
case DHCP_MAX_MESSAGE_SIZE:
expectedLen=2;
maxMessageSize=Short.valueOf(packet.getShort());
break;
case DHCP_RENEWAL_TIME:
expectedLen=4;
T1=Integer.valueOf(packet.getInt());
break;
case DHCP_REBINDING_TIME:
expectedLen=4;
T2=Integer.valueOf(packet.getInt());
break;
case DHCP_VENDOR_CLASS_ID:
expectedLen=optionLen;
vendorId=readAsciiString(packet,optionLen,true);
break;
case DHCP_CLIENT_IDENTIFIER:
{
byte[] id=new byte[optionLen];
packet.get(id);
expectedLen=optionLen;
}
break;
case DHCP_VENDOR_INFO:
expectedLen=optionLen;
vendorInfo=readAsciiString(packet,optionLen,true);
break;
default :
for (int i=0; i < optionLen; i++) {
expectedLen++;
byte throwaway=packet.get();
}
}
if (expectedLen != optionLen) {
throw new ParseException("Invalid length %d for option %d, expected %d",optionLen,optionType,expectedLen);
}
}
}
 catch (BufferUnderflowException e) {
throw new ParseException("BufferUnderflowException");
}
}
DhcpPacket newPacket;
switch (dhcpType) {
case (byte)0xFF:
throw new ParseException("No DHCP message type option");
case DHCP_MESSAGE_TYPE_DISCOVER:
newPacket=new DhcpDiscoverPacket(transactionId,secs,clientMac,broadcast);
break;
case DHCP_MESSAGE_TYPE_OFFER:
newPacket=new DhcpOfferPacket(transactionId,secs,broadcast,ipSrc,clientIp,yourIp,clientMac);
break;
case DHCP_MESSAGE_TYPE_REQUEST:
newPacket=new DhcpRequestPacket(transactionId,secs,clientIp,clientMac,broadcast);
break;
case DHCP_MESSAGE_TYPE_DECLINE:
newPacket=new DhcpDeclinePacket(transactionId,secs,clientIp,yourIp,nextIp,relayIp,clientMac);
break;
case DHCP_MESSAGE_TYPE_ACK:
newPacket=new DhcpAckPacket(transactionId,secs,broadcast,ipSrc,clientIp,yourIp,clientMac);
break;
case DHCP_MESSAGE_TYPE_NAK:
newPacket=new DhcpNakPacket(transactionId,secs,clientIp,yourIp,nextIp,relayIp,clientMac);
break;
case DHCP_MESSAGE_TYPE_INFORM:
newPacket=new DhcpInformPacket(transactionId,secs,clientIp,yourIp,nextIp,relayIp,clientMac);
break;
default :
throw new ParseException("Unimplemented DHCP type %d",dhcpType);
}
newPacket.mBroadcastAddress=bcAddr;
newPacket.mDnsServers=dnsServers;
newPacket.mDomainName=domainName;
newPacket.mGateway=gateway;
newPacket.mHostName=hostName;
newPacket.mLeaseTime=leaseTime;
newPacket.mMessage=message;
newPacket.mMtu=mtu;
newPacket.mRequestedIp=requestedIp;
newPacket.mRequestedParams=expectedParams;
newPacket.mServerIdentifier=serverIdentifier;
newPacket.mSubnetMask=netMask;
newPacket.mMaxMessageSize=maxMessageSize;
newPacket.mT1=T1;
newPacket.mT2=T2;
newPacket.mVendorId=vendorId;
newPacket.mVendorInfo=vendorInfo;
return newPacket;
}
