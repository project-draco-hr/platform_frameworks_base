{
  this.mParentLocale=parent;
  this.mListener=listener;
  this.mTranslatedOnly=translatedOnly;
  setRetainInstance(true);
  final HashSet<String> langTagsToIgnore=new HashSet<>();
  if (!translatedOnly) {
    final LocaleList userLocales=LocalePicker.getLocales();
    final String[] langTags=userLocales.toLanguageTags().split(",");
    Collections.addAll(langTagsToIgnore,langTags);
  }
  if (parent != null) {
    mLocaleList=LocaleStore.getLevelLocales(context,langTagsToIgnore,parent,translatedOnly);
    if (mLocaleList.size() <= 1) {
      if (listener != null && (mLocaleList.size() == 1)) {
        listener.onLocaleSelected(mLocaleList.iterator().next());
      }
      return false;
    }
  }
 else {
    mLocaleList=LocaleStore.getLevelLocales(context,langTagsToIgnore,null,translatedOnly);
  }
  return true;
}
