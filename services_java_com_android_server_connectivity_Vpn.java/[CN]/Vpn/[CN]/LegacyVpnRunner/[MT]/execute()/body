{
  try {
    checkpoint(false);
    for (    String service : mServices) {
      SystemProperties.set("ctl.stop",service);
    }
    for (    String service : mServices) {
      String key="init.svc." + service;
      while (!"stopped".equals(SystemProperties.get(key))) {
        checkpoint(true);
      }
    }
    SystemProperties.set("vpn.dns",NONE);
    SystemProperties.set("vpn.via",NONE);
    while (!NONE.equals(SystemProperties.get("vpn.dns")) || !NONE.equals(SystemProperties.get("vpn.via"))) {
      checkpoint(true);
    }
    boolean restart=false;
    for (    String[] arguments : mArguments) {
      restart=restart || (arguments != null);
    }
    if (!restart) {
      return;
    }
    for (int i=0; i < mServices.length; ++i) {
      String[] arguments=mArguments[i];
      if (arguments == null) {
        continue;
      }
      String service=mServices[i];
      SystemProperties.set("ctl.start",service);
      String key="init.svc." + service;
      while (!"running".equals(SystemProperties.get(key))) {
        checkpoint(true);
      }
      LocalSocket socket=new LocalSocket();
      LocalSocketAddress address=new LocalSocketAddress(service,LocalSocketAddress.Namespace.RESERVED);
      while (true) {
        try {
          socket.connect(address);
          break;
        }
 catch (        Exception e) {
        }
        checkpoint(true);
      }
      socket.setSoTimeout(500);
      OutputStream output=socket.getOutputStream();
      for (      String argument : arguments) {
        byte[] bytes=argument.getBytes(Charsets.UTF_8);
        if (bytes.length >= 0xFFFF) {
          throw new IllegalArgumentException("argument too large");
        }
        output.write(bytes.length >> 8);
        output.write(bytes.length);
        output.write(bytes);
        checkpoint(false);
      }
      output.write(0xFF);
      output.write(0xFF);
      output.flush();
      socket.close();
    }
    while (NONE.equals(SystemProperties.get("vpn.dns")) || NONE.equals(SystemProperties.get("vpn.via"))) {
      for (int i=0; i < mServices.length; ++i) {
        String service=mServices[i];
        if (mArguments[i] != null && !"running".equals(SystemProperties.get("init.svc." + service))) {
          throw new IllegalArgumentException(service + " is dead");
        }
      }
      checkpoint(true);
    }
    Log.i(TAG,"connected!");
  }
 catch (  Exception e) {
    Log.i(TAG,e.getMessage());
    for (    String service : mServices) {
      SystemProperties.set("ctl.stop",service);
    }
  }
}
