{
synchronized (mJobs) {
    pw.print("Started users: ");
    for (int i=0; i < mStartedUsers.size(); i++) {
      pw.print("u" + mStartedUsers.get(i) + " ");
    }
    pw.println();
    pw.println("Registered jobs:");
    if (mJobs.size() > 0) {
      ArraySet<JobStatus> jobs=mJobs.getJobs();
      for (int i=0; i < jobs.size(); i++) {
        JobStatus job=jobs.valueAt(i);
        job.dump(pw,"  ");
      }
    }
 else {
      pw.println();
      pw.println("No jobs scheduled.");
    }
    for (int i=0; i < mControllers.size(); i++) {
      pw.println();
      mControllers.get(i).dumpControllerState(pw);
    }
    pw.println();
    pw.println("Pending");
    for (int i=0; i < mPendingJobs.size(); i++) {
      pw.println(mPendingJobs.get(i).hashCode());
    }
    pw.println();
    pw.println("Active jobs:");
    for (int i=0; i < mActiveServices.size(); i++) {
      JobServiceContext jsc=mActiveServices.get(i);
      if (jsc.isAvailable()) {
        continue;
      }
 else {
        pw.println(jsc.getRunningJob().hashCode() + " for: " + (SystemClock.elapsedRealtime() - jsc.getExecutionStartTimeElapsed()) / 1000 + "s " + "timeout: " + jsc.getTimeoutElapsed());
      }
    }
    pw.println();
    pw.print("mReadyToRock=");
    pw.println(mReadyToRock);
  }
  pw.println();
}
