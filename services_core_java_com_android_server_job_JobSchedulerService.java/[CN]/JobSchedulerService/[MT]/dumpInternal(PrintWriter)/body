{
  final long now=SystemClock.elapsedRealtime();
synchronized (mLock) {
    pw.println("Started users: " + Arrays.toString(mStartedUsers));
    pw.println("Registered jobs:");
    if (mJobs.size() > 0) {
      mJobs.forEachJob(new JobStatusFunctor(){
        private int index=0;
        @Override public void process(        JobStatus job){
          pw.print("  Job #");
          pw.print(index++);
          pw.print(": ");
          pw.println(job.toShortString());
          job.dump(pw,"    ",true);
          pw.print("    Ready: ");
          pw.print(mHandler.isReadyToBeExecutedLocked(job));
          pw.print(" (job=");
          pw.print(job.isReady());
          pw.print(" pending=");
          pw.print(mPendingJobs.contains(job));
          pw.print(" active=");
          pw.print(isCurrentlyActiveLocked(job));
          pw.print(" user=");
          pw.print(ArrayUtils.contains(mStartedUsers,job.getUserId()));
          pw.println(")");
        }
      }
);
    }
 else {
      pw.println("  None.");
    }
    for (int i=0; i < mControllers.size(); i++) {
      pw.println();
      mControllers.get(i).dumpControllerStateLocked(pw);
    }
    pw.println();
    pw.println("Uid priority overrides:");
    for (int i=0; i < mUidPriorityOverride.size(); i++) {
      pw.print("  ");
      pw.print(UserHandle.formatUid(mUidPriorityOverride.keyAt(i)));
      pw.print(": ");
      pw.println(mUidPriorityOverride.valueAt(i));
    }
    pw.println();
    pw.println("Pending queue:");
    for (int i=0; i < mPendingJobs.size(); i++) {
      JobStatus job=mPendingJobs.get(i);
      pw.print("  Pending #");
      pw.print(i);
      pw.print(": ");
      pw.println(job.toShortString());
      job.dump(pw,"    ",false);
      int priority=evaluateJobPriorityLocked(job);
      if (priority != JobInfo.PRIORITY_DEFAULT) {
        pw.print("    Evaluated priority: ");
        pw.println(priority);
      }
      pw.print("    Tag: ");
      pw.println(job.getTag());
    }
    pw.println();
    pw.println("Active jobs:");
    for (int i=0; i < mActiveServices.size(); i++) {
      JobServiceContext jsc=mActiveServices.get(i);
      pw.print("  Slot #");
      pw.print(i);
      pw.print(": ");
      if (jsc.getRunningJob() == null) {
        pw.println("inactive");
        continue;
      }
 else {
        pw.println(jsc.getRunningJob().toShortString());
        pw.print("    Running for: ");
        TimeUtils.formatDuration(now - jsc.getExecutionStartTimeElapsed(),pw);
        pw.print(", timeout at: ");
        TimeUtils.formatDuration(jsc.getTimeoutElapsed() - now,pw);
        pw.println();
        jsc.getRunningJob().dump(pw,"    ",false);
        int priority=evaluateJobPriorityLocked(jsc.getRunningJob());
        if (priority != JobInfo.PRIORITY_DEFAULT) {
          pw.print("    Evaluated priority: ");
          pw.println(priority);
        }
      }
    }
    pw.println();
    pw.print("mReadyToRock=");
    pw.println(mReadyToRock);
    pw.print("mReportedActive=");
    pw.println(mReportedActive);
    pw.print("mMaxActiveJobs=");
    pw.println(mMaxActiveJobs);
  }
  pw.println();
}
