{
  final long elapsedNowMillis=SystemClock.elapsedRealtime();
  final JobInfo job=failureToReschedule.getJob();
  final long initialBackoffMillis=job.getInitialBackoffMillis();
  final int backoffAttempt=failureToReschedule.getNumFailures() + 1;
  long newEarliestRuntimeElapsed=elapsedNowMillis;
switch (job.getBackoffPolicy()) {
case JobInfo.BackoffPolicy.LINEAR:
    newEarliestRuntimeElapsed+=initialBackoffMillis * backoffAttempt;
  break;
default :
if (DEBUG) {
  Slog.v(TAG,"Unrecognised back-off policy, defaulting to exponential.");
}
case JobInfo.BackoffPolicy.EXPONENTIAL:
newEarliestRuntimeElapsed+=Math.pow(initialBackoffMillis * 0.001,backoffAttempt) * 1000;
break;
}
newEarliestRuntimeElapsed=Math.min(newEarliestRuntimeElapsed,JobInfo.MAX_BACKOFF_DELAY_MILLIS);
return new JobStatus(failureToReschedule,newEarliestRuntimeElapsed,JobStatus.NO_LATEST_RUNTIME,backoffAttempt);
}
