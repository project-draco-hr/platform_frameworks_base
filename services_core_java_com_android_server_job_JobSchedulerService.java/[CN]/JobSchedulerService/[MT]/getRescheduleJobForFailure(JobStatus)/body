{
  final long elapsedNowMillis=SystemClock.elapsedRealtime();
  final JobInfo job=failureToReschedule.getJob();
  final long initialBackoffMillis=job.getInitialBackoffMillis();
  final int backoffAttempts=failureToReschedule.getNumFailures() + 1;
  long delayMillis;
switch (job.getBackoffPolicy()) {
case JobInfo.BACKOFF_POLICY_LINEAR:
    delayMillis=initialBackoffMillis * backoffAttempts;
  break;
default :
if (DEBUG) {
  Slog.v(TAG,"Unrecognised back-off policy, defaulting to exponential.");
}
case JobInfo.BACKOFF_POLICY_EXPONENTIAL:
delayMillis=(long)Math.scalb(initialBackoffMillis,backoffAttempts - 1);
break;
}
delayMillis=Math.min(delayMillis,JobInfo.MAX_BACKOFF_DELAY_MILLIS);
JobStatus newJob=new JobStatus(failureToReschedule,elapsedNowMillis + delayMillis,JobStatus.NO_LATEST_RUNTIME,backoffAttempts);
for (int ic=0; ic < mControllers.size(); ic++) {
StateController controller=mControllers.get(ic);
controller.rescheduleForFailure(newJob,failureToReschedule);
}
return newJob;
}
