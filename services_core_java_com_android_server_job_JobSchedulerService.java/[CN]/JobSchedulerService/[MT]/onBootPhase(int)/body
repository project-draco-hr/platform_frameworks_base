{
  if (PHASE_SYSTEM_SERVICES_READY == phase) {
    final IntentFilter filter=new IntentFilter();
    filter.addAction(Intent.ACTION_PACKAGE_REMOVED);
    filter.addAction(Intent.ACTION_PACKAGE_CHANGED);
    filter.addDataScheme("package");
    getContext().registerReceiverAsUser(mBroadcastReceiver,UserHandle.ALL,filter,null,null);
    final IntentFilter userFilter=new IntentFilter(Intent.ACTION_USER_REMOVED);
    getContext().registerReceiverAsUser(mBroadcastReceiver,UserHandle.ALL,userFilter,null,null);
    mPowerManager=(PowerManager)getContext().getSystemService(Context.POWER_SERVICE);
    try {
      ActivityManagerNative.getDefault().registerUidObserver(mUidObserver,ActivityManager.UID_OBSERVER_PROCSTATE | ActivityManager.UID_OBSERVER_GONE | ActivityManager.UID_OBSERVER_IDLE);
    }
 catch (    RemoteException e) {
    }
  }
 else   if (phase == PHASE_THIRD_PARTY_APPS_CAN_START) {
synchronized (mLock) {
      mReadyToRock=true;
      mBatteryStats=IBatteryStats.Stub.asInterface(ServiceManager.getService(BatteryStats.SERVICE_NAME));
      mLocalDeviceIdleController=LocalServices.getService(DeviceIdleController.LocalService.class);
      for (int i=0; i < MAX_JOB_CONTEXTS_COUNT; i++) {
        mActiveServices.add(new JobServiceContext(this,mBatteryStats,mJobPackageTracker,getContext().getMainLooper()));
      }
      mJobs.forEachJob(new JobStatusFunctor(){
        @Override public void process(        JobStatus job){
          for (int controller=0; controller < mControllers.size(); controller++) {
            final StateController sc=mControllers.get(controller);
            sc.maybeStartTrackingJobLocked(job,null);
          }
        }
      }
);
      mHandler.obtainMessage(MSG_CHECK_JOB).sendToTarget();
    }
  }
}
