{
  final int callerUid=Binder.getCallingUid();
  if (DEBUG) {
    Slog.d(TAG,"Caller uid " + callerUid + " scheduling job: "+ job.toString()+ " on behalf of "+ packageName);
  }
  if (packageName == null) {
    throw new NullPointerException("Must specify a package for scheduleAsPackage()");
  }
  int mayScheduleForOthers=getContext().checkCallingOrSelfPermission(android.Manifest.permission.UPDATE_DEVICE_STATS);
  if (mayScheduleForOthers != PackageManager.PERMISSION_GRANTED) {
    throw new SecurityException("Caller uid " + callerUid + " not permitted to schedule jobs for other apps");
  }
  if ((job.getFlags() & JobInfo.FLAG_WILL_BE_FOREGROUND) != 0) {
    getContext().enforceCallingOrSelfPermission(android.Manifest.permission.CONNECTIVITY_INTERNAL,TAG);
  }
  long ident=Binder.clearCallingIdentity();
  try {
    return JobSchedulerService.this.scheduleAsPackage(job,callerUid,packageName,userId,tag);
  }
  finally {
    Binder.restoreCallingIdentity(ident);
  }
}
