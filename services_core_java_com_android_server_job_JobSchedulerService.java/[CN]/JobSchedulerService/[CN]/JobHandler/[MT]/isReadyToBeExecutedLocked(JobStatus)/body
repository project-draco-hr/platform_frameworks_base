{
  final boolean jobReady=job.isReady();
  final boolean jobPending=mPendingJobs.contains(job);
  final boolean jobActive=isCurrentlyActiveLocked(job);
  final int userId=job.getUserId();
  final boolean userStarted=ArrayUtils.contains(mStartedUsers,userId);
  final boolean componentPresent;
  try {
    componentPresent=(AppGlobals.getPackageManager().getServiceInfo(job.getServiceComponent(),PackageManager.MATCH_DEBUG_TRIAGED_MISSING,userId) != null);
  }
 catch (  RemoteException e) {
    throw e.rethrowAsRuntimeException();
  }
  if (DEBUG) {
    Slog.v(TAG,"isReadyToBeExecutedLocked: " + job.toShortString() + " ready="+ jobReady+ " pending="+ jobPending+ " active="+ jobActive+ " userStarted="+ userStarted+ " componentPresent="+ componentPresent);
  }
  return userStarted && componentPresent && jobReady&& !jobPending&& !jobActive;
}
