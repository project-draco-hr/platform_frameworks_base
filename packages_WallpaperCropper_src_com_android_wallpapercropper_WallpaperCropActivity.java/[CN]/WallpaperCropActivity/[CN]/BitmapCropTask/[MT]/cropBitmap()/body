{
  boolean failure=false;
  regenerateInputStream();
  if (mNoCrop && mInStream != null) {
    try {
      mWPManager.setStream(mInStream);
    }
 catch (    IOException e) {
      Log.w(LOGTAG,"cannot write stream to wallpaper",e);
      failure=true;
    }
    if (mOnEndRunnable != null) {
      mOnEndRunnable.run();
    }
    return !failure;
  }
  if (mInStream != null) {
    Rect roundedTrueCrop=new Rect();
    mCropBounds.roundOut(roundedTrueCrop);
    if (roundedTrueCrop.width() <= 0 || roundedTrueCrop.height() <= 0) {
      Log.w(LOGTAG,"crop has bad values for full size image");
      failure=true;
      return false;
    }
    int scaleDownSampleSize=Math.min(roundedTrueCrop.width() / mOutWidth,roundedTrueCrop.height() / mOutHeight);
    BitmapRegionDecoder decoder=null;
    try {
      decoder=BitmapRegionDecoder.newInstance(mInStream,true);
    }
 catch (    IOException e) {
      Log.w(LOGTAG,"cannot open region decoder for file: " + mInUri.toString(),e);
    }
    Bitmap crop=null;
    if (decoder != null) {
      BitmapFactory.Options options=new BitmapFactory.Options();
      if (scaleDownSampleSize > 1) {
        options.inSampleSize=scaleDownSampleSize;
      }
      crop=decoder.decodeRegion(roundedTrueCrop,options);
      decoder.recycle();
    }
    if (crop == null) {
      regenerateInputStream();
      Bitmap fullSize=null;
      if (mInStream != null) {
        BitmapFactory.Options options=new BitmapFactory.Options();
        if (scaleDownSampleSize > 1) {
          options.inSampleSize=scaleDownSampleSize;
        }
        fullSize=BitmapFactory.decodeStream(mInStream,null,options);
      }
      if (fullSize != null) {
        crop=Bitmap.createBitmap(fullSize,roundedTrueCrop.left,roundedTrueCrop.top,roundedTrueCrop.width(),roundedTrueCrop.height());
      }
    }
    if (crop == null) {
      Log.w(LOGTAG,"cannot decode file: " + mInUri.toString());
      failure=true;
      return false;
    }
    if (mOutWidth > 0 && mOutHeight > 0) {
      Matrix m=new Matrix();
      RectF cropRect=new RectF(0,0,crop.getWidth(),crop.getHeight());
      if (mRotation > 0) {
        m.setRotate(mRotation);
        m.mapRect(cropRect);
      }
      RectF returnRect=new RectF(0,0,mOutWidth,mOutHeight);
      m.setRectToRect(cropRect,returnRect,Matrix.ScaleToFit.FILL);
      m.preRotate(mRotation);
      Bitmap tmp=Bitmap.createBitmap((int)returnRect.width(),(int)returnRect.height(),Bitmap.Config.ARGB_8888);
      if (tmp != null) {
        Canvas c=new Canvas(tmp);
        c.drawBitmap(crop,m,new Paint());
        crop=tmp;
      }
    }
 else     if (mRotation > 0) {
      Matrix m=new Matrix();
      m.setRotate(mRotation);
      Bitmap tmp=Bitmap.createBitmap(crop,0,0,crop.getWidth(),crop.getHeight(),m,true);
      if (tmp != null) {
        crop=tmp;
      }
    }
    if (mSaveCroppedBitmap) {
      mCroppedBitmap=crop;
    }
    CompressFormat cf=convertExtensionToCompressFormat(getFileExtension(mOutputFormat));
    ByteArrayOutputStream tmpOut=new ByteArrayOutputStream(2048);
    if (crop.compress(cf,DEFAULT_COMPRESS_QUALITY,tmpOut)) {
      if (mSetWallpaper && mWPManager != null) {
        if (mWPManager == null) {
          Log.w(LOGTAG,"no wallpaper manager");
          failure=true;
        }
 else {
          try {
            byte[] outByteArray=tmpOut.toByteArray();
            mWPManager.setStream(new ByteArrayInputStream(outByteArray));
            if (mOnBitmapCroppedHandler != null) {
              mOnBitmapCroppedHandler.onBitmapCropped(outByteArray);
            }
          }
 catch (          IOException e) {
            Log.w(LOGTAG,"cannot write stream to wallpaper",e);
            failure=true;
          }
        }
      }
      if (mOnEndRunnable != null) {
        mOnEndRunnable.run();
      }
    }
 else {
      Log.w(LOGTAG,"cannot compress bitmap");
      failure=true;
    }
  }
  return !failure;
}
