{
  int slen=src.length();
  int herep=TRIE_ROOT;
  for (int i=0; i < slen; i++) {
    char c=src.charAt(i);
    boolean found=false;
    for (; mTrie[herep] != TRIE_NULL; herep=mTrie[herep] + TRIE_NEXT) {
      if (c == mTrie[mTrie[herep] + TRIE_C]) {
        if (i == slen - 1) {
          mTrie[mTrie[herep] + TRIE_OFF]=off;
          return;
        }
        herep=mTrie[herep] + TRIE_CHILD;
        found=true;
        break;
      }
    }
    if (!found) {
      char node=newTrieNode();
      mTrie[herep]=node;
      mTrie[mTrie[herep] + TRIE_C]=c;
      mTrie[mTrie[herep] + TRIE_OFF]=TRIE_NULL;
      mTrie[mTrie[herep] + TRIE_NEXT]=TRIE_NULL;
      mTrie[mTrie[herep] + TRIE_CHILD]=TRIE_NULL;
      if (i == slen - 1) {
        mTrie[mTrie[herep] + TRIE_OFF]=off;
        return;
      }
      herep=mTrie[herep] + TRIE_CHILD;
    }
  }
}
