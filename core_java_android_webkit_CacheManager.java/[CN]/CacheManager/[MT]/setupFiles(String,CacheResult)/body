{
  if (true) {
    int hashCode=url.hashCode();
    StringBuffer ret=new StringBuffer(8);
    appendAsHex(hashCode,ret);
    String path=ret.toString();
    File file=new File(mBaseDir,path);
    if (true) {
      boolean checkOldPath=true;
      while (file.exists()) {
        if (checkOldPath) {
          CacheResult oldResult=mDataBase.getCache(url);
          if (oldResult != null && oldResult.contentLength > 0) {
            if (path.equals(oldResult.localPath)) {
              path=oldResult.localPath;
            }
 else {
              path=oldResult.localPath;
              file=new File(mBaseDir,path);
            }
            break;
          }
          checkOldPath=false;
        }
        ret=new StringBuffer(8);
        appendAsHex(++hashCode,ret);
        path=ret.toString();
        file=new File(mBaseDir,path);
      }
    }
    cacheRet.localPath=path;
    cacheRet.outFile=file;
  }
 else {
    Digest digest=new SHA1Digest();
    int digestLen=digest.getDigestSize();
    byte[] hash=new byte[digestLen];
    int urlLen=url.length();
    byte[] data=new byte[urlLen];
    url.getBytes(0,urlLen,data,0);
    digest.update(data,0,urlLen);
    digest.doFinal(hash,0);
    StringBuffer result=new StringBuffer(2 * digestLen);
    for (int i=0; i < digestLen; i=i + 4) {
      int h=(0x00ff & hash[i]) << 24 | (0x00ff & hash[i + 1]) << 16 | (0x00ff & hash[i + 2]) << 8 | (0x00ff & hash[i + 3]);
      appendAsHex(h,result);
    }
    cacheRet.localPath=result.toString();
    cacheRet.outFile=new File(mBaseDir,cacheRet.localPath);
  }
}
