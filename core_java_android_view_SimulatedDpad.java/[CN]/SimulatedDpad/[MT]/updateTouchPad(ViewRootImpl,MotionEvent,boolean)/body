{
  if (!synthesizeNewKeys) {
    mHandler.removeMessages(MSG_FLICK);
  }
  InputDevice device=event.getDevice();
  if (device == null) {
    return;
  }
  final long time=SystemClock.uptimeMillis();
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
    mLastTouchPadStartTimeMs=time;
  mAlwaysInTapRegion=true;
mTouchpadEnterXPosition=event.getX();
mTouchpadEnterYPosition=event.getY();
mAccumulatedX=0;
mAccumulatedY=0;
mLastMoveX=0;
mLastMoveY=0;
if (device.getMotionRange(MotionEvent.AXIS_Y).getMax() * EDGE_SWIPE_THRESHOLD < event.getY()) {
mEdgeSwipePossible=true;
}
if (synthesizeNewKeys) {
mHandler.removeMessages(MSG_FLICK);
}
break;
case MotionEvent.ACTION_MOVE:
float deltaX=event.getX() - mTouchpadEnterXPosition;
float deltaY=event.getY() - mTouchpadEnterYPosition;
if (mTouchSlopSquared < deltaX * deltaX + deltaY * deltaY) {
mAlwaysInTapRegion=false;
}
if (event.getY() < (device.getMotionRange(MotionEvent.AXIS_Y).getMax() * .5) && mEdgeSwipePossible) {
mEdgeSwipePossible=false;
Intent intent=((SearchManager)mContext.getSystemService(Context.SEARCH_SERVICE)).getAssistIntent(mContext,false,UserHandle.USER_CURRENT_OR_SELF);
if (intent != null) {
intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
try {
mContext.startActivity(intent);
}
 catch (ActivityNotFoundException e) {
Log.e(TAG,"Could not start search activity");
}
}
 else {
Log.e(TAG,"Could not find a search activity");
}
}
mLastMoveX=event.getX() - mLastTouchpadXPosition;
mLastMoveY=event.getY() - mLastTouchpadYPosition;
mAccumulatedX+=mLastMoveX;
mAccumulatedY+=mLastMoveY;
float mAccumulatedXSquared=mAccumulatedX * mAccumulatedX;
float mAccumulatedYSquared=mAccumulatedY * mAccumulatedY;
if (mAccumulatedXSquared > mDistancePerTickSquared || mAccumulatedYSquared > mDistancePerTickSquared) {
float dominantAxis;
float sign;
boolean isXAxis;
int key;
int repeatCount=0;
if (mAccumulatedXSquared > mAccumulatedYSquared) {
dominantAxis=mAccumulatedX;
isXAxis=true;
}
 else {
dominantAxis=mAccumulatedY;
isXAxis=false;
}
sign=(dominantAxis > 0) ? 1 : -1;
if (isXAxis) {
key=(sign == 1) ? KeyEvent.KEYCODE_DPAD_RIGHT : KeyEvent.KEYCODE_DPAD_LEFT;
}
 else {
key=(sign == 1) ? KeyEvent.KEYCODE_DPAD_DOWN : KeyEvent.KEYCODE_DPAD_UP;
}
while (dominantAxis * dominantAxis > mDistancePerTickSquared) {
repeatCount++;
dominantAxis-=sign * mDistancePerTick;
if (synthesizeNewKeys) {
viewroot.enqueueInputEvent(new KeyEvent(time,time,KeyEvent.ACTION_DOWN,key,0,event.getMetaState(),event.getDeviceId(),0,KeyEvent.FLAG_FALLBACK,event.getSource()));
viewroot.enqueueInputEvent(new KeyEvent(time,time,KeyEvent.ACTION_UP,key,0,event.getMetaState(),event.getDeviceId(),0,KeyEvent.FLAG_FALLBACK,event.getSource()));
}
}
mAccumulatedX=isXAxis ? dominantAxis : 0;
mAccumulatedY=isXAxis ? 0 : dominantAxis;
mLastKeySent=key;
mKeySendRateMs=(int)((time - mLastTouchPadKeySendTimeMs) / repeatCount);
mLastTouchPadKeySendTimeMs=time;
}
break;
case MotionEvent.ACTION_UP:
if (time - mLastTouchPadStartTimeMs < MAX_TAP_TIME && mAlwaysInTapRegion) {
if (synthesizeNewKeys) {
viewroot.enqueueInputEvent(new KeyEvent(mLastTouchPadStartTimeMs,time,KeyEvent.ACTION_DOWN,KeyEvent.KEYCODE_DPAD_CENTER,0,event.getMetaState(),event.getDeviceId(),0,KeyEvent.FLAG_FALLBACK,event.getSource()));
viewroot.enqueueInputEvent(new KeyEvent(mLastTouchPadStartTimeMs,time,KeyEvent.ACTION_UP,KeyEvent.KEYCODE_DPAD_CENTER,0,event.getMetaState(),event.getDeviceId(),0,KeyEvent.FLAG_FALLBACK,event.getSource()));
}
}
 else {
float xMoveSquared=mLastMoveX * mLastMoveX;
float yMoveSquared=mLastMoveY * mLastMoveY;
if (mMinFlickDistanceSquared <= xMoveSquared + yMoveSquared && time - mLastTouchPadEventTimeMs <= MAX_TAP_TIME && mKeySendRateMs <= mMaxRepeatDelay && mKeySendRateMs > 0) {
mLastDeviceId=event.getDeviceId();
mLastSource=event.getSource();
mLastMetaState=event.getMetaState();
if (synthesizeNewKeys) {
Message message=Message.obtain(mHandler,MSG_FLICK,mKeySendRateMs,mLastKeySent,viewroot);
message.setAsynchronous(true);
mHandler.sendMessageDelayed(message,mKeySendRateMs);
}
}
}
mEdgeSwipePossible=false;
break;
}
mLastTouchPadEventTimeMs=time;
mLastTouchpadXPosition=event.getX();
mLastTouchpadYPosition=event.getY();
}
