{
  AnnotationClass annotationClass=(AnnotationClass)modelClass;
  for (  String methodName : new String[]{"get" + StringUtils.capitalize(name),"is" + StringUtils.capitalize(name),name}) {
    ModelMethod[] methods=modelClass.getMethods(methodName,0);
    for (    ModelMethod modelMethod : methods) {
      AnnotationMethod method=(AnnotationMethod)modelMethod;
      if (method.isPublic() && method.isStatic() == staticAccess) {
        final AnnotationField backingField=findField(annotationClass,name,true);
        final Callable result=new Callable(Callable.Type.METHOD,methodName,method.getReturnType(null),true,isBindable(method) || (backingField != null && isBindable(backingField)));
        L.d("backing field for %s is %s",result,backingField);
        return result;
      }
    }
  }
  AnnotationField field=findField(annotationClass,name,false);
  if (field != null && field.mField.getModifiers().contains(Modifier.PUBLIC) && field.mField.getModifiers().contains(Modifier.STATIC) == staticAccess) {
    AnnotationClass fieldType=new AnnotationClass(field.mField.asType());
    return new Callable(Callable.Type.FIELD,name,fieldType,!field.mField.getModifiers().contains(Modifier.FINAL) || isObservable(fieldType),isBindable(field));
  }
  throw new IllegalArgumentException("cannot find " + name + " in "+ ((DeclaredType)annotationClass.mTypeMirror).asElement().getSimpleName());
}
