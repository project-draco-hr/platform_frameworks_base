{
  className=className.trim();
  int numDimensions=0;
  while (className.endsWith("[]")) {
    numDimensions++;
    className=className.substring(0,className.length() - 2);
  }
  AnnotationClass primitive=loadPrimitive(className);
  if (primitive != null) {
    return addDimension(primitive.mTypeMirror,numDimensions);
  }
  int templateOpenIndex=className.indexOf('<');
  DeclaredType declaredType;
  Elements elementUtils=getElementUtils();
  if (templateOpenIndex < 0) {
    TypeElement typeElement=elementUtils.getTypeElement(className);
    if (typeElement == null) {
      return null;
    }
    declaredType=(DeclaredType)typeElement.asType();
  }
 else {
    int templateCloseIndex=className.lastIndexOf('>');
    String paramStr=className.substring(templateOpenIndex + 1,templateCloseIndex);
    String baseClassName=className.substring(0,templateOpenIndex);
    TypeElement typeElement=elementUtils.getTypeElement(baseClassName);
    ArrayList<String> templateParameters=splitTemplateParameters(paramStr);
    TypeMirror[] typeArgs=new TypeMirror[templateParameters.size()];
    for (int i=0; i < typeArgs.length; i++) {
      typeArgs[i]=findClass(templateParameters.get(i)).mTypeMirror;
    }
    Types typeUtils=getTypeUtils();
    declaredType=typeUtils.getDeclaredType(typeElement,typeArgs);
  }
  return addDimension(declaredType,numDimensions);
}
