{
  processingEnv=processingEnvironment;
  instance=this;
  Types typeUtil=processingEnv.getTypeUtils();
  listType=typeUtil.erasure(findType(LIST_CLASS_NAME).asType());
  mapType=typeUtil.erasure(findType(MAP_CLASS_NAME).asType());
  stringType=typeUtil.erasure(findType(STRING_CLASS_NAME).asType());
  objectType=typeUtil.erasure(findType(OBJECT_CLASS_NAME).asType());
  mObservableType=new AnnotationClass(findType(OBSERVABLE_CLASS_NAME).asType());
  mObservableListType=new AnnotationClass(typeUtil.erasure(findType(OBSERVABLE_LIST_CLASS_NAME).asType()));
  mObservableMapType=new AnnotationClass(typeUtil.erasure(findType(OBSERVABLE_MAP_CLASS_NAME).asType()));
  mIViewDataBinderType=new AnnotationClass(findType(I_VIEW_DATA_BINDER).asType());
  mObservableFieldTypes=new AnnotationClass[OBSERVABLE_FIELDS.length];
  for (int i=0; i < OBSERVABLE_FIELDS.length; i++) {
    mObservableFieldTypes[i]=new AnnotationClass(findType(OBSERVABLE_FIELDS[i]).asType());
  }
}
