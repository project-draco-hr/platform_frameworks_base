{
  builder.append(VCARD_PROPERTY_TEL);
  builder.append(VCARD_ATTR_SEPARATOR);
  final int typeAsPrimitive;
  if (typeAsObject == null) {
    typeAsPrimitive=Phone.TYPE_OTHER;
  }
 else {
    typeAsPrimitive=typeAsObject;
  }
switch (typeAsPrimitive) {
case Phone.TYPE_HOME:
    appendTypeAttributes(builder,Arrays.asList(Constants.ATTR_TYPE_HOME,Constants.ATTR_TYPE_VOICE));
  break;
case Phone.TYPE_WORK:
appendTypeAttributes(builder,Arrays.asList(Constants.ATTR_TYPE_WORK,Constants.ATTR_TYPE_VOICE));
break;
case Phone.TYPE_FAX_HOME:
appendTypeAttributes(builder,Arrays.asList(Constants.ATTR_TYPE_HOME,Constants.ATTR_TYPE_FAX));
break;
case Phone.TYPE_FAX_WORK:
appendTypeAttributes(builder,Arrays.asList(Constants.ATTR_TYPE_WORK,Constants.ATTR_TYPE_FAX));
break;
case Phone.TYPE_MOBILE:
builder.append(Constants.ATTR_TYPE_CELL);
break;
case Phone.TYPE_PAGER:
if (mIsDoCoMo) {
builder.append(Constants.ATTR_TYPE_VOICE);
}
 else {
appendTypeAttribute(builder,Constants.ATTR_TYPE_PAGER);
}
break;
case Phone.TYPE_OTHER:
appendTypeAttribute(builder,Constants.ATTR_TYPE_VOICE);
break;
case Phone.TYPE_CUSTOM:
if (mUsesAndroidProperty && !TextUtils.isEmpty(label) && VCardUtils.containsOnlyAlphaDigitHyphen(label)) {
appendTypeAttribute(builder,"X-" + label);
}
 else {
appendTypeAttribute(builder,Constants.ATTR_TYPE_VOICE);
}
break;
default :
appendUncommonPhoneType(builder,typeAsPrimitive);
break;
}
builder.append(VCARD_DATA_SEPARATOR);
builder.append(encodedData);
builder.append(VCARD_COL_SEPARATOR);
}
