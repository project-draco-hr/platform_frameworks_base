{
  final boolean reallyUseQuotedPrintable;
  final boolean appendCharset;
  final String addressData;
{
    PostalStruct postalStruct=tryConstructPostalStruct(contentValues);
    if (postalStruct == null) {
      if (emitLineEveryTime) {
        reallyUseQuotedPrintable=false;
        appendCharset=false;
        addressData="";
      }
 else {
        return;
      }
    }
 else {
      reallyUseQuotedPrintable=postalStruct.reallyUseQuotedPrintable;
      appendCharset=postalStruct.appendCharset;
      addressData=postalStruct.addressData;
    }
  }
  List<String> parameterList=new ArrayList<String>();
  if (isPrimary) {
    parameterList.add(Constants.PARAM_TYPE_PREF);
  }
switch (type) {
case StructuredPostal.TYPE_HOME:
{
      parameterList.add(Constants.PARAM_TYPE_HOME);
      break;
    }
case StructuredPostal.TYPE_WORK:
{
    parameterList.add(Constants.PARAM_TYPE_WORK);
    break;
  }
case StructuredPostal.TYPE_CUSTOM:
{
  if (!TextUtils.isEmpty(label) && VCardUtils.containsOnlyAlphaDigitHyphen(label)) {
    parameterList.add("X-" + label);
  }
  break;
}
case StructuredPostal.TYPE_OTHER:
{
break;
}
default :
{
Log.e(LOG_TAG,"Unknown StructuredPostal type: " + type);
break;
}
}
builder.append(Constants.PROPERTY_ADR);
{
if (!parameterList.isEmpty()) {
builder.append(VCARD_PARAM_SEPARATOR);
appendTypeParameters(builder,parameterList);
}
if (appendCharset) {
builder.append(VCARD_PARAM_SEPARATOR);
builder.append(mVCardCharsetParameter);
}
if (reallyUseQuotedPrintable) {
builder.append(VCARD_PARAM_SEPARATOR);
builder.append(VCARD_PARAM_ENCODING_QP);
}
}
builder.append(VCARD_DATA_SEPARATOR);
builder.append(addressData);
builder.append(VCARD_END_OF_LINE);
}
