{
  ContentValues primaryContentValues=null;
  ContentValues subprimaryContentValues=null;
  for (  ContentValues contentValues : contentValuesList) {
    if (contentValues == null) {
      continue;
    }
    Integer isSuperPrimary=contentValues.getAsInteger(StructuredName.IS_SUPER_PRIMARY);
    if (isSuperPrimary != null && isSuperPrimary > 0) {
      primaryContentValues=contentValues;
      break;
    }
 else     if (primaryContentValues == null) {
      Integer isPrimary=contentValues.getAsInteger(StructuredName.IS_PRIMARY);
      if (isPrimary != null && isPrimary > 0 && containsNonEmptyName(contentValues)) {
        primaryContentValues=contentValues;
      }
 else       if (subprimaryContentValues == null && containsNonEmptyName(contentValues)) {
        subprimaryContentValues=contentValues;
      }
    }
  }
  if (primaryContentValues == null) {
    if (subprimaryContentValues != null) {
      primaryContentValues=subprimaryContentValues;
    }
 else {
      Log.e(LOG_TAG,"All ContentValues given from database is empty.");
      primaryContentValues=new ContentValues();
    }
  }
  final String familyName=primaryContentValues.getAsString(StructuredName.FAMILY_NAME);
  final String middleName=primaryContentValues.getAsString(StructuredName.MIDDLE_NAME);
  final String givenName=primaryContentValues.getAsString(StructuredName.GIVEN_NAME);
  final String prefix=primaryContentValues.getAsString(StructuredName.PREFIX);
  final String suffix=primaryContentValues.getAsString(StructuredName.SUFFIX);
  final String displayName=primaryContentValues.getAsString(StructuredName.DISPLAY_NAME);
  if (!TextUtils.isEmpty(familyName) || !TextUtils.isEmpty(givenName)) {
    final String encodedFamily;
    final String encodedGiven;
    final String encodedMiddle;
    final String encodedPrefix;
    final String encodedSuffix;
    final boolean reallyUseQuotedPrintableToName=(mUsesQPToPrimaryProperties && !(VCardUtils.containsOnlyNonCrLfPrintableAscii(familyName) && VCardUtils.containsOnlyNonCrLfPrintableAscii(givenName) && VCardUtils.containsOnlyNonCrLfPrintableAscii(middleName)&& VCardUtils.containsOnlyNonCrLfPrintableAscii(prefix)&& VCardUtils.containsOnlyNonCrLfPrintableAscii(suffix)));
    if (reallyUseQuotedPrintableToName) {
      encodedFamily=encodeQuotedPrintable(familyName);
      encodedGiven=encodeQuotedPrintable(givenName);
      encodedMiddle=encodeQuotedPrintable(middleName);
      encodedPrefix=encodeQuotedPrintable(prefix);
      encodedSuffix=encodeQuotedPrintable(suffix);
    }
 else {
      encodedFamily=escapeCharacters(familyName);
      encodedGiven=escapeCharacters(givenName);
      encodedMiddle=escapeCharacters(middleName);
      encodedPrefix=escapeCharacters(prefix);
      encodedSuffix=escapeCharacters(suffix);
    }
    builder.append(VCARD_PROPERTY_NAME);
    if (shouldAppendCharsetAttribute(Arrays.asList(familyName,givenName,middleName,prefix,suffix))) {
      builder.append(VCARD_ATTR_SEPARATOR);
      builder.append(mVCardAttributeCharset);
    }
    if (reallyUseQuotedPrintableToName) {
      builder.append(VCARD_ATTR_SEPARATOR);
      builder.append(VCARD_ATTR_ENCODING_QP);
    }
    builder.append(VCARD_DATA_SEPARATOR);
    builder.append(encodedFamily);
    builder.append(VCARD_ITEM_SEPARATOR);
    builder.append(encodedGiven);
    builder.append(VCARD_ITEM_SEPARATOR);
    builder.append(encodedMiddle);
    builder.append(VCARD_ITEM_SEPARATOR);
    builder.append(encodedPrefix);
    builder.append(VCARD_ITEM_SEPARATOR);
    builder.append(encodedSuffix);
    builder.append(VCARD_COL_SEPARATOR);
    final String fullname=VCardUtils.constructNameFromElements(VCardConfig.getNameOrderType(mVCardType),encodedFamily,encodedMiddle,encodedGiven,encodedPrefix,encodedSuffix);
    final boolean reallyUseQuotedPrintableToFullname=mUsesQPToPrimaryProperties && !VCardUtils.containsOnlyNonCrLfPrintableAscii(fullname);
    final String encodedFullname=reallyUseQuotedPrintableToFullname ? encodeQuotedPrintable(fullname) : escapeCharacters(fullname);
    builder.append(VCARD_PROPERTY_FULL_NAME);
    if (shouldAppendCharsetAttribute(encodedFullname)) {
      builder.append(VCARD_ATTR_SEPARATOR);
      builder.append(mVCardAttributeCharset);
    }
    if (reallyUseQuotedPrintableToFullname) {
      builder.append(VCARD_ATTR_SEPARATOR);
      builder.append(VCARD_ATTR_ENCODING_QP);
    }
    builder.append(VCARD_DATA_SEPARATOR);
    builder.append(encodedFullname);
    builder.append(VCARD_COL_SEPARATOR);
  }
 else   if (!TextUtils.isEmpty(displayName)) {
    final boolean reallyUseQuotedPrintableToDisplayName=(mUsesQPToPrimaryProperties && !VCardUtils.containsOnlyNonCrLfPrintableAscii(displayName));
    final String encodedDisplayName=reallyUseQuotedPrintableToDisplayName ? encodeQuotedPrintable(displayName) : escapeCharacters(displayName);
    builder.append(VCARD_PROPERTY_NAME);
    if (shouldAppendCharsetAttribute(encodedDisplayName)) {
      builder.append(VCARD_ATTR_SEPARATOR);
      builder.append(mVCardAttributeCharset);
    }
    if (reallyUseQuotedPrintableToDisplayName) {
      builder.append(VCARD_ATTR_SEPARATOR);
      builder.append(VCARD_ATTR_ENCODING_QP);
    }
    builder.append(VCARD_DATA_SEPARATOR);
    builder.append(encodedDisplayName);
    builder.append(VCARD_ITEM_SEPARATOR);
    builder.append(VCARD_ITEM_SEPARATOR);
    builder.append(VCARD_ITEM_SEPARATOR);
    builder.append(VCARD_ITEM_SEPARATOR);
    builder.append(VCARD_COL_SEPARATOR);
  }
 else   if (mIsDoCoMo) {
    appendVCardLine(builder,VCARD_PROPERTY_NAME,"");
  }
 else   if (mIsV30) {
    appendVCardLine(builder,VCARD_PROPERTY_NAME,"");
    appendVCardLine(builder,VCARD_PROPERTY_FULL_NAME,"");
  }
  String phoneticFamilyName=primaryContentValues.getAsString(StructuredName.PHONETIC_FAMILY_NAME);
  String phoneticMiddleName=primaryContentValues.getAsString(StructuredName.PHONETIC_MIDDLE_NAME);
  String phoneticGivenName=primaryContentValues.getAsString(StructuredName.PHONETIC_GIVEN_NAME);
  if (!(TextUtils.isEmpty(phoneticFamilyName) && TextUtils.isEmpty(phoneticMiddleName) && TextUtils.isEmpty(phoneticGivenName))) {
    if (mIsJapaneseMobilePhone) {
      phoneticFamilyName=VCardUtils.toHalfWidthString(phoneticFamilyName);
      phoneticMiddleName=VCardUtils.toHalfWidthString(phoneticMiddleName);
      phoneticGivenName=VCardUtils.toHalfWidthString(phoneticGivenName);
    }
    if (mIsV30) {
      final String sortString=VCardUtils.constructNameFromElements(mVCardType,phoneticFamilyName,phoneticMiddleName,phoneticGivenName);
      builder.append(VCARD_PROPERTY_SORT_STRING);
      final String encodedSortString=escapeCharacters(sortString);
      if (shouldAppendCharsetAttribute(encodedSortString)) {
        builder.append(VCARD_ATTR_SEPARATOR);
        builder.append(mVCardAttributeCharset);
      }
      builder.append(VCARD_DATA_SEPARATOR);
      builder.append(encodedSortString);
      builder.append(VCARD_COL_SEPARATOR);
    }
 else {
      builder.append(VCARD_PROPERTY_SOUND);
      builder.append(VCARD_ATTR_SEPARATOR);
      builder.append(Constants.ATTR_TYPE_X_IRMC_N);
      boolean reallyUseQuotedPrintable=(mUsesQPToPrimaryProperties && !(VCardUtils.containsOnlyNonCrLfPrintableAscii(phoneticFamilyName) && VCardUtils.containsOnlyNonCrLfPrintableAscii(phoneticMiddleName) && VCardUtils.containsOnlyNonCrLfPrintableAscii(phoneticGivenName)));
      final String encodedPhoneticFamilyName;
      final String encodedPhoneticMiddleName;
      final String encodedPhoneticGivenName;
      if (reallyUseQuotedPrintable) {
        encodedPhoneticFamilyName=encodeQuotedPrintable(phoneticFamilyName);
        encodedPhoneticMiddleName=encodeQuotedPrintable(phoneticMiddleName);
        encodedPhoneticGivenName=encodeQuotedPrintable(phoneticGivenName);
      }
 else {
        encodedPhoneticFamilyName=escapeCharacters(phoneticFamilyName);
        encodedPhoneticMiddleName=escapeCharacters(phoneticMiddleName);
        encodedPhoneticGivenName=escapeCharacters(phoneticGivenName);
      }
      if (shouldAppendCharsetAttribute(Arrays.asList(encodedPhoneticFamilyName,encodedPhoneticMiddleName,encodedPhoneticGivenName))) {
        builder.append(VCARD_ATTR_SEPARATOR);
        builder.append(mVCardAttributeCharset);
      }
      builder.append(VCARD_DATA_SEPARATOR);
      builder.append(encodedPhoneticFamilyName);
      builder.append(VCARD_ITEM_SEPARATOR);
      builder.append(encodedPhoneticGivenName);
      builder.append(VCARD_ITEM_SEPARATOR);
      builder.append(encodedPhoneticMiddleName);
      builder.append(VCARD_ITEM_SEPARATOR);
      builder.append(VCARD_ITEM_SEPARATOR);
      builder.append(VCARD_COL_SEPARATOR);
    }
  }
 else   if (mIsDoCoMo) {
    builder.append(VCARD_PROPERTY_SOUND);
    builder.append(VCARD_ATTR_SEPARATOR);
    builder.append(Constants.ATTR_TYPE_X_IRMC_N);
    builder.append(VCARD_DATA_SEPARATOR);
    builder.append(VCARD_ITEM_SEPARATOR);
    builder.append(VCARD_ITEM_SEPARATOR);
    builder.append(VCARD_ITEM_SEPARATOR);
    builder.append(VCARD_ITEM_SEPARATOR);
    builder.append(VCARD_COL_SEPARATOR);
  }
  if (mUsesDefactProperty) {
    if (!TextUtils.isEmpty(phoneticGivenName)) {
      final boolean reallyUseQuotedPrintable=(mUsesQPToPrimaryProperties && !VCardUtils.containsOnlyNonCrLfPrintableAscii(phoneticGivenName));
      final String encodedPhoneticGivenName;
      if (reallyUseQuotedPrintable) {
        encodedPhoneticGivenName=encodeQuotedPrintable(phoneticGivenName);
      }
 else {
        encodedPhoneticGivenName=escapeCharacters(phoneticGivenName);
      }
      builder.append(VCARD_PROPERTY_X_PHONETIC_FIRST_NAME);
      if (shouldAppendCharsetAttribute(encodedPhoneticGivenName)) {
        builder.append(VCARD_ATTR_SEPARATOR);
        builder.append(mVCardAttributeCharset);
      }
      if (reallyUseQuotedPrintable) {
        builder.append(VCARD_ATTR_SEPARATOR);
        builder.append(VCARD_ATTR_ENCODING_QP);
      }
      builder.append(VCARD_DATA_SEPARATOR);
      builder.append(encodedPhoneticGivenName);
      builder.append(VCARD_COL_SEPARATOR);
    }
    if (!TextUtils.isEmpty(phoneticMiddleName)) {
      final boolean reallyUseQuotedPrintable=(mUsesQPToPrimaryProperties && !VCardUtils.containsOnlyNonCrLfPrintableAscii(phoneticMiddleName));
      final String encodedPhoneticMiddleName;
      if (reallyUseQuotedPrintable) {
        encodedPhoneticMiddleName=encodeQuotedPrintable(phoneticMiddleName);
      }
 else {
        encodedPhoneticMiddleName=escapeCharacters(phoneticMiddleName);
      }
      builder.append(VCARD_PROPERTY_X_PHONETIC_MIDDLE_NAME);
      if (shouldAppendCharsetAttribute(encodedPhoneticMiddleName)) {
        builder.append(VCARD_ATTR_SEPARATOR);
        builder.append(mVCardAttributeCharset);
      }
      if (reallyUseQuotedPrintable) {
        builder.append(VCARD_ATTR_SEPARATOR);
        builder.append(VCARD_ATTR_ENCODING_QP);
      }
      builder.append(VCARD_DATA_SEPARATOR);
      builder.append(encodedPhoneticMiddleName);
      builder.append(VCARD_COL_SEPARATOR);
    }
    if (!TextUtils.isEmpty(phoneticFamilyName)) {
      final boolean reallyUseQuotedPrintable=(mUsesQPToPrimaryProperties && !VCardUtils.containsOnlyNonCrLfPrintableAscii(phoneticFamilyName));
      final String encodedPhoneticFamilyName;
      if (reallyUseQuotedPrintable) {
        encodedPhoneticFamilyName=encodeQuotedPrintable(phoneticFamilyName);
      }
 else {
        encodedPhoneticFamilyName=escapeCharacters(phoneticFamilyName);
      }
      builder.append(VCARD_PROPERTY_X_PHONETIC_LAST_NAME);
      if (shouldAppendCharsetAttribute(encodedPhoneticFamilyName)) {
        builder.append(VCARD_ATTR_SEPARATOR);
        builder.append(mVCardAttributeCharset);
      }
      if (reallyUseQuotedPrintable) {
        builder.append(VCARD_ATTR_SEPARATOR);
        builder.append(VCARD_ATTR_ENCODING_QP);
      }
      builder.append(VCARD_DATA_SEPARATOR);
      builder.append(encodedPhoneticFamilyName);
      builder.append(VCARD_COL_SEPARATOR);
    }
  }
}
