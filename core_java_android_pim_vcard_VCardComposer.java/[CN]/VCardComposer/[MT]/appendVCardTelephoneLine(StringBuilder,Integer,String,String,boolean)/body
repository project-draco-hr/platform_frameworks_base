{
  builder.append(Constants.PROPERTY_TEL);
  builder.append(VCARD_ATTR_SEPARATOR);
  final int typeAsPrimitive;
  if (typeAsObject == null) {
    typeAsPrimitive=Phone.TYPE_OTHER;
  }
 else {
    typeAsPrimitive=typeAsObject;
  }
  ArrayList<String> attributeList=new ArrayList<String>();
switch (typeAsPrimitive) {
case Phone.TYPE_HOME:
    attributeList.addAll(Arrays.asList(Constants.ATTR_TYPE_HOME,Constants.ATTR_TYPE_VOICE));
  break;
case Phone.TYPE_WORK:
attributeList.addAll(Arrays.asList(Constants.ATTR_TYPE_WORK,Constants.ATTR_TYPE_VOICE));
break;
case Phone.TYPE_FAX_HOME:
attributeList.addAll(Arrays.asList(Constants.ATTR_TYPE_HOME,Constants.ATTR_TYPE_FAX));
break;
case Phone.TYPE_FAX_WORK:
attributeList.addAll(Arrays.asList(Constants.ATTR_TYPE_WORK,Constants.ATTR_TYPE_FAX));
break;
case Phone.TYPE_MOBILE:
attributeList.add(Constants.ATTR_TYPE_CELL);
break;
case Phone.TYPE_PAGER:
if (mIsDoCoMo) {
attributeList.add(Constants.ATTR_TYPE_VOICE);
}
 else {
attributeList.add(Constants.ATTR_TYPE_PAGER);
}
break;
case Phone.TYPE_OTHER:
attributeList.add(Constants.ATTR_TYPE_VOICE);
break;
case Phone.TYPE_CAR:
attributeList.add(Constants.ATTR_TYPE_CAR);
break;
case Phone.TYPE_COMPANY_MAIN:
attributeList.add(Constants.ATTR_TYPE_WORK);
isPrimary=true;
break;
case Phone.TYPE_ISDN:
attributeList.add(Constants.ATTR_TYPE_ISDN);
break;
case Phone.TYPE_MAIN:
isPrimary=true;
break;
case Phone.TYPE_OTHER_FAX:
attributeList.add(Constants.ATTR_TYPE_FAX);
break;
case Phone.TYPE_TELEX:
attributeList.add(Constants.ATTR_TYPE_TLX);
break;
case Phone.TYPE_WORK_MOBILE:
attributeList.addAll(Arrays.asList(Constants.ATTR_TYPE_WORK,Constants.ATTR_TYPE_CELL));
break;
case Phone.TYPE_WORK_PAGER:
attributeList.add(Constants.ATTR_TYPE_WORK);
if (mIsDoCoMo) {
attributeList.add(Constants.ATTR_TYPE_VOICE);
}
 else {
attributeList.add(Constants.ATTR_TYPE_PAGER);
}
break;
case Phone.TYPE_MMS:
attributeList.add(Constants.ATTR_TYPE_MSG);
break;
case Phone.TYPE_CUSTOM:
if (mUsesAndroidProperty && !TextUtils.isEmpty(label) && VCardUtils.containsOnlyAlphaDigitHyphen(label)) {
attributeList.add("X-" + label);
}
 else {
attributeList.add(Constants.ATTR_TYPE_VOICE);
}
break;
case Phone.TYPE_RADIO:
case Phone.TYPE_TTY_TDD:
default :
break;
}
if (isPrimary) {
attributeList.add(Constants.ATTR_TYPE_PREF);
}
if (attributeList.isEmpty()) {
appendUncommonPhoneType(builder,typeAsPrimitive);
}
 else {
appendTypeAttributes(builder,attributeList);
}
builder.append(VCARD_DATA_SEPARATOR);
builder.append(encodedData);
builder.append(VCARD_COL_SEPARATOR);
}
