{
  final List<ContentValues> contentValuesList=contentValuesListMap.get(Im.CONTENT_ITEM_TYPE);
  if (contentValuesList == null) {
    return;
  }
  for (  ContentValues contentValues : contentValuesList) {
    final Integer protocolAsObject=contentValues.getAsInteger(Im.PROTOCOL);
    if (protocolAsObject == null) {
      continue;
    }
    final String propertyName=VCardUtils.getPropertyNameForIm(protocolAsObject);
    if (propertyName == null) {
      continue;
    }
    String data=contentValues.getAsString(Im.DATA);
    if (data != null) {
      data=data.trim();
    }
    if (TextUtils.isEmpty(data)) {
      continue;
    }
    final String typeAsString;
{
      final Integer typeAsInteger=contentValues.getAsInteger(Im.TYPE);
switch (typeAsInteger != null ? typeAsInteger : Im.TYPE_OTHER) {
case Im.TYPE_HOME:
{
          typeAsString=Constants.PARAM_TYPE_HOME;
          break;
        }
case Im.TYPE_WORK:
{
        typeAsString=Constants.PARAM_TYPE_WORK;
        break;
      }
case Im.TYPE_CUSTOM:
{
      final String label=contentValues.getAsString(Im.LABEL);
      typeAsString=(label != null ? "X-" + label : null);
      break;
    }
case Im.TYPE_OTHER:
default :
{
    typeAsString=null;
    break;
  }
}
}
List<String> parameterList=new ArrayList<String>();
if (!TextUtils.isEmpty(typeAsString)) {
parameterList.add(typeAsString);
}
final Integer isPrimaryAsInteger=contentValues.getAsInteger(Im.IS_PRIMARY);
final boolean isPrimary=(isPrimaryAsInteger != null ? (isPrimaryAsInteger > 0) : false);
if (isPrimary) {
parameterList.add(Constants.PARAM_TYPE_PREF);
}
appendVCardLineWithCharsetAndQPDetection(builder,propertyName,parameterList,data);
}
}
