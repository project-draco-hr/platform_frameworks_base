{
  if (mCursor == null || mCursor.isAfterLast()) {
    mErrorReason=FAILURE_REASON_NOT_INITIALIZED;
    return false;
  }
  String name=null;
  String vcard;
  try {
    if (mIsCallLogComposer) {
      vcard=createOneCallLogEntryInternal();
    }
 else {
      if (mIdColumn >= 0) {
        vcard=createOneEntryInternal(mCursor.getString(mIdColumn));
      }
 else {
        Log.e(LOG_TAG,"Incorrect mIdColumn: " + mIdColumn);
        return true;
      }
    }
  }
 catch (  OutOfMemoryError error) {
    Log.e(LOG_TAG,"OutOfMemoryError occured. Ignore the entry: " + name);
    System.gc();
    return true;
  }
 finally {
    mCursor.moveToNext();
  }
  if (mCareHandlerErrors) {
    List<OneEntryHandler> finishedList=new ArrayList<OneEntryHandler>(mHandlerList.size());
    for (    OneEntryHandler handler : mHandlerList) {
      if (!handler.onEntryCreated(vcard)) {
        return false;
      }
    }
  }
 else {
    for (    OneEntryHandler handler : mHandlerList) {
      handler.onEntryCreated(vcard);
    }
  }
  return true;
}
