{
  final Map<String,List<ContentValues>> contentValuesListMap=new HashMap<String,List<ContentValues>>();
  EntityIterator entityIterator=null;
  try {
    final Uri uri=RawContactsEntity.CONTENT_URI.buildUpon().appendQueryParameter(Data.FOR_EXPORT_ONLY,"1").build();
    final String selection=Data.CONTACT_ID + "=?";
    final String[] selectionArgs=new String[]{contactId};
    if (getEntityIteratorMethod != null) {
      try {
        entityIterator=(EntityIterator)getEntityIteratorMethod.invoke(null,mContentResolver,uri,selection,selectionArgs,null);
      }
 catch (      IllegalArgumentException e) {
        Log.e(LOG_TAG,"IllegalArgumentException has been thrown: " + e.getMessage());
      }
catch (      IllegalAccessException e) {
        Log.e(LOG_TAG,"IllegalAccessException has been thrown: " + e.getMessage());
      }
catch (      InvocationTargetException e) {
        Log.e(LOG_TAG,"InvocationTargetException has been thrown: ");
        StackTraceElement[] stackTraceElements=e.getCause().getStackTrace();
        for (        StackTraceElement element : stackTraceElements) {
          Log.e(LOG_TAG,"    at " + element.toString());
        }
        throw new VCardException("InvocationTargetException has been thrown: " + e.getCause().getMessage());
      }
    }
 else {
      entityIterator=RawContacts.newEntityIterator(mContentResolver.query(uri,null,selection,selectionArgs,null));
    }
    if (entityIterator == null) {
      Log.e(LOG_TAG,"EntityIterator is null");
      return "";
    }
    if (!entityIterator.hasNext()) {
      Log.w(LOG_TAG,"Data does not exist. contactId: " + contactId);
      return "";
    }
    while (entityIterator.hasNext()) {
      Entity entity=entityIterator.next();
      for (      NamedContentValues namedContentValues : entity.getSubValues()) {
        ContentValues contentValues=namedContentValues.values;
        String key=contentValues.getAsString(Data.MIMETYPE);
        if (key != null) {
          List<ContentValues> contentValuesList=contentValuesListMap.get(key);
          if (contentValuesList == null) {
            contentValuesList=new ArrayList<ContentValues>();
            contentValuesListMap.put(key,contentValuesList);
          }
          contentValuesList.add(contentValues);
        }
      }
    }
  }
  finally {
    if (entityIterator != null) {
      entityIterator.close();
    }
  }
  final VCardBuilder builder=new VCardBuilder(mVCardType);
  builder.appendNameProperties(contentValuesListMap.get(StructuredName.CONTENT_ITEM_TYPE)).appendNickNames(contentValuesListMap.get(Nickname.CONTENT_ITEM_TYPE)).appendPhones(contentValuesListMap.get(Phone.CONTENT_ITEM_TYPE)).appendEmails(contentValuesListMap.get(Email.CONTENT_ITEM_TYPE)).appendPostals(contentValuesListMap.get(StructuredPostal.CONTENT_ITEM_TYPE)).appendOrganizations(contentValuesListMap.get(Organization.CONTENT_ITEM_TYPE)).appendWebsites(contentValuesListMap.get(Website.CONTENT_ITEM_TYPE)).appendPhotos(contentValuesListMap.get(Photo.CONTENT_ITEM_TYPE)).appendNotes(contentValuesListMap.get(Note.CONTENT_ITEM_TYPE)).appendEvents(contentValuesListMap.get(Event.CONTENT_ITEM_TYPE)).appendIms(contentValuesListMap.get(Im.CONTENT_ITEM_TYPE)).appendRelation(contentValuesListMap.get(Relation.CONTENT_ITEM_TYPE));
  return builder.toString();
}
