{
  int numOperations=operations.size();
  final int[] userIds=new int[numOperations];
  for (int i=0; i < numOperations; i++) {
    ContentProviderOperation operation=operations.get(i);
    userIds[i]=getAndEnforceUserId(operation.getUri());
    if (userIds[i] != UserHandle.USER_CURRENT) {
      operation=new ContentProviderOperation(operation,true);
      operations.set(i,operation);
    }
    if (operation.isReadOperation()) {
      if (enforceReadPermission(callingPkg,operation.getUri()) != AppOpsManager.MODE_ALLOWED) {
        throw new OperationApplicationException("App op not allowed",0);
      }
    }
    if (operation.isWriteOperation()) {
      if (enforceWritePermission(callingPkg,operation.getUri()) != AppOpsManager.MODE_ALLOWED) {
        throw new OperationApplicationException("App op not allowed",0);
      }
    }
  }
  final String original=setCallingPackage(callingPkg);
  try {
    ContentProviderResult[] results=ContentProvider.this.applyBatch(operations);
    for (int i=0; i < results.length; i++) {
      if (userIds[i] != UserHandle.USER_CURRENT) {
        results[i]=new ContentProviderResult(results[i],userIds[i]);
      }
    }
    return results;
  }
  finally {
    setCallingPackage(original);
  }
}
