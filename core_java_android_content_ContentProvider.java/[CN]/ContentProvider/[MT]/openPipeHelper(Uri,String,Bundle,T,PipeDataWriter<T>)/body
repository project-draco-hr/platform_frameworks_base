{
  try {
    final ParcelFileDescriptor[] fds=ParcelFileDescriptor.createPipe();
    AsyncTask<Object,Object,Object> task=new AsyncTask<Object,Object,Object>(){
      @Override protected Object doInBackground(      Object... params){
        func.writeDataToPipe(fds[1],uri,mimeType,opts,args);
        try {
          fds[1].close();
        }
 catch (        IOException e) {
          Log.w(TAG,"Failure closing pipe",e);
        }
        return null;
      }
    }
;
    task.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,(Object[])null);
    return fds[0];
  }
 catch (  IOException e) {
    throw new FileNotFoundException("failure making pipe");
  }
}
