{
  File sharedLibraryDir=getNativeBinaryDirForPackage(pkg);
  final String apkLib="lib/";
  final int apkLibLen=apkLib.length();
  final int cpuAbiLen=cpuAbi.length();
  final String libPrefix="lib";
  final int libPrefixLen=libPrefix.length();
  final String libSuffix=".so";
  final int libSuffixLen=libSuffix.length();
  boolean hasNativeLibraries=false;
  boolean installedNativeLibraries=false;
  final int minEntryLen=apkLibLen + 2 + libPrefixLen+ 1+ libSuffixLen;
  ZipFile zipFile=new ZipFile(scanFile);
  Enumeration<ZipEntry> entries=(Enumeration<ZipEntry>)zipFile.entries();
  while (entries.hasMoreElements()) {
    ZipEntry entry=entries.nextElement();
    if (entry.isDirectory()) {
      continue;
    }
    String entryName=entry.getName();
    if (entryName.length() < minEntryLen || !entryName.endsWith(libSuffix) || !entryName.startsWith(apkLib)) {
      continue;
    }
    int lastSlash=entryName.lastIndexOf('/');
    if (lastSlash < 0 || !entryName.regionMatches(lastSlash + 1,libPrefix,0,libPrefixLen)) {
      continue;
    }
    hasNativeLibraries=true;
    if (lastSlash != apkLibLen + cpuAbiLen || !entryName.regionMatches(apkLibLen,cpuAbi,0,cpuAbiLen))     continue;
    String libFileName=entryName.substring(lastSlash + 1);
    if (!FileUtils.isFilenameSafe(new File(libFileName))) {
      continue;
    }
    installedNativeLibraries=true;
    String sharedLibraryFilePath=sharedLibraryDir.getPath() + File.separator + libFileName;
    File sharedLibraryFile=new File(sharedLibraryFilePath);
    if (Config.LOGD) {
      Log.d(TAG,"Caching shared lib " + entry.getName());
    }
    if (mInstaller == null) {
      sharedLibraryDir.mkdir();
    }
    cacheNativeBinaryLI(pkg,zipFile,entry,sharedLibraryDir,sharedLibraryFile);
  }
  if (!hasNativeLibraries)   return PACKAGE_INSTALL_NATIVE_NO_LIBRARIES;
  if (!installedNativeLibraries)   return PACKAGE_INSTALL_NATIVE_ABI_MISMATCH;
  return PACKAGE_INSTALL_NATIVE_FOUND_LIBRARIES;
}
