{
  Iterator<BasePermission> it=mSettings.mPermissionTrees.values().iterator();
  while (it.hasNext()) {
    BasePermission bp=it.next();
    if (bp.perm == null) {
      Log.w(TAG,"Removing dangling permission tree: " + bp.name + " from package "+ bp.sourcePackage);
      it.remove();
    }
  }
  it=mSettings.mPermissions.values().iterator();
  while (it.hasNext()) {
    BasePermission bp=it.next();
    if (bp.type == BasePermission.TYPE_DYNAMIC) {
      if (DEBUG_SETTINGS)       Log.v(TAG,"Dynamic permission: name=" + bp.name + " pkg="+ bp.sourcePackage+ " info="+ bp.pendingInfo);
      if (bp.perm == null && bp.pendingInfo != null) {
        BasePermission tree=findPermissionTreeLP(bp.name);
        if (tree != null) {
          bp.perm=new PackageParser.Permission(tree.perm.owner,new PermissionInfo(bp.pendingInfo));
          bp.perm.info.packageName=tree.perm.info.packageName;
          bp.perm.info.name=bp.name;
          bp.uid=tree.uid;
        }
      }
    }
    if (bp.perm == null) {
      Log.w(TAG,"Removing dangling permission: " + bp.name + " from package "+ bp.sourcePackage);
      it.remove();
    }
  }
  for (  PackageParser.Package pkg : mPackages.values()) {
    grantPermissionsLP(pkg,false);
  }
}
