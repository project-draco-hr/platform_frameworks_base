{
  if (packageName == null) {
    Log.w(TAG,"Attempt to delete null packageName.");
    return false;
  }
  PackageParser.Package p;
synchronized (mPackages) {
    p=mPackages.get(packageName);
  }
  if (p == null) {
    Log.w(TAG,"Package named '" + packageName + "' doesn't exist.");
    return false;
  }
  final ApplicationInfo applicationInfo=p.applicationInfo;
  if (applicationInfo == null) {
    Log.w(TAG,"Package " + packageName + " has no applicationInfo.");
    return false;
  }
  if ((applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0) {
    Log.w(TAG,"Attempt to delete system package " + packageName);
    return false;
  }
  final File sourceFile=new File(applicationInfo.sourceDir);
  if (!sourceFile.exists()) {
    Log.w(TAG,"Package source " + applicationInfo.sourceDir + " does not exist.");
    return false;
  }
  outInfo.uid=p.applicationInfo.uid;
  outInfo.removedPackage=packageName;
  removePackageLI(p,true);
  if (deleteCodeAndResources) {
    sourceFile.delete();
    final File publicSourceFile=new File(applicationInfo.publicSourceDir);
    if (publicSourceFile.exists()) {
      publicSourceFile.delete();
    }
    if (mInstaller != null) {
      int retCode=mInstaller.rmdex(sourceFile.toString());
      if (retCode < 0) {
        Log.w(TAG,"Couldn't remove dex file for package: " + packageName + ", retcode="+ retCode);
      }
    }
  }
  if ((flags & PackageManager.DONT_DELETE_DATA) == 0) {
    if (mInstaller != null) {
      int retCode=mInstaller.remove(packageName);
      if (retCode < 0) {
        Log.w(TAG,"Couldn't remove app data or cache directory for package: " + packageName + ", retcode="+ retCode);
      }
    }
 else {
      PackageParser.Package pkg=mPackages.get(packageName);
      File dataDir=new File(pkg.applicationInfo.dataDir);
      dataDir.delete();
    }
synchronized (mPackages) {
      outInfo.removedUid=mSettings.removePackageLP(packageName);
    }
  }
  return true;
}
