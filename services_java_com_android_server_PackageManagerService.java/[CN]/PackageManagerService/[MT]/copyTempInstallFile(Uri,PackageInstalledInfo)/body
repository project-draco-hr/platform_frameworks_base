{
  File tmpPackageFile=createTempPackageFile();
  int retCode=PackageManager.INSTALL_SUCCEEDED;
  if (tmpPackageFile == null) {
    res.returnCode=PackageManager.INSTALL_FAILED_INSUFFICIENT_STORAGE;
    return null;
  }
  if (pPackageURI.getScheme().equals("file")) {
    final File srcPackageFile=new File(pPackageURI.getPath());
    if (!FileUtils.copyFile(srcPackageFile,tmpPackageFile)) {
      Log.e(TAG,"Couldn't copy package file to temp file.");
      retCode=PackageManager.INSTALL_FAILED_INSUFFICIENT_STORAGE;
    }
  }
 else   if (pPackageURI.getScheme().equals("content")) {
    ParcelFileDescriptor fd=null;
    try {
      fd=mContext.getContentResolver().openFileDescriptor(pPackageURI,"r");
    }
 catch (    FileNotFoundException e) {
      Log.e(TAG,"Couldn't open file descriptor from download service. Failed with exception " + e);
      retCode=PackageManager.INSTALL_FAILED_INSUFFICIENT_STORAGE;
    }
    if (fd == null) {
      Log.e(TAG,"Couldn't open file descriptor from download service (null).");
      retCode=PackageManager.INSTALL_FAILED_INSUFFICIENT_STORAGE;
    }
 else {
      if (Config.LOGV) {
        Log.v(TAG,"Opened file descriptor from download service.");
      }
      ParcelFileDescriptor.AutoCloseInputStream dlStream=new ParcelFileDescriptor.AutoCloseInputStream(fd);
      if (!FileUtils.copyToFile(dlStream,tmpPackageFile)) {
        Log.e(TAG,"Couldn't copy package stream to temp file.");
        retCode=PackageManager.INSTALL_FAILED_INSUFFICIENT_STORAGE;
      }
    }
  }
 else {
    Log.e(TAG,"Package URI is not 'file:' or 'content:' - " + pPackageURI);
    retCode=PackageManager.INSTALL_FAILED_INVALID_URI;
  }
  res.returnCode=retCode;
  if (retCode != PackageManager.INSTALL_SUCCEEDED) {
    if (tmpPackageFile != null && tmpPackageFile.exists()) {
      tmpPackageFile.delete();
    }
    return null;
  }
  return tmpPackageFile;
}
