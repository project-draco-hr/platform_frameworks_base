{
  if (packageName == null) {
    return;
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.MOVE_PACKAGE,null);
  int returnCode=PackageManager.MOVE_SUCCEEDED;
  int currFlags=0;
  int newFlags=0;
synchronized (mPackages) {
    PackageParser.Package pkg=mPackages.get(packageName);
    if (pkg == null) {
      returnCode=PackageManager.MOVE_FAILED_DOESNT_EXIST;
    }
    if (pkg.applicationInfo != null && (pkg.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0) {
      Log.w(TAG,"Cannot move system application");
      returnCode=PackageManager.MOVE_FAILED_SYSTEM_PACKAGE;
    }
 else     if (pkg.applicationInfo != null && (pkg.applicationInfo.flags & ApplicationInfo.FLAG_FORWARD_LOCK) != 0) {
      Log.w(TAG,"Cannot move forward locked app.");
      returnCode=PackageManager.MOVE_FAILED_FORWARD_LOCKED;
    }
 else {
      if ((flags & PackageManager.MOVE_EXTERNAL_MEDIA) != 0 && (flags & PackageManager.MOVE_INTERNAL) != 0) {
        Log.w(TAG,"Ambigous flags specified for move location.");
        returnCode=PackageManager.MOVE_FAILED_INVALID_LOCATION;
      }
 else {
        newFlags=(flags & PackageManager.MOVE_EXTERNAL_MEDIA) != 0 ? PackageManager.INSTALL_EXTERNAL : 0;
        currFlags=(pkg.applicationInfo.flags & ApplicationInfo.FLAG_ON_SDCARD) != 0 ? PackageManager.INSTALL_EXTERNAL : 0;
        if (newFlags == currFlags) {
          Log.w(TAG,"No move required. Trying to move to same location");
          returnCode=PackageManager.MOVE_FAILED_INVALID_LOCATION;
        }
      }
    }
    if (returnCode != PackageManager.MOVE_SUCCEEDED) {
      processPendingMove(new MoveParams(null,observer,0,null),returnCode);
    }
 else {
      Message msg=mHandler.obtainMessage(INIT_COPY);
      InstallArgs srcArgs=createInstallArgs(currFlags,pkg.applicationInfo.sourceDir,pkg.applicationInfo.publicSourceDir);
      MoveParams mp=new MoveParams(srcArgs,observer,newFlags,packageName);
      msg.obj=mp;
      mHandler.sendMessage(msg);
    }
  }
}
