{
  final int uid=Binder.getCallingUid();
synchronized (mPackages) {
    PackageSetting targetPackageSetting=mSettings.mPackages.get(targetPackage);
    if (targetPackageSetting == null) {
      throw new IllegalArgumentException("Unknown target package: " + targetPackage);
    }
    PackageSetting installerPackageSetting;
    if (installerPackageName != null) {
      installerPackageSetting=mSettings.mPackages.get(installerPackageName);
      if (installerPackageSetting == null) {
        throw new IllegalArgumentException("Unknown installer package: " + installerPackageName);
      }
    }
 else {
      installerPackageSetting=null;
    }
    Signature[] callerSignature;
    Object obj=mSettings.getUserIdLP(uid);
    if (obj != null) {
      if (obj instanceof SharedUserSetting) {
        callerSignature=((SharedUserSetting)obj).signatures.mSignatures;
      }
 else       if (obj instanceof PackageSetting) {
        callerSignature=((PackageSetting)obj).signatures.mSignatures;
      }
 else {
        throw new SecurityException("Bad object " + obj + " for uid "+ uid);
      }
    }
 else {
      throw new SecurityException("Unknown calling uid " + uid);
    }
    if (installerPackageSetting != null) {
      if (checkSignaturesLP(callerSignature,installerPackageSetting.signatures.mSignatures) != PackageManager.SIGNATURE_MATCH) {
        throw new SecurityException("Caller does not have same cert as new installer package " + installerPackageName);
      }
    }
    if (targetPackageSetting.installerPackageName != null) {
      PackageSetting setting=mSettings.mPackages.get(targetPackageSetting.installerPackageName);
      if (setting != null) {
        if (checkSignaturesLP(callerSignature,setting.signatures.mSignatures) != PackageManager.SIGNATURE_MATCH) {
          throw new SecurityException("Caller does not have same cert as old installer package " + targetPackageSetting.installerPackageName);
        }
      }
    }
    targetPackageSetting.installerPackageName=installerPackageName;
    scheduleWriteSettingsLocked();
  }
}
