{
  MountService mountService=getMountService();
  long len=tmpPackageFile.length();
  int mbLen=(int)(len / (1024 * 1024));
  if ((len - (mbLen * 1024 * 1024)) > 0) {
    mbLen++;
  }
  if (DEBUG_SD_INSTALL)   Log.i(TAG,"mbLen=" + mbLen);
  String cachePath=null;
  String sdEncKey;
  try {
    sdEncKey=SystemKeyStore.getInstance().retrieveKeyHexString(mSdEncryptKey);
    if (sdEncKey == null) {
      sdEncKey=SystemKeyStore.getInstance().generateNewKeyHexString(128,mSdEncryptAlg,mSdEncryptKey);
      if (sdEncKey == null) {
        Log.e(TAG,"Failed to create encryption keys for package: " + pkgName + ".");
        return null;
      }
    }
  }
 catch (  NoSuchAlgorithmException nsae) {
    Log.e(TAG,"Failed to create encryption keys with exception: " + nsae);
    return null;
  }
  int rc=mountService.createSecureContainer(pkgName,mbLen,"vfat",sdEncKey,Process.SYSTEM_UID);
  if (rc != MountServiceResultCode.OperationSucceeded) {
    Log.e(TAG,String.format("Failed to create container (%d)",rc));
    rc=mountService.destroySecureContainer(pkgName);
    if (rc != MountServiceResultCode.OperationSucceeded) {
      Log.e(TAG,String.format("Failed to cleanup container (%d)",rc));
      return null;
    }
    rc=mountService.createSecureContainer(pkgName,mbLen,"vfat",sdEncKey,Process.SYSTEM_UID);
    if (rc != MountServiceResultCode.OperationSucceeded) {
      Log.e(TAG,String.format("Failed to create container (2nd try) (%d)",rc));
      return null;
    }
  }
  cachePath=mountService.getSecureContainerPath(pkgName);
  if (DEBUG_SD_INSTALL)   Log.i(TAG,"Trying to install " + pkgName + ", cachePath ="+ cachePath);
  return cachePath;
}
