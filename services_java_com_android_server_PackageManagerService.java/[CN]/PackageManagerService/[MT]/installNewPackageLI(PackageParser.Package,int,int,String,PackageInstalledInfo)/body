{
  boolean dataDirExists;
  String pkgName=pkg.packageName;
  boolean onSd=(parseFlags & PackageParser.PARSE_ON_SDCARD) != 0;
  if (useEncryptedFilesystemForPackage(pkg)) {
    dataDirExists=(new File(mSecureAppDataDir,pkgName)).exists();
  }
 else {
    dataDirExists=(new File(mAppDataDir,pkgName)).exists();
  }
  res.name=pkgName;
synchronized (mPackages) {
    if (mPackages.containsKey(pkgName) || mAppDirs.containsKey(pkg.mPath)) {
      Log.w(TAG,"Attempt to re-install " + pkgName + " without first uninstalling.");
      res.returnCode=PackageManager.INSTALL_FAILED_ALREADY_EXISTS;
      return;
    }
  }
  mLastScanError=PackageManager.INSTALL_SUCCEEDED;
  if (onSd) {
    String cPath=createSdDir(new File(pkg.mScanPath),pkgName);
    if (cPath == null) {
      mLastScanError=res.returnCode=PackageManager.INSTALL_FAILED_CONTAINER_ERROR;
      return;
    }
  }
  PackageParser.Package newPackage=scanPackageLI(pkg,parseFlags,scanMode);
  if (newPackage == null) {
    Log.w(TAG,"Package couldn't be installed in " + pkg.mPath);
    if ((res.returnCode=mLastScanError) == PackageManager.INSTALL_SUCCEEDED) {
      res.returnCode=PackageManager.INSTALL_FAILED_INVALID_APK;
    }
  }
 else {
    File destPackageFile=new File(pkg.mPath);
    if (destPackageFile.exists()) {
      destPackageFile.delete();
    }
    updateSettingsLI(newPackage,installerPackageName,res);
    if (res.returnCode == PackageManager.INSTALL_SUCCEEDED) {
      if (onSd && !finalizeSdDir(pkgName)) {
        res.returnCode=PackageManager.INSTALL_FAILED_CONTAINER_ERROR;
      }
    }
    if (res.returnCode != PackageManager.INSTALL_SUCCEEDED) {
      deletePackageLI(pkgName,true,dataDirExists ? PackageManager.DONT_DELETE_DATA : 0,res.removedInfo);
    }
  }
  if (onSd && res.returnCode != PackageManager.INSTALL_SUCCEEDED) {
    destroySdDir(pkgName);
  }
}
