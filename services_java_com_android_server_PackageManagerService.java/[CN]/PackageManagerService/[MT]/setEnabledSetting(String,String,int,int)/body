{
  if (!(newState == COMPONENT_ENABLED_STATE_DEFAULT || newState == COMPONENT_ENABLED_STATE_ENABLED || newState == COMPONENT_ENABLED_STATE_DISABLED)) {
    throw new IllegalArgumentException("Invalid new component state: " + newState);
  }
  PackageSetting pkgSetting;
  final int uid=Binder.getCallingUid();
  final int permission=mContext.checkCallingPermission(android.Manifest.permission.CHANGE_COMPONENT_ENABLED_STATE);
  final boolean allowedByPermission=(permission == PackageManager.PERMISSION_GRANTED);
  int packageUid=-1;
synchronized (mPackages) {
    pkgSetting=mSettings.mPackages.get(packageNameStr);
    if (pkgSetting == null) {
      if (classNameStr == null) {
        throw new IllegalArgumentException("Unknown package: " + packageNameStr);
      }
      throw new IllegalArgumentException("Unknown component: " + packageNameStr + "/"+ classNameStr);
    }
    if (!allowedByPermission && (uid != pkgSetting.userId)) {
      throw new SecurityException("Permission Denial: attempt to change component state from pid=" + Binder.getCallingPid() + ", uid="+ uid+ ", package uid="+ pkgSetting.userId);
    }
    packageUid=pkgSetting.userId;
    if (classNameStr == null) {
      pkgSetting.enabled=newState;
    }
 else {
switch (newState) {
case COMPONENT_ENABLED_STATE_ENABLED:
        pkgSetting.enableComponentLP(classNameStr);
      break;
case COMPONENT_ENABLED_STATE_DISABLED:
    pkgSetting.disableComponentLP(classNameStr);
  break;
case COMPONENT_ENABLED_STATE_DEFAULT:
pkgSetting.restoreComponentLP(classNameStr);
break;
default :
Log.e(TAG,"Invalid new component state: " + newState);
}
}
mSettings.writeLP();
}
long callingId=Binder.clearCallingIdentity();
try {
Bundle extras=new Bundle(2);
extras.putBoolean(Intent.EXTRA_DONT_KILL_APP,(flags & PackageManager.DONT_KILL_APP) != 0);
extras.putInt(Intent.EXTRA_UID,packageUid);
sendPackageBroadcast(Intent.ACTION_PACKAGE_CHANGED,packageNameStr,extras);
}
  finally {
Binder.restoreCallingIdentity(callingId);
}
}
