{
  FileReader permReader=null;
  try {
    permReader=new FileReader(permFile);
  }
 catch (  FileNotFoundException e) {
    Log.w(TAG,"Couldn't find or open permissions file " + permFile);
    return;
  }
  try {
    XmlPullParser parser=Xml.newPullParser();
    parser.setInput(permReader);
    XmlUtils.beginDocument(parser,"permissions");
    while (true) {
      XmlUtils.nextElement(parser);
      if (parser.getEventType() == XmlPullParser.END_DOCUMENT) {
        break;
      }
      String name=parser.getName();
      if ("group".equals(name)) {
        String gidStr=parser.getAttributeValue(null,"gid");
        if (gidStr != null) {
          int gid=Integer.parseInt(gidStr);
          mGlobalGids=appendInt(mGlobalGids,gid);
        }
 else {
          Log.w(TAG,"<group> without gid at " + parser.getPositionDescription());
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if ("permission".equals(name)) {
        String perm=parser.getAttributeValue(null,"name");
        if (perm == null) {
          Log.w(TAG,"<permission> without name at " + parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        perm=perm.intern();
        readPermission(parser,perm);
      }
 else       if ("assign-permission".equals(name)) {
        String perm=parser.getAttributeValue(null,"name");
        if (perm == null) {
          Log.w(TAG,"<assign-permission> without name at " + parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        String uidStr=parser.getAttributeValue(null,"uid");
        if (uidStr == null) {
          Log.w(TAG,"<assign-permission> without uid at " + parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        int uid=Process.getUidForName(uidStr);
        if (uid < 0) {
          Log.w(TAG,"<assign-permission> with unknown uid \"" + uidStr + "\" at "+ parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        perm=perm.intern();
        HashSet<String> perms=mSystemPermissions.get(uid);
        if (perms == null) {
          perms=new HashSet<String>();
          mSystemPermissions.put(uid,perms);
        }
        perms.add(perm);
        XmlUtils.skipCurrentTag(parser);
      }
 else       if ("library".equals(name)) {
        String lname=parser.getAttributeValue(null,"name");
        String lfile=parser.getAttributeValue(null,"file");
        if (lname == null) {
          Log.w(TAG,"<library> without name at " + parser.getPositionDescription());
        }
 else         if (lfile == null) {
          Log.w(TAG,"<library> without file at " + parser.getPositionDescription());
        }
 else {
          Log.i(TAG,"Got library " + lname + " in "+ lfile);
          mSharedLibraries.put(lname,lfile);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if ("feature".equals(name)) {
        String fname=parser.getAttributeValue(null,"name");
        if (fname == null) {
          Log.w(TAG,"<feature> without name at " + parser.getPositionDescription());
        }
 else {
          Log.i(TAG,"Got feature " + fname);
          FeatureInfo fi=new FeatureInfo();
          fi.name=fname;
          mAvailableFeatures.put(fname,fi);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else {
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
    }
  }
 catch (  XmlPullParserException e) {
    Log.w(TAG,"Got execption parsing permissions.",e);
  }
catch (  IOException e) {
    Log.w(TAG,"Got execption parsing permissions.",e);
  }
}
