{
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println("Permission Denial: can't dump ActivityManager from from pid=" + Binder.getCallingPid() + ", uid="+ Binder.getCallingUid()+ " without permission "+ android.Manifest.permission.DUMP);
    return;
  }
  boolean dumpStar=true;
  boolean dumpLibs=false;
  boolean dumpFeatures=false;
  boolean dumpResolvers=false;
  boolean dumpPermissions=false;
  boolean dumpPackages=false;
  boolean dumpSharedUsers=false;
  boolean dumpMessages=false;
  boolean dumpProviders=false;
  String packageName=null;
  boolean showFilters=false;
  int opti=0;
  while (opti < args.length) {
    String opt=args[opti];
    if (opt == null || opt.length() <= 0 || opt.charAt(0) != '-') {
      break;
    }
    opti++;
    if ("-a".equals(opt)) {
    }
 else     if ("-h".equals(opt)) {
      pw.println("Package manager dump options:");
      pw.println("  [-h] [-f] [cmd] ...");
      pw.println("    -f: print details of intent filters");
      pw.println("    -h: print this help");
      pw.println("  cmd may be one of:");
      pw.println("    l[ibraries]: list known shared libraries");
      pw.println("    f[ibraries]: list device features");
      pw.println("    r[esolvers]: dump intent resolvers");
      pw.println("    perm[issions]: dump permissions");
      pw.println("    prov[iders]: dump content providers");
      pw.println("    p[ackages]: dump installed packages");
      pw.println("    s[hared-users]: dump shared user IDs");
      pw.println("    m[essages]: print collected runtime messages");
      pw.println("    <package.name>: info about given package");
      return;
    }
 else     if ("-f".equals(opt)) {
      showFilters=true;
    }
 else {
      pw.println("Unknown argument: " + opt + "; use -h for help");
    }
  }
  if (opti < args.length) {
    String cmd=args[opti];
    opti++;
    if ("android".equals(cmd) || cmd.contains(".")) {
      packageName=cmd;
    }
 else     if ("l".equals(cmd) || "libraries".equals(cmd)) {
      dumpStar=false;
      dumpLibs=true;
    }
 else     if ("f".equals(cmd) || "features".equals(cmd)) {
      dumpStar=false;
      dumpFeatures=true;
    }
 else     if ("r".equals(cmd) || "resolvers".equals(cmd)) {
      dumpStar=false;
      dumpResolvers=true;
    }
 else     if ("perm".equals(cmd) || "permissions".equals(cmd)) {
      dumpStar=false;
      dumpPermissions=true;
    }
 else     if ("p".equals(cmd) || "packages".equals(cmd)) {
      dumpStar=false;
      dumpPackages=true;
    }
 else     if ("s".equals(cmd) || "shared-users".equals(cmd)) {
      dumpStar=false;
      dumpSharedUsers=true;
    }
 else     if ("prov".equals(cmd) || "providers".equals(cmd)) {
      dumpStar=false;
      dumpProviders=true;
    }
 else     if ("m".equals(cmd) || "messages".equals(cmd)) {
      dumpStar=false;
      dumpMessages=true;
    }
  }
  boolean printedTitle=false;
synchronized (mPackages) {
    if ((dumpStar || dumpLibs) && packageName == null) {
      if (printedTitle)       pw.println(" ");
      printedTitle=true;
      pw.println("Libraries:");
      Iterator<String> it=mSharedLibraries.keySet().iterator();
      while (it.hasNext()) {
        String name=it.next();
        pw.print("  ");
        pw.print(name);
        pw.print(" -> ");
        pw.println(mSharedLibraries.get(name));
      }
    }
    if ((dumpStar || dumpFeatures) && packageName == null) {
      if (printedTitle)       pw.println(" ");
      printedTitle=true;
      pw.println("Features:");
      Iterator<String> it=mAvailableFeatures.keySet().iterator();
      while (it.hasNext()) {
        String name=it.next();
        pw.print("  ");
        pw.println(name);
      }
    }
    if (dumpStar || dumpResolvers) {
      if (mActivities.dump(pw,printedTitle ? "\nActivity Resolver Table:" : "Activity Resolver Table:","  ",packageName,showFilters)) {
        printedTitle=true;
      }
      if (mReceivers.dump(pw,printedTitle ? "\nReceiver Resolver Table:" : "Receiver Resolver Table:","  ",packageName,showFilters)) {
        printedTitle=true;
      }
      if (mServices.dump(pw,printedTitle ? "\nService Resolver Table:" : "Service Resolver Table:","  ",packageName,showFilters)) {
        printedTitle=true;
      }
      if (mSettings.mPreferredActivities.dump(pw,printedTitle ? "\nPreferred Activities:" : "Preferred Activities:","  ",packageName,showFilters)) {
        printedTitle=true;
      }
    }
    boolean printedSomething=false;
    if (dumpStar || dumpPermissions) {
      for (      BasePermission p : mSettings.mPermissions.values()) {
        if (packageName != null && !packageName.equals(p.sourcePackage)) {
          continue;
        }
        if (!printedSomething) {
          if (printedTitle)           pw.println(" ");
          pw.println("Permissions:");
          printedSomething=true;
          printedTitle=true;
        }
        pw.print("  Permission [");
        pw.print(p.name);
        pw.print("] (");
        pw.print(Integer.toHexString(System.identityHashCode(p)));
        pw.println("):");
        pw.print("    sourcePackage=");
        pw.println(p.sourcePackage);
        pw.print("    uid=");
        pw.print(p.uid);
        pw.print(" gids=");
        pw.print(arrayToString(p.gids));
        pw.print(" type=");
        pw.print(p.type);
        pw.print(" prot=");
        pw.println(p.protectionLevel);
        if (p.packageSetting != null) {
          pw.print("    packageSetting=");
          pw.println(p.packageSetting);
        }
        if (p.perm != null) {
          pw.print("    perm=");
          pw.println(p.perm);
        }
      }
    }
    if (dumpStar || dumpProviders) {
      printedSomething=false;
      for (      PackageParser.Provider p : mProviders.values()) {
        if (packageName != null && !packageName.equals(p.info.packageName)) {
          continue;
        }
        if (!printedSomething) {
          if (printedTitle)           pw.println(" ");
          pw.println("Registered ContentProviders:");
          printedSomething=true;
          printedTitle=true;
        }
        pw.print("  [");
        pw.print(p.info.authority);
        pw.print("]: ");
        pw.println(p.toString());
      }
    }
    printedSomething=false;
    SharedUserSetting packageSharedUser=null;
    if (dumpStar || dumpPackages) {
      SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
      Date date=new Date();
      for (      PackageSetting ps : mSettings.mPackages.values()) {
        if (packageName != null && !packageName.equals(ps.realName) && !packageName.equals(ps.name)) {
          continue;
        }
        if (!printedSomething) {
          if (printedTitle)           pw.println(" ");
          pw.println("Packages:");
          printedSomething=true;
          printedTitle=true;
        }
        packageSharedUser=ps.sharedUser;
        pw.print("  Package [");
        pw.print(ps.realName != null ? ps.realName : ps.name);
        pw.print("] (");
        pw.print(Integer.toHexString(System.identityHashCode(ps)));
        pw.println("):");
        if (ps.realName != null) {
          pw.print("    compat name=");
          pw.println(ps.name);
        }
        pw.print("    userId=");
        pw.print(ps.userId);
        pw.print(" gids=");
        pw.println(arrayToString(ps.gids));
        pw.print("    sharedUser=");
        pw.println(ps.sharedUser);
        pw.print("    pkg=");
        pw.println(ps.pkg);
        pw.print("    codePath=");
        pw.println(ps.codePathString);
        pw.print("    resourcePath=");
        pw.println(ps.resourcePathString);
        pw.print("    nativeLibraryPath=");
        pw.println(ps.nativeLibraryPathString);
        pw.print("    obbPath=");
        pw.println(ps.obbPathString);
        if (ps.pkg != null) {
          pw.print("    dataDir=");
          pw.println(ps.pkg.applicationInfo.dataDir);
          pw.print("    targetSdk=");
          pw.println(ps.pkg.applicationInfo.targetSdkVersion);
          if (ps.pkg.mOperationPending) {
            pw.println("    mOperationPending=true");
          }
          pw.print("    supportsScreens=[");
          boolean first=true;
          if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SMALL_SCREENS) != 0) {
            if (!first)             pw.print(", ");
            first=false;
            pw.print("small");
          }
          if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_NORMAL_SCREENS) != 0) {
            if (!first)             pw.print(", ");
            first=false;
            pw.print("medium");
          }
          if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_LARGE_SCREENS) != 0) {
            if (!first)             pw.print(", ");
            first=false;
            pw.print("large");
          }
          if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_XLARGE_SCREENS) != 0) {
            if (!first)             pw.print(", ");
            first=false;
            pw.print("xlarge");
          }
          if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_RESIZEABLE_FOR_SCREENS) != 0) {
            if (!first)             pw.print(", ");
            first=false;
            pw.print("resizeable");
          }
          if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SCREEN_DENSITIES) != 0) {
            if (!first)             pw.print(", ");
            first=false;
            pw.print("anyDensity");
          }
        }
        pw.println("]");
        pw.print("    timeStamp=");
        date.setTime(ps.timeStamp);
        pw.println(sdf.format(date));
        pw.print("    firstInstallTime=");
        date.setTime(ps.firstInstallTime);
        pw.println(sdf.format(date));
        pw.print("    lastUpdateTime=");
        date.setTime(ps.lastUpdateTime);
        pw.println(sdf.format(date));
        pw.print("    signatures=");
        pw.println(ps.signatures);
        pw.print("    permissionsFixed=");
        pw.print(ps.permissionsFixed);
        pw.print(" haveGids=");
        pw.println(ps.haveGids);
        pw.print("    pkgFlags=0x");
        pw.print(Integer.toHexString(ps.pkgFlags));
        pw.print(" installStatus=");
        pw.print(ps.installStatus);
        pw.print(" enabled=");
        pw.println(ps.enabled);
        pw.print("    versionCode=");
        pw.print(ps.versionCode);
        pw.print(" versionName=");
        pw.println(ps.pkg.mVersionName);
        if (ps.disabledComponents.size() > 0) {
          pw.println("    disabledComponents:");
          for (          String s : ps.disabledComponents) {
            pw.print("      ");
            pw.println(s);
          }
        }
        if (ps.enabledComponents.size() > 0) {
          pw.println("    enabledComponents:");
          for (          String s : ps.enabledComponents) {
            pw.print("      ");
            pw.println(s);
          }
        }
        if (ps.grantedPermissions.size() > 0) {
          pw.println("    grantedPermissions:");
          for (          String s : ps.grantedPermissions) {
            pw.print("      ");
            pw.println(s);
          }
        }
      }
    }
    printedSomething=false;
    if (dumpStar || dumpPackages) {
      if (mSettings.mRenamedPackages.size() > 0) {
        for (        HashMap.Entry<String,String> e : mSettings.mRenamedPackages.entrySet()) {
          if (packageName != null && !packageName.equals(e.getKey()) && !packageName.equals(e.getValue())) {
            continue;
          }
          if (!printedSomething) {
            if (printedTitle)             pw.println(" ");
            pw.println("Renamed packages:");
            printedSomething=true;
            printedTitle=true;
          }
          pw.print("  ");
          pw.print(e.getKey());
          pw.print(" -> ");
          pw.println(e.getValue());
        }
      }
      printedSomething=false;
      if (mSettings.mDisabledSysPackages.size() > 0) {
        for (        PackageSetting ps : mSettings.mDisabledSysPackages.values()) {
          if (packageName != null && !packageName.equals(ps.realName) && !packageName.equals(ps.name)) {
            continue;
          }
          if (!printedSomething) {
            if (printedTitle)             pw.println(" ");
            pw.println("Hidden system packages:");
            printedSomething=true;
            printedTitle=true;
          }
          pw.print("  Package [");
          pw.print(ps.realName != null ? ps.realName : ps.name);
          pw.print("] (");
          pw.print(Integer.toHexString(System.identityHashCode(ps)));
          pw.println("):");
          if (ps.realName != null) {
            pw.print("    compat name=");
            pw.println(ps.name);
          }
          pw.print("    userId=");
          pw.println(ps.userId);
          pw.print("    sharedUser=");
          pw.println(ps.sharedUser);
          pw.print("    codePath=");
          pw.println(ps.codePathString);
          pw.print("    resourcePath=");
          pw.println(ps.resourcePathString);
        }
      }
    }
    printedSomething=false;
    if (dumpStar || dumpSharedUsers) {
      for (      SharedUserSetting su : mSettings.mSharedUsers.values()) {
        if (packageName != null && su != packageSharedUser) {
          continue;
        }
        if (!printedSomething) {
          if (printedTitle)           pw.println(" ");
          pw.println("Shared users:");
          printedSomething=true;
          printedTitle=true;
        }
        pw.print("  SharedUser [");
        pw.print(su.name);
        pw.print("] (");
        pw.print(Integer.toHexString(System.identityHashCode(su)));
        pw.println("):");
        pw.print("    userId=");
        pw.print(su.userId);
        pw.print(" gids=");
        pw.println(arrayToString(su.gids));
        pw.println("    grantedPermissions:");
        for (        String s : su.grantedPermissions) {
          pw.print("      ");
          pw.println(s);
        }
      }
    }
    if ((dumpStar || dumpMessages) && packageName == null) {
      if (printedTitle)       pw.println(" ");
      printedTitle=true;
      pw.println("Settings parse messages:");
      pw.print(mSettings.mReadMessages.toString());
      pw.println(" ");
      pw.println("Package warning messages:");
      File fname=getSettingsProblemFile();
      FileInputStream in;
      try {
        in=new FileInputStream(fname);
        int avail=in.available();
        byte[] data=new byte[avail];
        in.read(data);
        pw.print(new String(data));
      }
 catch (      FileNotFoundException e) {
      }
catch (      IOException e) {
      }
    }
  }
}
