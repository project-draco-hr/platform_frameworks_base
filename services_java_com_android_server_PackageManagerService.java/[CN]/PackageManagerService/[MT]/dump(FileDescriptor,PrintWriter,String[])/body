{
  if (mContext.checkCallingPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println("Permission Denial: can't dump ActivityManager from from pid=" + Binder.getCallingPid() + ", uid="+ Binder.getCallingUid()+ " without permission "+ android.Manifest.permission.DUMP);
    return;
  }
  Printer printer=new PrintWriterPrinter(pw);
synchronized (mPackages) {
    pw.println("Activity Resolver Table:");
    mActivities.dump(printer,"  ");
    pw.println(" ");
    pw.println("Receiver Resolver Table:");
    mReceivers.dump(printer,"  ");
    pw.println(" ");
    pw.println("Service Resolver Table:");
    mServices.dump(printer,"  ");
    pw.println(" ");
    pw.println("Preferred Activities:");
    mSettings.mPreferredActivities.dump(printer,"  ");
    pw.println(" ");
    pw.println("Preferred Packages:");
{
      for (      PackageSetting ps : mSettings.mPreferredPackages) {
        pw.println("  " + ps.name);
      }
    }
    pw.println(" ");
    pw.println("Permissions:");
{
      for (      BasePermission p : mSettings.mPermissions.values()) {
        pw.println("  Permission [" + p.name + "] ("+ Integer.toHexString(System.identityHashCode(p))+ "):");
        pw.println("    sourcePackage=" + p.sourcePackage);
        pw.println("    uid=" + p.uid + " gids="+ arrayToString(p.gids)+ " type="+ p.type);
      }
    }
    pw.println(" ");
    pw.println("Packages:");
{
      for (      PackageSetting ps : mSettings.mPackages.values()) {
        pw.println("  Package [" + ps.name + "] ("+ Integer.toHexString(System.identityHashCode(ps))+ "):");
        pw.println("    userId=" + ps.userId + " gids="+ arrayToString(ps.gids));
        pw.println("    sharedUser=" + ps.sharedUser);
        pw.println("    pkg=" + ps.pkg);
        pw.println("    codePath=" + ps.codePathString);
        pw.println("    resourcePath=" + ps.resourcePathString);
        if (ps.pkg != null) {
          pw.println("    dataDir=" + ps.pkg.applicationInfo.dataDir);
        }
        pw.println("    timeStamp=" + ps.timeStamp);
        pw.println("    signatures=" + ps.signatures);
        pw.println("    permissionsFixed=" + ps.permissionsFixed + " pkgFlags=0x"+ Integer.toHexString(ps.pkgFlags)+ " installStatus="+ ps.installStatus+ " enabled="+ ps.enabled);
        if (ps.disabledComponents.size() > 0) {
          pw.println("    disabledComponents:");
          for (          String s : ps.disabledComponents) {
            pw.println("      " + s);
          }
        }
        if (ps.enabledComponents.size() > 0) {
          pw.println("    enabledComponents:");
          for (          String s : ps.enabledComponents) {
            pw.println("      " + s);
          }
        }
        pw.println("    grantedPermissions:");
        for (        String s : ps.grantedPermissions) {
          pw.println("      " + s);
        }
        pw.println("    loadedPermissions:");
        for (        String s : ps.loadedPermissions) {
          pw.println("      " + s);
        }
      }
    }
    pw.println(" ");
    pw.println("Shared Users:");
{
      for (      SharedUserSetting su : mSettings.mSharedUsers.values()) {
        pw.println("  SharedUser [" + su.name + "] ("+ Integer.toHexString(System.identityHashCode(su))+ "):");
        pw.println("    userId=" + su.userId + " gids="+ arrayToString(su.gids));
        pw.println("    grantedPermissions:");
        for (        String s : su.grantedPermissions) {
          pw.println("      " + s);
        }
        pw.println("    loadedPermissions:");
        for (        String s : su.loadedPermissions) {
          pw.println("      " + s);
        }
      }
    }
    pw.println(" ");
    pw.println("Settings parse messages:");
    pw.println(mSettings.mReadMessages.toString());
  }
}
