{
  File sharedLibraryDir=new File(dataPath.getPath() + "/lib");
  final String sharedLibraryABI=Build.CPU_ABI;
  final String apkLibraryDirectory="lib/" + sharedLibraryABI + "/";
  final String apkSharedLibraryPrefix=apkLibraryDirectory + "lib";
  final String sharedLibrarySuffix=".so";
  boolean hasNativeCode=false;
  boolean installedNativeCode=false;
  try {
    ZipFile zipFile=new ZipFile(scanFile);
    Enumeration<ZipEntry> entries=(Enumeration<ZipEntry>)zipFile.entries();
    while (entries.hasMoreElements()) {
      ZipEntry entry=entries.nextElement();
      if (entry.isDirectory()) {
        if (!hasNativeCode && entry.getName().startsWith("lib")) {
          hasNativeCode=true;
        }
        continue;
      }
      String entryName=entry.getName();
      if (entryName.startsWith("lib/")) {
        hasNativeCode=true;
      }
      if (!(entryName.startsWith(apkSharedLibraryPrefix) && entryName.endsWith(sharedLibrarySuffix))) {
        continue;
      }
      String libFileName=entryName.substring(apkLibraryDirectory.length());
      if (libFileName.contains("/") || (!FileUtils.isFilenameSafe(new File(libFileName)))) {
        continue;
      }
      installedNativeCode=true;
      String sharedLibraryFilePath=sharedLibraryDir.getPath() + File.separator + libFileName;
      File sharedLibraryFile=new File(sharedLibraryFilePath);
      if (!sharedLibraryFile.exists() || sharedLibraryFile.length() != entry.getSize() || sharedLibraryFile.lastModified() != entry.getTime()) {
        if (Config.LOGD) {
          Log.d(TAG,"Caching shared lib " + entry.getName());
        }
        if (mInstaller == null) {
          sharedLibraryDir.mkdir();
        }
        cacheSharedLibLI(pkg,zipFile,entry,sharedLibraryDir,sharedLibraryFile);
      }
    }
  }
 catch (  IOException e) {
    Log.w(TAG,"Failed to cache package shared libs",e);
    return PackageManager.INSTALL_FAILED_INSUFFICIENT_STORAGE;
  }
  if (hasNativeCode && !installedNativeCode) {
    Log.w(TAG,"Install failed: .apk has native code but none for arch " + Build.CPU_ABI);
    return PackageManager.INSTALL_FAILED_CPU_ABI_INCOMPATIBLE;
  }
  return PackageManager.INSTALL_SUCCEEDED;
}
