{
  String cpuAbi=Build.CPU_ABI;
  try {
    int result=cachePackageSharedLibsForAbiLI(pkg,dataPath,scanFile,cpuAbi);
    if (result == PACKAGE_INSTALL_NATIVE_ABI_MISMATCH) {
      final String cpuAbi2=SystemProperties.get("ro.product.cpu.abi2",null);
      if (cpuAbi2 != null) {
        result=cachePackageSharedLibsForAbiLI(pkg,dataPath,scanFile,cpuAbi2);
      }
      if (result == PACKAGE_INSTALL_NATIVE_ABI_MISMATCH) {
        Slog.w(TAG,"Native ABI mismatch from package file");
        return PackageManager.INSTALL_FAILED_INVALID_APK;
      }
      if (result == PACKAGE_INSTALL_NATIVE_FOUND_LIBRARIES) {
        cpuAbi=cpuAbi2;
      }
    }
    if (result == PACKAGE_INSTALL_NATIVE_FOUND_LIBRARIES && (pkg.applicationInfo.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0) {
      int result2=cachePackageGdbServerLI(pkg,dataPath,scanFile,cpuAbi);
      if (result2 == PACKAGE_INSTALL_NATIVE_FOUND_LIBRARIES) {
        pkg.applicationInfo.flags|=ApplicationInfo.FLAG_NATIVE_DEBUGGABLE;
      }
    }
  }
 catch (  ZipException e) {
    Slog.w(TAG,"Failed to extract data from package file",e);
    return PackageManager.INSTALL_FAILED_INVALID_APK;
  }
catch (  IOException e) {
    Slog.w(TAG,"Failed to cache package shared libs",e);
    return PackageManager.INSTALL_FAILED_INSUFFICIENT_STORAGE;
  }
  return PackageManager.INSTALL_SUCCEEDED;
}
