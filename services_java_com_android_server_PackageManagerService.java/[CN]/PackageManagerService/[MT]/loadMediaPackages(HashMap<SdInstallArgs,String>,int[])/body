{
  ArrayList<String> pkgList=new ArrayList<String>();
  Set<SdInstallArgs> keys=processCids.keySet();
  for (  SdInstallArgs args : keys) {
    String codePath=processCids.get(args);
    if (DEBUG_SD_INSTALL)     Log.i(TAG,"Trying to install pkg : " + args.cid + " from "+ args.cachePath);
    if (args.doPreInstall(PackageManager.INSTALL_SUCCEEDED) != PackageManager.INSTALL_SUCCEEDED) {
      Log.e(TAG,"Failed to install package: " + codePath + " from sdcard");
      continue;
    }
    int parseFlags=PackageParser.PARSE_CHATTY | PackageParser.PARSE_ON_SDCARD | mDefParseFlags;
    PackageParser pp=new PackageParser(codePath);
    pp.setSeparateProcesses(mSeparateProcesses);
    final PackageParser.Package pkg=pp.parsePackage(new File(codePath),codePath,mMetrics,parseFlags);
    if (pkg == null) {
      Log.e(TAG,"Trying to install pkg : " + args.cid + " from "+ args.cachePath);
      continue;
    }
    setApplicationInfoPaths(pkg,codePath,codePath);
    int retCode=PackageManager.INSTALL_FAILED_CONTAINER_ERROR;
synchronized (mInstallLock) {
      if (scanPackageLI(pkg,parseFlags,SCAN_MONITOR) != null) {
synchronized (mPackages) {
          grantPermissionsLP(pkg,false);
          mSettings.writeLP();
          retCode=PackageManager.INSTALL_SUCCEEDED;
          pkgList.add(pkg.packageName);
        }
      }
 else {
        Log.i(TAG,"Failed to install package: " + pkg.packageName + " from sdcard");
      }
    }
    args.doPostInstall(retCode);
  }
  sendResourcesChangedBroadcast(true,pkgList,uidArr);
  if (pkgList.size() > 0) {
    Runtime.getRuntime().gc();
  }
}
