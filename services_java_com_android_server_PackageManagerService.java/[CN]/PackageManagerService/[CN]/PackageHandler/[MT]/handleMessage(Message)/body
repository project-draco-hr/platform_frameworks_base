{
switch (msg.what) {
case INIT_COPY:
{
      InstallArgs args=(InstallArgs)msg.obj;
      args.createCopyFile();
      Intent service=new Intent().setComponent(new ComponentName("com.android.defcontainer","com.android.defcontainer.DefaultContainerService"));
      if (mContainerService != null) {
        handleStartCopy(args);
      }
 else {
        if (mContext.bindService(service,mDefContainerConn,Context.BIND_AUTO_CREATE)) {
          mPendingInstalls.add(args);
        }
 else {
          Log.e(TAG,"Failed to bind to media container service");
          processPendingInstall(args,PackageManager.INSTALL_FAILED_INSUFFICIENT_STORAGE);
        }
      }
      break;
    }
case MCS_BOUND:
{
    if (msg.obj != null) {
      mContainerService=(IMediaContainerService)msg.obj;
    }
    if (mPendingInstalls.size() > 0) {
      InstallArgs args=mPendingInstalls.remove(0);
      if (args != null) {
        handleStartCopy(args);
      }
    }
    break;
  }
case MCS_UNBIND:
{
  if (mPendingInstalls.size() == 0) {
    mContext.unbindService(mDefContainerConn);
    mContainerService=null;
  }
  break;
}
case SEND_PENDING_BROADCAST:
{
String packages[];
ArrayList components[];
int size=0;
int uids[];
synchronized (mPackages) {
  if (mPendingBroadcasts == null) {
    return;
  }
  size=mPendingBroadcasts.size();
  if (size <= 0) {
    return;
  }
  packages=new String[size];
  components=new ArrayList[size];
  uids=new int[size];
  Iterator<HashMap.Entry<String,ArrayList<String>>> it=mPendingBroadcasts.entrySet().iterator();
  int i=0;
  while (it.hasNext() && i < size) {
    HashMap.Entry<String,ArrayList<String>> ent=it.next();
    packages[i]=ent.getKey();
    components[i]=ent.getValue();
    PackageSetting ps=mSettings.mPackages.get(ent.getKey());
    uids[i]=(ps != null) ? ps.userId : -1;
    i++;
  }
  size=i;
  mPendingBroadcasts.clear();
}
for (int i=0; i < size; i++) {
  sendPackageChangedBroadcast(packages[i],true,(ArrayList<String>)components[i],uids[i]);
}
break;
}
}
}
