{
switch (msg.what) {
case SEND_PENDING_BROADCAST:
{
      String packages[];
      ArrayList components[];
      int size=0;
      int uids[];
synchronized (mPackages) {
        if (mPendingBroadcasts == null) {
          return;
        }
        size=mPendingBroadcasts.size();
        if (size <= 0) {
          return;
        }
        packages=new String[size];
        components=new ArrayList[size];
        uids=new int[size];
        Iterator<HashMap.Entry<String,ArrayList<String>>> it=mPendingBroadcasts.entrySet().iterator();
        int i=0;
        while (it.hasNext() && i < size) {
          HashMap.Entry<String,ArrayList<String>> ent=it.next();
          packages[i]=ent.getKey();
          components[i]=ent.getValue();
          PackageSetting ps=mSettings.mPackages.get(ent.getKey());
          uids[i]=(ps != null) ? ps.userId : -1;
          i++;
        }
        size=i;
        mPendingBroadcasts.clear();
      }
      for (int i=0; i < size; i++) {
        sendPackageChangedBroadcast(packages[i],true,(ArrayList<String>)components[i],uids[i]);
      }
      break;
    }
}
}
