{
switch (msg.what) {
case SEND_PENDING_BROADCAST:
{
      int size=0;
      String broadcastList[];
      HashMap<String,String> tmpMap;
      int uids[];
synchronized (mPackages) {
        size=mPendingBroadcasts.size();
        if (size <= 0) {
          return;
        }
        broadcastList=new String[size];
        mPendingBroadcasts.keySet().toArray(broadcastList);
        tmpMap=new HashMap<String,String>(mPendingBroadcasts);
        uids=new int[size];
        for (int i=0; i < size; i++) {
          PackageSetting ps=mSettings.mPackages.get(mPendingBroadcasts.get(broadcastList[i]));
          uids[i]=(ps != null) ? ps.userId : -1;
        }
        mPendingBroadcasts.clear();
      }
      for (int i=0; i < size; i++) {
        String className=broadcastList[i];
        sendPackageChangedBroadcast(className,true,tmpMap.get(className),uids[i]);
      }
      break;
    }
}
}
