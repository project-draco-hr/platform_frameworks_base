{
  if (mSettingsFilename.exists()) {
    if (mBackupSettingsFilename.exists()) {
      mBackupSettingsFilename.delete();
    }
    mSettingsFilename.renameTo(mBackupSettingsFilename);
  }
  mPastSignatures.clear();
  try {
    FileOutputStream str=new FileOutputStream(mSettingsFilename);
    XmlSerializer serializer=new FastXmlSerializer();
    serializer.setOutput(str,"utf-8");
    serializer.startDocument(null,true);
    serializer.setFeature("http://xmlpull.org/v1/doc/features.html#indent-output",true);
    serializer.startTag(null,"packages");
    serializer.startTag(null,"permission-trees");
    for (    BasePermission bp : mPermissionTrees.values()) {
      writePermission(serializer,bp);
    }
    serializer.endTag(null,"permission-trees");
    serializer.startTag(null,"permissions");
    for (    BasePermission bp : mPermissions.values()) {
      writePermission(serializer,bp);
    }
    serializer.endTag(null,"permissions");
    for (    PackageSetting pkg : mPackages.values()) {
      serializer.startTag(null,"package");
      serializer.attribute(null,"name",pkg.name);
      serializer.attribute(null,"codePath",pkg.codePathString);
      if (!pkg.resourcePathString.equals(pkg.codePathString)) {
        serializer.attribute(null,"resourcePath",pkg.resourcePathString);
      }
      serializer.attribute(null,"system",(pkg.pkgFlags & ApplicationInfo.FLAG_SYSTEM) != 0 ? "true" : "false");
      serializer.attribute(null,"ts",pkg.timeStampString);
      if (pkg.sharedUser == null) {
        serializer.attribute(null,"userId",Integer.toString(pkg.userId));
      }
 else {
        serializer.attribute(null,"sharedUserId",Integer.toString(pkg.userId));
      }
      if (pkg.enabled != COMPONENT_ENABLED_STATE_DEFAULT) {
        serializer.attribute(null,"enabled",pkg.enabled == COMPONENT_ENABLED_STATE_ENABLED ? "true" : "false");
      }
      if (pkg.installStatus == PKG_INSTALL_INCOMPLETE) {
        serializer.attribute(null,"installStatus","false");
      }
      pkg.signatures.writeXml(serializer,"sigs",mPastSignatures);
      if ((pkg.pkgFlags & ApplicationInfo.FLAG_SYSTEM) == 0) {
        serializer.startTag(null,"perms");
        if (pkg.sharedUser == null) {
          for (          String name : pkg.grantedPermissions) {
            serializer.startTag(null,"item");
            serializer.attribute(null,"name",name);
            serializer.endTag(null,"item");
          }
        }
        serializer.endTag(null,"perms");
      }
      if (pkg.disabledComponents.size() > 0) {
        serializer.startTag(null,"disabled-components");
        for (        String name : pkg.disabledComponents) {
          serializer.startTag(null,"item");
          serializer.attribute(null,"name",name);
          serializer.endTag(null,"item");
        }
        serializer.endTag(null,"disabled-components");
      }
      if (pkg.enabledComponents.size() > 0) {
        serializer.startTag(null,"enabled-components");
        for (        String name : pkg.enabledComponents) {
          serializer.startTag(null,"item");
          serializer.attribute(null,"name",name);
          serializer.endTag(null,"item");
        }
        serializer.endTag(null,"enabled-components");
      }
      serializer.endTag(null,"package");
    }
    serializer.startTag(null,"preferred-packages");
    int N=mPreferredPackages.size();
    for (int i=0; i < N; i++) {
      PackageSetting pkg=mPreferredPackages.get(i);
      serializer.startTag(null,"item");
      serializer.attribute(null,"name",pkg.name);
      serializer.endTag(null,"item");
    }
    serializer.endTag(null,"preferred-packages");
    serializer.startTag(null,"preferred-activities");
    for (    PreferredActivity pa : mPreferredActivities.filterSet()) {
      serializer.startTag(null,"item");
      pa.writeToXml(serializer);
      serializer.endTag(null,"item");
    }
    serializer.endTag(null,"preferred-activities");
    for (    SharedUserSetting usr : mSharedUsers.values()) {
      serializer.startTag(null,"shared-user");
      serializer.attribute(null,"name",usr.name);
      serializer.attribute(null,"userId",Integer.toString(usr.userId));
      usr.signatures.writeXml(serializer,"sigs",mPastSignatures);
      serializer.startTag(null,"perms");
      for (      String name : usr.grantedPermissions) {
        serializer.startTag(null,"item");
        serializer.attribute(null,"name",name);
        serializer.endTag(null,"item");
      }
      serializer.endTag(null,"perms");
      serializer.endTag(null,"shared-user");
    }
    serializer.endTag(null,"packages");
    serializer.endDocument();
    str.flush();
    str.close();
    mBackupSettingsFilename.delete();
    FileUtils.setPermissions(mSettingsFilename.toString(),FileUtils.S_IRUSR | FileUtils.S_IWUSR | FileUtils.S_IRGRP| FileUtils.S_IWGRP| FileUtils.S_IROTH,-1,-1);
  }
 catch (  XmlPullParserException e) {
    Log.w(TAG,"Unable to write package manager settings, current changes will be lost at reboot",e);
  }
catch (  java.io.IOException e) {
    Log.w(TAG,"Unable to write package manager settings, current changes will be lost at reboot",e);
  }
}
