{
  PackageSetting p=mPackages.get(name);
  if (p != null) {
    if (!p.codePath.equals(codePath)) {
      if ((p != null) && ((p.pkgFlags & ApplicationInfo.FLAG_SYSTEM) != 0)) {
        Log.w(TAG,"Trying to update system app code path from " + p.codePathString + " to "+ codePath.toString());
      }
 else {
        reportSettingsProblem(Log.WARN,"Package " + name + " codePath changed from "+ p.codePath+ " to "+ codePath+ "; Retaining data and using new code from "+ codePath);
      }
    }
 else     if (p.sharedUser != sharedUser) {
      reportSettingsProblem(Log.WARN,"Package " + name + " shared user changed from "+ (p.sharedUser != null ? p.sharedUser.name : "<nothing>")+ " to "+ (sharedUser != null ? sharedUser.name : "<nothing>")+ "; replacing with new");
      p=null;
    }
  }
  if (p == null) {
    if (!create) {
      return null;
    }
    p=new PackageSetting(name,codePath,resourcePath,vc,pkgFlags);
    p.setTimeStamp(codePath.lastModified());
    p.sharedUser=sharedUser;
    if (sharedUser != null) {
      p.userId=sharedUser.userId;
    }
 else     if (MULTIPLE_APPLICATION_UIDS) {
      PackageSetting dis=mDisabledSysPackages.get(name);
      if (dis != null) {
        if (dis.signatures.mSignatures != null) {
          p.signatures.mSignatures=dis.signatures.mSignatures.clone();
        }
        p.userId=dis.userId;
        p.grantedPermissions=new HashSet<String>(dis.grantedPermissions);
        p.loadedPermissions=new HashSet<String>(dis.loadedPermissions);
        p.disabledComponents=new HashSet<String>(dis.disabledComponents);
        p.enabledComponents=new HashSet<String>(dis.enabledComponents);
        addUserIdLP(p.userId,p,name);
      }
 else {
        p.userId=newUserIdLP(p);
      }
    }
 else {
      p.userId=FIRST_APPLICATION_UID;
    }
    if (p.userId < 0) {
      reportSettingsProblem(Log.WARN,"Package " + name + " could not be assigned a valid uid");
      return null;
    }
    if (add) {
      addPackageSettingLP(p,name,sharedUser);
    }
  }
  return p;
}
