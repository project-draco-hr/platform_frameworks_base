{
  String name=null;
  String realName=null;
  String idStr=null;
  String sharedIdStr=null;
  String codePathStr=null;
  String resourcePathStr=null;
  String systemStr=null;
  String installerPackageName=null;
  String uidError=null;
  int pkgFlags=0;
  String timeStampStr;
  long timeStamp=0;
  PackageSettingBase packageSetting=null;
  String version=null;
  int versionCode=0;
  try {
    name=parser.getAttributeValue(null,"name");
    realName=parser.getAttributeValue(null,"realName");
    idStr=parser.getAttributeValue(null,"userId");
    uidError=parser.getAttributeValue(null,"uidError");
    sharedIdStr=parser.getAttributeValue(null,"sharedUserId");
    codePathStr=parser.getAttributeValue(null,"codePath");
    resourcePathStr=parser.getAttributeValue(null,"resourcePath");
    version=parser.getAttributeValue(null,"version");
    if (version != null) {
      try {
        versionCode=Integer.parseInt(version);
      }
 catch (      NumberFormatException e) {
      }
    }
    installerPackageName=parser.getAttributeValue(null,"installer");
    systemStr=parser.getAttributeValue(null,"flags");
    if (systemStr != null) {
      try {
        pkgFlags=Integer.parseInt(systemStr);
      }
 catch (      NumberFormatException e) {
      }
    }
 else {
      systemStr=parser.getAttributeValue(null,"system");
      if (systemStr != null) {
        pkgFlags|=("true".equalsIgnoreCase(systemStr)) ? ApplicationInfo.FLAG_SYSTEM : 0;
      }
 else {
        pkgFlags|=ApplicationInfo.FLAG_SYSTEM;
      }
    }
    timeStampStr=parser.getAttributeValue(null,"ts");
    if (timeStampStr != null) {
      try {
        timeStamp=Long.parseLong(timeStampStr);
      }
 catch (      NumberFormatException e) {
      }
    }
    if (DEBUG_SETTINGS)     Log.v(TAG,"Reading package: " + name + " userId="+ idStr+ " sharedUserId="+ sharedIdStr);
    int userId=idStr != null ? Integer.parseInt(idStr) : 0;
    if (resourcePathStr == null) {
      resourcePathStr=codePathStr;
    }
    if (realName != null) {
      realName=realName.intern();
    }
    if (name == null) {
      reportSettingsProblem(Log.WARN,"Error in package manager settings: <package> has no name at " + parser.getPositionDescription());
    }
 else     if (codePathStr == null) {
      reportSettingsProblem(Log.WARN,"Error in package manager settings: <package> has no codePath at " + parser.getPositionDescription());
    }
 else     if (userId > 0) {
      packageSetting=addPackageLP(name.intern(),realName,new File(codePathStr),new File(resourcePathStr),userId,versionCode,pkgFlags);
      if (DEBUG_SETTINGS)       Log.i(TAG,"Reading package " + name + ": userId="+ userId+ " pkg="+ packageSetting);
      if (packageSetting == null) {
        reportSettingsProblem(Log.ERROR,"Failure adding uid " + userId + " while parsing settings at "+ parser.getPositionDescription());
      }
 else {
        packageSetting.setTimeStamp(timeStamp,timeStampStr);
      }
    }
 else     if (sharedIdStr != null) {
      userId=sharedIdStr != null ? Integer.parseInt(sharedIdStr) : 0;
      if (userId > 0) {
        packageSetting=new PendingPackage(name.intern(),realName,new File(codePathStr),new File(resourcePathStr),userId,versionCode,pkgFlags);
        packageSetting.setTimeStamp(timeStamp,timeStampStr);
        mPendingPackages.add((PendingPackage)packageSetting);
        if (DEBUG_SETTINGS)         Log.i(TAG,"Reading package " + name + ": sharedUserId="+ userId+ " pkg="+ packageSetting);
      }
 else {
        reportSettingsProblem(Log.WARN,"Error in package manager settings: package " + name + " has bad sharedId "+ sharedIdStr+ " at "+ parser.getPositionDescription());
      }
    }
 else {
      reportSettingsProblem(Log.WARN,"Error in package manager settings: package " + name + " has bad userId "+ idStr+ " at "+ parser.getPositionDescription());
    }
  }
 catch (  NumberFormatException e) {
    reportSettingsProblem(Log.WARN,"Error in package manager settings: package " + name + " has bad userId "+ idStr+ " at "+ parser.getPositionDescription());
  }
  if (packageSetting != null) {
    packageSetting.uidError="true".equals(uidError);
    packageSetting.installerPackageName=installerPackageName;
    final String enabledStr=parser.getAttributeValue(null,"enabled");
    if (enabledStr != null) {
      if (enabledStr.equalsIgnoreCase("true")) {
        packageSetting.enabled=COMPONENT_ENABLED_STATE_ENABLED;
      }
 else       if (enabledStr.equalsIgnoreCase("false")) {
        packageSetting.enabled=COMPONENT_ENABLED_STATE_DISABLED;
      }
 else       if (enabledStr.equalsIgnoreCase("default")) {
        packageSetting.enabled=COMPONENT_ENABLED_STATE_DEFAULT;
      }
 else {
        reportSettingsProblem(Log.WARN,"Error in package manager settings: package " + name + " has bad enabled value: "+ idStr+ " at "+ parser.getPositionDescription());
      }
    }
 else {
      packageSetting.enabled=COMPONENT_ENABLED_STATE_DEFAULT;
    }
    final String installStatusStr=parser.getAttributeValue(null,"installStatus");
    if (installStatusStr != null) {
      if (installStatusStr.equalsIgnoreCase("false")) {
        packageSetting.installStatus=PKG_INSTALL_INCOMPLETE;
      }
 else {
        packageSetting.installStatus=PKG_INSTALL_COMPLETE;
      }
    }
    int outerDepth=parser.getDepth();
    int type;
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
      if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
        continue;
      }
      String tagName=parser.getName();
      if (tagName.equals("disabled-components")) {
        readDisabledComponentsLP(packageSetting,parser);
      }
 else       if (tagName.equals("enabled-components")) {
        readEnabledComponentsLP(packageSetting,parser);
      }
 else       if (tagName.equals("sigs")) {
        packageSetting.signatures.readXml(parser,mPastSignatures);
      }
 else       if (tagName.equals("perms")) {
        readGrantedPermissionsLP(parser,packageSetting.loadedPermissions);
        packageSetting.permissionsFixed=true;
      }
 else {
        reportSettingsProblem(Log.WARN,"Unknown element under <package>: " + parser.getName());
        XmlUtils.skipCurrentTag(parser);
      }
    }
  }
 else {
    XmlUtils.skipCurrentTag(parser);
  }
}
