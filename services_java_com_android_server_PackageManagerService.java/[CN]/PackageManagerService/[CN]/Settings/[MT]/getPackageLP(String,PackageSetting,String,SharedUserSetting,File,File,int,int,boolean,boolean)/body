{
  PackageSetting p=mPackages.get(name);
  if (p != null) {
    if (!p.codePath.equals(codePath)) {
      if ((p != null) && ((p.pkgFlags & ApplicationInfo.FLAG_SYSTEM) != 0)) {
        Slog.w(TAG,"Trying to update system app code path from " + p.codePathString + " to "+ codePath.toString());
      }
 else {
        Slog.i(TAG,"Package " + name + " codePath changed from "+ p.codePath+ " to "+ codePath+ "; Retaining data and using new");
      }
    }
    if (p.sharedUser != sharedUser) {
      reportSettingsProblem(Log.WARN,"Package " + name + " shared user changed from "+ (p.sharedUser != null ? p.sharedUser.name : "<nothing>")+ " to "+ (sharedUser != null ? sharedUser.name : "<nothing>")+ "; replacing with new");
      p=null;
    }
 else {
      if ((pkgFlags & ApplicationInfo.FLAG_SYSTEM) != 0) {
        p.pkgFlags|=ApplicationInfo.FLAG_SYSTEM;
      }
    }
  }
  if (p == null) {
    if (!create) {
      return null;
    }
    if (origPackage != null) {
      p=new PackageSetting(origPackage.name,name,codePath,resourcePath,vc,pkgFlags);
      if (DEBUG_UPGRADE)       Log.v(TAG,"Package " + name + " is adopting original package "+ origPackage.name);
      PackageSignatures s=p.signatures;
      p.copyFrom(origPackage);
      p.signatures=s;
      p.sharedUser=origPackage.sharedUser;
      p.userId=origPackage.userId;
      p.origPackage=origPackage;
      mRenamedPackages.put(name,origPackage.name);
      name=origPackage.name;
      p.setTimeStamp(codePath.lastModified());
    }
 else {
      p=new PackageSetting(name,realName,codePath,resourcePath,vc,pkgFlags);
      p.setTimeStamp(codePath.lastModified());
      p.sharedUser=sharedUser;
      if (sharedUser != null) {
        p.userId=sharedUser.userId;
      }
 else       if (MULTIPLE_APPLICATION_UIDS) {
        PackageSetting dis=mDisabledSysPackages.get(name);
        if (dis != null) {
          if (dis.signatures.mSignatures != null) {
            p.signatures.mSignatures=dis.signatures.mSignatures.clone();
          }
          p.userId=dis.userId;
          p.grantedPermissions=new HashSet<String>(dis.grantedPermissions);
          p.loadedPermissions=new HashSet<String>(dis.loadedPermissions);
          p.disabledComponents=new HashSet<String>(dis.disabledComponents);
          p.enabledComponents=new HashSet<String>(dis.enabledComponents);
          addUserIdLP(p.userId,p,name);
        }
 else {
          p.userId=newUserIdLP(p);
        }
      }
 else {
        p.userId=FIRST_APPLICATION_UID;
      }
    }
    if (p.userId < 0) {
      reportSettingsProblem(Log.WARN,"Package " + name + " could not be assigned a valid uid");
      return null;
    }
    if (add) {
      addPackageSettingLP(p,name,sharedUser);
    }
  }
  return p;
}
