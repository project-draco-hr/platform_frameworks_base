{
  String name=parser.getAttributeValue(null,"name");
  String realName=parser.getAttributeValue(null,"realName");
  String codePathStr=parser.getAttributeValue(null,"codePath");
  String resourcePathStr=parser.getAttributeValue(null,"resourcePath");
  if (resourcePathStr == null) {
    resourcePathStr=codePathStr;
  }
  String version=parser.getAttributeValue(null,"version");
  int versionCode=0;
  if (version != null) {
    try {
      versionCode=Integer.parseInt(version);
    }
 catch (    NumberFormatException e) {
    }
  }
  int pkgFlags=0;
  pkgFlags|=ApplicationInfo.FLAG_SYSTEM;
  PackageSetting ps=new PackageSetting(name,realName,new File(codePathStr),new File(resourcePathStr),versionCode,pkgFlags);
  String timeStampStr=parser.getAttributeValue(null,"ts");
  if (timeStampStr != null) {
    try {
      long timeStamp=Long.parseLong(timeStampStr);
      ps.setTimeStamp(timeStamp,timeStampStr);
    }
 catch (    NumberFormatException e) {
    }
  }
  String idStr=parser.getAttributeValue(null,"userId");
  ps.userId=idStr != null ? Integer.parseInt(idStr) : 0;
  if (ps.userId <= 0) {
    String sharedIdStr=parser.getAttributeValue(null,"sharedUserId");
    ps.userId=sharedIdStr != null ? Integer.parseInt(sharedIdStr) : 0;
  }
  int outerDepth=parser.getDepth();
  int type;
  while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
    if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
      continue;
    }
    String tagName=parser.getName();
    if (tagName.equals("perms")) {
      readGrantedPermissionsLP(parser,ps.grantedPermissions);
    }
 else {
      reportSettingsProblem(Log.WARN,"Unknown element under <updated-package>: " + parser.getName());
      XmlUtils.skipCurrentTag(parser);
    }
  }
  mDisabledSysPackages.put(name,ps);
}
