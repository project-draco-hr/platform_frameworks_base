{
  serializer.startTag(null,"package");
  serializer.attribute(null,"name",pkg.name);
  if (pkg.realName != null) {
    serializer.attribute(null,"realName",pkg.realName);
  }
  serializer.attribute(null,"codePath",pkg.codePathString);
  if (!pkg.resourcePathString.equals(pkg.codePathString)) {
    serializer.attribute(null,"resourcePath",pkg.resourcePathString);
  }
  if (pkg.nativeLibraryPathString != null) {
    serializer.attribute(null,"nativeLibraryPath",pkg.nativeLibraryPathString);
  }
  serializer.attribute(null,"flags",Integer.toString(pkg.pkgFlags));
  serializer.attribute(null,"ts",String.valueOf(pkg.timeStamp));
  serializer.attribute(null,"version",String.valueOf(pkg.versionCode));
  if (pkg.sharedUser == null) {
    serializer.attribute(null,"userId",Integer.toString(pkg.userId));
  }
 else {
    serializer.attribute(null,"sharedUserId",Integer.toString(pkg.userId));
  }
  if (pkg.uidError) {
    serializer.attribute(null,"uidError","true");
  }
  if (pkg.enabled != COMPONENT_ENABLED_STATE_DEFAULT) {
    serializer.attribute(null,"enabled",pkg.enabled == COMPONENT_ENABLED_STATE_ENABLED ? "true" : "false");
  }
  if (pkg.installStatus == PKG_INSTALL_INCOMPLETE) {
    serializer.attribute(null,"installStatus","false");
  }
  if (pkg.installerPackageName != null) {
    serializer.attribute(null,"installer",pkg.installerPackageName);
  }
  if (pkg.obbPathString != null) {
    serializer.attribute(null,"obbPath",pkg.obbPathString);
  }
  pkg.signatures.writeXml(serializer,"sigs",mPastSignatures);
  if ((pkg.pkgFlags & ApplicationInfo.FLAG_SYSTEM) == 0) {
    serializer.startTag(null,"perms");
    if (pkg.sharedUser == null) {
      for (      final String name : pkg.grantedPermissions) {
        serializer.startTag(null,"item");
        serializer.attribute(null,"name",name);
        serializer.endTag(null,"item");
      }
    }
    serializer.endTag(null,"perms");
  }
  if (pkg.disabledComponents.size() > 0) {
    serializer.startTag(null,"disabled-components");
    for (    final String name : pkg.disabledComponents) {
      serializer.startTag(null,"item");
      serializer.attribute(null,"name",name);
      serializer.endTag(null,"item");
    }
    serializer.endTag(null,"disabled-components");
  }
  if (pkg.enabledComponents.size() > 0) {
    serializer.startTag(null,"enabled-components");
    for (    final String name : pkg.enabledComponents) {
      serializer.startTag(null,"item");
      serializer.attribute(null,"name",name);
      serializer.endTag(null,"item");
    }
    serializer.endTag(null,"enabled-components");
  }
  serializer.endTag(null,"package");
}
