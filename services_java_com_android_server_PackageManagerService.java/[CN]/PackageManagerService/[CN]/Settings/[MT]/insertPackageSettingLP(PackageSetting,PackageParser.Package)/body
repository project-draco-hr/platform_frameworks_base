{
  p.pkg=pkg;
  pkg.mSetEnabled=p.enabled;
  final String codePath=pkg.applicationInfo.sourceDir;
  final String resourcePath=pkg.applicationInfo.publicSourceDir;
  if (!codePath.equalsIgnoreCase(p.codePathString)) {
    Slog.w(TAG,"Code path for pkg : " + p.pkg.packageName + " changing from "+ p.codePathString+ " to "+ codePath);
    p.codePath=new File(codePath);
    p.codePathString=codePath;
  }
  if (!resourcePath.equalsIgnoreCase(p.resourcePathString)) {
    Slog.w(TAG,"Resource path for pkg : " + p.pkg.packageName + " changing from "+ p.resourcePathString+ " to "+ resourcePath);
    p.resourcePath=new File(resourcePath);
    p.resourcePathString=resourcePath;
  }
  final String nativeLibraryPath=pkg.applicationInfo.nativeLibraryDir;
  if (nativeLibraryPath != null && !nativeLibraryPath.equalsIgnoreCase(p.nativeLibraryPathString)) {
    p.nativeLibraryPathString=nativeLibraryPath;
  }
  if (pkg.mVersionCode != p.versionCode) {
    p.versionCode=pkg.mVersionCode;
  }
  if (p.signatures.mSignatures == null) {
    p.signatures.assignSignatures(pkg.mSignatures);
  }
  if (p.sharedUser != null && p.sharedUser.signatures.mSignatures == null) {
    p.sharedUser.signatures.assignSignatures(pkg.mSignatures);
  }
  addPackageSettingLP(p,pkg.packageName,p.sharedUser);
}
