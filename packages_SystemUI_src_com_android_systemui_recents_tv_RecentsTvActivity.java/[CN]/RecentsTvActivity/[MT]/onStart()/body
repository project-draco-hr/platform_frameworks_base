{
  super.onStart();
  updateRecentsTasks();
  RecentsConfiguration config=Recents.getConfiguration();
  RecentsActivityLaunchState launchState=config.getLaunchState();
  boolean wasLaunchedByAm=!launchState.launchedFromHome && !launchState.launchedFromApp;
  if (launchState.launchedHasConfigurationChanged || wasLaunchedByAm) {
    EventBus.getDefault().send(new EnterRecentsWindowAnimationCompletedEvent());
  }
  SystemServicesProxy ssp=Recents.getSystemServices();
  EventBus.getDefault().send(new RecentsVisibilityChangedEvent(this,true));
  if (mPipManager.isPipShown()) {
    Rect pipBounds=mPipManager.getPipBounds();
    LayoutParams lp=(LayoutParams)mPipView.getLayoutParams();
    lp.width=pipBounds.width();
    lp.height=pipBounds.height();
    lp.leftMargin=pipBounds.left;
    lp.topMargin=pipBounds.top;
    mPipView.setLayoutParams(lp);
    mPipView.setVisibility(View.VISIBLE);
    mPipView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        mPipManager.resizePinnedStack(PipManager.STATE_PIP_MENU);
      }
    }
);
    mPipView.setOnFocusChangeListener(new View.OnFocusChangeListener(){
      @Override public void onFocusChange(      View v,      boolean hasFocus){
        mPipManager.onPipViewFocusChangedInRecents(hasFocus);
        mPipShadeView.setVisibility(hasFocus ? View.VISIBLE : View.INVISIBLE);
      }
    }
);
    mPipManager.addListener(mPipListener);
  }
 else {
    mPipView.setVisibility(View.GONE);
  }
  mPipManager.onRecentsStarted();
  mRecentsView.requestFocus();
}
