{
synchronized (this) {
    if (isLoadInBackgroundCanceled()) {
      throw new OperationCanceledException();
    }
    mSignal=new CancellationSignal();
  }
  final ContentResolver resolver=getContext().getContentResolver();
  final String authority=mUri.getAuthority();
  final DirectoryResult result=new DirectoryResult();
  int userMode=State.MODE_UNKNOWN;
  int userSortOrder=State.SORT_ORDER_UNKNOWN;
  Cursor cursor=null;
  try {
    final Uri stateUri=RecentsProvider.buildState(mRoot.authority,mRoot.rootId,mDoc.documentId);
    cursor=resolver.query(stateUri,null,null,null,null);
    if (cursor.moveToFirst()) {
      userMode=getCursorInt(cursor,StateColumns.MODE);
      userSortOrder=getCursorInt(cursor,StateColumns.SORT_ORDER);
    }
  }
  finally {
    IoUtils.closeQuietly(cursor);
  }
  if (userMode != State.MODE_UNKNOWN) {
    result.mode=userMode;
  }
 else {
    if ((mDoc.flags & Document.FLAG_DIR_PREFERS_GRID) != 0) {
      result.mode=State.MODE_GRID;
    }
 else {
      result.mode=State.MODE_LIST;
    }
  }
  if (userSortOrder != State.SORT_ORDER_UNKNOWN) {
    result.sortOrder=userSortOrder;
  }
 else {
    if ((mDoc.flags & Document.FLAG_DIR_PREFERS_LAST_MODIFIED) != 0) {
      result.sortOrder=State.SORT_ORDER_LAST_MODIFIED;
    }
 else {
      result.sortOrder=State.SORT_ORDER_DISPLAY_NAME;
    }
  }
  Log.d(TAG,"userMode=" + userMode + ", userSortOrder="+ userSortOrder+ " --> mode="+ result.mode+ ", sortOrder="+ result.sortOrder);
  try {
    result.client=resolver.acquireUnstableContentProviderClient(authority);
    cursor=result.client.query(mUri,null,null,null,getQuerySortOrder(result.sortOrder),mSignal);
    cursor.registerContentObserver(mObserver);
    final Cursor withRoot=new RootCursorWrapper(mUri.getAuthority(),mRoot.rootId,cursor,-1);
    final Cursor sorted=new SortingCursorWrapper(withRoot,result.sortOrder);
    result.cursor=sorted;
  }
 catch (  Exception e) {
    Log.d(TAG,"Failed to query",e);
    result.exception=e;
    ContentProviderClient.closeQuietly(result.client);
  }
 finally {
synchronized (this) {
      mSignal=null;
    }
  }
  return result;
}
