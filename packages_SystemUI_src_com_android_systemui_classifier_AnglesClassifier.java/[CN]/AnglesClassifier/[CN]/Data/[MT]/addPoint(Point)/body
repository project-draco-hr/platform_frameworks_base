{
  if (mLastThreePoints.isEmpty() || !mLastThreePoints.get(mLastThreePoints.size() - 1).equals(point)) {
    if (!mLastThreePoints.isEmpty()) {
      mLength+=mLastThreePoints.get(mLastThreePoints.size() - 1).dist(point);
    }
    mLastThreePoints.add(point);
    if (mLastThreePoints.size() == 4) {
      mLastThreePoints.remove(0);
      float angle=mLastThreePoints.get(1).getAngle(mLastThreePoints.get(0),mLastThreePoints.get(2));
      mAnglesCount++;
      if (angle < Math.PI - ANGLE_DEVIATION) {
        mLeftAngles++;
      }
 else       if (angle <= Math.PI + ANGLE_DEVIATION) {
        mStraightAngles++;
      }
 else {
        mRightAngles++;
      }
      float difference=angle - mPreviousAngle;
      if (mBiggestAngle < angle) {
        mBiggestAngle=angle;
        mFirstLength=mLength;
        mFirstAngleVariance=getAnglesVariance(mSumSquares,mSum,mCount);
        mSecondSumSquares=0.0f;
        mSecondSum=0.0f;
        mSecondCount=1.0f;
      }
 else {
        mSecondSum+=difference;
        mSecondSumSquares+=difference * difference;
        mSecondCount+=1.0;
      }
      mSum+=difference;
      mSumSquares+=difference * difference;
      mCount+=1.0;
      mPreviousAngle=angle;
    }
  }
}
