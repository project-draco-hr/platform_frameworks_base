{
  if (to >= mEditIndex) {
    if (from >= mEditIndex) {
      return false;
    }
    TileInfo tile=mTiles.get(from);
    if (tile.isSystem) {
      if (to > mTileDividerIndex) {
        to=mTileDividerIndex;
      }
    }
 else {
      if (mTileDividerIndex == mTiles.size()) {
        notifyItemInserted(mTiles.size());
        mTiles.add(null);
      }
      if (to <= mTileDividerIndex) {
        to=mTileDividerIndex;
      }
    }
  }
  CharSequence fromLabel=mTiles.get(from).state.label;
  move(from,to,mTiles);
  notifyItemChanged(from);
  notifyItemMoved(from,to);
  updateDividerLocations();
  CharSequence announcement;
  if (to >= mEditIndex) {
    MetricsLogger.action(mContext,MetricsProto.MetricsEvent.ACTION_QS_EDIT_REMOVE_SPEC,strip(mTiles.get(to)));
    MetricsLogger.action(mContext,MetricsProto.MetricsEvent.ACTION_QS_EDIT_REMOVE,from);
    announcement=mContext.getString(R.string.accessibility_qs_edit_tile_removed,fromLabel);
  }
 else   if (from >= mEditIndex) {
    MetricsLogger.action(mContext,MetricsProto.MetricsEvent.ACTION_QS_EDIT_ADD_SPEC,strip(mTiles.get(to)));
    MetricsLogger.action(mContext,MetricsProto.MetricsEvent.ACTION_QS_EDIT_ADD,to);
    announcement=mContext.getString(R.string.accessibility_qs_edit_tile_added,fromLabel,(to + 1));
  }
 else {
    MetricsLogger.action(mContext,MetricsProto.MetricsEvent.ACTION_QS_EDIT_MOVE_SPEC,strip(mTiles.get(to)));
    MetricsLogger.action(mContext,MetricsProto.MetricsEvent.ACTION_QS_EDIT_MOVE,to);
    announcement=mContext.getString(R.string.accessibility_qs_edit_tile_moved,fromLabel,(to + 1));
  }
  v.announceForAccessibility(announcement);
  return true;
}
