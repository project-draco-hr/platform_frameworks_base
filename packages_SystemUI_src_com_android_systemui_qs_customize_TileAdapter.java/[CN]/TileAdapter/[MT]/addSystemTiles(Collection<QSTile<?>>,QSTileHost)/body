{
  try {
    ArrayList<String> tileSpecs=new ArrayList<>();
    for (    QSTile<?> tile : currentTiles) {
      tileSpecs.add(tile.getTileSpec());
    }
    mCurrentTiles=tileSpecs;
    final TileGroup group=new TileGroup("com.android.settings",mContext);
    String possible=mContext.getString(R.string.quick_settings_tiles_default) + ",hotspot,inversion,saver";
    String[] possibleTiles=possible.split(",");
    for (int i=0; i < possibleTiles.length; i++) {
      final String spec=possibleTiles[i];
      if (spec.startsWith("q")) {
        continue;
      }
      if (tileSpecs.contains(spec)) {
        Log.d(TAG,"Skipping " + spec);
        continue;
      }
      Log.d(TAG,"Trying " + spec);
      final QSTile<?> tile=host.createTile(spec);
      if (tile == null) {
        continue;
      }
      tile.setListening(true);
      tile.clearState();
      tile.refreshState();
      tile.setListening(false);
      new Handler(host.getLooper()).post(new Runnable(){
        @Override public void run(){
          group.addTile(spec,tile.getState().icon,tile.getState().label,mContext);
        }
      }
);
    }
    new Handler(host.getLooper()).post(new Runnable(){
      @Override public void run(){
        new Handler(Looper.getMainLooper()).post(new Runnable(){
          @Override public void run(){
            if (group.mTiles.size() > 0) {
              mGroups.add(group);
              notifyDataSetChanged();
            }
            new QueryTilesTask().execute();
          }
        }
);
      }
    }
);
  }
 catch (  NameNotFoundException e) {
    Log.e(TAG,"Couldn't load system tiles",e);
  }
}
