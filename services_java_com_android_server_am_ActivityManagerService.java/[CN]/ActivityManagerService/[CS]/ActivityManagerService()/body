{
  Slog.i(TAG,"Memory class: " + ActivityManager.staticGetMemoryClass());
  mFgBroadcastQueue=new BroadcastQueue(this,"foreground",BROADCAST_FG_TIMEOUT);
  mBgBroadcastQueue=new BroadcastQueue(this,"background",BROADCAST_BG_TIMEOUT);
  mBroadcastQueues[0]=mFgBroadcastQueue;
  mBroadcastQueues[1]=mBgBroadcastQueue;
  mServices=new ActiveServices(this);
  File dataDir=Environment.getDataDirectory();
  File systemDir=new File(dataDir,"system");
  systemDir.mkdirs();
  mBatteryStatsService=new BatteryStatsService(new File(systemDir,"batterystats.bin").toString());
  mBatteryStatsService.getActiveStatistics().readLocked();
  mBatteryStatsService.getActiveStatistics().writeAsyncLocked();
  mOnBattery=DEBUG_POWER ? true : mBatteryStatsService.getActiveStatistics().getIsOnBattery();
  mBatteryStatsService.getActiveStatistics().setCallback(this);
  mUsageStatsService=new UsageStatsService(new File(systemDir,"usagestats").toString());
  mHeadless="1".equals(SystemProperties.get("ro.config.headless","0"));
  mStartedUsers.put(0,new UserStartedState(new UserHandle(0),true));
  GL_ES_VERSION=SystemProperties.getInt("ro.opengles.version",ConfigurationInfo.GL_ES_VERSION_UNDEFINED);
  mConfiguration.setToDefaults();
  mConfiguration.locale=Locale.getDefault();
  mConfigurationSeq=mConfiguration.seq=1;
  mProcessStats.init();
  mCompatModePackages=new CompatModePackages(this,systemDir);
  Watchdog.getInstance().addMonitor(this);
  mProcessStatsThread=new Thread("ProcessStats"){
    public void run(){
      while (true) {
        try {
          try {
synchronized (this) {
              final long now=SystemClock.uptimeMillis();
              long nextCpuDelay=(mLastCpuTime.get() + MONITOR_CPU_MAX_TIME) - now;
              long nextWriteDelay=(mLastWriteTime + BATTERY_STATS_TIME) - now;
              if (nextWriteDelay < nextCpuDelay) {
                nextCpuDelay=nextWriteDelay;
              }
              if (nextCpuDelay > 0) {
                mProcessStatsMutexFree.set(true);
                this.wait(nextCpuDelay);
              }
            }
          }
 catch (          InterruptedException e) {
          }
          updateCpuStatsNow();
        }
 catch (        Exception e) {
          Slog.e(TAG,"Unexpected exception collecting process stats",e);
        }
      }
    }
  }
;
  mProcessStatsThread.start();
}
