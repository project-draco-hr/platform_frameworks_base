{
  ServiceRecord r=null;
  if (DEBUG_SERVICE)   Slog.v(TAG,"retrieveServiceLocked: " + service + " type="+ resolvedType+ " callingUid="+ callingUid);
  if (service.getComponent() != null) {
    r=mServiceMap.getServiceByName(service.getComponent(),userId);
  }
  if (r == null) {
    Intent.FilterComparison filter=new Intent.FilterComparison(service);
    r=mServiceMap.getServiceByIntent(filter,userId);
  }
  if (r == null) {
    try {
      ResolveInfo rInfo=AppGlobals.getPackageManager().resolveService(service,resolvedType,STOCK_PM_FLAGS,userId);
      ServiceInfo sInfo=rInfo != null ? rInfo.serviceInfo : null;
      if (sInfo == null) {
        Slog.w(TAG,"Unable to start service " + service + ": not found");
        return null;
      }
      if (userId > 0) {
        sInfo.applicationInfo=getAppInfoForUser(sInfo.applicationInfo,userId);
      }
      ComponentName name=new ComponentName(sInfo.applicationInfo.packageName,sInfo.name);
      r=mServiceMap.getServiceByName(name,userId);
      if (r == null) {
        Intent.FilterComparison filter=new Intent.FilterComparison(service.cloneFilter());
        ServiceRestarter res=new ServiceRestarter();
        BatteryStatsImpl.Uid.Pkg.Serv ss=null;
        BatteryStatsImpl stats=mBatteryStatsService.getActiveStatistics();
synchronized (stats) {
          ss=stats.getServiceStatsLocked(sInfo.applicationInfo.uid,sInfo.packageName,sInfo.name);
        }
        r=new ServiceRecord(this,ss,name,filter,sInfo,res);
        res.setService(r);
        mServiceMap.putServiceByName(name,UserId.getUserId(r.appInfo.uid),r);
        mServiceMap.putServiceByIntent(filter,UserId.getUserId(r.appInfo.uid),r);
        int N=mPendingServices.size();
        for (int i=0; i < N; i++) {
          ServiceRecord pr=mPendingServices.get(i);
          if (pr.name.equals(name)) {
            mPendingServices.remove(i);
            i--;
            N--;
          }
        }
      }
    }
 catch (    RemoteException ex) {
    }
  }
  if (r != null) {
    if (checkComponentPermission(r.permission,callingPid,callingUid,r.appInfo.uid,r.exported) != PackageManager.PERMISSION_GRANTED) {
      if (!r.exported) {
        Slog.w(TAG,"Permission Denial: Accessing service " + r.name + " from pid="+ callingPid+ ", uid="+ callingUid+ " that is not exported from uid "+ r.appInfo.uid);
        return new ServiceLookupResult(null,"not exported from uid " + r.appInfo.uid);
      }
      Slog.w(TAG,"Permission Denial: Accessing service " + r.name + " from pid="+ callingPid+ ", uid="+ callingUid+ " requires "+ r.permission);
      return new ServiceLookupResult(null,r.permission);
    }
    return new ServiceLookupResult(r,null);
  }
  return null;
}
