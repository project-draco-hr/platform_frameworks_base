{
  if (app.notResponding || app.crashing) {
    return;
  }
  EventLog.writeEvent(LOG_ANR,app.pid,app.processName,annotation);
  boolean isSecure="1".equals(SystemProperties.get(SYSTEM_SECURE,"0"));
  if (isSecure && !app.isInterestingToUserLocked() && Process.myPid() != app.pid) {
    Process.killProcess(app.pid);
    return;
  }
  String processInfo=null;
  if (MONITOR_CPU_USAGE) {
    updateCpuStatsNow();
synchronized (mProcessStatsThread) {
      processInfo=mProcessStats.printCurrentState();
    }
  }
  StringBuilder info=new StringBuilder();
  info.append("ANR (application not responding) in process: ");
  info.append(app.processName);
  if (annotation != null) {
    info.append("\nAnnotation: ");
    info.append(annotation);
  }
  if (MONITOR_CPU_USAGE) {
    info.append("\nCPU usage:\n");
    info.append(processInfo);
  }
  Log.i(TAG,info.toString());
  boolean fileDump=prepareTraceFile(true);
  if (!fileDump) {
    Process.sendSignal(app.pid,Process.SIGNAL_QUIT);
  }
 else {
synchronized (this) {
      for (int i=mLRUProcesses.size() - 1; i >= 0; i--) {
        ProcessRecord r=mLRUProcesses.get(i);
        if (r.thread != null) {
          Process.sendSignal(r.pid,Process.SIGNAL_QUIT);
        }
      }
    }
  }
  if (mWatcher != null) {
    try {
      int res=mWatcher.appNotResponding(app.processName,app.pid,info.toString());
      if (res != 0) {
        if (res < 0) {
          try {
            wait(2000);
          }
 catch (          InterruptedException e) {
          }
          Process.killProcess(app.pid);
          return;
        }
      }
    }
 catch (    RemoteException e) {
      mWatcher=null;
    }
  }
  makeAppNotRespondingLocked(app,activity != null ? activity.shortComponentName : null,annotation != null ? "ANR " + annotation : "ANR",info.toString(),null);
  Message msg=Message.obtain();
  HashMap map=new HashMap();
  msg.what=SHOW_NOT_RESPONDING_MSG;
  msg.obj=map;
  map.put("app",app);
  if (activity != null) {
    map.put("activity",activity);
  }
  mHandler.sendMessage(msg);
  return;
}
