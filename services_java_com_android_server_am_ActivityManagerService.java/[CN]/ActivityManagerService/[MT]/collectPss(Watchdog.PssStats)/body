{
  stats.mEmptyPss=0;
  stats.mEmptyCount=0;
  stats.mBackgroundPss=0;
  stats.mBackgroundCount=0;
  stats.mServicePss=0;
  stats.mServiceCount=0;
  stats.mVisiblePss=0;
  stats.mVisibleCount=0;
  stats.mForegroundPss=0;
  stats.mForegroundCount=0;
  stats.mNoPssCount=0;
synchronized (this) {
    int i;
    int NPD=mProcDeaths.length < stats.mProcDeaths.length ? mProcDeaths.length : stats.mProcDeaths.length;
    int aggr=0;
    for (i=0; i < NPD; i++) {
      aggr+=mProcDeaths[i];
      stats.mProcDeaths[i]=aggr;
    }
    while (i < stats.mProcDeaths.length) {
      stats.mProcDeaths[i]=0;
      i++;
    }
    for (i=mLruProcesses.size() - 1; i >= 0; i--) {
      ProcessRecord proc=mLruProcesses.get(i);
      if (proc.persistent) {
        continue;
      }
      if (proc.lastPss == 0) {
        stats.mNoPssCount++;
        continue;
      }
      if (proc.setAdj >= HIDDEN_APP_MIN_ADJ) {
        if (proc.empty) {
          stats.mEmptyPss+=proc.lastPss;
          stats.mEmptyCount++;
        }
 else {
          stats.mBackgroundPss+=proc.lastPss;
          stats.mBackgroundCount++;
        }
      }
 else       if (proc.setAdj >= VISIBLE_APP_ADJ) {
        stats.mVisiblePss+=proc.lastPss;
        stats.mVisibleCount++;
      }
 else {
        stats.mForegroundPss+=proc.lastPss;
        stats.mForegroundCount++;
      }
    }
  }
}
