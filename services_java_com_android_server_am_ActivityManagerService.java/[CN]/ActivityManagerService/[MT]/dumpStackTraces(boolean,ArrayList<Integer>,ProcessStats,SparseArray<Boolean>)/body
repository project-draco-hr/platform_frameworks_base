{
  String tracesPath=SystemProperties.get("dalvik.vm.stack-trace-file",null);
  if (tracesPath == null || tracesPath.length() == 0) {
    return null;
  }
  File tracesFile=new File(tracesPath);
  try {
    File tracesDir=tracesFile.getParentFile();
    if (!tracesDir.exists())     tracesFile.mkdirs();
    FileUtils.setPermissions(tracesDir.getPath(),0775,-1,-1);
    if (clearTraces && tracesFile.exists())     tracesFile.delete();
    tracesFile.createNewFile();
    FileUtils.setPermissions(tracesFile.getPath(),0666,-1,-1);
  }
 catch (  IOException e) {
    Slog.w(TAG,"Unable to prepare ANR traces file: " + tracesPath,e);
    return null;
  }
  FileObserver observer=new FileObserver(tracesPath,FileObserver.CLOSE_WRITE){
    public synchronized void onEvent(    int event,    String path){
      notify();
    }
  }
;
  try {
    observer.startWatching();
    try {
      int num=firstPids.size();
      for (int i=0; i < num; i++) {
synchronized (observer) {
          Process.sendSignal(firstPids.get(i),Process.SIGNAL_QUIT);
          observer.wait(200);
        }
      }
    }
 catch (    InterruptedException e) {
      Log.wtf(TAG,e);
    }
    if (processStats != null) {
      processStats.init();
      System.gc();
      processStats.update();
      try {
synchronized (processStats) {
          processStats.wait(500);
        }
      }
 catch (      InterruptedException e) {
      }
      processStats.update();
      final int N=processStats.countWorkingStats();
      int numProcs=0;
      for (int i=0; i < N && numProcs < 5; i++) {
        ProcessStats.Stats stats=processStats.getWorkingStats(i);
        if (lastPids.indexOfKey(stats.pid) >= 0) {
          numProcs++;
          try {
synchronized (observer) {
              Process.sendSignal(stats.pid,Process.SIGNAL_QUIT);
              observer.wait(200);
            }
          }
 catch (          InterruptedException e) {
            Log.wtf(TAG,e);
          }
        }
      }
    }
    return tracesFile;
  }
  finally {
    observer.stopWatching();
  }
}
