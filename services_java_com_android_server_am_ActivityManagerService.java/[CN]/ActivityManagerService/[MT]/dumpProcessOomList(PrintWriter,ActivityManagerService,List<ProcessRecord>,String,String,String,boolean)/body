{
  final long curRealtime=SystemClock.elapsedRealtime();
  final long realtimeSince=curRealtime - service.mLastPowerCheckRealtime;
  final long curUptime=SystemClock.uptimeMillis();
  final long uptimeSince=curUptime - service.mLastPowerCheckUptime;
  final int N=list.size() - 1;
  for (int i=N; i >= 0; i--) {
    ProcessRecord r=list.get(i);
    String oomAdj;
    if (r.setAdj >= EMPTY_APP_ADJ) {
      oomAdj=buildOomTag("empty",null,r.setAdj,EMPTY_APP_ADJ);
    }
 else     if (r.setAdj >= HIDDEN_APP_MIN_ADJ) {
      oomAdj=buildOomTag("bak","  ",r.setAdj,HIDDEN_APP_MIN_ADJ);
    }
 else     if (r.setAdj >= HOME_APP_ADJ) {
      oomAdj=buildOomTag("home ",null,r.setAdj,HOME_APP_ADJ);
    }
 else     if (r.setAdj >= SECONDARY_SERVER_ADJ) {
      oomAdj=buildOomTag("svc","  ",r.setAdj,SECONDARY_SERVER_ADJ);
    }
 else     if (r.setAdj >= BACKUP_APP_ADJ) {
      oomAdj=buildOomTag("bckup",null,r.setAdj,BACKUP_APP_ADJ);
    }
 else     if (r.setAdj >= HEAVY_WEIGHT_APP_ADJ) {
      oomAdj=buildOomTag("hvy  ",null,r.setAdj,HEAVY_WEIGHT_APP_ADJ);
    }
 else     if (r.setAdj >= PERCEPTIBLE_APP_ADJ) {
      oomAdj=buildOomTag("prcp ",null,r.setAdj,PERCEPTIBLE_APP_ADJ);
    }
 else     if (r.setAdj >= VISIBLE_APP_ADJ) {
      oomAdj=buildOomTag("vis  ",null,r.setAdj,VISIBLE_APP_ADJ);
    }
 else     if (r.setAdj >= FOREGROUND_APP_ADJ) {
      oomAdj=buildOomTag("fore ",null,r.setAdj,FOREGROUND_APP_ADJ);
    }
 else     if (r.setAdj >= CORE_SERVER_ADJ) {
      oomAdj=buildOomTag("core ",null,r.setAdj,CORE_SERVER_ADJ);
    }
 else     if (r.setAdj >= SYSTEM_ADJ) {
      oomAdj=buildOomTag("sys  ",null,r.setAdj,SYSTEM_ADJ);
    }
 else {
      oomAdj=Integer.toString(r.setAdj);
    }
    String schedGroup;
switch (r.setSchedGroup) {
case Process.THREAD_GROUP_BG_NONINTERACTIVE:
      schedGroup="B";
    break;
case Process.THREAD_GROUP_DEFAULT:
  schedGroup="F";
break;
default :
schedGroup=Integer.toString(r.setSchedGroup);
break;
}
pw.println(String.format("%s%s #%2d: adj=%s/%s %s (%s)",prefix,(r.persistent ? persistentLabel : normalLabel),N - i,oomAdj,schedGroup,r.toShortString(),r.adjType));
if (r.adjSource != null || r.adjTarget != null) {
pw.print(prefix);
pw.print("    ");
if (r.adjTarget instanceof ComponentName) {
pw.print(((ComponentName)r.adjTarget).flattenToShortString());
}
 else if (r.adjTarget != null) {
pw.print(r.adjTarget.toString());
}
 else {
pw.print("{null}");
}
pw.print("<=");
if (r.adjSource instanceof ProcessRecord) {
pw.print("Proc{");
pw.print(((ProcessRecord)r.adjSource).toShortString());
pw.println("}");
}
 else if (r.adjSource != null) {
pw.println(r.adjSource.toString());
}
 else {
pw.println("{null}");
}
}
if (inclDetails) {
pw.print(prefix);
pw.print("    ");
pw.print("oom: max=");
pw.print(r.maxAdj);
pw.print(" hidden=");
pw.print(r.hiddenAdj);
pw.print(" curRaw=");
pw.print(r.curRawAdj);
pw.print(" setRaw=");
pw.print(r.setRawAdj);
pw.print(" cur=");
pw.print(r.curAdj);
pw.print(" set=");
pw.println(r.setAdj);
pw.print(prefix);
pw.print("    ");
pw.print("keeping=");
pw.print(r.keeping);
pw.print(" hidden=");
pw.print(r.hidden);
pw.print(" empty=");
pw.println(r.empty);
if (!r.keeping) {
if (r.lastWakeTime != 0) {
long wtime;
BatteryStatsImpl stats=service.mBatteryStatsService.getActiveStatistics();
synchronized (stats) {
wtime=stats.getProcessWakeTime(r.info.uid,r.pid,curRealtime);
}
long timeUsed=wtime - r.lastWakeTime;
pw.print(prefix);
pw.print("    ");
pw.print("keep awake over ");
TimeUtils.formatDuration(realtimeSince,pw);
pw.print(" used ");
TimeUtils.formatDuration(timeUsed,pw);
pw.print(" (");
pw.print((timeUsed * 100) / realtimeSince);
pw.println("%)");
}
if (r.lastCpuTime != 0) {
long timeUsed=r.curCpuTime - r.lastCpuTime;
pw.print(prefix);
pw.print("    ");
pw.print("run cpu over ");
TimeUtils.formatDuration(uptimeSince,pw);
pw.print(" used ");
TimeUtils.formatDuration(timeUsed,pw);
pw.print(" (");
pw.print((timeUsed * 100) / uptimeSince);
pw.println("%)");
}
}
}
}
}
