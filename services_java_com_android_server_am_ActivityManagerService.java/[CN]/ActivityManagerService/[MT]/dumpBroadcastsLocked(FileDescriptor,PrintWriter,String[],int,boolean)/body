{
  boolean needSep=false;
  pw.println("ACTIVITY MANAGER BROADCAST STATE (dumpsys activity broadcasts)");
  if (dumpAll) {
    if (mRegisteredReceivers.size() > 0) {
      pw.println("  Registered Receivers:");
      Iterator it=mRegisteredReceivers.values().iterator();
      while (it.hasNext()) {
        ReceiverList r=(ReceiverList)it.next();
        pw.print("  * ");
        pw.println(r);
        r.dump(pw,"    ");
      }
    }
    pw.println();
    pw.println("  Receiver Resolver Table:");
    mReceiverResolver.dump(pw,null,"    ",null,false);
    needSep=true;
  }
  if (mParallelBroadcasts.size() > 0 || mOrderedBroadcasts.size() > 0 || mPendingBroadcast != null) {
    if (mParallelBroadcasts.size() > 0) {
      pw.println();
      pw.println("  Active broadcasts:");
    }
    for (int i=mParallelBroadcasts.size() - 1; i >= 0; i--) {
      pw.println("  Broadcast #" + i + ":");
      mParallelBroadcasts.get(i).dump(pw,"    ");
    }
    if (mOrderedBroadcasts.size() > 0) {
      pw.println();
      pw.println("  Active ordered broadcasts:");
    }
    for (int i=mOrderedBroadcasts.size() - 1; i >= 0; i--) {
      pw.println("  Serialized Broadcast #" + i + ":");
      mOrderedBroadcasts.get(i).dump(pw,"    ");
    }
    pw.println();
    pw.println("  Pending broadcast:");
    if (mPendingBroadcast != null) {
      mPendingBroadcast.dump(pw,"    ");
    }
 else {
      pw.println("    (null)");
    }
    needSep=true;
  }
  if (needSep) {
    pw.println();
  }
  pw.println("  Historical broadcasts:");
  for (int i=0; i < MAX_BROADCAST_HISTORY; i++) {
    BroadcastRecord r=mBroadcastHistory[i];
    if (r == null) {
      break;
    }
    if (dumpAll) {
      pw.print("  Historical Broadcast #");
      pw.print(i);
      pw.println(":");
      r.dump(pw,"    ");
    }
 else {
      if (i >= 50) {
        pw.println("  ...");
        break;
      }
      pw.print("  #");
      pw.print(i);
      pw.print(": ");
      pw.println(r);
    }
  }
  needSep=true;
  if (mStickyBroadcasts != null) {
    pw.println();
    pw.println("  Sticky broadcasts:");
    StringBuilder sb=new StringBuilder(128);
    for (    Map.Entry<String,ArrayList<Intent>> ent : mStickyBroadcasts.entrySet()) {
      pw.print("  * Sticky action ");
      pw.print(ent.getKey());
      if (dumpAll) {
        pw.println(":");
        ArrayList<Intent> intents=ent.getValue();
        final int N=intents.size();
        for (int i=0; i < N; i++) {
          sb.setLength(0);
          sb.append("    Intent: ");
          intents.get(i).toShortString(sb,true,false);
          pw.println(sb.toString());
          Bundle bundle=intents.get(i).getExtras();
          if (bundle != null) {
            pw.print("      ");
            pw.println(bundle.toString());
          }
        }
      }
 else {
        pw.println("");
      }
    }
    needSep=true;
  }
  if (dumpAll) {
    pw.println();
    pw.println("  mBroadcastsScheduled=" + mBroadcastsScheduled);
    pw.println("  mHandler:");
    mHandler.dump(new PrintWriterPrinter(pw),"    ");
    needSep=true;
  }
  return needSep;
}
