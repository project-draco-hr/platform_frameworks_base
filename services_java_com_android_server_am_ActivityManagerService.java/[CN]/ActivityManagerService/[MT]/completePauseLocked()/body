{
  HistoryRecord prev=mPausingActivity;
  if (DEBUG_PAUSE)   Log.v(TAG,"Complete pause: " + prev);
  if (prev != null) {
    if (prev.finishing) {
      if (DEBUG_PAUSE)       Log.v(TAG,"Executing finish of activity: " + prev);
      prev=finishCurrentActivityLocked(prev,FINISH_AFTER_VISIBLE);
    }
 else     if (prev.app != null) {
      if (DEBUG_PAUSE)       Log.v(TAG,"Enqueueing pending stop: " + prev);
      if (prev.waitingVisible) {
        prev.waitingVisible=false;
        mWaitingVisibleActivities.remove(prev);
        if (DEBUG_SWITCH || DEBUG_PAUSE)         Log.v(TAG,"Complete pause, no longer waiting: " + prev);
      }
      if (prev.configDestroy) {
        if (DEBUG_PAUSE)         Log.v(TAG,"Destroying after pause: " + prev);
        destroyActivityLocked(prev,true);
      }
 else {
        mStoppingActivities.add(prev);
        if (mStoppingActivities.size() > 3) {
          if (DEBUG_PAUSE)           Log.v(TAG,"To many pending stops, forcing idle");
          Message msg=Message.obtain();
          msg.what=ActivityManagerService.IDLE_NOW_MSG;
          mHandler.sendMessage(msg);
        }
      }
    }
 else {
      if (DEBUG_PAUSE)       Log.v(TAG,"App died during pause, not stopping: " + prev);
      prev=null;
    }
    mPausingActivity=null;
  }
  if (!mSleeping && !mShuttingDown) {
    resumeTopActivityLocked(prev);
  }
 else {
    if (mGoingToSleep.isHeld()) {
      mGoingToSleep.release();
    }
    if (mShuttingDown) {
      notifyAll();
    }
  }
  if (prev != null) {
    prev.resumeKeyDispatchingLocked();
  }
  if (prev.app != null && prev.cpuTimeAtResume > 0 && mBatteryStatsService.isOnBattery()) {
    long diff=0;
synchronized (mProcessStatsThread) {
      diff=mProcessStats.getCpuTimeForPid(prev.app.pid) - prev.cpuTimeAtResume;
    }
    if (diff > 0) {
      BatteryStatsImpl bsi=mBatteryStatsService.getActiveStatistics();
synchronized (bsi) {
        BatteryStatsImpl.Uid.Proc ps=bsi.getProcessStatsLocked(prev.info.applicationInfo.uid,prev.info.packageName);
        if (ps != null) {
          ps.addForegroundTimeLocked(diff);
        }
      }
    }
  }
  prev.cpuTimeAtResume=0;
}
