{
  long now=SystemClock.uptimeMillis();
  Long crashTime=mProcessCrashTimes.get(app.info.processName,app.info.uid);
  if (crashTime != null && now < crashTime + MIN_CRASH_INTERVAL) {
    Log.w(TAG,"Process " + app.info.processName + " has crashed too many times: killing!");
    EventLog.writeEvent(EventLogTags.AM_PROCESS_CRASHED_TOO_MUCH,app.info.processName,app.info.uid);
    killServicesLocked(app,false);
    for (int i=mHistory.size() - 1; i >= 0; i--) {
      HistoryRecord r=(HistoryRecord)mHistory.get(i);
      if (r.app == app) {
        if (Config.LOGD)         Log.d(TAG,"  Force finishing activity " + r.intent.getComponent().flattenToShortString());
        finishActivityLocked(r,i,Activity.RESULT_CANCELED,null,"crashed");
      }
    }
    if (!app.persistent) {
      EventLog.writeEvent(EventLogTags.AM_PROC_BAD,app.info.uid,app.info.processName);
      mBadProcesses.put(app.info.processName,app.info.uid,now);
      app.bad=true;
      mProcessCrashTimes.remove(app.info.processName,app.info.uid);
      app.removed=true;
      removeProcessLocked(app,false);
      return false;
    }
  }
  if (app.services.size() != 0) {
    Iterator it=app.services.iterator();
    while (it.hasNext()) {
      ServiceRecord sr=(ServiceRecord)it.next();
      sr.crashCount++;
    }
  }
  mProcessCrashTimes.put(app.info.processName,app.info.uid,now);
  return true;
}
