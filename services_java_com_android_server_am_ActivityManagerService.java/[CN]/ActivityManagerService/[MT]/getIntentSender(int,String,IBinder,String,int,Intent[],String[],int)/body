{
  if (intents != null) {
    if (intents.length < 1) {
      throw new IllegalArgumentException("Intents array length must be >= 1");
    }
    for (int i=0; i < intents.length; i++) {
      Intent intent=intents[i];
      if (intent != null) {
        if (intent.hasFileDescriptors()) {
          throw new IllegalArgumentException("File descriptors passed in Intent");
        }
        if (type == INTENT_SENDER_BROADCAST && (intent.getFlags() & Intent.FLAG_RECEIVER_BOOT_UPGRADE) != 0) {
          throw new IllegalArgumentException("Can't use FLAG_RECEIVER_BOOT_UPGRADE here");
        }
        intents[i]=new Intent(intent);
      }
    }
    if (resolvedTypes != null && resolvedTypes.length != intents.length) {
      throw new IllegalArgumentException("Intent array length does not match resolvedTypes length");
    }
  }
synchronized (this) {
    int callingUid=Binder.getCallingUid();
    try {
      if (callingUid != 0 && callingUid != Process.SYSTEM_UID) {
        int uid=AppGlobals.getPackageManager().getPackageUid(packageName);
        if (uid != Binder.getCallingUid()) {
          String msg="Permission Denial: getIntentSender() from pid=" + Binder.getCallingPid() + ", uid="+ Binder.getCallingUid()+ ", (need uid="+ uid+ ")"+ " is not allowed to send as package "+ packageName;
          Slog.w(TAG,msg);
          throw new SecurityException(msg);
        }
      }
      return getIntentSenderLocked(type,packageName,callingUid,token,resultWho,requestCode,intents,resolvedTypes,flags);
    }
 catch (    RemoteException e) {
      throw new SecurityException(e);
    }
  }
}
