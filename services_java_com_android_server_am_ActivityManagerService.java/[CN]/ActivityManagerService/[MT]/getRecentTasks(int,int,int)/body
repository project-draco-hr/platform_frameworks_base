{
  final int callingUid=Binder.getCallingUid();
  if (userId != UserHandle.getCallingUserId()) {
    if (checkComponentPermission(android.Manifest.permission.INTERACT_ACROSS_USERS_FULL,Binder.getCallingPid(),callingUid,-1,true) != PackageManager.PERMISSION_GRANTED) {
      String msg="Permission Denial: " + "Request to get recent tasks for user " + userId + " but is calling from user "+ UserHandle.getUserId(callingUid)+ "; this requires "+ android.Manifest.permission.INTERACT_ACROSS_USERS_FULL;
      Slog.w(TAG,msg);
      throw new SecurityException(msg);
    }
 else {
      if (userId == UserHandle.USER_CURRENT) {
        userId=mCurrentUserId;
      }
    }
  }
synchronized (this) {
    enforceCallingPermission(android.Manifest.permission.GET_TASKS,"getRecentTasks()");
    final boolean detailed=checkCallingPermission(android.Manifest.permission.GET_DETAILED_TASKS) == PackageManager.PERMISSION_GRANTED;
    IPackageManager pm=AppGlobals.getPackageManager();
    final int N=mRecentTasks.size();
    ArrayList<ActivityManager.RecentTaskInfo> res=new ArrayList<ActivityManager.RecentTaskInfo>(maxNum < N ? maxNum : N);
    for (int i=0; i < N && maxNum > 0; i++) {
      TaskRecord tr=mRecentTasks.get(i);
      if (tr.userId != userId)       continue;
      if (i == 0 || ((flags & ActivityManager.RECENT_WITH_EXCLUDED) != 0) || (tr.intent == null) || ((tr.intent.getFlags() & Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS) == 0)) {
        ActivityManager.RecentTaskInfo rti=new ActivityManager.RecentTaskInfo();
        rti.id=tr.numActivities > 0 ? tr.taskId : -1;
        rti.persistentId=tr.taskId;
        rti.baseIntent=new Intent(tr.intent != null ? tr.intent : tr.affinityIntent);
        if (!detailed) {
          rti.baseIntent.replaceExtras((Bundle)null);
        }
        rti.origActivity=tr.origActivity;
        rti.description=tr.lastDescription;
        if ((flags & ActivityManager.RECENT_IGNORE_UNAVAILABLE) != 0) {
          try {
            if (rti.origActivity != null) {
              if (pm.getActivityInfo(rti.origActivity,0,userId) == null) {
                continue;
              }
            }
 else             if (rti.baseIntent != null) {
              if (pm.queryIntentActivities(rti.baseIntent,null,0,userId) == null) {
                continue;
              }
            }
          }
 catch (          RemoteException e) {
          }
        }
        res.add(rti);
        maxNum--;
      }
    }
    return res;
  }
}
