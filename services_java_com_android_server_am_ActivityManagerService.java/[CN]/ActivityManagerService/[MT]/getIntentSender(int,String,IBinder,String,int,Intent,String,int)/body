{
  if (intent != null && intent.hasFileDescriptors() == true) {
    throw new IllegalArgumentException("File descriptors passed in Intent");
  }
  if (type == INTENT_SENDER_BROADCAST) {
    if ((intent.getFlags() & Intent.FLAG_RECEIVER_BOOT_UPGRADE) != 0) {
      throw new IllegalArgumentException("Can't use FLAG_RECEIVER_BOOT_UPGRADE here");
    }
  }
synchronized (this) {
    int callingUid=Binder.getCallingUid();
    try {
      if (callingUid != 0 && callingUid != Process.SYSTEM_UID && Process.supportsProcesses()) {
        int uid=AppGlobals.getPackageManager().getPackageUid(packageName);
        if (uid != Binder.getCallingUid()) {
          String msg="Permission Denial: getIntentSender() from pid=" + Binder.getCallingPid() + ", uid="+ Binder.getCallingUid()+ ", (need uid="+ uid+ ")"+ " is not allowed to send as package "+ packageName;
          Slog.w(TAG,msg);
          throw new SecurityException(msg);
        }
      }
      return getIntentSenderLocked(type,packageName,callingUid,token,resultWho,requestCode,intent,resolvedType,flags);
    }
 catch (    RemoteException e) {
      throw new SecurityException(e);
    }
  }
}
