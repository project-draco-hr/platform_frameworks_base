{
  boolean haveBg=false;
  for (int i=mLruProcesses.size() - 1; i >= 0; i--) {
    ProcessRecord rec=mLruProcesses.get(i);
    if (rec.thread != null && rec.setProcState >= ActivityManager.PROCESS_STATE_CACHED_ACTIVITY) {
      haveBg=true;
      break;
    }
  }
  if (!haveBg) {
    boolean doReport="1".equals(SystemProperties.get(SYSTEM_DEBUGGABLE,"0"));
    if (doReport) {
      long now=SystemClock.uptimeMillis();
      if (now < (mLastMemUsageReportTime + 5 * 60 * 1000)) {
        doReport=false;
      }
 else {
        mLastMemUsageReportTime=now;
      }
    }
    final ArrayList<ProcessMemInfo> memInfos=doReport ? new ArrayList<ProcessMemInfo>(mLruProcesses.size()) : null;
    EventLog.writeEvent(EventLogTags.AM_LOW_MEMORY,mLruProcesses.size());
    long now=SystemClock.uptimeMillis();
    for (int i=mLruProcesses.size() - 1; i >= 0; i--) {
      ProcessRecord rec=mLruProcesses.get(i);
      if (rec == dyingProc || rec.thread == null) {
        continue;
      }
      if (doReport) {
        memInfos.add(new ProcessMemInfo(rec.processName,rec.pid,rec.setAdj,rec.setProcState,rec.adjType,rec.makeAdjReason()));
      }
      if ((rec.lastLowMemory + GC_MIN_INTERVAL) <= now) {
        if (rec.setAdj <= ProcessList.HEAVY_WEIGHT_APP_ADJ) {
          rec.lastRequestedGc=0;
        }
 else {
          rec.lastRequestedGc=rec.lastLowMemory;
        }
        rec.reportLowMemory=true;
        rec.lastLowMemory=now;
        mProcessesToGc.remove(rec);
        addProcessToGcListLocked(rec);
      }
    }
    if (doReport) {
      Message msg=mHandler.obtainMessage(REPORT_MEM_USAGE_MSG,memInfos);
      mHandler.sendMessage(msg);
    }
    scheduleAppGcsLocked();
  }
}
