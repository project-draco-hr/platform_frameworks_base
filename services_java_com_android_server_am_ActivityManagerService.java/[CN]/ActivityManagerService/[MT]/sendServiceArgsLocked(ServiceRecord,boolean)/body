{
  final int N=r.pendingStarts.size();
  if (N == 0) {
    return;
  }
  while (r.pendingStarts.size() > 0) {
    try {
      ServiceRecord.StartItem si=r.pendingStarts.remove(0);
      if (DEBUG_SERVICE)       Slog.v(TAG,"Sending arguments to: " + r + " "+ r.intent+ " args="+ si.intent);
      if (si.intent == null && N > 1) {
        continue;
      }
      si.deliveredTime=SystemClock.uptimeMillis();
      r.deliveredStarts.add(si);
      si.deliveryCount++;
      if (si.targetPermissionUid >= 0 && si.intent != null) {
        grantUriPermissionUncheckedFromIntentLocked(si.targetPermissionUid,r.packageName,si.intent,si.getUriPermissionsLocked());
      }
      bumpServiceExecutingLocked(r,"start");
      if (!oomAdjusted) {
        oomAdjusted=true;
        updateOomAdjLocked(r.app);
      }
      int flags=0;
      if (si.deliveryCount > 0) {
        flags|=Service.START_FLAG_RETRY;
      }
      if (si.doneExecutingCount > 0) {
        flags|=Service.START_FLAG_REDELIVERY;
      }
      r.app.thread.scheduleServiceArgs(r,si.id,flags,si.intent);
    }
 catch (    RemoteException e) {
      if (DEBUG_SERVICE)       Slog.v(TAG,"Crashed while scheduling start: " + r);
      break;
    }
catch (    Exception e) {
      Slog.w(TAG,"Unexpected exception",e);
      break;
    }
  }
}
