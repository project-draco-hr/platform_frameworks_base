{
  AppErrorResult result=new AppErrorResult();
  ProcessRecord r=null;
synchronized (this) {
    if (app != null) {
      for (      SparseArray<ProcessRecord> apps : mProcessNames.getMap().values()) {
        final int NA=apps.size();
        for (int ia=0; ia < NA; ia++) {
          ProcessRecord p=apps.valueAt(ia);
          if (p.thread != null && p.thread.asBinder() == app) {
            r=p;
            break;
          }
        }
      }
    }
    if (r != null) {
      Process.sendSignal(r.pid,Process.SIGNAL_QUIT);
    }
    if (mWatcher != null) {
      try {
        String name=r != null ? r.processName : null;
        int pid=r != null ? r.pid : Binder.getCallingPid();
        if (!mWatcher.appCrashed(name,pid,shortMsg,longMsg,crashData)) {
          Log.w(TAG,"Force-killing crashed app " + name + " at watcher's request");
          Process.killProcess(pid);
          return 0;
        }
      }
 catch (      RemoteException e) {
        mWatcher=null;
      }
    }
    final long origId=Binder.clearCallingIdentity();
    if (r != null && r.instrumentationClass != null) {
      Log.w(TAG,"Error in app " + r.processName + " running instrumentation "+ r.instrumentationClass+ ":");
      if (shortMsg != null)       Log.w(TAG,"  " + shortMsg);
      if (longMsg != null)       Log.w(TAG,"  " + longMsg);
      Bundle info=new Bundle();
      info.putString("shortMsg",shortMsg);
      info.putString("longMsg",longMsg);
      finishInstrumentationLocked(r,Activity.RESULT_CANCELED,info);
      Binder.restoreCallingIdentity(origId);
      return 0;
    }
    if (r != null) {
      if (!makeAppCrashingLocked(r,tag,shortMsg,longMsg,crashData)) {
        return 0;
      }
    }
 else {
      Log.w(TAG,"Some application object " + app + " tag "+ tag+ " has crashed, but I don't know who it is.");
      Log.w(TAG,"ShortMsg:" + shortMsg);
      Log.w(TAG,"LongMsg:" + longMsg);
      Binder.restoreCallingIdentity(origId);
      return 0;
    }
    Message msg=Message.obtain();
    msg.what=SHOW_ERROR_MSG;
    HashMap data=new HashMap();
    data.put("result",result);
    data.put("app",r);
    data.put("flags",flags);
    data.put("shortMsg",shortMsg);
    data.put("longMsg",longMsg);
    if (r != null && (r.info.flags & ApplicationInfo.FLAG_SYSTEM) != 0) {
      data.put("crashData",crashData);
    }
    msg.obj=data;
    mHandler.sendMessage(msg);
    Binder.restoreCallingIdentity(origId);
  }
  int res=result.get();
  Intent appErrorIntent=null;
synchronized (this) {
    if (r != null) {
      mProcessCrashTimes.put(r.info.processName,r.info.uid,SystemClock.uptimeMillis());
    }
    if (res == AppErrorDialog.FORCE_QUIT_AND_REPORT) {
      appErrorIntent=createAppErrorIntentLocked(r);
      res=AppErrorDialog.FORCE_QUIT;
    }
  }
  if (appErrorIntent != null) {
    try {
      mContext.startActivity(appErrorIntent);
    }
 catch (    ActivityNotFoundException e) {
      Log.w(TAG,"bug report receiver dissappeared",e);
    }
  }
  return res;
}
