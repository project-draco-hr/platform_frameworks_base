{
  app.hiddenAdj=hiddenAdj;
  if (app.thread == null) {
    return true;
  }
  int adj=computeOomAdjLocked(app,hiddenAdj,TOP_APP);
  if (false) {
    if (app.pid != 0 && app.isForeground != app.setIsForeground) {
      app.setIsForeground=app.isForeground;
      if (app.pid != MY_PID) {
        if (DEBUG_SWITCH || DEBUG_OOM_ADJ)         Log.v(TAG,"Setting priority of " + app + " to "+ (app.isForeground ? Process.THREAD_PRIORITY_FOREGROUND : Process.THREAD_PRIORITY_DEFAULT));
        try {
          Process.setThreadPriority(app.pid,app.isForeground ? Process.THREAD_PRIORITY_FOREGROUND : Process.THREAD_PRIORITY_DEFAULT);
        }
 catch (        RuntimeException e) {
          Log.w(TAG,"Exception trying to set priority of application thread " + app.pid,e);
        }
      }
    }
  }
  if (app.pid != 0 && app.pid != MY_PID) {
    if (app.curRawAdj != app.setRawAdj) {
      if (app.curRawAdj > FOREGROUND_APP_ADJ && app.setRawAdj <= FOREGROUND_APP_ADJ) {
        scheduleAppGcLocked(app);
      }
 else       if (app.curRawAdj >= HIDDEN_APP_MIN_ADJ && app.setRawAdj < HIDDEN_APP_MIN_ADJ) {
        scheduleAppGcLocked(app);
      }
      app.setRawAdj=app.curRawAdj;
    }
    if (adj != app.setAdj) {
      if (Process.setOomAdj(app.pid,adj)) {
        if (DEBUG_SWITCH || DEBUG_OOM_ADJ)         Log.v(TAG,"Set app " + app.processName + " oom adj to "+ adj);
        app.setAdj=adj;
      }
 else {
        return false;
      }
    }
    if (app.setSchedGroup != app.curSchedGroup) {
      app.setSchedGroup=app.curSchedGroup;
      if (DEBUG_SWITCH || DEBUG_OOM_ADJ)       Log.v(TAG,"Setting process group of " + app.processName + " to "+ app.curSchedGroup);
      if (true) {
        long oldId=Binder.clearCallingIdentity();
        try {
          Process.setProcessGroup(app.pid,app.curSchedGroup);
        }
 catch (        Exception e) {
          Log.w(TAG,"Failed setting process group of " + app.pid + " to "+ app.curSchedGroup);
          e.printStackTrace();
        }
 finally {
          Binder.restoreCallingIdentity(oldId);
        }
      }
      if (false) {
        if (app.thread != null) {
          try {
            app.thread.setSchedulingGroup(app.curSchedGroup);
          }
 catch (          RemoteException e) {
          }
        }
      }
    }
  }
  return true;
}
