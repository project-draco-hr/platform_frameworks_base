{
  ArrayList<Pair<ProcessRecord,Integer>> list=new ArrayList<Pair<ProcessRecord,Integer>>(origList.size());
  for (int i=0; i < origList.size(); i++) {
    ProcessRecord r=origList.get(i);
    if (dumpPackage != null && !r.pkgList.containsKey(dumpPackage)) {
      continue;
    }
    list.add(new Pair<ProcessRecord,Integer>(origList.get(i),i));
  }
  if (list.size() <= 0) {
    return false;
  }
  Comparator<Pair<ProcessRecord,Integer>> comparator=new Comparator<Pair<ProcessRecord,Integer>>(){
    @Override public int compare(    Pair<ProcessRecord,Integer> object1,    Pair<ProcessRecord,Integer> object2){
      if (object1.first.setAdj != object2.first.setAdj) {
        return object1.first.setAdj > object2.first.setAdj ? -1 : 1;
      }
      if (object1.second.intValue() != object2.second.intValue()) {
        return object1.second.intValue() > object2.second.intValue() ? -1 : 1;
      }
      return 0;
    }
  }
;
  Collections.sort(list,comparator);
  final long curRealtime=SystemClock.elapsedRealtime();
  final long realtimeSince=curRealtime - service.mLastPowerCheckRealtime;
  final long curUptime=SystemClock.uptimeMillis();
  final long uptimeSince=curUptime - service.mLastPowerCheckUptime;
  for (int i=list.size() - 1; i >= 0; i--) {
    ProcessRecord r=list.get(i).first;
    String oomAdj=ProcessList.makeOomAdjString(r.setAdj);
    char schedGroup;
switch (r.setSchedGroup) {
case Process.THREAD_GROUP_BG_NONINTERACTIVE:
      schedGroup='B';
    break;
case Process.THREAD_GROUP_DEFAULT:
  schedGroup='F';
break;
default :
schedGroup='?';
break;
}
char foreground;
if (r.foregroundActivities) {
foreground='A';
}
 else if (r.foregroundServices) {
foreground='S';
}
 else {
foreground=' ';
}
String procState=ProcessList.makeProcStateString(r.curProcState);
pw.print(prefix);
pw.print(r.persistent ? persistentLabel : normalLabel);
pw.print(" #");
int num=(origList.size() - 1) - list.get(i).second;
if (num < 10) pw.print(' ');
pw.print(num);
pw.print(": ");
pw.print(oomAdj);
pw.print(' ');
pw.print(schedGroup);
pw.print('/');
pw.print(foreground);
pw.print('/');
pw.print(procState);
pw.print(" trm:");
if (r.trimMemoryLevel < 10) pw.print(' ');
pw.print(r.trimMemoryLevel);
pw.print(' ');
pw.print(r.toShortString());
pw.print(" (");
pw.print(r.adjType);
pw.println(')');
if (r.adjSource != null || r.adjTarget != null) {
pw.print(prefix);
pw.print("    ");
if (r.adjTarget instanceof ComponentName) {
pw.print(((ComponentName)r.adjTarget).flattenToShortString());
}
 else if (r.adjTarget != null) {
pw.print(r.adjTarget.toString());
}
 else {
pw.print("{null}");
}
pw.print("<=");
if (r.adjSource instanceof ProcessRecord) {
pw.print("Proc{");
pw.print(((ProcessRecord)r.adjSource).toShortString());
pw.println("}");
}
 else if (r.adjSource != null) {
pw.println(r.adjSource.toString());
}
 else {
pw.println("{null}");
}
}
if (inclDetails) {
pw.print(prefix);
pw.print("    ");
pw.print("oom: max=");
pw.print(r.maxAdj);
pw.print(" curRaw=");
pw.print(r.curRawAdj);
pw.print(" setRaw=");
pw.print(r.setRawAdj);
pw.print(" cur=");
pw.print(r.curAdj);
pw.print(" set=");
pw.println(r.setAdj);
pw.print(prefix);
pw.print("    ");
pw.print("state: cur=");
pw.print(ProcessList.makeProcStateString(r.curProcState));
pw.print(" set=");
pw.print(ProcessList.makeProcStateString(r.setProcState));
pw.print(" lastPss=");
pw.print(r.lastPss);
pw.print(" lastCachedPss=");
pw.println(r.lastCachedPss);
pw.print(prefix);
pw.print("    ");
pw.print("keeping=");
pw.print(r.keeping);
pw.print(" cached=");
pw.print(r.cached);
pw.print(" empty=");
pw.print(r.empty);
pw.print(" hasAboveClient=");
pw.println(r.hasAboveClient);
if (!r.keeping) {
if (r.lastWakeTime != 0) {
long wtime;
BatteryStatsImpl stats=service.mBatteryStatsService.getActiveStatistics();
synchronized (stats) {
wtime=stats.getProcessWakeTime(r.info.uid,r.pid,curRealtime);
}
long timeUsed=wtime - r.lastWakeTime;
pw.print(prefix);
pw.print("    ");
pw.print("keep awake over ");
TimeUtils.formatDuration(realtimeSince,pw);
pw.print(" used ");
TimeUtils.formatDuration(timeUsed,pw);
pw.print(" (");
pw.print((timeUsed * 100) / realtimeSince);
pw.println("%)");
}
if (r.lastCpuTime != 0) {
long timeUsed=r.curCpuTime - r.lastCpuTime;
pw.print(prefix);
pw.print("    ");
pw.print("run cpu over ");
TimeUtils.formatDuration(uptimeSince,pw);
pw.print(" used ");
TimeUtils.formatDuration(timeUsed,pw);
pw.print(" (");
pw.print((timeUsed * 100) / uptimeSince);
pw.println("%)");
}
}
}
}
return true;
}
