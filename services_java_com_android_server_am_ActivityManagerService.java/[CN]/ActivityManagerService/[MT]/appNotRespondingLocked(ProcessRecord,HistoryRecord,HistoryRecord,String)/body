{
  if (app.notResponding || app.crashing) {
    return;
  }
  EventLog.writeEvent(EventLogTags.ANR,app.pid,app.processName,annotation);
  boolean isSecure="1".equals(SystemProperties.get(SYSTEM_SECURE,"0"));
  if (isSecure && !app.isInterestingToUserLocked() && Process.myPid() != app.pid) {
    Process.killProcess(app.pid);
    return;
  }
  String processInfo=null;
  if (MONITOR_CPU_USAGE) {
    updateCpuStatsNow();
synchronized (mProcessStatsThread) {
      processInfo=mProcessStats.printCurrentState();
    }
  }
  StringBuilder info=mStringBuilder;
  info.setLength(0);
  info.append("ANR in process: ");
  info.append(app.processName);
  if (reportedActivity != null && reportedActivity.app != null) {
    info.append(" (last in ");
    info.append(reportedActivity.app.processName);
    info.append(")");
  }
  if (annotation != null) {
    info.append("\nAnnotation: ");
    info.append(annotation);
  }
  if (MONITOR_CPU_USAGE) {
    info.append("\nCPU usage:\n");
    info.append(processInfo);
  }
  Log.i(TAG,info.toString());
  boolean fileDump=prepareTraceFile(true);
  if (!fileDump) {
    Process.sendSignal(app.pid,Process.SIGNAL_QUIT);
  }
 else {
synchronized (this) {
      final int[] imppids=new int[3];
      int i=0;
      imppids[0]=app.pid;
      i++;
      if (reportedActivity != null && reportedActivity.app != null && reportedActivity.app.thread != null && reportedActivity.app.pid != app.pid) {
        imppids[i]=reportedActivity.app.pid;
        i++;
      }
      imppids[i]=Process.myPid();
      for (i=0; i < imppids.length && imppids[i] != 0; i++) {
        Process.sendSignal(imppids[i],Process.SIGNAL_QUIT);
synchronized (this) {
          try {
            wait(200);
          }
 catch (          InterruptedException e) {
          }
        }
      }
      for (i=mLRUProcesses.size() - 1; i >= 0; i--) {
        ProcessRecord r=mLRUProcesses.get(i);
        boolean done=false;
        for (int j=0; j < imppids.length && imppids[j] != 0; j++) {
          if (imppids[j] == r.pid) {
            done=true;
            break;
          }
        }
        if (!done && r.thread != null) {
          Process.sendSignal(r.pid,Process.SIGNAL_QUIT);
synchronized (this) {
            try {
              wait(200);
            }
 catch (            InterruptedException e) {
            }
          }
        }
      }
    }
  }
  if (mController != null) {
    try {
      int res=mController.appNotResponding(app.processName,app.pid,info.toString());
      if (res != 0) {
        if (res < 0) {
          try {
            wait(2000);
          }
 catch (          InterruptedException e) {
          }
          Process.killProcess(app.pid);
          return;
        }
      }
    }
 catch (    RemoteException e) {
      mController=null;
    }
  }
  makeAppNotRespondingLocked(app,activity != null ? activity.shortComponentName : null,annotation != null ? "ANR " + annotation : "ANR",info.toString());
  Message msg=Message.obtain();
  HashMap map=new HashMap();
  msg.what=SHOW_NOT_RESPONDING_MSG;
  msg.obj=map;
  map.put("app",app);
  if (activity != null) {
    map.put("activity",activity);
  }
  mHandler.sendMessage(msg);
  return;
}
