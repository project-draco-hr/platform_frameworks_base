{
  if (mShuttingDown || app.notResponding || app.crashing) {
    return;
  }
  EventLog.writeEvent(EventLogTags.AM_ANR,app.pid,app.processName,app.info.flags,annotation);
  ArrayList<Integer> pids=new ArrayList<Integer>(20);
  pids.add(app.pid);
  int parentPid=app.pid;
  if (parent != null && parent.app != null && parent.app.pid > 0)   parentPid=parent.app.pid;
  if (parentPid != app.pid)   pids.add(parentPid);
  if (MY_PID != app.pid && MY_PID != parentPid)   pids.add(MY_PID);
  for (int i=mLruProcesses.size() - 1; i >= 0; i--) {
    ProcessRecord r=mLruProcesses.get(i);
    if (r != null && r.thread != null) {
      int pid=r.pid;
      if (pid > 0 && pid != app.pid && pid != parentPid && pid != MY_PID)       pids.add(pid);
    }
  }
  File tracesFile=dumpStackTraces(pids);
  StringBuilder info=mStringBuilder;
  info.setLength(0);
  info.append("ANR in ").append(app.processName);
  if (activity != null && activity.shortComponentName != null) {
    info.append(" (").append(activity.shortComponentName).append(")");
  }
  info.append("\n");
  if (annotation != null) {
    info.append("Reason: ").append(annotation).append("\n");
  }
  if (parent != null && parent != activity) {
    info.append("Parent: ").append(parent.shortComponentName).append("\n");
  }
  String cpuInfo=null;
  if (MONITOR_CPU_USAGE) {
    updateCpuStatsNow();
synchronized (mProcessStatsThread) {
      cpuInfo=mProcessStats.printCurrentState();
    }
    info.append(cpuInfo);
  }
  Slog.e(TAG,info.toString());
  if (tracesFile == null) {
    Process.sendSignal(app.pid,Process.SIGNAL_QUIT);
  }
  addErrorToDropBox("anr",app,activity,parent,annotation,cpuInfo,tracesFile,null);
  if (mController != null) {
    try {
      int res=mController.appNotResponding(app.processName,app.pid,info.toString());
      if (res != 0) {
        if (res < 0 && app.pid != MY_PID)         Process.killProcess(app.pid);
        return;
      }
    }
 catch (    RemoteException e) {
      mController=null;
    }
  }
  boolean showBackground=Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.ANR_SHOW_BACKGROUND,0) != 0;
  if (!showBackground && !app.isInterestingToUserLocked() && app.pid != MY_PID) {
    Process.killProcess(app.pid);
    return;
  }
  makeAppNotRespondingLocked(app,activity != null ? activity.shortComponentName : null,annotation != null ? "ANR " + annotation : "ANR",info.toString());
  Message msg=Message.obtain();
  HashMap map=new HashMap();
  msg.what=SHOW_NOT_RESPONDING_MSG;
  msg.obj=map;
  map.put("app",app);
  if (activity != null) {
    map.put("activity",activity);
  }
  mHandler.sendMessage(msg);
  return;
}
