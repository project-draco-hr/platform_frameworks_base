{
  final String dropboxTag=processClass(process) + "_" + eventType;
  final DropBoxManager dbox=(DropBoxManager)mContext.getSystemService(Context.DROPBOX_SERVICE);
  if (dbox == null || !dbox.isTagEnabled(dropboxTag))   return;
  final StringBuilder sb=new StringBuilder(1024);
  appendDropBoxProcessHeaders(process,processName,sb);
  if (activity != null) {
    sb.append("Activity: ").append(activity.shortComponentName).append("\n");
  }
  if (parent != null && parent.app != null && parent.app.pid != process.pid) {
    sb.append("Parent-Process: ").append(parent.app.processName).append("\n");
  }
  if (parent != null && parent != activity) {
    sb.append("Parent-Activity: ").append(parent.shortComponentName).append("\n");
  }
  if (subject != null) {
    sb.append("Subject: ").append(subject).append("\n");
  }
  sb.append("Build: ").append(Build.FINGERPRINT).append("\n");
  if (Debug.isDebuggerConnected()) {
    sb.append("Debugger: Connected\n");
  }
  sb.append("\n");
  Thread worker=new Thread("Error dump: " + dropboxTag){
    @Override public void run(){
      if (report != null) {
        sb.append(report);
      }
      if (logFile != null) {
        try {
          sb.append(FileUtils.readTextFile(logFile,128 * 1024,"\n\n[[TRUNCATED]]"));
        }
 catch (        IOException e) {
          Slog.e(TAG,"Error reading " + logFile,e);
        }
      }
      if (crashInfo != null && crashInfo.stackTrace != null) {
        sb.append(crashInfo.stackTrace);
      }
      String setting=Settings.Global.ERROR_LOGCAT_PREFIX + dropboxTag;
      int lines=Settings.Global.getInt(mContext.getContentResolver(),setting,0);
      if (lines > 0) {
        sb.append("\n");
        InputStreamReader input=null;
        try {
          java.lang.Process logcat=new ProcessBuilder("/system/bin/logcat","-v","time","-b","events","-b","system","-b","main","-t",String.valueOf(lines)).redirectErrorStream(true).start();
          try {
            logcat.getOutputStream().close();
          }
 catch (          IOException e) {
          }
          try {
            logcat.getErrorStream().close();
          }
 catch (          IOException e) {
          }
          input=new InputStreamReader(logcat.getInputStream());
          int num;
          char[] buf=new char[8192];
          while ((num=input.read(buf)) > 0)           sb.append(buf,0,num);
        }
 catch (        IOException e) {
          Slog.e(TAG,"Error running logcat",e);
        }
 finally {
          if (input != null)           try {
            input.close();
          }
 catch (          IOException e) {
          }
        }
      }
      dbox.addText(dropboxTag,sb.toString());
    }
  }
;
  if (process == null) {
    worker.run();
  }
 else {
    worker.start();
  }
}
