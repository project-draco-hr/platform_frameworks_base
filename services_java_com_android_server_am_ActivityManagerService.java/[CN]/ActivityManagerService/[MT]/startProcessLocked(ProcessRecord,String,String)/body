{
  if (app.pid > 0 && app.pid != MY_PID) {
synchronized (mPidsSelfLocked) {
      mPidsSelfLocked.remove(app.pid);
      mHandler.removeMessages(PROC_START_TIMEOUT_MSG,app);
    }
    app.setPid(0);
  }
  if (DEBUG_PROCESSES && mProcessesOnHold.contains(app))   Slog.v(TAG,"startProcessLocked removing on hold: " + app);
  mProcessesOnHold.remove(app);
  updateCpuStats();
  System.arraycopy(mProcDeaths,0,mProcDeaths,1,mProcDeaths.length - 1);
  mProcDeaths[0]=0;
  try {
    int uid=app.uid;
    int[] gids=null;
    if (!app.isolated) {
      try {
        gids=mContext.getPackageManager().getPackageGids(app.info.packageName);
      }
 catch (      PackageManager.NameNotFoundException e) {
        Slog.w(TAG,"Unable to retrieve gids",e);
      }
    }
    if (mFactoryTest != SystemServer.FACTORY_TEST_OFF) {
      if (mFactoryTest == SystemServer.FACTORY_TEST_LOW_LEVEL && mTopComponent != null && app.processName.equals(mTopComponent.getPackageName())) {
        uid=0;
      }
      if (mFactoryTest == SystemServer.FACTORY_TEST_HIGH_LEVEL && (app.info.flags & ApplicationInfo.FLAG_FACTORY_TEST) != 0) {
        uid=0;
      }
    }
    int debugFlags=0;
    if ((app.info.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0) {
      debugFlags|=Zygote.DEBUG_ENABLE_DEBUGGER;
      debugFlags|=Zygote.DEBUG_ENABLE_CHECKJNI;
    }
    if ((app.info.flags & ApplicationInfo.FLAG_VM_SAFE_MODE) != 0 || Zygote.systemInSafeMode == true) {
      debugFlags|=Zygote.DEBUG_ENABLE_SAFEMODE;
    }
    if ("1".equals(SystemProperties.get("debug.checkjni"))) {
      debugFlags|=Zygote.DEBUG_ENABLE_CHECKJNI;
    }
    if ("1".equals(SystemProperties.get("debug.jni.logging"))) {
      debugFlags|=Zygote.DEBUG_ENABLE_JNI_LOGGING;
    }
    if ("1".equals(SystemProperties.get("debug.assert"))) {
      debugFlags|=Zygote.DEBUG_ENABLE_ASSERT;
    }
    Process.ProcessStartResult startResult=Process.start("android.app.ActivityThread",app.processName,uid,uid,gids,debugFlags,app.info.targetSdkVersion,null,null);
    BatteryStatsImpl bs=app.batteryStats.getBatteryStats();
synchronized (bs) {
      if (bs.isOnBattery()) {
        app.batteryStats.incStartsLocked();
      }
    }
    EventLog.writeEvent(EventLogTags.AM_PROC_START,startResult.pid,uid,app.processName,hostingType,hostingNameStr != null ? hostingNameStr : "");
    if (app.persistent) {
      Watchdog.getInstance().processStarted(app.processName,startResult.pid);
    }
    StringBuilder buf=mStringBuilder;
    buf.setLength(0);
    buf.append("Start proc ");
    buf.append(app.processName);
    buf.append(" for ");
    buf.append(hostingType);
    if (hostingNameStr != null) {
      buf.append(" ");
      buf.append(hostingNameStr);
    }
    buf.append(": pid=");
    buf.append(startResult.pid);
    buf.append(" uid=");
    buf.append(uid);
    buf.append(" gids={");
    if (gids != null) {
      for (int gi=0; gi < gids.length; gi++) {
        if (gi != 0)         buf.append(", ");
        buf.append(gids[gi]);
      }
    }
    buf.append("}");
    Slog.i(TAG,buf.toString());
    app.setPid(startResult.pid);
    app.usingWrapper=startResult.usingWrapper;
    app.removed=false;
synchronized (mPidsSelfLocked) {
      this.mPidsSelfLocked.put(startResult.pid,app);
      Message msg=mHandler.obtainMessage(PROC_START_TIMEOUT_MSG);
      msg.obj=app;
      mHandler.sendMessageDelayed(msg,startResult.usingWrapper ? PROC_START_TIMEOUT_WITH_WRAPPER : PROC_START_TIMEOUT);
    }
  }
 catch (  RuntimeException e) {
    app.setPid(0);
    Slog.e(TAG,"Failure starting process " + app.processName,e);
  }
}
