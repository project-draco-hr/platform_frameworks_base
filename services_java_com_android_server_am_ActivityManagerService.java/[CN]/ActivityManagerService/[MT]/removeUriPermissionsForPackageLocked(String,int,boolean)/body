{
  if (userHandle == UserHandle.USER_ALL && packageName == null) {
    throw new IllegalArgumentException("Must narrow by either package or user");
  }
  boolean persistChanged=false;
  final int size=mGrantedUriPermissions.size();
  for (int i=0; i < size; i++) {
    if (userHandle == UserHandle.USER_ALL || userHandle == UserHandle.getUserId(mGrantedUriPermissions.keyAt(i))) {
      final Iterator<UriPermission> it=mGrantedUriPermissions.valueAt(i).values().iterator();
      while (it.hasNext()) {
        final UriPermission perm=it.next();
        if (packageName == null || perm.sourcePkg.equals(packageName) || perm.targetPkg.equals(packageName)) {
          persistChanged|=perm.clearModes(~0,persist);
          if (perm.modeFlags == 0) {
            it.remove();
          }
        }
      }
    }
  }
  if (persistChanged) {
    mHandler.removeMessages(PERSIST_URI_GRANTS_MSG);
    mHandler.obtainMessage(PERSIST_URI_GRANTS_MSG).sendToTarget();
  }
}
