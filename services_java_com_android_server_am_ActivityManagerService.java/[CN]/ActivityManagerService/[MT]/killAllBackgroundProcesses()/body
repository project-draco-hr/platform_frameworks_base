{
  if (checkCallingPermission(android.Manifest.permission.KILL_BACKGROUND_PROCESSES) != PackageManager.PERMISSION_GRANTED) {
    String msg="Permission Denial: killAllBackgroundProcesses() from pid=" + Binder.getCallingPid() + ", uid="+ Binder.getCallingUid()+ " requires "+ android.Manifest.permission.KILL_BACKGROUND_PROCESSES;
    Slog.w(TAG,msg);
    throw new SecurityException(msg);
  }
  long callingId=Binder.clearCallingIdentity();
  try {
synchronized (this) {
      ArrayList<ProcessRecord> procs=new ArrayList<ProcessRecord>();
      final int NP=mProcessNames.getMap().size();
      for (int ip=0; ip < NP; ip++) {
        SparseArray<ProcessRecord> apps=mProcessNames.getMap().valueAt(ip);
        final int NA=apps.size();
        for (int ia=0; ia < NA; ia++) {
          ProcessRecord app=apps.valueAt(ia);
          if (app.persistent) {
            continue;
          }
          if (app.removed) {
            procs.add(app);
          }
 else           if (app.setAdj >= ProcessList.CACHED_APP_MIN_ADJ) {
            app.removed=true;
            procs.add(app);
          }
        }
      }
      int N=procs.size();
      for (int i=0; i < N; i++) {
        removeProcessLocked(procs.get(i),false,true,"kill all background");
      }
      updateOomAdjLocked();
      doLowMemReportIfNeededLocked(null);
    }
  }
  finally {
    Binder.restoreCallingIdentity(callingId);
  }
}
