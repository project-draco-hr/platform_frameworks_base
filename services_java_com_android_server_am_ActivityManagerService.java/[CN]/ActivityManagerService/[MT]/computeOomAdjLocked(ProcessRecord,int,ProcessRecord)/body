{
  if (mAdjSeq == app.adjSeq) {
    return app.curAdj;
  }
  if (app.thread == null) {
    app.adjSeq=mAdjSeq;
    return (app.curAdj=EMPTY_APP_ADJ);
  }
  if (app.maxAdj <= FOREGROUND_APP_ADJ) {
    app.adjType="fixed";
    app.adjSeq=mAdjSeq;
    app.curRawAdj=app.maxAdj;
    app.curSchedGroup=Process.THREAD_GROUP_DEFAULT;
    return (app.curAdj=app.maxAdj);
  }
  app.adjSource=null;
  app.adjTarget=null;
  int adj;
  int N;
  if (app == TOP_APP) {
    adj=FOREGROUND_APP_ADJ;
    app.adjType="top";
  }
 else   if (app.instrumentationClass != null) {
    adj=FOREGROUND_APP_ADJ;
    app.adjType="instr";
  }
 else   if (app.persistentActivities > 0) {
    adj=FOREGROUND_APP_ADJ;
    app.adjType="pers";
  }
 else   if (app.curReceiver != null || (mPendingBroadcast != null && mPendingBroadcast.curApp == app)) {
    adj=FOREGROUND_APP_ADJ;
    app.adjType="broadcast";
  }
 else   if (app.executingServices.size() > 0) {
    adj=FOREGROUND_APP_ADJ;
    app.adjType="exec-service";
  }
 else   if (app.foregroundServices) {
    adj=VISIBLE_APP_ADJ;
    app.adjType="foreground-service";
  }
 else   if (app.forcingToForeground != null) {
    adj=VISIBLE_APP_ADJ;
    app.adjType="force-foreground";
    app.adjSource=app.forcingToForeground;
  }
 else   if (app == mHomeProcess) {
    adj=HOME_APP_ADJ;
    app.adjType="home";
  }
 else   if ((N=app.activities.size()) != 0) {
    adj=hiddenAdj;
    for (int j=0; j < N; j++) {
      if (((HistoryRecord)app.activities.get(j)).visible) {
        adj=VISIBLE_APP_ADJ;
        app.adjType="visible";
        break;
      }
    }
  }
 else {
    adj=EMPTY_APP_ADJ;
    app.adjType="empty";
  }
  app.adjSeq=mAdjSeq;
  app.curRawAdj=adj;
  app.curAdj=adj <= app.maxAdj ? adj : app.maxAdj;
  if (mBackupTarget != null && app == mBackupTarget.app) {
    if (adj > BACKUP_APP_ADJ) {
      if (DEBUG_BACKUP)       Log.v(TAG,"oom BACKUP_APP_ADJ for " + app);
      adj=BACKUP_APP_ADJ;
      app.adjType="backup";
    }
  }
  if (app.services.size() != 0 && adj > FOREGROUND_APP_ADJ) {
    if (adj > hiddenAdj) {
      adj=hiddenAdj;
      app.adjType="services";
    }
    final long now=SystemClock.uptimeMillis();
    Iterator jt=app.services.iterator();
    while (jt.hasNext() && adj > FOREGROUND_APP_ADJ) {
      ServiceRecord s=(ServiceRecord)jt.next();
      if (s.startRequested) {
        if (now < (s.lastActivity + MAX_SERVICE_INACTIVITY)) {
          if (adj > SECONDARY_SERVER_ADJ) {
            adj=SECONDARY_SERVER_ADJ;
            app.adjType="started-services";
          }
        }
      }
      if (s.connections.size() > 0 && adj > FOREGROUND_APP_ADJ) {
        Iterator<ConnectionRecord> kt=s.connections.values().iterator();
        while (kt.hasNext() && adj > FOREGROUND_APP_ADJ) {
          ConnectionRecord cr=kt.next();
          if (cr.binding.client == app) {
            continue;
          }
          if ((cr.flags & Context.BIND_AUTO_CREATE) != 0) {
            ProcessRecord client=cr.binding.client;
            int myHiddenAdj=hiddenAdj;
            if (myHiddenAdj > client.hiddenAdj) {
              if (client.hiddenAdj > VISIBLE_APP_ADJ) {
                myHiddenAdj=client.hiddenAdj;
              }
 else {
                myHiddenAdj=VISIBLE_APP_ADJ;
              }
            }
            int clientAdj=computeOomAdjLocked(client,myHiddenAdj,TOP_APP);
            if (adj > clientAdj) {
              adj=clientAdj > VISIBLE_APP_ADJ ? clientAdj : VISIBLE_APP_ADJ;
              app.adjType="service";
              app.adjSource=cr.binding.client;
              app.adjTarget=s.serviceInfo.name;
            }
          }
          HistoryRecord a=cr.activity;
          if (a != null && adj > FOREGROUND_APP_ADJ && (a.state == ActivityState.RESUMED || a.state == ActivityState.PAUSING)) {
            adj=FOREGROUND_APP_ADJ;
            app.adjType="service";
            app.adjSource=a;
            app.adjTarget=s.serviceInfo.name;
          }
        }
      }
    }
  }
  if (app.pubProviders.size() != 0 && adj > FOREGROUND_APP_ADJ) {
    if (adj > CONTENT_PROVIDER_ADJ) {
      adj=CONTENT_PROVIDER_ADJ;
      app.adjType="pub-providers";
    }
    Iterator jt=app.pubProviders.values().iterator();
    while (jt.hasNext() && adj > FOREGROUND_APP_ADJ) {
      ContentProviderRecord cpr=(ContentProviderRecord)jt.next();
      if (cpr.clients.size() != 0) {
        Iterator<ProcessRecord> kt=cpr.clients.iterator();
        while (kt.hasNext() && adj > FOREGROUND_APP_ADJ) {
          ProcessRecord client=kt.next();
          if (client == app) {
            continue;
          }
          int myHiddenAdj=hiddenAdj;
          if (myHiddenAdj > client.hiddenAdj) {
            if (client.hiddenAdj > FOREGROUND_APP_ADJ) {
              myHiddenAdj=client.hiddenAdj;
            }
 else {
              myHiddenAdj=FOREGROUND_APP_ADJ;
            }
          }
          int clientAdj=computeOomAdjLocked(client,myHiddenAdj,TOP_APP);
          if (adj > clientAdj) {
            adj=clientAdj > FOREGROUND_APP_ADJ ? clientAdj : FOREGROUND_APP_ADJ;
            app.adjType="provider";
            app.adjSource=client;
            app.adjTarget=cpr.info.name;
          }
        }
      }
      if (cpr.externals != 0) {
        if (adj > FOREGROUND_APP_ADJ) {
          adj=FOREGROUND_APP_ADJ;
          app.adjType="provider";
          app.adjTarget=cpr.info.name;
        }
      }
    }
  }
  app.curRawAdj=adj;
  if (adj > app.maxAdj) {
    adj=app.maxAdj;
  }
  app.curAdj=adj;
  app.curSchedGroup=adj > VISIBLE_APP_ADJ ? Process.THREAD_GROUP_BG_NONINTERACTIVE : Process.THREAD_GROUP_DEFAULT;
  return adj;
}
