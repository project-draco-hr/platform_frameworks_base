{
  int i;
  int N;
  if (uid < 0) {
    try {
      uid=AppGlobals.getPackageManager().getPackageUid(name,userId);
    }
 catch (    RemoteException e) {
    }
  }
  if (doit) {
    Slog.i(TAG,"Force stopping package " + name + " uid="+ uid);
    Iterator<SparseArray<Long>> badApps=mProcessCrashTimes.getMap().values().iterator();
    while (badApps.hasNext()) {
      SparseArray<Long> ba=badApps.next();
      if (ba.get(uid) != null) {
        badApps.remove();
      }
    }
  }
  boolean didSomething=killPackageProcessesLocked(name,uid,-100,callerWillRestart,false,doit,evenPersistent,"force stop");
  TaskRecord lastTask=null;
  for (i=0; i < mMainStack.mHistory.size(); i++) {
    ActivityRecord r=(ActivityRecord)mMainStack.mHistory.get(i);
    final boolean samePackage=r.packageName.equals(name);
    if ((samePackage || r.task == lastTask) && (r.app == null || evenPersistent || !r.app.persistent)) {
      if (!doit) {
        if (r.finishing) {
          continue;
        }
        return true;
      }
      didSomething=true;
      Slog.i(TAG,"  Force finishing activity " + r);
      if (samePackage) {
        if (r.app != null) {
          r.app.removed=true;
        }
        r.app=null;
      }
      lastTask=r.task;
      if (r.stack.finishActivityLocked(r,i,Activity.RESULT_CANCELED,null,"force-stop",true)) {
        i--;
      }
    }
  }
  ArrayList<ServiceRecord> services=new ArrayList<ServiceRecord>();
  for (  ServiceRecord service : mServiceMap.getAllServices(userId)) {
    if (service.packageName.equals(name) && (service.app == null || evenPersistent || !service.app.persistent)) {
      if (!doit) {
        return true;
      }
      didSomething=true;
      Slog.i(TAG,"  Force stopping service " + service);
      if (service.app != null) {
        service.app.removed=true;
      }
      service.app=null;
      service.isolatedProc=null;
      services.add(service);
    }
  }
  N=services.size();
  for (i=0; i < N; i++) {
    bringDownServiceLocked(services.get(i),true);
  }
  ArrayList<ContentProviderRecord> providers=new ArrayList<ContentProviderRecord>();
  for (  ContentProviderRecord provider : mProviderMap.getProvidersByClass(-1).values()) {
    if (provider.info.packageName.equals(name) && (provider.proc == null || evenPersistent || !provider.proc.persistent)) {
      if (!doit) {
        return true;
      }
      didSomething=true;
      providers.add(provider);
    }
  }
  N=providers.size();
  for (i=0; i < N; i++) {
    removeDyingProviderLocked(null,providers.get(i));
  }
  if (doit) {
    if (purgeCache) {
      AttributeCache ac=AttributeCache.instance();
      if (ac != null) {
        ac.removePackage(name);
      }
    }
    if (mBooted) {
      mMainStack.resumeTopActivityLocked(null);
      mMainStack.scheduleIdleLocked();
    }
  }
  return didSomething;
}
