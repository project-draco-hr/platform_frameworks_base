{
  int i;
  int N;
  if (uid < 0 && name != null) {
    try {
      uid=AppGlobals.getPackageManager().getPackageUid(name,userId);
    }
 catch (    RemoteException e) {
    }
  }
  if (doit) {
    if (name != null) {
      Slog.i(TAG,"Force stopping package " + name + " uid="+ uid);
    }
 else {
      Slog.i(TAG,"Force stopping user " + userId);
    }
    Iterator<SparseArray<Long>> badApps=mProcessCrashTimes.getMap().values().iterator();
    while (badApps.hasNext()) {
      SparseArray<Long> ba=badApps.next();
      for (i=ba.size() - 1; i >= 0; i--) {
        boolean remove=false;
        final int entUid=ba.keyAt(i);
        if (name != null) {
          if (entUid == uid) {
            remove=true;
          }
        }
 else         if (UserHandle.getUserId(entUid) == userId) {
          remove=true;
        }
        if (remove) {
          ba.removeAt(i);
        }
      }
      if (ba.size() == 0) {
        badApps.remove();
      }
    }
  }
  boolean didSomething=killPackageProcessesLocked(name,uid,name == null ? userId : -1,-100,callerWillRestart,false,doit,evenPersistent,name == null ? ("force stop user " + userId) : ("force stop " + name));
  TaskRecord lastTask=null;
  for (i=0; i < mMainStack.mHistory.size(); i++) {
    ActivityRecord r=(ActivityRecord)mMainStack.mHistory.get(i);
    final boolean samePackage=r.packageName.equals(name) || (name == null && r.userId == userId);
    if (r.userId == userId && (samePackage || r.task == lastTask) && (r.app == null || evenPersistent || !r.app.persistent)) {
      if (!doit) {
        if (r.finishing) {
          continue;
        }
        return true;
      }
      didSomething=true;
      Slog.i(TAG,"  Force finishing activity " + r);
      if (samePackage) {
        if (r.app != null) {
          r.app.removed=true;
        }
        r.app=null;
      }
      lastTask=r.task;
      if (r.stack.finishActivityLocked(r,i,Activity.RESULT_CANCELED,null,"force-stop",true)) {
        i--;
      }
    }
  }
  if (mServices.forceStopLocked(name,userId,evenPersistent,doit)) {
    if (!doit) {
      return true;
    }
    didSomething=true;
  }
  if (name == null) {
    mStickyBroadcasts.remove(userId);
  }
  ArrayList<ContentProviderRecord> providers=new ArrayList<ContentProviderRecord>();
  for (  ContentProviderRecord provider : mProviderMap.getProvidersByClass(userId).values()) {
    if ((name == null || provider.info.packageName.equals(name)) && (provider.proc == null || evenPersistent || !provider.proc.persistent)) {
      if (!doit) {
        return true;
      }
      didSomething=true;
      providers.add(provider);
    }
  }
  N=providers.size();
  for (i=0; i < N; i++) {
    removeDyingProviderLocked(null,providers.get(i),true);
  }
  if (doit) {
    if (purgeCache && name != null) {
      AttributeCache ac=AttributeCache.instance();
      if (ac != null) {
        ac.removePackage(name);
      }
    }
    if (mBooted) {
      mMainStack.resumeTopActivityLocked(null);
      mMainStack.scheduleIdleLocked();
    }
  }
  return didSomething;
}
