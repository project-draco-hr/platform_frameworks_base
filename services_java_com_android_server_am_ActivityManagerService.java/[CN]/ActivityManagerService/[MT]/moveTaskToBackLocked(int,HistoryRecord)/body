{
  Slog.i(TAG,"moveTaskToBack: " + task);
  if (mController != null) {
    HistoryRecord next=topRunningActivityLocked(null,task);
    if (next == null) {
      next=topRunningActivityLocked(null,0);
    }
    if (next != null) {
      boolean moveOK=true;
      try {
        moveOK=mController.activityResuming(next.packageName);
      }
 catch (      RemoteException e) {
        mController=null;
      }
      if (!moveOK) {
        return false;
      }
    }
  }
  ArrayList moved=new ArrayList();
  if (DEBUG_TRANSITION)   Slog.v(TAG,"Prepare to back transition: task=" + task);
  final int N=mHistory.size();
  int bottom=0;
  int pos=0;
  while (pos < N) {
    HistoryRecord r=(HistoryRecord)mHistory.get(pos);
    if (localLOGV)     Slog.v(TAG,"At " + pos + " ckp "+ r.task+ ": "+ r);
    if (r.task.taskId == task) {
      if (localLOGV)       Slog.v(TAG,"Removing and adding at " + (N - 1));
      mHistory.remove(pos);
      mHistory.add(bottom,r);
      moved.add(r);
      bottom++;
    }
    pos++;
  }
  if (reason != null && (reason.intent.getFlags() & Intent.FLAG_ACTIVITY_NO_ANIMATION) != 0) {
    mWindowManager.prepareAppTransition(WindowManagerPolicy.TRANSIT_NONE);
    HistoryRecord r=topRunningActivityLocked(null);
    if (r != null) {
      mNoAnimActivities.add(r);
    }
  }
 else {
    mWindowManager.prepareAppTransition(WindowManagerPolicy.TRANSIT_TASK_TO_BACK);
  }
  mWindowManager.moveAppTokensToBottom(moved);
  if (VALIDATE_TOKENS) {
    mWindowManager.validateAppTokens(mHistory);
  }
  finishTaskMoveLocked(task);
  return true;
}
