{
  final boolean hasActivity=app.activities.size() > 0;
  if (!activityChange && hasActivity) {
    return;
  }
  mLruSeq++;
  final long now=SystemClock.uptimeMillis();
  app.lastActivityTime=now;
  int lrui=mLruProcesses.lastIndexOf(app);
  if (lrui >= 0) {
    if (lrui < mLruProcessActivityStart) {
      mLruProcessActivityStart--;
    }
    mLruProcesses.remove(lrui);
  }
  int nextIndex;
  if (!hasActivity) {
    mLruProcesses.add(mLruProcessActivityStart,app);
    nextIndex=mLruProcessActivityStart - 1;
    mLruProcessActivityStart++;
  }
 else {
    mLruProcesses.add(app);
    nextIndex=mLruProcessActivityStart;
  }
  for (int j=app.connections.size() - 1; j >= 0; j--) {
    ConnectionRecord cr=app.connections.valueAt(j);
    if (cr.binding != null && !cr.serviceDead && cr.binding.service != null && cr.binding.service.app != null && cr.binding.service.app.lruSeq != mLruSeq) {
      nextIndex=updateLruProcessInternalLocked(cr.binding.service.app,now,nextIndex,"service connection",cr,app);
    }
  }
  for (int j=app.conProviders.size() - 1; j >= 0; j--) {
    ContentProviderRecord cpr=app.conProviders.get(j).provider;
    if (cpr.proc != null && cpr.proc.lruSeq != mLruSeq) {
      nextIndex=updateLruProcessInternalLocked(cpr.proc,now,nextIndex,"provider reference",cpr,app);
    }
  }
  if (oomAdj) {
    updateOomAdjLocked();
  }
}
