{
  boolean dumpAll=false;
  boolean oomOnly=false;
  int opti=0;
  while (opti < args.length) {
    String opt=args[opti];
    if (opt == null || opt.length() <= 0 || opt.charAt(0) != '-') {
      break;
    }
    opti++;
    if ("-a".equals(opt)) {
      dumpAll=true;
    }
 else     if ("--oom".equals(opt)) {
      oomOnly=true;
    }
 else     if ("-h".equals(opt)) {
      pw.println("meminfo dump options: [-a] [--oom] [process]");
      pw.println("  -a: include all available information for each process.");
      pw.println("  --oom: only show processes organized by oom adj.");
      pw.println("If [process] is specified it can be the name or ");
      pw.println("pid of a specific process to dump.");
      return;
    }
 else {
      pw.println("Unknown argument: " + opt + "; use -h for help");
    }
  }
  ArrayList<ProcessRecord> procs=collectProcesses(pw,opti,args);
  if (procs == null) {
    return;
  }
  final boolean isCheckinRequest=scanArgs(args,"--checkin");
  long uptime=SystemClock.uptimeMillis();
  long realtime=SystemClock.elapsedRealtime();
  if (procs.size() == 1 || isCheckinRequest) {
    dumpAll=true;
  }
  if (isCheckinRequest) {
    pw.println(uptime + "," + realtime);
    pw.flush();
  }
 else {
    pw.println("Applications Memory Usage (kB):");
    pw.println("Uptime: " + uptime + " Realtime: "+ realtime);
  }
  String[] innerArgs=new String[args.length - opti];
  System.arraycopy(args,opti,innerArgs,0,args.length - opti);
  ArrayList<MemItem> procMems=new ArrayList<MemItem>();
  long nativePss=0, dalvikPss=0, otherPss=0;
  long[] miscPss=new long[Debug.MemoryInfo.NUM_OTHER_STATS];
  long oomPss[]=new long[DUMP_MEM_OOM_LABEL.length];
  ArrayList<MemItem>[] oomProcs=(ArrayList<MemItem>[])new ArrayList[DUMP_MEM_OOM_LABEL.length];
  long totalPss=0;
  for (int i=procs.size() - 1; i >= 0; i--) {
    ProcessRecord r=procs.get(i);
    if (r.thread != null) {
      if (!isCheckinRequest && dumpAll) {
        pw.println("\n** MEMINFO in pid " + r.pid + " ["+ r.processName+ "] **");
        pw.flush();
      }
      Debug.MemoryInfo mi=null;
      if (dumpAll) {
        try {
          mi=r.thread.dumpMemInfo(fd,isCheckinRequest,dumpAll,innerArgs);
        }
 catch (        RemoteException e) {
          if (!isCheckinRequest) {
            pw.println("Got RemoteException!");
            pw.flush();
          }
        }
      }
 else {
        mi=new Debug.MemoryInfo();
        Debug.getMemoryInfo(r.pid,mi);
      }
      if (!isCheckinRequest && mi != null) {
        long myTotalPss=mi.getTotalPss();
        totalPss+=myTotalPss;
        MemItem pssItem=new MemItem(r.processName + " (pid " + r.pid+ ")",r.processName,myTotalPss,0);
        procMems.add(pssItem);
        nativePss+=mi.nativePss;
        dalvikPss+=mi.dalvikPss;
        otherPss+=mi.otherPss;
        for (int j=0; j < Debug.MemoryInfo.NUM_OTHER_STATS; j++) {
          long mem=mi.getOtherPss(j);
          miscPss[j]+=mem;
          otherPss-=mem;
        }
        for (int oomIndex=0; oomIndex < oomPss.length; oomIndex++) {
          if (r.setAdj <= DUMP_MEM_OOM_ADJ[oomIndex] || oomIndex == (oomPss.length - 1)) {
            oomPss[oomIndex]+=myTotalPss;
            if (oomProcs[oomIndex] == null) {
              oomProcs[oomIndex]=new ArrayList<MemItem>();
            }
            oomProcs[oomIndex].add(pssItem);
            break;
          }
        }
      }
    }
  }
  if (!isCheckinRequest && procs.size() > 1) {
    ArrayList<MemItem> catMems=new ArrayList<MemItem>();
    catMems.add(new MemItem("Native","Native",nativePss,-1));
    catMems.add(new MemItem("Dalvik","Dalvik",dalvikPss,-2));
    catMems.add(new MemItem("Unknown","Unknown",otherPss,-3));
    for (int j=0; j < Debug.MemoryInfo.NUM_OTHER_STATS; j++) {
      String label=Debug.MemoryInfo.getOtherLabel(j);
      catMems.add(new MemItem(label,label,miscPss[j],j));
    }
    ArrayList<MemItem> oomMems=new ArrayList<MemItem>();
    for (int j=0; j < oomPss.length; j++) {
      if (oomPss[j] != 0) {
        String label=DUMP_MEM_OOM_LABEL[j];
        MemItem item=new MemItem(label,label,oomPss[j],DUMP_MEM_OOM_ADJ[j]);
        item.subitems=oomProcs[j];
        oomMems.add(item);
      }
    }
    if (outTag != null || outStack != null) {
      if (outTag != null) {
        appendMemBucket(outTag,totalPss,"total",false);
      }
      if (outStack != null) {
        appendMemBucket(outStack,totalPss,"total",true);
      }
      boolean firstLine=true;
      for (int i=0; i < oomMems.size(); i++) {
        MemItem miCat=oomMems.get(i);
        if (miCat.subitems == null || miCat.subitems.size() < 1) {
          continue;
        }
        if (miCat.id < ProcessList.SERVICE_ADJ || miCat.id == ProcessList.HOME_APP_ADJ || miCat.id == ProcessList.PREVIOUS_APP_ADJ) {
          if (outTag != null && miCat.id <= ProcessList.FOREGROUND_APP_ADJ) {
            outTag.append(" / ");
          }
          if (outStack != null) {
            if (miCat.id >= ProcessList.FOREGROUND_APP_ADJ) {
              if (firstLine) {
                outStack.append(":");
                firstLine=false;
              }
              outStack.append("\n\t at ");
            }
 else {
              outStack.append("$");
            }
          }
          for (int j=0; j < miCat.subitems.size(); j++) {
            MemItem mi=miCat.subitems.get(j);
            if (j > 0) {
              if (outTag != null) {
                outTag.append(" ");
              }
              if (outStack != null) {
                outStack.append("$");
              }
            }
            if (outTag != null && miCat.id <= ProcessList.FOREGROUND_APP_ADJ) {
              appendMemBucket(outTag,mi.pss,mi.shortLabel,false);
            }
            if (outStack != null) {
              appendMemBucket(outStack,mi.pss,mi.shortLabel,true);
            }
          }
          if (outStack != null && miCat.id >= ProcessList.FOREGROUND_APP_ADJ) {
            outStack.append("(");
            for (int k=0; k < DUMP_MEM_OOM_ADJ.length; k++) {
              if (DUMP_MEM_OOM_ADJ[k] == miCat.id) {
                outStack.append(DUMP_MEM_OOM_LABEL[k]);
                outStack.append(":");
                outStack.append(DUMP_MEM_OOM_ADJ[k]);
              }
            }
            outStack.append(")");
          }
        }
      }
    }
    if (!brief && !oomOnly) {
      pw.println();
      pw.println("Total PSS by process:");
      dumpMemItems(pw,"  ",procMems,true);
      pw.println();
    }
    pw.println("Total PSS by OOM adjustment:");
    dumpMemItems(pw,"  ",oomMems,false);
    if (!oomOnly) {
      PrintWriter out=categoryPw != null ? categoryPw : pw;
      out.println();
      out.println("Total PSS by category:");
      dumpMemItems(out,"  ",catMems,true);
    }
    pw.println();
    pw.print("Total PSS: ");
    pw.print(totalPss);
    pw.println(" kB");
    final int[] SINGLE_LONG_FORMAT=new int[]{Process.PROC_SPACE_TERM | Process.PROC_OUT_LONG};
    long[] longOut=new long[1];
    Process.readProcFile("/sys/kernel/mm/ksm/pages_shared",SINGLE_LONG_FORMAT,null,longOut,null);
    long shared=longOut[0] * ProcessList.PAGE_SIZE / 1024;
    longOut[0]=0;
    Process.readProcFile("/sys/kernel/mm/ksm/pages_sharing",SINGLE_LONG_FORMAT,null,longOut,null);
    long sharing=longOut[0] * ProcessList.PAGE_SIZE / 1024;
    longOut[0]=0;
    Process.readProcFile("/sys/kernel/mm/ksm/pages_unshared",SINGLE_LONG_FORMAT,null,longOut,null);
    long unshared=longOut[0] * ProcessList.PAGE_SIZE / 1024;
    longOut[0]=0;
    Process.readProcFile("/sys/kernel/mm/ksm/pages_volatile",SINGLE_LONG_FORMAT,null,longOut,null);
    long voltile=longOut[0] * ProcessList.PAGE_SIZE / 1024;
    pw.print("      KSM: ");
    pw.print(sharing);
    pw.print(" kB saved from shared ");
    pw.print(shared);
    pw.println(" kB");
    pw.print("           ");
    pw.print(unshared);
    pw.print(" kB unshared; ");
    pw.print(voltile);
    pw.println(" kB volatile");
  }
}
