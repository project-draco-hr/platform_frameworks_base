{
  long ident=Binder.clearCallingIdentity();
  try {
    Intent intent;
    if (oldUserId >= 0) {
      intent=new Intent(Intent.ACTION_USER_BACKGROUND);
      intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY | Intent.FLAG_RECEIVER_FOREGROUND);
      intent.putExtra(Intent.EXTRA_USER_HANDLE,oldUserId);
      broadcastIntentLocked(null,null,intent,null,null,0,null,null,null,false,false,MY_PID,Process.SYSTEM_UID,oldUserId);
    }
    if (newUserId >= 0) {
      intent=new Intent(Intent.ACTION_USER_FOREGROUND);
      intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY | Intent.FLAG_RECEIVER_FOREGROUND);
      intent.putExtra(Intent.EXTRA_USER_HANDLE,newUserId);
      broadcastIntentLocked(null,null,intent,null,null,0,null,null,null,false,false,MY_PID,Process.SYSTEM_UID,newUserId);
      intent=new Intent(Intent.ACTION_USER_SWITCHED);
      intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY | Intent.FLAG_RECEIVER_FOREGROUND);
      intent.putExtra(Intent.EXTRA_USER_HANDLE,newUserId);
      broadcastIntentLocked(null,null,intent,null,null,0,null,null,android.Manifest.permission.MANAGE_USERS,false,false,MY_PID,Process.SYSTEM_UID,UserHandle.USER_ALL);
      intent=new Intent(Intent.ACTION_USER_STARTING);
      intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
      intent.putExtra(Intent.EXTRA_USER_HANDLE,newUserId);
      broadcastIntentLocked(null,null,intent,null,new IIntentReceiver.Stub(){
        @Override public void performReceive(        Intent intent,        int resultCode,        String data,        Bundle extras,        boolean ordered,        boolean sticky,        int sendingUser) throws RemoteException {
        }
      }
,0,null,null,android.Manifest.permission.INTERACT_ACROSS_USERS,false,false,MY_PID,Process.SYSTEM_UID,UserHandle.USER_ALL);
    }
  }
  finally {
    Binder.restoreCallingIdentity(ident);
  }
}
