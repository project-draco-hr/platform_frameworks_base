{
  List<ProviderInfo> providers=null;
  try {
    providers=AppGlobals.getPackageManager().queryContentProviders(app.processName,app.uid,STOCK_PM_FLAGS | PackageManager.GET_URI_PERMISSION_PATTERNS);
  }
 catch (  RemoteException ex) {
  }
  if (DEBUG_MU)   Slog.v(TAG_MU,"generateApplicationProvidersLocked, app.info.uid = " + app.uid);
  int userId=app.userId;
  if (providers != null) {
    int N=providers.size();
    for (int i=0; i < N; i++) {
      ProviderInfo cpi=(ProviderInfo)providers.get(i);
      boolean singleton=isSingleton(cpi.processName,cpi.applicationInfo,cpi.name,cpi.flags);
      if (singleton && UserId.getUserId(app.uid) != 0) {
        providers.remove(i);
        N--;
        continue;
      }
      ComponentName comp=new ComponentName(cpi.packageName,cpi.name);
      ContentProviderRecord cpr=mProviderMap.getProviderByClass(comp,userId);
      if (cpr == null) {
        cpr=new ContentProviderRecord(this,cpi,app.info,comp,singleton);
        mProviderMap.putProviderByClass(comp,cpr);
      }
      if (DEBUG_MU)       Slog.v(TAG_MU,"generateApplicationProvidersLocked, cpi.uid = " + cpr.uid);
      app.pubProviders.put(cpi.name,cpr);
      app.addPackage(cpi.applicationInfo.packageName);
      ensurePackageDexOpt(cpi.applicationInfo.packageName);
    }
  }
  return providers;
}
