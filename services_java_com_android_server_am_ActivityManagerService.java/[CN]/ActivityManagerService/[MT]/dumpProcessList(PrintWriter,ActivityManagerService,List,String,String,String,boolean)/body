{
  int numPers=0;
  for (int i=list.size() - 1; i >= 0; i--) {
    ProcessRecord r=(ProcessRecord)list.get(i);
    if (false) {
      pw.println(prefix + (r.persistent ? persistentLabel : normalLabel) + " #"+ i+ ":");
      r.dump(pw,prefix + "  ");
    }
 else     if (inclOomAdj) {
      String oomAdj;
      if (r.setAdj >= EMPTY_APP_ADJ) {
        oomAdj=buildOomTag("empty",null,r.setAdj,EMPTY_APP_ADJ);
      }
 else       if (r.setAdj >= HIDDEN_APP_MIN_ADJ) {
        oomAdj=buildOomTag("bak","  ",r.setAdj,HIDDEN_APP_MIN_ADJ);
      }
 else       if (r.setAdj >= HOME_APP_ADJ) {
        oomAdj=buildOomTag("home ",null,r.setAdj,HOME_APP_ADJ);
      }
 else       if (r.setAdj >= SECONDARY_SERVER_ADJ) {
        oomAdj=buildOomTag("svc","  ",r.setAdj,SECONDARY_SERVER_ADJ);
      }
 else       if (r.setAdj >= BACKUP_APP_ADJ) {
        oomAdj=buildOomTag("bckup",null,r.setAdj,BACKUP_APP_ADJ);
      }
 else       if (r.setAdj >= VISIBLE_APP_ADJ) {
        oomAdj=buildOomTag("vis  ",null,r.setAdj,VISIBLE_APP_ADJ);
      }
 else       if (r.setAdj >= FOREGROUND_APP_ADJ) {
        oomAdj=buildOomTag("fore ",null,r.setAdj,FOREGROUND_APP_ADJ);
      }
 else       if (r.setAdj >= CORE_SERVER_ADJ) {
        oomAdj=buildOomTag("core ",null,r.setAdj,CORE_SERVER_ADJ);
      }
 else       if (r.setAdj >= SYSTEM_ADJ) {
        oomAdj=buildOomTag("sys  ",null,r.setAdj,SYSTEM_ADJ);
      }
 else {
        oomAdj=Integer.toString(r.setAdj);
      }
      String schedGroup;
switch (r.setSchedGroup) {
case Process.THREAD_GROUP_BG_NONINTERACTIVE:
        schedGroup="B";
      break;
case Process.THREAD_GROUP_DEFAULT:
    schedGroup="F";
  break;
default :
schedGroup=Integer.toString(r.setSchedGroup);
break;
}
pw.println(String.format("%s%s #%2d: adj=%s/%s %s (%s)",prefix,(r.persistent ? persistentLabel : normalLabel),i,oomAdj,schedGroup,r.toShortString(),r.adjType));
if (r.adjSource != null || r.adjTarget != null) {
pw.println(prefix + "          " + r.adjTarget+ "<="+ r.adjSource);
}
}
 else {
pw.println(String.format("%s%s #%2d: %s",prefix,(r.persistent ? persistentLabel : normalLabel),i,r.toString()));
}
if (r.persistent) {
numPers++;
}
}
return numPers;
}
