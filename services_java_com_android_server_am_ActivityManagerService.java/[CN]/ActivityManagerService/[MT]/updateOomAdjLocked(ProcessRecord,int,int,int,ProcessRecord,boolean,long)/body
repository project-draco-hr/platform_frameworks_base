{
  app.cachedAdj=cachedAdj;
  app.clientCachedAdj=clientCachedAdj;
  app.emptyAdj=emptyAdj;
  if (app.thread == null) {
    return false;
  }
  final boolean wasKeeping=app.keeping;
  boolean success=true;
  computeOomAdjLocked(app,cachedAdj,clientCachedAdj,emptyAdj,TOP_APP,false,doingAll);
  if (app.curRawAdj != app.setRawAdj) {
    if (wasKeeping && !app.keeping) {
      BatteryStatsImpl stats=mBatteryStatsService.getActiveStatistics();
synchronized (stats) {
        app.lastWakeTime=stats.getProcessWakeTime(app.info.uid,app.pid,SystemClock.elapsedRealtime());
      }
      app.lastCpuTime=app.curCpuTime;
    }
    app.setRawAdj=app.curRawAdj;
  }
  if (!mSleeping) {
    if (app == TOP_APP && now > (app.lastPssTime + PSS_TOP_INTERVAL)) {
      requestPssLocked(app,now,true);
    }
 else     if (app.curAdj <= ProcessList.PERCEPTIBLE_APP_ADJ && now > (app.lastPssTime + PSS_TOP_INTERVAL)) {
      requestPssLocked(app,now,true);
    }
  }
  if (app.curAdj != app.setAdj) {
    if (Process.setOomAdj(app.pid,app.curAdj)) {
      if (DEBUG_SWITCH || DEBUG_OOM_ADJ)       Slog.v(TAG,"Set " + app.pid + " "+ app.processName+ " adj "+ app.curAdj+ ": "+ app.adjType);
      if (app.setAdj == ProcessList.SERVICE_ADJ && app.curAdj == ProcessList.SERVICE_B_ADJ) {
        requestPssLocked(app,now,false);
      }
 else       if (now > (app.lastPssTime + PSS_MAX_INTERVAL)) {
        requestPssLocked(app,now,true);
      }
      app.setAdj=app.curAdj;
      app.setAdjChanged=true;
      if (!doingAll) {
        app.setProcessTrackerState(TOP_APP,mProcessTracker.getMemFactorLocked(),now,mProcessList);
      }
    }
 else {
      success=false;
      Slog.w(TAG,"Failed setting oom adj of " + app + " to "+ app.curAdj);
    }
  }
  if (app.setSchedGroup != app.curSchedGroup) {
    app.setSchedGroup=app.curSchedGroup;
    if (DEBUG_SWITCH || DEBUG_OOM_ADJ)     Slog.v(TAG,"Setting process group of " + app.processName + " to "+ app.curSchedGroup);
    if (app.waitingToKill != null && app.setSchedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE) {
      Slog.i(TAG,"Killing " + app.toShortString() + ": "+ app.waitingToKill);
      EventLog.writeEvent(EventLogTags.AM_KILL,app.userId,app.pid,app.processName,app.setAdj,app.waitingToKill);
      app.killedBackground=true;
      Process.killProcessQuiet(app.pid);
      success=false;
    }
 else {
      if (true) {
        long oldId=Binder.clearCallingIdentity();
        try {
          Process.setProcessGroup(app.pid,app.curSchedGroup);
        }
 catch (        Exception e) {
          Slog.w(TAG,"Failed setting process group of " + app.pid + " to "+ app.curSchedGroup);
          e.printStackTrace();
        }
 finally {
          Binder.restoreCallingIdentity(oldId);
        }
      }
 else {
        if (app.thread != null) {
          try {
            app.thread.setSchedulingGroup(app.curSchedGroup);
          }
 catch (          RemoteException e) {
          }
        }
      }
    }
  }
  return success;
}
