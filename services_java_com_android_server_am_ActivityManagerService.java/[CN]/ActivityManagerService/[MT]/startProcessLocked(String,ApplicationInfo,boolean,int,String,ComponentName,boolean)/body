{
  ProcessRecord app=getProcessRecordLocked(processName,info.uid);
  if (DEBUG_PROCESSES)   Log.v(TAG,"startProcess: name=" + processName + " app="+ app+ " knownToBeDead="+ knownToBeDead+ " thread="+ (app != null ? app.thread : null)+ " pid="+ (app != null ? app.pid : -1));
  if (app != null && app.pid > 0) {
    if (!knownToBeDead || app.thread == null) {
      return app;
    }
 else {
      handleAppDiedLocked(app,true);
    }
  }
  String hostingNameStr=hostingName != null ? hostingName.flattenToShortString() : null;
  if ((intentFlags & Intent.FLAG_FROM_BACKGROUND) != 0) {
    if (mBadProcesses.get(info.processName,info.uid) != null) {
      return null;
    }
  }
 else {
    mProcessCrashTimes.remove(info.processName,info.uid);
    if (mBadProcesses.get(info.processName,info.uid) != null) {
      EventLog.writeEvent(LOG_AM_PROCESS_GOOD,info.uid,info.processName);
      mBadProcesses.remove(info.processName,info.uid);
      if (app != null) {
        app.bad=false;
      }
    }
  }
  if (app == null) {
    app=newProcessRecordLocked(null,info,processName);
    mProcessNames.put(processName,info.uid,app);
  }
 else {
    app.addPackage(info.packageName);
  }
  if (!mSystemReady && !isAllowedWhileBooting(info) && !allowWhileBooting) {
    if (!mProcessesOnHold.contains(app)) {
      mProcessesOnHold.add(app);
    }
    return app;
  }
  startProcessLocked(app,hostingType,hostingNameStr);
  return (app.pid != 0) ? app : null;
}
