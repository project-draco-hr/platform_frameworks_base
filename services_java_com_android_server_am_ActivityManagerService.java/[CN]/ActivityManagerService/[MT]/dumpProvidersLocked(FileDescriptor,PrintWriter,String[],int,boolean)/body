{
  boolean needSep=false;
  if (dumpAll) {
    if (mProvidersByClass.size() > 0) {
      if (needSep)       pw.println(" ");
      pw.println("  Published content providers (by class):");
      Iterator it=mProvidersByClass.entrySet().iterator();
      while (it.hasNext()) {
        Map.Entry e=(Map.Entry)it.next();
        ContentProviderRecord r=(ContentProviderRecord)e.getValue();
        pw.print("  * ");
        pw.println(r);
        r.dump(pw,"    ");
      }
      needSep=true;
    }
    if (mProvidersByName.size() > 0) {
      pw.println(" ");
      pw.println("  Authority to provider mappings:");
      Iterator it=mProvidersByName.entrySet().iterator();
      while (it.hasNext()) {
        Map.Entry e=(Map.Entry)it.next();
        ContentProviderRecord r=(ContentProviderRecord)e.getValue();
        pw.print("  ");
        pw.print(e.getKey());
        pw.print(": ");
        pw.println(r);
      }
      needSep=true;
    }
  }
  if (mLaunchingProviders.size() > 0) {
    if (needSep)     pw.println(" ");
    pw.println("  Launching content providers:");
    for (int i=mLaunchingProviders.size() - 1; i >= 0; i--) {
      pw.print("  Launching #");
      pw.print(i);
      pw.print(": ");
      pw.println(mLaunchingProviders.get(i));
    }
    needSep=true;
  }
  if (mGrantedUriPermissions.size() > 0) {
    pw.println();
    pw.println("Granted Uri Permissions:");
    for (int i=0; i < mGrantedUriPermissions.size(); i++) {
      int uid=mGrantedUriPermissions.keyAt(i);
      HashMap<Uri,UriPermission> perms=mGrantedUriPermissions.valueAt(i);
      pw.print("  * UID ");
      pw.print(uid);
      pw.println(" holds:");
      for (      UriPermission perm : perms.values()) {
        pw.print("    ");
        pw.println(perm);
        perm.dump(pw,"      ");
      }
    }
    needSep=true;
  }
  return needSep;
}
