{
  final int callingPid=(r != null) ? r.pid : Binder.getCallingPid();
  final int callingUid=(r != null) ? r.uid : Binder.getCallingUid();
  if (checkComponentPermission(cpi.readPermission,callingPid,callingUid,cpi.applicationInfo.uid,cpi.exported) == PackageManager.PERMISSION_GRANTED) {
    return null;
  }
  if (checkComponentPermission(cpi.writePermission,callingPid,callingUid,cpi.applicationInfo.uid,cpi.exported) == PackageManager.PERMISSION_GRANTED) {
    return null;
  }
  PathPermission[] pps=cpi.pathPermissions;
  if (pps != null) {
    int i=pps.length;
    while (i > 0) {
      i--;
      PathPermission pp=pps[i];
      if (checkComponentPermission(pp.getReadPermission(),callingPid,callingUid,cpi.applicationInfo.uid,cpi.exported) == PackageManager.PERMISSION_GRANTED) {
        return null;
      }
      if (checkComponentPermission(pp.getWritePermission(),callingPid,callingUid,cpi.applicationInfo.uid,cpi.exported) == PackageManager.PERMISSION_GRANTED) {
        return null;
      }
    }
  }
  HashMap<Uri,UriPermission> perms=mGrantedUriPermissions.get(callingUid);
  if (perms != null) {
    for (    Map.Entry<Uri,UriPermission> uri : perms.entrySet()) {
      if (uri.getKey().getAuthority().equals(cpi.authority)) {
        return null;
      }
    }
  }
  String msg;
  if (!cpi.exported) {
    msg="Permission Denial: opening provider " + cpi.name + " from "+ (r != null ? r : "(null)")+ " (pid="+ callingPid+ ", uid="+ callingUid+ ") that is not exported from uid "+ cpi.applicationInfo.uid;
  }
 else {
    msg="Permission Denial: opening provider " + cpi.name + " from "+ (r != null ? r : "(null)")+ " (pid="+ callingPid+ ", uid="+ callingUid+ ") requires "+ cpi.readPermission+ " or "+ cpi.writePermission;
  }
  Slog.w(TAG,msg);
  return msg;
}
