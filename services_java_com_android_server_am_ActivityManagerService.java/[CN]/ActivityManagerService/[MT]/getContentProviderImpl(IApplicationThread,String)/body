{
  ContentProviderRecord cpr;
  ProviderInfo cpi=null;
synchronized (this) {
    ProcessRecord r=null;
    if (caller != null) {
      r=getRecordForAppLocked(caller);
      if (r == null) {
        throw new SecurityException("Unable to find app for caller " + caller + " (pid="+ Binder.getCallingPid()+ ") when getting content provider "+ name);
      }
    }
    cpr=mProvidersByName.get(name);
    boolean providerRunning=cpr != null;
    if (providerRunning) {
      cpi=cpr.info;
      String msg;
      if ((msg=checkContentProviderPermissionLocked(cpi,r)) != null) {
        throw new SecurityException(msg);
      }
      if (r != null && cpr.canRunHere(r)) {
        if (cpr.provider != null) {
          cpr=new ContentProviderRecord(cpr);
        }
        return cpr;
      }
      final long origId=Binder.clearCallingIdentity();
      final boolean countChanged=incProviderCount(r,cpr);
      if (countChanged) {
        if (cpr.app != null && r.setAdj <= ProcessList.PERCEPTIBLE_APP_ADJ) {
          updateLruProcessLocked(cpr.app,false,true);
        }
      }
      if (cpr.app != null) {
        if (false) {
          if (cpr.name.flattenToShortString().equals("com.android.providers.calendar/.CalendarProvider2")) {
            Slog.v(TAG,"****************** KILLING " + cpr.name.flattenToShortString());
            Process.killProcess(cpr.app.pid);
          }
        }
        boolean success=updateOomAdjLocked(cpr.app);
        if (DEBUG_PROVIDER)         Slog.i(TAG,"Adjust success: " + success);
        if (!success) {
          Slog.i(TAG,"Existing provider " + cpr.name.flattenToShortString() + " is crashing; detaching "+ r);
          boolean lastRef=decProviderCount(r,cpr);
          appDiedLocked(cpr.app,cpr.app.pid,cpr.app.thread);
          if (!lastRef) {
            return null;
          }
          providerRunning=false;
        }
      }
      Binder.restoreCallingIdentity(origId);
    }
    if (!providerRunning) {
      try {
        cpi=AppGlobals.getPackageManager().resolveContentProvider(name,STOCK_PM_FLAGS | PackageManager.GET_URI_PERMISSION_PATTERNS);
      }
 catch (      RemoteException ex) {
      }
      if (cpi == null) {
        return null;
      }
      String msg;
      if ((msg=checkContentProviderPermissionLocked(cpi,r)) != null) {
        throw new SecurityException(msg);
      }
      if (!mProcessesReady && !mDidUpdate && !mWaitingUpdate&& !cpi.processName.equals("system")) {
        throw new IllegalArgumentException("Attempt to launch content provider before system ready");
      }
      ComponentName comp=new ComponentName(cpi.packageName,cpi.name);
      cpr=mProvidersByClass.get(comp);
      final boolean firstClass=cpr == null;
      if (firstClass) {
        try {
          ApplicationInfo ai=AppGlobals.getPackageManager().getApplicationInfo(cpi.applicationInfo.packageName,STOCK_PM_FLAGS);
          if (ai == null) {
            Slog.w(TAG,"No package info for content provider " + cpi.name);
            return null;
          }
          cpr=new ContentProviderRecord(cpi,ai);
        }
 catch (        RemoteException ex) {
        }
      }
      if (r != null && cpr.canRunHere(r)) {
        return cpr;
      }
      if (DEBUG_PROVIDER) {
        RuntimeException e=new RuntimeException("here");
        Slog.w(TAG,"LAUNCHING REMOTE PROVIDER (myuid " + r.info.uid + " pruid "+ cpr.appInfo.uid+ "): "+ cpr.info.name,e);
      }
      final int N=mLaunchingProviders.size();
      int i;
      for (i=0; i < N; i++) {
        if (mLaunchingProviders.get(i) == cpr) {
          break;
        }
      }
      if (i >= N) {
        final long origId=Binder.clearCallingIdentity();
        try {
          try {
            AppGlobals.getPackageManager().setPackageStoppedState(cpr.appInfo.packageName,false);
          }
 catch (          RemoteException e) {
          }
catch (          IllegalArgumentException e) {
            Slog.w(TAG,"Failed trying to unstop package " + cpr.appInfo.packageName + ": "+ e);
          }
          ProcessRecord proc=startProcessLocked(cpi.processName,cpr.appInfo,false,0,"content provider",new ComponentName(cpi.applicationInfo.packageName,cpi.name),false);
          if (proc == null) {
            Slog.w(TAG,"Unable to launch app " + cpi.applicationInfo.packageName + "/"+ cpi.applicationInfo.uid+ " for provider "+ name+ ": process is bad");
            return null;
          }
          cpr.launchingApp=proc;
          mLaunchingProviders.add(cpr);
        }
  finally {
          Binder.restoreCallingIdentity(origId);
        }
      }
      if (firstClass) {
        mProvidersByClass.put(comp,cpr);
      }
      mProvidersByName.put(name,cpr);
      incProviderCount(r,cpr);
    }
  }
synchronized (cpr) {
    while (cpr.provider == null) {
      if (cpr.launchingApp == null) {
        Slog.w(TAG,"Unable to launch app " + cpi.applicationInfo.packageName + "/"+ cpi.applicationInfo.uid+ " for provider "+ name+ ": launching app became null");
        EventLog.writeEvent(EventLogTags.AM_PROVIDER_LOST_PROCESS,cpi.applicationInfo.packageName,cpi.applicationInfo.uid,name);
        return null;
      }
      try {
        cpr.wait();
      }
 catch (      InterruptedException ex) {
      }
    }
  }
  return cpr;
}
