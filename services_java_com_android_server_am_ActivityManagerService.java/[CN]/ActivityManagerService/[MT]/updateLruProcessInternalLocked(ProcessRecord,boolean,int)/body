{
  int lrui=mLruProcesses.indexOf(app);
  if (lrui >= 0)   mLruProcesses.remove(lrui);
  int i=mLruProcesses.size() - 1;
  int skipTop=0;
  app.lruSeq=mLruSeq;
  if (updateActivityTime) {
    app.lastActivityTime=SystemClock.uptimeMillis();
  }
  if (app.activities.size() > 0) {
    app.lruWeight=app.lastActivityTime;
  }
 else   if (app.pubProviders.size() > 0) {
    app.lruWeight=app.lastActivityTime - ProcessList.CONTENT_APP_IDLE_OFFSET;
    skipTop=ProcessList.MIN_HIDDEN_APPS;
  }
 else {
    app.lruWeight=app.lastActivityTime - ProcessList.EMPTY_APP_IDLE_OFFSET;
    skipTop=ProcessList.MIN_HIDDEN_APPS;
  }
  while (i >= 0) {
    ProcessRecord p=mLruProcesses.get(i);
    if (skipTop > 0 && p.setAdj >= ProcessList.HIDDEN_APP_MIN_ADJ) {
      skipTop--;
    }
    if (p.lruWeight <= app.lruWeight || i < bestPos) {
      mLruProcesses.add(i + 1,app);
      break;
    }
    i--;
  }
  if (i < 0) {
    mLruProcesses.add(0,app);
  }
  if (app.connections.size() > 0) {
    for (    ConnectionRecord cr : app.connections) {
      if (cr.binding != null && cr.binding.service != null && cr.binding.service.app != null && cr.binding.service.app.lruSeq != mLruSeq) {
        updateLruProcessInternalLocked(cr.binding.service.app,updateActivityTime,i + 1);
      }
    }
  }
  for (int j=app.conProviders.size() - 1; j >= 0; j--) {
    ContentProviderRecord cpr=app.conProviders.get(j).provider;
    if (cpr.proc != null && cpr.proc.lruSeq != mLruSeq) {
      updateLruProcessInternalLocked(cpr.proc,updateActivityTime,i + 1);
    }
  }
}
