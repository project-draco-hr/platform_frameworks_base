{
  final boolean inLaunching=mLaunchingProviders.contains(cpr);
  if (!inLaunching || always) {
synchronized (cpr) {
      cpr.launchingApp=null;
      cpr.notifyAll();
    }
    mProviderMap.removeProviderByClass(cpr.name,UserHandle.getUserId(cpr.uid));
    String names[]=cpr.info.authority.split(";");
    for (int j=0; j < names.length; j++) {
      mProviderMap.removeProviderByName(names[j],UserHandle.getUserId(cpr.uid));
    }
  }
  for (int i=0; i < cpr.connections.size(); i++) {
    ContentProviderConnection conn=cpr.connections.get(i);
    if (conn.waiting) {
      if (inLaunching && !always) {
        continue;
      }
    }
    ProcessRecord capp=conn.client;
    conn.dead=true;
    if (conn.stableCount > 0) {
      if (!capp.persistent && capp.thread != null && capp.pid != 0 && capp.pid != MY_PID) {
        Slog.i(TAG,"Kill " + capp.processName + " (pid "+ capp.pid+ "): provider "+ cpr.info.name+ " in dying process "+ (proc != null ? proc.processName : "??"));
        EventLog.writeEvent(EventLogTags.AM_KILL,capp.pid,capp.processName,capp.setAdj,"dying provider " + cpr.name.toShortString());
        Process.killProcessQuiet(capp.pid);
      }
    }
 else     if (capp.thread != null && conn.provider.provider != null) {
      try {
        capp.thread.unstableProviderDied(conn.provider.provider.asBinder());
      }
 catch (      RemoteException e) {
      }
      cpr.connections.remove(i);
      conn.client.conProviders.remove(conn);
    }
  }
  if (inLaunching && always) {
    mLaunchingProviders.remove(cpr);
  }
  return inLaunching;
}
