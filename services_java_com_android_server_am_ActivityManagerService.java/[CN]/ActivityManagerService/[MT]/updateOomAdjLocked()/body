{
  final ActivityRecord TOP_ACT=resumedAppLocked();
  final ProcessRecord TOP_APP=TOP_ACT != null ? TOP_ACT.app : null;
  if (false) {
    RuntimeException e=new RuntimeException();
    e.fillInStackTrace();
    Slog.i(TAG,"updateOomAdj: top=" + TOP_ACT,e);
  }
  mAdjSeq++;
  mNewNumServiceProcs=0;
  int numSlots=ProcessList.HIDDEN_APP_MAX_ADJ - ProcessList.HIDDEN_APP_MIN_ADJ + 1;
  int factor=(mLruProcesses.size() - 4) / numSlots;
  if (factor < 1)   factor=1;
  int step=0;
  int numHidden=0;
  int i=mLruProcesses.size();
  int curHiddenAdj=ProcessList.HIDDEN_APP_MIN_ADJ;
  while (i > 0) {
    i--;
    ProcessRecord app=mLruProcesses.get(i);
    updateOomAdjLocked(app,curHiddenAdj,TOP_APP,true);
    if (curHiddenAdj < ProcessList.HIDDEN_APP_MAX_ADJ && app.curAdj == curHiddenAdj) {
      step++;
      if (step >= factor) {
        step=0;
        curHiddenAdj++;
      }
    }
    if (!app.killedBackground) {
      if (app.curAdj >= ProcessList.HIDDEN_APP_MIN_ADJ) {
        numHidden++;
        if (numHidden > mProcessLimit) {
          Slog.i(TAG,"No longer want " + app.processName + " (pid "+ app.pid+ "): hidden #"+ numHidden);
          EventLog.writeEvent(EventLogTags.AM_KILL,app.pid,app.processName,app.setAdj,"too many background");
          app.killedBackground=true;
          Process.killProcessQuiet(app.pid);
        }
      }
      if (!app.killedBackground && app.isolated && app.services.size() <= 0) {
        Slog.i(TAG,"Isolated process " + app.processName + " (pid "+ app.pid+ ") no longer needed");
        EventLog.writeEvent(EventLogTags.AM_KILL,app.pid,app.processName,app.setAdj,"isolated not needed");
        app.killedBackground=true;
        Process.killProcessQuiet(app.pid);
      }
    }
  }
  mNumServiceProcs=mNewNumServiceProcs;
  if (numHidden <= (ProcessList.MAX_HIDDEN_APPS / 2)) {
    final int N=mLruProcesses.size();
    factor=numHidden / 3;
    int minFactor=2;
    if (mHomeProcess != null)     minFactor++;
    if (mPreviousProcess != null)     minFactor++;
    if (factor < minFactor)     factor=minFactor;
    step=0;
    int fgTrimLevel;
    if (numHidden <= (ProcessList.MAX_HIDDEN_APPS / 5)) {
      fgTrimLevel=ComponentCallbacks2.TRIM_MEMORY_RUNNING_CRITICAL;
    }
 else     if (numHidden <= (ProcessList.MAX_HIDDEN_APPS / 3)) {
      fgTrimLevel=ComponentCallbacks2.TRIM_MEMORY_RUNNING_LOW;
    }
 else {
      fgTrimLevel=ComponentCallbacks2.TRIM_MEMORY_RUNNING_MODERATE;
    }
    int curLevel=ComponentCallbacks2.TRIM_MEMORY_COMPLETE;
    for (i=0; i < N; i++) {
      ProcessRecord app=mLruProcesses.get(i);
      if (app.curAdj >= ProcessList.HOME_APP_ADJ && app.curAdj != ProcessList.SERVICE_B_ADJ && !app.killedBackground) {
        if (app.trimMemoryLevel < curLevel && app.thread != null) {
          try {
            app.thread.scheduleTrimMemory(curLevel);
          }
 catch (          RemoteException e) {
          }
          if (false) {
            if (curLevel >= ComponentCallbacks2.TRIM_MEMORY_COMPLETE && app != mHomeProcess && app != mPreviousProcess) {
              mMainStack.destroyActivitiesLocked(app,false,"trim");
            }
          }
        }
        app.trimMemoryLevel=curLevel;
        step++;
        if (step >= factor) {
          step=0;
switch (curLevel) {
case ComponentCallbacks2.TRIM_MEMORY_COMPLETE:
            curLevel=ComponentCallbacks2.TRIM_MEMORY_MODERATE;
          break;
case ComponentCallbacks2.TRIM_MEMORY_MODERATE:
        curLevel=ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;
      break;
  }
}
}
 else if (app.curAdj == ProcessList.HEAVY_WEIGHT_APP_ADJ) {
if (app.trimMemoryLevel < ComponentCallbacks2.TRIM_MEMORY_BACKGROUND && app.thread != null) {
  try {
    app.thread.scheduleTrimMemory(ComponentCallbacks2.TRIM_MEMORY_BACKGROUND);
  }
 catch (  RemoteException e) {
  }
}
app.trimMemoryLevel=ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;
}
 else {
if ((app.curAdj > ProcessList.VISIBLE_APP_ADJ || app.systemNoUi) && app.pendingUiClean) {
  final int level=ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN;
  if (app.trimMemoryLevel < level && app.thread != null) {
    try {
      app.thread.scheduleTrimMemory(level);
    }
 catch (    RemoteException e) {
    }
  }
  app.pendingUiClean=false;
}
if (app.trimMemoryLevel < fgTrimLevel && app.thread != null) {
  try {
    app.thread.scheduleTrimMemory(fgTrimLevel);
  }
 catch (  RemoteException e) {
  }
}
app.trimMemoryLevel=fgTrimLevel;
}
}
}
 else {
final int N=mLruProcesses.size();
for (i=0; i < N; i++) {
ProcessRecord app=mLruProcesses.get(i);
if ((app.curAdj > ProcessList.VISIBLE_APP_ADJ || app.systemNoUi) && app.pendingUiClean) {
if (app.trimMemoryLevel < ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN && app.thread != null) {
  try {
    app.thread.scheduleTrimMemory(ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
  }
 catch (  RemoteException e) {
  }
}
app.pendingUiClean=false;
}
app.trimMemoryLevel=0;
}
}
if (mAlwaysFinishActivities) {
mMainStack.destroyActivitiesLocked(null,false,"always-finish");
}
}
