{
synchronized (this) {
    if (checkCallingPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
      pw.println("Permission Denial: can't dump ActivityManager from from pid=" + Binder.getCallingPid() + ", uid="+ Binder.getCallingUid()+ " without permission "+ android.Manifest.permission.DUMP);
      return;
    }
    if (args.length != 0 && "service".equals(args[0])) {
      dumpService(fd,pw,args);
      return;
    }
    pw.println("Activities in Current Activity Manager State:");
    dumpHistoryList(pw,mHistory,"  ","Hist",true);
    pw.println(" ");
    pw.println("  Running activities (most recent first):");
    dumpHistoryList(pw,mLRUActivities,"  ","Run",false);
    if (mWaitingVisibleActivities.size() > 0) {
      pw.println(" ");
      pw.println("  Activities waiting for another to become visible:");
      dumpHistoryList(pw,mWaitingVisibleActivities,"  ","Wait",false);
    }
    if (mStoppingActivities.size() > 0) {
      pw.println(" ");
      pw.println("  Activities waiting to stop:");
      dumpHistoryList(pw,mStoppingActivities,"  ","Stop",false);
    }
    if (mFinishingActivities.size() > 0) {
      pw.println(" ");
      pw.println("  Activities waiting to finish:");
      dumpHistoryList(pw,mFinishingActivities,"  ","Fin",false);
    }
    pw.println(" ");
    pw.println("  mPausingActivity: " + mPausingActivity);
    pw.println("  mResumedActivity: " + mResumedActivity);
    pw.println("  mFocusedActivity: " + mFocusedActivity);
    pw.println("  mLastPausedActivity: " + mLastPausedActivity);
    if (mRecentTasks.size() > 0) {
      pw.println(" ");
      pw.println("Recent tasks in Current Activity Manager State:");
      final int N=mRecentTasks.size();
      for (int i=0; i < N; i++) {
        TaskRecord tr=mRecentTasks.get(i);
        pw.print("  * Recent #");
        pw.print(i);
        pw.print(": ");
        pw.println(tr);
        mRecentTasks.get(i).dump(pw,"    ");
      }
    }
    pw.println(" ");
    pw.println("  mCurTask: " + mCurTask);
    pw.println(" ");
    pw.println("Processes in Current Activity Manager State:");
    boolean needSep=false;
    int numPers=0;
    for (    SparseArray<ProcessRecord> procs : mProcessNames.getMap().values()) {
      final int NA=procs.size();
      for (int ia=0; ia < NA; ia++) {
        if (!needSep) {
          pw.println("  All known processes:");
          needSep=true;
        }
        ProcessRecord r=procs.valueAt(ia);
        pw.print(r.persistent ? "  *PERS*" : "  *APP*");
        pw.print(" UID ");
        pw.print(procs.keyAt(ia));
        pw.print(" ");
        pw.println(r);
        r.dump(pw,"    ");
        if (r.persistent) {
          numPers++;
        }
      }
    }
    if (mLRUProcesses.size() > 0) {
      if (needSep)       pw.println(" ");
      needSep=true;
      pw.println("  Running processes (most recent first):");
      dumpProcessList(pw,mLRUProcesses,"    ","App ","PERS",true);
      needSep=true;
    }
synchronized (mPidsSelfLocked) {
      if (mPidsSelfLocked.size() > 0) {
        if (needSep)         pw.println(" ");
        needSep=true;
        pw.println("  PID mappings:");
        for (int i=0; i < mPidsSelfLocked.size(); i++) {
          pw.print("    PID #");
          pw.print(mPidsSelfLocked.keyAt(i));
          pw.print(": ");
          pw.println(mPidsSelfLocked.valueAt(i));
        }
      }
    }
    if (mForegroundProcesses.size() > 0) {
      if (needSep)       pw.println(" ");
      needSep=true;
      pw.println("  Foreground Processes:");
      for (int i=0; i < mForegroundProcesses.size(); i++) {
        pw.print("    PID #");
        pw.print(mForegroundProcesses.keyAt(i));
        pw.print(": ");
        pw.println(mForegroundProcesses.valueAt(i));
      }
    }
    if (mPersistentStartingProcesses.size() > 0) {
      if (needSep)       pw.println(" ");
      needSep=true;
      pw.println("  Persisent processes that are starting:");
      dumpProcessList(pw,mPersistentStartingProcesses,"    ","Starting Norm","Restarting PERS",false);
    }
    if (mStartingProcesses.size() > 0) {
      if (needSep)       pw.println(" ");
      needSep=true;
      pw.println("  Processes that are starting:");
      dumpProcessList(pw,mStartingProcesses,"    ","Starting Norm","Starting PERS",false);
    }
    if (mRemovedProcesses.size() > 0) {
      if (needSep)       pw.println(" ");
      needSep=true;
      pw.println("  Processes that are being removed:");
      dumpProcessList(pw,mRemovedProcesses,"    ","Removed Norm","Removed PERS",false);
    }
    if (mProcessesOnHold.size() > 0) {
      if (needSep)       pw.println(" ");
      needSep=true;
      pw.println("  Processes that are on old until the system is ready:");
      dumpProcessList(pw,mProcessesOnHold,"    ","OnHold Norm","OnHold PERS",false);
    }
    if (mProcessCrashTimes.getMap().size() > 0) {
      if (needSep)       pw.println(" ");
      needSep=true;
      pw.println("  Time since processes crashed:");
      long now=SystemClock.uptimeMillis();
      for (      Map.Entry<String,SparseArray<Long>> procs : mProcessCrashTimes.getMap().entrySet()) {
        SparseArray<Long> uids=procs.getValue();
        final int N=uids.size();
        for (int i=0; i < N; i++) {
          pw.print("    Process ");
          pw.print(procs.getKey());
          pw.print(" uid ");
          pw.print(uids.keyAt(i));
          pw.print(": last crashed ");
          pw.print((now - uids.valueAt(i)));
          pw.println(" ms ago");
        }
      }
    }
    if (mBadProcesses.getMap().size() > 0) {
      if (needSep)       pw.println(" ");
      needSep=true;
      pw.println("  Bad processes:");
      for (      Map.Entry<String,SparseArray<Long>> procs : mBadProcesses.getMap().entrySet()) {
        SparseArray<Long> uids=procs.getValue();
        final int N=uids.size();
        for (int i=0; i < N; i++) {
          pw.print("    Bad process ");
          pw.print(procs.getKey());
          pw.print(" uid ");
          pw.print(uids.keyAt(i));
          pw.print(": crashed at time ");
          pw.println(uids.valueAt(i));
        }
      }
    }
    pw.println(" ");
    pw.println("  Total persistent processes: " + numPers);
    pw.println("  mHomeProcess: " + mHomeProcess);
    pw.println("  mConfiguration: " + mConfiguration);
    pw.println("  mStartRunning=" + mStartRunning + " mSystemReady="+ mSystemReady+ " mBooting="+ mBooting+ " mBooted="+ mBooted+ " mFactoryTest="+ mFactoryTest);
    pw.println("  mSleeping=" + mSleeping + " mShuttingDown="+ mShuttingDown);
    pw.println("  mGoingToSleep=" + mGoingToSleep);
    pw.println("  mLaunchingActivity=" + mLaunchingActivity);
    pw.println("  mDebugApp=" + mDebugApp + "/orig="+ mOrigDebugApp+ " mDebugTransient="+ mDebugTransient+ " mOrigWaitForDebugger="+ mOrigWaitForDebugger);
    pw.println("  mAlwaysFinishActivities=" + mAlwaysFinishActivities + " mWatcher="+ mWatcher);
  }
}
