{
  if (Config.LOGD)   Log.d(TAG,"Uninstalling process " + name);
  int i, N;
  final String procNamePrefix=name + ":";
  if (uid < 0) {
    try {
      uid=ActivityThread.getPackageManager().getPackageUid(name);
    }
 catch (    RemoteException e) {
    }
  }
  Iterator<SparseArray<Long>> badApps=mProcessCrashTimes.getMap().values().iterator();
  while (badApps.hasNext()) {
    SparseArray<Long> ba=badApps.next();
    if (ba.get(uid) != null) {
      badApps.remove();
    }
  }
  ArrayList<ProcessRecord> procs=new ArrayList<ProcessRecord>();
  for (  SparseArray<ProcessRecord> apps : mProcessNames.getMap().values()) {
    final int NA=apps.size();
    for (int ia=0; ia < NA; ia++) {
      ProcessRecord app=apps.valueAt(ia);
      if (app.removed) {
        procs.add(app);
      }
 else       if ((uid > 0 && uid != Process.SYSTEM_UID && app.info.uid == uid) || app.processName.equals(name) || app.processName.startsWith(procNamePrefix)) {
        app.removed=true;
        procs.add(app);
      }
    }
  }
  N=procs.size();
  for (i=0; i < N; i++) {
    removeProcessLocked(procs.get(i),callerWillRestart);
  }
  for (i=mHistory.size() - 1; i >= 0; i--) {
    HistoryRecord r=(HistoryRecord)mHistory.get(i);
    if (r.packageName.equals(name)) {
      if (Config.LOGD)       Log.d(TAG,"  Force finishing activity " + r.intent.getComponent().flattenToShortString());
      if (r.app != null) {
        r.app.removed=true;
      }
      r.app=null;
      finishActivityLocked(r,i,Activity.RESULT_CANCELED,null,"uninstall");
    }
  }
  ArrayList<ServiceRecord> services=new ArrayList<ServiceRecord>();
  for (  ServiceRecord service : mServices.values()) {
    if (service.packageName.equals(name)) {
      if (service.app != null) {
        service.app.removed=true;
      }
      service.app=null;
      services.add(service);
    }
  }
  N=services.size();
  for (i=0; i < N; i++) {
    bringDownServiceLocked(services.get(i),true);
  }
  resumeTopActivityLocked(null);
}
