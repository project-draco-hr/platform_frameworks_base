{
  if (checkCallingPermission(android.Manifest.permission.INTERACT_ACROSS_USERS_FULL) != PackageManager.PERMISSION_GRANTED) {
    String msg="Permission Denial: switchUser() from pid=" + Binder.getCallingPid() + ", uid="+ Binder.getCallingUid()+ " requires "+ android.Manifest.permission.INTERACT_ACROSS_USERS_FULL;
    Slog.w(TAG,msg);
    throw new SecurityException(msg);
  }
synchronized (this) {
    if (mCurrentUserId == userId) {
      return true;
    }
    mWindowManager.startFreezingScreen(R.anim.screen_user_exit,R.anim.screen_user_enter);
    if (mStartedUsers.get(userId) == null) {
      mStartedUsers.put(userId,new UserStartedState(new UserHandle(userId),false));
    }
    mCurrentUserId=userId;
    Integer userIdInt=Integer.valueOf(userId);
    mUserLru.remove(userIdInt);
    mUserLru.add(userIdInt);
    boolean haveActivities=mMainStack.switchUser(userId);
    if (!haveActivities) {
      startHomeActivityLocked(userId,mStartedUsers.get(userId));
    }
 else {
      mMainStack.addStartingUserLocked(mStartedUsers.get(userId));
    }
  }
  long ident=Binder.clearCallingIdentity();
  try {
    Intent addedIntent=new Intent(Intent.ACTION_USER_SWITCHED);
    addedIntent.putExtra(Intent.EXTRA_USER_HANDLE,userId);
    mContext.sendBroadcastAsUser(addedIntent,UserHandle.ALL,android.Manifest.permission.MANAGE_USERS);
  }
  finally {
    Binder.restoreCallingIdentity(ident);
  }
  return true;
}
