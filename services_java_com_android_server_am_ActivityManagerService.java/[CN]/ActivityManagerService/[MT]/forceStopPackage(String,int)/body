{
  if (checkCallingPermission(android.Manifest.permission.FORCE_STOP_PACKAGES) != PackageManager.PERMISSION_GRANTED) {
    String msg="Permission Denial: forceStopPackage() from pid=" + Binder.getCallingPid() + ", uid="+ Binder.getCallingUid()+ " requires "+ android.Manifest.permission.FORCE_STOP_PACKAGES;
    Slog.w(TAG,msg);
    throw new SecurityException(msg);
  }
  final int callingPid=Binder.getCallingPid();
  userId=handleIncomingUser(callingPid,Binder.getCallingUid(),userId,true,true,"forceStopPackage",null);
  long callingId=Binder.clearCallingIdentity();
  try {
    IPackageManager pm=AppGlobals.getPackageManager();
synchronized (this) {
      int[] users=userId == UserHandle.USER_ALL ? getUsersLocked() : new int[]{userId};
      for (      int user : users) {
        int pkgUid=-1;
        try {
          pkgUid=pm.getPackageUid(packageName,user);
        }
 catch (        RemoteException e) {
        }
        if (pkgUid == -1) {
          Slog.w(TAG,"Invalid packageName: " + packageName);
          continue;
        }
        try {
          pm.setPackageStoppedState(packageName,true,user);
        }
 catch (        RemoteException e) {
        }
catch (        IllegalArgumentException e) {
          Slog.w(TAG,"Failed trying to unstop package " + packageName + ": "+ e);
        }
        if (isUserRunningLocked(user,false)) {
          forceStopPackageLocked(packageName,pkgUid,"from pid " + callingPid);
        }
      }
    }
  }
  finally {
    Binder.restoreCallingIdentity(callingId);
  }
}
