{
  boolean needSep=false;
  ItemMatcher matcher=new ItemMatcher();
  matcher.build(args,opti);
  pw.println("ACTIVITY MANAGER CONTENT PROVIDERS (dumpsys activity providers)");
  if (mProvidersByClass.size() > 0) {
    boolean printed=false;
    Iterator<Map.Entry<ComponentName,ContentProviderRecord>> it=mProvidersByClass.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry<ComponentName,ContentProviderRecord> e=it.next();
      ContentProviderRecord r=e.getValue();
      ComponentName comp=e.getKey();
      String cls=comp.getClassName();
      int end=cls.lastIndexOf('.');
      if (end > 0 && end < (cls.length() - 2)) {
        cls=cls.substring(end + 1);
      }
      if (!matcher.match(r,comp)) {
        continue;
      }
      if (dumpPackage != null && !dumpPackage.equals(comp.getPackageName())) {
        continue;
      }
      if (!printed) {
        if (needSep)         pw.println(" ");
        needSep=true;
        pw.println("  Published content providers (by class):");
        printed=true;
      }
      pw.print("  * ");
      pw.print(cls);
      pw.print(" (");
      pw.print(comp.flattenToShortString());
      pw.println(")");
      if (dumpAll) {
        r.dump(pw,"      ");
      }
 else {
        if (r.proc != null) {
          pw.print("      ");
          pw.println(r.proc);
        }
 else {
          pw.println();
        }
        if (r.clients.size() > 0) {
          pw.println("      Clients:");
          for (          ProcessRecord cproc : r.clients) {
            pw.print("        - ");
            pw.println(cproc);
          }
        }
      }
    }
  }
  if (dumpAll) {
    if (mProvidersByName.size() > 0) {
      boolean printed=false;
      Iterator<Map.Entry<String,ContentProviderRecord>> it=mProvidersByName.entrySet().iterator();
      while (it.hasNext()) {
        Map.Entry<String,ContentProviderRecord> e=it.next();
        ContentProviderRecord r=e.getValue();
        if (!matcher.match(r,r.name)) {
          continue;
        }
        if (dumpPackage != null && !dumpPackage.equals(r.name.getPackageName())) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println(" ");
          needSep=true;
          pw.println("  Authority to provider mappings:");
          printed=true;
        }
        pw.print("  ");
        pw.print(e.getKey());
        pw.println(":");
        pw.print("    ");
        pw.println(r);
      }
    }
  }
  if (mLaunchingProviders.size() > 0) {
    boolean printed=false;
    for (int i=mLaunchingProviders.size() - 1; i >= 0; i--) {
      ContentProviderRecord r=mLaunchingProviders.get(i);
      if (dumpPackage != null && !dumpPackage.equals(r.name.getPackageName())) {
        continue;
      }
      if (!printed) {
        if (needSep)         pw.println(" ");
        needSep=true;
        pw.println("  Launching content providers:");
        printed=true;
      }
      pw.print("  Launching #");
      pw.print(i);
      pw.print(": ");
      pw.println(r);
    }
  }
  if (mGrantedUriPermissions.size() > 0) {
    if (needSep)     pw.println();
    needSep=true;
    pw.println("Granted Uri Permissions:");
    for (int i=0; i < mGrantedUriPermissions.size(); i++) {
      int uid=mGrantedUriPermissions.keyAt(i);
      HashMap<Uri,UriPermission> perms=mGrantedUriPermissions.valueAt(i);
      pw.print("  * UID ");
      pw.print(uid);
      pw.println(" holds:");
      for (      UriPermission perm : perms.values()) {
        pw.print("    ");
        pw.println(perm);
        if (dumpAll) {
          perm.dump(pw,"      ");
        }
      }
    }
    needSep=true;
  }
  return needSep;
}
