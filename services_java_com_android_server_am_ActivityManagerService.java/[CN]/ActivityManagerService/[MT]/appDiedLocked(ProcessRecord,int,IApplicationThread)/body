{
  mProcDeaths[0]++;
  if (app.thread != null && app.thread.asBinder() == thread.asBinder()) {
    Log.i(TAG,"Process " + app.processName + " (pid "+ pid+ ") has died.");
    EventLog.writeEvent(EventLogTags.AM_PROC_DIED,app.pid,app.processName);
    if (localLOGV)     Log.v(TAG,"Dying app: " + app + ", pid: "+ pid+ ", thread: "+ thread.asBinder());
    boolean doLowMem=app.instrumentationClass == null;
    handleAppDiedLocked(app,false);
    if (doLowMem) {
      boolean haveBg=false;
      int count=mLRUProcesses.size();
      int i;
      for (i=0; i < count; i++) {
        ProcessRecord rec=mLRUProcesses.get(i);
        if (rec.thread != null && rec.setAdj >= HIDDEN_APP_MIN_ADJ) {
          haveBg=true;
          break;
        }
      }
      if (!haveBg) {
        Log.i(TAG,"Low Memory: No more background processes.");
        EventLog.writeEvent(EventLogTags.AM_LOW_MEMORY,mLRUProcesses.size());
        long now=SystemClock.uptimeMillis();
        for (i=0; i < count; i++) {
          ProcessRecord rec=mLRUProcesses.get(i);
          if (rec != app && rec.thread != null && (rec.lastLowMemory + GC_MIN_INTERVAL) <= now) {
            if (rec.setAdj <= VISIBLE_APP_ADJ) {
              rec.lastRequestedGc=0;
            }
 else {
              rec.lastRequestedGc=rec.lastLowMemory;
            }
            rec.reportLowMemory=true;
            rec.lastLowMemory=now;
            mProcessesToGc.remove(rec);
            addProcessToGcListLocked(rec);
          }
        }
        scheduleAppGcsLocked();
      }
    }
  }
 else   if (Config.LOGD) {
    Log.d(TAG,"Received spurious death notification for thread " + thread.asBinder());
  }
}
