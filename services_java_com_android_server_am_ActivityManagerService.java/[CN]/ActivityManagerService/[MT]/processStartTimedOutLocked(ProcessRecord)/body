{
  final int pid=app.pid;
  boolean gone=false;
synchronized (mPidsSelfLocked) {
    ProcessRecord knownApp=mPidsSelfLocked.get(pid);
    if (knownApp != null && knownApp.thread == null) {
      mPidsSelfLocked.remove(pid);
      gone=true;
    }
  }
  if (gone) {
    Log.w(TAG,"Process " + app + " failed to attach");
    mProcessNames.remove(app.processName,app.info.uid);
    Process.killProcess(pid);
    if (mPendingBroadcast != null && mPendingBroadcast.curApp.pid == pid) {
      Log.w(TAG,"Unattached app died before broadcast acknowledged, skipping");
      mPendingBroadcast=null;
      scheduleBroadcastsLocked();
    }
    if (mBackupTarget != null && mBackupTarget.app.pid == pid) {
      Log.w(TAG,"Unattached app died before backup, skipping");
      try {
        IBackupManager bm=IBackupManager.Stub.asInterface(ServiceManager.getService(Context.BACKUP_SERVICE));
        bm.agentDisconnected(app.info.packageName);
      }
 catch (      RemoteException e) {
      }
    }
  }
 else {
    Log.w(TAG,"Spurious process start timeout - pid not known for " + app);
  }
}
