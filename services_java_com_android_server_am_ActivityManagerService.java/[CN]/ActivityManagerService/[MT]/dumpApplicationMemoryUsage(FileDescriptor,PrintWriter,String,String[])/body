{
  boolean dumpAll=false;
  int opti=0;
  while (opti < args.length) {
    String opt=args[opti];
    if (opt == null || opt.length() <= 0 || opt.charAt(0) != '-') {
      break;
    }
    opti++;
    if ("-a".equals(opt)) {
      dumpAll=true;
    }
 else     if ("-h".equals(opt)) {
      pw.println("meminfo dump options: [-a] [process]");
      pw.println("  -a: include all available information for each process.");
      pw.println("If [process] is specified it can be the name or ");
      pw.println("pid of a specific process to dump.");
      return;
    }
 else {
      pw.println("Unknown argument: " + opt + "; use -h for help");
    }
  }
  ArrayList<ProcessRecord> procs=collectProcesses(pw,opti,args);
  if (procs == null) {
    return;
  }
  final boolean isCheckinRequest=scanArgs(args,"--checkin");
  long uptime=SystemClock.uptimeMillis();
  long realtime=SystemClock.elapsedRealtime();
  if (procs.size() == 1 || isCheckinRequest) {
    dumpAll=true;
  }
  if (isCheckinRequest) {
    pw.println(uptime + "," + realtime);
    pw.flush();
  }
 else {
    pw.println("Applications Memory Usage (kB):");
    pw.println("Uptime: " + uptime + " Realtime: "+ realtime);
  }
  String[] innerArgs=new String[args.length - opti];
  System.arraycopy(args,opti,innerArgs,0,args.length - opti);
  ArrayList<MemItem> procMems=new ArrayList<MemItem>();
  long nativePss=0, dalvikPss=0, otherPss=0;
  long[] miscPss=new long[Debug.MemoryInfo.NUM_OTHER_STATS];
  final int[] oomAdj=new int[]{ProcessList.SYSTEM_ADJ,ProcessList.PERSISTENT_PROC_ADJ,ProcessList.FOREGROUND_APP_ADJ,ProcessList.VISIBLE_APP_ADJ,ProcessList.PERCEPTIBLE_APP_ADJ,ProcessList.HEAVY_WEIGHT_APP_ADJ,ProcessList.BACKUP_APP_ADJ,ProcessList.SERVICE_ADJ,ProcessList.HOME_APP_ADJ,ProcessList.SERVICE_B_ADJ,ProcessList.HIDDEN_APP_MAX_ADJ};
  final String[] oomLabel=new String[]{"System","Persistent","Foreground","Visible","Perceptible","Heavy Weight","Backup","A Services","Home","B Services","Background"};
  long oomPss[]=new long[oomLabel.length];
  ArrayList<MemItem>[] oomProcs=(ArrayList<MemItem>[])new ArrayList[oomLabel.length];
  long totalPss=0;
  for (int i=procs.size() - 1; i >= 0; i--) {
    ProcessRecord r=procs.get(i);
    if (r.thread != null) {
      if (!isCheckinRequest && dumpAll) {
        pw.println("\n** MEMINFO in pid " + r.pid + " ["+ r.processName+ "] **");
        pw.flush();
      }
      Debug.MemoryInfo mi=null;
      if (dumpAll) {
        try {
          mi=r.thread.dumpMemInfo(fd,isCheckinRequest,dumpAll,innerArgs);
        }
 catch (        RemoteException e) {
          if (!isCheckinRequest) {
            pw.println("Got RemoteException!");
            pw.flush();
          }
        }
      }
 else {
        mi=new Debug.MemoryInfo();
        Debug.getMemoryInfo(r.pid,mi);
      }
      if (!isCheckinRequest && mi != null) {
        long myTotalPss=mi.getTotalPss();
        totalPss+=myTotalPss;
        MemItem pssItem=new MemItem(r.processName + " (pid " + r.pid+ ")",myTotalPss);
        procMems.add(pssItem);
        nativePss+=mi.nativePss;
        dalvikPss+=mi.dalvikPss;
        otherPss+=mi.otherPss;
        for (int j=0; j < Debug.MemoryInfo.NUM_OTHER_STATS; j++) {
          long mem=mi.getOtherPss(j);
          miscPss[j]+=mem;
          otherPss-=mem;
        }
        for (int oomIndex=0; oomIndex < oomPss.length; oomIndex++) {
          if (r.setAdj <= oomAdj[oomIndex] || oomIndex == (oomPss.length - 1)) {
            oomPss[oomIndex]+=myTotalPss;
            if (oomProcs[oomIndex] == null) {
              oomProcs[oomIndex]=new ArrayList<MemItem>();
            }
            oomProcs[oomIndex].add(pssItem);
            break;
          }
        }
      }
    }
  }
  if (!isCheckinRequest && procs.size() > 1) {
    ArrayList<MemItem> catMems=new ArrayList<MemItem>();
    catMems.add(new MemItem("Native",nativePss));
    catMems.add(new MemItem("Dalvik",dalvikPss));
    catMems.add(new MemItem("Unknown",otherPss));
    for (int j=0; j < Debug.MemoryInfo.NUM_OTHER_STATS; j++) {
      catMems.add(new MemItem(Debug.MemoryInfo.getOtherLabel(j),miscPss[j]));
    }
    ArrayList<MemItem> oomMems=new ArrayList<MemItem>();
    for (int j=0; j < oomPss.length; j++) {
      if (oomPss[j] != 0) {
        MemItem item=new MemItem(oomLabel[j],oomPss[j]);
        item.subitems=oomProcs[j];
        oomMems.add(item);
      }
    }
    pw.println();
    pw.println("Total PSS by process:");
    dumpMemItems(pw,"  ",procMems,true);
    pw.println();
    pw.println("Total PSS by OOM adjustment:");
    dumpMemItems(pw,"  ",oomMems,false);
    pw.println();
    pw.println("Total PSS by category:");
    dumpMemItems(pw,"  ",catMems,true);
    pw.println();
    pw.print("Total PSS: ");
    pw.print(totalPss);
    pw.println(" Kb");
  }
}
