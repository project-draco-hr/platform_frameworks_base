{
  cleanUpApplicationRecordLocked(app,restarting,-1);
  if (!restarting) {
    mLruProcesses.remove(app);
  }
  if (mMainStack.mPausingActivity != null && mMainStack.mPausingActivity.app == app) {
    if (DEBUG_PAUSE)     Slog.v(TAG,"App died while pausing: " + mMainStack.mPausingActivity);
    mMainStack.mPausingActivity=null;
  }
  if (mMainStack.mLastPausedActivity != null && mMainStack.mLastPausedActivity.app == app) {
    mMainStack.mLastPausedActivity=null;
  }
  mMainStack.removeHistoryRecordsForAppLocked(app);
  boolean atTop=true;
  boolean hasVisibleActivities=false;
  int i=mMainStack.mHistory.size();
  if (localLOGV)   Slog.v(TAG,"Removing app " + app + " from history with "+ i+ " entries");
  while (i > 0) {
    i--;
    ActivityRecord r=(ActivityRecord)mMainStack.mHistory.get(i);
    if (localLOGV)     Slog.v(TAG,"Record #" + i + " "+ r+ ": app="+ r.app);
    if (r.app == app) {
      if ((!r.haveState && !r.stateNotNeeded) || r.finishing) {
        if (localLOGV)         Slog.v(TAG,"Removing this entry!  frozen=" + r.haveState + " finishing="+ r.finishing);
        r.makeFinishing();
        mMainStack.mHistory.remove(i);
        r.takeFromHistory();
        mWindowManager.removeAppToken(r);
        if (VALIDATE_TOKENS) {
          mWindowManager.validateAppTokens(mMainStack.mHistory);
        }
        r.removeUriPermissionsLocked();
      }
 else {
        if (localLOGV)         Slog.v(TAG,"Keeping entry, setting app to null");
        if (r.visible) {
          hasVisibleActivities=true;
        }
        r.app=null;
        r.nowVisible=false;
        if (!r.haveState) {
          r.icicle=null;
        }
      }
      r.stack.cleanUpActivityLocked(r,true);
      r.state=ActivityState.STOPPED;
    }
    atTop=false;
  }
  app.activities.clear();
  if (app.instrumentationClass != null) {
    Slog.w(TAG,"Crash of app " + app.processName + " running instrumentation "+ app.instrumentationClass);
    Bundle info=new Bundle();
    info.putString("shortMsg","Process crashed.");
    finishInstrumentationLocked(app,Activity.RESULT_CANCELED,info);
  }
  if (!restarting) {
    if (!mMainStack.resumeTopActivityLocked(null)) {
      if (hasVisibleActivities) {
        mMainStack.ensureActivitiesVisibleLocked(null,0);
      }
    }
  }
}
