{
  boolean readPerm=(modeFlags & Intent.FLAG_GRANT_READ_URI_PERMISSION) == 0;
  boolean writePerm=(modeFlags & Intent.FLAG_GRANT_WRITE_URI_PERMISSION) == 0;
  if (DEBUG_URI_PERMISSION)   Slog.v(TAG,"checkHoldingPermissionsLocked: uri=" + uri + " uid="+ uid);
  try {
    final boolean prv=!pi.exported && pi.applicationInfo.uid != uid;
    if (!readPerm) {
      if ((!prv && pi.readPermission == null) || (pm.checkUidPermission(pi.readPermission,uid) == PackageManager.PERMISSION_GRANTED)) {
        readPerm=true;
      }
    }
    if (!writePerm) {
      if (!prv && (pi.writePermission == null) || (pm.checkUidPermission(pi.writePermission,uid) == PackageManager.PERMISSION_GRANTED)) {
        writePerm=true;
      }
    }
    PathPermission[] pps=pi.pathPermissions;
    if (pps != null && (!readPerm || !writePerm)) {
      final String path=uri.getPath();
      int i=pps.length;
      while (i > 0 && (!readPerm || !writePerm)) {
        i--;
        PathPermission pp=pps[i];
        if (!readPerm) {
          final String pprperm=pp.getReadPermission();
          if (DEBUG_URI_PERMISSION)           Slog.v(TAG,"Checking read perm for " + pprperm + " for "+ pp.getPath()+ ": match="+ pp.match(path)+ " check="+ pm.checkUidPermission(pprperm,uid));
          if (pprperm != null && pp.match(path) && (pm.checkUidPermission(pprperm,uid) == PackageManager.PERMISSION_GRANTED)) {
            readPerm=true;
          }
        }
        if (!writePerm) {
          final String ppwperm=pp.getWritePermission();
          if (DEBUG_URI_PERMISSION)           Slog.v(TAG,"Checking write perm " + ppwperm + " for "+ pp.getPath()+ ": match="+ pp.match(path)+ " check="+ pm.checkUidPermission(ppwperm,uid));
          if (ppwperm != null && pp.match(path) && (pm.checkUidPermission(ppwperm,uid) == PackageManager.PERMISSION_GRANTED)) {
            writePerm=true;
          }
        }
      }
    }
  }
 catch (  RemoteException e) {
    return false;
  }
  return readPerm && writePerm;
}
