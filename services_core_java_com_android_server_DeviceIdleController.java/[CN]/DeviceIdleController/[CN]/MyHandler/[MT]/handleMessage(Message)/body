{
  if (DEBUG)   Slog.d(TAG,"handleMessage(" + msg.what + ")");
switch (msg.what) {
case MSG_WRITE_CONFIG:
{
      handleWriteConfigFile();
    }
  break;
case MSG_REPORT_IDLE_ON:
{
  mLocalPowerManager.setDeviceIdleMode(true);
  try {
    mNetworkPolicyManager.setDeviceIdleMode(true);
    mBatteryStats.noteDeviceIdleMode(true,null,Process.myUid());
  }
 catch (  RemoteException e) {
  }
  getContext().sendBroadcastAsUser(mIdleIntent,UserHandle.ALL);
}
break;
case MSG_REPORT_IDLE_OFF:
{
mLocalPowerManager.setDeviceIdleMode(false);
try {
mNetworkPolicyManager.setDeviceIdleMode(false);
mBatteryStats.noteDeviceIdleMode(false,null,Process.myUid());
}
 catch (RemoteException e) {
}
getContext().sendBroadcastAsUser(mIdleIntent,UserHandle.ALL);
}
break;
case MSG_REPORT_ACTIVE:
{
String activeReason=(String)msg.obj;
int activeUid=msg.arg1;
boolean needBroadcast=msg.arg2 != 0;
mLocalPowerManager.setDeviceIdleMode(false);
try {
mNetworkPolicyManager.setDeviceIdleMode(false);
mBatteryStats.noteDeviceIdleMode(false,activeReason,activeUid);
}
 catch (RemoteException e) {
}
if (needBroadcast) {
getContext().sendBroadcastAsUser(mIdleIntent,UserHandle.ALL);
}
}
break;
case MSG_TEMP_APP_WHITELIST_TIMEOUT:
{
int uid=msg.arg1;
checkTempAppWhitelistTimeout(uid);
}
break;
}
}
