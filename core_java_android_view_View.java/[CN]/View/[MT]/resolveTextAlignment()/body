{
  mPrivateFlags2&=~(TEXT_ALIGNMENT_RESOLVED | TEXT_ALIGNMENT_RESOLVED_MASK);
  if (hasRtlSupport()) {
    final int textAlignment=getTextAlignment();
switch (textAlignment) {
case TEXT_ALIGNMENT_INHERIT:
      if (canResolveLayoutDirection() && mParent instanceof View) {
        View view=(View)mParent;
        final int parentResolvedTextAlignment=view.getResolvedTextAlignment();
switch (parentResolvedTextAlignment) {
case TEXT_ALIGNMENT_GRAVITY:
case TEXT_ALIGNMENT_TEXT_START:
case TEXT_ALIGNMENT_TEXT_END:
case TEXT_ALIGNMENT_CENTER:
case TEXT_ALIGNMENT_VIEW_START:
case TEXT_ALIGNMENT_VIEW_END:
          mPrivateFlags2|=(parentResolvedTextAlignment << TEXT_ALIGNMENT_RESOLVED_MASK_SHIFT);
        break;
default :
      mPrivateFlags2|=TEXT_ALIGNMENT_RESOLVED_DEFAULT;
  }
}
 else {
  mPrivateFlags2|=TEXT_ALIGNMENT_RESOLVED_DEFAULT;
}
break;
case TEXT_ALIGNMENT_GRAVITY:
case TEXT_ALIGNMENT_TEXT_START:
case TEXT_ALIGNMENT_TEXT_END:
case TEXT_ALIGNMENT_CENTER:
case TEXT_ALIGNMENT_VIEW_START:
case TEXT_ALIGNMENT_VIEW_END:
mPrivateFlags2|=(textAlignment << TEXT_ALIGNMENT_RESOLVED_MASK_SHIFT);
break;
default :
mPrivateFlags2|=TEXT_ALIGNMENT_RESOLVED_DEFAULT;
}
}
 else {
mPrivateFlags2|=TEXT_ALIGNMENT_RESOLVED_DEFAULT;
}
mPrivateFlags2|=TEXT_ALIGNMENT_RESOLVED;
onResolvedTextAlignmentChanged();
}
