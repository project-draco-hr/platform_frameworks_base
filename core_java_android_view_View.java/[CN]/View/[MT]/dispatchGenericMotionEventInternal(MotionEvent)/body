{
  ListenerInfo li=mListenerInfo;
  if (li != null && li.mOnGenericMotionListener != null && (mViewFlags & ENABLED_MASK) == ENABLED && li.mOnGenericMotionListener.onGenericMotion(this,event)) {
    return true;
  }
  if (onGenericMotionEvent(event)) {
    return true;
  }
  final int actionButton=event.getActionButton();
switch (event.getActionMasked()) {
case MotionEvent.ACTION_BUTTON_PRESS:
    if (isContextClickable() && !mInContextButtonPress && !mHasPerformedLongPress&& (actionButton == MotionEvent.BUTTON_STYLUS_PRIMARY || actionButton == MotionEvent.BUTTON_SECONDARY)) {
      if (performContextClick()) {
        mInContextButtonPress=true;
        setPressed(true,event.getX(),event.getY());
        removeTapCallback();
        removeLongPressCallback();
        return true;
      }
    }
  break;
case MotionEvent.ACTION_BUTTON_RELEASE:
if (mInContextButtonPress && (actionButton == MotionEvent.BUTTON_STYLUS_PRIMARY || actionButton == MotionEvent.BUTTON_SECONDARY)) {
  mInContextButtonPress=false;
  mIgnoreNextUpEvent=true;
}
break;
}
if (mInputEventConsistencyVerifier != null) {
mInputEventConsistencyVerifier.onUnhandledEvent(event,0);
}
return false;
}
