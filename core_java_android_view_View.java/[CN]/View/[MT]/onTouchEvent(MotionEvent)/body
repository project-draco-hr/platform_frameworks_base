{
  final float x=event.getX();
  final float y=event.getY();
  final int viewFlags=mViewFlags;
  final int action=event.getAction();
  if ((viewFlags & ENABLED_MASK) == DISABLED) {
    if (action == MotionEvent.ACTION_UP && (mPrivateFlags & PFLAG_PRESSED) != 0) {
      setPressed(false);
    }
    return (((viewFlags & CLICKABLE) == CLICKABLE || (viewFlags & LONG_CLICKABLE) == LONG_CLICKABLE) || (viewFlags & STYLUS_BUTTON_PRESSABLE) == STYLUS_BUTTON_PRESSABLE);
  }
  if (mTouchDelegate != null) {
    if (mTouchDelegate.onTouchEvent(event)) {
      return true;
    }
  }
  if (((viewFlags & CLICKABLE) == CLICKABLE || (viewFlags & LONG_CLICKABLE) == LONG_CLICKABLE) || (viewFlags & STYLUS_BUTTON_PRESSABLE) == STYLUS_BUTTON_PRESSABLE) {
switch (action) {
case MotionEvent.ACTION_UP:
      boolean prepressed=(mPrivateFlags & PFLAG_PREPRESSED) != 0;
    if ((mPrivateFlags & PFLAG_PRESSED) != 0 || prepressed) {
      boolean focusTaken=false;
      if (isFocusable() && isFocusableInTouchMode() && !isFocused()) {
        focusTaken=requestFocus();
      }
      if (prepressed) {
        setPressed(true,x,y);
      }
      if (!mHasPerformedLongPress && !mIgnoreNextUpEvent) {
        removeLongPressCallback();
        if (!focusTaken) {
          if (mPerformClick == null) {
            mPerformClick=new PerformClick();
          }
          if (!post(mPerformClick)) {
            performClick();
          }
        }
      }
      if (mUnsetPressedState == null) {
        mUnsetPressedState=new UnsetPressedState();
      }
      if (prepressed) {
        postDelayed(mUnsetPressedState,ViewConfiguration.getPressedStateDuration());
      }
 else       if (!post(mUnsetPressedState)) {
        mUnsetPressedState.run();
      }
      removeTapCallback();
    }
  mIgnoreNextUpEvent=false;
break;
case MotionEvent.ACTION_DOWN:
mHasPerformedLongPress=false;
if (performButtonActionOnTouchDown(event)) {
break;
}
boolean isInScrollingContainer=isInScrollingContainer();
if (isInScrollingContainer) {
mPrivateFlags|=PFLAG_PREPRESSED;
if (mPendingCheckForTap == null) {
mPendingCheckForTap=new CheckForTap();
}
mPendingCheckForTap.x=event.getX();
mPendingCheckForTap.y=event.getY();
postDelayed(mPendingCheckForTap,ViewConfiguration.getTapTimeout());
}
 else {
setPressed(true,x,y);
checkForLongClick(0);
}
break;
case MotionEvent.ACTION_CANCEL:
setPressed(false);
removeTapCallback();
removeLongPressCallback();
mInStylusButtonPress=false;
mHasPerformedLongPress=false;
mIgnoreNextUpEvent=false;
break;
case MotionEvent.ACTION_MOVE:
drawableHotspotChanged(x,y);
if (!pointInView(x,y,mTouchSlop)) {
removeTapCallback();
if ((mPrivateFlags & PFLAG_PRESSED) != 0) {
removeLongPressCallback();
setPressed(false);
}
}
break;
}
return true;
}
return false;
}
