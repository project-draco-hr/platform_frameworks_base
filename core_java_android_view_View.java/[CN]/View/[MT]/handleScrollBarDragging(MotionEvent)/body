{
  if (mScrollCache == null) {
    return false;
  }
  final float x=event.getX();
  final float y=event.getY();
  final int action=event.getAction();
  if ((mScrollCache.mScrollBarDraggingState == ScrollabilityCache.NOT_DRAGGING && action != MotionEvent.ACTION_DOWN) || !event.isFromSource(InputDevice.SOURCE_MOUSE) || !event.isButtonPressed(MotionEvent.BUTTON_PRIMARY)) {
    mScrollCache.mScrollBarDraggingState=ScrollabilityCache.NOT_DRAGGING;
    return false;
  }
switch (action) {
case MotionEvent.ACTION_MOVE:
    if (mScrollCache.mScrollBarDraggingState == ScrollabilityCache.NOT_DRAGGING) {
      return false;
    }
  if (mScrollCache.mScrollBarDraggingState == ScrollabilityCache.DRAGGING_VERTICAL_SCROLL_BAR) {
    final Rect bounds=mScrollCache.mScrollBarBounds;
    getVerticalScrollBarBounds(bounds);
    final int range=computeVerticalScrollRange();
    final int offset=computeVerticalScrollOffset();
    final int extent=computeVerticalScrollExtent();
    final int thumbLength=ScrollBarUtils.getThumbLength(bounds.height(),bounds.width(),extent,range);
    final int thumbOffset=ScrollBarUtils.getThumbOffset(bounds.height(),thumbLength,extent,range,offset);
    final float diff=y - mScrollCache.mScrollBarDraggingPos;
    final float maxThumbOffset=bounds.height() - thumbLength;
    final float newThumbOffset=Math.min(Math.max(thumbOffset + diff,0.0f),maxThumbOffset);
    final int height=getHeight();
    if (Math.round(newThumbOffset) != thumbOffset && maxThumbOffset > 0 && height > 0 && extent > 0) {
      final int newY=Math.round((range - extent) / ((float)extent / height) * (newThumbOffset / maxThumbOffset));
      if (newY != getScrollY()) {
        mScrollCache.mScrollBarDraggingPos=y;
        setScrollY(newY);
      }
    }
    return true;
  }
if (mScrollCache.mScrollBarDraggingState == ScrollabilityCache.DRAGGING_HORIZONTAL_SCROLL_BAR) {
  final Rect bounds=mScrollCache.mScrollBarBounds;
  getHorizontalScrollBarBounds(bounds);
  final int range=computeHorizontalScrollRange();
  final int offset=computeHorizontalScrollOffset();
  final int extent=computeHorizontalScrollExtent();
  final int thumbLength=ScrollBarUtils.getThumbLength(bounds.width(),bounds.height(),extent,range);
  final int thumbOffset=ScrollBarUtils.getThumbOffset(bounds.width(),thumbLength,extent,range,offset);
  final float diff=x - mScrollCache.mScrollBarDraggingPos;
  final float maxThumbOffset=bounds.width() - thumbLength;
  final float newThumbOffset=Math.min(Math.max(thumbOffset + diff,0.0f),maxThumbOffset);
  final int width=getWidth();
  if (Math.round(newThumbOffset) != thumbOffset && maxThumbOffset > 0 && width > 0 && extent > 0) {
    final int newX=Math.round((range - extent) / ((float)extent / width) * (newThumbOffset / maxThumbOffset));
    if (newX != getScrollX()) {
      mScrollCache.mScrollBarDraggingPos=x;
      setScrollX(newX);
    }
  }
  return true;
}
case MotionEvent.ACTION_DOWN:
if (mScrollCache.state == ScrollabilityCache.OFF) {
return false;
}
if (isOnVerticalScrollbarThumb(x,y)) {
mScrollCache.mScrollBarDraggingState=ScrollabilityCache.DRAGGING_VERTICAL_SCROLL_BAR;
mScrollCache.mScrollBarDraggingPos=y;
return true;
}
if (isOnHorizontalScrollbarThumb(x,y)) {
mScrollCache.mScrollBarDraggingState=ScrollabilityCache.DRAGGING_HORIZONTAL_SCROLL_BAR;
mScrollCache.mScrollBarDraggingPos=x;
return true;
}
}
mScrollCache.mScrollBarDraggingState=ScrollabilityCache.NOT_DRAGGING;
return false;
}
