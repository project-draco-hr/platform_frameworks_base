{
  boolean more=false;
  final boolean childHasIdentityMatrix=hasIdentityMatrix();
  final int flags=parent.mGroupFlags;
  if ((flags & parent.FLAG_CLEAR_TRANSFORMATION) == parent.FLAG_CLEAR_TRANSFORMATION) {
    parent.mChildTransformation.clear();
    parent.mGroupFlags&=~parent.FLAG_CLEAR_TRANSFORMATION;
  }
  Transformation transformToApply=null;
  boolean concatMatrix=false;
  boolean scalingRequired=false;
  boolean caching;
  int layerType=parent.mDrawLayers ? getLayerType() : LAYER_TYPE_NONE;
  final boolean hardwareAccelerated=canvas.isHardwareAccelerated();
  if ((flags & parent.FLAG_CHILDREN_DRAWN_WITH_CACHE) == parent.FLAG_CHILDREN_DRAWN_WITH_CACHE || (flags & parent.FLAG_ALWAYS_DRAWN_WITH_CACHE) == parent.FLAG_ALWAYS_DRAWN_WITH_CACHE) {
    caching=true;
    if (mAttachInfo != null)     scalingRequired=mAttachInfo.mScalingRequired;
  }
 else {
    caching=(layerType != LAYER_TYPE_NONE) || hardwareAccelerated;
  }
  final Animation a=getAnimation();
  if (a != null) {
    more=drawAnimation(parent,drawingTime,a,scalingRequired);
    concatMatrix=a.willChangeTransformationMatrix();
    transformToApply=parent.mChildTransformation;
  }
 else   if ((flags & parent.FLAG_SUPPORT_STATIC_TRANSFORMATIONS) == parent.FLAG_SUPPORT_STATIC_TRANSFORMATIONS) {
    final boolean hasTransform=parent.getChildStaticTransformation(this,parent.mChildTransformation);
    if (hasTransform) {
      final int transformType=parent.mChildTransformation.getTransformationType();
      transformToApply=transformType != Transformation.TYPE_IDENTITY ? parent.mChildTransformation : null;
      concatMatrix=(transformType & Transformation.TYPE_MATRIX) != 0;
    }
  }
  concatMatrix|=!childHasIdentityMatrix;
  mPrivateFlags|=DRAWN;
  if (!concatMatrix && canvas.quickReject(mLeft,mTop,mRight,mBottom,Canvas.EdgeType.BW) && (mPrivateFlags & DRAW_ANIMATION) == 0) {
    return more;
  }
  if (hardwareAccelerated) {
    mRecreateDisplayList=(mPrivateFlags & INVALIDATED) == INVALIDATED;
    mPrivateFlags&=~INVALIDATED;
  }
  computeScroll();
  final int sx=mScrollX;
  final int sy=mScrollY;
  DisplayList displayList=null;
  Bitmap cache=null;
  boolean hasDisplayList=false;
  if (caching) {
    if (!hardwareAccelerated) {
      if (layerType != LAYER_TYPE_NONE) {
        layerType=LAYER_TYPE_SOFTWARE;
        buildDrawingCache(true);
      }
      cache=getDrawingCache(true);
    }
 else {
switch (layerType) {
case LAYER_TYPE_SOFTWARE:
        buildDrawingCache(true);
      cache=getDrawingCache(true);
    break;
case LAYER_TYPE_NONE:
  hasDisplayList=canHaveDisplayList();
break;
}
}
}
final boolean hasNoCache=cache == null || hasDisplayList;
final boolean offsetForScroll=cache == null && !hasDisplayList && layerType != LAYER_TYPE_HARDWARE;
final int restoreTo=canvas.save();
if (offsetForScroll) {
canvas.translate(mLeft - sx,mTop - sy);
}
 else {
canvas.translate(mLeft,mTop);
if (scalingRequired) {
final float scale=1.0f / mAttachInfo.mApplicationScale;
canvas.scale(scale,scale);
}
}
float alpha=getAlpha();
if (transformToApply != null || alpha < 1.0f || !hasIdentityMatrix()) {
if (transformToApply != null || !childHasIdentityMatrix) {
int transX=0;
int transY=0;
if (offsetForScroll) {
transX=-sx;
transY=-sy;
}
if (transformToApply != null) {
if (concatMatrix) {
canvas.translate(-transX,-transY);
canvas.concat(transformToApply.getMatrix());
canvas.translate(transX,transY);
parent.mGroupFlags|=parent.FLAG_CLEAR_TRANSFORMATION;
}
float transformAlpha=transformToApply.getAlpha();
if (transformAlpha < 1.0f) {
alpha*=transformToApply.getAlpha();
parent.mGroupFlags|=parent.FLAG_CLEAR_TRANSFORMATION;
}
}
if (!childHasIdentityMatrix) {
canvas.translate(-transX,-transY);
canvas.concat(getMatrix());
canvas.translate(transX,transY);
}
}
if (alpha < 1.0f) {
parent.mGroupFlags|=parent.FLAG_CLEAR_TRANSFORMATION;
if (hasNoCache) {
final int multipliedAlpha=(int)(255 * alpha);
if (!onSetAlpha(multipliedAlpha)) {
int layerFlags=Canvas.HAS_ALPHA_LAYER_SAVE_FLAG;
if ((flags & parent.FLAG_CLIP_CHILDREN) == parent.FLAG_CLIP_CHILDREN || layerType != LAYER_TYPE_NONE) {
  layerFlags|=Canvas.CLIP_TO_LAYER_SAVE_FLAG;
}
if (layerType == LAYER_TYPE_NONE) {
  final int scrollX=hasDisplayList ? 0 : sx;
  final int scrollY=hasDisplayList ? 0 : sy;
  canvas.saveLayerAlpha(scrollX,scrollY,scrollX + mRight - mLeft,scrollY + mBottom - mTop,multipliedAlpha,layerFlags);
}
}
 else {
mPrivateFlags|=ALPHA_SET;
}
}
}
}
 else if ((mPrivateFlags & ALPHA_SET) == ALPHA_SET) {
onSetAlpha(255);
mPrivateFlags&=~ALPHA_SET;
}
if ((flags & parent.FLAG_CLIP_CHILDREN) == parent.FLAG_CLIP_CHILDREN) {
if (offsetForScroll) {
canvas.clipRect(sx,sy,sx + (mRight - mLeft),sy + (mBottom - mTop));
}
 else {
if (!scalingRequired || cache == null) {
canvas.clipRect(0,0,mRight - mLeft,mBottom - mTop);
}
 else {
canvas.clipRect(0,0,cache.getWidth(),cache.getHeight());
}
}
}
if (hasDisplayList) {
displayList=getDisplayList();
if (!displayList.isValid()) {
displayList=null;
hasDisplayList=false;
}
}
if (hasNoCache) {
boolean layerRendered=false;
if (layerType == LAYER_TYPE_HARDWARE) {
final HardwareLayer layer=getHardwareLayer();
if (layer != null && layer.isValid()) {
mLayerPaint.setAlpha((int)(alpha * 255));
((HardwareCanvas)canvas).drawHardwareLayer(layer,0,0,mLayerPaint);
layerRendered=true;
}
 else {
final int scrollX=hasDisplayList ? 0 : sx;
final int scrollY=hasDisplayList ? 0 : sy;
canvas.saveLayer(scrollX,scrollY,scrollX + mRight - mLeft,scrollY + mBottom - mTop,mLayerPaint,Canvas.HAS_ALPHA_LAYER_SAVE_FLAG | Canvas.CLIP_TO_LAYER_SAVE_FLAG);
}
}
if (!layerRendered) {
if (!hasDisplayList) {
if ((mPrivateFlags & SKIP_DRAW) == SKIP_DRAW) {
if (ViewDebug.TRACE_HIERARCHY) {
  ViewDebug.trace(parent,ViewDebug.HierarchyTraceType.DRAW);
}
mPrivateFlags&=~DIRTY_MASK;
dispatchDraw(canvas);
}
 else {
draw(canvas);
}
}
 else {
mPrivateFlags&=~DIRTY_MASK;
((HardwareCanvas)canvas).drawDisplayList(displayList,mRight - mLeft,mBottom - mTop,null,flags);
}
}
}
 else if (cache != null) {
mPrivateFlags&=~DIRTY_MASK;
Paint cachePaint;
if (layerType == LAYER_TYPE_NONE) {
cachePaint=parent.mCachePaint;
if (cachePaint == null) {
cachePaint=new Paint();
cachePaint.setDither(false);
parent.mCachePaint=cachePaint;
}
if (alpha < 1.0f) {
cachePaint.setAlpha((int)(alpha * 255));
parent.mGroupFlags|=parent.FLAG_ALPHA_LOWER_THAN_ONE;
}
 else if ((flags & parent.FLAG_ALPHA_LOWER_THAN_ONE) == parent.FLAG_ALPHA_LOWER_THAN_ONE) {
cachePaint.setAlpha(255);
parent.mGroupFlags&=~parent.FLAG_ALPHA_LOWER_THAN_ONE;
}
}
 else {
cachePaint=mLayerPaint;
cachePaint.setAlpha((int)(alpha * 255));
}
canvas.drawBitmap(cache,0.0f,0.0f,cachePaint);
}
canvas.restoreToCount(restoreTo);
if (a != null && !more) {
if (!hardwareAccelerated && !a.getFillAfter()) {
onSetAlpha(255);
}
parent.finishAnimatingView(this,a);
}
if (more && hardwareAccelerated) {
parent.invalidate(true);
if (a.hasAlpha() && (mPrivateFlags & ALPHA_SET) == ALPHA_SET) {
invalidate(true);
}
}
mRecreateDisplayList=false;
return more;
}
