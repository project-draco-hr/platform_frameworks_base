{
  final boolean hardwareAcceleratedCanvas=canvas.isHardwareAccelerated();
  boolean drawingWithRenderNode=mAttachInfo != null && mAttachInfo.mHardwareAccelerated && hardwareAcceleratedCanvas;
  boolean more=false;
  final boolean childHasIdentityMatrix=hasIdentityMatrix();
  final int parentFlags=parent.mGroupFlags;
  if ((parentFlags & ViewGroup.FLAG_CLEAR_TRANSFORMATION) != 0) {
    parent.getChildTransformation().clear();
    parent.mGroupFlags&=~ViewGroup.FLAG_CLEAR_TRANSFORMATION;
  }
  Transformation transformToApply=null;
  boolean concatMatrix=false;
  final boolean scalingRequired=mAttachInfo != null && mAttachInfo.mScalingRequired;
  final Animation a=getAnimation();
  if (a != null) {
    more=applyLegacyAnimation(parent,drawingTime,a,scalingRequired);
    concatMatrix=a.willChangeTransformationMatrix();
    if (concatMatrix) {
      mPrivateFlags3|=PFLAG3_VIEW_IS_ANIMATING_TRANSFORM;
    }
    transformToApply=parent.getChildTransformation();
  }
 else {
    if ((mPrivateFlags3 & PFLAG3_VIEW_IS_ANIMATING_TRANSFORM) != 0) {
      mRenderNode.setAnimationMatrix(null);
      mPrivateFlags3&=~PFLAG3_VIEW_IS_ANIMATING_TRANSFORM;
    }
    if (!drawingWithRenderNode && (parentFlags & ViewGroup.FLAG_SUPPORT_STATIC_TRANSFORMATIONS) != 0) {
      final Transformation t=parent.getChildTransformation();
      final boolean hasTransform=parent.getChildStaticTransformation(this,t);
      if (hasTransform) {
        final int transformType=t.getTransformationType();
        transformToApply=transformType != Transformation.TYPE_IDENTITY ? t : null;
        concatMatrix=(transformType & Transformation.TYPE_MATRIX) != 0;
      }
    }
  }
  concatMatrix|=!childHasIdentityMatrix;
  mPrivateFlags|=PFLAG_DRAWN;
  if (!concatMatrix && (parentFlags & (ViewGroup.FLAG_SUPPORT_STATIC_TRANSFORMATIONS | ViewGroup.FLAG_CLIP_CHILDREN)) == ViewGroup.FLAG_CLIP_CHILDREN && canvas.quickReject(mLeft,mTop,mRight,mBottom,Canvas.EdgeType.BW) && (mPrivateFlags & PFLAG_DRAW_ANIMATION) == 0) {
    mPrivateFlags2|=PFLAG2_VIEW_QUICK_REJECTED;
    return more;
  }
  mPrivateFlags2&=~PFLAG2_VIEW_QUICK_REJECTED;
  if (hardwareAcceleratedCanvas) {
    mRecreateDisplayList=(mPrivateFlags & PFLAG_INVALIDATED) != 0;
    mPrivateFlags&=~PFLAG_INVALIDATED;
  }
  RenderNode renderNode=null;
  Bitmap cache=null;
  int layerType=getLayerType();
  if (layerType == LAYER_TYPE_SOFTWARE || !drawingWithRenderNode) {
    if (layerType != LAYER_TYPE_NONE) {
      layerType=LAYER_TYPE_SOFTWARE;
      buildDrawingCache(true);
    }
    cache=getDrawingCache(true);
  }
  if (drawingWithRenderNode) {
    renderNode=updateDisplayListIfDirty();
    if (!renderNode.isValid()) {
      renderNode=null;
      drawingWithRenderNode=false;
    }
  }
  int sx=0;
  int sy=0;
  if (!drawingWithRenderNode) {
    computeScroll();
    sx=mScrollX;
    sy=mScrollY;
  }
  final boolean drawingWithDrawingCache=cache != null && !drawingWithRenderNode;
  final boolean offsetForScroll=cache == null && !drawingWithRenderNode;
  int restoreTo=-1;
  if (!drawingWithRenderNode || transformToApply != null) {
    restoreTo=canvas.save();
  }
  if (offsetForScroll) {
    canvas.translate(mLeft - sx,mTop - sy);
  }
 else {
    if (!drawingWithRenderNode) {
      canvas.translate(mLeft,mTop);
    }
    if (scalingRequired) {
      if (drawingWithRenderNode) {
        restoreTo=canvas.save();
      }
      final float scale=1.0f / mAttachInfo.mApplicationScale;
      canvas.scale(scale,scale);
    }
  }
  float alpha=drawingWithRenderNode ? 1 : (getAlpha() * getTransitionAlpha());
  if (transformToApply != null || alpha < 1 || !hasIdentityMatrix() || (mPrivateFlags3 & PFLAG3_VIEW_IS_ANIMATING_ALPHA) != 0) {
    if (transformToApply != null || !childHasIdentityMatrix) {
      int transX=0;
      int transY=0;
      if (offsetForScroll) {
        transX=-sx;
        transY=-sy;
      }
      if (transformToApply != null) {
        if (concatMatrix) {
          if (drawingWithRenderNode) {
            renderNode.setAnimationMatrix(transformToApply.getMatrix());
          }
 else {
            canvas.translate(-transX,-transY);
            canvas.concat(transformToApply.getMatrix());
            canvas.translate(transX,transY);
          }
          parent.mGroupFlags|=ViewGroup.FLAG_CLEAR_TRANSFORMATION;
        }
        float transformAlpha=transformToApply.getAlpha();
        if (transformAlpha < 1) {
          alpha*=transformAlpha;
          parent.mGroupFlags|=ViewGroup.FLAG_CLEAR_TRANSFORMATION;
        }
      }
      if (!childHasIdentityMatrix && !drawingWithRenderNode) {
        canvas.translate(-transX,-transY);
        canvas.concat(getMatrix());
        canvas.translate(transX,transY);
      }
    }
    if (alpha < 1 || (mPrivateFlags3 & PFLAG3_VIEW_IS_ANIMATING_ALPHA) != 0) {
      if (alpha < 1) {
        mPrivateFlags3|=PFLAG3_VIEW_IS_ANIMATING_ALPHA;
      }
 else {
        mPrivateFlags3&=~PFLAG3_VIEW_IS_ANIMATING_ALPHA;
      }
      parent.mGroupFlags|=ViewGroup.FLAG_CLEAR_TRANSFORMATION;
      if (!drawingWithDrawingCache) {
        final int multipliedAlpha=(int)(255 * alpha);
        if (!onSetAlpha(multipliedAlpha)) {
          if (drawingWithRenderNode) {
            renderNode.setAlpha(alpha * getAlpha() * getTransitionAlpha());
          }
 else           if (layerType == LAYER_TYPE_NONE) {
            canvas.saveLayerAlpha(sx,sy,sx + getWidth(),sy + getHeight(),multipliedAlpha);
          }
        }
 else {
          mPrivateFlags|=PFLAG_ALPHA_SET;
        }
      }
    }
  }
 else   if ((mPrivateFlags & PFLAG_ALPHA_SET) == PFLAG_ALPHA_SET) {
    onSetAlpha(255);
    mPrivateFlags&=~PFLAG_ALPHA_SET;
  }
  if (!drawingWithRenderNode) {
    if ((parentFlags & ViewGroup.FLAG_CLIP_CHILDREN) != 0 && cache == null) {
      if (offsetForScroll) {
        canvas.clipRect(sx,sy,sx + getWidth(),sy + getHeight());
      }
 else {
        if (!scalingRequired || cache == null) {
          canvas.clipRect(0,0,getWidth(),getHeight());
        }
 else {
          canvas.clipRect(0,0,cache.getWidth(),cache.getHeight());
        }
      }
    }
    if (mClipBounds != null) {
      canvas.clipRect(mClipBounds);
    }
  }
  if (!drawingWithDrawingCache) {
    if (drawingWithRenderNode) {
      mPrivateFlags&=~PFLAG_DIRTY_MASK;
      ((DisplayListCanvas)canvas).drawRenderNode(renderNode);
    }
 else {
      if ((mPrivateFlags & PFLAG_SKIP_DRAW) == PFLAG_SKIP_DRAW) {
        mPrivateFlags&=~PFLAG_DIRTY_MASK;
        dispatchDraw(canvas);
      }
 else {
        draw(canvas);
      }
    }
  }
 else   if (cache != null) {
    mPrivateFlags&=~PFLAG_DIRTY_MASK;
    if (layerType == LAYER_TYPE_NONE || mLayerPaint == null) {
      Paint cachePaint=parent.mCachePaint;
      if (cachePaint == null) {
        cachePaint=new Paint();
        cachePaint.setDither(false);
        parent.mCachePaint=cachePaint;
      }
      cachePaint.setAlpha((int)(alpha * 255));
      canvas.drawBitmap(cache,0.0f,0.0f,cachePaint);
    }
 else {
      int layerPaintAlpha=mLayerPaint.getAlpha();
      if (alpha < 1) {
        mLayerPaint.setAlpha((int)(alpha * layerPaintAlpha));
      }
      canvas.drawBitmap(cache,0.0f,0.0f,mLayerPaint);
      if (alpha < 1) {
        mLayerPaint.setAlpha(layerPaintAlpha);
      }
    }
  }
  if (restoreTo >= 0) {
    canvas.restoreToCount(restoreTo);
  }
  if (a != null && !more) {
    if (!hardwareAcceleratedCanvas && !a.getFillAfter()) {
      onSetAlpha(255);
    }
    parent.finishAnimatingView(this,a);
  }
  if (more && hardwareAcceleratedCanvas) {
    if (a.hasAlpha() && (mPrivateFlags & PFLAG_ALPHA_SET) == PFLAG_ALPHA_SET) {
      invalidate(true);
    }
  }
  mRecreateDisplayList=false;
  return more;
}
