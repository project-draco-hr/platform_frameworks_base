{
  boolean usingRenderNodeProperties=mAttachInfo != null && mAttachInfo.mHardwareAccelerated;
  boolean more=false;
  final boolean childHasIdentityMatrix=hasIdentityMatrix();
  final int flags=parent.mGroupFlags;
  if ((flags & ViewGroup.FLAG_CLEAR_TRANSFORMATION) == ViewGroup.FLAG_CLEAR_TRANSFORMATION) {
    parent.getChildTransformation().clear();
    parent.mGroupFlags&=~ViewGroup.FLAG_CLEAR_TRANSFORMATION;
  }
  Transformation transformToApply=null;
  boolean concatMatrix=false;
  boolean scalingRequired=false;
  boolean caching;
  int layerType=getLayerType();
  final boolean hardwareAccelerated=canvas.isHardwareAccelerated();
  if ((flags & ViewGroup.FLAG_CHILDREN_DRAWN_WITH_CACHE) != 0 || (flags & ViewGroup.FLAG_ALWAYS_DRAWN_WITH_CACHE) != 0) {
    caching=true;
    if (mAttachInfo != null)     scalingRequired=mAttachInfo.mScalingRequired;
  }
 else {
    caching=(layerType != LAYER_TYPE_NONE) || hardwareAccelerated;
  }
  final Animation a=getAnimation();
  if (a != null) {
    more=drawAnimation(parent,drawingTime,a,scalingRequired);
    concatMatrix=a.willChangeTransformationMatrix();
    if (concatMatrix) {
      mPrivateFlags3|=PFLAG3_VIEW_IS_ANIMATING_TRANSFORM;
    }
    transformToApply=parent.getChildTransformation();
  }
 else {
    if ((mPrivateFlags3 & PFLAG3_VIEW_IS_ANIMATING_TRANSFORM) != 0) {
      mRenderNode.setAnimationMatrix(null);
      mPrivateFlags3&=~PFLAG3_VIEW_IS_ANIMATING_TRANSFORM;
    }
    if (!usingRenderNodeProperties && (flags & ViewGroup.FLAG_SUPPORT_STATIC_TRANSFORMATIONS) != 0) {
      final Transformation t=parent.getChildTransformation();
      final boolean hasTransform=parent.getChildStaticTransformation(this,t);
      if (hasTransform) {
        final int transformType=t.getTransformationType();
        transformToApply=transformType != Transformation.TYPE_IDENTITY ? t : null;
        concatMatrix=(transformType & Transformation.TYPE_MATRIX) != 0;
      }
    }
  }
  concatMatrix|=!childHasIdentityMatrix;
  mPrivateFlags|=PFLAG_DRAWN;
  if (!concatMatrix && (flags & (ViewGroup.FLAG_SUPPORT_STATIC_TRANSFORMATIONS | ViewGroup.FLAG_CLIP_CHILDREN)) == ViewGroup.FLAG_CLIP_CHILDREN && canvas.quickReject(mLeft,mTop,mRight,mBottom,Canvas.EdgeType.BW) && (mPrivateFlags & PFLAG_DRAW_ANIMATION) == 0) {
    mPrivateFlags2|=PFLAG2_VIEW_QUICK_REJECTED;
    return more;
  }
  mPrivateFlags2&=~PFLAG2_VIEW_QUICK_REJECTED;
  if (hardwareAccelerated) {
    mRecreateDisplayList=(mPrivateFlags & PFLAG_INVALIDATED) == PFLAG_INVALIDATED;
    mPrivateFlags&=~PFLAG_INVALIDATED;
  }
  RenderNode renderNode=null;
  Bitmap cache=null;
  boolean hasDisplayList=false;
  if (caching) {
    if (!hardwareAccelerated) {
      if (layerType != LAYER_TYPE_NONE) {
        layerType=LAYER_TYPE_SOFTWARE;
        buildDrawingCache(true);
      }
      cache=getDrawingCache(true);
    }
 else {
switch (layerType) {
case LAYER_TYPE_SOFTWARE:
        if (usingRenderNodeProperties) {
          hasDisplayList=canHaveDisplayList();
        }
 else {
          buildDrawingCache(true);
          cache=getDrawingCache(true);
        }
      break;
case LAYER_TYPE_HARDWARE:
    if (usingRenderNodeProperties) {
      hasDisplayList=canHaveDisplayList();
    }
  break;
case LAYER_TYPE_NONE:
hasDisplayList=canHaveDisplayList();
break;
}
}
}
usingRenderNodeProperties&=hasDisplayList;
if (usingRenderNodeProperties) {
renderNode=getDisplayList();
if (!renderNode.isValid()) {
renderNode=null;
hasDisplayList=false;
usingRenderNodeProperties=false;
}
}
int sx=0;
int sy=0;
if (!hasDisplayList) {
computeScroll();
sx=mScrollX;
sy=mScrollY;
}
final boolean hasNoCache=cache == null || hasDisplayList;
final boolean offsetForScroll=cache == null && !hasDisplayList && layerType != LAYER_TYPE_HARDWARE;
int restoreTo=-1;
if (!usingRenderNodeProperties || transformToApply != null) {
restoreTo=canvas.save();
}
if (offsetForScroll) {
canvas.translate(mLeft - sx,mTop - sy);
}
 else {
if (!usingRenderNodeProperties) {
canvas.translate(mLeft,mTop);
}
if (scalingRequired) {
if (usingRenderNodeProperties) {
restoreTo=canvas.save();
}
final float scale=1.0f / mAttachInfo.mApplicationScale;
canvas.scale(scale,scale);
}
}
float alpha=usingRenderNodeProperties ? 1 : (getAlpha() * getTransitionAlpha());
if (transformToApply != null || alpha < 1 || !hasIdentityMatrix() || (mPrivateFlags3 & PFLAG3_VIEW_IS_ANIMATING_ALPHA) == PFLAG3_VIEW_IS_ANIMATING_ALPHA) {
if (transformToApply != null || !childHasIdentityMatrix) {
int transX=0;
int transY=0;
if (offsetForScroll) {
transX=-sx;
transY=-sy;
}
if (transformToApply != null) {
if (concatMatrix) {
if (usingRenderNodeProperties) {
renderNode.setAnimationMatrix(transformToApply.getMatrix());
}
 else {
canvas.translate(-transX,-transY);
canvas.concat(transformToApply.getMatrix());
canvas.translate(transX,transY);
}
parent.mGroupFlags|=ViewGroup.FLAG_CLEAR_TRANSFORMATION;
}
float transformAlpha=transformToApply.getAlpha();
if (transformAlpha < 1) {
alpha*=transformAlpha;
parent.mGroupFlags|=ViewGroup.FLAG_CLEAR_TRANSFORMATION;
}
}
if (!childHasIdentityMatrix && !usingRenderNodeProperties) {
canvas.translate(-transX,-transY);
canvas.concat(getMatrix());
canvas.translate(transX,transY);
}
}
if (alpha < 1 || (mPrivateFlags3 & PFLAG3_VIEW_IS_ANIMATING_ALPHA) == PFLAG3_VIEW_IS_ANIMATING_ALPHA) {
if (alpha < 1) {
mPrivateFlags3|=PFLAG3_VIEW_IS_ANIMATING_ALPHA;
}
 else {
mPrivateFlags3&=~PFLAG3_VIEW_IS_ANIMATING_ALPHA;
}
parent.mGroupFlags|=ViewGroup.FLAG_CLEAR_TRANSFORMATION;
if (hasNoCache) {
final int multipliedAlpha=(int)(255 * alpha);
if (!onSetAlpha(multipliedAlpha)) {
int layerFlags=Canvas.HAS_ALPHA_LAYER_SAVE_FLAG;
if ((flags & ViewGroup.FLAG_CLIP_CHILDREN) != 0 || layerType != LAYER_TYPE_NONE) {
layerFlags|=Canvas.CLIP_TO_LAYER_SAVE_FLAG;
}
if (usingRenderNodeProperties) {
renderNode.setAlpha(alpha * getAlpha() * getTransitionAlpha());
}
 else if (layerType == LAYER_TYPE_NONE) {
final int scrollX=hasDisplayList ? 0 : sx;
final int scrollY=hasDisplayList ? 0 : sy;
canvas.saveLayerAlpha(scrollX,scrollY,scrollX + (mRight - mLeft),scrollY + (mBottom - mTop),multipliedAlpha,layerFlags);
}
}
 else {
mPrivateFlags|=PFLAG_ALPHA_SET;
}
}
}
}
 else if ((mPrivateFlags & PFLAG_ALPHA_SET) == PFLAG_ALPHA_SET) {
onSetAlpha(255);
mPrivateFlags&=~PFLAG_ALPHA_SET;
}
if (!usingRenderNodeProperties) {
if ((flags & ViewGroup.FLAG_CLIP_CHILDREN) == ViewGroup.FLAG_CLIP_CHILDREN && cache == null) {
if (offsetForScroll) {
canvas.clipRect(sx,sy,sx + (mRight - mLeft),sy + (mBottom - mTop));
}
 else {
if (!scalingRequired || cache == null) {
canvas.clipRect(0,0,mRight - mLeft,mBottom - mTop);
}
 else {
canvas.clipRect(0,0,cache.getWidth(),cache.getHeight());
}
}
}
if (mClipBounds != null) {
canvas.clipRect(mClipBounds);
}
}
if (!usingRenderNodeProperties && hasDisplayList) {
renderNode=getDisplayList();
if (!renderNode.isValid()) {
renderNode=null;
hasDisplayList=false;
}
}
if (hasNoCache) {
boolean layerRendered=false;
if (layerType == LAYER_TYPE_HARDWARE && !usingRenderNodeProperties) {
final HardwareLayer layer=getHardwareLayer();
if (layer != null && layer.isValid()) {
int restoreAlpha=mLayerPaint.getAlpha();
mLayerPaint.setAlpha((int)(alpha * 255));
((DisplayListCanvas)canvas).drawHardwareLayer(layer,0,0,mLayerPaint);
mLayerPaint.setAlpha(restoreAlpha);
layerRendered=true;
}
 else {
final int scrollX=hasDisplayList ? 0 : sx;
final int scrollY=hasDisplayList ? 0 : sy;
canvas.saveLayer(scrollX,scrollY,scrollX + mRight - mLeft,scrollY + mBottom - mTop,mLayerPaint,Canvas.HAS_ALPHA_LAYER_SAVE_FLAG | Canvas.CLIP_TO_LAYER_SAVE_FLAG);
}
}
if (!layerRendered) {
if (!hasDisplayList) {
if ((mPrivateFlags & PFLAG_SKIP_DRAW) == PFLAG_SKIP_DRAW) {
mPrivateFlags&=~PFLAG_DIRTY_MASK;
dispatchDraw(canvas);
}
 else {
draw(canvas);
}
}
 else {
mPrivateFlags&=~PFLAG_DIRTY_MASK;
((DisplayListCanvas)canvas).drawRenderNode(renderNode,flags);
}
}
}
 else if (cache != null) {
mPrivateFlags&=~PFLAG_DIRTY_MASK;
Paint cachePaint;
int restoreAlpha=0;
if (layerType == LAYER_TYPE_NONE) {
cachePaint=parent.mCachePaint;
if (cachePaint == null) {
cachePaint=new Paint();
cachePaint.setDither(false);
parent.mCachePaint=cachePaint;
}
}
 else {
cachePaint=mLayerPaint;
restoreAlpha=mLayerPaint.getAlpha();
}
cachePaint.setAlpha((int)(alpha * 255));
canvas.drawBitmap(cache,0.0f,0.0f,cachePaint);
cachePaint.setAlpha(restoreAlpha);
}
if (restoreTo >= 0) {
canvas.restoreToCount(restoreTo);
}
if (a != null && !more) {
if (!hardwareAccelerated && !a.getFillAfter()) {
onSetAlpha(255);
}
parent.finishAnimatingView(this,a);
}
if (more && hardwareAccelerated) {
if (a.hasAlpha() && (mPrivateFlags & PFLAG_ALPHA_SET) == PFLAG_ALPHA_SET) {
invalidate(true);
}
}
mRecreateDisplayList=false;
return more;
}
