{
  if (isNestedScrollingEnabled() && (action == AccessibilityNodeInfo.ACTION_SCROLL_BACKWARD || action == AccessibilityNodeInfo.ACTION_SCROLL_FORWARD || action == R.id.accessibilityActionScrollUp || action == R.id.accessibilityActionScrollLeft || action == R.id.accessibilityActionScrollDown || action == R.id.accessibilityActionScrollRight)) {
    if (dispatchNestedPrePerformAccessibilityAction(action,arguments)) {
      return true;
    }
  }
switch (action) {
case AccessibilityNodeInfo.ACTION_CLICK:
{
      if (isClickable()) {
        performClick();
        return true;
      }
    }
  break;
case AccessibilityNodeInfo.ACTION_LONG_CLICK:
{
  if (isLongClickable()) {
    performLongClick();
    return true;
  }
}
break;
case AccessibilityNodeInfo.ACTION_FOCUS:
{
if (!hasFocus()) {
getViewRootImpl().ensureTouchMode(false);
return requestFocus();
}
}
break;
case AccessibilityNodeInfo.ACTION_CLEAR_FOCUS:
{
if (hasFocus()) {
clearFocus();
return !isFocused();
}
}
break;
case AccessibilityNodeInfo.ACTION_SELECT:
{
if (!isSelected()) {
setSelected(true);
return isSelected();
}
}
break;
case AccessibilityNodeInfo.ACTION_CLEAR_SELECTION:
{
if (isSelected()) {
setSelected(false);
return !isSelected();
}
}
break;
case AccessibilityNodeInfo.ACTION_ACCESSIBILITY_FOCUS:
{
if (!isAccessibilityFocused()) {
return requestAccessibilityFocus();
}
}
break;
case AccessibilityNodeInfo.ACTION_CLEAR_ACCESSIBILITY_FOCUS:
{
if (isAccessibilityFocused()) {
clearAccessibilityFocus();
return true;
}
}
break;
case AccessibilityNodeInfo.ACTION_NEXT_AT_MOVEMENT_GRANULARITY:
{
if (arguments != null) {
final int granularity=arguments.getInt(AccessibilityNodeInfo.ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT);
final boolean extendSelection=arguments.getBoolean(AccessibilityNodeInfo.ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN);
return traverseAtGranularity(granularity,true,extendSelection);
}
}
break;
case AccessibilityNodeInfo.ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY:
{
if (arguments != null) {
final int granularity=arguments.getInt(AccessibilityNodeInfo.ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT);
final boolean extendSelection=arguments.getBoolean(AccessibilityNodeInfo.ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN);
return traverseAtGranularity(granularity,false,extendSelection);
}
}
break;
case AccessibilityNodeInfo.ACTION_SET_SELECTION:
{
CharSequence text=getIterableTextForAccessibility();
if (text == null) {
return false;
}
final int start=(arguments != null) ? arguments.getInt(AccessibilityNodeInfo.ACTION_ARGUMENT_SELECTION_START_INT,-1) : -1;
final int end=(arguments != null) ? arguments.getInt(AccessibilityNodeInfo.ACTION_ARGUMENT_SELECTION_END_INT,-1) : -1;
if ((getAccessibilitySelectionStart() != start || getAccessibilitySelectionEnd() != end) && (start == end)) {
setAccessibilitySelection(start,end);
notifyViewAccessibilityStateChangedIfNeeded(AccessibilityEvent.CONTENT_CHANGE_TYPE_UNDEFINED);
return true;
}
}
break;
case R.id.accessibilityActionShowOnScreen:
{
if (mAttachInfo != null) {
final Rect r=mAttachInfo.mTmpInvalRect;
getDrawingRect(r);
return requestRectangleOnScreen(r,true);
}
}
break;
case R.id.accessibilityActionStylusButtonPress:
{
if (isStylusButtonPressable()) {
performStylusButtonPress();
return true;
}
}
break;
}
return false;
}
