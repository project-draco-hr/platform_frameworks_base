{
  Transformation invalidationTransform;
  final int flags=parent.mGroupFlags;
  final boolean initialized=a.isInitialized();
  if (!initialized) {
    a.initialize(mRight - mLeft,mBottom - mTop,getWidth(),getHeight());
    a.initializeInvalidateRegion(0,0,mRight - mLeft,mBottom - mTop);
    onAnimationStart();
  }
  boolean more=a.getTransformation(drawingTime,parent.mChildTransformation,1f);
  if (scalingRequired && mAttachInfo.mApplicationScale != 1f) {
    if (parent.mInvalidationTransformation == null) {
      parent.mInvalidationTransformation=new Transformation();
    }
    invalidationTransform=parent.mInvalidationTransformation;
    a.getTransformation(drawingTime,invalidationTransform,1f);
  }
 else {
    invalidationTransform=parent.mChildTransformation;
  }
  if (more) {
    if (!a.willChangeBounds()) {
      if ((flags & (parent.FLAG_OPTIMIZE_INVALIDATE | parent.FLAG_ANIMATION_DONE)) == parent.FLAG_OPTIMIZE_INVALIDATE) {
        parent.mGroupFlags|=parent.FLAG_INVALIDATE_REQUIRED;
      }
 else       if ((flags & parent.FLAG_INVALIDATE_REQUIRED) == 0) {
        parent.mPrivateFlags|=DRAW_ANIMATION;
        parent.invalidate(mLeft,mTop,mRight,mBottom);
      }
    }
 else {
      if (parent.mInvalidateRegion == null) {
        parent.mInvalidateRegion=new RectF();
      }
      final RectF region=parent.mInvalidateRegion;
      a.getInvalidateRegion(0,0,mRight - mLeft,mBottom - mTop,region,invalidationTransform);
      parent.mPrivateFlags|=DRAW_ANIMATION;
      final int left=mLeft + (int)region.left;
      final int top=mTop + (int)region.top;
      parent.invalidate(left,top,left + (int)(region.width() + .5f),top + (int)(region.height() + .5f));
    }
  }
  return more;
}
