{
  if (mClipBounds != null) {
    canvas.clipRect(mClipBounds);
  }
  final int privateFlags=mPrivateFlags;
  final boolean dirtyOpaque=(privateFlags & PFLAG_DIRTY_MASK) == PFLAG_DIRTY_OPAQUE && (mAttachInfo == null || !mAttachInfo.mIgnoreDirtyState);
  mPrivateFlags=(privateFlags & ~PFLAG_DIRTY_MASK) | PFLAG_DRAWN;
  int saveCount;
  if (!dirtyOpaque) {
    final Drawable background=mBackground;
    if (background != null) {
      final int scrollX=mScrollX;
      final int scrollY=mScrollY;
      if (mBackgroundSizeChanged) {
        background.setBounds(0,0,mRight - mLeft,mBottom - mTop);
        mBackgroundSizeChanged=false;
      }
      if ((scrollX | scrollY) == 0) {
        background.draw(canvas);
      }
 else {
        canvas.translate(scrollX,scrollY);
        background.draw(canvas);
        canvas.translate(-scrollX,-scrollY);
      }
    }
  }
  final int viewFlags=mViewFlags;
  boolean horizontalEdges=(viewFlags & FADING_EDGE_HORIZONTAL) != 0;
  boolean verticalEdges=(viewFlags & FADING_EDGE_VERTICAL) != 0;
  if (!verticalEdges && !horizontalEdges) {
    if (!dirtyOpaque)     onDraw(canvas);
    dispatchDraw(canvas);
    onDrawScrollBars(canvas);
    if (mOverlay != null && !mOverlay.isEmpty()) {
      mOverlay.getOverlayView().dispatchDraw(canvas);
    }
    return;
  }
  boolean drawTop=false;
  boolean drawBottom=false;
  boolean drawLeft=false;
  boolean drawRight=false;
  float topFadeStrength=0.0f;
  float bottomFadeStrength=0.0f;
  float leftFadeStrength=0.0f;
  float rightFadeStrength=0.0f;
  int paddingLeft=mPaddingLeft;
  final boolean offsetRequired=isPaddingOffsetRequired();
  if (offsetRequired) {
    paddingLeft+=getLeftPaddingOffset();
  }
  int left=mScrollX + paddingLeft;
  int right=left + mRight - mLeft - mPaddingRight - paddingLeft;
  int top=mScrollY + getFadeTop(offsetRequired);
  int bottom=top + getFadeHeight(offsetRequired);
  if (offsetRequired) {
    right+=getRightPaddingOffset();
    bottom+=getBottomPaddingOffset();
  }
  final ScrollabilityCache scrollabilityCache=mScrollCache;
  final float fadeHeight=scrollabilityCache.fadingEdgeLength;
  int length=(int)fadeHeight;
  if (verticalEdges && (top + length > bottom - length)) {
    length=(bottom - top) / 2;
  }
  if (horizontalEdges && (left + length > right - length)) {
    length=(right - left) / 2;
  }
  if (verticalEdges) {
    topFadeStrength=Math.max(0.0f,Math.min(1.0f,getTopFadingEdgeStrength()));
    drawTop=topFadeStrength * fadeHeight > 1.0f;
    bottomFadeStrength=Math.max(0.0f,Math.min(1.0f,getBottomFadingEdgeStrength()));
    drawBottom=bottomFadeStrength * fadeHeight > 1.0f;
  }
  if (horizontalEdges) {
    leftFadeStrength=Math.max(0.0f,Math.min(1.0f,getLeftFadingEdgeStrength()));
    drawLeft=leftFadeStrength * fadeHeight > 1.0f;
    rightFadeStrength=Math.max(0.0f,Math.min(1.0f,getRightFadingEdgeStrength()));
    drawRight=rightFadeStrength * fadeHeight > 1.0f;
  }
  saveCount=canvas.getSaveCount();
  int solidColor=getSolidColor();
  if (solidColor == 0) {
    final int flags=Canvas.HAS_ALPHA_LAYER_SAVE_FLAG;
    if (drawTop) {
      canvas.saveLayer(left,top,right,top + length,null,flags);
    }
    if (drawBottom) {
      canvas.saveLayer(left,bottom - length,right,bottom,null,flags);
    }
    if (drawLeft) {
      canvas.saveLayer(left,top,left + length,bottom,null,flags);
    }
    if (drawRight) {
      canvas.saveLayer(right - length,top,right,bottom,null,flags);
    }
  }
 else {
    scrollabilityCache.setFadeColor(solidColor);
  }
  if (!dirtyOpaque)   onDraw(canvas);
  dispatchDraw(canvas);
  final Paint p=scrollabilityCache.paint;
  final Matrix matrix=scrollabilityCache.matrix;
  final Shader fade=scrollabilityCache.shader;
  if (drawTop) {
    matrix.setScale(1,fadeHeight * topFadeStrength);
    matrix.postTranslate(left,top);
    fade.setLocalMatrix(matrix);
    canvas.drawRect(left,top,right,top + length,p);
  }
  if (drawBottom) {
    matrix.setScale(1,fadeHeight * bottomFadeStrength);
    matrix.postRotate(180);
    matrix.postTranslate(left,bottom);
    fade.setLocalMatrix(matrix);
    canvas.drawRect(left,bottom - length,right,bottom,p);
  }
  if (drawLeft) {
    matrix.setScale(1,fadeHeight * leftFadeStrength);
    matrix.postRotate(-90);
    matrix.postTranslate(left,top);
    fade.setLocalMatrix(matrix);
    canvas.drawRect(left,top,left + length,bottom,p);
  }
  if (drawRight) {
    matrix.setScale(1,fadeHeight * rightFadeStrength);
    matrix.postRotate(90);
    matrix.postTranslate(right,top);
    fade.setLocalMatrix(matrix);
    canvas.drawRect(right - length,top,right,bottom,p);
  }
  canvas.restoreToCount(saveCount);
  onDrawScrollBars(canvas);
  if (mOverlay != null && !mOverlay.isEmpty()) {
    mOverlay.getOverlayView().dispatchDraw(canvas);
  }
}
