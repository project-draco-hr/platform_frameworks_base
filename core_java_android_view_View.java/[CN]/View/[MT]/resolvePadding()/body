{
  final int targetSdkVersion=getContext().getApplicationInfo().targetSdkVersion;
  if (targetSdkVersion < JELLY_BEAN_MR1 || !hasRtlSupport()) {
    if (mUserPaddingLeftInitial == UNDEFINED_PADDING && mUserPaddingStart != UNDEFINED_PADDING) {
      mUserPaddingLeft=mUserPaddingStart;
    }
    if (mUserPaddingRightInitial == UNDEFINED_PADDING && mUserPaddingEnd != UNDEFINED_PADDING) {
      mUserPaddingRight=mUserPaddingEnd;
    }
    mUserPaddingBottom=(mUserPaddingBottom >= 0) ? mUserPaddingBottom : mPaddingBottom;
    internalSetPadding(mUserPaddingLeft,mPaddingTop,mUserPaddingRight,mUserPaddingBottom);
  }
 else {
    int resolvedLayoutDirection=getLayoutDirection();
    mUserPaddingLeft=(mUserPaddingLeftInitial == UNDEFINED_PADDING) ? 0 : mUserPaddingLeftInitial;
    mUserPaddingRight=(mUserPaddingRightInitial == UNDEFINED_PADDING) ? 0 : mUserPaddingRightInitial;
switch (resolvedLayoutDirection) {
case LAYOUT_DIRECTION_RTL:
      if (mUserPaddingStart != UNDEFINED_PADDING) {
        mUserPaddingRight=mUserPaddingStart;
      }
    if (mUserPaddingEnd != UNDEFINED_PADDING) {
      mUserPaddingLeft=mUserPaddingEnd;
    }
  break;
case LAYOUT_DIRECTION_LTR:
default :
if (mUserPaddingStart != UNDEFINED_PADDING) {
  mUserPaddingLeft=mUserPaddingStart;
}
if (mUserPaddingEnd != UNDEFINED_PADDING) {
mUserPaddingRight=mUserPaddingEnd;
}
}
mUserPaddingBottom=(mUserPaddingBottom >= 0) ? mUserPaddingBottom : mPaddingBottom;
internalSetPadding(mUserPaddingLeft,mPaddingTop,mUserPaddingRight,mUserPaddingBottom);
onPaddingChanged(resolvedLayoutDirection);
}
mPrivateFlags2|=PFLAG2_PADDING_RESOLVED;
}
