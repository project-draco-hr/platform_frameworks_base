{
  if (!canHaveDisplayList()) {
    return null;
  }
  if (((mPrivateFlags & DRAWING_CACHE_VALID) == 0 || mDisplayList == null || !mDisplayList.isValid() || mRecreateDisplayList)) {
    if (mDisplayList != null && mDisplayList.isValid() && !mRecreateDisplayList) {
      mPrivateFlags|=DRAWN | DRAWING_CACHE_VALID;
      mPrivateFlags&=~DIRTY_MASK;
      dispatchGetDisplayList();
      return mDisplayList;
    }
    mRecreateDisplayList=true;
    if (mDisplayList == null) {
      final String name=getClass().getSimpleName();
      mDisplayList=mAttachInfo.mHardwareRenderer.createDisplayList(name);
      invalidateParentCaches();
    }
    final HardwareCanvas canvas=mDisplayList.start();
    int restoreCount=0;
    try {
      int width=mRight - mLeft;
      int height=mBottom - mTop;
      canvas.setViewport(width,height);
      canvas.onPreDraw(null);
      computeScroll();
      restoreCount=canvas.save();
      canvas.translate(-mScrollX,-mScrollY);
      mPrivateFlags|=DRAWN | DRAWING_CACHE_VALID;
      mPrivateFlags&=~DIRTY_MASK;
      if ((mPrivateFlags & SKIP_DRAW) == SKIP_DRAW) {
        dispatchDraw(canvas);
      }
 else {
        draw(canvas);
      }
    }
  finally {
      canvas.restoreToCount(restoreCount);
      canvas.onPostDraw();
      mDisplayList.end();
    }
  }
 else {
    mPrivateFlags|=DRAWN | DRAWING_CACHE_VALID;
    mPrivateFlags&=~DIRTY_MASK;
  }
  return mDisplayList;
}
