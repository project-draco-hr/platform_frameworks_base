{
  int old=mViewFlags;
  mViewFlags=(mViewFlags & ~mask) | (flags & mask);
  int changed=mViewFlags ^ old;
  if (changed == 0) {
    return;
  }
  int privateFlags=mPrivateFlags;
  if (((changed & FOCUSABLE_MASK) != 0) && ((privateFlags & PFLAG_HAS_BOUNDS) != 0)) {
    if (((old & FOCUSABLE_MASK) == FOCUSABLE) && ((privateFlags & PFLAG_FOCUSED) != 0)) {
      clearFocus();
    }
 else     if (((old & FOCUSABLE_MASK) == NOT_FOCUSABLE) && ((privateFlags & PFLAG_FOCUSED) == 0)) {
      if (mParent != null)       mParent.focusableViewAvailable(this);
    }
    if (AccessibilityManager.getInstance(mContext).isEnabled()) {
      notifyAccessibilityStateChanged();
    }
  }
  final int newVisibility=flags & VISIBILITY_MASK;
  if (newVisibility == VISIBLE) {
    if ((changed & VISIBILITY_MASK) != 0) {
      mPrivateFlags|=PFLAG_DRAWN;
      invalidate(true);
      needGlobalAttributesUpdate(true);
      if ((mParent != null) && (mBottom > mTop) && (mRight > mLeft)) {
        mParent.focusableViewAvailable(this);
      }
    }
  }
  if ((changed & GONE) != 0) {
    needGlobalAttributesUpdate(false);
    requestLayout();
    if (((mViewFlags & VISIBILITY_MASK) == GONE)) {
      if (hasFocus())       clearFocus();
      clearAccessibilityFocus();
      destroyDrawingCache();
      if (mParent instanceof View) {
        ((View)mParent).invalidate(true);
      }
      mPrivateFlags|=PFLAG_DRAWN;
    }
    if (mAttachInfo != null) {
      mAttachInfo.mViewVisibilityChanged=true;
    }
  }
  if ((changed & INVISIBLE) != 0) {
    needGlobalAttributesUpdate(false);
    mPrivateFlags|=PFLAG_DRAWN;
    if (((mViewFlags & VISIBILITY_MASK) == INVISIBLE) && hasFocus()) {
      if (getRootView() != this) {
        clearFocus();
        clearAccessibilityFocus();
      }
    }
    if (mAttachInfo != null) {
      mAttachInfo.mViewVisibilityChanged=true;
    }
  }
  if ((changed & VISIBILITY_MASK) != 0) {
    if (newVisibility != VISIBLE) {
      cleanupDraw();
    }
    if (mParent instanceof ViewGroup) {
      ((ViewGroup)mParent).onChildVisibilityChanged(this,(changed & VISIBILITY_MASK),newVisibility);
      ((View)mParent).invalidate(true);
    }
 else     if (mParent != null) {
      mParent.invalidateChild(this,null);
    }
    dispatchVisibilityChanged(this,newVisibility);
  }
  if ((changed & WILL_NOT_CACHE_DRAWING) != 0) {
    destroyDrawingCache();
  }
  if ((changed & DRAWING_CACHE_ENABLED) != 0) {
    destroyDrawingCache();
    mPrivateFlags&=~PFLAG_DRAWING_CACHE_VALID;
    invalidateParentCaches();
  }
  if ((changed & DRAWING_CACHE_QUALITY_MASK) != 0) {
    destroyDrawingCache();
    mPrivateFlags&=~PFLAG_DRAWING_CACHE_VALID;
  }
  if ((changed & DRAW_MASK) != 0) {
    if ((mViewFlags & WILL_NOT_DRAW) != 0) {
      if (mBackground != null) {
        mPrivateFlags&=~PFLAG_SKIP_DRAW;
        mPrivateFlags|=PFLAG_ONLY_DRAWS_BACKGROUND;
      }
 else {
        mPrivateFlags|=PFLAG_SKIP_DRAW;
      }
    }
 else {
      mPrivateFlags&=~PFLAG_SKIP_DRAW;
    }
    requestLayout();
    invalidate(true);
  }
  if ((changed & KEEP_SCREEN_ON) != 0) {
    if (mParent != null && mAttachInfo != null && !mAttachInfo.mRecomputeGlobalAttributes) {
      mParent.recomputeViewAttributes(this);
    }
  }
  if (AccessibilityManager.getInstance(mContext).isEnabled() && ((changed & FOCUSABLE) != 0 || (changed & CLICKABLE) != 0 || (changed & LONG_CLICKABLE) != 0 || (changed & ENABLED) != 0)) {
    notifyAccessibilityStateChanged();
  }
}
