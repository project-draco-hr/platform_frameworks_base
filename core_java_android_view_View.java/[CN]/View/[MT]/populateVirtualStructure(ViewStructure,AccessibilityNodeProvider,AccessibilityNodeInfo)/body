{
  structure.setId(AccessibilityNodeInfo.getVirtualDescendantId(info.getSourceNodeId()),null,null,null);
  Rect rect=structure.getTempRect();
  info.getBoundsInParent(rect);
  structure.setDimens(rect.left,rect.top,0,0,rect.width(),rect.height());
  structure.setVisibility(VISIBLE);
  structure.setEnabled(info.isEnabled());
  if (info.isClickable()) {
    structure.setClickable(true);
  }
  if (info.isFocusable()) {
    structure.setFocusable(true);
  }
  if (info.isFocused()) {
    structure.setFocused(true);
  }
  if (info.isAccessibilityFocused()) {
    structure.setAccessibilityFocused(true);
  }
  if (info.isSelected()) {
    structure.setSelected(true);
  }
  if (info.isLongClickable()) {
    structure.setLongClickable(true);
  }
  if (info.isCheckable()) {
    structure.setCheckable(true);
    if (info.isChecked()) {
      structure.setChecked(true);
    }
  }
  if (info.isContextClickable()) {
    structure.setContextClickable(true);
  }
  CharSequence cname=info.getClassName();
  structure.setClassName(cname != null ? cname.toString() : null);
  structure.setContentDescription(info.getContentDescription());
  Log.i("View","vassist " + cname + " @ "+ rect.toShortString()+ " text="+ info.getText()+ " cd="+ info.getContentDescription());
  if (info.getText() != null || info.getError() != null) {
    structure.setText(info.getText(),info.getTextSelectionStart(),info.getTextSelectionEnd());
  }
  final int NCHILDREN=info.getChildCount();
  if (NCHILDREN > 0) {
    structure.setChildCount(NCHILDREN);
    for (int i=0; i < NCHILDREN; i++) {
      AccessibilityNodeInfo cinfo=provider.createAccessibilityNodeInfo(AccessibilityNodeInfo.getVirtualDescendantId(info.getChildId(i)));
      ViewStructure child=structure.newChild(i);
      populateVirtualStructure(child,provider,cinfo);
      cinfo.recycle();
    }
  }
}
