{
  mPrivateFlags2&=~(PFLAG2_TEXT_DIRECTION_RESOLVED | PFLAG2_TEXT_DIRECTION_RESOLVED_MASK);
  if (hasRtlSupport()) {
    final int textDirection=getRawTextDirection();
switch (textDirection) {
case TEXT_DIRECTION_INHERIT:
      if (!canResolveTextDirection()) {
        mPrivateFlags2|=PFLAG2_TEXT_DIRECTION_RESOLVED_DEFAULT;
        return false;
      }
    try {
      if (!mParent.isTextDirectionResolved()) {
        mPrivateFlags2|=PFLAG2_TEXT_DIRECTION_RESOLVED_DEFAULT;
        return false;
      }
    }
 catch (    AbstractMethodError e) {
      Log.e(VIEW_LOG_TAG,mParent.getClass().getSimpleName() + " does not fully implement ViewParent",e);
    }
  int parentResolvedDirection;
try {
  parentResolvedDirection=mParent.getTextDirection();
}
 catch (AbstractMethodError e) {
  Log.e(VIEW_LOG_TAG,mParent.getClass().getSimpleName() + " does not fully implement ViewParent",e);
  parentResolvedDirection=TEXT_DIRECTION_LTR;
}
switch (parentResolvedDirection) {
case TEXT_DIRECTION_FIRST_STRONG:
case TEXT_DIRECTION_ANY_RTL:
case TEXT_DIRECTION_LTR:
case TEXT_DIRECTION_RTL:
case TEXT_DIRECTION_LOCALE:
mPrivateFlags2|=(parentResolvedDirection << PFLAG2_TEXT_DIRECTION_RESOLVED_MASK_SHIFT);
break;
default :
mPrivateFlags2|=PFLAG2_TEXT_DIRECTION_RESOLVED_DEFAULT;
}
break;
case TEXT_DIRECTION_FIRST_STRONG:
case TEXT_DIRECTION_ANY_RTL:
case TEXT_DIRECTION_LTR:
case TEXT_DIRECTION_RTL:
case TEXT_DIRECTION_LOCALE:
mPrivateFlags2|=(textDirection << PFLAG2_TEXT_DIRECTION_RESOLVED_MASK_SHIFT);
break;
default :
mPrivateFlags2|=PFLAG2_TEXT_DIRECTION_RESOLVED_DEFAULT;
}
}
 else {
mPrivateFlags2|=PFLAG2_TEXT_DIRECTION_RESOLVED_DEFAULT;
}
mPrivateFlags2|=PFLAG2_TEXT_DIRECTION_RESOLVED;
return true;
}
