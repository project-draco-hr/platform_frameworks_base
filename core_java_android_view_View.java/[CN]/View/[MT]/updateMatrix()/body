{
  final TransformationInfo info=mTransformationInfo;
  if (info == null) {
    return;
  }
  if (info.mMatrixDirty) {
    if ((mPrivateFlags & PIVOT_EXPLICITLY_SET) == 0) {
      if ((mRight - mLeft) != info.mPrevWidth || (mBottom - mTop) != info.mPrevHeight) {
        info.mPrevWidth=mRight - mLeft;
        info.mPrevHeight=mBottom - mTop;
        info.mPivotX=info.mPrevWidth / 2f;
        info.mPivotY=info.mPrevHeight / 2f;
      }
    }
    info.mMatrix.reset();
    if (!nonzero(info.mRotationX) && !nonzero(info.mRotationY)) {
      info.mMatrix.setTranslate(info.mTranslationX,info.mTranslationY);
      info.mMatrix.preRotate(info.mRotation,info.mPivotX,info.mPivotY);
      info.mMatrix.preScale(info.mScaleX,info.mScaleY,info.mPivotX,info.mPivotY);
    }
 else {
      if (info.mCamera == null) {
        info.mCamera=new Camera();
        info.matrix3D=new Matrix();
      }
      info.mCamera.save();
      info.mMatrix.preScale(info.mScaleX,info.mScaleY,info.mPivotX,info.mPivotY);
      info.mCamera.rotate(info.mRotationX,info.mRotationY,-info.mRotation);
      info.mCamera.getMatrix(info.matrix3D);
      info.matrix3D.preTranslate(-info.mPivotX,-info.mPivotY);
      info.matrix3D.postTranslate(info.mPivotX + info.mTranslationX,info.mPivotY + info.mTranslationY);
      info.mMatrix.postConcat(info.matrix3D);
      info.mCamera.restore();
    }
    info.mMatrixDirty=false;
    info.mMatrixIsIdentity=info.mMatrix.isIdentity();
    info.mInverseMatrixDirty=true;
  }
}
