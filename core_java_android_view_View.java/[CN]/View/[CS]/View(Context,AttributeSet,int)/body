{
  this(context);
  TypedArray a=context.obtainStyledAttributes(attrs,com.android.internal.R.styleable.View,defStyle,0);
  Drawable background=null;
  int leftPadding=-1;
  int topPadding=-1;
  int rightPadding=-1;
  int bottomPadding=-1;
  int padding=-1;
  int viewFlagValues=0;
  int viewFlagMasks=0;
  boolean setScrollContainer=false;
  int x=0;
  int y=0;
  float tx=0;
  float ty=0;
  float rotation=0;
  float rotationX=0;
  float rotationY=0;
  float sx=1f;
  float sy=1f;
  boolean transformSet=false;
  int scrollbarStyle=SCROLLBARS_INSIDE_OVERLAY;
  int overScrollMode=mOverScrollMode;
  final int N=a.getIndexCount();
  for (int i=0; i < N; i++) {
    int attr=a.getIndex(i);
switch (attr) {
case com.android.internal.R.styleable.View_background:
      background=a.getDrawable(attr);
    break;
case com.android.internal.R.styleable.View_padding:
  padding=a.getDimensionPixelSize(attr,-1);
break;
case com.android.internal.R.styleable.View_paddingLeft:
leftPadding=a.getDimensionPixelSize(attr,-1);
break;
case com.android.internal.R.styleable.View_paddingTop:
topPadding=a.getDimensionPixelSize(attr,-1);
break;
case com.android.internal.R.styleable.View_paddingRight:
rightPadding=a.getDimensionPixelSize(attr,-1);
break;
case com.android.internal.R.styleable.View_paddingBottom:
bottomPadding=a.getDimensionPixelSize(attr,-1);
break;
case com.android.internal.R.styleable.View_scrollX:
x=a.getDimensionPixelOffset(attr,0);
break;
case com.android.internal.R.styleable.View_scrollY:
y=a.getDimensionPixelOffset(attr,0);
break;
case com.android.internal.R.styleable.View_alpha:
setAlpha(a.getFloat(attr,1f));
break;
case com.android.internal.R.styleable.View_transformPivotX:
setPivotX(a.getDimensionPixelOffset(attr,0));
break;
case com.android.internal.R.styleable.View_transformPivotY:
setPivotY(a.getDimensionPixelOffset(attr,0));
break;
case com.android.internal.R.styleable.View_translationX:
tx=a.getDimensionPixelOffset(attr,0);
transformSet=true;
break;
case com.android.internal.R.styleable.View_translationY:
ty=a.getDimensionPixelOffset(attr,0);
transformSet=true;
break;
case com.android.internal.R.styleable.View_rotation:
rotation=a.getFloat(attr,0);
transformSet=true;
break;
case com.android.internal.R.styleable.View_rotationX:
rotationX=a.getFloat(attr,0);
transformSet=true;
break;
case com.android.internal.R.styleable.View_rotationY:
rotationY=a.getFloat(attr,0);
transformSet=true;
break;
case com.android.internal.R.styleable.View_scaleX:
sx=a.getFloat(attr,1f);
transformSet=true;
break;
case com.android.internal.R.styleable.View_scaleY:
sy=a.getFloat(attr,1f);
transformSet=true;
break;
case com.android.internal.R.styleable.View_id:
mID=a.getResourceId(attr,NO_ID);
break;
case com.android.internal.R.styleable.View_tag:
mTag=a.getText(attr);
break;
case com.android.internal.R.styleable.View_fitsSystemWindows:
if (a.getBoolean(attr,false)) {
viewFlagValues|=FITS_SYSTEM_WINDOWS;
viewFlagMasks|=FITS_SYSTEM_WINDOWS;
}
break;
case com.android.internal.R.styleable.View_focusable:
if (a.getBoolean(attr,false)) {
viewFlagValues|=FOCUSABLE;
viewFlagMasks|=FOCUSABLE_MASK;
}
break;
case com.android.internal.R.styleable.View_focusableInTouchMode:
if (a.getBoolean(attr,false)) {
viewFlagValues|=FOCUSABLE_IN_TOUCH_MODE | FOCUSABLE;
viewFlagMasks|=FOCUSABLE_IN_TOUCH_MODE | FOCUSABLE_MASK;
}
break;
case com.android.internal.R.styleable.View_clickable:
if (a.getBoolean(attr,false)) {
viewFlagValues|=CLICKABLE;
viewFlagMasks|=CLICKABLE;
}
break;
case com.android.internal.R.styleable.View_longClickable:
if (a.getBoolean(attr,false)) {
viewFlagValues|=LONG_CLICKABLE;
viewFlagMasks|=LONG_CLICKABLE;
}
break;
case com.android.internal.R.styleable.View_saveEnabled:
if (!a.getBoolean(attr,true)) {
viewFlagValues|=SAVE_DISABLED;
viewFlagMasks|=SAVE_DISABLED_MASK;
}
break;
case com.android.internal.R.styleable.View_duplicateParentState:
if (a.getBoolean(attr,false)) {
viewFlagValues|=DUPLICATE_PARENT_STATE;
viewFlagMasks|=DUPLICATE_PARENT_STATE;
}
break;
case com.android.internal.R.styleable.View_visibility:
final int visibility=a.getInt(attr,0);
if (visibility != 0) {
viewFlagValues|=VISIBILITY_FLAGS[visibility];
viewFlagMasks|=VISIBILITY_MASK;
}
break;
case com.android.internal.R.styleable.View_horizontalDirection:
final int layoutDirection=a.getInt(attr,0);
if (layoutDirection != 0) {
viewFlagValues|=HORIZONTAL_DIRECTION_FLAGS[layoutDirection];
viewFlagMasks|=HORIZONTAL_DIRECTION_MASK;
}
break;
case com.android.internal.R.styleable.View_drawingCacheQuality:
final int cacheQuality=a.getInt(attr,0);
if (cacheQuality != 0) {
viewFlagValues|=DRAWING_CACHE_QUALITY_FLAGS[cacheQuality];
viewFlagMasks|=DRAWING_CACHE_QUALITY_MASK;
}
break;
case com.android.internal.R.styleable.View_contentDescription:
mContentDescription=a.getString(attr);
break;
case com.android.internal.R.styleable.View_soundEffectsEnabled:
if (!a.getBoolean(attr,true)) {
viewFlagValues&=~SOUND_EFFECTS_ENABLED;
viewFlagMasks|=SOUND_EFFECTS_ENABLED;
}
break;
case com.android.internal.R.styleable.View_hapticFeedbackEnabled:
if (!a.getBoolean(attr,true)) {
viewFlagValues&=~HAPTIC_FEEDBACK_ENABLED;
viewFlagMasks|=HAPTIC_FEEDBACK_ENABLED;
}
break;
case R.styleable.View_scrollbars:
final int scrollbars=a.getInt(attr,SCROLLBARS_NONE);
if (scrollbars != SCROLLBARS_NONE) {
viewFlagValues|=scrollbars;
viewFlagMasks|=SCROLLBARS_MASK;
initializeScrollbars(a);
}
break;
case R.styleable.View_fadingEdge:
final int fadingEdge=a.getInt(attr,FADING_EDGE_NONE);
if (fadingEdge != FADING_EDGE_NONE) {
viewFlagValues|=fadingEdge;
viewFlagMasks|=FADING_EDGE_MASK;
initializeFadingEdge(a);
}
break;
case R.styleable.View_scrollbarStyle:
scrollbarStyle=a.getInt(attr,SCROLLBARS_INSIDE_OVERLAY);
if (scrollbarStyle != SCROLLBARS_INSIDE_OVERLAY) {
viewFlagValues|=scrollbarStyle & SCROLLBARS_STYLE_MASK;
viewFlagMasks|=SCROLLBARS_STYLE_MASK;
}
break;
case R.styleable.View_isScrollContainer:
setScrollContainer=true;
if (a.getBoolean(attr,false)) {
setScrollContainer(true);
}
break;
case com.android.internal.R.styleable.View_keepScreenOn:
if (a.getBoolean(attr,false)) {
viewFlagValues|=KEEP_SCREEN_ON;
viewFlagMasks|=KEEP_SCREEN_ON;
}
break;
case R.styleable.View_filterTouchesWhenObscured:
if (a.getBoolean(attr,false)) {
viewFlagValues|=FILTER_TOUCHES_WHEN_OBSCURED;
viewFlagMasks|=FILTER_TOUCHES_WHEN_OBSCURED;
}
break;
case R.styleable.View_nextFocusLeft:
mNextFocusLeftId=a.getResourceId(attr,View.NO_ID);
break;
case R.styleable.View_nextFocusRight:
mNextFocusRightId=a.getResourceId(attr,View.NO_ID);
break;
case R.styleable.View_nextFocusUp:
mNextFocusUpId=a.getResourceId(attr,View.NO_ID);
break;
case R.styleable.View_nextFocusDown:
mNextFocusDownId=a.getResourceId(attr,View.NO_ID);
break;
case R.styleable.View_nextFocusForward:
mNextFocusForwardId=a.getResourceId(attr,View.NO_ID);
break;
case R.styleable.View_minWidth:
mMinWidth=a.getDimensionPixelSize(attr,0);
break;
case R.styleable.View_minHeight:
mMinHeight=a.getDimensionPixelSize(attr,0);
break;
case R.styleable.View_onClick:
if (context.isRestricted()) {
throw new IllegalStateException("The android:onClick attribute cannot " + "be used within a restricted context");
}
final String handlerName=a.getString(attr);
if (handlerName != null) {
setOnClickListener(new OnClickListener(){
private Method mHandler;
public void onClick(View v){
if (mHandler == null) {
try {
mHandler=getContext().getClass().getMethod(handlerName,View.class);
}
 catch (NoSuchMethodException e) {
int id=getId();
String idText=id == NO_ID ? "" : " with id '" + getContext().getResources().getResourceEntryName(id) + "'";
throw new IllegalStateException("Could not find a method " + handlerName + "(View) in the activity "+ getContext().getClass()+ " for onClick handler"+ " on view "+ View.this.getClass()+ idText,e);
}
}
try {
mHandler.invoke(getContext(),View.this);
}
 catch (IllegalAccessException e) {
throw new IllegalStateException("Could not execute non " + "public method of the activity",e);
}
catch (InvocationTargetException e) {
throw new IllegalStateException("Could not execute " + "method of the activity",e);
}
}
}
);
}
break;
case R.styleable.View_overScrollMode:
overScrollMode=a.getInt(attr,OVER_SCROLL_IF_CONTENT_SCROLLS);
break;
case R.styleable.View_verticalScrollbarPosition:
mVerticalScrollbarPosition=a.getInt(attr,SCROLLBAR_POSITION_DEFAULT);
break;
case R.styleable.View_layerType:
setLayerType(a.getInt(attr,LAYER_TYPE_NONE),null);
break;
}
}
setOverScrollMode(overScrollMode);
if (background != null) {
setBackgroundDrawable(background);
}
if (padding >= 0) {
leftPadding=padding;
topPadding=padding;
rightPadding=padding;
bottomPadding=padding;
}
setPadding(leftPadding >= 0 ? leftPadding : mPaddingLeft,topPadding >= 0 ? topPadding : mPaddingTop,rightPadding >= 0 ? rightPadding : mPaddingRight,bottomPadding >= 0 ? bottomPadding : mPaddingBottom);
if (viewFlagMasks != 0) {
setFlags(viewFlagValues,viewFlagMasks);
}
if (scrollbarStyle != SCROLLBARS_INSIDE_OVERLAY) {
recomputePadding();
}
if (x != 0 || y != 0) {
scrollTo(x,y);
}
if (transformSet) {
setTranslationX(tx);
setTranslationY(ty);
setRotation(rotation);
setRotationX(rotationX);
setRotationY(rotationY);
setScaleX(sx);
setScaleY(sy);
}
if (!setScrollContainer && (viewFlagValues & SCROLLBARS_VERTICAL) != 0) {
setScrollContainer(true);
}
computeOpaqueFlags();
a.recycle();
}
