{
  if (mNeedsSort) {
    mSortedNodes.clear();
    ArrayList<Node> roots=new ArrayList<Node>();
    for (    Node node : mNodes) {
      if (node.dependencies == null || node.dependencies.size() == 0) {
        roots.add(node);
      }
    }
    ArrayList<Node> tmpRoots=new ArrayList<Node>();
    while (roots.size() > 0) {
      for (      Node root : roots) {
        mSortedNodes.add(root);
        if (root.nodeDependents != null) {
          for (          Node node : root.nodeDependents) {
            node.nodeDependencies.remove(root);
            if (node.nodeDependencies.size() == 0) {
              tmpRoots.add(node);
            }
          }
        }
      }
      roots.addAll(tmpRoots);
      tmpRoots.clear();
    }
    mNeedsSort=false;
    if (mSortedNodes.size() != mNodes.size()) {
      throw new IllegalStateException("Circular dependencies cannot exist" + " in Sequencer");
    }
  }
 else {
    for (    Node node : mNodes) {
      if (node.dependencies != null && node.dependencies.size() > 0) {
        for (        Dependency dependency : node.dependencies) {
          if (node.nodeDependencies == null) {
            node.nodeDependencies=new ArrayList<Node>();
          }
          if (!node.nodeDependencies.contains(dependency.node)) {
            node.nodeDependencies.add(dependency.node);
          }
        }
      }
    }
  }
}
