{
  super.inflate(r,parser,attrs);
  final TypedArray a=r.obtainAttributes(attrs,R.styleable.TouchFeedbackDrawable);
  mState.mTint=a.getColorStateList(R.styleable.TouchFeedbackDrawable_tint);
  mState.mTintMode=Drawable.parseTintMode(a.getInt(R.styleable.TouchFeedbackDrawable_tintMode,-1),Mode.SRC_ATOP);
  mState.mPinned=a.getBoolean(R.styleable.TouchFeedbackDrawable_pinned,false);
  if (mState.mTint == null) {
    throw new XmlPullParserException(parser.getPositionDescription() + ": <touch-feedback> tag requires a 'tint' attribute");
  }
  Drawable mask=a.getDrawable(R.styleable.TouchFeedbackDrawable_mask);
  final int drawableRes=a.getResourceId(R.styleable.TouchFeedbackDrawable_drawable,0);
  a.recycle();
  final Drawable dr;
  if (drawableRes != 0) {
    dr=r.getDrawable(drawableRes);
  }
 else {
    int type;
    while ((type=parser.next()) == XmlPullParser.TEXT) {
    }
    if (type == XmlPullParser.START_TAG) {
      dr=Drawable.createFromXmlInner(r,parser,attrs);
    }
 else {
      dr=null;
    }
  }
  if (mask == null) {
    mask=dr;
  }
  mState.mProjected=mask == null && dr == null;
  if (dr != null) {
    setDrawable(dr,r);
  }
 else {
    setDrawable(new ColorDrawable(Color.TRANSPARENT),r);
  }
  setMaskDrawable(mask,r);
  setTargetDensity(r.getDisplayMetrics());
}
