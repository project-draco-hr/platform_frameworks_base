{
  final boolean projected=getNumberOfLayers() == 0;
  final Ripple[] activeRipples=mActiveRipples;
  final int ripplesCount=mActiveRipplesCount;
  final Rect bounds=getBounds();
  boolean drewRipples=false;
  int rippleRestoreCount=-1;
  int activeRipplesCount=0;
  for (int i=0; i < ripplesCount; i++) {
    final Ripple ripple=activeRipples[i];
    final RippleAnimator animator=ripple.animate();
    animator.update();
    if (!animator.isRunning()) {
      activeRipples[i]=null;
    }
 else {
      if (!projected && rippleRestoreCount < 0) {
        rippleRestoreCount=canvas.saveLayer(bounds.left,bounds.top,bounds.right,bounds.bottom,null);
      }
      drewRipples|=ripple.draw(canvas,getRipplePaint());
      activeRipples[activeRipplesCount]=activeRipples[i];
      activeRipplesCount++;
    }
  }
  mActiveRipplesCount=activeRipplesCount;
  if (drewRipples && !projected && rippleRestoreCount >= 0) {
    final PorterDuffXfermode xfermode=mState.getTintXfermode();
    canvas.saveLayer(bounds.left,bounds.top,bounds.right,bounds.bottom,getMaskingPaint(xfermode));
  }
  Drawable mask=null;
  final ChildDrawable[] array=mLayerState.mChildren;
  final int N=mLayerState.mNum;
  for (int i=0; i < N; i++) {
    if (array[i].mId != R.id.mask) {
      array[i].mDrawable.draw(canvas);
    }
 else {
      mask=array[i].mDrawable;
    }
  }
  if (mask != null && drewRipples) {
    canvas.saveLayer(bounds.left,bounds.top,bounds.right,bounds.bottom,getMaskingPaint(DST_IN));
    mask.draw(canvas);
  }
  if (rippleRestoreCount >= 0) {
    canvas.restoreToCount(rippleRestoreCount);
  }
}
