{
  int l=in.getInt();
  String methodName=getString(in,l);
  Class<?>[] argTypes;
  Object[] args;
  if (!in.hasRemaining()) {
    argTypes=new Class<?>[0];
    args=new Object[0];
  }
 else {
    int nArgs=in.getInt();
    argTypes=new Class<?>[nArgs];
    args=new Object[nArgs];
    for (int i=0; i < nArgs; i++) {
      char c=in.getChar();
switch (c) {
case 'Z':
        argTypes[i]=boolean.class;
      args[i]=in.get() == 0 ? false : true;
    break;
case 'B':
  argTypes[i]=byte.class;
args[i]=in.get();
break;
case 'C':
argTypes[i]=char.class;
args[i]=in.getChar();
break;
case 'S':
argTypes[i]=short.class;
args[i]=in.getShort();
break;
case 'I':
argTypes[i]=int.class;
args[i]=in.getInt();
break;
case 'J':
argTypes[i]=long.class;
args[i]=in.getLong();
break;
case 'F':
argTypes[i]=float.class;
args[i]=in.getFloat();
break;
case 'D':
argTypes[i]=double.class;
args[i]=in.getDouble();
break;
default :
Log.e(TAG,"arg " + i + ", unrecognized type: "+ c);
return createFailChunk(ERR_INVALID_PARAM,"Unsupported parameter type (" + c + ") to invoke view method.");
}
}
}
Method method=null;
try {
method=targetView.getClass().getMethod(methodName,argTypes);
}
 catch (NoSuchMethodException e) {
Log.e(TAG,"No such method: " + e.getMessage());
return createFailChunk(ERR_INVALID_PARAM,"No such method: " + e.getMessage());
}
try {
ViewDebug.invokeViewMethod(targetView,method,args);
}
 catch (Exception e) {
Log.e(TAG,"Exception while invoking method: " + e.getCause().getMessage());
String msg=e.getCause().getMessage();
if (msg == null) {
msg=e.getCause().toString();
}
return createFailChunk(ERR_EXCEPTION,msg);
}
return null;
}
