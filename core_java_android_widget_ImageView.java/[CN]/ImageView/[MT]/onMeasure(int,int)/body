{
  resolveUri();
  int w;
  int h;
  float desiredAspect=0.0f;
  boolean resizeWidth=false;
  boolean resizeHeight=false;
  if (mDrawable == null) {
    mDrawableWidth=-1;
    mDrawableHeight=-1;
    w=h=0;
  }
 else {
    w=mDrawableWidth;
    h=mDrawableHeight;
    if (w <= 0)     w=1;
    if (h <= 0)     h=1;
    if (mAdjustViewBounds) {
      int widthSpecMode=MeasureSpec.getMode(widthMeasureSpec);
      int heightSpecMode=MeasureSpec.getMode(heightMeasureSpec);
      resizeWidth=widthSpecMode != MeasureSpec.EXACTLY;
      resizeHeight=heightSpecMode != MeasureSpec.EXACTLY;
      desiredAspect=(float)w / (float)h;
    }
  }
  int pleft=mPaddingLeft;
  int pright=mPaddingRight;
  int ptop=mPaddingTop;
  int pbottom=mPaddingBottom;
  int widthSize;
  int heightSize;
  if (resizeWidth || resizeHeight) {
    widthSize=resolveAdjustedSize(w + pleft + pright,mMaxWidth,widthMeasureSpec);
    heightSize=resolveAdjustedSize(h + ptop + pbottom,mMaxHeight,heightMeasureSpec);
    if (desiredAspect != 0.0f) {
      float actualAspect=(float)(widthSize - pleft - pright) / (heightSize - ptop - pbottom);
      if (Math.abs(actualAspect - desiredAspect) > 0.0000001) {
        boolean done=false;
        if (resizeWidth) {
          int newWidth=(int)(desiredAspect * (heightSize - ptop - pbottom)) + pleft + pright;
          if (newWidth <= widthSize) {
            widthSize=newWidth;
            done=true;
          }
        }
        if (!done && resizeHeight) {
          int newHeight=(int)((widthSize - pleft - pright) / desiredAspect) + ptop + pbottom;
          if (newHeight <= heightSize) {
            heightSize=newHeight;
          }
        }
      }
    }
  }
 else {
    w+=pleft + pright;
    h+=ptop + pbottom;
    w=Math.max(w,getSuggestedMinimumWidth());
    h=Math.max(h,getSuggestedMinimumHeight());
    widthSize=resolveSizeAndState(w,widthMeasureSpec,0);
    heightSize=resolveSizeAndState(h,heightMeasureSpec,0);
  }
  setMeasuredDimension(widthSize,heightSize);
}
