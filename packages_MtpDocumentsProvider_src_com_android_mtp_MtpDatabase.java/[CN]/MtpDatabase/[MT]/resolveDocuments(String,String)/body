{
  mDatabase.beginTransaction();
  try {
    final String unmappedIdQuery=createStateFilter(ROW_STATE_UNMAPPED,Document.COLUMN_DOCUMENT_ID);
    final String mappingIdQuery=createStateFilter(ROW_STATE_MAPPING,Document.COLUMN_DOCUMENT_ID);
    final Cursor mergingCursor=mDatabase.query(TABLE_DOCUMENTS,new String[]{"group_concat(" + unmappedIdQuery + ")","group_concat(" + mappingIdQuery + ")"},selection,strings(arg),Document.COLUMN_DISPLAY_NAME,"count(" + unmappedIdQuery + ") = 1 AND count("+ mappingIdQuery+ ") = 1",null);
    final ContentValues values=new ContentValues();
    while (mergingCursor.moveToNext()) {
      final String unmappedId=mergingCursor.getString(0);
      final String mappingId=mergingCursor.getString(1);
      getFirstRow(TABLE_DOCUMENTS,SELECTION_DOCUMENT_ID,new String[]{mappingId},values);
      values.remove(Document.COLUMN_DOCUMENT_ID);
      values.put(COLUMN_ROW_STATE,ROW_STATE_MAPPED);
      mDatabase.update(TABLE_DOCUMENTS,values,SELECTION_DOCUMENT_ID,new String[]{unmappedId});
      getFirstRow(TABLE_ROOT_EXTRA,SELECTION_ROOT_ID,new String[]{mappingId},values);
      if (values.size() > 0) {
        values.remove(Root.COLUMN_ROOT_ID);
        mDatabase.update(TABLE_ROOT_EXTRA,values,SELECTION_ROOT_ID,new String[]{unmappedId});
      }
      deleteDocumentsAndRoots(SELECTION_DOCUMENT_ID,new String[]{mappingId});
    }
    mergingCursor.close();
    deleteDocumentsAndRoots(COLUMN_ROW_STATE + " = ? AND " + selection,strings(ROW_STATE_UNMAPPED,arg));
    values.clear();
    values.put(COLUMN_ROW_STATE,ROW_STATE_MAPPED);
    mDatabase.update(TABLE_DOCUMENTS,values,COLUMN_ROW_STATE + " = ? AND " + selection,strings(ROW_STATE_MAPPING,arg));
    mDatabase.setTransactionSuccessful();
  }
  finally {
    mDatabase.endTransaction();
  }
}
