{
  mDatabase.beginTransaction();
  try {
    final boolean heuristic;
    final String mapColumn;
switch (mMappingMode.get(getRootDocumentsMappingStateKey(deviceId))) {
case MAP_BY_MTP_IDENTIFIER:
      heuristic=false;
    mapColumn=COLUMN_STORAGE_ID;
  break;
case MAP_BY_NAME:
heuristic=true;
mapColumn=Document.COLUMN_DISPLAY_NAME;
break;
default :
throw new Error("Unexpected map mode.");
}
final ContentValues[] valuesList=new ContentValues[roots.length];
for (int i=0; i < roots.length; i++) {
if (roots[i].mDeviceId != deviceId) {
throw new IllegalArgumentException();
}
valuesList[i]=new ContentValues();
getRootDocumentValues(valuesList[i],resources,roots[i]);
}
final boolean changed=mDatabase.putDocuments(valuesList,SELECTION_ROOT_DOCUMENTS,Integer.toString(deviceId),heuristic,mapColumn);
final ContentValues values=new ContentValues();
int i=0;
for (final MtpRoot root : roots) {
final String documentId=valuesList[i++].getAsString(Document.COLUMN_DOCUMENT_ID);
if (documentId == null) {
continue;
}
values.put(Root.COLUMN_ROOT_ID,documentId);
values.put(Root.COLUMN_FLAGS,Root.FLAG_SUPPORTS_IS_CHILD | Root.FLAG_SUPPORTS_CREATE);
values.put(Root.COLUMN_AVAILABLE_BYTES,root.mFreeSpace);
values.put(Root.COLUMN_CAPACITY_BYTES,root.mMaxCapacity);
values.put(Root.COLUMN_MIME_TYPES,"");
mDatabase.putRootExtra(values);
}
mDatabase.setTransactionSuccessful();
return changed;
}
  finally {
mDatabase.endTransaction();
}
}
