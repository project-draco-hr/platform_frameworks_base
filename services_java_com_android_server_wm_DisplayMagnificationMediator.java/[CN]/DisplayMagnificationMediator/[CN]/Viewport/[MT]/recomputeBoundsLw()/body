{
  Rect magnifiedFrame=mBounds;
  magnifiedFrame.set(0,0,0,0);
  Rect oldmagnifiedFrame=mTempRect3;
  oldmagnifiedFrame.set(magnifiedFrame);
  Rect availableFrame=mTempRect1;
  availableFrame.set(0,0,mDisplayInfo.logicalWidth,mDisplayInfo.logicalHeight);
  ArrayList<WindowStateInfo> visibleWindows=mTempWindowStateInfoList;
  visibleWindows.clear();
  getVisibleWindowsLw(visibleWindows);
  Collections.sort(visibleWindows,mWindowInfoInverseComparator);
  final int visibleWindowCount=visibleWindows.size();
  for (int i=0; i < visibleWindowCount; i++) {
    WindowStateInfo info=visibleWindows.get(i);
    if (info.mWindowState.mAttrs.type == WindowManager.LayoutParams.TYPE_MAGNIFICATION_OVERLAY) {
      continue;
    }
    Rect windowFrame=mTempRect2;
    windowFrame.set(info.mTouchableRegion);
    if (canMagnifyWindow(info.mWindowState.mAttrs.type)) {
      magnifiedFrame.union(windowFrame);
      magnifiedFrame.intersect(availableFrame);
    }
 else {
      subtract(windowFrame,magnifiedFrame);
      subtract(availableFrame,windowFrame);
    }
    if (availableFrame.equals(magnifiedFrame)) {
      break;
    }
  }
  for (int i=visibleWindowCount - 1; i >= 0; i--) {
    visibleWindows.remove(i).recycle();
  }
  final int displayWidth=mDisplayInfo.logicalWidth;
  final int displayHeight=mDisplayInfo.logicalHeight;
  magnifiedFrame.intersect(0,0,displayWidth,displayHeight);
  if (!oldmagnifiedFrame.equals(magnifiedFrame)) {
    SomeArgs args=SomeArgs.obtain();
    args.arg1=mClient;
    args.argi1=magnifiedFrame.left;
    args.argi2=magnifiedFrame.top;
    args.argi3=magnifiedFrame.right;
    args.argi4=magnifiedFrame.bottom;
    mHandler.obtainMessage(MESSAGE_NOTIFY_MAGNIFIED_FRAME_CHANGED,args).sendToTarget();
  }
}
