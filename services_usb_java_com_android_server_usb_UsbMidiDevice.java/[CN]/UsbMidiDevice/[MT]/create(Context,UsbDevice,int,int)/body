{
  MidiManager midiManager=(MidiManager)context.getSystemService(Context.MIDI_SERVICE);
  if (midiManager == null) {
    Log.e(TAG,"No MidiManager in UsbMidiDevice.create()");
    return null;
  }
  int subDevices=nativeGetSubdeviceCount(card,device);
  if (subDevices <= 0) {
    Log.e(TAG,"nativeGetSubdeviceCount failed");
    return null;
  }
  FileDescriptor[] fileDescriptors=nativeOpen(card,device,subDevices);
  if (fileDescriptors == null) {
    Log.e(TAG,"nativeOpen failed");
    return null;
  }
  Bundle properties=new Bundle();
  properties.putString(MidiDeviceInfo.PROPERTY_MANUFACTURER,usbDevice.getManufacturerName());
  properties.putString(MidiDeviceInfo.PROPERTY_MODEL,usbDevice.getProductName());
  properties.putString(MidiDeviceInfo.PROPERTY_SERIAL_NUMBER,usbDevice.getSerialNumber());
  properties.putInt(MidiDeviceInfo.PROPERTY_ALSA_CARD,card);
  properties.putInt(MidiDeviceInfo.PROPERTY_ALSA_DEVICE,device);
  properties.putParcelable(MidiDeviceInfo.PROPERTY_USB_DEVICE,usbDevice);
  MidiDeviceServer server=midiManager.createDeviceServer(subDevices,subDevices,properties,false,MidiDeviceInfo.TYPE_USB);
  if (server == null) {
    Log.e(TAG,"createDeviceServer failed");
    return null;
  }
  return new UsbMidiDevice(server,fileDescriptors,fileDescriptors);
}
