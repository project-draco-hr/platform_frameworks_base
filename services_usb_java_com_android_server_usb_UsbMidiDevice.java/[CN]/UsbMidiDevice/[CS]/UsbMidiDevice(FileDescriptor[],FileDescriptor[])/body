{
  int inputCount=inputFiles.length;
  int outputCount=outputFiles.length;
  mPollFDs=new StructPollfd[inputCount];
  mInputStreams=new FileInputStream[inputCount];
  for (int i=0; i < inputCount; i++) {
    FileDescriptor fd=inputFiles[i];
    StructPollfd pollfd=new StructPollfd();
    pollfd.fd=fd;
    pollfd.events=(short)OsConstants.POLLIN;
    mPollFDs[i]=pollfd;
    mInputStreams[i]=new FileInputStream(fd);
  }
  mOutputStreams=new FileOutputStream[outputCount];
  for (int i=0; i < outputCount; i++) {
    mOutputStreams[i]=new FileOutputStream(outputFiles[i]);
  }
  mInputPortReceivers=new MidiReceiver[inputCount];
  for (int port=0; port < inputCount; port++) {
    final int portF=port;
    mInputPortReceivers[port]=new MidiReceiver(){
      @Override public void onReceive(      byte[] data,      int offset,      int count,      long timestamp) throws IOException {
        mOutputStreams[portF].write(data,offset,count);
      }
    }
;
  }
}
