{
  FilterResults results=new FilterResults();
  if (mOriginalLocaleOptions == null) {
    mOriginalLocaleOptions=new ArrayList<>(mLocaleOptions);
  }
  ArrayList<LocaleStore.LocaleInfo> values;
  values=new ArrayList<>(mOriginalLocaleOptions);
  if (prefix == null || prefix.length() == 0) {
    results.values=values;
    results.count=values.size();
  }
 else {
    Locale locale=Locale.getDefault();
    String prefixString=LocaleHelper.normalizeForSearch(prefix.toString(),locale);
    final int count=values.size();
    final ArrayList<LocaleStore.LocaleInfo> newValues=new ArrayList<>();
    for (int i=0; i < count; i++) {
      final LocaleStore.LocaleInfo value=values.get(i);
      final String nameToCheck=LocaleHelper.normalizeForSearch(value.getFullNameInUiLanguage(),locale);
      final String nativeNameToCheck=LocaleHelper.normalizeForSearch(value.getFullNameNative(),locale);
      if (wordMatches(nativeNameToCheck,prefixString) || wordMatches(nameToCheck,prefixString)) {
        newValues.add(value);
      }
    }
    results.values=newValues;
    results.count=newValues.size();
  }
  return results;
}
