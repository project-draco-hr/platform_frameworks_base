{
  final QuickSettingsTileView wifiTile=(QuickSettingsTileView)inflater.inflate(R.layout.quick_settings_tile,parent,false);
  wifiTile.setContent(R.layout.quick_settings_tile_wifi,inflater);
  wifiTile.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      startSettingsActivity(android.provider.Settings.ACTION_WIFI_SETTINGS);
    }
  }
);
  if (LONG_PRESS_TOGGLES) {
    wifiTile.setOnLongClickListener(new View.OnLongClickListener(){
      @Override public boolean onLongClick(      View v){
        final boolean enable=(mWifiManager.getWifiState() != WifiManager.WIFI_STATE_ENABLED);
        new AsyncTask<Void,Void,Void>(){
          @Override protected Void doInBackground(          Void... args){
            final int wifiApState=mWifiManager.getWifiApState();
            if (enable && ((wifiApState == WifiManager.WIFI_AP_STATE_ENABLING) || (wifiApState == WifiManager.WIFI_AP_STATE_ENABLED))) {
              mWifiManager.setWifiApEnabled(null,false);
            }
            mWifiManager.setWifiEnabled(enable);
            return null;
          }
        }
.execute();
        wifiTile.setPressed(false);
        return true;
      }
    }
);
  }
  mModel.addWifiTile(wifiTile,new NetworkActivityCallback(){
    @Override public void refreshView(    QuickSettingsTileView view,    State state){
      WifiState wifiState=(WifiState)state;
      ImageView iv=(ImageView)view.findViewById(R.id.image);
      iv.setImageResource(wifiState.iconId);
      setActivity(view,wifiState);
      TextView tv=(TextView)view.findViewById(R.id.text);
      tv.setText(wifiState.label);
      wifiTile.setContentDescription(mContext.getString(R.string.accessibility_quick_settings_wifi,wifiState.signalContentDescription,(wifiState.connected) ? wifiState.label : ""));
    }
  }
);
  parent.addView(wifiTile);
  if (mModel.deviceHasMobileData()) {
    QuickSettingsTileView rssiTile=(QuickSettingsTileView)inflater.inflate(R.layout.quick_settings_tile,parent,false);
    rssiTile.setContent(R.layout.quick_settings_tile_rssi,inflater);
    rssiTile.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        Intent intent=new Intent();
        intent.setComponent(new ComponentName("com.android.settings","com.android.settings.Settings$DataUsageSummaryActivity"));
        startSettingsActivity(intent);
      }
    }
);
    mModel.addRSSITile(rssiTile,new NetworkActivityCallback(){
      @Override public void refreshView(      QuickSettingsTileView view,      State state){
        RSSIState rssiState=(RSSIState)state;
        ImageView iv=(ImageView)view.findViewById(R.id.rssi_image);
        ImageView iov=(ImageView)view.findViewById(R.id.rssi_overlay_image);
        TextView tv=(TextView)view.findViewById(R.id.rssi_textview);
        iv.setImageDrawable(null);
        iv.setImageResource(rssiState.signalIconId);
        if (rssiState.dataTypeIconId > 0) {
          iov.setImageResource(rssiState.dataTypeIconId);
        }
 else {
          iov.setImageDrawable(null);
        }
        setActivity(view,rssiState);
        tv.setText(state.label);
        view.setContentDescription(mContext.getResources().getString(R.string.accessibility_quick_settings_mobile,rssiState.signalContentDescription,rssiState.dataContentDescription,state.label));
      }
    }
);
    parent.addView(rssiTile);
  }
  if (mRotationLockController != null) {
    final QuickSettingsBasicTile rotationLockTile=new QuickSettingsBasicTile(mContext);
    rotationLockTile.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        final boolean locked=mRotationLockController.isRotationLocked();
        mRotationLockController.setRotationLocked(!locked);
      }
    }
);
    mModel.addRotationLockTile(rotationLockTile,mRotationLockController,new QuickSettingsModel.RefreshCallback(){
      @Override public void refreshView(      QuickSettingsTileView view,      State state){
        QuickSettingsModel.RotationLockState rotationLockState=(QuickSettingsModel.RotationLockState)state;
        view.setVisibility(rotationLockState.visible ? View.VISIBLE : View.GONE);
        if (state.iconId != 0) {
          rotationLockTile.setImageDrawable(null);
          rotationLockTile.setImageResource(state.iconId);
        }
        if (state.label != null) {
          rotationLockTile.setText(state.label);
        }
      }
    }
);
    parent.addView(rotationLockTile);
  }
  final QuickSettingsTileView batteryTile=(QuickSettingsTileView)inflater.inflate(R.layout.quick_settings_tile,parent,false);
  batteryTile.setContent(R.layout.quick_settings_tile_battery,inflater);
  batteryTile.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      startSettingsActivity(Intent.ACTION_POWER_USAGE_SUMMARY);
    }
  }
);
  mModel.addBatteryTile(batteryTile,new QuickSettingsModel.RefreshCallback(){
    @Override public void refreshView(    QuickSettingsTileView unused,    State state){
      QuickSettingsModel.BatteryState batteryState=(QuickSettingsModel.BatteryState)state;
      String t;
      if (batteryState.batteryLevel == 100) {
        t=mContext.getString(R.string.quick_settings_battery_charged_label);
      }
 else {
        t=batteryState.pluggedIn ? mContext.getString(R.string.quick_settings_battery_charging_label,batteryState.batteryLevel) : mContext.getString(R.string.status_bar_settings_battery_meter_format,batteryState.batteryLevel);
      }
      ((TextView)batteryTile.findViewById(R.id.text)).setText(t);
      batteryTile.setContentDescription(mContext.getString(R.string.accessibility_quick_settings_battery,t));
    }
  }
);
  parent.addView(batteryTile);
  if (mModel.deviceSupportsBluetooth() || DEBUG_GONE_TILES) {
    final QuickSettingsBasicTile bluetoothTile=new QuickSettingsBasicTile(mContext);
    bluetoothTile.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        startSettingsActivity(android.provider.Settings.ACTION_BLUETOOTH_SETTINGS);
      }
    }
);
    if (LONG_PRESS_TOGGLES) {
      bluetoothTile.setOnLongClickListener(new View.OnLongClickListener(){
        @Override public boolean onLongClick(        View v){
          if (mBluetoothAdapter.isEnabled()) {
            mBluetoothAdapter.disable();
          }
 else {
            mBluetoothAdapter.enable();
          }
          bluetoothTile.setPressed(false);
          return true;
        }
      }
);
    }
    mModel.addBluetoothTile(bluetoothTile,new QuickSettingsModel.RefreshCallback(){
      @Override public void refreshView(      QuickSettingsTileView unused,      State state){
        BluetoothState bluetoothState=(BluetoothState)state;
        bluetoothTile.setImageResource(state.iconId);
        bluetoothTile.setContentDescription(mContext.getString(R.string.accessibility_quick_settings_bluetooth,bluetoothState.stateContentDescription));
        bluetoothTile.setText(state.label);
      }
    }
);
    parent.addView(bluetoothTile);
  }
  final QuickSettingsBasicTile locationTile=new QuickSettingsBasicTile(mContext);
  locationTile.setImageResource(R.drawable.ic_qs_location_on);
  locationTile.setTextResource(R.string.quick_settings_location_label);
  locationTile.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      startSettingsActivity(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS);
    }
  }
);
  if (LONG_PRESS_TOGGLES) {
    locationTile.setOnLongClickListener(new View.OnLongClickListener(){
      @Override public boolean onLongClick(      View v){
        boolean newLocationEnabledState=!mLocationController.isLocationEnabled();
        if (mLocationController.setLocationEnabled(newLocationEnabledState) && newLocationEnabledState) {
          Intent closeDialog=new Intent(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
          mContext.sendBroadcast(closeDialog);
        }
        return true;
      }
    }
);
  }
  mModel.addLocationTile(locationTile,new QuickSettingsModel.RefreshCallback(){
    @Override public void refreshView(    QuickSettingsTileView unused,    State state){
      locationTile.setImageResource(state.iconId);
      String locationState=mContext.getString((state.enabled) ? R.string.accessibility_desc_on : R.string.accessibility_desc_off);
      locationTile.setContentDescription(mContext.getString(R.string.accessibility_quick_settings_location,locationState));
      locationTile.setText(state.label);
    }
  }
);
  parent.addView(locationTile);
  final QuickSettingsBasicTile airplaneTile=new QuickSettingsBasicTile(mContext);
  mModel.addAirplaneModeTile(airplaneTile,new QuickSettingsModel.RefreshCallback(){
    @Override public void refreshView(    QuickSettingsTileView unused,    State state){
      airplaneTile.setImageResource(state.iconId);
      String airplaneState=mContext.getString((state.enabled) ? R.string.accessibility_desc_on : R.string.accessibility_desc_off);
      airplaneTile.setContentDescription(mContext.getString(R.string.accessibility_quick_settings_airplane,airplaneState));
      airplaneTile.setText(state.label);
    }
  }
);
  parent.addView(airplaneTile);
  final QuickSettingsBasicTile zenModeTile=new QuickSettingsBasicTile(mContext);
  zenModeTile.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      showZenModeDialog();
    }
  }
);
  mModel.addZenModeTile(zenModeTile,new QuickSettingsModel.RefreshCallback(){
    @Override public void refreshView(    QuickSettingsTileView unused,    State state){
      zenModeTile.setImageResource(state.iconId);
      zenModeTile.getImageView().setAlpha(state.enabled ? 1 : .2f);
      zenModeTile.getImageView().setScaleX(1.5f);
      zenModeTile.getImageView().setScaleY(1.5f);
      zenModeTile.getTextView().setMaxLines(2);
      zenModeTile.getTextView().setEllipsize(TruncateAt.END);
      zenModeTile.setText(state.label);
    }
  }
);
  parent.addView(zenModeTile);
}
