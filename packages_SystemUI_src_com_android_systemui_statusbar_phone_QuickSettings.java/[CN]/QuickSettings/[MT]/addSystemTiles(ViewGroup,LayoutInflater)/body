{
  QuickSettingsTileView wifiTile=(QuickSettingsTileView)inflater.inflate(R.layout.quick_settings_tile,parent,false);
  wifiTile.setContent(R.layout.quick_settings_tile_wifi,inflater);
  wifiTile.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      startSettingsActivity(android.provider.Settings.ACTION_WIFI_SETTINGS);
    }
  }
);
  mModel.addWifiTile(wifiTile,new QuickSettingsModel.RefreshCallback(){
    @Override public void refreshView(    QuickSettingsTileView view,    State state){
      TextView tv=(TextView)view.findViewById(R.id.wifi_textview);
      tv.setCompoundDrawablesRelativeWithIntrinsicBounds(0,state.iconId,0,0);
      tv.setText(state.label);
    }
  }
);
  parent.addView(wifiTile);
  if (mModel.deviceSupportsTelephony()) {
    QuickSettingsTileView rssiTile=(QuickSettingsTileView)inflater.inflate(R.layout.quick_settings_tile,parent,false);
    rssiTile.setContent(R.layout.quick_settings_tile_rssi,inflater);
    rssiTile.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        Intent intent=new Intent();
        intent.setComponent(new ComponentName("com.android.settings","com.android.settings.Settings$DataUsageSummaryActivity"));
        startSettingsActivity(intent);
      }
    }
);
    mModel.addRSSITile(rssiTile,new QuickSettingsModel.RefreshCallback(){
      @Override public void refreshView(      QuickSettingsTileView view,      State state){
        TextView tv=(TextView)view.findViewById(R.id.rssi_textview);
        tv.setCompoundDrawablesRelativeWithIntrinsicBounds(0,state.iconId,0,0);
        tv.setText(state.label);
      }
    }
);
    parent.addView(rssiTile);
  }
  if (mContext.getResources().getBoolean(R.bool.quick_settings_show_rotation_lock)) {
    QuickSettingsTileView rotationLockTile=(QuickSettingsTileView)inflater.inflate(R.layout.quick_settings_tile,parent,false);
    rotationLockTile.setContent(R.layout.quick_settings_tile_rotation_lock,inflater);
    rotationLockTile.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        boolean locked=RotationPolicy.isRotationLocked(mContext);
        RotationPolicy.setRotationLock(mContext,!locked);
      }
    }
);
    mModel.addRotationLockTile(rotationLockTile,new QuickSettingsModel.RefreshCallback(){
      @Override public void refreshView(      QuickSettingsTileView view,      State state){
        TextView tv=(TextView)view.findViewById(R.id.rotation_lock_textview);
        tv.setCompoundDrawablesRelativeWithIntrinsicBounds(0,state.iconId,0,0);
        tv.setText(state.label);
      }
    }
);
    parent.addView(rotationLockTile);
  }
  QuickSettingsTileView batteryTile=(QuickSettingsTileView)inflater.inflate(R.layout.quick_settings_tile,parent,false);
  batteryTile.setContent(R.layout.quick_settings_tile_battery,inflater);
  batteryTile.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      startSettingsActivity(Intent.ACTION_POWER_USAGE_SUMMARY);
    }
  }
);
  mModel.addBatteryTile(batteryTile,new QuickSettingsModel.RefreshCallback(){
    @Override public void refreshView(    QuickSettingsTileView view,    State state){
      QuickSettingsModel.BatteryState batteryState=(QuickSettingsModel.BatteryState)state;
      TextView tv=(TextView)view.findViewById(R.id.battery_textview);
      ImageView iv=(ImageView)view.findViewById(R.id.battery_image);
      Drawable d=batteryState.pluggedIn ? mChargingBatteryLevels : mBatteryLevels;
      String t;
      if (batteryState.batteryLevel == 100) {
        t=mContext.getString(R.string.quick_settings_battery_charged_label);
      }
 else {
        t=batteryState.pluggedIn ? mContext.getString(R.string.quick_settings_battery_charging_label,batteryState.batteryLevel) : mContext.getString(R.string.status_bar_settings_battery_meter_format,batteryState.batteryLevel);
      }
      iv.setImageDrawable(d);
      iv.setImageLevel(batteryState.batteryLevel);
      tv.setText(t);
    }
  }
);
  parent.addView(batteryTile);
  QuickSettingsTileView airplaneTile=(QuickSettingsTileView)inflater.inflate(R.layout.quick_settings_tile,parent,false);
  airplaneTile.setContent(R.layout.quick_settings_tile_airplane,inflater);
  mModel.addAirplaneModeTile(airplaneTile,new QuickSettingsModel.RefreshCallback(){
    @Override public void refreshView(    QuickSettingsTileView view,    State state){
      TextView tv=(TextView)view.findViewById(R.id.airplane_mode_textview);
      tv.setCompoundDrawablesRelativeWithIntrinsicBounds(0,state.iconId,0,0);
    }
  }
);
  parent.addView(airplaneTile);
  if (mModel.deviceSupportsBluetooth()) {
    QuickSettingsTileView bluetoothTile=(QuickSettingsTileView)inflater.inflate(R.layout.quick_settings_tile,parent,false);
    bluetoothTile.setContent(R.layout.quick_settings_tile_bluetooth,inflater);
    bluetoothTile.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        startSettingsActivity(android.provider.Settings.ACTION_BLUETOOTH_SETTINGS);
      }
    }
);
    mModel.addBluetoothTile(bluetoothTile,new QuickSettingsModel.RefreshCallback(){
      @Override public void refreshView(      QuickSettingsTileView view,      State state){
        TextView tv=(TextView)view.findViewById(R.id.bluetooth_textview);
        tv.setCompoundDrawablesRelativeWithIntrinsicBounds(0,state.iconId,0,0);
      }
    }
);
    parent.addView(bluetoothTile);
  }
  QuickSettingsTileView brightnessTile=(QuickSettingsTileView)inflater.inflate(R.layout.quick_settings_tile,parent,false);
  brightnessTile.setContent(R.layout.quick_settings_tile_brightness,inflater);
  brightnessTile.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mBar.collapseAllPanels(true);
      showBrightnessDialog();
    }
  }
);
  parent.addView(brightnessTile);
}
