{
  QuickSettingsTileView userTile=(QuickSettingsTileView)inflater.inflate(R.layout.quick_settings_tile,parent,false);
  userTile.setContent(R.layout.quick_settings_tile_user,inflater);
  userTile.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      final UserManager um=UserManager.get(mContext);
      if (um.isUserSwitcherEnabled()) {
        final ViewGroup switcherParent=getService().getQuickSettingsOverlayParent();
        final UserSwitcherHostView switcher=(UserSwitcherHostView)inflater.inflate(R.layout.user_switcher_host,switcherParent,false);
        switcher.setFinishRunnable(new Runnable(){
          @Override public void run(){
            switcherParent.removeView(switcher);
          }
        }
);
        switcher.refreshUsers();
        switcherParent.addView(switcher);
      }
 else {
        collapsePanels();
        Intent intent=ContactsContract.QuickContact.composeQuickContactsIntent(mContext,v,ContactsContract.Profile.CONTENT_URI,ContactsContract.QuickContact.MODE_LARGE,null);
        mContext.startActivityAsUser(intent,new UserHandle(UserHandle.USER_CURRENT));
      }
    }
  }
);
  mModel.addUserTile(userTile,new QuickSettingsModel.RefreshCallback(){
    @Override public void refreshView(    QuickSettingsTileView view,    State state){
      UserState us=(UserState)state;
      ImageView iv=(ImageView)view.findViewById(R.id.user_imageview);
      TextView tv=(TextView)view.findViewById(R.id.user_textview);
      tv.setText(state.label);
      iv.setImageDrawable(us.avatar);
      view.setContentDescription(mContext.getString(R.string.accessibility_quick_settings_user,state.label));
    }
  }
);
  parent.addView(userTile);
  mDynamicSpannedTiles.add(userTile);
  final QuickSettingsBasicTile brightnessTile=new QuickSettingsBasicTile(mContext);
  brightnessTile.setImageResource(R.drawable.ic_qs_brightness_auto_off);
  brightnessTile.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      collapsePanels();
      showBrightnessDialog();
    }
  }
);
  mModel.addBrightnessTile(brightnessTile,new QuickSettingsModel.BasicRefreshCallback(brightnessTile));
  parent.addView(brightnessTile);
  mDynamicSpannedTiles.add(brightnessTile);
  final QuickSettingsBasicTile settingsTile=new QuickSettingsBasicTile(mContext);
  settingsTile.setImageResource(R.drawable.ic_qs_settings);
  settingsTile.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      startSettingsActivity(android.provider.Settings.ACTION_SETTINGS);
    }
  }
);
  mModel.addSettingsTile(settingsTile,new QuickSettingsModel.BasicRefreshCallback(settingsTile));
  parent.addView(settingsTile);
  mDynamicSpannedTiles.add(settingsTile);
  if (SHOW_ACCESSIBILITY_TILES) {
    final SystemSettingTile inversionTile=new SystemSettingTile(mContext);
    inversionTile.setUri(Settings.Secure.ACCESSIBILITY_DISPLAY_INVERSION_ENABLED,SystemSettingTile.TYPE_SECURE);
    inversionTile.setFragment("Settings$AccessibilityInversionSettingsActivity");
    mModel.addInversionTile(inversionTile,inversionTile.getRefreshCallback());
    parent.addView(inversionTile);
    mDynamicSpannedTiles.add(inversionTile);
    final SystemSettingTile contrastTile=new SystemSettingTile(mContext);
    contrastTile.setUri(Settings.Secure.ACCESSIBILITY_DISPLAY_CONTRAST_ENABLED,SystemSettingTile.TYPE_SECURE);
    contrastTile.setFragment("Settings$AccessibilityContrastSettingsActivity");
    mModel.addContrastTile(contrastTile,contrastTile.getRefreshCallback());
    parent.addView(contrastTile);
    mDynamicSpannedTiles.add(contrastTile);
    final SystemSettingTile colorSpaceTile=new SystemSettingTile(mContext);
    colorSpaceTile.setUri(Settings.Secure.ACCESSIBILITY_DISPLAY_DALTONIZER_ENABLED,SystemSettingTile.TYPE_SECURE);
    colorSpaceTile.setFragment("Settings$AccessibilityDaltonizerSettingsActivity");
    mModel.addColorSpaceTile(colorSpaceTile,colorSpaceTile.getRefreshCallback());
    parent.addView(colorSpaceTile);
    mDynamicSpannedTiles.add(colorSpaceTile);
  }
}
