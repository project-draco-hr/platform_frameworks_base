{
  assertEquals("",TextUtils.concat());
  assertEquals("foo",TextUtils.concat("foo"));
  assertEquals("foobar",TextUtils.concat("foo","bar"));
  assertEquals("foobarbaz",TextUtils.concat("foo","bar","baz"));
  SpannableString foo=new SpannableString("foo");
  foo.setSpan("foo",1,2,Spannable.SPAN_EXCLUSIVE_INCLUSIVE);
  SpannableString bar=new SpannableString("bar");
  bar.setSpan("bar",1,2,Spannable.SPAN_EXCLUSIVE_INCLUSIVE);
  SpannableString baz=new SpannableString("baz");
  baz.setSpan("baz",1,2,Spannable.SPAN_EXCLUSIVE_INCLUSIVE);
  assertEquals("foo",TextUtils.concat(foo).toString());
  assertEquals("foobar",TextUtils.concat(foo,bar).toString());
  assertEquals("foobarbaz",TextUtils.concat(foo,bar,baz).toString());
  assertEquals(1,((Spanned)TextUtils.concat(foo)).getSpanStart("foo"));
  assertEquals(1,((Spanned)TextUtils.concat(foo,bar)).getSpanStart("foo"));
  assertEquals(4,((Spanned)TextUtils.concat(foo,bar)).getSpanStart("bar"));
  assertEquals(1,((Spanned)TextUtils.concat(foo,bar,baz)).getSpanStart("foo"));
  assertEquals(4,((Spanned)TextUtils.concat(foo,bar,baz)).getSpanStart("bar"));
  assertEquals(7,((Spanned)TextUtils.concat(foo,bar,baz)).getSpanStart("baz"));
  assertTrue(TextUtils.concat("foo","bar") instanceof String);
  assertTrue(TextUtils.concat(foo,bar) instanceof SpannedString);
}
