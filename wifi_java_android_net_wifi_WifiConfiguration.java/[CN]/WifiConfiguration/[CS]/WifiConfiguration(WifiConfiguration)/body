{
  if (source != null) {
    networkId=source.networkId;
    status=source.status;
    disableReason=source.disableReason;
    disableReason=source.disableReason;
    SSID=source.SSID;
    BSSID=source.BSSID;
    FQDN=source.FQDN;
    roamingConsortiumIds=new HashSet<Long>();
    for (    Long roamingConsortiumId : source.roamingConsortiumIds) {
      roamingConsortiumIds.add(roamingConsortiumId);
    }
    providerFriendlyName=source.providerFriendlyName;
    preSharedKey=source.preSharedKey;
    apBand=source.apBand;
    apChannel=source.apChannel;
    wepKeys=new String[4];
    for (int i=0; i < wepKeys.length; i++) {
      wepKeys[i]=source.wepKeys[i];
    }
    wepTxKeyIndex=source.wepTxKeyIndex;
    priority=source.priority;
    hiddenSSID=source.hiddenSSID;
    allowedKeyManagement=(BitSet)source.allowedKeyManagement.clone();
    allowedProtocols=(BitSet)source.allowedProtocols.clone();
    allowedAuthAlgorithms=(BitSet)source.allowedAuthAlgorithms.clone();
    allowedPairwiseCiphers=(BitSet)source.allowedPairwiseCiphers.clone();
    allowedGroupCiphers=(BitSet)source.allowedGroupCiphers.clone();
    enterpriseConfig=new WifiEnterpriseConfig(source.enterpriseConfig);
    defaultGwMacAddress=source.defaultGwMacAddress;
    mIpConfiguration=new IpConfiguration(source.mIpConfiguration);
    if ((source.connectChoices != null) && (source.connectChoices.size() > 0)) {
      connectChoices=new HashMap<String,Integer>();
      connectChoices.putAll(source.connectChoices);
    }
    if ((source.linkedConfigurations != null) && (source.linkedConfigurations.size() > 0)) {
      linkedConfigurations=new HashMap<String,Integer>();
      linkedConfigurations.putAll(source.linkedConfigurations);
    }
    mCachedConfigKey=null;
    autoJoinStatus=source.autoJoinStatus;
    selfAdded=source.selfAdded;
    validatedInternetAccess=source.validatedInternetAccess;
    ephemeral=source.ephemeral;
    if (source.visibility != null) {
      visibility=new Visibility(source.visibility);
    }
    lastFailure=source.lastFailure;
    didSelfAdd=source.didSelfAdd;
    lastConnectUid=source.lastConnectUid;
    lastUpdateUid=source.lastUpdateUid;
    creatorUid=source.creatorUid;
    peerWifiConfiguration=source.peerWifiConfiguration;
    blackListTimestamp=source.blackListTimestamp;
    lastConnected=source.lastConnected;
    lastDisconnected=source.lastDisconnected;
    lastConnectionFailure=source.lastConnectionFailure;
    lastRoamingFailure=source.lastRoamingFailure;
    lastRoamingFailureReason=source.lastRoamingFailureReason;
    roamingFailureBlackListTimeMilli=source.roamingFailureBlackListTimeMilli;
    numConnectionFailures=source.numConnectionFailures;
    numIpConfigFailures=source.numIpConfigFailures;
    numAuthFailures=source.numAuthFailures;
    numScorerOverride=source.numScorerOverride;
    numScorerOverrideAndSwitchedNetwork=source.numScorerOverrideAndSwitchedNetwork;
    numAssociation=source.numAssociation;
    numUserTriggeredWifiDisableLowRSSI=source.numUserTriggeredWifiDisableLowRSSI;
    numUserTriggeredWifiDisableBadRSSI=source.numUserTriggeredWifiDisableBadRSSI;
    numUserTriggeredWifiDisableNotHighRSSI=source.numUserTriggeredWifiDisableNotHighRSSI;
    numTicksAtLowRSSI=source.numTicksAtLowRSSI;
    numTicksAtBadRSSI=source.numTicksAtBadRSSI;
    numTicksAtNotHighRSSI=source.numTicksAtNotHighRSSI;
    numUserTriggeredJoinAttempts=source.numUserTriggeredJoinAttempts;
    autoJoinBSSID=source.autoJoinBSSID;
    autoJoinUseAggressiveJoinAttemptThreshold=source.autoJoinUseAggressiveJoinAttemptThreshold;
    autoJoinBailedDueToLowRssi=source.autoJoinBailedDueToLowRssi;
    dirty=source.dirty;
    numNoInternetAccessReports=source.numNoInternetAccessReports;
    creationTime=source.creationTime;
    updateTime=source.updateTime;
  }
}
