{
  StringBuilder sbuf=new StringBuilder();
  if (this.status == WifiConfiguration.Status.CURRENT) {
    sbuf.append("* ");
  }
 else   if (this.status == WifiConfiguration.Status.DISABLED) {
    sbuf.append("- DSBLE: ").append(this.disableReason).append(" ");
  }
  sbuf.append("ID: ").append(this.networkId).append(" SSID: ").append(this.SSID).append(" BSSID: ").append(this.BSSID).append(" FQDN: ").append(this.FQDN).append(" REALM: ").append(this.naiRealm).append(" PRIO: ").append(this.priority).append('\n');
  if (this.numConnectionFailures > 0) {
    sbuf.append(" numConnectFailures ").append(this.numConnectionFailures).append("\n");
  }
  if (this.autoJoinStatus > 0) {
    sbuf.append(" autoJoinStatus ").append(this.numConnectionFailures).append("\n");
  }
  if (this.didSelfAdd || this.selfAdded) {
    if (this.didSelfAdd)     sbuf.append(" didSelfAdd");
    if (this.selfAdded)     sbuf.append(" selfAdded");
    if (this.noInternetAccess)     sbuf.append(" noInternetAccess");
    sbuf.append("\n");
  }
  sbuf.append(" KeyMgmt:");
  for (int k=0; k < this.allowedKeyManagement.size(); k++) {
    if (this.allowedKeyManagement.get(k)) {
      sbuf.append(" ");
      if (k < KeyMgmt.strings.length) {
        sbuf.append(KeyMgmt.strings[k]);
      }
 else {
        sbuf.append("??");
      }
    }
  }
  sbuf.append(" Protocols:");
  for (int p=0; p < this.allowedProtocols.size(); p++) {
    if (this.allowedProtocols.get(p)) {
      sbuf.append(" ");
      if (p < Protocol.strings.length) {
        sbuf.append(Protocol.strings[p]);
      }
 else {
        sbuf.append("??");
      }
    }
  }
  sbuf.append('\n');
  sbuf.append(" AuthAlgorithms:");
  for (int a=0; a < this.allowedAuthAlgorithms.size(); a++) {
    if (this.allowedAuthAlgorithms.get(a)) {
      sbuf.append(" ");
      if (a < AuthAlgorithm.strings.length) {
        sbuf.append(AuthAlgorithm.strings[a]);
      }
 else {
        sbuf.append("??");
      }
    }
  }
  sbuf.append('\n');
  sbuf.append(" PairwiseCiphers:");
  for (int pc=0; pc < this.allowedPairwiseCiphers.size(); pc++) {
    if (this.allowedPairwiseCiphers.get(pc)) {
      sbuf.append(" ");
      if (pc < PairwiseCipher.strings.length) {
        sbuf.append(PairwiseCipher.strings[pc]);
      }
 else {
        sbuf.append("??");
      }
    }
  }
  sbuf.append('\n');
  sbuf.append(" GroupCiphers:");
  for (int gc=0; gc < this.allowedGroupCiphers.size(); gc++) {
    if (this.allowedGroupCiphers.get(gc)) {
      sbuf.append(" ");
      if (gc < GroupCipher.strings.length) {
        sbuf.append(GroupCipher.strings[gc]);
      }
 else {
        sbuf.append("??");
      }
    }
  }
  sbuf.append('\n').append(" PSK: ");
  if (this.preSharedKey != null) {
    sbuf.append('*');
  }
  sbuf.append(enterpriseConfig);
  sbuf.append('\n');
  sbuf.append(mIpConfiguration.toString());
  if (this.creatorUid != 0)   sbuf.append("uid=" + Integer.toString(creatorUid));
  if (this.autoJoinBSSID != null)   sbuf.append("autoJoinBSSID=" + autoJoinBSSID);
  if (this.blackListTimestamp != 0) {
    long now_ms=System.currentTimeMillis();
    long diff=now_ms - this.blackListTimestamp;
    if (diff <= 0) {
      sbuf.append("blackListed since <incorrect>");
    }
 else {
      sbuf.append("blackListed since ").append(Long.toString(diff / 1000)).append("sec");
    }
  }
  sbuf.append('\n');
  if (this.linkedConfigurations != null) {
    for (    String key : this.linkedConfigurations.keySet()) {
      sbuf.append(" linked: ").append(key);
      sbuf.append('\n');
    }
  }
  if (this.connectChoices != null) {
    for (    String key : this.connectChoices.keySet()) {
      Integer choice=this.connectChoices.get(key);
      if (choice != null) {
        sbuf.append(" choice: ").append(key);
        sbuf.append(" = ").append(choice);
        sbuf.append('\n');
      }
    }
  }
  sbuf.append(" triggeredLow: ").append(numUserTriggeredWifiDisableLowRSSI);
  sbuf.append(" triggeredBad: ").append(numUserTriggeredWifiDisableBadRSSI);
  sbuf.append(" triggeredNotHigh: ").append(numUserTriggeredWifiDisableNotHighRSSI);
  sbuf.append('\n');
  sbuf.append(" ticksLow: ").append(numTicksAtLowRSSI);
  sbuf.append(" ticksBad: ").append(numTicksAtBadRSSI);
  sbuf.append(" ticksNotHigh: ").append(numTicksAtNotHighRSSI);
  sbuf.append('\n');
  sbuf.append(" triggeredJoin: ").append(numUserTriggeredJoinAttempts);
  sbuf.append('\n');
  return sbuf.toString();
}
