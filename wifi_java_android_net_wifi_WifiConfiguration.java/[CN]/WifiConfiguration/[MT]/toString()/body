{
  StringBuilder sbuf=new StringBuilder();
  if (this.status == WifiConfiguration.Status.CURRENT) {
    sbuf.append("* ");
  }
 else   if (this.status == WifiConfiguration.Status.DISABLED) {
    sbuf.append("- DSBLE ");
  }
  sbuf.append("ID: ").append(this.networkId).append(" SSID: ").append(this.SSID).append(" BSSID: ").append(this.BSSID).append(" FQDN: ").append(this.FQDN).append(" REALM: ").append(this.naiRealm).append(" PRIO: ").append(this.priority).append('\n');
  if (this.numConnectionFailures > 0) {
    sbuf.append(" numConnectFailures ").append(this.numConnectionFailures).append("\n");
  }
  if (this.numIpConfigFailures > 0) {
    sbuf.append(" numIpConfigFailures ").append(this.numIpConfigFailures).append("\n");
  }
  if (this.numAuthFailures > 0) {
    sbuf.append(" numAuthFailures ").append(this.numAuthFailures).append("\n");
  }
  if (this.autoJoinStatus > 0) {
    sbuf.append(" autoJoinStatus ").append(this.autoJoinStatus).append("\n");
  }
  if (this.disableReason > 0) {
    sbuf.append(" disableReason ").append(this.disableReason).append("\n");
  }
  if (this.numAssociation > 0) {
    sbuf.append(" numAssociation ").append(this.numAssociation).append("\n");
  }
  if (this.didSelfAdd)   sbuf.append(" didSelfAdd");
  if (this.selfAdded)   sbuf.append(" selfAdded");
  if (this.noInternetAccess)   sbuf.append(" noInternetAccess");
  if (this.ephemeral)   sbuf.append(" ephemeral");
  if (this.didSelfAdd || this.selfAdded || this.noInternetAccess|| this.ephemeral) {
    sbuf.append("\n");
  }
  sbuf.append(" KeyMgmt:");
  for (int k=0; k < this.allowedKeyManagement.size(); k++) {
    if (this.allowedKeyManagement.get(k)) {
      sbuf.append(" ");
      if (k < KeyMgmt.strings.length) {
        sbuf.append(KeyMgmt.strings[k]);
      }
 else {
        sbuf.append("??");
      }
    }
  }
  sbuf.append(" Protocols:");
  for (int p=0; p < this.allowedProtocols.size(); p++) {
    if (this.allowedProtocols.get(p)) {
      sbuf.append(" ");
      if (p < Protocol.strings.length) {
        sbuf.append(Protocol.strings[p]);
      }
 else {
        sbuf.append("??");
      }
    }
  }
  sbuf.append('\n');
  sbuf.append(" AuthAlgorithms:");
  for (int a=0; a < this.allowedAuthAlgorithms.size(); a++) {
    if (this.allowedAuthAlgorithms.get(a)) {
      sbuf.append(" ");
      if (a < AuthAlgorithm.strings.length) {
        sbuf.append(AuthAlgorithm.strings[a]);
      }
 else {
        sbuf.append("??");
      }
    }
  }
  sbuf.append('\n');
  sbuf.append(" PairwiseCiphers:");
  for (int pc=0; pc < this.allowedPairwiseCiphers.size(); pc++) {
    if (this.allowedPairwiseCiphers.get(pc)) {
      sbuf.append(" ");
      if (pc < PairwiseCipher.strings.length) {
        sbuf.append(PairwiseCipher.strings[pc]);
      }
 else {
        sbuf.append("??");
      }
    }
  }
  sbuf.append('\n');
  sbuf.append(" GroupCiphers:");
  for (int gc=0; gc < this.allowedGroupCiphers.size(); gc++) {
    if (this.allowedGroupCiphers.get(gc)) {
      sbuf.append(" ");
      if (gc < GroupCipher.strings.length) {
        sbuf.append(GroupCipher.strings[gc]);
      }
 else {
        sbuf.append("??");
      }
    }
  }
  sbuf.append('\n').append(" PSK: ");
  if (this.preSharedKey != null) {
    sbuf.append('*');
  }
  sbuf.append("\nEnterprise config:\n");
  sbuf.append(enterpriseConfig);
  sbuf.append("IP config:\n");
  sbuf.append(mIpConfiguration.toString());
  if (this.autoJoinBSSID != null)   sbuf.append(" autoJoinBSSID=" + autoJoinBSSID);
  long now_ms=System.currentTimeMillis();
  if (this.blackListTimestamp != 0) {
    sbuf.append('\n');
    long diff=now_ms - this.blackListTimestamp;
    if (diff <= 0) {
      sbuf.append(" blackListed since <incorrect>");
    }
 else {
      sbuf.append(" blackListed: ").append(Long.toString(diff / 1000)).append("sec");
    }
  }
  if (creatorUid != 0)   sbuf.append(" cuid=" + Integer.toString(creatorUid));
  if (creatorName != null)   sbuf.append(" cname=" + creatorName);
  if (lastUpdateUid != 0)   sbuf.append(" luid=" + lastUpdateUid);
  if (lastUpdateName != null)   sbuf.append(" lname=" + lastUpdateName);
  sbuf.append("userApproved=" + userApprovedAsString(userApproved));
  if (this.lastConnected != 0) {
    sbuf.append('\n');
    long diff=now_ms - this.lastConnected;
    if (diff <= 0) {
      sbuf.append("lastConnected since <incorrect>");
    }
 else {
      sbuf.append("lastConnected: ").append(Long.toString(diff / 1000)).append("sec");
    }
  }
  if (this.lastConnectionFailure != 0) {
    sbuf.append('\n');
    long diff=now_ms - this.lastConnectionFailure;
    if (diff <= 0) {
      sbuf.append("lastConnectionFailure since <incorrect>");
    }
 else {
      sbuf.append("lastConnectionFailure: ").append(Long.toString(diff / 1000));
      sbuf.append("sec");
    }
  }
  sbuf.append('\n');
  if (this.linkedConfigurations != null) {
    for (    String key : this.linkedConfigurations.keySet()) {
      sbuf.append(" linked: ").append(key);
      sbuf.append('\n');
    }
  }
  if (this.connectChoices != null) {
    for (    String key : this.connectChoices.keySet()) {
      Integer choice=this.connectChoices.get(key);
      if (choice != null) {
        sbuf.append(" choice: ").append(key);
        sbuf.append(" = ").append(choice);
        sbuf.append('\n');
      }
    }
  }
  if (this.scanResultCache != null) {
    sbuf.append("Scan Cache:  ").append('\n');
    ArrayList<ScanResult> list=sortScanResults();
    if (list.size() > 0) {
      for (      ScanResult result : list) {
        long milli=now_ms - result.seen;
        long ageSec=0;
        long ageMin=0;
        long ageHour=0;
        long ageMilli=0;
        long ageDay=0;
        if (now_ms > result.seen && result.seen > 0) {
          ageMilli=milli % 1000;
          ageSec=(milli / 1000) % 60;
          ageMin=(milli / (60 * 1000)) % 60;
          ageHour=(milli / (60 * 60 * 1000)) % 24;
          ageDay=(milli / (24 * 60 * 60* 1000));
        }
        sbuf.append("{").append(result.BSSID).append(",").append(result.frequency);
        sbuf.append(",").append(String.format("%3d",result.level));
        if (result.autoJoinStatus > 0) {
          sbuf.append(",st=").append(result.autoJoinStatus);
        }
        if (ageSec > 0 || ageMilli > 0) {
          sbuf.append(String.format(",%4d.%02d.%02d.%02d.%03dms",ageDay,ageHour,ageMin,ageSec,ageMilli));
        }
        if (result.numIpConfigFailures > 0) {
          sbuf.append(",ipfail=");
          sbuf.append(result.numIpConfigFailures);
        }
        sbuf.append("} ");
      }
      sbuf.append('\n');
    }
  }
  sbuf.append("triggeredLow: ").append(this.numUserTriggeredWifiDisableLowRSSI);
  sbuf.append(" triggeredBad: ").append(this.numUserTriggeredWifiDisableBadRSSI);
  sbuf.append(" triggeredNotHigh: ").append(this.numUserTriggeredWifiDisableNotHighRSSI);
  sbuf.append('\n');
  sbuf.append("ticksLow: ").append(this.numTicksAtLowRSSI);
  sbuf.append(" ticksBad: ").append(this.numTicksAtBadRSSI);
  sbuf.append(" ticksNotHigh: ").append(this.numTicksAtNotHighRSSI);
  sbuf.append('\n');
  sbuf.append("triggeredJoin: ").append(this.numUserTriggeredJoinAttempts);
  sbuf.append('\n');
  sbuf.append("autoJoinBailedDueToLowRssi: ").append(this.autoJoinBailedDueToLowRssi);
  sbuf.append('\n');
  sbuf.append("autoJoinUseAggressiveJoinAttemptThreshold: ");
  sbuf.append(this.autoJoinUseAggressiveJoinAttemptThreshold);
  sbuf.append('\n');
  return sbuf.toString();
}
