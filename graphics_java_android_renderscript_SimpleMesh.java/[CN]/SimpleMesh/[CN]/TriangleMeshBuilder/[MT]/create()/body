{
  Element.Builder b=new Element.Builder(mRS);
  int floatCount=mVtxSize;
  b.add(Element.createVector(mRS,Element.DataType.FLOAT_32,mVtxSize),"position");
  if ((mFlags & COLOR) != 0) {
    floatCount+=4;
    b.add(Element.F32_4(mRS),"color");
  }
  if ((mFlags & TEXTURE_0) != 0) {
    floatCount+=2;
    b.add(Element.F32_2(mRS),"texture0");
  }
  if ((mFlags & NORMAL) != 0) {
    floatCount+=3;
    b.add(Element.F32_3(mRS),"normal");
  }
  mElement=b.create();
  Builder smb=new Builder(mRS);
  smb.addVertexType(mElement,mVtxCount / floatCount);
  smb.setIndexType(Element.createIndex(mRS),mIndexCount);
  smb.setPrimitive(Primitive.TRIANGLE);
  SimpleMesh sm=smb.create();
  Allocation vertexAlloc=sm.createVertexAllocation(0);
  Allocation indexAlloc=sm.createIndexAllocation();
  sm.bindVertexAllocation(vertexAlloc,0);
  sm.bindIndexAllocation(indexAlloc);
  vertexAlloc.data(mVtxData);
  vertexAlloc.uploadToBufferObject();
  indexAlloc.data(mIndexData);
  indexAlloc.uploadToBufferObject();
  return sm;
}
