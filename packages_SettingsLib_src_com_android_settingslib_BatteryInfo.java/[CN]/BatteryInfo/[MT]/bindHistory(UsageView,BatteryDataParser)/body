{
  BatteryDataParser parser=new BatteryDataParser(){
    SparseIntArray points=new SparseIntArray();
    @Override public void onParsingStarted(    long startTime,    long endTime){
      timePeriod=endTime - startTime - remainingTimeUs / 1000;
      view.clearPaths();
      view.configureGraph((int)(endTime - startTime),100,remainingTimeUs != 0,mCharging);
    }
    @Override public void onDataPoint(    long time,    HistoryItem record){
      points.put((int)time,record.batteryLevel);
    }
    @Override public void onDataGap(){
      if (points.size() > 1) {
        view.addPath(points);
      }
      points.clear();
    }
    @Override public void onParsingDone(){
      if (points.size() > 1) {
        view.addPath(points);
      }
    }
  }
;
  BatteryDataParser[] parserList=new BatteryDataParser[parsers.length + 1];
  for (int i=0; i < parsers.length; i++) {
    parserList[i]=parsers[i];
  }
  parserList[parsers.length]=parser;
  parse(mStats,remainingTimeUs,parserList);
  final Context context=view.getContext();
  String timeString=context.getString(R.string.charge_length_format,Formatter.formatShortElapsedTime(context,timePeriod));
  String remaining="";
  if (remainingTimeUs != 0) {
    remaining=context.getString(R.string.remaining_length_format,Formatter.formatShortElapsedTime(context,remainingTimeUs / 1000));
  }
  view.setBottomLabels(new CharSequence[]{timeString,remaining});
}
