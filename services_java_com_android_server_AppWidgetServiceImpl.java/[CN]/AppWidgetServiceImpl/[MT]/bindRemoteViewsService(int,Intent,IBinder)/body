{
synchronized (mAppWidgetIds) {
    ensureStateLoadedLocked();
    AppWidgetId id=lookupAppWidgetIdLocked(appWidgetId);
    if (id == null) {
      throw new IllegalArgumentException("bad appWidgetId");
    }
    final ComponentName componentName=intent.getComponent();
    try {
      final ServiceInfo si=mContext.getPackageManager().getServiceInfo(componentName,PackageManager.GET_PERMISSIONS);
      if (!android.Manifest.permission.BIND_REMOTEVIEWS.equals(si.permission)) {
        throw new SecurityException("Selected service does not require " + android.Manifest.permission.BIND_REMOTEVIEWS + ": "+ componentName);
      }
    }
 catch (    PackageManager.NameNotFoundException e) {
      throw new IllegalArgumentException("Unknown component " + componentName);
    }
    ServiceConnectionProxy conn=null;
    FilterComparison fc=new FilterComparison(intent);
    Pair<Integer,FilterComparison> key=Pair.create(appWidgetId,fc);
    if (mBoundRemoteViewsServices.containsKey(key)) {
      conn=(ServiceConnectionProxy)mBoundRemoteViewsServices.get(key);
      conn.disconnect();
      mContext.unbindService(conn);
      mBoundRemoteViewsServices.remove(key);
    }
    int userId=UserId.getUserId(id.provider.uid);
    final long token=Binder.clearCallingIdentity();
    try {
      conn=new ServiceConnectionProxy(key,connection);
      mContext.bindService(intent,conn,Context.BIND_AUTO_CREATE,userId);
      mBoundRemoteViewsServices.put(key,conn);
    }
  finally {
      Binder.restoreCallingIdentity(token);
    }
    incrementAppWidgetServiceRefCount(appWidgetId,fc);
  }
}
