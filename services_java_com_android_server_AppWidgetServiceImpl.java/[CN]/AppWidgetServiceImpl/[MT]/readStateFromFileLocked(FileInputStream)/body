{
  boolean success=false;
  try {
    XmlPullParser parser=Xml.newPullParser();
    parser.setInput(stream,null);
    int type;
    int providerIndex=0;
    HashMap<Integer,Provider> loadedProviders=new HashMap<Integer,Provider>();
    do {
      type=parser.next();
      if (type == XmlPullParser.START_TAG) {
        String tag=parser.getName();
        if ("p".equals(tag)) {
          String pkg=parser.getAttributeValue(null,"pkg");
          String cl=parser.getAttributeValue(null,"cl");
          final IPackageManager packageManager=AppGlobals.getPackageManager();
          try {
            packageManager.getReceiverInfo(new ComponentName(pkg,cl),0,mUserId);
          }
 catch (          RemoteException e) {
            String[] pkgs=mContext.getPackageManager().currentToCanonicalPackageNames(new String[]{pkg});
            pkg=pkgs[0];
          }
          Provider p=lookupProviderLocked(new ComponentName(pkg,cl));
          if (p == null && mSafeMode) {
            p=new Provider();
            p.info=new AppWidgetProviderInfo();
            p.info.provider=new ComponentName(pkg,cl);
            p.zombie=true;
            mInstalledProviders.add(p);
          }
          if (p != null) {
            loadedProviders.put(providerIndex,p);
          }
          providerIndex++;
        }
 else         if ("h".equals(tag)) {
          Host host=new Host();
          host.packageName=parser.getAttributeValue(null,"pkg");
          try {
            host.uid=getUidForPackage(host.packageName);
          }
 catch (          PackageManager.NameNotFoundException ex) {
            host.zombie=true;
          }
          if (!host.zombie || mSafeMode) {
            host.hostId=Integer.parseInt(parser.getAttributeValue(null,"id"),16);
            mHosts.add(host);
          }
        }
 else         if ("b".equals(tag)) {
          String packageName=parser.getAttributeValue(null,"packageName");
          if (packageName != null) {
            mPackagesWithBindWidgetPermission.add(packageName);
          }
        }
 else         if ("g".equals(tag)) {
          AppWidgetId id=new AppWidgetId();
          id.appWidgetId=Integer.parseInt(parser.getAttributeValue(null,"id"),16);
          if (id.appWidgetId >= mNextAppWidgetId) {
            mNextAppWidgetId=id.appWidgetId + 1;
          }
          Bundle options=new Bundle();
          String minWidthString=parser.getAttributeValue(null,"min_width");
          if (minWidthString != null) {
            options.putInt(AppWidgetManager.OPTION_APPWIDGET_MIN_WIDTH,Integer.parseInt(minWidthString,16));
          }
          String minHeightString=parser.getAttributeValue(null,"min_height");
          if (minHeightString != null) {
            options.putInt(AppWidgetManager.OPTION_APPWIDGET_MIN_HEIGHT,Integer.parseInt(minHeightString,16));
          }
          String maxWidthString=parser.getAttributeValue(null,"max_width");
          if (maxWidthString != null) {
            options.putInt(AppWidgetManager.OPTION_APPWIDGET_MAX_WIDTH,Integer.parseInt(maxWidthString,16));
          }
          String maxHeightString=parser.getAttributeValue(null,"max_height");
          if (maxHeightString != null) {
            options.putInt(AppWidgetManager.OPTION_APPWIDGET_MAX_HEIGHT,Integer.parseInt(maxHeightString,16));
          }
          String categoryString=parser.getAttributeValue(null,"host_category");
          if (categoryString != null) {
            options.putInt(AppWidgetManager.OPTION_APPWIDGET_HOST_CATEGORY,Integer.parseInt(categoryString,16));
          }
          id.options=options;
          String providerString=parser.getAttributeValue(null,"p");
          if (providerString != null) {
            int pIndex=Integer.parseInt(providerString,16);
            id.provider=loadedProviders.get(pIndex);
            if (false) {
              Slog.d(TAG,"bound appWidgetId=" + id.appWidgetId + " to provider "+ pIndex+ " which is "+ id.provider);
            }
            if (id.provider == null) {
              continue;
            }
          }
          int hIndex=Integer.parseInt(parser.getAttributeValue(null,"h"),16);
          id.host=mHosts.get(hIndex);
          if (id.host == null) {
            continue;
          }
          if (id.provider != null) {
            id.provider.instances.add(id);
          }
          id.host.instances.add(id);
          mAppWidgetIds.add(id);
        }
      }
    }
 while (type != XmlPullParser.END_DOCUMENT);
    success=true;
  }
 catch (  NullPointerException e) {
    Slog.w(TAG,"failed parsing " + e);
  }
catch (  NumberFormatException e) {
    Slog.w(TAG,"failed parsing " + e);
  }
catch (  XmlPullParserException e) {
    Slog.w(TAG,"failed parsing " + e);
  }
catch (  IOException e) {
    Slog.w(TAG,"failed parsing " + e);
  }
catch (  IndexOutOfBoundsException e) {
    Slog.w(TAG,"failed parsing " + e);
  }
  if (success) {
    for (int i=mHosts.size() - 1; i >= 0; i--) {
      pruneHostLocked(mHosts.get(i));
    }
  }
 else {
    Slog.w(TAG,"Failed to read state, clearing widgets and hosts.");
    mAppWidgetIds.clear();
    mHosts.clear();
    final int N=mInstalledProviders.size();
    for (int i=0; i < N; i++) {
      mInstalledProviders.get(i).instances.clear();
    }
  }
}
