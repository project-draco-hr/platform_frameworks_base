{
  checkNotNull(policy,"DataUsagePolicy cannot be null");
  checkNotNull(callback,"DataUsageCallback cannot be null");
  final Looper looper;
  if (handler == null) {
    looper=Looper.myLooper();
  }
 else {
    looper=handler.getLooper();
  }
  if (DBG)   Log.d(TAG,"registerDataUsageCallback called with " + policy);
  NetworkTemplate[] templates;
  if (policy.subscriberIds == null || policy.subscriberIds.length == 0) {
    templates=new NetworkTemplate[1];
    templates[0]=createTemplate(policy.networkType,null);
  }
 else {
    templates=new NetworkTemplate[policy.subscriberIds.length];
    for (int i=0; i < policy.subscriberIds.length; i++) {
      templates[i]=createTemplate(policy.networkType,policy.subscriberIds[i]);
    }
  }
  DataUsageRequest request=new DataUsageRequest(DataUsageRequest.REQUEST_ID_UNSET,templates,policy.uids,policy.thresholdInBytes);
  try {
    CallbackHandler callbackHandler=new CallbackHandler(looper,callback);
    callback.request=mService.registerDataUsageCallback(mContext.getOpPackageName(),request,new Messenger(callbackHandler),new Binder());
    if (DBG)     Log.d(TAG,"registerDataUsageCallback returned " + callback.request);
    if (callback.request == null) {
      Log.e(TAG,"Request from callback is null; should not happen");
    }
  }
 catch (  RemoteException e) {
    if (DBG)     Log.d(TAG,"Remote exception when registering callback");
  }
}
