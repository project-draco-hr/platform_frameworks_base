{
  final StorageManager storage=context.getSystemService(StorageManager.class);
  final boolean removable;
  final boolean emulated;
  final boolean allowMassStorage=false;
  final String envState=reportUnmounted ? Environment.MEDIA_UNMOUNTED : getEnvironmentForState(state);
  File userPath=getPathForUser(userId);
  if (userPath == null) {
    userPath=new File("/dev/null");
  }
  String description=null;
  String derivedFsUuid=fsUuid;
  long mtpReserveSize=0;
  long maxFileSize=0;
  int mtpStorageId=StorageVolume.STORAGE_ID_INVALID;
  if (type == TYPE_EMULATED) {
    emulated=true;
    final VolumeInfo privateVol=storage.findPrivateForEmulated(this);
    if (privateVol != null) {
      description=storage.getBestVolumeDescription(privateVol);
      derivedFsUuid=privateVol.fsUuid;
    }
    if (isPrimary()) {
      mtpStorageId=StorageVolume.STORAGE_ID_PRIMARY;
    }
    mtpReserveSize=storage.getStorageLowBytes(userPath);
    if (ID_EMULATED_INTERNAL.equals(id)) {
      removable=false;
    }
 else {
      removable=true;
    }
  }
 else   if (type == TYPE_PUBLIC) {
    emulated=false;
    removable=true;
    description=storage.getBestVolumeDescription(this);
    if (isPrimary()) {
      mtpStorageId=StorageVolume.STORAGE_ID_PRIMARY;
    }
 else {
      mtpStorageId=buildStableMtpStorageId(fsUuid);
    }
    if ("vfat".equals(fsType)) {
      maxFileSize=4294967295L;
    }
  }
 else {
    throw new IllegalStateException("Unexpected volume type " + type);
  }
  if (description == null) {
    description=context.getString(android.R.string.unknownName);
  }
  return new StorageVolume(id,mtpStorageId,userPath,description,isPrimary(),removable,emulated,mtpReserveSize,allowMassStorage,maxFileSize,new UserHandle(userId),derivedFsUuid,envState);
}
