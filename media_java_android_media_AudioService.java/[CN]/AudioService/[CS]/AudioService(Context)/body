{
  mContext=context;
  mContentResolver=context.getContentResolver();
  mAppOps=(AppOpsManager)context.getSystemService(Context.APP_OPS_SERVICE);
  mVoiceCapable=mContext.getResources().getBoolean(com.android.internal.R.bool.config_voice_capable);
  PowerManager pm=(PowerManager)context.getSystemService(Context.POWER_SERVICE);
  mAudioEventWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,"handleAudioEvent");
  Vibrator vibrator=(Vibrator)context.getSystemService(Context.VIBRATOR_SERVICE);
  mHasVibrator=vibrator == null ? false : vibrator.hasVibrator();
  MAX_STREAM_VOLUME[AudioSystem.STREAM_VOICE_CALL]=SystemProperties.getInt("ro.config.vc_call_vol_steps",MAX_STREAM_VOLUME[AudioSystem.STREAM_VOICE_CALL]);
  sSoundEffectVolumeDb=context.getResources().getInteger(com.android.internal.R.integer.config_soundEffectVolumeDb);
  mVolumePanel=new VolumePanel(context,this);
  mForcedUseForComm=AudioSystem.FORCE_NONE;
  createAudioSystemThread();
  mMediaFocusControl=new MediaFocusControl(mAudioHandler.getLooper(),mContext,mVolumePanel,this);
  AudioSystem.setErrorCallback(mAudioSystemCallback);
  boolean cameraSoundForced=mContext.getResources().getBoolean(com.android.internal.R.bool.config_camera_sound_forced);
  mCameraSoundForced=new Boolean(cameraSoundForced);
  sendMsg(mAudioHandler,MSG_SET_FORCE_USE,SENDMSG_QUEUE,AudioSystem.FOR_SYSTEM,cameraSoundForced ? AudioSystem.FORCE_SYSTEM_ENFORCED : AudioSystem.FORCE_NONE,null,0);
  mSafeMediaVolumeState=new Integer(Settings.Global.getInt(mContentResolver,Settings.Global.AUDIO_SAFE_VOLUME_STATE,SAFE_MEDIA_VOLUME_NOT_CONFIGURED));
  mSafeMediaVolumeIndex=mContext.getResources().getInteger(com.android.internal.R.integer.config_safe_media_volume_index) * 10;
  mUseFixedVolume=mContext.getResources().getBoolean(com.android.internal.R.bool.config_useFixedVolume);
  readPersistedSettings();
  mSettingsObserver=new SettingsObserver();
  updateStreamVolumeAlias(false);
  createStreamStates();
  readAndSetLowRamDevice();
  mRingerModeMutedStreams=0;
  setRingerModeInt(getRingerMode(),false);
  IntentFilter intentFilter=new IntentFilter(BluetoothHeadset.ACTION_AUDIO_STATE_CHANGED);
  intentFilter.addAction(BluetoothHeadset.ACTION_CONNECTION_STATE_CHANGED);
  intentFilter.addAction(Intent.ACTION_DOCK_EVENT);
  intentFilter.addAction(Intent.ACTION_USB_AUDIO_ACCESSORY_PLUG);
  intentFilter.addAction(Intent.ACTION_USB_AUDIO_DEVICE_PLUG);
  intentFilter.addAction(Intent.ACTION_BOOT_COMPLETED);
  intentFilter.addAction(Intent.ACTION_SCREEN_ON);
  intentFilter.addAction(Intent.ACTION_SCREEN_OFF);
  intentFilter.addAction(Intent.ACTION_USER_SWITCHED);
  intentFilter.addAction(Intent.ACTION_CONFIGURATION_CHANGED);
  mMonitorOrientation=SystemProperties.getBoolean("ro.audio.monitorOrientation",false);
  if (mMonitorOrientation) {
    Log.v(TAG,"monitoring device orientation");
    setOrientationForAudioSystem();
  }
  mMonitorRotation=SystemProperties.getBoolean("ro.audio.monitorRotation",false);
  if (mMonitorRotation) {
    mDeviceRotation=((WindowManager)mContext.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay().getRotation();
    Log.v(TAG,"monitoring device rotation, initial=" + mDeviceRotation);
    setRotationForAudioSystem();
  }
  context.registerReceiver(mReceiver,intentFilter);
  mUseMasterVolume=context.getResources().getBoolean(com.android.internal.R.bool.config_useMasterVolume);
  restoreMasterVolume();
  mMasterVolumeRamp=context.getResources().getIntArray(com.android.internal.R.array.config_masterVolumeRamp);
}
