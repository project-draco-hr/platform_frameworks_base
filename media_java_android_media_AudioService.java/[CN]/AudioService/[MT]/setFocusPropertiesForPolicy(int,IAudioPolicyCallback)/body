{
  if (DEBUG_AP)   Log.d(TAG,"setFocusPropertiesForPolicy() duck behavior=" + duckingBehavior + " policy "+ pcb.asBinder());
  boolean hasPermissionForPolicy=(PackageManager.PERMISSION_GRANTED == mContext.checkCallingPermission(android.Manifest.permission.MODIFY_AUDIO_ROUTING));
  if (!hasPermissionForPolicy) {
    Slog.w(TAG,"Cannot change audio policy ducking handling for pid " + +Binder.getCallingPid() + " / uid "+ Binder.getCallingUid()+ ", need MODIFY_AUDIO_ROUTING");
    return AudioManager.ERROR;
  }
synchronized (mAudioPolicies) {
    if (!mAudioPolicies.containsKey(pcb.asBinder())) {
      Slog.e(TAG,"Cannot change audio policy focus properties, unregistered policy");
      return AudioManager.ERROR;
    }
    final AudioPolicyProxy app=mAudioPolicies.get(pcb.asBinder());
    if (duckingBehavior == AudioPolicy.FOCUS_POLICY_DUCKING_IN_POLICY) {
      for (      AudioPolicyProxy policy : mAudioPolicies.values()) {
        if (policy.mFocusDuckBehavior == AudioPolicy.FOCUS_POLICY_DUCKING_IN_POLICY) {
          Slog.e(TAG,"Cannot change audio policy ducking behavior, already handled");
          return AudioManager.ERROR;
        }
      }
    }
    app.mFocusDuckBehavior=duckingBehavior;
    mMediaFocusControl.setDuckingInExtPolicyAvailable(duckingBehavior == AudioPolicy.FOCUS_POLICY_DUCKING_IN_POLICY);
  }
  return AudioManager.SUCCESS;
}
