{
  if (mVoiceCapable) {
    if (isInCommunication()) {
      if (AudioSystem.getForceUse(AudioSystem.FOR_COMMUNICATION) == AudioSystem.FORCE_BT_SCO) {
        return AudioSystem.STREAM_BLUETOOTH_SCO;
      }
 else {
        return AudioSystem.STREAM_VOICE_CALL;
      }
    }
 else     if (suggestedStreamType == AudioManager.USE_DEFAULT_STREAM_TYPE) {
      if (isAfMusicActiveRecently(DEFAULT_STREAM_TYPE_OVERRIDE_DELAY_MS)) {
        if (DEBUG_VOL)         Log.v(TAG,"getActiveStreamType: Forcing STREAM_MUSIC stream active");
        return AudioSystem.STREAM_MUSIC;
      }
 else       if (mMediaFocusControl.checkUpdateRemoteStateIfActive(AudioSystem.STREAM_MUSIC)) {
        if (DEBUG_VOL)         Log.v(TAG,"getActiveStreamType: Forcing STREAM_REMOTE_MUSIC");
        return STREAM_REMOTE_MUSIC;
      }
 else {
        if (DEBUG_VOL)         Log.v(TAG,"getActiveStreamType: Forcing STREAM_RING b/c default");
        return AudioSystem.STREAM_RING;
      }
    }
 else     if (isAfMusicActiveRecently(0)) {
      if (DEBUG_VOL)       Log.v(TAG,"getActiveStreamType: Forcing STREAM_MUSIC stream active");
      return AudioSystem.STREAM_MUSIC;
    }
 else {
      if (DEBUG_VOL)       Log.v(TAG,"getActiveStreamType: Returning suggested type " + suggestedStreamType);
      return suggestedStreamType;
    }
  }
 else {
    if (isInCommunication()) {
      if (AudioSystem.getForceUse(AudioSystem.FOR_COMMUNICATION) == AudioSystem.FORCE_BT_SCO) {
        if (DEBUG_VOL)         Log.v(TAG,"getActiveStreamType: Forcing STREAM_BLUETOOTH_SCO");
        return AudioSystem.STREAM_BLUETOOTH_SCO;
      }
 else {
        if (DEBUG_VOL)         Log.v(TAG,"getActiveStreamType: Forcing STREAM_VOICE_CALL");
        return AudioSystem.STREAM_VOICE_CALL;
      }
    }
 else     if (AudioSystem.isStreamActive(AudioSystem.STREAM_NOTIFICATION,DEFAULT_STREAM_TYPE_OVERRIDE_DELAY_MS) || AudioSystem.isStreamActive(AudioSystem.STREAM_RING,DEFAULT_STREAM_TYPE_OVERRIDE_DELAY_MS)) {
      if (DEBUG_VOL)       Log.v(TAG,"getActiveStreamType: Forcing STREAM_NOTIFICATION");
      return AudioSystem.STREAM_NOTIFICATION;
    }
 else     if (suggestedStreamType == AudioManager.USE_DEFAULT_STREAM_TYPE) {
      if (isAfMusicActiveRecently(DEFAULT_STREAM_TYPE_OVERRIDE_DELAY_MS)) {
        if (DEBUG_VOL)         Log.v(TAG,"getActiveStreamType: forcing STREAM_MUSIC");
        return AudioSystem.STREAM_MUSIC;
      }
 else       if (mMediaFocusControl.checkUpdateRemoteStateIfActive(AudioSystem.STREAM_MUSIC)) {
        if (DEBUG_VOL)         Log.v(TAG,"getActiveStreamType: Forcing STREAM_REMOTE_MUSIC");
        return STREAM_REMOTE_MUSIC;
      }
 else {
        if (DEBUG_VOL)         Log.v(TAG,"getActiveStreamType: using STREAM_MUSIC as default");
        return AudioSystem.STREAM_MUSIC;
      }
    }
 else {
      if (DEBUG_VOL)       Log.v(TAG,"getActiveStreamType: Returning suggested type " + suggestedStreamType);
      return suggestedStreamType;
    }
  }
}
