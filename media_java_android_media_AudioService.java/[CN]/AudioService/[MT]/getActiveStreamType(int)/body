{
  if (mVoiceCapable) {
    boolean isOffhook=false;
    try {
      ITelephony phone=ITelephony.Stub.asInterface(ServiceManager.checkService("phone"));
      if (phone != null)       isOffhook=phone.isOffhook();
    }
 catch (    RemoteException e) {
      Log.w(TAG,"Couldn't connect to phone service",e);
    }
    if (isOffhook || getMode() == AudioManager.MODE_IN_COMMUNICATION) {
      if (AudioSystem.getForceUse(AudioSystem.FOR_COMMUNICATION) == AudioSystem.FORCE_BT_SCO) {
        return AudioSystem.STREAM_BLUETOOTH_SCO;
      }
 else {
        return AudioSystem.STREAM_VOICE_CALL;
      }
    }
 else     if (AudioSystem.isStreamActive(AudioSystem.STREAM_MUSIC,0)) {
      return AudioSystem.STREAM_MUSIC;
    }
 else     if (suggestedStreamType == AudioManager.USE_DEFAULT_STREAM_TYPE) {
      return AudioSystem.STREAM_RING;
    }
 else {
      return suggestedStreamType;
    }
  }
 else {
    if (getMode() == AudioManager.MODE_IN_COMMUNICATION) {
      if (AudioSystem.getForceUse(AudioSystem.FOR_COMMUNICATION) == AudioSystem.FORCE_BT_SCO) {
        return AudioSystem.STREAM_BLUETOOTH_SCO;
      }
 else {
        return AudioSystem.STREAM_VOICE_CALL;
      }
    }
 else     if (AudioSystem.isStreamActive(AudioSystem.STREAM_NOTIFICATION,NOTIFICATION_VOLUME_DELAY_MS) || AudioSystem.isStreamActive(AudioSystem.STREAM_RING,NOTIFICATION_VOLUME_DELAY_MS)) {
      return AudioSystem.STREAM_NOTIFICATION;
    }
 else     if (AudioSystem.isStreamActive(AudioSystem.STREAM_MUSIC,0) || (suggestedStreamType == AudioManager.USE_DEFAULT_STREAM_TYPE)) {
      return AudioSystem.STREAM_MUSIC;
    }
 else {
      return suggestedStreamType;
    }
  }
}
