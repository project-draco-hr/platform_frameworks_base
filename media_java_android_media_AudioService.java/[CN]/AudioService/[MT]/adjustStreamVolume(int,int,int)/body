{
  ensureValidDirection(direction);
  ensureValidStreamType(streamType);
  int streamTypeAlias=STREAM_VOLUME_ALIAS[streamType];
  VolumeStreamState streamState=mStreamStates[streamTypeAlias];
  final int oldIndex=(streamState.muteCount() != 0) ? streamState.mLastAudibleIndex : streamState.mIndex;
  boolean adjustVolume=true;
  if (((flags & AudioManager.FLAG_ALLOW_RINGER_MODES) != 0) || streamTypeAlias == AudioSystem.STREAM_RING || (!mVoiceCapable && streamTypeAlias == AudioSystem.STREAM_MUSIC)) {
    if (mRingerMode == AudioManager.RINGER_MODE_VIBRATE) {
      flags&=~AudioManager.FLAG_VIBRATE;
    }
    adjustVolume=checkForRingerModeChange(oldIndex,direction,streamTypeAlias);
  }
  int index;
  if (streamState.muteCount() != 0) {
    if (adjustVolume) {
      int numStreamTypes=AudioSystem.getNumStreamTypes();
      for (int i=numStreamTypes - 1; i >= 0; i--) {
        if (STREAM_VOLUME_ALIAS[i] == streamTypeAlias) {
          VolumeStreamState s=mStreamStates[i];
          s.adjustLastAudibleIndex(direction);
          sendMsg(mAudioHandler,MSG_PERSIST_VOLUME,i,SENDMSG_REPLACE,0,1,s,PERSIST_DELAY);
        }
      }
    }
    index=streamState.mLastAudibleIndex;
  }
 else {
    if (adjustVolume && streamState.adjustIndex(direction)) {
      sendMsg(mAudioHandler,MSG_SET_SYSTEM_VOLUME,streamTypeAlias,SENDMSG_NOOP,0,0,streamState,0);
    }
    index=streamState.mIndex;
  }
  sendVolumeUpdate(streamType,oldIndex,index,flags);
}
