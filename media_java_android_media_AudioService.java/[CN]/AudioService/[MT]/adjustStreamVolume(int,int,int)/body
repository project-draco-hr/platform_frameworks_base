{
  ensureValidDirection(direction);
  ensureValidStreamType(streamType);
  int streamTypeAlias=mStreamVolumeAlias[streamType];
  VolumeStreamState streamState=mStreamStates[streamTypeAlias];
  final int device=getDeviceForStream(streamTypeAlias);
  final int oldIndex=streamState.getIndex(device,(streamState.muteCount() != 0));
  boolean adjustVolume=true;
  if (((flags & AudioManager.FLAG_ALLOW_RINGER_MODES) != 0) || (streamTypeAlias == getMasterStreamType())) {
    int ringerMode=getRingerMode();
    if (ringerMode == AudioManager.RINGER_MODE_VIBRATE) {
      flags&=~AudioManager.FLAG_VIBRATE;
    }
    adjustVolume=checkForRingerModeChange(oldIndex,direction);
  }
  int index;
  if (streamState.muteCount() != 0) {
    if (adjustVolume) {
      int numStreamTypes=AudioSystem.getNumStreamTypes();
      for (int i=numStreamTypes - 1; i >= 0; i--) {
        if (mStreamVolumeAlias[i] == streamTypeAlias) {
          VolumeStreamState s=mStreamStates[i];
          s.adjustLastAudibleIndex(direction,device);
          sendMsg(mAudioHandler,MSG_PERSIST_VOLUME,SENDMSG_QUEUE,PERSIST_LAST_AUDIBLE,device,s,PERSIST_DELAY);
        }
      }
    }
    index=streamState.getIndex(device,true);
  }
 else {
    if (adjustVolume && streamState.adjustIndex(direction,device)) {
      sendMsg(mAudioHandler,MSG_SET_DEVICE_VOLUME,SENDMSG_QUEUE,device,0,streamState,0);
    }
    index=streamState.getIndex(device,false);
  }
  sendVolumeUpdate(streamType,oldIndex,index,flags);
}
