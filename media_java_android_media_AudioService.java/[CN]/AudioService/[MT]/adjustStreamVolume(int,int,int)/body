{
  ensureValidDirection(direction);
  ensureValidStreamType(streamType);
  int streamTypeAlias=STREAM_VOLUME_ALIAS[streamType];
  VolumeStreamState streamState=mStreamStates[streamTypeAlias];
  final int oldIndex=(streamState.muteCount() != 0) ? streamState.mLastAudibleIndex : streamState.mIndex;
  boolean adjustVolume=true;
  if (((flags & AudioManager.FLAG_ALLOW_RINGER_MODES) != 0) || (!mVoiceCapable && streamType != AudioSystem.STREAM_VOICE_CALL && streamType != AudioSystem.STREAM_BLUETOOTH_SCO) || (mVoiceCapable && streamTypeAlias == AudioSystem.STREAM_RING)) {
    if (mRingerMode == AudioManager.RINGER_MODE_VIBRATE) {
      flags&=~AudioManager.FLAG_VIBRATE;
    }
    adjustVolume=checkForRingerModeChange(oldIndex,direction,streamTypeAlias);
  }
  int index;
  if (streamState.muteCount() != 0) {
    if (adjustVolume) {
      streamState.adjustLastAudibleIndex(direction);
      sendMsg(mAudioHandler,MSG_PERSIST_VOLUME,streamType,SENDMSG_REPLACE,0,1,streamState,PERSIST_DELAY);
    }
    index=streamState.mLastAudibleIndex;
  }
 else {
    if (adjustVolume && streamState.adjustIndex(direction)) {
      sendMsg(mAudioHandler,MSG_SET_SYSTEM_VOLUME,streamTypeAlias,SENDMSG_NOOP,0,0,streamState,0);
    }
    index=streamState.mIndex;
  }
  sendVolumeUpdate(streamType,oldIndex,index,flags);
}
