{
  if (DEBUG_VOL)   Log.d(TAG,"onSetA2dpConnectionState btDevice=" + btDevice + " state="+ state);
  if (btDevice == null) {
    return;
  }
  String address=btDevice.getAddress();
  if (!BluetoothAdapter.checkBluetoothAddress(address)) {
    address="";
  }
synchronized (mConnectedDevices) {
    boolean isConnected=(mConnectedDevices.containsKey(AudioSystem.DEVICE_OUT_BLUETOOTH_A2DP) && mConnectedDevices.get(AudioSystem.DEVICE_OUT_BLUETOOTH_A2DP).equals(address));
    if (isConnected && state != BluetoothProfile.STATE_CONNECTED) {
      if (btDevice.isBluetoothDock()) {
        if (state == BluetoothProfile.STATE_DISCONNECTED) {
          makeA2dpDeviceUnavailableLater(address);
        }
      }
 else {
        makeA2dpDeviceUnavailableNow(address);
      }
synchronized (mCurAudioRoutes) {
        if (mCurAudioRoutes.mBluetoothName != null) {
          mCurAudioRoutes.mBluetoothName=null;
          sendMsg(mAudioHandler,MSG_REPORT_NEW_ROUTES,SENDMSG_NOOP,0,0,null,0);
        }
      }
    }
 else     if (!isConnected && state == BluetoothProfile.STATE_CONNECTED) {
      if (btDevice.isBluetoothDock()) {
        cancelA2dpDeviceTimeout();
        mDockAddress=address;
      }
 else {
        if (hasScheduledA2dpDockTimeout()) {
          cancelA2dpDeviceTimeout();
          makeA2dpDeviceUnavailableNow(mDockAddress);
        }
      }
      makeA2dpDeviceAvailable(address);
synchronized (mCurAudioRoutes) {
        String name=btDevice.getAliasName();
        if (!TextUtils.equals(mCurAudioRoutes.mBluetoothName,name)) {
          mCurAudioRoutes.mBluetoothName=name;
          sendMsg(mAudioHandler,MSG_REPORT_NEW_ROUTES,SENDMSG_NOOP,0,0,null,0);
        }
      }
    }
  }
}
