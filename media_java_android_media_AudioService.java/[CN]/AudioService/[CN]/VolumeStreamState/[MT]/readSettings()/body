{
  int remainingDevices=AudioSystem.DEVICE_OUT_ALL;
  if ((mStreamType == AudioSystem.STREAM_SYSTEM) || (mStreamType == AudioSystem.STREAM_SYSTEM_ENFORCED)) {
    mLastAudibleIndex.put(AudioSystem.DEVICE_OUT_DEFAULT,10 * AudioManager.DEFAULT_STREAM_VOLUME[mStreamType]);
    mIndex.put(AudioSystem.DEVICE_OUT_DEFAULT,10 * AudioManager.DEFAULT_STREAM_VOLUME[mStreamType]);
    return;
  }
  for (int i=0; remainingDevices != 0; i++) {
    int device=(1 << i);
    if ((device & remainingDevices) == 0) {
      continue;
    }
    remainingDevices&=~device;
    String name=getSettingNameForDevice(false,device);
    int defaultIndex=(device == AudioSystem.DEVICE_OUT_DEFAULT) ? AudioManager.DEFAULT_STREAM_VOLUME[mStreamType] : -1;
    int index=Settings.System.getIntForUser(mContentResolver,name,defaultIndex,UserHandle.USER_CURRENT);
    if (index == -1) {
      continue;
    }
    name=getSettingNameForDevice(true,device);
    defaultIndex=(index > 0) ? index : AudioManager.DEFAULT_STREAM_VOLUME[mStreamType];
    int lastAudibleIndex=Settings.System.getIntForUser(mContentResolver,name,defaultIndex,UserHandle.USER_CURRENT);
    if ((lastAudibleIndex == 0) && mVoiceCapable && (mStreamVolumeAlias[mStreamType] == AudioSystem.STREAM_RING)) {
      lastAudibleIndex=AudioManager.DEFAULT_STREAM_VOLUME[mStreamType];
      sendMsg(mAudioHandler,MSG_PERSIST_VOLUME,SENDMSG_QUEUE,PERSIST_LAST_AUDIBLE,device,this,PERSIST_DELAY);
    }
    mLastAudibleIndex.put(device,getValidIndex(10 * lastAudibleIndex));
    if ((index == 0) && (mRingerMode == AudioManager.RINGER_MODE_NORMAL) && mVoiceCapable&& (mStreamVolumeAlias[mStreamType] == AudioSystem.STREAM_RING)) {
      index=lastAudibleIndex;
      sendMsg(mAudioHandler,MSG_PERSIST_VOLUME,SENDMSG_QUEUE,PERSIST_CURRENT,device,this,PERSIST_DELAY);
    }
    mIndex.put(device,getValidIndex(10 * index));
  }
}
