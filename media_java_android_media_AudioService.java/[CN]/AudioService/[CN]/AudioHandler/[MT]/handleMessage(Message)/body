{
switch (msg.what) {
case MSG_SET_DEVICE_VOLUME:
    setDeviceVolume((VolumeStreamState)msg.obj,msg.arg1);
  break;
case MSG_SET_ALL_VOLUMES:
setAllVolumes((VolumeStreamState)msg.obj);
break;
case MSG_PERSIST_VOLUME:
persistVolume((VolumeStreamState)msg.obj,msg.arg1,msg.arg2);
break;
case MSG_PERSIST_MASTER_VOLUME:
Settings.System.putFloat(mContentResolver,Settings.System.VOLUME_MASTER,(float)msg.arg1 / (float)1000.0);
break;
case MSG_PERSIST_MASTER_VOLUME_MUTE:
Settings.System.putInt(mContentResolver,Settings.System.VOLUME_MASTER_MUTE,msg.arg1);
break;
case MSG_PERSIST_RINGER_MODE:
persistRingerMode(getRingerMode());
break;
case MSG_PERSIST_VIBRATE_SETTING:
persistVibrateSetting();
break;
case MSG_MEDIA_SERVER_DIED:
if (!mMediaServerOk) {
Log.e(TAG,"Media server died.");
AudioSystem.setErrorCallback(mAudioSystemCallback);
sendMsg(mAudioHandler,MSG_MEDIA_SERVER_DIED,SENDMSG_NOOP,0,0,null,500);
}
break;
case MSG_MEDIA_SERVER_STARTED:
Log.e(TAG,"Media server started.");
AudioSystem.setParameters("restarting=true");
synchronized (mConnectedDevices) {
Set set=mConnectedDevices.entrySet();
Iterator i=set.iterator();
while (i.hasNext()) {
Map.Entry device=(Map.Entry)i.next();
AudioSystem.setDeviceConnectionState(((Integer)device.getKey()).intValue(),AudioSystem.DEVICE_STATE_AVAILABLE,(String)device.getValue());
}
}
AudioSystem.setPhoneState(mMode);
AudioSystem.setForceUse(AudioSystem.FOR_COMMUNICATION,mForcedUseForComm);
AudioSystem.setForceUse(AudioSystem.FOR_RECORD,mForcedUseForComm);
int numStreamTypes=AudioSystem.getNumStreamTypes();
for (int streamType=numStreamTypes - 1; streamType >= 0; streamType--) {
VolumeStreamState streamState=mStreamStates[streamType];
AudioSystem.initStreamVolume(streamType,0,(streamState.mIndexMax + 5) / 10);
streamState.applyAllVolumes();
}
setRingerModeInt(getRingerMode(),false);
restoreMasterVolume();
if (SystemProperties.getBoolean("ro.audio.monitorOrientation",false)) {
setOrientationForAudioSystem();
}
AudioSystem.setParameters("restarting=false");
break;
case MSG_LOAD_SOUND_EFFECTS:
loadSoundEffects();
break;
case MSG_PLAY_SOUND_EFFECT:
playSoundEffect(msg.arg1,msg.arg2);
break;
case MSG_BTA2DP_DOCK_TIMEOUT:
synchronized (mConnectedDevices) {
makeA2dpDeviceUnavailableNow((String)msg.obj);
}
break;
case MSG_SET_FORCE_USE:
setForceUse(msg.arg1,msg.arg2);
break;
case MSG_PERSIST_MEDIABUTTONRECEIVER:
onHandlePersistMediaButtonReceiver((ComponentName)msg.obj);
break;
case MSG_RCDISPLAY_CLEAR:
onRcDisplayClear();
break;
case MSG_RCDISPLAY_UPDATE:
onRcDisplayUpdate((RemoteControlStackEntry)msg.obj,msg.arg1);
break;
case MSG_BT_HEADSET_CNCT_FAILED:
resetBluetoothSco();
break;
}
}
