{
  String action=intent.getAction();
  if (action.equals(Intent.ACTION_DOCK_EVENT)) {
    int dockState=intent.getIntExtra(Intent.EXTRA_DOCK_STATE,Intent.EXTRA_DOCK_STATE_UNDOCKED);
    int config;
switch (dockState) {
case Intent.EXTRA_DOCK_STATE_DESK:
      config=AudioSystem.FORCE_BT_DESK_DOCK;
    break;
case Intent.EXTRA_DOCK_STATE_CAR:
  config=AudioSystem.FORCE_BT_CAR_DOCK;
break;
case Intent.EXTRA_DOCK_STATE_LE_DESK:
config=AudioSystem.FORCE_ANALOG_DOCK;
break;
case Intent.EXTRA_DOCK_STATE_HE_DESK:
config=AudioSystem.FORCE_DIGITAL_DOCK;
break;
case Intent.EXTRA_DOCK_STATE_UNDOCKED:
default :
config=AudioSystem.FORCE_NONE;
}
AudioSystem.setForceUse(AudioSystem.FOR_DOCK,config);
}
 else if (action.equals(BluetoothA2dp.ACTION_CONNECTION_STATE_CHANGED)) {
int state=intent.getIntExtra(BluetoothProfile.EXTRA_STATE,BluetoothProfile.STATE_DISCONNECTED);
BluetoothDevice btDevice=intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
String address=btDevice.getAddress();
boolean isConnected=(mConnectedDevices.containsKey(AudioSystem.DEVICE_OUT_BLUETOOTH_A2DP) && mConnectedDevices.get(AudioSystem.DEVICE_OUT_BLUETOOTH_A2DP).equals(address));
if (isConnected && state != BluetoothProfile.STATE_CONNECTED) {
if (btDevice.isBluetoothDock()) {
if (state == BluetoothProfile.STATE_DISCONNECTED) {
makeA2dpDeviceUnavailableLater(address);
}
}
 else {
makeA2dpDeviceUnavailableNow(address);
}
}
 else if (!isConnected && state == BluetoothProfile.STATE_CONNECTED) {
if (btDevice.isBluetoothDock()) {
cancelA2dpDeviceTimeout();
mDockAddress=address;
}
 else {
if (hasScheduledA2dpDockTimeout()) {
cancelA2dpDeviceTimeout();
makeA2dpDeviceUnavailableNow(mDockAddress);
}
}
makeA2dpDeviceAvailable(address);
}
}
 else if (action.equals(BluetoothHeadset.ACTION_CONNECTION_STATE_CHANGED)) {
int state=intent.getIntExtra(BluetoothProfile.EXTRA_STATE,BluetoothProfile.STATE_DISCONNECTED);
int device=AudioSystem.DEVICE_OUT_BLUETOOTH_SCO;
BluetoothDevice btDevice=intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
String address=null;
if (btDevice != null) {
address=btDevice.getAddress();
BluetoothClass btClass=btDevice.getBluetoothClass();
if (btClass != null) {
switch (btClass.getDeviceClass()) {
case BluetoothClass.Device.AUDIO_VIDEO_WEARABLE_HEADSET:
case BluetoothClass.Device.AUDIO_VIDEO_HANDSFREE:
device=AudioSystem.DEVICE_OUT_BLUETOOTH_SCO_HEADSET;
break;
case BluetoothClass.Device.AUDIO_VIDEO_CAR_AUDIO:
device=AudioSystem.DEVICE_OUT_BLUETOOTH_SCO_CARKIT;
break;
}
}
}
boolean isConnected=(mConnectedDevices.containsKey(device) && mConnectedDevices.get(device).equals(address));
synchronized (mScoClients) {
if (isConnected && state != BluetoothProfile.STATE_CONNECTED) {
AudioSystem.setDeviceConnectionState(device,AudioSystem.DEVICE_STATE_UNAVAILABLE,address);
mConnectedDevices.remove(device);
mBluetoothHeadsetDevice=null;
clearAllScoClients(null,false);
mScoAudioState=SCO_STATE_INACTIVE;
}
 else if (!isConnected && state == BluetoothProfile.STATE_CONNECTED) {
AudioSystem.setDeviceConnectionState(device,AudioSystem.DEVICE_STATE_AVAILABLE,address);
mConnectedDevices.put(new Integer(device),address);
mBluetoothHeadsetDevice=btDevice;
}
}
}
 else if (action.equals(Intent.ACTION_HEADSET_PLUG)) {
int state=intent.getIntExtra("state",0);
int microphone=intent.getIntExtra("microphone",0);
if (microphone != 0) {
boolean isConnected=mConnectedDevices.containsKey(AudioSystem.DEVICE_OUT_WIRED_HEADSET);
if (state == 0 && isConnected) {
AudioSystem.setDeviceConnectionState(AudioSystem.DEVICE_OUT_WIRED_HEADSET,AudioSystem.DEVICE_STATE_UNAVAILABLE,"");
mConnectedDevices.remove(AudioSystem.DEVICE_OUT_WIRED_HEADSET);
}
 else if (state == 1 && !isConnected) {
AudioSystem.setDeviceConnectionState(AudioSystem.DEVICE_OUT_WIRED_HEADSET,AudioSystem.DEVICE_STATE_AVAILABLE,"");
mConnectedDevices.put(new Integer(AudioSystem.DEVICE_OUT_WIRED_HEADSET),"");
}
}
 else {
boolean isConnected=mConnectedDevices.containsKey(AudioSystem.DEVICE_OUT_WIRED_HEADPHONE);
if (state == 0 && isConnected) {
AudioSystem.setDeviceConnectionState(AudioSystem.DEVICE_OUT_WIRED_HEADPHONE,AudioSystem.DEVICE_STATE_UNAVAILABLE,"");
mConnectedDevices.remove(AudioSystem.DEVICE_OUT_WIRED_HEADPHONE);
}
 else if (state == 1 && !isConnected) {
AudioSystem.setDeviceConnectionState(AudioSystem.DEVICE_OUT_WIRED_HEADPHONE,AudioSystem.DEVICE_STATE_AVAILABLE,"");
mConnectedDevices.put(new Integer(AudioSystem.DEVICE_OUT_WIRED_HEADPHONE),"");
}
}
}
 else if (action.equals(Intent.ACTION_USB_ANLG_HEADSET_PLUG)) {
int state=intent.getIntExtra("state",0);
Log.v(TAG,"Broadcast Receiver: Got ACTION_USB_ANLG_HEADSET_PLUG, state = " + state);
boolean isConnected=mConnectedDevices.containsKey(AudioSystem.DEVICE_OUT_ANLG_DOCK_HEADSET);
if (state == 0 && isConnected) {
AudioSystem.setDeviceConnectionState(AudioSystem.DEVICE_OUT_ANLG_DOCK_HEADSET,AudioSystem.DEVICE_STATE_UNAVAILABLE,"");
mConnectedDevices.remove(AudioSystem.DEVICE_OUT_ANLG_DOCK_HEADSET);
}
 else if (state == 1 && !isConnected) {
AudioSystem.setDeviceConnectionState(AudioSystem.DEVICE_OUT_ANLG_DOCK_HEADSET,AudioSystem.DEVICE_STATE_AVAILABLE,"");
mConnectedDevices.put(new Integer(AudioSystem.DEVICE_OUT_ANLG_DOCK_HEADSET),"");
}
}
 else if (action.equals(Intent.ACTION_HDMI_AUDIO_PLUG)) {
int state=intent.getIntExtra("state",0);
Log.v(TAG,"Broadcast Receiver: Got ACTION_HDMI_AUDIO_PLUG, state = " + state);
boolean isConnected=mConnectedDevices.containsKey(AudioSystem.DEVICE_OUT_AUX_DIGITAL);
if (state == 0 && isConnected) {
AudioSystem.setDeviceConnectionState(AudioSystem.DEVICE_OUT_AUX_DIGITAL,AudioSystem.DEVICE_STATE_UNAVAILABLE,"");
mConnectedDevices.remove(AudioSystem.DEVICE_OUT_AUX_DIGITAL);
}
 else if (state == 1 && !isConnected) {
AudioSystem.setDeviceConnectionState(AudioSystem.DEVICE_OUT_AUX_DIGITAL,AudioSystem.DEVICE_STATE_AVAILABLE,"");
mConnectedDevices.put(new Integer(AudioSystem.DEVICE_OUT_AUX_DIGITAL),"");
}
}
 else if (action.equals(Intent.ACTION_USB_DGTL_HEADSET_PLUG)) {
int state=intent.getIntExtra("state",0);
Log.v(TAG,"Broadcast Receiver: Got ACTION_USB_DGTL_HEADSET_PLUG, state = " + state);
boolean isConnected=mConnectedDevices.containsKey(AudioSystem.DEVICE_OUT_DGTL_DOCK_HEADSET);
if (state == 0 && isConnected) {
AudioSystem.setDeviceConnectionState(AudioSystem.DEVICE_OUT_DGTL_DOCK_HEADSET,AudioSystem.DEVICE_STATE_UNAVAILABLE,"");
mConnectedDevices.remove(AudioSystem.DEVICE_OUT_DGTL_DOCK_HEADSET);
}
 else if (state == 1 && !isConnected) {
AudioSystem.setDeviceConnectionState(AudioSystem.DEVICE_OUT_DGTL_DOCK_HEADSET,AudioSystem.DEVICE_STATE_AVAILABLE,"");
mConnectedDevices.put(new Integer(AudioSystem.DEVICE_OUT_DGTL_DOCK_HEADSET),"");
}
}
 else if (action.equals(BluetoothHeadset.ACTION_AUDIO_STATE_CHANGED)) {
boolean broadcast=false;
int audioState=AudioManager.SCO_AUDIO_STATE_ERROR;
synchronized (mScoClients) {
int btState=intent.getIntExtra(BluetoothProfile.EXTRA_STATE,-1);
if (!mScoClients.isEmpty() && mScoAudioState == SCO_STATE_ACTIVE_INTERNAL) {
broadcast=true;
}
switch (btState) {
case BluetoothHeadset.STATE_AUDIO_CONNECTED:
audioState=AudioManager.SCO_AUDIO_STATE_CONNECTED;
if (mScoAudioState != SCO_STATE_ACTIVE_INTERNAL) {
mScoAudioState=SCO_STATE_ACTIVE_EXTERNAL;
}
break;
case BluetoothHeadset.STATE_AUDIO_DISCONNECTED:
audioState=AudioManager.SCO_AUDIO_STATE_DISCONNECTED;
mScoAudioState=SCO_STATE_INACTIVE;
break;
case BluetoothHeadset.STATE_AUDIO_CONNECTING:
if (mScoAudioState != SCO_STATE_ACTIVE_INTERNAL) {
mScoAudioState=SCO_STATE_ACTIVE_EXTERNAL;
}
default :
broadcast=false;
break;
}
}
if (broadcast) {
Intent newIntent=new Intent(AudioManager.ACTION_SCO_AUDIO_STATE_CHANGED);
newIntent.putExtra(AudioManager.EXTRA_SCO_AUDIO_STATE,audioState);
mContext.sendStickyBroadcast(newIntent);
}
}
 else if (action.equals(Intent.ACTION_BOOT_COMPLETED)) {
mBootCompleted=true;
loadSoundEffects();
Intent newIntent=new Intent(AudioManager.ACTION_SCO_AUDIO_STATE_CHANGED);
newIntent.putExtra(AudioManager.EXTRA_SCO_AUDIO_STATE,AudioManager.SCO_AUDIO_STATE_DISCONNECTED);
mContext.sendStickyBroadcast(newIntent);
}
}
