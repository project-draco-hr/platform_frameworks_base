{
  if (mCurViewStackEntry != null) {
    if (mCurViewStackEntry.curChild < mCurViewStackEntry.numChildren) {
      if (DEBUG_PARCEL_TREE)       Log.d(TAG,"Writing child #" + mCurViewStackEntry.curChild + " in "+ mCurViewStackEntry.node);
      ViewNode child=mCurViewStackEntry.node.mChildren[mCurViewStackEntry.curChild];
      mCurViewStackEntry.curChild++;
      writeView(child,out,pwriter,1);
      return true;
    }
    do {
      int pos=--mCurViewStackPos;
      if (DEBUG_PARCEL_TREE)       Log.d(TAG,"Done with " + mCurViewStackEntry.node + "; popping up to "+ pos);
      if (pos < 0) {
        if (DEBUG_PARCEL_TREE)         Log.d(TAG,"Done with view hierarchy!");
        mCurViewStackEntry=null;
        break;
      }
      mCurViewStackEntry=mViewStack.get(pos);
    }
 while (mCurViewStackEntry.curChild >= mCurViewStackEntry.numChildren);
    return true;
  }
  int pos=mCurWindow;
  if (pos < mNumWindows) {
    WindowNode win=as.mWindowNodes.get(pos);
    mCurWindow++;
    if (DEBUG_PARCEL)     Log.d(TAG,"write window #" + pos + ": at "+ out.dataPosition()+ ", windows="+ mNumWrittenWindows+ ", views="+ mNumWrittenViews);
    out.writeInt(VALIDATE_WINDOW_TOKEN);
    win.writeSelfToParcel(out,pwriter,mTmpMatrix);
    mNumWrittenWindows++;
    ViewNode root=win.mRoot;
    mCurViewStackPos=0;
    if (DEBUG_PARCEL_TREE)     Log.d(TAG,"Writing initial root view " + root);
    writeView(root,out,pwriter,0);
    return true;
  }
  return false;
}
