{
  if (mConstrainedColumnWidths != null) {
    final LayoutParams lp=(LayoutParams)child.getLayoutParams();
    int measureMode=MeasureSpec.EXACTLY;
    int columnWidth=0;
    final int span=lp.span;
    final int[] constrainedColumnWidths=mConstrainedColumnWidths;
    for (int i=0; i < span; i++) {
      columnWidth+=constrainedColumnWidths[childIndex + i];
    }
    final int gravity=lp.gravity;
    final boolean isHorizontalGravity=Gravity.isHorizontal(gravity);
    if (isHorizontalGravity) {
      measureMode=MeasureSpec.AT_MOST;
    }
    int childWidthMeasureSpec=MeasureSpec.makeMeasureSpec(Math.max(0,columnWidth - lp.leftMargin - lp.rightMargin),measureMode);
    int childHeightMeasureSpec=getChildMeasureSpec(heightMeasureSpec,mPaddingTop + mPaddingBottom + lp.topMargin+ lp.bottomMargin+ totalHeight,lp.height);
    child.measure(childWidthMeasureSpec,childHeightMeasureSpec);
    if (isHorizontalGravity) {
      final int childWidth=child.getMeasuredWidth();
      lp.mOffset[LayoutParams.LOCATION_NEXT]=columnWidth - childWidth;
      final int layoutDirection=getResolvedLayoutDirection();
      final int absoluteGravity=Gravity.getAbsoluteGravity(gravity,layoutDirection);
switch (absoluteGravity & Gravity.HORIZONTAL_GRAVITY_MASK) {
case Gravity.LEFT:
        break;
case Gravity.RIGHT:
      lp.mOffset[LayoutParams.LOCATION]=lp.mOffset[LayoutParams.LOCATION_NEXT];
    break;
case Gravity.CENTER_HORIZONTAL:
  lp.mOffset[LayoutParams.LOCATION]=lp.mOffset[LayoutParams.LOCATION_NEXT] / 2;
break;
}
}
 else {
lp.mOffset[LayoutParams.LOCATION]=lp.mOffset[LayoutParams.LOCATION_NEXT]=0;
}
}
 else {
super.measureChildBeforeLayout(child,childIndex,widthMeasureSpec,totalWidth,heightMeasureSpec,totalHeight);
}
}
