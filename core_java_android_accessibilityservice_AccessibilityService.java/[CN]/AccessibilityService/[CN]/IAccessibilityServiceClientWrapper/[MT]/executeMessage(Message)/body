{
switch (message.what) {
case DO_ON_ACCESSIBILITY_EVENT:
{
      AccessibilityEvent event=(AccessibilityEvent)message.obj;
      if (event != null) {
        AccessibilityInteractionClient.getInstance().onAccessibilityEvent(event);
        mCallback.onAccessibilityEvent(event);
        try {
          event.recycle();
        }
 catch (        IllegalStateException ise) {
        }
      }
    }
  return;
case DO_ON_INTERRUPT:
{
  mCallback.onInterrupt();
}
return;
case DO_INIT:
{
mConnectionId=message.arg1;
SomeArgs args=(SomeArgs)message.obj;
IAccessibilityServiceConnection connection=(IAccessibilityServiceConnection)args.arg1;
IBinder windowToken=(IBinder)args.arg2;
args.recycle();
if (connection != null) {
AccessibilityInteractionClient.getInstance().addConnection(mConnectionId,connection);
mCallback.init(mConnectionId,windowToken);
mCallback.onServiceConnected();
}
 else {
AccessibilityInteractionClient.getInstance().removeConnection(mConnectionId);
mConnectionId=AccessibilityInteractionClient.NO_ID;
AccessibilityInteractionClient.getInstance().clearCache();
mCallback.init(AccessibilityInteractionClient.NO_ID,null);
}
}
return;
case DO_ON_GESTURE:
{
final int gestureId=message.arg1;
mCallback.onGesture(gestureId);
}
return;
case DO_CLEAR_ACCESSIBILITY_CACHE:
{
AccessibilityInteractionClient.getInstance().clearCache();
}
return;
case DO_ON_KEY_EVENT:
{
KeyEvent event=(KeyEvent)message.obj;
try {
IAccessibilityServiceConnection connection=AccessibilityInteractionClient.getInstance().getConnection(mConnectionId);
if (connection != null) {
final boolean result=mCallback.onKeyEvent(event);
final int sequence=message.arg1;
try {
connection.setOnKeyEventResult(result,sequence);
}
 catch (RemoteException re) {
}
}
}
  finally {
try {
event.recycle();
}
 catch (IllegalStateException ise) {
}
}
}
return;
case DO_ON_MAGNIFICATION_CHANGED:
{
final SomeArgs args=(SomeArgs)message.obj;
final Region region=(Region)args.arg1;
final float scale=(float)args.arg2;
final float centerX=(float)args.arg3;
final float centerY=(float)args.arg4;
mCallback.onMagnificationChanged(region,scale,centerX,centerY);
}
return;
default :
Log.w(LOG_TAG,"Unknown message type " + message.what);
}
}
