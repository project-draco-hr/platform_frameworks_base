{
  final int connectionId=mConnectionId;
  if (connectionId == UNDEFINED) {
    throw new IllegalStateException("AccessibilityService not connected." + " Did you receive a call of onServiceConnected()?");
  }
  AccessibilityNodeInfo root=AccessibilityInteractionClient.getInstance().findAccessibilityNodeInfoByAccessibilityId(connectionId,AccessibilityNodeInfo.ACTIVE_WINDOW_ID,AccessibilityNodeInfo.ROOT_NODE_ID,AccessibilityNodeInfo.FLAG_PREFETCH_DESCENDANTS);
  if (root == null) {
    return;
  }
  AccessibilityNodeInfo current=root.findFocus(View.FOCUS_ACCESSIBILITY);
  if (current == null) {
    current=root;
  }
  AccessibilityNodeInfo next=null;
switch (gestureId) {
case GESTURE_SWIPE_UP:
{
      next=current.focusSearch(View.ACCESSIBILITY_FOCUS_OUT);
    }
  break;
case GESTURE_SWIPE_DOWN:
{
  next=current.focusSearch(View.ACCESSIBILITY_FOCUS_IN);
}
break;
case GESTURE_SWIPE_LEFT:
{
if (mLayoutDirection == View.LAYOUT_DIRECTION_LTR) {
next=current.focusSearch(View.ACCESSIBILITY_FOCUS_BACKWARD);
}
 else {
next=current.focusSearch(View.ACCESSIBILITY_FOCUS_FORWARD);
}
}
break;
case GESTURE_SWIPE_RIGHT:
{
if (mLayoutDirection == View.LAYOUT_DIRECTION_LTR) {
next=current.focusSearch(View.ACCESSIBILITY_FOCUS_FORWARD);
}
 else {
next=current.focusSearch(View.ACCESSIBILITY_FOCUS_BACKWARD);
}
}
break;
case GESTURE_SWIPE_UP_AND_DOWN:
{
next=current.focusSearch(View.ACCESSIBILITY_FOCUS_UP);
}
break;
case GESTURE_SWIPE_DOWN_AND_UP:
{
next=current.focusSearch(View.ACCESSIBILITY_FOCUS_DOWN);
}
break;
case GESTURE_SWIPE_LEFT_AND_RIGHT:
{
next=current.focusSearch(View.ACCESSIBILITY_FOCUS_LEFT);
}
break;
case GESTURE_SWIPE_RIGHT_AND_LEFT:
{
next=current.focusSearch(View.ACCESSIBILITY_FOCUS_RIGHT);
}
break;
}
if (next != null && !next.equals(current)) {
next.performAction(AccessibilityNodeInfo.ACTION_ACCESSIBILITY_FOCUS);
}
}
