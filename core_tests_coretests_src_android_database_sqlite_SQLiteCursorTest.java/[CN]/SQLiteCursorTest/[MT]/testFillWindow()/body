{
  final String testTable="testV";
  mDatabase.beginTransaction();
  mDatabase.execSQL("CREATE TABLE " + testTable + " (col1 int, desc text not null);");
  mDatabase.setTransactionSuccessful();
  mDatabase.endTransaction();
  StringBuilder buff=new StringBuilder();
  for (int i=0; i < 500; i++) {
    buff.append(i % 10 + "");
  }
  ContentValues values=new ContentValues();
  values.put("desc",buff.toString());
  int N=5000;
  Set<Integer> rows=new HashSet<Integer>();
  mDatabase.beginTransaction();
  for (int j=0; j < N; j++) {
    values.put("col1",j);
    mDatabase.insert(testTable,null,values);
    rows.add(j);
  }
  mDatabase.setTransactionSuccessful();
  mDatabase.endTransaction();
  assertEquals(N,rows.size());
  Cursor c1=mDatabase.rawQuery("select * from " + testTable,null);
  assertEquals(N,c1.getCount());
  c1.close();
  Cursor c=mDatabase.query(testTable,new String[]{"col1","desc"},null,null,null,null,null);
  int i=0;
  while (c.moveToNext()) {
    int val=c.getInt(0);
    assertTrue(rows.contains(val));
    assertTrue(rows.remove(val));
  }
  assertTrue(rows.isEmpty());
  rows=new HashSet<Integer>();
  mDatabase.beginTransaction();
  int M=N + 1000;
  for (int j=0; j < M; j++) {
    rows.add(j);
    if (j < N) {
      continue;
    }
    values.put("col1",j);
    mDatabase.insert(testTable,null,values);
  }
  mDatabase.setTransactionSuccessful();
  mDatabase.endTransaction();
  assertEquals(M,rows.size());
  c.requery();
  i=0;
  while (c.moveToNext()) {
    int val=c.getInt(0);
    assertTrue(rows.contains(val));
    assertTrue(rows.remove(val));
  }
  assertTrue(rows.isEmpty());
  c.moveToFirst();
  int K=N / 2;
  for (int p=0; p < K && c.moveToNext(); p++) {
  }
  mDatabase.beginTransaction();
  mDatabase.delete(testTable,"col1 < ?",new String[]{(3 * M / 4) + ""});
  mDatabase.setTransactionSuccessful();
  mDatabase.endTransaction();
  c.requery();
  assertEquals(M / 4,c.getCount());
  while (c.moveToNext()) {
  }
  c.close();
}
