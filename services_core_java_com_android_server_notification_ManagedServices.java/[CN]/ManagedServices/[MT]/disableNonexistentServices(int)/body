{
  final ContentResolver cr=mContext.getContentResolver();
  boolean restoredChanged=false;
  if (mRestored == null) {
    String restoredSetting=Settings.Secure.getStringForUser(cr,restoredSettingName(mConfig),userId);
    if (!TextUtils.isEmpty(restoredSetting)) {
      if (DEBUG)       Slog.d(TAG,"restored: " + restoredSetting);
      String[] restored=restoredSetting.split(ENABLED_SERVICES_SEPARATOR);
      mRestored=new ArraySet<String>(Arrays.asList(restored));
    }
 else {
      mRestored=new ArraySet<String>();
    }
  }
  String flatIn=Settings.Secure.getStringForUser(cr,mConfig.secureSettingName,userId);
  if (!TextUtils.isEmpty(flatIn)) {
    if (DEBUG)     Slog.v(TAG,"flat before: " + flatIn);
    PackageManager pm=mContext.getPackageManager();
    List<ResolveInfo> installedServices=pm.queryIntentServicesAsUser(new Intent(mConfig.serviceInterface),PackageManager.GET_SERVICES | PackageManager.GET_META_DATA,userId);
    if (DEBUG)     Slog.v(TAG,mConfig.serviceInterface + " services: " + installedServices);
    Set<ComponentName> installed=new ArraySet<ComponentName>();
    for (int i=0, count=installedServices.size(); i < count; i++) {
      ResolveInfo resolveInfo=installedServices.get(i);
      ServiceInfo info=resolveInfo.serviceInfo;
      ComponentName component=new ComponentName(info.packageName,info.name);
      if (!mConfig.bindPermission.equals(info.permission)) {
        Slog.w(TAG,"Skipping " + getCaption() + " service "+ info.packageName+ "/"+ info.name+ ": it does not require the permission "+ mConfig.bindPermission);
        restoredChanged|=mRestored.remove(component.flattenToString());
        continue;
      }
      installed.add(component);
    }
    String flatOut="";
    if (!installed.isEmpty()) {
      String[] enabled=flatIn.split(ENABLED_SERVICES_SEPARATOR);
      ArrayList<String> remaining=new ArrayList<String>(enabled.length);
      for (int i=0; i < enabled.length; i++) {
        ComponentName enabledComponent=ComponentName.unflattenFromString(enabled[i]);
        if (installed.contains(enabledComponent)) {
          remaining.add(enabled[i]);
          restoredChanged|=mRestored.remove(enabled[i]);
        }
      }
      remaining.addAll(mRestored);
      flatOut=TextUtils.join(ENABLED_SERVICES_SEPARATOR,remaining);
    }
    if (DEBUG)     Slog.v(TAG,"flat after: " + flatOut);
    if (!flatIn.equals(flatOut)) {
      Settings.Secure.putStringForUser(cr,mConfig.secureSettingName,flatOut,userId);
    }
    if (restoredChanged) {
      if (DEBUG)       Slog.d(TAG,"restored changed; rewriting");
      final String flatRestored=TextUtils.join(ENABLED_SERVICES_SEPARATOR,mRestored.toArray());
      Settings.Secure.putStringForUser(cr,restoredSettingName(mConfig),flatRestored,userId);
    }
  }
}
