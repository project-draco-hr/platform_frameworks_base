{
  Transition sharedElementTransition=null;
  if (startSharedElementTransition) {
    if (!mSharedElementNames.isEmpty()) {
      sharedElementTransition=configureTransition(getSharedElementTransition(),false);
    }
    if (sharedElementTransition == null) {
      sharedElementTransitionStarted();
      sharedElementTransitionComplete();
    }
 else {
      sharedElementTransition.addListener(new Transition.TransitionListenerAdapter(){
        @Override public void onTransitionStart(        Transition transition){
          sharedElementTransitionStarted();
        }
        @Override public void onTransitionEnd(        Transition transition){
          transition.removeListener(this);
          sharedElementTransitionComplete();
        }
      }
);
    }
  }
  Transition viewsTransition=null;
  if (startEnterTransition) {
    mIsViewsTransitionStarted=true;
    if (!mTransitioningViews.isEmpty()) {
      viewsTransition=configureTransition(getViewsTransition(),true);
      if (viewsTransition != null && !mIsReturning) {
        stripOffscreenViews();
      }
    }
    if (viewsTransition == null) {
      viewTransitionComplete();
    }
 else {
      viewsTransition.forceVisibility(View.INVISIBLE,true);
      viewsTransition.addListener(new ContinueTransitionListener(){
        @Override public void onTransitionStart(        Transition transition){
          mEnterViewsTransition=transition;
          showViews(mTransitioningViews);
          super.onTransitionStart(transition);
        }
        @Override public void onTransitionEnd(        Transition transition){
          mEnterViewsTransition=null;
          transition.removeListener(this);
          viewTransitionComplete();
          super.onTransitionEnd(transition);
        }
      }
);
    }
  }
  Transition transition=mergeTransitions(sharedElementTransition,viewsTransition);
  if (transition != null) {
    transition.addListener(new ContinueTransitionListener());
    TransitionManager.beginDelayedTransition(getDecor(),transition);
    if (startSharedElementTransition && !mSharedElementNames.isEmpty()) {
      mSharedElements.get(0).invalidate();
    }
 else     if (startEnterTransition && !mTransitioningViews.isEmpty()) {
      mTransitioningViews.get(0).invalidate();
    }
  }
 else {
    transitionStarted();
  }
  return transition;
}
