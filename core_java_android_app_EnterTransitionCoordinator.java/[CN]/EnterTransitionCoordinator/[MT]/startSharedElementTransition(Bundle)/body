{
  ArrayList<String> rejectedNames=new ArrayList<String>(mAllSharedElementNames);
  rejectedNames.removeAll(mSharedElementNames);
  ArrayList<View> rejectedSnapshots=createSnapshots(sharedElementState,rejectedNames);
  mListener.handleRejectedSharedElements(rejectedSnapshots);
  startRejectedAnimations(rejectedSnapshots);
  ArrayList<View> sharedElementSnapshots=createSnapshots(sharedElementState,mSharedElementNames);
  setTransitionAlpha(mSharedElements,1);
  scheduleSetSharedElementEnd(sharedElementSnapshots);
  ArrayList<SharedElementOriginalState> originalImageViewState=setSharedElementState(sharedElementState,sharedElementSnapshots);
  requestLayoutForSharedElements();
  boolean startEnterTransition=allowOverlappingTransitions() && !mIsReturning;
  boolean startSharedElementTransition=true;
  setGhostVisibility(View.INVISIBLE);
  scheduleGhostVisibilityChange(View.INVISIBLE);
  Transition transition=beginTransition(startEnterTransition,startSharedElementTransition);
  scheduleGhostVisibilityChange(View.VISIBLE);
  setGhostVisibility(View.VISIBLE);
  if (startEnterTransition) {
    startEnterTransition(transition);
  }
  setOriginalSharedElementState(mSharedElements,originalImageViewState);
  if (mResultReceiver != null) {
    getDecor().postOnAnimation(new Runnable(){
      int mAnimations;
      @Override public void run(){
        if (mAnimations++ < MIN_ANIMATION_FRAMES) {
          getDecor().postOnAnimation(this);
        }
 else         if (mResultReceiver != null) {
          mResultReceiver.send(MSG_HIDE_SHARED_ELEMENTS,null);
          mResultReceiver=null;
        }
      }
    }
);
  }
}
