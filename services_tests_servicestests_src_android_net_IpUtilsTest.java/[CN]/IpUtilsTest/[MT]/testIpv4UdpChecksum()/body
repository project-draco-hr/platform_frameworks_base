{
  ByteBuffer packet=ByteBuffer.wrap(new byte[]{(byte)0x45,(byte)0x40,(byte)0x00,(byte)0x1d,(byte)0x00,(byte)0x01,(byte)0x00,(byte)0x00,(byte)0x40,(byte)0x11,(byte)0xf6,(byte)0x8b,(byte)0xc0,(byte)0x00,(byte)0x02,(byte)0x01,(byte)0xc0,(byte)0x00,(byte)0x02,(byte)0x02,(byte)0x7d,(byte)0x0c,(byte)0x11,(byte)0x94,(byte)0x00,(byte)0x09,(byte)0xee,(byte)0x36,(byte)0xff});
  assertEquals(0,IpUtils.ipChecksum(packet,0));
  assertEquals((short)0xffff,IpUtils.udpChecksum(packet,0,IPV4_HEADER_LENGTH));
  final int ipSumOffset=IP_CHECKSUM_OFFSET;
  final int ipSum=getChecksum(packet,ipSumOffset);
  assertEquals(0xf68b,ipSum);
  packet.put(ipSumOffset,(byte)0);
  packet.put(ipSumOffset + 1,(byte)0);
  assertChecksumEquals(ipSum,IpUtils.ipChecksum(packet,0));
  final int udpSumOffset=IPV4_HEADER_LENGTH + UDP_CHECKSUM_OFFSET;
  final int udpSum=getChecksum(packet,udpSumOffset);
  assertEquals(0xee36,udpSum);
  packet.put(udpSumOffset,(byte)0);
  packet.put(udpSumOffset + 1,(byte)0);
  assertChecksumEquals(udpSum,IpUtils.udpChecksum(packet,0,IPV4_HEADER_LENGTH));
  packet.putShort(ipSumOffset,IpUtils.ipChecksum(packet,0));
  packet.putShort(udpSumOffset,IpUtils.udpChecksum(packet,0,IPV4_HEADER_LENGTH));
  assertEquals(0,IpUtils.ipChecksum(packet,0));
  assertEquals((short)0xffff,IpUtils.udpChecksum(packet,0,IPV4_HEADER_LENGTH));
}
