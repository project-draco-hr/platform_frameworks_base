{
  try {
    final String name=serviceClass.getName();
    Slog.i(TAG,"Starting " + name);
    Trace.traceBegin(Trace.TRACE_TAG_SYSTEM_SERVER,"StartService " + name);
    if (!SystemService.class.isAssignableFrom(serviceClass)) {
      throw new RuntimeException("Failed to create " + name + ": service must extend "+ SystemService.class.getName());
    }
    final T service;
    try {
      Constructor<T> constructor=serviceClass.getConstructor(Context.class);
      service=constructor.newInstance(mContext);
    }
 catch (    InstantiationException ex) {
      throw new RuntimeException("Failed to create service " + name + ": service could not be instantiated",ex);
    }
catch (    IllegalAccessException ex) {
      throw new RuntimeException("Failed to create service " + name + ": service must have a public constructor with a Context argument",ex);
    }
catch (    NoSuchMethodException ex) {
      throw new RuntimeException("Failed to create service " + name + ": service must have a public constructor with a Context argument",ex);
    }
catch (    InvocationTargetException ex) {
      throw new RuntimeException("Failed to create service " + name + ": service constructor threw an exception",ex);
    }
    mServices.add(service);
    try {
      service.onStart();
    }
 catch (    RuntimeException ex) {
      throw new RuntimeException("Failed to start service " + name + ": onStart threw an exception",ex);
    }
    return service;
  }
  finally {
    Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
  }
}
