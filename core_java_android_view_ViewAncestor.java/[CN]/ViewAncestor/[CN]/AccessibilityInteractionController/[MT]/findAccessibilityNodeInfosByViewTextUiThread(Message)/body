{
  SomeArgs args=(SomeArgs)message.obj;
  final String text=(String)args.arg1;
  final int accessibilityViewId=args.argi1;
  final int interactionId=args.argi2;
  final IAccessibilityInteractionConnectionCallback callback=(IAccessibilityInteractionConnectionCallback)args.arg2;
  mPool.release(args);
  List<AccessibilityNodeInfo> infos=null;
  try {
    ArrayList<View> foundViews=mAttachInfo.mFocusablesTempList;
    foundViews.clear();
    View root=null;
    if (accessibilityViewId != View.NO_ID) {
      root=findViewByAccessibilityId(accessibilityViewId);
    }
 else {
      root=ViewAncestor.this.mView;
    }
    if (root == null || !root.isShown()) {
      return;
    }
    root.findViewsWithText(foundViews,text);
    if (foundViews.isEmpty()) {
      return;
    }
    infos=mTempAccessibilityNodeInfoList;
    infos.clear();
    final int viewCount=foundViews.size();
    for (int i=0; i < viewCount; i++) {
      View foundView=foundViews.get(i);
      if (foundView.isShown()) {
        infos.add(foundView.createAccessibilityNodeInfo());
      }
    }
  }
  finally {
    try {
      callback.setFindAccessibilityNodeInfosResult(infos,interactionId);
    }
 catch (    RemoteException re) {
    }
  }
}
