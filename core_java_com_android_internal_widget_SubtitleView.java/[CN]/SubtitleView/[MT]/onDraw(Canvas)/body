{
  final StaticLayout layout=mLayout;
  if (layout == null) {
    return;
  }
  final int saveCount=c.save();
  final int innerPaddingX=mInnerPaddingX;
  c.translate(mPaddingLeft + innerPaddingX,mPaddingTop);
  final int lineCount=layout.getLineCount();
  final Paint textPaint=mTextPaint;
  final Paint paint=mPaint;
  final RectF bounds=mLineBounds;
  if (Color.alpha(mBackgroundColor) > 0) {
    final float cornerRadius=mCornerRadius;
    float previousBottom=layout.getLineTop(0);
    paint.setColor(mBackgroundColor);
    paint.setStyle(Style.FILL);
    for (int i=0; i < lineCount; i++) {
      bounds.left=layout.getLineLeft(i) - innerPaddingX;
      bounds.right=layout.getLineRight(i) + innerPaddingX;
      bounds.top=previousBottom;
      bounds.bottom=layout.getLineBottom(i);
      previousBottom=bounds.bottom;
      c.drawRoundRect(bounds,cornerRadius,cornerRadius,paint);
    }
  }
  final int edgeType=mEdgeType;
  if (edgeType == CaptionStyle.EDGE_TYPE_OUTLINE) {
    textPaint.setStrokeJoin(Join.ROUND);
    textPaint.setStrokeWidth(mOutlineWidth);
    textPaint.setColor(mEdgeColor);
    textPaint.setStyle(Style.FILL_AND_STROKE);
    for (int i=0; i < lineCount; i++) {
      layout.drawText(c,i,i);
    }
  }
 else   if (edgeType == CaptionStyle.EDGE_TYPE_DROP_SHADOW) {
    textPaint.setShadowLayer(mShadowRadius,mShadowOffsetX,mShadowOffsetY,mEdgeColor);
  }
 else   if (edgeType == CaptionStyle.EDGE_TYPE_RAISED || edgeType == CaptionStyle.EDGE_TYPE_DEPRESSED) {
    final boolean raised=edgeType == CaptionStyle.EDGE_TYPE_RAISED;
    final int colorUp=raised ? Color.WHITE : mEdgeColor;
    final int colorDown=raised ? mEdgeColor : Color.WHITE;
    final float offset=mShadowRadius / 2f;
    textPaint.setColor(mForegroundColor);
    textPaint.setStyle(Style.FILL);
    textPaint.setShadowLayer(mShadowRadius,-offset,-offset,colorUp);
    for (int i=0; i < lineCount; i++) {
      layout.drawText(c,i,i);
    }
    textPaint.setShadowLayer(mShadowRadius,offset,offset,colorDown);
  }
  textPaint.setColor(mForegroundColor);
  textPaint.setStyle(Style.FILL);
  for (int i=0; i < lineCount; i++) {
    layout.drawText(c,i,i);
  }
  textPaint.setShadowLayer(0,0,0,0);
  c.restoreToCount(saveCount);
}
