{
  Iterator<Asn1Object> children=sequence.getChildren().iterator();
  Iterator<Asn1Object> logoTypeDetails=castObject(children.next(),Asn1Constructed.class).getChildren().iterator();
  mMimeType=castObject(logoTypeDetails.next(),Asn1String.class).getString();
  Asn1Constructed hashes=castObject(logoTypeDetails.next(),Asn1Constructed.class);
  for (  Asn1Object hash : hashes.getChildren()) {
    mHashes.add(new HashAlgAndValue(castObject(hash,Asn1Constructed.class)));
  }
  Asn1Constructed urls=castObject(logoTypeDetails.next(),Asn1Constructed.class);
  for (  Asn1Object url : urls.getChildren()) {
    mURIs.add(castObject(url,Asn1String.class).getString());
  }
  boolean imageInfoSet=false;
  int fileSize=-1;
  int xSize=-1;
  int ySize=-1;
  String language=null;
  if (children.hasNext()) {
    Iterator<Asn1Object> imageInfo=castObject(children.next(),Asn1Constructed.class).getChildren().iterator();
    Asn1Object first=imageInfo.next();
    if (first.getTag() == 0) {
      first=imageInfo.next();
    }
    fileSize=(int)castObject(first,Asn1Integer.class).getValue();
    xSize=(int)castObject(imageInfo.next(),Asn1Integer.class).getValue();
    ySize=(int)castObject(imageInfo.next(),Asn1Integer.class).getValue();
    imageInfoSet=true;
    if (imageInfo.hasNext()) {
      Asn1Object next=imageInfo.next();
      if (next.getTag() != 4) {
        next=imageInfo.hasNext() ? imageInfo.next() : null;
      }
      if (next != null && next.getTag() == 4) {
        language=new String(castObject(next,Asn1Octets.class).getOctets(),StandardCharsets.US_ASCII);
      }
    }
  }
  if (imageInfoSet) {
    mFileSize=complement(fileSize);
    mXsize=complement(xSize);
    mYsize=complement(ySize);
  }
 else {
    mFileSize=mXsize=mYsize=-1;
  }
  mLanguage=language;
}
