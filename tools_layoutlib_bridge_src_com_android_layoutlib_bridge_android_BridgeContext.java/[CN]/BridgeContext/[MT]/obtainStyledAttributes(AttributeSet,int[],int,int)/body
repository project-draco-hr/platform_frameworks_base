{
  Map<String,String> defaultPropMap=null;
  boolean isPlatformFile=true;
  if (set instanceof BridgeXmlBlockParser) {
    BridgeXmlBlockParser parser=null;
    parser=(BridgeXmlBlockParser)set;
    isPlatformFile=parser.isPlatformFile();
    Object key=parser.getViewCookie();
    if (key != null) {
      defaultPropMap=mDefaultPropMaps.get(key);
      if (defaultPropMap == null) {
        defaultPropMap=new HashMap<String,String>();
        mDefaultPropMaps.put(key,defaultPropMap);
      }
    }
  }
 else   if (set instanceof BridgeLayoutParamsMapAttributes) {
    isPlatformFile=false;
  }
 else   if (set != null) {
    Bridge.getLog().error(LayoutLog.TAG_BROKEN,"Parser is not a BridgeXmlBlockParser!",null);
    return null;
  }
  boolean[] frameworkAttributes=new boolean[1];
  TreeMap<Integer,String> styleNameMap=searchAttrs(attrs,frameworkAttributes);
  BridgeTypedArray ta=((BridgeResources)mSystemResources).newTypeArray(attrs.length,isPlatformFile);
  StyleResourceValue defStyleValues=null;
  String customStyle=null;
  if (set != null) {
    customStyle=set.getAttributeValue(null,"style");
  }
  if (customStyle != null) {
    ResourceValue item=mRenderResources.findResValue(customStyle,false);
    if (item instanceof StyleResourceValue) {
      defStyleValues=(StyleResourceValue)item;
    }
  }
  if (defStyleValues == null && defStyleAttr != 0) {
    String defStyleName=searchAttr(defStyleAttr);
    if (defaultPropMap != null) {
      defaultPropMap.put("style",defStyleName);
    }
    ResourceValue item=mRenderResources.findItemInTheme(defStyleName);
    if (item != null) {
      item=mRenderResources.findResValue(item.getValue(),false);
      if (item instanceof StyleResourceValue) {
        defStyleValues=(StyleResourceValue)item;
      }
    }
 else {
      Bridge.getLog().error(null,String.format("Failed to find style '%s' in current theme",defStyleName),null);
    }
  }
  if (defStyleRes != 0) {
    throw new UnsupportedOperationException();
  }
  String namespace=BridgeConstants.NS_RESOURCES;
  if (frameworkAttributes[0] == false) {
    namespace=mProjectCallback.getNamespace();
  }
  if (styleNameMap != null) {
    for (    Entry<Integer,String> styleAttribute : styleNameMap.entrySet()) {
      int index=styleAttribute.getKey().intValue();
      String name=styleAttribute.getValue();
      String value=null;
      if (set != null) {
        value=set.getAttributeValue(namespace,name);
      }
      if (value == null) {
        ResourceValue resValue=null;
        if (defStyleValues != null) {
          resValue=mRenderResources.findItemInStyle(defStyleValues,name);
        }
        if (resValue == null) {
          resValue=mRenderResources.findItemInTheme(name);
        }
        if (resValue != null) {
          if (defaultPropMap != null) {
            defaultPropMap.put(name,resValue.getValue());
          }
          resValue=mRenderResources.resolveResValue(resValue);
        }
        ta.bridgeSetValue(index,name,resValue);
      }
 else {
        ta.bridgeSetValue(index,name,mRenderResources.resolveValue(null,name,value,isPlatformFile));
      }
    }
  }
  ta.sealArray();
  return ta;
}
