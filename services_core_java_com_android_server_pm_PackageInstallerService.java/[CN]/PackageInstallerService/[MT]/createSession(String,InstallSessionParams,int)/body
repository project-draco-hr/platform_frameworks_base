{
  final int callingUid=Binder.getCallingUid();
  mPm.enforceCrossUserPermission(callingUid,userId,true,"createSession");
  if (mPm.isUserRestricted(UserHandle.getUserId(callingUid),UserManager.DISALLOW_INSTALL_APPS)) {
    throw new SecurityException("User restriction prevents installing");
  }
  if ((callingUid == Process.SHELL_UID) || (callingUid == 0)) {
    params.installFlags|=INSTALL_FROM_ADB;
  }
 else {
    mAppOps.checkPackage(callingUid,installerPackageName);
    params.installFlags&=~INSTALL_FROM_ADB;
    params.installFlags&=~INSTALL_ALL_USERS;
    params.installFlags|=INSTALL_REPLACE_EXISTING;
  }
  if (params.deltaSize > 0) {
    try {
      mPm.freeStorage(params.deltaSize);
    }
 catch (    IOException e) {
      throw ExceptionUtils.wrap(e);
    }
  }
  final int sessionId;
  final PackageInstallerSession session;
synchronized (mSessions) {
    sessionId=allocateSessionIdLocked();
    final long createdMillis=System.currentTimeMillis();
    final File sessionStageDir=prepareSessionStageDir(sessionId);
    session=new PackageInstallerSession(mCallback,mPm,sessionId,userId,installerPackageName,callingUid,params,createdMillis,sessionStageDir,mInstallThread.getLooper());
    mSessions.put(sessionId,session);
  }
  notifySessionCreated(session.generateInfo());
  writeSessionsAsync();
  return sessionId;
}
