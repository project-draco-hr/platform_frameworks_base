{
  final int callingUid=Binder.getCallingUid();
  mPm.enforceCrossUserPermission(callingUid,userId,true,true,"uninstall");
  boolean allowSilentUninstall=true;
  if ((callingUid != Process.SHELL_UID) && (callingUid != Process.ROOT_UID)) {
    mAppOps.checkPackage(callingUid,callerPackageName);
    final String installerPackageName=mPm.getInstallerPackageName(packageName);
    allowSilentUninstall=installerPackageName != null && installerPackageName.equals(callerPackageName);
  }
  DevicePolicyManager dpm=(DevicePolicyManager)mContext.getSystemService(Context.DEVICE_POLICY_SERVICE);
  boolean isDeviceOwner=(dpm != null) && dpm.isDeviceOwnerAppOnCallingUser(callerPackageName);
  final PackageDeleteObserverAdapter adapter=new PackageDeleteObserverAdapter(mContext,statusReceiver,packageName,isDeviceOwner,userId);
  if (allowSilentUninstall && mContext.checkCallingOrSelfPermission(android.Manifest.permission.DELETE_PACKAGES) == PackageManager.PERMISSION_GRANTED) {
    mPm.deletePackage(packageName,adapter.getBinder(),userId,flags);
  }
 else   if (isDeviceOwner) {
    long ident=Binder.clearCallingIdentity();
    try {
      mPm.deletePackage(packageName,adapter.getBinder(),userId,flags);
    }
  finally {
      Binder.restoreCallingIdentity(ident);
    }
  }
 else {
    final Intent intent=new Intent(Intent.ACTION_UNINSTALL_PACKAGE);
    intent.setData(Uri.fromParts("package",packageName,null));
    intent.putExtra(PackageInstaller.EXTRA_CALLBACK,adapter.getBinder().asBinder());
    adapter.onUserActionRequired(intent);
  }
}
