{
  dest.reset();
  if (start == end)   return;
  if (end < start) {
    int temp=end;
    end=start;
    start=temp;
  }
  int startline=getLineForOffset(start);
  int endline=getLineForOffset(end);
  int top=getLineTop(startline);
  int bottom=getLineBottom(endline);
  if (startline == endline) {
    addSelection(startline,start,end,top,bottom,dest);
  }
 else {
    final float width=mWidth;
    addSelection(startline,start,getLineEnd(startline),top,getLineBottom(startline),dest);
    if (getParagraphDirection(startline) == DIR_RIGHT_TO_LEFT)     dest.addRect(getLineLeft(startline),top,0,getLineBottom(startline),Path.Direction.CW);
 else     dest.addRect(getLineRight(startline),top,width,getLineBottom(startline),Path.Direction.CW);
    for (int i=startline + 1; i < endline; i++) {
      top=getLineTop(i);
      bottom=getLineBottom(i);
      dest.addRect(0,top,width,bottom,Path.Direction.CW);
    }
    top=getLineTop(endline);
    bottom=getLineBottom(endline);
    addSelection(endline,getLineStart(endline),end,top,bottom,dest);
    if (getParagraphDirection(endline) == DIR_RIGHT_TO_LEFT)     dest.addRect(width,top,getLineRight(endline),bottom,Path.Direction.CW);
 else     dest.addRect(0,top,getLineLeft(endline),bottom,Path.Direction.CW);
  }
}
