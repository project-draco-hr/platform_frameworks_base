{
  if (mSpannedText) {
    int previousLineBottom=getLineTop(firstLine);
    int previousLineEnd=getLineStart(firstLine);
    ParagraphStyle[] spans=NO_PARA_SPANS;
    TextPaint paint=mPaint;
    CharSequence buf=mText;
    int spanEnd=0;
    final int width=mWidth;
    Spanned sp=(Spanned)buf;
    int textLength=buf.length();
    for (int i=firstLine; i <= lastLine; i++) {
      int start=previousLineEnd;
      int end=getLineStart(i + 1);
      previousLineEnd=end;
      int ltop=previousLineBottom;
      int lbottom=getLineTop(i + 1);
      previousLineBottom=lbottom;
      int lbaseline=lbottom - getLineDescent(i);
      if (start >= spanEnd) {
        spanEnd=sp.nextSpanTransition(start,textLength,LineBackgroundSpan.class);
        spans=getParagraphSpans(sp,start,end,LineBackgroundSpan.class);
      }
      for (int n=0; n < spans.length; n++) {
        LineBackgroundSpan back=(LineBackgroundSpan)spans[n];
        back.drawBackground(canvas,paint,0,width,ltop,lbaseline,lbottom,buf,start,end,i);
      }
    }
  }
  if (highlight != null) {
    if (cursorOffsetVertical != 0)     canvas.translate(0,cursorOffsetVertical);
    canvas.drawPath(highlight,highlightPaint);
    if (cursorOffsetVertical != 0)     canvas.translate(0,-cursorOffsetVertical);
  }
}
