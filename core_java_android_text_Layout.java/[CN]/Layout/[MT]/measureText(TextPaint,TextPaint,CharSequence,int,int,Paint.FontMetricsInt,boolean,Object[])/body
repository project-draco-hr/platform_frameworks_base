{
  char[] buf=null;
  if (hasTabs) {
    buf=TextUtils.obtain(end - start);
    TextUtils.getChars(text,start,end,buf,0);
  }
  int len=end - start;
  int here=0;
  float h=0;
  int ab=0, be=0;
  int top=0, bot=0;
  if (fm != null) {
    fm.ascent=0;
    fm.descent=0;
  }
  for (int i=hasTabs ? 0 : len; i <= len; i++) {
    int codept=0;
    Bitmap bm=null;
    if (hasTabs && i < len) {
      codept=buf[i];
    }
    if (codept >= 0xD800 && codept <= 0xDFFF && i < len) {
      codept=Character.codePointAt(buf,i);
      if (codept >= MIN_EMOJI && codept <= MAX_EMOJI) {
        bm=EMOJI_FACTORY.getBitmapFromAndroidPua(codept);
      }
    }
    if (i == len || codept == '\t' || bm != null) {
      workPaint.baselineShift=0;
      h+=Styled.measureText(paint,workPaint,text,start + here,start + i,fm);
      if (fm != null) {
        if (workPaint.baselineShift < 0) {
          fm.ascent+=workPaint.baselineShift;
          fm.top+=workPaint.baselineShift;
        }
 else {
          fm.descent+=workPaint.baselineShift;
          fm.bottom+=workPaint.baselineShift;
        }
      }
      if (i != len) {
        if (bm == null) {
          h=nextTab(text,start,end,h,tabs);
        }
 else {
          workPaint.set(paint);
          Styled.measureText(paint,workPaint,text,start + i,start + i + 1,null);
          float wid=(float)bm.getWidth() * -workPaint.ascent() / bm.getHeight();
          h+=wid;
          i++;
        }
      }
      if (fm != null) {
        if (fm.ascent < ab) {
          ab=fm.ascent;
        }
        if (fm.descent > be) {
          be=fm.descent;
        }
        if (fm.top < top) {
          top=fm.top;
        }
        if (fm.bottom > bot) {
          bot=fm.bottom;
        }
      }
      here=i + 1;
    }
  }
  if (fm != null) {
    fm.ascent=ab;
    fm.descent=be;
    fm.top=top;
    fm.bottom=bot;
  }
  if (hasTabs)   TextUtils.recycle(buf);
  return h;
}
