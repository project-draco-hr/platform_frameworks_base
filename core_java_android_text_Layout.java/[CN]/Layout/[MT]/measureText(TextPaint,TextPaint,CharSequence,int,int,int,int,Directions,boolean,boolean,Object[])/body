{
  char[] buf=null;
  if (hasTabs) {
    buf=TextUtils.obtain(end - start);
    TextUtils.getChars(text,start,end,buf,0);
  }
  float h=0;
  int target=trailing ? offset - 1 : offset;
  if (target < start) {
    return 0;
  }
  int[] runs=directions.mDirections;
  for (int i=0; i < runs.length; i+=2) {
    int here=start + runs[i];
    int there=here + (runs[i + 1] & RUN_LENGTH_MASK);
    if (there > end) {
      there=end;
    }
    boolean runIsRtl=(runs[i + 1] & RUN_RTL_FLAG) != 0;
    int segstart=here;
    for (int j=hasTabs ? here : there; j <= there; j++) {
      int codept=0;
      Bitmap bm=null;
      if (hasTabs && j < there) {
        codept=buf[j - start];
      }
      if (codept >= 0xD800 && codept <= 0xDFFF && j + 1 < there) {
        codept=Character.codePointAt(buf,j - start);
        if (codept >= MIN_EMOJI && codept <= MAX_EMOJI) {
          bm=EMOJI_FACTORY.getBitmapFromAndroidPua(codept);
        }
      }
      if (j == there || codept == '\t' || bm != null) {
        float segw;
        boolean inSegment=target >= segstart && target < j;
        if (inSegment) {
          if (dir == DIR_LEFT_TO_RIGHT && !runIsRtl) {
            h+=Styled.measureText(paint,workPaint,text,segstart,offset,null);
            return h;
          }
          if (dir == DIR_RIGHT_TO_LEFT && runIsRtl) {
            h-=Styled.measureText(paint,workPaint,text,segstart,offset,null);
            return h;
          }
        }
        segw=Styled.measureText(paint,workPaint,text,segstart,j,null);
        if (inSegment) {
          if (dir == DIR_LEFT_TO_RIGHT) {
            h+=segw - Styled.measureText(paint,workPaint,text,segstart,offset,null);
            return h;
          }
          if (dir == DIR_RIGHT_TO_LEFT) {
            h-=segw - Styled.measureText(paint,workPaint,text,segstart,offset,null);
            return h;
          }
        }
        if (dir == DIR_RIGHT_TO_LEFT)         h-=segw;
 else         h+=segw;
        if (j != there && buf[j - start] == '\t') {
          if (offset == j)           return h;
          h=dir * nextTab(text,start,end,h * dir,tabs);
          if (target == j) {
            return h;
          }
        }
        if (bm != null) {
          workPaint.set(paint);
          Styled.measureText(paint,workPaint,text,j,j + 2,null);
          float wid=bm.getWidth() * -workPaint.ascent() / bm.getHeight();
          if (dir == DIR_RIGHT_TO_LEFT) {
            h-=wid;
          }
 else {
            h+=wid;
          }
          j++;
        }
        segstart=j + 1;
      }
    }
  }
  if (hasTabs)   TextUtils.recycle(buf);
  return h;
}
