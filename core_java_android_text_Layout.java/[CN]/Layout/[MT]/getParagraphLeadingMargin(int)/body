{
  if (!mSpannedText) {
    return 0;
  }
  Spanned spanned=(Spanned)mText;
  int lineStart=getLineStart(line);
  int lineEnd=getLineEnd(line);
  int spanEnd=spanned.nextSpanTransition(lineStart,lineEnd,LeadingMarginSpan.class);
  LeadingMarginSpan[] spans=getParagraphSpans(spanned,lineStart,spanEnd,LeadingMarginSpan.class);
  if (spans.length == 0) {
    return 0;
  }
  int margin=0;
  boolean isFirstParaLine=lineStart == 0 || spanned.charAt(lineStart - 1) == '\n';
  for (int i=0; i < spans.length; i++) {
    LeadingMarginSpan span=spans[i];
    boolean useFirstLineMargin=isFirstParaLine;
    if (span instanceof LeadingMarginSpan2) {
      int spStart=spanned.getSpanStart(span);
      int spanLine=getLineForOffset(spStart);
      int count=((LeadingMarginSpan2)span).getLeadingMarginLineCount();
      useFirstLineMargin=line < spanLine + count;
    }
    margin+=span.getLeadingMargin(useFirstLineMargin);
  }
  return margin;
}
