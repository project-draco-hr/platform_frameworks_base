{
  dest.reset();
  int line=getLineForOffset(point);
  int top=getLineTop(line);
  int bottom=getLineTop(line + 1);
  float h1=getPrimaryHorizontal(point) - 0.5f;
  float h2=isLevelBoundary(point) ? getSecondaryHorizontal(point) - 0.5f : h1;
  int caps=TextKeyListener.getMetaState(editingBuffer,TextKeyListener.META_SHIFT_ON) | TextKeyListener.getMetaState(editingBuffer,TextKeyListener.META_SELECTING);
  int fn=TextKeyListener.getMetaState(editingBuffer,TextKeyListener.META_ALT_ON);
  int dist=0;
  if (caps != 0 || fn != 0) {
    dist=(bottom - top) >> 2;
    if (fn != 0)     top+=dist;
    if (caps != 0)     bottom-=dist;
  }
  if (h1 < 0.5f)   h1=0.5f;
  if (h2 < 0.5f)   h2=0.5f;
  if (h1 == h2) {
    dest.moveTo(h1,top);
    dest.lineTo(h1,bottom);
  }
 else {
    dest.moveTo(h1,top);
    dest.lineTo(h1,(top + bottom) >> 1);
    dest.moveTo(h2,(top + bottom) >> 1);
    dest.lineTo(h2,bottom);
  }
  if (caps == 2) {
    dest.moveTo(h2,bottom);
    dest.lineTo(h2 - dist,bottom + dist);
    dest.lineTo(h2,bottom);
    dest.lineTo(h2 + dist,bottom + dist);
  }
 else   if (caps == 1) {
    dest.moveTo(h2,bottom);
    dest.lineTo(h2 - dist,bottom + dist);
    dest.moveTo(h2 - dist,bottom + dist - 0.5f);
    dest.lineTo(h2 + dist,bottom + dist - 0.5f);
    dest.moveTo(h2 + dist,bottom + dist);
    dest.lineTo(h2,bottom);
  }
  if (fn == 2) {
    dest.moveTo(h1,top);
    dest.lineTo(h1 - dist,top - dist);
    dest.lineTo(h1,top);
    dest.lineTo(h1 + dist,top - dist);
  }
 else   if (fn == 1) {
    dest.moveTo(h1,top);
    dest.lineTo(h1 - dist,top - dist);
    dest.moveTo(h1 - dist,top - dist + 0.5f);
    dest.lineTo(h1 + dist,top - dist + 0.5f);
    dest.moveTo(h1 + dist,top - dist);
    dest.lineTo(h1,top);
  }
}
