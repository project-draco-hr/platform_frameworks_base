{
  MeasuredText mt=MeasuredText.obtain();
  TextLine tl=TextLine.obtain();
  try {
    mt.setPara(text,start,end,DIR_REQUEST_LTR);
    Directions directions;
    int dir;
    if (mt.mEasy) {
      directions=DIRS_ALL_LEFT_TO_RIGHT;
      dir=Layout.DIR_LEFT_TO_RIGHT;
    }
 else {
      directions=AndroidBidi.directions(mt.mDir,mt.mLevels,0,mt.mChars,0,mt.mLen);
      dir=mt.mDir;
    }
    char[] chars=mt.mChars;
    int len=mt.mLen;
    boolean hasTabs=false;
    TabStops tabStops=null;
    for (int i=0; i < len; ++i) {
      if (chars[i] == '\t') {
        hasTabs=true;
        if (text instanceof Spanned) {
          Spanned spanned=(Spanned)text;
          int spanEnd=spanned.nextSpanTransition(start,end,TabStopSpan.class);
          TabStopSpan[] spans=spanned.getSpans(start,spanEnd,TabStopSpan.class);
          if (spans.length > 0) {
            tabStops=new TabStops(TAB_INCREMENT,spans);
          }
        }
        break;
      }
    }
    tl.set(paint,text,start,end,dir,directions,hasTabs,tabStops);
    return tl.metrics(null);
  }
  finally {
    TextLine.recycle(tl);
    MeasuredText.recycle(mt);
  }
}
