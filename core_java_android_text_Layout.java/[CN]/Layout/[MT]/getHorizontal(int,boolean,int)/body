{
  int start=getLineStart(line);
  int end=getLineVisibleEnd(line);
  int dir=getParagraphDirection(line);
  boolean tab=getLineContainsTab(line);
  Directions directions=getLineDirections(line);
  TabStopSpan[] tabs=null;
  if (tab && mText instanceof Spanned) {
    tabs=((Spanned)mText).getSpans(start,end,TabStopSpan.class);
  }
  float wid=measureText(mPaint,mWorkPaint,mText,start,offset,end,dir,directions,trailing,tab,tabs);
  if (offset > end) {
    if (dir == DIR_RIGHT_TO_LEFT)     wid-=measureText(mPaint,mWorkPaint,mText,end,offset,null,tab,tabs);
 else     wid+=measureText(mPaint,mWorkPaint,mText,end,offset,null,tab,tabs);
  }
  Alignment align=getParagraphAlignment(line);
  int left=getParagraphLeft(line);
  int right=getParagraphRight(line);
  if (align == Alignment.ALIGN_NORMAL) {
    if (dir == DIR_RIGHT_TO_LEFT)     return right + wid;
 else     return left + wid;
  }
  float max=getLineMax(line);
  if (align == Alignment.ALIGN_OPPOSITE) {
    if (dir == DIR_RIGHT_TO_LEFT)     return left + max + wid;
 else     return right - max + wid;
  }
 else {
    int imax=((int)max) & ~1;
    if (dir == DIR_RIGHT_TO_LEFT)     return right - (((right - left) - imax) / 2) + wid;
 else     return left + ((right - left) - imax) / 2 + wid;
  }
}
