{
  char[] buf=null;
  if (hasTabs) {
    buf=TextUtils.obtain(end - start);
    TextUtils.getChars(text,start,end,buf,0);
  }
  float h=0;
  if (alt) {
    if (dir == DIR_RIGHT_TO_LEFT)     trailing=!trailing;
  }
  int here=0;
  for (int i=0; i < directions.mDirections.length; i++) {
    if (alt)     trailing=!trailing;
    int there=here + directions.mDirections[i];
    if (there > end - start)     there=end - start;
    int segstart=here;
    for (int j=hasTabs ? here : there; j <= there; j++) {
      if (j == there || buf[j] == '\t') {
        float segw;
        if (offset < start + j || (trailing && offset <= start + j)) {
          if (dir == DIR_LEFT_TO_RIGHT && (i & 1) == 0) {
            h+=Styled.measureText(paint,workPaint,text,start + segstart,offset,null);
            return h;
          }
          if (dir == DIR_RIGHT_TO_LEFT && (i & 1) != 0) {
            h-=Styled.measureText(paint,workPaint,text,start + segstart,offset,null);
            return h;
          }
        }
        segw=Styled.measureText(paint,workPaint,text,start + segstart,start + j,null);
        if (offset < start + j || (trailing && offset <= start + j)) {
          if (dir == DIR_LEFT_TO_RIGHT) {
            h+=segw - Styled.measureText(paint,workPaint,text,start + segstart,offset,null);
            return h;
          }
          if (dir == DIR_RIGHT_TO_LEFT) {
            h-=segw - Styled.measureText(paint,workPaint,text,start + segstart,offset,null);
            return h;
          }
        }
        if (dir == DIR_RIGHT_TO_LEFT)         h-=segw;
 else         h+=segw;
        if (j != there && buf[j] == '\t') {
          if (offset == start + j)           return h;
          h=dir * nextTab(text,start,end,h * dir,tabs);
        }
        segstart=j + 1;
      }
    }
    here=there;
  }
  if (hasTabs)   TextUtils.recycle(buf);
  return h;
}
