{
  maybeLogMessage(this,message.what);
  boolean retValue=true;
switch (message.what) {
case CMD_TETHER_UNREQUESTED:
    transitionTo(mInitialState);
  if (DBG)   Log.d(TAG,"Untethered (unrequested)" + mIfaceName);
break;
case CMD_INTERFACE_DOWN:
transitionTo(mUnavailableState);
if (DBG) Log.d(TAG,"Untethered (ifdown)" + mIfaceName);
break;
case CMD_TETHER_CONNECTION_CHANGED:
String newUpstreamIfaceName=(String)(message.obj);
if ((mMyUpstreamIfaceName == null && newUpstreamIfaceName == null) || (mMyUpstreamIfaceName != null && mMyUpstreamIfaceName.equals(newUpstreamIfaceName))) {
if (VDBG) Log.d(TAG,"Connection changed noop - dropping");
break;
}
cleanupUpstream();
if (newUpstreamIfaceName != null) {
try {
mNMService.enableNat(mIfaceName,newUpstreamIfaceName);
mNMService.startInterfaceForwarding(mIfaceName,newUpstreamIfaceName);
}
 catch (Exception e) {
Log.e(TAG,"Exception enabling Nat: " + e.toString());
setLastError(ConnectivityManager.TETHER_ERROR_ENABLE_NAT_ERROR);
transitionTo(mInitialState);
return true;
}
}
mMyUpstreamIfaceName=newUpstreamIfaceName;
break;
case CMD_IP_FORWARDING_ENABLE_ERROR:
case CMD_IP_FORWARDING_DISABLE_ERROR:
case CMD_START_TETHERING_ERROR:
case CMD_STOP_TETHERING_ERROR:
case CMD_SET_DNS_FORWARDERS_ERROR:
setLastErrorAndTransitionToInitialState(ConnectivityManager.TETHER_ERROR_MASTER_ERROR);
break;
default :
retValue=false;
break;
}
return retValue;
}
