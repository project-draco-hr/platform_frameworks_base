{
  ServiceInfo si=service.serviceInfo;
  PackageManager pm=context.getPackageManager();
  XmlResourceParser parser=null;
  try {
    parser=si.loadXmlMetaData(pm,TvInputService.SERVICE_META_DATA);
    if (parser == null) {
      throw new XmlPullParserException("No " + TvInputService.SERVICE_META_DATA + " meta-data for "+ si.name);
    }
    Resources res=pm.getResourcesForApplication(si.applicationInfo);
    AttributeSet attrs=Xml.asAttributeSet(parser);
    int type;
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && type != XmlPullParser.START_TAG) {
    }
    String nodeName=parser.getName();
    if (!XML_START_TAG_NAME.equals(nodeName)) {
      throw new XmlPullParserException("Meta-data does not start with tv-input-service tag in " + si.name);
    }
    TvInputInfo input=new TvInputInfo(service,id,parentId,inputType);
    TypedArray sa=res.obtainAttributes(attrs,com.android.internal.R.styleable.TvInputService);
    input.mSetupActivity=sa.getString(com.android.internal.R.styleable.TvInputService_setupActivity);
    if (DEBUG) {
      Log.d(TAG,"Setup activity loaded. [" + input.mSetupActivity + "] for "+ si.name);
    }
    input.mSettingsActivity=sa.getString(com.android.internal.R.styleable.TvInputService_settingsActivity);
    if (DEBUG) {
      Log.d(TAG,"Settings activity loaded. [" + input.mSettingsActivity + "] for "+ si.name);
    }
    int contentRatingSystemXml=sa.getResourceId(com.android.internal.R.styleable.TvInputService_contentRatingSystemXml,-1);
    if (contentRatingSystemXml != -1) {
      input.mRatingSystemXmlUri=new Uri.Builder().scheme(ContentResolver.SCHEME_ANDROID_RESOURCE).authority(si.packageName).appendPath(Integer.toString(contentRatingSystemXml)).build();
      if (DEBUG) {
        Log.d(TAG,"Content rating xml loaded. [" + contentRatingSystemXml + "] for "+ si.name);
      }
    }
    sa.recycle();
    input.mLabel=label;
    input.mIconUri=iconUri;
    input.mIsConnectedToHdmiSwitch=isConnectedToHdmiSwitch;
    return input;
  }
 catch (  NameNotFoundException e) {
    throw new XmlPullParserException("Unable to create context for: " + si.packageName);
  }
 finally {
    if (parser != null) {
      parser.close();
    }
  }
}
