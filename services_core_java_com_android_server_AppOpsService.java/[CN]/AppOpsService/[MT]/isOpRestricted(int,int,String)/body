{
  int userHandle=UserHandle.getUserId(uid);
  final int restrictionSetCount=mOpUserRestrictions.size();
  for (int i=0; i < restrictionSetCount; i++) {
    SparseArray<Pair<boolean[],SparseArray<ArraySet<String>>>> perUserRestrictions=mOpUserRestrictions.valueAt(i);
    Pair<boolean[],SparseArray<ArraySet<String>>> restrictions=perUserRestrictions.get(userHandle);
    if (restrictions == null) {
      continue;
    }
    boolean[] opRestrictions=restrictions.first;
    SparseArray<ArraySet<String>> opExceptions=restrictions.second;
    if (opRestrictions == null) {
      continue;
    }
    if (opRestrictions[code]) {
      if (opExceptions != null && opExceptions.get(code) != null && opExceptions.get(code).contains(packageName)) {
        continue;
      }
      if (AppOpsManager.opAllowSystemBypassRestriction(code)) {
synchronized (this) {
          Ops ops=getOpsLocked(uid,packageName,true);
          if ((ops != null) && ops.isPrivileged) {
            return false;
          }
        }
      }
      return true;
    }
  }
  return false;
}
