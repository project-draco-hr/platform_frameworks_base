{
synchronized (this) {
    Ops ops=getOpsRawLocked(uid,packageName,true);
    if (ops == null) {
      if (DEBUG)       Log.d(TAG,"noteOperation: no op for code " + code + " uid "+ uid+ " package "+ packageName);
      return AppOpsManager.MODE_ERRORED;
    }
    Op op=getOpLocked(ops,code,true);
    if (isOpRestricted(uid,code,packageName)) {
      return AppOpsManager.MODE_IGNORED;
    }
    if (op.duration == -1) {
      Slog.w(TAG,"Noting op not finished: uid " + uid + " pkg "+ packageName+ " code "+ code+ " time="+ op.time+ " duration="+ op.duration);
    }
    op.duration=0;
    final int switchCode=AppOpsManager.opToSwitch(code);
    UidState uidState=ops.uidState;
    if (uidState.opModes != null) {
      final int uidMode=uidState.opModes.get(switchCode);
      if (uidMode != AppOpsManager.MODE_ALLOWED) {
        if (DEBUG)         Log.d(TAG,"noteOperation: reject #" + op.mode + " for code "+ switchCode+ " ("+ code+ ") uid "+ uid+ " package "+ packageName);
        op.rejectTime=System.currentTimeMillis();
        return uidMode;
      }
    }
    final Op switchOp=switchCode != code ? getOpLocked(ops,switchCode,true) : op;
    if (switchOp.mode != AppOpsManager.MODE_ALLOWED) {
      if (DEBUG)       Log.d(TAG,"noteOperation: reject #" + op.mode + " for code "+ switchCode+ " ("+ code+ ") uid "+ uid+ " package "+ packageName);
      op.rejectTime=System.currentTimeMillis();
      return switchOp.mode;
    }
    if (DEBUG)     Log.d(TAG,"noteOperation: allowing code " + code + " uid "+ uid+ " package "+ packageName);
    op.time=System.currentTimeMillis();
    op.rejectTime=0;
    op.proxyUid=proxyUid;
    op.proxyPackageName=proxyPackageName;
    return AppOpsManager.MODE_ALLOWED;
  }
}
