{
synchronized (mFile) {
    List<AppOpsManager.PackageOps> allOps=getPackagesForOps(null);
    FileOutputStream stream;
    try {
      stream=mFile.startWrite();
    }
 catch (    IOException e) {
      Slog.w(TAG,"Failed to write state: " + e);
      return;
    }
    try {
      XmlSerializer out=new FastXmlSerializer();
      out.setOutput(stream,StandardCharsets.UTF_8.name());
      out.startDocument(null,true);
      out.startTag(null,"app-ops");
      final int uidStateCount=mUidStates.size();
      for (int i=0; i < uidStateCount; i++) {
        UidState uidState=mUidStates.valueAt(i);
        if (uidState.opModes != null && uidState.opModes.size() > 0) {
          out.startTag(null,"uid");
          out.attribute(null,"n",Integer.toString(uidState.uid));
          SparseIntArray uidOpModes=uidState.opModes;
          final int opCount=uidOpModes.size();
          for (int j=0; j < opCount; j++) {
            final int op=uidOpModes.keyAt(j);
            final int mode=uidOpModes.valueAt(j);
            out.startTag(null,"op");
            out.attribute(null,"n",Integer.toString(op));
            out.attribute(null,"m",Integer.toString(mode));
            out.endTag(null,"op");
          }
          out.endTag(null,"uid");
        }
      }
      if (allOps != null) {
        String lastPkg=null;
        for (int i=0; i < allOps.size(); i++) {
          AppOpsManager.PackageOps pkg=allOps.get(i);
          if (!pkg.getPackageName().equals(lastPkg)) {
            if (lastPkg != null) {
              out.endTag(null,"pkg");
            }
            lastPkg=pkg.getPackageName();
            out.startTag(null,"pkg");
            out.attribute(null,"n",lastPkg);
          }
          out.startTag(null,"uid");
          out.attribute(null,"n",Integer.toString(pkg.getUid()));
synchronized (this) {
            Ops ops=getOpsRawLocked(pkg.getUid(),pkg.getPackageName(),false);
            if (ops != null) {
              out.attribute(null,"p",Boolean.toString(ops.isPrivileged));
            }
 else {
              out.attribute(null,"p",Boolean.toString(false));
            }
          }
          List<AppOpsManager.OpEntry> ops=pkg.getOps();
          for (int j=0; j < ops.size(); j++) {
            AppOpsManager.OpEntry op=ops.get(j);
            out.startTag(null,"op");
            out.attribute(null,"n",Integer.toString(op.getOp()));
            if (op.getMode() != AppOpsManager.opToDefaultMode(op.getOp())) {
              out.attribute(null,"m",Integer.toString(op.getMode()));
            }
            long time=op.getTime();
            if (time != 0) {
              out.attribute(null,"t",Long.toString(time));
            }
            time=op.getRejectTime();
            if (time != 0) {
              out.attribute(null,"r",Long.toString(time));
            }
            int dur=op.getDuration();
            if (dur != 0) {
              out.attribute(null,"d",Integer.toString(dur));
            }
            int proxyUid=op.getProxyUid();
            if (proxyUid != -1) {
              out.attribute(null,"pu",Integer.toString(proxyUid));
            }
            String proxyPackageName=op.getProxyPackageName();
            if (proxyPackageName != null) {
              out.attribute(null,"pp",proxyPackageName);
            }
            out.endTag(null,"op");
          }
          out.endTag(null,"uid");
        }
        if (lastPkg != null) {
          out.endTag(null,"pkg");
        }
      }
      out.endTag(null,"app-ops");
      out.endDocument();
      mFile.finishWrite(stream);
    }
 catch (    IOException e) {
      Slog.w(TAG,"Failed to write state, restoring backup.",e);
      mFile.failWrite(stream);
    }
  }
}
