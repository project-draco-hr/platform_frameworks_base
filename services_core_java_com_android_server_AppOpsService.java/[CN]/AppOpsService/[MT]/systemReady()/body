{
synchronized (this) {
    boolean changed=false;
    for (int i=0; i < mUidOps.size(); i++) {
      HashMap<String,Ops> pkgs=mUidOps.valueAt(i);
      Iterator<Ops> it=pkgs.values().iterator();
      while (it.hasNext()) {
        Ops ops=it.next();
        int curUid;
        try {
          curUid=mContext.getPackageManager().getPackageUid(ops.packageName,UserHandle.getUserId(ops.uid));
        }
 catch (        NameNotFoundException e) {
          curUid=-1;
        }
        if (curUid != ops.uid) {
          Slog.i(TAG,"Pruning old package " + ops.packageName + "/"+ ops.uid+ ": new uid="+ curUid);
          it.remove();
          changed=true;
        }
      }
      if (pkgs.size() <= 0) {
        mUidOps.removeAt(i);
      }
    }
    if (changed) {
      scheduleFastWriteLocked();
    }
  }
  MountServiceInternal mountServiceInternal=LocalServices.getService(MountServiceInternal.class);
  mountServiceInternal.addExternalStoragePolicy(new MountServiceInternal.ExternalStorageMountPolicy(){
    @Override public int getMountMode(    int uid,    String packageName){
      if (Process.isIsolated(uid)) {
        return Zygote.MOUNT_EXTERNAL_NONE;
      }
      if (noteOperation(AppOpsManager.OP_READ_EXTERNAL_STORAGE,uid,packageName) != AppOpsManager.MODE_ALLOWED) {
        return Zygote.MOUNT_EXTERNAL_NONE;
      }
      if (noteOperation(AppOpsManager.OP_WRITE_EXTERNAL_STORAGE,uid,packageName) != AppOpsManager.MODE_ALLOWED) {
        return Zygote.MOUNT_EXTERNAL_READ;
      }
      return Zygote.MOUNT_EXTERNAL_WRITE;
    }
    @Override public boolean hasExternalStorage(    int uid,    String packageName){
      final int mountMode=getMountMode(uid,packageName);
      return mountMode == Zygote.MOUNT_EXTERNAL_READ || mountMode == Zygote.MOUNT_EXTERNAL_WRITE;
    }
  }
);
}
