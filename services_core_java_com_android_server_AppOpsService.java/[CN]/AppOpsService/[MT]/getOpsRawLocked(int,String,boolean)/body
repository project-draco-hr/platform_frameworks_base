{
  UidState uidState=getUidStateLocked(uid,edit);
  if (uidState == null) {
    return null;
  }
  if (uidState.pkgOps == null) {
    if (!edit) {
      return null;
    }
    uidState.pkgOps=new ArrayMap<>();
  }
  Ops ops=uidState.pkgOps.get(packageName);
  if (ops == null) {
    if (!edit) {
      return null;
    }
    boolean isPrivileged=false;
    if (uid != 0) {
      final long ident=Binder.clearCallingIdentity();
      try {
        int pkgUid=-1;
        try {
          ApplicationInfo appInfo=ActivityThread.getPackageManager().getApplicationInfo(packageName,0,UserHandle.getUserId(uid));
          if (appInfo != null) {
            pkgUid=appInfo.uid;
            isPrivileged=(appInfo.privateFlags & ApplicationInfo.PRIVATE_FLAG_PRIVILEGED) != 0;
          }
 else {
            if ("media".equals(packageName)) {
              pkgUid=Process.MEDIA_UID;
              isPrivileged=false;
            }
 else             if ("audioserver".equals(packageName)) {
              pkgUid=Process.AUDIOSERVER_UID;
              isPrivileged=false;
            }
          }
        }
 catch (        RemoteException e) {
          Slog.w(TAG,"Could not contact PackageManager",e);
        }
        if (pkgUid != uid) {
          RuntimeException ex=new RuntimeException("here");
          ex.fillInStackTrace();
          Slog.w(TAG,"Bad call: specified package " + packageName + " under uid "+ uid+ " but it is really "+ pkgUid,ex);
          return null;
        }
      }
  finally {
        Binder.restoreCallingIdentity(ident);
      }
    }
    ops=new Ops(packageName,uidState,isPrivileged);
    uidState.pkgOps.put(packageName,ops);
  }
  return ops;
}
