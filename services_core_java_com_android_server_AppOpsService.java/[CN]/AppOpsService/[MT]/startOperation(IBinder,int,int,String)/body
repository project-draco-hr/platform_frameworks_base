{
  verifyIncomingUid(uid);
  verifyIncomingOp(code);
  ClientState client=(ClientState)token;
synchronized (this) {
    Ops ops=getOpsLocked(uid,packageName,true);
    if (ops == null) {
      if (DEBUG)       Log.d(TAG,"startOperation: no op for code " + code + " uid "+ uid+ " package "+ packageName);
      return AppOpsManager.MODE_ERRORED;
    }
    Op op=getOpLocked(ops,code,true);
    final int switchCode=AppOpsManager.opToSwitch(code);
    final Op switchOp=switchCode != code ? getOpLocked(ops,switchCode,true) : op;
    if (switchOp.mode != AppOpsManager.MODE_ALLOWED) {
      if (DEBUG)       Log.d(TAG,"startOperation: reject #" + op.mode + " for code "+ switchCode+ " ("+ code+ ") uid "+ uid+ " package "+ packageName);
      op.rejectTime=System.currentTimeMillis();
      return switchOp.mode;
    }
    if (DEBUG)     Log.d(TAG,"startOperation: allowing code " + code + " uid "+ uid+ " package "+ packageName);
    if (op.nesting == 0) {
      op.time=System.currentTimeMillis();
      op.rejectTime=0;
      op.duration=-1;
    }
    op.nesting++;
    if (client.mStartedOps != null) {
      client.mStartedOps.add(op);
    }
    return AppOpsManager.MODE_ALLOWED;
  }
}
