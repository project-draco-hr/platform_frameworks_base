{
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println("Permission Denial: can't dump ApOps service from from pid=" + Binder.getCallingPid() + ", uid="+ Binder.getCallingUid());
    return;
  }
synchronized (this) {
    pw.println("Current AppOps Service state:");
    final long now=System.currentTimeMillis();
    boolean needSep=false;
    if (mOpModeWatchers.size() > 0) {
      needSep=true;
      pw.println("  Op mode watchers:");
      for (int i=0; i < mOpModeWatchers.size(); i++) {
        pw.print("    Op ");
        pw.print(AppOpsManager.opToName(mOpModeWatchers.keyAt(i)));
        pw.println(":");
        ArrayList<Callback> callbacks=mOpModeWatchers.valueAt(i);
        for (int j=0; j < callbacks.size(); j++) {
          pw.print("      #");
          pw.print(j);
          pw.print(": ");
          pw.println(callbacks.get(j));
        }
      }
    }
    if (mPackageModeWatchers.size() > 0) {
      needSep=true;
      pw.println("  Package mode watchers:");
      for (int i=0; i < mPackageModeWatchers.size(); i++) {
        pw.print("    Pkg ");
        pw.print(mPackageModeWatchers.keyAt(i));
        pw.println(":");
        ArrayList<Callback> callbacks=mPackageModeWatchers.valueAt(i);
        for (int j=0; j < callbacks.size(); j++) {
          pw.print("      #");
          pw.print(j);
          pw.print(": ");
          pw.println(callbacks.get(j));
        }
      }
    }
    if (mModeWatchers.size() > 0) {
      needSep=true;
      pw.println("  All mode watchers:");
      for (int i=0; i < mModeWatchers.size(); i++) {
        pw.print("    ");
        pw.print(mModeWatchers.keyAt(i));
        pw.print(" -> ");
        pw.println(mModeWatchers.valueAt(i));
      }
    }
    if (mClients.size() > 0) {
      needSep=true;
      pw.println("  Clients:");
      for (int i=0; i < mClients.size(); i++) {
        pw.print("    ");
        pw.print(mClients.keyAt(i));
        pw.println(":");
        ClientState cs=mClients.valueAt(i);
        pw.print("      ");
        pw.println(cs);
        if (cs.mStartedOps != null && cs.mStartedOps.size() > 0) {
          pw.println("      Started ops:");
          for (int j=0; j < cs.mStartedOps.size(); j++) {
            Op op=cs.mStartedOps.get(j);
            pw.print("        ");
            pw.print("uid=");
            pw.print(op.uid);
            pw.print(" pkg=");
            pw.print(op.packageName);
            pw.print(" op=");
            pw.println(AppOpsManager.opToName(op.op));
          }
        }
      }
    }
    if (mAudioRestrictions.size() > 0) {
      boolean printedHeader=false;
      for (int o=0; o < mAudioRestrictions.size(); o++) {
        final String op=AppOpsManager.opToName(mAudioRestrictions.keyAt(o));
        final SparseArray<Restriction> restrictions=mAudioRestrictions.valueAt(o);
        for (int i=0; i < restrictions.size(); i++) {
          if (!printedHeader) {
            pw.println("  Audio Restrictions:");
            printedHeader=true;
            needSep=true;
          }
          final int usage=restrictions.keyAt(i);
          pw.print("    ");
          pw.print(op);
          pw.print(" usage=");
          pw.print(AudioAttributes.usageToString(usage));
          Restriction r=restrictions.valueAt(i);
          pw.print(": mode=");
          pw.println(r.mode);
          if (!r.exceptionPackages.isEmpty()) {
            pw.println("      Exceptions:");
            for (int j=0; j < r.exceptionPackages.size(); j++) {
              pw.print("        ");
              pw.println(r.exceptionPackages.valueAt(j));
            }
          }
        }
      }
    }
    if (needSep) {
      pw.println();
    }
    for (int i=0; i < mUidOps.size(); i++) {
      pw.print("  Uid ");
      UserHandle.formatUid(pw,mUidOps.keyAt(i));
      pw.println(":");
      HashMap<String,Ops> pkgOps=mUidOps.valueAt(i);
      for (      Ops ops : pkgOps.values()) {
        pw.print("    Package ");
        pw.print(ops.packageName);
        pw.println(":");
        for (int j=0; j < ops.size(); j++) {
          Op op=ops.valueAt(j);
          pw.print("      ");
          pw.print(AppOpsManager.opToName(op.op));
          pw.print(": mode=");
          pw.print(op.mode);
          if (op.time != 0) {
            pw.print("; time=");
            TimeUtils.formatDuration(now - op.time,pw);
            pw.print(" ago");
          }
          if (op.rejectTime != 0) {
            pw.print("; rejectTime=");
            TimeUtils.formatDuration(now - op.rejectTime,pw);
            pw.print(" ago");
          }
          if (op.duration == -1) {
            pw.print(" (running)");
          }
 else           if (op.duration != 0) {
            pw.print("; duration=");
            TimeUtils.formatDuration(op.duration,pw);
          }
          pw.println();
        }
      }
    }
  }
}
