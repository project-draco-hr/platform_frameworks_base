{
  final boolean[] opRestrictions=getOrCreateUserRestrictionsForToken(token,userHandle);
  if (restricted) {
    final SparseArray<ArraySet<String>> opExceptions=getUserPackageExemptionsForToken(token,userHandle);
    ArraySet<String> exceptions=opExceptions.get(code);
    if (exceptionPackages != null && exceptionPackages.length > 0) {
      if (exceptions == null) {
        exceptions=new ArraySet<>(exceptionPackages.length);
        opExceptions.put(code,exceptions);
      }
 else {
        exceptions.clear();
      }
      for (      String p : exceptionPackages) {
        exceptions.add(p);
      }
    }
 else {
      opExceptions.remove(code);
    }
  }
  if (opRestrictions[code] == restricted) {
    return;
  }
  opRestrictions[code]=restricted;
  if (!restricted) {
    pruneUserRestrictionsForToken(token,userHandle);
  }
  notifyWatchersOfChange(code);
}
