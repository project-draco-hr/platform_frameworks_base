{
  final int callingPid=Binder.getCallingPid();
  final int callingUid=Binder.getCallingUid();
  mContext.enforcePermission(android.Manifest.permission.UPDATE_APP_OPS_STATS,callingPid,callingUid,null);
  reqUserId=ActivityManager.handleIncomingUser(callingPid,callingUid,reqUserId,true,true,"resetAllModes",null);
  int reqUid=-1;
  if (reqPackageName != null) {
    try {
      reqUid=AppGlobals.getPackageManager().getPackageUid(reqPackageName,PackageManager.MATCH_UNINSTALLED_PACKAGES,reqUserId);
    }
 catch (    RemoteException e) {
    }
  }
  HashMap<Callback,ArrayList<ChangeRec>> callbacks=null;
synchronized (this) {
    boolean changed=false;
    for (int i=mUidStates.size() - 1; i >= 0; i--) {
      UidState uidState=mUidStates.valueAt(i);
      SparseIntArray opModes=uidState.opModes;
      if (opModes != null && (uidState.uid == reqUid || reqUid == -1)) {
        final int uidOpCount=opModes.size();
        for (int j=uidOpCount - 1; j >= 0; j--) {
          final int code=opModes.keyAt(j);
          if (AppOpsManager.opAllowsReset(code)) {
            opModes.removeAt(j);
            if (opModes.size() <= 0) {
              uidState.opModes=null;
            }
            for (            String packageName : getPackagesForUid(uidState.uid)) {
              callbacks=addCallbacks(callbacks,code,uidState.uid,packageName,mOpModeWatchers.get(code));
              callbacks=addCallbacks(callbacks,code,uidState.uid,packageName,mPackageModeWatchers.get(packageName));
            }
          }
        }
      }
      if (uidState.pkgOps == null) {
        continue;
      }
      if (reqUserId != UserHandle.USER_ALL && reqUserId != UserHandle.getUserId(uidState.uid)) {
        continue;
      }
      Map<String,Ops> packages=uidState.pkgOps;
      Iterator<Map.Entry<String,Ops>> it=packages.entrySet().iterator();
      while (it.hasNext()) {
        Map.Entry<String,Ops> ent=it.next();
        String packageName=ent.getKey();
        if (reqPackageName != null && !reqPackageName.equals(packageName)) {
          continue;
        }
        Ops pkgOps=ent.getValue();
        for (int j=pkgOps.size() - 1; j >= 0; j--) {
          Op curOp=pkgOps.valueAt(j);
          if (AppOpsManager.opAllowsReset(curOp.op) && curOp.mode != AppOpsManager.opToDefaultMode(curOp.op)) {
            curOp.mode=AppOpsManager.opToDefaultMode(curOp.op);
            changed=true;
            callbacks=addCallbacks(callbacks,curOp.op,curOp.uid,packageName,mOpModeWatchers.get(curOp.op));
            callbacks=addCallbacks(callbacks,curOp.op,curOp.uid,packageName,mPackageModeWatchers.get(packageName));
            if (curOp.time == 0 && curOp.rejectTime == 0) {
              pkgOps.removeAt(j);
            }
          }
        }
        if (pkgOps.size() == 0) {
          it.remove();
        }
      }
      if (uidState.isDefault()) {
        mUidStates.remove(uidState.uid);
      }
    }
    if (changed) {
      scheduleFastWriteLocked();
    }
  }
  if (callbacks != null) {
    for (    Map.Entry<Callback,ArrayList<ChangeRec>> ent : callbacks.entrySet()) {
      Callback cb=ent.getKey();
      ArrayList<ChangeRec> reports=ent.getValue();
      for (int i=0; i < reports.size(); i++) {
        ChangeRec rep=reports.get(i);
        try {
          cb.mCallback.opChanged(rep.op,rep.uid,rep.pkg);
        }
 catch (        RemoteException e) {
        }
      }
    }
  }
}
