{
  if (mCommand >= Const.CODE_C0_SKIP2_RANGE_START && mCommand <= Const.CODE_C0_SKIP2_RANGE_END) {
    if (mCommand == Const.CODE_C0_P16) {
      try {
        if (data[pos] == 0) {
          mBuffer.append((char)data[pos + 1]);
        }
 else {
          String value=new String(Arrays.copyOfRange(data,pos,pos + 2),"EUC-KR");
          mBuffer.append(value);
        }
      }
 catch (      UnsupportedEncodingException e) {
        Log.e(TAG,"P16 Code - Could not find supported encoding",e);
      }
    }
    pos+=2;
  }
 else   if (mCommand >= Const.CODE_C0_SKIP1_RANGE_START && mCommand <= Const.CODE_C0_SKIP1_RANGE_END) {
    ++pos;
  }
 else {
switch (mCommand) {
case Const.CODE_C0_NUL:
      break;
case Const.CODE_C0_ETX:
    emitCaptionEvent(new CaptionEvent(CAPTION_EMIT_TYPE_CONTROL,(char)mCommand));
  break;
case Const.CODE_C0_BS:
emitCaptionEvent(new CaptionEvent(CAPTION_EMIT_TYPE_CONTROL,(char)mCommand));
break;
case Const.CODE_C0_FF:
emitCaptionEvent(new CaptionEvent(CAPTION_EMIT_TYPE_CONTROL,(char)mCommand));
break;
case Const.CODE_C0_CR:
mBuffer.append('\n');
break;
case Const.CODE_C0_HCR:
emitCaptionEvent(new CaptionEvent(CAPTION_EMIT_TYPE_CONTROL,(char)mCommand));
break;
default :
break;
}
}
return pos;
}
