{
switch (mCommand) {
case Const.CODE_C1_CW0:
case Const.CODE_C1_CW1:
case Const.CODE_C1_CW2:
case Const.CODE_C1_CW3:
case Const.CODE_C1_CW4:
case Const.CODE_C1_CW5:
case Const.CODE_C1_CW6:
case Const.CODE_C1_CW7:
{
      int windowId=mCommand - Const.CODE_C1_CW0;
      emitCaptionEvent(new CaptionEvent(CAPTION_EMIT_TYPE_COMMAND_CWX,windowId));
      if (DEBUG) {
        Log.d(TAG,String.format("CaptionCommand CWX windowId: %d",windowId));
      }
      break;
    }
case Const.CODE_C1_CLW:
{
    int windowBitmap=data[pos] & 0xff;
    ++pos;
    emitCaptionEvent(new CaptionEvent(CAPTION_EMIT_TYPE_COMMAND_CLW,windowBitmap));
    if (DEBUG) {
      Log.d(TAG,String.format("CaptionCommand CLW windowBitmap: %d",windowBitmap));
    }
    break;
  }
case Const.CODE_C1_DSW:
{
  int windowBitmap=data[pos] & 0xff;
  ++pos;
  emitCaptionEvent(new CaptionEvent(CAPTION_EMIT_TYPE_COMMAND_DSW,windowBitmap));
  if (DEBUG) {
    Log.d(TAG,String.format("CaptionCommand DSW windowBitmap: %d",windowBitmap));
  }
  break;
}
case Const.CODE_C1_HDW:
{
int windowBitmap=data[pos] & 0xff;
++pos;
emitCaptionEvent(new CaptionEvent(CAPTION_EMIT_TYPE_COMMAND_HDW,windowBitmap));
if (DEBUG) {
  Log.d(TAG,String.format("CaptionCommand HDW windowBitmap: %d",windowBitmap));
}
break;
}
case Const.CODE_C1_TGW:
{
int windowBitmap=data[pos] & 0xff;
++pos;
emitCaptionEvent(new CaptionEvent(CAPTION_EMIT_TYPE_COMMAND_TGW,windowBitmap));
if (DEBUG) {
Log.d(TAG,String.format("CaptionCommand TGW windowBitmap: %d",windowBitmap));
}
break;
}
case Const.CODE_C1_DLW:
{
int windowBitmap=data[pos] & 0xff;
++pos;
emitCaptionEvent(new CaptionEvent(CAPTION_EMIT_TYPE_COMMAND_DLW,windowBitmap));
if (DEBUG) {
Log.d(TAG,String.format("CaptionCommand DLW windowBitmap: %d",windowBitmap));
}
break;
}
case Const.CODE_C1_DLY:
{
int tenthsOfSeconds=data[pos] & 0xff;
++pos;
emitCaptionEvent(new CaptionEvent(CAPTION_EMIT_TYPE_COMMAND_DLY,tenthsOfSeconds));
if (DEBUG) {
Log.d(TAG,String.format("CaptionCommand DLY %d tenths of seconds",tenthsOfSeconds));
}
break;
}
case Const.CODE_C1_DLC:
{
emitCaptionEvent(new CaptionEvent(CAPTION_EMIT_TYPE_COMMAND_DLC,null));
if (DEBUG) {
Log.d(TAG,"CaptionCommand DLC");
}
break;
}
case Const.CODE_C1_RST:
{
emitCaptionEvent(new CaptionEvent(CAPTION_EMIT_TYPE_COMMAND_RST,null));
if (DEBUG) {
Log.d(TAG,"CaptionCommand RST");
}
break;
}
case Const.CODE_C1_SPA:
{
int textTag=(data[pos] & 0xf0) >> 4;
int penSize=data[pos] & 0x03;
int penOffset=(data[pos] & 0x0c) >> 2;
boolean italic=(data[pos + 1] & 0x80) != 0;
boolean underline=(data[pos + 1] & 0x40) != 0;
int edgeType=(data[pos + 1] & 0x38) >> 3;
int fontTag=data[pos + 1] & 0x7;
pos+=2;
emitCaptionEvent(new CaptionEvent(CAPTION_EMIT_TYPE_COMMAND_SPA,new CaptionPenAttr(penSize,penOffset,textTag,fontTag,edgeType,underline,italic)));
if (DEBUG) {
Log.d(TAG,String.format("CaptionCommand SPA penSize: %d, penOffset: %d, textTag: %d, " + "fontTag: %d, edgeType: %d, underline: %s, italic: %s",penSize,penOffset,textTag,fontTag,edgeType,underline,italic));
}
break;
}
case Const.CODE_C1_SPC:
{
int opacity=(data[pos] & 0xc0) >> 6;
int red=(data[pos] & 0x30) >> 4;
int green=(data[pos] & 0x0c) >> 2;
int blue=data[pos] & 0x03;
CaptionColor foregroundColor=new CaptionColor(opacity,red,green,blue);
++pos;
opacity=(data[pos] & 0xc0) >> 6;
red=(data[pos] & 0x30) >> 4;
green=(data[pos] & 0x0c) >> 2;
blue=data[pos] & 0x03;
CaptionColor backgroundColor=new CaptionColor(opacity,red,green,blue);
++pos;
red=(data[pos] & 0x30) >> 4;
green=(data[pos] & 0x0c) >> 2;
blue=data[pos] & 0x03;
CaptionColor edgeColor=new CaptionColor(CaptionColor.OPACITY_SOLID,red,green,blue);
++pos;
emitCaptionEvent(new CaptionEvent(CAPTION_EMIT_TYPE_COMMAND_SPC,new CaptionPenColor(foregroundColor,backgroundColor,edgeColor)));
if (DEBUG) {
Log.d(TAG,String.format("CaptionCommand SPC foregroundColor %s backgroundColor %s edgeColor %s",foregroundColor,backgroundColor,edgeColor));
}
break;
}
case Const.CODE_C1_SPL:
{
int row=data[pos] & 0x0f;
int column=data[pos + 1] & 0x3f;
pos+=2;
emitCaptionEvent(new CaptionEvent(CAPTION_EMIT_TYPE_COMMAND_SPL,new CaptionPenLocation(row,column)));
if (DEBUG) {
Log.d(TAG,String.format("CaptionCommand SPL row: %d, column: %d",row,column));
}
break;
}
case Const.CODE_C1_SWA:
{
int opacity=(data[pos] & 0xc0) >> 6;
int red=(data[pos] & 0x30) >> 4;
int green=(data[pos] & 0x0c) >> 2;
int blue=data[pos] & 0x03;
CaptionColor fillColor=new CaptionColor(opacity,red,green,blue);
int borderType=(data[pos + 1] & 0xc0) >> 6 | (data[pos + 2] & 0x80) >> 5;
red=(data[pos + 1] & 0x30) >> 4;
green=(data[pos + 1] & 0x0c) >> 2;
blue=data[pos + 1] & 0x03;
CaptionColor borderColor=new CaptionColor(CaptionColor.OPACITY_SOLID,red,green,blue);
boolean wordWrap=(data[pos + 2] & 0x40) != 0;
int printDirection=(data[pos + 2] & 0x30) >> 4;
int scrollDirection=(data[pos + 2] & 0x0c) >> 2;
int justify=(data[pos + 2] & 0x03);
int effectSpeed=(data[pos + 3] & 0xf0) >> 4;
int effectDirection=(data[pos + 3] & 0x0c) >> 2;
int displayEffect=data[pos + 3] & 0x3;
pos+=4;
emitCaptionEvent(new CaptionEvent(CAPTION_EMIT_TYPE_COMMAND_SWA,new CaptionWindowAttr(fillColor,borderColor,borderType,wordWrap,printDirection,scrollDirection,justify,effectDirection,effectSpeed,displayEffect)));
if (DEBUG) {
Log.d(TAG,String.format("CaptionCommand SWA fillColor: %s, borderColor: %s, borderType: %d" + "wordWrap: %s, printDirection: %d, scrollDirection: %d, " + "justify: %s, effectDirection: %d, effectSpeed: %d, "+ "displayEffect: %d",fillColor,borderColor,borderType,wordWrap,printDirection,scrollDirection,justify,effectDirection,effectSpeed,displayEffect));
}
break;
}
case Const.CODE_C1_DF0:
case Const.CODE_C1_DF1:
case Const.CODE_C1_DF2:
case Const.CODE_C1_DF3:
case Const.CODE_C1_DF4:
case Const.CODE_C1_DF5:
case Const.CODE_C1_DF6:
case Const.CODE_C1_DF7:
{
int windowId=mCommand - Const.CODE_C1_DF0;
boolean visible=(data[pos] & 0x20) != 0;
boolean rowLock=(data[pos] & 0x10) != 0;
boolean columnLock=(data[pos] & 0x08) != 0;
int priority=data[pos] & 0x07;
boolean relativePositioning=(data[pos + 1] & 0x80) != 0;
int anchorVertical=data[pos + 1] & 0x7f;
int anchorHorizontal=data[pos + 2] & 0xff;
int anchorId=(data[pos + 3] & 0xf0) >> 4;
int rowCount=data[pos + 3] & 0x0f;
int columnCount=data[pos + 4] & 0x3f;
int windowStyle=(data[pos + 5] & 0x38) >> 3;
int penStyle=data[pos + 5] & 0x07;
pos+=6;
emitCaptionEvent(new CaptionEvent(CAPTION_EMIT_TYPE_COMMAND_DFX,new CaptionWindow(windowId,visible,rowLock,columnLock,priority,relativePositioning,anchorVertical,anchorHorizontal,anchorId,rowCount,columnCount,penStyle,windowStyle)));
if (DEBUG) {
Log.d(TAG,String.format("CaptionCommand DFx windowId: %d, priority: %d, columnLock: %s, " + "rowLock: %s, visible: %s, anchorVertical: %d, " + "relativePositioning: %s, anchorHorizontal: %d, "+ "rowCount: %d, anchorId: %d, columnCount: %d, penStyle: %d, "+ "windowStyle: %d",windowId,priority,columnLock,rowLock,visible,anchorVertical,relativePositioning,anchorHorizontal,rowCount,anchorId,columnCount,penStyle,windowStyle));
}
break;
}
default :
break;
}
return pos;
}
