{
  ICreateInfo ci=new ICreateInfo(){
    @Override public Class<?>[] getInjectedClasses(){
      return new Class<?>[0];
    }
    @Override public String[] getDelegateMethods(){
      return new String[0];
    }
    @Override public String[] getDelegateClassNatives(){
      return new String[0];
    }
    @Override public String[] getOverriddenMethods(){
      return new String[0];
    }
    @Override public String[] getRenamedClasses(){
      return new String[0];
    }
    @Override public String[] getJavaPkgClasses(){
      return new String[0];
    }
    @Override public Set<String> getExcludedClasses(){
      Set<String> set=new HashSet<String>(2);
      set.add("mock_android.dummy.InnerTest");
      set.add("java.lang.JavaClass");
      return set;
    }
    @Override public String[] getDeleteReturns(){
      return new String[0];
    }
    @Override public String[] getPromotedFields(){
      return new String[0];
    }
    @Override public Map<String,InjectMethodRunnable> getInjectedMethodsMap(){
      return new HashMap<String,InjectMethodRunnable>(0);
    }
  }
;
  AsmGenerator agen=new AsmGenerator(mLog,mOsDestJar,ci);
  Set<String> excludedClasses=ci.getExcludedClasses();
  AsmAnalyzer aa=new AsmAnalyzer(mLog,mOsJarPath,agen,null,new String[]{"**"},excludedClasses,new String[]{"mock_android/data/data*"});
  aa.analyze();
  agen.generate();
  Map<String,ClassReader> output=new TreeMap<String,ClassReader>();
  Map<String,InputStream> filesFound=new TreeMap<String,InputStream>();
  parseZip(mOsDestJar,output,filesFound);
  for (  String s : output.keySet()) {
    assertFalse(excludedClasses.contains(s));
  }
  assertArrayEquals(new String[]{"mock_android/data/dataFile"},filesFound.keySet().toArray());
}
