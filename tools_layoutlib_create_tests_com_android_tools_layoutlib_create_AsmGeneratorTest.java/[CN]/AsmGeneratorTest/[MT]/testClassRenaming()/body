{
  ICreateInfo ci=new ICreateInfo(){
    @Override public Class<?>[] getInjectedClasses(){
      return new Class<?>[0];
    }
    @Override public String[] getDelegateMethods(){
      return new String[0];
    }
    @Override public String[] getDelegateClassNatives(){
      return new String[0];
    }
    @Override public String[] getOverriddenMethods(){
      return new String[0];
    }
    @Override public String[] getRenamedClasses(){
      return new String[]{"mock_android.view.View","mock_android.view._Original_View","not.an.actual.ClassName","anoter.fake.NewClassName"};
    }
    @Override public String[] getJavaPkgClasses(){
      return new String[0];
    }
    @Override public String[] getDeleteReturns(){
      return new String[0];
    }
  }
;
  AsmGenerator agen=new AsmGenerator(mLog,mOsDestJar,ci);
  AsmAnalyzer aa=new AsmAnalyzer(mLog,mOsJarPath,agen,null,new String[]{"**"},new HashSet<String>(0));
  aa.analyze();
  agen.generate();
  Set<String> notRenamed=agen.getClassesNotRenamed();
  assertArrayEquals(new String[]{"not/an/actual/ClassName"},notRenamed.toArray());
}
