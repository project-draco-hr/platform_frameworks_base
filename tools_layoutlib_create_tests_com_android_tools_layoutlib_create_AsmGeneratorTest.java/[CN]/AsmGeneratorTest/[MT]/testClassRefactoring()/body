{
  ICreateInfo ci=new ICreateInfo(){
    @Override public Class<?>[] getInjectedClasses(){
      return new Class<?>[]{com.android.tools.layoutlib.create.dataclass.JavaClass.class};
    }
    @Override public String[] getDelegateMethods(){
      return new String[0];
    }
    @Override public String[] getDelegateClassNatives(){
      return new String[0];
    }
    @Override public String[] getOverriddenMethods(){
      return new String[0];
    }
    @Override public String[] getRenamedClasses(){
      return new String[0];
    }
    @Override public String[] getJavaPkgClasses(){
      return new String[]{"java.lang.JavaClass","com.android.tools.layoutlib.create.dataclass.JavaClass"};
    }
    @Override public Set<String> getExcludedClasses(){
      return Collections.singleton("java.lang.JavaClass");
    }
    @Override public String[] getDeleteReturns(){
      return new String[0];
    }
  }
;
  AsmGenerator agen=new AsmGenerator(mLog,mOsDestJar,ci);
  AsmAnalyzer aa=new AsmAnalyzer(mLog,mOsJarPath,agen,null,new String[]{"**"},new HashSet<String>(1),new String[]{"mock_android/data/data*"});
  aa.analyze();
  agen.generate();
  Map<String,ClassReader> output=new TreeMap<String,ClassReader>();
  Map<String,InputStream> filesFound=new TreeMap<String,InputStream>();
  parseZip(mOsDestJar,output,filesFound);
  boolean injectedClassFound=false;
  for (  ClassReader cr : output.values()) {
    TestClassVisitor cv=new TestClassVisitor();
    cr.accept(cv,0);
    injectedClassFound|=cv.mInjectedClassFound;
  }
  assertTrue(injectedClassFound);
  assertArrayEquals(new String[]{"mock_android/data/dataFile"},filesFound.keySet().toArray());
}
