{
  Slog.v(TAG,"handleNotify(type=" + type + ", arg1="+ arg1+ ", arg2="+ arg2+ ")"+ ", "+ mClients.size()+ " clients");
  for (int i=0; i < mClients.size(); i++) {
    if (DEBUG)     Slog.v(TAG,"Client[" + i + "] binder token: "+ mClients.keyAt(i));
    ClientData clientData=mClients.valueAt(i);
    if (clientData == null || clientData.receiver == null) {
      if (DEBUG)       Slog.v(TAG,"clientData is invalid!!");
      continue;
    }
    ContentResolver contentResolver=mContext.getContentResolver();
switch (type) {
case FingerprintManager.FINGERPRINT_ERROR:
{
        try {
          clientData.receiver.onError(mHalDeviceId,arg1);
        }
 catch (        RemoteException e) {
          Slog.e(TAG,"can't send message to client. Did it die?",e);
          mClients.remove(mClients.keyAt(i));
        }
      }
    break;
case FingerprintManager.FINGERPRINT_ACQUIRED:
{
    try {
      clientData.receiver.onAcquired(mHalDeviceId,arg1);
    }
 catch (    RemoteException e) {
      Slog.e(TAG,"can't send message to client. Did it die?",e);
      mClients.remove(mClients.keyAt(i));
    }
    break;
  }
case FingerprintManager.FINGERPRINT_PROCESSED:
{
  try {
    clientData.receiver.onProcessed(mHalDeviceId,arg1,arg2);
  }
 catch (  RemoteException e) {
    Slog.e(TAG,"can't send message to client. Did it die?",e);
    mClients.remove(mClients.keyAt(i));
  }
  break;
}
case FingerprintManager.FINGERPRINT_TEMPLATE_ENROLLING:
{
final int fingerId=arg1;
final int groupId=arg2;
final int remaining=arg3;
if (clientData.state == STATE_ENROLLING) {
  try {
    clientData.receiver.onEnrollResult(mHalDeviceId,fingerId,groupId,remaining);
  }
 catch (  RemoteException e) {
    Slog.e(TAG,"can't send message to client. Did it die?",e);
    mClients.remove(mClients.keyAt(i));
  }
  if (remaining == 0) {
    FingerprintUtils.addFingerprintIdForUser(contentResolver,fingerId,clientData.userId);
    clientData.state=STATE_IDLE;
  }
}
 else {
  if (DEBUG)   Slog.w(TAG,"Client not enrolling");
  break;
}
break;
}
case FingerprintManager.FINGERPRINT_TEMPLATE_REMOVED:
{
int fingerId=arg1;
int groupId=arg2;
if (fingerId == 0) {
throw new IllegalStateException("Got illegal id from HAL");
}
FingerprintUtils.removeFingerprintIdForUser(fingerId,contentResolver,clientData.userId);
if (clientData.receiver != null) {
try {
  clientData.receiver.onRemoved(mHalDeviceId,fingerId,groupId);
}
 catch (RemoteException e) {
  Slog.e(TAG,"can't send message to client. Did it die?",e);
  mClients.remove(mClients.keyAt(i));
}
}
clientData.state=STATE_IDLE;
}
break;
}
}
}
