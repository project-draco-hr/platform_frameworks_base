{
  super(context,attrs,defStyleAttr,defStyleRes);
  mAccessibilityManager=(AccessibilityManager)context.getSystemService(Context.ACCESSIBILITY_SERVICE);
  final TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.CalendarView,defStyleAttr,defStyleRes);
  final int firstDayOfWeek=a.getInt(R.styleable.CalendarView_firstDayOfWeek,LocaleData.get(Locale.getDefault()).firstDayOfWeek);
  final String minDate=a.getString(R.styleable.CalendarView_minDate);
  final String maxDate=a.getString(R.styleable.CalendarView_maxDate);
  final int monthTextAppearanceResId=a.getResourceId(R.styleable.CalendarView_monthTextAppearance,R.style.TextAppearance_Material_Widget_Calendar_Month);
  final int dayOfWeekTextAppearanceResId=a.getResourceId(R.styleable.CalendarView_weekDayTextAppearance,R.style.TextAppearance_Material_Widget_Calendar_DayOfWeek);
  final int dayTextAppearanceResId=a.getResourceId(R.styleable.CalendarView_dateTextAppearance,R.style.TextAppearance_Material_Widget_Calendar_Day);
  final ColorStateList daySelectorColor=a.getColorStateList(R.styleable.CalendarView_daySelectorColor);
  a.recycle();
  mAdapter=new DayPickerPagerAdapter(context,R.layout.date_picker_month_item_material,R.id.month_view);
  mAdapter.setMonthTextAppearance(monthTextAppearanceResId);
  mAdapter.setDayOfWeekTextAppearance(dayOfWeekTextAppearanceResId);
  mAdapter.setDayTextAppearance(dayTextAppearanceResId);
  mAdapter.setDaySelectorColor(daySelectorColor);
  final LayoutInflater inflater=LayoutInflater.from(context);
  final ViewGroup content=(ViewGroup)inflater.inflate(DEFAULT_LAYOUT,this,false);
  while (content.getChildCount() > 0) {
    final View child=content.getChildAt(0);
    content.removeViewAt(0);
    addView(child);
  }
  mPrevButton=(ImageButton)findViewById(R.id.prev);
  mPrevButton.setOnClickListener(mOnClickListener);
  mNextButton=(ImageButton)findViewById(R.id.next);
  mNextButton.setOnClickListener(mOnClickListener);
  mViewPager=(ViewPager)findViewById(R.id.day_picker_view_pager);
  mViewPager.setAdapter(mAdapter);
  mViewPager.setOnPageChangeListener(mOnPageChangedListener);
  if (monthTextAppearanceResId != 0) {
    final TypedArray ta=mContext.obtainStyledAttributes(null,ATTRS_TEXT_COLOR,0,monthTextAppearanceResId);
    final ColorStateList monthColor=ta.getColorStateList(0);
    if (monthColor != null) {
      mPrevButton.setImageTintList(monthColor);
      mNextButton.setImageTintList(monthColor);
    }
    ta.recycle();
  }
  final Calendar tempDate=Calendar.getInstance();
  if (!CalendarView.parseDate(minDate,tempDate)) {
    tempDate.set(DEFAULT_START_YEAR,Calendar.JANUARY,1);
  }
  final long minDateMillis=tempDate.getTimeInMillis();
  if (!CalendarView.parseDate(maxDate,tempDate)) {
    tempDate.set(DEFAULT_END_YEAR,Calendar.DECEMBER,31);
  }
  final long maxDateMillis=tempDate.getTimeInMillis();
  if (maxDateMillis < minDateMillis) {
    throw new IllegalArgumentException("maxDate must be >= minDate");
  }
  final long setDateMillis=MathUtils.constrain(System.currentTimeMillis(),minDateMillis,maxDateMillis);
  setFirstDayOfWeek(firstDayOfWeek);
  setMinDate(minDateMillis);
  setMaxDate(maxDateMillis);
  setDate(setDateMillis,false);
  mAdapter.setOnDaySelectedListener(new DayPickerPagerAdapter.OnDaySelectedListener(){
    @Override public void onDaySelected(    DayPickerPagerAdapter adapter,    Calendar day){
      if (mOnDaySelectedListener != null) {
        mOnDaySelectedListener.onDaySelected(DayPickerView.this,day);
      }
    }
  }
);
}
