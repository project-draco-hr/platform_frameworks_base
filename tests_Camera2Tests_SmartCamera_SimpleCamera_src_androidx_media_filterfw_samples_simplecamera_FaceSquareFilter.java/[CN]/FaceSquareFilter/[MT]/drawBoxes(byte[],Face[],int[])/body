{
  for (int i=0; i < faces.length; i++) {
    Rect tempRect=faces[i].rect;
    int top=(tempRect.top + HEIGHT_OFFSET) * dims[1] / FACE_X_RANGE;
    int bottom=(tempRect.bottom + HEIGHT_OFFSET) * dims[1] / FACE_X_RANGE;
    int left=(tempRect.left + WIDTH_OFFSET) * dims[0] / FACE_X_RANGE;
    int right=(tempRect.right + WIDTH_OFFSET) * dims[0] / FACE_X_RANGE;
    if (top < 0) {
      top=0;
    }
 else     if (top > dims[1]) {
      top=dims[1];
    }
    if (left < 0) {
      left=0;
    }
 else     if (left > dims[0]) {
      left=dims[0];
    }
    if (bottom > dims[1]) {
      bottom=dims[1];
    }
 else     if (bottom < 0) {
      bottom=0;
    }
    if (right > dims[0]) {
      right=dims[0];
    }
 else     if (right < 0) {
      right=0;
    }
    for (int j=0; j < (bottom - top); j++) {
      if (left > 0 && top > 0) {
        pixels[ImageConstants.PIX_CHANNELS * (dims[0] * (top + j) + left) + ImageConstants.RED_OFFSET]=(byte)ImageConstants.MAX_BYTE;
        pixels[ImageConstants.PIX_CHANNELS * (dims[0] * (top + j) + left) + ImageConstants.GREEN_OFFSET]=(byte)ImageConstants.MAX_BYTE;
        pixels[ImageConstants.PIX_CHANNELS * (dims[0] * (top + j) + left) + ImageConstants.BLUE_OFFSET]=(byte)ImageConstants.MAX_BYTE;
      }
      if (right > 0 && top > 0) {
        pixels[ImageConstants.PIX_CHANNELS * (dims[0] * (top + j) + right) + ImageConstants.RED_OFFSET]=(byte)ImageConstants.MAX_BYTE;
        pixels[ImageConstants.PIX_CHANNELS * (dims[0] * (top + j) + right) + ImageConstants.GREEN_OFFSET]=(byte)ImageConstants.MAX_BYTE;
        pixels[ImageConstants.PIX_CHANNELS * (dims[0] * (top + j) + right) + ImageConstants.BLUE_OFFSET]=(byte)ImageConstants.MAX_BYTE;
      }
    }
    for (int k=0; k < (right - left); k++) {
      if (top < dims[1]) {
        pixels[ImageConstants.PIX_CHANNELS * (dims[0] * top + left + k) + ImageConstants.RED_OFFSET]=(byte)ImageConstants.MAX_BYTE;
        pixels[ImageConstants.PIX_CHANNELS * (dims[0] * top + left + k) + ImageConstants.GREEN_OFFSET]=(byte)ImageConstants.MAX_BYTE;
        pixels[ImageConstants.PIX_CHANNELS * (dims[0] * top + left + k) + ImageConstants.BLUE_OFFSET]=(byte)ImageConstants.MAX_BYTE;
      }
      if (bottom < dims[1]) {
        pixels[ImageConstants.PIX_CHANNELS * (dims[0] * bottom + left + k) + ImageConstants.RED_OFFSET]=(byte)ImageConstants.MAX_BYTE;
        pixels[ImageConstants.PIX_CHANNELS * (dims[0] * bottom + left + k) + ImageConstants.GREEN_OFFSET]=(byte)ImageConstants.MAX_BYTE;
        pixels[ImageConstants.PIX_CHANNELS * (dims[0] * bottom + left + k) + ImageConstants.BLUE_OFFSET]=(byte)ImageConstants.MAX_BYTE;
      }
    }
  }
}
