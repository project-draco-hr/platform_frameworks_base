{
  JobInfo.Builder jobBuilder;
  int uid, sourceUserId;
  try {
    jobBuilder=buildBuilderFromXml(parser);
    jobBuilder.setPersisted(true);
    uid=Integer.valueOf(parser.getAttributeValue(null,"uid"));
    String val=parser.getAttributeValue(null,"priority");
    if (val != null) {
      jobBuilder.setPriority(Integer.valueOf(val));
    }
    val=parser.getAttributeValue(null,"sourceUserId");
    sourceUserId=val == null ? -1 : Integer.valueOf(val);
  }
 catch (  NumberFormatException e) {
    Slog.e(TAG,"Error parsing job's required fields, skipping");
    return null;
  }
  final String sourcePackageName=parser.getAttributeValue(null,"sourcePackageName");
  int eventType;
  do {
    eventType=parser.next();
  }
 while (eventType == XmlPullParser.TEXT);
  if (!(eventType == XmlPullParser.START_TAG && XML_TAG_PARAMS_CONSTRAINTS.equals(parser.getName()))) {
    return null;
  }
  try {
    buildConstraintsFromXml(jobBuilder,parser);
  }
 catch (  NumberFormatException e) {
    Slog.d(TAG,"Error reading constraints, skipping.");
    return null;
  }
  parser.next();
  do {
    eventType=parser.next();
  }
 while (eventType == XmlPullParser.TEXT);
  if (eventType != XmlPullParser.START_TAG) {
    return null;
  }
  Pair<Long,Long> elapsedRuntimes;
  try {
    elapsedRuntimes=buildExecutionTimesFromXml(parser);
  }
 catch (  NumberFormatException e) {
    if (DEBUG) {
      Slog.d(TAG,"Error parsing execution time parameters, skipping.");
    }
    return null;
  }
  final long elapsedNow=SystemClock.elapsedRealtime();
  if (XML_TAG_PERIODIC.equals(parser.getName())) {
    try {
      String val=parser.getAttributeValue(null,"period");
      final long periodMillis=Long.valueOf(val);
      val=parser.getAttributeValue(null,"flex");
      final long flexMillis=(val != null) ? Long.valueOf(val) : periodMillis;
      jobBuilder.setPeriodic(periodMillis,flexMillis);
      if (elapsedRuntimes.second > elapsedNow + periodMillis + flexMillis) {
        final long clampedLateRuntimeElapsed=elapsedNow + flexMillis + periodMillis;
        final long clampedEarlyRuntimeElapsed=clampedLateRuntimeElapsed - flexMillis;
        Slog.w(TAG,String.format("Periodic job for uid='%d' persisted run-time is" + " too big [%s, %s]. Clamping to [%s,%s]",uid,DateUtils.formatElapsedTime(elapsedRuntimes.first / 1000),DateUtils.formatElapsedTime(elapsedRuntimes.second / 1000),DateUtils.formatElapsedTime(clampedEarlyRuntimeElapsed / 1000),DateUtils.formatElapsedTime(clampedLateRuntimeElapsed / 1000)));
        elapsedRuntimes=Pair.create(clampedEarlyRuntimeElapsed,clampedLateRuntimeElapsed);
      }
    }
 catch (    NumberFormatException e) {
      Slog.d(TAG,"Error reading periodic execution criteria, skipping.");
      return null;
    }
  }
 else   if (XML_TAG_ONEOFF.equals(parser.getName())) {
    try {
      if (elapsedRuntimes.first != JobStatus.NO_EARLIEST_RUNTIME) {
        jobBuilder.setMinimumLatency(elapsedRuntimes.first - elapsedNow);
      }
      if (elapsedRuntimes.second != JobStatus.NO_LATEST_RUNTIME) {
        jobBuilder.setOverrideDeadline(elapsedRuntimes.second - elapsedNow);
      }
    }
 catch (    NumberFormatException e) {
      Slog.d(TAG,"Error reading job execution criteria, skipping.");
      return null;
    }
  }
 else {
    if (DEBUG) {
      Slog.d(TAG,"Invalid parameter tag, skipping - " + parser.getName());
    }
    return null;
  }
  maybeBuildBackoffPolicyFromXml(jobBuilder,parser);
  parser.nextTag();
  do {
    eventType=parser.next();
  }
 while (eventType == XmlPullParser.TEXT);
  if (!(eventType == XmlPullParser.START_TAG && XML_TAG_EXTRAS.equals(parser.getName()))) {
    if (DEBUG) {
      Slog.d(TAG,"Error reading extras, skipping.");
    }
    return null;
  }
  PersistableBundle extras=PersistableBundle.restoreFromXml(parser);
  jobBuilder.setExtras(extras);
  parser.nextTag();
  JobStatus js=new JobStatus(jobBuilder.build(),uid,sourcePackageName,sourceUserId,elapsedRuntimes.first,elapsedRuntimes.second);
  return js;
}
