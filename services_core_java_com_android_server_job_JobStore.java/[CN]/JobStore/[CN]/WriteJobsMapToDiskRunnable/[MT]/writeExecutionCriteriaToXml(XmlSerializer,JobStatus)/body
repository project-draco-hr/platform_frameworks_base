{
  final JobInfo job=jobStatus.getJob();
  if (jobStatus.getJob().isPeriodic()) {
    out.startTag(null,XML_TAG_PERIODIC);
    out.attribute(null,"period",Long.toString(job.getIntervalMillis()));
    out.attribute(null,"flex",Long.toString(job.getFlexMillis()));
  }
 else {
    out.startTag(null,XML_TAG_ONEOFF);
  }
  if (jobStatus.hasDeadlineConstraint()) {
    final long deadlineWallclock=System.currentTimeMillis() + (jobStatus.getLatestRunTimeElapsed() - SystemClock.elapsedRealtime());
    out.attribute(null,"deadline",Long.toString(deadlineWallclock));
  }
  if (jobStatus.hasTimingDelayConstraint()) {
    final long delayWallclock=System.currentTimeMillis() + (jobStatus.getEarliestRunTime() - SystemClock.elapsedRealtime());
    out.attribute(null,"delay",Long.toString(delayWallclock));
  }
  if (jobStatus.getJob().getInitialBackoffMillis() != JobInfo.DEFAULT_INITIAL_BACKOFF_MILLIS || jobStatus.getJob().getBackoffPolicy() != JobInfo.DEFAULT_BACKOFF_POLICY) {
    out.attribute(null,"backoff-policy",Integer.toString(job.getBackoffPolicy()));
    out.attribute(null,"initial-backoff",Long.toString(job.getInitialBackoffMillis()));
  }
  if (job.isPeriodic()) {
    out.endTag(null,XML_TAG_PERIODIC);
  }
 else {
    out.endTag(null,XML_TAG_ONEOFF);
  }
}
