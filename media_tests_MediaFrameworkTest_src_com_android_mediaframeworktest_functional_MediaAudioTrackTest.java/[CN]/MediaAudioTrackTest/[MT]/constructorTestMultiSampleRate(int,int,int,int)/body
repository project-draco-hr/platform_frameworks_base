{
  int[] testSampleRates={8000,11025,12000,16000,22050,24000,32000,44100,48000};
  String failedRates="Failure for rate(s): ";
  boolean localRes, finalRes=true;
  for (int i=0; i < testSampleRates.length; i++) {
    AudioTrack track=null;
    try {
      track=new AudioTrack(_inTest_streamType,testSampleRates[i],_inTest_config,AudioFormat.ENCODING_PCM_16BIT,AudioTrack.getMinBufferSize(testSampleRates[i],_inTest_config,AudioFormat.ENCODING_PCM_16BIT),_inTest_mode);
    }
 catch (    IllegalArgumentException iae) {
      Log.e("MediaAudioTrackTest","[ constructorTestMultiSampleRate ] exception at SR " + testSampleRates[i] + ": \n"+ iae);
    }
    if (track != null) {
      localRes=(track.getState() == _expected_stateForMode);
      track.release();
    }
 else {
      localRes=false;
    }
    if (!localRes) {
      failedRates+=Integer.toString(testSampleRates[i]) + "Hz ";
      Log.e("MediaAudioTrackTest","[ constructorTestMultiSampleRate ] failed to construct " + "AudioTrack(streamType=" + _inTest_streamType + ", sampleRateInHz="+ testSampleRates[i]+ ", channelConfig="+ _inTest_config+ ", audioFormat=AudioFormat.ENCODING_PCM_16BIT"+ ", bufferSizeInBytes="+ AudioTrack.getMinBufferSize(testSampleRates[i],_inTest_config,AudioFormat.ENCODING_PCM_16BIT)+ ", mode="+ _inTest_mode);
      finalRes=false;
    }
  }
  return new TestResults(finalRes,failedRates);
}
