{
  final int TYPE_TEST_SR=22050;
  final int TYPE_TEST_CONF=AudioFormat.CHANNEL_OUT_STEREO;
  final int TYPE_TEST_FORMAT=AudioFormat.ENCODING_PCM_16BIT;
  final int TYPE_TEST_MODE=AudioTrack.MODE_STREAM;
  final int[] STREAM_TYPES={AudioManager.STREAM_ALARM,AudioManager.STREAM_BLUETOOTH_SCO,AudioManager.STREAM_MUSIC,AudioManager.STREAM_NOTIFICATION,AudioManager.STREAM_RING,AudioManager.STREAM_SYSTEM,AudioManager.STREAM_VOICE_CALL,AudioManager.STREAM_DTMF};
  final String[] STREAM_NAMES={"STREAM_ALARM","STREAM_BLUETOOTH_SCO","STREAM_MUSIC","STREAM_NOTIFICATION","STREAM_RING","STREAM_SYSTEM","STREAM_VOICE_CALL","STREAM_DTMF"};
  boolean localTestRes=true;
  AudioTrack track=null;
  for (int i=0; i < STREAM_TYPES.length; i++) {
    try {
      track=new AudioTrack(STREAM_TYPES[i],TYPE_TEST_SR,TYPE_TEST_CONF,TYPE_TEST_FORMAT,AudioTrack.getMinBufferSize(TYPE_TEST_SR,TYPE_TEST_CONF,TYPE_TEST_FORMAT),TYPE_TEST_MODE);
    }
 catch (    IllegalArgumentException iae) {
      loge("testConstructorStreamType","exception for stream type " + STREAM_NAMES[i] + ": "+ iae);
      localTestRes=false;
    }
    if (track != null) {
      if (track.getState() != AudioTrack.STATE_INITIALIZED) {
        localTestRes=false;
        Log.e("MediaAudioTrackTest","[ testConstructorStreamType ] failed for stream type " + STREAM_NAMES[i]);
      }
      track.release();
    }
 else {
      localTestRes=false;
    }
  }
  assertTrue("testConstructorStreamType",localTestRes);
}
