{
switch (keyCode) {
case KeyEvent.KEYCODE_TAB:
{
      int altTabKeyDelay=getResources().getInteger(R.integer.recents_alt_tab_key_delay);
      boolean hasRepKeyTimeElapsed=(SystemClock.elapsedRealtime() - mLastTabKeyEventTime) > altTabKeyDelay;
      if (event.getRepeatCount() <= 0 || hasRepKeyTimeElapsed) {
        final boolean backward=event.isShiftPressed();
        mRecentsView.focusNextTask(!backward);
        mLastTabKeyEventTime=SystemClock.elapsedRealtime();
      }
      return true;
    }
case KeyEvent.KEYCODE_DPAD_UP:
{
    mRecentsView.focusNextTask(true);
    return true;
  }
case KeyEvent.KEYCODE_DPAD_DOWN:
{
  mRecentsView.focusNextTask(false);
  return true;
}
case KeyEvent.KEYCODE_DEL:
case KeyEvent.KEYCODE_FORWARD_DEL:
{
mRecentsView.dismissFocusedTask();
MetricsLogger.histogram(this,"overview_task_dismissed_source",Constants.Metrics.DismissSourceKeyboard);
return true;
}
default :
break;
}
return super.onKeyDown(keyCode,event);
}
