{
  @SuppressWarnings("unchecked") Class<T> klass=(Class<T>)array.getClass();
  if (!klass.isArray()) {
    throw new IllegalArgumentException("array class must be an array");
  }
  int sizeOfT=sizeOfTBits / Byte.SIZE;
  int byteLength=Array.getLength(array) * sizeOfT;
  if (klass == byte[].class) {
    return Arrays.copyOf((byte[])array,byteLength);
  }
  ByteBuffer byteBuffer=ByteBuffer.allocate(byteLength).order(ByteOrder.nativeOrder());
  if (klass == int[].class) {
    byteBuffer.asIntBuffer().put((int[])array);
  }
 else   if (klass == float[].class) {
    byteBuffer.asFloatBuffer().put((float[])array);
  }
 else   if (klass == double[].class) {
    byteBuffer.asDoubleBuffer().put((double[])array);
  }
 else   if (klass == short[].class) {
    byteBuffer.asShortBuffer().put((short[])array);
  }
 else   if (klass == char[].class) {
    byteBuffer.asCharBuffer().put((char[])array);
  }
 else   if (klass == long[].class) {
    byteBuffer.asLongBuffer().put((long[])array);
  }
 else {
    throw new IllegalArgumentException("array class invalid; must be a primitive array");
  }
  return byteBuffer.array();
}
