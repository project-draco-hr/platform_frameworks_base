{
  int[] flagses={Base64.DEFAULT,Base64.NO_PADDING,Base64.NO_WRAP,Base64.NO_PADDING | Base64.NO_WRAP,Base64.CRLF,Base64.WEB_SAFE};
  int[] writeLengths={-10,-5,-1,0,1,1,2,2,3,10,100};
  Random rng=new Random(32176L);
  byte[] plain=(lipsum + lipsum).getBytes();
  for (  int flags : flagses) {
    byte[] encoded=Base64.encode(plain,flags);
    ByteArrayOutputStream baos;
    Base64OutputStream b64os;
    byte[] actual;
    int p;
    baos=new ByteArrayOutputStream();
    b64os=new Base64OutputStream(baos,flags);
    b64os.write(plain);
    b64os.close();
    actual=baos.toByteArray();
    assertEquals(encoded,actual);
    baos=new ByteArrayOutputStream();
    b64os=new Base64OutputStream(baos,flags);
    for (int i=0; i < plain.length; ++i) {
      b64os.write(plain[i]);
    }
    b64os.close();
    actual=baos.toByteArray();
    assertEquals(encoded,actual);
    baos=new ByteArrayOutputStream();
    b64os=new Base64OutputStream(baos,flags);
    p=0;
    while (p < plain.length) {
      int l=writeLengths[rng.nextInt(writeLengths.length)];
      l=Math.min(l,plain.length - p);
      if (l >= 0) {
        b64os.write(plain,p,l);
        p+=l;
      }
 else {
        l=Math.min(-l,plain.length - p);
        for (int i=0; i < l; ++i) {
          b64os.write(plain[p + i]);
        }
        p+=l;
      }
    }
    b64os.close();
    actual=baos.toByteArray();
    assertEquals(encoded,actual);
    baos=new ByteArrayOutputStream();
    b64os=new Base64OutputStream(baos,flags,false);
    b64os.write(encoded);
    b64os.close();
    actual=baos.toByteArray();
    assertEquals(plain,actual);
    baos=new ByteArrayOutputStream();
    b64os=new Base64OutputStream(baos,flags,false);
    for (int i=0; i < encoded.length; ++i) {
      b64os.write(encoded[i]);
    }
    b64os.close();
    actual=baos.toByteArray();
    assertEquals(plain,actual);
    baos=new ByteArrayOutputStream();
    b64os=new Base64OutputStream(baos,flags,false);
    p=0;
    while (p < encoded.length) {
      int l=writeLengths[rng.nextInt(writeLengths.length)];
      l=Math.min(l,encoded.length - p);
      if (l >= 0) {
        b64os.write(encoded,p,l);
        p+=l;
      }
 else {
        l=Math.min(-l,encoded.length - p);
        for (int i=0; i < l; ++i) {
          b64os.write(encoded[p + i]);
        }
        p+=l;
      }
    }
    b64os.close();
    actual=baos.toByteArray();
    assertEquals(plain,actual);
  }
}
