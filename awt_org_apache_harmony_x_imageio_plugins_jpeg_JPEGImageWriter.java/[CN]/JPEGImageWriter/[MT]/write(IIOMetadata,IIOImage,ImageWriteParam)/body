{
  if (ios == null) {
    throw new IllegalArgumentException("ios == null");
  }
  if (iioImage == null) {
    throw new IllegalArgumentException("Image equals null");
  }
  RenderedImage img=null;
  if (!iioImage.hasRaster()) {
    img=iioImage.getRenderedImage();
    if (img instanceof BufferedImage) {
      sourceRaster=((BufferedImage)img).getRaster();
    }
 else {
      sourceRaster=img.getData();
    }
  }
 else {
    sourceRaster=iioImage.getRaster();
  }
  if (DEBUG) {
    if (img == null) {
      System.out.println("****J: Image is NULL");
    }
 else {
      renImg=img;
      bufImg=(BufferedImage)img;
    }
  }
  int numBands=sourceRaster.getNumBands();
  int sourceIJGCs=img == null ? JPEGConsts.JCS_UNKNOW : getSourceCSType(img);
  srcWidth=sourceRaster.getWidth();
  srcHeight=sourceRaster.getHeight();
  int destWidth=srcWidth;
  int destHeight=srcHeight;
  boolean progressive=false;
  if (param != null) {
    Rectangle reg=param.getSourceRegion();
    if (reg != null) {
      srcXOff=reg.x;
      srcYOff=reg.y;
      srcWidth=reg.width + srcXOff > srcWidth ? srcWidth - srcXOff : reg.width;
      srcHeight=reg.height + srcYOff > srcHeight ? srcHeight - srcYOff : reg.height;
    }
    deltaX=param.getSourceXSubsampling();
    deltaY=param.getSourceYSubsampling();
    int offsetX=param.getSubsamplingXOffset();
    int offsetY=param.getSubsamplingYOffset();
    srcXOff+=offsetX;
    srcYOff+=offsetY;
    srcWidth-=offsetX;
    srcHeight-=offsetY;
    destWidth=(srcWidth + deltaX - 1) / deltaX;
    destHeight=(srcHeight + deltaY - 1) / deltaY;
  }
  SampleModel model=sourceRaster.getSampleModel();
  if (model instanceof SinglePixelPackedSampleModel) {
    DataBufferInt ibuf=(DataBufferInt)sourceRaster.getDataBuffer();
    int[] pixels=ibuf.getData();
    bm=Bitmap.createBitmap(pixels,srcWidth,srcHeight,Bitmap.Config.ARGB_8888);
    ImageOutputStreamWrapper iosw=new ImageOutputStreamWrapper(ios);
    bm.compress(CompressFormat.JPEG,100,iosw);
  }
 else {
    throw new RuntimeException("Color model not supported yet");
  }
}
