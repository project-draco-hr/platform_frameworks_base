{
  final DropBoxManager db=(DropBoxManager)ctx.getSystemService(Context.DROPBOX_SERVICE);
  final SharedPreferences prefs=ctx.getSharedPreferences("log_files",Context.MODE_PRIVATE);
  final String headers=new StringBuilder(512).append("Build: ").append(Build.FINGERPRINT).append("\n").append("Hardware: ").append(Build.BOARD).append("\n").append("Bootloader: ").append(Build.BOOTLOADER).append("\n").append("Radio: ").append(Build.RADIO).append("\n").append("Kernel: ").append(FileUtils.readTextFile(new File("/proc/version"),1024,"...\n")).append("\n").toString();
  String recovery=RecoverySystem.handleAftermath();
  if (recovery != null && db != null) {
    db.addText("SYSTEM_RECOVERY_LOG",headers + recovery);
  }
  if (SystemProperties.getLong("ro.runtime.firstboot",0) == 0) {
    String now=Long.toString(System.currentTimeMillis());
    SystemProperties.set("ro.runtime.firstboot",now);
    if (db != null)     db.addText("SYSTEM_BOOT",headers);
    addFileToDropBox(db,prefs,headers,"/proc/last_kmsg",-LOG_SIZE,"SYSTEM_LAST_KMSG");
    addFileToDropBox(db,prefs,headers,"/cache/recovery/log",-LOG_SIZE,"SYSTEM_RECOVERY_LOG");
    addFileToDropBox(db,prefs,headers,"/data/dontpanic/apanic_console",-LOG_SIZE,"APANIC_CONSOLE");
    addFileToDropBox(db,prefs,headers,"/data/dontpanic/apanic_threads",-LOG_SIZE,"APANIC_THREADS");
  }
 else {
    if (db != null)     db.addText("SYSTEM_RESTART",headers);
  }
  File[] tombstoneFiles=TOMBSTONE_DIR.listFiles();
  for (int i=0; tombstoneFiles != null && i < tombstoneFiles.length; i++) {
    addFileToDropBox(db,prefs,headers,tombstoneFiles[i].getPath(),LOG_SIZE,"SYSTEM_TOMBSTONE");
  }
  sTombstoneObserver=new FileObserver(TOMBSTONE_DIR.getPath(),FileObserver.CLOSE_WRITE){
    @Override public void onEvent(    int event,    String path){
      try {
        String filename=new File(TOMBSTONE_DIR,path).getPath();
        addFileToDropBox(db,prefs,headers,filename,LOG_SIZE,"SYSTEM_TOMBSTONE");
      }
 catch (      IOException e) {
        Slog.e(TAG,"Can't log tombstone",e);
      }
    }
  }
;
  sTombstoneObserver.startWatching();
}
