{
  long temp=-1;
switch (headerID) {
case COUNT:
    if (!(headerValue instanceof Long)) {
      if (headerValue == null) {
        count=null;
        break;
      }
      throw new IllegalArgumentException("Count must be a Long");
    }
  temp=((Long)headerValue).longValue();
if ((temp < 0L) || (temp > 0xFFFFFFFFL)) {
  throw new IllegalArgumentException("Count must be between 0 and 0xFFFFFFFF");
}
count=(Long)headerValue;
break;
case NAME:
if ((headerValue != null) && (!(headerValue instanceof String))) {
throw new IllegalArgumentException("Name must be a String");
}
name=(String)headerValue;
break;
case TYPE:
if ((headerValue != null) && (!(headerValue instanceof String))) {
throw new IllegalArgumentException("Type must be a String");
}
type=(String)headerValue;
break;
case LENGTH:
if (!(headerValue instanceof Long)) {
if (headerValue == null) {
length=null;
break;
}
throw new IllegalArgumentException("Length must be a Long");
}
temp=((Long)headerValue).longValue();
if ((temp < 0L) || (temp > 0xFFFFFFFFL)) {
throw new IllegalArgumentException("Length must be between 0 and 0xFFFFFFFF");
}
length=(Long)headerValue;
break;
case TIME_ISO_8601:
if ((headerValue != null) && (!(headerValue instanceof Calendar))) {
throw new IllegalArgumentException("Time ISO 8601 must be a Calendar");
}
isoTime=(Calendar)headerValue;
break;
case TIME_4_BYTE:
if ((headerValue != null) && (!(headerValue instanceof Calendar))) {
throw new IllegalArgumentException("Time 4 Byte must be a Calendar");
}
byteTime=(Calendar)headerValue;
break;
case DESCRIPTION:
if ((headerValue != null) && (!(headerValue instanceof String))) {
throw new IllegalArgumentException("Description must be a String");
}
description=(String)headerValue;
break;
case TARGET:
if (headerValue == null) {
target=null;
}
 else {
if (!(headerValue instanceof byte[])) {
throw new IllegalArgumentException("Target must be a byte array");
}
 else {
target=new byte[((byte[])headerValue).length];
System.arraycopy(headerValue,0,target,0,target.length);
}
}
break;
case HTTP:
if (headerValue == null) {
http=null;
}
 else {
if (!(headerValue instanceof byte[])) {
throw new IllegalArgumentException("HTTP must be a byte array");
}
 else {
http=new byte[((byte[])headerValue).length];
System.arraycopy(headerValue,0,http,0,http.length);
}
}
break;
case WHO:
if (headerValue == null) {
who=null;
}
 else {
if (!(headerValue instanceof byte[])) {
throw new IllegalArgumentException("WHO must be a byte array");
}
 else {
who=new byte[((byte[])headerValue).length];
System.arraycopy(headerValue,0,who,0,who.length);
}
}
break;
case OBJECT_CLASS:
if (headerValue == null) {
objectClass=null;
}
 else {
if (!(headerValue instanceof byte[])) {
throw new IllegalArgumentException("Object Class must be a byte array");
}
 else {
objectClass=new byte[((byte[])headerValue).length];
System.arraycopy(headerValue,0,objectClass,0,objectClass.length);
}
}
break;
case APPLICATION_PARAMETER:
if (headerValue == null) {
appParam=null;
}
 else {
if (!(headerValue instanceof byte[])) {
throw new IllegalArgumentException("Application Parameter must be a byte array");
}
 else {
appParam=new byte[((byte[])headerValue).length];
System.arraycopy(headerValue,0,appParam,0,appParam.length);
}
}
break;
default :
if ((headerID >= 0x30) && (headerID <= 0x3F)) {
if ((headerValue != null) && (!(headerValue instanceof String))) {
throw new IllegalArgumentException("Unicode String User Defined must be a String");
}
unicodeUserDefined[headerID - 0x30]=(String)headerValue;
break;
}
if ((headerID >= 0x70) && (headerID <= 0x7F)) {
if (headerValue == null) {
sequenceUserDefined[headerID - 0x70]=null;
}
 else {
if (!(headerValue instanceof byte[])) {
throw new IllegalArgumentException("Byte Sequence User Defined must be a byte array");
}
 else {
sequenceUserDefined[headerID - 0x70]=new byte[((byte[])headerValue).length];
System.arraycopy(headerValue,0,sequenceUserDefined[headerID - 0x70],0,sequenceUserDefined[headerID - 0x70].length);
}
}
break;
}
if ((headerID >= 0xB0) && (headerID <= 0xBF)) {
if ((headerValue != null) && (!(headerValue instanceof Byte))) {
throw new IllegalArgumentException("ByteUser Defined must be a Byte");
}
byteUserDefined[headerID - 0xB0]=(Byte)headerValue;
break;
}
if ((headerID >= 0xF0) && (headerID <= 0xFF)) {
if (!(headerValue instanceof Long)) {
if (headerValue == null) {
integerUserDefined[headerID - 0xF0]=null;
break;
}
throw new IllegalArgumentException("Integer User Defined must be a Long");
}
temp=((Long)headerValue).longValue();
if ((temp < 0L) || (temp > 0xFFFFFFFFL)) {
throw new IllegalArgumentException("Integer User Defined must be between 0 and 0xFFFFFFFF");
}
integerUserDefined[headerID - 0xF0]=(Long)headerValue;
break;
}
throw new IllegalArgumentException("Invalid Header Identifier");
}
}
