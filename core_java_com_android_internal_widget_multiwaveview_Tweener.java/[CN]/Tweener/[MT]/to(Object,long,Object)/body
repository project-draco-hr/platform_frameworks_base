{
  long delay=0;
  AnimatorUpdateListener updateListener=null;
  AnimatorListener listener=null;
  TimeInterpolator interpolator=null;
  ArrayList<PropertyValuesHolder> props=new ArrayList<PropertyValuesHolder>(vars.length / 2);
  for (int i=0; i < vars.length; i+=2) {
    if (!(vars[i] instanceof String)) {
      throw new IllegalArgumentException("Key must be a string: " + vars[i]);
    }
    String key=(String)vars[i];
    Object value=vars[i + 1];
    if ("simultaneousTween".equals(key)) {
    }
 else     if ("ease".equals(key)) {
      interpolator=(TimeInterpolator)value;
    }
 else     if ("onUpdate".equals(key) || "onUpdateListener".equals(key)) {
      updateListener=(AnimatorUpdateListener)value;
    }
 else     if ("onComplete".equals(key) || "onCompleteListener".equals(key)) {
      listener=(AnimatorListener)value;
    }
 else     if ("delay".equals(key)) {
      delay=((Number)value).longValue();
    }
 else     if ("syncWith".equals(key)) {
    }
 else     if (value instanceof float[]) {
      props.add(PropertyValuesHolder.ofFloat(key,((float[])value)[0],((float[])value)[1]));
    }
 else     if (value instanceof Number) {
      float floatValue=((Number)value).floatValue();
      props.add(PropertyValuesHolder.ofFloat(key,floatValue));
    }
 else {
      throw new IllegalArgumentException("Bad argument for key \"" + key + "\" with value "+ value.getClass());
    }
  }
  Tweener tween=sTweens.get(object);
  ObjectAnimator anim=null;
  if (tween == null) {
    anim=ObjectAnimator.ofPropertyValuesHolder(object,props.toArray(new PropertyValuesHolder[props.size()]));
    tween=new Tweener(anim);
    sTweens.put(object,tween);
    if (DEBUG)     Log.v(TAG,"Added new Tweener " + tween);
  }
 else {
    anim=sTweens.get(object).animator;
    replace(props,object);
  }
  if (interpolator != null) {
    anim.setInterpolator(interpolator);
  }
  anim.setStartDelay(delay);
  anim.setDuration(duration);
  if (updateListener != null) {
    anim.removeAllUpdateListeners();
    anim.addUpdateListener(updateListener);
  }
  if (listener != null) {
    anim.removeAllListeners();
    anim.addListener(listener);
  }
  anim.addListener(mCleanupListener);
  anim.start();
  return tween;
}
