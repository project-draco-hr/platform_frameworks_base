{
  if (!force && !mUpdateInputWindowsNeeded) {
    return;
  }
  mUpdateInputWindowsNeeded=false;
  if (false)   Slog.d(WindowManagerService.TAG,">>>>>> ENTERED updateInputWindowsLw");
  final WindowStateAnimator universeBackground=mService.mAnimator.mUniverseBackground;
  final int aboveUniverseLayer=mService.mAnimator.mAboveUniverseLayer;
  boolean addedUniverse=false;
  boolean disableWallpaperTouchEvents=false;
  final boolean inDrag=(mService.mDragState != null);
  if (inDrag) {
    if (WindowManagerService.DEBUG_DRAG) {
      Log.d(WindowManagerService.TAG,"Inserting drag window");
    }
    final InputWindowHandle dragWindowHandle=mService.mDragState.mDragWindowHandle;
    if (dragWindowHandle != null) {
      addInputWindowHandleLw(dragWindowHandle);
    }
 else {
      Slog.w(WindowManagerService.TAG,"Drag is in progress but there is no " + "drag window handle.");
    }
  }
  final int NFW=mService.mFakeWindows.size();
  for (int i=0; i < NFW; i++) {
    addInputWindowHandleLw(mService.mFakeWindows.get(i).mWindowHandle);
  }
  final int numDisplays=mService.mDisplayContents.size();
  for (int displayNdx=0; displayNdx < numDisplays; ++displayNdx) {
    WindowList windows=mService.mDisplayContents.valueAt(displayNdx).getWindowList();
    for (int winNdx=windows.size() - 1; winNdx >= 0; --winNdx) {
      final WindowState child=windows.get(winNdx);
      final InputChannel inputChannel=child.mInputChannel;
      final InputWindowHandle inputWindowHandle=child.mInputWindowHandle;
      if (inputChannel == null || inputWindowHandle == null || child.mRemoved) {
        continue;
      }
      final int flags=child.mAttrs.flags;
      final int privateFlags=child.mAttrs.privateFlags;
      final int type=child.mAttrs.type;
      final boolean hasFocus=(child == mInputFocus);
      final boolean isVisible=child.isVisibleLw();
      if ((privateFlags & WindowManager.LayoutParams.PRIVATE_FLAG_DISABLE_WALLPAPER_TOUCH_EVENTS) != 0) {
        disableWallpaperTouchEvents=true;
      }
      final boolean hasWallpaper=(child == mService.mWallpaperTarget) && (privateFlags & WindowManager.LayoutParams.PRIVATE_FLAG_KEYGUARD) == 0 && !disableWallpaperTouchEvents;
      final boolean onDefaultDisplay=(child.getDisplayId() == Display.DEFAULT_DISPLAY);
      if (inDrag && isVisible && onDefaultDisplay) {
        mService.mDragState.sendDragStartedIfNeededLw(child);
      }
      if (universeBackground != null && !addedUniverse && child.mBaseLayer < aboveUniverseLayer && onDefaultDisplay) {
        final WindowState u=universeBackground.mWin;
        if (u.mInputChannel != null && u.mInputWindowHandle != null) {
          addInputWindowHandleLw(u.mInputWindowHandle,u,u.mAttrs.flags,u.mAttrs.privateFlags,u.mAttrs.type,true,u == mInputFocus,false);
        }
        addedUniverse=true;
      }
      if (child.mWinAnimator != universeBackground) {
        addInputWindowHandleLw(inputWindowHandle,child,flags,privateFlags,type,isVisible,hasFocus,hasWallpaper);
      }
    }
  }
  mService.mInputManager.setInputWindows(mInputWindowHandles);
  clearInputWindowHandlesLw();
  if (false)   Slog.d(WindowManagerService.TAG,"<<<<<<< EXITED updateInputWindowsLw");
}
