{
  if (!parseFormatting) {
    return false;
  }
  int endChar=nextChar;
  while ((endChar < text.length()) && isFormatChar(text.charAt(endChar))) {
    endChar+=1;
  }
  if ((endChar == nextChar) || !isWordBreak(endChar)) {
    return false;
  }
  LinkedHashMap<Character,Boolean> seenCharacters=new LinkedHashMap<Character,Boolean>();
  for (int index=nextChar; index < endChar; ++index) {
    char ch=text.charAt(index);
    Character key=Character.valueOf(ch);
    if (seenCharacters.containsKey(key)) {
      addToken(new Format(ch,false));
    }
 else {
      Format start=formatStart.get(key);
      if (start != null) {
        start.setMatched(true);
        formatStart.remove(key);
        seenCharacters.put(key,Boolean.TRUE);
      }
 else {
        start=new Format(ch,true);
        formatStart.put(key,start);
        addToken(start);
        seenCharacters.put(key,Boolean.FALSE);
      }
    }
  }
  for (  Character key : seenCharacters.keySet()) {
    if (seenCharacters.get(key) == Boolean.TRUE) {
      Format end=new Format(key.charValue(),false);
      end.setMatched(true);
      addToken(end);
    }
  }
  nextChar=endChar;
  return true;
}
