{
  if (mStack != null) {
    if (mStack.mStackId == relativeStackId) {
      TaskStack stack=new TaskStack(stackId,this);
      TaskStack firstStack;
      TaskStack secondStack;
      int width, height, split;
switch (position) {
default :
case TASK_STACK_GOES_BEFORE:
case TASK_STACK_GOES_AFTER:
        mVertical=false;
      width=(int)(weight * mBounds.width());
    height=mBounds.height();
  if (position == TASK_STACK_GOES_BEFORE) {
    firstStack=stack;
    secondStack=mStack;
    split=mBounds.left + width;
  }
 else {
    firstStack=mStack;
    secondStack=stack;
    split=mBounds.right - width;
  }
break;
case TASK_STACK_GOES_ABOVE:
case TASK_STACK_GOES_BELOW:
mVertical=true;
width=mBounds.width();
height=(int)(weight * mBounds.height());
if (position == TASK_STACK_GOES_ABOVE) {
firstStack=stack;
secondStack=mStack;
split=mBounds.top + height;
}
 else {
firstStack=mStack;
secondStack=stack;
split=mBounds.bottom - height;
}
break;
}
mFirst=new StackBox(mDisplayContent,new Rect(mBounds.left,mBounds.top,mVertical ? mBounds.right : split,mVertical ? split : mBounds.bottom));
mFirst.mStack=firstStack;
mSecond=new StackBox(mDisplayContent,new Rect(mVertical ? mBounds.left : split,mVertical ? split : mBounds.top,mBounds.right,mBounds.bottom));
mSecond.mStack=secondStack;
mStack=null;
return stack;
}
return null;
}
TaskStack stack=mFirst.split(stackId,relativeStackId,position,weight);
if (stack != null) {
return stack;
}
return mSecond.split(stackId,relativeStackId,position,weight);
}
