{
  if (mStackBoxId != relativeStackBoxId) {
    if (mStack != null) {
      return null;
    }
    TaskStack stack=mFirst.split(stackId,relativeStackBoxId,position,weight);
    if (stack != null) {
      return stack;
    }
    return mSecond.split(stackId,relativeStackBoxId,position,weight);
  }
  TaskStack stack=new TaskStack(mService,stackId,mDisplayContent);
  TaskStack firstStack;
  TaskStack secondStack;
  if (position == TASK_STACK_GOES_BEFORE) {
    position=TASK_STACK_TO_LEFT_OF;
  }
 else   if (position == TASK_STACK_GOES_AFTER) {
    position=TASK_STACK_TO_RIGHT_OF;
  }
switch (position) {
default :
case TASK_STACK_TO_LEFT_OF:
case TASK_STACK_TO_RIGHT_OF:
    mVertical=false;
  if (position == TASK_STACK_TO_LEFT_OF) {
    mWeight=weight;
    firstStack=stack;
    secondStack=mStack;
  }
 else {
    mWeight=1.0f - weight;
    firstStack=mStack;
    secondStack=stack;
  }
break;
case TASK_STACK_GOES_ABOVE:
case TASK_STACK_GOES_BELOW:
mVertical=true;
if (position == TASK_STACK_GOES_ABOVE) {
mWeight=weight;
firstStack=stack;
secondStack=mStack;
}
 else {
mWeight=1.0f - weight;
firstStack=mStack;
secondStack=stack;
}
break;
}
mFirst=new StackBox(mService,mDisplayContent,this);
firstStack.mStackBox=mFirst;
mFirst.mStack=firstStack;
mSecond=new StackBox(mService,mDisplayContent,this);
secondStack.mStackBox=mSecond;
mSecond.mStack=secondStack;
mStack=null;
return stack;
}
