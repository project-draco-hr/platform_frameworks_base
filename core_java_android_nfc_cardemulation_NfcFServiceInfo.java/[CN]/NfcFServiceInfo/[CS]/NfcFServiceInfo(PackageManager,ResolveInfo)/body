{
  ServiceInfo si=info.serviceInfo;
  XmlResourceParser parser=null;
  try {
    parser=si.loadXmlMetaData(pm,HostNfcFService.SERVICE_META_DATA);
    if (parser == null) {
      throw new XmlPullParserException("No " + HostNfcFService.SERVICE_META_DATA + " meta-data");
    }
    int eventType=parser.getEventType();
    while (eventType != XmlPullParser.START_TAG && eventType != XmlPullParser.END_DOCUMENT) {
      eventType=parser.next();
    }
    String tagName=parser.getName();
    if (!"host-nfcf-service".equals(tagName)) {
      throw new XmlPullParserException("Meta-data does not start with <host-nfcf-service> tag");
    }
    Resources res=pm.getResourcesForApplication(si.applicationInfo);
    AttributeSet attrs=Xml.asAttributeSet(parser);
    TypedArray sa=res.obtainAttributes(attrs,com.android.internal.R.styleable.HostNfcFService);
    mService=info;
    mDescription=sa.getString(com.android.internal.R.styleable.HostNfcFService_description);
    mDynamicSystemCode=null;
    mDynamicNfcid2=null;
    sa.recycle();
    String systemCode=null;
    String nfcid2=null;
    final int depth=parser.getDepth();
    while (((eventType=parser.next()) != XmlPullParser.END_TAG || parser.getDepth() > depth) && eventType != XmlPullParser.END_DOCUMENT) {
      tagName=parser.getName();
      if (eventType == XmlPullParser.START_TAG && "system-code-filter".equals(tagName) && systemCode == null) {
        final TypedArray a=res.obtainAttributes(attrs,com.android.internal.R.styleable.SystemCodeFilter);
        systemCode=a.getString(com.android.internal.R.styleable.SystemCodeFilter_name).toUpperCase();
        if (!NfcFCardEmulation.isValidSystemCode(systemCode) && !systemCode.equalsIgnoreCase("NULL")) {
          Log.e(TAG,"Invalid System Code: " + systemCode);
          systemCode=null;
        }
        a.recycle();
      }
 else       if (eventType == XmlPullParser.START_TAG && "nfcid2-filter".equals(tagName) && nfcid2 == null) {
        final TypedArray a=res.obtainAttributes(attrs,com.android.internal.R.styleable.Nfcid2Filter);
        nfcid2=a.getString(com.android.internal.R.styleable.Nfcid2Filter_name).toUpperCase();
        if (!nfcid2.equalsIgnoreCase("RANDOM") && !nfcid2.equalsIgnoreCase("NULL") && !NfcFCardEmulation.isValidNfcid2(nfcid2)) {
          Log.e(TAG,"Invalid NFCID2: " + nfcid2);
          nfcid2=null;
        }
        a.recycle();
      }
    }
    mSystemCode=(systemCode == null ? "NULL" : systemCode);
    mNfcid2=(nfcid2 == null ? "NULL" : nfcid2);
  }
 catch (  NameNotFoundException e) {
    throw new XmlPullParserException("Unable to create context for: " + si.packageName);
  }
 finally {
    if (parser != null)     parser.close();
  }
  mUid=si.applicationInfo.uid;
}
