{
  if (implementsV2API()) {
    throw new IllegalStateException("For proper V2 API implementation this method has to" + "  be implemented");
  }
  Bundle defaultParams=new Bundle();
  defaultParams.putFloat(TextToSpeechClient.Params.SPEECH_PITCH,1.0f);
  defaultParams.putFloat(TextToSpeechClient.Params.SPEECH_SPEED,-1.0f);
  ArrayList<VoiceInfo> voicesInfo=new ArrayList<VoiceInfo>();
  int id=0;
  for (  Locale locale : Locale.getAvailableLocales()) {
    int expectedStatus=TextToSpeech.LANG_COUNTRY_VAR_AVAILABLE;
    if (locale.getVariant().isEmpty()) {
      if (locale.getCountry().isEmpty()) {
        expectedStatus=TextToSpeech.LANG_AVAILABLE;
      }
 else {
        expectedStatus=TextToSpeech.LANG_COUNTRY_AVAILABLE;
      }
    }
    try {
      int localeStatus=onIsLanguageAvailable(locale.getISO3Language(),locale.getISO3Country(),locale.getVariant());
      if (localeStatus != expectedStatus) {
        continue;
      }
    }
 catch (    MissingResourceException e) {
      continue;
    }
    Set<String> features=onGetFeaturesForLanguage(locale.getISO3Language(),locale.getISO3Country(),locale.getVariant());
    VoiceInfo.Builder builder=new VoiceInfo.Builder();
    builder.setLatency(VoiceInfo.LATENCY_NORMAL);
    builder.setQuality(VoiceInfo.QUALITY_NORMAL);
    builder.setLocale(locale);
    builder.setParamsWithDefaults(defaultParams);
    if (features == null || features.contains(TextToSpeech.Engine.KEY_FEATURE_EMBEDDED_SYNTHESIS)) {
      builder.setName(locale.toString() + "-embedded");
      builder.setRequiresNetworkConnection(false);
      voicesInfo.add(builder.build());
    }
    if (features != null && features.contains(TextToSpeech.Engine.KEY_FEATURE_NETWORK_SYNTHESIS)) {
      builder.setName(locale.toString() + "-network");
      builder.setRequiresNetworkConnection(true);
      voicesInfo.add(builder.build());
    }
  }
  return voicesInfo;
}
