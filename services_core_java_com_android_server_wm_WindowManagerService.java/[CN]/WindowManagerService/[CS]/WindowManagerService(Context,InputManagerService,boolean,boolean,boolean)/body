{
  mContext=context;
  mHaveInputMethods=haveInputMethods;
  mAllowBootMessages=showBootMsgs;
  mOnlyCore=onlyCore;
  mLimitedAlphaCompositing=context.getResources().getBoolean(com.android.internal.R.bool.config_sf_limitedAlpha);
  mHasPermanentDpad=context.getResources().getBoolean(com.android.internal.R.bool.config_hasPermanentDpad);
  mInTouchMode=context.getResources().getBoolean(com.android.internal.R.bool.config_defaultInTouchMode);
  mDrawLockTimeoutMillis=context.getResources().getInteger(com.android.internal.R.integer.config_drawLockTimeoutMillis);
  mAllowAnimationsInLowPowerMode=context.getResources().getBoolean(com.android.internal.R.bool.config_allowAnimationsInLowPowerMode);
  mInputManager=inputManager;
  mDisplayManagerInternal=LocalServices.getService(DisplayManagerInternal.class);
  mDisplaySettings=new DisplaySettings();
  mDisplaySettings.readSettingsLocked();
  mWallpaperControllerLocked=new WallpaperController(this);
  mWindowPlacerLocked=new WindowSurfacePlacer(this);
  mLayersController=new WindowLayersController(this);
  LocalServices.addService(WindowManagerPolicy.class,mPolicy);
  mPointerEventDispatcher=new PointerEventDispatcher(mInputManager.monitorInput(TAG_WM));
  mFxSession=new SurfaceSession();
  mDisplayManager=(DisplayManager)context.getSystemService(Context.DISPLAY_SERVICE);
  mDisplays=mDisplayManager.getDisplays();
  for (  Display display : mDisplays) {
    createDisplayContentLocked(display);
  }
  mKeyguardDisableHandler=new KeyguardDisableHandler(mContext,mPolicy);
  mPowerManager=(PowerManager)context.getSystemService(Context.POWER_SERVICE);
  mPowerManagerInternal=LocalServices.getService(PowerManagerInternal.class);
  mPowerManagerInternal.registerLowPowerModeObserver(new PowerManagerInternal.LowPowerModeListener(){
    @Override public void onLowPowerModeChanged(    boolean enabled){
synchronized (mWindowMap) {
        if (mAnimationsDisabled != enabled && !mAllowAnimationsInLowPowerMode) {
          mAnimationsDisabled=enabled;
          dispatchNewAnimatorScaleLocked(null);
        }
      }
    }
  }
);
  mAnimationsDisabled=mPowerManagerInternal.getLowPowerModeEnabled();
  mScreenFrozenLock=mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,"SCREEN_FROZEN");
  mScreenFrozenLock.setReferenceCounted(false);
  mAppTransition=new AppTransition(context,this);
  mAppTransition.registerListenerLocked(mActivityManagerAppTransitionNotifier);
  mActivityManager=ActivityManagerNative.getDefault();
  mAmInternal=LocalServices.getService(ActivityManagerInternal.class);
  mAppOps=(AppOpsManager)context.getSystemService(Context.APP_OPS_SERVICE);
  AppOpsManager.OnOpChangedInternalListener opListener=new AppOpsManager.OnOpChangedInternalListener(){
    @Override public void onOpChanged(    int op,    String packageName){
      updateAppOpsState();
    }
  }
;
  mAppOps.startWatchingMode(AppOpsManager.OP_SYSTEM_ALERT_WINDOW,null,opListener);
  mAppOps.startWatchingMode(AppOpsManager.OP_TOAST_WINDOW,null,opListener);
  mWindowAnimationScaleSetting=Settings.Global.getFloat(context.getContentResolver(),Settings.Global.WINDOW_ANIMATION_SCALE,mWindowAnimationScaleSetting);
  mTransitionAnimationScaleSetting=Settings.Global.getFloat(context.getContentResolver(),Settings.Global.TRANSITION_ANIMATION_SCALE,mTransitionAnimationScaleSetting);
  setAnimatorDurationScale(Settings.Global.getFloat(context.getContentResolver(),Settings.Global.ANIMATOR_DURATION_SCALE,mAnimatorDurationScaleSetting));
  IntentFilter filter=new IntentFilter();
  filter.addAction(DevicePolicyManager.ACTION_DEVICE_POLICY_MANAGER_STATE_CHANGED);
  mContext.registerReceiver(mBroadcastReceiver,filter);
  mSettingsObserver=new SettingsObserver();
  mHoldingScreenWakeLock=mPowerManager.newWakeLock(PowerManager.SCREEN_BRIGHT_WAKE_LOCK | PowerManager.ON_AFTER_RELEASE,TAG_WM);
  mHoldingScreenWakeLock.setReferenceCounted(false);
  mAnimator=new WindowAnimator(this);
  mAllowTheaterModeWakeFromLayout=context.getResources().getBoolean(com.android.internal.R.bool.config_allowTheaterModeWakeFromWindowLayout);
  LocalServices.addService(WindowManagerInternal.class,new LocalService());
  initPolicy();
  Watchdog.getInstance().addMonitor(this);
  SurfaceControl.openTransaction();
  try {
    createWatermarkInTransaction();
  }
  finally {
    SurfaceControl.closeTransaction();
  }
  showEmulatorDisplayOverlayIfNeeded();
}
