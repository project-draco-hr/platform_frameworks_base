{
  final WindowToken token=win.mToken;
  final DisplayContent displayContent=win.getDisplayContent();
  if (displayContent == null) {
    return;
  }
  final WindowState attached=win.mAttachedWindow;
  WindowList tokenWindowList=getTokenWindowsOnDisplay(token,displayContent);
  final int NA=tokenWindowList.size();
  final int sublayer=win.mSubLayer;
  int largestSublayer=Integer.MIN_VALUE;
  WindowState windowWithLargestSublayer=null;
  int i;
  for (i=0; i < NA; i++) {
    WindowState w=tokenWindowList.get(i);
    final int wSublayer=w.mSubLayer;
    if (wSublayer >= largestSublayer) {
      largestSublayer=wSublayer;
      windowWithLargestSublayer=w;
    }
    if (sublayer < 0) {
      if (wSublayer >= sublayer) {
        if (addToToken) {
          if (DEBUG_ADD_REMOVE)           Slog.v(TAG,"Adding " + win + " to "+ token);
          token.windows.add(i,win);
        }
        placeWindowBefore(wSublayer >= 0 ? attached : w,win);
        break;
      }
    }
 else {
      if (wSublayer > sublayer) {
        if (addToToken) {
          if (DEBUG_ADD_REMOVE)           Slog.v(TAG,"Adding " + win + " to "+ token);
          token.windows.add(i,win);
        }
        placeWindowBefore(w,win);
        break;
      }
    }
  }
  if (i >= NA) {
    if (addToToken) {
      if (DEBUG_ADD_REMOVE)       Slog.v(TAG,"Adding " + win + " to "+ token);
      token.windows.add(win);
    }
    if (sublayer < 0) {
      placeWindowBefore(attached,win);
    }
 else {
      placeWindowAfter(largestSublayer >= 0 ? windowWithLargestSublayer : attached,win);
    }
  }
}
