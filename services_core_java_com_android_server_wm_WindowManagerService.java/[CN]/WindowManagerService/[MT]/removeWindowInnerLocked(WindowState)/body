{
  if (win.mRemoved) {
    return;
  }
  for (int i=win.mChildWindows.size() - 1; i >= 0; i--) {
    WindowState cwin=win.mChildWindows.get(i);
    Slog.w(TAG_WM,"Force-removing child win " + cwin + " from container "+ win);
    removeWindowInnerLocked(cwin);
  }
  win.mRemoved=true;
  if (mInputMethodTarget == win) {
    moveInputMethodWindowsIfNeededLocked(false);
  }
  if (false) {
    RuntimeException e=new RuntimeException("here");
    e.fillInStackTrace();
    Slog.w(TAG_WM,"Removing window " + win,e);
  }
  final int type=win.mAttrs.type;
  if (type == TYPE_STATUS_BAR || type == TYPE_NAVIGATION_BAR) {
    final DisplayContent displaycontent=win.getDisplayContent();
    displaycontent.mTapExcludedWindows.remove(win);
  }
  mPolicy.removeWindowLw(win);
  win.removeLocked();
  if (DEBUG_ADD_REMOVE)   Slog.v(TAG_WM,"removeWindowInnerLocked: " + win);
  mWindowMap.remove(win.mClient.asBinder());
  if (win.mAppOp != AppOpsManager.OP_NONE) {
    mAppOps.finishOp(win.mAppOp,win.getOwningUid(),win.getOwningPackage());
  }
  mPendingRemove.remove(win);
  mResizingWindows.remove(win);
  mWindowsChanged=true;
  if (DEBUG_WINDOW_MOVEMENT)   Slog.v(TAG_WM,"Final remove of window: " + win);
  if (mInputMethodWindow == win) {
    mInputMethodWindow=null;
  }
 else   if (win.mAttrs.type == TYPE_INPUT_METHOD_DIALOG) {
    mInputMethodDialogs.remove(win);
  }
  final WindowToken token=win.mToken;
  final AppWindowToken atoken=win.mAppToken;
  if (DEBUG_ADD_REMOVE)   Slog.v(TAG_WM,"Removing " + win + " from "+ token);
  token.windows.remove(win);
  if (atoken != null) {
    atoken.allAppWindows.remove(win);
  }
  if (localLOGV)   Slog.v(TAG_WM,"**** Removing window " + win + ": count="+ token.windows.size());
  if (token.windows.size() == 0) {
    if (!token.explicit) {
      mTokenMap.remove(token.token);
    }
 else     if (atoken != null) {
      atoken.firstWindowDrawn=false;
    }
  }
  if (atoken != null) {
    if (atoken.startingWindow == win) {
      if (DEBUG_STARTING_WINDOW)       Slog.v(TAG_WM,"Notify removed startingWindow " + win);
      scheduleRemoveStartingWindowLocked(atoken);
    }
 else     if (atoken.allAppWindows.size() == 0 && atoken.startingData != null) {
      if (DEBUG_STARTING_WINDOW)       Slog.v(TAG_WM,"Nulling last startingWindow");
      atoken.startingData=null;
    }
 else     if (atoken.allAppWindows.size() == 1 && atoken.startingView != null) {
      scheduleRemoveStartingWindowLocked(atoken);
    }
  }
  if (type == TYPE_WALLPAPER) {
    mWallpaperControllerLocked.clearLastWallpaperTimeoutTime();
    getDefaultDisplayContentLocked().pendingLayoutChanges|=WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER;
  }
 else   if ((win.mAttrs.flags & FLAG_SHOW_WALLPAPER) != 0) {
    getDefaultDisplayContentLocked().pendingLayoutChanges|=WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER;
  }
  final WindowList windows=win.getWindowList();
  if (windows != null) {
    windows.remove(win);
    if (!mWindowPlacerLocked.isInLayout()) {
      assignLayersLocked(windows);
      win.setDisplayLayoutNeeded();
      mWindowPlacerLocked.performSurfacePlacement();
      if (win.mAppToken != null) {
        win.mAppToken.updateReportedVisibilityLocked();
      }
    }
  }
  mInputMonitor.updateInputWindowsLw(true);
}
