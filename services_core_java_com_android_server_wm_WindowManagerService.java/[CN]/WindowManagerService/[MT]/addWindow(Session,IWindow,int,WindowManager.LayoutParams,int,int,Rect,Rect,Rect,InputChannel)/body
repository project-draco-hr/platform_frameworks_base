{
  int[] appOp=new int[1];
  int res=mPolicy.checkAddPermission(attrs,appOp);
  if (res != WindowManagerGlobal.ADD_OKAY) {
    return res;
  }
  boolean reportNewConfig=false;
  WindowState attachedWindow=null;
  long origId;
  final int type=attrs.type;
synchronized (mWindowMap) {
    if (!mDisplayReady) {
      throw new IllegalStateException("Display has not been initialialized");
    }
    final DisplayContent displayContent=getDisplayContentLocked(displayId);
    if (displayContent == null) {
      Slog.w(TAG_WM,"Attempted to add window to a display that does not exist: " + displayId + ".  Aborting.");
      return WindowManagerGlobal.ADD_INVALID_DISPLAY;
    }
    if (!displayContent.hasAccess(session.mUid)) {
      Slog.w(TAG_WM,"Attempted to add window to a display for which the application " + "does not have access: " + displayId + ".  Aborting.");
      return WindowManagerGlobal.ADD_INVALID_DISPLAY;
    }
    if (mWindowMap.containsKey(client.asBinder())) {
      Slog.w(TAG_WM,"Window " + client + " is already added");
      return WindowManagerGlobal.ADD_DUPLICATE_ADD;
    }
    if (type >= FIRST_SUB_WINDOW && type <= LAST_SUB_WINDOW) {
      attachedWindow=windowForClientLocked(null,attrs.token,false);
      if (attachedWindow == null) {
        Slog.w(TAG_WM,"Attempted to add window with token that is not a window: " + attrs.token + ".  Aborting.");
        return WindowManagerGlobal.ADD_BAD_SUBWINDOW_TOKEN;
      }
      if (attachedWindow.mAttrs.type >= FIRST_SUB_WINDOW && attachedWindow.mAttrs.type <= LAST_SUB_WINDOW) {
        Slog.w(TAG_WM,"Attempted to add window with token that is a sub-window: " + attrs.token + ".  Aborting.");
        return WindowManagerGlobal.ADD_BAD_SUBWINDOW_TOKEN;
      }
    }
    if (type == TYPE_PRIVATE_PRESENTATION && !displayContent.isPrivate()) {
      Slog.w(TAG_WM,"Attempted to add private presentation window to a non-private display.  Aborting.");
      return WindowManagerGlobal.ADD_PERMISSION_DENIED;
    }
    boolean addToken=false;
    WindowToken token=mTokenMap.get(attrs.token);
    AppWindowToken atoken=null;
    if (token == null) {
      if (type >= FIRST_APPLICATION_WINDOW && type <= LAST_APPLICATION_WINDOW) {
        Slog.w(TAG_WM,"Attempted to add application window with unknown token " + attrs.token + ".  Aborting.");
        return WindowManagerGlobal.ADD_BAD_APP_TOKEN;
      }
      if (type == TYPE_INPUT_METHOD) {
        Slog.w(TAG_WM,"Attempted to add input method window with unknown token " + attrs.token + ".  Aborting.");
        return WindowManagerGlobal.ADD_BAD_APP_TOKEN;
      }
      if (type == TYPE_VOICE_INTERACTION) {
        Slog.w(TAG_WM,"Attempted to add voice interaction window with unknown token " + attrs.token + ".  Aborting.");
        return WindowManagerGlobal.ADD_BAD_APP_TOKEN;
      }
      if (type == TYPE_WALLPAPER) {
        Slog.w(TAG_WM,"Attempted to add wallpaper window with unknown token " + attrs.token + ".  Aborting.");
        return WindowManagerGlobal.ADD_BAD_APP_TOKEN;
      }
      if (type == TYPE_DREAM) {
        Slog.w(TAG_WM,"Attempted to add Dream window with unknown token " + attrs.token + ".  Aborting.");
        return WindowManagerGlobal.ADD_BAD_APP_TOKEN;
      }
      if (type == TYPE_QS_DIALOG) {
        Slog.w(TAG_WM,"Attempted to add QS dialog window with unknown token " + attrs.token + ".  Aborting.");
        return WindowManagerGlobal.ADD_BAD_APP_TOKEN;
      }
      if (type == TYPE_ACCESSIBILITY_OVERLAY) {
        Slog.w(TAG_WM,"Attempted to add Accessibility overlay window with unknown token " + attrs.token + ".  Aborting.");
        return WindowManagerGlobal.ADD_BAD_APP_TOKEN;
      }
      token=new WindowToken(this,attrs.token,-1,false);
      addToken=true;
    }
 else     if (type >= FIRST_APPLICATION_WINDOW && type <= LAST_APPLICATION_WINDOW) {
      atoken=token.appWindowToken;
      if (atoken == null) {
        Slog.w(TAG_WM,"Attempted to add window with non-application token " + token + ".  Aborting.");
        return WindowManagerGlobal.ADD_NOT_APP_TOKEN;
      }
 else       if (atoken.removed) {
        Slog.w(TAG_WM,"Attempted to add window with exiting application token " + token + ".  Aborting.");
        return WindowManagerGlobal.ADD_APP_EXITING;
      }
      if (type == TYPE_APPLICATION_STARTING && atoken.firstWindowDrawn) {
        if (DEBUG_STARTING_WINDOW || localLOGV)         Slog.v(TAG_WM,"**** NO NEED TO START: " + attrs.getTitle());
        return WindowManagerGlobal.ADD_STARTING_NOT_NEEDED;
      }
    }
 else     if (type == TYPE_INPUT_METHOD) {
      if (token.windowType != TYPE_INPUT_METHOD) {
        Slog.w(TAG_WM,"Attempted to add input method window with bad token " + attrs.token + ".  Aborting.");
        return WindowManagerGlobal.ADD_BAD_APP_TOKEN;
      }
    }
 else     if (type == TYPE_VOICE_INTERACTION) {
      if (token.windowType != TYPE_VOICE_INTERACTION) {
        Slog.w(TAG_WM,"Attempted to add voice interaction window with bad token " + attrs.token + ".  Aborting.");
        return WindowManagerGlobal.ADD_BAD_APP_TOKEN;
      }
    }
 else     if (type == TYPE_WALLPAPER) {
      if (token.windowType != TYPE_WALLPAPER) {
        Slog.w(TAG_WM,"Attempted to add wallpaper window with bad token " + attrs.token + ".  Aborting.");
        return WindowManagerGlobal.ADD_BAD_APP_TOKEN;
      }
    }
 else     if (type == TYPE_DREAM) {
      if (token.windowType != TYPE_DREAM) {
        Slog.w(TAG_WM,"Attempted to add Dream window with bad token " + attrs.token + ".  Aborting.");
        return WindowManagerGlobal.ADD_BAD_APP_TOKEN;
      }
    }
 else     if (type == TYPE_ACCESSIBILITY_OVERLAY) {
      if (token.windowType != TYPE_ACCESSIBILITY_OVERLAY) {
        Slog.w(TAG_WM,"Attempted to add Accessibility overlay window with bad token " + attrs.token + ".  Aborting.");
        return WindowManagerGlobal.ADD_BAD_APP_TOKEN;
      }
    }
 else     if (type == TYPE_QS_DIALOG) {
      if (token.windowType != TYPE_QS_DIALOG) {
        Slog.w(TAG_WM,"Attempted to add QS dialog window with bad token " + attrs.token + ".  Aborting.");
        return WindowManagerGlobal.ADD_BAD_APP_TOKEN;
      }
    }
 else     if (token.appWindowToken != null) {
      Slog.w(TAG_WM,"Non-null appWindowToken for system window of type=" + type);
      attrs.token=null;
      token=new WindowToken(this,null,-1,false);
      addToken=true;
    }
    WindowState win=new WindowState(this,session,client,token,attachedWindow,appOp[0],seq,attrs,viewVisibility,displayContent);
    if (win.mDeathRecipient == null) {
      Slog.w(TAG_WM,"Adding window client " + client.asBinder() + " that is dead, aborting.");
      return WindowManagerGlobal.ADD_APP_EXITING;
    }
    if (win.getDisplayContent() == null) {
      Slog.w(TAG_WM,"Adding window to Display that has been removed.");
      return WindowManagerGlobal.ADD_INVALID_DISPLAY;
    }
    mPolicy.adjustWindowParamsLw(win.mAttrs);
    win.setShowToOwnerOnlyLocked(mPolicy.checkShowToOwnerOnly(attrs));
    res=mPolicy.prepareAddWindowLw(win,attrs);
    if (res != WindowManagerGlobal.ADD_OKAY) {
      return res;
    }
    final boolean openInputChannels=(outInputChannel != null && (attrs.inputFeatures & INPUT_FEATURE_NO_INPUT_CHANNEL) == 0);
    if (openInputChannels) {
      win.openInputChannel(outInputChannel);
    }
    res=WindowManagerGlobal.ADD_OKAY;
    if (excludeWindowTypeFromTapOutTask(type)) {
      displayContent.mTapExcludedWindows.add(win);
    }
    origId=Binder.clearCallingIdentity();
    if (addToken) {
      mTokenMap.put(attrs.token,token);
    }
    win.attach();
    mWindowMap.put(client.asBinder(),win);
    if (win.mAppOp != AppOpsManager.OP_NONE) {
      int startOpResult=mAppOps.startOpNoThrow(win.mAppOp,win.getOwningUid(),win.getOwningPackage());
      if ((startOpResult != AppOpsManager.MODE_ALLOWED) && (startOpResult != AppOpsManager.MODE_DEFAULT)) {
        win.setAppOpVisibilityLw(false);
      }
    }
    if (type == TYPE_APPLICATION_STARTING && token.appWindowToken != null) {
      token.appWindowToken.startingWindow=win;
      if (DEBUG_STARTING_WINDOW)       Slog.v(TAG_WM,"addWindow: " + token.appWindowToken + " startingWindow="+ win);
    }
    boolean imMayMove=true;
    if (type == TYPE_INPUT_METHOD) {
      win.mGivenInsetsPending=true;
      mInputMethodWindow=win;
      addInputMethodWindowToListLocked(win);
      imMayMove=false;
    }
 else     if (type == TYPE_INPUT_METHOD_DIALOG) {
      mInputMethodDialogs.add(win);
      addWindowToListInOrderLocked(win,true);
      moveInputMethodDialogsLocked(findDesiredInputMethodWindowIndexLocked(true));
      imMayMove=false;
    }
 else {
      addWindowToListInOrderLocked(win,true);
      if (type == TYPE_WALLPAPER) {
        mWallpaperControllerLocked.clearLastWallpaperTimeoutTime();
        displayContent.pendingLayoutChanges|=FINISH_LAYOUT_REDO_WALLPAPER;
      }
 else       if ((attrs.flags & FLAG_SHOW_WALLPAPER) != 0) {
        displayContent.pendingLayoutChanges|=FINISH_LAYOUT_REDO_WALLPAPER;
      }
 else       if (mWallpaperControllerLocked.isBelowWallpaperTarget(win)) {
        displayContent.pendingLayoutChanges|=FINISH_LAYOUT_REDO_WALLPAPER;
      }
    }
    win.applyScrollIfNeeded();
    win.applyAdjustForImeIfNeeded();
    if (type == TYPE_DOCK_DIVIDER) {
      getDefaultDisplayContentLocked().getDockedDividerController().setWindow(win);
    }
    final WindowStateAnimator winAnimator=win.mWinAnimator;
    winAnimator.mEnterAnimationPending=true;
    winAnimator.mEnteringAnimation=true;
    if (atoken != null && !prepareWindowReplacementTransition(atoken)) {
      prepareNoneTransitionForRelaunching(atoken);
    }
    if (displayContent.isDefaultDisplay) {
      final DisplayInfo displayInfo=displayContent.getDisplayInfo();
      final Rect taskBounds;
      if (atoken != null && atoken.mTask != null) {
        taskBounds=mTmpRect;
        atoken.mTask.getBounds(mTmpRect);
      }
 else {
        taskBounds=null;
      }
      if (mPolicy.getInsetHintLw(win.mAttrs,taskBounds,mRotation,displayInfo.logicalWidth,displayInfo.logicalHeight,outContentInsets,outStableInsets,outOutsets)) {
        res|=WindowManagerGlobal.ADD_FLAG_ALWAYS_CONSUME_NAV_BAR;
      }
    }
 else {
      outContentInsets.setEmpty();
      outStableInsets.setEmpty();
    }
    if (mInTouchMode) {
      res|=WindowManagerGlobal.ADD_FLAG_IN_TOUCH_MODE;
    }
    if (win.mAppToken == null || !win.mAppToken.clientHidden) {
      res|=WindowManagerGlobal.ADD_FLAG_APP_VISIBLE;
    }
    mInputMonitor.setUpdateInputWindowsNeededLw();
    boolean focusChanged=false;
    if (win.canReceiveKeys()) {
      focusChanged=updateFocusedWindowLocked(UPDATE_FOCUS_WILL_ASSIGN_LAYERS,false);
      if (focusChanged) {
        imMayMove=false;
      }
    }
    if (imMayMove) {
      moveInputMethodWindowsIfNeededLocked(false);
    }
    mLayersController.assignLayersLocked(displayContent.getWindowList());
    if (focusChanged) {
      mInputMonitor.setInputFocusLw(mCurrentFocus,false);
    }
    mInputMonitor.updateInputWindowsLw(false);
    if (localLOGV || DEBUG_ADD_REMOVE)     Slog.v(TAG_WM,"addWindow: New client " + client.asBinder() + ": window="+ win+ " Callers="+ Debug.getCallers(5));
    if (win.isVisibleOrAdding() && updateOrientationFromAppTokensLocked(false)) {
      reportNewConfig=true;
    }
    if (attrs.removeTimeoutMilliseconds > 0) {
      mH.sendMessageDelayed(mH.obtainMessage(H.WINDOW_REMOVE_TIMEOUT,win),attrs.removeTimeoutMilliseconds);
    }
  }
  if (reportNewConfig) {
    sendNewConfiguration();
  }
  Binder.restoreCallingIdentity(origId);
  return res;
}
