{
  final WindowSurfaceController surfaceController=winAnimator.mSurfaceController;
  boolean leakedSurface=false;
  boolean killedApps=false;
  EventLog.writeEvent(EventLogTags.WM_NO_SURFACE_MEMORY,winAnimator.mWin.toString(),winAnimator.mSession.mPid,operation);
  long callingIdentity=Binder.clearCallingIdentity();
  try {
    Slog.i(TAG,"Out of memory for surface!  Looking for leaks...");
    final int numDisplays=mDisplayContents.size();
    for (int displayNdx=0; displayNdx < numDisplays; ++displayNdx) {
      final WindowList windows=mDisplayContents.valueAt(displayNdx).getWindowList();
      final int numWindows=windows.size();
      for (int winNdx=0; winNdx < numWindows; ++winNdx) {
        final WindowState ws=windows.get(winNdx);
        WindowStateAnimator wsa=ws.mWinAnimator;
        if (wsa.mSurfaceController != null) {
          if (!mSessions.contains(wsa.mSession)) {
            Slog.w(TAG,"LEAKED SURFACE (session doesn't exist): " + ws + " surface="+ wsa.mSurfaceController+ " token="+ ws.mToken+ " pid="+ ws.mSession.mPid+ " uid="+ ws.mSession.mUid);
            wsa.destroySurface();
            ws.setHasSurface(false);
            mForceRemoves.add(ws);
            leakedSurface=true;
          }
 else           if (ws.mAppToken != null && ws.mAppToken.clientHidden) {
            Slog.w(TAG,"LEAKED SURFACE (app token hidden): " + ws + " surface="+ wsa.mSurfaceController+ " token="+ ws.mAppToken+ " saved="+ ws.mAppToken.mHasSavedSurface);
            if (SHOW_TRANSACTIONS)             logSurface(ws,"LEAK DESTROY",null);
            wsa.destroySurface();
            ws.setHasSurface(false);
            ws.mAppToken.mHasSavedSurface=false;
            leakedSurface=true;
          }
        }
      }
    }
    if (!leakedSurface) {
      Slog.w(TAG,"No leaked surfaces; killing applicatons!");
      SparseIntArray pidCandidates=new SparseIntArray();
      for (int displayNdx=0; displayNdx < numDisplays; ++displayNdx) {
        final WindowList windows=mDisplayContents.valueAt(displayNdx).getWindowList();
        final int numWindows=windows.size();
        for (int winNdx=0; winNdx < numWindows; ++winNdx) {
          final WindowState ws=windows.get(winNdx);
          if (mForceRemoves.contains(ws)) {
            continue;
          }
          WindowStateAnimator wsa=ws.mWinAnimator;
          if (wsa.mSurfaceController != null) {
            pidCandidates.append(wsa.mSession.mPid,wsa.mSession.mPid);
          }
        }
        if (pidCandidates.size() > 0) {
          int[] pids=new int[pidCandidates.size()];
          for (int i=0; i < pids.length; i++) {
            pids[i]=pidCandidates.keyAt(i);
          }
          try {
            if (mActivityManager.killPids(pids,"Free memory",secure)) {
              killedApps=true;
            }
          }
 catch (          RemoteException e) {
          }
        }
      }
    }
    if (leakedSurface || killedApps) {
      Slog.w(TAG,"Looks like we have reclaimed some memory, clearing surface for retry.");
      if (surfaceController != null) {
        if (SHOW_TRANSACTIONS || SHOW_SURFACE_ALLOC)         logSurface(winAnimator.mWin,"RECOVER DESTROY",null);
        surfaceController.destroyInTransaction();
        winAnimator.mWin.setHasSurface(false);
        scheduleRemoveStartingWindowLocked(winAnimator.mWin.mAppToken);
      }
      try {
        winAnimator.mWin.mClient.dispatchGetNewSurface();
      }
 catch (      RemoteException e) {
      }
    }
  }
  finally {
    Binder.restoreCallingIdentity(callingIdentity);
  }
  return leakedSurface || killedApps;
}
