{
  final IWindow client=win.mClient;
  final WindowToken token=win.mToken;
  final DisplayContent displayContent=win.getDisplayContent();
  if (displayContent == null) {
    return 0;
  }
  final WindowList windows=win.getWindowList();
  final int N=windows.size();
  WindowList tokenWindowList=getTokenWindowsOnDisplay(token,displayContent);
  int tokenWindowsPos=0;
  int windowListPos=tokenWindowList.size();
  if (!tokenWindowList.isEmpty()) {
    if (win.mAttrs.type == TYPE_BASE_APPLICATION) {
      WindowState lowestWindow=tokenWindowList.get(0);
      placeWindowBefore(lowestWindow,win);
      tokenWindowsPos=indexOfWinInWindowList(lowestWindow,token.windows);
    }
 else {
      AppWindowToken atoken=win.mAppToken;
      WindowState lastWindow=tokenWindowList.get(windowListPos - 1);
      if (atoken != null && lastWindow == atoken.startingWindow) {
        placeWindowBefore(lastWindow,win);
        tokenWindowsPos=indexOfWinInWindowList(lastWindow,token.windows);
      }
 else {
        int newIdx=findIdxBasedOnAppTokens(win);
        if (true || DEBUG_FOCUS_LIGHT || DEBUG_WINDOW_MOVEMENT|| DEBUG_ADD_REMOVE)         Slog.v(TAG,"not Base app: Adding window " + win + " at "+ (newIdx + 1)+ " of "+ N);
        windows.add(newIdx + 1,win);
        if (newIdx < 0) {
          tokenWindowsPos=0;
        }
 else {
          tokenWindowsPos=indexOfWinInWindowList(windows.get(newIdx),token.windows) + 1;
        }
        mWindowsChanged=true;
      }
    }
    return tokenWindowsPos;
  }
  if (localLOGV)   Slog.v(TAG,"Figuring out where to add app window " + client.asBinder() + " (token="+ token+ ")");
  WindowState pos=null;
  final ArrayList<Task> tasks=displayContent.getTasks();
  int taskNdx;
  int tokenNdx=-1;
  for (taskNdx=tasks.size() - 1; taskNdx >= 0; --taskNdx) {
    AppTokenList tokens=tasks.get(taskNdx).mAppTokens;
    for (tokenNdx=tokens.size() - 1; tokenNdx >= 0; --tokenNdx) {
      final AppWindowToken t=tokens.get(tokenNdx);
      if (t == token) {
        --tokenNdx;
        if (tokenNdx < 0) {
          --taskNdx;
          if (taskNdx >= 0) {
            tokenNdx=tasks.get(taskNdx).mAppTokens.size() - 1;
          }
        }
        break;
      }
      tokenWindowList=getTokenWindowsOnDisplay(t,displayContent);
      if (!t.sendingToBottom && tokenWindowList.size() > 0) {
        pos=tokenWindowList.get(0);
      }
    }
    if (tokenNdx >= 0) {
      break;
    }
  }
  if (pos != null) {
    WindowToken atoken=mTokenMap.get(pos.mClient.asBinder());
    if (atoken != null) {
      tokenWindowList=getTokenWindowsOnDisplay(atoken,displayContent);
      final int NC=tokenWindowList.size();
      if (NC > 0) {
        WindowState bottom=tokenWindowList.get(0);
        if (bottom.mSubLayer < 0) {
          pos=bottom;
        }
      }
    }
    placeWindowBefore(pos,win);
    return tokenWindowsPos;
  }
  for (; taskNdx >= 0; --taskNdx) {
    AppTokenList tokens=tasks.get(taskNdx).mAppTokens;
    for (; tokenNdx >= 0; --tokenNdx) {
      final AppWindowToken t=tokens.get(tokenNdx);
      tokenWindowList=getTokenWindowsOnDisplay(t,displayContent);
      final int NW=tokenWindowList.size();
      if (NW > 0) {
        pos=tokenWindowList.get(NW - 1);
        break;
      }
    }
    if (tokenNdx >= 0) {
      break;
    }
  }
  if (pos != null) {
    WindowToken atoken=mTokenMap.get(pos.mClient.asBinder());
    if (atoken != null) {
      final int NC=atoken.windows.size();
      if (NC > 0) {
        WindowState top=atoken.windows.get(NC - 1);
        if (top.mSubLayer >= 0) {
          pos=top;
        }
      }
    }
    placeWindowAfter(pos,win);
    return tokenWindowsPos;
  }
  final int myLayer=win.mBaseLayer;
  int i;
  for (i=0; i < N; i++) {
    WindowState w=windows.get(i);
    if (w.mBaseLayer > myLayer) {
      break;
    }
  }
  if (true || DEBUG_FOCUS_LIGHT || DEBUG_WINDOW_MOVEMENT|| DEBUG_ADD_REMOVE)   Slog.v(TAG,"Based on layer: Adding window " + win + " at "+ i+ " of "+ N);
  windows.add(i,win);
  mWindowsChanged=true;
  return tokenWindowsPos;
}
