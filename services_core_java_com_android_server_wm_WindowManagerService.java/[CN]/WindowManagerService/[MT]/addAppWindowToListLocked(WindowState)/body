{
  final DisplayContent displayContent=win.getDisplayContent();
  if (displayContent == null) {
    return 0;
  }
  final IWindow client=win.mClient;
  final WindowToken token=win.mToken;
  final WindowList windows=displayContent.getWindowList();
  WindowList tokenWindowList=getTokenWindowsOnDisplay(token,displayContent);
  int tokenWindowsPos=0;
  if (!tokenWindowList.isEmpty()) {
    return addAppWindowToTokenListLocked(win,token,windows,tokenWindowList);
  }
  if (localLOGV)   Slog.v(TAG_WM,"Figuring out where to add app window " + client.asBinder() + " (token="+ token+ ")");
  WindowState pos=null;
  final ArrayList<Task> tasks=displayContent.getTasks();
  int taskNdx;
  int tokenNdx=-1;
  for (taskNdx=tasks.size() - 1; taskNdx >= 0; --taskNdx) {
    AppTokenList tokens=tasks.get(taskNdx).mAppTokens;
    for (tokenNdx=tokens.size() - 1; tokenNdx >= 0; --tokenNdx) {
      final AppWindowToken t=tokens.get(tokenNdx);
      if (t == token) {
        --tokenNdx;
        if (tokenNdx < 0) {
          --taskNdx;
          if (taskNdx >= 0) {
            tokenNdx=tasks.get(taskNdx).mAppTokens.size() - 1;
          }
        }
        break;
      }
      tokenWindowList=getTokenWindowsOnDisplay(t,displayContent);
      if (!t.sendingToBottom && tokenWindowList.size() > 0) {
        pos=tokenWindowList.get(0);
      }
    }
    if (tokenNdx >= 0) {
      break;
    }
  }
  if (pos != null) {
    WindowToken atoken=mTokenMap.get(pos.mClient.asBinder());
    if (atoken != null) {
      tokenWindowList=getTokenWindowsOnDisplay(atoken,displayContent);
      final int NC=tokenWindowList.size();
      if (NC > 0) {
        WindowState bottom=tokenWindowList.get(0);
        if (bottom.mSubLayer < 0) {
          pos=bottom;
        }
      }
    }
    placeWindowBefore(pos,win);
    return tokenWindowsPos;
  }
  for (; taskNdx >= 0; --taskNdx) {
    AppTokenList tokens=tasks.get(taskNdx).mAppTokens;
    for (; tokenNdx >= 0; --tokenNdx) {
      final AppWindowToken t=tokens.get(tokenNdx);
      tokenWindowList=getTokenWindowsOnDisplay(t,displayContent);
      final int NW=tokenWindowList.size();
      if (NW > 0) {
        pos=tokenWindowList.get(NW - 1);
        break;
      }
    }
    if (tokenNdx >= 0) {
      break;
    }
  }
  if (pos != null) {
    WindowToken atoken=mTokenMap.get(pos.mClient.asBinder());
    if (atoken != null) {
      final int NC=atoken.windows.size();
      if (NC > 0) {
        WindowState top=atoken.windows.get(NC - 1);
        if (top.mSubLayer >= 0) {
          pos=top;
        }
      }
    }
    placeWindowAfter(pos,win);
    return tokenWindowsPos;
  }
  final int myLayer=win.mBaseLayer;
  int i;
  for (i=windows.size() - 1; i >= 0; --i) {
    WindowState w=windows.get(i);
    if (w.mBaseLayer <= myLayer && w.mAttrs.type != TYPE_DOCK_DIVIDER) {
      break;
    }
  }
  if (DEBUG_FOCUS_LIGHT || DEBUG_WINDOW_MOVEMENT || DEBUG_ADD_REMOVE)   Slog.v(TAG_WM,"Based on layer: Adding window " + win + " at "+ (i + 1)+ " of "+ windows.size());
  windows.add(i + 1,win);
  mWindowsChanged=true;
  return tokenWindowsPos;
}
