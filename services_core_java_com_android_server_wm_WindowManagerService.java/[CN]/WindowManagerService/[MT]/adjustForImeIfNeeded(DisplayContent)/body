{
  final WindowState imeWin=mInputMethodWindow;
  final boolean imeVisible=imeWin != null && imeWin.isVisibleLw() && imeWin.isDisplayedLw();
  final boolean dockVisible=isStackVisibleLocked(DOCKED_STACK_ID);
  final TaskStack imeTargetStack=getImeTargetStackLocked();
  final int imeDockSide=(dockVisible && imeTargetStack != null) ? imeTargetStack.getDockSide() : DOCKED_INVALID;
  final boolean imeOnTop=(imeDockSide == DOCKED_TOP);
  final boolean imeOnBottom=(imeDockSide == DOCKED_BOTTOM);
  final boolean dockMinimized=displayContent.mDividerControllerLocked.isMinimizedDock();
  if (imeVisible && dockVisible && (imeOnTop || imeOnBottom)&& !dockMinimized) {
    final ArrayList<TaskStack> stacks=displayContent.getStacks();
    for (int i=stacks.size() - 1; i >= 0; --i) {
      final TaskStack stack=stacks.get(i);
      final boolean isDockedOnBottom=stack.getDockSide() == DOCKED_BOTTOM;
      if (stack.isVisibleLocked() && (imeOnBottom || isDockedOnBottom)) {
        stack.setAdjustedForIme(imeWin);
      }
 else {
        stack.resetAdjustedForIme(false);
      }
    }
    displayContent.mDividerControllerLocked.setAdjustedForIme(imeOnBottom,true,true,imeWin);
  }
 else {
    final ArrayList<TaskStack> stacks=displayContent.getStacks();
    for (int i=stacks.size() - 1; i >= 0; --i) {
      final TaskStack stack=stacks.get(i);
      stack.resetAdjustedForIme(!dockVisible);
    }
    displayContent.mDividerControllerLocked.setAdjustedForIme(false,false,dockVisible,imeWin);
  }
}
