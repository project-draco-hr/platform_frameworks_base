{
synchronized (mWindowMap) {
    if (DEBUG_BOOT)     Slog.i(TAG,"performEnableScreen: mDisplayEnabled=" + mDisplayEnabled + " mForceDisplayEnabled="+ mForceDisplayEnabled+ " mShowingBootMessages="+ mShowingBootMessages+ " mSystemBooted="+ mSystemBooted+ " mOnlyCore="+ mOnlyCore,new RuntimeException("here").fillInStackTrace());
    if (mDisplayEnabled) {
      return;
    }
    if (!mSystemBooted && !mShowingBootMessages) {
      return;
    }
    if (!mForceDisplayEnabled && checkWaitingForWindowsLocked()) {
      return;
    }
    if (!mBootAnimationStopped) {
      try {
        IBinder surfaceFlinger=ServiceManager.getService("SurfaceFlinger");
        if (surfaceFlinger != null) {
          Parcel data=Parcel.obtain();
          data.writeInterfaceToken("android.ui.ISurfaceComposer");
          surfaceFlinger.transact(IBinder.FIRST_CALL_TRANSACTION,data,null,0);
          data.recycle();
        }
      }
 catch (      RemoteException ex) {
        Slog.e(TAG,"Boot completed: SurfaceFlinger is dead!");
      }
      mBootAnimationStopped=true;
    }
    if (!mForceDisplayEnabled && !checkBootAnimationCompleteLocked()) {
      if (DEBUG_BOOT)       Slog.i(TAG,"performEnableScreen: Waiting for anim complete");
      return;
    }
    mDisplayEnabled=true;
    if (DEBUG_SCREEN_ON || DEBUG_BOOT)     Slog.i(TAG,"******************** ENABLING SCREEN!");
    mInputMonitor.setEventDispatchingLw(mEventDispatchingEnabled);
  }
  try {
    mActivityManager.bootAnimationComplete();
  }
 catch (  RemoteException e) {
  }
  mPolicy.enableScreenAfterBoot();
  updateRotationUnchecked(false,false);
}
