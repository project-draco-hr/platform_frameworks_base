{
  final DisplayInfo displayInfo=updateDisplayAndOrientationLocked();
  if (displayInfo == null) {
    return false;
  }
  final int dw=displayInfo.logicalWidth;
  final int dh=displayInfo.logicalHeight;
  config.orientation=(dw <= dh) ? Configuration.ORIENTATION_PORTRAIT : Configuration.ORIENTATION_LANDSCAPE;
  config.screenWidthDp=(int)(mPolicy.getConfigDisplayWidth(dw,dh,mRotation) / mDisplayMetrics.density);
  config.screenHeightDp=(int)(mPolicy.getConfigDisplayHeight(dw,dh,mRotation) / mDisplayMetrics.density);
  final boolean rotated=(mRotation == Surface.ROTATION_90 || mRotation == Surface.ROTATION_270);
  computeSizeRangesAndScreenLayout(displayInfo,rotated,dw,dh,mDisplayMetrics.density,config);
  config.compatScreenWidthDp=(int)(config.screenWidthDp / mCompatibleScreenScale);
  config.compatScreenHeightDp=(int)(config.screenHeightDp / mCompatibleScreenScale);
  config.compatSmallestScreenWidthDp=computeCompatSmallestWidth(rotated,mDisplayMetrics,dw,dh);
  config.densityDpi=displayInfo.logicalDensityDpi;
  config.touchscreen=Configuration.TOUCHSCREEN_NOTOUCH;
  config.keyboard=Configuration.KEYBOARD_NOKEYS;
  config.navigation=Configuration.NAVIGATION_NONAV;
  int keyboardPresence=0;
  int navigationPresence=0;
  final InputDevice[] devices=mInputManager.getInputDevices();
  final int len=devices.length;
  for (int i=0; i < len; i++) {
    InputDevice device=devices[i];
    if (!device.isVirtual()) {
      final int sources=device.getSources();
      final int presenceFlag=device.isExternal() ? WindowManagerPolicy.PRESENCE_EXTERNAL : WindowManagerPolicy.PRESENCE_INTERNAL;
      if (mIsTouchDevice) {
        if ((sources & InputDevice.SOURCE_TOUCHSCREEN) == InputDevice.SOURCE_TOUCHSCREEN) {
          config.touchscreen=Configuration.TOUCHSCREEN_FINGER;
        }
      }
 else {
        config.touchscreen=Configuration.TOUCHSCREEN_NOTOUCH;
      }
      if ((sources & InputDevice.SOURCE_TRACKBALL) == InputDevice.SOURCE_TRACKBALL) {
        config.navigation=Configuration.NAVIGATION_TRACKBALL;
        navigationPresence|=presenceFlag;
      }
 else       if ((sources & InputDevice.SOURCE_DPAD) == InputDevice.SOURCE_DPAD && config.navigation == Configuration.NAVIGATION_NONAV) {
        config.navigation=Configuration.NAVIGATION_DPAD;
        navigationPresence|=presenceFlag;
      }
      if (device.getKeyboardType() == InputDevice.KEYBOARD_TYPE_ALPHABETIC) {
        config.keyboard=Configuration.KEYBOARD_QWERTY;
        keyboardPresence|=presenceFlag;
      }
    }
  }
  if (config.navigation == Configuration.NAVIGATION_NONAV && mHasPermanentDpad) {
    config.navigation=Configuration.NAVIGATION_DPAD;
    navigationPresence|=WindowManagerPolicy.PRESENCE_INTERNAL;
  }
  boolean hardKeyboardAvailable=config.keyboard != Configuration.KEYBOARD_NOKEYS;
  if (hardKeyboardAvailable != mHardKeyboardAvailable) {
    mHardKeyboardAvailable=hardKeyboardAvailable;
    mH.removeMessages(H.REPORT_HARD_KEYBOARD_STATUS_CHANGE);
    mH.sendEmptyMessage(H.REPORT_HARD_KEYBOARD_STATUS_CHANGE);
  }
  if (mShowImeWithHardKeyboard) {
    config.keyboard=Configuration.KEYBOARD_NOKEYS;
  }
  config.keyboardHidden=Configuration.KEYBOARDHIDDEN_NO;
  config.hardKeyboardHidden=Configuration.HARDKEYBOARDHIDDEN_NO;
  config.navigationHidden=Configuration.NAVIGATIONHIDDEN_NO;
  mPolicy.adjustConfigurationLw(config,keyboardPresence,navigationPresence);
  return true;
}
