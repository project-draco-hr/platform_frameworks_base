{
  boolean ok=true;
  for (int i=0; i < objects.length; i++) {
    if (objects[i] == null && refs[i] != null) {
      if (!refs[i].isEnqueued()) {
        ok=false;
      }
    }
  }
  if (!ok) {
    throw new RuntimeException("Test failed: " + "phantom refs not marked as enqueued");
  }
  PhantomReference<T> ref;
  while ((ref=(PhantomReference<T>)queue.poll()) != null) {
    int i;
    for (i=0; i < objects.length; i++) {
      if (refs[i] == ref) {
        break;
      }
    }
    if (i == objects.length) {
      throw new RuntimeException("Test failed: " + "unexpected ref on queue");
    }
    if (objects[i] != null) {
      throw new RuntimeException("Test failed: " + "reference enqueued for strongly-reachable " + "object");
    }
    refs[i]=null;
    ref.clear();
  }
  for (int i=0; i < objects.length; i++) {
    if (objects[i] == null && refs[i] != null) {
      ok=false;
    }
  }
  if (!ok) {
    throw new RuntimeException("Test failed: " + "phantom refs not enqueued");
  }
}
