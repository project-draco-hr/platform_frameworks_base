{
  if (DBG)   Log.d(TAG,"startLeScan(): " + serviceUuids);
  if (callback == null) {
    if (DBG)     Log.e(TAG,"startLeScan: null callback");
    return false;
  }
  BluetoothLeScanner scanner=getBluetoothLeScanner();
  if (scanner == null) {
    if (DBG)     Log.e(TAG,"startLeScan: cannot get BluetoothLeScanner");
    return false;
  }
synchronized (mLeScanClients) {
    if (mLeScanClients.containsKey(callback)) {
      if (DBG)       Log.e(TAG,"LE Scan has already started");
      return false;
    }
    try {
      IBluetoothGatt iGatt=mManagerService.getBluetoothGatt();
      if (iGatt == null) {
        return false;
      }
      ScanCallback scanCallback=new ScanCallback(){
        @Override public void onScanResult(        int callbackType,        ScanResult result){
          if (callbackType != ScanSettings.CALLBACK_TYPE_ALL_MATCHES) {
            Log.e(TAG,"LE Scan has already started");
            return;
          }
          ScanRecord scanRecord=result.getScanRecord();
          if (scanRecord == null) {
            return;
          }
          if (serviceUuids != null) {
            List<ParcelUuid> uuids=new ArrayList<ParcelUuid>();
            for (            UUID uuid : serviceUuids) {
              uuids.add(new ParcelUuid(uuid));
            }
            List<ParcelUuid> scanServiceUuids=scanRecord.getServiceUuids();
            if (scanServiceUuids == null || !scanServiceUuids.containsAll(uuids)) {
              if (DBG)               Log.d(TAG,"uuids does not match");
              return;
            }
          }
          callback.onLeScan(result.getDevice(),result.getRssi(),scanRecord.getBytes());
        }
      }
;
      ScanSettings settings=new ScanSettings.Builder().setCallbackType(ScanSettings.CALLBACK_TYPE_ALL_MATCHES).setScanMode(ScanSettings.SCAN_MODE_LOW_LATENCY).build();
      List<ScanFilter> filters=new ArrayList<ScanFilter>();
      if (serviceUuids != null && serviceUuids.length > 0) {
        ScanFilter filter=new ScanFilter.Builder().setServiceUuid(new ParcelUuid(serviceUuids[0])).build();
        filters.add(filter);
      }
      scanner.startScan(filters,settings,scanCallback);
      mLeScanClients.put(callback,scanCallback);
      return true;
    }
 catch (    RemoteException e) {
      Log.e(TAG,"",e);
    }
  }
  return false;
}
