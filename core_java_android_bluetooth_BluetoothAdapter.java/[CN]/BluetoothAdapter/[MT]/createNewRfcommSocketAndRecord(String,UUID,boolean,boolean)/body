{
  RfcommChannelPicker picker=new RfcommChannelPicker(uuid);
  BluetoothServerSocket socket;
  int channel;
  int errno;
  while (true) {
    channel=picker.nextChannel();
    if (channel == -1) {
      throw new IOException("No available channels");
    }
    socket=new BluetoothServerSocket(BluetoothSocket.TYPE_RFCOMM,auth,encrypt,channel);
    errno=socket.mSocket.bindListen();
    if (errno == 0) {
      if (DBG)       Log.d(TAG,"listening on RFCOMM channel " + channel);
      break;
    }
 else     if (errno == BluetoothSocket.EADDRINUSE) {
      if (DBG)       Log.d(TAG,"RFCOMM channel " + channel + " in use");
      try {
        socket.close();
      }
 catch (      IOException e) {
      }
      continue;
    }
 else {
      try {
        socket.close();
      }
 catch (      IOException e) {
      }
      socket.mSocket.throwErrnoNative(errno);
    }
  }
  int handle=-1;
  try {
    handle=mService.addRfcommServiceRecord(name,new ParcelUuid(uuid),channel,new Binder());
  }
 catch (  RemoteException e) {
    Log.e(TAG,"",e);
  }
  if (handle == -1) {
    try {
      socket.close();
    }
 catch (    IOException e) {
    }
    throw new IOException("Not able to register SDP record for " + name);
  }
  if (mServiceRecordHandler == null) {
    mServiceRecordHandler=new Handler(Looper.getMainLooper()){
      public void handleMessage(      Message msg){
        int handle=msg.what;
        try {
          if (DBG)           Log.d(TAG,"Removing service record " + Integer.toHexString(handle));
          mService.removeServiceRecord(handle);
        }
 catch (        RemoteException e) {
          Log.e(TAG,"",e);
        }
      }
    }
;
  }
  socket.setCloseHandler(mServiceRecordHandler,handle);
  return socket;
}
