{
  final LayoutParams lp=(LayoutParams)child.getLayoutParams();
  final int gravity=Gravity.getAbsoluteGravity(lp.gravity,getLayoutDirection());
  final boolean fixedLayoutSize=lp.centerWithinArea > 0;
  final boolean fixedLayoutHorizontal=fixedLayoutSize && mOrientation == HORIZONTAL;
  final boolean fixedLayoutVertical=fixedLayoutSize && mOrientation == VERTICAL;
  final int adjustedWidth;
  final int adjustedHeight;
  if (fixedLayoutHorizontal) {
    final int paddedWidth=width - padding.left - padding.right;
    adjustedWidth=(int)(paddedWidth * lp.centerWithinArea + 0.5f);
    adjustedHeight=height;
  }
 else   if (fixedLayoutVertical) {
    final int paddedHeight=height - padding.top - padding.bottom;
    adjustedWidth=width;
    adjustedHeight=(int)(paddedHeight * lp.centerWithinArea + 0.5f);
  }
 else {
    adjustedWidth=width;
    adjustedHeight=height;
  }
  final boolean isVertical=Gravity.isVertical(gravity);
  final boolean isHorizontal=Gravity.isHorizontal(gravity);
  final int childWidth=child.getMeasuredWidth();
  final int childHeight=child.getMeasuredHeight();
  int left=padding.left;
  int top=padding.top;
  int right=left + childWidth;
  int bottom=top + childHeight;
switch (gravity & Gravity.VERTICAL_GRAVITY_MASK) {
case Gravity.TOP:
    top=fixedLayoutVertical ? padding.top + (adjustedHeight - childHeight) / 2 : padding.top;
  bottom=top + childHeight;
if (adjustPadding && isVertical) {
  padding.top=bottom;
  padding.bottom+=childHeight / 2;
}
break;
case Gravity.BOTTOM:
bottom=fixedLayoutVertical ? height - padding.bottom - (adjustedHeight - childHeight) / 2 : height - padding.bottom;
top=bottom - childHeight;
if (adjustPadding && isVertical) {
padding.bottom=height - top;
padding.top+=childHeight / 2;
}
break;
case Gravity.CENTER_VERTICAL:
final int paddedHeight=height - padding.top - padding.bottom;
top=padding.top + (paddedHeight - childHeight) / 2;
bottom=top + childHeight;
break;
}
switch (gravity & Gravity.HORIZONTAL_GRAVITY_MASK) {
case Gravity.LEFT:
left=fixedLayoutHorizontal ? padding.left + (adjustedWidth - childWidth) / 2 : padding.left;
right=left + childWidth;
if (adjustPadding && isHorizontal && !isVertical) {
padding.left=right;
padding.right+=childWidth / 2;
}
break;
case Gravity.RIGHT:
right=fixedLayoutHorizontal ? width - padding.right - (adjustedWidth - childWidth) / 2 : width - padding.right;
left=right - childWidth;
if (adjustPadding && isHorizontal && !isVertical) {
padding.right=width - left;
padding.left+=childWidth / 2;
}
break;
case Gravity.CENTER_HORIZONTAL:
final int paddedWidth=width - padding.left - padding.right;
left=(paddedWidth - childWidth) / 2;
right=left + childWidth;
break;
}
child.layout(left,top,right,bottom);
}
