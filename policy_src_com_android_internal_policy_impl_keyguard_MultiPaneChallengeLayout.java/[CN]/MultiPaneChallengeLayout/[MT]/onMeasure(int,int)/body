{
  if (MeasureSpec.getMode(widthSpec) != MeasureSpec.EXACTLY || MeasureSpec.getMode(heightSpec) != MeasureSpec.EXACTLY) {
    throw new IllegalArgumentException("MultiPaneChallengeLayout must be measured with an exact size");
  }
  float squashedLayoutThreshold=mContext.getResources().getDimension(R.dimen.kg_squashed_layout_threshold);
  final int width=MeasureSpec.getSize(widthSpec);
  final int height=MeasureSpec.getSize(heightSpec);
  setMeasuredDimension(width,height);
  int widthUsed=0;
  int heightUsed=0;
  mChallengeView=null;
  mUserSwitcherView=null;
  final int count=getChildCount();
  for (int i=0; i < count; i++) {
    final View child=getChildAt(i);
    final LayoutParams lp=(LayoutParams)child.getLayoutParams();
    if (lp.childType == LayoutParams.CHILD_TYPE_CHALLENGE) {
      if (mChallengeView != null) {
        throw new IllegalStateException("There may only be one child of type challenge");
      }
      if (!(child instanceof KeyguardSecurityContainer)) {
        throw new IllegalArgumentException("Challenge must be a KeyguardSecurityContainer");
      }
      mChallengeView=(KeyguardSecurityContainer)child;
    }
 else     if (lp.childType == LayoutParams.CHILD_TYPE_USER_SWITCHER) {
      if (mUserSwitcherView != null) {
        throw new IllegalStateException("There may only be one child of type userSwitcher");
      }
      mUserSwitcherView=child;
      if (child.getVisibility() == GONE)       continue;
      if (height < squashedLayoutThreshold) {
        int zero=MeasureSpec.makeMeasureSpec(0,MeasureSpec.EXACTLY);
        measureChild(child,zero,zero);
      }
 else {
        int adjustedWidthSpec=widthSpec;
        int adjustedHeightSpec=heightSpec;
        if (lp.maxWidth >= 0) {
          adjustedWidthSpec=MeasureSpec.makeMeasureSpec(Math.min(lp.maxWidth,MeasureSpec.getSize(widthSpec)),MeasureSpec.EXACTLY);
        }
        if (lp.maxHeight >= 0) {
          adjustedHeightSpec=MeasureSpec.makeMeasureSpec(Math.min(lp.maxHeight,MeasureSpec.getSize(heightSpec)),MeasureSpec.EXACTLY);
        }
        measureChildWithMargins(child,adjustedWidthSpec,0,adjustedHeightSpec,0);
        if (Gravity.isVertical(lp.gravity)) {
          heightUsed+=child.getMeasuredHeight() * 1.5f;
        }
 else         if (Gravity.isHorizontal(lp.gravity)) {
          widthUsed+=child.getMeasuredWidth() * 1.5f;
        }
      }
    }
 else     if (lp.childType == LayoutParams.CHILD_TYPE_SCRIM) {
      setScrimView(child);
      child.measure(widthSpec,heightSpec);
    }
  }
  for (int i=0; i < count; i++) {
    final View child=getChildAt(i);
    final LayoutParams lp=(LayoutParams)child.getLayoutParams();
    if (lp.childType == LayoutParams.CHILD_TYPE_USER_SWITCHER || lp.childType == LayoutParams.CHILD_TYPE_SCRIM || child.getVisibility() == GONE) {
      continue;
    }
    int adjustedWidthSpec;
    int adjustedHeightSpec;
    if (lp.centerWithinArea > 0) {
      if (mOrientation == HORIZONTAL) {
        adjustedWidthSpec=MeasureSpec.makeMeasureSpec((int)((width - widthUsed) * lp.centerWithinArea + 0.5f),MeasureSpec.EXACTLY);
        adjustedHeightSpec=MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(heightSpec) - heightUsed,MeasureSpec.EXACTLY);
      }
 else {
        adjustedWidthSpec=MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(widthSpec) - widthUsed,MeasureSpec.EXACTLY);
        adjustedHeightSpec=MeasureSpec.makeMeasureSpec((int)((height - heightUsed) * lp.centerWithinArea + 0.5f),MeasureSpec.EXACTLY);
      }
    }
 else {
      adjustedWidthSpec=MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(widthSpec) - widthUsed,MeasureSpec.EXACTLY);
      adjustedHeightSpec=MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(heightSpec) - heightUsed,MeasureSpec.EXACTLY);
    }
    if (lp.maxWidth >= 0) {
      adjustedWidthSpec=MeasureSpec.makeMeasureSpec(Math.min(lp.maxWidth,MeasureSpec.getSize(adjustedWidthSpec)),MeasureSpec.EXACTLY);
    }
    if (lp.maxHeight >= 0) {
      adjustedHeightSpec=MeasureSpec.makeMeasureSpec(Math.min(lp.maxHeight,MeasureSpec.getSize(adjustedHeightSpec)),MeasureSpec.EXACTLY);
    }
    measureChildWithMargins(child,adjustedWidthSpec,0,adjustedHeightSpec,0);
  }
}
