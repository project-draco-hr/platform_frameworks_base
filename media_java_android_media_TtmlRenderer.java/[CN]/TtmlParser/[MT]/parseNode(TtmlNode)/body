{
  int eventType=mParser.getEventType();
  if (!(eventType == XmlPullParser.START_TAG)) {
    return null;
  }
  StringBuilder attrStr=new StringBuilder();
  long start=0;
  long end=TtmlUtils.INVALID_TIMESTAMP;
  long dur=0;
  for (int i=0; i < mParser.getAttributeCount(); ++i) {
    String attr=mParser.getAttributeName(i);
    String value=mParser.getAttributeValue(i);
    attr=attr.replaceFirst("^.*:","");
    if (attr.equals(TtmlUtils.ATTR_BEGIN)) {
      start=TtmlUtils.parseTimeExpression(value,DEFAULT_FRAMERATE,DEFAULT_SUBFRAMERATE,DEFAULT_TICKRATE);
    }
 else     if (attr.equals(TtmlUtils.ATTR_END)) {
      end=TtmlUtils.parseTimeExpression(value,DEFAULT_FRAMERATE,DEFAULT_SUBFRAMERATE,DEFAULT_TICKRATE);
    }
 else     if (attr.equals(TtmlUtils.ATTR_DURATION)) {
      dur=TtmlUtils.parseTimeExpression(value,DEFAULT_FRAMERATE,DEFAULT_SUBFRAMERATE,DEFAULT_TICKRATE);
    }
 else {
      extractAttribute(mParser,i,attrStr);
    }
  }
  if (parent != null) {
    start+=parent.mStartTimeMs;
    if (end != TtmlUtils.INVALID_TIMESTAMP) {
      end+=parent.mStartTimeMs;
    }
  }
  if (dur > 0) {
    if (end != TtmlUtils.INVALID_TIMESTAMP) {
      Log.e(TAG,"'dur' and 'end' attributes are defined at the same time." + "'end' value is ignored.");
    }
    end=start + dur;
  }
  if (parent != null) {
    if (end == TtmlUtils.INVALID_TIMESTAMP && parent.mEndTimeMs != TtmlUtils.INVALID_TIMESTAMP && end > parent.mEndTimeMs) {
      end=parent.mEndTimeMs;
    }
  }
  TtmlNode node=new TtmlNode(mParser.getName(),attrStr.toString(),null,start,end,parent,mCurrentRunId);
  return node;
}
