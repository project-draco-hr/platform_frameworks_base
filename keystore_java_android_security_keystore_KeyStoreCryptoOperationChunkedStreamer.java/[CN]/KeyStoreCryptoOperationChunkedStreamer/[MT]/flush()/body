{
  if (mBufferedLength <= 0) {
    return EmptyArray.BYTE;
  }
  ByteArrayOutputStream bufferedOutput=null;
  while (mBufferedLength > 0) {
    byte[] chunk=ArrayUtils.subarray(mBuffered,mBufferedOffset,mBufferedLength);
    OperationResult opResult=mKeyStoreStream.update(chunk);
    if (opResult == null) {
      throw new KeyStoreConnectException();
    }
 else     if (opResult.resultCode != KeyStore.NO_ERROR) {
      throw KeyStore.getKeyStoreException(opResult.resultCode);
    }
    if (opResult.inputConsumed <= 0) {
      break;
    }
    if (opResult.inputConsumed >= chunk.length) {
      mBuffered=EmptyArray.BYTE;
      mBufferedOffset=0;
      mBufferedLength=0;
    }
 else {
      mBuffered=chunk;
      mBufferedOffset=opResult.inputConsumed;
      mBufferedLength=chunk.length - opResult.inputConsumed;
    }
    if (opResult.inputConsumed > chunk.length) {
      throw new KeyStoreException(KeymasterDefs.KM_ERROR_UNKNOWN_ERROR,"Keystore consumed more input than provided. Provided: " + chunk.length + ", consumed: "+ opResult.inputConsumed);
    }
    if ((opResult.output != null) && (opResult.output.length > 0)) {
      if (bufferedOutput == null) {
        if (mBufferedLength == 0) {
          mProducedOutputSizeBytes+=opResult.output.length;
          return opResult.output;
        }
 else {
          bufferedOutput=new ByteArrayOutputStream();
        }
      }
      try {
        bufferedOutput.write(opResult.output);
      }
 catch (      IOException e) {
        throw new ProviderException("Failed to buffer output",e);
      }
    }
  }
  if (mBufferedLength > 0) {
    throw new KeyStoreException(KeymasterDefs.KM_ERROR_INVALID_INPUT_LENGTH,"Keystore failed to consume last " + ((mBufferedLength != 1) ? (mBufferedLength + " bytes") : "byte") + " of input");
  }
  byte[] result=(bufferedOutput != null) ? bufferedOutput.toByteArray() : EmptyArray.BYTE;
  mProducedOutputSizeBytes+=result.length;
  return result;
}
