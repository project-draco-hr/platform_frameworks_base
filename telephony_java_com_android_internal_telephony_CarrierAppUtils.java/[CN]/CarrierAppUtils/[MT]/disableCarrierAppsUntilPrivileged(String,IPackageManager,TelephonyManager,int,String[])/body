{
  List<ApplicationInfo> candidates=getDefaultCarrierAppCandidatesHelper(packageManager,userId,systemCarrierAppsDisabledUntilUsed);
  if (candidates == null || candidates.isEmpty()) {
    return;
  }
  List<String> enabledCarrierPackages=new ArrayList<>();
  try {
    for (    ApplicationInfo ai : candidates) {
      String packageName=ai.packageName;
      boolean hasPrivileges=telephonyManager != null && telephonyManager.checkCarrierPrivilegesForPackageAnyPhone(packageName) == TelephonyManager.CARRIER_PRIVILEGE_STATUS_HAS_ACCESS;
      if (!ai.isUpdatedSystemApp()) {
        if (hasPrivileges && (ai.enabledSetting == PackageManager.COMPONENT_ENABLED_STATE_DEFAULT || ai.enabledSetting == PackageManager.COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED)) {
          Slog.i(TAG,"Update state(" + packageName + "): ENABLED for user "+ userId);
          packageManager.setApplicationEnabledSetting(packageName,PackageManager.COMPONENT_ENABLED_STATE_ENABLED,PackageManager.DONT_KILL_APP,userId,callingPackage);
        }
 else         if (!hasPrivileges && ai.enabledSetting == PackageManager.COMPONENT_ENABLED_STATE_DEFAULT) {
          Slog.i(TAG,"Update state(" + packageName + "): DISABLED_UNTIL_USED for user "+ userId);
          packageManager.setApplicationEnabledSetting(packageName,PackageManager.COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED,0,userId,callingPackage);
        }
      }
      if (hasPrivileges) {
        enabledCarrierPackages.add(ai.packageName);
      }
    }
    if (!enabledCarrierPackages.isEmpty()) {
      String[] packageNames=new String[enabledCarrierPackages.size()];
      enabledCarrierPackages.toArray(packageNames);
      packageManager.grantDefaultPermissionsToEnabledCarrierApps(packageNames,userId);
    }
  }
 catch (  RemoteException e) {
    Slog.w(TAG,"Could not reach PackageManager",e);
  }
}
