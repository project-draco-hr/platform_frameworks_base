{
  Matrix_Delegate d=sManager.getDelegate(native_object);
  if (d == null) {
    return false;
  }
  if (src.isEmpty()) {
    reset(d.mValues);
    return false;
  }
  if (dst.isEmpty()) {
    d.mValues[0]=d.mValues[1]=d.mValues[2]=d.mValues[3]=d.mValues[4]=d.mValues[5]=d.mValues[6]=d.mValues[7]=0;
    d.mValues[8]=1;
  }
 else {
    float tx, sx=dst.width() / src.width();
    float ty, sy=dst.height() / src.height();
    boolean xLarger=false;
    if (stf != ScaleToFit.FILL.nativeInt) {
      if (sx > sy) {
        xLarger=true;
        sx=sy;
      }
 else {
        sy=sx;
      }
    }
    tx=dst.left - src.left * sx;
    ty=dst.top - src.top * sy;
    if (stf == ScaleToFit.CENTER.nativeInt || stf == ScaleToFit.END.nativeInt) {
      float diff;
      if (xLarger) {
        diff=dst.width() - src.width() * sy;
      }
 else {
        diff=dst.height() - src.height() * sy;
      }
      if (stf == ScaleToFit.CENTER.nativeInt) {
        diff=diff / 2;
      }
      if (xLarger) {
        tx+=diff;
      }
 else {
        ty+=diff;
      }
    }
    d.mValues[0]=sx;
    d.mValues[4]=sy;
    d.mValues[2]=tx;
    d.mValues[5]=ty;
    d.mValues[1]=d.mValues[3]=d.mValues[6]=d.mValues[7]=0;
  }
  d.mValues[8]=1;
  return true;
}
