{
  if (cb == null) {
    throw new IllegalArgumentException("Illegal null AudioRecordingCallback argument");
  }
synchronized (mRecordCallbackLock) {
    if (mRecordCallbackList == null) {
      mRecordCallbackList=new ArrayList<AudioRecordingCallback>();
    }
    final int oldCbCount=mRecordCallbackList.size();
    if (!mRecordCallbackList.contains(cb)) {
      mRecordCallbackList.add(cb);
      final int newCbCount=mRecordCallbackList.size();
      if ((oldCbCount == 0) && (newCbCount > 0)) {
        final IAudioService service=getService();
        try {
          service.registerRecordingCallback(mRecCb);
        }
 catch (        RemoteException e) {
          Log.e(TAG,"Dead object in registerRecordingCallback",e);
        }
      }
    }
 else {
      Log.w(TAG,"attempt to call registerAudioRecordingCallback() on a previously" + "registered callback");
    }
  }
}
