{
synchronized (sAudioPortGeneration) {
    if (sAudioPortGeneration == AUDIOPORT_GENERATION_INIT) {
      int[] patchGeneration=new int[1];
      int[] portGeneration=new int[1];
      int status;
      ArrayList<AudioPort> newPorts=new ArrayList<AudioPort>();
      ArrayList<AudioPatch> newPatches=new ArrayList<AudioPatch>();
      do {
        newPorts.clear();
        status=AudioSystem.listAudioPorts(newPorts,portGeneration);
        if (status != SUCCESS) {
          Log.w(TAG,"updateAudioPortCache: listAudioPorts failed");
          return status;
        }
        newPatches.clear();
        status=AudioSystem.listAudioPatches(newPatches,patchGeneration);
        if (status != SUCCESS) {
          Log.w(TAG,"updateAudioPortCache: listAudioPatches failed");
          return status;
        }
      }
 while (patchGeneration[0] != portGeneration[0]);
      for (int i=0; i < newPatches.size(); i++) {
        for (int j=0; j < newPatches.get(i).sources().length; j++) {
          AudioPortConfig portCfg=updatePortConfig(newPatches.get(i).sources()[j],newPorts);
          newPatches.get(i).sources()[j]=portCfg;
        }
        for (int j=0; j < newPatches.get(i).sinks().length; j++) {
          AudioPortConfig portCfg=updatePortConfig(newPatches.get(i).sinks()[j],newPorts);
          newPatches.get(i).sinks()[j]=portCfg;
        }
      }
      for (Iterator<AudioPatch> i=newPatches.iterator(); i.hasNext(); ) {
        AudioPatch newPatch=i.next();
        boolean hasInvalidPort=false;
        for (        AudioPortConfig portCfg : newPatch.sources()) {
          if (portCfg == null) {
            hasInvalidPort=true;
            break;
          }
        }
        for (        AudioPortConfig portCfg : newPatch.sinks()) {
          if (portCfg == null) {
            hasInvalidPort=true;
            break;
          }
        }
        if (hasInvalidPort) {
          i.remove();
        }
      }
      sPreviousAudioPortsCached=sAudioPortsCached;
      sAudioPortsCached=newPorts;
      sAudioPatchesCached=newPatches;
      sAudioPortGeneration=portGeneration[0];
    }
    if (ports != null) {
      ports.clear();
      ports.addAll(sAudioPortsCached);
    }
    if (patches != null) {
      patches.clear();
      patches.addAll(sAudioPatchesCached);
    }
    if (previousPorts != null) {
      previousPorts.clear();
      previousPorts.addAll(sPreviousAudioPortsCached);
    }
  }
  return SUCCESS;
}
