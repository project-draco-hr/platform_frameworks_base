{
synchronized (mAudioPortGeneration) {
    if (mAudioPortGeneration == AUDIOPORT_GENERATION_INIT) {
      int[] patchGeneration=new int[1];
      int[] portGeneration=new int[1];
      int status;
      ArrayList<AudioPort> newPorts=new ArrayList<AudioPort>();
      ArrayList<AudioPatch> newPatches=new ArrayList<AudioPatch>();
      do {
        newPorts.clear();
        status=AudioSystem.listAudioPorts(newPorts,portGeneration);
        if (status != SUCCESS) {
          return status;
        }
        newPatches.clear();
        status=AudioSystem.listAudioPatches(newPatches,patchGeneration);
        if (status != SUCCESS) {
          return status;
        }
      }
 while (patchGeneration[0] != portGeneration[0]);
      for (int i=0; i < newPatches.size(); i++) {
        for (int j=0; j < newPatches.get(i).sources().length; j++) {
          AudioPortConfig portCfg=updatePortConfig(newPatches.get(i).sources()[j],newPorts);
          if (portCfg == null) {
            return ERROR;
          }
          newPatches.get(i).sources()[j]=portCfg;
        }
        for (int j=0; j < newPatches.get(i).sinks().length; j++) {
          AudioPortConfig portCfg=updatePortConfig(newPatches.get(i).sinks()[j],newPorts);
          if (portCfg == null) {
            return ERROR;
          }
          newPatches.get(i).sinks()[j]=portCfg;
        }
      }
      mAudioPortsCached=newPorts;
      mAudioPatchesCached=newPatches;
      mAudioPortGeneration=portGeneration[0];
    }
    if (ports != null) {
      ports.clear();
      ports.addAll(mAudioPortsCached);
    }
    if (patches != null) {
      patches.clear();
      patches.addAll(mAudioPatchesCached);
    }
  }
  return SUCCESS;
}
