{
  super(context);
  mUpdateMonitor=updateMonitor;
  mCallback=callback;
  ;
  mCreationOrientation=configuration.orientation;
  mKeyboardHidden=configuration.hardKeyboardHidden;
  mLockPatternUtils=lockpatternutils;
  LayoutInflater inflater=LayoutInflater.from(context);
  if (mKeyboardHidden == Configuration.HARDKEYBOARDHIDDEN_NO) {
    inflater.inflate(R.layout.keyguard_screen_sim_puk_landscape,this,true);
  }
 else {
    inflater.inflate(R.layout.keyguard_screen_sim_puk_portrait,this,true);
    new TouchInput();
  }
  mHeaderText=(TextView)findViewById(R.id.headerText);
  mPukText=(TextView)findViewById(R.id.pukDisplay);
  mPukText.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      requestFocus(mPukText);
      mCallback.pokeWakelock();
    }
  }
);
  mPinText=(TextView)findViewById(R.id.pinDisplay);
  mPinText.setOnClickListener(this);
  mDelPukButton=findViewById(R.id.pukDel);
  mDelPukButton.setOnClickListener(this);
  mDelPinButton=findViewById(R.id.pinDel);
  mDelPinButton.setOnClickListener(this);
  mOkButton=(TextView)findViewById(R.id.ok);
  mHeaderText.setText(R.string.keyguard_password_enter_puk_code);
  mPukText.setFocusable(false);
  mPinText.setFocusable(false);
  mOkButton.setOnClickListener(this);
  requestFocus(mPukText);
  mKeyguardStatusViewManager=new KeyguardStatusViewManager(this,updateMonitor,lockpatternutils,callback);
  setFocusableInTouchMode(true);
}
