{
  int widthMode=MeasureSpec.getMode(widthMeasureSpec);
  if (widthMode == MeasureSpec.UNSPECIFIED) {
    throw new UnsupportedOperationException("Needs a maximum width");
  }
  int width=MeasureSpec.getSize(widthMeasureSpec);
  int childWidth=(width - (mNumColumns - 1) * mHorizontalSpacing) / mNumColumns;
  int childWidthSpec=MeasureSpec.makeMeasureSpec(childWidth,MeasureSpec.EXACTLY);
  int childHeightSpec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
  int totalHeight=0;
  int children=getChildCount();
  int rows=(children + mNumColumns - 1) / mNumColumns;
  for (int row=0; row < rows; row++) {
    int startOfRow=row * mNumColumns;
    int endOfRow=Math.min(startOfRow + mNumColumns,children);
    int maxHeight=0;
    for (int i=startOfRow; i < endOfRow; i++) {
      View child=getChildAt(i);
      child.measure(childWidthSpec,childHeightSpec);
      maxHeight=Math.max(maxHeight,child.getMeasuredHeight());
    }
    int maxHeightSpec=MeasureSpec.makeMeasureSpec(maxHeight,MeasureSpec.EXACTLY);
    for (int i=startOfRow; i < endOfRow; i++) {
      View child=getChildAt(i);
      child.measure(childWidthSpec,maxHeightSpec);
    }
    totalHeight+=maxHeight;
    if (row > 0) {
      totalHeight+=mVerticalSpacing;
    }
  }
  setMeasuredDimension(width,getDefaultSize(totalHeight,heightMeasureSpec));
}
