{
  int index=mAudioService.getStreamVolume(streamType);
  int message=UNKNOWN_VOLUME_TEXT;
  int additionalMessage=0;
  mRingIsSilent=false;
  if (LOGD) {
    Log.d(TAG,"onShowVolumeChanged(streamType: " + streamType + ", flags: "+ flags+ "), index: "+ index);
  }
  int max=mAudioService.getStreamMaxVolume(streamType);
switch (streamType) {
case AudioManager.STREAM_RING:
{
      setRingerIcon();
      message=RINGTONE_VOLUME_TEXT;
      Uri ringuri=RingtoneManager.getActualDefaultRingtoneUri(mContext,RingtoneManager.TYPE_RINGTONE);
      if (ringuri == null) {
        additionalMessage=com.android.internal.R.string.volume_music_hint_silent_ringtone_selected;
        mRingIsSilent=true;
      }
      break;
    }
case AudioManager.STREAM_MUSIC:
{
    message=MUSIC_VOLUME_TEXT;
    if (mAudioManager.isBluetoothA2dpOn()) {
      additionalMessage=com.android.internal.R.string.volume_music_hint_playing_through_bluetooth;
      setLargeIcon(com.android.internal.R.drawable.ic_volume_bluetooth_ad2p);
    }
 else {
      setSmallIcon(index);
    }
    break;
  }
case AudioManager.STREAM_VOICE_CALL:
{
  index++;
  max++;
  message=INCALL_VOLUME_TEXT;
  setSmallIcon(index);
  break;
}
case AudioManager.STREAM_ALARM:
{
message=ALARM_VOLUME_TEXT;
setSmallIcon(index);
break;
}
case AudioManager.STREAM_NOTIFICATION:
{
message=NOTIFICATION_VOLUME_TEXT;
setSmallIcon(index);
Uri ringuri=RingtoneManager.getActualDefaultRingtoneUri(mContext,RingtoneManager.TYPE_NOTIFICATION);
if (ringuri == null) {
additionalMessage=com.android.internal.R.string.volume_music_hint_silent_ringtone_selected;
mRingIsSilent=true;
}
break;
}
case AudioManager.STREAM_BLUETOOTH_SCO:
{
index++;
max++;
message=BLUETOOTH_INCALL_VOLUME_TEXT;
setLargeIcon(com.android.internal.R.drawable.ic_volume_bluetooth_in_call);
break;
}
}
String messageString=Resources.getSystem().getString(message);
if (!mMessage.getText().equals(messageString)) {
mMessage.setText(messageString);
}
if (additionalMessage == 0) {
mAdditionalMessage.setVisibility(View.GONE);
}
 else {
mAdditionalMessage.setVisibility(View.VISIBLE);
mAdditionalMessage.setText(Resources.getSystem().getString(additionalMessage));
}
if (max != mLevel.getMax()) {
mLevel.setMax(max);
}
mLevel.setProgress(index);
mToast.setView(mView);
mToast.setDuration(Toast.LENGTH_SHORT);
mToast.setGravity(Gravity.TOP,0,0);
mToast.show();
if ((flags & AudioManager.FLAG_VIBRATE) != 0 && mAudioService.isStreamAffectedByRingerMode(streamType) && mAudioService.getRingerMode() == AudioManager.RINGER_MODE_VIBRATE && mAudioService.shouldVibrate(AudioManager.VIBRATE_TYPE_RINGER)) {
sendMessageDelayed(obtainMessage(MSG_VIBRATE),VIBRATE_DELAY);
}
}
