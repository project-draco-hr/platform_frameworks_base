{
  int index=mAudioService.isStreamMute(streamType) ? mAudioService.getLastAudibleStreamVolume(streamType) : mAudioService.getStreamVolume(streamType);
  mRingIsSilent=false;
  if (LOGD) {
    Log.d(TAG,"onShowVolumeChanged(streamType: " + streamType + ", flags: "+ flags+ "), index: "+ index);
  }
  int max=mAudioService.getStreamMaxVolume(streamType);
switch (streamType) {
case AudioManager.STREAM_RING:
{
      Uri ringuri=RingtoneManager.getActualDefaultRingtoneUri(mContext,RingtoneManager.TYPE_RINGTONE);
      if (ringuri == null) {
        mRingIsSilent=true;
      }
      break;
    }
case AudioManager.STREAM_MUSIC:
{
    if (mAudioManager.isBluetoothA2dpOn()) {
      setMusicIcon(R.drawable.ic_audio_bt,R.drawable.ic_audio_bt_mute);
    }
 else {
      setMusicIcon(R.drawable.ic_audio_vol,R.drawable.ic_audio_vol_mute);
    }
    break;
  }
case AudioManager.STREAM_VOICE_CALL:
{
  index++;
  max++;
  break;
}
case AudioManager.STREAM_ALARM:
{
break;
}
case AudioManager.STREAM_NOTIFICATION:
{
Uri ringuri=RingtoneManager.getActualDefaultRingtoneUri(mContext,RingtoneManager.TYPE_NOTIFICATION);
if (ringuri == null) {
mRingIsSilent=true;
}
break;
}
case AudioManager.STREAM_BLUETOOTH_SCO:
{
index++;
max++;
break;
}
}
StreamControl sc=mStreamControls.get(streamType);
if (sc != null) {
sc.seekbarView.setProgress(index);
}
if (!mDialog.isShowing()) {
mAudioManager.forceVolumeControlStream(streamType);
mDialog.setContentView(mView);
collapse();
mDialog.show();
}
if ((flags & AudioManager.FLAG_VIBRATE) != 0 && mAudioService.isStreamAffectedByRingerMode(streamType) && mAudioService.getRingerMode() == AudioManager.RINGER_MODE_VIBRATE && mAudioService.shouldVibrate(AudioManager.VIBRATE_TYPE_RINGER)) {
sendMessageDelayed(obtainMessage(MSG_VIBRATE),VIBRATE_DELAY);
}
}
