{
  String input=clean(raw_input);
  if (input.regionMatches(0,"A/",0,2)) {
    input=new String(mLastInput);
  }
 else {
    mLastInput=new String(input);
  }
  if (input.equals("")) {
    return new AtCommandResult(AtCommandResult.UNSOLICITED);
  }
  if (!input.regionMatches(0,"AT",0,2)) {
    return new AtCommandResult(AtCommandResult.ERROR);
  }
  int index=2;
  AtCommandResult result=new AtCommandResult(AtCommandResult.UNSOLICITED);
  while (index < input.length()) {
    char c=input.charAt(index);
    if (isAtoZ(c)) {
      String args=input.substring(index + 1);
      if (mBasicHandlers.containsKey((Character)c)) {
        result.addResult(mBasicHandlers.get((Character)c).handleBasicCommand(args));
        return result;
      }
 else {
        result.addResult(new AtCommandResult(AtCommandResult.ERROR));
        return result;
      }
    }
    if (c == '+') {
      int i=findEndExtendedName(input,index + 1);
      String commandName=input.substring(index,i);
      if (!mExtHandlers.containsKey(commandName)) {
        result.addResult(new AtCommandResult(AtCommandResult.ERROR));
        return result;
      }
      AtCommandHandler handler=mExtHandlers.get(commandName);
      int endIndex=findChar(';',input,index);
      int type;
      if (i >= endIndex) {
        type=TYPE_ACTION;
      }
 else       if (input.charAt(i) == '?') {
        type=TYPE_READ;
      }
 else       if (input.charAt(i) == '=') {
        if (i + 1 < endIndex) {
          if (input.charAt(i + 1) == '?') {
            type=TYPE_TEST;
          }
 else {
            type=TYPE_SET;
          }
        }
 else {
          type=TYPE_SET;
        }
      }
 else {
        type=TYPE_ACTION;
      }
switch (type) {
case TYPE_ACTION:
        result.addResult(handler.handleActionCommand());
      break;
case TYPE_READ:
    result.addResult(handler.handleReadCommand());
  break;
case TYPE_TEST:
result.addResult(handler.handleTestCommand());
break;
case TYPE_SET:
Object[] args=generateArgs(input.substring(i + 1,endIndex));
result.addResult(handler.handleSetCommand(args));
break;
}
if (result.getResultCode() != AtCommandResult.OK) {
return result;
}
index=endIndex;
}
 else {
index++;
}
}
return result;
}
