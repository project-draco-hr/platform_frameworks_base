{
  if (mSession != null && Intent.ACTION_MEDIA_BUTTON.equals(mediaButtonIntent.getAction())) {
    KeyEvent ke=mediaButtonIntent.getParcelableExtra(Intent.EXTRA_KEY_EVENT);
    if (ke != null && ke.getAction() == KeyEvent.ACTION_DOWN) {
      PlaybackState state=mSession.mPlaybackState;
      long validActions=state == null ? 0 : state.getActions();
switch (ke.getKeyCode()) {
case KeyEvent.KEYCODE_MEDIA_PLAY:
        if ((validActions & PlaybackState.ACTION_PLAY) != 0) {
          onPlay();
        }
      break;
case KeyEvent.KEYCODE_MEDIA_PAUSE:
    if ((validActions & PlaybackState.ACTION_PAUSE) != 0) {
      onPause();
    }
  break;
case KeyEvent.KEYCODE_MEDIA_NEXT:
if ((validActions & PlaybackState.ACTION_SKIP_TO_NEXT) != 0) {
  onSkipToNext();
}
break;
case KeyEvent.KEYCODE_MEDIA_PREVIOUS:
if ((validActions & PlaybackState.ACTION_SKIP_TO_PREVIOUS) != 0) {
onSkipToPrevious();
}
break;
case KeyEvent.KEYCODE_MEDIA_STOP:
if ((validActions & PlaybackState.ACTION_STOP) != 0) {
onStop();
}
break;
case KeyEvent.KEYCODE_MEDIA_FAST_FORWARD:
if ((validActions & PlaybackState.ACTION_FAST_FORWARD) != 0) {
onFastForward();
}
break;
case KeyEvent.KEYCODE_MEDIA_REWIND:
if ((validActions & PlaybackState.ACTION_REWIND) != 0) {
onRewind();
}
break;
case KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE:
case KeyEvent.KEYCODE_HEADSETHOOK:
boolean isPlaying=state == null ? false : state.getState() == PlaybackState.STATE_PLAYING;
boolean canPlay=(validActions & (PlaybackState.ACTION_PLAY_PAUSE | PlaybackState.ACTION_PLAY)) != 0;
boolean canPause=(validActions & (PlaybackState.ACTION_PLAY_PAUSE | PlaybackState.ACTION_PAUSE)) != 0;
if (isPlaying && canPause) {
onPause();
}
 else if (!isPlaying && canPlay) {
onPlay();
}
break;
}
}
}
return false;
}
