{
  final int widthMode=MeasureSpec.getMode(widthMeasureSpec);
  if (widthMode != MeasureSpec.EXACTLY) {
    throw new IllegalStateException(getClass().getSimpleName() + " can only be used " + "with android:layout_width=\"match_parent\" (or fill_parent)");
  }
  final int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  if (heightMode != MeasureSpec.AT_MOST) {
    throw new IllegalStateException(getClass().getSimpleName() + " can only be used " + "with android:layout_height=\"wrap_content\"");
  }
  final int contentWidth=MeasureSpec.getSize(widthMeasureSpec);
  final int itemMargin=mItemPadding;
  int availableWidth=contentWidth - getPaddingLeft() - getPaddingRight();
  final int height=mContentHeight - getPaddingTop() - getPaddingBottom();
  final int childSpecHeight=MeasureSpec.makeMeasureSpec(height,MeasureSpec.AT_MOST);
  if (mCloseButton != null) {
    availableWidth=measureChildView(mCloseButton,availableWidth,childSpecHeight,itemMargin);
  }
  if (mTitleLayout != null && mCustomView == null) {
    availableWidth=measureChildView(mTitleLayout,availableWidth,childSpecHeight,itemMargin);
  }
  final int childCount=getChildCount();
  for (int i=0; i < childCount; i++) {
    final View child=getChildAt(i);
    if (child == mCloseButton || child == mTitleLayout || child == mCustomView) {
      continue;
    }
    availableWidth=measureChildView(child,availableWidth,childSpecHeight,itemMargin);
  }
  if (mCustomView != null) {
    mCustomView.measure(MeasureSpec.makeMeasureSpec(availableWidth,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(height,MeasureSpec.EXACTLY));
  }
  setMeasuredDimension(contentWidth,mContentHeight);
}
