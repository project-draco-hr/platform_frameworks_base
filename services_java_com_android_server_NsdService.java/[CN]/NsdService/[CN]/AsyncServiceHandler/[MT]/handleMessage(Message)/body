{
switch (msg.what) {
case AsyncChannel.CMD_CHANNEL_HALF_CONNECTED:
    if (msg.arg1 == AsyncChannel.STATUS_SUCCESSFUL) {
      AsyncChannel c=(AsyncChannel)msg.obj;
      if (DBG)       Slog.d(TAG,"New client listening to asynchronous messages");
      c.sendMessage(AsyncChannel.CMD_CHANNEL_FULLY_CONNECTED);
      mClients.add(c);
    }
 else {
      Slog.e(TAG,"Client connection failure, error=" + msg.arg1);
    }
  break;
case AsyncChannel.CMD_CHANNEL_DISCONNECTED:
if (msg.arg1 == AsyncChannel.STATUS_SEND_UNSUCCESSFUL) {
  Slog.e(TAG,"Send failed, client connection lost");
}
 else {
  if (DBG)   Slog.d(TAG,"Client connection lost with reason: " + msg.arg1);
}
mClients.remove((AsyncChannel)msg.obj);
break;
case AsyncChannel.CMD_CHANNEL_FULL_CONNECTION:
AsyncChannel ac=new AsyncChannel();
ac.connect(mContext,this,msg.replyTo);
break;
case NsdManager.DISCOVER_SERVICES:
if (DBG) Slog.d(TAG,"Discover services");
DnsSdServiceInfo s=(DnsSdServiceInfo)msg.obj;
discoverServices(1,s.getServiceType());
mReplyChannel.replyToMessage(msg,NsdManager.DISCOVER_SERVICES_STARTED);
break;
case NsdManager.STOP_DISCOVERY:
if (DBG) Slog.d(TAG,"Stop service discovery");
mReplyChannel.replyToMessage(msg,NsdManager.STOP_DISCOVERY_FAILED);
break;
case NsdManager.REGISTER_SERVICE:
if (DBG) Slog.d(TAG,"Register service");
mReplyChannel.replyToMessage(msg,NsdManager.REGISTER_SERVICE_FAILED);
break;
case NsdManager.UPDATE_SERVICE:
if (DBG) Slog.d(TAG,"Update service");
mReplyChannel.replyToMessage(msg,NsdManager.UPDATE_SERVICE_FAILED);
break;
default :
Slog.d(TAG,"NsdServicehandler.handleMessage ignoring msg=" + msg);
break;
}
}
