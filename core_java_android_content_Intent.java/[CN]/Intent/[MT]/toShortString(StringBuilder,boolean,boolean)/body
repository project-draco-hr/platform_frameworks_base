{
  boolean first=true;
  if (mAction != null) {
    b.append("act=").append(mAction);
    first=false;
  }
  if (mCategories != null) {
    if (!first) {
      b.append(' ');
    }
    first=false;
    b.append("cat=[");
    Iterator<String> i=mCategories.iterator();
    boolean didone=false;
    while (i.hasNext()) {
      if (didone)       b.append(",");
      didone=true;
      b.append(i.next());
    }
    b.append("]");
  }
  if (mData != null) {
    if (!first) {
      b.append(' ');
    }
    first=false;
    b.append("dat=");
    String scheme=mData.getScheme();
    if (scheme != null) {
      if (scheme.equalsIgnoreCase("tel")) {
        b.append("tel:xxx-xxx-xxxx");
      }
 else       if (scheme.equalsIgnoreCase("smsto")) {
        b.append("smsto:xxx-xxx-xxxx");
      }
 else {
        b.append(mData);
      }
    }
 else {
      b.append(mData);
    }
  }
  if (mType != null) {
    if (!first) {
      b.append(' ');
    }
    first=false;
    b.append("typ=").append(mType);
  }
  if (mFlags != 0) {
    if (!first) {
      b.append(' ');
    }
    first=false;
    b.append("flg=0x").append(Integer.toHexString(mFlags));
  }
  if (mPackage != null) {
    if (!first) {
      b.append(' ');
    }
    first=false;
    b.append("pkg=").append(mPackage);
  }
  if (comp && mComponent != null) {
    if (!first) {
      b.append(' ');
    }
    first=false;
    b.append("cmp=").append(mComponent.flattenToShortString());
  }
  if (mSourceBounds != null) {
    if (!first) {
      b.append(' ');
    }
    first=false;
    b.append("bnds=").append(mSourceBounds.toShortString());
  }
  if (extras && mExtras != null) {
    if (!first) {
      b.append(' ');
    }
    first=false;
    b.append("(has extras)");
  }
}
