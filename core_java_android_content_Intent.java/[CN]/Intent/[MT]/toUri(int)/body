{
  StringBuilder uri=new StringBuilder(128);
  String scheme=null;
  if (mData != null) {
    String data=mData.toString();
    if ((flags & URI_INTENT_SCHEME) != 0) {
      final int N=data.length();
      for (int i=0; i < N; i++) {
        char c=data.charAt(i);
        if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '.' || c == '-') {
          continue;
        }
        if (c == ':' && i > 0) {
          scheme=data.substring(0,i);
          uri.append("intent:");
          data=data.substring(i + 1);
          break;
        }
        break;
      }
    }
    uri.append(data);
  }
 else   if ((flags & URI_INTENT_SCHEME) != 0) {
    uri.append("intent:");
  }
  uri.append("#Intent;");
  if (scheme != null) {
    uri.append("scheme=").append(scheme).append(';');
  }
  if (mAction != null) {
    uri.append("action=").append(Uri.encode(mAction)).append(';');
  }
  if (mCategories != null) {
    for (    String category : mCategories) {
      uri.append("category=").append(Uri.encode(category)).append(';');
    }
  }
  if (mType != null) {
    uri.append("type=").append(Uri.encode(mType,"/")).append(';');
  }
  if (mFlags != 0) {
    uri.append("launchFlags=0x").append(Integer.toHexString(mFlags)).append(';');
  }
  if (mPackage != null) {
    uri.append("package=").append(Uri.encode(mPackage)).append(';');
  }
  if (mComponent != null) {
    uri.append("component=").append(Uri.encode(mComponent.flattenToShortString(),"/")).append(';');
  }
  if (mSourceBounds != null) {
    uri.append("sourceBounds=").append(Uri.encode(mSourceBounds.flattenToString())).append(';');
  }
  if (mExtras != null) {
    for (    String key : mExtras.keySet()) {
      final Object value=mExtras.get(key);
      char entryType=value instanceof String ? 'S' : value instanceof Boolean ? 'B' : value instanceof Byte ? 'b' : value instanceof Character ? 'c' : value instanceof Double ? 'd' : value instanceof Float ? 'f' : value instanceof Integer ? 'i' : value instanceof Long ? 'l' : value instanceof Short ? 's' : '\0';
      if (entryType != '\0') {
        uri.append(entryType);
        uri.append('.');
        uri.append(Uri.encode(key));
        uri.append('=');
        uri.append(Uri.encode(value.toString()));
        uri.append(';');
      }
    }
  }
  uri.append("end");
  return uri.toString();
}
