{
  final Task task=taskStatus.getTask();
  if (taskStatus.getTask().isPeriodic()) {
    out.startTag(null,XML_TAG_PERIODIC);
    out.attribute(null,"period",Long.toString(task.getIntervalMillis()));
  }
 else {
    out.startTag(null,XML_TAG_ONEOFF);
  }
  if (taskStatus.hasDeadlineConstraint()) {
    final long deadlineWallclock=System.currentTimeMillis() + (taskStatus.getLatestRunTimeElapsed() - SystemClock.elapsedRealtime());
    out.attribute(null,"deadline",Long.toString(deadlineWallclock));
  }
  if (taskStatus.hasTimingDelayConstraint()) {
    final long delayWallclock=System.currentTimeMillis() + (taskStatus.getEarliestRunTime() - SystemClock.elapsedRealtime());
    out.attribute(null,"delay",Long.toString(delayWallclock));
  }
  if (taskStatus.getTask().getInitialBackoffMillis() != Task.DEFAULT_INITIAL_BACKOFF_MILLIS || taskStatus.getTask().getBackoffPolicy() != Task.DEFAULT_BACKOFF_POLICY) {
    out.attribute(null,"backoff-policy",Integer.toString(task.getBackoffPolicy()));
    out.attribute(null,"initial-backoff",Long.toString(task.getInitialBackoffMillis()));
  }
  if (task.isPeriodic()) {
    out.endTag(null,XML_TAG_PERIODIC);
  }
 else {
    out.endTag(null,XML_TAG_ONEOFF);
  }
}
