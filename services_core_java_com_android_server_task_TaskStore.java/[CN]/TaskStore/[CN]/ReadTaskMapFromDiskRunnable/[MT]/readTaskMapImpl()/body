{
  FileInputStream fis=mTasksFile.openRead();
  XmlPullParser parser=Xml.newPullParser();
  parser.setInput(fis,null);
  int eventType=parser.getEventType();
  while (eventType != XmlPullParser.START_TAG && eventType != XmlPullParser.END_DOCUMENT) {
    eventType=parser.next();
    Slog.d(TAG,parser.getName());
  }
  if (eventType == XmlPullParser.END_DOCUMENT) {
    if (DEBUG) {
      Slog.d(TAG,"No persisted tasks.");
    }
    return null;
  }
  String tagName=parser.getName();
  if ("task-info".equals(tagName)) {
    final List<TaskStatus> tasks=new ArrayList<TaskStatus>();
    try {
      int version=Integer.valueOf(parser.getAttributeValue(null,"version"));
      if (version != TASKS_FILE_VERSION) {
        Slog.d(TAG,"Invalid version number, aborting tasks file read.");
        return null;
      }
    }
 catch (    NumberFormatException e) {
      Slog.e(TAG,"Invalid version number, aborting tasks file read.");
      return null;
    }
    eventType=parser.next();
    do {
      if (eventType == XmlPullParser.START_TAG) {
        tagName=parser.getName();
        if ("task".equals(tagName)) {
          TaskStatus persistedTask=restoreTaskFromXml(parser);
          if (persistedTask != null) {
            if (DEBUG) {
              Slog.d(TAG,"Read out " + persistedTask);
            }
            tasks.add(persistedTask);
          }
 else {
            Slog.d(TAG,"Error reading task from file.");
          }
        }
      }
      eventType=parser.next();
    }
 while (eventType != XmlPullParser.END_DOCUMENT);
    return tasks;
  }
  return null;
}
