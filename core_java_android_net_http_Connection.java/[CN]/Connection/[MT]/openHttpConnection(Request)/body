{
  long now=SystemClock.uptimeMillis();
  int error=EventHandler.OK;
  Exception exception=null;
  try {
    mCertificate=null;
    mHttpClientConnection=openConnection(req);
    if (mHttpClientConnection != null) {
      mHttpClientConnection.setSocketTimeout(SOCKET_TIMEOUT);
      mHttpContext.setAttribute(HTTP_CONNECTION,mHttpClientConnection);
    }
 else {
      req.mFailCount=RETRY_REQUEST_LIMIT;
      return false;
    }
  }
 catch (  UnknownHostException e) {
    if (HttpLog.LOGV)     HttpLog.v("Failed to open connection");
    error=EventHandler.ERROR_LOOKUP;
    exception=e;
  }
catch (  IllegalArgumentException e) {
    if (HttpLog.LOGV)     HttpLog.v("Illegal argument exception");
    error=EventHandler.ERROR_CONNECT;
    req.mFailCount=RETRY_REQUEST_LIMIT;
    exception=e;
  }
catch (  SSLConnectionClosedByUserException e) {
    req.mFailCount=RETRY_REQUEST_LIMIT;
    return false;
  }
catch (  SSLHandshakeException e) {
    req.mFailCount=RETRY_REQUEST_LIMIT;
    if (HttpLog.LOGV)     HttpLog.v("SSL exception performing handshake");
    error=EventHandler.ERROR_FAILED_SSL_HANDSHAKE;
    exception=e;
  }
catch (  IOException e) {
    error=EventHandler.ERROR_CONNECT;
    exception=e;
  }
  if (HttpLog.LOGV) {
    long now2=SystemClock.uptimeMillis();
    HttpLog.v("Connection.openHttpConnection() " + (now2 - now) + " "+ mHost);
  }
  if (error == EventHandler.OK) {
    return true;
  }
 else {
    if (req.mFailCount < RETRY_REQUEST_LIMIT) {
      mRequestFeeder.requeueRequest(req);
      req.mFailCount++;
    }
 else {
      httpFailure(req,error,exception);
    }
    return error == EventHandler.OK;
  }
}
