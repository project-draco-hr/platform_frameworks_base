{
  long dtstart=-1;
  if (values.containsKey(CalendarContract.Events.DTSTART)) {
    dtstart=values.getAsLong(CalendarContract.Events.DTSTART);
  }
  String duration=values.getAsString(CalendarContract.Events.DURATION);
  String tzid=values.getAsString(CalendarContract.Events.EVENT_TIMEZONE);
  String rruleStr=values.getAsString(CalendarContract.Events.RRULE);
  String rdateStr=values.getAsString(CalendarContract.Events.RDATE);
  String exruleStr=values.getAsString(CalendarContract.Events.EXRULE);
  String exdateStr=values.getAsString(CalendarContract.Events.EXDATE);
  Integer allDayInteger=values.getAsInteger(CalendarContract.Events.ALL_DAY);
  boolean allDay=(null != allDayInteger) ? (allDayInteger == 1) : false;
  if ((dtstart == -1) || (TextUtils.isEmpty(duration)) || ((TextUtils.isEmpty(rruleStr)) && (TextUtils.isEmpty(rdateStr)))) {
    return false;
  }
  ICalendar.Property dtstartProp=new ICalendar.Property("DTSTART");
  Time dtstartTime=null;
  if (!TextUtils.isEmpty(tzid)) {
    if (!allDay) {
      dtstartProp.addParameter(new ICalendar.Parameter("TZID",tzid));
    }
    dtstartTime=new Time(tzid);
  }
 else {
    dtstartTime=new Time(Time.TIMEZONE_UTC);
  }
  dtstartTime.set(dtstart);
  if (allDay) {
    dtstartProp.addParameter(new ICalendar.Parameter("VALUE","DATE"));
    dtstartTime.allDay=true;
    dtstartTime.hour=0;
    dtstartTime.minute=0;
    dtstartTime.second=0;
  }
  dtstartProp.setValue(dtstartTime.format2445());
  component.addProperty(dtstartProp);
  ICalendar.Property durationProp=new ICalendar.Property("DURATION");
  durationProp.setValue(duration);
  component.addProperty(durationProp);
  addPropertiesForRuleStr(component,"RRULE",rruleStr);
  addPropertyForDateStr(component,"RDATE",rdateStr);
  addPropertiesForRuleStr(component,"EXRULE",exruleStr);
  addPropertyForDateStr(component,"EXDATE",exdateStr);
  return true;
}
