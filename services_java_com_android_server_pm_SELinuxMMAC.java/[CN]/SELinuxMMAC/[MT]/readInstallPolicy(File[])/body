{
  HashMap<Signature,Policy> sigSeinfo=new HashMap<Signature,Policy>();
  String defaultSeinfo=null;
  FileReader policyFile=null;
  int i=0;
  while (policyFile == null && policyFiles != null && policyFiles[i] != null) {
    try {
      policyFile=new FileReader(policyFiles[i]);
      break;
    }
 catch (    FileNotFoundException e) {
      Slog.d(TAG,"Couldn't find install policy " + policyFiles[i].getPath());
    }
    i++;
  }
  if (policyFile == null) {
    Slog.d(TAG,"No policy file found. All seinfo values will be null.");
    return false;
  }
  Slog.d(TAG,"Using install policy file " + policyFiles[i].getPath());
  try {
    XmlPullParser parser=Xml.newPullParser();
    parser.setInput(policyFile);
    XmlUtils.beginDocument(parser,"policy");
    while (true) {
      XmlUtils.nextElement(parser);
      if (parser.getEventType() == XmlPullParser.END_DOCUMENT) {
        break;
      }
      String tagName=parser.getName();
      if ("signer".equals(tagName)) {
        String cert=parser.getAttributeValue(null,"signature");
        if (cert == null) {
          Slog.w(TAG,"<signer> without signature at " + parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        Signature signature;
        try {
          signature=new Signature(cert);
        }
 catch (        IllegalArgumentException e) {
          Slog.w(TAG,"<signer> with bad signature at " + parser.getPositionDescription(),e);
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        Policy policy=readPolicyTags(parser);
        if (policy.isValid()) {
          sigSeinfo.put(signature,policy);
        }
      }
 else       if ("default".equals(tagName)) {
        defaultSeinfo=readSeinfoTag(parser);
        if (DEBUG_POLICY_INSTALL)         Slog.i(TAG,"<default> tag assigned seinfo=" + defaultSeinfo);
      }
 else {
        XmlUtils.skipCurrentTag(parser);
      }
    }
  }
 catch (  XmlPullParserException e) {
    Slog.w(TAG,"Got exception parsing ",e);
    return false;
  }
catch (  IOException e) {
    Slog.w(TAG,"Got exception parsing ",e);
    return false;
  }
 finally {
    try {
      policyFile.close();
    }
 catch (    IOException e) {
    }
  }
  flushInstallPolicy();
  sSigSeinfo=sigSeinfo;
  sDefaultSeinfo=defaultSeinfo;
  return true;
}
