{
  int policy=violation.getPolicy();
  ApplicationErrorReport.CrashInfo crashInfo=new ApplicationErrorReport.CrashInfo(violation);
  crashInfo.durationMillis=durationMillis;
  if ((policy & PENALTY_GATHER) != 0) {
    Log.d(TAG,"StrictMode violation via Binder call; ignoring for now.");
    return;
  }
  Integer crashFingerprint=crashInfo.stackTrace.hashCode();
  long lastViolationTime=0;
  if (mLastViolationTime.containsKey(crashFingerprint)) {
    lastViolationTime=mLastViolationTime.get(crashFingerprint);
  }
  long now=SystemClock.uptimeMillis();
  mLastViolationTime.put(crashFingerprint,now);
  long timeSinceLastViolationMillis=lastViolationTime == 0 ? Long.MAX_VALUE : (now - lastViolationTime);
  if ((policy & PENALTY_LOG) != 0 && timeSinceLastViolationMillis > MIN_LOG_INTERVAL_MS) {
    if (durationMillis != -1) {
      Log.d(TAG,"StrictMode policy violation; ~duration=" + durationMillis + " ms",violation);
    }
 else {
      Log.d(TAG,"StrictMode policy violation.",violation);
    }
  }
  int violationMask=0;
  if ((policy & PENALTY_DIALOG) != 0 && timeSinceLastViolationMillis > MIN_DIALOG_INTERVAL_MS) {
    violationMask|=PENALTY_DIALOG;
  }
  if ((policy & PENALTY_DROPBOX) != 0 && lastViolationTime == 0) {
    violationMask|=PENALTY_DROPBOX;
  }
  if (violationMask != 0) {
    violationMask|=violation.getPolicyViolation();
    final int savedPolicy=getThreadBlockingPolicy();
    try {
      setThreadBlockingPolicy(0);
      ActivityManagerNative.getDefault().handleApplicationStrictModeViolation(RuntimeInit.getApplicationObject(),violationMask,new ApplicationErrorReport.CrashInfo(violation));
    }
 catch (    RemoteException e) {
      Log.e(TAG,"RemoteException trying to handle StrictMode violation",e);
    }
 finally {
      setThreadBlockingPolicy(savedPolicy);
    }
  }
  if ((policy & PENALTY_DEATH) != 0) {
    System.err.println("StrictMode policy violation with POLICY_DEATH; shutting down.");
    Process.killProcess(Process.myPid());
    System.exit(10);
  }
}
