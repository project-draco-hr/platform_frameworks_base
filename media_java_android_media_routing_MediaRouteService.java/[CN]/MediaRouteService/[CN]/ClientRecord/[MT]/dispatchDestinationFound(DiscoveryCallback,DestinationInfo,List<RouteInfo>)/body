{
  if (callback == mDiscoveryCallback) {
    if (DEBUG) {
      Log.d(TAG,"destinationFound: destination=" + destination + ", routes="+ routes);
    }
    mDestinations.put(destination.getId(),new DestinationRecord(destination,routes));
    ParcelableDestinationInfo pdi=new ParcelableDestinationInfo();
    pdi.id=destination.getId();
    pdi.name=destination.getName();
    pdi.description=destination.getDescription();
    pdi.iconResourceId=destination.getIconResourceId();
    pdi.extras=destination.getExtras();
    ArrayList<ParcelableRouteInfo> pris=new ArrayList<ParcelableRouteInfo>();
    for (    RouteInfo route : routes) {
      int selectorIndex=mDiscoveryRequest.getSelectors().indexOf(route.getSelector());
      if (selectorIndex < 0) {
        Log.w(TAG,"Ignoring route because the selector does not match " + "any of those that were originally supplied by the " + "client's discovery request: destination=" + destination + ", route="+ route);
        continue;
      }
      ParcelableRouteInfo pri=new ParcelableRouteInfo();
      pri.id=route.getId();
      pri.selectorIndex=selectorIndex;
      pri.features=route.getFeatures();
      pri.protocols=route.getProtocols().toArray(new String[route.getProtocols().size()]);
      pri.extras=route.getExtras();
      pris.add(pri);
    }
    try {
      mClientCallback.onDestinationFound(mDiscoverySeq,pdi,pris.toArray(new ParcelableRouteInfo[pris.size()]));
    }
 catch (    RemoteException ex) {
    }
  }
}
