{
  if (mAudioWaveformFilename == null) {
    final String projectPath=mMANativeHelper.getProjectPath();
    final String audioWaveFilename=String.format(projectPath + "/audioWaveformFile-" + getId()+ ".dat");
    final int frameDuration;
    final int sampleCount;
    final int codecType=mMANativeHelper.getAudioCodecType(mAudioType);
switch (codecType) {
case MediaProperties.ACODEC_AMRNB:
{
        frameDuration=(MediaProperties.SAMPLES_PER_FRAME_AMRNB * 1000) / MediaProperties.DEFAULT_SAMPLING_FREQUENCY;
        sampleCount=MediaProperties.SAMPLES_PER_FRAME_AMRNB;
        break;
      }
case MediaProperties.ACODEC_AMRWB:
{
      frameDuration=(MediaProperties.SAMPLES_PER_FRAME_AMRWB * 1000) / MediaProperties.DEFAULT_SAMPLING_FREQUENCY;
      sampleCount=MediaProperties.SAMPLES_PER_FRAME_AMRWB;
      break;
    }
case MediaProperties.ACODEC_AAC_LC:
{
    frameDuration=(MediaProperties.SAMPLES_PER_FRAME_AAC * 1000) / MediaProperties.DEFAULT_SAMPLING_FREQUENCY;
    sampleCount=MediaProperties.SAMPLES_PER_FRAME_AAC;
    break;
  }
case MediaProperties.ACODEC_MP3:
{
  frameDuration=(MediaProperties.SAMPLES_PER_FRAME_MP3 * 1000) / MediaProperties.DEFAULT_SAMPLING_FREQUENCY;
  sampleCount=MediaProperties.SAMPLES_PER_FRAME_MP3;
  break;
}
default :
{
throw new IllegalStateException("Unsupported codec type: " + codecType);
}
}
mMANativeHelper.generateAudioGraph(mUniqueId,mFilename,audioWaveFilename,frameDuration,MediaProperties.DEFAULT_CHANNEL_COUNT,sampleCount,listener,false);
mAudioWaveformFilename=audioWaveFilename;
}
mWaveformData=new SoftReference<WaveformData>(new WaveformData(mAudioWaveformFilename));
}
