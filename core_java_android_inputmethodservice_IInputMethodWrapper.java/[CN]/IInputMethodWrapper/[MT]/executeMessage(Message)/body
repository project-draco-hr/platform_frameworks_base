{
switch (msg.what) {
case DO_DUMP:
{
      HandlerCaller.SomeArgs args=(HandlerCaller.SomeArgs)msg.obj;
      try {
        mTarget.dump((FileDescriptor)args.arg1,(PrintWriter)args.arg2,(String[])args.arg3);
      }
 catch (      RuntimeException e) {
        ((PrintWriter)args.arg2).println("Exception: " + e);
      }
synchronized (args.arg4) {
        ((CountDownLatch)args.arg4).countDown();
      }
      return;
    }
case DO_ATTACH_TOKEN:
{
    mInputMethod.attachToken((IBinder)msg.obj);
    return;
  }
case DO_SET_INPUT_CONTEXT:
{
  mInputMethod.bindInput((InputBinding)msg.obj);
  return;
}
case DO_UNSET_INPUT_CONTEXT:
mInputMethod.unbindInput();
return;
case DO_START_INPUT:
{
HandlerCaller.SomeArgs args=(HandlerCaller.SomeArgs)msg.obj;
IInputContext inputContext=(IInputContext)args.arg1;
InputConnection ic=inputContext != null ? new InputConnectionWrapper(inputContext) : null;
mInputMethod.startInput(ic,(EditorInfo)args.arg2);
return;
}
case DO_RESTART_INPUT:
{
HandlerCaller.SomeArgs args=(HandlerCaller.SomeArgs)msg.obj;
IInputContext inputContext=(IInputContext)args.arg1;
InputConnection ic=inputContext != null ? new InputConnectionWrapper(inputContext) : null;
mInputMethod.restartInput(ic,(EditorInfo)args.arg2);
return;
}
case DO_CREATE_SESSION:
{
mInputMethod.createSession(new InputMethodSessionCallbackWrapper(mCaller.mContext,(IInputMethodCallback)msg.obj));
return;
}
case DO_SET_SESSION_ENABLED:
mInputMethod.setSessionEnabled((InputMethodSession)msg.obj,msg.arg1 != 0);
return;
case DO_REVOKE_SESSION:
mInputMethod.revokeSession((InputMethodSession)msg.obj);
return;
case DO_SHOW_SOFT_INPUT:
mInputMethod.showSoftInput(msg.arg1);
return;
case DO_HIDE_SOFT_INPUT:
mInputMethod.hideSoftInput();
return;
}
Log.w(TAG,"Unhandled message code: " + msg.what);
}
