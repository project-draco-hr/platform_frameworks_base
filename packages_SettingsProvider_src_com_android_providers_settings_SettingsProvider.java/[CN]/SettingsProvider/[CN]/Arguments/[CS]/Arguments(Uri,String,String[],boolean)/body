{
  final int segmentSize=uri.getPathSegments().size();
switch (segmentSize) {
case 1:
{
      if (where != null && (WHERE_PATTERN_WITH_PARAM_NO_BRACKETS.matcher(where).matches() || WHERE_PATTERN_WITH_PARAM_IN_BRACKETS.matcher(where).matches()) && whereArgs.length == 1) {
        name=whereArgs[0];
        table=computeTableForSetting(uri,name);
      }
 else       if (where != null && (WHERE_PATTERN_NO_PARAM_NO_BRACKETS.matcher(where).matches() || WHERE_PATTERN_NO_PARAM_IN_BRACKETS.matcher(where).matches())) {
        final int startIndex=Math.max(where.indexOf("'"),where.indexOf("\"")) + 1;
        final int endIndex=Math.max(where.lastIndexOf("'"),where.lastIndexOf("\""));
        name=where.substring(startIndex,endIndex);
        table=computeTableForSetting(uri,name);
      }
 else       if (supportAll && where == null && whereArgs == null) {
        name=null;
        table=computeTableForSetting(uri,null);
      }
 else       if (uri.getPathSegments().size() == 2 && where == null && whereArgs == null) {
        name=uri.getPathSegments().get(1);
        table=computeTableForSetting(uri,name);
      }
 else {
        EventLogTags.writeUnsupportedSettingsQuery(uri.toSafeString(),where,Arrays.toString(whereArgs));
        throw new IllegalArgumentException("Only null where and args" + " or name=? where and a single arg or name='SOME_SETTING' " + "are supported uri: " + uri + " where: "+ where+ " args: "+ Arrays.toString(whereArgs));
      }
    }
  break;
default :
{
  throw new IllegalArgumentException("Invalid URI: " + uri);
}
}
}
