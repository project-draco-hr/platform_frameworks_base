{
  Connection cn;
  Message msg;
  AsyncResult ar;
  assertEquals(Phone.State.IDLE,mGSMPhone.getState());
  assertEquals(0,mGSMPhone.getRingingCall().getConnections().size());
  assertEquals(0,mGSMPhone.getForegroundCall().getConnections().size());
  assertEquals(0,mGSMPhone.getBackgroundCall().getConnections().size());
  assertEquals(Call.State.IDLE,mGSMPhone.getRingingCall().getState());
  assertEquals(Call.State.IDLE,mGSMPhone.getForegroundCall().getState());
  assertEquals(Call.State.IDLE,mGSMPhone.getBackgroundCall().getState());
  assertEquals(0,mGSMPhone.getForegroundCall().getEarliestCreateTime());
  assertEquals(0,mGSMPhone.getForegroundCall().getEarliestConnectTime());
  assertFalse(mGSMPhone.canConference());
  mRadioControl.setAutoProgressConnectingCall(false);
  mGSMPhone.dial("+13125551212");
  assertEquals(Phone.State.OFFHOOK,mGSMPhone.getState());
  do {
    msg=mTestHandler.getNextMessage();
  }
 while (msg.what != EVENT_PHONE_STATE_CHANGED);
  assertEquals(Phone.State.OFFHOOK,mGSMPhone.getState());
  assertEquals(Call.State.DIALING,mGSMPhone.getForegroundCall().getState());
  assertTrue(mGSMPhone.getForegroundCall().isDialingOrAlerting());
  assertEquals(0,mGSMPhone.getRingingCall().getConnections().size());
  assertEquals(1,mGSMPhone.getForegroundCall().getConnections().size());
  assertEquals(0,mGSMPhone.getBackgroundCall().getConnections().size());
  assertEquals(Call.State.IDLE,mGSMPhone.getRingingCall().getState());
  assertEquals(Call.State.DIALING,mGSMPhone.getForegroundCall().getState());
  assertEquals(Call.State.IDLE,mGSMPhone.getBackgroundCall().getState());
  assertTrue(mGSMPhone.getForegroundCall().getEarliestCreateTime() > 0);
  assertEquals(0,mGSMPhone.getForegroundCall().getEarliestConnectTime());
  cn=mGSMPhone.getForegroundCall().getConnections().get(0);
  assertTrue(!cn.isIncoming());
  assertEquals(Connection.PostDialState.NOT_STARTED,cn.getPostDialState());
  assertEquals(Connection.DisconnectCause.NOT_DISCONNECTED,cn.getDisconnectCause());
  assertFalse(mGSMPhone.canConference());
  mRadioControl.progressConnectingCallState();
  do {
    mTestHandler.getNextMessage();
  }
 while (mGSMPhone.getForegroundCall().getState() != Call.State.ALERTING);
  assertEquals(Phone.State.OFFHOOK,mGSMPhone.getState());
  assertTrue(mGSMPhone.getForegroundCall().isDialingOrAlerting());
  assertEquals(0,mGSMPhone.getRingingCall().getConnections().size());
  assertEquals(1,mGSMPhone.getForegroundCall().getConnections().size());
  assertEquals(0,mGSMPhone.getBackgroundCall().getConnections().size());
  assertEquals(Call.State.IDLE,mGSMPhone.getRingingCall().getState());
  assertEquals(Call.State.ALERTING,mGSMPhone.getForegroundCall().getState());
  assertEquals(Call.State.IDLE,mGSMPhone.getBackgroundCall().getState());
  assertTrue(mGSMPhone.getForegroundCall().getEarliestCreateTime() > 0);
  assertEquals(0,mGSMPhone.getForegroundCall().getEarliestConnectTime());
  cn=mGSMPhone.getForegroundCall().getConnections().get(0);
  assertTrue(!cn.isIncoming());
  assertEquals(Connection.PostDialState.NOT_STARTED,cn.getPostDialState());
  assertFalse(mGSMPhone.canConference());
  mRadioControl.progressConnectingCallState();
  do {
    mTestHandler.getNextMessage();
  }
 while (mGSMPhone.getForegroundCall().getState() != Call.State.ACTIVE);
  assertEquals(Phone.State.OFFHOOK,mGSMPhone.getState());
  assertFalse(mGSMPhone.getForegroundCall().isDialingOrAlerting());
  assertEquals(0,mGSMPhone.getRingingCall().getConnections().size());
  assertEquals(1,mGSMPhone.getForegroundCall().getConnections().size());
  assertEquals(0,mGSMPhone.getBackgroundCall().getConnections().size());
  assertEquals(Call.State.IDLE,mGSMPhone.getRingingCall().getState());
  assertEquals(Call.State.ACTIVE,mGSMPhone.getForegroundCall().getState());
  assertEquals(Call.State.IDLE,mGSMPhone.getBackgroundCall().getState());
  assertTrue(mGSMPhone.getForegroundCall().getEarliestCreateTime() > 0);
  assertTrue(mGSMPhone.getForegroundCall().getEarliestConnectTime() > 0);
  cn=mGSMPhone.getForegroundCall().getConnections().get(0);
  assertTrue(!cn.isIncoming());
  assertEquals(Connection.PostDialState.COMPLETE,cn.getPostDialState());
  assertFalse(mGSMPhone.canConference());
  mGSMPhone.getForegroundCall().hangup();
  do {
    msg=mTestHandler.getNextMessage();
  }
 while (msg.what != EVENT_DISCONNECT);
  assertEquals(Phone.State.IDLE,mGSMPhone.getState());
  assertFalse(mGSMPhone.getForegroundCall().isDialingOrAlerting());
  assertEquals(0,mGSMPhone.getRingingCall().getConnections().size());
  assertEquals(1,mGSMPhone.getForegroundCall().getConnections().size());
  assertEquals(0,mGSMPhone.getBackgroundCall().getConnections().size());
  assertEquals(Call.State.IDLE,mGSMPhone.getRingingCall().getState());
  assertEquals(Call.State.DISCONNECTED,mGSMPhone.getForegroundCall().getState());
  assertEquals(Call.State.IDLE,mGSMPhone.getBackgroundCall().getState());
  assertTrue(mGSMPhone.getForegroundCall().getEarliestCreateTime() > 0);
  assertTrue(mGSMPhone.getForegroundCall().getEarliestConnectTime() > 0);
  assertFalse(mGSMPhone.canConference());
  cn=mGSMPhone.getForegroundCall().getEarliestConnection();
  assertEquals(Call.State.DISCONNECTED,cn.getState());
  mGSMPhone.clearDisconnected();
  assertEquals(Phone.State.IDLE,mGSMPhone.getState());
  assertFalse(mGSMPhone.getForegroundCall().isDialingOrAlerting());
  assertEquals(0,mGSMPhone.getRingingCall().getConnections().size());
  assertEquals(0,mGSMPhone.getForegroundCall().getConnections().size());
  assertEquals(0,mGSMPhone.getBackgroundCall().getConnections().size());
  assertEquals(Call.State.IDLE,mGSMPhone.getRingingCall().getState());
  assertEquals(Call.State.IDLE,mGSMPhone.getForegroundCall().getState());
  assertEquals(Call.State.IDLE,mGSMPhone.getBackgroundCall().getState());
  assertEquals(0,mGSMPhone.getForegroundCall().getEarliestCreateTime());
  assertEquals(0,mGSMPhone.getForegroundCall().getEarliestConnectTime());
  assertFalse(mGSMPhone.canConference());
  assertEquals(Call.State.DISCONNECTED,cn.getState());
  mRadioControl.triggerRing("18005551212");
  do {
    msg=mTestHandler.getNextMessage();
  }
 while (msg.what != EVENT_RINGING);
  assertEquals(Phone.State.RINGING,mGSMPhone.getState());
  assertTrue(mGSMPhone.getRingingCall().isRinging());
  ar=(AsyncResult)msg.obj;
  cn=(Connection)ar.result;
  assertTrue(cn.isRinging());
  assertEquals(mGSMPhone.getRingingCall(),cn.getCall());
  assertEquals(1,mGSMPhone.getRingingCall().getConnections().size());
  assertEquals(0,mGSMPhone.getForegroundCall().getConnections().size());
  assertEquals(0,mGSMPhone.getBackgroundCall().getConnections().size());
  assertEquals(Call.State.INCOMING,mGSMPhone.getRingingCall().getState());
  assertEquals(Call.State.IDLE,mGSMPhone.getForegroundCall().getState());
  assertEquals(Call.State.IDLE,mGSMPhone.getBackgroundCall().getState());
  assertTrue(mGSMPhone.getRingingCall().getEarliestCreateTime() > 0);
  assertEquals(0,mGSMPhone.getRingingCall().getEarliestConnectTime());
  assertEquals(0,mGSMPhone.getForegroundCall().getEarliestCreateTime());
  assertEquals(0,mGSMPhone.getForegroundCall().getEarliestConnectTime());
  cn=mGSMPhone.getRingingCall().getConnections().get(0);
  assertTrue(cn.isIncoming());
  assertEquals(Connection.PostDialState.NOT_STARTED,cn.getPostDialState());
  assertFalse(mGSMPhone.canConference());
  mGSMPhone.acceptCall();
  do {
    mTestHandler.getNextMessage();
  }
 while (mGSMPhone.getRingingCall().getConnections().size() == 1);
  assertEquals(Phone.State.OFFHOOK,mGSMPhone.getState());
  assertFalse(mGSMPhone.getRingingCall().isRinging());
  assertEquals(0,mGSMPhone.getRingingCall().getConnections().size());
  assertEquals(1,mGSMPhone.getForegroundCall().getConnections().size());
  assertEquals(0,mGSMPhone.getBackgroundCall().getConnections().size());
  assertEquals(Call.State.IDLE,mGSMPhone.getRingingCall().getState());
  assertEquals(Call.State.ACTIVE,mGSMPhone.getForegroundCall().getState());
  assertEquals(Call.State.IDLE,mGSMPhone.getBackgroundCall().getState());
  assertTrue(mGSMPhone.getForegroundCall().getEarliestCreateTime() > 0);
  assertTrue(mGSMPhone.getForegroundCall().getEarliestConnectTime() > 0);
  cn=mGSMPhone.getForegroundCall().getConnections().get(0);
  assertTrue(cn.isIncoming());
  assertEquals(Connection.PostDialState.NOT_STARTED,cn.getPostDialState());
  assertFalse(mGSMPhone.canConference());
  try {
    Connection conn;
    conn=mGSMPhone.getForegroundCall().getConnections().get(0);
    conn.hangup();
  }
 catch (  CallStateException ex) {
    ex.printStackTrace();
    fail("unexpected ex");
  }
  do {
    msg=mTestHandler.getNextMessage();
  }
 while (msg.what != EVENT_DISCONNECT);
  assertEquals(Phone.State.IDLE,mGSMPhone.getState());
  assertFalse(mGSMPhone.getForegroundCall().isDialingOrAlerting());
  assertFalse(mGSMPhone.getRingingCall().isRinging());
  assertEquals(0,mGSMPhone.getRingingCall().getConnections().size());
  assertEquals(1,mGSMPhone.getForegroundCall().getConnections().size());
  assertEquals(0,mGSMPhone.getBackgroundCall().getConnections().size());
  assertEquals(Call.State.IDLE,mGSMPhone.getRingingCall().getState());
  assertEquals(Call.State.DISCONNECTED,mGSMPhone.getForegroundCall().getState());
  assertEquals(Call.State.IDLE,mGSMPhone.getBackgroundCall().getState());
  assertTrue(mGSMPhone.getForegroundCall().getEarliestCreateTime() > 0);
  assertTrue(mGSMPhone.getForegroundCall().getEarliestConnectTime() > 0);
  cn=mGSMPhone.getForegroundCall().getEarliestConnection();
  assertEquals(Call.State.DISCONNECTED,cn.getState());
  assertEquals(Connection.DisconnectCause.LOCAL,cn.getDisconnectCause());
  assertFalse(mGSMPhone.canConference());
  mGSMPhone.clearDisconnected();
  assertFalse(mGSMPhone.getForegroundCall().isDialingOrAlerting());
  assertFalse(mGSMPhone.getRingingCall().isRinging());
  assertEquals(Connection.DisconnectCause.LOCAL,cn.getDisconnectCause());
  assertEquals(0,mGSMPhone.getForegroundCall().getConnections().size());
  assertEquals(Phone.State.IDLE,mGSMPhone.getState());
  assertEquals(0,mGSMPhone.getRingingCall().getConnections().size());
  assertEquals(0,mGSMPhone.getForegroundCall().getConnections().size());
  assertEquals(0,mGSMPhone.getBackgroundCall().getConnections().size());
  assertEquals(Call.State.IDLE,mGSMPhone.getRingingCall().getState());
  assertEquals(Call.State.IDLE,mGSMPhone.getForegroundCall().getState());
  assertEquals(Call.State.IDLE,mGSMPhone.getBackgroundCall().getState());
  assertEquals(0,mGSMPhone.getForegroundCall().getEarliestCreateTime());
  assertEquals(0,mGSMPhone.getForegroundCall().getEarliestConnectTime());
  assertFalse(mGSMPhone.canConference());
  assertEquals(Call.State.DISCONNECTED,cn.getState());
  mRadioControl.triggerRing("18005551212");
  do {
    mTestHandler.getNextMessage();
  }
 while (mGSMPhone.getRingingCall().getConnections().isEmpty());
  assertEquals(Phone.State.RINGING,mGSMPhone.getState());
  assertFalse(mGSMPhone.getForegroundCall().isDialingOrAlerting());
  assertTrue(mGSMPhone.getRingingCall().isRinging());
  assertEquals(1,mGSMPhone.getRingingCall().getConnections().size());
  assertEquals(0,mGSMPhone.getForegroundCall().getConnections().size());
  assertEquals(0,mGSMPhone.getBackgroundCall().getConnections().size());
  assertEquals(Call.State.INCOMING,mGSMPhone.getRingingCall().getState());
  assertEquals(Call.State.IDLE,mGSMPhone.getForegroundCall().getState());
  assertEquals(Call.State.IDLE,mGSMPhone.getBackgroundCall().getState());
  assertTrue(mGSMPhone.getRingingCall().getEarliestCreateTime() > 0);
  assertEquals(0,mGSMPhone.getRingingCall().getEarliestConnectTime());
  assertEquals(0,mGSMPhone.getForegroundCall().getEarliestCreateTime());
  assertEquals(0,mGSMPhone.getForegroundCall().getEarliestConnectTime());
  assertFalse(mGSMPhone.canConference());
  mGSMPhone.rejectCall();
  do {
    mTestHandler.getNextMessage();
  }
 while (mGSMPhone.getState() != Phone.State.IDLE);
  assertFalse(mGSMPhone.getForegroundCall().isDialingOrAlerting());
  assertFalse(mGSMPhone.getRingingCall().isRinging());
  assertEquals(1,mGSMPhone.getRingingCall().getConnections().size());
  assertEquals(0,mGSMPhone.getForegroundCall().getConnections().size());
  assertEquals(0,mGSMPhone.getBackgroundCall().getConnections().size());
  assertEquals(Call.State.DISCONNECTED,mGSMPhone.getRingingCall().getState());
  assertEquals(Call.State.IDLE,mGSMPhone.getForegroundCall().getState());
  assertEquals(Call.State.IDLE,mGSMPhone.getBackgroundCall().getState());
  assertTrue(mGSMPhone.getRingingCall().getEarliestCreateTime() > 0);
  assertEquals(0,mGSMPhone.getRingingCall().getEarliestConnectTime());
  assertEquals(0,mGSMPhone.getForegroundCall().getEarliestCreateTime());
  assertEquals(0,mGSMPhone.getForegroundCall().getEarliestConnectTime());
  cn=mGSMPhone.getRingingCall().getEarliestConnection();
  assertEquals(Call.State.DISCONNECTED,cn.getState());
  assertEquals(Connection.DisconnectCause.INCOMING_MISSED,cn.getDisconnectCause());
  assertFalse(mGSMPhone.canConference());
  mGSMPhone.clearDisconnected();
  assertEquals(Connection.DisconnectCause.INCOMING_MISSED,cn.getDisconnectCause());
  assertEquals(0,mGSMPhone.getForegroundCall().getConnections().size());
  assertEquals(Phone.State.IDLE,mGSMPhone.getState());
  assertEquals(0,mGSMPhone.getRingingCall().getConnections().size());
  assertEquals(0,mGSMPhone.getForegroundCall().getConnections().size());
  assertEquals(0,mGSMPhone.getBackgroundCall().getConnections().size());
  assertEquals(Call.State.IDLE,mGSMPhone.getRingingCall().getState());
  assertEquals(Call.State.IDLE,mGSMPhone.getForegroundCall().getState());
  assertEquals(Call.State.IDLE,mGSMPhone.getBackgroundCall().getState());
  assertEquals(0,mGSMPhone.getForegroundCall().getEarliestCreateTime());
  assertEquals(0,mGSMPhone.getForegroundCall().getEarliestConnectTime());
  assertFalse(mGSMPhone.canConference());
  assertEquals(Call.State.DISCONNECTED,cn.getState());
  mRadioControl.triggerRing("18005551212");
  do {
    mTestHandler.getNextMessage();
  }
 while (mGSMPhone.getRingingCall().getConnections().isEmpty());
  assertEquals(Phone.State.RINGING,mGSMPhone.getState());
  assertFalse(mGSMPhone.getForegroundCall().isDialingOrAlerting());
  assertTrue(mGSMPhone.getRingingCall().isRinging());
  cn=mGSMPhone.getRingingCall().getEarliestConnection();
  mRadioControl.triggerHangupForeground();
  do {
    mTestHandler.getNextMessage();
  }
 while (mGSMPhone.getState() != Phone.State.IDLE);
  assertEquals(Connection.DisconnectCause.INCOMING_MISSED,cn.getDisconnectCause());
  mRadioControl.triggerRing("18005551212");
  do {
    mTestHandler.getNextMessage();
  }
 while (mGSMPhone.getState() != Phone.State.RINGING);
  cn=mGSMPhone.getRingingCall().getEarliestConnection();
  mGSMPhone.acceptCall();
  do {
    mTestHandler.getNextMessage();
  }
 while (mGSMPhone.getState() != Phone.State.OFFHOOK);
  assertEquals(Call.State.ACTIVE,mGSMPhone.getForegroundCall().getState());
  assertEquals(Call.State.IDLE,mGSMPhone.getBackgroundCall().getState());
  mGSMPhone.switchHoldingAndActive();
  do {
    mTestHandler.getNextMessage();
  }
 while (mGSMPhone.getBackgroundCall().getState() == Call.State.IDLE);
  assertEquals(Call.State.IDLE,mGSMPhone.getForegroundCall().getState());
  assertEquals(Call.State.HOLDING,mGSMPhone.getBackgroundCall().getState());
  mGSMPhone.switchHoldingAndActive();
  do {
    mTestHandler.getNextMessage();
  }
 while (mGSMPhone.getBackgroundCall().getState() == Call.State.HOLDING);
  assertEquals(Call.State.ACTIVE,mGSMPhone.getForegroundCall().getState());
  assertEquals(Call.State.IDLE,mGSMPhone.getBackgroundCall().getState());
  mRadioControl.triggerHangupAll();
  do {
    mTestHandler.getNextMessage();
  }
 while (mGSMPhone.getState() != Phone.State.IDLE);
  assertEquals(Call.State.DISCONNECTED,mGSMPhone.getForegroundCall().getState());
  assertEquals(Connection.DisconnectCause.NORMAL,cn.getDisconnectCause());
  mRadioControl.triggerRing("18005551212");
  do {
    mTestHandler.getNextMessage();
  }
 while (mGSMPhone.getState() != Phone.State.RINGING);
  mGSMPhone.rejectCall();
  do {
    msg=mTestHandler.getNextMessage();
  }
 while (msg.what != EVENT_DISCONNECT);
  ar=(AsyncResult)msg.obj;
  cn=(Connection)ar.result;
  assertEquals(Connection.DisconnectCause.INCOMING_MISSED,cn.getDisconnectCause());
  assertEquals(Phone.State.IDLE,mGSMPhone.getState());
  assertEquals(Call.State.DISCONNECTED,mGSMPhone.getRingingCall().getState());
  mRadioControl.triggerRing("18005551212");
  do {
    mTestHandler.getNextMessage();
  }
 while (mGSMPhone.getState() != Phone.State.RINGING);
  cn=mGSMPhone.getRingingCall().getEarliestConnection();
  mGSMPhone.acceptCall();
  do {
    mTestHandler.getNextMessage();
  }
 while (mGSMPhone.getState() != Phone.State.OFFHOOK);
  assertEquals(Connection.DisconnectCause.NOT_DISCONNECTED,cn.getDisconnectCause());
  assertEquals(Call.State.IDLE,mGSMPhone.getRingingCall().getState());
  assertEquals(Call.State.ACTIVE,mGSMPhone.getForegroundCall().getState());
  try {
    mGSMPhone.getForegroundCall().hangup();
  }
 catch (  CallStateException ex) {
    ex.printStackTrace();
    fail("unexpected ex");
  }
  do {
    mTestHandler.getNextMessage();
  }
 while (mGSMPhone.getForegroundCall().getState() != Call.State.DISCONNECTED);
  assertEquals(Connection.DisconnectCause.LOCAL,cn.getDisconnectCause());
  mGSMPhone.dial("+13125551212");
  do {
    mTestHandler.getNextMessage();
  }
 while (mGSMPhone.getState() != Phone.State.OFFHOOK);
  assertTrue(mGSMPhone.getForegroundCall().isDialingOrAlerting());
  mRadioControl.progressConnectingCallState();
  mRadioControl.progressConnectingCallState();
  do {
    mTestHandler.getNextMessage();
  }
 while (mGSMPhone.getForegroundCall().getState() != Call.State.ACTIVE);
  assertFalse(mGSMPhone.getForegroundCall().isDialingOrAlerting());
  mRadioControl.triggerRing("18005551212");
  do {
    mTestHandler.getNextMessage();
  }
 while (mGSMPhone.getState() != Phone.State.RINGING);
  assertFalse(mGSMPhone.getForegroundCall().isDialingOrAlerting());
  assertTrue(mGSMPhone.getRingingCall().isRinging());
  mGSMPhone.acceptCall();
  do {
    mTestHandler.getNextMessage();
  }
 while (mGSMPhone.getState() != Phone.State.OFFHOOK);
  assertFalse(mGSMPhone.getForegroundCall().isDialingOrAlerting());
  assertEquals(Call.State.IDLE,mGSMPhone.getRingingCall().getState());
  assertEquals(Call.State.ACTIVE,mGSMPhone.getForegroundCall().getState());
  assertEquals(Call.State.HOLDING,mGSMPhone.getBackgroundCall().getState());
  assertTrue(mGSMPhone.canConference());
  mGSMPhone.conference();
  do {
    mTestHandler.getNextMessage();
  }
 while (mGSMPhone.getBackgroundCall().getState() != Call.State.IDLE);
  assertFalse(mGSMPhone.getForegroundCall().isDialingOrAlerting());
  assertEquals(Call.State.IDLE,mGSMPhone.getRingingCall().getState());
  assertEquals(Call.State.ACTIVE,mGSMPhone.getForegroundCall().getState());
  assertTrue(mGSMPhone.getForegroundCall().isMultiparty());
  assertFalse(mGSMPhone.canConference());
  mGSMPhone.switchHoldingAndActive();
  do {
    mTestHandler.getNextMessage();
  }
 while (mGSMPhone.getBackgroundCall().getState() != Call.State.HOLDING);
  assertEquals(Call.State.IDLE,mGSMPhone.getRingingCall().getState());
  assertEquals(Call.State.IDLE,mGSMPhone.getForegroundCall().getState());
  assertTrue(mGSMPhone.getBackgroundCall().isMultiparty());
  assertFalse(mGSMPhone.canConference());
  mRadioControl.triggerRing("18005558355");
  do {
    mTestHandler.getNextMessage();
  }
 while (mGSMPhone.getState() != Phone.State.RINGING);
  assertFalse(mGSMPhone.getForegroundCall().isDialingOrAlerting());
  assertTrue(mGSMPhone.getRingingCall().isRinging());
  assertEquals(Call.State.IDLE,mGSMPhone.getForegroundCall().getState());
  assertEquals(Call.State.HOLDING,mGSMPhone.getBackgroundCall().getState());
  assertTrue(mGSMPhone.getBackgroundCall().isMultiparty());
  assertEquals(Call.State.WAITING,mGSMPhone.getRingingCall().getState());
  assertFalse(mGSMPhone.canConference());
  mGSMPhone.getBackgroundCall().hangup();
  do {
    mTestHandler.getNextMessage();
  }
 while (mGSMPhone.getBackgroundCall().getState() != Call.State.DISCONNECTED);
  assertEquals(Phone.State.RINGING,mGSMPhone.getState());
  assertEquals(Call.State.DISCONNECTED,mGSMPhone.getBackgroundCall().getState());
  assertFalse(mGSMPhone.getForegroundCall().isDialingOrAlerting());
  assertTrue(mGSMPhone.getRingingCall().isRinging());
  mGSMPhone.rejectCall();
  do {
    mTestHandler.getNextMessage();
  }
 while (mGSMPhone.getState() != Phone.State.IDLE);
  assertFalse(mGSMPhone.getForegroundCall().isDialingOrAlerting());
  assertFalse(mGSMPhone.getRingingCall().isRinging());
}
