{
  int index=getStreamVolume(streamType);
  mRingIsSilent=false;
  if (LOGD) {
    Log.d(mTag,"onShowVolumeChanged(streamType: " + streamToString(streamType) + ", flags: "+ flagsToString(flags)+ "), index: "+ index);
  }
  int max=getStreamMaxVolume(streamType);
  StreamControl sc=mStreamControls.get(streamType);
switch (streamType) {
case AudioManager.STREAM_RING:
{
      Uri ringuri=RingtoneManager.getActualDefaultRingtoneUri(mContext,RingtoneManager.TYPE_RINGTONE);
      if (ringuri == null) {
        mRingIsSilent=true;
      }
      break;
    }
case AudioManager.STREAM_MUSIC:
{
    if ((mAudioManager.getDevicesForStream(AudioManager.STREAM_MUSIC) & (AudioManager.DEVICE_OUT_BLUETOOTH_A2DP | AudioManager.DEVICE_OUT_BLUETOOTH_A2DP_HEADPHONES | AudioManager.DEVICE_OUT_BLUETOOTH_A2DP_SPEAKER)) != 0) {
      setMusicIcon(IC_AUDIO_BT,IC_AUDIO_BT_MUTE);
    }
 else {
      setMusicIcon(IC_AUDIO_VOL,IC_AUDIO_VOL_MUTE);
    }
    break;
  }
case AudioManager.STREAM_VOICE_CALL:
{
  index++;
  max++;
  break;
}
case AudioManager.STREAM_ALARM:
{
break;
}
case AudioManager.STREAM_NOTIFICATION:
{
Uri ringuri=RingtoneManager.getActualDefaultRingtoneUri(mContext,RingtoneManager.TYPE_NOTIFICATION);
if (ringuri == null) {
mRingIsSilent=true;
}
break;
}
case AudioManager.STREAM_BLUETOOTH_SCO:
{
index++;
max++;
break;
}
case STREAM_REMOTE_MUSIC:
{
if (controller == null && sc != null) {
controller=sc.controller;
}
if (controller == null) {
Log.w(mTag,"sent remote volume change without a controller!");
}
 else {
PlaybackInfo vi=controller.getPlaybackInfo();
index=vi.getCurrentVolume();
max=vi.getMaxVolume();
if ((vi.getVolumeControl() & VolumeProvider.VOLUME_CONTROL_FIXED) != 0) {
flags|=AudioManager.FLAG_FIXED_VOLUME;
}
}
if (LOGD) {
Log.d(mTag,"showing remote volume " + index + " over "+ max);
}
break;
}
}
if (sc != null) {
if (streamType == STREAM_REMOTE_MUSIC && controller != sc.controller) {
if (sc.controller != null) {
sc.controller.unregisterCallback(mMediaControllerCb);
}
sc.controller=controller;
if (controller != null) {
sc.controller.registerCallback(mMediaControllerCb);
}
}
if (sc.seekbarView.getMax() != max) {
sc.seekbarView.setMax(max);
}
updateSliderProgress(sc,index);
final boolean muted=isMuted(streamType);
updateSliderEnabled(sc,muted,(flags & AudioManager.FLAG_FIXED_VOLUME) != 0);
if (isNotificationOrRing(streamType)) {
if (mSecondaryIconTransition.isRunning()) {
mSecondaryIconTransition.cancel();
sc.seekbarView.setAlpha(0);
sc.seekbarView.animate().alpha(1);
mZenPanel.setAlpha(0);
mZenPanel.animate().alpha(1);
}
updateSliderIcon(sc,muted);
}
}
if (!isShowing()) {
int stream=(streamType == STREAM_REMOTE_MUSIC) ? -1 : streamType;
mAudioManager.forceVolumeControlStream(stream);
mDialog.show();
if (mCallback != null) {
mCallback.onVisible(true);
}
announceDialogShown();
}
if ((streamType != STREAM_REMOTE_MUSIC) && ((flags & AudioManager.FLAG_VIBRATE) != 0) && isNotificationOrRing(streamType)&& mAudioManager.getRingerModeInternal() == AudioManager.RINGER_MODE_VIBRATE) {
sendMessageDelayed(obtainMessage(MSG_VIBRATE),VIBRATE_DELAY);
}
if ((flags & AudioManager.FLAG_SHOW_SILENT_HINT) != 0) {
showSilentHint();
}
if ((flags & AudioManager.FLAG_SHOW_VIBRATE_HINT) != 0) {
showVibrateHint();
}
}
