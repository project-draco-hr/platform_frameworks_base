{
  final VMRuntime runtime=VMRuntime.getRuntime();
  Debug.startAllocCounting();
  try {
    runtime.gcSoftReferences();
    runtime.runFinalizationSync();
    mResources=Resources.getSystem();
    mResources.startPreloading();
    if (PRELOAD_RESOURCES) {
      Log.i(TAG,"Preloading resources...");
      long startTime=SystemClock.uptimeMillis();
      TypedArray ar=mResources.obtainTypedArray(com.android.internal.R.array.preloaded_drawables);
      int N=ar.length();
      for (int i=0; i < N; i++) {
        if (Debug.getGlobalAllocSize() > PRELOAD_GC_THRESHOLD) {
          if (Config.LOGV) {
            Log.v(TAG," GC at " + Debug.getGlobalAllocSize());
          }
          runtime.gcSoftReferences();
          runtime.runFinalizationSync();
          Debug.resetGlobalAllocSize();
        }
        int id=ar.getResourceId(i,0);
        if (Config.LOGV) {
          Log.v(TAG,"Preloading resource #" + Integer.toHexString(id));
        }
        if (id != 0) {
          Drawable dr=mResources.getDrawable(id);
          if ((dr.getChangingConfigurations() & ~ActivityInfo.CONFIG_FONT_SCALE) != 0) {
            Log.w(TAG,"Preloaded drawable resource #0x" + Integer.toHexString(id) + " that varies with configuration!!");
          }
        }
      }
      Log.i(TAG,"...preloaded " + N + " resources in "+ (SystemClock.uptimeMillis() - startTime)+ "ms.");
    }
    mResources.finishPreloading();
  }
 catch (  RuntimeException e) {
    Log.w(TAG,"Failure preloading resources",e);
  }
 finally {
    Debug.stopAllocCounting();
  }
}
