{
  final VMRuntime runtime=VMRuntime.getRuntime();
  InputStream is=ClassLoader.getSystemClassLoader().getResourceAsStream(PRELOADED_CLASSES);
  if (is == null) {
    Log.e(TAG,"Couldn't find " + PRELOADED_CLASSES + ".");
  }
 else {
    Log.i(TAG,"Preloading classes...");
    long startTime=SystemClock.uptimeMillis();
    setEffectiveGroup(UNPRIVILEGED_GID);
    setEffectiveUser(UNPRIVILEGED_UID);
    float defaultUtilization=runtime.getTargetHeapUtilization();
    runtime.setTargetHeapUtilization(0.8f);
    try {
      BufferedReader br=new BufferedReader(new InputStreamReader(is),256);
      int count=0;
      String line;
      while ((line=br.readLine()) != null) {
        line=line.trim();
        if (line.startsWith("#") || line.equals("")) {
          continue;
        }
        try {
          if (false) {
            Log.v(TAG,"Preloading " + line + "...");
          }
          Class.forName(line);
          count++;
        }
 catch (        ClassNotFoundException e) {
          Log.w(TAG,"Class not found for preloading: " + line);
        }
catch (        UnsatisfiedLinkError e) {
          Log.w(TAG,"Problem preloading " + line + ": "+ e);
        }
catch (        Throwable t) {
          Log.e(TAG,"Error preloading " + line + ".",t);
          if (t instanceof Error) {
            throw (Error)t;
          }
          if (t instanceof RuntimeException) {
            throw (RuntimeException)t;
          }
          throw new RuntimeException(t);
        }
      }
      Log.i(TAG,"...preloaded " + count + " classes in "+ (SystemClock.uptimeMillis() - startTime)+ "ms.");
    }
 catch (    IOException e) {
      Log.e(TAG,"Error reading " + PRELOADED_CLASSES + ".",e);
    }
 finally {
      IoUtils.closeQuietly(is);
      runtime.setTargetHeapUtilization(defaultUtilization);
      runtime.preloadDexCaches();
      setEffectiveUser(ROOT_UID);
      setEffectiveGroup(ROOT_GID);
    }
  }
}
