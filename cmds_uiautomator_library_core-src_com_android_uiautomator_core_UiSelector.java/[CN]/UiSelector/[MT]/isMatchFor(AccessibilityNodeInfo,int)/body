{
  int size=mSelectorAttributes.size();
  for (int x=0; x < size; x++) {
    CharSequence s=null;
    int criterion=mSelectorAttributes.keyAt(x);
switch (criterion) {
case UiSelector.SELECTOR_INDEX:
      if (index != this.getInt(criterion))       return false;
    break;
case UiSelector.SELECTOR_CHECKED:
  if (node.isChecked() != getBoolean(criterion)) {
    return false;
  }
break;
case UiSelector.SELECTOR_CLASS:
s=node.getClassName();
if (s == null || !s.toString().contentEquals(getString(criterion))) {
return false;
}
break;
case UiSelector.SELECTOR_CLASS_REGEX:
s=node.getClassName();
if (s == null || !getPattern(criterion).matcher(s).matches()) {
return false;
}
break;
case UiSelector.SELECTOR_CLICKABLE:
if (node.isClickable() != getBoolean(criterion)) {
return false;
}
break;
case UiSelector.SELECTOR_CHECKABLE:
if (node.isCheckable() != getBoolean(criterion)) {
return false;
}
break;
case UiSelector.SELECTOR_LONG_CLICKABLE:
if (node.isLongClickable() != getBoolean(criterion)) {
return false;
}
break;
case UiSelector.SELECTOR_CONTAINS_DESCRIPTION:
s=node.getContentDescription();
if (s == null || !s.toString().toLowerCase().contains(getString(criterion).toLowerCase())) {
return false;
}
break;
case UiSelector.SELECTOR_START_DESCRIPTION:
s=node.getContentDescription();
if (s == null || !s.toString().toLowerCase().startsWith(getString(criterion).toLowerCase())) {
return false;
}
break;
case UiSelector.SELECTOR_DESCRIPTION:
s=node.getContentDescription();
if (s == null || !s.toString().contentEquals(getString(criterion))) {
return false;
}
break;
case UiSelector.SELECTOR_DESCRIPTION_REGEX:
s=node.getContentDescription();
if (s == null || !getPattern(criterion).matcher(s).matches()) {
return false;
}
break;
case UiSelector.SELECTOR_CONTAINS_TEXT:
s=node.getText();
if (s == null || !s.toString().toLowerCase().contains(getString(criterion).toLowerCase())) {
return false;
}
break;
case UiSelector.SELECTOR_START_TEXT:
s=node.getText();
if (s == null || !s.toString().toLowerCase().startsWith(getString(criterion).toLowerCase())) {
return false;
}
break;
case UiSelector.SELECTOR_TEXT:
s=node.getText();
if (s == null || !s.toString().contentEquals(getString(criterion))) {
return false;
}
break;
case UiSelector.SELECTOR_TEXT_REGEX:
s=node.getText();
if (s == null || !getPattern(criterion).matcher(s).matches()) {
return false;
}
break;
case UiSelector.SELECTOR_ENABLED:
if (node.isEnabled() != getBoolean(criterion)) {
return false;
}
break;
case UiSelector.SELECTOR_FOCUSABLE:
if (node.isFocusable() != getBoolean(criterion)) {
return false;
}
break;
case UiSelector.SELECTOR_FOCUSED:
if (node.isFocused() != getBoolean(criterion)) {
return false;
}
break;
case UiSelector.SELECTOR_ID:
break;
case UiSelector.SELECTOR_PACKAGE_NAME:
s=node.getPackageName();
if (s == null || !s.toString().contentEquals(getString(criterion))) {
return false;
}
break;
case UiSelector.SELECTOR_PACKAGE_NAME_REGEX:
s=node.getPackageName();
if (s == null || !getPattern(criterion).matcher(s).matches()) {
return false;
}
break;
case UiSelector.SELECTOR_SCROLLABLE:
if (node.isScrollable() != getBoolean(criterion)) {
return false;
}
break;
case UiSelector.SELECTOR_SELECTED:
if (node.isSelected() != getBoolean(criterion)) {
return false;
}
break;
case UiSelector.SELECTOR_RESOURCE_ID:
s=node.getViewIdResourceName();
if (s == null || !s.toString().contentEquals(getString(criterion))) {
return false;
}
break;
case UiSelector.SELECTOR_RESOURCE_ID_REGEX:
s=node.getViewIdResourceName();
if (s == null || !getPattern(criterion).matcher(s).matches()) {
return false;
}
break;
}
}
return matchOrUpdateInstance();
}
