{
  if (DEBUG)   Log.d(mTag,"onCreate");
  super.onCreate();
  if (getApplication() instanceof SystemUIApplication) {
    final SystemUIApplication app=(SystemUIApplication)getApplication();
    mHost=app.getComponent(Host.class);
  }
  setWindowless(true);
  mSensors=(SensorManager)mContext.getSystemService(Context.SENSOR_SERVICE);
  mSigMotionSensor=mSensors.getDefaultSensor(Sensor.TYPE_SIGNIFICANT_MOTION);
  mPowerManager=(PowerManager)mContext.getSystemService(Context.POWER_SERVICE);
  mWakeLock=mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,mTag);
  mAlarmManager=(AlarmManager)mContext.getSystemService(Context.ALARM_SERVICE);
  final Resources res=mContext.getResources();
  mSigMotionConfigured=SystemProperties.getBoolean("doze.pulse.sigmotion",res.getBoolean(R.bool.doze_pulse_on_significant_motion));
  mDisplayStateSupported=SystemProperties.getBoolean("doze.display.supported",res.getBoolean(R.bool.doze_display_state_supported));
  mMaxBrightness=MathUtils.constrain(res.getInteger(R.integer.doze_pulse_brightness),BRIGHTNESS_OFF,BRIGHTNESS_ON);
  mNotificationPulseIntent=PendingIntent.getBroadcast(mContext,0,new Intent(NOTIFICATION_PULSE_ACTION).setPackage(getPackageName()),PendingIntent.FLAG_CANCEL_CURRENT);
  mMultipulseCount=SystemProperties.getInt("doze.multipulses",res.getInteger(R.integer.doze_multipulse_count));
  mNotificationPulseInterval=SystemProperties.getInt("doze.notification.pulse",res.getInteger(R.integer.doze_notification_pulse_interval));
  mDisplayStateWhenOn=mDisplayStateSupported ? Display.STATE_DOZE : Display.STATE_ON;
  setDozeScreenState(mDisplayStateWhenOn);
}
