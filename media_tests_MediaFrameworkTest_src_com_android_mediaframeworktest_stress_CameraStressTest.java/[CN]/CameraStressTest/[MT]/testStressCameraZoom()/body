{
  SurfaceHolder mSurfaceHolder;
  mSurfaceHolder=MediaFrameworkTest.mSurfaceView.getHolder();
  File stressOutFile=new File(CAMERA_STRESS_OUTPUT);
  Writer output=new BufferedWriter(new FileWriter(stressOutFile,true));
  output.write("Camera zoom stress:\n");
  output.write("Total number of loops: " + NUMBER_OF_ZOOM_LOOPS + "\n");
  try {
    Log.v(TAG,"Start preview");
    output.write("No of loop: ");
    mCamera=Camera.open();
    Camera.Parameters params=mCamera.getParameters();
    mCamera.release();
    if (!params.isSmoothZoomSupported() && !params.isZoomSupported()) {
      Log.v(TAG,"Device camera does not support zoom");
      assertTrue("Camera zoom stress test",false);
    }
 else {
      Log.v(TAG,"Device camera does support zoom");
      int nextZoomLevel=0;
      for (int i=0; i < NUMBER_OF_ZOOM_LOOPS; i++) {
        runOnLooper(new Runnable(){
          @Override public void run(){
            mCamera=Camera.open();
          }
        }
);
        mCamera.setErrorCallback(mCameraErrorCallback);
        mCamera.setPreviewDisplay(mSurfaceHolder);
        mCamera.startPreview();
        Thread.sleep(WAIT_GENERIC);
        params=mCamera.getParameters();
        int currentZoomLevel=params.getZoom();
        if (nextZoomLevel >= params.getMaxZoom()) {
          nextZoomLevel=0;
        }
        ++nextZoomLevel;
        if (params.isSmoothZoomSupported()) {
          mCamera.startSmoothZoom(nextZoomLevel);
        }
 else {
          params.setZoom(nextZoomLevel);
          mCamera.setParameters(params);
        }
        Log.v(TAG,"Zooming from " + currentZoomLevel + " to "+ nextZoomLevel);
        Thread.sleep(WAIT_ZOOM_ANIMATION);
        mCamera.takePicture(shutterCallback,rawCallback,jpegCallback);
        Thread.sleep(WAIT_GENERIC);
        mCamera.stopPreview();
        mCamera.release();
        output.write(" ," + i);
      }
    }
    cleanupZoomImages();
  }
 catch (  Exception e) {
    assertTrue("Camera zoom stress test Exception",false);
    Log.v(TAG,e.toString());
  }
  output.write("\n\n");
  output.close();
}
