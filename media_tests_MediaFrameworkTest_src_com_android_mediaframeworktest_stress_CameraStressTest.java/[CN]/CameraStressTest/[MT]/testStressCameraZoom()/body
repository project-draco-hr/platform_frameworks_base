{
  try {
    SurfaceHolder surfaceHolder=MediaFrameworkTest.mSurfaceView.getHolder();
    Parameters params=mCameraTestHelper.getCameraParameters();
    if (!params.isSmoothZoomSupported() && !params.isZoomSupported()) {
      Log.v(TAG,"Device camera does not support zoom");
      fail("Camera zoom stress test failed due to unsupported feature");
    }
 else {
      Log.v(TAG,"Device camera does support zoom");
      Log.v(TAG,"Start preview");
      mOutput.write("Total number of loops: " + NUMBER_OF_ZOOM_LOOPS + "\n");
      mOutput.write("No of loops: ");
      int nextZoomLevel=0;
      for (int i=0; i < NUMBER_OF_ZOOM_LOOPS; i++) {
        runOnLooper(new Runnable(){
          @Override public void run(){
            mCameraTestHelper.setupCameraTest();
          }
        }
);
        mCameraTestHelper.startCameraPreview(surfaceHolder);
        params=mCameraTestHelper.mCamera.getParameters();
        int currentZoomLevel=params.getZoom();
        if (nextZoomLevel >= params.getMaxZoom()) {
          nextZoomLevel=0;
        }
        ++nextZoomLevel;
        if (params.isSmoothZoomSupported()) {
          mCameraTestHelper.mCamera.startSmoothZoom(nextZoomLevel);
        }
 else {
          params.setZoom(nextZoomLevel);
          mCameraTestHelper.setParameters(params);
        }
        mCameraTestHelper.capturePhoto();
        if (i == 0) {
          mOutput.write(Integer.toString(i));
        }
 else {
          mOutput.write(", " + i);
        }
      }
    }
    mCameraTestHelper.cleanupTestImages();
  }
 catch (  Exception e) {
    Log.e(TAG,e.toString());
    fail("Camera zoom stress test Exception");
  }
}
