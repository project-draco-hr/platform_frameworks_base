{
  SurfaceHolder mSurfaceHolder;
  mSurfaceHolder=MediaFrameworkTest.mSurfaceView.getHolder();
  mOutput.write("Total number of loops: " + NUMBER_OF_ZOOM_LOOPS + "\n");
  try {
    Log.v(TAG,"Start preview");
    mOutput.write("No of loop: ");
    mCamera=Camera.open(CAMERA_ID);
    Camera.Parameters params=mCamera.getParameters();
    mCamera.release();
    if (!params.isSmoothZoomSupported() && !params.isZoomSupported()) {
      Log.v(TAG,"Device camera does not support zoom");
      fail("Camera zoom stress test failed");
    }
 else {
      Log.v(TAG,"Device camera does support zoom");
      int nextZoomLevel=0;
      for (int i=0; i < NUMBER_OF_ZOOM_LOOPS; i++) {
        runOnLooper(new Runnable(){
          @Override public void run(){
            mCamera=Camera.open(CAMERA_ID);
          }
        }
);
        startCameraPreview(mSurfaceHolder);
        params=mCamera.getParameters();
        int currentZoomLevel=params.getZoom();
        if (nextZoomLevel >= params.getMaxZoom()) {
          nextZoomLevel=0;
        }
        ++nextZoomLevel;
        if (params.isSmoothZoomSupported()) {
          mCamera.startSmoothZoom(nextZoomLevel);
        }
 else {
          params.setZoom(nextZoomLevel);
          mCamera.setParameters(params);
        }
        Log.v(TAG,"Zooming from " + currentZoomLevel + " to "+ nextZoomLevel);
        Thread.sleep(WAIT_ZOOM_ANIMATION);
        capturePhoto();
        if (i == 0) {
          mOutput.write(Integer.toString(i));
        }
 else {
          mOutput.write(", " + i);
        }
      }
    }
    cleanupStressTestImages();
  }
 catch (  Exception e) {
    Log.e(TAG,e.toString());
    fail("Camera zoom stress test Exception");
  }
}
