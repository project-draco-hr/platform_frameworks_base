{
  int DOWNLOAD_FILE_SIZE=500000;
  StatFs fs=new StatFs(CACHE_DIR);
  Log.i(LOG_TAG,"getAvailableBlocks: " + fs.getAvailableBlocks());
  Log.i(LOG_TAG,"getBlockSize: " + fs.getBlockSize());
  int blockSize=fs.getBlockSize();
  int availableBlocks=fs.getAvailableBlocks();
  int availableBytes=blockSize * availableBlocks;
  File outFile=null;
  try {
    if (DOWNLOAD_FILE_SIZE <= availableBytes) {
      int writeSizeBytes=availableBytes - (DOWNLOAD_FILE_SIZE / 2);
      int writeSizeBlocks=writeSizeBytes / blockSize;
      int remainderSizeBlocks=availableBlocks - writeSizeBlocks;
      FileOutputStream fo=null;
      try {
        outFile=File.createTempFile("DM_TEST",null,new File(CACHE_DIR));
        Log.v(LOG_TAG,"writing " + writeSizeBlocks + " blocks to file "+ outFile.getAbsolutePath());
        fo=new FileOutputStream(outFile);
        byte[] buffer=new byte[blockSize];
        while (fs.getAvailableBlocks() >= remainderSizeBlocks) {
          fo.write(buffer);
          fs.restat(CACHE_DIR);
        }
      }
 catch (      IOException e) {
        Log.e(LOG_TAG,"error filling file: ",e);
        throw e;
      }
 finally {
        if (fo != null) {
          fo.close();
        }
      }
    }
    Log.i(LOG_TAG,"Done creating filler file.");
    assertTrue(DOWNLOAD_FILE_SIZE > (fs.getAvailableBlocks() * blockSize));
    byte[] blobData=generateData(DOWNLOAD_FILE_SIZE,DataType.TEXT);
    long dlRequest=doBasicDownload(blobData);
    verifyAndCleanupSingleFileDownload(dlRequest,blobData);
  }
  finally {
    if (outFile != null) {
      outFile.delete();
    }
  }
}
