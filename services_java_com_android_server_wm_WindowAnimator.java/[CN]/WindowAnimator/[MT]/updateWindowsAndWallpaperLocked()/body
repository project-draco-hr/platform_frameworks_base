{
  ++mTransactionSequence;
  ArrayList<WindowStateAnimator> unForceHiding=null;
  boolean wallpaperInUnForceHiding=false;
  WindowStateAnimator windowAnimationBackground=null;
  int windowAnimationBackgroundColor=0;
  WindowState detachedWallpaper=null;
  for (int i=mWinAnimators.size() - 1; i >= 0; i--) {
    WindowStateAnimator winAnimator=mWinAnimators.get(i);
    WindowState win=winAnimator.mWin;
    final int flags=winAnimator.mAttrFlags;
    if (winAnimator.mSurface != null) {
      final boolean wasAnimating=winAnimator.mWasAnimating;
      final boolean nowAnimating=winAnimator.stepAnimationLocked(mCurrentTime);
      if (WindowManagerService.DEBUG_WALLPAPER) {
        Slog.v(TAG,win + ": wasAnimating=" + wasAnimating+ ", nowAnimating="+ nowAnimating);
      }
      if (nowAnimating) {
        if (winAnimator.mAnimation != null) {
          if ((flags & FLAG_SHOW_WALLPAPER) != 0 && winAnimator.mAnimation.getDetachWallpaper()) {
            detachedWallpaper=win;
          }
          final int backgroundColor=winAnimator.mAnimation.getBackgroundColor();
          if (backgroundColor != 0) {
            if (windowAnimationBackground == null || (winAnimator.mAnimLayer < windowAnimationBackground.mAnimLayer)) {
              windowAnimationBackground=winAnimator;
              windowAnimationBackgroundColor=backgroundColor;
            }
          }
        }
        mAnimating=true;
      }
      final AppWindowAnimator appAnimator=win.mAppToken == null ? null : win.mAppToken.mAppAnimator;
      if (appAnimator != null && appAnimator.animation != null && appAnimator.animating) {
        if ((flags & FLAG_SHOW_WALLPAPER) != 0 && appAnimator.animation.getDetachWallpaper()) {
          detachedWallpaper=win;
        }
        final int backgroundColor=appAnimator.animation.getBackgroundColor();
        if (backgroundColor != 0) {
          if (windowAnimationBackground == null || (winAnimator.mAnimLayer < windowAnimationBackground.mAnimLayer)) {
            windowAnimationBackground=winAnimator;
            windowAnimationBackgroundColor=backgroundColor;
          }
        }
      }
      if (wasAnimating && !winAnimator.mAnimating && mService.mWallpaperTarget == win) {
        mBulkUpdateParams|=SET_WALLPAPER_MAY_CHANGE;
        mPendingLayoutChanges|=WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER;
        if (WindowManagerService.DEBUG_LAYOUT_REPEATS) {
          mService.debugLayoutRepeats("updateWindowsAndWallpaperLocked 2",mPendingLayoutChanges);
        }
      }
      if (mPolicy.doesForceHide(win,win.mAttrs)) {
        if (!wasAnimating && nowAnimating) {
          if (WindowManagerService.DEBUG_ANIM || WindowManagerService.DEBUG_VISIBILITY)           Slog.v(TAG,"Animation started that could impact force hide: " + win);
          mBulkUpdateParams|=SET_FORCE_HIDING_CHANGED;
          mPendingLayoutChanges|=WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER;
          if (WindowManagerService.DEBUG_LAYOUT_REPEATS) {
            mService.debugLayoutRepeats("updateWindowsAndWallpaperLocked 3",mPendingLayoutChanges);
          }
          mService.mFocusMayChange=true;
        }
        if (win.isReadyForDisplay() && !winAnimator.isAnimating()) {
          mInner.mForceHiding=true;
        }
        if (WindowManagerService.DEBUG_VISIBILITY)         Slog.v(TAG,"Force hide " + mInner.mForceHiding + " hasSurface="+ win.mHasSurface+ " policyVis="+ win.mPolicyVisibility+ " destroying="+ win.mDestroying+ " attHidden="+ win.mAttachedHidden+ " vis="+ win.mViewVisibility+ " hidden="+ win.mRootToken.hidden+ " anim="+ win.mWinAnimator.mAnimation);
      }
 else       if (mPolicy.canBeForceHidden(win,win.mAttrs)) {
        final boolean changed;
        if (mInner.mForceHiding && !winAnimator.isAnimating()) {
          changed=win.hideLw(false,false);
          if (WindowManagerService.DEBUG_VISIBILITY && changed)           Slog.v(TAG,"Now policy hidden: " + win);
        }
 else {
          changed=win.showLw(false,false);
          if (WindowManagerService.DEBUG_VISIBILITY && changed)           Slog.v(TAG,"Now policy shown: " + win);
          if (changed) {
            if ((mBulkUpdateParams & SET_FORCE_HIDING_CHANGED) != 0 && win.isVisibleNow()) {
              if (unForceHiding == null) {
                unForceHiding=new ArrayList<WindowStateAnimator>();
              }
              unForceHiding.add(winAnimator);
              if ((flags & FLAG_SHOW_WALLPAPER) != 0) {
                wallpaperInUnForceHiding=true;
              }
            }
            if (mCurrentFocus == null || mCurrentFocus.mLayer < win.mLayer) {
              mService.mFocusMayChange=true;
            }
          }
        }
        if (changed && (flags & FLAG_SHOW_WALLPAPER) != 0) {
          mBulkUpdateParams|=SET_WALLPAPER_MAY_CHANGE;
          mPendingLayoutChanges|=WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER;
          if (WindowManagerService.DEBUG_LAYOUT_REPEATS) {
            mService.debugLayoutRepeats("updateWindowsAndWallpaperLocked 4",mPendingLayoutChanges);
          }
        }
      }
    }
    final AppWindowToken atoken=win.mAppToken;
    if (atoken != null && (!atoken.allDrawn || atoken.mAppAnimator.freezingScreen)) {
      if (atoken.lastTransactionSequence != mTransactionSequence) {
        atoken.lastTransactionSequence=mTransactionSequence;
        atoken.numInterestingWindows=atoken.numDrawnWindows=0;
        atoken.startingDisplayed=false;
      }
      if ((win.isOnScreen() || winAnimator.mAttrType == WindowManager.LayoutParams.TYPE_BASE_APPLICATION) && !win.mExiting && !win.mDestroying) {
        if (WindowManagerService.DEBUG_VISIBILITY || WindowManagerService.DEBUG_ORIENTATION) {
          Slog.v(TAG,"Eval win " + win + ": isDrawn="+ win.isDrawnLw()+ ", isAnimating="+ winAnimator.isAnimating());
          if (!win.isDrawnLw()) {
            Slog.v(TAG,"Not displayed: s=" + winAnimator.mSurface + " pv="+ win.mPolicyVisibility+ " mDrawState="+ winAnimator.mDrawState+ " ah="+ win.mAttachedHidden+ " th="+ atoken.hiddenRequested+ " a="+ winAnimator.mAnimating);
          }
        }
        if (win != atoken.startingWindow) {
          if (!atoken.mAppAnimator.freezingScreen || !win.mAppFreezing) {
            atoken.numInterestingWindows++;
            if (win.isDrawnLw()) {
              atoken.numDrawnWindows++;
              if (WindowManagerService.DEBUG_VISIBILITY || WindowManagerService.DEBUG_ORIENTATION)               Slog.v(TAG,"tokenMayBeDrawn: " + atoken + " freezingScreen="+ atoken.mAppAnimator.freezingScreen+ " mAppFreezing="+ win.mAppFreezing);
              mInner.mTokenMayBeDrawn=true;
            }
          }
        }
 else         if (win.isDrawnLw()) {
          atoken.startingDisplayed=true;
        }
      }
    }
 else     if (winAnimator.mDrawState == WindowStateAnimator.READY_TO_SHOW) {
      if (winAnimator.performShowLocked()) {
        mPendingLayoutChanges|=WindowManagerPolicy.FINISH_LAYOUT_REDO_ANIM;
        if (WindowManagerService.DEBUG_LAYOUT_REPEATS) {
          mService.debugLayoutRepeats("updateWindowsAndWallpaperLocked 5",mPendingLayoutChanges);
        }
      }
    }
    final AppWindowAnimator appAnimator=atoken == null ? null : atoken.mAppAnimator;
    if (appAnimator != null && appAnimator.thumbnail != null) {
      if (appAnimator.thumbnailTransactionSeq != mTransactionSequence) {
        appAnimator.thumbnailTransactionSeq=mTransactionSequence;
        appAnimator.thumbnailLayer=0;
      }
      if (appAnimator.thumbnailLayer < winAnimator.mAnimLayer) {
        appAnimator.thumbnailLayer=winAnimator.mAnimLayer;
      }
    }
  }
  if (mWindowDetachedWallpaper != detachedWallpaper) {
    if (WindowManagerService.DEBUG_WALLPAPER)     Slog.v(TAG,"Detached wallpaper changed from " + mWindowDetachedWallpaper + " to "+ detachedWallpaper);
    mWindowDetachedWallpaper=detachedWallpaper;
    mBulkUpdateParams|=SET_WALLPAPER_MAY_CHANGE;
  }
  if (windowAnimationBackgroundColor != 0) {
    int animLayer=windowAnimationBackground.mAnimLayer;
    WindowState win=windowAnimationBackground.mWin;
    if (windowAnimationBackground != null && mService.mWallpaperTarget == win || mService.mLowerWallpaperTarget == win || mService.mUpperWallpaperTarget == win) {
      final int N=mWinAnimators.size();
      for (int i=0; i < N; i++) {
        WindowStateAnimator winAnimator=mWinAnimators.get(i);
        if (winAnimator.mWin.mIsWallpaper) {
          animLayer=winAnimator.mAnimLayer;
          break;
        }
      }
    }
    final int dw=mDw;
    final int dh=mDh;
    mWindowAnimationBackgroundSurface.show(dw,dh,animLayer - WindowManagerService.LAYER_OFFSET_DIM,windowAnimationBackgroundColor);
  }
 else {
    mWindowAnimationBackgroundSurface.hide();
  }
  if (unForceHiding != null) {
    for (int i=unForceHiding.size() - 1; i >= 0; i--) {
      Animation a=mPolicy.createForceHideEnterAnimation(wallpaperInUnForceHiding);
      if (a != null) {
        final WindowStateAnimator winAnimator=unForceHiding.get(i);
        winAnimator.setAnimation(a);
        winAnimator.mAnimationIsEntrance=true;
      }
    }
  }
}
