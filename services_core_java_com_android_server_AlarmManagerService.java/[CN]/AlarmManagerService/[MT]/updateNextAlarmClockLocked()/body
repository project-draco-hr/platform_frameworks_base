{
  if (!mNextAlarmClockMayChange) {
    return;
  }
  mNextAlarmClockMayChange=false;
  SparseArray<AlarmManager.AlarmClockInfo> nextForUser=mTmpSparseAlarmClockArray;
  nextForUser.clear();
  final int N=mAlarmBatches.size();
  for (int i=0; i < N; i++) {
    ArrayList<Alarm> alarms=mAlarmBatches.get(i).alarms;
    final int M=alarms.size();
    for (int j=0; j < M; j++) {
      Alarm a=alarms.get(j);
      if (a.alarmClock != null) {
        final int userId=UserHandle.getUserId(a.uid);
        if (DEBUG_ALARM_CLOCK) {
          Log.v(TAG,"Found AlarmClockInfo at " + formatNextAlarm(getContext(),a.alarmClock,userId) + " for user "+ userId);
        }
        if (nextForUser.get(userId) == null) {
          nextForUser.put(userId,a.alarmClock);
        }
      }
    }
  }
  final int NN=nextForUser.size();
  for (int i=0; i < NN; i++) {
    AlarmManager.AlarmClockInfo newAlarm=nextForUser.valueAt(i);
    int userId=nextForUser.keyAt(i);
    AlarmManager.AlarmClockInfo currentAlarm=mNextAlarmClockForUser.get(userId);
    if (!newAlarm.equals(currentAlarm)) {
      updateNextAlarmInfoForUserLocked(userId,newAlarm);
    }
  }
  final int NNN=mNextAlarmClockForUser.size();
  for (int i=NNN - 1; i >= 0; i--) {
    int userId=mNextAlarmClockForUser.keyAt(i);
    if (nextForUser.get(userId) == null) {
      updateNextAlarmInfoForUserLocked(userId,null);
    }
  }
}
