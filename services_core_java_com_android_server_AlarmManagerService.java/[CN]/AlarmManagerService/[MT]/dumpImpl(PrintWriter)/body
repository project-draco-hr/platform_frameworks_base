{
synchronized (mLock) {
    pw.println("Current Alarm Manager state:");
    mConstants.dump(pw);
    pw.println();
    final long nowRTC=System.currentTimeMillis();
    final long nowELAPSED=SystemClock.elapsedRealtime();
    SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    pw.print("  nowRTC=");
    pw.print(nowRTC);
    pw.print("=");
    pw.print(sdf.format(new Date(nowRTC)));
    pw.print(" nowELAPSED=");
    pw.print(nowELAPSED);
    pw.println();
    pw.print("  mLastTimeChangeClockTime=");
    pw.print(mLastTimeChangeClockTime);
    pw.print("=");
    pw.println(sdf.format(new Date(mLastTimeChangeClockTime)));
    pw.print("  mLastTimeChangeRealtime=");
    TimeUtils.formatDuration(mLastTimeChangeRealtime,pw);
    pw.println();
    if (!mInteractive) {
      pw.print("  Time since non-interactive: ");
      TimeUtils.formatDuration(nowELAPSED - mNonInteractiveStartTime,pw);
      pw.println();
      pw.print("  Max wakeup delay: ");
      TimeUtils.formatDuration(currentNonWakeupFuzzLocked(nowELAPSED),pw);
      pw.println();
      pw.print("  Time since last dispatch: ");
      TimeUtils.formatDuration(nowELAPSED - mLastAlarmDeliveryTime,pw);
      pw.println();
      pw.print("  Next non-wakeup delivery time: ");
      TimeUtils.formatDuration(nowELAPSED - mNextNonWakeupDeliveryTime,pw);
      pw.println();
    }
    long nextWakeupRTC=mNextWakeup + (nowRTC - nowELAPSED);
    long nextNonWakeupRTC=mNextNonWakeup + (nowRTC - nowELAPSED);
    pw.print("  Next non-wakeup alarm: ");
    TimeUtils.formatDuration(mNextNonWakeup,nowELAPSED,pw);
    pw.print(" = ");
    pw.println(sdf.format(new Date(nextNonWakeupRTC)));
    pw.print("  Next wakeup: ");
    TimeUtils.formatDuration(mNextWakeup,nowELAPSED,pw);
    pw.print(" = ");
    pw.println(sdf.format(new Date(nextWakeupRTC)));
    pw.print("  Last wakeup: ");
    TimeUtils.formatDuration(mLastWakeup,nowELAPSED,pw);
    pw.print(" set at ");
    TimeUtils.formatDuration(mLastWakeupSet,nowELAPSED,pw);
    pw.println();
    pw.print("  Num time change events: ");
    pw.println(mNumTimeChanged);
    pw.println("  mDeviceIdleUserWhitelist=" + Arrays.toString(mDeviceIdleUserWhitelist));
    pw.println();
    pw.println("  Next alarm clock information: ");
    final TreeSet<Integer> users=new TreeSet<>();
    for (int i=0; i < mNextAlarmClockForUser.size(); i++) {
      users.add(mNextAlarmClockForUser.keyAt(i));
    }
    for (int i=0; i < mPendingSendNextAlarmClockChangedForUser.size(); i++) {
      users.add(mPendingSendNextAlarmClockChangedForUser.keyAt(i));
    }
    for (    int user : users) {
      final AlarmManager.AlarmClockInfo next=mNextAlarmClockForUser.get(user);
      final long time=next != null ? next.getTriggerTime() : 0;
      final boolean pendingSend=mPendingSendNextAlarmClockChangedForUser.get(user);
      pw.print("    user:");
      pw.print(user);
      pw.print(" pendingSend:");
      pw.print(pendingSend);
      pw.print(" time:");
      pw.print(time);
      if (time > 0) {
        pw.print(" = ");
        pw.print(sdf.format(new Date(time)));
        pw.print(" = ");
        TimeUtils.formatDuration(time,nowRTC,pw);
      }
      pw.println();
    }
    if (mAlarmBatches.size() > 0) {
      pw.println();
      pw.print("  Pending alarm batches: ");
      pw.println(mAlarmBatches.size());
      for (      Batch b : mAlarmBatches) {
        pw.print(b);
        pw.println(':');
        dumpAlarmList(pw,b.alarms,"    ",nowELAPSED,nowRTC,sdf);
      }
    }
    if (mPendingIdleUntil != null || mPendingWhileIdleAlarms.size() > 0) {
      pw.println();
      pw.println("    Idle mode state:");
      pw.print("      Idling until: ");
      if (mPendingIdleUntil != null) {
        pw.println(mPendingIdleUntil);
        mPendingIdleUntil.dump(pw,"        ",nowRTC,nowELAPSED,sdf);
      }
 else {
        pw.println("null");
      }
      pw.println("      Pending alarms:");
      dumpAlarmList(pw,mPendingWhileIdleAlarms,"      ",nowELAPSED,nowRTC,sdf);
    }
    if (mNextWakeFromIdle != null) {
      pw.println();
      pw.print("  Next wake from idle: ");
      pw.println(mNextWakeFromIdle);
      mNextWakeFromIdle.dump(pw,"    ",nowRTC,nowELAPSED,sdf);
    }
    pw.println();
    pw.print("  Past-due non-wakeup alarms: ");
    if (mPendingNonWakeupAlarms.size() > 0) {
      pw.println(mPendingNonWakeupAlarms.size());
      dumpAlarmList(pw,mPendingNonWakeupAlarms,"    ",nowELAPSED,nowRTC,sdf);
    }
 else {
      pw.println("(none)");
    }
    pw.print("    Number of delayed alarms: ");
    pw.print(mNumDelayedAlarms);
    pw.print(", total delay time: ");
    TimeUtils.formatDuration(mTotalDelayTime,pw);
    pw.println();
    pw.print("    Max delay time: ");
    TimeUtils.formatDuration(mMaxDelayTime,pw);
    pw.print(", max non-interactive time: ");
    TimeUtils.formatDuration(mNonInteractiveTime,pw);
    pw.println();
    pw.println();
    pw.print("  Broadcast ref count: ");
    pw.println(mBroadcastRefCount);
    pw.println();
    if (mInFlight.size() > 0) {
      pw.println("Outstanding deliveries:");
      for (int i=0; i < mInFlight.size(); i++) {
        pw.print("   #");
        pw.print(i);
        pw.print(": ");
        pw.println(mInFlight.get(i));
      }
      pw.println();
    }
    pw.print("  mAllowWhileIdleMinTime=");
    TimeUtils.formatDuration(mAllowWhileIdleMinTime,pw);
    pw.println();
    if (mLastAllowWhileIdleDispatch.size() > 0) {
      pw.println("  Last allow while idle dispatch times:");
      for (int i=0; i < mLastAllowWhileIdleDispatch.size(); i++) {
        pw.print("  UID ");
        UserHandle.formatUid(pw,mLastAllowWhileIdleDispatch.keyAt(i));
        pw.print(": ");
        TimeUtils.formatDuration(mLastAllowWhileIdleDispatch.valueAt(i),nowELAPSED,pw);
        pw.println();
      }
    }
    pw.println();
    if (mLog.dump(pw,"  Recent problems","    ")) {
      pw.println();
    }
    final FilterStats[] topFilters=new FilterStats[10];
    final Comparator<FilterStats> comparator=new Comparator<FilterStats>(){
      @Override public int compare(      FilterStats lhs,      FilterStats rhs){
        if (lhs.aggregateTime < rhs.aggregateTime) {
          return 1;
        }
 else         if (lhs.aggregateTime > rhs.aggregateTime) {
          return -1;
        }
        return 0;
      }
    }
;
    int len=0;
    for (int iu=0; iu < mBroadcastStats.size(); iu++) {
      ArrayMap<String,BroadcastStats> uidStats=mBroadcastStats.valueAt(iu);
      for (int ip=0; ip < uidStats.size(); ip++) {
        BroadcastStats bs=uidStats.valueAt(ip);
        for (int is=0; is < bs.filterStats.size(); is++) {
          FilterStats fs=bs.filterStats.valueAt(is);
          int pos=len > 0 ? Arrays.binarySearch(topFilters,0,len,fs,comparator) : 0;
          if (pos < 0) {
            pos=-pos - 1;
          }
          if (pos < topFilters.length) {
            int copylen=topFilters.length - pos - 1;
            if (copylen > 0) {
              System.arraycopy(topFilters,pos,topFilters,pos + 1,copylen);
            }
            topFilters[pos]=fs;
            if (len < topFilters.length) {
              len++;
            }
          }
        }
      }
    }
    if (len > 0) {
      pw.println("  Top Alarms:");
      for (int i=0; i < len; i++) {
        FilterStats fs=topFilters[i];
        pw.print("    ");
        if (fs.nesting > 0)         pw.print("*ACTIVE* ");
        TimeUtils.formatDuration(fs.aggregateTime,pw);
        pw.print(" running, ");
        pw.print(fs.numWakeup);
        pw.print(" wakeups, ");
        pw.print(fs.count);
        pw.print(" alarms: ");
        UserHandle.formatUid(pw,fs.mBroadcastStats.mUid);
        pw.print(":");
        pw.print(fs.mBroadcastStats.mPackageName);
        pw.println();
        pw.print("      ");
        pw.print(fs.mTag);
        pw.println();
      }
    }
    pw.println(" ");
    pw.println("  Alarm Stats:");
    final ArrayList<FilterStats> tmpFilters=new ArrayList<FilterStats>();
    for (int iu=0; iu < mBroadcastStats.size(); iu++) {
      ArrayMap<String,BroadcastStats> uidStats=mBroadcastStats.valueAt(iu);
      for (int ip=0; ip < uidStats.size(); ip++) {
        BroadcastStats bs=uidStats.valueAt(ip);
        pw.print("  ");
        if (bs.nesting > 0)         pw.print("*ACTIVE* ");
        UserHandle.formatUid(pw,bs.mUid);
        pw.print(":");
        pw.print(bs.mPackageName);
        pw.print(" ");
        TimeUtils.formatDuration(bs.aggregateTime,pw);
        pw.print(" running, ");
        pw.print(bs.numWakeup);
        pw.println(" wakeups:");
        tmpFilters.clear();
        for (int is=0; is < bs.filterStats.size(); is++) {
          tmpFilters.add(bs.filterStats.valueAt(is));
        }
        Collections.sort(tmpFilters,comparator);
        for (int i=0; i < tmpFilters.size(); i++) {
          FilterStats fs=tmpFilters.get(i);
          pw.print("    ");
          if (fs.nesting > 0)           pw.print("*ACTIVE* ");
          TimeUtils.formatDuration(fs.aggregateTime,pw);
          pw.print(" ");
          pw.print(fs.numWakeup);
          pw.print(" wakes ");
          pw.print(fs.count);
          pw.print(" alarms, last ");
          TimeUtils.formatDuration(fs.lastTime,nowELAPSED,pw);
          pw.println(":");
          pw.print("      ");
          pw.print(fs.mTag);
          pw.println();
        }
      }
    }
    if (RECORD_DEVICE_IDLE_ALARMS) {
      pw.println();
      pw.println("  Allow while idle dispatches:");
      for (int i=0; i < mAllowWhileIdleDispatches.size(); i++) {
        IdleDispatchEntry ent=mAllowWhileIdleDispatches.get(i);
        pw.print("    ");
        TimeUtils.formatDuration(ent.elapsedRealtime,nowELAPSED,pw);
        pw.print(": ");
        UserHandle.formatUid(pw,ent.uid);
        pw.print(":");
        pw.println(ent.pkg);
        if (ent.op != null) {
          pw.print("      ");
          pw.print(ent.op);
          pw.print(" / ");
          pw.print(ent.tag);
          if (ent.argRealtime != 0) {
            pw.print(" (");
            TimeUtils.formatDuration(ent.argRealtime,nowELAPSED,pw);
            pw.print(")");
          }
          pw.println();
        }
      }
    }
    if (WAKEUP_STATS) {
      pw.println();
      pw.println("  Recent Wakeup History:");
      long last=-1;
      for (      WakeupEvent event : mRecentWakeups) {
        pw.print("    ");
        pw.print(sdf.format(new Date(event.when)));
        pw.print('|');
        if (last < 0) {
          pw.print('0');
        }
 else {
          pw.print(event.when - last);
        }
        last=event.when;
        pw.print('|');
        pw.print(event.uid);
        pw.print('|');
        pw.print(event.action);
        pw.println();
      }
      pw.println();
    }
  }
}
