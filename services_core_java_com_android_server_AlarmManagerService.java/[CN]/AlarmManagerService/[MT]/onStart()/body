{
  mNativeData=init();
  mNextWakeup=mNextNonWakeup=0;
  setTimeZoneImpl(SystemProperties.get(TIMEZONE_PROPERTY));
  PowerManager pm=(PowerManager)getContext().getSystemService(Context.POWER_SERVICE);
  mWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,"*alarm*");
  mTimeTickSender=PendingIntent.getBroadcastAsUser(getContext(),0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY | Intent.FLAG_RECEIVER_FOREGROUND),0,UserHandle.ALL);
  Intent intent=new Intent(Intent.ACTION_DATE_CHANGED);
  intent.addFlags(Intent.FLAG_RECEIVER_REPLACE_PENDING);
  mDateChangeSender=PendingIntent.getBroadcastAsUser(getContext(),0,intent,Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT,UserHandle.ALL);
  mClockReceiver=new ClockReceiver();
  mClockReceiver.scheduleTimeTickEvent();
  mClockReceiver.scheduleDateChangedEvent();
  mInteractiveStateReceiver=new InteractiveStateReceiver();
  mUninstallReceiver=new UninstallReceiver();
  if (mNativeData != 0) {
    AlarmThread waitThread=new AlarmThread();
    waitThread.start();
  }
 else {
    Slog.w(TAG,"Failed to open alarm driver. Falling back to a handler.");
  }
  try {
    ActivityManagerNative.getDefault().registerUidObserver(new UidObserver(),ActivityManager.UID_OBSERVER_IDLE);
  }
 catch (  RemoteException e) {
  }
  publishBinderService(Context.ALARM_SERVICE,mService);
}
