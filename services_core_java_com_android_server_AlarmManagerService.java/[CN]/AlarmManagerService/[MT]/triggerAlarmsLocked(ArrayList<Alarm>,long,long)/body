{
  boolean hasWakeup=false;
  while (mAlarmBatches.size() > 0) {
    Batch batch=mAlarmBatches.get(0);
    if (batch.start > nowELAPSED) {
      break;
    }
    mAlarmBatches.remove(0);
    final int N=batch.size();
    for (int i=0; i < N; i++) {
      Alarm alarm=batch.get(i);
      if ((alarm.flags & AlarmManager.FLAG_ALLOW_WHILE_IDLE) != 0) {
        long lastTime=mLastAllowWhileIdleDispatch.get(alarm.uid,0);
        long minTime=lastTime + mAllowWhileIdleMinTime;
        if (nowELAPSED < minTime) {
          alarm.whenElapsed=minTime;
          if (alarm.maxWhenElapsed < minTime) {
            alarm.maxWhenElapsed=minTime;
          }
          setImplLocked(alarm,true,false);
          continue;
        }
      }
      alarm.count=1;
      triggerList.add(alarm);
      if ((alarm.flags & AlarmManager.FLAG_WAKE_FROM_IDLE) != 0) {
        EventLogTags.writeDeviceIdleWakeFromIdle(mPendingIdleUntil != null ? 1 : 0,alarm.tag);
      }
      if (mPendingIdleUntil == alarm) {
        mPendingIdleUntil=null;
        rebatchAllAlarmsLocked(false);
        restorePendingWhileIdleAlarmsLocked();
      }
      if (mNextWakeFromIdle == alarm) {
        mNextWakeFromIdle=null;
        rebatchAllAlarmsLocked(false);
      }
      if (alarm.repeatInterval > 0) {
        alarm.count+=(nowELAPSED - alarm.whenElapsed) / alarm.repeatInterval;
        final long delta=alarm.count * alarm.repeatInterval;
        final long nextElapsed=alarm.whenElapsed + delta;
        setImplLocked(alarm.type,alarm.when + delta,nextElapsed,alarm.windowLength,maxTriggerTime(nowELAPSED,nextElapsed,alarm.repeatInterval),alarm.repeatInterval,alarm.operation,alarm.flags,true,alarm.workSource,alarm.alarmClock,alarm.uid);
      }
      if (alarm.wakeup) {
        hasWakeup=true;
      }
      if (alarm.alarmClock != null) {
        mNextAlarmClockMayChange=true;
      }
    }
  }
  mCurrentSeq++;
  calculateDeliveryPriorities(triggerList);
  Collections.sort(triggerList,mAlarmDispatchComparator);
  if (localLOGV) {
    for (int i=0; i < triggerList.size(); i++) {
      Slog.v(TAG,"Triggering alarm #" + i + ": "+ triggerList.get(i));
    }
  }
  return hasWakeup;
}
