{
  Alarm a=new Alarm(type,when,whenElapsed,windowLength,maxWhen,interval,operation,workSource,alarmClock,userId);
  removeLocked(operation);
  int whichBatch=(isStandalone) ? -1 : attemptCoalesceLocked(whenElapsed,maxWhen);
  if (whichBatch < 0) {
    Batch batch=new Batch(a);
    batch.standalone=isStandalone;
    addBatchLocked(mAlarmBatches,batch);
  }
 else {
    Batch batch=mAlarmBatches.get(whichBatch);
    if (batch.add(a)) {
      mAlarmBatches.remove(whichBatch);
      addBatchLocked(mAlarmBatches,batch);
    }
  }
  if (alarmClock != null) {
    mNextAlarmClockMayChange=true;
    updateNextAlarmClockLocked();
  }
  if (DEBUG_VALIDATE) {
    if (doValidate && !validateConsistencyLocked()) {
      Slog.v(TAG,"Tipping-point operation: type=" + type + " when="+ when+ " when(hex)="+ Long.toHexString(when)+ " whenElapsed="+ whenElapsed+ " maxWhen="+ maxWhen+ " interval="+ interval+ " op="+ operation+ " standalone="+ isStandalone);
      rebatchAllAlarmsLocked(false);
    }
  }
  rescheduleKernelAlarmsLocked();
}
