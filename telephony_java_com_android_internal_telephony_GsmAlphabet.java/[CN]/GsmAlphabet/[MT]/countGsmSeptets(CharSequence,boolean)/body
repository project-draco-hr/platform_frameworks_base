{
  if (!sDisableCountryEncodingCheck) {
    enableCountrySpecificEncodings();
  }
  if (sEnabledSingleShiftTables.length + sEnabledLockingShiftTables.length == 0) {
    TextEncodingDetails ted=new TextEncodingDetails();
    int septets=GsmAlphabet.countGsmSeptetsUsingTables(s,use7bitOnly,0,0);
    if (septets == -1) {
      return null;
    }
    ted.codeUnitSize=SmsConstants.ENCODING_7BIT;
    ted.codeUnitCount=septets;
    if (septets > SmsConstants.MAX_USER_DATA_SEPTETS) {
      ted.msgCount=(septets + (SmsConstants.MAX_USER_DATA_SEPTETS_WITH_HEADER - 1)) / SmsConstants.MAX_USER_DATA_SEPTETS_WITH_HEADER;
      ted.codeUnitsRemaining=(ted.msgCount * SmsConstants.MAX_USER_DATA_SEPTETS_WITH_HEADER) - septets;
    }
 else {
      ted.msgCount=1;
      ted.codeUnitsRemaining=SmsConstants.MAX_USER_DATA_SEPTETS - septets;
    }
    ted.codeUnitSize=SmsConstants.ENCODING_7BIT;
    return ted;
  }
  int maxSingleShiftCode=sHighestEnabledSingleShiftCode;
  List<LanguagePairCount> lpcList=new ArrayList<LanguagePairCount>(sEnabledLockingShiftTables.length + 1);
  lpcList.add(new LanguagePairCount(0));
  for (  int i : sEnabledLockingShiftTables) {
    if (i != 0 && !sLanguageTables[i].isEmpty()) {
      lpcList.add(new LanguagePairCount(i));
    }
  }
  int sz=s.length();
  for (int i=0; i < sz && !lpcList.isEmpty(); i++) {
    char c=s.charAt(i);
    if (c == GSM_EXTENDED_ESCAPE) {
      Rlog.w(TAG,"countGsmSeptets() string contains Escape character, ignoring!");
      continue;
    }
    for (    LanguagePairCount lpc : lpcList) {
      int tableIndex=sCharsToGsmTables[lpc.languageCode].get(c,-1);
      if (tableIndex == -1) {
        for (int table=0; table <= maxSingleShiftCode; table++) {
          if (lpc.septetCounts[table] != -1) {
            int shiftTableIndex=sCharsToShiftTables[table].get(c,-1);
            if (shiftTableIndex == -1) {
              if (use7bitOnly) {
                lpc.septetCounts[table]++;
                lpc.unencodableCounts[table]++;
              }
 else {
                lpc.septetCounts[table]=-1;
              }
            }
 else {
              lpc.septetCounts[table]+=2;
            }
          }
        }
      }
 else {
        for (int table=0; table <= maxSingleShiftCode; table++) {
          if (lpc.septetCounts[table] != -1) {
            lpc.septetCounts[table]++;
          }
        }
      }
    }
  }
  TextEncodingDetails ted=new TextEncodingDetails();
  ted.msgCount=Integer.MAX_VALUE;
  ted.codeUnitSize=SmsConstants.ENCODING_7BIT;
  int minUnencodableCount=Integer.MAX_VALUE;
  for (  LanguagePairCount lpc : lpcList) {
    for (int shiftTable=0; shiftTable <= maxSingleShiftCode; shiftTable++) {
      int septets=lpc.septetCounts[shiftTable];
      if (septets == -1) {
        continue;
      }
      int udhLength;
      if (lpc.languageCode != 0 && shiftTable != 0) {
        udhLength=UDH_SEPTET_COST_LENGTH + UDH_SEPTET_COST_TWO_SHIFT_TABLES;
      }
 else       if (lpc.languageCode != 0 || shiftTable != 0) {
        udhLength=UDH_SEPTET_COST_LENGTH + UDH_SEPTET_COST_ONE_SHIFT_TABLE;
      }
 else {
        udhLength=0;
      }
      int msgCount;
      int septetsRemaining;
      if (septets + udhLength > SmsConstants.MAX_USER_DATA_SEPTETS) {
        if (udhLength == 0) {
          udhLength=UDH_SEPTET_COST_LENGTH;
        }
        udhLength+=UDH_SEPTET_COST_CONCATENATED_MESSAGE;
        int septetsPerMessage=SmsConstants.MAX_USER_DATA_SEPTETS - udhLength;
        msgCount=(septets + septetsPerMessage - 1) / septetsPerMessage;
        septetsRemaining=(msgCount * septetsPerMessage) - septets;
      }
 else {
        msgCount=1;
        septetsRemaining=SmsConstants.MAX_USER_DATA_SEPTETS - udhLength - septets;
      }
      int unencodableCount=lpc.unencodableCounts[shiftTable];
      if (use7bitOnly && unencodableCount > minUnencodableCount) {
        continue;
      }
      if ((use7bitOnly && unencodableCount < minUnencodableCount) || msgCount < ted.msgCount || (msgCount == ted.msgCount && septetsRemaining > ted.codeUnitsRemaining)) {
        minUnencodableCount=unencodableCount;
        ted.msgCount=msgCount;
        ted.codeUnitCount=septets;
        ted.codeUnitsRemaining=septetsRemaining;
        ted.languageTable=lpc.languageCode;
        ted.languageShiftTable=shiftTable;
      }
    }
  }
  if (ted.msgCount == Integer.MAX_VALUE) {
    return null;
  }
  return ted;
}
