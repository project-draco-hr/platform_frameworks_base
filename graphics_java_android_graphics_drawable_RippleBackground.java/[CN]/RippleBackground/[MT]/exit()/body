{
  cancelSoftwareAnimations();
  final int opacityDuration=(int)(1000 / WAVE_OPACITY_DECAY_VELOCITY + 0.5f);
  final float outerSizeInfluence=MathUtils.constrain((mOuterRadius - WAVE_OUTER_SIZE_INFLUENCE_MIN * mDensity) / (WAVE_OUTER_SIZE_INFLUENCE_MAX * mDensity),0,1);
  final float outerOpacityVelocity=MathUtils.lerp(WAVE_OUTER_OPACITY_VELOCITY_MIN,WAVE_OUTER_OPACITY_VELOCITY_MAX,outerSizeInfluence);
  final int outerInflection=Math.max(0,(int)(1000 * (1 - mOuterOpacity) / (WAVE_OPACITY_DECAY_VELOCITY + outerOpacityVelocity) + 0.5f));
  final int inflectionOpacity=(int)(255 * (mOuterOpacity + outerInflection * outerOpacityVelocity * outerSizeInfluence / 1000) + 0.5f);
  if (mCanUseHardware) {
    exitHardware(opacityDuration,outerInflection,inflectionOpacity);
  }
 else {
    exitSoftware(opacityDuration,outerInflection,inflectionOpacity);
  }
}
