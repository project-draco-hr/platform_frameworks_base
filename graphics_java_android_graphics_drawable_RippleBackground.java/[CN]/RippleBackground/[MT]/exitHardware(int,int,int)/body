{
  mPendingAnimations.clear();
  final Paint outerPaint=getTempPaint();
  outerPaint.setAntiAlias(true);
  outerPaint.setXfermode(mXfermode);
  outerPaint.setColor(mColor);
  outerPaint.setAlpha((int)(Color.alpha(mColor) * mOuterOpacity + 0.5f));
  outerPaint.setStyle(Style.FILL);
  mPropOuterPaint=CanvasProperty.createPaint(outerPaint);
  mPropOuterRadius=CanvasProperty.createFloat(mOuterRadius);
  mPropOuterX=CanvasProperty.createFloat(mOuterX);
  mPropOuterY=CanvasProperty.createFloat(mOuterY);
  final RenderNodeAnimator outerOpacityAnim;
  if (inflectionDuration > 0) {
    outerOpacityAnim=new RenderNodeAnimator(mPropOuterPaint,RenderNodeAnimator.PAINT_ALPHA,inflectionOpacity);
    outerOpacityAnim.setDuration(inflectionDuration);
    outerOpacityAnim.setInterpolator(LINEAR_INTERPOLATOR);
    final int outerDuration=opacityDuration - inflectionDuration;
    if (outerDuration > 0) {
      final RenderNodeAnimator outerFadeOutAnim=new RenderNodeAnimator(mPropOuterPaint,RenderNodeAnimator.PAINT_ALPHA,0);
      outerFadeOutAnim.setDuration(outerDuration);
      outerFadeOutAnim.setInterpolator(LINEAR_INTERPOLATOR);
      outerFadeOutAnim.setStartDelay(inflectionDuration);
      outerFadeOutAnim.setStartValue(inflectionOpacity);
      outerFadeOutAnim.addListener(mAnimationListener);
      mPendingAnimations.add(outerFadeOutAnim);
    }
 else {
      outerOpacityAnim.addListener(mAnimationListener);
    }
  }
 else {
    outerOpacityAnim=new RenderNodeAnimator(mPropOuterPaint,RenderNodeAnimator.PAINT_ALPHA,0);
    outerOpacityAnim.setInterpolator(LINEAR_INTERPOLATOR);
    outerOpacityAnim.setDuration(opacityDuration);
    outerOpacityAnim.addListener(mAnimationListener);
  }
  mPendingAnimations.add(outerOpacityAnim);
  mHardwareAnimating=true;
  mOuterOpacity=0;
  invalidateSelf();
}
