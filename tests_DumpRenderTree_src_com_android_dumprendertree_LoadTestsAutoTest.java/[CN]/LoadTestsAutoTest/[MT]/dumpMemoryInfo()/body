{
  try {
    Log.v(LOGTAG,"About to dump meminfo, calling gc first...");
    Runtime.getRuntime().runFinalization();
    Runtime.getRuntime().gc();
    Runtime.getRuntime().gc();
    Log.v(LOGTAG,"Dumping memory information.");
    FileOutputStream out=new FileOutputStream(LOAD_TEST_RESULT,true);
    PrintStream ps=new PrintStream(out);
    MemoryInfo mi=new MemoryInfo();
    Debug.getMemoryInfo(mi);
    String format="%15s:%9d%9d%9d%9d";
    String pss=String.format(format,"(Pss)",mi.nativePss,mi.dalvikPss,mi.otherPss,mi.nativePss + mi.dalvikPss + mi.otherPss);
    String sd=String.format(format,"(shared dirty)",mi.nativeSharedDirty,mi.dalvikSharedDirty,mi.otherSharedDirty,mi.nativeSharedDirty + mi.dalvikSharedDirty + mi.otherSharedDirty);
    String pd=String.format(format,"(priv dirty)",mi.nativePrivateDirty,mi.dalvikPrivateDirty,mi.otherPrivateDirty,mi.nativePrivateDirty + mi.dalvikPrivateDirty + mi.otherPrivateDirty);
    ps.print("\n\n\n");
    ps.println("** MEMINFO in pid 0 [com.android.dumprendertree] **");
    ps.println("                   native   dalvik    other    total");
    ps.println("           size:    12060     5255      N/A    17315");
    ps.println("      allocated:    12060     5255      N/A    17315");
    ps.println("           free:    12060     5255      N/A    17315");
    ps.println(pss);
    ps.println(sd);
    ps.println(pd);
    ps.print("\n\n\n");
    ps.flush();
    ps.close();
    out.flush();
    out.close();
  }
 catch (  IOException e) {
    Log.e(LOGTAG,e.getMessage());
  }
}
