{
  Context context=getContext();
  boolean is24=DateFormat.is24HourFormat(context);
  LocaleData d=LocaleData.get(context.getResources().getConfiguration().locale);
  final char MAGIC1='\uEF00';
  final char MAGIC2='\uEF01';
  SimpleDateFormat sdf;
  String format=is24 ? d.timeFormat24 : d.timeFormat12;
  if (!format.equals(mClockFormatString)) {
    if (AM_PM_STYLE != AM_PM_STYLE_NORMAL) {
      int a=-1;
      boolean quoted=false;
      for (int i=0; i < format.length(); i++) {
        char c=format.charAt(i);
        if (c == '\'') {
          quoted=!quoted;
        }
        if (!quoted && c == 'a') {
          a=i;
          break;
        }
      }
      if (a >= 0) {
        final int b=a;
        while (a > 0 && Character.isWhitespace(format.charAt(a - 1))) {
          a--;
        }
        format=format.substring(0,a) + MAGIC1 + format.substring(a,b)+ "a"+ MAGIC2+ format.substring(b + 1);
      }
    }
    mClockFormat=sdf=new SimpleDateFormat(format);
    mClockFormatString=format;
  }
 else {
    sdf=mClockFormat;
  }
  String result=sdf.format(mCalendar.getTime());
  if (AM_PM_STYLE != AM_PM_STYLE_NORMAL) {
    int magic1=result.indexOf(MAGIC1);
    int magic2=result.indexOf(MAGIC2);
    if (magic1 >= 0 && magic2 > magic1) {
      SpannableStringBuilder formatted=new SpannableStringBuilder(result);
      if (AM_PM_STYLE == AM_PM_STYLE_GONE) {
        formatted.delete(magic1,magic2 + 1);
      }
 else {
        if (AM_PM_STYLE == AM_PM_STYLE_SMALL) {
          CharacterStyle style=new RelativeSizeSpan(0.7f);
          formatted.setSpan(style,magic1,magic2,Spannable.SPAN_EXCLUSIVE_INCLUSIVE);
        }
        formatted.delete(magic2,magic2 + 1);
        formatted.delete(magic1,magic1 + 1);
      }
      return formatted;
    }
  }
  return result;
}
