{
  RILRequest rr=(RILRequest)(msg.obj);
  RILRequest req=null;
switch (msg.what) {
case EVENT_SEND:
    boolean alreadySubtracted=false;
  try {
    LocalSocket s;
    s=mSocket;
    if (s == null) {
      rr.onError(RADIO_NOT_AVAILABLE,null);
      rr.release();
      if (mRequestMessagesPending > 0)       mRequestMessagesPending--;
      alreadySubtracted=true;
      return;
    }
synchronized (mRequestsList) {
      mRequestsList.add(rr);
      mRequestMessagesWaiting++;
    }
    if (mRequestMessagesPending > 0)     mRequestMessagesPending--;
    alreadySubtracted=true;
    byte[] data;
    data=rr.mp.marshall();
    rr.mp.recycle();
    rr.mp=null;
    if (data.length > RIL_MAX_COMMAND_BYTES) {
      throw new RuntimeException("Parcel larger than max bytes allowed! " + data.length);
    }
    dataLength[0]=dataLength[1]=0;
    dataLength[2]=(byte)((data.length >> 8) & 0xff);
    dataLength[3]=(byte)((data.length) & 0xff);
    s.getOutputStream().write(dataLength);
    s.getOutputStream().write(data);
  }
 catch (  IOException ex) {
    Log.e(LOG_TAG,"IOException",ex);
    req=findAndRemoveRequestFromList(rr.mSerial);
    if (req != null || !alreadySubtracted) {
      rr.onError(RADIO_NOT_AVAILABLE,null);
      rr.release();
    }
  }
catch (  RuntimeException exc) {
    Log.e(LOG_TAG,"Uncaught exception ",exc);
    req=findAndRemoveRequestFromList(rr.mSerial);
    if (req != null || !alreadySubtracted) {
      rr.onError(GENERIC_FAILURE,null);
      rr.release();
    }
  }
 finally {
    releaseWakeLockIfDone();
  }
if (!alreadySubtracted && mRequestMessagesPending > 0) {
  mRequestMessagesPending--;
}
break;
case EVENT_WAKE_LOCK_TIMEOUT:
synchronized (mWakeLock) {
if (mWakeLock.isHeld()) {
if (mRequestMessagesWaiting != 0) {
  Log.d(LOG_TAG,"NOTE: mReqWaiting is NOT 0 but" + mRequestMessagesWaiting + " at TIMEOUT, reset!"+ " There still msg waitng for response");
  mRequestMessagesWaiting=0;
  if (RILJ_LOGD) {
synchronized (mRequestsList) {
      int count=mRequestsList.size();
      Log.d(LOG_TAG,"WAKE_LOCK_TIMEOUT " + " mRequestList=" + count);
      for (int i=0; i < count; i++) {
        rr=mRequestsList.get(i);
        Log.d(LOG_TAG,i + ": [" + rr.mSerial+ "] "+ requestToString(rr.mRequest));
      }
    }
  }
}
if (mRequestMessagesPending != 0) {
  Log.e(LOG_TAG,"ERROR: mReqPending is NOT 0 but" + mRequestMessagesPending + " at TIMEOUT, reset!");
  mRequestMessagesPending=0;
}
mWakeLock.release();
}
}
break;
}
}
