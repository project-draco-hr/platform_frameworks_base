{
  int serial, error;
  boolean found=false;
  serial=p.readInt();
  error=p.readInt();
  RILRequest rr;
  rr=findAndRemoveRequestFromList(serial);
  if (rr == null) {
    Log.w(LOG_TAG,"Unexpected solicited response! sn: " + serial + " error: "+ error);
    return;
  }
  if (error != 0) {
    rr.onError(error);
    rr.release();
    return;
  }
  Object ret;
  try {
switch (rr.mRequest) {
case RIL_REQUEST_GET_SIM_STATUS:
      ret=responseIccCardStatus(p);
    break;
case RIL_REQUEST_ENTER_SIM_PIN:
  ret=responseVoid(p);
break;
case RIL_REQUEST_ENTER_SIM_PUK:
ret=responseVoid(p);
break;
case RIL_REQUEST_ENTER_SIM_PIN2:
ret=responseVoid(p);
break;
case RIL_REQUEST_ENTER_SIM_PUK2:
ret=responseVoid(p);
break;
case RIL_REQUEST_CHANGE_SIM_PIN:
ret=responseVoid(p);
break;
case RIL_REQUEST_CHANGE_SIM_PIN2:
ret=responseVoid(p);
break;
case RIL_REQUEST_ENTER_NETWORK_DEPERSONALIZATION:
ret=responseVoid(p);
break;
case RIL_REQUEST_GET_CURRENT_CALLS:
ret=responseCallList(p);
break;
case RIL_REQUEST_DIAL:
ret=responseVoid(p);
break;
case RIL_REQUEST_GET_IMSI:
ret=responseString(p);
break;
case RIL_REQUEST_HANGUP:
ret=responseVoid(p);
break;
case RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND:
ret=responseVoid(p);
break;
case RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND:
ret=responseVoid(p);
break;
case RIL_REQUEST_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE:
ret=responseVoid(p);
break;
case RIL_REQUEST_CONFERENCE:
ret=responseVoid(p);
break;
case RIL_REQUEST_UDUB:
ret=responseVoid(p);
break;
case RIL_REQUEST_LAST_CALL_FAIL_CAUSE:
ret=responseInts(p);
break;
case RIL_REQUEST_SIGNAL_STRENGTH:
ret=responseSignalStrength(p);
break;
case RIL_REQUEST_REGISTRATION_STATE:
ret=responseStrings(p);
break;
case RIL_REQUEST_GPRS_REGISTRATION_STATE:
ret=responseStrings(p);
break;
case RIL_REQUEST_OPERATOR:
ret=responseStrings(p);
break;
case RIL_REQUEST_RADIO_POWER:
ret=responseVoid(p);
break;
case RIL_REQUEST_DTMF:
ret=responseVoid(p);
break;
case RIL_REQUEST_SEND_SMS:
ret=responseSMS(p);
break;
case RIL_REQUEST_SEND_SMS_EXPECT_MORE:
ret=responseSMS(p);
break;
case RIL_REQUEST_SETUP_DATA_CALL:
ret=responseStrings(p);
break;
case RIL_REQUEST_SIM_IO:
ret=responseICC_IO(p);
break;
case RIL_REQUEST_SEND_USSD:
ret=responseVoid(p);
break;
case RIL_REQUEST_CANCEL_USSD:
ret=responseVoid(p);
break;
case RIL_REQUEST_GET_CLIR:
ret=responseInts(p);
break;
case RIL_REQUEST_SET_CLIR:
ret=responseVoid(p);
break;
case RIL_REQUEST_QUERY_CALL_FORWARD_STATUS:
ret=responseCallForward(p);
break;
case RIL_REQUEST_SET_CALL_FORWARD:
ret=responseVoid(p);
break;
case RIL_REQUEST_QUERY_CALL_WAITING:
ret=responseInts(p);
break;
case RIL_REQUEST_SET_CALL_WAITING:
ret=responseVoid(p);
break;
case RIL_REQUEST_SMS_ACKNOWLEDGE:
ret=responseVoid(p);
break;
case RIL_REQUEST_GET_IMEI:
ret=responseString(p);
break;
case RIL_REQUEST_GET_IMEISV:
ret=responseString(p);
break;
case RIL_REQUEST_ANSWER:
ret=responseVoid(p);
break;
case RIL_REQUEST_DEACTIVATE_DATA_CALL:
ret=responseVoid(p);
break;
case RIL_REQUEST_QUERY_FACILITY_LOCK:
ret=responseInts(p);
break;
case RIL_REQUEST_SET_FACILITY_LOCK:
ret=responseVoid(p);
break;
case RIL_REQUEST_CHANGE_BARRING_PASSWORD:
ret=responseVoid(p);
break;
case RIL_REQUEST_QUERY_NETWORK_SELECTION_MODE:
ret=responseInts(p);
break;
case RIL_REQUEST_SET_NETWORK_SELECTION_AUTOMATIC:
ret=responseVoid(p);
break;
case RIL_REQUEST_SET_NETWORK_SELECTION_MANUAL:
ret=responseVoid(p);
break;
case RIL_REQUEST_QUERY_AVAILABLE_NETWORKS:
ret=responseNetworkInfos(p);
break;
case RIL_REQUEST_DTMF_START:
ret=responseVoid(p);
break;
case RIL_REQUEST_DTMF_STOP:
ret=responseVoid(p);
break;
case RIL_REQUEST_BASEBAND_VERSION:
ret=responseString(p);
break;
case RIL_REQUEST_SEPARATE_CONNECTION:
ret=responseVoid(p);
break;
case RIL_REQUEST_SET_MUTE:
ret=responseVoid(p);
break;
case RIL_REQUEST_GET_MUTE:
ret=responseInts(p);
break;
case RIL_REQUEST_QUERY_CLIP:
ret=responseInts(p);
break;
case RIL_REQUEST_LAST_DATA_CALL_FAIL_CAUSE:
ret=responseInts(p);
break;
case RIL_REQUEST_DATA_CALL_LIST:
ret=responseDataCallList(p);
break;
case RIL_REQUEST_RESET_RADIO:
ret=responseVoid(p);
break;
case RIL_REQUEST_OEM_HOOK_RAW:
ret=responseRaw(p);
break;
case RIL_REQUEST_OEM_HOOK_STRINGS:
ret=responseStrings(p);
break;
case RIL_REQUEST_SCREEN_STATE:
ret=responseVoid(p);
break;
case RIL_REQUEST_SET_SUPP_SVC_NOTIFICATION:
ret=responseVoid(p);
break;
case RIL_REQUEST_WRITE_SMS_TO_SIM:
ret=responseInts(p);
break;
case RIL_REQUEST_DELETE_SMS_ON_SIM:
ret=responseVoid(p);
break;
case RIL_REQUEST_SET_BAND_MODE:
ret=responseVoid(p);
break;
case RIL_REQUEST_QUERY_AVAILABLE_BAND_MODE:
ret=responseInts(p);
break;
case RIL_REQUEST_STK_GET_PROFILE:
ret=responseString(p);
break;
case RIL_REQUEST_STK_SET_PROFILE:
ret=responseVoid(p);
break;
case RIL_REQUEST_STK_SEND_ENVELOPE_COMMAND:
ret=responseString(p);
break;
case RIL_REQUEST_STK_SEND_TERMINAL_RESPONSE:
ret=responseVoid(p);
break;
case RIL_REQUEST_STK_HANDLE_CALL_SETUP_REQUESTED_FROM_SIM:
ret=responseInts(p);
break;
case RIL_REQUEST_EXPLICIT_CALL_TRANSFER:
ret=responseVoid(p);
break;
case RIL_REQUEST_SET_PREFERRED_NETWORK_TYPE:
ret=responseVoid(p);
break;
case RIL_REQUEST_GET_PREFERRED_NETWORK_TYPE:
ret=responseInts(p);
break;
case RIL_REQUEST_GET_NEIGHBORING_CELL_IDS:
ret=responseCellList(p);
break;
case RIL_REQUEST_SET_LOCATION_UPDATES:
ret=responseVoid(p);
break;
case RIL_REQUEST_CDMA_SET_SUBSCRIPTION:
ret=responseVoid(p);
break;
case RIL_REQUEST_CDMA_SET_ROAMING_PREFERENCE:
ret=responseVoid(p);
break;
case RIL_REQUEST_CDMA_QUERY_ROAMING_PREFERENCE:
ret=responseInts(p);
break;
case RIL_REQUEST_SET_TTY_MODE:
ret=responseVoid(p);
break;
case RIL_REQUEST_QUERY_TTY_MODE:
ret=responseInts(p);
break;
case RIL_REQUEST_CDMA_SET_PREFERRED_VOICE_PRIVACY_MODE:
ret=responseVoid(p);
break;
case RIL_REQUEST_CDMA_QUERY_PREFERRED_VOICE_PRIVACY_MODE:
ret=responseInts(p);
break;
case RIL_REQUEST_CDMA_FLASH:
ret=responseVoid(p);
break;
case RIL_REQUEST_CDMA_BURST_DTMF:
ret=responseVoid(p);
break;
case RIL_REQUEST_CDMA_SEND_SMS:
ret=responseSMS(p);
break;
case RIL_REQUEST_CDMA_SMS_ACKNOWLEDGE:
ret=responseVoid(p);
break;
case RIL_REQUEST_GET_BROADCAST_CONFIG:
ret=responseBR_SMS_CNF(p);
break;
case RIL_REQUEST_SET_BROADCAST_CONFIG:
ret=responseVoid(p);
break;
case RIL_REQUEST_CDMA_GET_BROADCAST_CONFIG:
ret=responseCDMA_BR_CNF(p);
break;
case RIL_REQUEST_CDMA_SET_BROADCAST_CONFIG:
ret=responseVoid(p);
break;
case RIL_REQUEST_BROADCAST_ACTIVATION:
ret=responseVoid(p);
break;
case RIL_REQUEST_CDMA_VALIDATE_AKEY:
ret=responseVoid(p);
break;
case RIL_REQUEST_CDMA_BROADCAST_ACTIVATION:
ret=responseVoid(p);
break;
case RIL_REQUEST_CDMA_SUBSCRIPTION:
ret=responseStrings(p);
break;
case RIL_REQUEST_CDMA_WRITE_SMS_TO_RUIM:
ret=responseInts(p);
break;
case RIL_REQUEST_CDMA_DELETE_SMS_ON_RUIM:
ret=responseVoid(p);
break;
case RIL_REQUEST_DEVICE_IDENTITY:
ret=responseStrings(p);
break;
case RIL_REQUEST_GET_SMSC_ADDRESS:
ret=responseString(p);
break;
case RIL_REQUEST_SET_SMSC_ADDRESS:
ret=responseVoid(p);
break;
case RIL_REQUEST_EXIT_EMERGENCY_CALLBACK_MODE:
ret=responseVoid(p);
break;
default :
throw new RuntimeException("Unrecognized solicited response: " + rr.mRequest);
}
}
 catch (Throwable tr) {
Log.w(LOG_TAG,rr.serialString() + "< " + requestToString(rr.mRequest)+ " exception, possible invalid RIL response",tr);
if (rr.mResult != null) {
AsyncResult.forMessage(rr.mResult,null,tr);
rr.mResult.sendToTarget();
}
rr.release();
return;
}
if (RILJ_LOGD) riljLog(rr.serialString() + "< " + requestToString(rr.mRequest)+ " "+ retToString(rr.mRequest,ret));
if (rr.mResult != null) {
AsyncResult.forMessage(rr.mResult,ret,null);
rr.mResult.sendToTarget();
}
rr.release();
}
