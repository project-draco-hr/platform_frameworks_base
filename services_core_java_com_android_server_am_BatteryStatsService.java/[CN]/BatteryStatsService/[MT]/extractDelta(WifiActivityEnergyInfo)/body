{
  final long timePeriodMs=latest.mTimestamp - mLastInfo.mTimestamp;
  final long lastIdleMs=mLastInfo.mControllerIdleTimeMs;
  final long lastTxMs=mLastInfo.mControllerTxTimeMs;
  final long lastRxMs=mLastInfo.mControllerRxTimeMs;
  final long lastEnergy=mLastInfo.mControllerEnergyUsed;
  final WifiActivityEnergyInfo delta=mLastInfo;
  delta.mTimestamp=latest.getTimeStamp();
  delta.mStackState=latest.getStackState();
  final long txTimeMs=latest.mControllerTxTimeMs - lastTxMs;
  final long rxTimeMs=latest.mControllerRxTimeMs - lastRxMs;
  final long idleTimeMs=latest.mControllerIdleTimeMs - lastIdleMs;
  if (txTimeMs < 0 || rxTimeMs < 0) {
    delta.mControllerEnergyUsed=latest.mControllerEnergyUsed;
    delta.mControllerRxTimeMs=latest.mControllerRxTimeMs;
    delta.mControllerTxTimeMs=latest.mControllerTxTimeMs;
    delta.mControllerIdleTimeMs=latest.mControllerIdleTimeMs;
    Slog.v(TAG,"WiFi energy data was reset, new WiFi energy data is " + delta);
  }
 else {
    final long totalActiveTimeMs=txTimeMs + rxTimeMs;
    long maxExpectedIdleTimeMs;
    if (totalActiveTimeMs > timePeriodMs) {
      maxExpectedIdleTimeMs=timePeriodMs;
      StringBuilder sb=new StringBuilder();
      sb.append("Total Active time ");
      TimeUtils.formatDuration(totalActiveTimeMs,sb);
      sb.append(" is longer than sample period ");
      TimeUtils.formatDuration(timePeriodMs,sb);
      sb.append(".\n");
      sb.append("Previous WiFi snapshot: ").append("idle=");
      TimeUtils.formatDuration(lastIdleMs,sb);
      sb.append(" rx=");
      TimeUtils.formatDuration(lastRxMs,sb);
      sb.append(" tx=");
      TimeUtils.formatDuration(lastTxMs,sb);
      sb.append(" e=").append(lastEnergy);
      sb.append("\n");
      sb.append("Current WiFi snapshot: ").append("idle=");
      TimeUtils.formatDuration(latest.mControllerIdleTimeMs,sb);
      sb.append(" rx=");
      TimeUtils.formatDuration(latest.mControllerRxTimeMs,sb);
      sb.append(" tx=");
      TimeUtils.formatDuration(latest.mControllerTxTimeMs,sb);
      sb.append(" e=").append(latest.mControllerEnergyUsed);
      Slog.wtf(TAG,sb.toString());
    }
 else {
      maxExpectedIdleTimeMs=timePeriodMs - totalActiveTimeMs;
    }
    delta.mControllerTxTimeMs=txTimeMs;
    delta.mControllerRxTimeMs=rxTimeMs;
    delta.mControllerIdleTimeMs=Math.min(maxExpectedIdleTimeMs,Math.max(0,idleTimeMs));
    delta.mControllerEnergyUsed=Math.max(0,latest.mControllerEnergyUsed - lastEnergy);
  }
  mLastInfo=latest;
  return delta;
}
