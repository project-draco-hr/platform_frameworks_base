{
  if (mWifiManager == null) {
    mWifiManager=IWifiManager.Stub.asInterface(ServiceManager.getService(Context.WIFI_SERVICE));
    if (mWifiManager == null) {
      return null;
    }
  }
  try {
    WifiActivityEnergyInfo info=mWifiManager.reportActivityInfo();
    if (info != null && info.isValid()) {
      if (info.mControllerEnergyUsed < 0 || info.mControllerIdleTimeMs < 0 || info.mControllerRxTimeMs < 0 || info.mControllerTxTimeMs < 0) {
        Slog.wtf(TAG,"Reported WiFi energy data is invalid: " + info);
        return null;
      }
      final long timePeriodMs=info.mTimestamp - mLastInfo.mTimestamp;
      final long lastIdleMs=mLastInfo.mControllerIdleTimeMs;
      final long lastTxMs=mLastInfo.mControllerTxTimeMs;
      final long lastRxMs=mLastInfo.mControllerRxTimeMs;
      final long lastEnergy=mLastInfo.mControllerEnergyUsed;
      final WifiActivityEnergyInfo result=mLastInfo;
      result.mTimestamp=info.getTimeStamp();
      result.mStackState=info.getStackState();
      result.mControllerTxTimeMs=info.mControllerTxTimeMs - lastTxMs;
      result.mControllerRxTimeMs=info.mControllerRxTimeMs - lastRxMs;
      result.mControllerIdleTimeMs=Math.max(0,info.mControllerIdleTimeMs - lastIdleMs);
      result.mControllerEnergyUsed=Math.max(0,info.mControllerEnergyUsed - lastEnergy);
      if (result.mControllerTxTimeMs < 0 || result.mControllerRxTimeMs < 0) {
        result.mControllerEnergyUsed=info.mControllerEnergyUsed;
        result.mControllerRxTimeMs=info.mControllerRxTimeMs;
        result.mControllerTxTimeMs=info.mControllerTxTimeMs;
        result.mControllerIdleTimeMs=info.mControllerIdleTimeMs;
        Slog.v(TAG,"WiFi energy data was reset, new WiFi energy data is " + result);
      }
      final long SAMPLE_ERROR_MILLIS=30;
      final long totalTimeMs=result.mControllerIdleTimeMs + result.mControllerRxTimeMs + result.mControllerTxTimeMs;
      if (totalTimeMs > timePeriodMs + SAMPLE_ERROR_MILLIS) {
        StringBuilder sb=new StringBuilder();
        sb.append("Total time ");
        TimeUtils.formatDuration(totalTimeMs,sb);
        sb.append(" is longer than sample period ");
        TimeUtils.formatDuration(timePeriodMs,sb);
        sb.append(".\n");
        sb.append("Previous WiFi snapshot: ").append("idle=");
        TimeUtils.formatDuration(lastIdleMs,sb);
        sb.append(" rx=");
        TimeUtils.formatDuration(lastRxMs,sb);
        sb.append(" tx=");
        TimeUtils.formatDuration(lastTxMs,sb);
        sb.append(" e=").append(lastEnergy);
        sb.append("\n");
        sb.append("Current WiFi snapshot: ").append("idle=");
        TimeUtils.formatDuration(info.mControllerIdleTimeMs,sb);
        sb.append(" rx=");
        TimeUtils.formatDuration(info.mControllerRxTimeMs,sb);
        sb.append(" tx=");
        TimeUtils.formatDuration(info.mControllerTxTimeMs,sb);
        sb.append(" e=").append(info.mControllerEnergyUsed);
        Slog.wtf(TAG,sb.toString());
      }
      mLastInfo=info;
      return result;
    }
  }
 catch (  RemoteException e) {
  }
  return null;
}
