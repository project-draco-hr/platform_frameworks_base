{
synchronized (mPointers) {
    final int w=getWidth();
    final int itemW=w / 7;
    final int base=-mTextMetrics.ascent + 1;
    final int bottom=mHeaderBottom;
    final int NP=mPointers.size();
    if (NP > 0) {
      final PointerState ps=mPointers.get(0);
      canvas.drawRect(0,0,itemW - 1,bottom,mTextBackgroundPaint);
      canvas.drawText("P: " + mCurNumPointers + " / "+ mMaxNumPointers,1,base,mTextPaint);
      final int N=ps.mXs.size();
      if ((mCurDown && ps.mCurDown) || N == 0) {
        canvas.drawRect(itemW,0,(itemW * 2) - 1,bottom,mTextBackgroundPaint);
        canvas.drawText("X: " + ps.mCurX,1 + itemW,base,mTextPaint);
        canvas.drawRect(itemW * 2,0,(itemW * 3) - 1,bottom,mTextBackgroundPaint);
        canvas.drawText("Y: " + ps.mCurY,1 + itemW * 2,base,mTextPaint);
      }
 else {
        float dx=ps.mXs.get(N - 1) - ps.mXs.get(0);
        float dy=ps.mYs.get(N - 1) - ps.mYs.get(0);
        canvas.drawRect(itemW,0,(itemW * 2) - 1,bottom,Math.abs(dx) < mVC.getScaledTouchSlop() ? mTextBackgroundPaint : mTextLevelPaint);
        canvas.drawText("dX: " + String.format("%.1f",dx),1 + itemW,base,mTextPaint);
        canvas.drawRect(itemW * 2,0,(itemW * 3) - 1,bottom,Math.abs(dy) < mVC.getScaledTouchSlop() ? mTextBackgroundPaint : mTextLevelPaint);
        canvas.drawText("dY: " + String.format("%.1f",dy),1 + itemW * 2,base,mTextPaint);
      }
      canvas.drawRect(itemW * 3,0,(itemW * 4) - 1,bottom,mTextBackgroundPaint);
      int velocity=ps.mVelocity == null ? 0 : (int)(ps.mVelocity.getXVelocity() * 1000);
      canvas.drawText("Xv: " + velocity,1 + itemW * 3,base,mTextPaint);
      canvas.drawRect(itemW * 4,0,(itemW * 5) - 1,bottom,mTextBackgroundPaint);
      velocity=ps.mVelocity == null ? 0 : (int)(ps.mVelocity.getYVelocity() * 1000);
      canvas.drawText("Yv: " + velocity,1 + itemW * 4,base,mTextPaint);
      canvas.drawRect(itemW * 5,0,(itemW * 6) - 1,bottom,mTextBackgroundPaint);
      canvas.drawRect(itemW * 5,0,(itemW * 5) + (ps.mCurPressure * itemW) - 1,bottom,mTextLevelPaint);
      canvas.drawText("Prs: " + String.format("%.2f",ps.mCurPressure),1 + itemW * 5,base,mTextPaint);
      canvas.drawRect(itemW * 6,0,w,bottom,mTextBackgroundPaint);
      canvas.drawRect(itemW * 6,0,(itemW * 6) + (ps.mCurSize * itemW) - 1,bottom,mTextLevelPaint);
      canvas.drawText("Size: " + String.format("%.2f",ps.mCurSize),1 + itemW * 6,base,mTextPaint);
    }
    for (int p=0; p < NP; p++) {
      final PointerState ps=mPointers.get(p);
      if (mCurDown && ps.mCurDown) {
        canvas.drawLine(0,(int)ps.mCurY,getWidth(),(int)ps.mCurY,mTargetPaint);
        canvas.drawLine((int)ps.mCurX,0,(int)ps.mCurX,getHeight(),mTargetPaint);
        int pressureLevel=(int)(ps.mCurPressure * 255);
        mPaint.setARGB(255,pressureLevel,128,255 - pressureLevel);
        canvas.drawPoint(ps.mCurX,ps.mCurY,mPaint);
        canvas.drawCircle(ps.mCurX,ps.mCurY,ps.mCurWidth,mPaint);
      }
    }
    for (int p=0; p < NP; p++) {
      final PointerState ps=mPointers.get(p);
      final int N=ps.mXs.size();
      float lastX=0, lastY=0;
      boolean haveLast=false;
      boolean drawn=false;
      mPaint.setARGB(255,128,255,255);
      for (int i=0; i < N; i++) {
        float x=ps.mXs.get(i);
        float y=ps.mYs.get(i);
        if (Float.isNaN(x)) {
          haveLast=false;
          continue;
        }
        if (haveLast) {
          canvas.drawLine(lastX,lastY,x,y,mPathPaint);
          canvas.drawPoint(lastX,lastY,mPaint);
          drawn=true;
        }
        lastX=x;
        lastY=y;
        haveLast=true;
      }
      if (drawn) {
        if (ps.mVelocity != null) {
          mPaint.setARGB(255,255,64,128);
          float xVel=ps.mVelocity.getXVelocity() * (1000 / 60);
          float yVel=ps.mVelocity.getYVelocity() * (1000 / 60);
          canvas.drawLine(lastX,lastY,lastX + xVel,lastY + yVel,mPaint);
        }
 else {
          canvas.drawPoint(lastX,lastY,mPaint);
        }
      }
    }
  }
}
