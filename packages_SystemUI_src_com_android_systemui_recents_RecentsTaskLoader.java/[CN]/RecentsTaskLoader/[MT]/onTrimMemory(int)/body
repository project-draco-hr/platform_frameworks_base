{
  Console.log(Constants.DebugFlags.App.Memory,"[RecentsTaskLoader|onTrimMemory]",Console.trimMemoryLevelToString(level));
  if (Constants.DebugFlags.App.EnableBackgroundTaskLoading) {
    if (level == ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN) {
      Console.log(Constants.DebugFlags.App.Memory,"[RecentsTaskLoader|unloadTasks]");
      Map<Task,Bitmap> thumbnailCache=mThumbnailCache.snapshot();
      for (      Task t : thumbnailCache.keySet()) {
        unloadTaskData(t);
      }
      Map<Task,Drawable> iconCache=mIconCache.snapshot();
      for (      Task t : iconCache.keySet()) {
        unloadTaskData(t);
      }
    }
switch (level) {
case ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN:
case ComponentCallbacks2.TRIM_MEMORY_RUNNING_MODERATE:
case ComponentCallbacks2.TRIM_MEMORY_BACKGROUND:
      mThumbnailCache.trimToSize(mMaxThumbnailCacheSize / 2);
    mIconCache.trimToSize(mMaxIconCacheSize / 2);
  break;
case ComponentCallbacks2.TRIM_MEMORY_RUNNING_LOW:
case ComponentCallbacks2.TRIM_MEMORY_MODERATE:
mThumbnailCache.trimToSize(mMaxThumbnailCacheSize / 4);
mIconCache.trimToSize(mMaxIconCacheSize / 4);
break;
case ComponentCallbacks2.TRIM_MEMORY_RUNNING_CRITICAL:
case ComponentCallbacks2.TRIM_MEMORY_COMPLETE:
mThumbnailCache.evictAll();
mIconCache.evictAll();
break;
default :
break;
}
}
}
