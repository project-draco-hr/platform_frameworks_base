{
  long t1=System.currentTimeMillis();
  if (Console.Enabled) {
    Console.log(Constants.Log.App.TaskDataLoader,"[RecentsTaskLoader|reload]");
  }
  Resources res=context.getResources();
  ArrayList<Task> tasksToForceLoad=new ArrayList<Task>();
  TaskStack stack=new TaskStack(context);
  SpaceNode root=new SpaceNode(context);
  root.setStack(stack);
  SystemServicesProxy ssp=mSystemServicesProxy;
  List<ActivityManager.RecentTaskInfo> tasks=getRecentTasks();
  t1=System.currentTimeMillis();
  int taskCount=tasks.size();
  for (int i=0; i < taskCount; i++) {
    ActivityManager.RecentTaskInfo t=tasks.get(i);
    ActivityInfo info=ssp.getActivityInfo(t.baseIntent.getComponent(),t.userId);
    if (info == null)     continue;
    ActivityManager.TaskDescription av=t.taskDescription;
    String activityLabel=null;
    BitmapDrawable activityIcon=null;
    int activityColor=0;
    if (av != null) {
      activityLabel=(av.getLabel() != null ? av.getLabel() : ssp.getActivityLabel(info));
      activityIcon=(av.getIcon() != null) ? new BitmapDrawable(res,av.getIcon()) : null;
      activityColor=av.getPrimaryColor();
    }
 else {
      activityLabel=ssp.getActivityLabel(info);
    }
    boolean isForemostTask=(i == (taskCount - 1));
    Task task=new Task(t.persistentId,(t.id > -1),t.baseIntent,activityLabel,activityIcon,activityColor,t.userId);
    if (i >= (taskCount - preloadCount)) {
      if (Console.Enabled) {
        Console.log(Constants.Log.App.TaskDataLoader,"[RecentsTaskLoader|preloadTask]","i: " + i + " task: "+ t.baseIntent.getComponent().getPackageName());
      }
      if (!isForemostTask) {
        task.applicationIcon=mApplicationIconCache.get(task.key);
        if (task.applicationIcon != null) {
          tasksToForceLoad.add(task);
        }
      }
      if (task.applicationIcon == null) {
        task.applicationIcon=ssp.getActivityIcon(info,task.userId);
        if (task.applicationIcon != null) {
          mApplicationIconCache.put(task.key,task.applicationIcon);
        }
 else {
          task.applicationIcon=mDefaultApplicationIcon;
        }
      }
      if (!isForemostTask) {
        task.thumbnail=mThumbnailCache.get(task.key);
        if (task.thumbnail != null && !tasksToForceLoad.contains(task)) {
          tasksToForceLoad.add(task);
        }
      }
      if (task.thumbnail == null) {
        if (Console.Enabled) {
          Console.log(Constants.Log.App.TaskDataLoader,"[RecentsTaskLoader|loadingTaskThumbnail]");
        }
        task.thumbnail=ssp.getTaskThumbnail(task.key.id);
        if (task.thumbnail != null) {
          task.thumbnail.setHasAlpha(false);
          mThumbnailCache.put(task.key,task.thumbnail);
        }
 else {
          task.thumbnail=mDefaultThumbnail;
        }
      }
    }
    if (Console.Enabled) {
      Console.log(Constants.Log.App.TaskDataLoader,"  [RecentsTaskLoader|task]",t.baseIntent.getComponent().getPackageName());
    }
    stack.addTask(task);
  }
  if (Console.Enabled) {
    Console.log(Constants.Log.App.TimeSystemCalls,"[RecentsTaskLoader|getAllTaskTopThumbnail]","" + (System.currentTimeMillis() - t1) + "ms");
  }
  mLoader.start(context);
  for (  Task t : tasksToForceLoad) {
    mLoadQueue.addTask(t,true);
  }
  mPackageMonitor.setTasks(tasks);
  return root;
}
