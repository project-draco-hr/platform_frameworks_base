{
switch (msg.what) {
case DO_CREATE_SESSION:
{
      SomeArgs args=(SomeArgs)msg.obj;
      InputChannel channel=(InputChannel)args.arg1;
      ITvInputSessionCallback cb=(ITvInputSessionCallback)args.arg2;
      String inputId=(String)args.arg3;
      try {
        Session sessionImpl=onCreateSession(inputId);
        if (sessionImpl == null) {
          cb.onSessionCreated(null);
        }
 else {
          sessionImpl.setSessionCallback(cb);
          ITvInputSession stub=new ITvInputSessionWrapper(TvInputService.this,sessionImpl,channel);
          cb.onSessionCreated(stub);
        }
      }
 catch (      RemoteException e) {
        Log.e(TAG,"error in onSessionCreated");
      }
      args.recycle();
      return;
    }
case DO_ADD_HARDWARE_TV_INPUT:
{
    TvInputHardwareInfo hardwareInfo=(TvInputHardwareInfo)msg.obj;
    TvInputInfo inputInfo=onHardwareAdded(hardwareInfo);
    if (inputInfo != null) {
      broadcastAddHardwareTvInput(hardwareInfo.getDeviceId(),inputInfo);
    }
    return;
  }
case DO_REMOVE_HARDWARE_TV_INPUT:
{
  TvInputHardwareInfo hardwareInfo=(TvInputHardwareInfo)msg.obj;
  String inputId=onHardwareRemoved(hardwareInfo);
  if (inputId != null) {
    broadcastRemoveTvInput(inputId);
  }
  return;
}
case DO_ADD_HDMI_CEC_TV_INPUT:
{
HdmiCecDeviceInfo cecDeviceInfo=(HdmiCecDeviceInfo)msg.obj;
TvInputInfo inputInfo=onHdmiCecDeviceAdded(cecDeviceInfo);
if (inputInfo != null) {
  broadcastAddHdmiCecTvInput(cecDeviceInfo.getLogicalAddress(),inputInfo);
}
return;
}
case DO_REMOVE_HDMI_CEC_TV_INPUT:
{
HdmiCecDeviceInfo cecDeviceInfo=(HdmiCecDeviceInfo)msg.obj;
String inputId=onHdmiCecDeviceRemoved(cecDeviceInfo);
if (inputId != null) {
broadcastRemoveTvInput(inputId);
}
return;
}
default :
{
Log.w(TAG,"Unhandled message code: " + msg.what);
return;
}
}
}
