{
switch (msg.what) {
case DO_CREATE_SESSION:
{
      SomeArgs args=(SomeArgs)msg.obj;
      InputChannel channel=(InputChannel)args.arg1;
      ITvInputSessionCallback cb=(ITvInputSessionCallback)args.arg2;
      String inputId=(String)args.arg3;
      args.recycle();
      Session sessionImpl=onCreateSession(inputId);
      if (sessionImpl == null) {
        try {
          cb.onSessionCreated(null,null);
        }
 catch (        RemoteException e) {
          Log.e(TAG,"error in onSessionCreated");
        }
        return;
      }
      sessionImpl.setSessionCallback(cb);
      ITvInputSession stub=new ITvInputSessionWrapper(TvInputService.this,sessionImpl,channel);
      if (sessionImpl instanceof HardwareSession) {
        HardwareSession proxySession=((HardwareSession)sessionImpl);
        String harewareInputId=proxySession.getHardwareInputId();
        if (TextUtils.isEmpty(harewareInputId)) {
          sessionImpl.onRelease();
          Log.w(TAG,"Hardware input id is not setup yet.");
          try {
            cb.onSessionCreated(null,null);
          }
 catch (          RemoteException e) {
            Log.e(TAG,"error in onSessionCreated");
          }
          return;
        }
        proxySession.mProxySession=stub;
        proxySession.mProxySessionCallback=cb;
        proxySession.mServiceHandler=mServiceHandler;
        TvInputManager manager=(TvInputManager)getSystemService(Context.TV_INPUT_SERVICE);
        manager.createSession(harewareInputId,proxySession.mHardwareSessionCallback,mServiceHandler);
      }
 else {
        SomeArgs someArgs=SomeArgs.obtain();
        someArgs.arg1=stub;
        someArgs.arg2=cb;
        someArgs.arg3=null;
        mServiceHandler.obtainMessage(ServiceHandler.DO_NOTIFY_SESSION_CREATED,someArgs).sendToTarget();
      }
      return;
    }
case DO_NOTIFY_SESSION_CREATED:
{
    SomeArgs args=(SomeArgs)msg.obj;
    ITvInputSession stub=(ITvInputSession)args.arg1;
    ITvInputSessionCallback cb=(ITvInputSessionCallback)args.arg2;
    IBinder hardwareSessionToken=(IBinder)args.arg3;
    try {
      cb.onSessionCreated(stub,hardwareSessionToken);
    }
 catch (    RemoteException e) {
      Log.e(TAG,"error in onSessionCreated");
    }
    args.recycle();
    return;
  }
case DO_ADD_HARDWARE_TV_INPUT:
{
  TvInputHardwareInfo hardwareInfo=(TvInputHardwareInfo)msg.obj;
  TvInputInfo inputInfo=onHardwareAdded(hardwareInfo);
  if (inputInfo != null) {
    broadcastAddHardwareTvInput(hardwareInfo.getDeviceId(),inputInfo);
  }
  return;
}
case DO_REMOVE_HARDWARE_TV_INPUT:
{
TvInputHardwareInfo hardwareInfo=(TvInputHardwareInfo)msg.obj;
String inputId=onHardwareRemoved(hardwareInfo);
if (inputId != null) {
  broadcastRemoveTvInput(inputId);
}
return;
}
case DO_ADD_HDMI_TV_INPUT:
{
HdmiDeviceInfo deviceInfo=(HdmiDeviceInfo)msg.obj;
TvInputInfo inputInfo=onHdmiDeviceAdded(deviceInfo);
if (inputInfo != null) {
broadcastAddHdmiTvInput(deviceInfo.getId(),inputInfo);
}
return;
}
case DO_REMOVE_HDMI_TV_INPUT:
{
HdmiDeviceInfo deviceInfo=(HdmiDeviceInfo)msg.obj;
String inputId=onHdmiDeviceRemoved(deviceInfo);
if (inputId != null) {
broadcastRemoveTvInput(inputId);
}
return;
}
default :
{
Log.w(TAG,"Unhandled message code: " + msg.what);
return;
}
}
}
