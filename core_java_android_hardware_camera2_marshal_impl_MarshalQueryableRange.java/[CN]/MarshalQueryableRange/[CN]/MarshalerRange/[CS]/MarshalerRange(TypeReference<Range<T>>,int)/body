{
  super(MarshalQueryableRange.this,typeReference,nativeType);
  mClass=typeReference.getRawType();
  ParameterizedType paramType;
  try {
    paramType=(ParameterizedType)typeReference.getType();
  }
 catch (  ClassCastException e) {
    throw new AssertionError("Raw use of Range is not supported",e);
  }
  Type actualTypeArgument=paramType.getActualTypeArguments()[0];
  TypeReference<?> actualTypeArgToken=TypeReference.createSpecializedTypeReference(actualTypeArgument);
  mNestedTypeMarshaler=(Marshaler<T>)MarshalRegistry.getMarshaler(actualTypeArgToken,mNativeType);
  try {
    mConstructor=(Constructor<Range<T>>)mClass.getConstructor(Comparable.class,Comparable.class);
  }
 catch (  NoSuchMethodException e) {
    throw new AssertionError(e);
  }
}
