{
  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;
  final String VideoItemFileName1=INPUT_FILE_PATH + "MPEG4_SP_640x480_15fps_1200kbps_AACLC_48khz_64kbps_m_1_17.3gp";
  final String ImageItemFileName2=INPUT_FILE_PATH + "IMG_1600x1200.jpg";
  final String[] loggingInfo=new String[4];
  final MediaVideoItem mediaItem1=new MediaVideoItem(mVideoEditor,"m1",VideoItemFileName1,renderingMode);
  mVideoEditor.addMediaItem(mediaItem1);
  final MediaImageItem mediaItem2=new MediaImageItem(mVideoEditor,"m2",ImageItemFileName2,10000,renderingMode);
  mVideoEditor.addMediaItem(mediaItem2);
  System.gc();
  final Runtime runtimeObjStart=Runtime.getRuntime();
  final long javaMemStart=runtimeObjStart.totalMemory();
  final long nativeMemStart=Debug.getNativeHeapAllocatedSize();
  for (int i=0; i < 500; i++) {
    if (i % 5 == 0) {
      mediaItem1.setExtractBoundaries(10000,30000);
      final EffectColor effectColor1=mVideoEditorHelper.createEffectItem(mediaItem1,"effect1" + i,10000,(mediaItem1.getTimelineDuration() - 1000),EffectColor.TYPE_COLOR,EffectColor.GREEN);
      mediaItem1.addEffect(effectColor1);
    }
    if (i % 5 == 1) {
      mediaItem2.setDuration(20000);
      final EffectColor effectColor1=mVideoEditorHelper.createEffectItem(mediaItem2,"effect1" + i,0,4000,EffectColor.TYPE_GRADIENT,EffectColor.GRAY);
      mediaItem2.addEffect(effectColor1);
    }
    if (i % 5 == 2) {
      mediaItem1.setExtractBoundaries(10000,30000);
      final EffectColor effectColor1=mVideoEditorHelper.createEffectItem(mediaItem1,"effect1" + i,(mediaItem1.getTimelineDuration() - 4000),4000,EffectColor.TYPE_SEPIA,0);
      mediaItem1.addEffect(effectColor1);
    }
    if (i % 5 == 3) {
      mediaItem2.setDuration(20000);
      final EffectColor effectColor1=mVideoEditorHelper.createEffectItem(mediaItem2,"effect1" + i,10000,4000,EffectColor.TYPE_NEGATIVE,0);
      mediaItem2.addEffect(effectColor1);
    }
    if (i % 5 == 4) {
      mediaItem2.setDuration(20000);
      final Rect startRect=new Rect((mediaItem2.getHeight() / 3),(mediaItem2.getWidth() / 3),(mediaItem2.getHeight() / 2),(mediaItem2.getWidth() / 2));
      final Rect endRect=new Rect(0,0,mediaItem2.getWidth(),mediaItem2.getHeight());
      final EffectKenBurns kbEffectOnMediaItem=new EffectKenBurns(mediaItem2,"KBOnM2" + i,startRect,endRect,500,(mediaItem2.getDuration() - 500));
      mediaItem2.addEffect(kbEffectOnMediaItem);
    }
  }
  System.gc();
  Thread.sleep(2500);
  final Runtime runtimeObjEnd=Runtime.getRuntime();
  final long javaMemEnd=runtimeObjEnd.totalMemory();
  final long nativeMemEnd=Debug.getNativeHeapAllocatedSize();
  loggingInfo[0]="Java Memory at Start = " + javaMemStart + "\n\tJava Memory at End = "+ javaMemEnd+ "\n\tJava Memory (End - Start) = "+ (javaMemEnd - javaMemStart);
  loggingInfo[1]="Native Memory at Start = " + nativeMemStart + "\n\tNative Memory at End = "+ nativeMemEnd+ "\n\tNative Memory (End-Start) = "+ (nativeMemEnd - nativeMemStart);
  System.gc();
  final Runtime runtimeObjStart1=Runtime.getRuntime();
  final long javaMemStart1=runtimeObjStart.totalMemory();
  final long nativeMemStart1=Debug.getNativeHeapAllocatedSize();
  for (int i=0; i < 500; i++) {
    if (i % 5 == 0) {
      mediaItem1.removeEffect("effect1" + i);
    }
    if (i % 5 == 1) {
      mediaItem1.removeEffect("effect1" + i);
    }
    if (i % 5 == 2) {
      mediaItem1.removeEffect("effect1" + i);
    }
    if (i % 5 == 3) {
      mediaItem1.removeEffect("effect1" + i);
    }
    if (i % 5 == 4) {
      mediaItem1.removeEffect("KBOnM2" + i);
    }
  }
  System.gc();
  Thread.sleep(2500);
  final Runtime runtimeObjEnd1=Runtime.getRuntime();
  final long javaMemEnd1=runtimeObjEnd.totalMemory();
  final long nativeMemEnd1=Debug.getNativeHeapAllocatedSize();
  loggingInfo[2]="\nAfter removal:\nJava Memory at Start = " + javaMemStart1 + "\n\tJava Memory at End = "+ javaMemEnd1+ "\n\tJava Memory (End - Start) = "+ (javaMemEnd1 - javaMemStart1);
  loggingInfo[3]="Native Memory at Start = " + nativeMemStart1 + "\n\tNative Memory at End = "+ nativeMemEnd1+ "\n\tNative Memory (End-Start)= "+ (nativeMemEnd1 - nativeMemStart1);
  writeTimingInfo("testStressAddRemoveEffects",loggingInfo);
}
