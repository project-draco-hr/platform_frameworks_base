{
  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;
  final String VideoItemFileName1=INPUT_FILE_PATH + "H264_BP_1080x720_30fps_800kbps_1_17.mp4";
  final String VideoItemFileName2=INPUT_FILE_PATH + "H264_BP_800x480_15fps_512kbps_1_17.mp4";
  final String VideoItemFileName3=INPUT_FILE_PATH + "MPEG4_SP_640x480_15fps_1200kbps_AACLC_48khz_64kbps_m_1_17.3gp";
  final String ImageItemFileName4=INPUT_FILE_PATH + "IMG_640x480.jpg";
  final String ImageItemFileName5=INPUT_FILE_PATH + "IMG_176x144.jpg";
  final String OverlayFile6=INPUT_FILE_PATH + "IMG_640x480_Overlay1.png";
  final String[] loggingInfo=new String[4];
  final String[] projectPath=new String[10];
  System.gc();
  final Runtime runtimeObjStart=Runtime.getRuntime();
  final long javaMemStart=runtimeObjStart.totalMemory();
  final long nativeMemStart=Debug.getNativeHeapAllocatedSize();
  for (int i=0; i < 10; i++) {
    projectPath[i]=mVideoEditorHelper.createRandomFile(PROJECT_LOCATION);
    final VideoEditor mVideoEditor1=mVideoEditorHelper.createVideoEditor(projectPath[i]);
    final MediaVideoItem mediaItem1=new MediaVideoItem(mVideoEditor1,"m1",VideoItemFileName1,renderingMode);
    mVideoEditor1.addMediaItem(mediaItem1);
    mediaItem1.setExtractBoundaries(0,10000);
    final MediaVideoItem mediaItem2=new MediaVideoItem(mVideoEditor1,"m2",VideoItemFileName2,renderingMode);
    mVideoEditor1.addMediaItem(mediaItem2);
    mediaItem2.setExtractBoundaries(mediaItem2.getDuration() / 4,mediaItem2.getDuration() / 2);
    final MediaVideoItem mediaItem3=new MediaVideoItem(mVideoEditor1,"m3",VideoItemFileName3,renderingMode);
    mVideoEditor1.addMediaItem(mediaItem3);
    mediaItem3.setExtractBoundaries(mediaItem3.getDuration() / 2,mediaItem3.getDuration());
    final MediaImageItem mediaItem4=new MediaImageItem(mVideoEditor1,"m4",ImageItemFileName4,5000,renderingMode);
    mVideoEditor1.addMediaItem(mediaItem4);
    final MediaImageItem mediaItem5=new MediaImageItem(mVideoEditor1,"m5",ImageItemFileName5,5000,renderingMode);
    mVideoEditor1.addMediaItem(mediaItem5);
    final EffectColor effectColor1=mVideoEditorHelper.createEffectItem(mediaItem3,"effect1",10000,2000,EffectColor.TYPE_COLOR,EffectColor.GREEN);
    mediaItem3.addEffect(effectColor1);
    final Bitmap mBitmap=mVideoEditorHelper.getBitmap(OverlayFile6,640,480);
    final OverlayFrame overlayFrame=mVideoEditorHelper.createOverlay(mediaItem4,"overlay",mBitmap,4000,1000);
    mediaItem4.addOverlay(overlayFrame);
    final TransitionCrossfade tranCrossfade=new TransitionCrossfade("transCF",mediaItem1,mediaItem2,5000,Transition.BEHAVIOR_MIDDLE_FAST);
    mVideoEditor1.addTransition(tranCrossfade);
    final EffectColor effectColor2=mVideoEditorHelper.createEffectItem(mediaItem4,"effect2",0,mediaItem4.getDuration(),EffectColor.TYPE_COLOR,EffectColor.PINK);
    mediaItem4.addEffect(effectColor2);
    mVideoEditor1.generatePreview(new MediaProcessingProgressListener(){
      public void onProgress(      Object item,      int action,      int progress){
      }
    }
);
    mVideoEditor1.save();
    mVideoEditor1.release();
  }
  System.gc();
  Thread.sleep(2500);
  final Runtime runtimeObjEnd=Runtime.getRuntime();
  final long javaMemEnd=runtimeObjEnd.totalMemory();
  final long nativeMemEnd=Debug.getNativeHeapAllocatedSize();
  loggingInfo[0]="Java Memory at Start = " + javaMemStart + "\n\tJava Memory at End = "+ javaMemEnd+ "\n\tJava Memory (End - Start) = "+ (javaMemEnd - javaMemStart);
  loggingInfo[1]="Native Memory at Start = " + nativeMemStart + "\n\tNative Memory at End = "+ nativeMemEnd+ "\n\tNative Memory (End-Start)= "+ (nativeMemEnd - nativeMemStart);
  System.gc();
  final Runtime runtimeObjStart1=Runtime.getRuntime();
  final long javaMemStart1=runtimeObjStart.totalMemory();
  final long nativeMemStart1=Debug.getNativeHeapAllocatedSize();
  for (int i=0; i < 10; i++) {
    final VideoEditor mVideoEditor1b=VideoEditorFactory.load(projectPath[i],true);
    List<MediaItem> mediaList=mVideoEditor1b.getAllMediaItems();
    assertEquals("Media Item List Size",5,mediaList.size());
    mediaList.get(3).removeEffect("effect1");
    mediaList.get(3).removeEffect("effect2");
    mediaList.get(2).removeOverlay("overlay");
    mVideoEditor1b.removeTransition("transCF");
    mVideoEditor1b.removeMediaItem("m5");
    mVideoEditor1b.removeMediaItem("m4");
    mVideoEditor1b.removeMediaItem("m3");
    mVideoEditor1b.removeMediaItem("m2");
    mVideoEditor1b.removeMediaItem("m1");
    mVideoEditor1b.release();
  }
  System.gc();
  Thread.sleep(2500);
  final Runtime runtimeObjEnd1=Runtime.getRuntime();
  final long javaMemEnd1=runtimeObjEnd.totalMemory();
  final long nativeMemEnd1=Debug.getNativeHeapAllocatedSize();
  loggingInfo[2]="\nAfter removal:\nJava Memory at Start = " + javaMemStart1 + "\n\tJava Memory at End = "+ javaMemEnd1+ "\n\tJava Memory (End - Start) = "+ (javaMemEnd1 - javaMemStart1);
  loggingInfo[3]="Native Memory at Start = " + nativeMemStart1 + "\n\tNative Memory at End = "+ nativeMemEnd1+ "\n\tNative Memory (End-Start)= "+ (nativeMemEnd1 - nativeMemStart1);
  writeTimingInfo("testStressLoadAndSave",loggingInfo);
}
