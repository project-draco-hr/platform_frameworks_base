{
  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;
  final String VideoItemFileName1=INPUT_FILE_PATH + "H264_BP_800x480_15fps_512kbps_1_17.mp4";
  final String ImageItemFileName2=INPUT_FILE_PATH + "IMG_1600x1200.jpg";
  final String VideoItemFileName3=INPUT_FILE_PATH + "MPEG4_SP_640x480_15fps_512kbps_AACLC_48khz_132kbps_s_0_26.mp4";
  final String maskFilename=INPUT_FILE_PATH + "TransitionSpiral_QVGA.jpg";
  final String[] loggingInfo=new String[4];
  System.gc();
  final Runtime runtimeObjStart=Runtime.getRuntime();
  final long javaMemStart=runtimeObjStart.totalMemory();
  final long nativeMemStart=Debug.getNativeHeapAllocatedSize();
  for (int i=0; i < 50; i++) {
    if (i % 4 == 0) {
      final MediaVideoItem mediaItem1=new MediaVideoItem(mVideoEditor,"m1" + i,VideoItemFileName1,renderingMode);
      mVideoEditor.addMediaItem(mediaItem1);
      mediaItem1.setExtractBoundaries(0,10000);
      final TransitionCrossfade tranCrossfade=new TransitionCrossfade("transCF" + i,null,mediaItem1,5000,Transition.BEHAVIOR_MIDDLE_FAST);
      mVideoEditor.addTransition(tranCrossfade);
    }
    if (i % 4 == 1) {
      final MediaVideoItem mediaItem1=new MediaVideoItem(mVideoEditor,"m1" + i,VideoItemFileName1,renderingMode);
      mVideoEditor.addMediaItem(mediaItem1);
      mediaItem1.setExtractBoundaries(0,10000);
      final MediaImageItem mediaItem2=new MediaImageItem(mVideoEditor,"m2" + i,ImageItemFileName2,10000,renderingMode);
      mVideoEditor.addMediaItem(mediaItem2);
      final TransitionAlpha transitionAlpha=mVideoEditorHelper.createTAlpha("transAlpha" + i,mediaItem1,mediaItem2,5000,Transition.BEHAVIOR_SPEED_UP,maskFilename,10,false);
      transitionAlpha.setDuration(4000);
      mVideoEditor.addTransition(transitionAlpha);
    }
    if (i % 4 == 2) {
      final MediaImageItem mediaItem2=new MediaImageItem(mVideoEditor,"m2" + i,ImageItemFileName2,10000,renderingMode);
      mVideoEditor.addMediaItem(mediaItem2);
      final MediaVideoItem mediaItem3=new MediaVideoItem(mVideoEditor,"m3" + i,VideoItemFileName3,renderingMode);
      mVideoEditor.addMediaItem(mediaItem3);
      mediaItem3.setExtractBoundaries(0,10000);
      final TransitionAlpha transitionAlpha=mVideoEditorHelper.createTAlpha("transAlpha" + i,mediaItem2,mediaItem3,5000,Transition.BEHAVIOR_SPEED_UP,maskFilename,10,false);
      transitionAlpha.setDuration(4000);
      mVideoEditor.addTransition(transitionAlpha);
      mediaItem3.setExtractBoundaries(0,6000);
      final TransitionSliding transition2And3=mVideoEditorHelper.createTSliding("transSlide" + i,mediaItem2,mediaItem3,3000,Transition.BEHAVIOR_MIDDLE_FAST,TransitionSliding.DIRECTION_LEFT_OUT_RIGHT_IN);
      mVideoEditor.addTransition(transition2And3);
    }
    if (i % 4 == 3) {
      final MediaVideoItem mediaItem3=new MediaVideoItem(mVideoEditor,"m3" + i,VideoItemFileName3,renderingMode);
      mVideoEditor.addMediaItem(mediaItem3);
      mediaItem3.setExtractBoundaries(0,5000);
      final TransitionFadeBlack transition3=mVideoEditorHelper.createTFadeBlack("transFB" + i,mediaItem3,null,2500,Transition.BEHAVIOR_SPEED_UP);
      transition3.setDuration(500);
      mVideoEditor.addTransition(transition3);
    }
  }
  System.gc();
  Thread.sleep(2500);
  final Runtime runtimeObjEnd=Runtime.getRuntime();
  final long javaMemEnd=runtimeObjEnd.totalMemory();
  final long nativeMemEnd=Debug.getNativeHeapAllocatedSize();
  loggingInfo[0]="Java Memory at Start = " + javaMemStart + "\n\tJava Memory at End = "+ javaMemEnd+ "\n\tJava Memory (End - Start) = "+ (javaMemEnd - javaMemStart);
  loggingInfo[1]="Native Memory at Start = " + nativeMemStart + "\n\tNative Memory at End = "+ nativeMemEnd+ "\n\tNative Memory (End-Start) = "+ (nativeMemEnd - nativeMemStart);
  System.gc();
  final Runtime runtimeObjStart1=Runtime.getRuntime();
  final long javaMemStart1=runtimeObjStart.totalMemory();
  final long nativeMemStart1=Debug.getNativeHeapAllocatedSize();
  for (int i=0; i < 50; i++) {
    if (i % 4 == 0) {
      mVideoEditor.removeTransition("transCF" + i);
      mVideoEditor.removeMediaItem("m1" + i);
    }
    if (i % 4 == 1) {
      mVideoEditor.removeTransition("transAlpha" + i);
      mVideoEditor.removeMediaItem("m1" + i);
      mVideoEditor.removeMediaItem("m2" + i);
    }
    if (i % 4 == 2) {
      mVideoEditor.removeTransition("transSlide" + i);
      mVideoEditor.removeMediaItem("m2" + i);
      mVideoEditor.removeMediaItem("m3" + i);
    }
    if (i % 4 == 3) {
      mVideoEditor.removeMediaItem("m3" + i);
    }
  }
  System.gc();
  Thread.sleep(2500);
  final Runtime runtimeObjEnd1=Runtime.getRuntime();
  final long javaMemEnd1=runtimeObjEnd.totalMemory();
  final long nativeMemEnd1=Debug.getNativeHeapAllocatedSize();
  loggingInfo[2]="\nAfter removal:\nJava Memory at Start = " + javaMemStart1 + "\n\tJava Memory at End = "+ javaMemEnd1+ "\n\tJava Memory (End - Start) = "+ (javaMemEnd1 - javaMemStart1);
  loggingInfo[3]="Native Memory at Start = " + nativeMemStart1 + "\n\tNative Memory at End = "+ nativeMemEnd1+ "\n\tNative Memory (End-Start) = "+ (nativeMemEnd1 - nativeMemStart1);
  writeTimingInfo("testStressAddRemoveTransition",loggingInfo);
}
