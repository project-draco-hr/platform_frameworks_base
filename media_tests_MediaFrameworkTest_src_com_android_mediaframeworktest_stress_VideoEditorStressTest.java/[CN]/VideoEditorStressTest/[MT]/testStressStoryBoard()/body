{
  final String videoItemFileName1=INPUT_FILE_PATH + "MPEG4_SP_720x480_30fps_280kbps_AACLC_48kHz_161kbps_s_0_26.mp4";
  final String videoItemFileName2=INPUT_FILE_PATH + "MPEG4_SP_854x480_15fps_256kbps_AACLC_16khz_48kbps_s_0_26.mp4";
  final String videoItemFileName3=INPUT_FILE_PATH + "MPEG4_SP_640x480_15fps_512kbps_AACLC_48khz_132kbps_s_0_26.mp4";
  final String imageItemFileName4=INPUT_FILE_PATH + "IMG_1600x1200.jpg";
  final String imageItemFileName5=INPUT_FILE_PATH + "IMG_176x144.jpg";
  final String audioFilename6=INPUT_FILE_PATH + "AMRNB_8KHz_12.2Kbps_m_1_17.3gp";
  final String audioFilename7=INPUT_FILE_PATH + "AACLC_44.1kHz_256kbps_s_1_17.mp4";
  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;
  final int audioVolume=50;
  final String[] loggingInfo=new String[4];
  System.gc();
  final Runtime runtimeObjStart=Runtime.getRuntime();
  final long javaMemStart=runtimeObjStart.totalMemory();
  final long nativeMemStart=Debug.getNativeHeapAllocatedSize();
  final MediaVideoItem mediaItem1=new MediaVideoItem(mVideoEditor,"m1",videoItemFileName1,renderingMode);
  mediaItem1.setExtractBoundaries(0,10000);
  mVideoEditor.addMediaItem(mediaItem1);
  final MediaVideoItem mediaItem2=new MediaVideoItem(mVideoEditor,"m2",videoItemFileName2,renderingMode);
  mediaItem2.setExtractBoundaries(mediaItem2.getDuration() / 4,mediaItem2.getDuration() / 2);
  mVideoEditor.addMediaItem(mediaItem2);
  final MediaVideoItem mediaItem3=new MediaVideoItem(mVideoEditor,"m3",videoItemFileName3,renderingMode);
  mediaItem3.setExtractBoundaries(mediaItem3.getDuration() / 2,mediaItem3.getDuration());
  mVideoEditor.addMediaItem(mediaItem3);
  final MediaImageItem mediaItem4=new MediaImageItem(mVideoEditor,"m4",imageItemFileName4,5000,renderingMode);
  mVideoEditor.addMediaItem(mediaItem4);
  final MediaImageItem mediaItem5=new MediaImageItem(mVideoEditor,"m5",imageItemFileName5,5000,renderingMode);
  mVideoEditor.addMediaItem(mediaItem5);
  final TransitionCrossfade tranCrossfade=new TransitionCrossfade("transCF",mediaItem2,mediaItem3,2500,Transition.BEHAVIOR_MIDDLE_FAST);
  mVideoEditor.addTransition(tranCrossfade);
  final TransitionCrossfade tranCrossfade1=new TransitionCrossfade("transCF1",mediaItem3,mediaItem4,2500,Transition.BEHAVIOR_MIDDLE_FAST);
  mVideoEditor.addTransition(tranCrossfade1);
  final AudioTrack audioTrack1=new AudioTrack(mVideoEditor,"Audio Track1",audioFilename6);
  mVideoEditor.addAudioTrack(audioTrack1);
  mVideoEditor.removeAudioTrack("Audio Track1");
  final AudioTrack audioTrack2=new AudioTrack(mVideoEditor,"Audio Track2",audioFilename7);
  mVideoEditor.addAudioTrack(audioTrack2);
  audioTrack2.enableLoop();
  System.gc();
  Thread.sleep(2500);
  final Runtime runtimeObjEnd=Runtime.getRuntime();
  final long javaMemEnd=runtimeObjEnd.totalMemory();
  final long nativeMemEnd=Debug.getNativeHeapAllocatedSize();
  loggingInfo[0]="Java Memory at Start = " + javaMemStart + "\t\tJava Memory at End = "+ javaMemEnd+ "\t\tJava Memory (End - Start) = "+ (javaMemEnd - javaMemStart);
  loggingInfo[1]="Native Memory at Start = " + nativeMemStart + "\tNative Memory at End = "+ nativeMemEnd+ "\t\tNative Memory (End-Start) = "+ (nativeMemEnd - nativeMemStart);
  System.gc();
  final Runtime runtimeObjStart1=Runtime.getRuntime();
  final long javaMemStart1=runtimeObjStart.totalMemory();
  final long nativeMemStart1=Debug.getNativeHeapAllocatedSize();
  mVideoEditor.removeAudioTrack("Audio Track2");
  mVideoEditor.removeTransition("transCF");
  mVideoEditor.removeTransition("transCF1");
  mVideoEditor.removeMediaItem("m5");
  mVideoEditor.removeMediaItem("m4");
  mVideoEditor.removeMediaItem("m3");
  mVideoEditor.removeMediaItem("m2");
  mVideoEditor.removeMediaItem("m1");
  System.gc();
  Thread.sleep(2500);
  final Runtime runtimeObjEnd1=Runtime.getRuntime();
  final long javaMemEnd1=runtimeObjEnd.totalMemory();
  final long nativeMemEnd1=Debug.getNativeHeapAllocatedSize();
  loggingInfo[2]="\nAfter removal:\nJava Memory at Start = " + javaMemStart1 + "\n\tJava Memory at End = "+ javaMemEnd1+ "\n\tJava Memory (End - Start) = "+ (javaMemEnd1 - javaMemStart1);
  loggingInfo[3]="Native Memory at Start = " + nativeMemStart1 + "\n\tNative Memory at End = "+ nativeMemEnd1+ "\n\tNative Memory (End-Start)= "+ (nativeMemEnd1 - nativeMemStart1);
  writeTimingInfo("testStressStoryBoard",loggingInfo);
}
