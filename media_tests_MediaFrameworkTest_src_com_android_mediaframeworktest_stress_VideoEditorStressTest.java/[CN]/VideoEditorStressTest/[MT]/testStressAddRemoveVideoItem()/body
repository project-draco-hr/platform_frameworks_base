{
  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;
  final String videoItemFileName1=INPUT_FILE_PATH + "H264_BP_176x144_15fps_144kbps_AMRNB_8kHz_12.2kbps_m_1_17.3gp";
  final String videoItemFileName2=INPUT_FILE_PATH + "MPEG4_SP_720x480_30fps_280kbps_AACLC_48kHz_96kbps_s_0_21.mp4";
  final String videoItemFileName3=INPUT_FILE_PATH + "H263_profile0_176x144_15fps_128kbps_1_35.3gp";
  final String videoItemFileName4=INPUT_FILE_PATH + "MPEG4_SP_640x480_15fps_1200kbps_AACLC_48khz_64kbps_m_1_17.3gp";
  final String[] loggingInfo=new String[4];
  System.gc();
  final Runtime runtimeObjStart=Runtime.getRuntime();
  final long javaMemStart=runtimeObjStart.totalMemory();
  final long nativeMemStart=Debug.getNativeHeapAllocatedSize();
  for (int i=0; i < 50; i++) {
    if (i % 4 == 0) {
      final MediaVideoItem mediaItem1=new MediaVideoItem(mVideoEditor,"m1" + i,videoItemFileName1,renderingMode);
      mediaItem1.setExtractBoundaries(0,5000);
      mVideoEditor.addMediaItem(mediaItem1);
    }
    if (i % 4 == 1) {
      final MediaVideoItem mediaItem2=new MediaVideoItem(mVideoEditor,"m2" + i,videoItemFileName2,renderingMode);
      mediaItem2.setExtractBoundaries(0,10000);
      mVideoEditor.addMediaItem(mediaItem2);
    }
    if (i % 4 == 2) {
      final MediaVideoItem mediaItem3=new MediaVideoItem(mVideoEditor,"m3" + i,videoItemFileName3,renderingMode);
      mediaItem3.setExtractBoundaries(30000,45000);
      mVideoEditor.addMediaItem(mediaItem3);
    }
    if (i % 4 == 3) {
      final MediaVideoItem mediaItem4=new MediaVideoItem(mVideoEditor,"m4" + i,videoItemFileName4,renderingMode);
      mediaItem4.setExtractBoundaries(10000,30000);
      mVideoEditor.addMediaItem(mediaItem4);
    }
  }
  System.gc();
  Thread.sleep(2500);
  final Runtime runtimeObjEnd=Runtime.getRuntime();
  final long javaMemEnd=runtimeObjEnd.totalMemory();
  final long nativeMemEnd=Debug.getNativeHeapAllocatedSize();
  loggingInfo[0]="\nJava Memory at Start = " + javaMemStart + "\n\tJava Memory at End = "+ javaMemEnd+ "\n\tJava Memory (End - Start) = "+ (javaMemEnd - javaMemStart);
  loggingInfo[1]="\nNative Memory at Start = " + nativeMemStart + "\n\tNative Memory at End = "+ nativeMemEnd+ "\n\tNative Memory (End-Start)= "+ (nativeMemEnd - nativeMemStart);
  System.gc();
  final Runtime runtimeObjStart1=Runtime.getRuntime();
  final long javaMemStart1=runtimeObjStart.totalMemory();
  final long nativeMemStart1=Debug.getNativeHeapAllocatedSize();
  for (int i=0; i < 50; i++) {
    if (i % 4 == 0) {
      mVideoEditor.removeMediaItem("m1" + i);
    }
    if (i % 4 == 1) {
      mVideoEditor.removeMediaItem("m2" + i);
    }
    if (i % 4 == 2) {
      mVideoEditor.removeMediaItem("m3" + i);
    }
    if (i % 4 == 3) {
      mVideoEditor.removeMediaItem("m4" + i);
    }
  }
  System.gc();
  Thread.sleep(2500);
  final Runtime runtimeObjEnd1=Runtime.getRuntime();
  final long javaMemEnd1=runtimeObjEnd.totalMemory();
  final long nativeMemEnd1=Debug.getNativeHeapAllocatedSize();
  loggingInfo[2]="\nAfter Items remvoed:\nJava Memory at Start = " + javaMemStart1 + "\n\tJava Memory at End = "+ javaMemEnd1+ "\n\tJava Memory (End - Start) = "+ (javaMemEnd1 - javaMemStart1);
  loggingInfo[3]="\nNative Memory at Start = " + nativeMemStart1 + "\n\tNative Memory at End = "+ nativeMemEnd1+ "\n\tNative Memory (End-Start)= "+ (nativeMemEnd1 - nativeMemStart1);
  writeTimingInfo("testStressAddRemoveVideoItem",loggingInfo);
}
