{
  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;
  final String VideoItemFileName1=INPUT_FILE_PATH + "H264_BP_1080x720_30fps_800kbps_1_17.mp4";
  final String ImageItemFileName2=INPUT_FILE_PATH + "IMG_640x480.jpg";
  final String AudioItemFileName3=INPUT_FILE_PATH + "AACLC_44.1kHz_256kbps_s_1_17.mp4";
  final String[] loggingInfo=new String[1];
  int i=0;
  final int videoAspectRatio=MediaProperties.ASPECT_RATIO_3_2;
  final int videoFileType=MediaProperties.FILE_MP4;
  final int videoCodecType=MediaProperties.VCODEC_H264;
  final int videoDuration=77366;
  final int videoProfile=MediaProperties.H264Profile.H264ProfileBaseline;
  final int videoLevel=MediaProperties.H264Level.H264Level13;
  final int videoHeight=MediaProperties.HEIGHT_720;
  final int videoWidth=1080;
  final int imageAspectRatio=MediaProperties.ASPECT_RATIO_4_3;
  final int imageFileType=MediaProperties.FILE_JPEG;
  final int imageWidth=640;
  final int imageHeight=MediaProperties.HEIGHT_480;
  final int audioDuration=77554;
  final int audioCodecType=MediaProperties.ACODEC_AAC_LC;
  final int audioSamplingFrequency=44100;
  final int audioChannel=2;
  writeTestCaseHeader("testStressMediaProperties");
  getBeginMemory();
  for (i=0; i < 50; i++) {
    if (i % 3 == 0) {
      final MediaVideoItem mediaItem1=new MediaVideoItem(mVideoEditor,"m1" + i,VideoItemFileName1,renderingMode);
      mVideoEditor.addMediaItem(mediaItem1);
      mediaItem1.setExtractBoundaries(0,20000);
      assertEquals("Aspect Ratio Mismatch",videoAspectRatio,mediaItem1.getAspectRatio());
      assertEquals("File Type Mismatch",videoFileType,mediaItem1.getFileType());
      assertEquals("VideoCodec Mismatch",videoCodecType,mediaItem1.getVideoType());
      assertEquals("duration Mismatch",videoDuration,mediaItem1.getDuration());
      assertEquals("Video Profile ",videoProfile,mediaItem1.getVideoProfile());
      assertEquals("Video Level ",videoLevel,mediaItem1.getVideoLevel());
      assertEquals("Video height ",videoHeight,mediaItem1.getHeight());
      assertEquals("Video width ",videoWidth,mediaItem1.getWidth());
      mVideoEditor.removeMediaItem("m1" + i);
    }
    if (i % 3 == 1) {
      final MediaImageItem mediaItem2=new MediaImageItem(mVideoEditor,"m2" + i,ImageItemFileName2,10000,renderingMode);
      mVideoEditor.addMediaItem(mediaItem2);
      assertEquals("Aspect Ratio Mismatch",imageAspectRatio,mediaItem2.getAspectRatio());
      assertEquals("File Type Mismatch",imageFileType,mediaItem2.getFileType());
      assertEquals("Image height",imageHeight,mediaItem2.getHeight());
      assertEquals("Image width",imageWidth,mediaItem2.getWidth());
      mVideoEditor.removeMediaItem("m2" + i);
    }
    if (i % 3 == 2) {
      final AudioTrack mediaItem3=new AudioTrack(mVideoEditor,"m3" + i,AudioItemFileName3);
      mVideoEditor.addAudioTrack(mediaItem3);
      assertEquals("AudioType Mismatch",audioCodecType,mediaItem3.getAudioType());
      assertEquals("Audio Sampling",audioSamplingFrequency,mediaItem3.getAudioSamplingFrequency());
      assertEquals("Audio Channels",audioChannel,mediaItem3.getAudioChannels());
      assertEquals("duration Mismatch",audioDuration,mediaItem3.getDuration());
      mVideoEditor.removeAudioTrack("m3" + i);
    }
    if (i % 10 == 0) {
      getAfterMemory_updateLog(loggingInfo,false,i);
    }
  }
  getAfterMemory_updateLog(loggingInfo,false,i);
}
