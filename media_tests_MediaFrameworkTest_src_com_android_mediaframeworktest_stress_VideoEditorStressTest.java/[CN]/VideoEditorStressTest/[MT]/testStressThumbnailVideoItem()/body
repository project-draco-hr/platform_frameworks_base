{
  final String videoItemFileName=INPUT_FILE_PATH + "H264_BP_640x480_15fps_1200Kbps_AACLC_48KHz_64kps_m_0_27.3gp";
  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;
  final String[] loggingInfo=new String[2];
  final MediaVideoItem mediaVideoItem=new MediaVideoItem(mVideoEditor,"m1",videoItemFileName,renderingMode);
  System.gc();
  final Runtime runtimeObjStart=Runtime.getRuntime();
  final long javaMemStart=runtimeObjStart.totalMemory();
  final long nativeMemStart=Debug.getNativeHeapAllocatedSize();
  for (int i=0; i < 50; i++) {
    if (i % 4 == 0) {
      final Bitmap[] thumbNails=mediaVideoItem.getThumbnailList(mediaVideoItem.getWidth() * 3,mediaVideoItem.getHeight() * 2,i,5000,2);
      for (int i1=0; i1 < thumbNails.length; i1++) {
        thumbNails[i1].recycle();
      }
    }
    if (i % 4 == 1) {
      final Bitmap[] thumbNails=mediaVideoItem.getThumbnailList(mediaVideoItem.getWidth() / 2,mediaVideoItem.getHeight() * 3,i,5000,2);
      for (int i1=0; i1 < thumbNails.length; i1++) {
        thumbNails[i1].recycle();
      }
    }
    if (i % 4 == 2) {
      final Bitmap[] thumbNails=mediaVideoItem.getThumbnailList(mediaVideoItem.getWidth() * 2,mediaVideoItem.getHeight() / 3,i,5000,2);
      for (int i1=0; i1 < thumbNails.length; i1++) {
        thumbNails[i1].recycle();
      }
    }
    if (i % 4 == 3) {
      final Bitmap[] thumbNails=mediaVideoItem.getThumbnailList(mediaVideoItem.getWidth(),mediaVideoItem.getHeight(),i,5000,2);
      for (int i1=0; i1 < thumbNails.length; i1++) {
        thumbNails[i1].recycle();
      }
    }
  }
  System.gc();
  Thread.sleep(2500);
  final Runtime runtimeObjEnd=Runtime.getRuntime();
  final long javaMemEnd=runtimeObjEnd.totalMemory();
  final long nativeMemEnd=Debug.getNativeHeapAllocatedSize();
  loggingInfo[0]="Java Memory at Start = " + javaMemStart + "\t\tJava Memory at End = "+ javaMemEnd+ "\t\tJava Memory (End - Start) = "+ (javaMemEnd - javaMemStart);
  loggingInfo[1]="Native Memory at Start = " + nativeMemStart + "\tNative Memory at End = "+ nativeMemEnd+ "\t\tNative Memory (End-Start) = "+ (nativeMemEnd - nativeMemStart);
  writeTimingInfo("testStressThumbnailVideoItem",loggingInfo);
}
