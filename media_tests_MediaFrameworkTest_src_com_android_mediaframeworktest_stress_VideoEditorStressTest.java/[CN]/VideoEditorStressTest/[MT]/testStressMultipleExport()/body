{
  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;
  final String VideoItemFileName1=INPUT_FILE_PATH + "H264_BP_1080x720_30fps_800kbps_1_17.mp4";
  final String VideoItemFileName2=INPUT_FILE_PATH + "H264_BP_800x480_15fps_512kbps_1_17.mp4";
  final String VideoItemFileName3=INPUT_FILE_PATH + "MPEG4_SP_640x480_15fps_1200kbps_AACLC_48khz_64kbps_m_1_17.3gp";
  final String[] loggingInfo=new String[4];
  final String outFilename=mVideoEditorHelper.createRandomFile(mVideoEditor.getPath() + "/") + ".3gp";
  System.gc();
  final Runtime runtimeObjStart=Runtime.getRuntime();
  final long javaMemStart=runtimeObjStart.totalMemory();
  final long nativeMemStart=Debug.getNativeHeapAllocatedSize();
  final MediaVideoItem mediaItem1=new MediaVideoItem(mVideoEditor,"m1",VideoItemFileName1,renderingMode);
  mVideoEditor.addMediaItem(mediaItem1);
  mediaItem1.setExtractBoundaries(0,10000);
  final MediaVideoItem mediaItem2=new MediaVideoItem(mVideoEditor,"m2",VideoItemFileName2,renderingMode);
  mVideoEditor.addMediaItem(mediaItem2);
  mediaItem2.setExtractBoundaries(0,15000);
  for (int i=0; i < 100; i++) {
    if (i % 4 == 0) {
      final int aspectRatio=MediaProperties.ASPECT_RATIO_4_3;
      mVideoEditor.setAspectRatio(aspectRatio);
      mVideoEditor.export(outFilename,MediaProperties.HEIGHT_480,MediaProperties.BITRATE_256K,MediaProperties.ACODEC_AAC_LC,MediaProperties.VCODEC_H263,new ExportProgressListener(){
        public void onProgress(        VideoEditor ve,        String outFileName,        int progress){
        }
      }
);
    }
    if (i % 4 == 1) {
      final int aspectRatio=MediaProperties.ASPECT_RATIO_5_3;
      mVideoEditor.setAspectRatio(aspectRatio);
      mVideoEditor.export(outFilename,MediaProperties.HEIGHT_144,MediaProperties.BITRATE_384K,MediaProperties.ACODEC_AAC_LC,MediaProperties.VCODEC_MPEG4,new ExportProgressListener(){
        public void onProgress(        VideoEditor ve,        String outFileName,        int progress){
        }
      }
);
    }
    if (i % 4 == 2) {
      final int aspectRatio=MediaProperties.ASPECT_RATIO_11_9;
      mVideoEditor.setAspectRatio(aspectRatio);
      mVideoEditor.export(outFilename,640,MediaProperties.BITRATE_512K,MediaProperties.ACODEC_AAC_LC,MediaProperties.VCODEC_H264BP,new ExportProgressListener(){
        public void onProgress(        VideoEditor ve,        String outFileName,        int progress){
        }
      }
);
    }
    if (i % 4 == 3) {
      final int aspectRatio=MediaProperties.ASPECT_RATIO_3_2;
      mVideoEditor.setAspectRatio(aspectRatio);
      mVideoEditor.export(outFilename,MediaProperties.HEIGHT_480,MediaProperties.BITRATE_800K,MediaProperties.ACODEC_AAC_LC,MediaProperties.VCODEC_H264BP,new ExportProgressListener(){
        public void onProgress(        VideoEditor ve,        String outFileName,        int progress){
        }
      }
);
    }
  }
  System.gc();
  Thread.sleep(2500);
  final Runtime runtimeObjEnd=Runtime.getRuntime();
  final long javaMemEnd=runtimeObjEnd.totalMemory();
  final long nativeMemEnd=Debug.getNativeHeapAllocatedSize();
  loggingInfo[0]="Java Memory at Start = " + javaMemStart + "\n\tJava Memory at End = "+ javaMemEnd+ "\n\tJava Memory (End - Start) = "+ (javaMemEnd - javaMemStart);
  loggingInfo[1]="Native Memory at Start = " + nativeMemStart + "\n\tNative Memory at End = "+ nativeMemEnd+ "\n\tNative Memory (End-Start)= "+ (nativeMemEnd - nativeMemStart);
  System.gc();
  final Runtime runtimeObjStart1=Runtime.getRuntime();
  final long javaMemStart1=runtimeObjStart.totalMemory();
  final long nativeMemStart1=Debug.getNativeHeapAllocatedSize();
  mVideoEditor.removeMediaItem("m2");
  mVideoEditor.removeMediaItem("m1");
  System.gc();
  Thread.sleep(2500);
  final Runtime runtimeObjEnd1=Runtime.getRuntime();
  final long javaMemEnd1=runtimeObjEnd.totalMemory();
  final long nativeMemEnd1=Debug.getNativeHeapAllocatedSize();
  loggingInfo[2]="\nAfter removal:\nJava Memory at Start = " + javaMemStart1 + "\n\tJava Memory at End = "+ javaMemEnd1+ "\n\tJava Memory (End - Start) = "+ (javaMemEnd1 - javaMemStart1);
  loggingInfo[3]="Native Memory at Start = " + nativeMemStart1 + "\n\tNative Memory at End = "+ nativeMemEnd1+ "\n\tNative Memory (End-Start)= "+ (nativeMemEnd1 - nativeMemStart1);
  writeTimingInfo("testStressMultipleExport",loggingInfo);
}
