{
  mStartingImportance=importance;
  mINotificationManager=INotificationManager.Stub.asInterface(ServiceManager.getService(Context.NOTIFICATION_SERVICE));
  final TextView importanceSummary=((TextView)row.findViewById(R.id.summary));
  final TextView importanceTitle=((TextView)row.findViewById(R.id.title));
  mSeekBar=(SeekBar)row.findViewById(R.id.seekbar);
  boolean systemApp=false;
  try {
    final PackageManager pm=BaseStatusBar.getPackageManagerForUser(getContext(),sbn.getUser().getIdentifier());
    final PackageInfo info=pm.getPackageInfo(sbn.getPackageName(),PackageManager.GET_SIGNATURES);
    systemApp=Utils.isSystemPackage(pm,info);
  }
 catch (  PackageManager.NameNotFoundException e) {
  }
  if (systemApp) {
    ((ImageView)row.findViewById(R.id.low_importance)).getDrawable().setTint(mContext.getColor(R.color.notification_guts_disabled_icon_tint));
  }
  final int minProgress=systemApp ? NotificationListenerService.Ranking.IMPORTANCE_LOW : NotificationListenerService.Ranking.IMPORTANCE_NONE;
  mSeekBar.setMax(NotificationListenerService.Ranking.IMPORTANCE_MAX);
  mSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
    @Override public void onProgressChanged(    SeekBar seekBar,    int progress,    boolean fromUser){
      if (progress < minProgress) {
        seekBar.setProgress(minProgress);
        progress=minProgress;
      }
      updateTitleAndSummary(progress);
      if (fromUser) {
        MetricsLogger.action(mContext,MetricsEvent.ACTION_MODIFY_IMPORTANCE_SLIDER);
      }
    }
    @Override public void onStartTrackingTouch(    SeekBar seekBar){
    }
    @Override public void onStopTrackingTouch(    SeekBar seekBar){
    }
    private void updateTitleAndSummary(    int progress){
switch (progress) {
case NotificationListenerService.Ranking.IMPORTANCE_NONE:
        importanceSummary.setText(mContext.getString(R.string.notification_importance_blocked));
      importanceTitle.setText(mContext.getString(R.string.blocked_importance));
    break;
case NotificationListenerService.Ranking.IMPORTANCE_LOW:
  importanceSummary.setText(mContext.getString(R.string.notification_importance_low));
importanceTitle.setText(mContext.getString(R.string.low_importance));
break;
case NotificationListenerService.Ranking.IMPORTANCE_DEFAULT:
importanceSummary.setText(mContext.getString(R.string.notification_importance_default));
importanceTitle.setText(mContext.getString(R.string.default_importance));
break;
case NotificationListenerService.Ranking.IMPORTANCE_HIGH:
importanceSummary.setText(mContext.getString(R.string.notification_importance_high));
importanceTitle.setText(mContext.getString(R.string.high_importance));
break;
case NotificationListenerService.Ranking.IMPORTANCE_MAX:
importanceSummary.setText(mContext.getString(R.string.notification_importance_max));
importanceTitle.setText(mContext.getString(R.string.max_importance));
break;
}
}
}
);
mSeekBar.setProgress(importance);
}
