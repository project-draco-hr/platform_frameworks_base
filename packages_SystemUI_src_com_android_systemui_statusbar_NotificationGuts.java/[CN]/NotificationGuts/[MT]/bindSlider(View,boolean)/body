{
  mActiveSliderTint=loadColorStateList(R.color.notification_guts_slider_color);
  mInactiveSliderTint=loadColorStateList(R.color.notification_guts_disabled_slider_color);
  mImportanceSummary=((TextView)importanceSlider.findViewById(R.id.summary));
  mImportanceTitle=((TextView)importanceSlider.findViewById(R.id.title));
  mSeekBar=(SeekBar)importanceSlider.findViewById(R.id.seekbar);
  final int minProgress=systemApp ? NotificationListenerService.Ranking.IMPORTANCE_MIN : NotificationListenerService.Ranking.IMPORTANCE_NONE;
  mSeekBar.setMax(NotificationListenerService.Ranking.IMPORTANCE_MAX);
  mSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
    @Override public void onProgressChanged(    SeekBar seekBar,    int progress,    boolean fromUser){
      resetFalsingCheck();
      if (progress < minProgress) {
        seekBar.setProgress(minProgress);
        progress=minProgress;
      }
      updateTitleAndSummary(progress);
      if (fromUser) {
        MetricsLogger.action(mContext,MetricsEvent.ACTION_MODIFY_IMPORTANCE_SLIDER);
      }
    }
    @Override public void onStartTrackingTouch(    SeekBar seekBar){
      resetFalsingCheck();
    }
    @Override public void onStopTrackingTouch(    SeekBar seekBar){
    }
  }
);
  mSeekBar.setProgress(mNotificationImportance);
  mAutoButton=(ImageView)importanceSlider.findViewById(R.id.auto_importance);
  mAutoButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      mAuto=!mAuto;
      applyAuto();
    }
  }
);
  mAuto=mStartingUserImportance == Ranking.IMPORTANCE_UNSPECIFIED;
  applyAuto();
}
