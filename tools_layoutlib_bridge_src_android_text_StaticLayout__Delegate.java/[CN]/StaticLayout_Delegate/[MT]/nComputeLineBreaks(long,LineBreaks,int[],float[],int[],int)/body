{
  Builder builder=sBuilderManager.getDelegate(nativeBuilder);
  if (builder == null) {
    return 0;
  }
  int length=builder.mWidths.length;
  BreakIterator it=BreakIterator.getLineInstance(new ULocale(builder.mLocale));
  it.setText(new Segment(builder.mText,0,length));
  List<Integer> breaks=new ArrayList<Integer>((int)Math.ceil(length / 5d));
  int loc;
  it.first();
  while ((loc=it.next()) != BreakIterator.DONE) {
    breaks.add(loc);
  }
  List<Primitive> primitives=computePrimitives(builder.mText,builder.mWidths,length,breaks);
switch (builder.mBreakStrategy) {
case Layout.BREAK_STRATEGY_SIMPLE:
    builder.mLineBreaker=new GreedyLineBreaker(primitives,builder.mLineWidth,builder.mTabStopCalculator);
  break;
case Layout.BREAK_STRATEGY_HIGH_QUALITY:
case Layout.BREAK_STRATEGY_BALANCED:
builder.mLineBreaker=new OptimizingLineBreaker(primitives,builder.mLineWidth,builder.mTabStopCalculator);
break;
default :
throw new AssertionError("Unknown break strategy: " + builder.mBreakStrategy);
}
builder.mLineBreaker.computeBreaks(recycle);
return recycle.breaks.length;
}
