{
  if (bounds.isEmpty() || (mUserIcon == null && mUserDrawable == null)) {
    return;
  }
  float newDisplayRadius=Math.min(bounds.width(),bounds.height()) * 0.5f;
  int size=(int)(newDisplayRadius * 2);
  if (mBitmap == null || size != ((int)(mDisplayRadius * 2))) {
    mDisplayRadius=newDisplayRadius;
    if (mBitmap != null) {
      mBitmap.recycle();
    }
    mBitmap=Bitmap.createBitmap(size,size,Bitmap.Config.ARGB_8888);
  }
  mDisplayRadius=Math.min(bounds.width(),bounds.height()) * 0.5f;
  final float iconRadius=mDisplayRadius - mFrameWidth - mFramePadding- mPadding;
  RectF dstRect=new RectF(bounds.exactCenterX() - iconRadius,bounds.exactCenterY() - iconRadius,bounds.exactCenterX() + iconRadius,bounds.exactCenterY() + iconRadius);
  if (mUserDrawable != null) {
    Rect rounded=new Rect();
    dstRect.round(rounded);
    mIntrinsicRadius=Math.min(mUserDrawable.getIntrinsicWidth(),mUserDrawable.getIntrinsicHeight()) * 0.5f;
    mUserDrawable.setBounds(rounded);
  }
 else   if (mUserIcon != null) {
    final float iconCX=mUserIcon.getWidth() * 0.5f;
    final float iconCY=mUserIcon.getHeight() * 0.5f;
    mIntrinsicRadius=Math.min(iconCX,iconCY);
    RectF srcRect=new RectF(iconCX - mIntrinsicRadius,iconCY - mIntrinsicRadius,iconCX + mIntrinsicRadius,iconCY + mIntrinsicRadius);
    mIconMatrix.setRectToRect(srcRect,dstRect,Matrix.ScaleToFit.FILL);
  }
  invalidateSelf();
}
