{
  checkNotNull(result,"result must not be null");
  checkNotNull(legacyRequest,"legacyRequest must not be null");
  Camera.Face[] faces, previousFaces;
  int fdMode;
synchronized (mLock) {
    fdMode=mFaceDetectEnabled ? STATISTICS_FACE_DETECT_MODE_SIMPLE : STATISTICS_FACE_DETECT_MODE_OFF;
    if (mFaceDetectEnabled) {
      faces=mFaces;
    }
 else {
      faces=null;
    }
    previousFaces=mFacesPrev;
    mFacesPrev=faces;
  }
  CameraCharacteristics characteristics=legacyRequest.characteristics;
  CaptureRequest request=legacyRequest.captureRequest;
  Size previewSize=legacyRequest.previewSize;
  Camera.Parameters params=legacyRequest.parameters;
  Rect activeArray=characteristics.get(CameraCharacteristics.SENSOR_INFO_ACTIVE_ARRAY_SIZE);
  ZoomData zoomData=ParameterUtils.convertScalerCropRegion(activeArray,request.get(CaptureRequest.SCALER_CROP_REGION),previewSize,params);
  List<Face> convertedFaces=new ArrayList<>();
  if (faces != null) {
    for (    Camera.Face face : faces) {
      if (face != null) {
        convertedFaces.add(ParameterUtils.convertFaceFromLegacy(face,activeArray,zoomData));
      }
 else {
        Log.w(TAG,"mapResultFaces - read NULL face from camera1 device");
      }
    }
  }
  if (VERBOSE && previousFaces != faces) {
    Log.v(TAG,"mapResultFaces - changed to " + ListUtils.listToString(convertedFaces));
  }
  result.set(CaptureResult.STATISTICS_FACES,convertedFaces.toArray(new Face[0]));
  result.set(CaptureResult.STATISTICS_FACE_DETECT_MODE,fdMode);
}
