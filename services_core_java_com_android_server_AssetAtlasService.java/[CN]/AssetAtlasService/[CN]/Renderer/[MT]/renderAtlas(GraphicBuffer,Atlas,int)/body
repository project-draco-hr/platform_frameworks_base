{
  final Paint paint=new Paint();
  paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC));
  final Canvas canvas=acquireCanvas(buffer.getWidth(),buffer.getHeight());
  if (canvas == null)   return false;
  final Atlas.Entry entry=new Atlas.Entry();
  mAtlasMap=new long[packCount * ATLAS_MAP_ENTRY_FIELD_COUNT];
  long[] atlasMap=mAtlasMap;
  int mapIndex=0;
  boolean result=false;
  try {
    final long startRender=System.nanoTime();
    final int count=mBitmaps.size();
    for (int i=0; i < count; i++) {
      final Bitmap bitmap=mBitmaps.get(i);
      if (atlas.pack(bitmap.getWidth(),bitmap.getHeight(),entry) != null) {
        if (mapIndex >= mAtlasMap.length) {
          deleteDataFile();
          break;
        }
        canvas.save();
        canvas.translate(entry.x,entry.y);
        if (entry.rotated) {
          canvas.translate(bitmap.getHeight(),0.0f);
          canvas.rotate(90.0f);
        }
        canvas.drawBitmap(bitmap,0.0f,0.0f,null);
        canvas.restore();
        atlasMap[mapIndex++]=bitmap.getSkBitmap();
        atlasMap[mapIndex++]=entry.x;
        atlasMap[mapIndex++]=entry.y;
        atlasMap[mapIndex++]=entry.rotated ? 1 : 0;
      }
    }
    final long endRender=System.nanoTime();
    if (mNativeBitmap != 0) {
      result=nUploadAtlas(buffer,mNativeBitmap);
    }
    final long endUpload=System.nanoTime();
    if (DEBUG_ATLAS) {
      float renderDuration=(endRender - startRender) / 1000.0f / 1000.0f;
      float uploadDuration=(endUpload - endRender) / 1000.0f / 1000.0f;
      Log.d(LOG_TAG,String.format("Rendered atlas in %.2fms (%.2f+%.2fms)",renderDuration + uploadDuration,renderDuration,uploadDuration));
    }
  }
  finally {
    releaseCanvas(canvas);
  }
  return result;
}
