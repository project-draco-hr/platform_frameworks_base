{
  ByteBuffer result=null;
  boolean convertWholeBuffer=(byteCount < 0);
  if (input instanceof ByteBuffer) {
    ByteBuffer input2=(ByteBuffer)input;
    int position=input2.position();
    if (convertWholeBuffer) {
      byteCount=input2.limit() - position;
    }
    result=ByteBuffer.allocate(byteCount).order(input2.order());
    for (int i=0; i < byteCount; i++) {
      result.put(input2.get());
    }
    input2.position(position);
  }
 else   if (input instanceof CharBuffer) {
    CharBuffer input2=(CharBuffer)input;
    int position=input2.position();
    if (convertWholeBuffer) {
      byteCount=(input2.limit() - position) * 2;
    }
    result=ByteBuffer.allocate(byteCount).order(input2.order());
    CharBuffer result2=result.asCharBuffer();
    for (int i=0; i < byteCount / 2; i++) {
      result2.put(input2.get());
    }
    input2.position(position);
  }
 else   if (input instanceof ShortBuffer) {
    ShortBuffer input2=(ShortBuffer)input;
    int position=input2.position();
    if (convertWholeBuffer) {
      byteCount=(input2.limit() - position) * 2;
    }
    result=ByteBuffer.allocate(byteCount).order(input2.order());
    ShortBuffer result2=result.asShortBuffer();
    for (int i=0; i < byteCount / 2; i++) {
      result2.put(input2.get());
    }
    input2.position(position);
  }
 else   if (input instanceof IntBuffer) {
    IntBuffer input2=(IntBuffer)input;
    int position=input2.position();
    if (convertWholeBuffer) {
      byteCount=(input2.limit() - position) * 4;
    }
    result=ByteBuffer.allocate(byteCount).order(input2.order());
    IntBuffer result2=result.asIntBuffer();
    for (int i=0; i < byteCount / 4; i++) {
      result2.put(input2.get());
    }
    input2.position(position);
  }
 else   if (input instanceof FloatBuffer) {
    FloatBuffer input2=(FloatBuffer)input;
    int position=input2.position();
    if (convertWholeBuffer) {
      byteCount=(input2.limit() - position) * 4;
    }
    result=ByteBuffer.allocate(byteCount).order(input2.order());
    FloatBuffer result2=result.asFloatBuffer();
    for (int i=0; i < byteCount / 4; i++) {
      result2.put(input2.get());
    }
    input2.position(position);
  }
 else   if (input instanceof DoubleBuffer) {
    DoubleBuffer input2=(DoubleBuffer)input;
    int position=input2.position();
    if (convertWholeBuffer) {
      byteCount=(input2.limit() - position) * 8;
    }
    result=ByteBuffer.allocate(byteCount).order(input2.order());
    DoubleBuffer result2=result.asDoubleBuffer();
    for (int i=0; i < byteCount / 8; i++) {
      result2.put(input2.get());
    }
    input2.position(position);
  }
 else   if (input instanceof LongBuffer) {
    LongBuffer input2=(LongBuffer)input;
    int position=input2.position();
    if (convertWholeBuffer) {
      byteCount=(input2.limit() - position) * 8;
    }
    result=ByteBuffer.allocate(byteCount).order(input2.order());
    LongBuffer result2=result.asLongBuffer();
    for (int i=0; i < byteCount / 8; i++) {
      result2.put(input2.get());
    }
    input2.position(position);
  }
 else {
    throw new RuntimeException("Unimplemented Buffer subclass.");
  }
  result.rewind();
  result.order(ByteOrder.nativeOrder());
  return result;
}
