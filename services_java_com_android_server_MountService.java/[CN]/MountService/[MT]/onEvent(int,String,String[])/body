{
  Intent in=null;
  if (DEBUG_EVENTS) {
    StringBuilder builder=new StringBuilder();
    builder.append("onEvent::");
    builder.append(" raw= " + raw);
    if (cooked != null) {
      builder.append(" cooked = ");
      for (      String str : cooked) {
        builder.append(" " + str);
      }
    }
    Slog.i(TAG,builder.toString());
  }
  if (code == VoldResponseCode.VolumeStateChange) {
    notifyVolumeStateChange(cooked[2],cooked[3],Integer.parseInt(cooked[7]),Integer.parseInt(cooked[10]));
  }
 else   if (code == VoldResponseCode.ShareAvailabilityChange) {
    boolean avail=false;
    if (cooked[5].equals("available")) {
      avail=true;
    }
    notifyShareAvailabilityChange(cooked[3],avail);
  }
 else   if ((code == VoldResponseCode.VolumeDiskInserted) || (code == VoldResponseCode.VolumeDiskRemoved) || (code == VoldResponseCode.VolumeBadRemoval)) {
    final String label=cooked[2];
    final String path=cooked[3];
    int major=-1;
    int minor=-1;
    try {
      String devComp=cooked[6].substring(1,cooked[6].length() - 1);
      String[] devTok=devComp.split(":");
      major=Integer.parseInt(devTok[0]);
      minor=Integer.parseInt(devTok[1]);
    }
 catch (    Exception ex) {
      Slog.e(TAG,"Failed to parse major/minor",ex);
    }
    if (code == VoldResponseCode.VolumeDiskInserted) {
      new Thread(){
        public void run(){
          try {
            int rc;
            if ((rc=doMountVolume(path)) != StorageResultCode.OperationSucceeded) {
              Slog.w(TAG,String.format("Insertion mount failed (%d)",rc));
            }
          }
 catch (          Exception ex) {
            Slog.w(TAG,"Failed to mount media on insertion",ex);
          }
        }
      }
.start();
    }
 else     if (code == VoldResponseCode.VolumeDiskRemoved) {
      if (getVolumeState(path).equals(Environment.MEDIA_BAD_REMOVAL)) {
        return true;
      }
      if (DEBUG_EVENTS)       Slog.i(TAG,"Sending unmounted event first");
      updatePublicVolumeState(path,Environment.MEDIA_UNMOUNTED);
      in=new Intent(Intent.ACTION_MEDIA_UNMOUNTED,Uri.parse("file://" + path));
      mContext.sendBroadcast(in);
      if (DEBUG_EVENTS)       Slog.i(TAG,"Sending media removed");
      updatePublicVolumeState(path,Environment.MEDIA_REMOVED);
      in=new Intent(Intent.ACTION_MEDIA_REMOVED,Uri.parse("file://" + path));
    }
 else     if (code == VoldResponseCode.VolumeBadRemoval) {
      if (DEBUG_EVENTS)       Slog.i(TAG,"Sending unmounted event first");
      updatePublicVolumeState(path,Environment.MEDIA_UNMOUNTED);
      in=new Intent(Intent.ACTION_MEDIA_UNMOUNTED,Uri.parse("file://" + path));
      mContext.sendBroadcast(in);
      if (DEBUG_EVENTS)       Slog.i(TAG,"Sending media bad removal");
      updatePublicVolumeState(path,Environment.MEDIA_BAD_REMOVAL);
      in=new Intent(Intent.ACTION_MEDIA_BAD_REMOVAL,Uri.parse("file://" + path));
    }
 else {
      Slog.e(TAG,String.format("Unknown code {%d}",code));
    }
  }
 else {
    return false;
  }
  if (in != null) {
    mContext.sendBroadcast(in);
  }
  return true;
}
