{
  String vs=getVolumeState(path);
  Intent in=null;
  if (newState == VolumeState.Init) {
  }
 else   if (newState == VolumeState.NoMedia) {
  }
 else   if (newState == VolumeState.Idle) {
    if (!vs.equals(Environment.MEDIA_BAD_REMOVAL) && !vs.equals(Environment.MEDIA_NOFS) && !vs.equals(Environment.MEDIA_UNMOUNTABLE)&& !getUmsEnabling()) {
      updatePublicVolumeState(path,Environment.MEDIA_UNMOUNTED);
      in=new Intent(Intent.ACTION_MEDIA_UNMOUNTED,Uri.parse("file://" + path));
    }
  }
 else   if (newState == VolumeState.Pending) {
  }
 else   if (newState == VolumeState.Checking) {
    updatePublicVolumeState(path,Environment.MEDIA_CHECKING);
    in=new Intent(Intent.ACTION_MEDIA_CHECKING,Uri.parse("file://" + path));
  }
 else   if (newState == VolumeState.Mounted) {
    updatePublicVolumeState(path,Environment.MEDIA_MOUNTED);
    mPms.updateExternalMediaStatus(true);
    in=new Intent(Intent.ACTION_MEDIA_MOUNTED,Uri.parse("file://" + path));
    in.putExtra("read-only",false);
  }
 else   if (newState == VolumeState.Unmounting) {
    mPms.updateExternalMediaStatus(false);
    in=new Intent(Intent.ACTION_MEDIA_EJECT,Uri.parse("file://" + path));
  }
 else   if (newState == VolumeState.Formatting) {
  }
 else   if (newState == VolumeState.Shared) {
    updatePublicVolumeState(path,Environment.MEDIA_UNMOUNTED);
    in=new Intent(Intent.ACTION_MEDIA_UNMOUNTED,Uri.parse("file://" + path));
    mContext.sendBroadcast(in);
    updatePublicVolumeState(path,Environment.MEDIA_SHARED);
    in=new Intent(Intent.ACTION_MEDIA_SHARED,Uri.parse("file://" + path));
  }
 else   if (newState == VolumeState.SharedMnt) {
    Log.e(TAG,"Live shared mounts not supported yet!");
    return;
  }
 else {
    Log.e(TAG,"Unhandled VolumeState {" + newState + "}");
  }
  if (in != null) {
    mContext.sendBroadcast(in);
  }
}
