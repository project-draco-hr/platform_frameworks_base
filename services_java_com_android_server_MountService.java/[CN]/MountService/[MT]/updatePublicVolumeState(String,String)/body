{
  if (!path.equals(Environment.getExternalStorageDirectory().getPath())) {
    Slog.w(TAG,"Multiple volumes not currently supported");
    return;
  }
  if (mLegacyState.equals(state)) {
    Slog.w(TAG,String.format("Duplicate state transition (%s -> %s)",mLegacyState,state));
    return;
  }
  if (Environment.MEDIA_UNMOUNTED.equals(state)) {
    mPms.updateExternalMediaStatus(false,false);
  }
 else   if (Environment.MEDIA_MOUNTED.equals(state)) {
    mPms.updateExternalMediaStatus(true,false);
  }
synchronized (mObbMounts) {
    final List<ObbState> obbStatesToRemove=new LinkedList<ObbState>();
    final Iterator<Entry<String,ObbState>> i=mObbPathToStateMap.entrySet().iterator();
    while (i.hasNext()) {
      final Entry<String,ObbState> obbEntry=i.next();
      if (obbEntry.getKey().startsWith(path)) {
        obbStatesToRemove.add(obbEntry.getValue());
      }
    }
    for (    final ObbState obbState : obbStatesToRemove) {
      removeObbState(obbState);
      try {
        obbState.token.onObbResult(obbState.filename,Environment.MEDIA_UNMOUNTED);
      }
 catch (      RemoteException e) {
        Slog.i(TAG,"Couldn't send unmount notification for  OBB: " + obbState.filename);
      }
    }
  }
  String oldState=mLegacyState;
  mLegacyState=state;
synchronized (mListeners) {
    for (int i=mListeners.size() - 1; i >= 0; i--) {
      MountServiceBinderListener bl=mListeners.get(i);
      try {
        bl.mListener.onStorageStateChanged(path,oldState,state);
      }
 catch (      RemoteException rex) {
        Slog.e(TAG,"Listener dead");
        mListeners.remove(i);
      }
catch (      Exception ex) {
        Slog.e(TAG,"Listener failed",ex);
      }
    }
  }
}
