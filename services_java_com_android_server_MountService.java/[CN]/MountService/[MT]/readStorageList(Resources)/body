{
  int id=com.android.internal.R.xml.storage_list;
  XmlResourceParser parser=resources.getXml(id);
  AttributeSet attrs=Xml.asAttributeSet(parser);
  try {
    XmlUtils.beginDocument(parser,TAG_STORAGE_LIST);
    while (true) {
      XmlUtils.nextElement(parser);
      String element=parser.getName();
      if (element == null)       break;
      if (TAG_STORAGE.equals(element)) {
        TypedArray a=resources.obtainAttributes(attrs,com.android.internal.R.styleable.Storage);
        CharSequence path=a.getText(com.android.internal.R.styleable.Storage_mountPoint);
        CharSequence description=a.getText(com.android.internal.R.styleable.Storage_storageDescription);
        boolean primary=a.getBoolean(com.android.internal.R.styleable.Storage_primary,false);
        boolean removable=a.getBoolean(com.android.internal.R.styleable.Storage_removable,false);
        boolean emulated=a.getBoolean(com.android.internal.R.styleable.Storage_emulated,false);
        int mtpReserve=a.getInt(com.android.internal.R.styleable.Storage_mtpReserve,0);
        Slog.d(TAG,"got storage path: " + path + " description: "+ description+ " primary: "+ primary+ " removable: "+ removable+ " emulated: "+ emulated+ " mtpReserve: "+ mtpReserve);
        if (path == null || description == null) {
          Slog.e(TAG,"path or description is null in readStorageList");
        }
 else {
          StorageVolume volume=new StorageVolume(path.toString(),description.toString(),removable,emulated,mtpReserve);
          if (primary) {
            if (mPrimaryVolume == null) {
              mPrimaryVolume=volume;
            }
 else {
              Slog.e(TAG,"multiple primary volumes in storage list");
            }
          }
          if (mPrimaryVolume == volume) {
            mVolumes.add(0,volume);
          }
 else {
            mVolumes.add(volume);
          }
        }
        a.recycle();
      }
    }
  }
 catch (  XmlPullParserException e) {
    throw new RuntimeException(e);
  }
catch (  IOException e) {
    throw new RuntimeException(e);
  }
 finally {
    int length=mVolumes.size();
    for (int i=0; i < length; i++) {
      mVolumes.get(i).setStorageId(i);
    }
    parser.close();
  }
}
