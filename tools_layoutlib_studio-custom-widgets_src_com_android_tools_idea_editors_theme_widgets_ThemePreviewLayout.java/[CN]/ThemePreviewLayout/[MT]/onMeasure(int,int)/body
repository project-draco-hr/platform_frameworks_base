{
  int wSize=MeasureSpec.getSize(widthMeasureSpec) - mPaddingLeft - mPaddingRight;
  int childWidthSpec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
  int childHeightSpec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
  int itemWidth=0;
  int itemHeight=0;
  for (int i=0; i < getChildCount(); i++) {
    View v=getChildAt(i);
    if (v.getVisibility() == GONE) {
      continue;
    }
    measureChild(v,childWidthSpec,childHeightSpec);
    itemWidth=Math.max(itemWidth,v.getMeasuredWidth());
    itemHeight=Math.max(itemHeight,v.getMeasuredHeight());
  }
  itemWidth=Math.min(Math.max(itemWidth,mMinColumnWidth),mMaxColumnWidth);
  mNumColumns=Math.min((int)Math.ceil((double)wSize / itemWidth),mMaxColumns);
  int wSizeNeeded=mNumColumns * itemWidth + (mNumColumns - 1) * mItemHorizontalMargin;
  if (wSizeNeeded > wSize && mNumColumns > 1) {
    mNumColumns--;
  }
  if (getChildCount() < mNumColumns) {
    mNumColumns=getChildCount();
  }
  if (mNumColumns == 0) {
    mNumColumns=1;
  }
  childWidthSpec=MeasureSpec.makeMeasureSpec(itemWidth,MeasureSpec.EXACTLY);
  childHeightSpec=MeasureSpec.makeMeasureSpec(itemHeight,MeasureSpec.EXACTLY);
  for (int i=0; i < getChildCount(); i++) {
    View v=getChildAt(i);
    if (v.getVisibility() == GONE) {
      continue;
    }
    measureChild(v,childWidthSpec,childHeightSpec);
  }
  int firstColumnItems=getChildCount() / mNumColumns + ((getChildCount() % mNumColumns) > 0 ? 1 : 0);
  int horizontalMarginsTotalWidth=(mNumColumns - 1) * mItemHorizontalMargin;
  int verticalMarginsTotalHeight=(firstColumnItems - 1) * mItemVerticalMargin;
  int totalWidth=mNumColumns * itemWidth + horizontalMarginsTotalWidth + mPaddingRight + mPaddingLeft;
  int totalHeight=firstColumnItems * itemHeight + verticalMarginsTotalHeight + mPaddingBottom + mPaddingTop;
  setMeasuredDimension(resolveSize(totalWidth,widthMeasureSpec),resolveSize(totalHeight,heightMeasureSpec));
  mItemWidth=itemWidth;
  mItemHeight=itemHeight;
}
