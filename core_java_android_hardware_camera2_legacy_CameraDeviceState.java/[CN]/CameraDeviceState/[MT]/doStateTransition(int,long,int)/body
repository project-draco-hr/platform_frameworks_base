{
  if (newState != mCurrentState) {
    String stateName="UNKNOWN";
    if (newState >= 0 && newState < sStateNames.length) {
      stateName=sStateNames[newState];
    }
    Log.i(TAG,"Legacy camera service transitioning to state " + stateName);
  }
  if (newState != STATE_ERROR && newState != STATE_IDLE) {
    if (mCurrentState != newState && mCurrentHandler != null && mCurrentListener != null) {
      mCurrentHandler.post(new Runnable(){
        @Override public void run(){
          mCurrentListener.onBusy();
        }
      }
);
    }
  }
switch (newState) {
case STATE_ERROR:
    if (mCurrentState != STATE_ERROR && mCurrentHandler != null && mCurrentListener != null) {
      mCurrentHandler.post(new Runnable(){
        @Override public void run(){
          mCurrentListener.onError(mCurrentError,null,mCurrentRequest);
        }
      }
);
    }
  mCurrentState=STATE_ERROR;
break;
case STATE_CONFIGURING:
if (mCurrentState != STATE_UNCONFIGURED && mCurrentState != STATE_IDLE) {
Log.e(TAG,"Cannot call configure while in state: " + mCurrentState);
mCurrentError=CameraDeviceImpl.CameraDeviceCallbacks.ERROR_CAMERA_DEVICE;
doStateTransition(STATE_ERROR);
break;
}
if (mCurrentState != STATE_CONFIGURING && mCurrentHandler != null && mCurrentListener != null) {
mCurrentHandler.post(new Runnable(){
@Override public void run(){
  mCurrentListener.onConfiguring();
}
}
);
}
mCurrentState=STATE_CONFIGURING;
break;
case STATE_IDLE:
if (mCurrentState == STATE_IDLE) {
break;
}
if (mCurrentState != STATE_CONFIGURING && mCurrentState != STATE_CAPTURING) {
Log.e(TAG,"Cannot call idle while in state: " + mCurrentState);
mCurrentError=CameraDeviceImpl.CameraDeviceCallbacks.ERROR_CAMERA_DEVICE;
doStateTransition(STATE_ERROR);
break;
}
if (mCurrentState != STATE_IDLE && mCurrentHandler != null && mCurrentListener != null) {
mCurrentHandler.post(new Runnable(){
@Override public void run(){
mCurrentListener.onIdle();
}
}
);
}
mCurrentState=STATE_IDLE;
break;
case STATE_CAPTURING:
if (mCurrentState != STATE_IDLE && mCurrentState != STATE_CAPTURING) {
Log.e(TAG,"Cannot call capture while in state: " + mCurrentState);
mCurrentError=CameraDeviceImpl.CameraDeviceCallbacks.ERROR_CAMERA_DEVICE;
doStateTransition(STATE_ERROR);
break;
}
if (mCurrentHandler != null && mCurrentListener != null) {
if (error != NO_CAPTURE_ERROR) {
mCurrentHandler.post(new Runnable(){
@Override public void run(){
mCurrentListener.onError(error,null,mCurrentRequest);
}
}
);
}
 else {
mCurrentHandler.post(new Runnable(){
@Override public void run(){
mCurrentListener.onCaptureStarted(mCurrentRequest,timestamp);
}
}
);
}
}
mCurrentState=STATE_CAPTURING;
break;
default :
throw new IllegalStateException("Transition to unknown state: " + newState);
}
}
