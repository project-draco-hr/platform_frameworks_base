{
  if (DEBUG) {
    if (newState != mCurrentState) {
      Log.d(TAG,"Transitioning to state " + newState);
    }
  }
switch (newState) {
case STATE_ERROR:
    if (mCurrentState != STATE_ERROR && mCurrentHandler != null && mCurrentListener != null) {
      mCurrentHandler.post(new Runnable(){
        @Override public void run(){
          mCurrentListener.onError(mCurrentError,mCurrentRequest);
        }
      }
);
    }
  mCurrentState=STATE_ERROR;
break;
case STATE_CONFIGURING:
if (mCurrentState != STATE_UNCONFIGURED && mCurrentState != STATE_IDLE) {
Log.e(TAG,"Cannot call configure while in state: " + mCurrentState);
mCurrentError=CameraBinderDecorator.INVALID_OPERATION;
doStateTransition(STATE_ERROR);
break;
}
if (mCurrentState != STATE_CONFIGURING && mCurrentHandler != null && mCurrentListener != null) {
mCurrentHandler.post(new Runnable(){
@Override public void run(){
  mCurrentListener.onConfiguring();
}
}
);
}
mCurrentState=STATE_CONFIGURING;
break;
case STATE_IDLE:
if (mCurrentState == STATE_IDLE) {
break;
}
if (mCurrentState != STATE_CONFIGURING && mCurrentState != STATE_CAPTURING) {
Log.e(TAG,"Cannot call idle while in state: " + mCurrentState);
mCurrentError=CameraBinderDecorator.INVALID_OPERATION;
doStateTransition(STATE_ERROR);
break;
}
if (mCurrentState != STATE_IDLE && mCurrentHandler != null && mCurrentListener != null) {
mCurrentHandler.post(new Runnable(){
@Override public void run(){
mCurrentListener.onIdle();
}
}
);
}
mCurrentState=STATE_IDLE;
break;
case STATE_CAPTURING:
if (mCurrentState != STATE_IDLE && mCurrentState != STATE_CAPTURING) {
Log.e(TAG,"Cannot call capture while in state: " + mCurrentState);
mCurrentError=CameraBinderDecorator.INVALID_OPERATION;
doStateTransition(STATE_ERROR);
break;
}
if (mCurrentHandler != null && mCurrentListener != null) {
mCurrentHandler.post(new Runnable(){
@Override public void run(){
mCurrentListener.onCaptureStarted(mCurrentRequest,timestamp);
}
}
);
}
mCurrentState=STATE_CAPTURING;
break;
default :
throw new IllegalStateException("Transition to unknown state: " + newState);
}
}
