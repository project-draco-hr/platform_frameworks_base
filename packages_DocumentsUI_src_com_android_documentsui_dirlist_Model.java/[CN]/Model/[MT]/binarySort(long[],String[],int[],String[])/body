{
  final int count=positions.length;
  for (int start=1; start < count; start++) {
    final int pivotPosition=positions[start];
    final long pivotValue=sortKey[start];
    final String pivotMime=mimeTypes[start];
    final String pivotId=ids[start];
    int left=0;
    int right=start;
    while (left < right) {
      int mid=((left + right) >>> 1);
      int compare=0;
      final boolean lhsIsDir=Document.MIME_TYPE_DIR.equals(pivotMime);
      final boolean rhsIsDir=Document.MIME_TYPE_DIR.equals(mimeTypes[mid]);
      if (lhsIsDir && !rhsIsDir) {
        compare=-1;
      }
 else       if (!lhsIsDir && rhsIsDir) {
        compare=1;
      }
 else {
        final long lhs=pivotValue;
        final long rhs=sortKey[mid];
        compare=-Long.compare(lhs,rhs);
      }
      if (compare == 0) {
        compare=pivotId.compareTo(ids[mid]);
      }
      if (compare < 0) {
        right=mid;
      }
 else {
        left=mid + 1;
      }
    }
    int n=start - left;
switch (n) {
case 2:
      positions[left + 2]=positions[left + 1];
    sortKey[left + 2]=sortKey[left + 1];
  mimeTypes[left + 2]=mimeTypes[left + 1];
ids[left + 2]=ids[left + 1];
case 1:
positions[left + 1]=positions[left];
sortKey[left + 1]=sortKey[left];
mimeTypes[left + 1]=mimeTypes[left];
ids[left + 1]=ids[left];
break;
default :
System.arraycopy(positions,left,positions,left + 1,n);
System.arraycopy(sortKey,left,sortKey,left + 1,n);
System.arraycopy(mimeTypes,left,mimeTypes,left + 1,n);
System.arraycopy(ids,left,ids,left + 1,n);
}
positions[left]=pivotPosition;
sortKey[left]=pivotValue;
mimeTypes[left]=pivotMime;
ids[left]=pivotId;
}
}
