{
  int type;
  while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
  }
  if (type != XmlPullParser.START_TAG) {
    throw new PackageParserException(INSTALL_PARSE_FAILED_MANIFEST_MALFORMED,"No start tag found");
  }
  if (!parser.getName().equals("manifest")) {
    throw new PackageParserException(INSTALL_PARSE_FAILED_MANIFEST_MALFORMED,"No <manifest> tag");
  }
  final String packageName=attrs.getAttributeValue(null,"package");
  if (!"android".equals(packageName)) {
    final String error=validateName(packageName,true,true);
    if (error != null) {
      throw new PackageParserException(INSTALL_PARSE_FAILED_BAD_PACKAGE_NAME,"Invalid manifest package: " + error);
    }
  }
  String splitName=attrs.getAttributeValue(null,"split");
  if (splitName != null) {
    if (splitName.length() == 0) {
      splitName=null;
    }
 else {
      final String error=validateName(splitName,false,false);
      if (error != null) {
        throw new PackageParserException(INSTALL_PARSE_FAILED_BAD_PACKAGE_NAME,"Invalid manifest split: " + error);
      }
    }
  }
  return Pair.create(packageName.intern(),(splitName != null) ? splitName.intern() : splitName);
}
