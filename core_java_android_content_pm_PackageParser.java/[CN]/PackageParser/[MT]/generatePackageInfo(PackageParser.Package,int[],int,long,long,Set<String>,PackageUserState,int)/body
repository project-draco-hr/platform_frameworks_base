{
  if (!checkUseInstalledOrHidden(flags,state) || !p.isMatch(flags)) {
    return null;
  }
  PackageInfo pi=new PackageInfo();
  pi.packageName=p.packageName;
  pi.splitNames=p.splitNames;
  pi.versionCode=p.mVersionCode;
  pi.baseRevisionCode=p.baseRevisionCode;
  pi.splitRevisionCodes=p.splitRevisionCodes;
  pi.versionName=p.mVersionName;
  pi.sharedUserId=p.mSharedUserId;
  pi.sharedUserLabel=p.mSharedUserLabel;
  pi.applicationInfo=generateApplicationInfo(p,flags,state,userId);
  pi.installLocation=p.installLocation;
  pi.coreApp=p.coreApp;
  if ((pi.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0 || (pi.applicationInfo.flags & ApplicationInfo.FLAG_UPDATED_SYSTEM_APP) != 0) {
    pi.requiredForAllUsers=p.mRequiredForAllUsers;
  }
  pi.restrictedAccountType=p.mRestrictedAccountType;
  pi.requiredAccountType=p.mRequiredAccountType;
  pi.overlayTarget=p.mOverlayTarget;
  pi.firstInstallTime=firstInstallTime;
  pi.lastUpdateTime=lastUpdateTime;
  if ((flags & PackageManager.GET_GIDS) != 0) {
    pi.gids=gids;
  }
  if ((flags & PackageManager.GET_CONFIGURATIONS) != 0) {
    int N=p.configPreferences != null ? p.configPreferences.size() : 0;
    if (N > 0) {
      pi.configPreferences=new ConfigurationInfo[N];
      p.configPreferences.toArray(pi.configPreferences);
    }
    N=p.reqFeatures != null ? p.reqFeatures.size() : 0;
    if (N > 0) {
      pi.reqFeatures=new FeatureInfo[N];
      p.reqFeatures.toArray(pi.reqFeatures);
    }
    N=p.featureGroups != null ? p.featureGroups.size() : 0;
    if (N > 0) {
      pi.featureGroups=new FeatureGroupInfo[N];
      p.featureGroups.toArray(pi.featureGroups);
    }
  }
  if ((flags & PackageManager.GET_ACTIVITIES) != 0) {
    final int N=p.activities.size();
    if (N > 0) {
      int num=0;
      final ActivityInfo[] res=new ActivityInfo[N];
      for (int i=0; i < N; i++) {
        final Activity a=p.activities.get(i);
        if (state.isMatch(a.info,flags)) {
          res[num++]=generateActivityInfo(a,flags,state,userId);
        }
      }
      pi.activities=ArrayUtils.trimToSize(res,num);
    }
  }
  if ((flags & PackageManager.GET_RECEIVERS) != 0) {
    final int N=p.receivers.size();
    if (N > 0) {
      int num=0;
      final ActivityInfo[] res=new ActivityInfo[N];
      for (int i=0; i < N; i++) {
        final Activity a=p.receivers.get(i);
        if (state.isMatch(a.info,flags)) {
          res[num++]=generateActivityInfo(a,flags,state,userId);
        }
      }
      pi.receivers=ArrayUtils.trimToSize(res,num);
    }
  }
  if ((flags & PackageManager.GET_SERVICES) != 0) {
    final int N=p.services.size();
    if (N > 0) {
      int num=0;
      final ServiceInfo[] res=new ServiceInfo[N];
      for (int i=0; i < N; i++) {
        final Service s=p.services.get(i);
        if (state.isMatch(s.info,flags)) {
          res[num++]=generateServiceInfo(s,flags,state,userId);
        }
      }
      pi.services=ArrayUtils.trimToSize(res,num);
    }
  }
  if ((flags & PackageManager.GET_PROVIDERS) != 0) {
    final int N=p.providers.size();
    if (N > 0) {
      int num=0;
      final ProviderInfo[] res=new ProviderInfo[N];
      for (int i=0; i < N; i++) {
        final Provider pr=p.providers.get(i);
        if (state.isMatch(pr.info,flags)) {
          res[num++]=generateProviderInfo(pr,flags,state,userId);
        }
      }
      pi.providers=ArrayUtils.trimToSize(res,num);
    }
  }
  if ((flags & PackageManager.GET_INSTRUMENTATION) != 0) {
    int N=p.instrumentation.size();
    if (N > 0) {
      pi.instrumentation=new InstrumentationInfo[N];
      for (int i=0; i < N; i++) {
        pi.instrumentation[i]=generateInstrumentationInfo(p.instrumentation.get(i),flags);
      }
    }
  }
  if ((flags & PackageManager.GET_PERMISSIONS) != 0) {
    int N=p.permissions.size();
    if (N > 0) {
      pi.permissions=new PermissionInfo[N];
      for (int i=0; i < N; i++) {
        pi.permissions[i]=generatePermissionInfo(p.permissions.get(i),flags);
      }
    }
    N=p.requestedPermissions.size();
    if (N > 0) {
      pi.requestedPermissions=new String[N];
      pi.requestedPermissionsFlags=new int[N];
      for (int i=0; i < N; i++) {
        final String perm=p.requestedPermissions.get(i);
        pi.requestedPermissions[i]=perm;
        pi.requestedPermissionsFlags[i]|=PackageInfo.REQUESTED_PERMISSION_REQUIRED;
        if (grantedPermissions != null && grantedPermissions.contains(perm)) {
          pi.requestedPermissionsFlags[i]|=PackageInfo.REQUESTED_PERMISSION_GRANTED;
        }
      }
    }
  }
  if ((flags & PackageManager.GET_SIGNATURES) != 0) {
    int N=(p.mSignatures != null) ? p.mSignatures.length : 0;
    if (N > 0) {
      pi.signatures=new Signature[N];
      System.arraycopy(p.mSignatures,0,pi.signatures,0,N);
    }
  }
  return pi;
}
