{
  final String splitName;
  final String pkgName;
  try {
    Pair<String,String> packageSplit=parsePackageSplitNames(parser,parser);
    pkgName=packageSplit.first;
    splitName=packageSplit.second;
    if (!TextUtils.isEmpty(splitName)) {
      outError[0]="Expected base APK, but found split " + splitName;
      mParseError=PackageManager.INSTALL_PARSE_FAILED_BAD_PACKAGE_NAME;
      return null;
    }
  }
 catch (  PackageParserException e) {
    mParseError=PackageManager.INSTALL_PARSE_FAILED_BAD_PACKAGE_NAME;
    return null;
  }
  final Package pkg=new Package(pkgName);
  TypedArray sa=res.obtainAttributes(parser,com.android.internal.R.styleable.AndroidManifest);
  pkg.mVersionCode=pkg.applicationInfo.versionCode=sa.getInteger(com.android.internal.R.styleable.AndroidManifest_versionCode,0);
  pkg.baseRevisionCode=sa.getInteger(com.android.internal.R.styleable.AndroidManifest_revisionCode,0);
  pkg.mVersionName=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifest_versionName,0);
  if (pkg.mVersionName != null) {
    pkg.mVersionName=pkg.mVersionName.intern();
  }
  pkg.coreApp=parser.getAttributeBooleanValue(null,"coreApp",false);
  sa.recycle();
  return parseBaseApkCommon(pkg,null,res,parser,flags,outError);
}
