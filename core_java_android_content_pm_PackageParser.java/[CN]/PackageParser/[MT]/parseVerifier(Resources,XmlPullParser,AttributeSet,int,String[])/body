{
  final TypedArray sa=res.obtainAttributes(attrs,com.android.internal.R.styleable.AndroidManifestPackageVerifier);
  final String packageName=sa.getNonResourceString(com.android.internal.R.styleable.AndroidManifestPackageVerifier_name);
  final String encodedPublicKey=sa.getNonResourceString(com.android.internal.R.styleable.AndroidManifestPackageVerifier_publicKey);
  sa.recycle();
  if (packageName == null || packageName.length() == 0) {
    Slog.i(TAG,"verifier package name was null; skipping");
    return null;
  }
 else   if (encodedPublicKey == null) {
    Slog.i(TAG,"verifier " + packageName + " public key was null; skipping");
  }
  EncodedKeySpec keySpec;
  try {
    final byte[] encoded=Base64.decode(encodedPublicKey,Base64.DEFAULT);
    keySpec=new X509EncodedKeySpec(encoded);
  }
 catch (  IllegalArgumentException e) {
    Slog.i(TAG,"Could not parse verifier " + packageName + " public key; invalid Base64");
    return null;
  }
  try {
    final KeyFactory keyFactory=KeyFactory.getInstance("RSA");
    final PublicKey publicKey=keyFactory.generatePublic(keySpec);
    return new VerifierInfo(packageName,publicKey);
  }
 catch (  NoSuchAlgorithmException e) {
    Log.wtf(TAG,"Could not parse public key because RSA isn't included in build");
    return null;
  }
catch (  InvalidKeySpecException e) {
  }
  try {
    final KeyFactory keyFactory=KeyFactory.getInstance("DSA");
    final PublicKey publicKey=keyFactory.generatePublic(keySpec);
    return new VerifierInfo(packageName,publicKey);
  }
 catch (  NoSuchAlgorithmException e) {
    Log.wtf(TAG,"Could not parse public key because DSA isn't included in build");
    return null;
  }
catch (  InvalidKeySpecException e) {
  }
  return null;
}
