{
  TypedArray sa=res.obtainAttributes(attrs,com.android.internal.R.styleable.AndroidManifestIntentFilter);
  int priority=sa.getInt(com.android.internal.R.styleable.AndroidManifestIntentFilter_priority,0);
  outInfo.setPriority(priority);
  TypedValue v=sa.peekValue(com.android.internal.R.styleable.AndroidManifestIntentFilter_label);
  if (v != null && (outInfo.labelRes=v.resourceId) == 0) {
    outInfo.nonLocalizedLabel=v.coerceToString();
  }
  outInfo.icon=sa.getResourceId(com.android.internal.R.styleable.AndroidManifestIntentFilter_icon,0);
  outInfo.logo=sa.getResourceId(com.android.internal.R.styleable.AndroidManifestIntentFilter_logo,0);
  sa.recycle();
  int outerDepth=parser.getDepth();
  int type;
  while ((type=parser.next()) != parser.END_DOCUMENT && (type != parser.END_TAG || parser.getDepth() > outerDepth)) {
    if (type == parser.END_TAG || type == parser.TEXT) {
      continue;
    }
    String nodeName=parser.getName();
    if (nodeName.equals("action")) {
      String value=attrs.getAttributeValue(ANDROID_RESOURCES,"name");
      if (value == null || value == "") {
        outError[0]="No value supplied for <android:name>";
        return false;
      }
      XmlUtils.skipCurrentTag(parser);
      outInfo.addAction(value);
    }
 else     if (nodeName.equals("category")) {
      String value=attrs.getAttributeValue(ANDROID_RESOURCES,"name");
      if (value == null || value == "") {
        outError[0]="No value supplied for <android:name>";
        return false;
      }
      XmlUtils.skipCurrentTag(parser);
      outInfo.addCategory(value);
    }
 else     if (nodeName.equals("data")) {
      sa=res.obtainAttributes(attrs,com.android.internal.R.styleable.AndroidManifestData);
      String str=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestData_mimeType,0);
      if (str != null) {
        try {
          outInfo.addDataType(str);
        }
 catch (        IntentFilter.MalformedMimeTypeException e) {
          outError[0]=e.toString();
          sa.recycle();
          return false;
        }
      }
      str=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestData_scheme,0);
      if (str != null) {
        outInfo.addDataScheme(str);
      }
      String host=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestData_host,0);
      String port=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestData_port,0);
      if (host != null) {
        outInfo.addDataAuthority(host,port);
      }
      str=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestData_path,0);
      if (str != null) {
        outInfo.addDataPath(str,PatternMatcher.PATTERN_LITERAL);
      }
      str=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestData_pathPrefix,0);
      if (str != null) {
        outInfo.addDataPath(str,PatternMatcher.PATTERN_PREFIX);
      }
      str=sa.getNonConfigurationString(com.android.internal.R.styleable.AndroidManifestData_pathPattern,0);
      if (str != null) {
        outInfo.addDataPath(str,PatternMatcher.PATTERN_SIMPLE_GLOB);
      }
      sa.recycle();
      XmlUtils.skipCurrentTag(parser);
    }
 else     if (!RIGID_PARSER) {
      Log.w(TAG,"Unknown element under <intent-filter>: " + parser.getName() + " at "+ mArchiveSourcePath+ " "+ parser.getPositionDescription());
      XmlUtils.skipCurrentTag(parser);
    }
 else {
      outError[0]="Bad element under <intent-filter>: " + parser.getName();
      return false;
    }
  }
  outInfo.hasDefault=outInfo.hasCategory(Intent.CATEGORY_DEFAULT);
  if (false) {
    String cats="";
    Iterator<String> it=outInfo.categoriesIterator();
    while (it != null && it.hasNext()) {
      cats+=" " + it.next();
    }
    System.out.println("Intent d=" + outInfo.hasDefault + ", cat="+ cats);
  }
  return true;
}
