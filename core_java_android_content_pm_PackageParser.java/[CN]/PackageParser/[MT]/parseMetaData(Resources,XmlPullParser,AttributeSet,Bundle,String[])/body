{
  TypedArray sa=res.obtainAttributes(attrs,com.android.internal.R.styleable.AndroidManifestMetaData);
  if (data == null) {
    data=new Bundle();
  }
  String name=sa.getNonResourceString(com.android.internal.R.styleable.AndroidManifestMetaData_name);
  if (name == null) {
    outError[0]="<meta-data> requires an android:name attribute";
    sa.recycle();
    return null;
  }
  boolean success=true;
  TypedValue v=sa.peekValue(com.android.internal.R.styleable.AndroidManifestMetaData_resource);
  if (v != null && v.resourceId != 0) {
    data.putInt(name,v.resourceId);
  }
 else {
    v=sa.peekValue(com.android.internal.R.styleable.AndroidManifestMetaData_value);
    if (v != null) {
      if (v.type == TypedValue.TYPE_STRING) {
        CharSequence cs=v.coerceToString();
        data.putString(name,cs != null ? cs.toString() : null);
      }
 else       if (v.type == TypedValue.TYPE_INT_BOOLEAN) {
        data.putBoolean(name,v.data != 0);
      }
 else       if (v.type >= TypedValue.TYPE_FIRST_INT && v.type <= TypedValue.TYPE_LAST_INT) {
        data.putInt(name,v.data);
      }
 else       if (v.type == TypedValue.TYPE_FLOAT) {
        data.putFloat(name,v.getFloat());
      }
 else {
        if (!RIGID_PARSER) {
          Log.w(TAG,"Problem in package " + mArchiveSourcePath + ":");
          Log.w(TAG,"<meta-data> only supports string, integer, float, color, boolean, and resource reference types");
        }
 else {
          outError[0]="<meta-data> only supports string, integer, float, color, boolean, and resource reference types";
          data=null;
        }
      }
    }
 else {
      outError[0]="<meta-data> requires an android:value or android:resource attribute";
      data=null;
    }
  }
  sa.recycle();
  XmlUtils.skipCurrentTag(parser);
  return data;
}
