{
  final Pair<String,String> packageSplit=parsePackageSplitNames(parser,attrs,flags);
  int installLocation=PARSE_DEFAULT_INSTALL_LOCATION;
  int versionCode=0;
  int revisionCode=0;
  boolean coreApp=false;
  boolean multiArch=false;
  String abiOverride=null;
  boolean extractNativeLibs=true;
  for (int i=0; i < attrs.getAttributeCount(); i++) {
    final String attr=attrs.getAttributeName(i);
    if (attr.equals("installLocation")) {
      installLocation=attrs.getAttributeIntValue(i,PARSE_DEFAULT_INSTALL_LOCATION);
    }
 else     if (attr.equals("versionCode")) {
      versionCode=attrs.getAttributeIntValue(i,0);
    }
 else     if (attr.equals("revisionCode")) {
      revisionCode=attrs.getAttributeIntValue(i,0);
    }
 else     if (attr.equals("coreApp")) {
      coreApp=attrs.getAttributeBooleanValue(i,false);
    }
  }
  int type;
  final int searchDepth=parser.getDepth() + 1;
  final List<VerifierInfo> verifiers=new ArrayList<VerifierInfo>();
  while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() >= searchDepth)) {
    if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
      continue;
    }
    if (parser.getDepth() == searchDepth && "package-verifier".equals(parser.getName())) {
      final VerifierInfo verifier=parseVerifier(res,parser,attrs,flags);
      if (verifier != null) {
        verifiers.add(verifier);
      }
    }
    if (parser.getDepth() == searchDepth && "application".equals(parser.getName())) {
      for (int i=0; i < attrs.getAttributeCount(); ++i) {
        final String attr=attrs.getAttributeName(i);
        if ("multiArch".equals(attr)) {
          multiArch=attrs.getAttributeBooleanValue(i,false);
        }
        if ("abiOverride".equals(attr)) {
          abiOverride=attrs.getAttributeValue(i);
        }
        if ("extractNativeLibs".equals(attr)) {
          extractNativeLibs=attrs.getAttributeBooleanValue(i,true);
        }
      }
    }
  }
  return new ApkLite(codePath,packageSplit.first,packageSplit.second,versionCode,revisionCode,installLocation,verifiers,signatures,coreApp,multiArch,abiOverride,extractNativeLibs);
}
