{
  AttributeSet attrs=parser;
  mParseInstrumentationArgs=null;
  mParseActivityArgs=null;
  mParseServiceArgs=null;
  mParseProviderArgs=null;
  int type;
  boolean foundApp=false;
  int outerDepth=parser.getDepth();
  while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
    if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
      continue;
    }
    String tagName=parser.getName();
    if (tagName.equals("application")) {
      if (foundApp) {
        if (RIGID_PARSER) {
          outError[0]="<manifest> has more than one <application>";
          mParseError=PackageManager.INSTALL_PARSE_FAILED_MANIFEST_MALFORMED;
          return null;
        }
 else {
          Slog.w(TAG,"<manifest> has more than one <application>");
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
      }
      foundApp=true;
      if (!parseSplitApplication(pkg,res,parser,attrs,flags,splitIndex,outError)) {
        return null;
      }
    }
 else     if (RIGID_PARSER) {
      outError[0]="Bad element under <manifest>: " + parser.getName();
      mParseError=PackageManager.INSTALL_PARSE_FAILED_MANIFEST_MALFORMED;
      return null;
    }
 else {
      Slog.w(TAG,"Unknown element under <manifest>: " + parser.getName() + " at "+ mArchiveSourcePath+ " "+ parser.getPositionDescription());
      XmlUtils.skipCurrentTag(parser);
      continue;
    }
  }
  if (!foundApp) {
    outError[0]="<manifest> does not contain an <application>";
    mParseError=PackageManager.INSTALL_PARSE_FAILED_MANIFEST_EMPTY;
  }
  return pkg;
}
