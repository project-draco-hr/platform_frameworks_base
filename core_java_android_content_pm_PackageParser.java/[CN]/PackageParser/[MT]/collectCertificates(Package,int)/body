{
  pkg.mSignatures=null;
  WeakReference<byte[]> readBufferRef;
  byte[] readBuffer=null;
synchronized (mSync) {
    readBufferRef=mReadBuffer;
    if (readBufferRef != null) {
      mReadBuffer=null;
      readBuffer=readBufferRef.get();
    }
    if (readBuffer == null) {
      readBuffer=new byte[8192];
      readBufferRef=new WeakReference<byte[]>(readBuffer);
    }
  }
  try {
    JarFile jarFile=new JarFile(mArchiveSourcePath);
    Certificate[] certs=null;
    if ((flags & PARSE_IS_SYSTEM) != 0) {
      JarEntry jarEntry=jarFile.getJarEntry("AndroidManifest.xml");
      certs=loadCertificates(jarFile,jarEntry,readBuffer);
      if (certs == null) {
        Slog.e(TAG,"Package " + pkg.packageName + " has no certificates at entry "+ jarEntry.getName()+ "; ignoring!");
        jarFile.close();
        mParseError=PackageManager.INSTALL_PARSE_FAILED_NO_CERTIFICATES;
        return false;
      }
      if (DEBUG_JAR) {
        Slog.i(TAG,"File " + mArchiveSourcePath + ": entry="+ jarEntry+ " certs="+ (certs != null ? certs.length : 0));
        if (certs != null) {
          final int N=certs.length;
          for (int i=0; i < N; i++) {
            Slog.i(TAG,"  Public key: " + certs[i].getPublicKey().getEncoded() + " "+ certs[i].getPublicKey());
          }
        }
      }
    }
 else {
      Enumeration<JarEntry> entries=jarFile.entries();
      while (entries.hasMoreElements()) {
        final JarEntry je=entries.nextElement();
        if (je.isDirectory())         continue;
        if (je.getName().startsWith("META-INF/"))         continue;
        final Certificate[] localCerts=loadCertificates(jarFile,je,readBuffer);
        if (DEBUG_JAR) {
          Slog.i(TAG,"File " + mArchiveSourcePath + " entry "+ je.getName()+ ": certs="+ certs+ " ("+ (certs != null ? certs.length : 0)+ ")");
        }
        if (localCerts == null) {
          Slog.e(TAG,"Package " + pkg.packageName + " has no certificates at entry "+ je.getName()+ "; ignoring!");
          jarFile.close();
          mParseError=PackageManager.INSTALL_PARSE_FAILED_NO_CERTIFICATES;
          return false;
        }
 else         if (certs == null) {
          certs=localCerts;
        }
 else {
          for (int i=0; i < certs.length; i++) {
            boolean found=false;
            for (int j=0; j < localCerts.length; j++) {
              if (certs[i] != null && certs[i].equals(localCerts[j])) {
                found=true;
                break;
              }
            }
            if (!found || certs.length != localCerts.length) {
              Slog.e(TAG,"Package " + pkg.packageName + " has mismatched certificates at entry "+ je.getName()+ "; ignoring!");
              jarFile.close();
              mParseError=PackageManager.INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES;
              return false;
            }
          }
        }
      }
    }
    jarFile.close();
synchronized (mSync) {
      mReadBuffer=readBufferRef;
    }
    if (certs != null && certs.length > 0) {
      final int N=certs.length;
      pkg.mSignatures=new Signature[certs.length];
      for (int i=0; i < N; i++) {
        pkg.mSignatures[i]=new Signature(certs[i].getEncoded());
      }
    }
 else {
      Slog.e(TAG,"Package " + pkg.packageName + " has no certificates; ignoring!");
      mParseError=PackageManager.INSTALL_PARSE_FAILED_NO_CERTIFICATES;
      return false;
    }
  }
 catch (  CertificateEncodingException e) {
    Slog.w(TAG,"Exception reading " + mArchiveSourcePath,e);
    mParseError=PackageManager.INSTALL_PARSE_FAILED_CERTIFICATE_ENCODING;
    return false;
  }
catch (  IOException e) {
    Slog.w(TAG,"Exception reading " + mArchiveSourcePath,e);
    mParseError=PackageManager.INSTALL_PARSE_FAILED_CERTIFICATE_ENCODING;
    return false;
  }
catch (  RuntimeException e) {
    Slog.w(TAG,"Exception reading " + mArchiveSourcePath,e);
    mParseError=PackageManager.INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION;
    return false;
  }
  return true;
}
