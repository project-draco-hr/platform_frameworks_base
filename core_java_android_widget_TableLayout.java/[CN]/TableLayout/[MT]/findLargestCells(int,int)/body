{
  boolean firstRow=true;
  final int count=getChildCount();
  for (int i=0; i < count; i++) {
    final View child=getChildAt(i);
    if (child.getVisibility() == GONE) {
      continue;
    }
    if (child instanceof TableRow) {
      final TableRow row=(TableRow)child;
      final ViewGroup.LayoutParams layoutParams=row.getLayoutParams();
      layoutParams.height=LayoutParams.WRAP_CONTENT;
      final int[] widths=row.getColumnsWidths(widthMeasureSpec,heightMeasureSpec);
      final int newLength=widths.length;
      if (firstRow) {
        if (mMaxWidths == null || mMaxWidths.length != newLength) {
          mMaxWidths=new int[newLength];
        }
        System.arraycopy(widths,0,mMaxWidths,0,newLength);
        firstRow=false;
      }
 else {
        int length=mMaxWidths.length;
        final int difference=newLength - length;
        if (difference > 0) {
          final int[] oldMaxWidths=mMaxWidths;
          mMaxWidths=new int[newLength];
          System.arraycopy(oldMaxWidths,0,mMaxWidths,0,oldMaxWidths.length);
          System.arraycopy(widths,oldMaxWidths.length,mMaxWidths,oldMaxWidths.length,difference);
        }
        final int[] maxWidths=mMaxWidths;
        length=Math.min(length,newLength);
        for (int j=0; j < length; j++) {
          maxWidths[j]=Math.max(maxWidths[j],widths[j]);
        }
      }
    }
  }
}
