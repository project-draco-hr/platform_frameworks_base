{
  try {
    int bytesRead=0, dataLength=0;
    boolean eosReached=false;
    int needBytes, offset, bytesInBuffer=0;
    byte byteOut[]=null;
    int intOut[]=null;
    for (; ; ) {
      needBytes=BUFFER_SIZE - bytesInBuffer;
      offset=bytesInBuffer;
      bytesRead=inputStream.read(buffer,offset,needBytes);
      if (bytesRead < 0) {
        bytesRead=0;
        eosReached=true;
      }
      bytesInBuffer+=bytesRead;
      Object arr=decode(buffer,bytesInBuffer,hNativeDecoder);
      bytesInBuffer-=bytesConsumed;
      if (!headerDone && imageWidth != -1) {
        returnHeader();
        headerDone=true;
      }
      if (bytesConsumed < 0) {
        break;
      }
      if (arr instanceof byte[]) {
        byteOut=(byte[])arr;
        dataLength=byteOut.length;
        returnData(byteOut,currScanline);
      }
 else       if (arr instanceof int[]) {
        intOut=(int[])arr;
        dataLength=intOut.length;
        returnData(intOut,currScanline);
      }
 else {
        dataLength=0;
      }
      if (hNativeDecoder == 0) {
        break;
      }
      if (dataLength == 0 && eosReached) {
        releaseNativeDecoder(hNativeDecoder);
        break;
      }
    }
    imageComplete(ImageConsumer.STATICIMAGEDONE);
  }
 catch (  IOException e) {
    throw e;
  }
 finally {
    closeStream();
  }
}
