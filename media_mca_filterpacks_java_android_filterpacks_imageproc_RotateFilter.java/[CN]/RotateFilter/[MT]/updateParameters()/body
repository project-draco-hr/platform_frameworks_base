{
  float sinTheta;
  float cosTheta;
  if (mAngle % 90 == 0) {
    if (mAngle % 180 == 0) {
      sinTheta=0f;
      cosTheta=(mAngle % 360 == 0) ? 1f : -1f;
    }
 else {
      cosTheta=0f;
      sinTheta=((mAngle + 90) % 360 == 0) ? -1f : 1f;
      mOutputWidth=mHeight;
      mOutputHeight=mWidth;
    }
  }
 else {
    throw new RuntimeException("degree has to be multiply of 90.");
  }
  Point x0=new Point(0.5f * (-cosTheta + sinTheta + 1f),0.5f * (-sinTheta - cosTheta + 1f));
  Point x1=new Point(0.5f * (cosTheta + sinTheta + 1f),0.5f * (sinTheta - cosTheta + 1f));
  Point x2=new Point(0.5f * (-cosTheta - sinTheta + 1f),0.5f * (-sinTheta + cosTheta + 1f));
  Point x3=new Point(0.5f * (cosTheta - sinTheta + 1f),0.5f * (sinTheta + cosTheta + 1f));
  Quad quad=new Quad(x0,x1,x2,x3);
  ((ShaderProgram)mProgram).setTargetRegion(quad);
}
