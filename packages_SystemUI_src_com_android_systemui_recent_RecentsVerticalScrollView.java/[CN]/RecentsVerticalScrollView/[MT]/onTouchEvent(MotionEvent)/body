{
  if (!mDragging) {
    return super.onTouchEvent(ev);
  }
  mVelocityTracker.addMovement(ev);
  final View animView=mCurrentView;
  final View thumb=animView.findViewById(R.id.app_thumbnail);
switch (ev.getAction()) {
case MotionEvent.ACTION_MOVE:
    if (animView != null) {
      final float delta=ev.getX() - mLastX;
      animView.setX(animView.getX() + delta);
      animView.setAlpha(getAlphaForOffset(animView,thumb.getWidth()));
      invalidateGlobalRegion(animView);
    }
  mLastX=ev.getX();
break;
case MotionEvent.ACTION_UP:
final ObjectAnimator anim;
if (animView != null) {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,10000);
final float velocityX=velocityTracker.getXVelocity();
final float velocityY=velocityTracker.getYVelocity();
final float curX=animView.getX();
final float newX=(velocityX >= 0.0f ? 1 : -1) * animView.getWidth();
if (Math.abs(velocityX) > Math.abs(velocityY) && Math.abs(velocityX) > ESCAPE_VELOCITY && (velocityX > 0.0f) == (animView.getX() >= 0)) {
final long duration=(long)(Math.abs(newX - curX) * 1000.0f / Math.abs(velocityX));
anim=ObjectAnimator.ofFloat(animView,"x",curX,newX);
anim.setInterpolator(new LinearInterpolator());
final int swipeDirection=animView.getX() >= 0.0f ? RecentsCallback.SWIPE_RIGHT : RecentsCallback.SWIPE_LEFT;
anim.addListener(new AnimatorListener(){
  public void onAnimationStart(  Animator animation){
  }
  public void onAnimationRepeat(  Animator animation){
  }
  public void onAnimationEnd(  Animator animation){
    mLinearLayout.removeView(mCurrentView);
    mCallback.handleSwipe(animView,swipeDirection);
  }
  public void onAnimationCancel(  Animator animation){
    mLinearLayout.removeView(mCurrentView);
    mCallback.handleSwipe(animView,swipeDirection);
  }
}
);
anim.setDuration(duration);
}
 else {
final long duration=Math.abs(velocityX) > 0.0f ? (long)(Math.abs(newX - curX) * 1000.0f / Math.abs(velocityX)) : SNAP_BACK_DURATION;
anim=ObjectAnimator.ofFloat(animView,"x",animView.getX(),0.0f);
anim.setInterpolator(new DecelerateInterpolator(4.0f));
anim.setDuration(duration);
}
anim.addUpdateListener(new AnimatorUpdateListener(){
public void onAnimationUpdate(ValueAnimator animation){
  animView.setAlpha(getAlphaForOffset(animView,thumb.getWidth()));
  invalidateGlobalRegion(animView);
}
}
);
anim.start();
}
mVelocityTracker.recycle();
mVelocityTracker=null;
break;
}
return true;
}
