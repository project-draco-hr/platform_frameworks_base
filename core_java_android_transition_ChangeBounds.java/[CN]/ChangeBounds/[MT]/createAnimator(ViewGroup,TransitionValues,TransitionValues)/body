{
  if (startValues == null || endValues == null) {
    return null;
  }
  Map<String,Object> startParentVals=startValues.values;
  Map<String,Object> endParentVals=endValues.values;
  ViewGroup startParent=(ViewGroup)startParentVals.get(PROPNAME_PARENT);
  ViewGroup endParent=(ViewGroup)endParentVals.get(PROPNAME_PARENT);
  if (startParent == null || endParent == null) {
    return null;
  }
  final View view=endValues.view;
  if (parentMatches(startParent,endParent)) {
    Rect startBounds=(Rect)startValues.values.get(PROPNAME_BOUNDS);
    Rect endBounds=(Rect)endValues.values.get(PROPNAME_BOUNDS);
    int startLeft=startBounds.left;
    int endLeft=endBounds.left;
    int startTop=startBounds.top;
    int endTop=endBounds.top;
    int startRight=startBounds.right;
    int endRight=endBounds.right;
    int startBottom=startBounds.bottom;
    int endBottom=endBounds.bottom;
    int startWidth=startRight - startLeft;
    int startHeight=startBottom - startTop;
    int endWidth=endRight - endLeft;
    int endHeight=endBottom - endTop;
    int numChanges=0;
    if ((startWidth != 0 && startHeight != 0) || (endWidth != 0 && endHeight != 0)) {
      if (startLeft != endLeft || startTop != endTop)       ++numChanges;
      if (startRight != endRight || startBottom != endBottom)       ++numChanges;
    }
    if (numChanges > 0) {
      if (!mResizeClip) {
        if (startLeft != endLeft)         view.setLeft(startLeft);
        if (startTop != endTop)         view.setTop(startTop);
        if (startRight != endRight)         view.setRight(startRight);
        if (startBottom != endBottom)         view.setBottom(startBottom);
        ObjectAnimator topLeftAnimator=null;
        if (startLeft != endLeft || startTop != endTop) {
          Path topLeftPath=getPathMotion().getPath(startLeft,startTop,endLeft,endTop);
          topLeftAnimator=ObjectAnimator.ofInt(view,"left","top",topLeftPath);
        }
        ObjectAnimator bottomRightAnimator=null;
        if (startRight != endRight || startBottom != endBottom) {
          Path bottomRightPath=getPathMotion().getPath(startRight,startBottom,endRight,endBottom);
          bottomRightAnimator=ObjectAnimator.ofInt(view,"right","bottom",bottomRightPath);
        }
        Animator anim=TransitionUtils.mergeAnimators(topLeftAnimator,bottomRightAnimator);
        if (view.getParent() instanceof ViewGroup) {
          final ViewGroup parent=(ViewGroup)view.getParent();
          parent.suppressLayout(true);
          TransitionListener transitionListener=new TransitionListenerAdapter(){
            boolean mCanceled=false;
            @Override public void onTransitionCancel(            Transition transition){
              parent.suppressLayout(false);
              mCanceled=true;
            }
            @Override public void onTransitionEnd(            Transition transition){
              if (!mCanceled) {
                parent.suppressLayout(false);
              }
            }
            @Override public void onTransitionPause(            Transition transition){
              parent.suppressLayout(false);
            }
            @Override public void onTransitionResume(            Transition transition){
              parent.suppressLayout(true);
            }
          }
;
          addListener(transitionListener);
        }
        return anim;
      }
 else {
        if (startWidth != endWidth)         view.setRight(endLeft + Math.max(startWidth,endWidth));
        if (startHeight != endHeight)         view.setBottom(endTop + Math.max(startHeight,endHeight));
        if (startLeft != endLeft)         view.setTranslationX(startLeft - endLeft);
        if (startTop != endTop)         view.setTranslationY(startTop - endTop);
        float transXDelta=endLeft - startLeft;
        float transYDelta=endTop - startTop;
        int widthDelta=endWidth - startWidth;
        int heightDelta=endHeight - startHeight;
        numChanges=0;
        if (transXDelta != 0)         numChanges++;
        if (transYDelta != 0)         numChanges++;
        if (widthDelta != 0 || heightDelta != 0)         numChanges++;
        ObjectAnimator translationAnimator=null;
        if (transXDelta != 0 || transYDelta != 0) {
          Path topLeftPath=getPathMotion().getPath(0,0,transXDelta,transYDelta);
          translationAnimator=ObjectAnimator.ofFloat(view,View.TRANSLATION_X,View.TRANSLATION_Y,topLeftPath);
        }
        ObjectAnimator clipAnimator=null;
        if (widthDelta != 0 || heightDelta != 0) {
          Rect tempStartBounds=new Rect(0,0,startWidth,startHeight);
          Rect tempEndBounds=new Rect(0,0,endWidth,endHeight);
          clipAnimator=ObjectAnimator.ofObject(view,"clipBounds",sRectEvaluator,tempStartBounds,tempEndBounds);
        }
        Animator anim=TransitionUtils.mergeAnimators(translationAnimator,clipAnimator);
        if (view.getParent() instanceof ViewGroup) {
          final ViewGroup parent=(ViewGroup)view.getParent();
          parent.suppressLayout(true);
          TransitionListener transitionListener=new TransitionListenerAdapter(){
            boolean mCanceled=false;
            @Override public void onTransitionCancel(            Transition transition){
              parent.suppressLayout(false);
              mCanceled=true;
            }
            @Override public void onTransitionEnd(            Transition transition){
              if (!mCanceled) {
                parent.suppressLayout(false);
              }
            }
            @Override public void onTransitionPause(            Transition transition){
              parent.suppressLayout(false);
            }
            @Override public void onTransitionResume(            Transition transition){
              parent.suppressLayout(true);
            }
          }
;
          addListener(transitionListener);
        }
        anim.addListener(new AnimatorListenerAdapter(){
          @Override public void onAnimationEnd(          Animator animation){
            view.setClipBounds(null);
          }
        }
);
        return anim;
      }
    }
  }
 else {
    int startX=(Integer)startValues.values.get(PROPNAME_WINDOW_X);
    int startY=(Integer)startValues.values.get(PROPNAME_WINDOW_Y);
    int endX=(Integer)endValues.values.get(PROPNAME_WINDOW_X);
    int endY=(Integer)endValues.values.get(PROPNAME_WINDOW_Y);
    if (startX != endX || startY != endY) {
      sceneRoot.getLocationInWindow(tempLocation);
      Bitmap bitmap=Bitmap.createBitmap(view.getWidth(),view.getHeight(),Bitmap.Config.ARGB_8888);
      Canvas canvas=new Canvas(bitmap);
      view.draw(canvas);
      final BitmapDrawable drawable=new BitmapDrawable(bitmap);
      final float transitionAlpha=view.getTransitionAlpha();
      view.setTransitionAlpha(0);
      sceneRoot.getOverlay().add(drawable);
      Path topLeftPath=getPathMotion().getPath(startX - tempLocation[0],startY - tempLocation[1],endX - tempLocation[0],endY - tempLocation[1]);
      PropertyValuesHolder origin=PropertyValuesHolder.ofObject(DRAWABLE_ORIGIN_PROPERTY,null,topLeftPath);
      ObjectAnimator anim=ObjectAnimator.ofPropertyValuesHolder(drawable,origin);
      anim.addListener(new AnimatorListenerAdapter(){
        @Override public void onAnimationEnd(        Animator animation){
          sceneRoot.getOverlay().remove(drawable);
          view.setTransitionAlpha(transitionAlpha);
        }
      }
);
      return anim;
    }
  }
  return null;
}
