{
  boolean printedHeader=false;
  int printedScreen=-1;
  for (int is=0; is < screenStates.length; is++) {
    int printedMem=-1;
    for (int im=0; im < memStates.length; im++) {
      for (int ip=0; ip < procStates.length; ip++) {
        final int iscreen=screenStates[is];
        final int imem=memStates[im];
        final int bucket=((iscreen + imem) * STATE_COUNT) + procStates[ip];
        long count=proc.getPssSampleCount(bucket);
        if (count > 0) {
          if (!printedHeader) {
            pw.print(prefix);
            pw.print("PSS (");
            pw.print(proc.mPssTableSize);
            pw.println(" entrues):");
            printedHeader=true;
          }
          pw.print(prefix);
          pw.print("  ");
          if (screenStates.length > 1) {
            printScreenLabel(pw,printedScreen != iscreen ? iscreen : STATE_NOTHING);
            printedScreen=iscreen;
          }
          if (memStates.length > 1) {
            printMemLabel(pw,printedMem != imem ? imem : STATE_NOTHING);
            printedMem=imem;
          }
          pw.print(STATE_NAMES[procStates[ip]]);
          pw.print(": ");
          pw.print(count);
          pw.print(" samples ");
          pw.print(proc.getPssMinimum(bucket));
          pw.print("kB ");
          pw.print(proc.getPssAverage(bucket));
          pw.print("kB ");
          pw.print(proc.getPssMaximum(bucket));
          pw.println("kB");
        }
      }
    }
  }
}
