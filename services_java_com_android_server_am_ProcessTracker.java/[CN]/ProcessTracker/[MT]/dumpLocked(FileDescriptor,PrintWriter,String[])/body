{
  final long now=SystemClock.uptimeMillis();
  ArrayMap<String,SparseArray<ProcessState>> pmap=mState.mProcesses.getMap();
  for (int ip=0; ip < pmap.size(); ip++) {
    String procName=pmap.keyAt(ip);
    SparseArray<ProcessState> procs=pmap.valueAt(ip);
    for (int iu=0; iu < procs.size(); iu++) {
      int uid=procs.keyAt(iu);
      ProcessState state=procs.valueAt(iu);
      pw.print("  ");
      pw.print(procName);
      pw.print(" / ");
      pw.print(uid);
      pw.println(":");
      long totalTime=0;
      for (int is=0; is < STATE_NAMES.length; is++) {
        long time=state.mTimes[is];
        if (state.mCurState == is) {
          time+=now - state.mStartTime;
        }
        if (time != 0) {
          pw.print("    ");
          pw.print(STATE_NAMES[is]);
          pw.print(": ");
          TimeUtils.formatDuration(time,pw);
          pw.println();
          totalTime+=time;
        }
      }
      if (totalTime != 0) {
        pw.print("    TOTAL      : ");
        TimeUtils.formatDuration(totalTime,pw);
        pw.println();
      }
    }
  }
}
