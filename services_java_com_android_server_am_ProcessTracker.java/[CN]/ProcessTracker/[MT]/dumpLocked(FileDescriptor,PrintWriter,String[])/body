{
  final long now=SystemClock.uptimeMillis();
  ArrayMap<String,SparseArray<PackageState>> pmap=mState.mPackages.getMap();
  pw.println("Process Stats:");
  for (int ip=0; ip < pmap.size(); ip++) {
    String procName=pmap.keyAt(ip);
    SparseArray<PackageState> procs=pmap.valueAt(ip);
    for (int iu=0; iu < procs.size(); iu++) {
      int uid=procs.keyAt(iu);
      PackageState state=procs.valueAt(iu);
      pw.print("  ");
      pw.print(procName);
      pw.print(" / ");
      pw.print(uid);
      pw.println(":");
      for (int iproc=0; iproc < state.mProcesses.size(); iproc++) {
        pw.print("    Process ");
        pw.print(state.mProcesses.keyAt(iproc));
        pw.println(":");
        long totalTime=0;
        ProcessState proc=state.mProcesses.valueAt(iproc);
        int printedScreen=-1;
        for (int iscreen=0; iscreen < STATE_COUNT; iscreen+=STATE_SCREEN_ON_MOD) {
          int printedMem=-1;
          for (int imem=0; imem < STATE_MEM_FACTOR_COUNT; imem+=STATE_MEM_FACTOR_MOD) {
            for (int is=0; is < STATE_NAMES.length; is++) {
              int bucket=is + imem + iscreen;
              long time=proc.mDurations[bucket];
              String running="";
              if (proc.mCurState == bucket) {
                time+=now - proc.mStartTime;
                running=" (running)";
              }
              if (time != 0) {
                pw.print("      ");
                printScreenLabel(pw,printedScreen != iscreen ? iscreen : STATE_NOTHING);
                printedScreen=iscreen;
                printMemLabel(pw,printedMem != imem ? imem : STATE_NOTHING);
                printedMem=imem;
                pw.print(STATE_NAMES[is]);
                pw.print(": ");
                TimeUtils.formatDuration(time,pw);
                pw.println(running);
                totalTime+=time;
              }
            }
          }
        }
        if (totalTime != 0) {
          pw.print("      ");
          printScreenLabel(pw,STATE_NOTHING);
          printMemLabel(pw,STATE_NOTHING);
          pw.print("TOTAL      : ");
          TimeUtils.formatDuration(totalTime,pw);
          pw.println();
        }
      }
      for (int isvc=0; isvc < state.mServices.size(); isvc++) {
        pw.print("    Service ");
        pw.print(state.mServices.keyAt(isvc));
        pw.println(":");
        ServiceState svc=state.mServices.valueAt(isvc);
        long time=svc.mStartedDuration;
        if (svc.mStartedTime >= 0) {
          time+=now - svc.mStartedTime;
        }
        if (time != 0) {
          pw.print("    Started: ");
          TimeUtils.formatDuration(time,pw);
          pw.println();
        }
      }
    }
  }
  pw.println();
  pw.println("Run time Stats:");
  long totalTime=0;
  int printedScreen=-1;
  for (int iscreen=0; iscreen < STATE_COUNT; iscreen+=STATE_SCREEN_ON_MOD) {
    int printedMem=-1;
    for (int imem=0; imem < STATE_MEM_FACTOR_COUNT; imem+=STATE_MEM_FACTOR_MOD) {
      int bucket=imem + iscreen;
      long time=mState.mMemFactorDurations[bucket / STATE_MEM_FACTOR_MOD];
      String running="";
      if (mState.mMemFactor == bucket) {
        time+=now - mState.mStartTime;
        running=" (running)";
      }
      if (time != 0) {
        pw.print("  ");
        printScreenLabel(pw,printedScreen != iscreen ? iscreen : STATE_NOTHING);
        printedScreen=iscreen;
        printMemLabel(pw,printedMem != imem ? imem : STATE_NOTHING);
        printedMem=imem;
        TimeUtils.formatDuration(time,pw);
        pw.println(running);
        totalTime+=time;
      }
    }
  }
  if (totalTime != 0) {
    pw.print("  ");
    printScreenLabel(pw,STATE_NOTHING);
    pw.print("TOTAL: ");
    TimeUtils.formatDuration(totalTime,pw);
    pw.println();
  }
}
