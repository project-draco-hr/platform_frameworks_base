{
  final long now=SystemClock.uptimeMillis();
  boolean isCheckin=false;
  boolean isCompact=false;
  boolean isCsv=false;
  boolean currentOnly=false;
  boolean dumpDetails=false;
  boolean dumpAll=false;
  String reqPackage=null;
  boolean csvSepScreenStats=false;
  int[] csvScreenStats=new int[]{ADJ_SCREEN_OFF,ADJ_SCREEN_ON};
  boolean csvSepMemStats=false;
  int[] csvMemStats=new int[]{ADJ_MEM_FACTOR_CRITICAL};
  boolean csvSepProcStats=true;
  int[] csvProcStats=ALL_PROC_STATES;
  if (args != null) {
    for (int i=0; i < args.length; i++) {
      String arg=args[i];
      if ("--checkin".equals(arg)) {
        isCheckin=true;
      }
 else       if ("-c".equals(arg)) {
        isCompact=true;
      }
 else       if ("--csv".equals(arg)) {
        isCsv=true;
      }
 else       if ("--csv-screen".equals(arg)) {
        i++;
        if (i >= args.length) {
          pw.println("Error: argument required for --csv-screen");
          dumpHelp(pw);
          return;
        }
        boolean[] sep=new boolean[1];
        String[] error=new String[1];
        csvScreenStats=parseStateList(ADJ_SCREEN_NAMES_CSV,ADJ_SCREEN_MOD,args[i],sep,error);
        if (csvScreenStats == null) {
          pw.println("Error in \"" + args[i] + "\": "+ error[0]);
          dumpHelp(pw);
          return;
        }
        csvSepScreenStats=sep[0];
      }
 else       if ("--csv-mem".equals(arg)) {
        i++;
        if (i >= args.length) {
          pw.println("Error: argument required for --csv-mem");
          dumpHelp(pw);
          return;
        }
        boolean[] sep=new boolean[1];
        String[] error=new String[1];
        csvMemStats=parseStateList(ADJ_MEM_NAMES_CSV,1,args[i],sep,error);
        if (csvMemStats == null) {
          pw.println("Error in \"" + args[i] + "\": "+ error[0]);
          dumpHelp(pw);
          return;
        }
        csvSepMemStats=sep[0];
      }
 else       if ("--csv-proc".equals(arg)) {
        i++;
        if (i >= args.length) {
          pw.println("Error: argument required for --csv-proc");
          dumpHelp(pw);
          return;
        }
        boolean[] sep=new boolean[1];
        String[] error=new String[1];
        csvProcStats=parseStateList(STATE_NAMES_CSV,1,args[i],sep,error);
        if (csvProcStats == null) {
          pw.println("Error in \"" + args[i] + "\": "+ error[0]);
          dumpHelp(pw);
          return;
        }
        csvSepProcStats=sep[0];
      }
 else       if ("--details".equals(arg)) {
        dumpDetails=true;
      }
 else       if ("--current".equals(arg)) {
        currentOnly=true;
      }
 else       if ("--commit".equals(arg)) {
        mState.mFlags|=State.FLAG_COMPLETE;
        mState.writeStateLocked(true,true);
        pw.println("Process stats committed.");
        return;
      }
 else       if ("--write".equals(arg)) {
        writeStateSyncLocked();
        pw.println("Process stats written.");
        return;
      }
 else       if ("--read".equals(arg)) {
        readLocked();
        pw.println("Process stats read.");
        return;
      }
 else       if ("-h".equals(arg)) {
        dumpHelp(pw);
        return;
      }
 else       if ("-a".equals(arg)) {
        dumpDetails=true;
        dumpAll=true;
      }
 else       if (arg.length() > 0 && arg.charAt(0) == '-') {
        pw.println("Unknown option: " + arg);
        dumpHelp(pw);
        return;
      }
 else {
        try {
          IPackageManager pm=AppGlobals.getPackageManager();
          if (pm.getPackageUid(arg,UserHandle.getCallingUserId()) >= 0) {
            reqPackage=arg;
            dumpDetails=true;
          }
        }
 catch (        RemoteException e) {
        }
        if (reqPackage == null) {
          pw.println("Unknown package: " + arg);
          dumpHelp(pw);
          return;
        }
      }
    }
  }
  if (isCsv) {
    pw.print("Processes running summed over");
    if (!csvSepScreenStats) {
      for (int i=0; i < csvScreenStats.length; i++) {
        pw.print(" ");
        printScreenLabelCsv(pw,csvScreenStats[i]);
      }
    }
    if (!csvSepMemStats) {
      for (int i=0; i < csvMemStats.length; i++) {
        pw.print(" ");
        printMemLabelCsv(pw,csvMemStats[i]);
      }
    }
    if (!csvSepProcStats) {
      for (int i=0; i < csvProcStats.length; i++) {
        pw.print(" ");
        pw.print(STATE_NAMES_CSV[csvProcStats[i]]);
      }
    }
    pw.println();
synchronized (mLock) {
      dumpFilteredProcessesCsvLocked(pw,null,csvSepScreenStats,csvScreenStats,csvSepMemStats,csvMemStats,csvSepProcStats,csvProcStats,now,reqPackage);
    }
    return;
  }
  boolean sepNeeded=false;
  if (!currentOnly || isCheckin) {
    mWriteLock.lock();
    try {
      ArrayList<String> files=getCommittedFiles(0,!isCheckin);
      if (files != null) {
        for (int i=0; i < files.size(); i++) {
          if (DEBUG)           Slog.d(TAG,"Retrieving state: " + files.get(i));
          try {
            State state=new State(files.get(i));
            if (state.mReadError != null) {
              pw.print("Failure reading ");
              pw.print(files.get(i));
              pw.print("; ");
              pw.println(state.mReadError);
              if (DEBUG)               Slog.d(TAG,"Deleting state: " + files.get(i));
              (new File(files.get(i))).delete();
              continue;
            }
            String fileStr=state.mFile.getBaseFile().getPath();
            boolean checkedIn=fileStr.endsWith(STATE_FILE_CHECKIN_SUFFIX);
            if (isCheckin || isCompact) {
              state.dumpCheckinLocked(pw,reqPackage);
            }
 else {
              if (sepNeeded) {
                pw.println();
              }
 else {
                sepNeeded=true;
              }
              pw.print("COMMITTED STATS FROM ");
              pw.print(state.mTimePeriodStartClockStr);
              if (checkedIn)               pw.print(" (checked in)");
              pw.println(":");
              if (dumpDetails) {
                state.dumpLocked(pw,reqPackage,now,dumpAll);
              }
 else {
                state.dumpSummaryLocked(pw,reqPackage,now);
              }
            }
            if (isCheckin) {
              state.mFile.getBaseFile().renameTo(new File(fileStr + STATE_FILE_CHECKIN_SUFFIX));
            }
          }
 catch (          Throwable e) {
            pw.print("**** FAILURE DUMPING STATE: ");
            pw.println(files.get(i));
            e.printStackTrace(pw);
          }
        }
      }
    }
  finally {
      mWriteLock.unlock();
    }
  }
  if (!isCheckin) {
synchronized (mLock) {
      if (isCompact) {
        mState.dumpCheckinLocked(pw,reqPackage);
      }
 else {
        if (sepNeeded) {
          pw.println();
          pw.println("CURRENT STATS:");
        }
        if (dumpDetails) {
          mState.dumpLocked(pw,reqPackage,now,dumpAll);
        }
 else {
          mState.dumpSummaryLocked(pw,reqPackage,now);
        }
      }
    }
  }
}
