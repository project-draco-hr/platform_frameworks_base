{
  ArrayList<ProcessState> outProcs=new ArrayList<ProcessState>();
  ArrayMap<String,SparseArray<PackageState>> pmap=mState.mPackages.getMap();
  for (int ip=0; ip < pmap.size(); ip++) {
    SparseArray<PackageState> procs=pmap.valueAt(ip);
    for (int iu=0; iu < procs.size(); iu++) {
      PackageState state=procs.valueAt(iu);
      for (int iproc=0; iproc < state.mProcesses.size(); iproc++) {
        if (computeProcessTimeLocked(state.mProcesses.valueAt(iproc),screenStates,memStates,procStates,now) > 0) {
          outProcs.add(state.mProcesses.valueAt(iproc));
        }
      }
    }
  }
  Collections.sort(outProcs,new Comparator<ProcessState>(){
    @Override public int compare(    ProcessState lhs,    ProcessState rhs){
      if (lhs.mTmpTotalTime < rhs.mTmpTotalTime) {
        return -1;
      }
 else       if (lhs.mTmpTotalTime > rhs.mTmpTotalTime) {
        return 1;
      }
      return 0;
    }
  }
);
  return outProcs;
}
