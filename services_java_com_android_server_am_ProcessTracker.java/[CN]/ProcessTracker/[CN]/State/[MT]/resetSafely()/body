{
  resetCommon();
  long now=SystemClock.uptimeMillis();
  ArrayMap<String,SparseArray<ProcessState>> procMap=mProcesses.getMap();
  final int NPROC=procMap.size();
  for (int ip=0; ip < NPROC; ip++) {
    SparseArray<ProcessState> uids=procMap.valueAt(ip);
    final int NUID=uids.size();
    for (int iu=0; iu < NUID; iu++) {
      uids.valueAt(iu).resetSafely(now);
    }
  }
  ArrayMap<String,SparseArray<PackageState>> pkgMap=mPackages.getMap();
  final int NPKG=pkgMap.size();
  for (int ip=0; ip < NPKG; ip++) {
    SparseArray<PackageState> uids=pkgMap.valueAt(ip);
    final int NUID=uids.size();
    for (int iu=0; iu < NUID; iu++) {
      PackageState pkgState=uids.valueAt(iu);
      final int NPROCS=pkgState.mProcesses.size();
      for (int iproc=0; iproc < NPROCS; iproc++) {
        pkgState.mProcesses.valueAt(iproc).resetSafely(now);
      }
      final int NSRVS=pkgState.mServices.size();
      for (int isvc=0; isvc < NSRVS; isvc++) {
        pkgState.mServices.valueAt(isvc).resetSafely(now);
      }
    }
  }
  mStartTime=SystemClock.uptimeMillis();
}
