{
  final long now=SystemClock.uptimeMillis();
  ArrayMap<String,SparseArray<PackageState>> pkgMap=mPackages.getMap();
  boolean printedHeader=false;
  for (int ip=0; ip < pkgMap.size(); ip++) {
    String pkgName=pkgMap.keyAt(ip);
    if (reqPackage != null && !reqPackage.equals(pkgName)) {
      continue;
    }
    SparseArray<PackageState> uids=pkgMap.valueAt(ip);
    for (int iu=0; iu < uids.size(); iu++) {
      int uid=uids.keyAt(iu);
      PackageState pkgState=uids.valueAt(iu);
      final int NPROCS=pkgState.mProcesses.size();
      final int NSRVS=pkgState.mServices.size();
      if (NPROCS > 0 || NSRVS > 0) {
        if (!printedHeader) {
          pw.println("Per-Package Process Stats:");
          printedHeader=true;
        }
        pw.print("  * ");
        pw.print(pkgName);
        pw.print(" / ");
        UserHandle.formatUid(pw,uid);
        pw.println(":");
      }
      for (int iproc=0; iproc < NPROCS; iproc++) {
        ProcessState proc=pkgState.mProcesses.valueAt(iproc);
        pw.print("      Process ");
        pw.print(pkgState.mProcesses.keyAt(iproc));
        pw.print(" (");
        pw.print(proc.mDurationsTableSize);
        pw.print(" entries)");
        pw.println(":");
        dumpProcessState(pw,"        ",proc,ALL_SCREEN_ADJ,ALL_MEM_ADJ,ALL_PROC_STATES,now);
        dumpProcessPss(pw,"        ",proc,ALL_SCREEN_ADJ,ALL_MEM_ADJ,ALL_PROC_STATES);
      }
      for (int isvc=0; isvc < NSRVS; isvc++) {
        pw.print("      Service ");
        pw.print(pkgState.mServices.keyAt(isvc));
        pw.println(":");
        ServiceState svc=pkgState.mServices.valueAt(isvc);
        if (svc.mStartedCount != 0) {
          pw.print("        Started op count ");
          pw.print(svc.mStartedCount);
          pw.println(":");
          dumpSingleTime(pw,"          ",svc.mStartedDurations,svc.mStartedState,svc.mStartedStartTime,now);
        }
        if (svc.mBoundCount != 0) {
          pw.print("        Bound op count ");
          pw.print(svc.mBoundCount);
          pw.println(":");
          dumpSingleTime(pw,"          ",svc.mBoundDurations,svc.mBoundState,svc.mBoundStartTime,now);
        }
        if (svc.mExecCount != 0) {
          pw.print("        Executing op count ");
          pw.print(svc.mExecCount);
          pw.println(":");
          dumpSingleTime(pw,"          ",svc.mExecDurations,svc.mExecState,svc.mExecStartTime,now);
        }
      }
    }
  }
  dumpFilteredProcesses(pw,"Processes running while critical mem:","  ",new int[]{ADJ_SCREEN_OFF,ADJ_SCREEN_ON},new int[]{ADJ_MEM_FACTOR_CRITICAL},new int[]{STATE_PERSISTENT,STATE_TOP,STATE_FOREGROUND,STATE_VISIBLE,STATE_PERCEPTIBLE,STATE_BACKUP,STATE_SERVICE,STATE_HOME,STATE_PREVIOUS},now,reqPackage);
  dumpFilteredProcesses(pw,"Processes running while low mem:","  ",new int[]{ADJ_SCREEN_OFF,ADJ_SCREEN_ON},new int[]{ADJ_MEM_FACTOR_LOW},new int[]{STATE_PERSISTENT,STATE_TOP,STATE_FOREGROUND,STATE_VISIBLE,STATE_PERCEPTIBLE,STATE_BACKUP,STATE_SERVICE,STATE_HOME,STATE_PREVIOUS},now,reqPackage);
  dumpFilteredProcesses(pw,"Processes running while moderate mem:","  ",new int[]{ADJ_SCREEN_OFF,ADJ_SCREEN_ON},new int[]{ADJ_MEM_FACTOR_MODERATE},new int[]{STATE_PERSISTENT,STATE_TOP,STATE_FOREGROUND,STATE_VISIBLE,STATE_PERCEPTIBLE,STATE_BACKUP,STATE_SERVICE,STATE_HOME,STATE_PREVIOUS},now,reqPackage);
  dumpFilteredProcesses(pw,"Processes running while normal mem:","  ",new int[]{ADJ_SCREEN_OFF,ADJ_SCREEN_ON},new int[]{ADJ_MEM_FACTOR_NORMAL},new int[]{STATE_PERSISTENT,STATE_TOP,STATE_FOREGROUND,STATE_VISIBLE,STATE_PERCEPTIBLE,STATE_BACKUP,STATE_SERVICE,STATE_HOME,STATE_PREVIOUS},now,reqPackage);
  pw.println();
  pw.println("Run time Stats:");
  dumpSingleTime(pw,"  ",mMemFactorDurations,mMemFactor,mStartTime,now);
  if (dumpAll) {
    pw.println();
    pw.println("Internal state:");
    pw.print("  Num long arrays: ");
    pw.println(mLongs.size());
    pw.print("  Next long entry: ");
    pw.println(mNextLong);
  }
}
