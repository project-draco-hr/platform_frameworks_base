{
  reset();
  if (!readCheckedInt(in,MAGIC,"magic number")) {
    return;
  }
  if (!readCheckedInt(in,PARCEL_VERSION,"version")) {
    return;
  }
  if (!readCheckedInt(in,STATE_COUNT,"state count")) {
    return;
  }
  if (!readCheckedInt(in,ADJ_COUNT,"adj count")) {
    return;
  }
  if (!readCheckedInt(in,PSS_COUNT,"pss count")) {
    return;
  }
  if (!readCheckedInt(in,LONGS_SIZE,"longs size")) {
    return;
  }
  mTimePeriodStart=in.readLong();
  mTimePeriodEnd=in.readLong();
  int NLONGS=in.readInt();
  int NEXTLONG=in.readInt();
  for (int i=0; i < (NLONGS - 1); i++) {
    while (i >= mLongs.size()) {
      mLongs.add(new long[LONGS_SIZE]);
    }
    in.readLongArray(mLongs.get(i));
  }
  long[] longs=new long[LONGS_SIZE];
  mNextLong=NEXTLONG;
  for (int i=0; i < NEXTLONG; i++) {
    longs[i]=in.readLong();
  }
  mLongs.add(longs);
  in.readLongArray(mMemFactorDurations);
  int NPROC=in.readInt();
  if (NPROC < 0) {
    Slog.w(TAG,"Ignoring existing stats; bad process count: " + NPROC);
    return;
  }
  while (NPROC > 0) {
    NPROC--;
    String procName=in.readString();
    if (procName == null) {
      Slog.w(TAG,"Ignoring existing stats; bad process name");
      return;
    }
    int NUID=in.readInt();
    if (NUID < 0) {
      Slog.w(TAG,"Ignoring existing stats; bad uid count: " + NUID);
      return;
    }
    while (NUID > 0) {
      NUID--;
      int uid=in.readInt();
      if (uid < 0) {
        Slog.w(TAG,"Ignoring existing stats; bad uid: " + uid);
        return;
      }
      String pkgName=in.readString();
      if (pkgName == null) {
        Slog.w(TAG,"Ignoring existing stats; bad process package name");
        return;
      }
      ProcessState proc=new ProcessState(this,pkgName,uid,procName);
      if (!proc.readFromParcel(in)) {
        return;
      }
      mProcesses.put(procName,uid,proc);
    }
  }
  int NPKG=in.readInt();
  if (NPKG < 0) {
    Slog.w(TAG,"Ignoring existing stats; bad package count: " + NPKG);
    return;
  }
  while (NPKG > 0) {
    NPKG--;
    String pkgName=in.readString();
    if (pkgName == null) {
      Slog.w(TAG,"Ignoring existing stats; bad package name");
      return;
    }
    int NUID=in.readInt();
    if (NUID < 0) {
      Slog.w(TAG,"Ignoring existing stats; bad uid count: " + NUID);
      return;
    }
    while (NUID > 0) {
      NUID--;
      int uid=in.readInt();
      if (uid < 0) {
        Slog.w(TAG,"Ignoring existing stats; bad uid: " + uid);
        return;
      }
      PackageState pkgState=new PackageState(uid);
      int NPROCS=in.readInt();
      if (NPROCS < 0) {
        Slog.w(TAG,"Ignoring existing stats; bad package process count: " + NPROCS);
        return;
      }
      while (NPROCS > 0) {
        NPROCS--;
        String procName=in.readString();
        if (procName == null) {
          Slog.w(TAG,"Ignoring existing stats; bad package process name");
          return;
        }
        int hasProc=in.readInt();
        if (hasProc != 0) {
          ProcessState commonProc=mProcesses.get(procName,uid);
          if (commonProc == null) {
            Slog.w(TAG,"Ignoring existing stats; no common proc: " + procName);
            return;
          }
          ProcessState proc=new ProcessState(commonProc,pkgName,uid,procName,0);
          if (!proc.readFromParcel(in)) {
            return;
          }
          pkgState.mProcesses.put(procName,proc);
        }
      }
      int NSRVS=in.readInt();
      if (NSRVS < 0) {
        Slog.w(TAG,"Ignoring existing stats; bad package service count: " + NSRVS);
        return;
      }
      while (NSRVS > 0) {
        NSRVS--;
        String serviceName=in.readString();
        if (serviceName == null) {
          Slog.w(TAG,"Ignoring existing stats; bad package service name");
          return;
        }
        ServiceState serv=new ServiceState();
        if (!serv.readFromParcel(in)) {
          return;
        }
        pkgState.mServices.put(serviceName,serv);
      }
    }
  }
}
