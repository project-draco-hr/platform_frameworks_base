{
  Context context=mContext;
  int combinedSignalIconId;
  int dataDirectionOverlayIconId=0, wifiActivityIconId=0, mobileActivityIconId=0;
  int dataTypeIconId;
  String label;
  int N;
  if (mWifiConnected) {
    if (mWifiSsid == null) {
      label=context.getString(R.string.status_bar_settings_signal_meter_wifi_nossid);
    }
 else {
      label=mWifiSsid;
switch (mWifiActivity) {
case WifiManager.DATA_ACTIVITY_IN:
        dataDirectionOverlayIconId=R.drawable.stat_sys_wifi_in;
      break;
case WifiManager.DATA_ACTIVITY_OUT:
    dataDirectionOverlayIconId=R.drawable.stat_sys_wifi_out;
  break;
case WifiManager.DATA_ACTIVITY_INOUT:
dataDirectionOverlayIconId=R.drawable.stat_sys_wifi_inout;
break;
case WifiManager.DATA_ACTIVITY_NONE:
break;
}
wifiActivityIconId=dataDirectionOverlayIconId;
}
combinedSignalIconId=mWifiIconId;
mContentDescriptionCombinedSignal=mContentDescriptionWifi;
dataTypeIconId=0;
}
 else if (mDataConnected) {
label=mNetworkName;
combinedSignalIconId=mDataSignalIconId;
switch (mDataActivity) {
case TelephonyManager.DATA_ACTIVITY_IN:
dataDirectionOverlayIconId=R.drawable.stat_sys_signal_in;
break;
case TelephonyManager.DATA_ACTIVITY_OUT:
dataDirectionOverlayIconId=R.drawable.stat_sys_signal_out;
break;
case TelephonyManager.DATA_ACTIVITY_INOUT:
dataDirectionOverlayIconId=R.drawable.stat_sys_signal_inout;
break;
default :
dataDirectionOverlayIconId=0;
break;
}
mobileActivityIconId=dataDirectionOverlayIconId;
combinedSignalIconId=mDataSignalIconId;
mContentDescriptionCombinedSignal=mContentDescriptionDataType;
dataTypeIconId=mDataTypeIconId;
}
 else if (mBluetoothTethered) {
label=mContext.getString(R.string.bluetooth_tethered);
combinedSignalIconId=mBluetoothTetherIconId;
mContentDescriptionCombinedSignal=mContext.getString(R.string.accessibility_bluetooth_tether);
dataTypeIconId=0;
}
 else if (mAirplaneMode && (mServiceState == null || (!hasService() && !mServiceState.isEmergencyOnly()))) {
label=context.getString(R.string.status_bar_settings_signal_meter_disconnected);
combinedSignalIconId=R.drawable.stat_sys_signal_flightmode;
mContentDescriptionCombinedSignal=mContext.getString(R.string.accessibility_airplane_mode);
dataTypeIconId=R.drawable.stat_sys_signal_flightmode;
}
 else {
label=context.getString(R.string.status_bar_settings_signal_meter_disconnected);
combinedSignalIconId=hasMobileDataFeature() ? mDataSignalIconId : mWifiIconId;
mContentDescriptionCombinedSignal=hasMobileDataFeature() ? mContentDescriptionDataType : mContentDescriptionWifi;
dataTypeIconId=0;
}
if (DEBUG) {
Slog.d(TAG,"refreshViews connected={" + (mWifiConnected ? " wifi" : "") + (mDataConnected ? " data" : "")+ " } level="+ ((mSignalStrength == null) ? "??" : Integer.toString(mSignalStrength.getLevel()))+ " combinedSignalIconId=0x"+ Integer.toHexString(combinedSignalIconId)+ "/"+ getResourceName(combinedSignalIconId)+ " dataDirectionOverlayIconId=0x"+ Integer.toHexString(dataDirectionOverlayIconId)+ " mAirplaneMode="+ mAirplaneMode+ " mDataActivity="+ mDataActivity+ " mPhoneSignalIconId=0x"+ Integer.toHexString(mPhoneSignalIconId)+ " mDataDirectionIconId=0x"+ Integer.toHexString(mDataDirectionIconId)+ " mDataSignalIconId=0x"+ Integer.toHexString(mDataSignalIconId)+ " mDataTypeIconId=0x"+ Integer.toHexString(mDataTypeIconId)+ " mWifiIconId=0x"+ Integer.toHexString(mWifiIconId)+ " mBluetoothTetherIconId=0x"+ Integer.toHexString(mBluetoothTetherIconId));
}
if (mLastPhoneSignalIconId != mPhoneSignalIconId || mLastDataDirectionOverlayIconId != dataDirectionOverlayIconId || mLastWifiIconId != mWifiIconId || mLastDataTypeIconId != dataTypeIconId) {
for (SignalCluster cluster : mSignalClusters) {
cluster.setWifiIndicators(mWifiEnabled,mWifiIconId,wifiActivityIconId);
cluster.setMobileDataIndicators(hasMobileDataFeature(),mPhoneSignalIconId,mobileActivityIconId,dataTypeIconId);
}
}
if (mLastPhoneSignalIconId != mPhoneSignalIconId) {
mLastPhoneSignalIconId=mPhoneSignalIconId;
N=mPhoneSignalIconViews.size();
for (int i=0; i < N; i++) {
final ImageView v=mPhoneSignalIconViews.get(i);
v.setImageResource(mPhoneSignalIconId);
v.setContentDescription(mContentDescriptionPhoneSignal);
}
}
if (mLastDataDirectionIconId != mDataDirectionIconId) {
mLastDataDirectionIconId=mDataDirectionIconId;
N=mDataDirectionIconViews.size();
for (int i=0; i < N; i++) {
final ImageView v=mDataDirectionIconViews.get(i);
v.setImageResource(mDataDirectionIconId);
v.setContentDescription(mContentDescriptionDataType);
}
}
if (mLastWifiIconId != mWifiIconId) {
mLastWifiIconId=mWifiIconId;
N=mWifiIconViews.size();
for (int i=0; i < N; i++) {
final ImageView v=mWifiIconViews.get(i);
if (mWifiIconId == 0) {
v.setVisibility(View.INVISIBLE);
}
 else {
v.setVisibility(View.VISIBLE);
v.setImageResource(mWifiIconId);
v.setContentDescription(mContentDescriptionWifi);
}
}
}
if (mLastCombinedSignalIconId != combinedSignalIconId) {
mLastCombinedSignalIconId=combinedSignalIconId;
N=mCombinedSignalIconViews.size();
for (int i=0; i < N; i++) {
final ImageView v=mCombinedSignalIconViews.get(i);
v.setImageResource(combinedSignalIconId);
v.setContentDescription(mContentDescriptionCombinedSignal);
}
}
if (mLastDataTypeIconId != dataTypeIconId) {
mLastDataTypeIconId=dataTypeIconId;
N=mDataTypeIconViews.size();
for (int i=0; i < N; i++) {
final ImageView v=mDataTypeIconViews.get(i);
if (dataTypeIconId == 0) {
v.setVisibility(View.INVISIBLE);
}
 else {
v.setVisibility(View.VISIBLE);
v.setImageResource(dataTypeIconId);
v.setContentDescription(mContentDescriptionDataType);
}
}
}
if (mLastDataDirectionOverlayIconId != dataDirectionOverlayIconId) {
if (DEBUG) {
Slog.d(TAG,"changing data overlay icon id to " + dataDirectionOverlayIconId);
}
mLastDataDirectionOverlayIconId=dataDirectionOverlayIconId;
N=mDataDirectionOverlayIconViews.size();
for (int i=0; i < N; i++) {
final ImageView v=mDataDirectionOverlayIconViews.get(i);
if (dataDirectionOverlayIconId == 0) {
v.setVisibility(View.INVISIBLE);
}
 else {
v.setVisibility(View.VISIBLE);
v.setImageResource(dataDirectionOverlayIconId);
v.setContentDescription(mContentDescriptionDataType);
}
}
}
if (!mLastLabel.equals(label)) {
mLastLabel=label;
N=mLabelViews.size();
for (int i=0; i < N; i++) {
TextView v=mLabelViews.get(i);
v.setText(label);
}
}
}
