{
  if (null == headers) {
    return false;
  }
  int messageType=headers.getOctet(PduHeaders.MESSAGE_TYPE);
  int mmsVersion=headers.getOctet(PduHeaders.MMS_VERSION);
  if (0 == mmsVersion) {
    return false;
  }
switch (messageType) {
case PduHeaders.MESSAGE_TYPE_SEND_REQ:
    byte[] srContentType=headers.getTextString(PduHeaders.CONTENT_TYPE);
  if (null == srContentType) {
    return false;
  }
EncodedStringValue srFrom=headers.getEncodedStringValue(PduHeaders.FROM);
if (null == srFrom) {
return false;
}
byte[] srTransactionId=headers.getTextString(PduHeaders.TRANSACTION_ID);
if (null == srTransactionId) {
return false;
}
break;
case PduHeaders.MESSAGE_TYPE_SEND_CONF:
int scResponseStatus=headers.getOctet(PduHeaders.RESPONSE_STATUS);
if (0 == scResponseStatus) {
return false;
}
byte[] scTransactionId=headers.getTextString(PduHeaders.TRANSACTION_ID);
if (null == scTransactionId) {
return false;
}
break;
case PduHeaders.MESSAGE_TYPE_NOTIFICATION_IND:
byte[] niContentLocation=headers.getTextString(PduHeaders.CONTENT_LOCATION);
if (null == niContentLocation) {
return false;
}
long niExpiry=headers.getLongInteger(PduHeaders.EXPIRY);
if (-1 == niExpiry) {
return false;
}
byte[] niMessageClass=headers.getTextString(PduHeaders.MESSAGE_CLASS);
if (null == niMessageClass) {
return false;
}
long niMessageSize=headers.getLongInteger(PduHeaders.MESSAGE_SIZE);
if (-1 == niMessageSize) {
return false;
}
byte[] niTransactionId=headers.getTextString(PduHeaders.TRANSACTION_ID);
if (null == niTransactionId) {
return false;
}
break;
case PduHeaders.MESSAGE_TYPE_NOTIFYRESP_IND:
int nriStatus=headers.getOctet(PduHeaders.STATUS);
if (0 == nriStatus) {
return false;
}
byte[] nriTransactionId=headers.getTextString(PduHeaders.TRANSACTION_ID);
if (null == nriTransactionId) {
return false;
}
break;
case PduHeaders.MESSAGE_TYPE_RETRIEVE_CONF:
byte[] rcContentType=headers.getTextString(PduHeaders.CONTENT_TYPE);
if (null == rcContentType) {
return false;
}
long rcDate=headers.getLongInteger(PduHeaders.DATE);
if (-1 == rcDate) {
return false;
}
break;
case PduHeaders.MESSAGE_TYPE_DELIVERY_IND:
long diDate=headers.getLongInteger(PduHeaders.DATE);
if (-1 == diDate) {
return false;
}
byte[] diMessageId=headers.getTextString(PduHeaders.MESSAGE_ID);
if (null == diMessageId) {
return false;
}
int diStatus=headers.getOctet(PduHeaders.STATUS);
if (0 == diStatus) {
return false;
}
EncodedStringValue[] diTo=headers.getEncodedStringValues(PduHeaders.TO);
if (null == diTo) {
return false;
}
break;
case PduHeaders.MESSAGE_TYPE_ACKNOWLEDGE_IND:
byte[] aiTransactionId=headers.getTextString(PduHeaders.TRANSACTION_ID);
if (null == aiTransactionId) {
return false;
}
break;
case PduHeaders.MESSAGE_TYPE_READ_ORIG_IND:
long roDate=headers.getLongInteger(PduHeaders.DATE);
if (-1 == roDate) {
return false;
}
EncodedStringValue roFrom=headers.getEncodedStringValue(PduHeaders.FROM);
if (null == roFrom) {
return false;
}
byte[] roMessageId=headers.getTextString(PduHeaders.MESSAGE_ID);
if (null == roMessageId) {
return false;
}
int roReadStatus=headers.getOctet(PduHeaders.READ_STATUS);
if (0 == roReadStatus) {
return false;
}
EncodedStringValue[] roTo=headers.getEncodedStringValues(PduHeaders.TO);
if (null == roTo) {
return false;
}
break;
case PduHeaders.MESSAGE_TYPE_READ_REC_IND:
EncodedStringValue rrFrom=headers.getEncodedStringValue(PduHeaders.FROM);
if (null == rrFrom) {
return false;
}
byte[] rrMessageId=headers.getTextString(PduHeaders.MESSAGE_ID);
if (null == rrMessageId) {
return false;
}
int rrReadStatus=headers.getOctet(PduHeaders.READ_STATUS);
if (0 == rrReadStatus) {
return false;
}
EncodedStringValue[] rrTo=headers.getEncodedStringValues(PduHeaders.TO);
if (null == rrTo) {
return false;
}
break;
default :
return false;
}
return true;
}
