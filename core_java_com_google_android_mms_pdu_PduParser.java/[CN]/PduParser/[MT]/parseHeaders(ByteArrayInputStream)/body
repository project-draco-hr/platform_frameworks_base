{
  if (pduDataStream == null) {
    return null;
  }
  boolean keepParsing=true;
  PduHeaders headers=new PduHeaders();
  while (keepParsing && (pduDataStream.available() > 0)) {
    int headerField=extractByteValue(pduDataStream);
switch (headerField) {
case PduHeaders.MESSAGE_TYPE:
{
        int messageType=extractByteValue(pduDataStream);
switch (messageType) {
case PduHeaders.MESSAGE_TYPE_FORWARD_REQ:
case PduHeaders.MESSAGE_TYPE_FORWARD_CONF:
case PduHeaders.MESSAGE_TYPE_MBOX_STORE_REQ:
case PduHeaders.MESSAGE_TYPE_MBOX_STORE_CONF:
case PduHeaders.MESSAGE_TYPE_MBOX_VIEW_REQ:
case PduHeaders.MESSAGE_TYPE_MBOX_VIEW_CONF:
case PduHeaders.MESSAGE_TYPE_MBOX_UPLOAD_REQ:
case PduHeaders.MESSAGE_TYPE_MBOX_UPLOAD_CONF:
case PduHeaders.MESSAGE_TYPE_MBOX_DELETE_REQ:
case PduHeaders.MESSAGE_TYPE_MBOX_DELETE_CONF:
case PduHeaders.MESSAGE_TYPE_MBOX_DESCR:
case PduHeaders.MESSAGE_TYPE_DELETE_REQ:
case PduHeaders.MESSAGE_TYPE_DELETE_CONF:
case PduHeaders.MESSAGE_TYPE_CANCEL_REQ:
case PduHeaders.MESSAGE_TYPE_CANCEL_CONF:
          return null;
      }
      try {
        headers.setOctet(messageType,headerField);
      }
 catch (      InvalidHeaderValueException e) {
        log("Set invalid Octet value: " + messageType + " into the header filed: "+ headerField);
        return null;
      }
catch (      RuntimeException e) {
        log(headerField + "is not Octet header field!");
        return null;
      }
      break;
    }
case PduHeaders.REPORT_ALLOWED:
case PduHeaders.ADAPTATION_ALLOWED:
case PduHeaders.DELIVERY_REPORT:
case PduHeaders.DRM_CONTENT:
case PduHeaders.DISTRIBUTION_INDICATOR:
case PduHeaders.QUOTAS:
case PduHeaders.READ_REPORT:
case PduHeaders.STORE:
case PduHeaders.STORED:
case PduHeaders.TOTALS:
case PduHeaders.SENDER_VISIBILITY:
case PduHeaders.READ_STATUS:
case PduHeaders.CANCEL_STATUS:
case PduHeaders.PRIORITY:
case PduHeaders.STATUS:
case PduHeaders.REPLY_CHARGING:
case PduHeaders.MM_STATE:
case PduHeaders.RECOMMENDED_RETRIEVAL_MODE:
case PduHeaders.CONTENT_CLASS:
case PduHeaders.RETRIEVE_STATUS:
case PduHeaders.STORE_STATUS:
case PduHeaders.RESPONSE_STATUS:
{
    int value=extractByteValue(pduDataStream);
    try {
      headers.setOctet(value,headerField);
    }
 catch (    InvalidHeaderValueException e) {
      log("Set invalid Octet value: " + value + " into the header filed: "+ headerField);
      return null;
    }
catch (    RuntimeException e) {
      log(headerField + "is not Octet header field!");
      return null;
    }
    break;
  }
case PduHeaders.DATE:
case PduHeaders.REPLY_CHARGING_SIZE:
case PduHeaders.MESSAGE_SIZE:
{
  try {
    long value=parseLongInteger(pduDataStream);
    headers.setLongInteger(value,headerField);
  }
 catch (  RuntimeException e) {
    log(headerField + "is not Long-Integer header field!");
    return null;
  }
  break;
}
case PduHeaders.MESSAGE_COUNT:
case PduHeaders.START:
case PduHeaders.LIMIT:
{
try {
  long value=parseIntegerValue(pduDataStream);
  headers.setLongInteger(value,headerField);
}
 catch (RuntimeException e) {
  log(headerField + "is not Long-Integer header field!");
  return null;
}
break;
}
case PduHeaders.TRANSACTION_ID:
case PduHeaders.REPLY_CHARGING_ID:
case PduHeaders.AUX_APPLIC_ID:
case PduHeaders.APPLIC_ID:
case PduHeaders.REPLY_APPLIC_ID:
case PduHeaders.MESSAGE_ID:
case PduHeaders.REPLACE_ID:
case PduHeaders.CANCEL_ID:
case PduHeaders.CONTENT_LOCATION:
{
byte[] value=parseWapString(pduDataStream,TYPE_TEXT_STRING);
if (null != value) {
try {
  headers.setTextString(value,headerField);
}
 catch (NullPointerException e) {
  log("null pointer error!");
}
catch (RuntimeException e) {
  log(headerField + "is not Text-String header field!");
  return null;
}
}
break;
}
case PduHeaders.SUBJECT:
case PduHeaders.RECOMMENDED_RETRIEVAL_MODE_TEXT:
case PduHeaders.RETRIEVE_TEXT:
case PduHeaders.STATUS_TEXT:
case PduHeaders.STORE_STATUS_TEXT:
case PduHeaders.RESPONSE_TEXT:
{
EncodedStringValue value=parseEncodedStringValue(pduDataStream);
if (null != value) {
try {
headers.setEncodedStringValue(value,headerField);
}
 catch (NullPointerException e) {
log("null pointer error!");
}
catch (RuntimeException e) {
log(headerField + "is not Encoded-String-Value header field!");
return null;
}
}
break;
}
case PduHeaders.BCC:
case PduHeaders.CC:
case PduHeaders.TO:
{
EncodedStringValue value=parseEncodedStringValue(pduDataStream);
if (null != value) {
byte[] address=value.getTextString();
if (null != address) {
String str=new String(address);
int endIndex=str.indexOf("/");
if (endIndex > 0) {
str=str.substring(0,endIndex);
}
try {
value.setTextString(str.getBytes());
}
 catch (NullPointerException e) {
log("null pointer error!");
return null;
}
}
try {
headers.appendEncodedStringValue(value,headerField);
}
 catch (NullPointerException e) {
log("null pointer error!");
}
catch (RuntimeException e) {
log(headerField + "is not Encoded-String-Value header field!");
return null;
}
}
break;
}
case PduHeaders.DELIVERY_TIME:
case PduHeaders.EXPIRY:
case PduHeaders.REPLY_CHARGING_DEADLINE:
{
parseValueLength(pduDataStream);
int token=extractByteValue(pduDataStream);
long timeValue;
try {
timeValue=parseLongInteger(pduDataStream);
}
 catch (RuntimeException e) {
log(headerField + "is not Long-Integer header field!");
return null;
}
if (PduHeaders.VALUE_RELATIVE_TOKEN == token) {
timeValue=System.currentTimeMillis() / 1000 + timeValue;
}
try {
headers.setLongInteger(timeValue,headerField);
}
 catch (RuntimeException e) {
log(headerField + "is not Long-Integer header field!");
return null;
}
break;
}
case PduHeaders.FROM:
{
EncodedStringValue from=null;
parseValueLength(pduDataStream);
int fromToken=extractByteValue(pduDataStream);
if (PduHeaders.FROM_ADDRESS_PRESENT_TOKEN == fromToken) {
from=parseEncodedStringValue(pduDataStream);
if (null != from) {
byte[] address=from.getTextString();
if (null != address) {
String str=new String(address);
int endIndex=str.indexOf("/");
if (endIndex > 0) {
str=str.substring(0,endIndex);
}
try {
from.setTextString(str.getBytes());
}
 catch (NullPointerException e) {
log("null pointer error!");
return null;
}
}
}
}
 else {
try {
from=new EncodedStringValue(PduHeaders.FROM_INSERT_ADDRESS_TOKEN_STR.getBytes());
}
 catch (NullPointerException e) {
log(headerField + "is not Encoded-String-Value header field!");
return null;
}
}
try {
headers.setEncodedStringValue(from,PduHeaders.FROM);
}
 catch (NullPointerException e) {
log("null pointer error!");
}
catch (RuntimeException e) {
log(headerField + "is not Encoded-String-Value header field!");
return null;
}
break;
}
case PduHeaders.MESSAGE_CLASS:
{
pduDataStream.mark(1);
int messageClass=extractByteValue(pduDataStream);
if (messageClass >= PduHeaders.MESSAGE_CLASS_PERSONAL) {
try {
if (PduHeaders.MESSAGE_CLASS_PERSONAL == messageClass) {
headers.setTextString(PduHeaders.MESSAGE_CLASS_PERSONAL_STR.getBytes(),PduHeaders.MESSAGE_CLASS);
}
 else if (PduHeaders.MESSAGE_CLASS_ADVERTISEMENT == messageClass) {
headers.setTextString(PduHeaders.MESSAGE_CLASS_ADVERTISEMENT_STR.getBytes(),PduHeaders.MESSAGE_CLASS);
}
 else if (PduHeaders.MESSAGE_CLASS_INFORMATIONAL == messageClass) {
headers.setTextString(PduHeaders.MESSAGE_CLASS_INFORMATIONAL_STR.getBytes(),PduHeaders.MESSAGE_CLASS);
}
 else if (PduHeaders.MESSAGE_CLASS_AUTO == messageClass) {
headers.setTextString(PduHeaders.MESSAGE_CLASS_AUTO_STR.getBytes(),PduHeaders.MESSAGE_CLASS);
}
}
 catch (NullPointerException e) {
log("null pointer error!");
}
catch (RuntimeException e) {
log(headerField + "is not Text-String header field!");
return null;
}
}
 else {
pduDataStream.reset();
byte[] messageClassString=parseWapString(pduDataStream,TYPE_TEXT_STRING);
if (null != messageClassString) {
try {
headers.setTextString(messageClassString,PduHeaders.MESSAGE_CLASS);
}
 catch (NullPointerException e) {
log("null pointer error!");
}
catch (RuntimeException e) {
log(headerField + "is not Text-String header field!");
return null;
}
}
}
break;
}
case PduHeaders.MMS_VERSION:
{
int version=parseShortInteger(pduDataStream);
try {
headers.setOctet(version,PduHeaders.MMS_VERSION);
}
 catch (InvalidHeaderValueException e) {
log("Set invalid Octet value: " + version + " into the header filed: "+ headerField);
return null;
}
catch (RuntimeException e) {
log(headerField + "is not Octet header field!");
return null;
}
break;
}
case PduHeaders.PREVIOUSLY_SENT_BY:
{
parseValueLength(pduDataStream);
try {
parseIntegerValue(pduDataStream);
}
 catch (RuntimeException e) {
log(headerField + " is not Integer-Value");
return null;
}
EncodedStringValue previouslySentBy=parseEncodedStringValue(pduDataStream);
if (null != previouslySentBy) {
try {
headers.setEncodedStringValue(previouslySentBy,PduHeaders.PREVIOUSLY_SENT_BY);
}
 catch (NullPointerException e) {
log("null pointer error!");
}
catch (RuntimeException e) {
log(headerField + "is not Encoded-String-Value header field!");
return null;
}
}
break;
}
case PduHeaders.PREVIOUSLY_SENT_DATE:
{
parseValueLength(pduDataStream);
try {
parseIntegerValue(pduDataStream);
}
 catch (RuntimeException e) {
log(headerField + " is not Integer-Value");
return null;
}
try {
long perviouslySentDate=parseLongInteger(pduDataStream);
headers.setLongInteger(perviouslySentDate,PduHeaders.PREVIOUSLY_SENT_DATE);
}
 catch (RuntimeException e) {
log(headerField + "is not Long-Integer header field!");
return null;
}
break;
}
case PduHeaders.MM_FLAGS:
{
parseValueLength(pduDataStream);
extractByteValue(pduDataStream);
parseEncodedStringValue(pduDataStream);
break;
}
case PduHeaders.MBOX_TOTALS:
case PduHeaders.MBOX_QUOTAS:
{
parseValueLength(pduDataStream);
extractByteValue(pduDataStream);
try {
parseIntegerValue(pduDataStream);
}
 catch (RuntimeException e) {
log(headerField + " is not Integer-Value");
return null;
}
break;
}
case PduHeaders.ELEMENT_DESCRIPTOR:
{
parseContentType(pduDataStream,null);
break;
}
case PduHeaders.CONTENT_TYPE:
{
HashMap<Integer,Object> map=new HashMap<Integer,Object>();
byte[] contentType=parseContentType(pduDataStream,map);
if (null != contentType) {
try {
headers.setTextString(contentType,PduHeaders.CONTENT_TYPE);
}
 catch (NullPointerException e) {
log("null pointer error!");
}
catch (RuntimeException e) {
log(headerField + "is not Text-String header field!");
return null;
}
}
mStartParam=(byte[])map.get(PduPart.P_START);
mTypeParam=(byte[])map.get(PduPart.P_TYPE);
keepParsing=false;
break;
}
case PduHeaders.CONTENT:
case PduHeaders.ADDITIONAL_HEADERS:
case PduHeaders.ATTRIBUTES:
default :
{
log("Unknown header");
}
}
}
return headers;
}
