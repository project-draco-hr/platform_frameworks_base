{
  if (DEBUG)   Log.d(TAG,"showFragment() for volume " + storageVolume.dump() + ", directory "+ directoryName+ ", and user "+ userId);
  File file;
  try {
    file=new File(storageVolume.getPathFile(),directoryName).getCanonicalFile();
  }
 catch (  IOException e) {
    Log.e(TAG,"Could not get canonical file for volume " + storageVolume.dump() + " and directory "+ directoryName);
    return false;
  }
  final StorageManager sm=(StorageManager)activity.getSystemService(Context.STORAGE_SERVICE);
  final String root=file.getParent();
  final String directory=file.getName();
  if (TextUtils.isEmpty(directory) || !isStandardDirectory(directory)) {
    if (DEBUG)     Log.d(TAG,"Directory '" + directory + "' is not standard (full path: '"+ file.getAbsolutePath()+ "')");
    return false;
  }
  String volumeLabel=null;
  final List<VolumeInfo> volumes=sm.getVolumes();
  if (DEBUG)   Log.d(TAG,"Number of volumes: " + volumes.size());
  for (  VolumeInfo volume : volumes) {
    if (isRightVolume(volume,root,userId)) {
      final File internalRoot=volume.getInternalPathForUser(userId);
      if (DEBUG)       Log.d(TAG,"Converting " + root + " to "+ internalRoot);
      file=new File(internalRoot,directory);
      volumeLabel=sm.getBestVolumeDescription(volume);
      break;
    }
  }
  if (volumeLabel == null) {
    Log.e(TAG,"Could not get volume for " + file);
    return false;
  }
  final String appLabel=getAppLabel(activity);
  if (appLabel == null) {
    return false;
  }
  final Bundle args=new Bundle();
  args.putString(EXTRA_FILE,file.getAbsolutePath());
  args.putString(EXTRA_VOLUME_LABEL,volumeLabel);
  args.putString(EXTRA_APP_LABEL,appLabel);
  final FragmentManager fm=activity.getFragmentManager();
  final FragmentTransaction ft=fm.beginTransaction();
  final OpenExternalDirectoryDialogFragment fragment=new OpenExternalDirectoryDialogFragment();
  fragment.setArguments(args);
  ft.add(fragment,FM_TAG);
  ft.commitAllowingStateLoss();
  return true;
}
