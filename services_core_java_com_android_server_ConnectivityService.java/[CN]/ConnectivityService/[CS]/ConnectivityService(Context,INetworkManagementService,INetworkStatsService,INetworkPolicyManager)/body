{
  if (DBG)   log("ConnectivityService starting up");
  NetworkCapabilities netCap=new NetworkCapabilities();
  netCap.addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET);
  netCap.addCapability(NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED);
  mDefaultRequest=new NetworkRequest(netCap,TYPE_NONE,nextNetworkRequestId());
  NetworkRequestInfo nri=new NetworkRequestInfo(null,mDefaultRequest,new Binder(),NetworkRequestInfo.REQUEST);
  mNetworkRequests.put(mDefaultRequest,nri);
  HandlerThread handlerThread=new HandlerThread("ConnectivityServiceThread");
  handlerThread.start();
  mHandler=new InternalHandler(handlerThread.getLooper());
  mTrackerHandler=new NetworkStateTrackerHandler(handlerThread.getLooper());
  if (TextUtils.isEmpty(SystemProperties.get("net.hostname"))) {
    String id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID);
    if (id != null && id.length() > 0) {
      String name=new String("android-").concat(id);
      SystemProperties.set("net.hostname",name);
    }
  }
  String dns=Settings.Global.getString(context.getContentResolver(),Settings.Global.DEFAULT_DNS_SERVER);
  if (dns == null || dns.length() == 0) {
    dns=context.getResources().getString(com.android.internal.R.string.config_default_dns_server);
  }
  try {
    mDefaultDns=NetworkUtils.numericToInetAddress(dns);
  }
 catch (  IllegalArgumentException e) {
    loge("Error setting defaultDns using " + dns);
  }
  mContext=checkNotNull(context,"missing Context");
  mNetd=checkNotNull(netManager,"missing INetworkManagementService");
  mPolicyManager=checkNotNull(policyManager,"missing INetworkPolicyManager");
  mKeyStore=KeyStore.getInstance();
  mTelephonyManager=(TelephonyManager)mContext.getSystemService(Context.TELEPHONY_SERVICE);
  try {
    mPolicyManager.registerListener(mPolicyListener);
  }
 catch (  RemoteException e) {
    loge("unable to register INetworkPolicyListener" + e.toString());
  }
  final PowerManager powerManager=(PowerManager)context.getSystemService(Context.POWER_SERVICE);
  mNetTransitionWakeLock=powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG);
  mNetTransitionWakeLockTimeout=mContext.getResources().getInteger(com.android.internal.R.integer.config_networkTransitionTimeout);
  mNetTrackers=new NetworkStateTracker[ConnectivityManager.MAX_NETWORK_TYPE + 1];
  mNetConfigs=new NetworkConfig[ConnectivityManager.MAX_NETWORK_TYPE + 1];
  boolean wifiOnly=SystemProperties.getBoolean("ro.radio.noril",false);
  log("wifiOnly=" + wifiOnly);
  String[] naStrings=context.getResources().getStringArray(com.android.internal.R.array.networkAttributes);
  for (  String naString : naStrings) {
    try {
      NetworkConfig n=new NetworkConfig(naString);
      if (VDBG)       log("naString=" + naString + " config="+ n);
      if (n.type > ConnectivityManager.MAX_NETWORK_TYPE) {
        loge("Error in networkAttributes - ignoring attempt to define type " + n.type);
        continue;
      }
      if (wifiOnly && ConnectivityManager.isNetworkTypeMobile(n.type)) {
        log("networkAttributes - ignoring mobile as this dev is wifiOnly " + n.type);
        continue;
      }
      if (mNetConfigs[n.type] != null) {
        loge("Error in networkAttributes - ignoring attempt to redefine type " + n.type);
        continue;
      }
      mLegacyTypeTracker.addSupportedType(n.type);
      mNetConfigs[n.type]=n;
      mNetworksDefined++;
    }
 catch (    Exception e) {
    }
  }
  if (VDBG)   log("mNetworksDefined=" + mNetworksDefined);
  mProtectedNetworks=new ArrayList<Integer>();
  int[] protectedNetworks=context.getResources().getIntArray(com.android.internal.R.array.config_protectedNetworks);
  for (  int p : protectedNetworks) {
    if ((mNetConfigs[p] != null) && (mProtectedNetworks.contains(p) == false)) {
      mProtectedNetworks.add(p);
    }
 else {
      if (DBG)       loge("Ignoring protectedNetwork " + p);
    }
  }
  mTestMode=SystemProperties.get("cm.test.mode").equals("true") && SystemProperties.get("ro.build.type").equals("eng");
  mTethering=new Tethering(mContext,mNetd,statsService,mHandler.getLooper());
  mPermissionMonitor=new PermissionMonitor(mContext,mNetd);
  IntentFilter intentFilter=new IntentFilter();
  intentFilter.addAction(Intent.ACTION_USER_STARTING);
  intentFilter.addAction(Intent.ACTION_USER_STOPPING);
  mContext.registerReceiverAsUser(mUserIntentReceiver,UserHandle.ALL,intentFilter,null,null);
  mClat=new Nat464Xlat(mContext,mNetd,this,mTrackerHandler);
  try {
    mNetd.registerObserver(mTethering);
    mNetd.registerObserver(mDataActivityObserver);
    mNetd.registerObserver(mClat);
  }
 catch (  RemoteException e) {
    loge("Error registering observer :" + e);
  }
  if (DBG) {
    mInetLog=new ArrayList();
  }
  mSettingsObserver=new SettingsObserver(mHandler,EVENT_APPLY_GLOBAL_HTTP_PROXY);
  mSettingsObserver.observe(mContext);
  mDataConnectionStats=new DataConnectionStats(mContext);
  mDataConnectionStats.startMonitoring();
  mAlarmManager=(AlarmManager)mContext.getSystemService(Context.ALARM_SERVICE);
  IntentFilter filter=new IntentFilter();
  filter.addAction(ACTION_PKT_CNT_SAMPLE_INTERVAL_ELAPSED);
  mContext.registerReceiver(new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      String action=intent.getAction();
      if (action.equals(ACTION_PKT_CNT_SAMPLE_INTERVAL_ELAPSED)) {
        mHandler.sendMessage(mHandler.obtainMessage(EVENT_SAMPLE_INTERVAL_ELAPSED));
      }
    }
  }
,new IntentFilter(filter));
  mPacManager=new PacManager(mContext,mHandler,EVENT_PROXY_HAS_CHANGED);
  mUserManager=(UserManager)context.getSystemService(Context.USER_SERVICE);
}
