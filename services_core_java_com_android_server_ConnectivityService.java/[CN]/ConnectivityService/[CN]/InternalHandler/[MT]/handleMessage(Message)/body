{
  NetworkInfo info;
switch (msg.what) {
case EVENT_EXPIRE_NET_TRANSITION_WAKELOCK:
case EVENT_CLEAR_NET_TRANSITION_WAKELOCK:
{
      String causedBy=null;
synchronized (ConnectivityService.this) {
        if (msg.arg1 == mNetTransitionWakeLockSerialNumber && mNetTransitionWakeLock.isHeld()) {
          mNetTransitionWakeLock.release();
          causedBy=mNetTransitionWakeLockCausedBy;
        }
 else {
          break;
        }
      }
      if (msg.what == EVENT_EXPIRE_NET_TRANSITION_WAKELOCK) {
        log("Failed to find a new network - expiring NetTransition Wakelock");
      }
 else {
        log("NetTransition Wakelock (" + (causedBy == null ? "unknown" : causedBy) + " cleared because we found a replacement network");
      }
      break;
    }
case EVENT_INET_CONDITION_CHANGE:
{
    int netType=msg.arg1;
    int condition=msg.arg2;
    handleInetConditionChange(netType,condition);
    break;
  }
case EVENT_INET_CONDITION_HOLD_END:
{
  int netType=msg.arg1;
  int sequence=msg.arg2;
  handleInetConditionHoldEnd(netType,sequence);
  break;
}
case EVENT_APPLY_GLOBAL_HTTP_PROXY:
{
handleDeprecatedGlobalHttpProxy();
break;
}
case EVENT_SET_DEPENDENCY_MET:
{
boolean met=(msg.arg1 == ENABLED);
handleSetDependencyMet(msg.arg2,met);
break;
}
case EVENT_SEND_STICKY_BROADCAST_INTENT:
{
Intent intent=(Intent)msg.obj;
sendStickyBroadcast(intent);
break;
}
case EVENT_SET_POLICY_DATA_ENABLE:
{
final int networkType=msg.arg1;
final boolean enabled=msg.arg2 == ENABLED;
handleSetPolicyDataEnable(networkType,enabled);
break;
}
case EVENT_ENABLE_FAIL_FAST_MOBILE_DATA:
{
int tag=mEnableFailFastMobileDataTag.get();
if (msg.arg1 == tag) {
MobileDataStateTracker mobileDst=(MobileDataStateTracker)mNetTrackers[ConnectivityManager.TYPE_MOBILE];
if (mobileDst != null) {
mobileDst.setEnableFailFastMobileData(msg.arg2);
}
}
 else {
log("EVENT_ENABLE_FAIL_FAST_MOBILE_DATA: stale arg1:" + msg.arg1 + " != tag:"+ tag);
}
break;
}
case EVENT_SAMPLE_INTERVAL_ELAPSED:
{
handleNetworkSamplingTimeout();
break;
}
case EVENT_PROXY_HAS_CHANGED:
{
handleApplyDefaultProxy((ProxyInfo)msg.obj);
break;
}
case EVENT_REGISTER_NETWORK_FACTORY:
{
handleRegisterNetworkFactory((NetworkFactoryInfo)msg.obj);
break;
}
case EVENT_UNREGISTER_NETWORK_FACTORY:
{
handleUnregisterNetworkFactory((Messenger)msg.obj);
break;
}
case EVENT_REGISTER_NETWORK_AGENT:
{
handleRegisterNetworkAgent((NetworkAgentInfo)msg.obj);
break;
}
case EVENT_REGISTER_NETWORK_REQUEST:
case EVENT_REGISTER_NETWORK_LISTENER:
{
handleRegisterNetworkRequest(msg);
break;
}
case EVENT_RELEASE_NETWORK_REQUEST:
{
handleReleaseNetworkRequest((NetworkRequest)msg.obj,msg.arg1);
break;
}
}
}
