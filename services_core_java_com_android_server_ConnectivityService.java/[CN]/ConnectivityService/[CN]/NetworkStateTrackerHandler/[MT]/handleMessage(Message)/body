{
  NetworkInfo info;
switch (msg.what) {
case AsyncChannel.CMD_CHANNEL_HALF_CONNECTED:
{
      handleAsyncChannelHalfConnect(msg);
      break;
    }
case AsyncChannel.CMD_CHANNEL_DISCONNECT:
{
    NetworkAgentInfo nai=mNetworkAgentInfos.get(msg.replyTo);
    if (nai != null)     nai.asyncChannel.disconnect();
    break;
  }
case AsyncChannel.CMD_CHANNEL_DISCONNECTED:
{
  handleAsyncChannelDisconnected(msg);
  break;
}
case NetworkAgent.EVENT_NETWORK_CAPABILITIES_CHANGED:
{
NetworkAgentInfo nai=mNetworkAgentInfos.get(msg.replyTo);
if (nai == null) {
  loge("EVENT_NETWORK_CAPABILITIES_CHANGED from unknown NetworkAgent");
}
 else {
  final NetworkCapabilities networkCapabilities=(NetworkCapabilities)msg.obj;
  if (networkCapabilities.hasCapability(NET_CAPABILITY_CAPTIVE_PORTAL) || networkCapabilities.hasCapability(NET_CAPABILITY_VALIDATED)) {
    Slog.wtf(TAG,"BUG: " + nai + " has CS-managed capability.");
  }
  if (nai.created && !nai.networkCapabilities.equalImmutableCapabilities(networkCapabilities)) {
    Slog.wtf(TAG,"BUG: " + nai + " changed immutable capabilities: "+ nai.networkCapabilities+ " -> "+ networkCapabilities);
  }
  updateCapabilities(nai,networkCapabilities,NascentState.NOT_JUST_VALIDATED);
}
break;
}
case NetworkAgent.EVENT_NETWORK_PROPERTIES_CHANGED:
{
NetworkAgentInfo nai=mNetworkAgentInfos.get(msg.replyTo);
if (nai == null) {
loge("NetworkAgent not found for EVENT_NETWORK_PROPERTIES_CHANGED");
}
 else {
if (VDBG) {
  log("Update of LinkProperties for " + nai.name() + "; created="+ nai.created);
}
LinkProperties oldLp=nai.linkProperties;
synchronized (nai) {
  nai.linkProperties=(LinkProperties)msg.obj;
}
if (nai.created) updateLinkProperties(nai,oldLp);
}
break;
}
case NetworkAgent.EVENT_NETWORK_INFO_CHANGED:
{
NetworkAgentInfo nai=mNetworkAgentInfos.get(msg.replyTo);
if (nai == null) {
loge("EVENT_NETWORK_INFO_CHANGED from unknown NetworkAgent");
break;
}
info=(NetworkInfo)msg.obj;
updateNetworkInfo(nai,info);
break;
}
case NetworkAgent.EVENT_NETWORK_SCORE_CHANGED:
{
NetworkAgentInfo nai=mNetworkAgentInfos.get(msg.replyTo);
if (nai == null) {
loge("EVENT_NETWORK_SCORE_CHANGED from unknown NetworkAgent");
break;
}
Integer score=(Integer)msg.obj;
if (score != null) updateNetworkScore(nai,score.intValue());
break;
}
case NetworkAgent.EVENT_UID_RANGES_ADDED:
{
NetworkAgentInfo nai=mNetworkAgentInfos.get(msg.replyTo);
if (nai == null) {
loge("EVENT_UID_RANGES_ADDED from unknown NetworkAgent");
break;
}
try {
mNetd.addVpnUidRanges(nai.network.netId,(UidRange[])msg.obj);
}
 catch (Exception e) {
loge("Exception in addVpnUidRanges: " + e);
}
break;
}
case NetworkAgent.EVENT_UID_RANGES_REMOVED:
{
NetworkAgentInfo nai=mNetworkAgentInfos.get(msg.replyTo);
if (nai == null) {
loge("EVENT_UID_RANGES_REMOVED from unknown NetworkAgent");
break;
}
try {
mNetd.removeVpnUidRanges(nai.network.netId,(UidRange[])msg.obj);
}
 catch (Exception e) {
loge("Exception in removeVpnUidRanges: " + e);
}
break;
}
case NetworkAgent.EVENT_SET_EXPLICITLY_SELECTED:
{
NetworkAgentInfo nai=mNetworkAgentInfos.get(msg.replyTo);
if (nai == null) {
loge("EVENT_SET_EXPLICITLY_SELECTED from unknown NetworkAgent");
break;
}
if (nai.created && !nai.networkMisc.explicitlySelected) {
loge("ERROR: created network explicitly selected.");
}
nai.networkMisc.explicitlySelected=true;
nai.networkMisc.acceptUnvalidated=(boolean)msg.obj;
break;
}
case NetworkAgent.EVENT_PACKET_KEEPALIVE:
{
NetworkAgentInfo nai=mNetworkAgentInfos.get(msg.replyTo);
if (nai == null) {
loge("EVENT_PACKET_KEEPALIVE from unknown NetworkAgent");
break;
}
mKeepaliveTracker.handleEventPacketKeepalive(nai,msg);
break;
}
case NetworkMonitor.EVENT_NETWORK_TESTED:
{
NetworkAgentInfo nai=(NetworkAgentInfo)msg.obj;
if (isLiveNetworkAgent(nai,"EVENT_NETWORK_TESTED")) {
final boolean valid=(msg.arg1 == NetworkMonitor.NETWORK_TEST_RESULT_VALID);
if (DBG) log(nai.name() + " validation " + (valid ? " passed" : "failed"));
if (valid != nai.lastValidated) {
final int oldScore=nai.getCurrentScore();
final NascentState nascent=(valid && !nai.everValidated) ? NascentState.JUST_VALIDATED : NascentState.NOT_JUST_VALIDATED;
nai.lastValidated=valid;
nai.everValidated|=valid;
updateCapabilities(nai,nai.networkCapabilities,nascent);
if (oldScore != nai.getCurrentScore()) sendUpdatedScoreToFactories(nai);
}
updateInetCondition(nai);
nai.asyncChannel.sendMessage(android.net.NetworkAgent.CMD_REPORT_NETWORK_STATUS,(valid ? NetworkAgent.VALID_NETWORK : NetworkAgent.INVALID_NETWORK),0,null);
}
break;
}
case NetworkMonitor.EVENT_NETWORK_LINGER_COMPLETE:
{
NetworkAgentInfo nai=(NetworkAgentInfo)msg.obj;
if (isLiveNetworkAgent(nai,"EVENT_NETWORK_LINGER_COMPLETE")) {
handleLingerComplete(nai);
}
break;
}
case NetworkMonitor.EVENT_PROVISIONING_NOTIFICATION:
{
final int netId=msg.arg2;
final boolean visible=(msg.arg1 != 0);
final NetworkAgentInfo nai;
synchronized (mNetworkForNetId) {
nai=mNetworkForNetId.get(netId);
}
if (nai != null && (visible != nai.lastCaptivePortalDetected)) {
nai.lastCaptivePortalDetected=visible;
nai.everCaptivePortalDetected|=visible;
updateCapabilities(nai,nai.networkCapabilities,NascentState.NOT_JUST_VALIDATED);
}
if (!visible) {
setProvNotificationVisibleIntent(false,netId,null,0,null,null,false);
}
 else {
if (nai == null) {
loge("EVENT_PROVISIONING_NOTIFICATION from unknown NetworkMonitor");
break;
}
setProvNotificationVisibleIntent(true,netId,NotificationType.SIGN_IN,nai.networkInfo.getType(),nai.networkInfo.getExtraInfo(),(PendingIntent)msg.obj,nai.networkMisc.explicitlySelected);
}
break;
}
}
}
