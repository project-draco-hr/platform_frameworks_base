{
  NetworkAgentInfo nai=mNetworkAgentInfos.get(msg.replyTo);
  if (nai == null) {
    if (VDBG) {
      final String what=sMagicDecoderRing.get(msg.what,Integer.toString(msg.what));
      log(String.format("%s from unknown NetworkAgent",what));
    }
    return;
  }
switch (msg.what) {
case NetworkAgent.EVENT_NETWORK_CAPABILITIES_CHANGED:
{
      final NetworkCapabilities networkCapabilities=(NetworkCapabilities)msg.obj;
      if (networkCapabilities.hasCapability(NET_CAPABILITY_CAPTIVE_PORTAL) || networkCapabilities.hasCapability(NET_CAPABILITY_VALIDATED)) {
        Slog.wtf(TAG,"BUG: " + nai + " has CS-managed capability.");
      }
      if (nai.everConnected && !nai.networkCapabilities.equalImmutableCapabilities(networkCapabilities)) {
        Slog.wtf(TAG,"BUG: " + nai + " changed immutable capabilities: "+ nai.networkCapabilities+ " -> "+ networkCapabilities);
      }
      updateCapabilities(nai,networkCapabilities);
      break;
    }
case NetworkAgent.EVENT_NETWORK_PROPERTIES_CHANGED:
{
    if (VDBG) {
      log("Update of LinkProperties for " + nai.name() + "; created="+ nai.created+ "; everConnected="+ nai.everConnected);
    }
    LinkProperties oldLp=nai.linkProperties;
synchronized (nai) {
      nai.linkProperties=(LinkProperties)msg.obj;
    }
    if (nai.everConnected)     updateLinkProperties(nai,oldLp);
    break;
  }
case NetworkAgent.EVENT_NETWORK_INFO_CHANGED:
{
  NetworkInfo info=(NetworkInfo)msg.obj;
  updateNetworkInfo(nai,info);
  break;
}
case NetworkAgent.EVENT_NETWORK_SCORE_CHANGED:
{
Integer score=(Integer)msg.obj;
if (score != null) updateNetworkScore(nai,score.intValue());
break;
}
case NetworkAgent.EVENT_UID_RANGES_ADDED:
{
try {
mNetd.addVpnUidRanges(nai.network.netId,(UidRange[])msg.obj);
}
 catch (Exception e) {
loge("Exception in addVpnUidRanges: " + e);
}
break;
}
case NetworkAgent.EVENT_UID_RANGES_REMOVED:
{
try {
mNetd.removeVpnUidRanges(nai.network.netId,(UidRange[])msg.obj);
}
 catch (Exception e) {
loge("Exception in removeVpnUidRanges: " + e);
}
break;
}
case NetworkAgent.EVENT_SET_EXPLICITLY_SELECTED:
{
if (nai.everConnected && !nai.networkMisc.explicitlySelected) {
loge("ERROR: already-connected network explicitly selected.");
}
nai.networkMisc.explicitlySelected=true;
nai.networkMisc.acceptUnvalidated=(boolean)msg.obj;
break;
}
case NetworkAgent.EVENT_PACKET_KEEPALIVE:
{
mKeepaliveTracker.handleEventPacketKeepalive(nai,msg);
break;
}
}
}
