{
  NetworkRequestInfo nri=mNetworkRequests.get(request);
  if (nri != null) {
    if (Process.SYSTEM_UID != callingUid && nri.mUid != callingUid) {
      if (DBG)       log("Attempt to release unowned NetworkRequest " + request);
      return;
    }
    if (VDBG || (DBG && nri.isRequest()))     log("releasing NetworkRequest " + request);
    nri.unlinkDeathRecipient();
    mNetworkRequests.remove(request);
synchronized (mUidToNetworkRequestCount) {
      int requests=mUidToNetworkRequestCount.get(nri.mUid,0);
      if (requests < 1) {
        Slog.wtf(TAG,"BUG: too small request count " + requests + " for UID "+ nri.mUid);
      }
 else       if (requests == 1) {
        mUidToNetworkRequestCount.removeAt(mUidToNetworkRequestCount.indexOfKey(nri.mUid));
      }
 else {
        mUidToNetworkRequestCount.put(nri.mUid,requests - 1);
      }
    }
    mNetworkRequestInfoLogs.log("RELEASE " + nri);
    if (nri.isRequest()) {
      boolean wasKept=false;
      for (      NetworkAgentInfo nai : mNetworkAgentInfos.values()) {
        if (nai.networkRequests.get(nri.request.requestId) != null) {
          nai.networkRequests.remove(nri.request.requestId);
          if (VDBG) {
            log(" Removing from current network " + nai.name() + ", leaving "+ nai.networkRequests.size()+ " requests.");
          }
          if (unneeded(nai)) {
            if (DBG)             log("no live requests for " + nai.name() + "; disconnecting");
            teardownUnneededNetwork(nai);
          }
 else {
            wasKept|=true;
          }
        }
      }
      NetworkAgentInfo nai=mNetworkForRequestId.get(nri.request.requestId);
      if (nai != null) {
        mNetworkForRequestId.remove(nri.request.requestId);
      }
      if (nri.request.legacyType != TYPE_NONE && nai != null) {
        boolean doRemove=true;
        if (wasKept) {
          for (int i=0; i < nai.networkRequests.size(); i++) {
            NetworkRequest otherRequest=nai.networkRequests.valueAt(i);
            if (otherRequest.legacyType == nri.request.legacyType && isRequest(otherRequest)) {
              if (DBG)               log(" still have other legacy request - leaving");
              doRemove=false;
            }
          }
        }
        if (doRemove) {
          mLegacyTypeTracker.remove(nri.request.legacyType,nai,false);
        }
      }
      for (      NetworkFactoryInfo nfi : mNetworkFactoryInfos.values()) {
        nfi.asyncChannel.sendMessage(android.net.NetworkFactory.CMD_CANCEL_REQUEST,nri.request);
      }
    }
 else {
      for (      NetworkAgentInfo nai : mNetworkAgentInfos.values()) {
        nai.networkRequests.remove(nri.request.requestId);
        if (nri.request.networkCapabilities.hasSignalStrength() && nai.satisfiesImmutableCapabilitiesOf(nri.request)) {
          updateSignalStrengthThresholds(nai,"RELEASE",nri.request);
        }
      }
    }
    callCallbackForRequest(nri,null,ConnectivityManager.CALLBACK_RELEASED);
  }
}
