{
  if (ignoreBlocked)   return false;
  if (uid < Process.FIRST_APPLICATION_UID)   return false;
  final boolean networkMetered;
  final int uidRules;
  final String iface=(lp == null ? "" : lp.getInterfaceName());
synchronized (mRulesLock) {
    networkMetered=mMeteredIfaces.contains(iface);
    uidRules=mUidRules.get(uid,RULE_NONE);
  }
  boolean allowed=true;
  if (networkMetered) {
    if ((uidRules & RULE_REJECT_METERED) != 0) {
      if (LOGD_RULES)       Log.d(TAG,"uid " + uid + " is blacklisted");
      allowed=false;
    }
 else {
      allowed=!mRestrictBackground || (uidRules & RULE_ALLOW_METERED) != 0 || (uidRules & RULE_TEMPORARY_ALLOW_METERED) != 0;
      if (LOGD_RULES)       Log.d(TAG,"allowed status for uid " + uid + " when"+ " mRestrictBackground="+ mRestrictBackground+ ", whitelisted="+ ((uidRules & RULE_ALLOW_METERED) != 0)+ ", tempWhitelist= + ((uidRules & RULE_TEMPORARY_ALLOW_METERED) != 0)"+ ": "+ allowed);
    }
  }
  if (allowed) {
    allowed=(uidRules & RULE_REJECT_ALL) == 0;
    if (LOGD_RULES)     Log.d(TAG,"allowed status for uid " + uid + " when"+ " rule is "+ uidRulesToString(uidRules)+ ": "+ allowed);
  }
  return !allowed;
}
