{
  final IndentingPrintWriter pw=new IndentingPrintWriter(writer,"  ");
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println("Permission Denial: can't dump ConnectivityService " + "from from pid=" + Binder.getCallingPid() + ", uid="+ Binder.getCallingUid());
    return;
  }
  pw.println();
  for (int i=0; i < mNetTrackers.length; i++) {
    final NetworkStateTracker nst=mNetTrackers[i];
    if (nst != null) {
      pw.println("NetworkStateTracker for " + getNetworkTypeName(i) + ":");
      pw.increaseIndent();
      if (nst.getNetworkInfo().isConnected()) {
        pw.println("Active network: " + nst.getNetworkInfo().getTypeName());
      }
      pw.println(nst.getNetworkInfo());
      pw.println(nst.getLinkProperties());
      pw.println(nst);
      pw.println();
      pw.decreaseIndent();
    }
  }
  pw.print("Active default network: ");
  pw.println(getNetworkTypeName(mActiveDefaultNetwork));
  pw.println();
  pw.println("Network Requester Pids:");
  pw.increaseIndent();
  for (  int net : mPriorityList) {
    String pidString=net + ": ";
    for (    Integer pid : mNetRequestersPids[net]) {
      pidString=pidString + pid.toString() + ", ";
    }
    pw.println(pidString);
  }
  pw.println();
  pw.decreaseIndent();
  pw.println("FeatureUsers:");
  pw.increaseIndent();
  for (  Object requester : mFeatureUsers) {
    pw.println(requester.toString());
  }
  pw.println();
  pw.decreaseIndent();
synchronized (this) {
    pw.println("NetworkTranstionWakeLock is currently " + (mNetTransitionWakeLock.isHeld() ? "" : "not ") + "held.");
    pw.println("It was last requested for " + mNetTransitionWakeLockCausedBy);
  }
  pw.println();
  mTethering.dump(fd,pw,args);
  if (mInetLog != null) {
    pw.println();
    pw.println("Inet condition reports:");
    pw.increaseIndent();
    for (int i=0; i < mInetLog.size(); i++) {
      pw.println(mInetLog.get(i));
    }
    pw.decreaseIndent();
  }
}
