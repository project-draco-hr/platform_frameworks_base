{
  Collection<RouteInfo> routesToAdd=null;
  CompareResult<InetAddress> dnsDiff=new CompareResult<InetAddress>();
  CompareResult<RouteInfo> routeDiff=new CompareResult<RouteInfo>();
  if (curLp != null) {
    routeDiff=curLp.compareAllRoutes(newLp);
    dnsDiff=curLp.compareDnses(newLp);
  }
 else   if (newLp != null) {
    routeDiff.added=newLp.getAllRoutes();
    dnsDiff.added=newLp.getDnsServers();
  }
  boolean routesChanged=(routeDiff.removed.size() != 0 || routeDiff.added.size() != 0);
  for (  RouteInfo r : routeDiff.removed) {
    if (isLinkDefault || !r.isDefaultRoute()) {
      if (VDBG)       log("updateRoutes: default remove route r=" + r);
      removeRoute(curLp,r,TO_DEFAULT_TABLE,netId);
    }
    if (isLinkDefault == false) {
      removeRoute(curLp,r,TO_SECONDARY_TABLE,netId);
    }
  }
  for (  RouteInfo r : routeDiff.added) {
    if (isLinkDefault || !r.isDefaultRoute()) {
      addRoute(newLp,r,TO_DEFAULT_TABLE,exempt,netId);
    }
 else {
      addRoute(newLp,r,TO_SECONDARY_TABLE,UNEXEMPT,netId);
      String ifaceName=newLp.getInterfaceName();
synchronized (mRoutesLock) {
        if (!TextUtils.isEmpty(ifaceName) && !mAddedRoutes.contains(r)) {
          if (VDBG)           log("Removing " + r + " for interface "+ ifaceName);
          try {
            mNetd.removeRoute(netId,r);
          }
 catch (          Exception e) {
            if (DBG)             loge("Exception trying to remove a route: " + e);
          }
        }
      }
    }
  }
  return routesChanged;
}
