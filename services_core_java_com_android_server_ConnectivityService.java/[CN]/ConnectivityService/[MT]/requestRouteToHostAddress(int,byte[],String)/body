{
  enforceChangePermission();
  if (mProtectedNetworks.contains(networkType)) {
    enforceConnectivityInternalPermission();
  }
  boolean exempt;
  InetAddress addr;
  try {
    addr=InetAddress.getByAddress(hostAddress);
  }
 catch (  UnknownHostException e) {
    if (DBG)     log("requestRouteToHostAddress got " + e.toString());
    return false;
  }
  if (Binder.getCallingUid() == Process.SYSTEM_UID) {
    exempt=true;
  }
 else {
    mAppOpsManager.checkPackage(Binder.getCallingUid(),packageName);
    try {
      ApplicationInfo info=mContext.getPackageManager().getApplicationInfo(packageName,0);
      exempt=(info.flags & ApplicationInfo.FLAG_SYSTEM) != 0;
    }
 catch (    NameNotFoundException e) {
      throw new IllegalArgumentException("Failed to find calling package details",e);
    }
  }
  if (!exempt && isAddressUnderVpn(addr)) {
    return false;
  }
  if (!ConnectivityManager.isNetworkTypeValid(networkType)) {
    if (DBG)     log("requestRouteToHostAddress on invalid network: " + networkType);
    return false;
  }
  NetworkStateTracker tracker=mNetTrackers[networkType];
  DetailedState netState=DetailedState.DISCONNECTED;
  if (tracker != null) {
    netState=tracker.getNetworkInfo().getDetailedState();
  }
  if ((netState != DetailedState.CONNECTED && netState != DetailedState.CAPTIVE_PORTAL_CHECK) || tracker.isTeardownRequested()) {
    if (VDBG) {
      log("requestRouteToHostAddress on down network " + "(" + networkType + ") - dropped"+ " tracker="+ tracker+ " netState="+ netState+ " isTeardownRequested="+ ((tracker != null) ? tracker.isTeardownRequested() : "tracker:null"));
    }
    return false;
  }
  final int uid=Binder.getCallingUid();
  final long token=Binder.clearCallingIdentity();
  try {
    LinkProperties lp=tracker.getLinkProperties();
    boolean ok=modifyRouteToAddress(lp,addr,ADD,TO_DEFAULT_TABLE,exempt,tracker.getNetwork().netId,uid);
    if (DBG)     log("requestRouteToHostAddress ok=" + ok);
    return ok;
  }
  finally {
    Binder.restoreCallingIdentity(token);
  }
}
