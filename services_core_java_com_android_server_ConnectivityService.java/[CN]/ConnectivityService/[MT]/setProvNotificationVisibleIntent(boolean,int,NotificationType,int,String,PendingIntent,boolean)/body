{
  if (VDBG || (DBG && visible)) {
    log("setProvNotificationVisibleIntent " + notifyType + " visible="+ visible+ " networkType="+ getNetworkTypeName(networkType)+ " extraInfo="+ extraInfo+ " highPriority="+ highPriority);
  }
  Resources r=Resources.getSystem();
  NotificationManager notificationManager=(NotificationManager)mContext.getSystemService(Context.NOTIFICATION_SERVICE);
  if (visible) {
    CharSequence title;
    CharSequence details;
    int icon;
    if (notifyType == NotificationType.NO_INTERNET && networkType == ConnectivityManager.TYPE_WIFI) {
      title=r.getString(R.string.wifi_no_internet,0);
      details=r.getString(R.string.wifi_no_internet_detailed);
      icon=R.drawable.stat_notify_wifi_in_range;
    }
 else     if (notifyType == NotificationType.SIGN_IN) {
switch (networkType) {
case ConnectivityManager.TYPE_WIFI:
        title=r.getString(R.string.wifi_available_sign_in,0);
      details=r.getString(R.string.network_available_sign_in_detailed,extraInfo);
    icon=R.drawable.stat_notify_wifi_in_range;
  break;
case ConnectivityManager.TYPE_MOBILE:
case ConnectivityManager.TYPE_MOBILE_HIPRI:
title=r.getString(R.string.network_available_sign_in,0);
details=mTelephonyManager.getNetworkOperatorName();
icon=R.drawable.stat_notify_rssi_in_range;
break;
default :
title=r.getString(R.string.network_available_sign_in,0);
details=r.getString(R.string.network_available_sign_in_detailed,extraInfo);
icon=R.drawable.stat_notify_rssi_in_range;
break;
}
}
 else {
Slog.wtf(TAG,"Unknown notification type " + notifyType + "on network type "+ getNetworkTypeName(networkType));
return;
}
Notification notification=new Notification.Builder(mContext).setWhen(0).setSmallIcon(icon).setAutoCancel(true).setTicker(title).setColor(mContext.getColor(com.android.internal.R.color.system_notification_accent_color)).setContentTitle(title).setContentText(details).setContentIntent(intent).setLocalOnly(true).setPriority(highPriority ? Notification.PRIORITY_HIGH : Notification.PRIORITY_DEFAULT).setDefaults(highPriority ? Notification.DEFAULT_ALL : 0).setOnlyAlertOnce(true).build();
try {
notificationManager.notify(NOTIFICATION_ID,id,notification);
}
 catch (NullPointerException npe) {
loge("setNotificationVisible: visible notificationManager npe=" + npe);
npe.printStackTrace();
}
}
 else {
try {
notificationManager.cancel(NOTIFICATION_ID,id);
}
 catch (NullPointerException npe) {
loge("setNotificationVisible: cancel notificationManager npe=" + npe);
npe.printStackTrace();
}
}
}
