{
  final int newNetType=info.getType();
  boolean isFailover=info.isFailover();
  final NetworkStateTracker thisNet=mNetTrackers[newNetType];
  final String thisIface=thisNet.getLinkProperties().getInterfaceName();
  if (VDBG) {
    log("handleConnect: E newNetType=" + newNetType + " thisIface="+ thisIface+ " isFailover"+ isFailover);
  }
  if (mNetConfigs[newNetType].isDefault()) {
    if (mActiveDefaultNetwork != -1 && mActiveDefaultNetwork != newNetType) {
      if (isNewNetTypePreferredOverCurrentNetType(newNetType)) {
        String teardownPolicy=SystemProperties.get("net.teardownPolicy");
        if (TextUtils.equals(teardownPolicy,"keep") == false) {
          NetworkStateTracker otherNet=mNetTrackers[mActiveDefaultNetwork];
          if (DBG) {
            log("Policy requires " + otherNet.getNetworkInfo().getTypeName() + " teardown");
          }
          if (!teardown(otherNet)) {
            loge("Network declined teardown request");
            teardown(thisNet);
            return;
          }
        }
 else {
          loge("network teardown skipped due to net.teardownPolicy setting");
        }
      }
 else {
        if (VDBG) {
          log("Not broadcasting CONNECT_ACTION " + "to torn down network " + info.getTypeName());
        }
        teardown(thisNet);
        return;
      }
    }
    int thisNetId=nextNetId();
    thisNet.setNetId(thisNetId);
    try {
    }
 catch (    Exception e) {
      loge("Exception creating network :" + e);
      teardown(thisNet);
      return;
    }
synchronized (ConnectivityService.this) {
      if (mNetTransitionWakeLock.isHeld()) {
        mHandler.sendMessageDelayed(mHandler.obtainMessage(EVENT_CLEAR_NET_TRANSITION_WAKELOCK,mNetTransitionWakeLockSerialNumber,0),1000);
      }
    }
    mActiveDefaultNetwork=newNetType;
    try {
      mNetd.setDefaultNetId(thisNetId);
    }
 catch (    Exception e) {
      loge("Exception setting default network :" + e);
    }
    mDefaultInetConditionPublished=0;
    mDefaultConnectionSequence++;
    mInetConditionChangeInFlight=false;
    updateNetworkSettings(thisNet);
  }
 else {
    int thisNetId=nextNetId();
    thisNet.setNetId(thisNetId);
    try {
    }
 catch (    Exception e) {
      loge("Exception creating network :" + e);
      teardown(thisNet);
      return;
    }
  }
  thisNet.setTeardownRequested(false);
  sendConnectedBroadcastDelayed(info,getConnectivityChangeDelay());
  if (thisIface != null) {
    try {
      BatteryStatsService.getService().noteNetworkInterfaceType(thisIface,newNetType);
    }
 catch (    RemoteException e) {
    }
  }
}
