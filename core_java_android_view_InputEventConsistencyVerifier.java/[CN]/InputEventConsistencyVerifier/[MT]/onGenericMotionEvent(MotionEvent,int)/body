{
  if (!startEvent(event,nestingLevel,EVENT_TYPE_GENERIC_MOTION)) {
    return;
  }
  try {
    ensureMetaStateIsNormalized(event.getMetaState());
    final int action=event.getAction();
    final int source=event.getSource();
    final int buttonState=event.getButtonState();
    final int actionButton=event.getActionButton();
    if ((source & InputDevice.SOURCE_CLASS_POINTER) != 0) {
switch (action) {
case MotionEvent.ACTION_HOVER_ENTER:
        ensurePointerCountIsOneForThisAction(event);
      mHoverEntered=true;
    break;
case MotionEvent.ACTION_HOVER_MOVE:
  ensurePointerCountIsOneForThisAction(event);
break;
case MotionEvent.ACTION_HOVER_EXIT:
ensurePointerCountIsOneForThisAction(event);
if (!mHoverEntered) {
problem("ACTION_HOVER_EXIT without prior ACTION_HOVER_ENTER");
}
mHoverEntered=false;
break;
case MotionEvent.ACTION_SCROLL:
ensureHistorySizeIsZeroForThisAction(event);
ensurePointerCountIsOneForThisAction(event);
break;
case MotionEvent.ACTION_BUTTON_PRESS:
ensureActionButtonIsNonZeroForThisAction(event);
if ((mButtonsPressed & actionButton) != 0) {
problem("Action button for ACTION_BUTTON_PRESS event is " + actionButton + ", but it has already been pressed and "+ "has yet to be released.");
}
mButtonsPressed|=actionButton;
if (actionButton == MotionEvent.BUTTON_STYLUS_PRIMARY && (buttonState & MotionEvent.BUTTON_SECONDARY) != 0) {
mButtonsPressed|=MotionEvent.BUTTON_SECONDARY;
}
 else if (actionButton == MotionEvent.BUTTON_STYLUS_SECONDARY && (buttonState & MotionEvent.BUTTON_TERTIARY) != 0) {
mButtonsPressed|=MotionEvent.BUTTON_TERTIARY;
}
if (mButtonsPressed != buttonState) {
problem(String.format("Reported button state differs from " + "expected button state based on press and release events. " + "Is 0x%08x but expected 0x%08x.",buttonState,mButtonsPressed));
}
break;
case MotionEvent.ACTION_BUTTON_RELEASE:
ensureActionButtonIsNonZeroForThisAction(event);
if ((mButtonsPressed & actionButton) != actionButton) {
problem("Action button for ACTION_BUTTON_RELEASE event is " + actionButton + ", but it was either never pressed or has "+ "already been released.");
}
mButtonsPressed&=~actionButton;
if (actionButton == MotionEvent.BUTTON_STYLUS_PRIMARY && (buttonState & MotionEvent.BUTTON_SECONDARY) == 0) {
mButtonsPressed&=~MotionEvent.BUTTON_SECONDARY;
}
 else if (actionButton == MotionEvent.BUTTON_STYLUS_SECONDARY && (buttonState & MotionEvent.BUTTON_TERTIARY) == 0) {
mButtonsPressed&=~MotionEvent.BUTTON_TERTIARY;
}
if (mButtonsPressed != buttonState) {
problem(String.format("Reported button state differs from " + "expected button state based on press and release events. " + "Is 0x%08x but expected 0x%08x.",buttonState,mButtonsPressed));
}
break;
default :
problem("Invalid action for generic pointer event.");
break;
}
}
 else if ((source & InputDevice.SOURCE_CLASS_JOYSTICK) != 0) {
switch (action) {
case MotionEvent.ACTION_MOVE:
ensurePointerCountIsOneForThisAction(event);
break;
default :
problem("Invalid action for generic joystick event.");
break;
}
}
}
  finally {
finishEvent();
}
}
