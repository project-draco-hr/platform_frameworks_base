{
  final int outerDepth=parser.getDepth();
  int type;
  while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
    if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
      continue;
    }
switch (parser.getName()) {
case TAG_RUNTIME_PERMISSIONS:
{
        String fingerprint=parser.getAttributeValue(null,ATTR_FINGERPRINT);
        mFingerprints.put(userId,fingerprint);
        final boolean defaultsGranted=Build.FINGERPRINT.equals(fingerprint);
        mDefaultPermissionsGranted.put(userId,defaultsGranted);
      }
    break;
case TAG_PACKAGE:
{
    String name=parser.getAttributeValue(null,ATTR_NAME);
    PackageSetting ps=mPackages.get(name);
    if (ps == null) {
      Slog.w(PackageManagerService.TAG,"Unknown package:" + name);
      XmlUtils.skipCurrentTag(parser);
      continue;
    }
    parsePermissionsLPr(parser,ps.getPermissionsState(),userId);
  }
break;
case TAG_SHARED_USER:
{
String name=parser.getAttributeValue(null,ATTR_NAME);
SharedUserSetting sus=mSharedUsers.get(name);
if (sus == null) {
  Slog.w(PackageManagerService.TAG,"Unknown shared user:" + name);
  XmlUtils.skipCurrentTag(parser);
  continue;
}
parsePermissionsLPr(parser,sus.getPermissionsState(),userId);
}
break;
case TAG_RESTORED_RUNTIME_PERMISSIONS:
{
final String pkgName=parser.getAttributeValue(null,ATTR_PACKAGE_NAME);
parseRestoredRuntimePermissionsLPr(parser,pkgName,userId);
}
break;
}
}
}
