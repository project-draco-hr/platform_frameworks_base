{
  AtomicFile destination=new AtomicFile(getUserRuntimePermissionsFile(userId));
  ArrayMap<String,Set<String>> permissionsForPackage=new ArrayMap<>();
  ArrayMap<String,Set<String>> permissionsForSharedUser=new ArrayMap<>();
synchronized (mLock) {
    mWriteScheduled.delete(userId);
    final int packageCount=mPackages.size();
    for (int i=0; i < packageCount; i++) {
      String packageName=mPackages.keyAt(i);
      PackageSetting packageSetting=mPackages.valueAt(i);
      if (packageSetting.sharedUser == null) {
        PermissionsState permissionsState=packageSetting.getPermissionsState();
        Set<String> permissions=permissionsState.getRuntimePermissions(userId);
        if (!permissions.isEmpty()) {
          permissionsForPackage.put(packageName,permissions);
        }
      }
    }
    final int sharedUserCount=mSharedUsers.size();
    for (int i=0; i < sharedUserCount; i++) {
      String sharedUserName=mSharedUsers.keyAt(i);
      SharedUserSetting sharedUser=mSharedUsers.valueAt(i);
      PermissionsState permissionsState=sharedUser.getPermissionsState();
      Set<String> permissions=permissionsState.getRuntimePermissions(userId);
      if (!permissions.isEmpty()) {
        permissionsForSharedUser.put(sharedUserName,permissions);
      }
    }
  }
  FileOutputStream out=null;
  try {
    out=destination.startWrite();
    XmlSerializer serializer=Xml.newSerializer();
    serializer.setOutput(out,"utf-8");
    serializer.setFeature("http://xmlpull.org/v1/doc/features.html#indent-output",true);
    serializer.startDocument(null,true);
    serializer.startTag(null,TAG_RUNTIME_PERMISSIONS);
    final int packageCount=permissionsForPackage.size();
    for (int i=0; i < packageCount; i++) {
      String packageName=permissionsForPackage.keyAt(i);
      Set<String> permissions=permissionsForPackage.valueAt(i);
      serializer.startTag(null,TAG_PACKAGE);
      serializer.attribute(null,ATTR_NAME,packageName);
      writePermissions(serializer,permissions);
      serializer.endTag(null,TAG_PACKAGE);
    }
    final int sharedUserCount=permissionsForSharedUser.size();
    for (int i=0; i < sharedUserCount; i++) {
      String packageName=permissionsForSharedUser.keyAt(i);
      Set<String> permissions=permissionsForSharedUser.valueAt(i);
      serializer.startTag(null,TAG_SHARED_USER);
      serializer.attribute(null,ATTR_NAME,packageName);
      writePermissions(serializer,permissions);
      serializer.endTag(null,TAG_SHARED_USER);
    }
    serializer.endTag(null,TAG_RUNTIME_PERMISSIONS);
    serializer.endDocument();
    destination.finishWrite(out);
  }
 catch (  IOException e) {
    Slog.wtf(PackageManagerService.TAG,"Failed to write settings, restoring backup",e);
    destination.failWrite(out);
  }
 finally {
    IoUtils.closeQuietly(out);
  }
}
