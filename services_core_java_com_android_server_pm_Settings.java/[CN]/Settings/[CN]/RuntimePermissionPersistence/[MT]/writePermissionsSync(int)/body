{
  AtomicFile destination=new AtomicFile(getUserRuntimePermissionsFile(userId));
  ArrayMap<String,List<PermissionState>> permissionsForPackage=new ArrayMap<>();
  ArrayMap<String,List<PermissionState>> permissionsForSharedUser=new ArrayMap<>();
synchronized (mLock) {
    mWriteScheduled.delete(userId);
    final int packageCount=mPackages.size();
    for (int i=0; i < packageCount; i++) {
      String packageName=mPackages.keyAt(i);
      PackageSetting packageSetting=mPackages.valueAt(i);
      if (packageSetting.sharedUser == null) {
        PermissionsState permissionsState=packageSetting.getPermissionsState();
        List<PermissionState> permissionsStates=permissionsState.getRuntimePermissionStates(userId);
        if (!permissionsStates.isEmpty()) {
          permissionsForPackage.put(packageName,permissionsStates);
        }
      }
    }
    final int sharedUserCount=mSharedUsers.size();
    for (int i=0; i < sharedUserCount; i++) {
      String sharedUserName=mSharedUsers.keyAt(i);
      SharedUserSetting sharedUser=mSharedUsers.valueAt(i);
      PermissionsState permissionsState=sharedUser.getPermissionsState();
      List<PermissionState> permissionsStates=permissionsState.getRuntimePermissionStates(userId);
      if (!permissionsStates.isEmpty()) {
        permissionsForSharedUser.put(sharedUserName,permissionsStates);
      }
    }
  }
  FileOutputStream out=null;
  try {
    out=destination.startWrite();
    XmlSerializer serializer=Xml.newSerializer();
    serializer.setOutput(out,StandardCharsets.UTF_8.name());
    serializer.setFeature("http://xmlpull.org/v1/doc/features.html#indent-output",true);
    serializer.startDocument(null,true);
    serializer.startTag(null,TAG_RUNTIME_PERMISSIONS);
    String fingerprint=mFingerprints.get(userId);
    if (fingerprint != null) {
      serializer.attribute(null,ATTR_FINGERPRINT,fingerprint);
    }
    final int packageCount=permissionsForPackage.size();
    for (int i=0; i < packageCount; i++) {
      String packageName=permissionsForPackage.keyAt(i);
      List<PermissionState> permissionStates=permissionsForPackage.valueAt(i);
      serializer.startTag(null,TAG_PACKAGE);
      serializer.attribute(null,ATTR_NAME,packageName);
      writePermissions(serializer,permissionStates);
      serializer.endTag(null,TAG_PACKAGE);
    }
    final int sharedUserCount=permissionsForSharedUser.size();
    for (int i=0; i < sharedUserCount; i++) {
      String packageName=permissionsForSharedUser.keyAt(i);
      List<PermissionState> permissionStates=permissionsForSharedUser.valueAt(i);
      serializer.startTag(null,TAG_SHARED_USER);
      serializer.attribute(null,ATTR_NAME,packageName);
      writePermissions(serializer,permissionStates);
      serializer.endTag(null,TAG_SHARED_USER);
    }
    serializer.endTag(null,TAG_RUNTIME_PERMISSIONS);
    if (mRestoredUserGrants.get(userId) != null) {
      ArrayMap<String,ArraySet<RestoredPermissionGrant>> restoredGrants=mRestoredUserGrants.get(userId);
      if (restoredGrants != null) {
        final int pkgCount=restoredGrants.size();
        for (int i=0; i < pkgCount; i++) {
          final ArraySet<RestoredPermissionGrant> pkgGrants=restoredGrants.valueAt(i);
          if (pkgGrants != null && pkgGrants.size() > 0) {
            final String pkgName=restoredGrants.keyAt(i);
            serializer.startTag(null,TAG_RESTORED_RUNTIME_PERMISSIONS);
            serializer.attribute(null,ATTR_PACKAGE_NAME,pkgName);
            final int N=pkgGrants.size();
            for (int z=0; z < N; z++) {
              RestoredPermissionGrant g=pkgGrants.valueAt(z);
              serializer.startTag(null,TAG_PERMISSION_ENTRY);
              serializer.attribute(null,ATTR_NAME,g.permissionName);
              if (g.granted) {
                serializer.attribute(null,ATTR_GRANTED,"true");
              }
              if ((g.grantBits & FLAG_PERMISSION_USER_SET) != 0) {
                serializer.attribute(null,ATTR_USER_SET,"true");
              }
              if ((g.grantBits & FLAG_PERMISSION_USER_FIXED) != 0) {
                serializer.attribute(null,ATTR_USER_FIXED,"true");
              }
              if ((g.grantBits & FLAG_PERMISSION_REVOKE_ON_UPGRADE) != 0) {
                serializer.attribute(null,ATTR_REVOKE_ON_UPGRADE,"true");
              }
              serializer.endTag(null,TAG_PERMISSION_ENTRY);
            }
            serializer.endTag(null,TAG_RESTORED_RUNTIME_PERMISSIONS);
          }
        }
      }
    }
    serializer.endDocument();
    destination.finishWrite(out);
    if (Build.FINGERPRINT.equals(fingerprint)) {
      mDefaultPermissionsGranted.put(userId,true);
    }
  }
 catch (  Throwable t) {
    Slog.wtf(PackageManagerService.TAG,"Failed to write settings, restoring backup",t);
    destination.failWrite(out);
  }
 finally {
    IoUtils.closeQuietly(out);
  }
}
