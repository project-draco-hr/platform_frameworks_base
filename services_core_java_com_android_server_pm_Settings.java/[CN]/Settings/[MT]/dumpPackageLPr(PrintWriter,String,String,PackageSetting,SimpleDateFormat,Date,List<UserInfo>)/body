{
  if (checkinTag != null) {
    pw.print(checkinTag);
    pw.print(",");
    pw.print(ps.realName != null ? ps.realName : ps.name);
    pw.print(",");
    pw.print(ps.appId);
    pw.print(",");
    pw.print(ps.versionCode);
    pw.print(",");
    pw.print(ps.firstInstallTime);
    pw.print(",");
    pw.print(ps.lastUpdateTime);
    pw.print(",");
    pw.print(ps.installerPackageName != null ? ps.installerPackageName : "?");
    pw.println();
    if (ps.pkg != null) {
      pw.print(checkinTag);
      pw.print("-");
      pw.print("splt,");
      pw.print("base,");
      pw.println(ps.pkg.baseRevisionCode);
      if (ps.pkg.splitNames != null) {
        for (int i=0; i < ps.pkg.splitNames.length; i++) {
          pw.print(checkinTag);
          pw.print("-");
          pw.print("splt,");
          pw.print(ps.pkg.splitNames[i]);
          pw.print(",");
          pw.println(ps.pkg.splitRevisionCodes[i]);
        }
      }
    }
    for (    UserInfo user : users) {
      pw.print(checkinTag);
      pw.print("-");
      pw.print("usr");
      pw.print(",");
      pw.print(user.id);
      pw.print(",");
      pw.print(ps.getInstalled(user.id) ? "I" : "i");
      pw.print(ps.getHidden(user.id) ? "B" : "b");
      pw.print(ps.getStopped(user.id) ? "S" : "s");
      pw.print(ps.getNotLaunched(user.id) ? "l" : "L");
      pw.print(",");
      pw.print(ps.getEnabled(user.id));
      String lastDisabledAppCaller=ps.getLastDisabledAppCaller(user.id);
      pw.print(",");
      pw.print(lastDisabledAppCaller != null ? lastDisabledAppCaller : "?");
      pw.println();
    }
    return;
  }
  pw.print(prefix);
  pw.print("Package [");
  pw.print(ps.realName != null ? ps.realName : ps.name);
  pw.print("] (");
  pw.print(Integer.toHexString(System.identityHashCode(ps)));
  pw.println("):");
  if (ps.frozen) {
    pw.print(prefix);
    pw.println("  FROZEN!");
  }
  if (ps.realName != null) {
    pw.print(prefix);
    pw.print("  compat name=");
    pw.println(ps.name);
  }
  pw.print(prefix);
  pw.print("  userId=");
  pw.println(ps.appId);
  if (ps.sharedUser != null) {
    pw.print(prefix);
    pw.print("  sharedUser=");
    pw.println(ps.sharedUser);
  }
  pw.print(prefix);
  pw.print("  pkg=");
  pw.println(ps.pkg);
  pw.print(prefix);
  pw.print("  codePath=");
  pw.println(ps.codePathString);
  pw.print(prefix);
  pw.print("  resourcePath=");
  pw.println(ps.resourcePathString);
  pw.print(prefix);
  pw.print("  legacyNativeLibraryDir=");
  pw.println(ps.legacyNativeLibraryPathString);
  pw.print(prefix);
  pw.print("  primaryCpuAbi=");
  pw.println(ps.primaryCpuAbiString);
  pw.print(prefix);
  pw.print("  secondaryCpuAbi=");
  pw.println(ps.secondaryCpuAbiString);
  pw.print(prefix);
  pw.print("  versionCode=");
  pw.print(ps.versionCode);
  if (ps.pkg != null) {
    pw.print(" targetSdk=");
    pw.print(ps.pkg.applicationInfo.targetSdkVersion);
  }
  pw.println();
  if (ps.pkg != null) {
    pw.print(prefix);
    pw.print("  versionName=");
    pw.println(ps.pkg.mVersionName);
    pw.print(prefix);
    pw.print("  splits=");
    dumpSplitNames(pw,ps.pkg);
    pw.println();
    pw.print(prefix);
    pw.print("  applicationInfo=");
    pw.println(ps.pkg.applicationInfo.toString());
    pw.print(prefix);
    pw.print("  flags=");
    printFlags(pw,ps.pkg.applicationInfo.flags,FLAG_DUMP_SPEC);
    pw.println();
    pw.print(prefix);
    pw.print("  priavateFlags=");
    printFlags(pw,ps.pkg.applicationInfo.privateFlags,PRIVATE_FLAG_DUMP_SPEC);
    pw.println();
    pw.print(prefix);
    pw.print("  dataDir=");
    pw.println(ps.pkg.applicationInfo.dataDir);
    pw.print(prefix);
    pw.print("  supportsScreens=[");
    boolean first=true;
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SMALL_SCREENS) != 0) {
      if (!first)       pw.print(", ");
      first=false;
      pw.print("small");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_NORMAL_SCREENS) != 0) {
      if (!first)       pw.print(", ");
      first=false;
      pw.print("medium");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_LARGE_SCREENS) != 0) {
      if (!first)       pw.print(", ");
      first=false;
      pw.print("large");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_XLARGE_SCREENS) != 0) {
      if (!first)       pw.print(", ");
      first=false;
      pw.print("xlarge");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_RESIZEABLE_FOR_SCREENS) != 0) {
      if (!first)       pw.print(", ");
      first=false;
      pw.print("resizeable");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SCREEN_DENSITIES) != 0) {
      if (!first)       pw.print(", ");
      first=false;
      pw.print("anyDensity");
    }
    pw.println("]");
    if (ps.pkg.libraryNames != null && ps.pkg.libraryNames.size() > 0) {
      pw.print(prefix);
      pw.println("  libraries:");
      for (int i=0; i < ps.pkg.libraryNames.size(); i++) {
        pw.print(prefix);
        pw.print("    ");
        pw.println(ps.pkg.libraryNames.get(i));
      }
    }
    if (ps.pkg.usesLibraries != null && ps.pkg.usesLibraries.size() > 0) {
      pw.print(prefix);
      pw.println("  usesLibraries:");
      for (int i=0; i < ps.pkg.usesLibraries.size(); i++) {
        pw.print(prefix);
        pw.print("    ");
        pw.println(ps.pkg.usesLibraries.get(i));
      }
    }
    if (ps.pkg.usesOptionalLibraries != null && ps.pkg.usesOptionalLibraries.size() > 0) {
      pw.print(prefix);
      pw.println("  usesOptionalLibraries:");
      for (int i=0; i < ps.pkg.usesOptionalLibraries.size(); i++) {
        pw.print(prefix);
        pw.print("    ");
        pw.println(ps.pkg.usesOptionalLibraries.get(i));
      }
    }
    if (ps.pkg.usesLibraryFiles != null && ps.pkg.usesLibraryFiles.length > 0) {
      pw.print(prefix);
      pw.println("  usesLibraryFiles:");
      for (int i=0; i < ps.pkg.usesLibraryFiles.length; i++) {
        pw.print(prefix);
        pw.print("    ");
        pw.println(ps.pkg.usesLibraryFiles[i]);
      }
    }
  }
  pw.print(prefix);
  pw.print("  timeStamp=");
  date.setTime(ps.timeStamp);
  pw.println(sdf.format(date));
  pw.print(prefix);
  pw.print("  firstInstallTime=");
  date.setTime(ps.firstInstallTime);
  pw.println(sdf.format(date));
  pw.print(prefix);
  pw.print("  lastUpdateTime=");
  date.setTime(ps.lastUpdateTime);
  pw.println(sdf.format(date));
  if (ps.installerPackageName != null) {
    pw.print(prefix);
    pw.print("  installerPackageName=");
    pw.println(ps.installerPackageName);
  }
  if (ps.volumeUuid != null) {
    pw.print(prefix);
    pw.print("  volumeUuid=");
    pw.println(ps.volumeUuid);
  }
  pw.print(prefix);
  pw.print("  signatures=");
  pw.println(ps.signatures);
  pw.print(prefix);
  pw.print("  installPermissionsFixed=");
  pw.print(ps.installPermissionsFixed);
  pw.print(" installStatus=");
  pw.println(ps.installStatus);
  pw.print(prefix);
  pw.print("  pkgFlags=");
  printFlags(pw,ps.pkgFlags,FLAG_DUMP_SPEC);
  pw.println();
  if (ps.sharedUser == null) {
    PermissionsState permissionsState=ps.getPermissionsState();
    dumpInstallPermissionsLPr(pw,prefix + "  ",permissionsState);
  }
  for (  UserInfo user : users) {
    pw.print(prefix);
    pw.print("  User ");
    pw.print(user.id);
    pw.print(": ");
    pw.print(" installed=");
    pw.print(ps.getInstalled(user.id));
    pw.print(" hidden=");
    pw.print(ps.getHidden(user.id));
    pw.print(" stopped=");
    pw.print(ps.getStopped(user.id));
    pw.print(" notLaunched=");
    pw.print(ps.getNotLaunched(user.id));
    pw.print(" enabled=");
    pw.println(ps.getEnabled(user.id));
    String lastDisabledAppCaller=ps.getLastDisabledAppCaller(user.id);
    if (lastDisabledAppCaller != null) {
      pw.print(prefix);
      pw.print("    lastDisabledCaller: ");
      pw.println(lastDisabledAppCaller);
    }
    if (ps.sharedUser == null) {
      PermissionsState permissionsState=ps.getPermissionsState();
      dumpGidsLPr(pw,prefix + "    ",permissionsState.computeGids(user.id));
      dumpRuntimePermissionsLPr(pw,prefix + "    ",permissionsState.getRuntimePermissions(user.id));
    }
    ArraySet<String> cmp=ps.getDisabledComponents(user.id);
    if (cmp != null && cmp.size() > 0) {
      pw.print(prefix);
      pw.println("    disabledComponents:");
      for (      String s : cmp) {
        pw.print(prefix);
        pw.print("    ");
        pw.println(s);
      }
    }
    cmp=ps.getEnabledComponents(user.id);
    if (cmp != null && cmp.size() > 0) {
      pw.print(prefix);
      pw.println("    enabledComponents:");
      for (      String s : cmp) {
        pw.print(prefix);
        pw.print("    ");
        pw.println(s);
      }
    }
  }
}
