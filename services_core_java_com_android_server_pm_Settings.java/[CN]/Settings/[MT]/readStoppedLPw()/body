{
  FileInputStream str=null;
  if (mBackupStoppedPackagesFilename.exists()) {
    try {
      str=new FileInputStream(mBackupStoppedPackagesFilename);
      mReadMessages.append("Reading from backup stopped packages file\n");
      PackageManagerService.reportSettingsProblem(Log.INFO,"Need to read from backup stopped packages file");
      if (mSettingsFilename.exists()) {
        Slog.w(PackageManagerService.TAG,"Cleaning up stopped packages file " + mStoppedPackagesFilename);
        mStoppedPackagesFilename.delete();
      }
    }
 catch (    java.io.IOException e) {
    }
  }
  try {
    if (str == null) {
      if (!mStoppedPackagesFilename.exists()) {
        mReadMessages.append("No stopped packages file found\n");
        PackageManagerService.reportSettingsProblem(Log.INFO,"No stopped packages file file; assuming all started");
        for (        PackageSetting pkg : mPackages.values()) {
          pkg.setStopped(false,0);
          pkg.setNotLaunched(false,0);
        }
        return;
      }
      str=new FileInputStream(mStoppedPackagesFilename);
    }
    final XmlPullParser parser=Xml.newPullParser();
    parser.setInput(str,null);
    int type;
    while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
      ;
    }
    if (type != XmlPullParser.START_TAG) {
      mReadMessages.append("No start tag found in stopped packages file\n");
      PackageManagerService.reportSettingsProblem(Log.WARN,"No start tag found in package manager stopped packages");
      return;
    }
    int outerDepth=parser.getDepth();
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
      if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
        continue;
      }
      String tagName=parser.getName();
      if (tagName.equals(TAG_PACKAGE)) {
        String name=parser.getAttributeValue(null,ATTR_NAME);
        PackageSetting ps=mPackages.get(name);
        if (ps != null) {
          ps.setStopped(true,0);
          if ("1".equals(parser.getAttributeValue(null,ATTR_NOT_LAUNCHED))) {
            ps.setNotLaunched(true,0);
          }
        }
 else {
          Slog.w(PackageManagerService.TAG,"No package known for stopped package: " + name);
        }
        XmlUtils.skipCurrentTag(parser);
      }
 else {
        Slog.w(PackageManagerService.TAG,"Unknown element under <stopped-packages>: " + parser.getName());
        XmlUtils.skipCurrentTag(parser);
      }
    }
    str.close();
  }
 catch (  XmlPullParserException e) {
    mReadMessages.append("Error reading: " + e.toString());
    PackageManagerService.reportSettingsProblem(Log.ERROR,"Error reading stopped packages: " + e);
    Log.wtf(PackageManagerService.TAG,"Error reading package manager stopped packages",e);
  }
catch (  java.io.IOException e) {
    mReadMessages.append("Error reading: " + e.toString());
    PackageManagerService.reportSettingsProblem(Log.ERROR,"Error reading settings: " + e);
    Log.wtf(PackageManagerService.TAG,"Error reading package manager stopped packages",e);
  }
}
