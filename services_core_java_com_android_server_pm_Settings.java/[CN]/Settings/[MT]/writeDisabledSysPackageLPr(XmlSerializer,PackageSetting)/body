{
  serializer.startTag(null,"updated-package");
  serializer.attribute(null,ATTR_NAME,pkg.name);
  if (pkg.realName != null) {
    serializer.attribute(null,"realName",pkg.realName);
  }
  serializer.attribute(null,"codePath",pkg.codePathString);
  serializer.attribute(null,"ft",Long.toHexString(pkg.timeStamp));
  serializer.attribute(null,"it",Long.toHexString(pkg.firstInstallTime));
  serializer.attribute(null,"ut",Long.toHexString(pkg.lastUpdateTime));
  serializer.attribute(null,"version",String.valueOf(pkg.versionCode));
  if (!pkg.resourcePathString.equals(pkg.codePathString)) {
    serializer.attribute(null,"resourcePath",pkg.resourcePathString);
  }
  if (pkg.legacyNativeLibraryPathString != null) {
    serializer.attribute(null,"nativeLibraryPath",pkg.legacyNativeLibraryPathString);
  }
  if (pkg.primaryCpuAbiString != null) {
    serializer.attribute(null,"primaryCpuAbi",pkg.primaryCpuAbiString);
  }
  if (pkg.secondaryCpuAbiString != null) {
    serializer.attribute(null,"secondaryCpuAbi",pkg.secondaryCpuAbiString);
  }
  if (pkg.cpuAbiOverrideString != null) {
    serializer.attribute(null,"cpuAbiOverride",pkg.cpuAbiOverrideString);
  }
  if (pkg.sharedUser == null) {
    serializer.attribute(null,"userId",Integer.toString(pkg.appId));
  }
 else {
    serializer.attribute(null,"sharedUserId",Integer.toString(pkg.appId));
  }
  serializer.startTag(null,"perms");
  if (pkg.sharedUser == null) {
    for (    final String name : pkg.grantedPermissions) {
      BasePermission bp=mPermissions.get(name);
      if (bp != null) {
        serializer.startTag(null,TAG_ITEM);
        serializer.attribute(null,ATTR_NAME,name);
        serializer.endTag(null,TAG_ITEM);
      }
    }
  }
  serializer.endTag(null,"perms");
  serializer.endTag(null,"updated-package");
}
