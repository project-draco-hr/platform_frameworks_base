{
  for (  PackageSetting ps : mPackages.values()) {
    if ((ps.pkgFlags & ApplicationInfo.FLAG_SYSTEM) != 0 && ps.pkg != null && ps.pkg.preferredActivityFilters != null) {
      ArrayList<PackageParser.ActivityIntentInfo> intents=ps.pkg.preferredActivityFilters;
      for (int i=0; i < intents.size(); i++) {
        PackageParser.ActivityIntentInfo aii=intents.get(i);
        applyDefaultPreferredActivityLPw(service,aii,new ComponentName(ps.name,aii.activity.className),userId);
      }
    }
  }
  File preferredDir=new File(Environment.getRootDirectory(),"etc/preferred-apps");
  if (!preferredDir.exists() || !preferredDir.isDirectory()) {
    return;
  }
  if (!preferredDir.canRead()) {
    Slog.w(TAG,"Directory " + preferredDir + " cannot be read");
    return;
  }
  for (  File f : preferredDir.listFiles()) {
    if (!f.getPath().endsWith(".xml")) {
      Slog.i(TAG,"Non-xml file " + f + " in "+ preferredDir+ " directory, ignoring");
      continue;
    }
    if (!f.canRead()) {
      Slog.w(TAG,"Preferred apps file " + f + " cannot be read");
      continue;
    }
    if (PackageManagerService.DEBUG_PREFERRED)     Log.d(TAG,"Reading default preferred " + f);
    FileInputStream str=null;
    try {
      str=new FileInputStream(f);
      XmlPullParser parser=Xml.newPullParser();
      parser.setInput(str,null);
      int type;
      while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
        ;
      }
      if (type != XmlPullParser.START_TAG) {
        Slog.w(TAG,"Preferred apps file " + f + " does not have start tag");
        continue;
      }
      if (!"preferred-activities".equals(parser.getName())) {
        Slog.w(TAG,"Preferred apps file " + f + " does not start with 'preferred-activities'");
        continue;
      }
      readDefaultPreferredActivitiesLPw(service,parser,userId);
    }
 catch (    XmlPullParserException e) {
      Slog.w(TAG,"Error reading apps file " + f,e);
    }
catch (    IOException e) {
      Slog.w(TAG,"Error reading apps file " + f,e);
    }
 finally {
      if (str != null) {
        try {
          str.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
}
