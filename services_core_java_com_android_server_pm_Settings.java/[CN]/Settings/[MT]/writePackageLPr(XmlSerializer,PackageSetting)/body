{
  serializer.startTag(null,"package");
  serializer.attribute(null,ATTR_NAME,pkg.name);
  if (pkg.realName != null) {
    serializer.attribute(null,"realName",pkg.realName);
  }
  serializer.attribute(null,"codePath",pkg.codePathString);
  if (!pkg.resourcePathString.equals(pkg.codePathString)) {
    serializer.attribute(null,"resourcePath",pkg.resourcePathString);
  }
  if (pkg.legacyNativeLibraryPathString != null) {
    serializer.attribute(null,"nativeLibraryPath",pkg.legacyNativeLibraryPathString);
  }
  if (pkg.primaryCpuAbiString != null) {
    serializer.attribute(null,"primaryCpuAbi",pkg.primaryCpuAbiString);
  }
  if (pkg.secondaryCpuAbiString != null) {
    serializer.attribute(null,"secondaryCpuAbi",pkg.secondaryCpuAbiString);
  }
  if (pkg.cpuAbiOverrideString != null) {
    serializer.attribute(null,"cpuAbiOverride",pkg.cpuAbiOverrideString);
  }
  serializer.attribute(null,"publicFlags",Integer.toString(pkg.pkgFlags));
  serializer.attribute(null,"privateFlags",Integer.toString(pkg.pkgPrivateFlags));
  serializer.attribute(null,"ft",Long.toHexString(pkg.timeStamp));
  serializer.attribute(null,"it",Long.toHexString(pkg.firstInstallTime));
  serializer.attribute(null,"ut",Long.toHexString(pkg.lastUpdateTime));
  serializer.attribute(null,"version",String.valueOf(pkg.versionCode));
  if (pkg.sharedUser == null) {
    serializer.attribute(null,"userId",Integer.toString(pkg.appId));
  }
 else {
    serializer.attribute(null,"sharedUserId",Integer.toString(pkg.appId));
  }
  if (pkg.uidError) {
    serializer.attribute(null,"uidError","true");
  }
  if (pkg.installStatus == PackageSettingBase.PKG_INSTALL_INCOMPLETE) {
    serializer.attribute(null,"installStatus","false");
  }
  if (pkg.installerPackageName != null) {
    serializer.attribute(null,"installer",pkg.installerPackageName);
  }
  if (pkg.volumeUuid != null) {
    serializer.attribute(null,"volumeUuid",pkg.volumeUuid);
  }
  pkg.signatures.writeXml(serializer,"sigs",mPastSignatures);
  writePermissionsLPr(serializer,pkg.getPermissionsState().getInstallPermissionStates());
  writeSigningKeySetLPr(serializer,pkg.keySetData);
  writeUpgradeKeySetsLPr(serializer,pkg.keySetData);
  writeKeySetAliasesLPr(serializer,pkg.keySetData);
  writeDomainVerificationsLPr(serializer,pkg.verificationInfo);
  serializer.endTag(null,"package");
}
