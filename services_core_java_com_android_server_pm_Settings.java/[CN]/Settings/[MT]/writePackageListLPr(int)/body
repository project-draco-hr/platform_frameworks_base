{
  final List<UserInfo> users=UserManagerService.getInstance().getUsers(true);
  int[] userIds=new int[users.size()];
  for (int i=0; i < userIds.length; i++) {
    userIds[i]=users.get(i).id;
  }
  if (creatingUserId != -1) {
    userIds=ArrayUtils.appendInt(userIds,creatingUserId);
  }
  File tempFile=new File(mPackageListFilename.getAbsolutePath() + ".tmp");
  JournaledFile journal=new JournaledFile(mPackageListFilename,tempFile);
  final File writeTarget=journal.chooseForWrite();
  FileOutputStream fstr=null;
  BufferedOutputStream str=null;
  try {
    fstr=new FileOutputStream(writeTarget);
    str=new BufferedOutputStream(fstr);
    FileUtils.setPermissions(fstr.getFD(),0640,SYSTEM_UID,PACKAGE_INFO_GID);
    StringBuilder sb=new StringBuilder();
    for (    final PackageSetting pkg : mPackages.values()) {
      if (pkg.pkg == null || pkg.pkg.applicationInfo == null) {
        Slog.w(TAG,"Skipping " + pkg + " due to missing metadata");
        continue;
      }
      final ApplicationInfo ai=pkg.pkg.applicationInfo;
      final String dataPath=new File(ai.dataDir).getCanonicalPath();
      final boolean isDebug=(ai.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0;
      final int[] gids=pkg.getPermissionsState().computeGids(userIds);
      if (dataPath.indexOf(" ") >= 0)       continue;
      sb.setLength(0);
      sb.append(ai.packageName);
      sb.append(" ");
      sb.append((int)ai.uid);
      sb.append(isDebug ? " 1 " : " 0 ");
      sb.append(dataPath);
      sb.append(" ");
      sb.append(ai.seinfo);
      sb.append(" ");
      if (gids != null && gids.length > 0) {
        sb.append(gids[0]);
        for (int i=1; i < gids.length; i++) {
          sb.append(",");
          sb.append(gids[i]);
        }
      }
 else {
        sb.append("none");
      }
      sb.append("\n");
      str.write(sb.toString().getBytes());
    }
    str.flush();
    FileUtils.sync(fstr);
    str.close();
    journal.commit();
  }
 catch (  Exception e) {
    Slog.wtf(TAG,"Failed to write packages.list",e);
    IoUtils.closeQuietly(str);
    journal.rollback();
  }
}
