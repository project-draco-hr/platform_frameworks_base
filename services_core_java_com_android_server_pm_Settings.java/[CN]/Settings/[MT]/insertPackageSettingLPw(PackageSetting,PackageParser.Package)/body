{
  p.pkg=pkg;
  final String codePath=pkg.applicationInfo.getCodePath();
  final String resourcePath=pkg.applicationInfo.getResourcePath();
  if (!codePath.equalsIgnoreCase(p.codePathString)) {
    Slog.w(PackageManagerService.TAG,"Code path for pkg : " + p.pkg.packageName + " changing from "+ p.codePathString+ " to "+ codePath);
    p.codePath=new File(codePath);
    p.codePathString=codePath;
  }
  if (!resourcePath.equalsIgnoreCase(p.resourcePathString)) {
    Slog.w(PackageManagerService.TAG,"Resource path for pkg : " + p.pkg.packageName + " changing from "+ p.resourcePathString+ " to "+ resourcePath);
    p.resourcePath=new File(resourcePath);
    p.resourcePathString=resourcePath;
  }
  final String nativeLibraryRoot=pkg.applicationInfo.legacyNativeLibraryDir;
  if (nativeLibraryRoot != null && !nativeLibraryRoot.equalsIgnoreCase(p.legacyNativeLibraryPathString)) {
    p.legacyNativeLibraryPathString=nativeLibraryRoot;
  }
  p.primaryCpuAbiString=pkg.applicationInfo.primaryCpuAbi;
  p.secondaryCpuAbiString=pkg.applicationInfo.secondaryCpuAbi;
  if (pkg.mVersionCode != p.versionCode) {
    p.versionCode=pkg.mVersionCode;
  }
  if (p.signatures.mSignatures == null) {
    p.signatures.assignSignatures(pkg.mSignatures);
  }
  if (pkg.applicationInfo.flags != p.pkgFlags) {
    p.pkgFlags=pkg.applicationInfo.flags;
  }
  if (p.sharedUser != null && p.sharedUser.signatures.mSignatures == null) {
    p.sharedUser.signatures.assignSignatures(pkg.mSignatures);
  }
  addPackageSettingLPw(p,pkg.packageName,p.sharedUser);
}
