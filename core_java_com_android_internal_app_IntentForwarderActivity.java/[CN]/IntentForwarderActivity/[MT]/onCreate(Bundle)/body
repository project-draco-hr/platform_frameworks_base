{
  super.onCreate(savedInstanceState);
  Intent intentReceived=getIntent();
  String className=intentReceived.getComponent().getClassName();
  final int targetUserId;
  final int userMessageId;
  if (className.equals(FORWARD_INTENT_TO_PARENT)) {
    userMessageId=com.android.internal.R.string.forward_intent_to_owner;
    targetUserId=getProfileParent();
  }
 else   if (className.equals(FORWARD_INTENT_TO_MANAGED_PROFILE)) {
    userMessageId=com.android.internal.R.string.forward_intent_to_work;
    targetUserId=getManagedProfile();
  }
 else {
    Slog.wtf(TAG,IntentForwarderActivity.class.getName() + " cannot be called directly");
    userMessageId=-1;
    targetUserId=UserHandle.USER_NULL;
  }
  if (targetUserId == UserHandle.USER_NULL) {
    finish();
    return;
  }
  Intent newIntent=new Intent(intentReceived);
  newIntent.setComponent(null);
  newIntent.setPackage(null);
  newIntent.addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT | Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP);
  int callingUserId=getUserId();
  if (canForward(newIntent,targetUserId)) {
    if (Intent.ACTION_CHOOSER.equals(newIntent.getAction())) {
      Intent innerIntent=(Intent)newIntent.getParcelableExtra(Intent.EXTRA_INTENT);
      innerIntent.prepareToLeaveUser(callingUserId);
    }
 else {
      newIntent.prepareToLeaveUser(callingUserId);
    }
    final android.content.pm.ResolveInfo ri=getPackageManager().resolveActivityAsUser(newIntent,MATCH_DEFAULT_ONLY,targetUserId);
    final boolean shouldShowDisclosure=ri == null || ri.activityInfo == null || !"android".equals(ri.activityInfo.packageName) || !(ResolverActivity.class.getName().equals(ri.activityInfo.name) || ChooserActivity.class.getName().equals(ri.activityInfo.name));
    try {
      startActivityAsCaller(newIntent,null,false,targetUserId);
    }
 catch (    RuntimeException e) {
      int launchedFromUid=-1;
      String launchedFromPackage="?";
      try {
        launchedFromUid=ActivityManagerNative.getDefault().getLaunchedFromUid(getActivityToken());
        launchedFromPackage=ActivityManagerNative.getDefault().getLaunchedFromPackage(getActivityToken());
      }
 catch (      RemoteException ignored) {
      }
      Slog.wtf(TAG,"Unable to launch as UID " + launchedFromUid + " package "+ launchedFromPackage+ ", while running in "+ ActivityThread.currentProcessName(),e);
    }
    if (shouldShowDisclosure) {
      Toast.makeText(this,getString(userMessageId),Toast.LENGTH_LONG).show();
    }
  }
 else {
    Slog.wtf(TAG,"the intent: " + newIntent + " cannot be forwarded from user "+ callingUserId+ " to user "+ targetUserId);
  }
  finish();
}
