{
  ArrayList<TextRunSegment> segments=breaker.runSegments;
  float maxHeight=0;
  float maxHeightLeading=0;
  for (int i=0; i < segments.size(); i++) {
    TextRunSegment segment=segments.get(i);
    BasicMetrics metrics=segment.metrics;
    int baseline=metrics.baseLineIndex;
    if (baseline >= 0) {
      float baselineOffset=baselineOffsets[metrics.baseLineIndex];
      float fixedDescent=metrics.descent + baselineOffset;
      ascent=Math.max(ascent,metrics.ascent - baselineOffset);
      descent=Math.max(descent,fixedDescent);
      leading=Math.max(leading,fixedDescent + metrics.leading);
    }
 else {
      float height=metrics.ascent + metrics.descent;
      maxHeight=Math.max(maxHeight,height);
      maxHeightLeading=Math.max(maxHeightLeading,height + metrics.leading);
    }
  }
  if (maxHeightLeading != 0) {
    descent=Math.max(descent,maxHeight - ascent);
    leading=Math.max(leading,maxHeightLeading - ascent);
  }
  leading-=descent;
  BasicMetrics currMetrics;
  float currAdvance=0;
  for (int i=0; i < segments.size(); i++) {
    TextRunSegment segment=segments.get(breaker.getSegmentFromVisualOrder(i));
    currMetrics=segment.metrics;
    segment.y=getBaselineOffset(currMetrics.baseLineIndex) + currMetrics.superScriptOffset;
    segment.x=currAdvance;
    currAdvance+=segment.getAdvance();
  }
  advance=currAdvance;
}
