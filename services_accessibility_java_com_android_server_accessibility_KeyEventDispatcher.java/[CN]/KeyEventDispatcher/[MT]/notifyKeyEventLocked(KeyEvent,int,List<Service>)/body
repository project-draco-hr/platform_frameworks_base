{
  PendingKeyEvent pendingKeyEvent=null;
  KeyEvent localClone=KeyEvent.obtain(event);
  for (int i=0; i < boundServices.size(); i++) {
    Service service=boundServices.get(i);
    if (!service.mRequestFilterKeyEvents) {
      continue;
    }
    int filterKeyEventBit=service.mAccessibilityServiceInfo.getCapabilities() & AccessibilityServiceInfo.CAPABILITY_CAN_REQUEST_FILTER_KEY_EVENTS;
    if (filterKeyEventBit == 0) {
      continue;
    }
    try {
      service.mServiceInterface.onKeyEvent(localClone,localClone.getSequenceNumber());
    }
 catch (    RemoteException re) {
      continue;
    }
    if (pendingKeyEvent == null) {
      pendingKeyEvent=obtainPendingEventLocked(localClone,policyFlags);
    }
    ArrayList<PendingKeyEvent> pendingEventList=mPendingEventsMap.get(service);
    if (pendingEventList == null) {
      pendingEventList=new ArrayList<>();
      mPendingEventsMap.put(service,pendingEventList);
    }
    pendingEventList.add(pendingKeyEvent);
    pendingKeyEvent.referenceCount++;
  }
  if (pendingKeyEvent == null) {
    localClone.recycle();
    return false;
  }
  Message message=mKeyEventTimeoutHandler.obtainMessage(MSG_ON_KEY_EVENT_TIMEOUT,pendingKeyEvent);
  mKeyEventTimeoutHandler.sendMessageDelayed(message,ON_KEY_EVENT_TIMEOUT_MILLIS);
  return true;
}
