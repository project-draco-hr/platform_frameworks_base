{
  mRecordingState=RECORDSTATE_STOPPED;
  if (attributes == null) {
    throw new IllegalArgumentException("Illegal null AudioAttributes");
  }
  if (format == null) {
    throw new IllegalArgumentException("Illegal null AudioFormat");
  }
  if ((mInitializationLooper=Looper.myLooper()) == null) {
    mInitializationLooper=Looper.getMainLooper();
  }
  if (attributes.getCapturePreset() == MediaRecorder.AudioSource.REMOTE_SUBMIX) {
    final AudioAttributes.Builder filteredAttr=new AudioAttributes.Builder();
    final Iterator<String> tagsIter=attributes.getTags().iterator();
    while (tagsIter.hasNext()) {
      final String tag=tagsIter.next();
      if (tag.equalsIgnoreCase(SUBMIX_FIXED_VOLUME)) {
        mIsSubmixFullVolume=true;
        Log.v(TAG,"Will record from REMOTE_SUBMIX at full fixed volume");
      }
 else {
        filteredAttr.addTag(tag);
      }
    }
    filteredAttr.setInternalCapturePreset(attributes.getCapturePreset());
    mAudioAttributes=filteredAttr.build();
  }
 else {
    mAudioAttributes=attributes;
  }
  int rate=0;
  if ((format.getPropertySetMask() & AudioFormat.AUDIO_FORMAT_HAS_PROPERTY_SAMPLE_RATE) != 0) {
    rate=format.getSampleRate();
  }
 else {
    rate=AudioSystem.getPrimaryOutputSamplingRate();
    if (rate <= 0) {
      rate=44100;
    }
  }
  int encoding=AudioFormat.ENCODING_DEFAULT;
  if ((format.getPropertySetMask() & AudioFormat.AUDIO_FORMAT_HAS_PROPERTY_ENCODING) != 0) {
    encoding=format.getEncoding();
  }
  audioParamCheck(attributes.getCapturePreset(),rate,encoding);
  int channelMask=AudioFormat.CHANNEL_IN_DEFAULT;
  if ((format.getPropertySetMask() & AudioFormat.AUDIO_FORMAT_HAS_PROPERTY_CHANNEL_MASK) != 0) {
    channelMask=format.getChannelMask();
  }
  mChannelCount=AudioFormat.channelCountFromInChannelMask(channelMask);
  mChannelMask=getChannelMaskFromLegacyConfig(channelMask,false);
  audioBuffSizeCheck(bufferSizeInBytes);
  int[] session=new int[1];
  session[0]=sessionId;
  int initResult=native_setup(new WeakReference<AudioRecord>(this),mAudioAttributes,mSampleRate,mChannelMask,mAudioFormat,mNativeBufferSizeInBytes,session);
  if (initResult != SUCCESS) {
    loge("Error code " + initResult + " when initializing native AudioRecord object.");
    return;
  }
  mSessionId=session[0];
  mState=STATE_INITIALIZED;
}
