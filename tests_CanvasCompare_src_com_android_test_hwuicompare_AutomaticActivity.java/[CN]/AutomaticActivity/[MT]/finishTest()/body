{
  for (  FinalCallback c : mFinalCallbacks) {
    c.report("averageError",(mTotalError / mTotalTests));
    for (int i=1; i < ERROR_CUTOFFS.length; i++) {
      c.report(String.format("tests with error over %1.3f",ERROR_CUTOFFS[i]),mErrorRates[i]);
    }
    if (mInputJson != null) {
      c.report("tests regressed",mTestsRegressed);
      c.report("tests improved",mTestsImproved);
    }
    c.complete();
  }
  try {
    if (mOutputJson != null) {
      String outputString=mOutputJson.toString(4);
      File outputFile=new File(Environment.getExternalStorageDirectory(),"CanvasCompareOutput.json");
      FileOutputStream outputStream=new FileOutputStream(outputFile);
      outputStream.write(outputString.getBytes());
      outputStream.close();
      Log.d(LOG_TAG,"Saved output file with " + mOutputJson.length() + " entries");
    }
  }
 catch (  JSONException e) {
    Log.e(LOG_TAG,"error during JSON stringify",e);
  }
catch (  IOException e) {
    Log.e(LOG_TAG,"error storing JSON output on sd",e);
  }
  logTestResultHash("Modifier change vs previous",mModifierDiffResults);
  logTestResultHash("Invidual test change vs previous",mIndividualDiffResults);
  logTestResultHash("Modifier average test results",mModifierResults);
  logTestResultHash("Individual test results",mIndividualResults);
  Toast.makeText(getApplicationContext(),"done!",Toast.LENGTH_SHORT).show();
  finish();
}
