{
  final ArrayList<GroupMetadata> egml=mExpGroupMetadataList;
  final int numExpGroups=egml.size();
  int leftExpGroupIndex=0;
  int rightExpGroupIndex=numExpGroups - 1;
  int midExpGroupIndex=0;
  GroupMetadata midExpGm;
  if (numExpGroups == 0) {
    return PositionMetadata.obtain(flPos,ExpandableListPosition.GROUP,flPos,-1,null,0);
  }
  while (leftExpGroupIndex <= rightExpGroupIndex) {
    midExpGroupIndex=(rightExpGroupIndex - leftExpGroupIndex) / 2 + leftExpGroupIndex;
    midExpGm=egml.get(midExpGroupIndex);
    if (flPos > midExpGm.lastChildFlPos) {
      leftExpGroupIndex=midExpGroupIndex + 1;
    }
 else     if (flPos < midExpGm.flPos) {
      rightExpGroupIndex=midExpGroupIndex - 1;
    }
 else     if (flPos == midExpGm.flPos) {
      return PositionMetadata.obtain(flPos,ExpandableListPosition.GROUP,midExpGm.gPos,-1,midExpGm,midExpGroupIndex);
    }
 else     if (flPos <= midExpGm.lastChildFlPos) {
      final int childPos=flPos - (midExpGm.flPos + 1);
      return PositionMetadata.obtain(flPos,ExpandableListPosition.CHILD,midExpGm.gPos,childPos,midExpGm,midExpGroupIndex);
    }
  }
  int insertPosition=0;
  int groupPos=0;
  if (leftExpGroupIndex > midExpGroupIndex) {
    final GroupMetadata leftExpGm=egml.get(leftExpGroupIndex - 1);
    insertPosition=leftExpGroupIndex;
    groupPos=(flPos - leftExpGm.lastChildFlPos) + leftExpGm.gPos;
  }
 else   if (rightExpGroupIndex < midExpGroupIndex) {
    final GroupMetadata rightExpGm=egml.get(++rightExpGroupIndex);
    insertPosition=rightExpGroupIndex;
    groupPos=rightExpGm.gPos - (rightExpGm.flPos - flPos);
  }
 else {
    throw new RuntimeException("Unknown state");
  }
  return PositionMetadata.obtain(flPos,ExpandableListPosition.GROUP,groupPos,-1,null,insertPosition);
}
