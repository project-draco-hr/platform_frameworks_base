{
  int j=mLineCount;
  int off=j * mColumns;
  int want=off + mColumns + TOP;
  int[] lines=mLines;
  if (want >= lines.length) {
    int nlen=ArrayUtils.idealIntArraySize(want + 1);
    int[] grow=new int[nlen];
    System.arraycopy(lines,0,grow,0,lines.length);
    mLines=grow;
    lines=grow;
    Directions[] grow2=new Directions[nlen];
    System.arraycopy(mLineDirections,0,grow2,0,mLineDirections.length);
    mLineDirections=grow2;
  }
  if (chooseht != null) {
    fm.ascent=above;
    fm.descent=below;
    fm.top=top;
    fm.bottom=bottom;
    for (int i=0; i < chooseht.length; i++) {
      if (chooseht[i] instanceof LineHeightSpan.WithDensity) {
        ((LineHeightSpan.WithDensity)chooseht[i]).chooseHeight(text,start,end,choosehtv[i],v,fm,paint);
      }
 else {
        chooseht[i].chooseHeight(text,start,end,choosehtv[i],v,fm);
      }
    }
    above=fm.ascent;
    below=fm.descent;
    top=fm.top;
    bottom=fm.bottom;
  }
  if (j == 0) {
    if (trackpad) {
      mTopPadding=top - above;
    }
    if (includepad) {
      above=top;
    }
  }
  if (last) {
    if (trackpad) {
      mBottomPadding=bottom - below;
    }
    if (includepad) {
      below=bottom;
    }
  }
  int extra;
  if (needMultiply) {
    double ex=(below - above) * (spacingmult - 1) + spacingadd;
    if (ex >= 0) {
      extra=(int)(ex + 0.5);
    }
 else {
      extra=-(int)(-ex + 0.5);
    }
  }
 else {
    extra=0;
  }
  lines[off + START]=start;
  lines[off + TOP]=v;
  lines[off + DESCENT]=below + extra;
  v+=(below - above) + extra;
  lines[off + mColumns + START]=end;
  lines[off + mColumns + TOP]=v;
  if (hasTabOrEmoji)   lines[off + TAB]|=TAB_MASK;
  lines[off + DIR]|=dir << DIR_SHIFT;
  Directions linedirs=DIRS_ALL_LEFT_TO_RIGHT;
  if (easy) {
    mLineDirections[j]=linedirs;
  }
 else {
    mLineDirections[j]=AndroidBidi.directions(dir,chdirs,widstart,chs,widstart,end - start);
  }
  if (ellipsize != null && (ellipsize != TextUtils.TruncateAt.MARQUEE || j != 0)) {
    calculateEllipsis(start,end,widths,widstart,ellipsiswidth,ellipsize,j,textwidth,paint);
  }
  mLineCount++;
  return v;
}
