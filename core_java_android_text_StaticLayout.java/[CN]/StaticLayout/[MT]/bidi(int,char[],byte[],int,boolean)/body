{
  AndroidCharacter.getDirectionalities(chs,chInfo,n);
  if (dir != DIR_REQUEST_LTR && dir != DIR_REQUEST_RTL) {
    dir=dir >= 0 ? DIR_LEFT_TO_RIGHT : DIR_RIGHT_TO_LEFT;
    for (int j=0; j < n; j++) {
      int d=chInfo[j];
      if (d == Character.DIRECTIONALITY_LEFT_TO_RIGHT) {
        dir=DIR_LEFT_TO_RIGHT;
        break;
      }
      if (d == Character.DIRECTIONALITY_RIGHT_TO_LEFT) {
        dir=DIR_RIGHT_TO_LEFT;
        break;
      }
    }
  }
  final byte SOR=dir == DIR_LEFT_TO_RIGHT ? Character.DIRECTIONALITY_LEFT_TO_RIGHT : Character.DIRECTIONALITY_RIGHT_TO_LEFT;
  for (int j=0; j < n; j++) {
    if (chInfo[j] == Character.NON_SPACING_MARK) {
      if (j == 0)       chInfo[j]=SOR;
 else       chInfo[j]=chInfo[j - 1];
    }
  }
  byte cur=SOR;
  for (int j=0; j < n; j++) {
    byte d=chInfo[j];
    if (d == Character.DIRECTIONALITY_LEFT_TO_RIGHT || d == Character.DIRECTIONALITY_RIGHT_TO_LEFT || d == Character.DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC)     cur=d;
 else     if (d == Character.DIRECTIONALITY_EUROPEAN_NUMBER) {
      if (cur == Character.DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC)       chInfo[j]=Character.DIRECTIONALITY_ARABIC_NUMBER;
    }
  }
  for (int j=0; j < n; j++) {
    if (chInfo[j] == Character.DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC)     chInfo[j]=Character.DIRECTIONALITY_RIGHT_TO_LEFT;
  }
  for (int j=1; j < n - 1; j++) {
    byte d=chInfo[j];
    byte prev=chInfo[j - 1];
    byte next=chInfo[j + 1];
    if (d == Character.DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR) {
      if (prev == Character.DIRECTIONALITY_EUROPEAN_NUMBER && next == Character.DIRECTIONALITY_EUROPEAN_NUMBER)       chInfo[j]=Character.DIRECTIONALITY_EUROPEAN_NUMBER;
    }
 else     if (d == Character.DIRECTIONALITY_COMMON_NUMBER_SEPARATOR) {
      if (prev == Character.DIRECTIONALITY_EUROPEAN_NUMBER && next == Character.DIRECTIONALITY_EUROPEAN_NUMBER)       chInfo[j]=Character.DIRECTIONALITY_EUROPEAN_NUMBER;
      if (prev == Character.DIRECTIONALITY_ARABIC_NUMBER && next == Character.DIRECTIONALITY_ARABIC_NUMBER)       chInfo[j]=Character.DIRECTIONALITY_ARABIC_NUMBER;
    }
  }
  boolean adjacent=false;
  for (int j=0; j < n; j++) {
    byte d=chInfo[j];
    if (d == Character.DIRECTIONALITY_EUROPEAN_NUMBER)     adjacent=true;
 else     if (d == Character.DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR && adjacent)     chInfo[j]=Character.DIRECTIONALITY_EUROPEAN_NUMBER;
 else     adjacent=false;
  }
  adjacent=false;
  for (int j=n - 1; j >= 0; j--) {
    byte d=chInfo[j];
    if (d == Character.DIRECTIONALITY_EUROPEAN_NUMBER)     adjacent=true;
 else     if (d == Character.DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR) {
      if (adjacent)       chInfo[j]=Character.DIRECTIONALITY_EUROPEAN_NUMBER;
 else       chInfo[j]=Character.DIRECTIONALITY_OTHER_NEUTRALS;
    }
 else {
      adjacent=false;
      if (d == Character.DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR || d == Character.DIRECTIONALITY_COMMON_NUMBER_SEPARATOR || d == Character.DIRECTIONALITY_PARAGRAPH_SEPARATOR || d == Character.DIRECTIONALITY_SEGMENT_SEPARATOR)       chInfo[j]=Character.DIRECTIONALITY_OTHER_NEUTRALS;
    }
  }
  cur=SOR;
  for (int j=0; j < n; j++) {
    byte d=chInfo[j];
    if (d == SOR || d == Character.DIRECTIONALITY_LEFT_TO_RIGHT || d == Character.DIRECTIONALITY_RIGHT_TO_LEFT)     cur=d;
    if (d == Character.DIRECTIONALITY_EUROPEAN_NUMBER)     chInfo[j]=cur;
  }
  cur=SOR;
  for (int j=0; j < n; j++) {
    byte d=chInfo[j];
    if (d == Character.DIRECTIONALITY_LEFT_TO_RIGHT || d == Character.DIRECTIONALITY_RIGHT_TO_LEFT) {
      cur=d;
    }
 else     if (d == Character.DIRECTIONALITY_EUROPEAN_NUMBER || d == Character.DIRECTIONALITY_ARABIC_NUMBER) {
      cur=Character.DIRECTIONALITY_RIGHT_TO_LEFT;
    }
 else {
      byte dd=SOR;
      int k;
      for (k=j + 1; k < n; k++) {
        dd=chInfo[k];
        if (dd == Character.DIRECTIONALITY_LEFT_TO_RIGHT || dd == Character.DIRECTIONALITY_RIGHT_TO_LEFT) {
          break;
        }
        if (dd == Character.DIRECTIONALITY_EUROPEAN_NUMBER || dd == Character.DIRECTIONALITY_ARABIC_NUMBER) {
          dd=Character.DIRECTIONALITY_RIGHT_TO_LEFT;
          break;
        }
      }
      for (int y=j; y < k; y++) {
        if (dd == cur)         chInfo[y]=cur;
 else         chInfo[y]=SOR;
      }
      j=k - 1;
    }
  }
  for (int j=0; j < n; j++) {
    char c=chs[j];
    if (c == '\t' || (c >= 0xD800 && c <= 0xDFFF)) {
      chInfo[j]=SOR;
    }
  }
  return dir;
}
