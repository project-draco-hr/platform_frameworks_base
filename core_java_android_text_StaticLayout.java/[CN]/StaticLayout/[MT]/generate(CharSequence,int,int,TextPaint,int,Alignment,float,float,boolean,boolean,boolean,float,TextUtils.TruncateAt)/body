{
  mLineCount=0;
  int v=0;
  boolean needMultiply=(spacingmult != 1 || spacingadd != 0);
  Paint.FontMetricsInt fm=mFontMetricsInt;
  int[] choosehtv=null;
  MeasuredText measured=mMeasured;
  Spanned spanned=null;
  if (source instanceof Spanned)   spanned=(Spanned)source;
  int DEFAULT_DIR=DIR_LEFT_TO_RIGHT;
  int paraEnd;
  for (int paraStart=bufstart; paraStart <= bufend; paraStart=paraEnd) {
    paraEnd=TextUtils.indexOf(source,'\n',paraStart,bufend);
    if (paraEnd < 0)     paraEnd=bufend;
 else     paraEnd++;
    int paraLen=paraEnd - paraStart;
    int firstWidthLineCount=1;
    int firstwidth=outerwidth;
    int restwidth=outerwidth;
    LineHeightSpan[] chooseht=null;
    if (spanned != null) {
      LeadingMarginSpan[] sp=spanned.getSpans(paraStart,paraEnd,LeadingMarginSpan.class);
      for (int i=0; i < sp.length; i++) {
        LeadingMarginSpan lms=sp[i];
        firstwidth-=sp[i].getLeadingMargin(true);
        restwidth-=sp[i].getLeadingMargin(false);
        if (lms instanceof LeadingMarginSpan.LeadingMarginSpan2) {
          firstWidthLineCount=((LeadingMarginSpan.LeadingMarginSpan2)lms).getLeadingMarginLineCount();
        }
      }
      chooseht=spanned.getSpans(paraStart,paraEnd,LineHeightSpan.class);
      if (chooseht.length != 0) {
        if (choosehtv == null || choosehtv.length < chooseht.length) {
          choosehtv=new int[ArrayUtils.idealIntArraySize(chooseht.length)];
        }
        for (int i=0; i < chooseht.length; i++) {
          int o=spanned.getSpanStart(chooseht[i]);
          if (o < paraStart) {
            choosehtv[i]=getLineTop(getLineForOffset(o));
          }
 else {
            choosehtv[i]=v;
          }
        }
      }
    }
    measured.setPara(source,paraStart,paraEnd,DIR_REQUEST_DEFAULT_LTR);
    char[] chs=measured.mChars;
    float[] widths=measured.mWidths;
    byte[] chdirs=measured.mLevels;
    int dir=measured.mDir;
    boolean easy=measured.mEasy;
    CharSequence sub=source;
    int width=firstwidth;
    float w=0;
    int here=paraStart;
    int ok=paraStart;
    float okwidth=w;
    int okascent=0, okdescent=0, oktop=0, okbottom=0;
    int fit=paraStart;
    float fitwidth=w;
    int fitascent=0, fitdescent=0, fittop=0, fitbottom=0;
    boolean tab=false;
    for (int spanStart=paraStart, spanEnd=spanStart, nextSpanStart; spanStart < paraEnd; spanStart=nextSpanStart) {
      if (spanStart == spanEnd) {
        if (spanned == null)         spanEnd=paraEnd;
 else         spanEnd=spanned.nextSpanTransition(spanStart,paraEnd,MetricAffectingSpan.class);
        int spanLen=spanEnd - spanStart;
        if (spanned == null) {
          measured.addStyleRun(paint,spanLen,fm);
        }
 else {
          MetricAffectingSpan[] spans=spanned.getSpans(spanStart,spanEnd,MetricAffectingSpan.class);
          measured.addStyleRun(paint,spans,spanLen,fm);
        }
      }
      nextSpanStart=spanEnd;
      int startInPara=spanStart - paraStart;
      int endInPara=spanEnd - paraStart;
      int fmtop=fm.top;
      int fmbottom=fm.bottom;
      int fmascent=fm.ascent;
      int fmdescent=fm.descent;
      for (int j=spanStart; j < spanEnd; j++) {
        char c=chs[j - paraStart];
        float before=w;
        if (c == '\n') {
          ;
        }
 else         if (c == '\t') {
          w=Layout.nextTab(sub,paraStart,paraEnd,w,null);
          tab=true;
        }
 else         if (c >= 0xD800 && c <= 0xDFFF && j + 1 < spanEnd) {
          int emoji=Character.codePointAt(chs,j - paraStart);
          if (emoji >= MIN_EMOJI && emoji <= MAX_EMOJI) {
            Bitmap bm=EMOJI_FACTORY.getBitmapFromAndroidPua(emoji);
            if (bm != null) {
              Paint whichPaint;
              if (spanned == null) {
                whichPaint=paint;
              }
 else {
                whichPaint=mWorkPaint;
              }
              float wid=bm.getWidth() * -whichPaint.ascent() / bm.getHeight();
              w+=wid;
              tab=true;
              j++;
            }
 else {
              w+=widths[j - paraStart];
            }
          }
 else {
            w+=widths[j - paraStart];
          }
        }
 else {
          w+=widths[j - paraStart];
        }
        if (w <= width) {
          fitwidth=w;
          fit=j + 1;
          if (fmtop < fittop)           fittop=fmtop;
          if (fmascent < fitascent)           fitascent=fmascent;
          if (fmdescent > fitdescent)           fitdescent=fmdescent;
          if (fmbottom > fitbottom)           fitbottom=fmbottom;
          if (c == ' ' || c == '\t' || ((c == '.' || c == ',' || c == ':' || c == ';') && (j - 1 < here || !Character.isDigit(chs[j - 1 - paraStart])) && (j + 1 >= spanEnd || !Character.isDigit(chs[j + 1 - paraStart]))) || ((c == '/' || c == '-') && (j + 1 >= spanEnd || !Character.isDigit(chs[j + 1 - paraStart]))) || (c >= FIRST_CJK && isIdeographic(c,true) && j + 1 < spanEnd && isIdeographic(chs[j + 1 - paraStart],false))) {
            okwidth=w;
            ok=j + 1;
            if (fittop < oktop)             oktop=fittop;
            if (fitascent < okascent)             okascent=fitascent;
            if (fitdescent > okdescent)             okdescent=fitdescent;
            if (fitbottom > okbottom)             okbottom=fitbottom;
          }
        }
 else         if (breakOnlyAtSpaces) {
          if (ok != here) {
            while (ok < spanEnd && chs[ok - paraStart] == ' ') {
              ok++;
            }
            v=out(source,here,ok,okascent,okdescent,oktop,okbottom,v,spacingmult,spacingadd,chooseht,choosehtv,fm,tab,needMultiply,paraStart,chdirs,dir,easy,ok == bufend,includepad,trackpad,chs,widths,here - paraStart,where,ellipsizedWidth,okwidth,paint);
            here=ok;
          }
 else {
            fitwidth=w;
            fit=j + 1;
            if (fmtop < fittop)             fittop=fmtop;
            if (fmascent < fitascent)             fitascent=fmascent;
            if (fmdescent > fitdescent)             fitdescent=fmdescent;
            if (fmbottom > fitbottom)             fitbottom=fmbottom;
          }
        }
 else {
          if (ok != here) {
            while (ok < spanEnd && chs[ok - paraStart] == ' ') {
              ok++;
            }
            v=out(source,here,ok,okascent,okdescent,oktop,okbottom,v,spacingmult,spacingadd,chooseht,choosehtv,fm,tab,needMultiply,paraStart,chdirs,dir,easy,ok == bufend,includepad,trackpad,chs,widths,here - paraStart,where,ellipsizedWidth,okwidth,paint);
            here=ok;
          }
 else           if (fit != here) {
            v=out(source,here,fit,fitascent,fitdescent,fittop,fitbottom,v,spacingmult,spacingadd,chooseht,choosehtv,fm,tab,needMultiply,paraStart,chdirs,dir,easy,fit == bufend,includepad,trackpad,chs,widths,here - paraStart,where,ellipsizedWidth,fitwidth,paint);
            here=fit;
          }
 else {
            v=out(source,here,here + 1,fm.ascent,fm.descent,fm.top,fm.bottom,v,spacingmult,spacingadd,chooseht,choosehtv,fm,tab,needMultiply,paraStart,chdirs,dir,easy,here + 1 == bufend,includepad,trackpad,chs,widths,here - paraStart,where,ellipsizedWidth,widths[here - paraStart],paint);
            here=here + 1;
          }
          if (here < spanStart) {
            j=nextSpanStart=here;
          }
 else {
            j=here - 1;
          }
          ok=fit=here;
          w=0;
          fitascent=fitdescent=fittop=fitbottom=0;
          okascent=okdescent=oktop=okbottom=0;
          if (--firstWidthLineCount <= 0) {
            width=restwidth;
          }
        }
      }
    }
    if (paraEnd != here) {
      if ((fittop | fitbottom | fitdescent| fitascent) == 0) {
        paint.getFontMetricsInt(fm);
        fittop=fm.top;
        fitbottom=fm.bottom;
        fitascent=fm.ascent;
        fitdescent=fm.descent;
      }
      v=out(source,here,paraEnd,fitascent,fitdescent,fittop,fitbottom,v,spacingmult,spacingadd,chooseht,choosehtv,fm,tab,needMultiply,paraStart,chdirs,dir,easy,paraEnd == bufend,includepad,trackpad,chs,widths,here - paraStart,where,ellipsizedWidth,w,paint);
    }
    paraStart=paraEnd;
    if (paraEnd == bufend)     break;
  }
  if (bufend == bufstart || source.charAt(bufend - 1) == '\n') {
    paint.getFontMetricsInt(fm);
    v=out(source,bufend,bufend,fm.ascent,fm.descent,fm.top,fm.bottom,v,spacingmult,spacingadd,null,null,fm,false,needMultiply,bufend,null,DEFAULT_DIR,true,true,includepad,trackpad,null,null,bufstart,where,ellipsizedWidth,0,paint);
  }
}
