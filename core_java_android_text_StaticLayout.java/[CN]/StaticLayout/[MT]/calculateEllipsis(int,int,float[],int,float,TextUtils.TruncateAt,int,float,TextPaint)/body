{
  if (textwidth <= avail) {
    mLines[mColumns * line + ELLIPSIS_START]=0;
    mLines[mColumns * line + ELLIPSIS_COUNT]=0;
    return;
  }
  float ellipsiswid=paint.measureText("\u2026");
  int ellipsisStart, ellipsisCount;
  int len=lineend - linestart;
  if (where == TextUtils.TruncateAt.START) {
    float sum=0;
    int i;
    for (i=len; i >= 0; i--) {
      float w=widths[i - 1 + linestart - widstart];
      if (w + sum + ellipsiswid > avail) {
        break;
      }
      sum+=w;
    }
    ellipsisStart=0;
    ellipsisCount=i;
  }
 else   if (where == TextUtils.TruncateAt.END || where == TextUtils.TruncateAt.MARQUEE) {
    float sum=0;
    int i;
    for (i=0; i < len; i++) {
      float w=widths[i + linestart - widstart];
      if (w + sum + ellipsiswid > avail) {
        break;
      }
      sum+=w;
    }
    ellipsisStart=i;
    ellipsisCount=len - i;
  }
 else {
    float lsum=0, rsum=0;
    int left=0, right=len;
    float ravail=(avail - ellipsiswid) / 2;
    for (right=len; right >= 0; right--) {
      float w=widths[right - 1 + linestart - widstart];
      if (w + rsum > ravail) {
        break;
      }
      rsum+=w;
    }
    float lavail=avail - ellipsiswid - rsum;
    for (left=0; left < right; left++) {
      float w=widths[left + linestart - widstart];
      if (w + lsum > lavail) {
        break;
      }
      lsum+=w;
    }
    ellipsisStart=left;
    ellipsisCount=right - left;
  }
  mLines[mColumns * line + ELLIPSIS_START]=ellipsisStart;
  mLines[mColumns * line + ELLIPSIS_COUNT]=ellipsisCount;
}
