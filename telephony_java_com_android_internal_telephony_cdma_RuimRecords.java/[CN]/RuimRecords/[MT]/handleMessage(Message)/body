{
  AsyncResult ar;
  byte data[];
  boolean isRecordLoadResponse=false;
  if (mDestroyed.get()) {
    loge("Received message " + msg + "["+ msg.what+ "] while being destroyed. Ignoring.");
    return;
  }
  try {
switch (msg.what) {
case EVENT_RADIO_OFF_OR_NOT_AVAILABLE:
      onRadioOffOrNotAvailable();
    break;
case EVENT_GET_DEVICE_IDENTITY_DONE:
  log("Event EVENT_GET_DEVICE_IDENTITY_DONE Received");
break;
case EVENT_GET_IMSI_DONE:
isRecordLoadResponse=true;
ar=(AsyncResult)msg.obj;
if (ar.exception != null) {
loge("Exception querying IMSI, Exception:" + ar.exception);
break;
}
mImsi=(String)ar.result;
if (mImsi != null && (mImsi.length() < 6 || mImsi.length() > 15)) {
loge("invalid IMSI " + mImsi);
mImsi=null;
}
log("IMSI: " + mImsi.substring(0,6) + "xxxxxxxxx");
String operatorNumeric=getRUIMOperatorNumeric();
if (operatorNumeric != null) {
if (operatorNumeric.length() <= 6) {
MccTable.updateMccMncConfiguration(mContext,operatorNumeric);
}
}
break;
case EVENT_GET_CDMA_SUBSCRIPTION_DONE:
ar=(AsyncResult)msg.obj;
String localTemp[]=(String[])ar.result;
if (ar.exception != null) {
break;
}
mMyMobileNumber=localTemp[0];
mMin2Min1=localTemp[3];
mPrlVersion=localTemp[4];
log("MDN: " + mMyMobileNumber + " MIN: "+ mMin2Min1);
break;
case EVENT_GET_ICCID_DONE:
isRecordLoadResponse=true;
ar=(AsyncResult)msg.obj;
data=(byte[])ar.result;
if (ar.exception != null) {
break;
}
iccid=IccUtils.bcdToString(data,0,data.length);
log("iccid: " + iccid);
break;
case EVENT_UPDATE_DONE:
ar=(AsyncResult)msg.obj;
if (ar.exception != null) {
Log.i(LOG_TAG,"RuimRecords update failed",ar.exception);
}
break;
case EVENT_GET_ALL_SMS_DONE:
case EVENT_MARK_SMS_READ_DONE:
case EVENT_SMS_ON_RUIM:
case EVENT_GET_SMS_DONE:
Log.w(LOG_TAG,"Event not supported: " + msg.what);
break;
case EVENT_GET_SST_DONE:
log("Event EVENT_GET_SST_DONE Received");
break;
case EVENT_RUIM_REFRESH:
isRecordLoadResponse=false;
ar=(AsyncResult)msg.obj;
if (ar.exception == null) {
handleRuimRefresh((IccRefreshResponse)ar.result);
}
break;
}
}
 catch (RuntimeException exc) {
Log.w(LOG_TAG,"Exception parsing RUIM record",exc);
}
 finally {
if (isRecordLoadResponse) {
onRecordLoaded();
}
}
}
