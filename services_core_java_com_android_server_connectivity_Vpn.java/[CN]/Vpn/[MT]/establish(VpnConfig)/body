{
  UserManager mgr=UserManager.get(mContext);
  PackageManager pm=mContext.getPackageManager();
  ApplicationInfo app=null;
  try {
    app=AppGlobals.getPackageManager().getApplicationInfo(mPackage,0,mUserId);
    if (Binder.getCallingUid() != app.uid) {
      return null;
    }
  }
 catch (  Exception e) {
    return null;
  }
  Intent intent=new Intent(VpnConfig.SERVICE_INTERFACE);
  intent.setClassName(mPackage,config.user);
  long token=Binder.clearCallingIdentity();
  try {
    UserInfo user=mgr.getUserInfo(mUserId);
    if (user.isRestricted()) {
      throw new SecurityException("Restricted users cannot establish VPNs");
    }
    ResolveInfo info=AppGlobals.getPackageManager().resolveService(intent,null,0,mUserId);
    if (info == null) {
      throw new SecurityException("Cannot find " + config.user);
    }
    if (!BIND_VPN_SERVICE.equals(info.serviceInfo.permission)) {
      throw new SecurityException(config.user + " does not require " + BIND_VPN_SERVICE);
    }
  }
 catch (  RemoteException e) {
    throw new SecurityException("Cannot find " + config.user);
  }
 finally {
    Binder.restoreCallingIdentity(token);
  }
  VpnConfig oldConfig=mConfig;
  String oldInterface=mInterface;
  Connection oldConnection=mConnection;
  SparseBooleanArray oldUsers=mVpnUsers;
  ParcelFileDescriptor tun=ParcelFileDescriptor.adoptFd(jniCreate(config.mtu));
  try {
    updateState(DetailedState.CONNECTING,"establish");
    String interfaze=jniGetName(tun.getFd());
    StringBuilder builder=new StringBuilder();
    for (    LinkAddress address : config.addresses) {
      builder.append(" " + address);
    }
    if (jniSetAddresses(interfaze,builder.toString()) < 1) {
      throw new IllegalArgumentException("At least one address must be specified");
    }
    Connection connection=new Connection();
    if (!mContext.bindServiceAsUser(intent,connection,Context.BIND_AUTO_CREATE,new UserHandle(mUserId))) {
      throw new IllegalStateException("Cannot bind " + config.user);
    }
    mConnection=connection;
    mInterface=interfaze;
    config.user=mPackage;
    config.interfaze=mInterface;
    config.startTime=SystemClock.elapsedRealtime();
    mConfig=config;
    mVpnUsers=new SparseBooleanArray();
    token=Binder.clearCallingIdentity();
    try {
      mCallback.setMarkedForwarding(mInterface);
      mCallback.setRoutes(mInterface,config.routes);
      mCallback.override(mInterface,config.dnsServers,config.searchDomains);
      addVpnUserLocked(mUserId);
      if (mUserId == UserHandle.USER_OWNER) {
        for (        UserInfo user : mgr.getUsers()) {
          if (user.isRestricted()) {
            try {
              addVpnUserLocked(user.id);
            }
 catch (            Exception e) {
              Log.wtf(TAG,"Failed to add user " + user.id + " to owner's VPN");
            }
          }
        }
      }
    }
  finally {
      Binder.restoreCallingIdentity(token);
    }
    if (oldConnection != null) {
      mContext.unbindService(oldConnection);
    }
    if (oldInterface != null && !oldInterface.equals(interfaze)) {
      token=Binder.clearCallingIdentity();
      try {
        final int size=oldUsers.size();
        final boolean forwardDns=(oldConfig.dnsServers != null && oldConfig.dnsServers.size() != 0);
        for (int i=0; i < size; i++) {
          int user=oldUsers.keyAt(i);
          mCallback.clearUserForwarding(oldInterface,user,forwardDns);
        }
        mCallback.clearMarkedForwarding(oldInterface);
      }
  finally {
        Binder.restoreCallingIdentity(token);
      }
      jniReset(oldInterface);
    }
  }
 catch (  RuntimeException e) {
    updateState(DetailedState.FAILED,"establish");
    IoUtils.closeQuietly(tun);
    token=Binder.clearCallingIdentity();
    try {
      mCallback.clearMarkedForwarding(mInterface);
    }
 catch (    Exception ingored) {
    }
 finally {
      Binder.restoreCallingIdentity(token);
    }
    mConfig=oldConfig;
    mConnection=oldConnection;
    mVpnUsers=oldUsers;
    mInterface=oldInterface;
    throw e;
  }
  Log.i(TAG,"Established by " + config.user + " on "+ mInterface);
  updateState(DetailedState.AUTHENTICATING,"establish");
  return tun;
}
