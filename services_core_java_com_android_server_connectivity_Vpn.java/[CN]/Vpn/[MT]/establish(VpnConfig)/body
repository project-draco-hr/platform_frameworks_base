{
  UserManager mgr=UserManager.get(mContext);
  if (Binder.getCallingUid() != mOwnerUID) {
    return null;
  }
  if (!isVpnUserPreConsented(mPackage)) {
    return null;
  }
  Intent intent=new Intent(VpnConfig.SERVICE_INTERFACE);
  intent.setClassName(mPackage,config.user);
  long token=Binder.clearCallingIdentity();
  try {
    UserInfo user=mgr.getUserInfo(mUserHandle);
    if (user.isRestricted() || mgr.hasUserRestriction(UserManager.DISALLOW_CONFIG_VPN,new UserHandle(mUserHandle))) {
      throw new SecurityException("Restricted users cannot establish VPNs");
    }
    ResolveInfo info=AppGlobals.getPackageManager().resolveService(intent,null,0,mUserHandle);
    if (info == null) {
      throw new SecurityException("Cannot find " + config.user);
    }
    if (!BIND_VPN_SERVICE.equals(info.serviceInfo.permission)) {
      throw new SecurityException(config.user + " does not require " + BIND_VPN_SERVICE);
    }
  }
 catch (  RemoteException e) {
    throw new SecurityException("Cannot find " + config.user);
  }
 finally {
    Binder.restoreCallingIdentity(token);
  }
  VpnConfig oldConfig=mConfig;
  String oldInterface=mInterface;
  Connection oldConnection=mConnection;
  NetworkAgent oldNetworkAgent=mNetworkAgent;
  mNetworkAgent=null;
  Set<UidRange> oldUsers=mVpnUsers;
  ParcelFileDescriptor tun=ParcelFileDescriptor.adoptFd(jniCreate(config.mtu));
  try {
    updateState(DetailedState.CONNECTING,"establish");
    String interfaze=jniGetName(tun.getFd());
    StringBuilder builder=new StringBuilder();
    for (    LinkAddress address : config.addresses) {
      builder.append(" " + address);
    }
    if (jniSetAddresses(interfaze,builder.toString()) < 1) {
      throw new IllegalArgumentException("At least one address must be specified");
    }
    Connection connection=new Connection();
    if (!mContext.bindServiceAsUser(intent,connection,Context.BIND_AUTO_CREATE | Context.BIND_FOREGROUND_SERVICE,new UserHandle(mUserHandle))) {
      throw new IllegalStateException("Cannot bind " + config.user);
    }
    mConnection=connection;
    mInterface=interfaze;
    config.user=mPackage;
    config.interfaze=mInterface;
    config.startTime=SystemClock.elapsedRealtime();
    mConfig=config;
    agentConnect();
    if (oldConnection != null) {
      mContext.unbindService(oldConnection);
    }
    agentDisconnect(oldNetworkAgent);
    if (oldInterface != null && !oldInterface.equals(interfaze)) {
      jniReset(oldInterface);
    }
    try {
      IoUtils.setBlocking(tun.getFileDescriptor(),config.blocking);
    }
 catch (    IOException e) {
      throw new IllegalStateException("Cannot set tunnel's fd as blocking=" + config.blocking,e);
    }
  }
 catch (  RuntimeException e) {
    IoUtils.closeQuietly(tun);
    agentDisconnect();
    mConfig=oldConfig;
    mConnection=oldConnection;
    mVpnUsers=oldUsers;
    mNetworkAgent=oldNetworkAgent;
    mInterface=oldInterface;
    throw e;
  }
  Log.i(TAG,"Established by " + config.user + " on "+ mInterface);
  return tun;
}
