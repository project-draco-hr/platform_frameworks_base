{
  LinkProperties lp=new LinkProperties();
  lp.setInterfaceName(mInterface);
  boolean hasDefaultRoute=false;
  for (  RouteInfo route : mConfig.routes) {
    lp.addRoute(route);
    if (route.isDefaultRoute())     hasDefaultRoute=true;
  }
  if (hasDefaultRoute) {
    mNetworkCapabilities.addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET);
  }
 else {
    mNetworkCapabilities.removeCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET);
  }
  if (mConfig.dnsServers != null) {
    for (    String dnsServer : mConfig.dnsServers) {
      InetAddress address=InetAddress.parseNumericAddress(dnsServer);
      lp.addDnsServer(address);
      if (address instanceof Inet4Address) {
        mAllowIPv4=true;
      }
 else {
        mAllowIPv6=true;
      }
    }
  }
  StringBuilder buffer=new StringBuilder();
  if (mConfig.searchDomains != null) {
    for (    String domain : mConfig.searchDomains) {
      buffer.append(domain).append(' ');
    }
  }
  lp.setDomains(buffer.toString().trim());
  mNetworkInfo.setIsAvailable(true);
  mNetworkInfo.setDetailedState(DetailedState.CONNECTED,null,null);
  NetworkMisc networkMisc=new NetworkMisc();
  networkMisc.allowBypass=mConfig.allowBypass;
  long token=Binder.clearCallingIdentity();
  try {
    mNetworkAgent=new NetworkAgent(mLooper,mContext,NETWORKTYPE,mNetworkInfo,mNetworkCapabilities,lp,0,networkMisc){
      public void unwanted(){
      }
    }
;
  }
  finally {
    Binder.restoreCallingIdentity(token);
  }
  if (!mAllowIPv4) {
    mNetworkAgent.blockAddressFamily(AF_INET);
  }
  if (!mAllowIPv6) {
    mNetworkAgent.blockAddressFamily(AF_INET6);
  }
  addVpnUserLocked(mUserId);
  if (mUserId == UserHandle.USER_OWNER) {
    token=Binder.clearCallingIdentity();
    List<UserInfo> users;
    try {
      users=UserManager.get(mContext).getUsers();
    }
  finally {
      Binder.restoreCallingIdentity(token);
    }
    for (    UserInfo user : users) {
      if (user.isRestricted()) {
        addVpnUserLocked(user.id);
      }
    }
  }
  mNetworkAgent.addUidRanges(mVpnUsers.toArray(new UidRange[mVpnUsers.size()]));
}
