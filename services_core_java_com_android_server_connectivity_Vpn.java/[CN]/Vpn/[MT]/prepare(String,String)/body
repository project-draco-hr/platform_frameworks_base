{
  if (oldPackage != null && !oldPackage.equals(mPackage)) {
    if (!oldPackage.equals(VpnConfig.LEGACY_VPN) && isVpnUserPreConsented(oldPackage)) {
      long token=Binder.clearCallingIdentity();
      try {
        prepare(null,oldPackage);
      }
  finally {
        Binder.restoreCallingIdentity(token);
      }
      return true;
    }
    return false;
  }
  if (newPackage == null || (newPackage.equals(mPackage) && !newPackage.equals(VpnConfig.LEGACY_VPN))) {
    return true;
  }
  enforceControlPermission();
  if (mInterface != null) {
    agentDisconnect();
    jniReset(mInterface);
    mInterface=null;
    mVpnUsers=null;
  }
  if (mConnection != null) {
    try {
      mConnection.mService.transact(IBinder.LAST_CALL_TRANSACTION,Parcel.obtain(),null,IBinder.FLAG_ONEWAY);
    }
 catch (    Exception e) {
    }
    mContext.unbindService(mConnection);
    mConnection=null;
  }
 else   if (mLegacyVpnRunner != null) {
    mLegacyVpnRunner.exit();
    mLegacyVpnRunner=null;
  }
  long token=Binder.clearCallingIdentity();
  try {
    mNetd.denyProtect(mOwnerUID);
  }
 catch (  Exception e) {
    Log.wtf(TAG,"Failed to disallow UID " + mOwnerUID + " to call protect() "+ e);
  }
 finally {
    Binder.restoreCallingIdentity(token);
  }
  Log.i(TAG,"Switched from " + mPackage + " to "+ newPackage);
  mPackage=newPackage;
  mOwnerUID=getAppUid(newPackage);
  token=Binder.clearCallingIdentity();
  try {
    mNetd.allowProtect(mOwnerUID);
  }
 catch (  Exception e) {
    Log.wtf(TAG,"Failed to allow UID " + mOwnerUID + " to call protect() "+ e);
  }
 finally {
    Binder.restoreCallingIdentity(token);
  }
  mConfig=null;
  updateState(DetailedState.IDLE,"prepare");
  return true;
}
