{
  final boolean isV30=(vcardType == V30);
  ExportTestResolver resolver=new ExportTestResolver();
  ContactEntry entry=resolver.buildContactEntry();
  entry.buildData(StructuredName.CONTENT_ITEM_TYPE).put(StructuredName.FAMILY_NAME,"DoNotEmitFamilyName1").put(StructuredName.GIVEN_NAME,"DoNotEmitGivenName1").put(StructuredName.MIDDLE_NAME,"DoNotEmitMiddleName1").put(StructuredName.PREFIX,"DoNotEmitPrefix1").put(StructuredName.SUFFIX,"DoNotEmitSuffix1").put(StructuredName.PHONETIC_FAMILY_NAME,"DoNotEmitPhoneticFamily1").put(StructuredName.PHONETIC_GIVEN_NAME,"DoNotEmitPhoneticGiven1").put(StructuredName.PHONETIC_MIDDLE_NAME,"DoNotEmitPhoneticMiddle1");
  entry.buildData(StructuredName.CONTENT_ITEM_TYPE).put(StructuredName.FAMILY_NAME,"AppropriateFamilyName").put(StructuredName.GIVEN_NAME,"AppropriateGivenName").put(StructuredName.MIDDLE_NAME,"AppropriateMiddleName").put(StructuredName.PREFIX,"AppropriatePrefix").put(StructuredName.SUFFIX,"AppropriateSuffix").put(StructuredName.PHONETIC_FAMILY_NAME,"AppropriatePhoneticFamily").put(StructuredName.PHONETIC_GIVEN_NAME,"AppropriatePhoneticGiven").put(StructuredName.PHONETIC_MIDDLE_NAME,"AppropriatePhoneticMiddle").put(StructuredName.IS_PRIMARY,1);
  entry.buildData(StructuredName.CONTENT_ITEM_TYPE).put(StructuredName.FAMILY_NAME,"DoNotEmitFamilyName2").put(StructuredName.GIVEN_NAME,"DoNotEmitGivenName2").put(StructuredName.MIDDLE_NAME,"DoNotEmitMiddleName2").put(StructuredName.PREFIX,"DoNotEmitPrefix2").put(StructuredName.SUFFIX,"DoNotEmitSuffix2").put(StructuredName.PHONETIC_FAMILY_NAME,"DoNotEmitPhoneticFamily2").put(StructuredName.PHONETIC_GIVEN_NAME,"DoNotEmitPhoneticGiven2").put(StructuredName.PHONETIC_MIDDLE_NAME,"DoNotEmitPhoneticMiddle2").put(StructuredName.IS_PRIMARY,1);
  VCardVerifier verifier=new VCardVerifier(resolver,vcardType);
  PropertyNodesVerifierElem elem=verifier.addPropertyNodesVerifierElem().addNodeWithOrder("N","AppropriateFamilyName;AppropriateGivenName;AppropriateMiddleName;" + "AppropriatePrefix;AppropriateSuffix",Arrays.asList("AppropriateFamilyName","AppropriateGivenName","AppropriateMiddleName","AppropriatePrefix","AppropriateSuffix")).addNodeWithOrder("FN","AppropriatePrefix AppropriateGivenName " + "AppropriateMiddleName AppropriateFamilyName AppropriateSuffix").addNodeWithoutOrder("X-PHONETIC-FIRST-NAME","AppropriatePhoneticGiven").addNodeWithoutOrder("X-PHONETIC-MIDDLE-NAME","AppropriatePhoneticMiddle").addNodeWithoutOrder("X-PHONETIC-LAST-NAME","AppropriatePhoneticFamily");
  if (isV30) {
    elem.addNodeWithoutOrder("SORT-STRING","AppropriatePhoneticGiven AppropriatePhoneticMiddle " + "AppropriatePhoneticFamily");
  }
  verifier.verify();
}
