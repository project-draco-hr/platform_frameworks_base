{
  final boolean isV30=(version == V30);
  ExportTestResolver resolver=new ExportTestResolver();
  ContentValues contentValues=resolver.buildData(StructuredName.CONTENT_ITEM_TYPE);
  contentValues.put(StructuredName.FAMILY_NAME,"AppropriateFamilyName");
  contentValues.put(StructuredName.GIVEN_NAME,"AppropriateGivenName");
  contentValues.put(StructuredName.MIDDLE_NAME,"AppropriateMiddleName");
  contentValues.put(StructuredName.PREFIX,"AppropriatePrefix");
  contentValues.put(StructuredName.SUFFIX,"AppropriateSuffix");
  contentValues.put(StructuredName.PHONETIC_FAMILY_NAME,"AppropriatePhoneticFamily");
  contentValues.put(StructuredName.PHONETIC_GIVEN_NAME,"AppropriatePhoneticGiven");
  contentValues.put(StructuredName.PHONETIC_MIDDLE_NAME,"AppropriatePhoneticMiddle");
  VCardVerificationHandler handler=new VCardVerificationHandler(this,version);
  PropertyNodesVerifier verifier=handler.addNewVerifier().addNodeWithOrder("N","AppropriateFamilyName;AppropriateGivenName;AppropriateMiddleName;" + "AppropriatePrefix;AppropriateSuffix",Arrays.asList("AppropriateFamilyName","AppropriateGivenName","AppropriateMiddleName","AppropriatePrefix","AppropriateSuffix")).addNodeWithOrder("FN","AppropriatePrefix AppropriateGivenName " + "AppropriateMiddleName AppropriateFamilyName AppropriateSuffix").addNodeWithoutOrder("X-PHONETIC-FIRST-NAME","AppropriatePhoneticGiven").addNodeWithoutOrder("X-PHONETIC-MIDDLE-NAME","AppropriatePhoneticMiddle").addNodeWithoutOrder("X-PHONETIC-LAST-NAME","AppropriatePhoneticFamily");
  if (isV30) {
    verifier.addNodeWithoutOrder("SORT-STRING","AppropriatePhoneticGiven AppropriatePhoneticMiddle " + "AppropriatePhoneticFamily");
  }
  verifyOneComposition(resolver,handler,version);
}
