{
  if (stats != null) {
    long txgood=stats.txmpdu_be + stats.txmpdu_bk + stats.txmpdu_vi+ stats.txmpdu_vo;
    long txretries=stats.retries_be + stats.retries_bk + stats.retries_vi+ stats.retries_vo;
    long rxgood=stats.rxmpdu_be + stats.rxmpdu_bk + stats.rxmpdu_vi+ stats.rxmpdu_vo;
    long txbad=stats.lostmpdu_be + stats.lostmpdu_bk + stats.lostmpdu_vi+ stats.lostmpdu_vo;
    if (mLastPacketCountUpdateTimeStamp != RESET_TIME_STAMP && mLastPacketCountUpdateTimeStamp < timeStamp && txBad <= txbad && txSuccess <= txgood && rxSuccess <= rxgood && txRetries <= txretries) {
      long timeDelta=timeStamp - mLastPacketCountUpdateTimeStamp;
      double lastSampleWeight=Math.exp(-1.0 * timeDelta / FILTER_TIME_CONSTANT);
      double currentSampleWeight=1.0 - lastSampleWeight;
      txBadRate=txBadRate * lastSampleWeight + (txbad - txBad) * OUTPUT_SCALE_FACTOR / timeDelta * currentSampleWeight;
      txSuccessRate=txSuccessRate * lastSampleWeight + (txgood - txSuccess) * OUTPUT_SCALE_FACTOR / timeDelta * currentSampleWeight;
      rxSuccessRate=rxSuccessRate * lastSampleWeight + (rxgood - rxSuccess) * OUTPUT_SCALE_FACTOR / timeDelta * currentSampleWeight;
      txRetriesRate=txRetriesRate * lastSampleWeight + (txretries - txRetries) * OUTPUT_SCALE_FACTOR / timeDelta * currentSampleWeight;
    }
 else {
      txBadRate=0;
      txSuccessRate=0;
      rxSuccessRate=0;
      txRetriesRate=0;
    }
    txBad=txbad;
    txSuccess=txgood;
    rxSuccess=rxgood;
    txRetries=txretries;
    mLastPacketCountUpdateTimeStamp=timeStamp;
  }
 else {
    txBad=0;
    txSuccess=0;
    rxSuccess=0;
    txRetries=0;
    txBadRate=0;
    txSuccessRate=0;
    rxSuccessRate=0;
    txRetriesRate=0;
    mLastPacketCountUpdateTimeStamp=RESET_TIME_STAMP;
  }
}
