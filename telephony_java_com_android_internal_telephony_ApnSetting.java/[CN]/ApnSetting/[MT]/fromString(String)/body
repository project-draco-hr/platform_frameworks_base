{
  if (data == null)   return null;
  int version;
  if (data.matches(V2_FORMAT_REGEX + ".*")) {
    version=2;
    data=data.replaceFirst(V2_FORMAT_REGEX,"");
  }
 else {
    version=1;
  }
  String[] a=data.split("\\s*,\\s*");
  if (a.length < 14) {
    return null;
  }
  int authType;
  try {
    authType=Integer.parseInt(a[12]);
  }
 catch (  Exception e) {
    authType=0;
  }
  String[] typeArray;
  String protocol, roamingProtocol;
  boolean enabled;
  int timer, apnclass;
  if (version == 1) {
    typeArray=new String[a.length - 13];
    System.arraycopy(a,13,typeArray,0,a.length - 13);
    protocol=RILConstants.SETUP_DATA_PROTOCOL_IP;
    roamingProtocol=RILConstants.SETUP_DATA_PROTOCOL_IP;
    enabled=true;
    timer=0;
    apnclass=0;
  }
 else {
    if (a.length < 16) {
      return null;
    }
    typeArray=a[13].split("\\s*\\|\\s*");
    protocol=a[14];
    roamingProtocol=a[15];
    enabled=Integer.parseInt(a[16]) != 0;
    timer=Integer.parseInt(a[17]);
    apnclass=Integer.parseInt(a[18]);
  }
  return new ApnSetting(-1,a[10] + a[11],a[0],a[1],a[2],a[3],a[7],a[8],a[9],a[4],a[5],authType,typeArray,protocol,roamingProtocol,enabled,timer,apnclass);
}
