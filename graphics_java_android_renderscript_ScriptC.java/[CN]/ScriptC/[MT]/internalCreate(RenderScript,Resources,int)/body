{
  byte[] pgm;
  int pgmLength;
  InputStream is=resources.openRawResource(resourceID);
  try {
    try {
      pgm=new byte[1024];
      pgmLength=0;
      while (true) {
        int bytesLeft=pgm.length - pgmLength;
        if (bytesLeft == 0) {
          byte[] buf2=new byte[pgm.length * 2];
          System.arraycopy(pgm,0,buf2,0,pgm.length);
          pgm=buf2;
          bytesLeft=pgm.length - pgmLength;
        }
        int bytesRead=is.read(pgm,pgmLength,bytesLeft);
        if (bytesRead <= 0) {
          break;
        }
        pgmLength+=bytesRead;
      }
    }
  finally {
      is.close();
    }
  }
 catch (  IOException e) {
    throw new Resources.NotFoundException();
  }
  rs.nScriptCBegin();
  rs.nScriptCSetScript(pgm,0,pgmLength);
  String packageName=rs.getApplicationContext().getPackageResourcePath();
  String resName=resources.getResourceName(resourceID);
  String cacheDir=rs.getApplicationContext().getCacheDir().toString();
  Log.v(TAG,"Create script for resource = " + resName);
  return rs.nScriptCCreate(packageName,resName,cacheDir);
}
