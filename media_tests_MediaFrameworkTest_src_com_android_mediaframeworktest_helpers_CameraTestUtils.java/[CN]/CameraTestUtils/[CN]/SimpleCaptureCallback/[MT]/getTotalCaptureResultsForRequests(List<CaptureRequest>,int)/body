{
  if (numResultsWait < 0) {
    throw new IllegalArgumentException("numResultsWait must be no less than 0");
  }
  if (captureRequests == null || captureRequests.size() == 0) {
    throw new IllegalArgumentException("captureRequests must have at least 1 request.");
  }
  HashMap<CaptureRequest,ArrayList<Integer>> remainingResultIndicesMap=new HashMap<>();
  for (int i=0; i < captureRequests.size(); i++) {
    CaptureRequest request=captureRequests.get(i);
    ArrayList<Integer> indices=remainingResultIndicesMap.get(request);
    if (indices == null) {
      indices=new ArrayList<>();
      remainingResultIndicesMap.put(request,indices);
    }
    indices.add(i);
  }
  TotalCaptureResult[] results=new TotalCaptureResult[captureRequests.size()];
  int i=0;
  do {
    TotalCaptureResult result=getTotalCaptureResult(CAPTURE_RESULT_TIMEOUT_MS);
    CaptureRequest request=result.getRequest();
    ArrayList<Integer> indices=remainingResultIndicesMap.get(request);
    if (indices != null) {
      results[indices.get(0)]=result;
      indices.remove(0);
      if (indices.isEmpty()) {
        remainingResultIndicesMap.remove(request);
      }
    }
    if (remainingResultIndicesMap.isEmpty()) {
      return results;
    }
  }
 while (i++ < numResultsWait);
  throw new TimeoutRuntimeException("Unable to get the expected capture result after " + "waiting for " + numResultsWait + " results");
}
