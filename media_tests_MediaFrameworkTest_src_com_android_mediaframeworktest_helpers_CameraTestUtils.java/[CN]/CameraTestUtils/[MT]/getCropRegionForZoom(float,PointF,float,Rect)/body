{
  if (zoomFactor < 1.0) {
    throw new IllegalArgumentException("zoom factor " + zoomFactor + " should be >= 1.0");
  }
  if (center.x > 1.0 || center.x < 0) {
    throw new IllegalArgumentException("center.x " + center.x + " should be in range of [0, 1.0]");
  }
  if (center.y > 1.0 || center.y < 0) {
    throw new IllegalArgumentException("center.y " + center.y + " should be in range of [0, 1.0]");
  }
  if (maxZoom < 1.0) {
    throw new IllegalArgumentException("max zoom factor " + maxZoom + " should be >= 1.0");
  }
  if (activeArray == null) {
    throw new IllegalArgumentException("activeArray must not be null");
  }
  float minCenterLength=Math.min(Math.min(center.x,1.0f - center.x),Math.min(center.y,1.0f - center.y));
  float minEffectiveZoom=0.5f / minCenterLength;
  if (minEffectiveZoom > maxZoom) {
    throw new IllegalArgumentException("Requested center " + center.toString() + " has minimal zoomable factor "+ minEffectiveZoom+ ", which exceeds max"+ " zoom factor "+ maxZoom);
  }
  if (zoomFactor < minEffectiveZoom) {
    Log.w(TAG,"Requested zoomFactor " + zoomFactor + " > minimal zoomable factor "+ minEffectiveZoom+ ". It will be overwritten by "+ minEffectiveZoom);
    zoomFactor=minEffectiveZoom;
  }
  int cropCenterX=(int)(activeArray.width() * center.x);
  int cropCenterY=(int)(activeArray.height() * center.y);
  int cropWidth=(int)(activeArray.width() / zoomFactor);
  int cropHeight=(int)(activeArray.height() / zoomFactor);
  return new Rect(cropCenterX - cropWidth / 2,cropCenterY - cropHeight / 2,cropCenterX + cropWidth / 2 - 1,cropCenterY + cropHeight / 2 - 1);
}
