{
  basicValidateJpegImage(image,expectedSize);
  byte[] jpegBuffer=getDataFromImage(image);
  String jpegFilename=DEBUG_FILE_NAME_BASE + "/verifyJpegKeys.jpeg";
  dumpFile(jpegFilename,jpegBuffer);
  ExifInterface exif=new ExifInterface(jpegFilename);
  if (expectedThumbnailSize.equals(new Size(0,0))) {
    collector.expectTrue("Jpeg shouldn't have thumbnail when thumbnail size is (0, 0)",!exif.hasThumbnail());
  }
 else {
    collector.expectTrue("Jpeg must have thumbnail for thumbnail size " + expectedThumbnailSize,exif.hasThumbnail());
  }
  Size resultThumbnailSize=captureResult.get(CaptureResult.JPEG_THUMBNAIL_SIZE);
  int orientationTested=expectedExifData.jpegOrientation;
  if ((orientationTested == 90 || orientationTested == 270) && staticInfo.isHardwareLevelLimitedOrBetter()) {
    int exifOrientation=exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,-1);
    if (exifOrientation == ExifInterface.ORIENTATION_UNDEFINED) {
      resultThumbnailSize=new Size(resultThumbnailSize.getHeight(),resultThumbnailSize.getWidth());
    }
  }
  collector.expectEquals("JPEG thumbnail size result and request should match",expectedThumbnailSize,resultThumbnailSize);
  if (collector.expectKeyValueNotNull(captureResult,CaptureResult.JPEG_GPS_LOCATION) != null) {
    collector.expectTrue("GPS location result and request should match.",areGpsFieldsEqual(expectedExifData.gpsLocation,captureResult.get(CaptureResult.JPEG_GPS_LOCATION)));
  }
  collector.expectEquals("JPEG orientation result and request should match",expectedExifData.jpegOrientation,captureResult.get(CaptureResult.JPEG_ORIENTATION));
  collector.expectEquals("JPEG quality result and request should match",expectedExifData.jpegQuality,captureResult.get(CaptureResult.JPEG_QUALITY));
  collector.expectEquals("JPEG thumbnail quality result and request should match",expectedExifData.thumbnailQuality,captureResult.get(CaptureResult.JPEG_THUMBNAIL_QUALITY));
  if (!staticInfo.isHardwareLevelLegacy()) {
    verifyJpegExifExtraTags(exif,expectedSize,captureResult,staticInfo,collector);
  }
}
