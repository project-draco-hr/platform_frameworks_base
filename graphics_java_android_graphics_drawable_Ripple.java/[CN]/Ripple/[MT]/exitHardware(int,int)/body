{
  mPendingAnimations.clear();
  final float startX=MathUtils.lerp(mClampedStartingX - mBounds.exactCenterX(),mOuterX,mTweenX);
  final float startY=MathUtils.lerp(mClampedStartingY - mBounds.exactCenterY(),mOuterY,mTweenY);
  final float startRadius=MathUtils.lerp(0,mOuterRadius,mTweenRadius);
  final Paint paint=getTempPaint();
  paint.setAntiAlias(true);
  paint.setColor(mColorOpaque);
  paint.setAlpha((int)(255 * mOpacity + 0.5f));
  paint.setStyle(Style.FILL);
  mPropPaint=CanvasProperty.createPaint(paint);
  mPropRadius=CanvasProperty.createFloat(startRadius);
  mPropX=CanvasProperty.createFloat(startX);
  mPropY=CanvasProperty.createFloat(startY);
  final RenderNodeAnimator radiusAnim=new RenderNodeAnimator(mPropRadius,mOuterRadius);
  radiusAnim.setDuration(radiusDuration);
  radiusAnim.setInterpolator(DECEL_INTERPOLATOR);
  final RenderNodeAnimator xAnim=new RenderNodeAnimator(mPropX,mOuterX);
  xAnim.setDuration(radiusDuration);
  xAnim.setInterpolator(DECEL_INTERPOLATOR);
  final RenderNodeAnimator yAnim=new RenderNodeAnimator(mPropY,mOuterY);
  yAnim.setDuration(radiusDuration);
  yAnim.setInterpolator(DECEL_INTERPOLATOR);
  final RenderNodeAnimator opacityAnim=new RenderNodeAnimator(mPropPaint,RenderNodeAnimator.PAINT_ALPHA,0);
  opacityAnim.setDuration(opacityDuration);
  opacityAnim.setInterpolator(LINEAR_INTERPOLATOR);
  opacityAnim.addListener(mAnimationListener);
  mPendingAnimations.add(radiusAnim);
  mPendingAnimations.add(opacityAnim);
  mPendingAnimations.add(xAnim);
  mPendingAnimations.add(yAnim);
  mHardwareAnimating=true;
  mOpacity=0;
  mTweenX=1;
  mTweenY=1;
  mTweenRadius=1;
  invalidateSelf();
}
