{
  final ObjectAnimator radius=ObjectAnimator.ofFloat(this,"radius",mOuterRadius);
  radius.setAutoCancel(true);
  radius.setDuration(radiusDuration);
  final ObjectAnimator x=ObjectAnimator.ofFloat(this,"x",mOuterX);
  x.setAutoCancel(true);
  x.setDuration(radiusDuration);
  final ObjectAnimator y=ObjectAnimator.ofFloat(this,"y",mOuterY);
  y.setAutoCancel(true);
  y.setDuration(radiusDuration);
  final ObjectAnimator opacity=ObjectAnimator.ofFloat(this,"opacity",0);
  opacity.setAutoCancel(true);
  opacity.setDuration(opacityDuration);
  opacity.addListener(mAnimationListener);
  final ObjectAnimator outerOpacity;
  if (outerInflection > 0) {
    outerOpacity=ObjectAnimator.ofFloat(this,"outerOpacity",inflectionOpacity);
    outerOpacity.setDuration(outerInflection);
    final int outerDuration=opacityDuration - outerInflection;
    outerOpacity.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        final ObjectAnimator outerFadeOut=ObjectAnimator.ofFloat(Ripple.this,"outerOpacity",0);
        outerFadeOut.setDuration(outerDuration);
        mAnimOuterOpacity=outerFadeOut;
        outerFadeOut.start();
      }
      @Override public void onAnimationCancel(      Animator animation){
        animation.removeListener(this);
      }
    }
);
  }
 else {
    outerOpacity=ObjectAnimator.ofFloat(this,"outerOpacity",0);
    outerOpacity.setDuration(opacityDuration);
  }
  mAnimRadius=radius;
  mAnimOpacity=opacity;
  mAnimOuterOpacity=outerOpacity;
  mAnimX=opacity;
  mAnimY=opacity;
  radius.start();
  opacity.start();
  outerOpacity.start();
  x.start();
  y.start();
}
