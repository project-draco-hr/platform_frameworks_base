{
  mHasPendingHardwareExit=false;
  final int radiusDuration=mPendingRadiusDuration;
  final int opacityDuration=mPendingOpacityDuration;
  final float startX=MathUtils.lerp(mClampedStartingX - mBounds.exactCenterX(),mOuterX,mTweenX);
  final float startY=MathUtils.lerp(mClampedStartingY - mBounds.exactCenterY(),mOuterY,mTweenY);
  final float startRadius=MathUtils.lerp(0,mOuterRadius,mTweenRadius);
  final Paint paint=getTempPaint(p);
  paint.setAlpha((int)(paint.getAlpha() * mOpacity + 0.5f));
  mPropPaint=CanvasProperty.createPaint(paint);
  mPropRadius=CanvasProperty.createFloat(startRadius);
  mPropX=CanvasProperty.createFloat(startX);
  mPropY=CanvasProperty.createFloat(startY);
  final RenderNodeAnimator radiusAnim=new RenderNodeAnimator(mPropRadius,mOuterRadius);
  radiusAnim.setDuration(radiusDuration);
  radiusAnim.setInterpolator(DECEL_INTERPOLATOR);
  radiusAnim.setTarget(c);
  radiusAnim.start();
  final RenderNodeAnimator xAnim=new RenderNodeAnimator(mPropX,mOuterX);
  xAnim.setDuration(radiusDuration);
  xAnim.setInterpolator(DECEL_INTERPOLATOR);
  xAnim.setTarget(c);
  xAnim.start();
  final RenderNodeAnimator yAnim=new RenderNodeAnimator(mPropY,mOuterY);
  yAnim.setDuration(radiusDuration);
  yAnim.setInterpolator(DECEL_INTERPOLATOR);
  yAnim.setTarget(c);
  yAnim.start();
  final RenderNodeAnimator opacityAnim=new RenderNodeAnimator(mPropPaint,RenderNodeAnimator.PAINT_ALPHA,0);
  opacityAnim.setDuration(opacityDuration);
  opacityAnim.setInterpolator(LINEAR_INTERPOLATOR);
  opacityAnim.addListener(mAnimationListener);
  opacityAnim.setTarget(c);
  opacityAnim.start();
  mRunningAnimations.add(radiusAnim);
  mRunningAnimations.add(opacityAnim);
  mRunningAnimations.add(xAnim);
  mRunningAnimations.add(yAnim);
  mHardwareAnimating=true;
  mOpacity=0;
  mTweenX=1;
  mTweenY=1;
  mTweenRadius=1;
}
