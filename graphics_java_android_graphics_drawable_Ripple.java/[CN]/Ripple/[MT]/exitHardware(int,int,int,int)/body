{
  mPendingAnimations.clear();
  final Paint outerPaint=new Paint();
  outerPaint.setAntiAlias(true);
  outerPaint.setColor(mColor);
  outerPaint.setAlpha((int)(255 * mOuterOpacity + 0.5f));
  outerPaint.setStyle(Style.FILL);
  mPropOuterPaint=CanvasProperty.createPaint(outerPaint);
  mPropOuterRadius=CanvasProperty.createFloat(mOuterRadius);
  mPropOuterX=CanvasProperty.createFloat(mOuterX);
  mPropOuterY=CanvasProperty.createFloat(mOuterY);
  final Paint paint=new Paint();
  paint.setAntiAlias(true);
  paint.setColor(mColor);
  paint.setAlpha((int)(255 * mOpacity + 0.5f));
  paint.setStyle(Style.FILL);
  mPropPaint=CanvasProperty.createPaint(paint);
  mPropRadius=CanvasProperty.createFloat(mRadius);
  mPropX=CanvasProperty.createFloat(mX);
  mPropY=CanvasProperty.createFloat(mY);
  final RenderNodeAnimator radius=new RenderNodeAnimator(mPropRadius,mOuterRadius);
  radius.setDuration(radiusDuration);
  radius.setInterpolator(LINEAR_INTERPOLATOR);
  final RenderNodeAnimator x=new RenderNodeAnimator(mPropX,mOuterX);
  x.setDuration(radiusDuration);
  x.setInterpolator(LINEAR_INTERPOLATOR);
  final RenderNodeAnimator y=new RenderNodeAnimator(mPropY,mOuterY);
  y.setDuration(radiusDuration);
  y.setInterpolator(LINEAR_INTERPOLATOR);
  final RenderNodeAnimator opacity=new RenderNodeAnimator(mPropPaint,RenderNodeAnimator.PAINT_ALPHA,0);
  opacity.setDuration(opacityDuration);
  opacity.setInterpolator(LINEAR_INTERPOLATOR);
  final RenderNodeAnimator outerOpacity;
  if (outerInflection > 0) {
    outerOpacity=new RenderNodeAnimator(mPropOuterPaint,RenderNodeAnimator.PAINT_ALPHA,inflectionOpacity);
    outerOpacity.setDuration(outerInflection);
    outerOpacity.setInterpolator(LINEAR_INTERPOLATOR);
    final int outerDuration=opacityDuration - outerInflection;
    if (outerDuration > 0) {
      final RenderNodeAnimator outerFadeOut=new RenderNodeAnimator(mPropOuterPaint,RenderNodeAnimator.PAINT_ALPHA,0);
      outerFadeOut.setDuration(outerDuration);
      outerFadeOut.setInterpolator(LINEAR_INTERPOLATOR);
      outerFadeOut.setStartDelay(outerInflection);
      outerFadeOut.addListener(mAnimationListener);
      mPendingAnimations.add(outerFadeOut);
    }
 else {
      outerOpacity.addListener(mAnimationListener);
    }
  }
 else {
    outerOpacity=new RenderNodeAnimator(mPropOuterPaint,RenderNodeAnimator.PAINT_ALPHA,0);
    outerOpacity.setInterpolator(LINEAR_INTERPOLATOR);
    outerOpacity.setDuration(opacityDuration);
    outerOpacity.addListener(mAnimationListener);
  }
  mPendingAnimations.add(radius);
  mPendingAnimations.add(opacity);
  mPendingAnimations.add(outerOpacity);
  mPendingAnimations.add(x);
  mPendingAnimations.add(y);
  mHardwareAnimating=true;
  invalidateSelf();
}
