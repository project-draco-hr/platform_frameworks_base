{
  mPendingAnimations.clear();
  final float startX=MathUtils.lerp(mClampedStartingX - mBounds.exactCenterX(),mOuterX,mTweenX);
  final float startY=MathUtils.lerp(mClampedStartingY - mBounds.exactCenterY(),mOuterY,mTweenY);
  final Paint outerPaint=new Paint();
  outerPaint.setAntiAlias(true);
  outerPaint.setColor(mColor);
  outerPaint.setAlpha((int)(255 * mOuterOpacity + 0.5f));
  outerPaint.setStyle(Style.FILL);
  mPropOuterPaint=CanvasProperty.createPaint(outerPaint);
  mPropOuterRadius=CanvasProperty.createFloat(mOuterRadius);
  mPropOuterX=CanvasProperty.createFloat(mOuterX);
  mPropOuterY=CanvasProperty.createFloat(mOuterY);
  final float startRadius=MathUtils.lerp(0,mOuterRadius,mTweenRadius);
  final Paint paint=new Paint();
  paint.setAntiAlias(true);
  paint.setColor(mColor);
  paint.setAlpha((int)(255 * mOpacity + 0.5f));
  paint.setStyle(Style.FILL);
  mPropPaint=CanvasProperty.createPaint(paint);
  mPropRadius=CanvasProperty.createFloat(startRadius);
  mPropX=CanvasProperty.createFloat(startX);
  mPropY=CanvasProperty.createFloat(startY);
  final RenderNodeAnimator radiusAnim=new RenderNodeAnimator(mPropRadius,mOuterRadius);
  radiusAnim.setDuration(radiusDuration);
  radiusAnim.setInterpolator(DECEL_INTERPOLATOR);
  final RenderNodeAnimator xAnim=new RenderNodeAnimator(mPropX,mOuterX);
  xAnim.setDuration(radiusDuration);
  xAnim.setInterpolator(DECEL_INTERPOLATOR);
  final RenderNodeAnimator yAnim=new RenderNodeAnimator(mPropY,mOuterY);
  yAnim.setDuration(radiusDuration);
  yAnim.setInterpolator(DECEL_INTERPOLATOR);
  final RenderNodeAnimator opacityAnim=new RenderNodeAnimator(mPropPaint,RenderNodeAnimator.PAINT_ALPHA,0);
  opacityAnim.setDuration(opacityDuration);
  opacityAnim.setInterpolator(LINEAR_INTERPOLATOR);
  final RenderNodeAnimator outerOpacityAnim;
  if (outerInflection > 0) {
    outerOpacityAnim=new RenderNodeAnimator(mPropOuterPaint,RenderNodeAnimator.PAINT_ALPHA,inflectionOpacity);
    outerOpacityAnim.setDuration(outerInflection);
    outerOpacityAnim.setInterpolator(LINEAR_INTERPOLATOR);
    final int outerDuration=opacityDuration - outerInflection;
    if (outerDuration > 0) {
      final RenderNodeAnimator outerFadeOutAnim=new RenderNodeAnimator(mPropOuterPaint,RenderNodeAnimator.PAINT_ALPHA,0);
      outerFadeOutAnim.setDuration(outerDuration);
      outerFadeOutAnim.setInterpolator(LINEAR_INTERPOLATOR);
      outerFadeOutAnim.setStartDelay(outerInflection);
      outerFadeOutAnim.setStartValue(inflectionOpacity);
      outerFadeOutAnim.addListener(mAnimationListener);
      mPendingAnimations.add(outerFadeOutAnim);
    }
 else {
      outerOpacityAnim.addListener(mAnimationListener);
    }
  }
 else {
    outerOpacityAnim=new RenderNodeAnimator(mPropOuterPaint,RenderNodeAnimator.PAINT_ALPHA,0);
    outerOpacityAnim.setInterpolator(LINEAR_INTERPOLATOR);
    outerOpacityAnim.setDuration(opacityDuration);
    outerOpacityAnim.addListener(mAnimationListener);
  }
  mPendingAnimations.add(radiusAnim);
  mPendingAnimations.add(opacityAnim);
  mPendingAnimations.add(outerOpacityAnim);
  mPendingAnimations.add(xAnim);
  mPendingAnimations.add(yAnim);
  mHardwareAnimating=true;
  invalidateSelf();
}
