{
  if (Config.LOGV) {
    Log.v(LOGTAG,"LoadListener.endData(): url: " + url());
  }
  if (mCancelled)   return;
switch (mStatusCode) {
case HTTP_MOVED_PERMANENTLY:
    mPermanent=true;
case HTTP_FOUND:
case HTTP_SEE_OTHER:
case HTTP_TEMPORARY_REDIRECT:
  if (mMethod == null && mRequestHandle == null) {
    Log.e(LOGTAG,"LoadListener.endData(): method is null!");
    Log.e(LOGTAG,"LoadListener.endData(): url = " + url());
  }
if (mStatusCode == HTTP_TEMPORARY_REDIRECT) {
  if (mRequestHandle != null && mRequestHandle.getMethod().equals("POST")) {
    sendMessageInternal(obtainMessage(MSG_LOCATION_CHANGED_REQUEST));
  }
 else   if (mMethod != null && mMethod.equals("POST")) {
    sendMessageInternal(obtainMessage(MSG_LOCATION_CHANGED_REQUEST));
  }
 else {
    sendMessageInternal(obtainMessage(MSG_LOCATION_CHANGED));
  }
}
 else {
  sendMessageInternal(obtainMessage(MSG_LOCATION_CHANGED));
}
break;
case HTTP_AUTH:
case HTTP_PROXY_AUTH:
if (mAuthHeader != null && (Network.getInstance(mContext).isValidProxySet() || !mAuthHeader.isProxy())) {
Network.getInstance(mContext).handleAuthRequest(this);
}
 else {
final int stringId=com.android.internal.R.string.httpErrorUnsupportedAuthScheme;
error(EventHandler.ERROR_UNSUPPORTED_AUTH_SCHEME,getContext().getText(stringId).toString());
}
break;
case HTTP_NOT_MODIFIED:
if (mCacheLoader != null) {
detachRequestHandle();
mCacheLoader.load();
if (Config.LOGV) {
Log.v(LOGTAG,"LoadListener cache load url=" + url());
}
break;
}
case HTTP_NOT_FOUND:
default :
sendMessageInternal(obtainMessage(MSG_CONTENT_FINISHED));
detachRequestHandle();
break;
}
}
