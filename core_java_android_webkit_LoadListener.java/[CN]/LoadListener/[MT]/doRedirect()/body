{
  if (mCancelled) {
    return;
  }
  String redirectTo=mHeaders.getLocation();
  if (redirectTo != null) {
    int nativeResponse=createNativeResponse();
    redirectTo=nativeRedirectedToUrl(mUrl,redirectTo,nativeResponse);
    if (mCancelled) {
      return;
    }
    if (redirectTo == null) {
      Log.d(LOGTAG,"Redirection failed for " + mHeaders.getLocation());
      cancel();
      return;
    }
 else     if (!URLUtil.isNetworkUrl(redirectTo)) {
      final String text=mContext.getString(com.android.internal.R.string.open_permission_deny) + "\n" + redirectTo;
      nativeAddData(text.getBytes(),text.length());
      nativeFinished();
      clearNativeLoader();
      return;
    }
    if (mOriginalUrl == null) {
      mOriginalUrl=mUrl;
    }
    if (mCacheResult != null) {
      if (getErrorID() == OK) {
        CacheManager.saveCacheFile(mUrl,mCacheResult);
      }
      mCacheResult=null;
    }
    setUrl(redirectTo);
    if (mRequestHeaders == null) {
      mRequestHeaders=new HashMap<String,String>();
    }
    if (!checkCache(mRequestHeaders)) {
      if (mRequestHandle != null) {
        mRequestHandle.setupRedirect(redirectTo,mStatusCode,mRequestHeaders);
      }
 else {
        String method=mMethod;
        if (method == null) {
          return;
        }
        Network network=Network.getInstance(getContext());
        network.requestURL(method,mRequestHeaders,mPostData,this,mIsHighPriority);
      }
    }
  }
 else {
    commitHeaders();
    commitLoad();
    nativeFinished();
  }
  if (Config.LOGV) {
    Log.v(LOGTAG,"LoadListener.onRedirect(): redirect to: " + redirectTo);
  }
}
