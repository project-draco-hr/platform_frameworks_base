{
  final String quotedPrintable;
{
    final StringBuilder builder=new StringBuilder();
    final int length=value.length();
    for (int i=0; i < length; i++) {
      char ch=value.charAt(i);
      if (ch == '=' && i < length - 1) {
        char nextCh=value.charAt(i + 1);
        if (nextCh == ' ' || nextCh == '\t') {
          builder.append(nextCh);
          i++;
          continue;
        }
      }
      builder.append(ch);
    }
    quotedPrintable=builder.toString();
  }
  String[] lines;
  if (strictLineBreaking) {
    lines=quotedPrintable.split("\r\n");
  }
 else {
    StringBuilder builder=new StringBuilder();
    final int length=quotedPrintable.length();
    ArrayList<String> list=new ArrayList<String>();
    for (int i=0; i < length; i++) {
      char ch=quotedPrintable.charAt(i);
      if (ch == '\n') {
        list.add(builder.toString());
        builder=new StringBuilder();
      }
 else       if (ch == '\r') {
        list.add(builder.toString());
        builder=new StringBuilder();
        if (i < length - 1) {
          char nextCh=quotedPrintable.charAt(i + 1);
          if (nextCh == '\n') {
            i++;
          }
        }
      }
 else {
        builder.append(ch);
      }
    }
    final String lastLine=builder.toString();
    if (lastLine.length() > 0) {
      list.add(lastLine);
    }
    lines=list.toArray(new String[0]);
  }
  final StringBuilder builder=new StringBuilder();
  for (  String line : lines) {
    if (line.endsWith("=")) {
      line=line.substring(0,line.length() - 1);
    }
    builder.append(line);
  }
  final String rawString=builder.toString();
  if (TextUtils.isEmpty(rawString)) {
    Log.w(LOG_TAG,"Given raw string is empty.");
  }
  byte[] rawBytes=null;
  try {
    rawBytes=rawString.getBytes(sourceCharset);
  }
 catch (  UnsupportedEncodingException e) {
    Log.w(LOG_TAG,"Failed to decode: " + sourceCharset);
    rawBytes=rawString.getBytes();
  }
  byte[] decodedBytes=null;
  try {
    decodedBytes=QuotedPrintableCodec.decodeQuotedPrintable(rawBytes);
  }
 catch (  DecoderException e) {
    Log.e(LOG_TAG,"DecoderException is thrown.");
    decodedBytes=rawBytes;
  }
  try {
    return new String(decodedBytes,targetCharset);
  }
 catch (  UnsupportedEncodingException e) {
    Log.e(LOG_TAG,"Failed to encode: charset=" + targetCharset);
    return new String(decodedBytes);
  }
}
