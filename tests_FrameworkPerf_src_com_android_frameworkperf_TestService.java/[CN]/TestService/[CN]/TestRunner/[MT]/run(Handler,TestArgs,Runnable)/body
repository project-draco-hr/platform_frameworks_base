{
  mHandler=handler;
  mMaxRunTime=args.maxTime;
  if (args.combOp >= 0) {
    mForegroundOp=mOpPairs[args.combOp];
    mBackgroundOp=mOpPairs[args.combOp + 1];
  }
 else {
    mForegroundOp=mAvailOps[args.fgOp];
    mBackgroundOp=mAvailOps[args.bgOp];
  }
  mDoneCallback=doneCallback;
  mBackgroundThread=new RunnerThread("background",new Runnable(){
    @Override public void run(){
      boolean running;
      int ops=0;
      do {
        running=mBackgroundOp.onRun();
        ops++;
      }
 while (evalRepeat(running,true) && running);
      mBackgroundEndTime=SystemClock.uptimeMillis();
      mBackgroundOps=ops * mBackgroundOp.getOpsPerRun();
      threadFinished(false);
    }
  }
,Process.THREAD_PRIORITY_BACKGROUND);
  mForegroundThread=new RunnerThread("background",new Runnable(){
    @Override public void run(){
      boolean running;
      int ops=0;
      do {
        running=mForegroundOp.onRun();
        ops++;
      }
 while (evalRepeat(true,running) && running);
      mForegroundEndTime=SystemClock.uptimeMillis();
      mForegroundOps=ops * mForegroundOp.getOpsPerRun();
      threadFinished(true);
    }
  }
,Process.THREAD_PRIORITY_FOREGROUND);
  mForegroundOp.onInit(TestService.this,true);
  mBackgroundOp.onInit(TestService.this,false);
synchronized (this) {
    mStartTime=SystemClock.uptimeMillis();
    mBackgroundRunning=true;
    mForegroundRunning=true;
  }
  mBackgroundThread.start();
  mForegroundThread.start();
}
