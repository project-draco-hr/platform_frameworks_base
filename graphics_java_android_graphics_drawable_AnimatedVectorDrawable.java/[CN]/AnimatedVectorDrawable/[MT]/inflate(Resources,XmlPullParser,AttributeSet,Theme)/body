{
  int eventType=parser.getEventType();
  float pathErrorScale=1;
  while (eventType != XmlPullParser.END_DOCUMENT) {
    if (eventType == XmlPullParser.START_TAG) {
      final String tagName=parser.getName();
      if (ANIMATED_VECTOR.equals(tagName)) {
        final TypedArray a=obtainAttributes(res,theme,attrs,R.styleable.AnimatedVectorDrawable);
        int drawableRes=a.getResourceId(R.styleable.AnimatedVectorDrawable_drawable,0);
        if (drawableRes != 0) {
          VectorDrawable vectorDrawable=(VectorDrawable)res.getDrawable(drawableRes,theme).mutate();
          vectorDrawable.setAllowCaching(false);
          vectorDrawable.setCallback(mCallback);
          pathErrorScale=vectorDrawable.getPixelSize();
          if (mAnimatedVectorState.mVectorDrawable != null) {
            mAnimatedVectorState.mVectorDrawable.setCallback(null);
          }
          mAnimatedVectorState.mVectorDrawable=vectorDrawable;
        }
        a.recycle();
      }
 else       if (TARGET.equals(tagName)) {
        final TypedArray a=obtainAttributes(res,theme,attrs,R.styleable.AnimatedVectorDrawableTarget);
        final String target=a.getString(R.styleable.AnimatedVectorDrawableTarget_name);
        int id=a.getResourceId(R.styleable.AnimatedVectorDrawableTarget_animation,0);
        if (id != 0) {
          Animator objectAnimator=AnimatorInflater.loadAnimator(res,theme,id,pathErrorScale);
          setupAnimatorsForTarget(target,objectAnimator);
        }
        a.recycle();
      }
    }
    eventType=parser.next();
  }
}
