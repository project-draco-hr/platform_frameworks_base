{
  ArrayMap<String,SparseArray<PackageState>> pkgMap=other.mPackages.getMap();
  for (int ip=0; ip < pkgMap.size(); ip++) {
    String pkgName=pkgMap.keyAt(ip);
    SparseArray<PackageState> uids=pkgMap.valueAt(ip);
    for (int iu=0; iu < uids.size(); iu++) {
      int uid=uids.keyAt(iu);
      PackageState otherState=uids.valueAt(iu);
      final int NPROCS=otherState.mProcesses.size();
      final int NSRVS=otherState.mServices.size();
      for (int iproc=0; iproc < NPROCS; iproc++) {
        ProcessState otherProc=otherState.mProcesses.valueAt(iproc);
        if (otherProc.mCommonProcess != otherProc) {
          if (DEBUG)           Slog.d(TAG,"Adding pkg " + pkgName + " uid "+ uid+ " proc "+ otherProc.mName);
          ProcessState thisProc=getProcessStateLocked(pkgName,uid,otherProc.mName);
          if (thisProc.mCommonProcess == thisProc) {
            if (DEBUG)             Slog.d(TAG,"Existing process is single-package, splitting");
            thisProc.mMultiPackage=true;
            long now=SystemClock.uptimeMillis();
            final PackageState pkgState=getPackageStateLocked(pkgName,uid);
            thisProc=thisProc.clone(thisProc.mPackage,now);
            pkgState.mProcesses.put(thisProc.mName,thisProc);
          }
          thisProc.add(otherProc);
        }
      }
      for (int isvc=0; isvc < NSRVS; isvc++) {
        ServiceState otherSvc=otherState.mServices.valueAt(isvc);
        if (DEBUG)         Slog.d(TAG,"Adding pkg " + pkgName + " uid "+ uid+ " service "+ otherSvc.mName);
        ServiceState thisSvc=getServiceStateLocked(pkgName,uid,null,otherSvc.mName);
        thisSvc.add(otherSvc);
      }
    }
  }
  ArrayMap<String,SparseArray<ProcessState>> procMap=other.mProcesses.getMap();
  for (int ip=0; ip < procMap.size(); ip++) {
    SparseArray<ProcessState> uids=procMap.valueAt(ip);
    for (int iu=0; iu < uids.size(); iu++) {
      int uid=uids.keyAt(iu);
      ProcessState otherProc=uids.valueAt(iu);
      ProcessState thisProc=mProcesses.get(otherProc.mName,uid);
      if (DEBUG)       Slog.d(TAG,"Adding uid " + uid + " proc "+ otherProc.mName);
      if (thisProc == null) {
        if (DEBUG)         Slog.d(TAG,"Creating new process!");
        thisProc=new ProcessState(this,otherProc.mPackage,uid,otherProc.mName);
        mProcesses.put(otherProc.mName,uid,thisProc);
        PackageState thisState=getPackageStateLocked(otherProc.mPackage,uid);
        if (!thisState.mProcesses.containsKey(otherProc.mName)) {
          thisState.mProcesses.put(otherProc.mName,thisProc);
        }
      }
      thisProc.add(otherProc);
    }
  }
  for (int i=0; i < ADJ_COUNT; i++) {
    if (DEBUG)     Slog.d(TAG,"Total duration #" + i + " inc by "+ other.mMemFactorDurations[i]+ " from "+ mMemFactorDurations[i]);
    mMemFactorDurations[i]+=other.mMemFactorDurations[i];
  }
  if (other.mTimePeriodStartClock < mTimePeriodStartClock) {
    mTimePeriodStartClock=other.mTimePeriodStartClock;
    mTimePeriodStartClockStr=other.mTimePeriodStartClockStr;
  }
  mTimePeriodEndRealtime+=other.mTimePeriodEndRealtime - other.mTimePeriodStartRealtime;
}
