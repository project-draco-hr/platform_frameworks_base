{
  final boolean hadData=mPackages.getMap().size() > 0 || mProcesses.getMap().size() > 0;
  if (hadData) {
    resetSafely();
  }
  if (!readCheckedInt(in,MAGIC,"magic number")) {
    return;
  }
  int version=in.readInt();
  if (version != PARCEL_VERSION) {
    mReadError="bad version: " + version;
    return;
  }
  if (!readCheckedInt(in,STATE_COUNT,"state count")) {
    return;
  }
  if (!readCheckedInt(in,ADJ_COUNT,"adj count")) {
    return;
  }
  if (!readCheckedInt(in,PSS_COUNT,"pss count")) {
    return;
  }
  if (!readCheckedInt(in,LONGS_SIZE,"longs size")) {
    return;
  }
  mIndexToCommonString=new ArrayList<String>();
  mTimePeriodStartClock=in.readLong();
  buildTimePeriodStartClockStr();
  mTimePeriodStartRealtime=in.readLong();
  mTimePeriodEndRealtime=in.readLong();
  mRuntime=in.readString();
  mWebView=in.readString();
  mFlags=in.readInt();
  final int NLONGS=in.readInt();
  final int NEXTLONG=in.readInt();
  mLongs.clear();
  for (int i=0; i < (NLONGS - 1); i++) {
    while (i >= mLongs.size()) {
      mLongs.add(new long[LONGS_SIZE]);
    }
    readCompactedLongArray(in,version,mLongs.get(i),LONGS_SIZE);
  }
  long[] longs=new long[LONGS_SIZE];
  mNextLong=NEXTLONG;
  readCompactedLongArray(in,version,longs,NEXTLONG);
  mLongs.add(longs);
  readCompactedLongArray(in,version,mMemFactorDurations,mMemFactorDurations.length);
  int NPROC=in.readInt();
  if (NPROC < 0) {
    mReadError="bad process count: " + NPROC;
    return;
  }
  while (NPROC > 0) {
    NPROC--;
    String procName=readCommonString(in,version);
    if (procName == null) {
      mReadError="bad process name";
      return;
    }
    int NUID=in.readInt();
    if (NUID < 0) {
      mReadError="bad uid count: " + NUID;
      return;
    }
    while (NUID > 0) {
      NUID--;
      int uid=in.readInt();
      if (uid < 0) {
        mReadError="bad uid: " + uid;
        return;
      }
      String pkgName=readCommonString(in,version);
      if (pkgName == null) {
        mReadError="bad process package name";
        return;
      }
      ProcessState proc=hadData ? mProcesses.get(procName,uid) : null;
      if (proc != null) {
        if (!proc.readFromParcel(in,false)) {
          return;
        }
      }
 else {
        proc=new ProcessState(this,pkgName,uid,procName);
        if (!proc.readFromParcel(in,true)) {
          return;
        }
      }
      if (DEBUG_PARCEL)       Slog.d(TAG,"Adding process: " + procName + " "+ uid+ " "+ proc);
      mProcesses.put(procName,uid,proc);
    }
  }
  if (DEBUG_PARCEL)   Slog.d(TAG,"Read " + mProcesses.getMap().size() + " processes");
  int NPKG=in.readInt();
  if (NPKG < 0) {
    mReadError="bad package count: " + NPKG;
    return;
  }
  while (NPKG > 0) {
    NPKG--;
    String pkgName=readCommonString(in,version);
    if (pkgName == null) {
      mReadError="bad package name";
      return;
    }
    int NUID=in.readInt();
    if (NUID < 0) {
      mReadError="bad uid count: " + NUID;
      return;
    }
    while (NUID > 0) {
      NUID--;
      int uid=in.readInt();
      if (uid < 0) {
        mReadError="bad uid: " + uid;
        return;
      }
      PackageState pkgState=new PackageState(pkgName,uid);
      mPackages.put(pkgName,uid,pkgState);
      int NPROCS=in.readInt();
      if (NPROCS < 0) {
        mReadError="bad package process count: " + NPROCS;
        return;
      }
      while (NPROCS > 0) {
        NPROCS--;
        String procName=readCommonString(in,version);
        if (procName == null) {
          mReadError="bad package process name";
          return;
        }
        int hasProc=in.readInt();
        if (DEBUG_PARCEL)         Slog.d(TAG,"Reading package " + pkgName + " "+ uid+ " process "+ procName+ " hasProc="+ hasProc);
        ProcessState commonProc=mProcesses.get(procName,uid);
        if (DEBUG_PARCEL)         Slog.d(TAG,"Got common proc " + procName + " "+ uid+ ": "+ commonProc);
        if (commonProc == null) {
          mReadError="no common proc: " + procName;
          return;
        }
        if (hasProc != 0) {
          ProcessState proc=hadData ? pkgState.mProcesses.get(procName) : null;
          if (proc != null) {
            if (!proc.readFromParcel(in,false)) {
              return;
            }
          }
 else {
            proc=new ProcessState(commonProc,pkgName,uid,procName,0);
            if (!proc.readFromParcel(in,true)) {
              return;
            }
          }
          if (DEBUG_PARCEL)           Slog.d(TAG,"Adding package " + pkgName + " process: "+ procName+ " "+ uid+ " "+ proc);
          pkgState.mProcesses.put(procName,proc);
        }
 else {
          if (DEBUG_PARCEL)           Slog.d(TAG,"Adding package " + pkgName + " process: "+ procName+ " "+ uid+ " "+ commonProc);
          pkgState.mProcesses.put(procName,commonProc);
        }
      }
      int NSRVS=in.readInt();
      if (NSRVS < 0) {
        mReadError="bad package service count: " + NSRVS;
        return;
      }
      while (NSRVS > 0) {
        NSRVS--;
        String serviceName=in.readString();
        if (serviceName == null) {
          mReadError="bad package service name";
          return;
        }
        String processName=version > 9 ? readCommonString(in,version) : null;
        ServiceState serv=hadData ? pkgState.mServices.get(serviceName) : null;
        if (serv == null) {
          serv=new ServiceState(this,pkgName,serviceName,processName,null);
        }
        if (!serv.readFromParcel(in)) {
          return;
        }
        if (DEBUG_PARCEL)         Slog.d(TAG,"Adding package " + pkgName + " service: "+ serviceName+ " "+ uid+ " "+ serv);
        pkgState.mServices.put(serviceName,serv);
      }
    }
  }
  mIndexToCommonString=null;
  if (DEBUG_PARCEL)   Slog.d(TAG,"Successfully read procstats!");
}
