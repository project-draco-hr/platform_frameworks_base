{
  long totalTime=dumpSingleTime(null,null,mMemFactorDurations,mMemFactor,mStartTime,now);
  ArrayMap<String,SparseArray<PackageState>> pkgMap=mPackages.getMap();
  boolean printedHeader=false;
  for (int ip=0; ip < pkgMap.size(); ip++) {
    String pkgName=pkgMap.keyAt(ip);
    if (reqPackage != null && !reqPackage.equals(pkgName)) {
      continue;
    }
    SparseArray<PackageState> uids=pkgMap.valueAt(ip);
    for (int iu=0; iu < uids.size(); iu++) {
      int uid=uids.keyAt(iu);
      PackageState pkgState=uids.valueAt(iu);
      final int NPROCS=pkgState.mProcesses.size();
      final int NSRVS=pkgState.mServices.size();
      if (NPROCS > 0 || NSRVS > 0) {
        if (!printedHeader) {
          pw.println("Per-Package Process Stats:");
          printedHeader=true;
        }
        pw.print("  * ");
        pw.print(pkgName);
        pw.print(" / ");
        UserHandle.formatUid(pw,uid);
        pw.println(":");
      }
      if (dumpAll) {
        for (int iproc=0; iproc < NPROCS; iproc++) {
          ProcessState proc=pkgState.mProcesses.valueAt(iproc);
          pw.print("      Process ");
          pw.print(pkgState.mProcesses.keyAt(iproc));
          pw.print(" (");
          pw.print(proc.mDurationsTableSize);
          pw.print(" entries)");
          pw.println(":");
          dumpProcessState(pw,"        ",proc,ALL_SCREEN_ADJ,ALL_MEM_ADJ,ALL_PROC_STATES,now);
          dumpProcessPss(pw,"        ",proc,ALL_SCREEN_ADJ,ALL_MEM_ADJ,ALL_PROC_STATES);
          if (dumpAll) {
            pw.print("        mNumStartedServices=");
            pw.println(proc.mNumStartedServices);
          }
        }
      }
 else {
        ArrayList<ProcessState> procs=new ArrayList<ProcessState>();
        for (int iproc=0; iproc < NPROCS; iproc++) {
          procs.add(pkgState.mProcesses.valueAt(iproc));
        }
        dumpProcessSummaryLocked(pw,"      ",procs,ALL_SCREEN_ADJ,ALL_MEM_ADJ,NON_CACHED_PROC_STATES,now,totalTime);
      }
      for (int isvc=0; isvc < NSRVS; isvc++) {
        if (dumpAll) {
          pw.print("      Service ");
        }
 else {
          pw.print("      * ");
        }
        pw.print(pkgState.mServices.keyAt(isvc));
        pw.println(":");
        ServiceState svc=pkgState.mServices.valueAt(isvc);
        dumpServiceStats(pw,"        ","          ","    ","Started",svc,svc.mStartedCount,ServiceState.SERVICE_STARTED,svc.mStartedState,svc.mStartedStartTime,now,totalTime,dumpAll);
        dumpServiceStats(pw,"        ","          ","      ","Bound",svc,svc.mBoundCount,ServiceState.SERVICE_BOUND,svc.mBoundState,svc.mBoundStartTime,now,totalTime,dumpAll);
        dumpServiceStats(pw,"        ","          ","  ","Executing",svc,svc.mExecCount,ServiceState.SERVICE_EXEC,svc.mExecState,svc.mExecStartTime,now,totalTime,dumpAll);
      }
    }
  }
  if (reqPackage == null) {
    ArrayMap<String,SparseArray<ProcessState>> procMap=mProcesses.getMap();
    printedHeader=false;
    for (int ip=0; ip < procMap.size(); ip++) {
      String procName=procMap.keyAt(ip);
      SparseArray<ProcessState> uids=procMap.valueAt(ip);
      for (int iu=0; iu < uids.size(); iu++) {
        int uid=uids.keyAt(iu);
        ProcessState proc=uids.valueAt(iu);
        if (proc.mDurationsTableSize == 0 && proc.mCurState == STATE_NOTHING && proc.mPssTableSize == 0) {
          continue;
        }
        if (!printedHeader) {
          pw.println("Process Stats:");
          printedHeader=true;
        }
        pw.print("  * ");
        pw.print(procName);
        pw.print(" / ");
        UserHandle.formatUid(pw,uid);
        pw.print(" (");
        pw.print(proc.mDurationsTableSize);
        pw.print(" entries)");
        pw.println(":");
        dumpProcessState(pw,"        ",proc,ALL_SCREEN_ADJ,ALL_MEM_ADJ,ALL_PROC_STATES,now);
        dumpProcessPss(pw,"        ",proc,ALL_SCREEN_ADJ,ALL_MEM_ADJ,ALL_PROC_STATES);
      }
    }
    pw.println();
    pw.println("Summary:");
    dumpSummaryLocked(pw,reqPackage,now);
  }
 else {
    pw.println();
    dumpTotalsLocked(pw,now);
  }
  if (dumpAll) {
    pw.println();
    pw.println("Internal state:");
    pw.print("  Num long arrays: ");
    pw.println(mLongs.size());
    pw.print("  Next long entry: ");
    pw.println(mNextLong);
    pw.print("  mRunning=");
    pw.println(mRunning);
  }
}
