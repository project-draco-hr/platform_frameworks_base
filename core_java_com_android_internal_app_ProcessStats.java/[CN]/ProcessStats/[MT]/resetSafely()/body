{
  if (DEBUG)   Slog.d(TAG,"Safely resetting state of " + mTimePeriodStartClockStr);
  resetCommon();
  long now=SystemClock.uptimeMillis();
  ArrayMap<String,SparseArray<ProcessState>> procMap=mProcesses.getMap();
  for (int ip=procMap.size() - 1; ip >= 0; ip--) {
    SparseArray<ProcessState> uids=procMap.valueAt(ip);
    for (int iu=uids.size() - 1; iu >= 0; iu--) {
      ProcessState ps=uids.valueAt(iu);
      if (ps.isInUse()) {
        uids.valueAt(iu).resetSafely(now);
      }
 else {
        uids.removeAt(iu);
      }
    }
    if (uids.size() <= 0) {
      procMap.removeAt(ip);
    }
  }
  ArrayMap<String,SparseArray<PackageState>> pkgMap=mPackages.getMap();
  for (int ip=pkgMap.size() - 1; ip >= 0; ip--) {
    SparseArray<PackageState> uids=pkgMap.valueAt(ip);
    for (int iu=uids.size() - 1; iu >= 0; iu--) {
      PackageState pkgState=uids.valueAt(iu);
      for (int iproc=pkgState.mProcesses.size() - 1; iproc >= 0; iproc--) {
        ProcessState ps=pkgState.mProcesses.valueAt(iproc);
        if (ps.isInUse() || ps.mCommonProcess.isInUse()) {
          pkgState.mProcesses.valueAt(iproc).resetSafely(now);
        }
 else {
          pkgState.mProcesses.removeAt(iproc);
        }
      }
      for (int isvc=pkgState.mServices.size() - 1; isvc >= 0; isvc--) {
        ServiceState ss=pkgState.mServices.valueAt(isvc);
        if (ss.isInUse()) {
          pkgState.mServices.valueAt(isvc).resetSafely(now);
        }
 else {
          pkgState.mServices.removeAt(isvc);
        }
      }
      if (pkgState.mProcesses.size() <= 0 && pkgState.mServices.size() <= 0) {
        uids.removeAt(iu);
      }
    }
    if (uids.size() <= 0) {
      pkgMap.removeAt(ip);
    }
  }
  mStartTime=SystemClock.uptimeMillis();
  if (DEBUG)   Slog.d(TAG,"State reset; now " + mTimePeriodStartClockStr);
}
