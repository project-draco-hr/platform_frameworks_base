{
  data.totalTime=0;
  data.numPss=data.minPss=data.avgPss=data.maxPss=data.minUss=data.avgUss=data.maxUss=0;
  for (int is=0; is < data.screenStates.length; is++) {
    for (int im=0; im < data.memStates.length; im++) {
      for (int ip=0; ip < data.procStates.length; ip++) {
        int bucket=((data.screenStates[is] + data.memStates[im]) * STATE_COUNT) + data.procStates[ip];
        data.totalTime+=proc.getDuration(bucket,now);
        long samples=proc.getPssSampleCount(bucket);
        if (samples > 0) {
          long minPss=proc.getPssMinimum(bucket);
          long avgPss=proc.getPssAverage(bucket);
          long maxPss=proc.getPssMaximum(bucket);
          long minUss=proc.getPssUssMinimum(bucket);
          long avgUss=proc.getPssUssAverage(bucket);
          long maxUss=proc.getPssUssMaximum(bucket);
          if (data.numPss == 0) {
            data.minPss=minPss;
            data.avgPss=avgPss;
            data.maxPss=maxPss;
            data.minUss=minUss;
            data.avgUss=avgUss;
            data.maxUss=maxUss;
          }
 else {
            if (minPss < data.minPss) {
              data.minPss=minPss;
            }
            data.avgPss=(long)(((data.avgPss * (double)data.numPss) + (avgPss * (double)samples)) / (data.numPss + samples));
            if (maxPss > data.maxPss) {
              data.maxPss=maxPss;
            }
            if (minUss < data.minUss) {
              data.minUss=minUss;
            }
            data.avgUss=(long)(((data.avgUss * (double)data.numPss) + (avgUss * (double)samples)) / (data.numPss + samples));
            if (maxUss > data.maxUss) {
              data.maxUss=maxUss;
            }
          }
          data.numPss+=samples;
        }
      }
    }
  }
}
