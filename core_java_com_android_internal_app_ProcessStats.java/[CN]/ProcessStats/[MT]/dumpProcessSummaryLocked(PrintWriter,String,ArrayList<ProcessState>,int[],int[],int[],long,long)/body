{
  for (int i=procs.size() - 1; i >= 0; i--) {
    ProcessState proc=procs.get(i);
    pw.print(prefix);
    pw.print("* ");
    pw.print(proc.mName);
    pw.print(" / ");
    UserHandle.formatUid(pw,proc.mUid);
    pw.println(":");
    dumpProcessSummaryDetails(pw,proc,prefix,"         TOTAL: ",screenStates,memStates,procStates,now,totalTime,true);
    dumpProcessSummaryDetails(pw,proc,prefix,"    Persistent: ",screenStates,memStates,new int[]{STATE_PERSISTENT},now,totalTime,true);
    dumpProcessSummaryDetails(pw,proc,prefix,"           Top: ",screenStates,memStates,new int[]{STATE_TOP},now,totalTime,true);
    dumpProcessSummaryDetails(pw,proc,prefix,"        Imp Fg: ",screenStates,memStates,new int[]{STATE_IMPORTANT_FOREGROUND},now,totalTime,true);
    dumpProcessSummaryDetails(pw,proc,prefix,"        Imp Bg: ",screenStates,memStates,new int[]{STATE_IMPORTANT_BACKGROUND},now,totalTime,true);
    dumpProcessSummaryDetails(pw,proc,prefix,"        Backup: ",screenStates,memStates,new int[]{STATE_BACKUP},now,totalTime,true);
    dumpProcessSummaryDetails(pw,proc,prefix,"     Heavy Wgt: ",screenStates,memStates,new int[]{STATE_HEAVY_WEIGHT},now,totalTime,true);
    dumpProcessSummaryDetails(pw,proc,prefix,"       Service: ",screenStates,memStates,new int[]{STATE_SERVICE},now,totalTime,true);
    dumpProcessSummaryDetails(pw,proc,prefix,"    Service Rs: ",screenStates,memStates,new int[]{STATE_SERVICE_RESTARTING},now,totalTime,true);
    dumpProcessSummaryDetails(pw,proc,prefix,"      Receiver: ",screenStates,memStates,new int[]{STATE_RECEIVER},now,totalTime,true);
    dumpProcessSummaryDetails(pw,proc,prefix,"        (Home): ",screenStates,memStates,new int[]{STATE_HOME},now,totalTime,true);
    dumpProcessSummaryDetails(pw,proc,prefix,"    (Last Act): ",screenStates,memStates,new int[]{STATE_LAST_ACTIVITY},now,totalTime,true);
    dumpProcessSummaryDetails(pw,proc,prefix,"      (Cached): ",screenStates,memStates,new int[]{STATE_CACHED_ACTIVITY,STATE_CACHED_ACTIVITY_CLIENT,STATE_CACHED_EMPTY},now,totalTime,true);
  }
}
