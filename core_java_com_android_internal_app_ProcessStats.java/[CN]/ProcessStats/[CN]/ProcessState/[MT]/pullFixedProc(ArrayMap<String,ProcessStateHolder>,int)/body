{
  ProcessStateHolder holder=pkgList.valueAt(index);
  ProcessState proc=holder.state;
  if (mDead && proc.mCommonProcess != proc) {
    Log.wtf(TAG,"Pulling dead proc: name=" + mName + " pkg="+ mPackage+ " uid="+ mUid+ " common.name="+ mCommonProcess.mName);
    proc=mStats.getProcessStateLocked(proc.mPackage,proc.mUid,proc.mVersion,proc.mName);
  }
  if (proc.mMultiPackage) {
    SparseArray<PackageState> vpkg=mStats.mPackages.get(pkgList.keyAt(index),proc.mUid);
    if (vpkg == null) {
      throw new IllegalStateException("No existing package " + pkgList.keyAt(index) + "/"+ proc.mUid+ " for multi-proc "+ proc.mName);
    }
    PackageState pkg=vpkg.get(proc.mVersion);
    if (pkg == null) {
      throw new IllegalStateException("No existing package " + pkgList.keyAt(index) + "/"+ proc.mUid+ " for multi-proc "+ proc.mName+ " version "+ proc.mVersion);
    }
    String savedName=proc.mName;
    proc=pkg.mProcesses.get(proc.mName);
    if (proc == null) {
      throw new IllegalStateException("Didn't create per-package process " + savedName + " in pkg "+ pkg.mPackageName+ "/"+ pkg.mUid);
    }
    holder.state=proc;
  }
  return proc;
}
