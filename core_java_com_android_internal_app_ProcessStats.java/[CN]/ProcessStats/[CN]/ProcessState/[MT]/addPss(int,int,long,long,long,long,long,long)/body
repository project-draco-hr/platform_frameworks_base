{
  int idx=binarySearch(mPssTable,mPssTableSize,state);
  int off;
  if (idx >= 0) {
    off=mPssTable[idx];
  }
 else {
    mStats.mAddLongTable=mPssTable;
    mStats.mAddLongTableSize=mPssTableSize;
    off=mStats.addLongData(~idx,state,PSS_COUNT);
    mPssTable=mStats.mAddLongTable;
    mPssTableSize=mStats.mAddLongTableSize;
  }
  long[] longs=mStats.mLongs.get((off >> OFFSET_ARRAY_SHIFT) & OFFSET_ARRAY_MASK);
  idx=(off >> OFFSET_INDEX_SHIFT) & OFFSET_INDEX_MASK;
  long count=longs[idx + PSS_SAMPLE_COUNT];
  if (count == 0) {
    longs[idx + PSS_SAMPLE_COUNT]=inCount;
    longs[idx + PSS_MINIMUM]=minPss;
    longs[idx + PSS_AVERAGE]=avgPss;
    longs[idx + PSS_MAXIMUM]=maxPss;
    longs[idx + PSS_USS_MINIMUM]=minUss;
    longs[idx + PSS_USS_AVERAGE]=avgUss;
    longs[idx + PSS_USS_MAXIMUM]=maxUss;
  }
 else {
    longs[idx + PSS_SAMPLE_COUNT]=count + inCount;
    if (longs[idx + PSS_MINIMUM] > minPss) {
      longs[idx + PSS_MINIMUM]=minPss;
    }
    longs[idx + PSS_AVERAGE]=(long)(((longs[idx + PSS_AVERAGE] * (double)count) + (avgPss * (double)inCount)) / (count + inCount));
    if (longs[idx + PSS_MAXIMUM] < maxPss) {
      longs[idx + PSS_MAXIMUM]=maxPss;
    }
    if (longs[idx + PSS_USS_MINIMUM] > minUss) {
      longs[idx + PSS_USS_MINIMUM]=minUss;
    }
    longs[idx + PSS_USS_AVERAGE]=(long)(((longs[idx + PSS_USS_AVERAGE] * (double)count) + (avgUss * (double)inCount)) / (count + inCount));
    if (longs[idx + PSS_USS_MAXIMUM] < maxUss) {
      longs[idx + PSS_USS_MAXIMUM]=maxUss;
    }
  }
}
