{
  if (!always) {
    if (mLastPssState == mCurState && SystemClock.uptimeMillis() < (mLastPssTime + (30 * 1000))) {
      return;
    }
  }
  mLastPssState=mCurState;
  mLastPssTime=SystemClock.uptimeMillis();
  if (mCurState != STATE_NOTHING) {
    int idx=binarySearch(mPssTable,mPssTableSize,mCurState);
    int off;
    if (idx >= 0) {
      off=mPssTable[idx];
    }
 else {
      mStats.mAddLongTable=mPssTable;
      mStats.mAddLongTableSize=mPssTableSize;
      off=mStats.addLongData(~idx,mCurState,PSS_COUNT);
      mPssTable=mStats.mAddLongTable;
      mPssTableSize=mStats.mAddLongTableSize;
    }
    long[] longs=mStats.mLongs.get((off >> OFFSET_ARRAY_SHIFT) & OFFSET_ARRAY_MASK);
    idx=(off >> OFFSET_INDEX_SHIFT) & OFFSET_INDEX_MASK;
    long count=longs[idx + PSS_SAMPLE_COUNT];
    if (count == 0) {
      longs[idx + PSS_SAMPLE_COUNT]=1;
      longs[idx + PSS_MINIMUM]=pss;
      longs[idx + PSS_AVERAGE]=pss;
      longs[idx + PSS_MAXIMUM]=pss;
      longs[idx + PSS_USS_MINIMUM]=uss;
      longs[idx + PSS_USS_AVERAGE]=uss;
      longs[idx + PSS_USS_MAXIMUM]=uss;
    }
 else {
      longs[idx + PSS_SAMPLE_COUNT]=count + 1;
      if (longs[idx + PSS_MINIMUM] > pss) {
        longs[idx + PSS_MINIMUM]=pss;
      }
      longs[idx + PSS_AVERAGE]=(long)(((longs[idx + PSS_AVERAGE] * (double)count) + pss) / (count + 1));
      if (longs[idx + PSS_MAXIMUM] < pss) {
        longs[idx + PSS_MAXIMUM]=pss;
      }
      if (longs[idx + PSS_USS_MINIMUM] > uss) {
        longs[idx + PSS_USS_MINIMUM]=uss;
      }
      longs[idx + PSS_USS_AVERAGE]=(long)(((longs[idx + PSS_USS_AVERAGE] * (double)count) + uss) / (count + 1));
      if (longs[idx + PSS_USS_MAXIMUM] < uss) {
        longs[idx + PSS_USS_MAXIMUM]=uss;
      }
    }
  }
}
