{
  ProcessState pnew=new ProcessState(this,pkg,mUid,mName,now);
  if (mDurationsTable != null) {
    mStats.mAddLongTable=new int[mDurationsTable.length];
    mStats.mAddLongTableSize=0;
    for (int i=0; i < mDurationsTableSize; i++) {
      int origEnt=mDurationsTable[i];
      int type=(origEnt >> OFFSET_TYPE_SHIFT) & OFFSET_TYPE_MASK;
      int newOff=mStats.addLongData(i,type,1);
      mStats.mAddLongTable[i]=newOff | type;
      mStats.setLong(newOff,0,mStats.getLong(origEnt,0));
    }
    pnew.mDurationsTable=mStats.mAddLongTable;
    pnew.mDurationsTableSize=mStats.mAddLongTableSize;
  }
  if (mPssTable != null) {
    mStats.mAddLongTable=new int[mPssTable.length];
    mStats.mAddLongTableSize=0;
    for (int i=0; i < mPssTableSize; i++) {
      int origEnt=mPssTable[i];
      int type=(origEnt >> OFFSET_TYPE_SHIFT) & OFFSET_TYPE_MASK;
      int newOff=mStats.addLongData(i,type,PSS_COUNT);
      mStats.mAddLongTable[i]=newOff | type;
      for (int j=0; j < PSS_COUNT; j++) {
        mStats.setLong(newOff,j,mStats.getLong(origEnt,j));
      }
    }
    pnew.mPssTable=mStats.mAddLongTable;
    pnew.mPssTableSize=mStats.mAddLongTableSize;
  }
  pnew.mNumExcessiveWake=mNumExcessiveWake;
  pnew.mNumExcessiveCpu=mNumExcessiveCpu;
  pnew.mNumStartedServices=mNumStartedServices;
  return pnew;
}
