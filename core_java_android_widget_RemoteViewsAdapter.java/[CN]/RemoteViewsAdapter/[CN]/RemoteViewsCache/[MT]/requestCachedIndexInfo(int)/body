{
  int indicesToLoadCount=0;
synchronized (mViewCache) {
    if (containsAndIsValid(position)) {
      return mViewCache[getCacheIndex(position)];
    }
    int centerPosition=(mViewCacheEndPosition + mViewCacheStartPosition) / 2;
    if ((mViewCacheEndPosition <= mViewCacheStartPosition) || (Math.abs(position - centerPosition) > mCacheSlack)) {
      int newStartPosition=position - mHalfCacheSize;
      int newEndPosition=position + mHalfCacheSize;
      int frameSize=mHalfCacheSize / 4;
      int frameCount=(int)Math.ceil(mViewCache.length / (float)frameSize);
      int effectiveStart=Math.max(newStartPosition,0);
      int effectiveEnd=Math.min(newEndPosition,getCount() - 1);
      int overlapStart=Math.max(mViewCacheStartPosition,effectiveStart);
      int overlapEnd=Math.min(Math.max(mViewCacheStartPosition,mViewCacheEndPosition),effectiveEnd);
      for (int i=0; i < (frameSize * frameCount); ++i) {
        int index=newStartPosition + ((i % frameSize) * frameCount + (i / frameSize));
        if (index <= newEndPosition) {
          if ((overlapStart <= index) && (index <= overlapEnd)) {
            if (!mViewCache[getCacheIndex(index)].isValid()) {
              mTmpViewCacheLoadIndices[indicesToLoadCount++]=index;
            }
          }
 else           if ((effectiveStart <= index) && (index <= effectiveEnd)) {
            mViewCache[getCacheIndex(index)].invalidate();
            mTmpViewCacheLoadIndices[indicesToLoadCount++]=index;
          }
 else {
            mViewCache[getCacheIndex(index)].invalidate();
          }
        }
      }
      mViewCacheStartPosition=newStartPosition;
      mViewCacheEndPosition=newEndPosition;
    }
  }
  int length=0;
synchronized (mViewCacheInfo) {
    length=mViewCacheInfo.count;
  }
  if (indicesToLoadCount > 0) {
synchronized (mViewCacheLoadIndices) {
      mViewCacheLoadIndices.clear();
      for (int i=0; i < indicesToLoadCount; ++i) {
        final int index=mTmpViewCacheLoadIndices[i];
        if (0 <= index && index < length) {
          mViewCacheLoadIndices.addLast(index);
        }
      }
    }
  }
  return null;
}
