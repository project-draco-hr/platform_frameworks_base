{
  mRemoteViewsFactory=IRemoteViewsFactory.Stub.asInterface(service);
  final RemoteViewsAdapter adapter=mAdapter.get();
  if (adapter == null)   return;
  adapter.mWorkerQueue.post(new Runnable(){
    @Override public void run(){
      if (adapter.mNotifyDataSetChangedAfterOnServiceConnected) {
        adapter.onNotifyDataSetChanged();
      }
 else {
        IRemoteViewsFactory factory=adapter.mServiceConnection.getRemoteViewsFactory();
        try {
          if (!factory.isCreated()) {
            factory.onDataSetChanged();
          }
        }
 catch (        RemoteException e) {
          Log.e(TAG,"Error notifying factory of data set changed in " + "onServiceConnected(): " + e.getMessage());
          return;
        }
catch (        RuntimeException e) {
          Log.e(TAG,"Error notifying factory of data set changed in " + "onServiceConnected(): " + e.getMessage());
        }
        adapter.updateTemporaryMetaData();
        adapter.mMainQueue.post(new Runnable(){
          @Override public void run(){
synchronized (adapter.mCache) {
              adapter.mCache.commitTemporaryMetaData();
            }
            final RemoteAdapterConnectionCallback callback=adapter.mCallback.get();
            if (callback != null) {
              callback.onRemoteAdapterConnected();
            }
          }
        }
);
      }
      adapter.enqueueDeferredUnbindServiceMessage();
      mIsConnected=true;
      mIsConnecting=false;
    }
  }
);
}
