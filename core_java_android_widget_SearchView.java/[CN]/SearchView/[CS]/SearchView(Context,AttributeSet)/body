{
  super(context,attrs);
  LayoutInflater inflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  inflater.inflate(R.layout.search_view,this,true);
  mSearchButton=findViewById(R.id.search_button);
  mQueryTextView=(SearchAutoComplete)findViewById(R.id.search_src_text);
  mQueryTextView.setSearchView(this);
  mSearchEditFrame=findViewById(R.id.search_edit_frame);
  mSearchPlate=findViewById(R.id.search_plate);
  mSubmitArea=findViewById(R.id.submit_area);
  mSubmitButton=findViewById(R.id.search_go_btn);
  mCloseButton=(ImageView)findViewById(R.id.search_close_btn);
  mVoiceButton=findViewById(R.id.search_voice_btn);
  mSearchHintIcon=(ImageView)findViewById(R.id.search_mag_icon);
  mSearchButton.setOnClickListener(mOnClickListener);
  mCloseButton.setOnClickListener(mOnClickListener);
  mSubmitButton.setOnClickListener(mOnClickListener);
  mVoiceButton.setOnClickListener(mOnClickListener);
  mQueryTextView.setOnClickListener(mOnClickListener);
  mQueryTextView.addTextChangedListener(mTextWatcher);
  mQueryTextView.setOnEditorActionListener(mOnEditorActionListener);
  mQueryTextView.setOnItemClickListener(mOnItemClickListener);
  mQueryTextView.setOnItemSelectedListener(mOnItemSelectedListener);
  mQueryTextView.setOnKeyListener(mTextKeyListener);
  mQueryTextView.setOnFocusChangeListener(new OnFocusChangeListener(){
    public void onFocusChange(    View v,    boolean hasFocus){
      if (mOnQueryTextFocusChangeListener != null) {
        mOnQueryTextFocusChangeListener.onFocusChange(SearchView.this,hasFocus);
      }
    }
  }
);
  boolean focusable=true;
  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.SearchView,0,0);
  setIconifiedByDefault(a.getBoolean(R.styleable.SearchView_iconifiedByDefault,true));
  int maxWidth=a.getDimensionPixelSize(R.styleable.SearchView_maxWidth,-1);
  if (maxWidth != -1) {
    setMaxWidth(maxWidth);
  }
  CharSequence queryHint=a.getText(R.styleable.SearchView_queryHint);
  if (!TextUtils.isEmpty(queryHint)) {
    setQueryHint(queryHint);
  }
  a.recycle();
  a=context.obtainStyledAttributes(attrs,R.styleable.View,0,0);
  focusable=a.getBoolean(R.styleable.View_focusable,focusable);
  a.recycle();
  setFocusable(focusable);
  mVoiceWebSearchIntent=new Intent(RecognizerIntent.ACTION_WEB_SEARCH);
  mVoiceWebSearchIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  mVoiceWebSearchIntent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL,RecognizerIntent.LANGUAGE_MODEL_WEB_SEARCH);
  mVoiceAppSearchIntent=new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
  mVoiceAppSearchIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  mDropDownAnchor=findViewById(mQueryTextView.getDropDownAnchor());
  if (mDropDownAnchor != null) {
    mDropDownAnchor.addOnLayoutChangeListener(new OnLayoutChangeListener(){
      @Override public void onLayoutChange(      View v,      int left,      int top,      int right,      int bottom,      int oldLeft,      int oldTop,      int oldRight,      int oldBottom){
        adjustDropDownSizeAndPosition();
      }
    }
);
  }
  updateViewsVisibility(mIconifiedByDefault);
  updateQueryHint();
}
