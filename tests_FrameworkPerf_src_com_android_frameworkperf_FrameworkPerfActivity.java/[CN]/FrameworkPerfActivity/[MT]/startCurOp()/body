{
  Op fgOp, bgOp;
  if (mFgTest == null && mBgTest == null) {
    fgOp=mOpPairs[mCurOpIndex];
    bgOp=mOpPairs[mCurOpIndex + 1];
  }
 else   if (mFgTest != null && mBgTest != null) {
    fgOp=mFgTest;
    bgOp=mBgTest;
  }
 else   if (mFgTest != null) {
    if (mCurOpIndex == 0) {
      mCurOpIndex=1;
    }
    fgOp=mFgTest;
    bgOp=mAvailOps[mCurOpIndex];
  }
 else {
    if (mCurOpIndex == 0) {
      mCurOpIndex=1;
    }
    fgOp=mAvailOps[mCurOpIndex];
    bgOp=mBgTest;
  }
  mRunner.run(mHandler,fgOp,bgOp,new Runnable(){
    @Override public void run(){
      RunResult result=new RunResult(mRunner);
      log(String.format("%s: fg=%d*%gms/op (%dms) / bg=%d*%gms/op (%dms)",result.name,result.fgOps,result.getFgMsPerOp(),result.fgTime,result.bgOps,result.getBgMsPerOp(),result.bgTime));
      mResults.add(result);
      if (!mStarted) {
        log("Stop");
        stopRunning();
        return;
      }
      if (mFgTest != null && mBgTest != null) {
        log("Finished");
        stopRunning();
        return;
      }
      if (mFgTest == null && mBgTest == null) {
        mCurOpIndex+=2;
        if (mCurOpIndex >= mOpPairs.length) {
          log("Finished");
          stopRunning();
          return;
        }
      }
 else {
        mCurOpIndex++;
        if (mCurOpIndex >= mAvailOps.length) {
          log("Finished");
          stopRunning();
          return;
        }
      }
      startCurOp();
    }
  }
);
}
