{
  byte[] key=hexToBytes("603deb1015ca71be2b73aef0857d77811f352c073b6108d72d9810a30914dff4");
  String name="aes";
  assertEquals(KeyStore.NO_ERROR,importAesKey(name,key,256,KeymasterDefs.KM_MODE_ECB));
  byte[][] testVectors=new byte[][]{hexToBytes("6bc1bee22e409f96e93d7e117393172a"),hexToBytes("ae2d8a571e03ac9c9eb76fac45af8e51"),hexToBytes("30c81c46a35ce411e5fbc1191a0a52ef"),hexToBytes("f69f2445df4f9b17ad2b417be66c3710")};
  byte[][] cipherVectors=new byte[][]{hexToBytes("f3eed1bdb5d2a03c064b5a7e3db181f8"),hexToBytes("591ccb10d410ed26dc5ba74a31362870"),hexToBytes("b6ed21b99ca6f4f9f153e7b1beafed1d"),hexToBytes("23304b7a39f9f3ff067d8d8f9e24ecc7")};
  KeymasterArguments beginArgs=new KeymasterArguments();
  beginArgs.addInt(KeymasterDefs.KM_TAG_ALGORITHM,KeymasterDefs.KM_ALGORITHM_AES);
  beginArgs.addInt(KeymasterDefs.KM_TAG_BLOCK_MODE,KeymasterDefs.KM_MODE_ECB);
  beginArgs.addInt(KeymasterDefs.KM_TAG_PADDING,KeymasterDefs.KM_PAD_NONE);
  for (int i=0; i < testVectors.length; i++) {
    byte[] cipherText=doOperation(name,KeymasterDefs.KM_PURPOSE_ENCRYPT,testVectors[i],beginArgs);
    MoreAsserts.assertEquals(cipherVectors[i],cipherText);
  }
  for (int i=0; i < testVectors.length; i++) {
    byte[] plainText=doOperation(name,KeymasterDefs.KM_PURPOSE_DECRYPT,cipherVectors[i],beginArgs);
    MoreAsserts.assertEquals(testVectors[i],plainText);
  }
}
