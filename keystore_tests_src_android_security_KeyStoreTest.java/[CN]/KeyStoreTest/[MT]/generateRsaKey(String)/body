{
  KeymasterArguments args=new KeymasterArguments();
  args.addInt(KeymasterDefs.KM_TAG_PURPOSE,KeymasterDefs.KM_PURPOSE_ENCRYPT);
  args.addInt(KeymasterDefs.KM_TAG_PURPOSE,KeymasterDefs.KM_PURPOSE_DECRYPT);
  args.addInt(KeymasterDefs.KM_TAG_ALGORITHM,KeymasterDefs.KM_ALGORITHM_RSA);
  args.addInt(KeymasterDefs.KM_TAG_PADDING,KeymasterDefs.KM_PAD_NONE);
  args.addBoolean(KeymasterDefs.KM_TAG_NO_AUTH_REQUIRED);
  args.addInt(KeymasterDefs.KM_TAG_KEY_SIZE,2048);
  args.addLong(KeymasterDefs.KM_TAG_RSA_PUBLIC_EXPONENT,RSAKeyGenParameterSpec.F4.longValue());
  KeyCharacteristics outCharacteristics=new KeyCharacteristics();
  int result=mKeyStore.generateKey(name,args,null,0,outCharacteristics);
  assertEquals("generateRsaKey should succeed",KeyStore.NO_ERROR,result);
  return outCharacteristics;
}
