{
  String name="test";
  KeymasterArguments args=new KeymasterArguments();
  args.addInt(KeymasterDefs.KM_TAG_PURPOSE,KeymasterDefs.KM_PURPOSE_ENCRYPT);
  args.addInt(KeymasterDefs.KM_TAG_PURPOSE,KeymasterDefs.KM_PURPOSE_DECRYPT);
  args.addInt(KeymasterDefs.KM_TAG_ALGORITHM,KeymasterDefs.KM_ALGORITHM_AES);
  args.addInt(KeymasterDefs.KM_TAG_PADDING,KeymasterDefs.KM_PAD_PKCS7);
  args.addInt(KeymasterDefs.KM_TAG_KEY_SIZE,256);
  args.addInt(KeymasterDefs.KM_TAG_BLOCK_MODE,KeymasterDefs.KM_MODE_ECB);
  args.addInt(KeymasterDefs.KM_TAG_USER_AUTH_TYPE,1);
  KeyCharacteristics outCharacteristics=new KeyCharacteristics();
  int rc=mKeyStore.generateKey(name,args,null,0,outCharacteristics);
  KeymasterArguments out=new KeymasterArguments();
  assertEquals("Generate should succeed",KeyStore.NO_ERROR,rc);
  OperationResult result=mKeyStore.begin(name,KeymasterDefs.KM_PURPOSE_ENCRYPT,true,args,null,out);
  assertEquals("Begin should expect authorization",KeyStore.OP_AUTH_NEEDED,result.resultCode);
  IBinder token=result.token;
  result=mKeyStore.update(token,null,new byte[]{0x01,0x02,0x03,0x04});
  assertEquals("Update should require authorization",KeymasterDefs.KM_ERROR_KEY_USER_NOT_AUTHENTICATED,result.resultCode);
}
