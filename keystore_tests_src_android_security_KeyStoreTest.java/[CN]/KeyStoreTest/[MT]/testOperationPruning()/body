{
  String name="test";
  KeymasterArguments args=new KeymasterArguments();
  args.addInt(KeymasterDefs.KM_TAG_PURPOSE,KeymasterDefs.KM_PURPOSE_ENCRYPT);
  args.addInt(KeymasterDefs.KM_TAG_PURPOSE,KeymasterDefs.KM_PURPOSE_DECRYPT);
  args.addInt(KeymasterDefs.KM_TAG_ALGORITHM,KeymasterDefs.KM_ALGORITHM_AES);
  args.addInt(KeymasterDefs.KM_TAG_PADDING,KeymasterDefs.KM_PAD_NONE);
  args.addInt(KeymasterDefs.KM_TAG_KEY_SIZE,256);
  args.addInt(KeymasterDefs.KM_TAG_BLOCK_MODE,KeymasterDefs.KM_MODE_CTR);
  args.addBoolean(KeymasterDefs.KM_TAG_NO_AUTH_REQUIRED);
  KeyCharacteristics outCharacteristics=new KeyCharacteristics();
  int rc=mKeyStore.generateKey(name,args,null,0,outCharacteristics);
  assertEquals("Generate should succeed",KeyStore.NO_ERROR,rc);
  KeymasterArguments out=new KeymasterArguments();
  args=new KeymasterArguments();
  OperationResult result=mKeyStore.begin(name,KeymasterDefs.KM_PURPOSE_ENCRYPT,true,args,null,out);
  assertEquals("Begin should succeed",KeyStore.NO_ERROR,result.resultCode);
  IBinder first=result.token;
  for (int i=0; i < 16; i++) {
    result=mKeyStore.begin(name,KeymasterDefs.KM_PURPOSE_ENCRYPT,true,args,null,out);
    assertEquals("Begin should succeed",KeyStore.NO_ERROR,result.resultCode);
  }
  assertEquals("Operation should be pruned",KeymasterDefs.KM_ERROR_INVALID_OPERATION_HANDLE,mKeyStore.update(first,null,new byte[]{0x01}).resultCode);
}
