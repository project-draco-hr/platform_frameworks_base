{
  String name="test";
  byte[] id=new byte[]{0x01,0x02,0x03};
  KeymasterArguments args=new KeymasterArguments();
  args.addEnum(KeymasterDefs.KM_TAG_PURPOSE,KeymasterDefs.KM_PURPOSE_ENCRYPT);
  args.addEnum(KeymasterDefs.KM_TAG_PURPOSE,KeymasterDefs.KM_PURPOSE_DECRYPT);
  args.addEnum(KeymasterDefs.KM_TAG_ALGORITHM,KeymasterDefs.KM_ALGORITHM_RSA);
  args.addEnum(KeymasterDefs.KM_TAG_PADDING,KeymasterDefs.KM_PAD_NONE);
  args.addUnsignedInt(KeymasterDefs.KM_TAG_KEY_SIZE,2048);
  args.addEnum(KeymasterDefs.KM_TAG_BLOCK_MODE,KeymasterDefs.KM_MODE_ECB);
  args.addBoolean(KeymasterDefs.KM_TAG_NO_AUTH_REQUIRED);
  args.addBytes(KeymasterDefs.KM_TAG_APPLICATION_ID,id);
  args.addUnsignedLong(KeymasterDefs.KM_TAG_RSA_PUBLIC_EXPONENT,RSAKeyGenParameterSpec.F4);
  KeyCharacteristics outCharacteristics=new KeyCharacteristics();
  int result=mKeyStore.generateKey(name,args,null,0,outCharacteristics);
  assertEquals("generateRsaKey should succeed",KeyStore.NO_ERROR,result);
  assertEquals("getKeyCharacteristics should fail without application ID",KeymasterDefs.KM_ERROR_INVALID_KEY_BLOB,mKeyStore.getKeyCharacteristics(name,null,null,outCharacteristics));
  assertEquals("getKeyCharacteristics should succeed with application ID",KeyStore.NO_ERROR,mKeyStore.getKeyCharacteristics(name,new KeymasterBlob(id),null,outCharacteristics));
}
