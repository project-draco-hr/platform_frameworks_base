{
  String name="test";
  KeymasterArguments args=new KeymasterArguments();
  args.addInt(KeymasterDefs.KM_TAG_PURPOSE,KeymasterDefs.KM_PURPOSE_ENCRYPT);
  args.addInt(KeymasterDefs.KM_TAG_PURPOSE,KeymasterDefs.KM_PURPOSE_DECRYPT);
  args.addInt(KeymasterDefs.KM_TAG_ALGORITHM,KeymasterDefs.KM_ALGORITHM_RSA);
  args.addInt(KeymasterDefs.KM_TAG_PADDING,KeymasterDefs.KM_PAD_NONE);
  args.addInt(KeymasterDefs.KM_TAG_KEY_SIZE,2048);
  args.addInt(KeymasterDefs.KM_TAG_BLOCK_MODE,KeymasterDefs.KM_MODE_ECB);
  args.addBlob(KeymasterDefs.KM_TAG_APPLICATION_ID,new byte[]{0x01,0x02,0x03});
  args.addBlob(KeymasterDefs.KM_TAG_APPLICATION_DATA,null);
  args.addBlob(KeymasterDefs.KM_TAG_RSA_PUBLIC_EXPONENT,RSAKeyGenParameterSpec.F4.toByteArray());
  KeyCharacteristics outCharacteristics=new KeyCharacteristics();
  int result=mKeyStore.generateKey(name,args,0,outCharacteristics);
  assertEquals("generateRsaKey should succeed",KeyStore.NO_ERROR,result);
  assertEquals("getKeyCharacteristics should fail without application ID",KeymasterDefs.KM_ERROR_INVALID_KEY_BLOB,mKeyStore.getKeyCharacteristics(name,null,null,outCharacteristics));
  assertEquals("getKeyCharacteristics should succeed with application ID",KeyStore.NO_ERROR,mKeyStore.getKeyCharacteristics(name,new byte[]{0x01,0x02,0x03},null,outCharacteristics));
}
