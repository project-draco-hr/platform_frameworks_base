{
  if (mDestroyed) {
    Log.w(TAG,"Ignoring updateSurface: destroyed");
  }
  boolean fixedSize=false;
  int myWidth=mSurfaceHolder.getRequestedWidth();
  if (myWidth <= 0)   myWidth=ViewGroup.LayoutParams.MATCH_PARENT;
 else   fixedSize=true;
  int myHeight=mSurfaceHolder.getRequestedHeight();
  if (myHeight <= 0)   myHeight=ViewGroup.LayoutParams.MATCH_PARENT;
 else   fixedSize=true;
  final boolean creating=!mCreated;
  final boolean surfaceCreating=!mSurfaceCreated;
  final boolean formatChanged=mFormat != mSurfaceHolder.getRequestedFormat();
  boolean sizeChanged=mWidth != myWidth || mHeight != myHeight;
  boolean insetsChanged=!mCreated;
  final boolean typeChanged=mType != mSurfaceHolder.getRequestedType();
  final boolean flagsChanged=mCurWindowFlags != mWindowFlags || mCurWindowPrivateFlags != mWindowPrivateFlags;
  if (forceRelayout || creating || surfaceCreating|| formatChanged|| sizeChanged|| typeChanged|| flagsChanged|| redrawNeeded|| !mIWallpaperEngine.mShownReported) {
    if (DEBUG)     Log.v(TAG,"Changes: creating=" + creating + " format="+ formatChanged+ " size="+ sizeChanged);
    try {
      mWidth=myWidth;
      mHeight=myHeight;
      mFormat=mSurfaceHolder.getRequestedFormat();
      mType=mSurfaceHolder.getRequestedType();
      mLayout.x=0;
      mLayout.y=0;
      mLayout.width=myWidth;
      mLayout.height=myHeight;
      mLayout.format=mFormat;
      mCurWindowFlags=mWindowFlags;
      mLayout.flags=mWindowFlags | WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS | WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN| WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;
      mCurWindowPrivateFlags=mWindowPrivateFlags;
      mLayout.privateFlags=mWindowPrivateFlags;
      mLayout.memoryType=mType;
      mLayout.token=mWindowToken;
      if (!mCreated) {
        final WindowManager windowService=(WindowManager)getSystemService(Context.WINDOW_SERVICE);
        TypedArray windowStyle=obtainStyledAttributes(com.android.internal.R.styleable.Window);
        final Display display=windowService.getDefaultDisplay();
        final boolean shouldUseBottomOutset=display.getDisplayId() == Display.DEFAULT_DISPLAY;
        if (shouldUseBottomOutset && windowStyle.hasValue(R.styleable.Window_windowOutsetBottom)) {
          if (mOutsetBottom == null)           mOutsetBottom=new TypedValue();
          windowStyle.getValue(R.styleable.Window_windowOutsetBottom,mOutsetBottom);
        }
 else {
          mOutsetBottom=null;
        }
        mWindowIsRound=getResources().getBoolean(com.android.internal.R.bool.config_windowIsRound);
        windowStyle.recycle();
        mIsEmulator=Build.HARDWARE.contains("goldfish");
        mIsCircularEmulator=SystemProperties.getBoolean(ViewRootImpl.PROPERTY_EMULATOR_CIRCULAR,false);
        mLayout.type=mIWallpaperEngine.mWindowType;
        mLayout.gravity=Gravity.START | Gravity.TOP;
        mLayout.setTitle(WallpaperService.this.getClass().getName());
        mLayout.windowAnimations=com.android.internal.R.style.Animation_Wallpaper;
        mInputChannel=new InputChannel();
        if (mSession.addToDisplay(mWindow,mWindow.mSeq,mLayout,View.VISIBLE,Display.DEFAULT_DISPLAY,mContentInsets,mStableInsets,mInputChannel) < 0) {
          Log.w(TAG,"Failed to add window while updating wallpaper surface.");
          return;
        }
        mCreated=true;
        mInputEventReceiver=new WallpaperInputEventReceiver(mInputChannel,Looper.myLooper());
      }
      mSurfaceHolder.mSurfaceLock.lock();
      mDrawingAllowed=true;
      if (!fixedSize) {
        mLayout.surfaceInsets.set(mIWallpaperEngine.mDisplayPadding);
      }
 else {
        mLayout.surfaceInsets.set(0,0,0,0);
      }
      final int relayoutResult=mSession.relayout(mWindow,mWindow.mSeq,mLayout,mWidth,mHeight,View.VISIBLE,0,mWinFrame,mOverscanInsets,mContentInsets,mVisibleInsets,mStableInsets,mConfiguration,mSurfaceHolder.mSurface);
      if (DEBUG)       Log.v(TAG,"New surface: " + mSurfaceHolder.mSurface + ", frame="+ mWinFrame);
      int w=mWinFrame.width();
      int h=mWinFrame.height();
      if (!fixedSize) {
        final Rect padding=mIWallpaperEngine.mDisplayPadding;
        w+=padding.left + padding.right;
        h+=padding.top + padding.bottom;
        mOverscanInsets.left+=padding.left;
        mOverscanInsets.top+=padding.top;
        mOverscanInsets.right+=padding.right;
        mOverscanInsets.bottom+=padding.bottom;
        mContentInsets.left+=padding.left;
        mContentInsets.top+=padding.top;
        mContentInsets.right+=padding.right;
        mContentInsets.bottom+=padding.bottom;
        mStableInsets.left+=padding.left;
        mStableInsets.top+=padding.top;
        mStableInsets.right+=padding.right;
        mStableInsets.bottom+=padding.bottom;
      }
      if (mCurWidth != w) {
        sizeChanged=true;
        mCurWidth=w;
      }
      if (mCurHeight != h) {
        sizeChanged=true;
        mCurHeight=h;
      }
      insetsChanged|=!mDispatchedOverscanInsets.equals(mOverscanInsets);
      insetsChanged|=!mDispatchedContentInsets.equals(mContentInsets);
      insetsChanged|=!mDispatchedStableInsets.equals(mStableInsets);
      mSurfaceHolder.setSurfaceFrameSize(w,h);
      mSurfaceHolder.mSurfaceLock.unlock();
      if (!mSurfaceHolder.mSurface.isValid()) {
        reportSurfaceDestroyed();
        if (DEBUG)         Log.v(TAG,"Layout: Surface destroyed");
        return;
      }
      boolean didSurface=false;
      try {
        mSurfaceHolder.ungetCallbacks();
        if (surfaceCreating) {
          mIsCreating=true;
          didSurface=true;
          if (DEBUG)           Log.v(TAG,"onSurfaceCreated(" + mSurfaceHolder + "): "+ this);
          onSurfaceCreated(mSurfaceHolder);
          SurfaceHolder.Callback callbacks[]=mSurfaceHolder.getCallbacks();
          if (callbacks != null) {
            for (            SurfaceHolder.Callback c : callbacks) {
              c.surfaceCreated(mSurfaceHolder);
            }
          }
        }
        redrawNeeded|=creating || (relayoutResult & WindowManagerGlobal.RELAYOUT_RES_FIRST_TIME) != 0;
        if (forceReport || creating || surfaceCreating|| formatChanged|| sizeChanged) {
          if (DEBUG) {
            RuntimeException e=new RuntimeException();
            e.fillInStackTrace();
            Log.w(TAG,"forceReport=" + forceReport + " creating="+ creating+ " formatChanged="+ formatChanged+ " sizeChanged="+ sizeChanged,e);
          }
          if (DEBUG)           Log.v(TAG,"onSurfaceChanged(" + mSurfaceHolder + ", "+ mFormat+ ", "+ mCurWidth+ ", "+ mCurHeight+ "): "+ this);
          didSurface=true;
          onSurfaceChanged(mSurfaceHolder,mFormat,mCurWidth,mCurHeight);
          SurfaceHolder.Callback callbacks[]=mSurfaceHolder.getCallbacks();
          if (callbacks != null) {
            for (            SurfaceHolder.Callback c : callbacks) {
              c.surfaceChanged(mSurfaceHolder,mFormat,mCurWidth,mCurHeight);
            }
          }
        }
        if (insetsChanged) {
          mDispatchedOverscanInsets.set(mOverscanInsets);
          mDispatchedContentInsets.set(mContentInsets);
          mDispatchedStableInsets.set(mStableInsets);
          final boolean isRound=(mIsEmulator && mIsCircularEmulator) || mWindowIsRound;
          mFinalSystemInsets.set(mDispatchedOverscanInsets);
          mFinalStableInsets.set(mDispatchedStableInsets);
          if (mOutsetBottom != null) {
            final DisplayMetrics metrics=getResources().getDisplayMetrics();
            mFinalSystemInsets.bottom=((int)mOutsetBottom.getDimension(metrics)) + mIWallpaperEngine.mDisplayPadding.bottom;
          }
          WindowInsets insets=new WindowInsets(mFinalSystemInsets,null,mFinalStableInsets,isRound);
          onApplyWindowInsets(insets);
        }
        if (redrawNeeded) {
          onSurfaceRedrawNeeded(mSurfaceHolder);
          SurfaceHolder.Callback callbacks[]=mSurfaceHolder.getCallbacks();
          if (callbacks != null) {
            for (            SurfaceHolder.Callback c : callbacks) {
              if (c instanceof SurfaceHolder.Callback2) {
                ((SurfaceHolder.Callback2)c).surfaceRedrawNeeded(mSurfaceHolder);
              }
            }
          }
        }
        if (didSurface && !mReportedVisible) {
          if (mIsCreating) {
            if (DEBUG)             Log.v(TAG,"onVisibilityChanged(true) at surface: " + this);
            onVisibilityChanged(true);
          }
          if (DEBUG)           Log.v(TAG,"onVisibilityChanged(false) at surface: " + this);
          onVisibilityChanged(false);
        }
      }
  finally {
        mIsCreating=false;
        mSurfaceCreated=true;
        if (redrawNeeded) {
          mSession.finishDrawing(mWindow);
        }
        mIWallpaperEngine.reportShown();
      }
    }
 catch (    RemoteException ex) {
    }
    if (DEBUG)     Log.v(TAG,"Layout: x=" + mLayout.x + " y="+ mLayout.y+ " w="+ mLayout.width+ " h="+ mLayout.height);
  }
}
