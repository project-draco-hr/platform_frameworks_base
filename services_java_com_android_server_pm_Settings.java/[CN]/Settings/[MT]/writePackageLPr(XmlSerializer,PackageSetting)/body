{
  serializer.startTag(null,"package");
  serializer.attribute(null,ATTR_NAME,pkg.name);
  if (pkg.realName != null) {
    serializer.attribute(null,"realName",pkg.realName);
  }
  serializer.attribute(null,"codePath",pkg.codePathString);
  if (!pkg.resourcePathString.equals(pkg.codePathString)) {
    serializer.attribute(null,"resourcePath",pkg.resourcePathString);
  }
  if (pkg.nativeLibraryPathString != null) {
    serializer.attribute(null,"nativeLibraryPath",pkg.nativeLibraryPathString);
  }
  serializer.attribute(null,"flags",Integer.toString(pkg.pkgFlags));
  serializer.attribute(null,"ft",Long.toHexString(pkg.timeStamp));
  serializer.attribute(null,"it",Long.toHexString(pkg.firstInstallTime));
  serializer.attribute(null,"ut",Long.toHexString(pkg.lastUpdateTime));
  serializer.attribute(null,"version",String.valueOf(pkg.versionCode));
  if (pkg.sharedUser == null) {
    serializer.attribute(null,"userId",Integer.toString(pkg.uid));
  }
 else {
    serializer.attribute(null,"sharedUserId",Integer.toString(pkg.uid));
  }
  if (pkg.uidError) {
    serializer.attribute(null,"uidError","true");
  }
  if (pkg.installStatus == PackageSettingBase.PKG_INSTALL_INCOMPLETE) {
    serializer.attribute(null,"installStatus","false");
  }
  if (pkg.installerPackageName != null) {
    serializer.attribute(null,"installer",pkg.installerPackageName);
  }
  pkg.signatures.writeXml(serializer,"sigs",mPastSignatures);
  if ((pkg.pkgFlags & ApplicationInfo.FLAG_SYSTEM) == 0) {
    serializer.startTag(null,"perms");
    if (pkg.sharedUser == null) {
      for (      final String name : pkg.grantedPermissions) {
        serializer.startTag(null,TAG_ITEM);
        serializer.attribute(null,ATTR_NAME,name);
        serializer.endTag(null,TAG_ITEM);
      }
    }
    serializer.endTag(null,"perms");
  }
  serializer.endTag(null,"package");
}
