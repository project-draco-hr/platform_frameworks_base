{
  final SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
  final Date date=new Date();
  boolean printedSomething=false;
  List<UserInfo> users=getAllUsers();
  for (  final PackageSetting ps : mPackages.values()) {
    if (packageName != null && !packageName.equals(ps.realName) && !packageName.equals(ps.name)) {
      continue;
    }
    if (packageName != null) {
      dumpState.setSharedUser(ps.sharedUser);
    }
    if (!printedSomething) {
      if (dumpState.onTitlePrinted())       pw.println(" ");
      pw.println("Packages:");
      printedSomething=true;
    }
    pw.print("  Package [");
    pw.print(ps.realName != null ? ps.realName : ps.name);
    pw.print("] (");
    pw.print(Integer.toHexString(System.identityHashCode(ps)));
    pw.println("):");
    if (ps.realName != null) {
      pw.print("    compat name=");
      pw.println(ps.name);
    }
    pw.print("    userId=");
    pw.print(ps.appId);
    pw.print(" gids=");
    pw.println(PackageManagerService.arrayToString(ps.gids));
    pw.print("    sharedUser=");
    pw.println(ps.sharedUser);
    pw.print("    pkg=");
    pw.println(ps.pkg);
    pw.print("    codePath=");
    pw.println(ps.codePathString);
    pw.print("    resourcePath=");
    pw.println(ps.resourcePathString);
    pw.print("    nativeLibraryPath=");
    pw.println(ps.nativeLibraryPathString);
    pw.print("    versionCode=");
    pw.println(ps.versionCode);
    if (ps.pkg != null) {
      pw.print("    applicationInfo=");
      pw.println(ps.pkg.applicationInfo.toString());
      pw.print("    flags=");
      printFlags(pw,ps.pkg.applicationInfo.flags,FLAG_DUMP_SPEC);
      pw.println();
      pw.print("    versionName=");
      pw.println(ps.pkg.mVersionName);
      pw.print("    dataDir=");
      pw.println(ps.pkg.applicationInfo.dataDir);
      pw.print("    targetSdk=");
      pw.println(ps.pkg.applicationInfo.targetSdkVersion);
      if (ps.pkg.mOperationPending) {
        pw.println("    mOperationPending=true");
      }
      pw.print("    supportsScreens=[");
      boolean first=true;
      if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SMALL_SCREENS) != 0) {
        if (!first)         pw.print(", ");
        first=false;
        pw.print("small");
      }
      if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_NORMAL_SCREENS) != 0) {
        if (!first)         pw.print(", ");
        first=false;
        pw.print("medium");
      }
      if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_LARGE_SCREENS) != 0) {
        if (!first)         pw.print(", ");
        first=false;
        pw.print("large");
      }
      if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_XLARGE_SCREENS) != 0) {
        if (!first)         pw.print(", ");
        first=false;
        pw.print("xlarge");
      }
      if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_RESIZEABLE_FOR_SCREENS) != 0) {
        if (!first)         pw.print(", ");
        first=false;
        pw.print("resizeable");
      }
      if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SCREEN_DENSITIES) != 0) {
        if (!first)         pw.print(", ");
        first=false;
        pw.print("anyDensity");
      }
      pw.println("]");
    }
    pw.print("    timeStamp=");
    date.setTime(ps.timeStamp);
    pw.println(sdf.format(date));
    pw.print("    firstInstallTime=");
    date.setTime(ps.firstInstallTime);
    pw.println(sdf.format(date));
    pw.print("    lastUpdateTime=");
    date.setTime(ps.lastUpdateTime);
    pw.println(sdf.format(date));
    if (ps.installerPackageName != null) {
      pw.print("    installerPackageName=");
      pw.println(ps.installerPackageName);
    }
    pw.print("    signatures=");
    pw.println(ps.signatures);
    pw.print("    permissionsFixed=");
    pw.print(ps.permissionsFixed);
    pw.print(" haveGids=");
    pw.print(ps.haveGids);
    pw.print(" installStatus=");
    pw.println(ps.installStatus);
    pw.print("    pkgFlags=");
    printFlags(pw,ps.pkgFlags,FLAG_DUMP_SPEC);
    pw.println();
    for (    UserInfo user : users) {
      pw.print("    User ");
      pw.print(user.id);
      pw.print(": ");
      pw.print(" installed=");
      pw.print(ps.getInstalled(user.id));
      pw.print(" stopped=");
      pw.print(ps.getStopped(user.id));
      pw.print(" notLaunched=");
      pw.print(ps.getNotLaunched(user.id));
      pw.print(" enabled=");
      pw.println(ps.getEnabled(user.id));
      HashSet<String> cmp=ps.getDisabledComponents(user.id);
      if (cmp != null && cmp.size() > 0) {
        pw.println("      disabledComponents:");
        for (        String s : cmp) {
          pw.print("      ");
          pw.println(s);
        }
      }
      cmp=ps.getEnabledComponents(user.id);
      if (cmp != null && cmp.size() > 0) {
        pw.println("      enabledComponents:");
        for (        String s : cmp) {
          pw.print("      ");
          pw.println(s);
        }
      }
    }
    if (ps.grantedPermissions.size() > 0) {
      pw.println("    grantedPermissions:");
      for (      String s : ps.grantedPermissions) {
        pw.print("      ");
        pw.println(s);
      }
    }
  }
  printedSomething=false;
  if (mRenamedPackages.size() > 0) {
    for (    final Map.Entry<String,String> e : mRenamedPackages.entrySet()) {
      if (packageName != null && !packageName.equals(e.getKey()) && !packageName.equals(e.getValue())) {
        continue;
      }
      if (!printedSomething) {
        if (dumpState.onTitlePrinted())         pw.println(" ");
        pw.println("Renamed packages:");
        printedSomething=true;
      }
      pw.print("  ");
      pw.print(e.getKey());
      pw.print(" -> ");
      pw.println(e.getValue());
    }
  }
  printedSomething=false;
  if (mDisabledSysPackages.size() > 0) {
    for (    final PackageSetting ps : mDisabledSysPackages.values()) {
      if (packageName != null && !packageName.equals(ps.realName) && !packageName.equals(ps.name)) {
        continue;
      }
      if (!printedSomething) {
        if (dumpState.onTitlePrinted())         pw.println(" ");
        pw.println("Hidden system packages:");
        printedSomething=true;
      }
      pw.print("  Package [");
      pw.print(ps.realName != null ? ps.realName : ps.name);
      pw.print("] (");
      pw.print(Integer.toHexString(System.identityHashCode(ps)));
      pw.println("):");
      if (ps.realName != null) {
        pw.print("    compat name=");
        pw.println(ps.name);
      }
      if (ps.pkg != null && ps.pkg.applicationInfo != null) {
        pw.print("    applicationInfo=");
        pw.println(ps.pkg.applicationInfo.toString());
      }
      pw.print("    userId=");
      pw.println(ps.appId);
      pw.print("    sharedUser=");
      pw.println(ps.sharedUser);
      pw.print("    codePath=");
      pw.println(ps.codePathString);
      pw.print("    resourcePath=");
      pw.println(ps.resourcePathString);
    }
  }
}
