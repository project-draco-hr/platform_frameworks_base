{
  String name=null;
  String idStr=null;
  int pkgFlags=0;
  SharedUserSetting su=null;
  try {
    name=parser.getAttributeValue(null,"name");
    idStr=parser.getAttributeValue(null,"userId");
    int userId=idStr != null ? Integer.parseInt(idStr) : 0;
    if ("true".equals(parser.getAttributeValue(null,"system"))) {
      pkgFlags|=ApplicationInfo.FLAG_SYSTEM;
    }
    if (name == null) {
      PackageManagerService.reportSettingsProblem(Log.WARN,"Error in package manager settings: <shared-user> has no name at " + parser.getPositionDescription());
    }
 else     if (userId == 0) {
      PackageManagerService.reportSettingsProblem(Log.WARN,"Error in package manager settings: shared-user " + name + " has bad userId "+ idStr+ " at "+ parser.getPositionDescription());
    }
 else {
      if ((su=addSharedUserLPw(name.intern(),userId,pkgFlags)) == null) {
        PackageManagerService.reportSettingsProblem(Log.ERROR,"Occurred while parsing settings at " + parser.getPositionDescription());
      }
    }
  }
 catch (  NumberFormatException e) {
    PackageManagerService.reportSettingsProblem(Log.WARN,"Error in package manager settings: package " + name + " has bad userId "+ idStr+ " at "+ parser.getPositionDescription());
  }
  ;
  if (su != null) {
    int outerDepth=parser.getDepth();
    int type;
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
      if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
        continue;
      }
      String tagName=parser.getName();
      if (tagName.equals("sigs")) {
        su.signatures.readXml(parser,mPastSignatures);
      }
 else       if (tagName.equals("perms")) {
        readGrantedPermissionsLPw(parser,su.grantedPermissions);
      }
 else {
        PackageManagerService.reportSettingsProblem(Log.WARN,"Unknown element under <shared-user>: " + parser.getName());
        XmlUtils.skipCurrentTag(parser);
      }
    }
  }
 else {
    XmlUtils.skipCurrentTag(parser);
  }
}
