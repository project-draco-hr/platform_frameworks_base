{
  if (mStoppedPackagesFilename.exists()) {
    if (!mBackupStoppedPackagesFilename.exists()) {
      if (!mStoppedPackagesFilename.renameTo(mBackupStoppedPackagesFilename)) {
        Log.wtf(PackageManagerService.TAG,"Unable to backup package manager stopped packages, " + "current changes will be lost at reboot");
        return;
      }
    }
 else {
      mStoppedPackagesFilename.delete();
      Slog.w(PackageManagerService.TAG,"Preserving older stopped packages backup");
    }
  }
  try {
    final FileOutputStream fstr=new FileOutputStream(mStoppedPackagesFilename);
    final BufferedOutputStream str=new BufferedOutputStream(fstr);
    final XmlSerializer serializer=new FastXmlSerializer();
    serializer.setOutput(str,"utf-8");
    serializer.startDocument(null,true);
    serializer.setFeature("http://xmlpull.org/v1/doc/features.html#indent-output",true);
    serializer.startTag(null,"stopped-packages");
    for (    final PackageSetting pkg : mPackages.values()) {
      if (pkg.stopped) {
        serializer.startTag(null,"pkg");
        serializer.attribute(null,"name",pkg.name);
        if (pkg.notLaunched) {
          serializer.attribute(null,"nl","1");
        }
        serializer.endTag(null,"pkg");
      }
    }
    serializer.endTag(null,"stopped-packages");
    serializer.endDocument();
    str.flush();
    FileUtils.sync(fstr);
    str.close();
    mBackupStoppedPackagesFilename.delete();
    FileUtils.setPermissions(mStoppedPackagesFilename.toString(),FileUtils.S_IRUSR | FileUtils.S_IWUSR | FileUtils.S_IRGRP| FileUtils.S_IWGRP,-1,-1);
    return;
  }
 catch (  java.io.IOException e) {
    Log.wtf(PackageManagerService.TAG,"Unable to write package manager stopped packages, " + " current changes will be lost at reboot",e);
  }
  if (mStoppedPackagesFilename.exists()) {
    if (!mStoppedPackagesFilename.delete()) {
      Log.i(PackageManagerService.TAG,"Failed to clean up mangled file: " + mStoppedPackagesFilename);
    }
  }
}
