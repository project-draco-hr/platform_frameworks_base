{
  int outerDepth=parser.getDepth();
  int type;
  while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
    if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
      continue;
    }
    final String tagName=parser.getName();
    if (tagName.equals("item")) {
      final String name=parser.getAttributeValue(null,"name");
      final String sourcePackage=parser.getAttributeValue(null,"package");
      final String ptype=parser.getAttributeValue(null,"type");
      if (name != null && sourcePackage != null) {
        final boolean dynamic="dynamic".equals(ptype);
        final BasePermission bp=new BasePermission(name,sourcePackage,dynamic ? BasePermission.TYPE_DYNAMIC : BasePermission.TYPE_NORMAL);
        bp.protectionLevel=readInt(parser,null,"protection",PermissionInfo.PROTECTION_NORMAL);
        bp.protectionLevel=PermissionInfo.fixProtectionLevel(bp.protectionLevel);
        if (dynamic) {
          PermissionInfo pi=new PermissionInfo();
          pi.packageName=sourcePackage.intern();
          pi.name=name.intern();
          pi.icon=readInt(parser,null,"icon",0);
          pi.nonLocalizedLabel=parser.getAttributeValue(null,"label");
          pi.protectionLevel=bp.protectionLevel;
          bp.pendingInfo=pi;
        }
        out.put(bp.name,bp);
      }
 else {
        PackageManagerService.reportSettingsProblem(Log.WARN,"Error in package manager settings: permissions has" + " no name at " + parser.getPositionDescription());
      }
    }
 else {
      PackageManagerService.reportSettingsProblem(Log.WARN,"Unknown element reading permissions: " + parser.getName() + " at "+ parser.getPositionDescription());
    }
    XmlUtils.skipCurrentTag(parser);
  }
}
