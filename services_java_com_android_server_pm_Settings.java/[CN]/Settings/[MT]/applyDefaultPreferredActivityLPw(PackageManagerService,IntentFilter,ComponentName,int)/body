{
  if (PackageManagerService.DEBUG_PREFERRED) {
    Log.d(TAG,"Processing preferred:");
    tmpPa.dump(new LogPrinter(Log.DEBUG,TAG),"  ");
  }
  Intent intent=new Intent();
  int flags=0;
  intent.setAction(tmpPa.getAction(0));
  for (int i=0; i < tmpPa.countCategories(); i++) {
    String cat=tmpPa.getCategory(i);
    if (cat.equals(Intent.CATEGORY_DEFAULT)) {
      flags|=PackageManager.MATCH_DEFAULT_ONLY;
    }
 else {
      intent.addCategory(cat);
    }
  }
  boolean doNonData=true;
  for (int ischeme=0; ischeme < tmpPa.countDataSchemes(); ischeme++) {
    boolean doScheme=true;
    String scheme=tmpPa.getDataScheme(ischeme);
    for (int issp=0; issp < tmpPa.countDataSchemeSpecificParts(); issp++) {
      Uri.Builder builder=new Uri.Builder();
      builder.scheme(scheme);
      PatternMatcher ssp=tmpPa.getDataSchemeSpecificPart(issp);
      builder.opaquePart(ssp.getPath());
      Intent finalIntent=new Intent(intent);
      finalIntent.setData(builder.build());
      applyDefaultPreferredActivityLPw(service,finalIntent,flags,cn,scheme,ssp,null,null,null,userId);
      doScheme=false;
    }
    for (int iauth=0; iauth < tmpPa.countDataAuthorities(); iauth++) {
      boolean doAuth=true;
      IntentFilter.AuthorityEntry auth=tmpPa.getDataAuthority(iauth);
      for (int ipath=0; ipath < tmpPa.countDataPaths(); ipath++) {
        Uri.Builder builder=new Uri.Builder();
        builder.scheme(scheme);
        if (auth.getHost() != null) {
          builder.authority(auth.getHost());
        }
        PatternMatcher path=tmpPa.getDataPath(ipath);
        builder.path(path.getPath());
        Intent finalIntent=new Intent(intent);
        finalIntent.setData(builder.build());
        applyDefaultPreferredActivityLPw(service,finalIntent,flags,cn,scheme,null,auth,path,null,userId);
        doAuth=doScheme=false;
      }
      if (doAuth) {
        Uri.Builder builder=new Uri.Builder();
        builder.scheme(scheme);
        if (auth.getHost() != null) {
          builder.authority(auth.getHost());
        }
        Intent finalIntent=new Intent(intent);
        finalIntent.setData(builder.build());
        applyDefaultPreferredActivityLPw(service,finalIntent,flags,cn,scheme,null,auth,null,null,userId);
        doScheme=false;
      }
    }
    if (doScheme) {
      Uri.Builder builder=new Uri.Builder();
      builder.scheme(scheme);
      Intent finalIntent=new Intent(intent);
      finalIntent.setData(builder.build());
      applyDefaultPreferredActivityLPw(service,finalIntent,flags,cn,scheme,null,null,null,null,userId);
    }
    doNonData=false;
  }
  for (int idata=0; idata < tmpPa.countDataTypes(); idata++) {
    Intent finalIntent=new Intent(intent);
    String mimeType=tmpPa.getDataType(idata);
    finalIntent.setType(mimeType);
    applyDefaultPreferredActivityLPw(service,finalIntent,flags,cn,null,null,null,null,mimeType,userId);
    doNonData=false;
  }
  if (doNonData) {
    applyDefaultPreferredActivityLPw(service,intent,flags,cn,null,null,null,null,null,userId);
  }
}
