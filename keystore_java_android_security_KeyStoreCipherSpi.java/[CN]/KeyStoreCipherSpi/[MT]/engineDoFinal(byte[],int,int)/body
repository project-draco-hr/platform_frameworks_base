{
  ensureKeystoreOperationInitialized();
  byte[] output;
  try {
    output=mMainDataStreamer.doFinal(input,inputOffset,inputLen);
  }
 catch (  KeymasterException e) {
switch (e.getErrorCode()) {
case KeymasterDefs.KM_ERROR_INVALID_INPUT_LENGTH:
      throw new IllegalBlockSizeException();
case KeymasterDefs.KM_ERROR_INVALID_ARGUMENT:
    throw new BadPaddingException();
case KeymasterDefs.KM_ERROR_VERIFICATION_FAILED:
  throw new AEADBadTagException();
default :
throw KeymasterUtils.getCryptoOperationException(e);
}
}
reset();
return output;
}
