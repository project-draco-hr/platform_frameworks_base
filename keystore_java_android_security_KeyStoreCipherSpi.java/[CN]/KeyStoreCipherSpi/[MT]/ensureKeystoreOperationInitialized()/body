{
  if (mMainDataStreamer != null) {
    return;
  }
  if (mKey == null) {
    throw new IllegalStateException("Not initialized");
  }
  KeymasterArguments keymasterInputArgs=new KeymasterArguments();
  keymasterInputArgs.addInt(KeymasterDefs.KM_TAG_ALGORITHM,mAlgorithm);
  keymasterInputArgs.addInt(KeymasterDefs.KM_TAG_BLOCK_MODE,mBlockMode);
  keymasterInputArgs.addInt(KeymasterDefs.KM_TAG_PADDING,mPadding);
  addAlgorithmSpecificParametersToBegin(keymasterInputArgs);
  KeymasterArguments keymasterOutputArgs=new KeymasterArguments();
  OperationResult opResult=mKeyStore.begin(mKey.getAlias(),mEncrypting ? KeymasterDefs.KM_PURPOSE_ENCRYPT : KeymasterDefs.KM_PURPOSE_DECRYPT,true,keymasterInputArgs,mAdditionalEntropyForBegin,keymasterOutputArgs);
  mAdditionalEntropyForBegin=null;
  if (opResult == null) {
    throw new KeyStoreConnectException();
  }
 else   if (opResult.resultCode != KeyStore.NO_ERROR) {
    throw new CryptoOperationException("Failed to start keystore operation",KeymasterUtils.getExceptionForKeymasterError(opResult.resultCode));
  }
  if (opResult.token == null) {
    throw new CryptoOperationException("Keystore returned null operation token");
  }
  mOperationToken=opResult.token;
  loadAlgorithmSpecificParametersFromBeginResult(keymasterOutputArgs);
  mFirstOperationInitiated=true;
  mMainDataStreamer=new KeyStoreCryptoOperationChunkedStreamer(new KeyStoreCryptoOperationChunkedStreamer.MainDataStream(mKeyStore,opResult.token));
}
