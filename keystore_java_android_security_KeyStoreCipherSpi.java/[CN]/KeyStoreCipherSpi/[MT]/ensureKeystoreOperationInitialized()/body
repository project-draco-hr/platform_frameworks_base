{
  if (mMainDataStreamer != null) {
    return;
  }
  if (mCachedException != null) {
    return;
  }
  if (mKey == null) {
    throw new IllegalStateException("Not initialized");
  }
  if ((mEncrypting) && (mIvRequired) && (mIvHasBeenUsed)) {
    throw new IllegalStateException("IV has already been used. Reusing IV in encryption mode violates security best" + " practices.");
  }
  KeymasterArguments keymasterInputArgs=new KeymasterArguments();
  keymasterInputArgs.addInt(KeymasterDefs.KM_TAG_ALGORITHM,mKeymasterAlgorithm);
  keymasterInputArgs.addInt(KeymasterDefs.KM_TAG_BLOCK_MODE,mKeymasterBlockMode);
  keymasterInputArgs.addInt(KeymasterDefs.KM_TAG_PADDING,mKeymasterPadding);
  addAlgorithmSpecificParametersToBegin(keymasterInputArgs);
  KeymasterArguments keymasterOutputArgs=new KeymasterArguments();
  OperationResult opResult=mKeyStore.begin(mKey.getAlias(),mEncrypting ? KeymasterDefs.KM_PURPOSE_ENCRYPT : KeymasterDefs.KM_PURPOSE_DECRYPT,true,keymasterInputArgs,mAdditionalEntropyForBegin,keymasterOutputArgs);
  mAdditionalEntropyForBegin=null;
  if (opResult == null) {
    throw new KeyStoreConnectException();
  }
 else   if ((opResult.resultCode != KeyStore.NO_ERROR) && (opResult.resultCode != KeyStore.OP_AUTH_NEEDED)) {
switch (opResult.resultCode) {
case KeymasterDefs.KM_ERROR_INVALID_NONCE:
      throw new InvalidAlgorithmParameterException("Invalid IV");
  }
  throw mKeyStore.getInvalidKeyException(mKey.getAlias(),opResult.resultCode);
}
if (opResult.token == null) {
  throw new IllegalStateException("Keystore returned null operation token");
}
mOperationToken=opResult.token;
mOperationHandle=opResult.operationHandle;
loadAlgorithmSpecificParametersFromBeginResult(keymasterOutputArgs);
mFirstOperationInitiated=true;
mIvHasBeenUsed=true;
mMainDataStreamer=new KeyStoreCryptoOperationChunkedStreamer(new KeyStoreCryptoOperationChunkedStreamer.MainDataStream(mKeyStore,opResult.token));
if (opResult.resultCode != KeyStore.NO_ERROR) {
  InvalidKeyException e=mKeyStore.getInvalidKeyException(mKey.getAlias(),opResult.resultCode);
  if (!(e instanceof UserNotAuthenticatedException)) {
    throw e;
  }
}
}
