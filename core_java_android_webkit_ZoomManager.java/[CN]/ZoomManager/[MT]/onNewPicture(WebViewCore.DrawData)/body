{
  final int viewWidth=mWebView.getViewWidth();
  WebSettings settings=mWebView.getSettings();
  if (settings.getUseWideViewPort()) {
    if (!settings.getUseFixedViewport()) {
      setZoomOverviewWidth(Math.min(WebView.sMaxViewportWidth,Math.max((int)(viewWidth * mInvDefaultScale),Math.max(drawData.mMinPrefWidth,drawData.mViewSize.x))));
    }
 else     if (drawData.mContentSize.x > 0) {
      final int contentWidth=Math.max(drawData.mContentSize.x,drawData.mMinPrefWidth);
      final int newZoomOverviewWidth=Math.min(WebView.sMaxViewportWidth,contentWidth);
      if (newZoomOverviewWidth != mZoomOverviewWidth) {
        setZoomOverviewWidth(newZoomOverviewWidth);
        if (settings.isNarrowColumnLayout() && (mInitialZoomOverview || mInZoomOverview)) {
          mTextWrapScale=getReadingLevelScale();
        }
      }
    }
  }
  final float zoomOverviewScale=getZoomOverviewScale();
  if (!mMinZoomScaleFixed) {
    mMinZoomScale=zoomOverviewScale;
  }
  if (!mWebView.drawHistory() && (mInitialZoomOverview || (mInZoomOverview && Math.abs((viewWidth * mInvActualScale) - mZoomOverviewWidth) > 1))) {
    mInitialZoomOverview=false;
    setZoomScale(zoomOverviewScale,!willScaleTriggerZoom(mTextWrapScale) && !mWebView.getSettings().getUseFixedViewport());
  }
}
