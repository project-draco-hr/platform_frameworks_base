{
  final int count=getChildCount();
  int width=r - l;
  int height=b - t;
  int paddingLeft=getPaddingLeft();
  int paddingTop=getPaddingTop();
  int paddingRight=getPaddingRight();
  int paddingBottom=getPaddingBottom();
  final int scrollX=getScrollX();
  int decorCount=0;
  for (int i=0; i < count; i++) {
    final View child=getChildAt(i);
    if (child.getVisibility() != GONE) {
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      int childLeft=0;
      int childTop=0;
      if (lp.isDecor) {
        final int hgrav=lp.gravity & Gravity.HORIZONTAL_GRAVITY_MASK;
        final int vgrav=lp.gravity & Gravity.VERTICAL_GRAVITY_MASK;
switch (hgrav) {
default :
          childLeft=paddingLeft;
        break;
case Gravity.LEFT:
      childLeft=paddingLeft;
    paddingLeft+=child.getMeasuredWidth();
  break;
case Gravity.CENTER_HORIZONTAL:
childLeft=Math.max((width - child.getMeasuredWidth()) / 2,paddingLeft);
break;
case Gravity.RIGHT:
childLeft=width - paddingRight - child.getMeasuredWidth();
paddingRight+=child.getMeasuredWidth();
break;
}
switch (vgrav) {
default :
childTop=paddingTop;
break;
case Gravity.TOP:
childTop=paddingTop;
paddingTop+=child.getMeasuredHeight();
break;
case Gravity.CENTER_VERTICAL:
childTop=Math.max((height - child.getMeasuredHeight()) / 2,paddingTop);
break;
case Gravity.BOTTOM:
childTop=height - paddingBottom - child.getMeasuredHeight();
paddingBottom+=child.getMeasuredHeight();
break;
}
childLeft+=scrollX;
child.layout(childLeft,childTop,childLeft + child.getMeasuredWidth(),childTop + child.getMeasuredHeight());
decorCount++;
}
}
}
final int childWidth=width - paddingLeft - paddingRight;
for (int i=0; i < count; i++) {
final View child=getChildAt(i);
if (child.getVisibility() == GONE) {
continue;
}
final LayoutParams lp=(LayoutParams)child.getLayoutParams();
if (lp.isDecor) {
continue;
}
final ItemInfo ii=infoForChild(child);
if (ii == null) {
continue;
}
if (lp.needsMeasure) {
lp.needsMeasure=false;
final int widthSpec=MeasureSpec.makeMeasureSpec((int)(childWidth * lp.widthFactor),MeasureSpec.EXACTLY);
final int heightSpec=MeasureSpec.makeMeasureSpec((int)(height - paddingTop - paddingBottom),MeasureSpec.EXACTLY);
child.measure(widthSpec,heightSpec);
}
final int childMeasuredWidth=child.getMeasuredWidth();
final int startOffset=(int)(childWidth * ii.offset);
final int childLeft;
if (isLayoutRtl()) {
childLeft=MAX_SCROLL_X - paddingRight - startOffset- childMeasuredWidth;
}
 else {
childLeft=paddingLeft + startOffset;
}
final int childTop=paddingTop;
child.layout(childLeft,childTop,childLeft + childMeasuredWidth,childTop + child.getMeasuredHeight());
}
mTopPageBounds=paddingTop;
mBottomPageBounds=height - paddingBottom;
mDecorChildCount=decorCount;
if (mFirstLayout) {
scrollToItem(mCurItem,false,0,false);
}
mFirstLayout=false;
}
