{
  boolean ok=true;
  byte[] data;
  try (final ByteArrayOutputStream baos=new ByteArrayOutputStream()){
    final XmlSerializer out=new FastXmlSerializer();
    out.setOutput(baos,StandardCharsets.UTF_16.name());
    out.startDocument(null,true);
    out.startTag(null,ROOT_TAG);
    out.attribute(null,ATTR,str);
    out.text(str);
    out.endTag(null,ROOT_TAG);
    out.endDocument();
    baos.flush();
    data=baos.toByteArray();
  }
 catch (  Exception e) {
    Log.e(TAG,"Unable to serialize: " + description,e);
    return false;
  }
  if (ENABLE_DUMP) {
    Log.d(TAG,"Dump:");
    Log.d(TAG,new String(data));
  }
  try (final ByteArrayInputStream baos=new ByteArrayInputStream(data)){
    XmlPullParser parser=Xml.newPullParser();
    parser.setInput(baos,StandardCharsets.UTF_16.name());
    int type;
    String tag=null;
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT) {
      if (type == XmlPullParser.START_TAG) {
        tag=parser.getName();
        if (ROOT_TAG.equals(tag)) {
          String read=parser.getAttributeValue(null,ATTR);
          if (!str.equals(read)) {
            Log.e(TAG,"Attribute not preserved: " + description + " input=\""+ str+ "\", but read=\""+ read+ "\"");
            ok=false;
          }
        }
      }
      if (type == XmlPullParser.TEXT && ROOT_TAG.equals(tag)) {
        String read=parser.getText();
        if (!str.equals(parser.getText())) {
          Log.e(TAG,"Text not preserved: " + description + " input=\""+ str+ "\", but read=\""+ read+ "\"");
          ok=false;
        }
      }
    }
  }
 catch (  Exception e) {
    Log.e(TAG,"Unable to parse: " + description,e);
    return false;
  }
  return ok;
}
