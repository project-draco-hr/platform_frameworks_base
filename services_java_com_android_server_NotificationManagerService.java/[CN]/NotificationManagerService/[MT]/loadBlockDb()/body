{
synchronized (mBlockedPackages) {
    if (mPolicyFile == null) {
      File dir=new File("/data/system");
      mPolicyFile=new AtomicFile(new File(dir,"notification_policy.xml"));
      mBlockedPackages.clear();
      FileInputStream infile=null;
      try {
        infile=mPolicyFile.openRead();
        final XmlPullParser parser=Xml.newPullParser();
        parser.setInput(infile,null);
        int type;
        String tag;
        int version=DB_VERSION;
        while ((type=parser.next()) != END_DOCUMENT) {
          tag=parser.getName();
          if (type == START_TAG) {
            if (TAG_BODY.equals(tag)) {
              version=Integer.parseInt(parser.getAttributeValue(null,ATTR_VERSION));
            }
 else             if (TAG_BLOCKED_PKGS.equals(tag)) {
              while ((type=parser.next()) != END_DOCUMENT) {
                tag=parser.getName();
                if (TAG_PACKAGE.equals(tag)) {
                  mBlockedPackages.add(parser.getAttributeValue(null,ATTR_NAME));
                }
 else                 if (TAG_BLOCKED_PKGS.equals(tag) && type == END_TAG) {
                  break;
                }
              }
            }
          }
        }
      }
 catch (      FileNotFoundException e) {
      }
catch (      IOException e) {
        Log.wtf(TAG,"Unable to read blocked notifications database",e);
      }
catch (      NumberFormatException e) {
        Log.wtf(TAG,"Unable to parse blocked notifications database",e);
      }
catch (      XmlPullParserException e) {
        Log.wtf(TAG,"Unable to parse blocked notifications database",e);
      }
 finally {
        IoUtils.closeQuietly(infile);
      }
    }
  }
}
