{
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println("Permission Denial: can't dump NotificationManager from from pid=" + Binder.getCallingPid() + ", uid="+ Binder.getCallingUid());
    return;
  }
  pw.println("Current Notification Manager state:");
  pw.println("  Listeners (" + mEnabledListenersForCurrentUser.size() + ") enabled for current user:");
  for (  ComponentName cmpt : mEnabledListenersForCurrentUser) {
    pw.println("    " + cmpt);
  }
  pw.println("  Live listeners (" + mListeners.size() + "):");
  for (  NotificationListenerInfo info : mListeners) {
    pw.println("    " + info.component + " (user "+ info.userid+ "): "+ info.listener+ (info.isSystem ? " SYSTEM" : ""));
  }
  int N;
synchronized (mToastQueue) {
    N=mToastQueue.size();
    if (N > 0) {
      pw.println("  Toast Queue:");
      for (int i=0; i < N; i++) {
        mToastQueue.get(i).dump(pw,"    ");
      }
      pw.println("  ");
    }
  }
synchronized (mNotificationList) {
    N=mNotificationList.size();
    if (N > 0) {
      pw.println("  Notification List:");
      for (int i=0; i < N; i++) {
        mNotificationList.get(i).dump(pw,"    ",mContext);
      }
      pw.println("  ");
    }
    N=mLights.size();
    if (N > 0) {
      pw.println("  Lights List:");
      for (int i=0; i < N; i++) {
        pw.println("    " + mLights.get(i));
      }
      pw.println("  ");
    }
    pw.println("  mSoundNotification=" + mSoundNotification);
    pw.println("  mVibrateNotification=" + mVibrateNotification);
    pw.println("  mDisabledNotifications=0x" + Integer.toHexString(mDisabledNotifications));
    pw.println("  mSystemReady=" + mSystemReady);
    pw.println("  mArchive=" + mArchive.toString());
    Iterator<StatusBarNotification> iter=mArchive.descendingIterator();
    int i=0;
    while (iter.hasNext()) {
      pw.println("    " + iter.next());
      if (++i >= 5) {
        if (iter.hasNext())         pw.println("    ...");
        break;
      }
    }
  }
}
