{
  super(context,attrs,defStyleAttr,defStyleRes);
  final TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.AutoCompleteTextView,defStyleAttr,defStyleRes);
  if (popupTheme != null) {
    mPopupContext=new ContextThemeWrapper(context,popupTheme);
  }
 else {
    final int popupThemeResId=a.getResourceId(R.styleable.AutoCompleteTextView_popupTheme,0);
    if (popupThemeResId != 0) {
      mPopupContext=new ContextThemeWrapper(context,popupThemeResId);
    }
 else {
      mPopupContext=context;
    }
  }
  final TypedArray pa;
  if (mPopupContext != context) {
    pa=mPopupContext.obtainStyledAttributes(attrs,R.styleable.AutoCompleteTextView,defStyleAttr,defStyleRes);
  }
 else {
    pa=a;
  }
  final Drawable popupListSelector=pa.getDrawable(R.styleable.AutoCompleteTextView_dropDownSelector);
  final int popupWidth=pa.getLayoutDimension(R.styleable.AutoCompleteTextView_dropDownWidth,LayoutParams.WRAP_CONTENT);
  final int popupHeight=pa.getLayoutDimension(R.styleable.AutoCompleteTextView_dropDownHeight,LayoutParams.WRAP_CONTENT);
  final int popupHintLayoutResId=pa.getResourceId(R.styleable.AutoCompleteTextView_completionHintView,R.layout.simple_dropdown_hint);
  final CharSequence popupHintText=pa.getText(R.styleable.AutoCompleteTextView_completionHint);
  if (pa != a) {
    pa.recycle();
  }
  mPopup=new ListPopupWindow(mPopupContext,attrs,defStyleAttr,defStyleRes);
  mPopup.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
  mPopup.setPromptPosition(ListPopupWindow.POSITION_PROMPT_BELOW);
  mPopup.setListSelector(popupListSelector);
  mPopup.setOnItemClickListener(new DropDownItemClickListener());
  mPopup.setWidth(popupWidth);
  mPopup.setHeight(popupHeight);
  mHintResource=popupHintLayoutResId;
  setCompletionHint(popupHintText);
  mDropDownAnchorId=a.getResourceId(R.styleable.AutoCompleteTextView_dropDownAnchor,View.NO_ID);
  mThreshold=a.getInt(R.styleable.AutoCompleteTextView_completionThreshold,2);
  a.recycle();
  int inputType=getInputType();
  if ((inputType & EditorInfo.TYPE_MASK_CLASS) == EditorInfo.TYPE_CLASS_TEXT) {
    inputType|=EditorInfo.TYPE_TEXT_FLAG_AUTO_COMPLETE;
    setRawInputType(inputType);
  }
  setFocusable(true);
  addTextChangedListener(new MyWatcher());
  mPassThroughClickListener=new PassThroughClickListener();
  super.setOnClickListener(mPassThroughClickListener);
}
