{
  ViewGroup dropDownView;
  int otherHeights=0;
  if (mAdapter != null) {
    InputMethodManager imm=InputMethodManager.peekInstance();
    if (imm != null) {
      int N=mAdapter.getCount();
      if (N > 20)       N=20;
      CompletionInfo[] completions=new CompletionInfo[N];
      for (int i=0; i < N; i++) {
        Object item=mAdapter.getItem(i);
        long id=mAdapter.getItemId(i);
        completions[i]=new CompletionInfo(id,i,convertSelectionToString(item));
      }
      imm.displayCompletions(this,completions);
    }
  }
  if (mDropDownList == null) {
    Context context=getContext();
    mHideSelector=new ListSelectorHider();
    mShowDropDownRunnable=new Runnable(){
      public void run(){
        View view=getDropDownAnchorView();
        if (view != null && view.getWindowToken() != null) {
          showDropDown();
        }
      }
    }
;
    mDropDownList=new DropDownListView(context);
    mDropDownList.setSelector(mDropDownListHighlight);
    mDropDownList.setAdapter(mAdapter);
    mDropDownList.setVerticalFadingEdgeEnabled(true);
    mDropDownList.setOnItemClickListener(mDropDownItemClickListener);
    mDropDownList.setFocusable(true);
    mDropDownList.setFocusableInTouchMode(true);
    mDropDownList.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
      public void onItemSelected(      AdapterView<?> parent,      View view,      int position,      long id){
        if (position != -1) {
          DropDownListView dropDownList=mDropDownList;
          if (dropDownList != null) {
            dropDownList.mListSelectionHidden=false;
          }
        }
      }
      public void onNothingSelected(      AdapterView<?> parent){
      }
    }
);
    if (mItemSelectedListener != null) {
      mDropDownList.setOnItemSelectedListener(mItemSelectedListener);
    }
    dropDownView=mDropDownList;
    View hintView=getHintView(context);
    if (hintView != null) {
      LinearLayout hintContainer=new LinearLayout(context);
      hintContainer.setOrientation(LinearLayout.VERTICAL);
      LinearLayout.LayoutParams hintParams=new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,0,1.0f);
      hintContainer.addView(dropDownView,hintParams);
      hintContainer.addView(hintView);
      int widthSpec=MeasureSpec.makeMeasureSpec(getWidth(),MeasureSpec.AT_MOST);
      int heightSpec=MeasureSpec.UNSPECIFIED;
      hintView.measure(widthSpec,heightSpec);
      hintParams=(LinearLayout.LayoutParams)hintView.getLayoutParams();
      otherHeights=hintView.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;
      dropDownView=hintContainer;
    }
    mPopup.setContentView(dropDownView);
  }
 else {
    dropDownView=(ViewGroup)mPopup.getContentView();
    final View view=dropDownView.findViewById(HINT_VIEW_ID);
    if (view != null) {
      LinearLayout.LayoutParams hintParams=(LinearLayout.LayoutParams)view.getLayoutParams();
      otherHeights=view.getMeasuredHeight() + hintParams.topMargin + hintParams.bottomMargin;
    }
  }
  boolean ignoreBottomDecorations=mPopup.getInputMethodMode() == PopupWindow.INPUT_METHOD_NOT_NEEDED;
  final int maxHeight=mPopup.getMaxAvailableHeight(getDropDownAnchorView(),mDropDownVerticalOffset,ignoreBottomDecorations);
  if (mDropDownAlwaysVisible || mDropDownHeight == ViewGroup.LayoutParams.MATCH_PARENT) {
    int padding=0;
    Drawable background=mPopup.getBackground();
    if (background != null) {
      background.getPadding(mTempRect);
      padding=mTempRect.top + mTempRect.bottom;
    }
    return maxHeight + padding;
  }
  return mDropDownList.measureHeightOfChildren(MeasureSpec.UNSPECIFIED,0,ListView.NO_POSITION,maxHeight - otherHeights,2) + otherHeights;
}
