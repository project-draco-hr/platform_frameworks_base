{
  int ret=0, sum=0;
  ret=removeWs(offset);
  offset+=ret;
  sum+=ret;
  String propName=getWord(offset).toUpperCase();
  if (!mEvtPropNameGroup2.contains(propName)) {
    return PARSE_ERROR;
  }
  ret=propName.length();
  offset+=ret;
  sum+=ret;
  if (mBuilder != null) {
    mBuilder.propertyName(propName);
  }
  ret=parseParams(offset);
  if (PARSE_ERROR != ret) {
    offset+=ret;
    sum+=ret;
  }
  ret=parseString(offset,":",false);
  if (PARSE_ERROR == ret) {
    return PARSE_ERROR;
  }
  offset+=ret;
  sum+=ret;
  int start=offset;
  ret=parseValue(offset);
  if (PARSE_ERROR == ret) {
    return PARSE_ERROR;
  }
  offset+=ret;
  sum+=ret;
  if (mBuilder != null) {
    int end=0;
    ArrayList<String> v=new ArrayList<String>();
    Pattern p=Pattern.compile("([^;\\\\]*(\\\\[\\\\;:,])*[^;\\\\]*)(;?)");
    Matcher m=p.matcher(mBuffer.substring(start,offset));
    while (m.find()) {
      String s=exportEntpropValue(propName,m.group(1));
      v.add(s);
      end=m.end();
      if (offset == start + end) {
        String endValue=m.group(3);
        if (";".equals(endValue)) {
          v.add("");
        }
        break;
      }
    }
    mBuilder.propertyValues(v);
    if (PARSE_ERROR == valueFilter(propName,v))     return PARSE_ERROR;
  }
  ret=parseCrlf(offset);
  if (PARSE_ERROR == ret) {
    return PARSE_ERROR;
  }
  sum+=ret;
  return sum;
}
