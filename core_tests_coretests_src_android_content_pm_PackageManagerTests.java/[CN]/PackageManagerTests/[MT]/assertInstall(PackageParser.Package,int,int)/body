{
  try {
    String pkgName=pkg.packageName;
    ApplicationInfo info=getPm().getApplicationInfo(pkgName,0);
    assertNotNull(info);
    assertEquals(pkgName,info.packageName);
    File dataDir=Environment.getDataDirectory();
    String appInstallPath=new File(dataDir,"app").getPath();
    String drmInstallPath=new File(dataDir,"app-private").getPath();
    File srcDir=new File(info.sourceDir);
    String srcPath=srcDir.getParent();
    File publicSrcDir=new File(info.publicSourceDir);
    String publicSrcPath=publicSrcDir.getParent();
    long pkgLen=new File(info.sourceDir).length();
    if ((flags & PackageManager.INSTALL_FORWARD_LOCK) != 0) {
      assertTrue((info.flags & ApplicationInfo.FLAG_FORWARD_LOCK) != 0);
      assertEquals(srcPath,drmInstallPath);
      assertEquals(publicSrcPath,appInstallPath);
    }
 else {
      assertFalse((info.flags & ApplicationInfo.FLAG_FORWARD_LOCK) != 0);
      int rLoc=getInstallLoc(flags,expInstallLocation,pkgLen);
      if (rLoc == INSTALL_LOC_INT) {
        assertEquals(srcPath,appInstallPath);
        assertEquals(publicSrcPath,appInstallPath);
        assertFalse((info.flags & ApplicationInfo.FLAG_EXTERNAL_STORAGE) != 0);
      }
 else       if (rLoc == INSTALL_LOC_SD) {
        assertTrue((info.flags & ApplicationInfo.FLAG_EXTERNAL_STORAGE) != 0);
        assertTrue(srcPath.startsWith(SECURE_CONTAINERS_PREFIX));
        assertTrue(publicSrcPath.startsWith(SECURE_CONTAINERS_PREFIX));
      }
 else {
      }
    }
  }
 catch (  NameNotFoundException e) {
    failStr("failed with exception : " + e);
  }
}
