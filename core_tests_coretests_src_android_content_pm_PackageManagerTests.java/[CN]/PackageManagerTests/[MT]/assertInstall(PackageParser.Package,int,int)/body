{
  try {
    String pkgName=pkg.packageName;
    ApplicationInfo info=getPm().getApplicationInfo(pkgName,0);
    assertNotNull(info);
    assertEquals(pkgName,info.packageName);
    File dataDir=Environment.getDataDirectory();
    String appInstallPath=new File(dataDir,"app").getPath();
    String drmInstallPath=new File(dataDir,"app-private").getPath();
    File srcDir=new File(info.sourceDir);
    String srcPath=srcDir.getParentFile().getParent();
    File publicSrcDir=new File(info.publicSourceDir);
    String publicSrcPath=publicSrcDir.getParentFile().getParent();
    long pkgLen=new File(info.sourceDir).length();
    String expectedLibPath=new File(new File(info.sourceDir).getParentFile(),"lib").getPath();
    int rLoc=getInstallLoc(flags,expInstallLocation,pkgLen);
    if (rLoc == INSTALL_LOC_INT) {
      if ((flags & PackageManager.INSTALL_FORWARD_LOCK) != 0) {
        assertTrue("The application should be installed forward locked",(info.privateFlags & ApplicationInfo.PRIVATE_FLAG_FORWARD_LOCK) != 0);
        assertStartsWith("The APK path should point to the ASEC",SECURE_CONTAINERS_PREFIX,srcPath);
        assertStartsWith("The public APK path should point to the ASEC",SECURE_CONTAINERS_PREFIX,publicSrcPath);
        assertStartsWith("The native library path should point to the ASEC",SECURE_CONTAINERS_PREFIX,info.nativeLibraryDir);
      }
 else {
        assertFalse((info.privateFlags & ApplicationInfo.PRIVATE_FLAG_FORWARD_LOCK) != 0);
        assertEquals(appInstallPath,srcPath);
        assertEquals(appInstallPath,publicSrcPath);
        assertStartsWith("Native library should point to shared lib directory",expectedLibPath,info.nativeLibraryDir);
        assertDirOwnerGroupPermsIfExists("Native library directory should be owned by system:system and 0755",Process.SYSTEM_UID,Process.SYSTEM_UID,S_IRWXU | S_IRGRP | S_IXGRP| S_IROTH| S_IXOTH,info.nativeLibraryDir);
      }
      assertFalse((info.flags & ApplicationInfo.FLAG_EXTERNAL_STORAGE) != 0);
      final File nativeLibDir=new File(info.nativeLibraryDir);
      if (nativeLibDir.exists()) {
        try {
          assertEquals("Native library dir should not be a symlink",info.nativeLibraryDir,nativeLibDir.getCanonicalPath());
        }
 catch (        IOException e) {
          fail("Can't read " + nativeLibDir.getPath());
        }
      }
    }
 else     if (rLoc == INSTALL_LOC_SD) {
      if ((flags & PackageManager.INSTALL_FORWARD_LOCK) != 0) {
        assertTrue("The application should be installed forward locked",(info.privateFlags & ApplicationInfo.PRIVATE_FLAG_FORWARD_LOCK) != 0);
      }
 else {
        assertFalse("The application should not be installed forward locked",(info.privateFlags & ApplicationInfo.PRIVATE_FLAG_FORWARD_LOCK) != 0);
      }
      assertTrue("Application flags (" + info.flags + ") should contain FLAG_EXTERNAL_STORAGE",(info.flags & ApplicationInfo.FLAG_EXTERNAL_STORAGE) != 0);
      assertStartsWith("The APK path should point to the ASEC",SECURE_CONTAINERS_PREFIX,srcPath);
      assertStartsWith("The public APK path should point to the ASEC",SECURE_CONTAINERS_PREFIX,publicSrcPath);
      assertStartsWith("The native library path should point to the ASEC",SECURE_CONTAINERS_PREFIX,info.nativeLibraryDir);
      final File nativeLibSymLink=new File(info.dataDir,"lib");
      assertTrue("Native library symlink should exist at " + nativeLibSymLink.getPath(),nativeLibSymLink.exists());
      try {
        assertEquals(nativeLibSymLink.getPath() + " should be a symlink to " + info.nativeLibraryDir,info.nativeLibraryDir,nativeLibSymLink.getCanonicalPath());
      }
 catch (      IOException e) {
        fail("Can't read " + nativeLibSymLink.getPath());
      }
    }
 else {
      fail("Install should have failed");
    }
  }
 catch (  NameNotFoundException e) {
    failStr("failed with exception : " + e);
  }
}
