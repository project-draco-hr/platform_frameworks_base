{
  setIconLocation(transX > 0);
  mFadeAnimator=ValueAnimator.ofFloat(mGearIcon.getAlpha(),1);
  mFadeAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    ValueAnimator animation){
      final float absTrans=Math.abs(transX);
      boolean pastGear=(fromLeft && transX <= notiThreshold) || (!fromLeft && absTrans <= notiThreshold);
      if (pastGear && !mSettingsFadedIn) {
        setGearAlpha((float)animation.getAnimatedValue());
      }
    }
  }
);
  mFadeAnimator.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationCancel(    Animator animation){
      super.onAnimationCancel(animation);
      mAnimating=false;
      mSettingsFadedIn=false;
    }
    @Override public void onAnimationStart(    Animator animation){
      super.onAnimationStart(animation);
      mAnimating=true;
    }
    @Override public void onAnimationEnd(    Animator animation){
      super.onAnimationEnd(animation);
      mAnimating=false;
      mSettingsFadedIn=true;
    }
  }
);
  mFadeAnimator.setInterpolator(Interpolators.ALPHA_IN);
  mFadeAnimator.setDuration(200);
  mFadeAnimator.start();
}
