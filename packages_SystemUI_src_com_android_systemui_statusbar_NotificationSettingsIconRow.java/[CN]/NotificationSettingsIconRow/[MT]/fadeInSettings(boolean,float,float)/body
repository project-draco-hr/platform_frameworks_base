{
  if (mDismissing || mAnimating) {
    return;
  }
  if (isIconLocationChange(transX)) {
    setGearAlpha(0f);
  }
  setIconLocation(transX > 0,false);
  mFadeAnimator=ValueAnimator.ofFloat(mGearIcon.getAlpha(),1);
  mFadeAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    ValueAnimator animation){
      final float absTrans=Math.abs(transX);
      boolean pastGear=(fromLeft && transX <= notiThreshold) || (!fromLeft && absTrans <= notiThreshold);
      if (pastGear && !mSettingsFadedIn) {
        setGearAlpha((float)animation.getAnimatedValue());
      }
    }
  }
);
  mFadeAnimator.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationStart(    Animator animation){
      mAnimating=true;
    }
    @Override public void onAnimationCancel(    Animator animation){
      mGearIcon.setAlpha(0f);
    }
    @Override public void onAnimationEnd(    Animator animation){
      mAnimating=false;
      mSettingsFadedIn=mGearIcon.getAlpha() == 1;
    }
  }
);
  mFadeAnimator.setInterpolator(Interpolators.ALPHA_IN);
  mFadeAnimator.setDuration(GEAR_ALPHA_ANIM_DURATION);
  mFadeAnimator.start();
}
