{
  final ArrayList<ImeSubtypeListItem> imList=new ArrayList<ImeSubtypeListItem>();
  final HashMap<InputMethodInfo,List<InputMethodSubtype>> immis=mImms.getExplicitlyOrImplicitlyEnabledInputMethodsAndSubtypeListLocked();
  if (immis == null || immis.size() == 0) {
    return Collections.emptyList();
  }
  mSortedImmis.clear();
  mSortedImmis.putAll(immis);
  for (  InputMethodInfo imi : mSortedImmis.keySet()) {
    if (imi == null)     continue;
    List<InputMethodSubtype> explicitlyOrImplicitlyEnabledSubtypeList=immis.get(imi);
    HashSet<String> enabledSubtypeSet=new HashSet<String>();
    for (    InputMethodSubtype subtype : explicitlyOrImplicitlyEnabledSubtypeList) {
      enabledSubtypeSet.add(String.valueOf(subtype.hashCode()));
    }
    final CharSequence imeLabel=imi.loadLabel(mPm);
    if (showSubtypes && enabledSubtypeSet.size() > 0) {
      final int subtypeCount=imi.getSubtypeCount();
      if (DEBUG) {
        Slog.v(TAG,"Add subtypes: " + subtypeCount + ", "+ imi.getId());
      }
      for (int j=0; j < subtypeCount; ++j) {
        final InputMethodSubtype subtype=imi.getSubtypeAt(j);
        final String subtypeHashCode=String.valueOf(subtype.hashCode());
        if (enabledSubtypeSet.contains(subtypeHashCode) && ((inputShown && !isScreenLocked) || !subtype.isAuxiliary())) {
          final CharSequence subtypeLabel=subtype.overridesImplicitlyEnabledSubtype() ? null : subtype.getDisplayName(mContext,imi.getPackageName(),imi.getServiceInfo().applicationInfo);
          imList.add(new ImeSubtypeListItem(imeLabel,subtypeLabel,imi,j,subtype.getLocale(),mSystemLocaleStr));
          enabledSubtypeSet.remove(subtypeHashCode);
        }
      }
    }
 else {
      imList.add(new ImeSubtypeListItem(imeLabel,null,imi,NOT_A_SUBTYPE_ID,null,mSystemLocaleStr));
    }
  }
  Collections.sort(imList);
  return imList;
}
