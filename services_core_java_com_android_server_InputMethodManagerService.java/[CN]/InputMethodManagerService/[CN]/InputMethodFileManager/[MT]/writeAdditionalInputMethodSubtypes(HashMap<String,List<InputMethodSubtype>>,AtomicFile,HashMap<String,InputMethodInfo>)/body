{
  final boolean isSetMethodMap=methodMap != null && methodMap.size() > 0;
  FileOutputStream fos=null;
  try {
    fos=subtypesFile.startWrite();
    final XmlSerializer out=new FastXmlSerializer();
    out.setOutput(fos,StandardCharsets.UTF_8.name());
    out.startDocument(null,true);
    out.setFeature("http://xmlpull.org/v1/doc/features.html#indent-output",true);
    out.startTag(null,NODE_SUBTYPES);
    for (    String imiId : allSubtypes.keySet()) {
      if (isSetMethodMap && !methodMap.containsKey(imiId)) {
        Slog.w(TAG,"IME uninstalled or not valid.: " + imiId);
        continue;
      }
      out.startTag(null,NODE_IMI);
      out.attribute(null,ATTR_ID,imiId);
      final List<InputMethodSubtype> subtypesList=allSubtypes.get(imiId);
      final int N=subtypesList.size();
      for (int i=0; i < N; ++i) {
        final InputMethodSubtype subtype=subtypesList.get(i);
        out.startTag(null,NODE_SUBTYPE);
        out.attribute(null,ATTR_ICON,String.valueOf(subtype.getIconResId()));
        out.attribute(null,ATTR_LABEL,String.valueOf(subtype.getNameResId()));
        out.attribute(null,ATTR_IME_SUBTYPE_LOCALE,subtype.getLocale());
        out.attribute(null,ATTR_IME_SUBTYPE_LANGUAGE_TAG,subtype.getLanguageTag());
        out.attribute(null,ATTR_IME_SUBTYPE_MODE,subtype.getMode());
        out.attribute(null,ATTR_IME_SUBTYPE_EXTRA_VALUE,subtype.getExtraValue());
        out.attribute(null,ATTR_IS_AUXILIARY,String.valueOf(subtype.isAuxiliary() ? 1 : 0));
        out.attribute(null,ATTR_IS_ASCII_CAPABLE,String.valueOf(subtype.isAsciiCapable() ? 1 : 0));
        out.endTag(null,NODE_SUBTYPE);
      }
      out.endTag(null,NODE_IMI);
    }
    out.endTag(null,NODE_SUBTYPES);
    out.endDocument();
    subtypesFile.finishWrite(fos);
  }
 catch (  java.io.IOException e) {
    Slog.w(TAG,"Error writing subtypes",e);
    if (fos != null) {
      subtypesFile.failWrite(fos);
    }
  }
}
