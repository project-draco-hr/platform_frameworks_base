{
  if (allSubtypes == null || subtypesFile == null)   return;
  allSubtypes.clear();
  try (final FileInputStream fis=subtypesFile.openRead()){
    final XmlPullParser parser=Xml.newPullParser();
    parser.setInput(fis,StandardCharsets.UTF_8.name());
    int type=parser.getEventType();
    while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
    }
    String firstNodeName=parser.getName();
    if (!NODE_SUBTYPES.equals(firstNodeName)) {
      throw new XmlPullParserException("Xml doesn't start with subtypes");
    }
    final int depth=parser.getDepth();
    String currentImiId=null;
    ArrayList<InputMethodSubtype> tempSubtypesArray=null;
    while (((type=parser.next()) != XmlPullParser.END_TAG || parser.getDepth() > depth) && type != XmlPullParser.END_DOCUMENT) {
      if (type != XmlPullParser.START_TAG)       continue;
      final String nodeName=parser.getName();
      if (NODE_IMI.equals(nodeName)) {
        currentImiId=parser.getAttributeValue(null,ATTR_ID);
        if (TextUtils.isEmpty(currentImiId)) {
          Slog.w(TAG,"Invalid imi id found in subtypes.xml");
          continue;
        }
        tempSubtypesArray=new ArrayList<>();
        allSubtypes.put(currentImiId,tempSubtypesArray);
      }
 else       if (NODE_SUBTYPE.equals(nodeName)) {
        if (TextUtils.isEmpty(currentImiId) || tempSubtypesArray == null) {
          Slog.w(TAG,"IME uninstalled or not valid.: " + currentImiId);
          continue;
        }
        final int icon=Integer.valueOf(parser.getAttributeValue(null,ATTR_ICON));
        final int label=Integer.valueOf(parser.getAttributeValue(null,ATTR_LABEL));
        final String imeSubtypeLocale=parser.getAttributeValue(null,ATTR_IME_SUBTYPE_LOCALE);
        final String imeSubtypeMode=parser.getAttributeValue(null,ATTR_IME_SUBTYPE_MODE);
        final String imeSubtypeExtraValue=parser.getAttributeValue(null,ATTR_IME_SUBTYPE_EXTRA_VALUE);
        final boolean isAuxiliary="1".equals(String.valueOf(parser.getAttributeValue(null,ATTR_IS_AUXILIARY)));
        final InputMethodSubtype subtype=new InputMethodSubtypeBuilder().setSubtypeNameResId(label).setSubtypeIconResId(icon).setSubtypeLocale(imeSubtypeLocale).setSubtypeMode(imeSubtypeMode).setSubtypeExtraValue(imeSubtypeExtraValue).setIsAuxiliary(isAuxiliary).build();
        tempSubtypesArray.add(subtype);
      }
    }
  }
 catch (  XmlPullParserException|IOException|NumberFormatException e) {
    Slog.w(TAG,"Error reading subtypes",e);
    return;
  }
}
