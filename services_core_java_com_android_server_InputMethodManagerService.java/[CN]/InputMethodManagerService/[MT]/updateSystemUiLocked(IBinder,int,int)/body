{
  if (!calledWithValidToken(token)) {
    final int uid=Binder.getCallingUid();
    Slog.e(TAG,"Ignoring updateSystemUiLocked due to an invalid token. uid:" + uid + " token:"+ token);
    return;
  }
  final long ident=Binder.clearCallingIdentity();
  try {
    if (vis != 0 && isKeyguardLocked() && !mCurClientInKeyguard) {
      vis=0;
    }
    final boolean needsToShowImeSwitcher=shouldShowImeSwitcherLocked(vis);
    if (mStatusBar != null) {
      mStatusBar.setImeWindowStatus(token,vis,backDisposition,needsToShowImeSwitcher);
    }
    final InputMethodInfo imi=mMethodMap.get(mCurMethodId);
    if (imi != null && needsToShowImeSwitcher) {
      final CharSequence title=mRes.getText(com.android.internal.R.string.select_input_method);
      final CharSequence summary=InputMethodUtils.getImeAndSubtypeDisplayName(mContext,imi,mCurrentSubtype);
      mImeSwitcherNotification.setContentTitle(title).setContentText(summary).setContentIntent(mImeSwitchPendingIntent);
      try {
        if ((mNotificationManager != null) && !mIWindowManager.hasNavigationBar()) {
          if (DEBUG) {
            Slog.d(TAG,"--- show notification: label =  " + summary);
          }
          mNotificationManager.notifyAsUser(null,com.android.internal.R.string.select_input_method,mImeSwitcherNotification.build(),UserHandle.ALL);
          mNotificationShown=true;
        }
      }
 catch (      RemoteException e) {
      }
    }
 else {
      if (mNotificationShown && mNotificationManager != null) {
        if (DEBUG) {
          Slog.d(TAG,"--- hide notification");
        }
        mNotificationManager.cancelAsUser(null,com.android.internal.R.string.select_input_method,UserHandle.ALL);
        mNotificationShown=false;
      }
    }
  }
  finally {
    Binder.restoreCallingIdentity(ident);
  }
}
