{
  final long ident=Binder.clearCallingIdentity();
  try {
    if (token == null || mCurToken != token) {
      int uid=Binder.getCallingUid();
      Slog.w(TAG,"Ignoring setImeWindowStatus of uid " + uid + " token: "+ token);
      return;
    }
synchronized (mMethodMap) {
      if (vis != 0 && isKeyguardLocked() && !mCurClientInKeyguard) {
        vis=0;
      }
      mImeWindowVis=vis;
      mBackDisposition=backDisposition;
      final boolean iconVisibility=((vis & (InputMethodService.IME_ACTIVE)) != 0) && (mWindowManagerService.isHardKeyboardAvailable() || (vis & (InputMethodService.IME_VISIBLE)) != 0);
      final boolean needsToShowImeSwitcher=iconVisibility && needsToShowImeSwitchOngoingNotification();
      if (mStatusBar != null) {
        mStatusBar.setImeWindowStatus(token,vis,backDisposition,needsToShowImeSwitcher);
      }
      final InputMethodInfo imi=mMethodMap.get(mCurMethodId);
      if (imi != null && needsToShowImeSwitcher) {
        final CharSequence title=mRes.getText(com.android.internal.R.string.select_input_method);
        final CharSequence summary=InputMethodUtils.getImeAndSubtypeDisplayName(mContext,imi,mCurrentSubtype);
        mImeSwitcherNotification.setLatestEventInfo(mContext,title,summary,mImeSwitchPendingIntent);
        if ((mNotificationManager != null) && !mWindowManagerService.hasNavigationBar()) {
          if (DEBUG) {
            Slog.d(TAG,"--- show notification: label =  " + summary);
          }
          mNotificationManager.notifyAsUser(null,com.android.internal.R.string.select_input_method,mImeSwitcherNotification,UserHandle.ALL);
          mNotificationShown=true;
        }
      }
 else {
        if (mNotificationShown && mNotificationManager != null) {
          if (DEBUG) {
            Slog.d(TAG,"--- hide notification");
          }
          mNotificationManager.cancelAsUser(null,com.android.internal.R.string.select_input_method,UserHandle.ALL);
          mNotificationShown=false;
        }
      }
    }
  }
  finally {
    Binder.restoreCallingIdentity(ident);
  }
}
