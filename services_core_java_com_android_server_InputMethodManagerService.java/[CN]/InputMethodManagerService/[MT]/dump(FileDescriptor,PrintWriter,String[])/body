{
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println("Permission Denial: can't dump InputMethodManager from from pid=" + Binder.getCallingPid() + ", uid="+ Binder.getCallingUid());
    return;
  }
  IInputMethod method;
  ClientState client;
  final Printer p=new PrintWriterPrinter(pw);
synchronized (mMethodMap) {
    p.println("Current Input Method Manager state:");
    int N=mMethodList.size();
    p.println("  Input Methods:");
    for (int i=0; i < N; i++) {
      InputMethodInfo info=mMethodList.get(i);
      p.println("  InputMethod #" + i + ":");
      info.dump(p,"    ");
    }
    p.println("  Clients:");
    for (    ClientState ci : mClients.values()) {
      p.println("  Client " + ci + ":");
      p.println("    client=" + ci.client);
      p.println("    inputContext=" + ci.inputContext);
      p.println("    sessionRequested=" + ci.sessionRequested);
      p.println("    curSession=" + ci.curSession);
    }
    p.println("  mCurMethodId=" + mCurMethodId);
    client=mCurClient;
    p.println("  mCurClient=" + client + " mCurSeq="+ mCurSeq);
    p.println("  mCurFocusedWindow=" + mCurFocusedWindow);
    p.println("  mCurId=" + mCurId + " mHaveConnect="+ mHaveConnection+ " mBoundToMethod="+ mBoundToMethod);
    p.println("  mCurToken=" + mCurToken);
    p.println("  mCurIntent=" + mCurIntent);
    method=mCurMethod;
    p.println("  mCurMethod=" + mCurMethod);
    p.println("  mEnabledSession=" + mEnabledSession);
    p.println("  mShowRequested=" + mShowRequested + " mShowExplicitlyRequested="+ mShowExplicitlyRequested+ " mShowForced="+ mShowForced+ " mInputShown="+ mInputShown);
    p.println("  mSystemReady=" + mSystemReady + " mInteractive="+ mScreenOn);
  }
  p.println(" ");
  if (client != null) {
    pw.flush();
    try {
      client.client.asBinder().dump(fd,args);
    }
 catch (    RemoteException e) {
      p.println("Input method client dead: " + e);
    }
  }
 else {
    p.println("No input method client.");
  }
  p.println(" ");
  if (method != null) {
    pw.flush();
    try {
      method.asBinder().dump(fd,args);
    }
 catch (    RemoteException e) {
      p.println("Input method service dead: " + e);
    }
  }
 else {
    p.println("No input method service.");
  }
}
