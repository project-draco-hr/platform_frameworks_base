{
  final boolean calledFromValidUser=calledFromValidUser();
  InputBindResult res=null;
  long ident=Binder.clearCallingIdentity();
  try {
synchronized (mMethodMap) {
      if (DEBUG)       Slog.v(TAG,"windowGainedFocus: reason=" + InputMethodClient.getStartInputReason(startInputReason) + " client="+ client.asBinder()+ " inputContext="+ inputContext+ " attribute="+ attribute+ " controlFlags=#"+ Integer.toHexString(controlFlags)+ " softInputMode=#"+ Integer.toHexString(softInputMode)+ " windowFlags=#"+ Integer.toHexString(windowFlags));
      ClientState cs=mClients.get(client.asBinder());
      if (cs == null) {
        throw new IllegalArgumentException("unknown client " + client.asBinder());
      }
      try {
        if (!mIWindowManager.inputMethodClientHasFocus(cs.client)) {
          Slog.w(TAG,"Focus gain on non-focused client " + cs.client + " (uid="+ cs.uid+ " pid="+ cs.pid+ ")");
          return null;
        }
      }
 catch (      RemoteException e) {
      }
      if (!calledFromValidUser) {
        Slog.w(TAG,"A background user is requesting window. Hiding IME.");
        Slog.w(TAG,"If you want to interect with IME, you need " + "android.permission.INTERACT_ACROSS_USERS_FULL");
        hideCurrentInputLocked(0,null);
        return null;
      }
      if (mCurFocusedWindow == windowToken) {
        Slog.w(TAG,"Window already focused, ignoring focus gain of: " + client + " attribute="+ attribute+ ", token = "+ windowToken);
        if (attribute != null) {
          return startInputUncheckedLocked(cs,inputContext,attribute,controlFlags);
        }
        return null;
      }
      mCurFocusedWindow=windowToken;
      mCurFocusedWindowClient=cs;
      final boolean doAutoShow=(softInputMode & WindowManager.LayoutParams.SOFT_INPUT_MASK_ADJUST) == WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE || mRes.getConfiguration().isLayoutSizeAtLeast(Configuration.SCREENLAYOUT_SIZE_LARGE);
      final boolean isTextEditor=(controlFlags & InputMethodManager.CONTROL_WINDOW_IS_TEXT_EDITOR) != 0;
      boolean didStart=false;
switch (softInputMode & WindowManager.LayoutParams.SOFT_INPUT_MASK_STATE) {
case WindowManager.LayoutParams.SOFT_INPUT_STATE_UNSPECIFIED:
        if (!isTextEditor || !doAutoShow) {
          if (WindowManager.LayoutParams.mayUseInputMethod(windowFlags)) {
            if (DEBUG)             Slog.v(TAG,"Unspecified window will hide input");
            hideCurrentInputLocked(InputMethodManager.HIDE_NOT_ALWAYS,null);
          }
        }
 else         if (isTextEditor && doAutoShow && (softInputMode & WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION) != 0) {
          if (DEBUG)           Slog.v(TAG,"Unspecified window will show input");
          if (attribute != null) {
            res=startInputUncheckedLocked(cs,inputContext,attribute,controlFlags);
            didStart=true;
          }
          showCurrentInputLocked(InputMethodManager.SHOW_IMPLICIT,null);
        }
      break;
case WindowManager.LayoutParams.SOFT_INPUT_STATE_UNCHANGED:
    break;
case WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN:
  if ((softInputMode & WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION) != 0) {
    if (DEBUG)     Slog.v(TAG,"Window asks to hide input going forward");
    hideCurrentInputLocked(0,null);
  }
break;
case WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN:
if (DEBUG) Slog.v(TAG,"Window asks to hide input");
hideCurrentInputLocked(0,null);
break;
case WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE:
if ((softInputMode & WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION) != 0) {
if (DEBUG) Slog.v(TAG,"Window asks to show input going forward");
if (attribute != null) {
res=startInputUncheckedLocked(cs,inputContext,attribute,controlFlags);
didStart=true;
}
showCurrentInputLocked(InputMethodManager.SHOW_IMPLICIT,null);
}
break;
case WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE:
if (DEBUG) Slog.v(TAG,"Window asks to always show input");
if (attribute != null) {
res=startInputUncheckedLocked(cs,inputContext,attribute,controlFlags);
didStart=true;
}
showCurrentInputLocked(InputMethodManager.SHOW_IMPLICIT,null);
break;
}
if (!didStart && attribute != null) {
res=startInputUncheckedLocked(cs,inputContext,attribute,controlFlags);
}
}
}
  finally {
Binder.restoreCallingIdentity(ident);
}
return res;
}
