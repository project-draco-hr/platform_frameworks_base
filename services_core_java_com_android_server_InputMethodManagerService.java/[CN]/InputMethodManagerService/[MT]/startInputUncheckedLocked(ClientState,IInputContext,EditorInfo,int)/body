{
  if (mCurMethodId == null) {
    return mNoBinding;
  }
  if (!InputMethodUtils.checkIfPackageBelongsToUid(mAppOpsManager,cs.uid,attribute.packageName)) {
    Slog.e(TAG,"Rejecting this client as it reported an invalid package name." + " uid=" + cs.uid + " package="+ attribute.packageName);
    return mNoBinding;
  }
  if (mCurClient != cs) {
    mCurClientInKeyguard=isKeyguardLocked();
    unbindCurrentClientLocked();
    if (DEBUG)     Slog.v(TAG,"switching to client: client = " + cs.client.asBinder() + " keyguard="+ mCurClientInKeyguard);
    if (mScreenOn) {
      executeOrSendMessage(cs.client,mCaller.obtainMessageIO(MSG_SET_ACTIVE,mScreenOn ? 1 : 0,cs));
    }
  }
  mCurSeq++;
  if (mCurSeq <= 0)   mCurSeq=1;
  mCurClient=cs;
  mCurInputContext=inputContext;
  mCurAttribute=attribute;
  if (mCurId != null && mCurId.equals(mCurMethodId)) {
    if (cs.curSession != null) {
      return attachNewInputLocked((controlFlags & InputMethodManager.CONTROL_START_INITIAL) != 0);
    }
    if (mHaveConnection) {
      if (mCurMethod != null) {
        requestClientSessionLocked(cs);
        return new InputBindResult(null,null,mCurId,mCurSeq,mCurUserActionNotificationSequenceNumber);
      }
 else       if (SystemClock.uptimeMillis() < (mLastBindTime + TIME_TO_RECONNECT)) {
        return new InputBindResult(null,null,mCurId,mCurSeq,mCurUserActionNotificationSequenceNumber);
      }
 else {
        EventLog.writeEvent(EventLogTags.IMF_FORCE_RECONNECT_IME,mCurMethodId,SystemClock.uptimeMillis() - mLastBindTime,0);
      }
    }
  }
  return startInputInnerLocked();
}
