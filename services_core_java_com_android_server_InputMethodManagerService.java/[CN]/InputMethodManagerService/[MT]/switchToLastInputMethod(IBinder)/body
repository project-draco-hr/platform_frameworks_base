{
  if (!calledFromValidUser()) {
    return false;
  }
synchronized (mMethodMap) {
    final Pair<String,String> lastIme=mSettings.getLastInputMethodAndSubtypeLocked();
    final InputMethodInfo lastImi;
    if (lastIme != null) {
      lastImi=mMethodMap.get(lastIme.first);
    }
 else {
      lastImi=null;
    }
    String targetLastImiId=null;
    int subtypeId=NOT_A_SUBTYPE_ID;
    if (lastIme != null && lastImi != null) {
      final boolean imiIdIsSame=lastImi.getId().equals(mCurMethodId);
      final int lastSubtypeHash=Integer.valueOf(lastIme.second);
      final int currentSubtypeHash=mCurrentSubtype == null ? NOT_A_SUBTYPE_ID : mCurrentSubtype.hashCode();
      if (!imiIdIsSame || lastSubtypeHash != currentSubtypeHash) {
        targetLastImiId=lastIme.first;
        subtypeId=InputMethodUtils.getSubtypeIdFromHashCode(lastImi,lastSubtypeHash);
      }
    }
    if (TextUtils.isEmpty(targetLastImiId) && !InputMethodUtils.canAddToLastInputMethod(mCurrentSubtype)) {
      final List<InputMethodInfo> enabled=mSettings.getEnabledInputMethodListLocked();
      if (enabled != null) {
        final int N=enabled.size();
        final String locale=mCurrentSubtype == null ? mRes.getConfiguration().locale.toString() : mCurrentSubtype.getLocale();
        for (int i=0; i < N; ++i) {
          final InputMethodInfo imi=enabled.get(i);
          if (imi.getSubtypeCount() > 0 && InputMethodUtils.isSystemIme(imi)) {
            InputMethodSubtype keyboardSubtype=InputMethodUtils.findLastResortApplicableSubtypeLocked(mRes,InputMethodUtils.getSubtypes(imi),InputMethodUtils.SUBTYPE_MODE_KEYBOARD,locale,true);
            if (keyboardSubtype != null) {
              targetLastImiId=imi.getId();
              subtypeId=InputMethodUtils.getSubtypeIdFromHashCode(imi,keyboardSubtype.hashCode());
              if (keyboardSubtype.getLocale().equals(locale)) {
                break;
              }
            }
          }
        }
      }
    }
    if (!TextUtils.isEmpty(targetLastImiId)) {
      if (DEBUG) {
        Slog.d(TAG,"Switch to: " + lastImi.getId() + ", "+ lastIme.second+ ", from: "+ mCurMethodId+ ", "+ subtypeId);
      }
      setInputMethodWithSubtypeIdLocked(token,targetLastImiId,subtypeId);
      return true;
    }
 else {
      return false;
    }
  }
}
