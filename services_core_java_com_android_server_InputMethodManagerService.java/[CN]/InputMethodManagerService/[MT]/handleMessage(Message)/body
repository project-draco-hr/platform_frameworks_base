{
  SomeArgs args;
switch (msg.what) {
case MSG_SHOW_IM_SUBTYPE_PICKER:
    showInputMethodMenu();
  return true;
case MSG_SHOW_IM_SUBTYPE_ENABLER:
args=(SomeArgs)msg.obj;
showInputMethodAndSubtypeEnabler((String)args.arg1);
args.recycle();
return true;
case MSG_SHOW_IM_CONFIG:
showConfigureInputMethods();
return true;
case MSG_UNBIND_INPUT:
try {
((IInputMethod)msg.obj).unbindInput();
}
 catch (RemoteException e) {
}
return true;
case MSG_BIND_INPUT:
args=(SomeArgs)msg.obj;
try {
((IInputMethod)args.arg1).bindInput((InputBinding)args.arg2);
}
 catch (RemoteException e) {
}
args.recycle();
return true;
case MSG_SHOW_SOFT_INPUT:
args=(SomeArgs)msg.obj;
try {
if (DEBUG) Slog.v(TAG,"Calling " + args.arg1 + ".showSoftInput("+ msg.arg1+ ", "+ args.arg2+ ")");
((IInputMethod)args.arg1).showSoftInput(msg.arg1,(ResultReceiver)args.arg2);
}
 catch (RemoteException e) {
}
args.recycle();
return true;
case MSG_HIDE_SOFT_INPUT:
args=(SomeArgs)msg.obj;
try {
if (DEBUG) Slog.v(TAG,"Calling " + args.arg1 + ".hideSoftInput(0, "+ args.arg2+ ")");
((IInputMethod)args.arg1).hideSoftInput(0,(ResultReceiver)args.arg2);
}
 catch (RemoteException e) {
}
args.recycle();
return true;
case MSG_ATTACH_TOKEN:
args=(SomeArgs)msg.obj;
try {
if (DEBUG) Slog.v(TAG,"Sending attach of token: " + args.arg2);
((IInputMethod)args.arg1).attachToken((IBinder)args.arg2);
}
 catch (RemoteException e) {
}
args.recycle();
return true;
case MSG_CREATE_SESSION:
{
args=(SomeArgs)msg.obj;
IInputMethod method=(IInputMethod)args.arg1;
InputChannel channel=(InputChannel)args.arg2;
try {
method.createSession(channel,(IInputSessionCallback)args.arg3);
}
 catch (RemoteException e) {
}
 finally {
if (channel != null && Binder.isProxy(method)) {
channel.dispose();
}
}
args.recycle();
return true;
}
case MSG_START_INPUT:
args=(SomeArgs)msg.obj;
try {
SessionState session=(SessionState)args.arg1;
setEnabledSessionInMainThread(session);
session.method.startInput((IInputContext)args.arg2,(EditorInfo)args.arg3);
}
 catch (RemoteException e) {
}
args.recycle();
return true;
case MSG_RESTART_INPUT:
args=(SomeArgs)msg.obj;
try {
SessionState session=(SessionState)args.arg1;
setEnabledSessionInMainThread(session);
session.method.restartInput((IInputContext)args.arg2,(EditorInfo)args.arg3);
}
 catch (RemoteException e) {
}
args.recycle();
return true;
case MSG_UNBIND_METHOD:
try {
((IInputMethodClient)msg.obj).onUnbindMethod(msg.arg1);
}
 catch (RemoteException e) {
}
return true;
case MSG_BIND_METHOD:
{
args=(SomeArgs)msg.obj;
IInputMethodClient client=(IInputMethodClient)args.arg1;
InputBindResult res=(InputBindResult)args.arg2;
try {
client.onBindMethod(res);
}
 catch (RemoteException e) {
Slog.w(TAG,"Client died receiving input method " + args.arg2);
}
 finally {
if (res.channel != null && Binder.isProxy(client)) {
res.channel.dispose();
}
}
args.recycle();
return true;
}
case MSG_SET_ACTIVE:
try {
((ClientState)msg.obj).client.setActive(msg.arg1 != 0);
}
 catch (RemoteException e) {
Slog.w(TAG,"Got RemoteException sending setActive(false) notification to pid " + ((ClientState)msg.obj).pid + " uid "+ ((ClientState)msg.obj).uid);
}
return true;
case MSG_SET_USER_ACTION_NOTIFICATION_SEQUENCE_NUMBER:
{
final int sequenceNumber=msg.arg1;
final ClientState clientState=(ClientState)msg.obj;
try {
clientState.client.setUserActionNotificationSequenceNumber(sequenceNumber);
}
 catch (RemoteException e) {
Slog.w(TAG,"Got RemoteException sending " + "setUserActionNotificationSequenceNumber(" + sequenceNumber + ") notification to pid "+ clientState.pid+ " uid "+ clientState.uid);
}
return true;
}
case MSG_HARD_KEYBOARD_SWITCH_CHANGED:
mHardKeyboardListener.handleHardKeyboardStatusChange(msg.arg1 == 1);
return true;
}
return false;
}
