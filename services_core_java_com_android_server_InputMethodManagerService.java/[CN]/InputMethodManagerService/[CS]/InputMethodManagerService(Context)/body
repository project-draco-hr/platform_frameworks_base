{
  mIPackageManager=AppGlobals.getPackageManager();
  mContext=context;
  mRes=context.getResources();
  mHandler=new Handler(this);
  mSettingsObserver=new SettingsObserver(mHandler);
  mIWindowManager=IWindowManager.Stub.asInterface(ServiceManager.getService(Context.WINDOW_SERVICE));
  mWindowManagerInternal=LocalServices.getService(WindowManagerInternal.class);
  mCaller=new HandlerCaller(context,null,new HandlerCaller.Callback(){
    @Override public void executeMessage(    Message msg){
      handleMessage(msg);
    }
  }
,true);
  mAppOpsManager=(AppOpsManager)mContext.getSystemService(Context.APP_OPS_SERVICE);
  mHardKeyboardListener=new HardKeyboardListener();
  mHasFeature=context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_INPUT_METHODS);
  mSlotIme=mContext.getString(com.android.internal.R.string.status_bar_ime);
  Bundle extras=new Bundle();
  extras.putBoolean(Notification.EXTRA_ALLOW_DURING_SETUP,true);
  mImeSwitcherNotification=new Notification.Builder(mContext).setSmallIcon(com.android.internal.R.drawable.ic_notification_ime_default).setWhen(0).setOngoing(true).addExtras(extras).setCategory(Notification.CATEGORY_SYSTEM).setColor(com.android.internal.R.color.system_notification_accent_color);
  Intent intent=new Intent(Settings.ACTION_SHOW_INPUT_METHOD_PICKER);
  mImeSwitchPendingIntent=PendingIntent.getBroadcast(mContext,0,intent,0);
  mShowOngoingImeSwitcherForPhones=false;
  final IntentFilter broadcastFilter=new IntentFilter();
  broadcastFilter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  broadcastFilter.addAction(Intent.ACTION_USER_ADDED);
  broadcastFilter.addAction(Intent.ACTION_USER_REMOVED);
  broadcastFilter.addAction(Intent.ACTION_SETTING_RESTORED);
  mContext.registerReceiver(new ImmsBroadcastReceiver(),broadcastFilter);
  mNotificationShown=false;
  int userId=0;
  try {
    ActivityManagerNative.getDefault().registerUserSwitchObserver(new SynchronousUserSwitchObserver(){
      @Override public void onUserSwitching(      int newUserId) throws RemoteException {
synchronized (mMethodMap) {
          switchUserLocked(newUserId);
        }
      }
      @Override public void onUserSwitchComplete(      int newUserId) throws RemoteException {
      }
      @Override public void onForegroundProfileSwitch(      int newProfileId){
      }
    }
);
    userId=ActivityManagerNative.getDefault().getCurrentUser().id;
  }
 catch (  RemoteException e) {
    Slog.w(TAG,"Couldn't get current user ID; guessing it's 0",e);
  }
  mMyPackageMonitor.register(mContext,null,UserHandle.ALL,true);
  mSettings=new InputMethodSettings(mRes,context.getContentResolver(),mMethodMap,mMethodList,userId);
  PackageManagerInternal packageManagerInternal=LocalServices.getService(PackageManagerInternal.class);
  packageManagerInternal.setImePackagesProvider(new PackageManagerInternal.PackagesProvider(){
    @Override public String[] getPackages(    int userId){
synchronized (mMethodMap) {
        final int currentUserId=mSettings.getCurrentUserId();
        mSettings.setCurrentUserId(userId);
        List<InputMethodInfo> imes=mSettings.getEnabledInputMethodListLocked();
        String[] packageNames=null;
        if (imes != null) {
          final int imeCount=imes.size();
          packageNames=new String[imeCount];
          for (int i=0; i < imeCount; i++) {
            InputMethodInfo ime=imes.get(i);
            packageNames[i]=ime.getPackageName();
          }
        }
        mSettings.setCurrentUserId(currentUserId);
        return packageNames;
      }
    }
  }
);
  updateCurrentProfileIds();
  mFileManager=new InputMethodFileManager(mMethodMap,userId);
synchronized (mMethodMap) {
    mSwitchingController=InputMethodSubtypeSwitchingController.createInstanceLocked(mSettings,context);
  }
  final String defaultImiId=mSettings.getSelectedInputMethod();
  if (DEBUG) {
    Slog.d(TAG,"Initial default ime = " + defaultImiId);
  }
  mImeSelectedOnBoot=!TextUtils.isEmpty(defaultImiId);
synchronized (mMethodMap) {
    buildInputMethodListLocked(mMethodList,mMethodMap,!mImeSelectedOnBoot);
  }
  mSettings.enableAllIMEsIfThereIsNoEnabledIME();
  if (!mImeSelectedOnBoot) {
    Slog.w(TAG,"No IME selected. Choose the most applicable IME.");
synchronized (mMethodMap) {
      resetDefaultImeLocked(context);
    }
  }
synchronized (mMethodMap) {
    mSettingsObserver.registerContentObserverLocked(userId);
    updateFromSettingsLocked(true);
  }
  final IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_LOCALE_CHANGED);
  mContext.registerReceiver(new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
synchronized (mMethodMap) {
        resetStateIfCurrentLocaleChangedLocked();
      }
    }
  }
,filter);
}
