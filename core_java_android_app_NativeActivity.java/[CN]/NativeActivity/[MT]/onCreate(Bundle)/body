{
  String libname="main";
  String funcname="ANativeActivity_onCreate";
  ActivityInfo ai;
  mIMM=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
  getWindow().takeSurface(this);
  getWindow().takeInputQueue(this);
  getWindow().setFormat(PixelFormat.RGB_565);
  getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_UNSPECIFIED | WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
  mNativeContentView=new NativeContentView(this);
  mNativeContentView.mActivity=this;
  setContentView(mNativeContentView);
  mNativeContentView.requestFocus();
  mNativeContentView.getViewTreeObserver().addOnGlobalLayoutListener(this);
  try {
    ai=getPackageManager().getActivityInfo(getIntent().getComponent(),PackageManager.GET_META_DATA);
    if (ai.metaData != null) {
      String ln=ai.metaData.getString(META_DATA_LIB_NAME);
      if (ln != null)       libname=ln;
      ln=ai.metaData.getString(META_DATA_FUNC_NAME);
      if (ln != null)       funcname=ln;
    }
  }
 catch (  PackageManager.NameNotFoundException e) {
    throw new RuntimeException("Error getting activity info",e);
  }
  String path=null;
  File libraryFile=new File(ai.applicationInfo.nativeLibraryDir,System.mapLibraryName(libname));
  if (libraryFile.exists()) {
    path=libraryFile.getPath();
  }
  if (path == null) {
    throw new IllegalArgumentException("Unable to find native library: " + libname);
  }
  byte[] nativeSavedState=savedInstanceState != null ? savedInstanceState.getByteArray(KEY_NATIVE_SAVED_STATE) : null;
  mNativeHandle=loadNativeCode(path,funcname,Looper.myQueue(),getFilesDir().toString(),getObbDir().toString(),Environment.getExternalStorageAppFilesDirectory(ai.packageName).toString(),Build.VERSION.SDK_INT,getAssets(),nativeSavedState);
  if (mNativeHandle == 0) {
    throw new IllegalArgumentException("Unable to load native library: " + path);
  }
  super.onCreate(savedInstanceState);
}
