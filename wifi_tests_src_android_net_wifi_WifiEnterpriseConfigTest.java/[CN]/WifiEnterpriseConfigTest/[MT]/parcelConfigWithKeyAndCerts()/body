{
  WifiEnterpriseConfig enterpriseConfig=new WifiEnterpriseConfig();
  PrivateKey clientKey=FakeKeys.RSA_KEY1;
  X509Certificate clientCert=FakeKeys.CLIENT_CERT;
  X509Certificate[] caCerts=new X509Certificate[]{FakeKeys.CA_CERT0,FakeKeys.CA_CERT1};
  enterpriseConfig.setClientKeyEntry(clientKey,clientCert);
  enterpriseConfig.setCaCertificates(caCerts);
  Parcel parcel=Parcel.obtain();
  enterpriseConfig.writeToParcel(parcel,0);
  parcel.setDataPosition(0);
  mEnterpriseConfig=WifiEnterpriseConfig.CREATOR.createFromParcel(parcel);
  PrivateKey actualClientKey=mEnterpriseConfig.getClientPrivateKey();
  X509Certificate actualClientCert=mEnterpriseConfig.getClientCertificate();
  X509Certificate[] actualCaCerts=mEnterpriseConfig.getCaCertificates();
  assertNotNull(actualClientKey);
  assertEquals(clientKey.getAlgorithm(),actualClientKey.getAlgorithm());
  assertArrayEquals(clientKey.getEncoded(),actualClientKey.getEncoded());
  assertNotNull(actualClientCert);
  assertArrayEquals(clientCert.getEncoded(),actualClientCert.getEncoded());
  assertNotNull(actualCaCerts);
  assertEquals(caCerts.length,actualCaCerts.length);
  for (int i=0; i < caCerts.length; i++) {
    assertNotNull(actualCaCerts[i]);
    assertArrayEquals(caCerts[i].getEncoded(),actualCaCerts[i].getEncoded());
  }
}
