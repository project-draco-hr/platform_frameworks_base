{
  if (mConversionMethods == null) {
    mConversionMethods=new ArrayList<>();
    for (    String key : mConversions.keySet()) {
      Class<?> fromType=classAnalyzer.findClass(key);
      HashMap<String,MethodDescription> conversion=mConversions.get(key);
      for (      String toName : conversion.keySet()) {
        Class<?> toType=classAnalyzer.findClass(toName);
        MethodDescription methodDescription=conversion.get(toName);
        mConversionMethods.add(new ConversionMethod(fromType,toType,methodDescription));
      }
    }
    mAdaptedMethods=new HashMap<>();
    for (    String attribute : mAdapters.keySet()) {
      ArrayList<AdaptedMethod> adaptedMethods=new ArrayList<>();
      mAdaptedMethods.put(attribute,adaptedMethods);
      HashMap<AccessorKey,MethodDescription> adapted=mAdapters.get(attribute);
      for (      AccessorKey key : adapted.keySet()) {
        MethodDescription methodDescription=adapted.get(key);
        Class<?> viewType=classAnalyzer.findClass(key.viewType);
        Class<?> valueType=classAnalyzer.findClass(key.valueType);
        adaptedMethods.add(new AdaptedMethod(viewType,valueType,methodDescription));
      }
    }
    mRenamedMethods=new HashMap<>();
    for (    String attribute : mRenamed.keySet()) {
      ArrayList<RenamedMethod> renamedMethods=new ArrayList<>();
      mRenamedMethods.put(attribute,renamedMethods);
      HashMap<String,MethodDescription> renamed=mRenamed.get(attribute);
      for (      String declaredClassName : renamed.keySet()) {
        MethodDescription methodDescription=renamed.get(declaredClassName);
        Class<?> viewType=classAnalyzer.findClass(declaredClassName);
        renamedMethods.add(new RenamedMethod(viewType,methodDescription.method));
      }
    }
  }
}
