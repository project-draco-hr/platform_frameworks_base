{
  pw.println("Run time Stats:");
  DumpUtils.dumpSingleTime(pw,"  ",mMemFactorDurations,mMemFactor,mStartTime,now);
  pw.println();
  pw.println("Memory usage:");
  TotalMemoryUseCollection totalMem=new TotalMemoryUseCollection(ALL_SCREEN_ADJ,ALL_MEM_ADJ);
  computeTotalMemoryUse(totalMem,now);
  long totalPss=0;
  totalPss=printMemoryCategory(pw,"  ","Kernel ",totalMem.sysMemKernelWeight,totalMem.totalTime,totalPss,totalMem.sysMemSamples);
  totalPss=printMemoryCategory(pw,"  ","Native ",totalMem.sysMemNativeWeight,totalMem.totalTime,totalPss,totalMem.sysMemSamples);
  for (int i=0; i < STATE_COUNT; i++) {
    if (i != STATE_SERVICE_RESTARTING) {
      totalPss=printMemoryCategory(pw,"  ",DumpUtils.STATE_NAMES[i],totalMem.processStateWeight[i],totalMem.totalTime,totalPss,totalMem.processStateSamples[i]);
    }
  }
  totalPss=printMemoryCategory(pw,"  ","Cached ",totalMem.sysMemCachedWeight,totalMem.totalTime,totalPss,totalMem.sysMemSamples);
  totalPss=printMemoryCategory(pw,"  ","Free   ",totalMem.sysMemFreeWeight,totalMem.totalTime,totalPss,totalMem.sysMemSamples);
  totalPss=printMemoryCategory(pw,"  ","Z-Ram  ",totalMem.sysMemZRamWeight,totalMem.totalTime,totalPss,totalMem.sysMemSamples);
  pw.print("  TOTAL  : ");
  DebugUtils.printSizeValue(pw,totalPss);
  pw.println();
  printMemoryCategory(pw,"  ",DumpUtils.STATE_NAMES[STATE_SERVICE_RESTARTING],totalMem.processStateWeight[STATE_SERVICE_RESTARTING],totalMem.totalTime,totalPss,totalMem.processStateSamples[STATE_SERVICE_RESTARTING]);
  pw.println();
  pw.print("          Start time: ");
  pw.print(DateFormat.format("yyyy-MM-dd HH:mm:ss",mTimePeriodStartClock));
  pw.println();
  pw.print("  Total elapsed time: ");
  TimeUtils.formatDuration((mRunning ? SystemClock.elapsedRealtime() : mTimePeriodEndRealtime) - mTimePeriodStartRealtime,pw);
  boolean partial=true;
  if ((mFlags & FLAG_SHUTDOWN) != 0) {
    pw.print(" (shutdown)");
    partial=false;
  }
  if ((mFlags & FLAG_SYSPROPS) != 0) {
    pw.print(" (sysprops)");
    partial=false;
  }
  if ((mFlags & FLAG_COMPLETE) != 0) {
    pw.print(" (complete)");
    partial=false;
  }
  if (partial) {
    pw.print(" (partial)");
  }
  pw.print(' ');
  pw.print(mRuntime);
  pw.println();
}
