{
  SceneManager sceneManager=SceneManager.getInstance();
  mRS=SceneManager.getRS();
  mRes=SceneManager.getRes();
  long start=System.currentTimeMillis();
  mTransformRSData=mRootTransforms.getRSData();
  long end=System.currentTimeMillis();
  Log.v(TIMER_TAG,"Transform init time: " + (end - start));
  start=System.currentTimeMillis();
  sceneManager.mRenderLoop.bind_gRootNode(mTransformRSData);
  end=System.currentTimeMillis();
  Log.v(TIMER_TAG,"Script init time: " + (end - start));
  start=System.currentTimeMillis();
  addDrawables(mRS,mRes,sceneManager);
  end=System.currentTimeMillis();
  Log.v(TIMER_TAG,"Renderable init time: " + (end - start));
  addShaders(mRS,mRes,sceneManager);
  Allocation opaqueBuffer=null;
  if (mRenderables.size() > 0) {
    opaqueBuffer=Allocation.createSized(mRS,Element.U32(mRS),mRenderables.size());
  }
  Allocation transparentBuffer=null;
  if (mRenderables.size() > 0) {
    transparentBuffer=Allocation.createSized(mRS,Element.U32(mRS),mRenderables.size());
  }
  sceneManager.mRenderLoop.bind_gFrontToBack(opaqueBuffer);
  sceneManager.mRenderLoop.bind_gBackToFront(transparentBuffer);
  if (mCameras.size() > 0) {
    Allocation cameraData;
    cameraData=Allocation.createSized(mRS,Element.ALLOCATION(mRS),mCameras.size());
    Allocation[] cameraAllocs=new Allocation[mCameras.size()];
    for (int i=0; i < mCameras.size(); i++) {
      cameraAllocs[i]=mCameras.get(i).getRSData().getAllocation();
    }
    cameraData.copyFrom(cameraAllocs);
    sceneManager.mRenderLoop.set_gCameras(cameraData);
  }
  if (mLights.size() > 0) {
    Allocation lightData=Allocation.createSized(mRS,Element.ALLOCATION(mRS),mLights.size());
    Allocation[] lightAllocs=new Allocation[mLights.size()];
    for (int i=0; i < mLights.size(); i++) {
      lightAllocs[i]=mLights.get(i).getRSData().getAllocation();
    }
    lightData.copyFrom(lightAllocs);
    sceneManager.mRenderLoop.set_gLights(lightData);
  }
}
