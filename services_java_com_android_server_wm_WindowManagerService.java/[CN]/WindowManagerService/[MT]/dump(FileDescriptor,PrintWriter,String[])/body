{
  if (mContext.checkCallingOrSelfPermission("android.permission.DUMP") != PackageManager.PERMISSION_GRANTED) {
    pw.println("Permission Denial: can't dump WindowManager from from pid=" + Binder.getCallingPid() + ", uid="+ Binder.getCallingUid());
    return;
  }
  boolean dumpAll=false;
  int opti=0;
  while (opti < args.length) {
    String opt=args[opti];
    if (opt == null || opt.length() <= 0 || opt.charAt(0) != '-') {
      break;
    }
    opti++;
    if ("-a".equals(opt)) {
      dumpAll=true;
    }
 else     if ("-h".equals(opt)) {
      pw.println("Window manager dump options:");
      pw.println("  [-a] [-h] [cmd] ...");
      pw.println("  cmd may be one of:");
      pw.println("    l[astanr]: last ANR information");
      pw.println("    p[policy]: policy state");
      pw.println("    s[essions]: active sessions");
      pw.println("    t[okens]: token list");
      pw.println("    w[indows]: window list");
      pw.println("  cmd may also be a NAME to dump windows.  NAME may");
      pw.println("    be a partial substring in a window name, a");
      pw.println("    Window hex object identifier, or");
      pw.println("    \"all\" for all windows, or");
      pw.println("    \"visible\" for the visible windows.");
      pw.println("  -a: include all available server state.");
      return;
    }
 else {
      pw.println("Unknown argument: " + opt + "; use -h for help");
    }
  }
  if (opti < args.length) {
    String cmd=args[opti];
    opti++;
    if ("lastanr".equals(cmd) || "l".equals(cmd)) {
synchronized (mWindowMap) {
        dumpLastANRLocked(pw);
      }
      return;
    }
 else     if ("policy".equals(cmd) || "p".equals(cmd)) {
synchronized (mWindowMap) {
        dumpPolicyLocked(pw,args,true);
      }
      return;
    }
 else     if ("sessions".equals(cmd) || "s".equals(cmd)) {
synchronized (mWindowMap) {
        dumpSessionsLocked(pw,true);
      }
      return;
    }
 else     if ("tokens".equals(cmd) || "t".equals(cmd)) {
synchronized (mWindowMap) {
        dumpTokensLocked(pw,true);
      }
      return;
    }
 else     if ("windows".equals(cmd) || "w".equals(cmd)) {
synchronized (mWindowMap) {
        dumpWindowsLocked(pw,true,null);
      }
      return;
    }
 else     if ("all".equals(cmd) || "a".equals(cmd)) {
synchronized (mWindowMap) {
        dumpWindowsLocked(pw,true,null);
      }
      return;
    }
 else {
      if (!dumpWindows(pw,cmd,args,opti,dumpAll)) {
        pw.println("Bad window command, or no windows match: " + cmd);
        pw.println("Use -h for help.");
      }
      return;
    }
  }
synchronized (mWindowMap) {
    if (dumpAll) {
      pw.println("-------------------------------------------------------------------------------");
    }
    dumpPolicyLocked(pw,args,dumpAll);
    pw.println();
    if (dumpAll) {
      pw.println("-------------------------------------------------------------------------------");
    }
    dumpSessionsLocked(pw,dumpAll);
    pw.println();
    if (dumpAll) {
      pw.println("-------------------------------------------------------------------------------");
    }
    dumpTokensLocked(pw,dumpAll);
    pw.println();
    if (dumpAll) {
      pw.println("-------------------------------------------------------------------------------");
    }
    dumpWindowsLocked(pw,dumpAll,null);
    pw.println();
    if (dumpAll) {
      pw.println("-------------------------------------------------------------------------------");
    }
    dumpLastANRLocked(pw);
  }
}
