{
  if (mContext.checkCallingOrSelfPermission("android.permission.DUMP") != PackageManager.PERMISSION_GRANTED) {
    pw.println("Permission Denial: can't dump WindowManager from from pid=" + Binder.getCallingPid() + ", uid="+ Binder.getCallingUid());
    return;
  }
  mInputManager.dump(pw);
  pw.println(" ");
synchronized (mWindowMap) {
    pw.println("Current Window Manager state:");
    for (int i=mWindows.size() - 1; i >= 0; i--) {
      WindowState w=mWindows.get(i);
      pw.print("  Window #");
      pw.print(i);
      pw.print(' ');
      pw.print(w);
      pw.println(":");
      w.dump(pw,"    ");
    }
    if (mInputMethodDialogs.size() > 0) {
      pw.println(" ");
      pw.println("  Input method dialogs:");
      for (int i=mInputMethodDialogs.size() - 1; i >= 0; i--) {
        WindowState w=mInputMethodDialogs.get(i);
        pw.print("  IM Dialog #");
        pw.print(i);
        pw.print(": ");
        pw.println(w);
      }
    }
    if (mPendingRemove.size() > 0) {
      pw.println(" ");
      pw.println("  Remove pending for:");
      for (int i=mPendingRemove.size() - 1; i >= 0; i--) {
        WindowState w=mPendingRemove.get(i);
        pw.print("  Remove #");
        pw.print(i);
        pw.print(' ');
        pw.print(w);
        pw.println(":");
        w.dump(pw,"    ");
      }
    }
    if (mForceRemoves != null && mForceRemoves.size() > 0) {
      pw.println(" ");
      pw.println("  Windows force removing:");
      for (int i=mForceRemoves.size() - 1; i >= 0; i--) {
        WindowState w=mForceRemoves.get(i);
        pw.print("  Removing #");
        pw.print(i);
        pw.print(' ');
        pw.print(w);
        pw.println(":");
        w.dump(pw,"    ");
      }
    }
    if (mDestroySurface.size() > 0) {
      pw.println(" ");
      pw.println("  Windows waiting to destroy their surface:");
      for (int i=mDestroySurface.size() - 1; i >= 0; i--) {
        WindowState w=mDestroySurface.get(i);
        pw.print("  Destroy #");
        pw.print(i);
        pw.print(' ');
        pw.print(w);
        pw.println(":");
        w.dump(pw,"    ");
      }
    }
    if (mLosingFocus.size() > 0) {
      pw.println(" ");
      pw.println("  Windows losing focus:");
      for (int i=mLosingFocus.size() - 1; i >= 0; i--) {
        WindowState w=mLosingFocus.get(i);
        pw.print("  Losing #");
        pw.print(i);
        pw.print(' ');
        pw.print(w);
        pw.println(":");
        w.dump(pw,"    ");
      }
    }
    if (mResizingWindows.size() > 0) {
      pw.println(" ");
      pw.println("  Windows waiting to resize:");
      for (int i=mResizingWindows.size() - 1; i >= 0; i--) {
        WindowState w=mResizingWindows.get(i);
        pw.print("  Resizing #");
        pw.print(i);
        pw.print(' ');
        pw.print(w);
        pw.println(":");
        w.dump(pw,"    ");
      }
    }
    if (mSessions.size() > 0) {
      pw.println(" ");
      pw.println("  All active sessions:");
      Iterator<Session> it=mSessions.iterator();
      while (it.hasNext()) {
        Session s=it.next();
        pw.print("  Session ");
        pw.print(s);
        pw.println(':');
        s.dump(pw,"    ");
      }
    }
    if (mTokenMap.size() > 0) {
      pw.println(" ");
      pw.println("  All tokens:");
      Iterator<WindowToken> it=mTokenMap.values().iterator();
      while (it.hasNext()) {
        WindowToken token=it.next();
        pw.print("  Token ");
        pw.print(token.token);
        pw.println(':');
        token.dump(pw,"    ");
      }
    }
    if (mWallpaperTokens.size() > 0) {
      pw.println(" ");
      pw.println("  Wallpaper tokens:");
      for (int i=mWallpaperTokens.size() - 1; i >= 0; i--) {
        WindowToken token=mWallpaperTokens.get(i);
        pw.print("  Wallpaper #");
        pw.print(i);
        pw.print(' ');
        pw.print(token);
        pw.println(':');
        token.dump(pw,"    ");
      }
    }
    if (mAppTokens.size() > 0) {
      pw.println(" ");
      pw.println("  Application tokens in Z order:");
      for (int i=mAppTokens.size() - 1; i >= 0; i--) {
        pw.print("  App #");
        pw.print(i);
        pw.print(": ");
        pw.println(mAppTokens.get(i));
      }
    }
    if (mFinishedStarting.size() > 0) {
      pw.println(" ");
      pw.println("  Finishing start of application tokens:");
      for (int i=mFinishedStarting.size() - 1; i >= 0; i--) {
        WindowToken token=mFinishedStarting.get(i);
        pw.print("  Finished Starting #");
        pw.print(i);
        pw.print(' ');
        pw.print(token);
        pw.println(':');
        token.dump(pw,"    ");
      }
    }
    if (mExitingTokens.size() > 0) {
      pw.println(" ");
      pw.println("  Exiting tokens:");
      for (int i=mExitingTokens.size() - 1; i >= 0; i--) {
        WindowToken token=mExitingTokens.get(i);
        pw.print("  Exiting #");
        pw.print(i);
        pw.print(' ');
        pw.print(token);
        pw.println(':');
        token.dump(pw,"    ");
      }
    }
    if (mExitingAppTokens.size() > 0) {
      pw.println(" ");
      pw.println("  Exiting application tokens:");
      for (int i=mExitingAppTokens.size() - 1; i >= 0; i--) {
        WindowToken token=mExitingAppTokens.get(i);
        pw.print("  Exiting App #");
        pw.print(i);
        pw.print(' ');
        pw.print(token);
        pw.println(':');
        token.dump(pw,"    ");
      }
    }
    pw.println(" ");
    pw.print("  mCurrentFocus=");
    pw.println(mCurrentFocus);
    pw.print("  mLastFocus=");
    pw.println(mLastFocus);
    pw.print("  mFocusedApp=");
    pw.println(mFocusedApp);
    pw.print("  mInputMethodTarget=");
    pw.println(mInputMethodTarget);
    pw.print("  mInputMethodWindow=");
    pw.println(mInputMethodWindow);
    pw.print("  mWallpaperTarget=");
    pw.println(mWallpaperTarget);
    if (mLowerWallpaperTarget != null && mUpperWallpaperTarget != null) {
      pw.print("  mLowerWallpaperTarget=");
      pw.println(mLowerWallpaperTarget);
      pw.print("  mUpperWallpaperTarget=");
      pw.println(mUpperWallpaperTarget);
    }
    if (mWindowDetachedWallpaper != null) {
      pw.print("  mWindowDetachedWallpaper=");
      pw.println(mWindowDetachedWallpaper);
    }
    if (mWindowAnimationBackgroundSurface != null) {
      pw.println("  mWindowAnimationBackgroundSurface:");
      mWindowAnimationBackgroundSurface.printTo("    ",pw);
    }
    pw.print("  mCurConfiguration=");
    pw.println(this.mCurConfiguration);
    pw.print("  mInTouchMode=");
    pw.print(mInTouchMode);
    pw.print(" mLayoutSeq=");
    pw.println(mLayoutSeq);
    pw.print("  mSystemBooted=");
    pw.print(mSystemBooted);
    pw.print(" mDisplayEnabled=");
    pw.println(mDisplayEnabled);
    pw.print("  mLayoutNeeded=");
    pw.print(mLayoutNeeded);
    pw.print(" mBlurShown=");
    pw.println(mBlurShown);
    if (mDimAnimator != null) {
      pw.println("  mDimAnimator:");
      mDimAnimator.printTo("    ",pw);
    }
 else {
      pw.println("  no DimAnimator ");
    }
    pw.print("  mInputMethodAnimLayerAdjustment=");
    pw.print(mInputMethodAnimLayerAdjustment);
    pw.print("  mWallpaperAnimLayerAdjustment=");
    pw.println(mWallpaperAnimLayerAdjustment);
    pw.print("  mLastWallpaperX=");
    pw.print(mLastWallpaperX);
    pw.print(" mLastWallpaperY=");
    pw.println(mLastWallpaperY);
    pw.print("  mDisplayFrozen=");
    pw.print(mDisplayFrozen);
    pw.print(" mWindowsFreezingScreen=");
    pw.print(mWindowsFreezingScreen);
    pw.print(" mAppsFreezingScreen=");
    pw.print(mAppsFreezingScreen);
    pw.print(" mWaitingForConfig=");
    pw.println(mWaitingForConfig);
    pw.print("  mRotation=");
    pw.print(mRotation);
    pw.print(", mForcedAppOrientation=");
    pw.print(mForcedAppOrientation);
    pw.print(", mRequestedRotation=");
    pw.println(mRequestedRotation);
    pw.print("  mDeferredRotation=");
    pw.print(mDeferredRotation);
    pw.print(", mDeferredRotationAnimFlags=");
    pw.print(mDeferredRotationAnimFlags);
    pw.print("  mAnimationPending=");
    pw.print(mAnimationPending);
    pw.print(" mWindowAnimationScale=");
    pw.print(mWindowAnimationScale);
    pw.print(" mTransitionWindowAnimationScale=");
    pw.println(mTransitionAnimationScale);
    pw.print("  mNextAppTransition=0x");
    pw.print(Integer.toHexString(mNextAppTransition));
    pw.print(", mAppTransitionReady=");
    pw.print(mAppTransitionReady);
    pw.print(", mAppTransitionRunning=");
    pw.print(mAppTransitionRunning);
    pw.print(", mAppTransitionTimeout=");
    pw.println(mAppTransitionTimeout);
    if (mNextAppTransitionPackage != null) {
      pw.print("  mNextAppTransitionPackage=");
      pw.print(mNextAppTransitionPackage);
      pw.print(", mNextAppTransitionEnter=0x");
      pw.print(Integer.toHexString(mNextAppTransitionEnter));
      pw.print(", mNextAppTransitionExit=0x");
      pw.print(Integer.toHexString(mNextAppTransitionExit));
    }
    pw.print("  mStartingIconInTransition=");
    pw.print(mStartingIconInTransition);
    pw.print(", mSkipAppTransitionAnimation=");
    pw.println(mSkipAppTransitionAnimation);
    if (mOpeningApps.size() > 0) {
      pw.print("  mOpeningApps=");
      pw.println(mOpeningApps);
    }
    if (mClosingApps.size() > 0) {
      pw.print("  mClosingApps=");
      pw.println(mClosingApps);
    }
    if (mToTopApps.size() > 0) {
      pw.print("  mToTopApps=");
      pw.println(mToTopApps);
    }
    if (mToBottomApps.size() > 0) {
      pw.print("  mToBottomApps=");
      pw.println(mToBottomApps);
    }
    if (mDisplay != null) {
      pw.print("  DisplayWidth=");
      pw.print(mDisplay.getWidth());
      pw.print(" DisplayHeight=");
      pw.println(mDisplay.getHeight());
    }
 else {
      pw.println("  NO DISPLAY");
    }
    pw.println("  Policy:");
    mPolicy.dump("    ",fd,pw,args);
  }
}
