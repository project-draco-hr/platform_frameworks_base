{
  if (!checkCallingPermission(android.Manifest.permission.MANAGE_APP_TOKENS,"setAppStartingWindow()")) {
    throw new SecurityException("Requires MANAGE_APP_TOKENS permission");
  }
synchronized (mWindowMap) {
    if (DEBUG_STARTING_WINDOW)     Slog.v(TAG,"setAppStartingIcon: token=" + token + " pkg="+ pkg+ " transferFrom="+ transferFrom);
    AppWindowToken wtoken=findAppWindowToken(token);
    if (wtoken == null) {
      Slog.w(TAG,"Attempted to set icon of non-existing app token: " + token);
      return;
    }
    if (!okToDisplay()) {
      return;
    }
    if (wtoken.startingData != null) {
      return;
    }
    if (transferFrom != null) {
      AppWindowToken ttoken=findAppWindowToken(transferFrom);
      if (ttoken != null) {
        WindowState startingWindow=ttoken.startingWindow;
        if (startingWindow != null) {
          if (mStartingIconInTransition) {
            mSkipAppTransitionAnimation=true;
          }
          if (DEBUG_STARTING_WINDOW)           Slog.v(TAG,"Moving existing starting from " + ttoken + " to "+ wtoken);
          final long origId=Binder.clearCallingIdentity();
          wtoken.startingData=ttoken.startingData;
          wtoken.startingView=ttoken.startingView;
          wtoken.startingDisplayed=ttoken.startingDisplayed;
          wtoken.startingWindow=startingWindow;
          wtoken.reportedVisible=ttoken.reportedVisible;
          ttoken.startingData=null;
          ttoken.startingView=null;
          ttoken.startingWindow=null;
          ttoken.startingMoved=true;
          startingWindow.mToken=wtoken;
          startingWindow.mRootToken=wtoken;
          startingWindow.mAppToken=wtoken;
          if (DEBUG_WINDOW_MOVEMENT || DEBUG_ADD_REMOVE || DEBUG_STARTING_WINDOW) {
            Slog.v(TAG,"Removing starting window: " + startingWindow);
          }
          mWindows.remove(startingWindow);
          mWindowsChanged=true;
          if (DEBUG_ADD_REMOVE)           Slog.v(TAG,"Removing starting " + startingWindow + " from "+ ttoken);
          ttoken.windows.remove(startingWindow);
          ttoken.allAppWindows.remove(startingWindow);
          addWindowToListInOrderLocked(startingWindow,true);
          if (ttoken.allDrawn) {
            wtoken.allDrawn=true;
          }
          if (ttoken.firstWindowDrawn) {
            wtoken.firstWindowDrawn=true;
          }
          if (!ttoken.hidden) {
            wtoken.hidden=false;
            wtoken.hiddenRequested=false;
            wtoken.willBeHidden=false;
          }
          if (wtoken.clientHidden != ttoken.clientHidden) {
            wtoken.clientHidden=ttoken.clientHidden;
            wtoken.sendAppVisibilityToClients();
          }
          final AppWindowAnimator tAppAnimator=ttoken.mAppAnimator;
          final AppWindowAnimator wAppAnimator=wtoken.mAppAnimator;
          if (tAppAnimator.animation != null) {
            wAppAnimator.animation=tAppAnimator.animation;
            wAppAnimator.animating=tAppAnimator.animating;
            wAppAnimator.animLayerAdjustment=tAppAnimator.animLayerAdjustment;
            tAppAnimator.animation=null;
            tAppAnimator.animLayerAdjustment=0;
            wAppAnimator.updateLayers();
            tAppAnimator.updateLayers();
          }
          updateFocusedWindowLocked(UPDATE_FOCUS_WILL_PLACE_SURFACES,true);
          mLayoutNeeded=true;
          performLayoutAndPlaceSurfacesLocked();
          Binder.restoreCallingIdentity(origId);
          return;
        }
 else         if (ttoken.startingData != null) {
          if (DEBUG_STARTING_WINDOW)           Slog.v(TAG,"Moving pending starting from " + ttoken + " to "+ wtoken);
          wtoken.startingData=ttoken.startingData;
          ttoken.startingData=null;
          ttoken.startingMoved=true;
          Message m=mH.obtainMessage(H.ADD_STARTING,wtoken);
          mH.sendMessageAtFrontOfQueue(m);
          return;
        }
        final AppWindowAnimator tAppAnimator=ttoken.mAppAnimator;
        final AppWindowAnimator wAppAnimator=wtoken.mAppAnimator;
        if (tAppAnimator.thumbnail != null) {
          if (wAppAnimator.thumbnail != null) {
            wAppAnimator.thumbnail.destroy();
          }
          wAppAnimator.thumbnail=tAppAnimator.thumbnail;
          wAppAnimator.thumbnailX=tAppAnimator.thumbnailX;
          wAppAnimator.thumbnailY=tAppAnimator.thumbnailY;
          wAppAnimator.thumbnailLayer=tAppAnimator.thumbnailLayer;
          wAppAnimator.thumbnailAnimation=tAppAnimator.thumbnailAnimation;
          tAppAnimator.thumbnail=null;
        }
      }
    }
    if (!createIfNeeded) {
      return;
    }
    if (DEBUG_STARTING_WINDOW)     Slog.v(TAG,"Checking theme of starting window: 0x" + Integer.toHexString(theme));
    if (theme != 0) {
      AttributeCache.Entry ent=AttributeCache.instance().get(pkg,theme,com.android.internal.R.styleable.Window);
      if (ent == null) {
        return;
      }
      if (DEBUG_STARTING_WINDOW)       Slog.v(TAG,"Translucent=" + ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsTranslucent,false) + " Floating="+ ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsFloating,false)+ " ShowWallpaper="+ ent.array.getBoolean(com.android.internal.R.styleable.Window_windowShowWallpaper,false));
      if (ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsTranslucent,false)) {
        return;
      }
      if (ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsFloating,false)) {
        return;
      }
      if (ent.array.getBoolean(com.android.internal.R.styleable.Window_windowShowWallpaper,false)) {
        if (mWallpaperTarget == null) {
          windowFlags|=WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER;
        }
 else {
          return;
        }
      }
    }
    if (DEBUG_STARTING_WINDOW)     Slog.v(TAG,"Creating StartingData");
    mStartingIconInTransition=true;
    wtoken.startingData=new StartingData(pkg,theme,compatInfo,nonLocalizedLabel,labelRes,icon,windowFlags);
    Message m=mH.obtainMessage(H.ADD_STARTING,wtoken);
    if (DEBUG_STARTING_WINDOW)     Slog.v(TAG,"Enqueueing ADD_STARTING");
    mH.sendMessageAtFrontOfQueue(m);
  }
}
