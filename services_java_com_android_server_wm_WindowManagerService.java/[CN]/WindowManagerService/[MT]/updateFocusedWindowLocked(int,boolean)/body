{
  WindowState newFocus=computeFocusedWindowLocked();
  if (mCurrentFocus != newFocus) {
    mH.removeMessages(H.REPORT_FOCUS_CHANGE);
    mH.sendEmptyMessage(H.REPORT_FOCUS_CHANGE);
    if (localLOGV)     Slog.v(TAG,"Changing focus from " + mCurrentFocus + " to "+ newFocus);
    final WindowState oldFocus=mCurrentFocus;
    mCurrentFocus=newFocus;
    mAnimator.setCurrentFocus(newFocus);
    mLosingFocus.remove(newFocus);
    int focusChanged=mPolicy.focusChangedLw(oldFocus,newFocus);
    final WindowState imWindow=mInputMethodWindow;
    if (newFocus != imWindow && oldFocus != imWindow) {
      if (moveInputMethodWindowsIfNeededLocked(mode != UPDATE_FOCUS_WILL_ASSIGN_LAYERS && mode != UPDATE_FOCUS_WILL_PLACE_SURFACES)) {
        mLayoutNeeded=true;
      }
      if (mode == UPDATE_FOCUS_PLACING_SURFACES) {
        performLayoutLockedInner(true,updateInputWindows);
        focusChanged&=~WindowManagerPolicy.FINISH_LAYOUT_REDO_LAYOUT;
      }
 else       if (mode == UPDATE_FOCUS_WILL_PLACE_SURFACES) {
        assignLayersLocked();
      }
    }
    if ((focusChanged & WindowManagerPolicy.FINISH_LAYOUT_REDO_LAYOUT) != 0) {
      mLayoutNeeded=true;
      if (mode == UPDATE_FOCUS_PLACING_SURFACES) {
        performLayoutLockedInner(true,updateInputWindows);
      }
    }
    if (mode != UPDATE_FOCUS_WILL_ASSIGN_LAYERS) {
      finishUpdateFocusedWindowAfterAssignLayersLocked(updateInputWindows);
    }
    return true;
  }
  return false;
}
