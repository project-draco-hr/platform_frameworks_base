{
  if (!checkCallingPermission(android.Manifest.permission.MANAGE_APP_TOKENS,"addAppToken()")) {
    throw new SecurityException("Requires MANAGE_APP_TOKENS permission");
  }
  long inputDispatchingTimeoutNanos;
  try {
    inputDispatchingTimeoutNanos=token.getKeyDispatchingTimeout() * 1000000L;
  }
 catch (  RemoteException ex) {
    Slog.w(TAG,"Could not get dispatching timeout.",ex);
    inputDispatchingTimeoutNanos=DEFAULT_INPUT_DISPATCHING_TIMEOUT_NANOS;
  }
synchronized (mWindowMap) {
    AppWindowToken atoken=findAppWindowToken(token.asBinder());
    if (atoken != null) {
      Slog.w(TAG,"Attempted to add existing app token: " + token);
      return;
    }
    atoken=new AppWindowToken(this,token);
    atoken.inputDispatchingTimeoutNanos=inputDispatchingTimeoutNanos;
    atoken.groupId=taskId;
    atoken.appFullscreen=fullscreen;
    atoken.showWhenLocked=showWhenLocked;
    atoken.requestedOrientation=requestedOrientation;
    if (DEBUG_TOKEN_MOVEMENT || DEBUG_ADD_REMOVE)     Slog.v(TAG,"addAppToken: " + atoken + " at "+ addPos);
    DisplayContent displayContent=mTaskIdToDisplayContents.get(taskId);
    if (displayContent == null) {
      displayContent=getDefaultDisplayContentLocked();
      mTaskIdToDisplayContents.put(taskId,displayContent);
    }
    displayContent.addAppToken(addPos,atoken);
    displayContent.verifyAppTokens();
    mTokenMap.put(token.asBinder(),atoken);
    mTaskIdToDisplayContents.put(taskId,displayContent);
    atoken.hidden=true;
    atoken.hiddenRequested=true;
  }
}
