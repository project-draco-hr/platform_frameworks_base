{
  boolean delayed=false;
  if (wtoken.clientHidden == visible) {
    wtoken.clientHidden=!visible;
    wtoken.sendAppVisibilityToClients();
  }
  wtoken.willBeHidden=false;
  if (wtoken.hidden == visible) {
    final int N=wtoken.allAppWindows.size();
    boolean changed=false;
    if (DEBUG_APP_TRANSITIONS)     Slog.v(TAG,"Changing app " + wtoken + " hidden="+ wtoken.hidden+ " performLayout="+ performLayout);
    boolean runningAppAnimation=false;
    if (transit != WindowManagerPolicy.TRANSIT_UNSET) {
      if (wtoken.animation == sDummyAnimation) {
        wtoken.animation=null;
      }
      applyAnimationLocked(wtoken,lp,transit,visible);
      changed=true;
      if (wtoken.animation != null) {
        delayed=runningAppAnimation=true;
      }
    }
    for (int i=0; i < N; i++) {
      WindowState win=wtoken.allAppWindows.get(i);
      if (win == wtoken.startingWindow) {
        continue;
      }
      if (win.mWinAnimator.isAnimating()) {
        delayed=true;
      }
      if (visible) {
        if (!win.isVisibleNow()) {
          if (!runningAppAnimation) {
            win.applyAnimationLocked(WindowManagerPolicy.TRANSIT_ENTER,true);
          }
          changed=true;
        }
      }
 else       if (win.isVisibleNow()) {
        if (!runningAppAnimation) {
          win.applyAnimationLocked(WindowManagerPolicy.TRANSIT_EXIT,false);
        }
        changed=true;
      }
    }
    wtoken.hidden=wtoken.hiddenRequested=!visible;
    if (!visible) {
      unsetAppFreezingScreenLocked(wtoken,true,true);
    }
 else {
      WindowState swin=wtoken.startingWindow;
      if (swin != null && !swin.isDrawnLw()) {
        swin.mPolicyVisibility=false;
        swin.mPolicyVisibilityAfterAnim=false;
      }
    }
    if (DEBUG_APP_TRANSITIONS)     Slog.v(TAG,"setTokenVisibilityLocked: " + wtoken + ": hidden="+ wtoken.hidden+ " hiddenRequested="+ wtoken.hiddenRequested);
    if (changed) {
      mLayoutNeeded=true;
      mInputMonitor.setUpdateInputWindowsNeededLw();
      if (performLayout) {
        updateFocusedWindowLocked(UPDATE_FOCUS_WILL_PLACE_SURFACES,false);
        performLayoutAndPlaceSurfacesLocked();
      }
      mInputMonitor.updateInputWindowsLw(false);
    }
  }
  if (wtoken.animation != null) {
    delayed=true;
  }
  return delayed;
}
