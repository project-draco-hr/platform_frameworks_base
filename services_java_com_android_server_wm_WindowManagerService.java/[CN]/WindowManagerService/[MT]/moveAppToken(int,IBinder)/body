{
  if (!checkCallingPermission(android.Manifest.permission.MANAGE_APP_TOKENS,"moveAppToken()")) {
    throw new SecurityException("Requires MANAGE_APP_TOKENS permission");
  }
synchronized (mWindowMap) {
    if (DEBUG_REORDER)     Slog.v(TAG,"Initial app tokens:");
    if (DEBUG_REORDER)     dumpAppTokensLocked();
    final AppWindowToken wtoken=findAppWindowToken(token);
    final int oldIndex=mAppTokens.indexOf(wtoken);
    if (DEBUG_TOKEN_MOVEMENT || DEBUG_REORDER)     Slog.v(TAG,"Start moving token " + wtoken + " initially at "+ oldIndex);
    if (oldIndex > index && mAppTransition.isTransitionSet() && !mAppTransition.isRunning()) {
      mAnimatingAppTokens.clear();
      mAnimatingAppTokens.addAll(mAppTokens);
    }
    if (wtoken == null || !mAppTokens.remove(wtoken)) {
      Slog.w(TAG,"Attempting to reorder token that doesn't exist: " + token + " ("+ wtoken+ ")");
      return;
    }
    mAppTokens.add(index,wtoken);
    if (DEBUG_REORDER)     Slog.v(TAG,"Moved " + token + " to "+ index+ ":");
 else     if (DEBUG_TOKEN_MOVEMENT)     Slog.v(TAG,"Moved " + token + " to "+ index);
    if (DEBUG_REORDER)     dumpAppTokensLocked();
    if (!mAppTransition.isTransitionSet() && !mAppTransition.isRunning()) {
      mAnimatingAppTokens.clear();
      mAnimatingAppTokens.addAll(mAppTokens);
      final long origId=Binder.clearCallingIdentity();
      if (DEBUG_REORDER)       Slog.v(TAG,"Removing windows in " + token + ":");
      if (DEBUG_REORDER)       dumpWindowsLocked();
      if (tmpRemoveAppWindowsLocked(wtoken)) {
        if (DEBUG_REORDER)         Slog.v(TAG,"Adding windows back in:");
        if (DEBUG_REORDER)         dumpWindowsLocked();
        DisplayContentsIterator iterator=new DisplayContentsIterator();
        while (iterator.hasNext()) {
          final DisplayContent displayContent=iterator.next();
          final WindowList windows=displayContent.getWindowList();
          final int pos=findWindowOffsetLocked(windows,index);
          final int newPos=reAddAppWindowsLocked(displayContent,pos,wtoken);
          if (pos != newPos) {
            displayContent.layoutNeeded=true;
          }
        }
        if (DEBUG_REORDER)         Slog.v(TAG,"Final window list:");
        if (DEBUG_REORDER)         dumpWindowsLocked();
        updateFocusedWindowLocked(UPDATE_FOCUS_WILL_PLACE_SURFACES,false);
        mInputMonitor.setUpdateInputWindowsNeededLw();
        performLayoutAndPlaceSurfacesLocked();
        mInputMonitor.updateInputWindowsLw(false);
      }
      Binder.restoreCallingIdentity(origId);
    }
  }
}
