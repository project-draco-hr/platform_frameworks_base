{
  int res=mPolicy.checkAddPermission(attrs);
  if (res != WindowManagerGlobal.ADD_OKAY) {
    return res;
  }
  boolean reportNewConfig=false;
  WindowState attachedWindow=null;
  WindowState win=null;
  long origId;
synchronized (mWindowMap) {
    if (mDefaultDisplay == null) {
      throw new IllegalStateException("Display has not been initialialized");
    }
    if (mWindowMap.containsKey(client.asBinder())) {
      Slog.w(TAG,"Window " + client + " is already added");
      return WindowManagerGlobal.ADD_DUPLICATE_ADD;
    }
    if (attrs.type >= FIRST_SUB_WINDOW && attrs.type <= LAST_SUB_WINDOW) {
      attachedWindow=windowForClientLocked(null,attrs.token,false);
      if (attachedWindow == null) {
        Slog.w(TAG,"Attempted to add window with token that is not a window: " + attrs.token + ".  Aborting.");
        return WindowManagerGlobal.ADD_BAD_SUBWINDOW_TOKEN;
      }
      if (attachedWindow.mAttrs.type >= FIRST_SUB_WINDOW && attachedWindow.mAttrs.type <= LAST_SUB_WINDOW) {
        Slog.w(TAG,"Attempted to add window with token that is a sub-window: " + attrs.token + ".  Aborting.");
        return WindowManagerGlobal.ADD_BAD_SUBWINDOW_TOKEN;
      }
    }
    boolean addToken=false;
    WindowToken token=mTokenMap.get(attrs.token);
    if (token == null) {
      if (attrs.type >= FIRST_APPLICATION_WINDOW && attrs.type <= LAST_APPLICATION_WINDOW) {
        Slog.w(TAG,"Attempted to add application window with unknown token " + attrs.token + ".  Aborting.");
        return WindowManagerGlobal.ADD_BAD_APP_TOKEN;
      }
      if (attrs.type == TYPE_INPUT_METHOD) {
        Slog.w(TAG,"Attempted to add input method window with unknown token " + attrs.token + ".  Aborting.");
        return WindowManagerGlobal.ADD_BAD_APP_TOKEN;
      }
      if (attrs.type == TYPE_WALLPAPER) {
        Slog.w(TAG,"Attempted to add wallpaper window with unknown token " + attrs.token + ".  Aborting.");
        return WindowManagerGlobal.ADD_BAD_APP_TOKEN;
      }
      if (attrs.type == TYPE_DREAM) {
        Slog.w(TAG,"Attempted to add Dream window with unknown token " + attrs.token + ".  Aborting.");
        return WindowManagerGlobal.ADD_BAD_APP_TOKEN;
      }
      token=new WindowToken(this,attrs.token,-1,false);
      addToken=true;
    }
 else     if (attrs.type >= FIRST_APPLICATION_WINDOW && attrs.type <= LAST_APPLICATION_WINDOW) {
      AppWindowToken atoken=token.appWindowToken;
      if (atoken == null) {
        Slog.w(TAG,"Attempted to add window with non-application token " + token + ".  Aborting.");
        return WindowManagerGlobal.ADD_NOT_APP_TOKEN;
      }
 else       if (atoken.removed) {
        Slog.w(TAG,"Attempted to add window with exiting application token " + token + ".  Aborting.");
        return WindowManagerGlobal.ADD_APP_EXITING;
      }
      if (attrs.type == TYPE_APPLICATION_STARTING && atoken.firstWindowDrawn) {
        if (localLOGV)         Slog.v(TAG,"**** NO NEED TO START: " + attrs.getTitle());
        return WindowManagerGlobal.ADD_STARTING_NOT_NEEDED;
      }
    }
 else     if (attrs.type == TYPE_INPUT_METHOD) {
      if (token.windowType != TYPE_INPUT_METHOD) {
        Slog.w(TAG,"Attempted to add input method window with bad token " + attrs.token + ".  Aborting.");
        return WindowManagerGlobal.ADD_BAD_APP_TOKEN;
      }
    }
 else     if (attrs.type == TYPE_WALLPAPER) {
      if (token.windowType != TYPE_WALLPAPER) {
        Slog.w(TAG,"Attempted to add wallpaper window with bad token " + attrs.token + ".  Aborting.");
        return WindowManagerGlobal.ADD_BAD_APP_TOKEN;
      }
    }
 else     if (attrs.type == TYPE_DREAM) {
      if (token.windowType != TYPE_DREAM) {
        Slog.w(TAG,"Attempted to add Dream window with bad token " + attrs.token + ".  Aborting.");
        return WindowManagerGlobal.ADD_BAD_APP_TOKEN;
      }
    }
    final DisplayContent displayContent=getDisplayContent(displayId);
    win=new WindowState(this,session,client,token,attachedWindow,seq,attrs,viewVisibility,displayContent);
    if (win.mDeathRecipient == null) {
      Slog.w(TAG,"Adding window client " + client.asBinder() + " that is dead, aborting.");
      return WindowManagerGlobal.ADD_APP_EXITING;
    }
    mPolicy.adjustWindowParamsLw(win.mAttrs);
    res=mPolicy.prepareAddWindowLw(win,attrs);
    if (res != WindowManagerGlobal.ADD_OKAY) {
      return res;
    }
    if (outInputChannel != null && (attrs.inputFeatures & WindowManager.LayoutParams.INPUT_FEATURE_NO_INPUT_CHANNEL) == 0) {
      String name=win.makeInputChannelName();
      InputChannel[] inputChannels=InputChannel.openInputChannelPair(name);
      win.setInputChannel(inputChannels[0]);
      inputChannels[1].transferTo(outInputChannel);
      mInputManager.registerInputChannel(win.mInputChannel,win.mInputWindowHandle);
    }
    res=WindowManagerGlobal.ADD_OKAY;
    origId=Binder.clearCallingIdentity();
    if (addToken) {
      mTokenMap.put(attrs.token,token);
    }
    win.attach();
    mWindowMap.put(client.asBinder(),win);
    if (attrs.type == TYPE_APPLICATION_STARTING && token.appWindowToken != null) {
      token.appWindowToken.startingWindow=win;
      if (DEBUG_STARTING_WINDOW)       Slog.v(TAG,"addWindow: " + token.appWindowToken + " startingWindow="+ win);
    }
    boolean imMayMove=true;
    if (attrs.type == TYPE_INPUT_METHOD) {
      win.mGivenInsetsPending=true;
      mInputMethodWindow=win;
      addInputMethodWindowToListLocked(win);
      imMayMove=false;
    }
 else     if (attrs.type == TYPE_INPUT_METHOD_DIALOG) {
      mInputMethodDialogs.add(win);
      addWindowToListInOrderLocked(win,true);
      adjustInputMethodDialogsLocked();
      imMayMove=false;
    }
 else {
      addWindowToListInOrderLocked(win,true);
      if (attrs.type == TYPE_WALLPAPER) {
        mLastWallpaperTimeoutTime=0;
        adjustWallpaperWindowsLocked();
      }
 else       if ((attrs.flags & FLAG_SHOW_WALLPAPER) != 0) {
        adjustWallpaperWindowsLocked();
      }
    }
    win.mWinAnimator.mEnterAnimationPending=true;
    if (displayContent.isDefaultDisplay) {
      mPolicy.getContentInsetHintLw(attrs,outContentInsets);
    }
 else {
      outContentInsets.setEmpty();
    }
    if (mInTouchMode) {
      res|=WindowManagerGlobal.ADD_FLAG_IN_TOUCH_MODE;
    }
    if (win.mAppToken == null || !win.mAppToken.clientHidden) {
      res|=WindowManagerGlobal.ADD_FLAG_APP_VISIBLE;
    }
    mInputMonitor.setUpdateInputWindowsNeededLw();
    boolean focusChanged=false;
    if (win.canReceiveKeys()) {
      focusChanged=updateFocusedWindowLocked(UPDATE_FOCUS_WILL_ASSIGN_LAYERS,false);
      if (focusChanged) {
        imMayMove=false;
      }
    }
    if (imMayMove) {
      moveInputMethodWindowsIfNeededLocked(false);
    }
    assignLayersLocked(displayContent.getWindowList());
    if (focusChanged) {
      finishUpdateFocusedWindowAfterAssignLayersLocked(false);
    }
    mInputMonitor.updateInputWindowsLw(false);
    if (localLOGV)     Slog.v(TAG,"New client " + client.asBinder() + ": window="+ win);
    if (win.isVisibleOrAdding() && updateOrientationFromAppTokensLocked(false)) {
      reportNewConfig=true;
    }
  }
  if (reportNewConfig) {
    sendNewConfiguration();
  }
  Binder.restoreCallingIdentity(origId);
  return res;
}
