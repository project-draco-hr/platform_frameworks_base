{
  if (win.mRemoved) {
    return;
  }
  for (int i=win.mChildWindows.size() - 1; i >= 0; i--) {
    WindowState cwin=win.mChildWindows.get(i);
    Slog.w(TAG,"Force-removing child win " + cwin + " from container "+ win);
    removeWindowInnerLocked(cwin.mSession,cwin);
  }
  win.mRemoved=true;
  if (mInputMethodTarget == win) {
    moveInputMethodWindowsIfNeededLocked(false);
  }
  if (false) {
    RuntimeException e=new RuntimeException("here");
    e.fillInStackTrace();
    Slog.w(TAG,"Removing window " + win,e);
  }
  mPolicy.removeWindowLw(win);
  win.removeLocked();
  if (DEBUG_ADD_REMOVE)   Slog.v(TAG,"removeWindowInnerLocked: " + win);
  mWindowMap.remove(win.mClient.asBinder());
  mWindows.remove(win);
  mPendingRemove.remove(win);
  mWindowsChanged=true;
  if (DEBUG_WINDOW_MOVEMENT)   Slog.v(TAG,"Final remove of window: " + win);
  if (mInputMethodWindow == win) {
    mInputMethodWindow=null;
  }
 else   if (win.mAttrs.type == TYPE_INPUT_METHOD_DIALOG) {
    mInputMethodDialogs.remove(win);
  }
  final WindowToken token=win.mToken;
  final AppWindowToken atoken=win.mAppToken;
  if (DEBUG_ADD_REMOVE)   Slog.v(TAG,"Removing " + win + " from "+ token);
  token.windows.remove(win);
  if (atoken != null) {
    atoken.allAppWindows.remove(win);
  }
  if (localLOGV)   Slog.v(TAG,"**** Removing window " + win + ": count="+ token.windows.size());
  if (token.windows.size() == 0) {
    if (!token.explicit) {
      mTokenMap.remove(token.token);
    }
 else     if (atoken != null) {
      atoken.firstWindowDrawn=false;
    }
  }
  if (atoken != null) {
    if (atoken.startingWindow == win) {
      if (DEBUG_STARTING_WINDOW)       Slog.v(TAG,"Nulling startingWindow " + win);
      atoken.startingWindow=null;
    }
 else     if (atoken.allAppWindows.size() == 0 && atoken.startingData != null) {
      if (DEBUG_STARTING_WINDOW)       Slog.v(TAG,"Nulling last startingWindow");
      atoken.startingData=null;
    }
 else     if (atoken.allAppWindows.size() == 1 && atoken.startingView != null) {
      if (DEBUG_STARTING_WINDOW) {
        Slog.v(TAG,"Schedule remove starting " + token + ": no more real windows");
      }
      Message m=mH.obtainMessage(H.REMOVE_STARTING,atoken);
      mH.sendMessage(m);
    }
  }
  if (win.mAttrs.type == TYPE_WALLPAPER) {
    mLastWallpaperTimeoutTime=0;
    adjustWallpaperWindowsLocked();
  }
 else   if ((win.mAttrs.flags & FLAG_SHOW_WALLPAPER) != 0) {
    adjustWallpaperWindowsLocked();
  }
  if (!mInLayout) {
    assignLayersLocked();
    mLayoutNeeded=true;
    performLayoutAndPlaceSurfacesLocked();
    if (win.mAppToken != null) {
      win.mAppToken.updateReportedVisibilityLocked();
    }
  }
  mInputMonitor.updateInputWindowsLw(true);
}
