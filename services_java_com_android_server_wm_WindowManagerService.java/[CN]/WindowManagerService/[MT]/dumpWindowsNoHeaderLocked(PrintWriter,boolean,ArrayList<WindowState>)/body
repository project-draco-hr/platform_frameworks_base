{
  int j=0;
  final AllWindowsIterator iterator=new AllWindowsIterator(REVERSE_ITERATOR);
  while (iterator.hasNext()) {
    final WindowState w=iterator.next();
    if (windows == null || windows.contains(w)) {
      pw.print("  Window #");
      pw.print(j++);
      pw.print(' ');
      pw.print(w);
      pw.println(":");
      w.dump(pw,"    ",dumpAll || windows != null);
    }
  }
  if (mInputMethodDialogs.size() > 0) {
    pw.println();
    pw.println("  Input method dialogs:");
    for (int i=mInputMethodDialogs.size() - 1; i >= 0; i--) {
      WindowState w=mInputMethodDialogs.get(i);
      if (windows == null || windows.contains(w)) {
        pw.print("  IM Dialog #");
        pw.print(i);
        pw.print(": ");
        pw.println(w);
      }
    }
  }
  if (mPendingRemove.size() > 0) {
    pw.println();
    pw.println("  Remove pending for:");
    for (int i=mPendingRemove.size() - 1; i >= 0; i--) {
      WindowState w=mPendingRemove.get(i);
      if (windows == null || windows.contains(w)) {
        pw.print("  Remove #");
        pw.print(i);
        pw.print(' ');
        pw.print(w);
        if (dumpAll) {
          pw.println(":");
          w.dump(pw,"    ",true);
        }
 else {
          pw.println();
        }
      }
    }
  }
  if (mForceRemoves != null && mForceRemoves.size() > 0) {
    pw.println();
    pw.println("  Windows force removing:");
    for (int i=mForceRemoves.size() - 1; i >= 0; i--) {
      WindowState w=mForceRemoves.get(i);
      pw.print("  Removing #");
      pw.print(i);
      pw.print(' ');
      pw.print(w);
      if (dumpAll) {
        pw.println(":");
        w.dump(pw,"    ",true);
      }
 else {
        pw.println();
      }
    }
  }
  if (mDestroySurface.size() > 0) {
    pw.println();
    pw.println("  Windows waiting to destroy their surface:");
    for (int i=mDestroySurface.size() - 1; i >= 0; i--) {
      WindowState w=mDestroySurface.get(i);
      if (windows == null || windows.contains(w)) {
        pw.print("  Destroy #");
        pw.print(i);
        pw.print(' ');
        pw.print(w);
        if (dumpAll) {
          pw.println(":");
          w.dump(pw,"    ",true);
        }
 else {
          pw.println();
        }
      }
    }
  }
  if (mLosingFocus.size() > 0) {
    pw.println();
    pw.println("  Windows losing focus:");
    for (int i=mLosingFocus.size() - 1; i >= 0; i--) {
      WindowState w=mLosingFocus.get(i);
      if (windows == null || windows.contains(w)) {
        pw.print("  Losing #");
        pw.print(i);
        pw.print(' ');
        pw.print(w);
        if (dumpAll) {
          pw.println(":");
          w.dump(pw,"    ",true);
        }
 else {
          pw.println();
        }
      }
    }
  }
  if (mResizingWindows.size() > 0) {
    pw.println();
    pw.println("  Windows waiting to resize:");
    for (int i=mResizingWindows.size() - 1; i >= 0; i--) {
      WindowState w=mResizingWindows.get(i);
      if (windows == null || windows.contains(w)) {
        pw.print("  Resizing #");
        pw.print(i);
        pw.print(' ');
        pw.print(w);
        if (dumpAll) {
          pw.println(":");
          w.dump(pw,"    ",true);
        }
 else {
          pw.println();
        }
      }
    }
  }
  if (mWaitingForDrawn.size() > 0) {
    pw.println();
    pw.println("  Clients waiting for these windows to be drawn:");
    for (int i=mWaitingForDrawn.size() - 1; i >= 0; i--) {
      Pair<WindowState,IRemoteCallback> pair=mWaitingForDrawn.get(i);
      pw.print("  Waiting #");
      pw.print(i);
      pw.print(' ');
      pw.print(pair.first);
      pw.print(": ");
      pw.println(pair.second);
    }
  }
  pw.println();
  pw.println("  DisplayContents:");
  if (mDisplayReady) {
    DisplayContentsIterator dCIterator=new DisplayContentsIterator();
    while (dCIterator.hasNext()) {
      dCIterator.next().dump("    ",pw);
    }
  }
 else {
    pw.println("  NO DISPLAY");
  }
  pw.print("  mCurConfiguration=");
  pw.println(this.mCurConfiguration);
  pw.print("  mCurrentFocus=");
  pw.println(mCurrentFocus);
  if (mLastFocus != mCurrentFocus) {
    pw.print("  mLastFocus=");
    pw.println(mLastFocus);
  }
  pw.print("  mFocusedApp=");
  pw.println(mFocusedApp);
  if (mInputMethodTarget != null) {
    pw.print("  mInputMethodTarget=");
    pw.println(mInputMethodTarget);
  }
  pw.print("  mInTouchMode=");
  pw.print(mInTouchMode);
  pw.print(" mLayoutSeq=");
  pw.println(mLayoutSeq);
  if (dumpAll) {
    pw.print("  mSystemDecorRect=");
    pw.print(mSystemDecorRect.toShortString());
    pw.print(" mSystemDecorLayer=");
    pw.print(mSystemDecorLayer);
    pw.print(" mScreenRecr=");
    pw.println(mScreenRect.toShortString());
    if (mLastStatusBarVisibility != 0) {
      pw.print("  mLastStatusBarVisibility=0x");
      pw.println(Integer.toHexString(mLastStatusBarVisibility));
    }
    if (mInputMethodWindow != null) {
      pw.print("  mInputMethodWindow=");
      pw.println(mInputMethodWindow);
    }
    pw.print("  mWallpaperTarget=");
    pw.println(mWallpaperTarget);
    if (mLowerWallpaperTarget != null || mUpperWallpaperTarget != null) {
      pw.print("  mLowerWallpaperTarget=");
      pw.println(mLowerWallpaperTarget);
      pw.print("  mUpperWallpaperTarget=");
      pw.println(mUpperWallpaperTarget);
    }
    pw.print("  mLastWallpaperX=");
    pw.print(mLastWallpaperX);
    pw.print(" mLastWallpaperY=");
    pw.println(mLastWallpaperY);
    if (mInputMethodAnimLayerAdjustment != 0 || mWallpaperAnimLayerAdjustment != 0) {
      pw.print("  mInputMethodAnimLayerAdjustment=");
      pw.print(mInputMethodAnimLayerAdjustment);
      pw.print("  mWallpaperAnimLayerAdjustment=");
      pw.println(mWallpaperAnimLayerAdjustment);
    }
    pw.print("  mSystemBooted=");
    pw.print(mSystemBooted);
    pw.print(" mDisplayEnabled=");
    pw.println(mDisplayEnabled);
    if (needsLayout()) {
      pw.print("  layoutNeeded on displays=");
      DisplayContentsIterator dcIterator=new DisplayContentsIterator();
      while (dcIterator.hasNext()) {
        final DisplayContent displayContent=dcIterator.next();
        if (displayContent.layoutNeeded) {
          pw.print(displayContent.getDisplayId());
        }
      }
      pw.println();
    }
    pw.print("  mTransactionSequence=");
    pw.println(mTransactionSequence);
    pw.print("  mDisplayFrozen=");
    pw.print(mDisplayFrozen);
    pw.print(" windows=");
    pw.print(mWindowsFreezingScreen);
    pw.print(" client=");
    pw.print(mClientFreezingScreen);
    pw.print(" apps=");
    pw.print(mAppsFreezingScreen);
    pw.print(" waitingForConfig=");
    pw.println(mWaitingForConfig);
    pw.print("  mRotation=");
    pw.print(mRotation);
    pw.print(" mAltOrientation=");
    pw.println(mAltOrientation);
    pw.print("  mLastWindowForcedOrientation=");
    pw.print(mLastWindowForcedOrientation);
    pw.print(" mForcedAppOrientation=");
    pw.println(mForcedAppOrientation);
    pw.print("  mDeferredRotationPauseCount=");
    pw.println(mDeferredRotationPauseCount);
    pw.print("  mWindowAnimationScale=");
    pw.print(mWindowAnimationScale);
    pw.print(" mTransitionWindowAnimationScale=");
    pw.print(mTransitionAnimationScale);
    pw.print(" mAnimatorDurationScale=");
    pw.println(mAnimatorDurationScale);
    pw.print("  mTraversalScheduled=");
    pw.println(mTraversalScheduled);
    pw.print("  mStartingIconInTransition=");
    pw.print(mStartingIconInTransition);
    pw.print(" mSkipAppTransitionAnimation=");
    pw.println(mSkipAppTransitionAnimation);
    pw.println("  mLayoutToAnim:");
    pw.print("    mParamsModified=");
    pw.print(mLayoutToAnim.mParamsModified);
    pw.print(" mAnimationScheduled=");
    pw.print(mLayoutToAnim.mAnimationScheduled);
    pw.print(" mChanges=0x");
    pw.println(Long.toHexString(mLayoutToAnim.mChanges));
    pw.print("    mWallpaperTarget=");
    pw.println(mLayoutToAnim.mWallpaperTarget);
    if (mLayoutToAnim.mLowerWallpaperTarget != null || mLayoutToAnim.mUpperWallpaperTarget != null) {
      pw.print("    mLowerWallpaperTarget=");
      pw.println(mLayoutToAnim.mLowerWallpaperTarget);
      pw.print("    mUpperWallpaperTarget=");
      pw.println(mLayoutToAnim.mUpperWallpaperTarget);
    }
    for (int i=0; i < mLayoutToAnim.mWinAnimatorLists.size(); i++) {
      pw.print("    Win Animator List #");
      pw.print(mLayoutToAnim.mWinAnimatorLists.keyAt(i));
      pw.println(":");
      WinAnimatorList wanim=mLayoutToAnim.mWinAnimatorLists.valueAt(i);
      for (int wi=0; wi < wanim.size(); wi++) {
        pw.print("      ");
        pw.println(wanim.get(wi));
      }
    }
    for (int i=0; i < mLayoutToAnim.mWallpaperTokens.size(); i++) {
      pw.print("    Wallpaper Token #");
      pw.print(i);
      pw.print(": ");
      pw.println(mLayoutToAnim.mWallpaperTokens.get(i));
    }
    mAppTransition.dump(pw);
  }
}
