{
  for (int i=mWindows.size() - 1; i >= 0; i--) {
    WindowState w=mWindows.get(i);
    if (windows == null || windows.contains(w)) {
      pw.print("  Window #");
      pw.print(i);
      pw.print(' ');
      pw.print(w);
      pw.println(":");
      w.dump(pw,"    ",dumpAll || windows != null);
    }
  }
  if (mInputMethodDialogs.size() > 0) {
    pw.println();
    pw.println("  Input method dialogs:");
    for (int i=mInputMethodDialogs.size() - 1; i >= 0; i--) {
      WindowState w=mInputMethodDialogs.get(i);
      if (windows == null || windows.contains(w)) {
        pw.print("  IM Dialog #");
        pw.print(i);
        pw.print(": ");
        pw.println(w);
      }
    }
  }
  if (mPendingRemove.size() > 0) {
    pw.println();
    pw.println("  Remove pending for:");
    for (int i=mPendingRemove.size() - 1; i >= 0; i--) {
      WindowState w=mPendingRemove.get(i);
      if (windows == null || windows.contains(w)) {
        pw.print("  Remove #");
        pw.print(i);
        pw.print(' ');
        pw.print(w);
        if (dumpAll) {
          pw.println(":");
          w.dump(pw,"    ",true);
        }
 else {
          pw.println();
        }
      }
    }
  }
  if (mForceRemoves != null && mForceRemoves.size() > 0) {
    pw.println();
    pw.println("  Windows force removing:");
    for (int i=mForceRemoves.size() - 1; i >= 0; i--) {
      WindowState w=mForceRemoves.get(i);
      pw.print("  Removing #");
      pw.print(i);
      pw.print(' ');
      pw.print(w);
      if (dumpAll) {
        pw.println(":");
        w.dump(pw,"    ",true);
      }
 else {
        pw.println();
      }
    }
  }
  if (mDestroySurface.size() > 0) {
    pw.println();
    pw.println("  Windows waiting to destroy their surface:");
    for (int i=mDestroySurface.size() - 1; i >= 0; i--) {
      WindowState w=mDestroySurface.get(i);
      if (windows == null || windows.contains(w)) {
        pw.print("  Destroy #");
        pw.print(i);
        pw.print(' ');
        pw.print(w);
        if (dumpAll) {
          pw.println(":");
          w.dump(pw,"    ",true);
        }
 else {
          pw.println();
        }
      }
    }
  }
  if (mLosingFocus.size() > 0) {
    pw.println();
    pw.println("  Windows losing focus:");
    for (int i=mLosingFocus.size() - 1; i >= 0; i--) {
      WindowState w=mLosingFocus.get(i);
      if (windows == null || windows.contains(w)) {
        pw.print("  Losing #");
        pw.print(i);
        pw.print(' ');
        pw.print(w);
        if (dumpAll) {
          pw.println(":");
          w.dump(pw,"    ",true);
        }
 else {
          pw.println();
        }
      }
    }
  }
  if (mResizingWindows.size() > 0) {
    pw.println();
    pw.println("  Windows waiting to resize:");
    for (int i=mResizingWindows.size() - 1; i >= 0; i--) {
      WindowState w=mResizingWindows.get(i);
      if (windows == null || windows.contains(w)) {
        pw.print("  Resizing #");
        pw.print(i);
        pw.print(' ');
        pw.print(w);
        if (dumpAll) {
          pw.println(":");
          w.dump(pw,"    ",true);
        }
 else {
          pw.println();
        }
      }
    }
  }
  if (mWaitingForDrawn.size() > 0) {
    pw.println();
    pw.println("  Clients waiting for these windows to be drawn:");
    for (int i=mWaitingForDrawn.size() - 1; i >= 0; i--) {
      Pair<WindowState,IRemoteCallback> pair=mWaitingForDrawn.get(i);
      pw.print("  Waiting #");
      pw.print(i);
      pw.print(' ');
      pw.print(pair.first);
      pw.print(": ");
      pw.println(pair.second);
    }
  }
  pw.println();
  if (mDisplay != null) {
    pw.print("  Display: init=");
    pw.print(mInitialDisplayWidth);
    pw.print("x");
    pw.print(mInitialDisplayHeight);
    if (mInitialDisplayWidth != mBaseDisplayWidth || mInitialDisplayHeight != mBaseDisplayHeight) {
      pw.print(" base=");
      pw.print(mBaseDisplayWidth);
      pw.print("x");
      pw.print(mBaseDisplayHeight);
    }
    final int rawWidth=mDisplay.getRawWidth();
    final int rawHeight=mDisplay.getRawHeight();
    if (rawWidth != mCurDisplayWidth || rawHeight != mCurDisplayHeight) {
      pw.print(" raw=");
      pw.print(rawWidth);
      pw.print("x");
      pw.print(rawHeight);
    }
    pw.print(" cur=");
    pw.print(mCurDisplayWidth);
    pw.print("x");
    pw.print(mCurDisplayHeight);
    pw.print(" app=");
    pw.print(mAppDisplayWidth);
    pw.print("x");
    pw.print(mAppDisplayHeight);
    pw.print(" rng=");
    pw.print(mSmallestDisplayWidth);
    pw.print("x");
    pw.print(mSmallestDisplayHeight);
    pw.print("-");
    pw.print(mLargestDisplayWidth);
    pw.print("x");
    pw.println(mLargestDisplayHeight);
  }
 else {
    pw.println("  NO DISPLAY");
  }
  pw.print("  mCurConfiguration=");
  pw.println(this.mCurConfiguration);
  pw.print("  mCurrentFocus=");
  pw.println(mCurrentFocus);
  if (mLastFocus != mCurrentFocus) {
    pw.print("  mLastFocus=");
    pw.println(mLastFocus);
  }
  pw.print("  mFocusedApp=");
  pw.println(mFocusedApp);
  if (mInputMethodTarget != null) {
    pw.print("  mInputMethodTarget=");
    pw.println(mInputMethodTarget);
  }
  pw.print("  mInTouchMode=");
  pw.print(mInTouchMode);
  pw.print(" mLayoutSeq=");
  pw.println(mLayoutSeq);
  if (dumpAll) {
    pw.print("  mSystemDecorRect=");
    pw.print(mSystemDecorRect.toShortString());
    pw.print(" mSystemDecorLayer=");
    pw.println(mSystemDecorLayer);
    if (mLastStatusBarVisibility != 0) {
      pw.print("  mLastStatusBarVisibility=0x");
      pw.println(Integer.toHexString(mLastStatusBarVisibility));
    }
    if (mInputMethodWindow != null) {
      pw.print("  mInputMethodWindow=");
      pw.println(mInputMethodWindow);
    }
    pw.print("  mWallpaperTarget=");
    pw.println(mWallpaperTarget);
    if (mLowerWallpaperTarget != null && mUpperWallpaperTarget != null) {
      pw.print("  mLowerWallpaperTarget=");
      pw.println(mLowerWallpaperTarget);
      pw.print("  mUpperWallpaperTarget=");
      pw.println(mUpperWallpaperTarget);
    }
    pw.print("  mLastWallpaperX=");
    pw.print(mLastWallpaperX);
    pw.print(" mLastWallpaperY=");
    pw.println(mLastWallpaperY);
    if (mInputMethodAnimLayerAdjustment != 0 || mWallpaperAnimLayerAdjustment != 0) {
      pw.print("  mInputMethodAnimLayerAdjustment=");
      pw.print(mInputMethodAnimLayerAdjustment);
      pw.print("  mWallpaperAnimLayerAdjustment=");
      pw.println(mWallpaperAnimLayerAdjustment);
    }
    pw.print("  mSystemBooted=");
    pw.print(mSystemBooted);
    pw.print(" mDisplayEnabled=");
    pw.println(mDisplayEnabled);
    pw.print("  mLayoutNeeded=");
    pw.print(mLayoutNeeded);
    pw.print("mTransactionSequence=");
    pw.println(mTransactionSequence);
    pw.print("  mDisplayFrozen=");
    pw.print(mDisplayFrozen);
    pw.print(" mWindowsFreezingScreen=");
    pw.print(mWindowsFreezingScreen);
    pw.print(" mAppsFreezingScreen=");
    pw.print(mAppsFreezingScreen);
    pw.print(" mWaitingForConfig=");
    pw.println(mWaitingForConfig);
    pw.print("  mRotation=");
    pw.print(mRotation);
    pw.print(" mAltOrientation=");
    pw.println(mAltOrientation);
    pw.print("  mLastWindowForcedOrientation=");
    pw.print(mLastWindowForcedOrientation);
    pw.print(" mForcedAppOrientation=");
    pw.println(mForcedAppOrientation);
    pw.print("  mDeferredRotationPauseCount=");
    pw.println(mDeferredRotationPauseCount);
    if (mAnimator.mScreenRotationAnimation != null) {
      pw.println("  mScreenRotationAnimation:");
      mAnimator.mScreenRotationAnimation.printTo("    ",pw);
    }
    pw.print("  mWindowAnimationScale=");
    pw.print(mWindowAnimationScale);
    pw.print(" mTransitionWindowAnimationScale=");
    pw.print(mTransitionAnimationScale);
    pw.print(" mAnimatorDurationScale=");
    pw.println(mAnimatorDurationScale);
    pw.print("  mTraversalScheduled=");
    pw.print(mTraversalScheduled);
    pw.print(" mNextAppTransition=0x");
    pw.print(Integer.toHexString(mNextAppTransition));
    pw.print(" mAppTransitionReady=");
    pw.println(mAppTransitionReady);
    pw.print("  mAppTransitionRunning=");
    pw.print(mAppTransitionRunning);
    pw.print(" mAppTransitionTimeout=");
    pw.println(mAppTransitionTimeout);
    if (mNextAppTransitionType != ActivityOptions.ANIM_NONE) {
      pw.print("  mNextAppTransitionType=");
      pw.println(mNextAppTransitionType);
    }
switch (mNextAppTransitionType) {
case ActivityOptions.ANIM_CUSTOM:
      pw.print("  mNextAppTransitionPackage=");
    pw.println(mNextAppTransitionPackage);
  pw.print("  mNextAppTransitionEnter=0x");
pw.print(Integer.toHexString(mNextAppTransitionEnter));
pw.print(" mNextAppTransitionExit=0x");
pw.println(Integer.toHexString(mNextAppTransitionExit));
break;
case ActivityOptions.ANIM_SCALE_UP:
pw.print("  mNextAppTransitionStartX=");
pw.print(mNextAppTransitionStartX);
pw.print(" mNextAppTransitionStartY=");
pw.println(mNextAppTransitionStartY);
pw.print("  mNextAppTransitionStartWidth=");
pw.print(mNextAppTransitionStartWidth);
pw.print(" mNextAppTransitionStartHeight=");
pw.println(mNextAppTransitionStartHeight);
break;
case ActivityOptions.ANIM_THUMBNAIL:
case ActivityOptions.ANIM_THUMBNAIL_DELAYED:
pw.print("  mNextAppTransitionThumbnail=");
pw.print(mNextAppTransitionThumbnail);
pw.print(" mNextAppTransitionStartX=");
pw.print(mNextAppTransitionStartX);
pw.print(" mNextAppTransitionStartY=");
pw.println(mNextAppTransitionStartY);
pw.print("  mNextAppTransitionDelayed=");
pw.println(mNextAppTransitionDelayed);
break;
}
if (mNextAppTransitionCallback != null) {
pw.print("  mNextAppTransitionCallback=");
pw.println(mNextAppTransitionCallback);
}
pw.print("  mStartingIconInTransition=");
pw.print(mStartingIconInTransition);
pw.print(" mSkipAppTransitionAnimation=");
pw.println(mSkipAppTransitionAnimation);
pw.println("  Window Animator:");
mAnimator.dump(pw,"    ",dumpAll);
}
}
