{
  mInnerFields.mWallpaperMayChange=false;
  int changed=0;
  final int dw=mAppDisplayWidth;
  final int dh=mAppDisplayHeight;
  final ArrayList<WindowState> localmWindows=mWindows;
  int N=localmWindows.size();
  WindowState w=null;
  WindowState foundW=null;
  int foundI=0;
  WindowState topCurW=null;
  int topCurI=0;
  int windowDetachedI=-1;
  int i=N;
  while (i > 0) {
    i--;
    w=localmWindows.get(i);
    if ((w.mAttrs.type == WindowManager.LayoutParams.TYPE_WALLPAPER)) {
      if (topCurW == null) {
        topCurW=w;
        topCurI=i;
      }
      continue;
    }
    topCurW=null;
    if (w != mAnimator.mWindowDetachedWallpaper && w.mAppToken != null) {
      if (w.mAppToken.hidden && w.mAppToken.animation == null) {
        if (DEBUG_WALLPAPER)         Slog.v(TAG,"Skipping not hidden or animating token: " + w);
        continue;
      }
    }
    if (DEBUG_WALLPAPER)     Slog.v(TAG,"Win " + w + ": readyfordisplay="+ w.isReadyForDisplay()+ " drawpending="+ w.mWinAnimator.mDrawPending+ " commitdrawpending="+ w.mWinAnimator.mCommitDrawPending);
    if ((w.mAttrs.flags & FLAG_SHOW_WALLPAPER) != 0 && w.isReadyForDisplay() && (mWallpaperTarget == w || w.isDrawnLw())) {
      if (DEBUG_WALLPAPER)       Slog.v(TAG,"Found wallpaper activity: #" + i + "="+ w);
      foundW=w;
      foundI=i;
      if (w == mWallpaperTarget && ((w.mAppToken != null && w.mAppToken.animation != null) || w.mWinAnimator.mAnimation != null)) {
        if (DEBUG_WALLPAPER)         Slog.v(TAG,"Win " + w + ": token animating, looking behind.");
        continue;
      }
      break;
    }
 else     if (w == mAnimator.mWindowDetachedWallpaper) {
      windowDetachedI=i;
    }
  }
  if (foundW == null && windowDetachedI >= 0) {
    if (DEBUG_WALLPAPER)     Slog.v(TAG,"Found animating detached wallpaper activity: #" + i + "="+ w);
    foundW=w;
    foundI=windowDetachedI;
  }
  if (mNextAppTransition != WindowManagerPolicy.TRANSIT_UNSET) {
    if (mWallpaperTarget != null && mWallpaperTarget.mAppToken != null) {
      if (DEBUG_WALLPAPER)       Slog.v(TAG,"Wallpaper not changing: waiting for app anim in current target");
      return 0;
    }
    if (foundW != null && foundW.mAppToken != null) {
      if (DEBUG_WALLPAPER)       Slog.v(TAG,"Wallpaper not changing: waiting for app anim in found target");
      return 0;
    }
  }
  if (mWallpaperTarget != foundW) {
    if (DEBUG_WALLPAPER) {
      Slog.v(TAG,"New wallpaper target: " + foundW + " oldTarget: "+ mWallpaperTarget);
    }
    mLowerWallpaperTarget=null;
    mUpperWallpaperTarget=null;
    WindowState oldW=mWallpaperTarget;
    mWallpaperTarget=foundW;
    if (foundW != null && oldW != null) {
      boolean oldAnim=oldW.mWinAnimator.mAnimation != null || (oldW.mAppToken != null && oldW.mAppToken.animation != null);
      boolean foundAnim=foundW.mWinAnimator.mAnimation != null || (foundW.mAppToken != null && foundW.mAppToken.animation != null);
      if (DEBUG_WALLPAPER) {
        Slog.v(TAG,"New animation: " + foundAnim + " old animation: "+ oldAnim);
      }
      if (foundAnim && oldAnim) {
        int oldI=localmWindows.indexOf(oldW);
        if (DEBUG_WALLPAPER) {
          Slog.v(TAG,"New i: " + foundI + " old i: "+ oldI);
        }
        if (oldI >= 0) {
          if (DEBUG_WALLPAPER) {
            Slog.v(TAG,"Animating wallpapers: old#" + oldI + "="+ oldW+ "; new#"+ foundI+ "="+ foundW);
          }
          if (foundW.mAppToken != null && foundW.mAppToken.hiddenRequested) {
            if (DEBUG_WALLPAPER) {
              Slog.v(TAG,"Old wallpaper still the target.");
            }
            mWallpaperTarget=oldW;
          }
          if (foundI > oldI) {
            if (DEBUG_WALLPAPER) {
              Slog.v(TAG,"Found target above old target.");
            }
            mUpperWallpaperTarget=foundW;
            mLowerWallpaperTarget=oldW;
            foundW=oldW;
            foundI=oldI;
          }
 else {
            if (DEBUG_WALLPAPER) {
              Slog.v(TAG,"Found target below old target.");
            }
            mUpperWallpaperTarget=oldW;
            mLowerWallpaperTarget=foundW;
          }
        }
      }
    }
  }
 else   if (mLowerWallpaperTarget != null) {
    boolean lowerAnimating=mLowerWallpaperTarget.mWinAnimator.mAnimation != null || (mLowerWallpaperTarget.mAppToken != null && mLowerWallpaperTarget.mAppToken.animation != null);
    boolean upperAnimating=mUpperWallpaperTarget.mWinAnimator.mAnimation != null || (mUpperWallpaperTarget.mAppToken != null && mUpperWallpaperTarget.mAppToken.animation != null);
    if (!lowerAnimating || !upperAnimating) {
      if (DEBUG_WALLPAPER) {
        Slog.v(TAG,"No longer animating wallpaper targets!");
      }
      mLowerWallpaperTarget=null;
      mUpperWallpaperTarget=null;
    }
  }
  boolean visible=foundW != null;
  if (visible) {
    visible=isWallpaperVisible(foundW);
    if (DEBUG_WALLPAPER)     Slog.v(TAG,"Wallpaper visibility: " + visible);
    mWallpaperAnimLayerAdjustment=(mLowerWallpaperTarget == null && foundW.mAppToken != null) ? foundW.mAppToken.animLayerAdjustment : 0;
    final int maxLayer=mPolicy.getMaxWallpaperLayer() * TYPE_LAYER_MULTIPLIER + TYPE_LAYER_OFFSET;
    while (foundI > 0) {
      WindowState wb=localmWindows.get(foundI - 1);
      if (wb.mBaseLayer < maxLayer && wb.mAttachedWindow != foundW && (foundW.mAttachedWindow == null || wb.mAttachedWindow != foundW.mAttachedWindow) && (wb.mAttrs.type != TYPE_APPLICATION_STARTING || foundW.mToken == null || wb.mToken != foundW.mToken)) {
        break;
      }
      foundW=wb;
      foundI--;
    }
  }
 else {
    if (DEBUG_WALLPAPER)     Slog.v(TAG,"No wallpaper target");
  }
  if (foundW == null && topCurW != null) {
    foundW=topCurW;
    foundI=topCurI + 1;
  }
 else {
    foundW=foundI > 0 ? localmWindows.get(foundI - 1) : null;
  }
  if (visible) {
    if (mWallpaperTarget.mWallpaperX >= 0) {
      mLastWallpaperX=mWallpaperTarget.mWallpaperX;
      mLastWallpaperXStep=mWallpaperTarget.mWallpaperXStep;
    }
    if (mWallpaperTarget.mWallpaperY >= 0) {
      mLastWallpaperY=mWallpaperTarget.mWallpaperY;
      mLastWallpaperYStep=mWallpaperTarget.mWallpaperYStep;
    }
  }
  int curTokenIndex=mWallpaperTokens.size();
  while (curTokenIndex > 0) {
    curTokenIndex--;
    WindowToken token=mWallpaperTokens.get(curTokenIndex);
    if (token.hidden == visible) {
      changed|=ADJUST_WALLPAPER_VISIBILITY_CHANGED;
      token.hidden=!visible;
      mLayoutNeeded=true;
    }
    int curWallpaperIndex=token.windows.size();
    while (curWallpaperIndex > 0) {
      curWallpaperIndex--;
      WindowState wallpaper=token.windows.get(curWallpaperIndex);
      if (visible) {
        updateWallpaperOffsetLocked(wallpaper,dw,dh,false);
      }
      if (wallpaper.mWallpaperVisible != visible) {
        wallpaper.mWallpaperVisible=visible;
        try {
          if (DEBUG_VISIBILITY || DEBUG_WALLPAPER)           Slog.v(TAG,"Setting visibility of wallpaper " + wallpaper + ": "+ visible);
          wallpaper.mClient.dispatchAppVisibility(visible);
        }
 catch (        RemoteException e) {
        }
      }
      wallpaper.mWinAnimator.mAnimLayer=wallpaper.mLayer + mWallpaperAnimLayerAdjustment;
      if (DEBUG_LAYERS || DEBUG_WALLPAPER)       Slog.v(TAG,"Wallpaper win " + wallpaper + " anim layer: "+ wallpaper.mWinAnimator.mAnimLayer);
      if (wallpaper == foundW) {
        foundI--;
        foundW=foundI > 0 ? localmWindows.get(foundI - 1) : null;
        continue;
      }
      int oldIndex=localmWindows.indexOf(wallpaper);
      if (oldIndex >= 0) {
        if (DEBUG_WINDOW_MOVEMENT)         Slog.v(TAG,"Wallpaper removing at " + oldIndex + ": "+ wallpaper);
        localmWindows.remove(oldIndex);
        mWindowsChanged=true;
        if (oldIndex < foundI) {
          foundI--;
        }
      }
      if (DEBUG_WALLPAPER || DEBUG_WINDOW_MOVEMENT || DEBUG_ADD_REMOVE) {
        Slog.v(TAG,"Moving wallpaper " + wallpaper + " from "+ oldIndex+ " to "+ foundI);
      }
      localmWindows.add(foundI,wallpaper);
      mWindowsChanged=true;
      changed|=ADJUST_WALLPAPER_LAYERS_CHANGED;
    }
  }
  return changed;
}
