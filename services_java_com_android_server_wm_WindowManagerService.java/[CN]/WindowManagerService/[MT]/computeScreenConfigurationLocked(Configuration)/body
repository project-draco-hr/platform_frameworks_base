{
  if (mDisplay == null) {
    return false;
  }
  final DisplayContent displayContent=getDefaultDisplayContent();
  final boolean rotated=(mRotation == Surface.ROTATION_90 || mRotation == Surface.ROTATION_270);
  final int realdw=rotated ? displayContent.mBaseDisplayHeight : displayContent.mBaseDisplayWidth;
  final int realdh=rotated ? displayContent.mBaseDisplayWidth : displayContent.mBaseDisplayHeight;
  int dw=realdw;
  int dh=realdh;
  if (mAltOrientation) {
    if (realdw > realdh) {
      int maxw=(int)(realdh / 1.3f);
      if (maxw < realdw) {
        dw=maxw;
      }
    }
 else {
      int maxh=(int)(realdw / 1.3f);
      if (maxh < realdh) {
        dh=maxh;
      }
    }
  }
  if (config != null) {
    int orientation=Configuration.ORIENTATION_SQUARE;
    if (dw < dh) {
      orientation=Configuration.ORIENTATION_PORTRAIT;
    }
 else     if (dw > dh) {
      orientation=Configuration.ORIENTATION_LANDSCAPE;
    }
    config.orientation=orientation;
  }
  final int appWidth=mPolicy.getNonDecorDisplayWidth(dw,dh,mRotation);
  final int appHeight=mPolicy.getNonDecorDisplayHeight(dw,dh,mRotation);
  final DisplayInfo displayInfo=displayContent.getDisplayInfo();
synchronized (displayContent.mDisplaySizeLock) {
    displayInfo.rotation=mRotation;
    displayInfo.logicalWidth=dw;
    displayInfo.logicalHeight=dh;
    displayInfo.logicalDensityDpi=displayContent.mBaseDisplayDensity;
    displayInfo.appWidth=appWidth;
    displayInfo.appHeight=appHeight;
    displayInfo.getLogicalMetrics(mRealDisplayMetrics,null);
    displayInfo.getAppMetrics(mDisplayMetrics,null);
    mDisplayManager.setDisplayInfo(displayContent.getDisplayId(),displayInfo);
    mAnimator.setDisplayDimensions(dw,dh,appWidth,appHeight);
  }
  if (false) {
    Slog.i(TAG,"Set app display size: " + appWidth + " x "+ appHeight);
  }
  final DisplayMetrics dm=mDisplayMetrics;
  mCompatibleScreenScale=CompatibilityInfo.computeCompatibleScaling(dm,mCompatDisplayMetrics);
  if (config != null) {
    config.screenWidthDp=(int)(mPolicy.getConfigDisplayWidth(dw,dh,mRotation) / dm.density);
    config.screenHeightDp=(int)(mPolicy.getConfigDisplayHeight(dw,dh,mRotation) / dm.density);
    computeSizeRangesAndScreenLayout(displayInfo,rotated,dw,dh,dm.density,config);
    config.compatScreenWidthDp=(int)(config.screenWidthDp / mCompatibleScreenScale);
    config.compatScreenHeightDp=(int)(config.screenHeightDp / mCompatibleScreenScale);
    config.compatSmallestScreenWidthDp=computeCompatSmallestWidth(rotated,dm,dw,dh);
    config.densityDpi=displayContent.mBaseDisplayDensity;
    config.touchscreen=Configuration.TOUCHSCREEN_NOTOUCH;
    config.keyboard=Configuration.KEYBOARD_NOKEYS;
    config.navigation=Configuration.NAVIGATION_NONAV;
    int keyboardPresence=0;
    int navigationPresence=0;
    final InputDevice[] devices=mInputManager.getInputDevices();
    final int len=devices.length;
    for (int i=0; i < len; i++) {
      InputDevice device=devices[i];
      if (!device.isVirtual()) {
        final int sources=device.getSources();
        final int presenceFlag=device.isExternal() ? WindowManagerPolicy.PRESENCE_EXTERNAL : WindowManagerPolicy.PRESENCE_INTERNAL;
        if (mIsTouchDevice) {
          if ((sources & InputDevice.SOURCE_TOUCHSCREEN) == InputDevice.SOURCE_TOUCHSCREEN) {
            config.touchscreen=Configuration.TOUCHSCREEN_FINGER;
          }
        }
 else {
          config.touchscreen=Configuration.TOUCHSCREEN_NOTOUCH;
        }
        if ((sources & InputDevice.SOURCE_TRACKBALL) == InputDevice.SOURCE_TRACKBALL) {
          config.navigation=Configuration.NAVIGATION_TRACKBALL;
          navigationPresence|=presenceFlag;
        }
 else         if ((sources & InputDevice.SOURCE_DPAD) == InputDevice.SOURCE_DPAD && config.navigation == Configuration.NAVIGATION_NONAV) {
          config.navigation=Configuration.NAVIGATION_DPAD;
          navigationPresence|=presenceFlag;
        }
        if (device.getKeyboardType() == InputDevice.KEYBOARD_TYPE_ALPHABETIC) {
          config.keyboard=Configuration.KEYBOARD_QWERTY;
          keyboardPresence|=presenceFlag;
        }
      }
    }
    boolean hardKeyboardAvailable=config.keyboard != Configuration.KEYBOARD_NOKEYS;
    if (hardKeyboardAvailable != mHardKeyboardAvailable) {
      mHardKeyboardAvailable=hardKeyboardAvailable;
      mHardKeyboardEnabled=hardKeyboardAvailable;
      mH.removeMessages(H.REPORT_HARD_KEYBOARD_STATUS_CHANGE);
      mH.sendEmptyMessage(H.REPORT_HARD_KEYBOARD_STATUS_CHANGE);
    }
    if (!mHardKeyboardEnabled) {
      config.keyboard=Configuration.KEYBOARD_NOKEYS;
    }
    config.keyboardHidden=Configuration.KEYBOARDHIDDEN_NO;
    config.hardKeyboardHidden=Configuration.HARDKEYBOARDHIDDEN_NO;
    config.navigationHidden=Configuration.NAVIGATIONHIDDEN_NO;
    mPolicy.adjustConfigurationLw(config,keyboardPresence,navigationPresence);
  }
  return true;
}
