{
  boolean displayed=false;
  w.computeShownFrameLocked();
  int width, height;
  if ((w.mAttrs.flags & w.mAttrs.FLAG_SCALED) != 0) {
    width=w.mRequestedWidth;
    height=w.mRequestedHeight;
  }
 else {
    width=w.mCompatFrame.width();
    height=w.mCompatFrame.height();
  }
  if (width < 1) {
    width=1;
  }
  if (height < 1) {
    height=1;
  }
  final boolean surfaceResized=w.mSurfaceW != width || w.mSurfaceH != height;
  if (surfaceResized) {
    w.mSurfaceW=width;
    w.mSurfaceH=height;
  }
  if (w.mSurfaceX != w.mShownFrame.left || w.mSurfaceY != w.mShownFrame.top) {
    try {
      if (SHOW_TRANSACTIONS)       logSurface(w,"POS " + w.mShownFrame.left + ", "+ w.mShownFrame.top,null);
      w.mSurfaceX=w.mShownFrame.left;
      w.mSurfaceY=w.mShownFrame.top;
      w.mSurface.setPosition(w.mShownFrame.left,w.mShownFrame.top);
    }
 catch (    RuntimeException e) {
      Slog.w(TAG,"Error positioning surface of " + w + " pos=("+ w.mShownFrame.left+ ","+ w.mShownFrame.top+ ")",e);
      if (!recoveringMemory) {
        reclaimSomeSurfaceMemoryLocked(w,"position",true);
      }
    }
  }
  if (surfaceResized) {
    try {
      if (SHOW_TRANSACTIONS)       logSurface(w,"SIZE " + width + "x"+ height,null);
      w.mSurfaceResized=true;
      w.mSurface.setSize(width,height);
    }
 catch (    RuntimeException e) {
      Slog.e(TAG,"Error resizing surface of " + w + " size=("+ width+ "x"+ height+ ")",e);
      if (!recoveringMemory) {
        reclaimSomeSurfaceMemoryLocked(w,"size",true);
      }
    }
  }
  if (!w.mAppFreezing && w.mLayoutSeq == mLayoutSeq) {
    w.mContentInsetsChanged|=!w.mLastContentInsets.equals(w.mContentInsets);
    w.mVisibleInsetsChanged|=!w.mLastVisibleInsets.equals(w.mVisibleInsets);
    boolean configChanged=w.mConfiguration != mCurConfiguration && (w.mConfiguration == null || mCurConfiguration.diff(w.mConfiguration) != 0);
    if (DEBUG_CONFIGURATION && configChanged) {
      Slog.v(TAG,"Win " + w + " config changed: "+ mCurConfiguration);
    }
    if (localLOGV)     Slog.v(TAG,"Resizing " + w + ": configChanged="+ configChanged+ " last="+ w.mLastFrame+ " frame="+ w.mFrame);
    w.mLastFrame.set(w.mFrame);
    if (w.mContentInsetsChanged || w.mVisibleInsetsChanged || w.mSurfaceResized|| configChanged) {
      if (DEBUG_RESIZE || DEBUG_ORIENTATION) {
        Slog.v(TAG,"Resize reasons: " + " contentInsetsChanged=" + w.mContentInsetsChanged + " visibleInsetsChanged="+ w.mVisibleInsetsChanged+ " surfaceResized="+ w.mSurfaceResized+ " configChanged="+ configChanged);
      }
      w.mLastContentInsets.set(w.mContentInsets);
      w.mLastVisibleInsets.set(w.mVisibleInsets);
      makeWindowFreezingScreenIfNeededLocked(w);
      if (w.mOrientationChanging) {
        if (DEBUG_ORIENTATION)         Slog.v(TAG,"Orientation start waiting for draw in " + w + ", surface "+ w.mSurface);
        w.mDrawPending=true;
        w.mCommitDrawPending=false;
        w.mReadyToShow=false;
        if (w.mAppToken != null) {
          w.mAppToken.allDrawn=false;
        }
      }
      if (!mResizingWindows.contains(w)) {
        if (DEBUG_RESIZE || DEBUG_ORIENTATION)         Slog.v(TAG,"Resizing window " + w + " to "+ w.mSurfaceW+ "x"+ w.mSurfaceH);
        mResizingWindows.add(w);
      }
    }
 else     if (w.mOrientationChanging) {
      if (!w.mDrawPending && !w.mCommitDrawPending) {
        if (DEBUG_ORIENTATION)         Slog.v(TAG,"Orientation not waiting for draw in " + w + ", surface "+ w.mSurface);
        w.mOrientationChanging=false;
      }
    }
  }
  if (w.mAttachedHidden || !w.isReadyForDisplay()) {
    if (!w.mLastHidden) {
      w.mLastHidden=true;
      if (SHOW_TRANSACTIONS)       logSurface(w,"HIDE (performLayout)",null);
      if (w.mSurface != null) {
        w.mSurfaceShown=false;
        try {
          w.mSurface.hide();
        }
 catch (        RuntimeException e) {
          Slog.w(TAG,"Exception hiding surface in " + w);
        }
      }
    }
    if (w.mOrientationChanging) {
      w.mOrientationChanging=false;
      if (DEBUG_ORIENTATION)       Slog.v(TAG,"Orientation change skips hidden " + w);
    }
  }
 else   if (w.mLastLayer != w.mAnimLayer || w.mLastAlpha != w.mShownAlpha || w.mLastDsDx != w.mDsDx || w.mLastDtDx != w.mDtDx || w.mLastDsDy != w.mDsDy || w.mLastDtDy != w.mDtDy || w.mLastHScale != w.mHScale || w.mLastVScale != w.mVScale || w.mLastHidden) {
    displayed=true;
    w.mLastAlpha=w.mShownAlpha;
    w.mLastLayer=w.mAnimLayer;
    w.mLastDsDx=w.mDsDx;
    w.mLastDtDx=w.mDtDx;
    w.mLastDsDy=w.mDsDy;
    w.mLastDtDy=w.mDtDy;
    w.mLastHScale=w.mHScale;
    w.mLastVScale=w.mVScale;
    if (SHOW_TRANSACTIONS)     logSurface(w,"alpha=" + w.mShownAlpha + " layer="+ w.mAnimLayer+ " matrix=["+ (w.mDsDx * w.mHScale)+ ","+ (w.mDtDx * w.mVScale)+ "]["+ (w.mDsDy * w.mHScale)+ ","+ (w.mDtDy * w.mVScale)+ "]",null);
    if (w.mSurface != null) {
      try {
        w.mSurfaceAlpha=w.mShownAlpha;
        w.mSurface.setAlpha(w.mShownAlpha);
        w.mSurfaceLayer=w.mAnimLayer;
        w.mSurface.setLayer(w.mAnimLayer);
        w.mSurface.setMatrix(w.mDsDx * w.mHScale,w.mDtDx * w.mVScale,w.mDsDy * w.mHScale,w.mDtDy * w.mVScale);
      }
 catch (      RuntimeException e) {
        Slog.w(TAG,"Error updating surface in " + w,e);
        if (!recoveringMemory) {
          reclaimSomeSurfaceMemoryLocked(w,"update",true);
        }
      }
    }
    if (w.mLastHidden && !w.mDrawPending && !w.mCommitDrawPending&& !w.mReadyToShow) {
      if (SHOW_TRANSACTIONS)       logSurface(w,"SHOW (performLayout)",null);
      if (DEBUG_VISIBILITY)       Slog.v(TAG,"Showing " + w + " during relayout");
      if (showSurfaceRobustlyLocked(w)) {
        w.mHasDrawn=true;
        w.mLastHidden=false;
      }
 else {
        w.mOrientationChanging=false;
      }
    }
    if (w.mSurface != null) {
      w.mToken.hasVisible=true;
    }
  }
 else {
    displayed=true;
  }
  if (displayed) {
    if (w.mOrientationChanging) {
      if (w.mDrawPending || w.mCommitDrawPending) {
        mInnerFields.mOrientationChangeComplete=false;
        if (DEBUG_ORIENTATION)         Slog.v(TAG,"Orientation continue waiting for draw in " + w);
      }
 else {
        w.mOrientationChanging=false;
        if (DEBUG_ORIENTATION)         Slog.v(TAG,"Orientation change complete in " + w);
      }
    }
    w.mToken.hasVisible=true;
  }
}
