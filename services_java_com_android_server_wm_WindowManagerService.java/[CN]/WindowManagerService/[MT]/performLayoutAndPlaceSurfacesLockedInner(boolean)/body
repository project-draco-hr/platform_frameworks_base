{
  if (mDisplay == null) {
    Slog.i(TAG,"skipping performLayoutAndPlaceSurfacesLockedInner with no mDisplay");
    return;
  }
  final long currentTime=SystemClock.uptimeMillis();
  final int dw=mCurDisplayWidth;
  final int dh=mCurDisplayHeight;
  final int innerDw=mAppDisplayWidth;
  final int innerDh=mAppDisplayHeight;
  int i;
  if (mFocusMayChange) {
    mFocusMayChange=false;
    updateFocusedWindowLocked(UPDATE_FOCUS_WILL_PLACE_SURFACES,false);
  }
  for (i=mExitingTokens.size() - 1; i >= 0; i--) {
    mExitingTokens.get(i).hasVisible=false;
  }
  for (i=mExitingAppTokens.size() - 1; i >= 0; i--) {
    mExitingAppTokens.get(i).hasVisible=false;
  }
  mInnerFields.mHoldScreen=null;
  mInnerFields.mScreenBrightness=-1;
  mInnerFields.mButtonBrightness=-1;
  boolean focusDisplayed=false;
  mAnimator.mAnimating=false;
  boolean createWatermark=false;
  if (mFxSession == null) {
    mFxSession=new SurfaceSession();
    createWatermark=true;
  }
  if (SHOW_LIGHT_TRANSACTIONS)   Slog.i(TAG,">>> OPEN TRANSACTION performLayoutAndPlaceSurfaces");
  Surface.openTransaction();
  if (createWatermark) {
    createWatermark();
  }
  if (mWatermark != null) {
    mWatermark.positionSurface(dw,dh);
  }
  if (mStrictModeFlash != null) {
    mStrictModeFlash.positionSurface(dw,dh);
  }
  try {
    int repeats=0;
    do {
      repeats++;
      if (repeats > 6) {
        Slog.w(TAG,"Animation repeat aborted after too many iterations");
        mLayoutNeeded=false;
        break;
      }
      if (DEBUG_LAYOUT_REPEATS)       debugLayoutRepeats("On entry to LockedInner",mPendingLayoutChanges);
      if ((mPendingLayoutChanges & WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER) != 0) {
        if ((adjustWallpaperWindowsLocked() & ADJUST_WALLPAPER_LAYERS_CHANGED) != 0) {
          assignLayersLocked();
          mLayoutNeeded=true;
        }
      }
      if ((mPendingLayoutChanges & WindowManagerPolicy.FINISH_LAYOUT_REDO_CONFIG) != 0) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,"Computing new config from layout");
        if (updateOrientationFromAppTokensLocked(true)) {
          mLayoutNeeded=true;
          mH.sendEmptyMessage(H.SEND_NEW_CONFIGURATION);
        }
      }
      if ((mPendingLayoutChanges & WindowManagerPolicy.FINISH_LAYOUT_REDO_LAYOUT) != 0) {
        mLayoutNeeded=true;
      }
      if (repeats < 4) {
        performLayoutLockedInner(repeats == 1,false);
      }
 else {
        Slog.w(TAG,"Layout repeat skipped after too many iterations");
      }
      mPendingLayoutChanges=0;
      if (DEBUG_LAYOUT_REPEATS)       debugLayoutRepeats("loop number " + mLayoutRepeatCount,mPendingLayoutChanges);
      mPolicy.beginAnimationLw(dw,dh);
      for (i=mWindows.size() - 1; i >= 0; i--) {
        WindowState w=mWindows.get(i);
        if (w.mHasSurface) {
          mPolicy.animatingWindowLw(w,w.mAttrs);
        }
      }
      mPendingLayoutChanges|=mPolicy.finishAnimationLw();
      if (DEBUG_LAYOUT_REPEATS)       debugLayoutRepeats("after finishAnimationLw",mPendingLayoutChanges);
    }
 while (mPendingLayoutChanges != 0);
    final boolean someoneLosingFocus=!mLosingFocus.isEmpty();
    mInnerFields.mObscured=false;
    mInnerFields.mDimming=false;
    mInnerFields.mSyswin=false;
    final int N=mWindows.size();
    for (i=N - 1; i >= 0; i--) {
      WindowState w=mWindows.get(i);
      if (someoneLosingFocus && w == mCurrentFocus && w.isDisplayedLw()) {
        focusDisplayed=true;
      }
      final boolean obscuredChanged=w.mObscured != mInnerFields.mObscured;
      w.mObscured=mInnerFields.mObscured;
      if (!mInnerFields.mObscured) {
        handleNotObscuredLocked(w,currentTime,innerDw,innerDh);
      }
      if (obscuredChanged && mWallpaperTarget == w) {
        updateWallpaperVisibilityLocked();
      }
    }
    if (!mInnerFields.mDimming && mAnimator.mDimParams != null) {
      mAnimator.stopDimming();
    }
  }
 catch (  RuntimeException e) {
    Log.wtf(TAG,"Unhandled exception in Window Manager",e);
  }
 finally {
    Surface.closeTransaction();
  }
  if (mAppTransitionReady) {
    mPendingLayoutChanges|=handleAppTransitionReadyLocked();
    if (DEBUG_LAYOUT_REPEATS)     debugLayoutRepeats("after handleAppTransitionReadyLocked",mPendingLayoutChanges);
  }
  mInnerFields.mAdjResult=0;
  if (!mAnimator.mAnimating && mAppTransitionRunning) {
    mPendingLayoutChanges|=handleAnimatingStoppedAndTransitionLocked();
    if (DEBUG_LAYOUT_REPEATS)     debugLayoutRepeats("after handleAnimStopAndXitionLock",mPendingLayoutChanges);
  }
  if (mInnerFields.mWallpaperForceHidingChanged && mPendingLayoutChanges == 0 && !mAppTransitionReady) {
    mPendingLayoutChanges|=animateAwayWallpaperLocked();
    if (DEBUG_LAYOUT_REPEATS)     debugLayoutRepeats("after animateAwayWallpaperLocked",mPendingLayoutChanges);
  }
  mInnerFields.mWallpaperForceHidingChanged=false;
  if (mInnerFields.mWallpaperMayChange) {
    if (WindowManagerService.DEBUG_WALLPAPER)     Slog.v(TAG,"Wallpaper may change!  Adjusting");
    mInnerFields.mAdjResult|=adjustWallpaperWindowsLocked();
  }
  if ((mInnerFields.mAdjResult & ADJUST_WALLPAPER_LAYERS_CHANGED) != 0) {
    if (DEBUG_WALLPAPER)     Slog.v(TAG,"Wallpaper layer changed: assigning layers + relayout");
    mPendingLayoutChanges|=PhoneWindowManager.FINISH_LAYOUT_REDO_LAYOUT;
    assignLayersLocked();
  }
 else   if ((mInnerFields.mAdjResult & ADJUST_WALLPAPER_VISIBILITY_CHANGED) != 0) {
    if (DEBUG_WALLPAPER)     Slog.v(TAG,"Wallpaper visibility changed: relayout");
    mPendingLayoutChanges|=PhoneWindowManager.FINISH_LAYOUT_REDO_LAYOUT;
  }
  if (mFocusMayChange) {
    mFocusMayChange=false;
    if (updateFocusedWindowLocked(UPDATE_FOCUS_PLACING_SURFACES,false)) {
      mPendingLayoutChanges|=PhoneWindowManager.FINISH_LAYOUT_REDO_ANIM;
      mInnerFields.mAdjResult=0;
    }
  }
  if (mLayoutNeeded) {
    mPendingLayoutChanges|=PhoneWindowManager.FINISH_LAYOUT_REDO_LAYOUT;
    if (DEBUG_LAYOUT_REPEATS)     debugLayoutRepeats("mLayoutNeeded",mPendingLayoutChanges);
  }
  final int N=mWindows.size();
  for (i=N - 1; i >= 0; i--) {
    final WindowState w=mWindows.get(i);
    final WindowStateAnimator winAnimator=w.mWinAnimator;
    if (w.mHasSurface && w.shouldAnimateMove()) {
      Animation a=AnimationUtils.loadAnimation(mContext,com.android.internal.R.anim.window_move_from_decor);
      winAnimator.setAnimation(a);
      winAnimator.mAnimDw=w.mLastFrame.left - w.mFrame.left;
      winAnimator.mAnimDh=w.mLastFrame.top - w.mFrame.top;
    }
 else {
      winAnimator.mAnimDw=innerDw;
      winAnimator.mAnimDh=innerDh;
    }
    w.mContentChanged=false;
    updateResizingWindows(w);
    if (w.mHasSurface) {
      if (winAnimator.commitFinishDrawingLocked(currentTime)) {
        if ((w.mAttrs.flags & WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER) != 0) {
          if (WindowManagerService.DEBUG_WALLPAPER)           Slog.v(TAG,"First draw done in potential wallpaper target " + w);
          mInnerFields.mWallpaperMayChange=true;
          mPendingLayoutChanges|=WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER;
          if (WindowManagerService.DEBUG_LAYOUT_REPEATS) {
            debugLayoutRepeats("updateWindowsAndWallpaperLocked 1",mPendingLayoutChanges);
          }
        }
      }
    }
  }
  mAnimator.animate();
  mPendingLayoutChanges|=mAnimator.mPendingLayoutChanges;
  if (DEBUG_LAYOUT_REPEATS)   debugLayoutRepeats("after animate()",mPendingLayoutChanges);
  if (SHOW_LIGHT_TRANSACTIONS)   Slog.i(TAG,"<<< CLOSE TRANSACTION performLayoutAndPlaceSurfaces");
  if (mWatermark != null) {
    mWatermark.drawIfNeeded();
  }
  if (DEBUG_ORIENTATION && mDisplayFrozen)   Slog.v(TAG,"With display frozen, orientationChangeComplete=" + mInnerFields.mOrientationChangeComplete);
  if (mInnerFields.mOrientationChangeComplete) {
    if (mWindowsFreezingScreen) {
      mWindowsFreezingScreen=false;
      mH.removeMessages(H.WINDOW_FREEZE_TIMEOUT);
    }
    stopFreezingDisplayLocked();
  }
  if (!mResizingWindows.isEmpty()) {
    for (i=mResizingWindows.size() - 1; i >= 0; i--) {
      WindowState win=mResizingWindows.get(i);
      final WindowStateAnimator winAnimator=win.mWinAnimator;
      try {
        if (DEBUG_RESIZE || DEBUG_ORIENTATION)         Slog.v(TAG,"Reporting new frame to " + win + ": "+ win.mCompatFrame);
        int diff=0;
        boolean configChanged=win.mConfiguration != mCurConfiguration && (win.mConfiguration == null || (diff=mCurConfiguration.diff(win.mConfiguration)) != 0);
        if ((DEBUG_RESIZE || DEBUG_ORIENTATION || DEBUG_CONFIGURATION) && configChanged) {
          Slog.i(TAG,"Sending new config to window " + win + ": "+ winAnimator.mSurfaceW+ "x"+ winAnimator.mSurfaceH+ " / "+ mCurConfiguration+ " / 0x"+ Integer.toHexString(diff));
        }
        win.mConfiguration=mCurConfiguration;
        if (DEBUG_ORIENTATION && winAnimator.mDrawState == WindowStateAnimator.DRAW_PENDING)         Slog.i(TAG,"Resizing " + win + " WITH DRAW PENDING");
        win.mClient.resized((int)winAnimator.mSurfaceW,(int)winAnimator.mSurfaceH,win.mLastContentInsets,win.mLastVisibleInsets,winAnimator.mDrawState == WindowStateAnimator.DRAW_PENDING,configChanged ? win.mConfiguration : null);
        win.mContentInsetsChanged=false;
        win.mVisibleInsetsChanged=false;
        winAnimator.mSurfaceResized=false;
      }
 catch (      RemoteException e) {
        win.mOrientationChanging=false;
      }
    }
    mResizingWindows.clear();
  }
  boolean wallpaperDestroyed=false;
  i=mDestroySurface.size();
  if (i > 0) {
    do {
      i--;
      WindowState win=mDestroySurface.get(i);
      win.mDestroying=false;
      if (mInputMethodWindow == win) {
        mInputMethodWindow=null;
      }
      if (win == mWallpaperTarget) {
        wallpaperDestroyed=true;
      }
      win.mWinAnimator.destroySurfaceLocked();
    }
 while (i > 0);
    mDestroySurface.clear();
  }
  for (i=mExitingTokens.size() - 1; i >= 0; i--) {
    WindowToken token=mExitingTokens.get(i);
    if (!token.hasVisible) {
      mExitingTokens.remove(i);
      if (token.windowType == TYPE_WALLPAPER) {
        mWallpaperTokens.remove(token);
      }
    }
  }
  for (i=mExitingAppTokens.size() - 1; i >= 0; i--) {
    AppWindowToken token=mExitingAppTokens.get(i);
    if (!token.hasVisible && !mClosingApps.contains(token)) {
      token.mAppAnimator.clearAnimation();
      token.mAppAnimator.animating=false;
      if (DEBUG_ADD_REMOVE || DEBUG_TOKEN_MOVEMENT)       Slog.v(TAG,"performLayout: App token exiting now removed" + token);
      mAppTokens.remove(token);
      mExitingAppTokens.remove(i);
    }
  }
  if (!mAnimator.mAnimating && mAppTransitionRunning) {
    mAppTransitionRunning=false;
    mLayoutNeeded=true;
    rebuildAppWindowListLocked();
    assignLayersLocked();
    mToBottomApps.clear();
  }
  if (focusDisplayed) {
    mH.sendEmptyMessage(H.REPORT_LOSING_FOCUS);
  }
  if (wallpaperDestroyed) {
    mLayoutNeeded|=adjustWallpaperWindowsLocked() != 0;
  }
  if (mPendingLayoutChanges != 0) {
    mLayoutNeeded=true;
  }
  mInputMonitor.updateInputWindowsLw(true);
  setHoldScreenLocked(mInnerFields.mHoldScreen != null);
  if (!mDisplayFrozen) {
    if (mInnerFields.mScreenBrightness < 0 || mInnerFields.mScreenBrightness > 1.0f) {
      mPowerManager.setScreenBrightnessOverride(-1);
    }
 else {
      mPowerManager.setScreenBrightnessOverride((int)(mInnerFields.mScreenBrightness * Power.BRIGHTNESS_ON));
    }
    if (mInnerFields.mButtonBrightness < 0 || mInnerFields.mButtonBrightness > 1.0f) {
      mPowerManager.setButtonBrightnessOverride(-1);
    }
 else {
      mPowerManager.setButtonBrightnessOverride((int)(mInnerFields.mButtonBrightness * Power.BRIGHTNESS_ON));
    }
  }
  if (mInnerFields.mHoldScreen != mHoldingScreenOn) {
    mHoldingScreenOn=mInnerFields.mHoldScreen;
    Message m=mH.obtainMessage(H.HOLD_SCREEN_CHANGED,mInnerFields.mHoldScreen);
    mH.sendMessage(m);
  }
  if (mTurnOnScreen) {
    if (DEBUG_VISIBILITY)     Slog.v(TAG,"Turning screen on after layout!");
    mPowerManager.userActivity(SystemClock.uptimeMillis(),false,LocalPowerManager.BUTTON_EVENT,true);
    mTurnOnScreen=false;
  }
  if (mInnerFields.mUpdateRotation) {
    if (DEBUG_ORIENTATION)     Slog.d(TAG,"Performing post-rotate rotation");
    if (updateRotationUncheckedLocked(false)) {
      mH.sendEmptyMessage(H.SEND_NEW_CONFIGURATION);
    }
 else {
      mInnerFields.mUpdateRotation=false;
    }
  }
  if (mInnerFields.mOrientationChangeComplete && !mLayoutNeeded && !mInnerFields.mUpdateRotation) {
    checkDrawnWindowsLocked();
  }
  enableScreenIfNeededLocked();
}
