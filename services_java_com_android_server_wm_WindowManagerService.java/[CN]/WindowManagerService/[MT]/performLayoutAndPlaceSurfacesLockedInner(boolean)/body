{
  if (DEBUG_WINDOW_TRACE) {
    Slog.v(TAG,"performLayoutAndPlaceSurfacesLockedInner: entry. Called by " + Debug.getCallers(3));
  }
  final long currentTime=SystemClock.uptimeMillis();
  int i;
  if (mFocusMayChange) {
    mFocusMayChange=false;
    updateFocusedWindowLocked(UPDATE_FOCUS_WILL_PLACE_SURFACES,false);
  }
  for (i=mExitingTokens.size() - 1; i >= 0; i--) {
    mExitingTokens.get(i).hasVisible=false;
  }
  for (i=mExitingAppTokens.size() - 1; i >= 0; i--) {
    mExitingAppTokens.get(i).hasVisible=false;
  }
  mInnerFields.mHoldScreen=null;
  mInnerFields.mScreenBrightness=-1;
  mInnerFields.mButtonBrightness=-1;
  mInnerFields.mUserActivityTimeout=-1;
  mInnerFields.mDisplayHasContent=LayoutFields.DISPLAY_CONTENT_UNKNOWN;
  mTransactionSequence++;
  final DisplayContent defaultDisplay=getDefaultDisplayContentLocked();
  final DisplayInfo defaultInfo=defaultDisplay.getDisplayInfo();
  final int defaultDw=defaultInfo.logicalWidth;
  final int defaultDh=defaultInfo.logicalHeight;
  if (SHOW_LIGHT_TRANSACTIONS)   Slog.i(TAG,">>> OPEN TRANSACTION performLayoutAndPlaceSurfaces");
  Surface.openTransaction();
  try {
    if (mWatermark != null) {
      mWatermark.positionSurface(defaultDw,defaultDh);
    }
    if (mStrictModeFlash != null) {
      mStrictModeFlash.positionSurface(defaultDw,defaultDh);
    }
    boolean focusDisplayed=false;
    boolean updateAllDrawn=false;
    DisplayContentsIterator iterator=new DisplayContentsIterator();
    while (iterator.hasNext()) {
      final DisplayContent displayContent=iterator.next();
      WindowList windows=displayContent.getWindowList();
      DisplayInfo displayInfo=displayContent.getDisplayInfo();
      final int displayId=displayContent.getDisplayId();
      final int dw=displayInfo.logicalWidth;
      final int dh=displayInfo.logicalHeight;
      final int innerDw=displayInfo.appWidth;
      final int innerDh=displayInfo.appHeight;
      final boolean isDefaultDisplay=(displayId == Display.DEFAULT_DISPLAY);
      if (mInnerFields.mDisplayHasContent != LayoutFields.DISPLAY_CONTENT_MIRROR) {
        mInnerFields.mDisplayHasContent=LayoutFields.DISPLAY_CONTENT_UNKNOWN;
      }
      int repeats=0;
      do {
        repeats++;
        if (repeats > 6) {
          Slog.w(TAG,"Animation repeat aborted after too many iterations");
          displayContent.layoutNeeded=false;
          break;
        }
        if (DEBUG_LAYOUT_REPEATS)         debugLayoutRepeats("On entry to LockedInner",displayContent.pendingLayoutChanges);
        if (isDefaultDisplay && ((displayContent.pendingLayoutChanges & WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER) != 0) && ((adjustWallpaperWindowsLocked() & ADJUST_WALLPAPER_LAYERS_CHANGED) != 0)) {
          assignLayersLocked(windows);
          displayContent.layoutNeeded=true;
        }
        if (isDefaultDisplay && (displayContent.pendingLayoutChanges & WindowManagerPolicy.FINISH_LAYOUT_REDO_CONFIG) != 0) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,"Computing new config from layout");
          if (updateOrientationFromAppTokensLocked(true)) {
            displayContent.layoutNeeded=true;
            mH.sendEmptyMessage(H.SEND_NEW_CONFIGURATION);
          }
        }
        if ((displayContent.pendingLayoutChanges & WindowManagerPolicy.FINISH_LAYOUT_REDO_LAYOUT) != 0) {
          displayContent.layoutNeeded=true;
        }
        if (repeats < 4) {
          performLayoutLockedInner(displayContent,repeats == 1,false);
        }
 else {
          Slog.w(TAG,"Layout repeat skipped after too many iterations");
        }
        displayContent.pendingLayoutChanges=0;
        if (DEBUG_LAYOUT_REPEATS)         debugLayoutRepeats("loop number " + mLayoutRepeatCount,displayContent.pendingLayoutChanges);
        if (isDefaultDisplay) {
          mPolicy.beginPostLayoutPolicyLw(dw,dh);
          for (i=windows.size() - 1; i >= 0; i--) {
            WindowState w=windows.get(i);
            if (w.mHasSurface) {
              mPolicy.applyPostLayoutPolicyLw(w,w.mAttrs);
            }
          }
          displayContent.pendingLayoutChanges|=mPolicy.finishPostLayoutPolicyLw();
          if (DEBUG_LAYOUT_REPEATS)           debugLayoutRepeats("after finishPostLayoutPolicyLw",displayContent.pendingLayoutChanges);
        }
      }
 while (displayContent.pendingLayoutChanges != 0);
      mInnerFields.mObscured=false;
      mInnerFields.mDimming=false;
      mInnerFields.mSyswin=false;
      final boolean someoneLosingFocus=!mLosingFocus.isEmpty();
      final int N=windows.size();
      for (i=N - 1; i >= 0; i--) {
        WindowState w=windows.get(i);
        final boolean obscuredChanged=w.mObscured != mInnerFields.mObscured;
        w.mObscured=mInnerFields.mObscured;
        if (!mInnerFields.mObscured) {
          handleNotObscuredLocked(w,currentTime,innerDw,innerDh);
        }
        if (!mInnerFields.mDimming) {
          handleFlagDimBehind(w,innerDw,innerDh);
        }
        if (isDefaultDisplay && obscuredChanged && (mWallpaperTarget == w)&& w.isVisibleLw()) {
          updateWallpaperVisibilityLocked();
        }
        final WindowStateAnimator winAnimator=w.mWinAnimator;
        if (w.mHasSurface && w.shouldAnimateMove()) {
          Animation a=AnimationUtils.loadAnimation(mContext,com.android.internal.R.anim.window_move_from_decor);
          winAnimator.setAnimation(a);
          winAnimator.mAnimDw=w.mLastFrame.left - w.mFrame.left;
          winAnimator.mAnimDh=w.mLastFrame.top - w.mFrame.top;
          try {
            w.mClient.moved(w.mFrame.left,w.mFrame.top);
          }
 catch (          RemoteException e) {
          }
        }
        w.mContentChanged=false;
        if (w.mHasSurface) {
          final boolean committed=winAnimator.commitFinishDrawingLocked(currentTime);
          if (isDefaultDisplay && committed) {
            if (w.mAttrs.type == TYPE_DREAM) {
              displayContent.pendingLayoutChanges|=WindowManagerPolicy.FINISH_LAYOUT_REDO_LAYOUT;
              if (WindowManagerService.DEBUG_LAYOUT_REPEATS) {
                debugLayoutRepeats("dream and commitFinishDrawingLocked true",displayContent.pendingLayoutChanges);
              }
            }
            if ((w.mAttrs.flags & FLAG_SHOW_WALLPAPER) != 0) {
              if (DEBUG_WALLPAPER_LIGHT)               Slog.v(TAG,"First draw done in potential wallpaper target " + w);
              mInnerFields.mWallpaperMayChange=true;
              displayContent.pendingLayoutChanges|=WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER;
              if (WindowManagerService.DEBUG_LAYOUT_REPEATS) {
                debugLayoutRepeats("wallpaper and commitFinishDrawingLocked true",displayContent.pendingLayoutChanges);
              }
            }
          }
          winAnimator.setSurfaceBoundariesLocked(recoveringMemory);
          final AppWindowToken atoken=w.mAppToken;
          if (DEBUG_STARTING_WINDOW && atoken != null && w == atoken.startingWindow) {
            Slog.d(TAG,"updateWindows: starting " + w + " isOnScreen="+ w.isOnScreen()+ " allDrawn="+ atoken.allDrawn+ " freezingScreen="+ atoken.mAppAnimator.freezingScreen);
          }
          if (atoken != null && (!atoken.allDrawn || atoken.mAppAnimator.freezingScreen)) {
            if (atoken.lastTransactionSequence != mTransactionSequence) {
              atoken.lastTransactionSequence=mTransactionSequence;
              atoken.numInterestingWindows=atoken.numDrawnWindows=0;
              atoken.startingDisplayed=false;
            }
            if ((w.isOnScreen() || winAnimator.mAttrType == TYPE_BASE_APPLICATION) && !w.mExiting && !w.mDestroying) {
              if (WindowManagerService.DEBUG_VISIBILITY || WindowManagerService.DEBUG_ORIENTATION) {
                Slog.v(TAG,"Eval win " + w + ": isDrawn="+ w.isDrawnLw()+ ", isAnimating="+ winAnimator.isAnimating());
                if (!w.isDrawnLw()) {
                  Slog.v(TAG,"Not displayed: s=" + winAnimator.mSurface + " pv="+ w.mPolicyVisibility+ " mDrawState="+ winAnimator.mDrawState+ " ah="+ w.mAttachedHidden+ " th="+ atoken.hiddenRequested+ " a="+ winAnimator.mAnimating);
                }
              }
              if (w != atoken.startingWindow) {
                if (!atoken.mAppAnimator.freezingScreen || !w.mAppFreezing) {
                  atoken.numInterestingWindows++;
                  if (w.isDrawnLw()) {
                    atoken.numDrawnWindows++;
                    if (WindowManagerService.DEBUG_VISIBILITY || WindowManagerService.DEBUG_ORIENTATION)                     Slog.v(TAG,"tokenMayBeDrawn: " + atoken + " freezingScreen="+ atoken.mAppAnimator.freezingScreen+ " mAppFreezing="+ w.mAppFreezing);
                    updateAllDrawn=true;
                  }
                }
              }
 else               if (w.isDrawnLw()) {
                atoken.startingDisplayed=true;
              }
            }
          }
        }
        if (isDefaultDisplay && someoneLosingFocus && (w == mCurrentFocus)&& w.isDisplayedLw()) {
          focusDisplayed=true;
        }
        updateResizingWindows(w);
      }
      final boolean hasUniqueContent;
switch (mInnerFields.mDisplayHasContent) {
case LayoutFields.DISPLAY_CONTENT_MIRROR:
        hasUniqueContent=isDefaultDisplay;
      break;
case LayoutFields.DISPLAY_CONTENT_UNIQUE:
    hasUniqueContent=true;
  break;
case LayoutFields.DISPLAY_CONTENT_UNKNOWN:
default :
hasUniqueContent=false;
break;
}
mDisplayManagerService.setDisplayHasContent(displayId,hasUniqueContent,true);
if (!mInnerFields.mDimming && mAnimator.isDimmingLocked(displayId)) {
stopDimmingLocked(displayId);
}
}
if (updateAllDrawn) {
updateAllDrawnLocked();
}
if (focusDisplayed) {
mH.sendEmptyMessage(H.REPORT_LOSING_FOCUS);
}
mDisplayManagerService.performTraversalInTransactionFromWindowManager();
}
 catch (RuntimeException e) {
Log.wtf(TAG,"Unhandled exception in Window Manager",e);
}
 finally {
Surface.closeTransaction();
if (SHOW_LIGHT_TRANSACTIONS) Slog.i(TAG,"<<< CLOSE TRANSACTION performLayoutAndPlaceSurfaces");
}
final WindowList defaultWindows=defaultDisplay.getWindowList();
if (mAppTransitionReady) {
defaultDisplay.pendingLayoutChanges|=handleAppTransitionReadyLocked(defaultWindows);
if (DEBUG_LAYOUT_REPEATS) debugLayoutRepeats("after handleAppTransitionReadyLocked",defaultDisplay.pendingLayoutChanges);
}
mInnerFields.mAdjResult=0;
if (!mAnimator.mAnimating && mAppTransitionRunning) {
defaultDisplay.pendingLayoutChanges|=handleAnimatingStoppedAndTransitionLocked();
if (DEBUG_LAYOUT_REPEATS) debugLayoutRepeats("after handleAnimStopAndXitionLock",defaultDisplay.pendingLayoutChanges);
}
if (mInnerFields.mWallpaperForceHidingChanged && defaultDisplay.pendingLayoutChanges == 0 && !mAppTransitionReady) {
defaultDisplay.pendingLayoutChanges|=animateAwayWallpaperLocked();
if (DEBUG_LAYOUT_REPEATS) debugLayoutRepeats("after animateAwayWallpaperLocked",defaultDisplay.pendingLayoutChanges);
}
mInnerFields.mWallpaperForceHidingChanged=false;
if (mInnerFields.mWallpaperMayChange) {
if (WindowManagerService.DEBUG_WALLPAPER_LIGHT) Slog.v(TAG,"Wallpaper may change!  Adjusting");
mInnerFields.mAdjResult|=adjustWallpaperWindowsLocked();
}
if ((mInnerFields.mAdjResult & ADJUST_WALLPAPER_LAYERS_CHANGED) != 0) {
if (DEBUG_WALLPAPER_LIGHT) Slog.v(TAG,"Wallpaper layer changed: assigning layers + relayout");
defaultDisplay.pendingLayoutChanges|=WindowManagerPolicy.FINISH_LAYOUT_REDO_LAYOUT;
assignLayersLocked(defaultWindows);
}
 else if ((mInnerFields.mAdjResult & ADJUST_WALLPAPER_VISIBILITY_CHANGED) != 0) {
if (DEBUG_WALLPAPER_LIGHT) Slog.v(TAG,"Wallpaper visibility changed: relayout");
defaultDisplay.pendingLayoutChanges|=WindowManagerPolicy.FINISH_LAYOUT_REDO_LAYOUT;
}
if (mFocusMayChange) {
mFocusMayChange=false;
if (updateFocusedWindowLocked(UPDATE_FOCUS_PLACING_SURFACES,false)) {
defaultDisplay.pendingLayoutChanges|=WindowManagerPolicy.FINISH_LAYOUT_REDO_ANIM;
mInnerFields.mAdjResult=0;
}
}
if (needsLayout()) {
defaultDisplay.pendingLayoutChanges|=WindowManagerPolicy.FINISH_LAYOUT_REDO_LAYOUT;
if (DEBUG_LAYOUT_REPEATS) debugLayoutRepeats("mLayoutNeeded",defaultDisplay.pendingLayoutChanges);
}
for (i=mResizingWindows.size() - 1; i >= 0; i--) {
WindowState win=mResizingWindows.get(i);
if (win.mAppFreezing) {
continue;
}
final WindowStateAnimator winAnimator=win.mWinAnimator;
try {
if (DEBUG_RESIZE || DEBUG_ORIENTATION) Slog.v(TAG,"Reporting new frame to " + win + ": "+ win.mCompatFrame);
int diff=0;
boolean configChanged=win.isConfigChanged();
if ((DEBUG_RESIZE || DEBUG_ORIENTATION || DEBUG_CONFIGURATION) && configChanged) {
Slog.i(TAG,"Sending new config to window " + win + ": "+ winAnimator.mSurfaceW+ "x"+ winAnimator.mSurfaceH+ " / "+ mCurConfiguration+ " / 0x"+ Integer.toHexString(diff));
}
win.mConfiguration=mCurConfiguration;
if (DEBUG_ORIENTATION && winAnimator.mDrawState == WindowStateAnimator.DRAW_PENDING) Slog.i(TAG,"Resizing " + win + " WITH DRAW PENDING");
win.mClient.resized(win.mFrame,win.mLastContentInsets,win.mLastVisibleInsets,winAnimator.mDrawState == WindowStateAnimator.DRAW_PENDING,configChanged ? win.mConfiguration : null);
win.mContentInsetsChanged=false;
win.mVisibleInsetsChanged=false;
winAnimator.mSurfaceResized=false;
}
 catch (RemoteException e) {
win.mOrientationChanging=false;
}
mResizingWindows.remove(i);
}
if (DEBUG_ORIENTATION && mDisplayFrozen) Slog.v(TAG,"With display frozen, orientationChangeComplete=" + mInnerFields.mOrientationChangeComplete);
if (mInnerFields.mOrientationChangeComplete) {
if (mWindowsFreezingScreen) {
mWindowsFreezingScreen=false;
mH.removeMessages(H.WINDOW_FREEZE_TIMEOUT);
}
stopFreezingDisplayLocked();
}
boolean wallpaperDestroyed=false;
i=mDestroySurface.size();
if (i > 0) {
do {
i--;
WindowState win=mDestroySurface.get(i);
win.mDestroying=false;
if (mInputMethodWindow == win) {
mInputMethodWindow=null;
}
if (win == mWallpaperTarget) {
wallpaperDestroyed=true;
}
win.mWinAnimator.destroySurfaceLocked(false);
}
 while (i > 0);
mDestroySurface.clear();
}
for (i=mExitingTokens.size() - 1; i >= 0; i--) {
WindowToken token=mExitingTokens.get(i);
if (!token.hasVisible) {
mExitingTokens.remove(i);
if (token.windowType == TYPE_WALLPAPER) {
mWallpaperTokens.remove(token);
updateLayoutToAnimWallpaperTokens();
}
}
}
for (i=mExitingAppTokens.size() - 1; i >= 0; i--) {
AppWindowToken token=mExitingAppTokens.get(i);
if (!token.hasVisible && !mClosingApps.contains(token)) {
token.mAppAnimator.clearAnimation();
token.mAppAnimator.animating=false;
if (DEBUG_ADD_REMOVE || DEBUG_TOKEN_MOVEMENT) Slog.v(TAG,"performLayout: App token exiting now removed" + token);
mAppTokens.remove(token);
mAnimatingAppTokens.remove(token);
mExitingAppTokens.remove(i);
}
}
if (!mAnimator.mAnimating && mRelayoutWhileAnimating.size() > 0) {
for (int j=mRelayoutWhileAnimating.size() - 1; j >= 0; j--) {
try {
mRelayoutWhileAnimating.get(j).mClient.doneAnimating();
}
 catch (RemoteException e) {
}
}
mRelayoutWhileAnimating.clear();
}
if (wallpaperDestroyed && (adjustWallpaperWindowsLocked() != 0)) {
getDefaultDisplayContentLocked().layoutNeeded=true;
}
DisplayContentsIterator iterator=new DisplayContentsIterator();
while (iterator.hasNext()) {
DisplayContent displayContent=iterator.next();
if (displayContent.pendingLayoutChanges != 0) {
displayContent.layoutNeeded=true;
}
}
mInputMonitor.updateInputWindowsLw(true);
setHoldScreenLocked(mInnerFields.mHoldScreen);
if (!mDisplayFrozen) {
if (mInnerFields.mScreenBrightness < 0 || mInnerFields.mScreenBrightness > 1.0f) {
mPowerManager.setScreenBrightnessOverrideFromWindowManager(-1);
}
 else {
mPowerManager.setScreenBrightnessOverrideFromWindowManager(toBrightnessOverride(mInnerFields.mScreenBrightness));
}
if (mInnerFields.mButtonBrightness < 0 || mInnerFields.mButtonBrightness > 1.0f) {
mPowerManager.setButtonBrightnessOverrideFromWindowManager(-1);
}
 else {
mPowerManager.setButtonBrightnessOverrideFromWindowManager(toBrightnessOverride(mInnerFields.mButtonBrightness));
}
mPowerManager.setUserActivityTimeoutOverrideFromWindowManager(mInnerFields.mUserActivityTimeout);
}
if (mTurnOnScreen) {
if (DEBUG_VISIBILITY) Slog.v(TAG,"Turning screen on after layout!");
mPowerManager.wakeUp(SystemClock.uptimeMillis());
mTurnOnScreen=false;
}
if (mInnerFields.mUpdateRotation) {
if (DEBUG_ORIENTATION) Slog.d(TAG,"Performing post-rotate rotation");
if (updateRotationUncheckedLocked(false)) {
mH.sendEmptyMessage(H.SEND_NEW_CONFIGURATION);
}
 else {
mInnerFields.mUpdateRotation=false;
}
}
if (mInnerFields.mOrientationChangeComplete && !defaultDisplay.layoutNeeded && !mInnerFields.mUpdateRotation) {
checkDrawnWindowsLocked();
}
final int N=mPendingRemove.size();
if (N > 0) {
if (mPendingRemoveTmp.length < N) {
mPendingRemoveTmp=new WindowState[N + 10];
}
mPendingRemove.toArray(mPendingRemoveTmp);
mPendingRemove.clear();
DisplayContentList displayList=new DisplayContentList();
for (i=0; i < N; i++) {
WindowState w=mPendingRemoveTmp[i];
removeWindowInnerLocked(w.mSession,w);
if (!displayList.contains(w.mDisplayContent)) {
displayList.add(w.mDisplayContent);
}
}
for (DisplayContent displayContent : displayList) {
assignLayersLocked(displayContent.getWindowList());
displayContent.layoutNeeded=true;
}
}
enableScreenIfNeededLocked();
updateLayoutToAnimationLocked();
if (DEBUG_WINDOW_TRACE) {
Slog.e(TAG,"performLayoutAndPlaceSurfacesLockedInner exit: animating=" + mAnimator.mAnimating);
}
}
