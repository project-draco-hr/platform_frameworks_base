{
  if (mDisplay == null) {
    Slog.i(TAG,"skipping performLayoutAndPlaceSurfacesLockedInner with no mDisplay");
    return;
  }
  final long currentTime=SystemClock.uptimeMillis();
  final int dw=mCurDisplayWidth;
  final int dh=mCurDisplayHeight;
  final int innerDw=mAppDisplayWidth;
  final int innerDh=mAppDisplayHeight;
  int i;
  if (mFocusMayChange) {
    mFocusMayChange=false;
    updateFocusedWindowLocked(UPDATE_FOCUS_WILL_PLACE_SURFACES,false);
  }
  for (i=mExitingTokens.size() - 1; i >= 0; i--) {
    mExitingTokens.get(i).hasVisible=false;
  }
  for (i=mExitingAppTokens.size() - 1; i >= 0; i--) {
    mExitingAppTokens.get(i).hasVisible=false;
  }
  mInnerFields.mOrientationChangeComplete=true;
  mInnerFields.mHoldScreen=null;
  mInnerFields.mScreenBrightness=-1;
  mInnerFields.mButtonBrightness=-1;
  boolean focusDisplayed=false;
  mInnerFields.mAnimating=false;
  boolean createWatermark=false;
  boolean updateRotation=false;
  if (mFxSession == null) {
    mFxSession=new SurfaceSession();
    createWatermark=true;
  }
  if (SHOW_LIGHT_TRANSACTIONS)   Slog.i(TAG,">>> OPEN TRANSACTION performLayoutAndPlaceSurfaces");
  Surface.openTransaction();
  if (createWatermark) {
    createWatermark();
  }
  if (mWatermark != null) {
    mWatermark.positionSurface(dw,dh);
  }
  if (mStrictModeFlash != null) {
    mStrictModeFlash.positionSurface(dw,dh);
  }
  try {
    mInnerFields.mWallpaperForceHidingChanged=false;
    int repeats=0;
    int changes=0;
    do {
      repeats++;
      if (repeats > 6) {
        Slog.w(TAG,"Animation repeat aborted after too many iterations");
        mLayoutNeeded=false;
        break;
      }
      if ((changes & WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER) != 0) {
        if ((adjustWallpaperWindowsLocked() & ADJUST_WALLPAPER_LAYERS_CHANGED) != 0) {
          assignLayersLocked();
          mLayoutNeeded=true;
        }
      }
      if ((changes & WindowManagerPolicy.FINISH_LAYOUT_REDO_CONFIG) != 0) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,"Computing new config from layout");
        if (updateOrientationFromAppTokensLocked(true)) {
          mLayoutNeeded=true;
          mH.sendEmptyMessage(H.SEND_NEW_CONFIGURATION);
        }
      }
      if ((changes & WindowManagerPolicy.FINISH_LAYOUT_REDO_LAYOUT) != 0) {
        mLayoutNeeded=true;
      }
      if (repeats < 4) {
        performLayoutLockedInner(repeats == 0,false);
      }
 else {
        Slog.w(TAG,"Layout repeat skipped after too many iterations");
      }
      changes=0;
      ++mTransactionSequence;
      mInnerFields.mAnimating=false;
      updateRotation|=updateAppsAndRotationAnimationsLocked(currentTime,innerDw,innerDh);
      if (DEBUG_APP_TRANSITIONS)       Slog.v(TAG,"*** ANIM STEP: seq=" + mTransactionSequence + " mAnimating="+ mInnerFields.mAnimating);
      mInnerFields.mTokenMayBeDrawn=false;
      mInnerFields.mWallpaperMayChange=false;
      mInnerFields.mForceHiding=false;
      mInnerFields.mDetachedWallpaper=null;
      mInnerFields.mWindowAnimationBackground=null;
      mInnerFields.mWindowAnimationBackgroundColor=0;
      mPolicy.beginAnimationLw(dw,dh);
      updateWindowsAndWallpaperLocked(currentTime,innerDw,innerDh);
      changes|=mPolicy.finishAnimationLw();
      if (mInnerFields.mTokenMayBeDrawn) {
        changes|=testTokenMayBeDrawnLocked();
      }
      if (mAppTransitionReady) {
        changes|=handleAppTransitionReadyLocked();
      }
      mInnerFields.mAdjResult=0;
      if (!mInnerFields.mAnimating && mAppTransitionRunning) {
        changes|=handleAnimatingAndTransitionLocked();
      }
      if (mInnerFields.mWallpaperForceHidingChanged && changes == 0 && !mAppTransitionReady) {
        changes|=animateAwayWallpaperLocked();
      }
      changes|=testWallpaperAndBackgroundLocked();
      if (mLayoutNeeded) {
        changes|=PhoneWindowManager.FINISH_LAYOUT_REDO_LAYOUT;
      }
      if (DEBUG_APP_TRANSITIONS)       Slog.v(TAG,"*** ANIM STEP: changes=0x" + Integer.toHexString(changes));
    }
 while (changes != 0);
    final boolean someoneLosingFocus=mLosingFocus.size() != 0;
    mInnerFields.mObscured=false;
    mInnerFields.mBlurring=false;
    mInnerFields.mDimming=false;
    mInnerFields.mSyswin=false;
    final int N=mWindows.size();
    for (i=N - 1; i >= 0; i--) {
      WindowState w=mWindows.get(i);
      if (w.mSurface != null) {
        prepareSurfaceLocked(w,recoveringMemory);
      }
 else       if (w.mOrientationChanging) {
        if (DEBUG_ORIENTATION) {
          Slog.v(TAG,"Orientation change skips hidden " + w);
        }
        w.mOrientationChanging=false;
      }
      if (w.mContentChanged) {
        w.mContentChanged=false;
      }
      final boolean canBeSeen=w.isDisplayedLw();
      if (someoneLosingFocus && w == mCurrentFocus && canBeSeen) {
        focusDisplayed=true;
      }
      final boolean obscuredChanged=w.mObscured != mInnerFields.mObscured;
      w.mObscured=mInnerFields.mObscured;
      if (!mInnerFields.mObscured) {
        handleNotObscuredLocked(w,currentTime,innerDw,innerDh);
      }
      if (obscuredChanged && mWallpaperTarget == w) {
        updateWallpaperVisibilityLocked();
      }
    }
    if (mDimAnimator != null && mDimAnimator.mDimShown) {
      mInnerFields.mAnimating|=mDimAnimator.updateSurface(mInnerFields.mDimming,currentTime,mDisplayFrozen || !mDisplayEnabled || !mPolicy.isScreenOnFully());
    }
    if (!mInnerFields.mBlurring && mBlurShown) {
      if (SHOW_TRANSACTIONS)       Slog.i(TAG,"  BLUR " + mBlurSurface + ": HIDE");
      try {
        mBlurSurface.hide();
      }
 catch (      IllegalArgumentException e) {
        Slog.w(TAG,"Illegal argument exception hiding blur surface");
      }
      mBlurShown=false;
    }
    if (mBlackFrame != null) {
      if (mScreenRotationAnimation != null) {
        mBlackFrame.setMatrix(mScreenRotationAnimation.getEnterTransformation().getMatrix());
      }
 else {
        mBlackFrame.clearMatrix();
      }
    }
  }
 catch (  RuntimeException e) {
    Log.wtf(TAG,"Unhandled exception in Window Manager",e);
  }
  Surface.closeTransaction();
  if (SHOW_LIGHT_TRANSACTIONS)   Slog.i(TAG,"<<< CLOSE TRANSACTION performLayoutAndPlaceSurfaces");
  if (mWatermark != null) {
    mWatermark.drawIfNeeded();
  }
  if (DEBUG_ORIENTATION && mDisplayFrozen)   Slog.v(TAG,"With display frozen, orientationChangeComplete=" + mInnerFields.mOrientationChangeComplete);
  if (mInnerFields.mOrientationChangeComplete) {
    if (mWindowsFreezingScreen) {
      mWindowsFreezingScreen=false;
      mH.removeMessages(H.WINDOW_FREEZE_TIMEOUT);
    }
    stopFreezingDisplayLocked();
  }
  i=mResizingWindows.size();
  if (i > 0) {
    do {
      i--;
      WindowState win=mResizingWindows.get(i);
      try {
        if (DEBUG_RESIZE || DEBUG_ORIENTATION)         Slog.v(TAG,"Reporting new frame to " + win + ": "+ win.mCompatFrame);
        int diff=0;
        boolean configChanged=win.mConfiguration != mCurConfiguration && (win.mConfiguration == null || (diff=mCurConfiguration.diff(win.mConfiguration)) != 0);
        if ((DEBUG_RESIZE || DEBUG_ORIENTATION || DEBUG_CONFIGURATION) && configChanged) {
          Slog.i(TAG,"Sending new config to window " + win + ": "+ win.mSurfaceW+ "x"+ win.mSurfaceH+ " / "+ mCurConfiguration+ " / 0x"+ Integer.toHexString(diff));
        }
        win.mConfiguration=mCurConfiguration;
        if (DEBUG_ORIENTATION && win.mDrawPending)         Slog.i(TAG,"Resizing " + win + " WITH DRAW PENDING");
        win.mClient.resized((int)win.mSurfaceW,(int)win.mSurfaceH,win.mLastContentInsets,win.mLastVisibleInsets,win.mDrawPending,configChanged ? win.mConfiguration : null);
        win.mContentInsetsChanged=false;
        win.mVisibleInsetsChanged=false;
        win.mSurfaceResized=false;
      }
 catch (      RemoteException e) {
        win.mOrientationChanging=false;
      }
    }
 while (i > 0);
    mResizingWindows.clear();
  }
  boolean wallpaperDestroyed=false;
  i=mDestroySurface.size();
  if (i > 0) {
    do {
      i--;
      WindowState win=mDestroySurface.get(i);
      win.mDestroying=false;
      if (mInputMethodWindow == win) {
        mInputMethodWindow=null;
      }
      if (win == mWallpaperTarget) {
        wallpaperDestroyed=true;
      }
      win.destroySurfaceLocked();
    }
 while (i > 0);
    mDestroySurface.clear();
  }
  for (i=mExitingTokens.size() - 1; i >= 0; i--) {
    WindowToken token=mExitingTokens.get(i);
    if (!token.hasVisible) {
      mExitingTokens.remove(i);
      if (token.windowType == TYPE_WALLPAPER) {
        mWallpaperTokens.remove(token);
      }
    }
  }
  for (i=mExitingAppTokens.size() - 1; i >= 0; i--) {
    AppWindowToken token=mExitingAppTokens.get(i);
    if (!token.hasVisible && !mClosingApps.contains(token)) {
      token.animation=null;
      token.animating=false;
      if (DEBUG_ADD_REMOVE || DEBUG_TOKEN_MOVEMENT)       Slog.v(TAG,"performLayout: App token exiting now removed" + token);
      mAppTokens.remove(token);
      mExitingAppTokens.remove(i);
    }
  }
  boolean needRelayout=false;
  if (!mInnerFields.mAnimating && mAppTransitionRunning) {
    mAppTransitionRunning=false;
    needRelayout=true;
    rebuildAppWindowListLocked();
    assignLayersLocked();
    mToBottomApps.clear();
  }
  if (focusDisplayed) {
    mH.sendEmptyMessage(H.REPORT_LOSING_FOCUS);
  }
  if (wallpaperDestroyed) {
    needRelayout=adjustWallpaperWindowsLocked() != 0;
  }
  if (needRelayout) {
    requestTraversalLocked();
  }
 else   if (mInnerFields.mAnimating) {
    scheduleAnimationLocked();
  }
  mInputMonitor.updateInputWindowsLw(true);
  setHoldScreenLocked(mInnerFields.mHoldScreen != null);
  if (!mDisplayFrozen) {
    if (mInnerFields.mScreenBrightness < 0 || mInnerFields.mScreenBrightness > 1.0f) {
      mPowerManager.setScreenBrightnessOverride(-1);
    }
 else {
      mPowerManager.setScreenBrightnessOverride((int)(mInnerFields.mScreenBrightness * Power.BRIGHTNESS_ON));
    }
    if (mInnerFields.mButtonBrightness < 0 || mInnerFields.mButtonBrightness > 1.0f) {
      mPowerManager.setButtonBrightnessOverride(-1);
    }
 else {
      mPowerManager.setButtonBrightnessOverride((int)(mInnerFields.mButtonBrightness * Power.BRIGHTNESS_ON));
    }
  }
  if (mInnerFields.mHoldScreen != mHoldingScreenOn) {
    mHoldingScreenOn=mInnerFields.mHoldScreen;
    Message m=mH.obtainMessage(H.HOLD_SCREEN_CHANGED,mInnerFields.mHoldScreen);
    mH.sendMessage(m);
  }
  if (mTurnOnScreen) {
    if (DEBUG_VISIBILITY)     Slog.v(TAG,"Turning screen on after layout!");
    mPowerManager.userActivity(SystemClock.uptimeMillis(),false,LocalPowerManager.BUTTON_EVENT,true);
    mTurnOnScreen=false;
  }
  if (updateRotation) {
    if (DEBUG_ORIENTATION)     Slog.d(TAG,"Performing post-rotate rotation");
    if (updateRotationUncheckedLocked(false)) {
      mH.sendEmptyMessage(H.SEND_NEW_CONFIGURATION);
    }
 else {
      updateRotation=false;
    }
  }
  if (mInnerFields.mOrientationChangeComplete && !needRelayout && !updateRotation) {
    checkDrawnWindowsLocked();
  }
  enableScreenIfNeededLocked();
}
