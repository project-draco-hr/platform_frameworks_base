{
  if (mDisplay == null) {
    Slog.i(TAG,"skipping performLayoutAndPlaceSurfacesLockedInner with no mDisplay");
    return;
  }
  final long currentTime=SystemClock.uptimeMillis();
  final int dw=mCurDisplayWidth;
  final int dh=mCurDisplayHeight;
  final int innerDw=mAppDisplayWidth;
  final int innerDh=mAppDisplayHeight;
  int i;
  if (mFocusMayChange) {
    mFocusMayChange=false;
    updateFocusedWindowLocked(UPDATE_FOCUS_WILL_PLACE_SURFACES,false);
  }
  for (i=mExitingTokens.size() - 1; i >= 0; i--) {
    mExitingTokens.get(i).hasVisible=false;
  }
  for (i=mExitingAppTokens.size() - 1; i >= 0; i--) {
    mExitingAppTokens.get(i).hasVisible=false;
  }
  boolean orientationChangeComplete=true;
  Session holdScreen=null;
  float screenBrightness=-1;
  float buttonBrightness=-1;
  boolean focusDisplayed=false;
  boolean animating=false;
  boolean createWatermark=false;
  boolean updateRotation=false;
  boolean screenRotationFinished=false;
  if (mFxSession == null) {
    mFxSession=new SurfaceSession();
    createWatermark=true;
  }
  if (SHOW_TRANSACTIONS)   Slog.i(TAG,">>> OPEN TRANSACTION performLayoutAndPlaceSurfaces");
  Surface.openTransaction();
  if (createWatermark) {
    createWatermark();
  }
  if (mWatermark != null) {
    mWatermark.positionSurface(dw,dh);
  }
  if (mStrictModeFlash != null) {
    mStrictModeFlash.positionSurface(dw,dh);
  }
  try {
    boolean wallpaperForceHidingChanged=false;
    int repeats=0;
    int changes=0;
    do {
      repeats++;
      if (repeats > 6) {
        Slog.w(TAG,"Animation repeat aborted after too many iterations");
        mLayoutNeeded=false;
        break;
      }
      if ((changes & (WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER | WindowManagerPolicy.FINISH_LAYOUT_REDO_CONFIG | WindowManagerPolicy.FINISH_LAYOUT_REDO_LAYOUT)) != 0) {
        if ((changes & WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER) != 0) {
          if ((adjustWallpaperWindowsLocked() & ADJUST_WALLPAPER_LAYERS_CHANGED) != 0) {
            assignLayersLocked();
            mLayoutNeeded=true;
          }
        }
        if ((changes & WindowManagerPolicy.FINISH_LAYOUT_REDO_CONFIG) != 0) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,"Computing new config from layout");
          if (updateOrientationFromAppTokensLocked(true)) {
            mLayoutNeeded=true;
            mH.sendEmptyMessage(H.SEND_NEW_CONFIGURATION);
          }
        }
        if ((changes & WindowManagerPolicy.FINISH_LAYOUT_REDO_LAYOUT) != 0) {
          mLayoutNeeded=true;
        }
      }
      if (repeats < 4) {
        changes=performLayoutLockedInner(repeats == 0,false);
        if (changes != 0) {
          continue;
        }
      }
 else {
        Slog.w(TAG,"Layout repeat skipped after too many iterations");
        changes=0;
      }
      final int transactionSequence=++mTransactionSequence;
      boolean tokensAnimating=false;
      final int NAT=mAppTokens.size();
      for (i=0; i < NAT; i++) {
        if (mAppTokens.get(i).stepAnimationLocked(currentTime,innerDw,innerDh)) {
          tokensAnimating=true;
        }
      }
      final int NEAT=mExitingAppTokens.size();
      for (i=0; i < NEAT; i++) {
        if (mExitingAppTokens.get(i).stepAnimationLocked(currentTime,innerDw,innerDh)) {
          tokensAnimating=true;
        }
      }
      if (DEBUG_APP_TRANSITIONS)       Slog.v(TAG,"*** ANIM STEP: seq=" + transactionSequence + " tokensAnimating="+ tokensAnimating);
      animating=tokensAnimating;
      if (mScreenRotationAnimation != null) {
        if (mScreenRotationAnimation.isAnimating()) {
          if (mScreenRotationAnimation.stepAnimation(currentTime)) {
            animating=true;
          }
 else {
            screenRotationFinished=true;
            updateRotation=true;
          }
        }
      }
      boolean tokenMayBeDrawn=false;
      boolean wallpaperMayChange=false;
      boolean forceHiding=false;
      WindowState windowDetachedWallpaper=null;
      WindowState windowAnimationBackground=null;
      int windowAnimationBackgroundColor=0;
      mPolicy.beginAnimationLw(dw,dh);
      final int N=mWindows.size();
      for (i=N - 1; i >= 0; i--) {
        WindowState w=mWindows.get(i);
        final WindowManager.LayoutParams attrs=w.mAttrs;
        if (w.mSurface != null) {
          if (w.commitFinishDrawingLocked(currentTime)) {
            if ((w.mAttrs.flags & WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER) != 0) {
              if (DEBUG_WALLPAPER)               Slog.v(TAG,"First draw done in potential wallpaper target " + w);
              wallpaperMayChange=true;
            }
          }
          final boolean wasAnimating=w.mAnimating;
          int animDw=innerDw;
          int animDh=innerDh;
          if (w.shouldAnimateMove()) {
            Animation a=AnimationUtils.loadAnimation(mContext,com.android.internal.R.anim.window_move_from_decor);
            w.setAnimation(a);
            animDw=w.mLastFrame.left - w.mFrame.left;
            animDh=w.mLastFrame.top - w.mFrame.top;
          }
          final boolean nowAnimating=w.stepAnimationLocked(currentTime,animDw,animDh);
          if (nowAnimating) {
            if (w.mAnimation != null) {
              if (w.mAnimation.getDetachWallpaper()) {
                windowDetachedWallpaper=w;
              }
              if (w.mAnimation.getBackgroundColor() != 0) {
                windowAnimationBackground=w;
                windowAnimationBackgroundColor=w.mAnimation.getBackgroundColor();
              }
            }
            animating=true;
          }
          if (w.mAppToken != null && w.mAppToken.animation != null) {
            if (w.mAppToken.animation.getDetachWallpaper()) {
              windowDetachedWallpaper=w;
            }
            if (w.mAppToken.animation.getBackgroundColor() != 0) {
              windowAnimationBackground=w;
              windowAnimationBackgroundColor=w.mAppToken.animation.getBackgroundColor();
            }
          }
          if (wasAnimating && !w.mAnimating && mWallpaperTarget == w) {
            wallpaperMayChange=true;
          }
          if (mPolicy.doesForceHide(w,attrs)) {
            if (!wasAnimating && nowAnimating) {
              if (DEBUG_VISIBILITY)               Slog.v(TAG,"Animation started that could impact force hide: " + w);
              wallpaperForceHidingChanged=true;
              mFocusMayChange=true;
            }
 else             if (w.isReadyForDisplay() && w.mAnimation == null) {
              forceHiding=true;
            }
          }
 else           if (mPolicy.canBeForceHidden(w,attrs)) {
            boolean changed;
            if (forceHiding) {
              changed=w.hideLw(false,false);
              if (DEBUG_VISIBILITY && changed)               Slog.v(TAG,"Now policy hidden: " + w);
            }
 else {
              changed=w.showLw(false,false);
              if (DEBUG_VISIBILITY && changed)               Slog.v(TAG,"Now policy shown: " + w);
              if (changed) {
                if (wallpaperForceHidingChanged && w.isVisibleNow()) {
                  Animation a=mPolicy.createForceHideEnterAnimation();
                  if (a != null) {
                    w.setAnimation(a);
                  }
                }
                if (mCurrentFocus == null || mCurrentFocus.mLayer < w.mLayer) {
                  mFocusMayChange=true;
                }
              }
            }
            if (changed && (attrs.flags & WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER) != 0) {
              wallpaperMayChange=true;
            }
          }
          mPolicy.animatingWindowLw(w,attrs);
        }
        final AppWindowToken atoken=w.mAppToken;
        if (atoken != null && (!atoken.allDrawn || atoken.freezingScreen)) {
          if (atoken.lastTransactionSequence != transactionSequence) {
            atoken.lastTransactionSequence=transactionSequence;
            atoken.numInterestingWindows=atoken.numDrawnWindows=0;
            atoken.startingDisplayed=false;
          }
          if ((w.isOnScreen() || w.mAttrs.type == WindowManager.LayoutParams.TYPE_BASE_APPLICATION) && !w.mExiting && !w.mDestroying) {
            if (DEBUG_VISIBILITY || DEBUG_ORIENTATION) {
              Slog.v(TAG,"Eval win " + w + ": isDrawn="+ w.isDrawnLw()+ ", isAnimating="+ w.isAnimating());
              if (!w.isDrawnLw()) {
                Slog.v(TAG,"Not displayed: s=" + w.mSurface + " pv="+ w.mPolicyVisibility+ " dp="+ w.mDrawPending+ " cdp="+ w.mCommitDrawPending+ " ah="+ w.mAttachedHidden+ " th="+ atoken.hiddenRequested+ " a="+ w.mAnimating);
              }
            }
            if (w != atoken.startingWindow) {
              if (!atoken.freezingScreen || !w.mAppFreezing) {
                atoken.numInterestingWindows++;
                if (w.isDrawnLw()) {
                  atoken.numDrawnWindows++;
                  if (DEBUG_VISIBILITY || DEBUG_ORIENTATION)                   Slog.v(TAG,"tokenMayBeDrawn: " + atoken + " freezingScreen="+ atoken.freezingScreen+ " mAppFreezing="+ w.mAppFreezing);
                  tokenMayBeDrawn=true;
                }
              }
            }
 else             if (w.isDrawnLw()) {
              atoken.startingDisplayed=true;
            }
          }
        }
 else         if (w.mReadyToShow) {
          w.performShowLocked();
        }
      }
      changes|=mPolicy.finishAnimationLw();
      if (tokenMayBeDrawn) {
        final int NT=mAppTokens.size();
        for (i=0; i < NT; i++) {
          AppWindowToken wtoken=mAppTokens.get(i);
          if (wtoken.freezingScreen) {
            int numInteresting=wtoken.numInterestingWindows;
            if (numInteresting > 0 && wtoken.numDrawnWindows >= numInteresting) {
              if (DEBUG_VISIBILITY)               Slog.v(TAG,"allDrawn: " + wtoken + " interesting="+ numInteresting+ " drawn="+ wtoken.numDrawnWindows);
              wtoken.showAllWindowsLocked();
              unsetAppFreezingScreenLocked(wtoken,false,true);
              orientationChangeComplete=true;
            }
          }
 else           if (!wtoken.allDrawn) {
            int numInteresting=wtoken.numInterestingWindows;
            if (numInteresting > 0 && wtoken.numDrawnWindows >= numInteresting) {
              if (DEBUG_VISIBILITY)               Slog.v(TAG,"allDrawn: " + wtoken + " interesting="+ numInteresting+ " drawn="+ wtoken.numDrawnWindows);
              wtoken.allDrawn=true;
              changes|=PhoneWindowManager.FINISH_LAYOUT_REDO_ANIM;
              if (!mOpeningApps.contains(wtoken)) {
                wtoken.showAllWindowsLocked();
              }
            }
          }
        }
      }
      if (mAppTransitionReady) {
        int NN=mOpeningApps.size();
        boolean goodToGo=true;
        if (DEBUG_APP_TRANSITIONS)         Slog.v(TAG,"Checking " + NN + " opening apps (frozen="+ mDisplayFrozen+ " timeout="+ mAppTransitionTimeout+ ")...");
        if (!mDisplayFrozen && !mAppTransitionTimeout) {
          for (i=0; i < NN && goodToGo; i++) {
            AppWindowToken wtoken=mOpeningApps.get(i);
            if (DEBUG_APP_TRANSITIONS)             Slog.v(TAG,"Check opening app" + wtoken + ": allDrawn="+ wtoken.allDrawn+ " startingDisplayed="+ wtoken.startingDisplayed);
            if (!wtoken.allDrawn && !wtoken.startingDisplayed && !wtoken.startingMoved) {
              goodToGo=false;
            }
          }
        }
        if (goodToGo) {
          if (DEBUG_APP_TRANSITIONS)           Slog.v(TAG,"**** GOOD TO GO");
          int transit=mNextAppTransition;
          if (mSkipAppTransitionAnimation) {
            transit=WindowManagerPolicy.TRANSIT_UNSET;
          }
          mNextAppTransition=WindowManagerPolicy.TRANSIT_UNSET;
          mAppTransitionReady=false;
          mAppTransitionRunning=true;
          mAppTransitionTimeout=false;
          mStartingIconInTransition=false;
          mSkipAppTransitionAnimation=false;
          mH.removeMessages(H.APP_TRANSITION_TIMEOUT);
          if (mToTopApps.size() > 0) {
            NN=mAppTokens.size();
            for (i=0; i < NN; i++) {
              AppWindowToken wtoken=mAppTokens.get(i);
              if (wtoken.sendingToTop) {
                wtoken.sendingToTop=false;
                moveAppWindowsLocked(wtoken,NN,false);
              }
            }
            mToTopApps.clear();
          }
          WindowState oldWallpaper=mWallpaperTarget;
          adjustWallpaperWindowsLocked();
          wallpaperMayChange=false;
          LayoutParams animLp=null;
          int bestAnimLayer=-1;
          boolean fullscreenAnim=false;
          if (DEBUG_APP_TRANSITIONS)           Slog.v(TAG,"New wallpaper target=" + mWallpaperTarget + ", lower target="+ mLowerWallpaperTarget+ ", upper target="+ mUpperWallpaperTarget);
          int foundWallpapers=0;
          final int NC=mClosingApps.size();
          NN=NC + mOpeningApps.size();
          for (i=0; i < NN; i++) {
            AppWindowToken wtoken;
            int mode;
            if (i < NC) {
              wtoken=mClosingApps.get(i);
              mode=1;
            }
 else {
              wtoken=mOpeningApps.get(i - NC);
              mode=2;
            }
            if (mLowerWallpaperTarget != null) {
              if (mLowerWallpaperTarget.mAppToken == wtoken || mUpperWallpaperTarget.mAppToken == wtoken) {
                foundWallpapers|=mode;
              }
            }
            if (wtoken.appFullscreen) {
              WindowState ws=wtoken.findMainWindow();
              if (ws != null) {
                animLp=ws.mAttrs;
                bestAnimLayer=ws.mLayer;
                fullscreenAnim=true;
              }
            }
 else             if (!fullscreenAnim) {
              WindowState ws=wtoken.findMainWindow();
              if (ws != null) {
                if (ws.mLayer > bestAnimLayer) {
                  animLp=ws.mAttrs;
                  bestAnimLayer=ws.mLayer;
                }
              }
            }
          }
          if (foundWallpapers == 3) {
            if (DEBUG_APP_TRANSITIONS)             Slog.v(TAG,"Wallpaper animation!");
switch (transit) {
case WindowManagerPolicy.TRANSIT_ACTIVITY_OPEN:
case WindowManagerPolicy.TRANSIT_TASK_OPEN:
case WindowManagerPolicy.TRANSIT_TASK_TO_FRONT:
              transit=WindowManagerPolicy.TRANSIT_WALLPAPER_INTRA_OPEN;
            break;
case WindowManagerPolicy.TRANSIT_ACTIVITY_CLOSE:
case WindowManagerPolicy.TRANSIT_TASK_CLOSE:
case WindowManagerPolicy.TRANSIT_TASK_TO_BACK:
          transit=WindowManagerPolicy.TRANSIT_WALLPAPER_INTRA_CLOSE;
        break;
    }
    if (DEBUG_APP_TRANSITIONS)     Slog.v(TAG,"New transit: " + transit);
  }
 else   if (oldWallpaper != null) {
    transit=WindowManagerPolicy.TRANSIT_WALLPAPER_CLOSE;
    if (DEBUG_APP_TRANSITIONS)     Slog.v(TAG,"New transit away from wallpaper: " + transit);
  }
 else   if (mWallpaperTarget != null) {
    transit=WindowManagerPolicy.TRANSIT_WALLPAPER_OPEN;
    if (DEBUG_APP_TRANSITIONS)     Slog.v(TAG,"New transit into wallpaper: " + transit);
  }
  if (!mPolicy.allowAppAnimationsLw()) {
    animLp=null;
  }
  NN=mOpeningApps.size();
  for (i=0; i < NN; i++) {
    AppWindowToken wtoken=mOpeningApps.get(i);
    if (DEBUG_APP_TRANSITIONS)     Slog.v(TAG,"Now opening app" + wtoken);
    wtoken.reportedVisible=false;
    wtoken.inPendingTransaction=false;
    wtoken.animation=null;
    setTokenVisibilityLocked(wtoken,animLp,true,transit,false);
    wtoken.updateReportedVisibilityLocked();
    wtoken.waitingToShow=false;
    wtoken.showAllWindowsLocked();
  }
  NN=mClosingApps.size();
  for (i=0; i < NN; i++) {
    AppWindowToken wtoken=mClosingApps.get(i);
    if (DEBUG_APP_TRANSITIONS)     Slog.v(TAG,"Now closing app" + wtoken);
    wtoken.inPendingTransaction=false;
    wtoken.animation=null;
    setTokenVisibilityLocked(wtoken,animLp,false,transit,false);
    wtoken.updateReportedVisibilityLocked();
    wtoken.waitingToHide=false;
    wtoken.allDrawn=true;
  }
  mNextAppTransitionPackage=null;
  mOpeningApps.clear();
  mClosingApps.clear();
  changes|=PhoneWindowManager.FINISH_LAYOUT_REDO_LAYOUT | WindowManagerPolicy.FINISH_LAYOUT_REDO_CONFIG;
  mLayoutNeeded=true;
  if (!moveInputMethodWindowsIfNeededLocked(true)) {
    assignLayersLocked();
  }
  updateFocusedWindowLocked(UPDATE_FOCUS_PLACING_SURFACES,false);
  mFocusMayChange=false;
}
}
int adjResult=0;
if (!animating && mAppTransitionRunning) {
mAppTransitionRunning=false;
mToBottomApps.clear();
rebuildAppWindowListLocked();
changes|=PhoneWindowManager.FINISH_LAYOUT_REDO_LAYOUT;
adjResult|=ADJUST_WALLPAPER_LAYERS_CHANGED;
moveInputMethodWindowsIfNeededLocked(false);
wallpaperMayChange=true;
mFocusMayChange=true;
}
if (wallpaperForceHidingChanged && changes == 0 && !mAppTransitionReady) {
WindowState oldWallpaper=mWallpaperTarget;
if (mLowerWallpaperTarget != null && mLowerWallpaperTarget.mAppToken != null) {
  if (DEBUG_WALLPAPER)   Slog.v(TAG,"wallpaperForceHiding changed with lower=" + mLowerWallpaperTarget);
  if (DEBUG_WALLPAPER)   Slog.v(TAG,"hidden=" + mLowerWallpaperTarget.mAppToken.hidden + " hiddenRequested="+ mLowerWallpaperTarget.mAppToken.hiddenRequested);
  if (mLowerWallpaperTarget.mAppToken.hidden) {
    mLowerWallpaperTarget=mUpperWallpaperTarget=null;
    changes|=PhoneWindowManager.FINISH_LAYOUT_REDO_ANIM;
  }
}
adjResult|=adjustWallpaperWindowsLocked();
wallpaperMayChange=false;
wallpaperForceHidingChanged=false;
if (DEBUG_WALLPAPER) Slog.v(TAG,"****** OLD: " + oldWallpaper + " NEW: "+ mWallpaperTarget+ " LOWER: "+ mLowerWallpaperTarget);
if (mLowerWallpaperTarget == null) {
  forceHiding=false;
  for (i=N - 1; i >= 0; i--) {
    WindowState w=mWindows.get(i);
    if (w.mSurface != null) {
      final WindowManager.LayoutParams attrs=w.mAttrs;
      if (mPolicy.doesForceHide(w,attrs) && w.isVisibleLw()) {
        if (DEBUG_FOCUS)         Slog.i(TAG,"win=" + w + " force hides other windows");
        forceHiding=true;
      }
 else       if (mPolicy.canBeForceHidden(w,attrs)) {
        if (!w.mAnimating) {
          w.clearAnimation();
        }
      }
    }
  }
}
}
if (mWindowDetachedWallpaper != windowDetachedWallpaper) {
if (DEBUG_WALLPAPER) Slog.v(TAG,"Detached wallpaper changed from " + mWindowDetachedWallpaper + windowDetachedWallpaper);
mWindowDetachedWallpaper=windowDetachedWallpaper;
wallpaperMayChange=true;
}
if (windowAnimationBackgroundColor != 0) {
WindowState target=windowAnimationBackground;
if (mWallpaperTarget == windowAnimationBackground || mLowerWallpaperTarget == windowAnimationBackground || mUpperWallpaperTarget == windowAnimationBackground) {
  for (i=0; i < mWindows.size(); i++) {
    WindowState w=mWindows.get(i);
    if (w.mIsWallpaper) {
      target=w;
      break;
    }
  }
}
if (mWindowAnimationBackgroundSurface == null) {
  mWindowAnimationBackgroundSurface=new DimSurface(mFxSession);
}
mWindowAnimationBackgroundSurface.show(dw,dh,target.mAnimLayer - LAYER_OFFSET_DIM,windowAnimationBackgroundColor);
}
 else if (mWindowAnimationBackgroundSurface != null) {
mWindowAnimationBackgroundSurface.hide();
}
if (wallpaperMayChange) {
if (DEBUG_WALLPAPER) Slog.v(TAG,"Wallpaper may change!  Adjusting");
adjResult|=adjustWallpaperWindowsLocked();
}
if ((adjResult & ADJUST_WALLPAPER_LAYERS_CHANGED) != 0) {
if (DEBUG_WALLPAPER) Slog.v(TAG,"Wallpaper layer changed: assigning layers + relayout");
changes|=PhoneWindowManager.FINISH_LAYOUT_REDO_LAYOUT;
assignLayersLocked();
}
 else if ((adjResult & ADJUST_WALLPAPER_VISIBILITY_CHANGED) != 0) {
if (DEBUG_WALLPAPER) Slog.v(TAG,"Wallpaper visibility changed: relayout");
changes|=PhoneWindowManager.FINISH_LAYOUT_REDO_LAYOUT;
}
if (mFocusMayChange) {
mFocusMayChange=false;
if (updateFocusedWindowLocked(UPDATE_FOCUS_PLACING_SURFACES,false)) {
  changes|=PhoneWindowManager.FINISH_LAYOUT_REDO_ANIM;
  adjResult=0;
}
}
if (mLayoutNeeded) {
changes|=PhoneWindowManager.FINISH_LAYOUT_REDO_LAYOUT;
}
if (DEBUG_APP_TRANSITIONS) Slog.v(TAG,"*** ANIM STEP: changes=0x" + Integer.toHexString(changes));
}
 while (changes != 0);
final boolean someoneLosingFocus=mLosingFocus.size() != 0;
boolean obscured=false;
boolean blurring=false;
boolean dimming=false;
boolean covered=false;
boolean syswin=false;
final int N=mWindows.size();
for (i=N - 1; i >= 0; i--) {
WindowState w=mWindows.get(i);
boolean displayed=false;
final WindowManager.LayoutParams attrs=w.mAttrs;
final int attrFlags=attrs.flags;
if (w.mSurface != null) {
w.computeShownFrameLocked();
if (localLOGV) Slog.v(TAG,"Placing surface #" + i + " "+ w.mSurface+ ": new="+ w.mShownFrame);
if (w.mSurface != null) {
  int width, height;
  if ((w.mAttrs.flags & w.mAttrs.FLAG_SCALED) != 0) {
    width=w.mRequestedWidth;
    height=w.mRequestedHeight;
  }
 else {
    width=w.mCompatFrame.width();
    height=w.mCompatFrame.height();
  }
  if (width < 1) {
    width=1;
  }
  if (height < 1) {
    height=1;
  }
  final boolean surfaceResized=w.mSurfaceW != width || w.mSurfaceH != height;
  if (surfaceResized) {
    w.mSurfaceW=width;
    w.mSurfaceH=height;
  }
  if (w.mSurfaceX != w.mShownFrame.left || w.mSurfaceY != w.mShownFrame.top) {
    try {
      if (SHOW_TRANSACTIONS)       logSurface(w,"POS " + w.mShownFrame.left + ", "+ w.mShownFrame.top,null);
      w.mSurfaceX=w.mShownFrame.left;
      w.mSurfaceY=w.mShownFrame.top;
      w.mSurface.setPosition(w.mShownFrame.left,w.mShownFrame.top);
    }
 catch (    RuntimeException e) {
      Slog.w(TAG,"Error positioning surface of " + w + " pos=("+ w.mShownFrame.left+ ","+ w.mShownFrame.top+ ")",e);
      if (!recoveringMemory) {
        reclaimSomeSurfaceMemoryLocked(w,"position",true);
      }
    }
  }
  if (surfaceResized) {
    try {
      if (SHOW_TRANSACTIONS)       logSurface(w,"SIZE " + width + "x"+ height,null);
      w.mSurfaceResized=true;
      w.mSurface.setSize(width,height);
    }
 catch (    RuntimeException e) {
      Slog.e(TAG,"Error resizing surface of " + w + " size=("+ width+ "x"+ height+ ")",e);
      if (!recoveringMemory) {
        reclaimSomeSurfaceMemoryLocked(w,"size",true);
      }
    }
  }
}
if (!w.mAppFreezing && w.mLayoutSeq == mLayoutSeq) {
  w.mContentInsetsChanged|=!w.mLastContentInsets.equals(w.mContentInsets);
  w.mVisibleInsetsChanged|=!w.mLastVisibleInsets.equals(w.mVisibleInsets);
  boolean configChanged=w.mConfiguration != mCurConfiguration && (w.mConfiguration == null || mCurConfiguration.diff(w.mConfiguration) != 0);
  if (DEBUG_CONFIGURATION && configChanged) {
    Slog.v(TAG,"Win " + w + " config changed: "+ mCurConfiguration);
  }
  if (localLOGV)   Slog.v(TAG,"Resizing " + w + ": configChanged="+ configChanged+ " last="+ w.mLastFrame+ " frame="+ w.mFrame);
  w.mLastFrame.set(w.mFrame);
  if (w.mContentInsetsChanged || w.mVisibleInsetsChanged || w.mSurfaceResized|| configChanged) {
    if (DEBUG_RESIZE || DEBUG_ORIENTATION) {
      Slog.v(TAG,"Resize reasons: " + " contentInsetsChanged=" + w.mContentInsetsChanged + " visibleInsetsChanged="+ w.mVisibleInsetsChanged+ " surfaceResized="+ w.mSurfaceResized+ " configChanged="+ configChanged);
    }
    w.mLastContentInsets.set(w.mContentInsets);
    w.mLastVisibleInsets.set(w.mVisibleInsets);
    if (mDisplayFrozen) {
      if (DEBUG_ORIENTATION)       Slog.v(TAG,"Resizing while display frozen: " + w);
      w.mOrientationChanging=true;
      if (!mWindowsFreezingScreen) {
        mWindowsFreezingScreen=true;
        mH.removeMessages(H.WINDOW_FREEZE_TIMEOUT);
        mH.sendMessageDelayed(mH.obtainMessage(H.WINDOW_FREEZE_TIMEOUT),2000);
      }
    }
    if (w.mOrientationChanging) {
      if (DEBUG_ORIENTATION)       Slog.v(TAG,"Orientation start waiting for draw in " + w + ", surface "+ w.mSurface);
      w.mDrawPending=true;
      w.mCommitDrawPending=false;
      w.mReadyToShow=false;
      if (w.mAppToken != null) {
        w.mAppToken.allDrawn=false;
      }
    }
    if (!mResizingWindows.contains(w)) {
      if (DEBUG_RESIZE || DEBUG_ORIENTATION)       Slog.v(TAG,"Resizing window " + w + " to "+ w.mSurfaceW+ "x"+ w.mSurfaceH);
      mResizingWindows.add(w);
    }
  }
 else   if (w.mOrientationChanging) {
    if (!w.mDrawPending && !w.mCommitDrawPending) {
      if (DEBUG_ORIENTATION)       Slog.v(TAG,"Orientation not waiting for draw in " + w + ", surface "+ w.mSurface);
      w.mOrientationChanging=false;
    }
  }
}
if (w.mAttachedHidden || !w.isReadyForDisplay()) {
  if (!w.mLastHidden) {
    w.mLastHidden=true;
    if (SHOW_TRANSACTIONS)     logSurface(w,"HIDE (performLayout)",null);
    if (w.mSurface != null) {
      w.mSurfaceShown=false;
      try {
        w.mSurface.hide();
      }
 catch (      RuntimeException e) {
        Slog.w(TAG,"Exception hiding surface in " + w);
      }
    }
  }
  if (w.mOrientationChanging) {
    w.mOrientationChanging=false;
    if (DEBUG_ORIENTATION)     Slog.v(TAG,"Orientation change skips hidden " + w);
  }
}
 else if (w.mLastLayer != w.mAnimLayer || w.mLastAlpha != w.mShownAlpha || w.mLastDsDx != w.mDsDx || w.mLastDtDx != w.mDtDx || w.mLastDsDy != w.mDsDy || w.mLastDtDy != w.mDtDy || w.mLastHScale != w.mHScale || w.mLastVScale != w.mVScale || w.mLastHidden) {
  displayed=true;
  w.mLastAlpha=w.mShownAlpha;
  w.mLastLayer=w.mAnimLayer;
  w.mLastDsDx=w.mDsDx;
  w.mLastDtDx=w.mDtDx;
  w.mLastDsDy=w.mDsDy;
  w.mLastDtDy=w.mDtDy;
  w.mLastHScale=w.mHScale;
  w.mLastVScale=w.mVScale;
  if (SHOW_TRANSACTIONS)   logSurface(w,"alpha=" + w.mShownAlpha + " layer="+ w.mAnimLayer+ " matrix=["+ (w.mDsDx * w.mHScale)+ ","+ (w.mDtDx * w.mVScale)+ "]["+ (w.mDsDy * w.mHScale)+ ","+ (w.mDtDy * w.mVScale)+ "]",null);
  if (w.mSurface != null) {
    try {
      w.mSurfaceAlpha=w.mShownAlpha;
      w.mSurface.setAlpha(w.mShownAlpha);
      w.mSurfaceLayer=w.mAnimLayer;
      w.mSurface.setLayer(w.mAnimLayer);
      w.mSurface.setMatrix(w.mDsDx * w.mHScale,w.mDtDx * w.mVScale,w.mDsDy * w.mHScale,w.mDtDy * w.mVScale);
    }
 catch (    RuntimeException e) {
      Slog.w(TAG,"Error updating surface in " + w,e);
      if (!recoveringMemory) {
        reclaimSomeSurfaceMemoryLocked(w,"update",true);
      }
    }
  }
  if (w.mLastHidden && !w.mDrawPending && !w.mCommitDrawPending&& !w.mReadyToShow) {
    if (SHOW_TRANSACTIONS)     logSurface(w,"SHOW (performLayout)",null);
    if (DEBUG_VISIBILITY)     Slog.v(TAG,"Showing " + w + " during relayout");
    if (showSurfaceRobustlyLocked(w)) {
      w.mHasDrawn=true;
      w.mLastHidden=false;
    }
 else {
      w.mOrientationChanging=false;
    }
  }
  if (w.mSurface != null) {
    w.mToken.hasVisible=true;
  }
}
 else {
  displayed=true;
}
if (displayed) {
  if (!covered) {
    if (attrs.width == LayoutParams.MATCH_PARENT && attrs.height == LayoutParams.MATCH_PARENT) {
      covered=true;
    }
  }
  if (w.mOrientationChanging) {
    if (w.mDrawPending || w.mCommitDrawPending) {
      orientationChangeComplete=false;
      if (DEBUG_ORIENTATION)       Slog.v(TAG,"Orientation continue waiting for draw in " + w);
    }
 else {
      w.mOrientationChanging=false;
      if (DEBUG_ORIENTATION)       Slog.v(TAG,"Orientation change complete in " + w);
    }
  }
  w.mToken.hasVisible=true;
}
}
 else if (w.mOrientationChanging) {
if (DEBUG_ORIENTATION) Slog.v(TAG,"Orientation change skips hidden " + w);
w.mOrientationChanging=false;
}
if (w.mContentChanged) {
w.mContentChanged=false;
}
final boolean canBeSeen=w.isDisplayedLw();
if (someoneLosingFocus && w == mCurrentFocus && canBeSeen) {
focusDisplayed=true;
}
final boolean obscuredChanged=w.mObscured != obscured;
if (!(w.mObscured=obscured)) {
if (w.mSurface != null) {
  if ((attrFlags & FLAG_KEEP_SCREEN_ON) != 0) {
    holdScreen=w.mSession;
  }
  if (!syswin && w.mAttrs.screenBrightness >= 0 && screenBrightness < 0) {
    screenBrightness=w.mAttrs.screenBrightness;
  }
  if (!syswin && w.mAttrs.buttonBrightness >= 0 && buttonBrightness < 0) {
    buttonBrightness=w.mAttrs.buttonBrightness;
  }
  if (canBeSeen && (attrs.type == WindowManager.LayoutParams.TYPE_SYSTEM_DIALOG || attrs.type == WindowManager.LayoutParams.TYPE_KEYGUARD || attrs.type == WindowManager.LayoutParams.TYPE_SYSTEM_ERROR)) {
    syswin=true;
  }
}
boolean opaqueDrawn=canBeSeen && w.isOpaqueDrawn();
if (opaqueDrawn && w.isFullscreen(innerDw,innerDh)) {
  obscured=true;
}
 else if (canBeSeen && !obscured && (attrFlags & FLAG_BLUR_BEHIND | FLAG_DIM_BEHIND) != 0) {
  if (localLOGV)   Slog.v(TAG,"Win " + w + ": blurring="+ blurring+ " obscured="+ obscured+ " displayed="+ displayed);
  if ((attrFlags & FLAG_DIM_BEHIND) != 0) {
    if (!dimming) {
      dimming=true;
      if (mDimAnimator == null) {
        mDimAnimator=new DimAnimator(mFxSession);
      }
      mDimAnimator.show(innerDw,innerDh);
      mDimAnimator.updateParameters(mContext.getResources(),w,currentTime);
    }
  }
  if ((attrFlags & FLAG_BLUR_BEHIND) != 0) {
    if (!blurring) {
      blurring=true;
      if (mBlurSurface == null) {
        try {
          mBlurSurface=new Surface(mFxSession,0,"BlurSurface",-1,16,16,PixelFormat.OPAQUE,Surface.FX_SURFACE_BLUR);
        }
 catch (        Exception e) {
          Slog.e(TAG,"Exception creating Blur surface",e);
        }
        if (SHOW_TRANSACTIONS)         Slog.i(TAG,"  BLUR " + mBlurSurface + ": CREATE");
      }
      if (mBlurSurface != null) {
        if (SHOW_TRANSACTIONS)         Slog.i(TAG,"  BLUR " + mBlurSurface + ": pos=(0,0) ("+ dw+ "x"+ dh+ "), layer="+ (w.mAnimLayer - 1));
        mBlurSurface.setPosition(0,0);
        mBlurSurface.setSize(dw,dh);
        mBlurSurface.setLayer(w.mAnimLayer - LAYER_OFFSET_BLUR);
        if (!mBlurShown) {
          try {
            if (SHOW_TRANSACTIONS)             Slog.i(TAG,"  BLUR " + mBlurSurface + ": SHOW");
            mBlurSurface.show();
          }
 catch (          RuntimeException e) {
            Slog.w(TAG,"Failure showing blur surface",e);
          }
          mBlurShown=true;
        }
      }
    }
  }
}
}
if (obscuredChanged && mWallpaperTarget == w) {
updateWallpaperVisibilityLocked();
}
}
if (mDimAnimator != null && mDimAnimator.mDimShown) {
animating|=mDimAnimator.updateSurface(dimming,currentTime,mDisplayFrozen || !mDisplayEnabled || !mPolicy.isScreenOn());
}
if (!blurring && mBlurShown) {
if (SHOW_TRANSACTIONS) Slog.i(TAG,"  BLUR " + mBlurSurface + ": HIDE");
try {
mBlurSurface.hide();
}
 catch (IllegalArgumentException e) {
Slog.w(TAG,"Illegal argument exception hiding blur surface");
}
mBlurShown=false;
}
if (mBlackFrame != null) {
if (mScreenRotationAnimation != null) {
mBlackFrame.setMatrix(mScreenRotationAnimation.getEnterTransformation().getMatrix());
}
 else {
mBlackFrame.clearMatrix();
}
}
}
 catch (RuntimeException e) {
Slog.e(TAG,"Unhandled exception in Window Manager",e);
}
Surface.closeTransaction();
if (SHOW_TRANSACTIONS) Slog.i(TAG,"<<< CLOSE TRANSACTION performLayoutAndPlaceSurfaces");
if (mWatermark != null) {
mWatermark.drawIfNeeded();
}
if (DEBUG_ORIENTATION && mDisplayFrozen) Slog.v(TAG,"With display frozen, orientationChangeComplete=" + orientationChangeComplete);
if (orientationChangeComplete) {
if (mWindowsFreezingScreen) {
mWindowsFreezingScreen=false;
mH.removeMessages(H.WINDOW_FREEZE_TIMEOUT);
}
stopFreezingDisplayLocked();
}
i=mResizingWindows.size();
if (i > 0) {
do {
i--;
WindowState win=mResizingWindows.get(i);
try {
if (DEBUG_RESIZE || DEBUG_ORIENTATION) Slog.v(TAG,"Reporting new frame to " + win + ": "+ win.mCompatFrame);
int diff=0;
boolean configChanged=win.mConfiguration != mCurConfiguration && (win.mConfiguration == null || (diff=mCurConfiguration.diff(win.mConfiguration)) != 0);
if ((DEBUG_RESIZE || DEBUG_ORIENTATION || DEBUG_CONFIGURATION) && configChanged) {
  Slog.i(TAG,"Sending new config to window " + win + ": "+ win.mSurfaceW+ "x"+ win.mSurfaceH+ " / "+ mCurConfiguration+ " / 0x"+ Integer.toHexString(diff));
}
win.mConfiguration=mCurConfiguration;
win.mClient.resized(win.mSurfaceW,win.mSurfaceH,win.mLastContentInsets,win.mLastVisibleInsets,win.mDrawPending,configChanged ? win.mConfiguration : null);
win.mContentInsetsChanged=false;
win.mVisibleInsetsChanged=false;
win.mSurfaceResized=false;
}
 catch (RemoteException e) {
win.mOrientationChanging=false;
}
}
 while (i > 0);
mResizingWindows.clear();
}
boolean wallpaperDestroyed=false;
i=mDestroySurface.size();
if (i > 0) {
do {
i--;
WindowState win=mDestroySurface.get(i);
win.mDestroying=false;
if (mInputMethodWindow == win) {
mInputMethodWindow=null;
}
if (win == mWallpaperTarget) {
wallpaperDestroyed=true;
}
win.destroySurfaceLocked();
}
 while (i > 0);
mDestroySurface.clear();
}
for (i=mExitingTokens.size() - 1; i >= 0; i--) {
WindowToken token=mExitingTokens.get(i);
if (!token.hasVisible) {
mExitingTokens.remove(i);
if (token.windowType == TYPE_WALLPAPER) {
mWallpaperTokens.remove(token);
}
}
}
for (i=mExitingAppTokens.size() - 1; i >= 0; i--) {
AppWindowToken token=mExitingAppTokens.get(i);
if (!token.hasVisible && !mClosingApps.contains(token)) {
token.animation=null;
token.animating=false;
if (DEBUG_ADD_REMOVE || DEBUG_TOKEN_MOVEMENT) Slog.v(TAG,"performLayout: App token exiting now removed" + token);
mAppTokens.remove(token);
mExitingAppTokens.remove(i);
}
}
boolean needRelayout=false;
if (!animating && mAppTransitionRunning) {
mAppTransitionRunning=false;
needRelayout=true;
rebuildAppWindowListLocked();
assignLayersLocked();
mToBottomApps.clear();
}
if (focusDisplayed) {
mH.sendEmptyMessage(H.REPORT_LOSING_FOCUS);
}
if (wallpaperDestroyed) {
needRelayout=adjustWallpaperWindowsLocked() != 0;
}
if (needRelayout) {
requestAnimationLocked(0);
}
 else if (animating) {
requestAnimationLocked(currentTime + (1000 / 60) - SystemClock.uptimeMillis());
}
mInputMonitor.updateInputWindowsLw(true);
setHoldScreenLocked(holdScreen != null);
if (!mDisplayFrozen) {
if (screenBrightness < 0 || screenBrightness > 1.0f) {
mPowerManager.setScreenBrightnessOverride(-1);
}
 else {
mPowerManager.setScreenBrightnessOverride((int)(screenBrightness * Power.BRIGHTNESS_ON));
}
if (buttonBrightness < 0 || buttonBrightness > 1.0f) {
mPowerManager.setButtonBrightnessOverride(-1);
}
 else {
mPowerManager.setButtonBrightnessOverride((int)(buttonBrightness * Power.BRIGHTNESS_ON));
}
}
if (holdScreen != mHoldingScreenOn) {
mHoldingScreenOn=holdScreen;
Message m=mH.obtainMessage(H.HOLD_SCREEN_CHANGED,holdScreen);
mH.sendMessage(m);
}
if (mTurnOnScreen) {
if (DEBUG_VISIBILITY) Slog.v(TAG,"Turning screen on after layout!");
mPowerManager.userActivity(SystemClock.uptimeMillis(),false,LocalPowerManager.BUTTON_EVENT,true);
mTurnOnScreen=false;
}
if (screenRotationFinished && mScreenRotationAnimation != null) {
mScreenRotationAnimation.kill();
mScreenRotationAnimation=null;
}
if (updateRotation) {
if (DEBUG_ORIENTATION) Slog.d(TAG,"Performing post-rotate rotation");
boolean changed=setRotationUncheckedLocked(WindowManagerPolicy.USE_LAST_ROTATION,0,false);
if (changed) {
mH.sendEmptyMessage(H.SEND_NEW_CONFIGURATION);
}
}
mWindowMap.notifyAll();
enableScreenIfNeededLocked();
}
