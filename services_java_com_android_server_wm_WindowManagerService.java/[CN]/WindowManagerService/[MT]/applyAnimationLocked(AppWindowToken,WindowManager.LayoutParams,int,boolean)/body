{
  if (okToDisplay()) {
    Animation a;
    boolean initialized=false;
    if (mNextAppTransitionType == ActivityOptions.ANIM_CUSTOM) {
      a=loadAnimation(mNextAppTransitionPackage,enter ? mNextAppTransitionEnter : mNextAppTransitionExit);
      if (DEBUG_APP_TRANSITIONS || DEBUG_ANIM)       Slog.v(TAG,"applyAnimation: atoken=" + atoken + " anim="+ a+ " nextAppTransition=ANIM_CUSTOM"+ " transit="+ transit+ " isEntrance="+ enter+ " Callers="+ Debug.getCallers(3));
    }
 else     if (mNextAppTransitionType == ActivityOptions.ANIM_SCALE_UP) {
      a=createScaleUpAnimationLocked(transit,enter);
      initialized=true;
      if (DEBUG_APP_TRANSITIONS || DEBUG_ANIM)       Slog.v(TAG,"applyAnimation: atoken=" + atoken + " anim="+ a+ " nextAppTransition=ANIM_SCALE_UP"+ " transit="+ transit+ " isEntrance="+ enter+ " Callers="+ Debug.getCallers(3));
    }
 else     if (mNextAppTransitionType == ActivityOptions.ANIM_THUMBNAIL_SCALE_UP || mNextAppTransitionType == ActivityOptions.ANIM_THUMBNAIL_SCALE_DOWN) {
      boolean scaleUp=(mNextAppTransitionType == ActivityOptions.ANIM_THUMBNAIL_SCALE_UP);
      a=createThumbnailAnimationLocked(transit,enter,false,scaleUp);
      initialized=true;
      if (DEBUG_APP_TRANSITIONS || DEBUG_ANIM) {
        String animName=scaleUp ? "ANIM_THUMBNAIL_SCALE_UP" : "ANIM_THUMBNAIL_SCALE_DOWN";
        Slog.v(TAG,"applyAnimation: atoken=" + atoken + " anim="+ a+ " nextAppTransition="+ animName+ " transit="+ transit+ " isEntrance="+ enter+ " Callers="+ Debug.getCallers(3));
      }
    }
 else {
      int animAttr=0;
switch (transit) {
case WindowManagerPolicy.TRANSIT_ACTIVITY_OPEN:
        animAttr=enter ? com.android.internal.R.styleable.WindowAnimation_activityOpenEnterAnimation : com.android.internal.R.styleable.WindowAnimation_activityOpenExitAnimation;
      break;
case WindowManagerPolicy.TRANSIT_ACTIVITY_CLOSE:
    animAttr=enter ? com.android.internal.R.styleable.WindowAnimation_activityCloseEnterAnimation : com.android.internal.R.styleable.WindowAnimation_activityCloseExitAnimation;
  break;
case WindowManagerPolicy.TRANSIT_TASK_OPEN:
animAttr=enter ? com.android.internal.R.styleable.WindowAnimation_taskOpenEnterAnimation : com.android.internal.R.styleable.WindowAnimation_taskOpenExitAnimation;
break;
case WindowManagerPolicy.TRANSIT_TASK_CLOSE:
animAttr=enter ? com.android.internal.R.styleable.WindowAnimation_taskCloseEnterAnimation : com.android.internal.R.styleable.WindowAnimation_taskCloseExitAnimation;
break;
case WindowManagerPolicy.TRANSIT_TASK_TO_FRONT:
animAttr=enter ? com.android.internal.R.styleable.WindowAnimation_taskToFrontEnterAnimation : com.android.internal.R.styleable.WindowAnimation_taskToFrontExitAnimation;
break;
case WindowManagerPolicy.TRANSIT_TASK_TO_BACK:
animAttr=enter ? com.android.internal.R.styleable.WindowAnimation_taskToBackEnterAnimation : com.android.internal.R.styleable.WindowAnimation_taskToBackExitAnimation;
break;
case WindowManagerPolicy.TRANSIT_WALLPAPER_OPEN:
animAttr=enter ? com.android.internal.R.styleable.WindowAnimation_wallpaperOpenEnterAnimation : com.android.internal.R.styleable.WindowAnimation_wallpaperOpenExitAnimation;
break;
case WindowManagerPolicy.TRANSIT_WALLPAPER_CLOSE:
animAttr=enter ? com.android.internal.R.styleable.WindowAnimation_wallpaperCloseEnterAnimation : com.android.internal.R.styleable.WindowAnimation_wallpaperCloseExitAnimation;
break;
case WindowManagerPolicy.TRANSIT_WALLPAPER_INTRA_OPEN:
animAttr=enter ? com.android.internal.R.styleable.WindowAnimation_wallpaperIntraOpenEnterAnimation : com.android.internal.R.styleable.WindowAnimation_wallpaperIntraOpenExitAnimation;
break;
case WindowManagerPolicy.TRANSIT_WALLPAPER_INTRA_CLOSE:
animAttr=enter ? com.android.internal.R.styleable.WindowAnimation_wallpaperIntraCloseEnterAnimation : com.android.internal.R.styleable.WindowAnimation_wallpaperIntraCloseExitAnimation;
break;
}
a=animAttr != 0 ? loadAnimation(lp,animAttr) : null;
if (DEBUG_APP_TRANSITIONS || DEBUG_ANIM) Slog.v(TAG,"applyAnimation: atoken=" + atoken + " anim="+ a+ " animAttr=0x"+ Integer.toHexString(animAttr)+ " transit="+ transit+ " isEntrance="+ enter+ " Callers="+ Debug.getCallers(3));
}
if (a != null) {
if (DEBUG_ANIM) {
RuntimeException e=null;
if (!HIDE_STACK_CRAWLS) {
e=new RuntimeException();
e.fillInStackTrace();
}
Slog.v(TAG,"Loaded animation " + a + " for "+ atoken,e);
}
atoken.mAppAnimator.setAnimation(a,initialized);
}
}
 else {
atoken.mAppAnimator.clearAnimation();
}
return atoken.mAppAnimator.animation != null;
}
