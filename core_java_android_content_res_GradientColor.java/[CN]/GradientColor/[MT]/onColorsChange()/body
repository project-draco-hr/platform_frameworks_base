{
  int[] tempColors=null;
  float[] tempOffsets=null;
  if (mItemColors != null) {
    int length=mItemColors.length;
    tempColors=new int[length];
    tempOffsets=new float[length];
    for (int i=0; i < length; i++) {
      tempColors[i]=mItemColors[i];
      tempOffsets[i]=mItemOffsets[i];
    }
  }
 else {
    if (mHasCenterColor) {
      tempColors=new int[3];
      tempColors[0]=mStartColor;
      tempColors[1]=mCenterColor;
      tempColors[2]=mEndColor;
      tempOffsets=new float[3];
      tempOffsets[0]=0.0f;
      tempOffsets[1]=0.5f;
      tempOffsets[2]=1f;
    }
 else {
      tempColors=new int[2];
      tempColors[0]=mStartColor;
      tempColors[1]=mEndColor;
    }
  }
  if (tempColors.length < 2) {
    Log.w(TAG,"<gradient> tag requires 2 color values specified!" + tempColors.length + " "+ tempColors);
  }
  if (mGradientType == GradientDrawable.LINEAR_GRADIENT) {
    mShader=new LinearGradient(mStartX,mStartY,mEndX,mEndY,tempColors,tempOffsets,parseTileMode(mTileMode));
  }
 else {
    if (mGradientType == GradientDrawable.RADIAL_GRADIENT) {
      mShader=new RadialGradient(mCenterX,mCenterY,mGradientRadius,tempColors,tempOffsets,parseTileMode(mTileMode));
    }
 else {
      mShader=new SweepGradient(mCenterX,mCenterY,tempColors,tempOffsets);
    }
  }
  mDefaultColor=tempColors[0];
}
