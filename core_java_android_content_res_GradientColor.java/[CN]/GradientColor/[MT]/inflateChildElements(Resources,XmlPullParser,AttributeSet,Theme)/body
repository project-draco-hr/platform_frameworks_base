{
  final int innerDepth=parser.getDepth() + 1;
  int type;
  int depth;
  float[] offsetList=new float[20];
  int[] colorList=new int[offsetList.length];
  int[][] themeAttrsList=new int[offsetList.length][];
  int listSize=0;
  boolean hasUnresolvedAttrs=false;
  while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && ((depth=parser.getDepth()) >= innerDepth || type != XmlPullParser.END_TAG)) {
    if (type != XmlPullParser.START_TAG) {
      continue;
    }
    if (depth > innerDepth || !parser.getName().equals("item")) {
      continue;
    }
    final TypedArray a=Resources.obtainAttributes(r,theme,attrs,R.styleable.GradientColorItem);
    boolean hasColor=a.hasValue(R.styleable.GradientColorItem_color);
    boolean hasOffset=a.hasValue(R.styleable.GradientColorItem_offset);
    if (!hasColor || !hasOffset) {
      throw new XmlPullParserException(parser.getPositionDescription() + ": <item> tag requires a 'color' attribute and a 'offset' " + "attribute!");
    }
    final int[] themeAttrs=a.extractThemeAttrs();
    int color=a.getColor(R.styleable.GradientColorItem_color,0);
    float offset=a.getFloat(R.styleable.GradientColorItem_offset,0);
    if (DBG_GRADIENT) {
      Log.v(TAG,"new item color " + color + " "+ Integer.toHexString(color));
      Log.v(TAG,"offset" + offset);
    }
    mChangingConfigurations|=a.getChangingConfigurations();
    a.recycle();
    if (themeAttrs != null) {
      hasUnresolvedAttrs=true;
    }
    colorList=GrowingArrayUtils.append(colorList,listSize,color);
    offsetList=GrowingArrayUtils.append(offsetList,listSize,offset);
    themeAttrsList=GrowingArrayUtils.append(themeAttrsList,listSize,themeAttrs);
    listSize++;
  }
  if (listSize > 0) {
    if (hasUnresolvedAttrs) {
      mItemsThemeAttrs=new int[listSize][];
      System.arraycopy(themeAttrsList,0,mItemsThemeAttrs,0,listSize);
    }
 else {
      mItemsThemeAttrs=null;
    }
    mItemColors=new int[listSize];
    mItemOffsets=new float[listSize];
    System.arraycopy(colorList,0,mItemColors,0,listSize);
    System.arraycopy(offsetList,0,mItemOffsets,0,listSize);
  }
}
