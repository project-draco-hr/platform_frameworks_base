{
  if (mSubtypeNameResId == 0) {
    return getLocaleDisplayName(getLocaleFromContext(context),getLocaleObject(),DisplayContext.CAPITALIZATION_FOR_UI_LIST_OR_MENU);
  }
  final CharSequence subtypeName=context.getPackageManager().getText(packageName,mSubtypeNameResId,appInfo);
  if (TextUtils.isEmpty(subtypeName)) {
    return "";
  }
  final String subtypeNameString=subtypeName.toString();
  String replacementString;
  if (containsExtraValueKey(EXTRA_KEY_UNTRANSLATABLE_STRING_IN_SUBTYPE_NAME)) {
    replacementString=getExtraValueOf(EXTRA_KEY_UNTRANSLATABLE_STRING_IN_SUBTYPE_NAME);
  }
 else {
    final DisplayContext displayContext;
    if (TextUtils.equals(subtypeNameString,"%s")) {
      displayContext=DisplayContext.CAPITALIZATION_FOR_UI_LIST_OR_MENU;
    }
 else     if (subtypeNameString.startsWith("%s")) {
      displayContext=DisplayContext.CAPITALIZATION_FOR_BEGINNING_OF_SENTENCE;
    }
 else {
      displayContext=DisplayContext.CAPITALIZATION_FOR_MIDDLE_OF_SENTENCE;
    }
    replacementString=getLocaleDisplayName(getLocaleFromContext(context),getLocaleObject(),displayContext);
  }
  if (replacementString == null) {
    replacementString="";
  }
  try {
    return String.format(subtypeNameString,replacementString);
  }
 catch (  IllegalFormatException e) {
    Slog.w(TAG,"Found illegal format in subtype name(" + subtypeName + "): "+ e);
    return "";
  }
}
