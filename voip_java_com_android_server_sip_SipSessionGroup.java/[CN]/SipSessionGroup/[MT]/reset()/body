{
  Properties properties=new Properties();
  String protocol=mLocalProfile.getProtocol();
  int port=mLocalProfile.getPort();
  String server=mLocalProfile.getProxyAddress();
  if (!TextUtils.isEmpty(server)) {
    properties.setProperty("javax.sip.OUTBOUND_PROXY",server + ':' + port+ '/'+ protocol);
  }
 else {
    server=mLocalProfile.getSipDomain();
  }
  if (server.startsWith("[") && server.endsWith("]")) {
    server=server.substring(1,server.length() - 1);
  }
  String local=null;
  try {
    for (    InetAddress remote : InetAddress.getAllByName(server)) {
      DatagramSocket socket=new DatagramSocket();
      socket.connect(remote,port);
      if (socket.isConnected()) {
        local=socket.getLocalAddress().getHostAddress();
        port=socket.getLocalPort();
        socket.close();
        break;
      }
      socket.close();
    }
  }
 catch (  Exception e) {
  }
  if (local == null) {
    return;
  }
  close();
  mLocalIp=local;
  properties.setProperty("javax.sip.STACK_NAME",getStackName());
  properties.setProperty("gov.nist.javax.sip.THREAD_POOL_SIZE",THREAD_POOL_SIZE);
  mSipStack=SipFactory.getInstance().createSipStack(properties);
  try {
    SipProvider provider=mSipStack.createSipProvider(mSipStack.createListeningPoint(local,port,protocol));
    provider.addSipListener(this);
    mSipHelper=new SipHelper(mSipStack,provider);
  }
 catch (  SipException e) {
    throw e;
  }
catch (  Exception e) {
    throw new SipException("failed to initialize SIP stack",e);
  }
  Log.d(TAG," start stack for " + mLocalProfile.getUriString());
  mSipStack.start();
}
