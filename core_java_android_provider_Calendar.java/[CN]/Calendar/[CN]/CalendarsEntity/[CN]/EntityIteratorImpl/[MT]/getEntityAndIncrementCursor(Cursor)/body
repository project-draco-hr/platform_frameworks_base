{
  final long calendarId=cursor.getLong(cursor.getColumnIndexOrThrow(_ID));
  ContentValues cv=new ContentValues();
  cv.put(_ID,calendarId);
  DatabaseUtils.cursorStringToContentValuesIfPresent(cursor,cv,_SYNC_ACCOUNT);
  DatabaseUtils.cursorStringToContentValuesIfPresent(cursor,cv,_SYNC_ACCOUNT_TYPE);
  DatabaseUtils.cursorStringToContentValuesIfPresent(cursor,cv,_SYNC_ID);
  DatabaseUtils.cursorStringToContentValuesIfPresent(cursor,cv,_SYNC_VERSION);
  DatabaseUtils.cursorStringToContentValuesIfPresent(cursor,cv,_SYNC_TIME);
  DatabaseUtils.cursorStringToContentValuesIfPresent(cursor,cv,_SYNC_DATA);
  DatabaseUtils.cursorLongToContentValuesIfPresent(cursor,cv,_SYNC_DIRTY);
  DatabaseUtils.cursorLongToContentValuesIfPresent(cursor,cv,_SYNC_MARK);
  DatabaseUtils.cursorStringToContentValuesIfPresent(cursor,cv,Calendars.SYNC1);
  DatabaseUtils.cursorStringToContentValuesIfPresent(cursor,cv,Calendars.SYNC2);
  DatabaseUtils.cursorStringToContentValuesIfPresent(cursor,cv,Calendars.SYNC3);
  DatabaseUtils.cursorStringToContentValuesIfPresent(cursor,cv,Calendars.NAME);
  DatabaseUtils.cursorStringToContentValuesIfPresent(cursor,cv,Calendars.DISPLAY_NAME);
  DatabaseUtils.cursorIntToContentValuesIfPresent(cursor,cv,Calendars.HIDDEN);
  DatabaseUtils.cursorIntToContentValuesIfPresent(cursor,cv,Calendars.COLOR);
  DatabaseUtils.cursorIntToContentValuesIfPresent(cursor,cv,ACCESS_LEVEL);
  DatabaseUtils.cursorIntToContentValuesIfPresent(cursor,cv,SELECTED);
  DatabaseUtils.cursorIntToContentValuesIfPresent(cursor,cv,SYNC_EVENTS);
  DatabaseUtils.cursorStringToContentValuesIfPresent(cursor,cv,Calendars.LOCATION);
  DatabaseUtils.cursorStringToContentValuesIfPresent(cursor,cv,TIMEZONE);
  DatabaseUtils.cursorStringToContentValuesIfPresent(cursor,cv,Calendars.OWNER_ACCOUNT);
  DatabaseUtils.cursorIntToContentValuesIfPresent(cursor,cv,Calendars.ORGANIZER_CAN_RESPOND);
  DatabaseUtils.cursorIntToContentValuesIfPresent(cursor,cv,DELETED);
  Entity entity=new Entity(cv);
  cursor.moveToNext();
  return entity;
}
