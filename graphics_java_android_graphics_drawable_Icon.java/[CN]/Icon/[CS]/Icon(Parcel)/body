{
  this(in.readInt());
switch (mType) {
case TYPE_BITMAP:
    final Bitmap bits=Bitmap.CREATOR.createFromParcel(in);
  mObj1=bits;
break;
case TYPE_RESOURCE:
final String pkg=in.readString();
final int resId=in.readInt();
mString1=pkg;
mInt1=resId;
break;
case TYPE_DATA:
final int len=in.readInt();
final byte[] a=in.readBlob();
if (len != a.length) {
throw new RuntimeException("internal unparceling error: blob length (" + a.length + ") != expected length ("+ len+ ")");
}
mInt1=len;
mObj1=a;
break;
case TYPE_URI:
final String uri=in.readString();
mString1=uri;
break;
default :
throw new RuntimeException("invalid " + this.getClass().getSimpleName() + " type in parcel: "+ mType);
}
if (in.readInt() == 1) {
mTintList=ColorStateList.CREATOR.createFromParcel(in);
}
mTintMode=PorterDuff.intToMode(in.readInt());
}
