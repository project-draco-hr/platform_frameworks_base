{
  List<ANQPElementType> list=new ArrayList<ANQPElementType>(elements);
  Collections.sort(list);
  ListIterator<ANQPElementType> elementIterator=list.listIterator();
  target.order(ByteOrder.LITTLE_ENDIAN);
  target.putShort((short)Constants.ANQP_QUERY_LIST);
  int lenPos=target.position();
  target.putShort((short)0);
  while (elementIterator.hasNext()) {
    Integer id=Constants.getANQPElementID(elementIterator.next());
    if (id != null) {
      target.putShort(id.shortValue());
    }
 else {
      elementIterator.previous();
    }
  }
  target.putShort(lenPos,(short)(target.position() - lenPos - BYTES_IN_SHORT));
  if (elementIterator.hasNext()) {
    target.putShort((short)ANQP_VENDOR_SPEC);
    int vsLenPos=target.position();
    target.putShort((short)0);
    target.putInt(Constants.HS20_PREFIX);
    target.put((byte)Constants.HS_QUERY_LIST);
    target.put((byte)0);
    while (elementIterator.hasNext()) {
      ANQPElementType elementType=elementIterator.next();
      Integer id=Constants.getHS20ElementID(elementType);
      if (id == null) {
        throw new RuntimeException("Unmapped ANQPElementType: " + elementType);
      }
 else {
        target.put(id.byteValue());
      }
    }
    target.putShort(vsLenPos,(short)(target.position() - vsLenPos - BYTES_IN_SHORT));
  }
  target.flip();
  return target;
}
