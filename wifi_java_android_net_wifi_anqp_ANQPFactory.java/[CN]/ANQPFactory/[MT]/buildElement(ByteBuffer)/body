{
  if (payload.remaining() < 4)   throw new ProtocolException("Runt payload: " + payload.remaining());
  int infoIDNumber=payload.getShort() & SHORT_MASK;
  ANQPElementType infoID=Constants.mapANQPElement(infoIDNumber);
  if (infoID == null) {
    throw new ProtocolException("Bad info ID: " + infoIDNumber);
  }
  int length=payload.getShort() & SHORT_MASK;
  if (payload.remaining() < length) {
    throw new ProtocolException("Truncated payload");
  }
  ByteBuffer elementPayload=payload.duplicate();
  payload.position(payload.position() + length);
  elementPayload.limit(elementPayload.position() + length);
switch (infoID) {
case ANQPCapabilityList:
    return new CapabilityListElement(infoID,elementPayload);
case ANQPVenueName:
  return new VenueNameElement(infoID,elementPayload);
case ANQPEmergencyNumber:
return new EmergencyNumberElement(infoID,elementPayload);
case ANQPNwkAuthType:
return new NetworkAuthenticationTypeElement(infoID,elementPayload);
case ANQPRoamingConsortium:
return new RoamingConsortiumElement(infoID,elementPayload);
case ANQPIPAddrAvailability:
return new IPAddressTypeAvailabilityElement(infoID,elementPayload);
case ANQPNAIRealm:
return new NAIRealmElement(infoID,elementPayload);
case ANQP3GPPNetwork:
return new ThreeGPPNetworkElement(infoID,elementPayload);
case ANQPGeoLoc:
return new GEOLocationElement(infoID,elementPayload);
case ANQPCivicLoc:
return new CivicLocationElement(infoID,elementPayload);
case ANQPLocURI:
return new GenericStringElement(infoID,elementPayload);
case ANQPDomName:
return new DomainNameElement(infoID,elementPayload);
case ANQPEmergencyAlert:
return new GenericStringElement(infoID,elementPayload);
case ANQPTDLSCap:
return new GenericBlobElement(infoID,elementPayload);
case ANQPEmergencyNAI:
return new GenericStringElement(infoID,elementPayload);
case ANQPNeighborReport:
return new GenericBlobElement(infoID,elementPayload);
case ANQPVendorSpec:
if (elementPayload.remaining() > 5) {
int oi=elementPayload.getInt();
if (oi != Constants.HS20_PREFIX) {
return null;
}
int subType=elementPayload.get() & BYTE_MASK;
elementPayload.get();
return buildHS20Element(subType,elementPayload);
}
 else {
return new GenericBlobElement(infoID,elementPayload);
}
default :
throw new ProtocolException("Unknown element ID: " + infoID);
}
}
