{
  super.onCreate(icicle);
  LinearLayout contentView=new LinearLayout(this);
  contentView.setOrientation(LinearLayout.VERTICAL);
  setContentView(contentView);
  mWebView=new WebView(this);
  mWebView.getSettings().setJavaScriptEnabled(true);
  mWebView.setWebChromeClient(mChromeClient);
  mWebView.setWebViewClient(new WebViewClient(){
    @Override public void onPageFinished(    WebView view,    String url){
      Log.v(LOGTAG,"onPageFinished, url=" + url);
      super.onPageFinished(view,url);
    }
    @Override public void onPageStarted(    WebView view,    String url,    Bitmap favicon){
      Log.v(LOGTAG,"onPageStarted, url=" + url);
      super.onPageStarted(view,url,favicon);
    }
    @Override public void onReceivedError(    WebView view,    int errorCode,    String description,    String failingUrl){
      Log.v(LOGTAG,"onReceivedError, errorCode=" + errorCode + ", desc="+ description+ ", url="+ failingUrl);
      super.onReceivedError(view,errorCode,description,failingUrl);
    }
    @Override public void onReceivedHttpAuthRequest(    WebView view,    HttpAuthHandler handler,    String host,    String realm){
      handler.cancel();
    }
    @Override public void onReceivedSslError(    WebView view,    SslErrorHandler handler,    SslError error){
      handler.proceed();
    }
  }
);
  mEventSender=new WebViewEventSender(mWebView);
  mCallbackProxy=new CallbackProxy(mEventSender,this);
  mWebView.addJavascriptInterface(mCallbackProxy,"layoutTestController");
  mWebView.addJavascriptInterface(mCallbackProxy,"eventSender");
  contentView.addView(mWebView,new LinearLayout.LayoutParams(ViewGroup.LayoutParams.FILL_PARENT,ViewGroup.LayoutParams.FILL_PARENT,0.0f));
  mWebView.getSettings().setLayoutAlgorithm(WebSettings.LayoutAlgorithm.NORMAL);
  mHandler=new AsyncHandler();
  Intent intent=getIntent();
  if (intent != null) {
    executeIntent(intent);
  }
}
