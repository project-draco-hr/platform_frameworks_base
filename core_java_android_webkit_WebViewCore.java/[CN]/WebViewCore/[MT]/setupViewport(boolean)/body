{
  if (mWebView == null || mSettings == null) {
    return;
  }
  setViewportSettingsFromNative();
  if (mViewportInitialScale > 0) {
    if (mViewportMinimumScale > 0) {
      mViewportInitialScale=Math.max(mViewportInitialScale,mViewportMinimumScale);
    }
    if (mViewportMaximumScale > 0) {
      mViewportInitialScale=Math.min(mViewportInitialScale,mViewportMaximumScale);
    }
  }
  if (mSettings.forceUserScalable()) {
    mViewportUserScalable=true;
    if (mViewportInitialScale > 0) {
      if (mViewportMinimumScale > 0) {
        mViewportMinimumScale=Math.min(mViewportMinimumScale,mViewportInitialScale / 2);
      }
      if (mViewportMaximumScale > 0) {
        mViewportMaximumScale=Math.max(mViewportMaximumScale,mViewportInitialScale * 2);
      }
    }
 else {
      if (mViewportMinimumScale > 0) {
        mViewportMinimumScale=Math.min(mViewportMinimumScale,50);
      }
      if (mViewportMaximumScale > 0) {
        mViewportMaximumScale=Math.max(mViewportMaximumScale,200);
      }
    }
  }
  float adjust=1.0f;
  if (mViewportDensityDpi == -1) {
    adjust=mContext.getResources().getDisplayMetrics().density;
  }
 else   if (mViewportDensityDpi > 0) {
    adjust=(float)mContext.getResources().getDisplayMetrics().densityDpi / mViewportDensityDpi;
  }
  if (adjust != mWebView.getDefaultZoomScale()) {
    Message.obtain(mWebView.mPrivateHandler,WebView.UPDATE_ZOOM_DENSITY,adjust).sendToTarget();
  }
  int defaultScale=(int)(adjust * 100);
  if (mViewportInitialScale > 0) {
    mViewportInitialScale*=adjust;
  }
  if (mViewportMinimumScale > 0) {
    mViewportMinimumScale*=adjust;
  }
  if (mViewportMaximumScale > 0) {
    mViewportMaximumScale*=adjust;
  }
  if (mViewportWidth == 0) {
    if (mViewportInitialScale == 0) {
      mViewportInitialScale=defaultScale;
    }
  }
  if (mViewportUserScalable == false) {
    mViewportInitialScale=defaultScale;
    mViewportMinimumScale=defaultScale;
    mViewportMaximumScale=defaultScale;
  }
  if (mViewportMinimumScale > mViewportInitialScale && mViewportInitialScale != 0) {
    mViewportMinimumScale=mViewportInitialScale;
  }
  if (mViewportMaximumScale > 0 && mViewportMaximumScale < mViewportInitialScale) {
    mViewportMaximumScale=mViewportInitialScale;
  }
  if (mViewportWidth < 0 && mViewportInitialScale == defaultScale) {
    mViewportWidth=0;
  }
  if (mViewportWidth != 0 && !updateViewState) {
    mFirstLayoutForNonStandardLoad=true;
    ViewState viewState=new ViewState();
    viewState.mMinScale=mViewportMinimumScale / 100.0f;
    viewState.mMaxScale=mViewportMaximumScale / 100.0f;
    viewState.mDefaultScale=adjust;
    viewState.mMobileSite=false;
    viewState.mScrollX=0;
    viewState.mShouldStartScrolledRight=false;
    Message.obtain(mWebView.mPrivateHandler,WebView.UPDATE_ZOOM_RANGE,viewState).sendToTarget();
    return;
  }
  int webViewWidth;
  int viewportWidth=mCurrentViewWidth;
  if (viewportWidth == 0) {
    webViewWidth=mWebView.getViewWidth();
    viewportWidth=(int)(webViewWidth / adjust);
    if (viewportWidth == 0) {
      if (DebugFlags.WEB_VIEW_CORE) {
        Log.v(LOGTAG,"Can't get the viewWidth yet");
      }
    }
  }
 else {
    webViewWidth=Math.round(viewportWidth * mCurrentViewScale);
  }
  mInitialViewState=new ViewState();
  mInitialViewState.mMinScale=mViewportMinimumScale / 100.0f;
  mInitialViewState.mMaxScale=mViewportMaximumScale / 100.0f;
  mInitialViewState.mDefaultScale=adjust;
  mInitialViewState.mScrollX=mRestoredX;
  mInitialViewState.mScrollY=mRestoredY;
  mInitialViewState.mShouldStartScrolledRight=(mRestoredX == 0) && (mRestoredY == 0) && (mBrowserFrame != null)&& mBrowserFrame.getShouldStartScrolledRight();
  mInitialViewState.mMobileSite=(0 == mViewportWidth);
  if (mIsRestored) {
    mInitialViewState.mIsRestored=true;
    mInitialViewState.mViewScale=mRestoredScale;
    if (mRestoredTextWrapScale > 0) {
      mInitialViewState.mTextWrapScale=mRestoredTextWrapScale;
    }
 else {
      mInitialViewState.mTextWrapScale=mInitialViewState.mViewScale;
    }
  }
 else {
    if (mViewportInitialScale > 0) {
      mInitialViewState.mViewScale=mInitialViewState.mTextWrapScale=mViewportInitialScale / 100.0f;
    }
 else     if (mViewportWidth > 0 && mViewportWidth < webViewWidth && !getSettings().getUseFixedViewport()) {
      mInitialViewState.mViewScale=mInitialViewState.mTextWrapScale=(float)webViewWidth / mViewportWidth;
    }
 else {
      mInitialViewState.mTextWrapScale=adjust;
      if (mSettings.getUseWideViewPort()) {
        mInitialViewState.mViewScale=0;
      }
 else {
        mInitialViewState.mViewScale=adjust;
      }
    }
  }
  if (mWebView.mHeightCanMeasure) {
    mWebView.mLastHeightSent=0;
    WebView.ViewSizeData data=new WebView.ViewSizeData();
    data.mWidth=mWebView.mLastWidthSent;
    data.mHeight=0;
    data.mTextWrapWidth=data.mWidth;
    data.mScale=-1.0f;
    data.mIgnoreHeight=false;
    data.mAnchorX=data.mAnchorY=0;
    mEventHub.removeMessages(EventHub.VIEW_SIZE_CHANGED);
    mEventHub.sendMessageAtFrontOfQueue(Message.obtain(null,EventHub.VIEW_SIZE_CHANGED,data));
  }
 else {
    if (viewportWidth == 0) {
      mWebView.mLastWidthSent=0;
    }
 else {
      WebView.ViewSizeData data=new WebView.ViewSizeData();
      float tentativeScale=mInitialViewState.mViewScale;
      if (tentativeScale == 0) {
        tentativeScale=mInitialViewState.mTextWrapScale;
        int tentativeViewWidth=Math.round(webViewWidth / tentativeScale);
        int windowWidth=calculateWindowWidth(tentativeViewWidth);
        data.mScale=(float)webViewWidth / windowWidth;
        if (!mSettings.getLoadWithOverviewMode()) {
          data.mScale=Math.max(data.mScale,tentativeScale);
        }
        if (mSettings.isNarrowColumnLayout()) {
          mInitialViewState.mTextWrapScale=mWebView.computeReadingLevelScale(data.mScale);
        }
      }
 else {
        data.mScale=tentativeScale;
      }
      if (DebugFlags.WEB_VIEW_CORE) {
        Log.v(LOGTAG,"setupViewport" + " mRestoredScale=" + mRestoredScale + " mViewScale="+ mInitialViewState.mViewScale+ " mTextWrapScale="+ mInitialViewState.mTextWrapScale+ " data.mScale= "+ data.mScale);
      }
      data.mWidth=Math.round(webViewWidth / data.mScale);
      data.mHeight=mCurrentViewHeight == 0 ? Math.round(mWebView.getViewHeight() / data.mScale) : Math.round((float)mCurrentViewHeight * data.mWidth / viewportWidth);
      data.mTextWrapWidth=Math.round(webViewWidth / mInitialViewState.mTextWrapScale);
      data.mIgnoreHeight=false;
      data.mAnchorX=data.mAnchorY=0;
      mEventHub.removeMessages(EventHub.VIEW_SIZE_CHANGED);
      viewSizeChanged(data);
    }
  }
}
