{
  mTid=Process.myTid();
  mSavedPriority=Process.getThreadPriority(mTid);
  mHandler=new Handler(){
    @Override public void handleMessage(    Message msg){
      if (DebugFlags.WEB_VIEW_CORE) {
        Log.v(LOGTAG,(msg.what < FIRST_PACKAGE_MSG_ID || msg.what > LAST_PACKAGE_MSG_ID ? Integer.toString(msg.what) : HandlerDebugString[msg.what - FIRST_PACKAGE_MSG_ID]) + " arg1=" + msg.arg1+ " arg2="+ msg.arg2+ " obj="+ msg.obj);
      }
      if (mWebView == null || mNativeClass == 0) {
        if (DebugFlags.WEB_VIEW_CORE) {
          Log.w(LOGTAG,"Rejecting message " + msg.what + " because we are destroyed");
        }
        return;
      }
      if (mDestroying == true && msg.what != EventHub.RESUME_TIMERS && msg.what != EventHub.PAUSE_TIMERS && msg.what != EventHub.DESTROY) {
        if (DebugFlags.WEB_VIEW_CORE) {
          Log.v(LOGTAG,"Rejecting message " + msg.what + " because we are being destroyed");
        }
        return;
      }
switch (msg.what) {
case WEBKIT_DRAW:
        webkitDraw();
      break;
case WEBKIT_DRAW_LAYERS:
    webkitDrawLayers();
  break;
case DESTROY:
synchronized (WebViewCore.this) {
  mBrowserFrame.destroy();
  mBrowserFrame=null;
  mSettings.onDestroyed();
  mNativeClass=0;
  mWebView=null;
}
break;
case REVEAL_SELECTION:
nativeRevealSelection(mNativeClass);
break;
case REQUEST_LABEL:
if (mWebView != null) {
int nodePointer=msg.arg2;
String label=nativeRequestLabel(mNativeClass,msg.arg1,nodePointer);
if (label != null && label.length() > 0) {
Message.obtain(mWebView.mPrivateHandler,WebView.RETURN_LABEL,nodePointer,0,label).sendToTarget();
}
}
break;
case UPDATE_FRAME_CACHE_IF_LOADING:
nativeUpdateFrameCacheIfLoading(mNativeClass);
break;
case SCROLL_TEXT_INPUT:
float xPercent;
if (msg.obj == null) {
xPercent=0f;
}
 else {
xPercent=((Float)msg.obj).floatValue();
}
nativeScrollFocusedTextInput(mNativeClass,xPercent,msg.arg2);
break;
case LOAD_URL:
{
CookieManager.getInstance().waitForCookieOperationsToComplete();
GetUrlData param=(GetUrlData)msg.obj;
loadUrl(param.mUrl,param.mExtraHeaders);
break;
}
case POST_URL:
{
CookieManager.getInstance().waitForCookieOperationsToComplete();
PostUrlData param=(PostUrlData)msg.obj;
mBrowserFrame.postUrl(param.mUrl,param.mPostData);
break;
}
case LOAD_DATA:
CookieManager.getInstance().waitForCookieOperationsToComplete();
BaseUrlData loadParams=(BaseUrlData)msg.obj;
String baseUrl=loadParams.mBaseUrl;
if (baseUrl != null) {
int i=baseUrl.indexOf(':');
if (i > 0) {
String scheme=baseUrl.substring(0,i);
if (!scheme.startsWith("http") && !scheme.startsWith("ftp") && !scheme.startsWith("about")&& !scheme.startsWith("javascript")) {
nativeRegisterURLSchemeAsLocal(mNativeClass,scheme);
}
}
}
mBrowserFrame.loadData(baseUrl,loadParams.mData,loadParams.mMimeType,loadParams.mEncoding,loadParams.mHistoryUrl);
nativeContentInvalidateAll(mNativeClass);
break;
case STOP_LOADING:
if (mBrowserFrame.committed() && !mBrowserFrame.firstLayoutDone()) {
mBrowserFrame.didFirstLayout();
}
stopLoading();
break;
case RELOAD:
mBrowserFrame.reload(false);
break;
case KEY_DOWN:
key((KeyEvent)msg.obj,true);
break;
case KEY_UP:
key((KeyEvent)msg.obj,false);
break;
case FAKE_CLICK:
nativeClick(mNativeClass,msg.arg1,msg.arg2,true);
break;
case CLICK:
nativeClick(mNativeClass,msg.arg1,msg.arg2,false);
break;
case VIEW_SIZE_CHANGED:
{
viewSizeChanged((WebView.ViewSizeData)msg.obj);
break;
}
case SET_SCROLL_OFFSET:
Point pt=(Point)msg.obj;
nativeSetScrollOffset(mNativeClass,msg.arg1,msg.arg2 == 1,pt.x,pt.y);
break;
case SET_GLOBAL_BOUNDS:
Rect r=(Rect)msg.obj;
nativeSetGlobalBounds(mNativeClass,r.left,r.top,r.width(),r.height());
break;
case GO_BACK_FORWARD:
if (!mBrowserFrame.committed() && msg.arg1 == -1 && (mBrowserFrame.loadType() == BrowserFrame.FRAME_LOADTYPE_STANDARD)) {
mBrowserFrame.reload(true);
}
 else {
mBrowserFrame.goBackOrForward(msg.arg1);
}
break;
case RESTORE_STATE:
stopLoading();
restoreState(msg.arg1);
break;
case PAUSE_TIMERS:
mSavedPriority=Process.getThreadPriority(mTid);
Process.setThreadPriority(mTid,Process.THREAD_PRIORITY_BACKGROUND);
pauseTimers();
if (!JniUtil.useChromiumHttpStack()) {
WebViewWorker.getHandler().sendEmptyMessage(WebViewWorker.MSG_PAUSE_CACHE_TRANSACTION);
}
 else {
nativeCloseIdleConnections(mNativeClass);
}
break;
case RESUME_TIMERS:
Process.setThreadPriority(mTid,mSavedPriority);
resumeTimers();
if (!JniUtil.useChromiumHttpStack()) {
WebViewWorker.getHandler().sendEmptyMessage(WebViewWorker.MSG_RESUME_CACHE_TRANSACTION);
}
break;
case ON_PAUSE:
nativePause(mNativeClass);
break;
case ON_RESUME:
nativeResume(mNativeClass);
break;
case FREE_MEMORY:
clearCache(false);
nativeFreeMemory(mNativeClass);
break;
case SET_NETWORK_STATE:
if (BrowserFrame.sJavaBridge == null) {
throw new IllegalStateException("No WebView " + "has been created in this process!");
}
BrowserFrame.sJavaBridge.setNetworkOnLine(msg.arg1 == 1);
break;
case SET_NETWORK_TYPE:
if (BrowserFrame.sJavaBridge == null) {
throw new IllegalStateException("No WebView " + "has been created in this process!");
}
Map<String,String> map=(Map<String,String>)msg.obj;
BrowserFrame.sJavaBridge.setNetworkType(map.get("type"),map.get("subtype"));
break;
case CLEAR_CACHE:
clearCache(msg.arg1 == 1);
break;
case CLEAR_HISTORY:
mCallbackProxy.getBackForwardList().close(mBrowserFrame.mNativeFrame);
break;
case REPLACE_TEXT:
ReplaceTextData rep=(ReplaceTextData)msg.obj;
nativeReplaceTextfieldText(mNativeClass,msg.arg1,msg.arg2,rep.mReplace,rep.mNewStart,rep.mNewEnd,rep.mTextGeneration);
break;
case PASS_TO_JS:
{
JSKeyData jsData=(JSKeyData)msg.obj;
KeyEvent evt=jsData.mEvent;
int keyCode=evt.getKeyCode();
int keyValue=evt.getUnicodeChar();
int generation=msg.arg1;
passToJs(mNativeClass,generation,jsData.mCurrentText,keyCode,keyValue,evt.isDown(),evt.isShiftPressed(),evt.isAltPressed(),evt.isSymPressed());
break;
}
case SAVE_DOCUMENT_STATE:
{
CursorData cDat=(CursorData)msg.obj;
nativeSaveDocumentState(mNativeClass,cDat.mFrame);
break;
}
case CLEAR_SSL_PREF_TABLE:
if (JniUtil.useChromiumHttpStack()) {
SslCertLookupTable.getInstance().clear();
nativeCloseIdleConnections(mNativeClass);
}
 else {
Network.getInstance(mContext).clearUserSslPrefTable();
}
break;
case TOUCH_UP:
TouchUpData touchUpData=(TouchUpData)msg.obj;
if (touchUpData.mNativeLayer != 0) {
nativeScrollLayer(mNativeClass,touchUpData.mNativeLayer,touchUpData.mNativeLayerRect);
}
nativeTouchUp(mNativeClass,touchUpData.mMoveGeneration,touchUpData.mFrame,touchUpData.mNode,touchUpData.mX,touchUpData.mY);
break;
case TOUCH_EVENT:
{
TouchEventData ted=(TouchEventData)msg.obj;
final int count=ted.mPoints.length;
int[] xArray=new int[count];
int[] yArray=new int[count];
for (int c=0; c < count; c++) {
xArray[c]=ted.mPoints[c].x;
yArray[c]=ted.mPoints[c].y;
}
if (ted.mNativeLayer != 0) {
nativeScrollLayer(mNativeClass,ted.mNativeLayer,ted.mNativeLayerRect);
}
ted.mNativeResult=nativeHandleTouchEvent(mNativeClass,ted.mAction,ted.mIds,xArray,yArray,count,ted.mActionIndex,ted.mMetaState);
Message.obtain(mWebView.mPrivateHandler,WebView.PREVENT_TOUCH_ID,ted.mAction,ted.mNativeResult ? 1 : 0,ted).sendToTarget();
break;
}
case SET_ACTIVE:
nativeSetFocusControllerActive(mNativeClass,msg.arg1 == 1);
break;
case ADD_JS_INTERFACE:
JSInterfaceData jsData=(JSInterfaceData)msg.obj;
mBrowserFrame.addJavascriptInterface(jsData.mObject,jsData.mInterfaceName);
break;
case REMOVE_JS_INTERFACE:
jsData=(JSInterfaceData)msg.obj;
mBrowserFrame.removeJavascriptInterface(jsData.mInterfaceName);
break;
case REQUEST_EXT_REPRESENTATION:
mBrowserFrame.externalRepresentation((Message)msg.obj);
break;
case REQUEST_DOC_AS_TEXT:
mBrowserFrame.documentAsText((Message)msg.obj);
break;
case SET_MOVE_FOCUS:
CursorData focusData=(CursorData)msg.obj;
nativeMoveFocus(mNativeClass,focusData.mFrame,focusData.mNode);
break;
case SET_MOVE_MOUSE:
CursorData cursorData=(CursorData)msg.obj;
nativeMoveMouse(mNativeClass,cursorData.mFrame,cursorData.mX,cursorData.mY);
break;
case SET_MOVE_MOUSE_IF_LATEST:
CursorData cData=(CursorData)msg.obj;
nativeMoveMouseIfLatest(mNativeClass,cData.mMoveGeneration,cData.mFrame,cData.mX,cData.mY);
break;
case REQUEST_CURSOR_HREF:
{
WebKitHitTest hit=performHitTest(msg.arg1,msg.arg2,1,false);
Message hrefMsg=(Message)msg.obj;
Bundle data=hrefMsg.getData();
data.putString(FocusNodeHref.URL,hit.mLinkUrl);
data.putString(FocusNodeHref.TITLE,hit.mAnchorText);
data.putString(FocusNodeHref.SRC,hit.mImageUrl);
hrefMsg.sendToTarget();
break;
}
case UPDATE_CACHE_AND_TEXT_ENTRY:
nativeUpdateFrameCache(mNativeClass);
if (mWebView != null) {
mWebView.postInvalidate();
}
sendUpdateTextEntry();
break;
case DOC_HAS_IMAGES:
Message imageResult=(Message)msg.obj;
imageResult.arg1=mBrowserFrame.documentHasImages() ? 1 : 0;
imageResult.sendToTarget();
break;
case DELETE_SELECTION:
TextSelectionData deleteSelectionData=(TextSelectionData)msg.obj;
nativeDeleteSelection(mNativeClass,deleteSelectionData.mStart,deleteSelectionData.mEnd,msg.arg1);
break;
case SET_SELECTION:
nativeSetSelection(mNativeClass,msg.arg1,msg.arg2);
break;
case MODIFY_SELECTION:
String modifiedSelectionString=nativeModifySelection(mNativeClass,msg.arg1,msg.arg2);
mWebView.mPrivateHandler.obtainMessage(WebView.SELECTION_STRING_CHANGED,modifiedSelectionString).sendToTarget();
break;
case LISTBOX_CHOICES:
SparseBooleanArray choices=(SparseBooleanArray)msg.obj;
int choicesSize=msg.arg1;
boolean[] choicesArray=new boolean[choicesSize];
for (int c=0; c < choicesSize; c++) {
choicesArray[c]=choices.get(c);
}
nativeSendListBoxChoices(mNativeClass,choicesArray,choicesSize);
break;
case SINGLE_LISTBOX_CHOICE:
nativeSendListBoxChoice(mNativeClass,msg.arg1);
break;
case SET_BACKGROUND_COLOR:
nativeSetBackgroundColor(mNativeClass,msg.arg1);
break;
case DUMP_DOMTREE:
nativeDumpDomTree(mNativeClass,msg.arg1 == 1);
break;
case DUMP_RENDERTREE:
nativeDumpRenderTree(mNativeClass,msg.arg1 == 1);
break;
case DUMP_NAVTREE:
nativeDumpNavTree(mNativeClass);
break;
case SET_JS_FLAGS:
nativeSetJsFlags(mNativeClass,(String)msg.obj);
break;
case CONTENT_INVALIDATE_ALL:
nativeContentInvalidateAll(mNativeClass);
break;
case SAVE_WEBARCHIVE:
WebView.SaveWebArchiveMessage saveMessage=(WebView.SaveWebArchiveMessage)msg.obj;
saveMessage.mResultFile=saveWebArchive(saveMessage.mBasename,saveMessage.mAutoname);
mWebView.mPrivateHandler.obtainMessage(WebView.SAVE_WEBARCHIVE_FINISHED,saveMessage).sendToTarget();
break;
case GEOLOCATION_PERMISSIONS_PROVIDE:
GeolocationPermissionsData data=(GeolocationPermissionsData)msg.obj;
nativeGeolocationPermissionsProvide(mNativeClass,data.mOrigin,data.mAllow,data.mRemember);
break;
case SPLIT_PICTURE_SET:
nativeSplitContent(mNativeClass,msg.arg1);
mWebView.mPrivateHandler.obtainMessage(WebView.REPLACE_BASE_CONTENT,msg.arg1,0);
mSplitPictureIsScheduled=false;
break;
case CLEAR_CONTENT:
clearContent();
break;
case MESSAGE_RELAY:
((Message)msg.obj).sendToTarget();
break;
case POPULATE_VISITED_LINKS:
nativeProvideVisitedHistory(mNativeClass,(String[])msg.obj);
break;
case VALID_NODE_BOUNDS:
{
MotionUpData motionUpData=(MotionUpData)msg.obj;
if (!nativeValidNodeAndBounds(mNativeClass,motionUpData.mFrame,motionUpData.mNode,motionUpData.mBounds)) {
nativeUpdateFrameCache(mNativeClass);
}
Message message=mWebView.mPrivateHandler.obtainMessage(WebView.DO_MOTION_UP,motionUpData.mX,motionUpData.mY);
mWebView.mPrivateHandler.sendMessageAtFrontOfQueue(message);
break;
}
case HIDE_FULLSCREEN:
nativeFullScreenPluginHidden(mNativeClass,msg.arg1);
break;
case PLUGIN_SURFACE_READY:
nativePluginSurfaceReady(mNativeClass);
break;
case NOTIFY_ANIMATION_STARTED:
nativeNotifyAnimationStarted(mNativeClass);
break;
case ADD_PACKAGE_NAMES:
if (BrowserFrame.sJavaBridge == null) {
throw new IllegalStateException("No WebView " + "has been created in this process!");
}
BrowserFrame.sJavaBridge.addPackageNames((Set<String>)msg.obj);
break;
case HIT_TEST:
TouchHighlightData d=(TouchHighlightData)msg.obj;
if (d.mNativeLayer != 0) {
nativeScrollLayer(mNativeClass,d.mNativeLayer,d.mNativeLayerRect);
}
WebKitHitTest hit=performHitTest(d.mX,d.mY,d.mSlop,true);
mWebView.mPrivateHandler.obtainMessage(WebView.HIT_TEST_RESULT,hit).sendToTarget();
break;
case USE_MOCK_DEVICE_ORIENTATION:
useMockDeviceOrientation();
break;
case AUTOFILL_FORM:
nativeAutoFillForm(mNativeClass,msg.arg1);
mWebView.mPrivateHandler.obtainMessage(WebView.AUTOFILL_COMPLETE,null).sendToTarget();
break;
case EXECUTE_JS:
if (msg.obj instanceof String) {
if (DebugFlags.WEB_VIEW_CORE) {
Log.d(LOGTAG,"Executing JS : " + msg.obj);
}
mBrowserFrame.stringByEvaluatingJavaScriptFromString((String)msg.obj);
}
break;
case SCROLL_LAYER:
int nativeLayer=msg.arg1;
Rect rect=(Rect)msg.obj;
nativeScrollLayer(mNativeClass,nativeLayer,rect);
break;
case DELETE_TEXT:
{
int[] handles=(int[])msg.obj;
nativeDeleteText(mNativeClass,handles[0],handles[1],handles[2],handles[3]);
break;
}
case COPY_TEXT:
{
int[] handles=(int[])msg.obj;
String copiedText=nativeGetText(mNativeClass,handles[0],handles[1],handles[2],handles[3]);
if (copiedText != null) {
mWebView.mPrivateHandler.obtainMessage(WebView.COPY_TO_CLIPBOARD,copiedText).sendToTarget();
}
break;
}
case INSERT_TEXT:
nativeInsertText(mNativeClass,(String)msg.obj);
break;
case SELECT_TEXT:
{
int[] args=(int[])msg.obj;
if (args == null) {
nativeClearTextSelection(mNativeClass);
}
 else {
nativeSelectText(mNativeClass,args[0],args[1],args[2],args[3]);
}
break;
}
case SELECT_WORD_AT:
{
int x=msg.arg1;
int y=msg.arg2;
nativeSelectWordAt(mNativeClass,x,y);
break;
}
case SELECT_ALL:
nativeSelectAll(mNativeClass);
break;
}
}
}
;
synchronized (this) {
int size=mMessages.size();
for (int i=0; i < size; i++) {
mHandler.sendMessage(mMessages.get(i));
}
mMessages=null;
}
}
