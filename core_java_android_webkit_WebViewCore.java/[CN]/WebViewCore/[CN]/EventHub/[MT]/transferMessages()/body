{
  mTid=Process.myTid();
  mSavedPriority=Process.getThreadPriority(mTid);
  mHandler=new Handler(){
    @Override public void handleMessage(    Message msg){
      if (DebugFlags.WEB_VIEW_CORE) {
        Log.v(LOGTAG,msg.what < LOAD_URL || msg.what > SET_ACTIVE ? Integer.toString(msg.what) : HandlerDebugString[msg.what - LOAD_URL]);
      }
switch (msg.what) {
case WEBKIT_DRAW:
        webkitDraw();
      break;
case DESTROY:
    mBrowserFrame.destroy();
  mBrowserFrame=null;
mNativeClass=0;
break;
case LOAD_URL:
loadUrl((String)msg.obj);
break;
case POST_URL:
{
HashMap param=(HashMap)msg.obj;
String url=(String)param.get("url");
byte[] data=(byte[])param.get("data");
mBrowserFrame.postUrl(url,data);
break;
}
case LOAD_DATA:
HashMap loadParams=(HashMap)msg.obj;
String baseUrl=(String)loadParams.get("baseUrl");
if (baseUrl != null) {
int i=baseUrl.indexOf(':');
if (i > 0) {
String scheme=baseUrl.substring(0,i);
if (!scheme.startsWith("http") && !scheme.startsWith("ftp") && !scheme.startsWith("about")&& !scheme.startsWith("javascript")) {
nativeRegisterURLSchemeAsLocal(scheme);
}
}
}
mBrowserFrame.loadData(baseUrl,(String)loadParams.get("data"),(String)loadParams.get("mimeType"),(String)loadParams.get("encoding"),(String)loadParams.get("failUrl"));
break;
case STOP_LOADING:
if (mBrowserFrame.committed() && !mBrowserFrame.firstLayoutDone()) {
mBrowserFrame.didFirstLayout();
}
stopLoading();
break;
case RELOAD:
mBrowserFrame.reload(false);
break;
case KEY_DOWN:
key((KeyEvent)msg.obj,true);
break;
case KEY_UP:
key((KeyEvent)msg.obj,false);
break;
case CLICK:
nativeClick();
break;
case VIEW_SIZE_CHANGED:
viewSizeChanged(msg.arg1,msg.arg2,((Float)msg.obj).floatValue());
break;
case SET_SCROLL_OFFSET:
nativeSetScrollOffset(msg.arg1,msg.arg2);
break;
case SET_GLOBAL_BOUNDS:
Rect r=(Rect)msg.obj;
nativeSetGlobalBounds(r.left,r.top,r.width(),r.height());
break;
case GO_BACK_FORWARD:
if (!mBrowserFrame.committed() && msg.arg1 == -1 && (mBrowserFrame.loadType() == BrowserFrame.FRAME_LOADTYPE_STANDARD)) {
mBrowserFrame.reload(true);
}
 else {
mBrowserFrame.goBackOrForward(msg.arg1);
}
break;
case RESTORE_STATE:
stopLoading();
restoreState(msg.arg1);
break;
case PAUSE_TIMERS:
mSavedPriority=Process.getThreadPriority(mTid);
Process.setThreadPriority(mTid,Process.THREAD_PRIORITY_BACKGROUND);
pauseTimers();
if (CacheManager.disableTransaction()) {
WebCoreThread.mCacheTickersBlocked=true;
sWebCoreHandler.removeMessages(WebCoreThread.CACHE_TICKER);
}
break;
case RESUME_TIMERS:
Process.setThreadPriority(mTid,mSavedPriority);
resumeTimers();
if (CacheManager.enableTransaction()) {
WebCoreThread.mCacheTickersBlocked=false;
sWebCoreHandler.sendMessageDelayed(sWebCoreHandler.obtainMessage(WebCoreThread.CACHE_TICKER),WebCoreThread.CACHE_TICKER_INTERVAL);
}
break;
case ON_PAUSE:
nativePause();
break;
case ON_RESUME:
nativeResume();
break;
case SET_NETWORK_STATE:
if (BrowserFrame.sJavaBridge == null) {
throw new IllegalStateException("No WebView " + "has been created in this process!");
}
BrowserFrame.sJavaBridge.setNetworkOnLine(msg.arg1 == 1);
break;
case CLEAR_CACHE:
mBrowserFrame.clearCache();
if (msg.arg1 == 1) {
CacheManager.removeAllCacheFiles();
}
break;
case CLEAR_HISTORY:
mCallbackProxy.getBackForwardList().close(mBrowserFrame.mNativeFrame);
break;
case REPLACE_TEXT:
HashMap jMap=(HashMap)msg.obj;
String replace=(String)jMap.get("replace");
int newStart=((Integer)jMap.get("start")).intValue();
int newEnd=((Integer)jMap.get("end")).intValue();
nativeReplaceTextfieldText(msg.arg1,msg.arg2,replace,newStart,newEnd);
break;
case PASS_TO_JS:
{
HashMap jsMap=(HashMap)msg.obj;
KeyEvent evt=(KeyEvent)jsMap.get("event");
int keyCode=evt.getKeyCode();
int keyValue=evt.getUnicodeChar();
int generation=msg.arg1;
passToJs(generation,(String)jsMap.get("currentText"),keyCode,keyValue,evt.isDown(),evt.isShiftPressed(),evt.isAltPressed(),evt.isSymPressed());
break;
}
case SAVE_DOCUMENT_STATE:
{
CursorData fDat=(CursorData)msg.obj;
nativeSaveDocumentState(fDat.mFrame);
break;
}
case CLEAR_SSL_PREF_TABLE:
Network.getInstance(mContext).clearUserSslPrefTable();
break;
case TOUCH_UP:
TouchUpData touchUpData=(TouchUpData)msg.obj;
nativeTouchUp(touchUpData.mMoveGeneration,touchUpData.mFrame,touchUpData.mNode,touchUpData.mX,touchUpData.mY,touchUpData.mSize);
break;
case TOUCH_EVENT:
{
TouchEventData ted=(TouchEventData)msg.obj;
Message.obtain(mWebView.mPrivateHandler,WebView.PREVENT_TOUCH_ID,ted.mAction,nativeHandleTouchEvent(ted.mAction,ted.mX,ted.mY) ? 1 : 0).sendToTarget();
break;
}
case SET_ACTIVE:
nativeSetFocusControllerActive(msg.arg1 == 1);
break;
case ADD_JS_INTERFACE:
HashMap map=(HashMap)msg.obj;
Object obj=map.get("object");
String interfaceName=(String)map.get("interfaceName");
mBrowserFrame.addJavascriptInterface(obj,interfaceName);
break;
case REQUEST_EXT_REPRESENTATION:
mBrowserFrame.externalRepresentation((Message)msg.obj);
break;
case REQUEST_DOC_AS_TEXT:
mBrowserFrame.documentAsText((Message)msg.obj);
break;
case SET_MOVE_MOUSE:
CursorData finalData=(CursorData)msg.obj;
nativeMoveMouse(finalData.mFrame,finalData.mNode,finalData.mX,finalData.mY);
break;
case UNBLOCK_FOCUS:
nativeUnblockFocus();
break;
case SET_MOVE_MOUSE_IF_LATEST:
CursorData focusData=(CursorData)msg.obj;
nativeMoveMouseIfLatest(focusData.mMoveGeneration,focusData.mFrame,focusData.mNode,focusData.mX,focusData.mY,focusData.mIgnoreNullFocus);
break;
case REQUEST_FOCUS_HREF:
{
Message hrefMsg=(Message)msg.obj;
String res=nativeRetrieveHref(msg.arg1,msg.arg2);
hrefMsg.getData().putString("url",res);
hrefMsg.sendToTarget();
break;
}
case UPDATE_CACHE_AND_TEXT_ENTRY:
nativeUpdateFrameCache();
if (mWebView != null) {
mWebView.postInvalidate();
}
sendUpdateTextEntry();
break;
case DOC_HAS_IMAGES:
Message imageResult=(Message)msg.obj;
imageResult.arg1=mBrowserFrame.documentHasImages() ? 1 : 0;
imageResult.sendToTarget();
break;
case SET_SNAP_ANCHOR:
nativeSetSnapAnchor(msg.arg1,msg.arg2);
break;
case DELETE_SELECTION:
nativeDeleteSelection(msg.arg1,msg.arg2);
break;
case SET_SELECTION:
nativeSetSelection(msg.arg1,msg.arg2);
break;
case LISTBOX_CHOICES:
SparseBooleanArray choices=(SparseBooleanArray)msg.obj;
int choicesSize=msg.arg1;
boolean[] choicesArray=new boolean[choicesSize];
for (int c=0; c < choicesSize; c++) {
choicesArray[c]=choices.get(c);
}
nativeSendListBoxChoices(choicesArray,choicesSize);
break;
case SINGLE_LISTBOX_CHOICE:
nativeSendListBoxChoice(msg.arg1);
break;
case SET_BACKGROUND_COLOR:
nativeSetBackgroundColor(msg.arg1);
break;
case GET_SELECTION:
String str=nativeGetSelection((Region)msg.obj);
Message.obtain(mWebView.mPrivateHandler,WebView.UPDATE_CLIPBOARD,str).sendToTarget();
break;
case DUMP_DOMTREE:
nativeDumpDomTree(msg.arg1 == 1);
break;
case DUMP_RENDERTREE:
nativeDumpRenderTree(msg.arg1 == 1);
break;
case DUMP_NAVTREE:
nativeDumpNavTree();
break;
case SYNC_SCROLL:
mWebkitScrollX=msg.arg1;
mWebkitScrollY=msg.arg2;
break;
case SPLIT_PICTURE_SET:
nativeSplitContent();
mSplitPictureIsScheduled=false;
break;
case CLEAR_CONTENT:
nativeClearContent();
break;
case MESSAGE_RELAY:
if (msg.obj instanceof Message) {
((Message)msg.obj).sendToTarget();
}
break;
}
}
}
;
synchronized (this) {
int size=mMessages.size();
for (int i=0; i < size; i++) {
mHandler.sendMessage(mMessages.get(i));
}
mMessages=null;
}
}
