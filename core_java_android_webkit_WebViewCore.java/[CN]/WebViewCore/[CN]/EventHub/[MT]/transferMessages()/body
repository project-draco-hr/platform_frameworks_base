{
  mTid=Process.myTid();
  mSavedPriority=Process.getThreadPriority(mTid);
  mHandler=new Handler(){
    @Override public void handleMessage(    Message msg){
      if (DebugFlags.WEB_VIEW_CORE) {
        Log.v(LOGTAG,(msg.what < REQUEST_LABEL || msg.what > VALID_NODE_BOUNDS ? Integer.toString(msg.what) : HandlerDebugString[msg.what - REQUEST_LABEL]) + " arg1=" + msg.arg1+ " arg2="+ msg.arg2+ " obj="+ msg.obj);
      }
switch (msg.what) {
case WEBKIT_DRAW:
        webkitDraw();
      break;
case DESTROY:
synchronized (WebViewCore.this) {
      mBrowserFrame.destroy();
      mBrowserFrame=null;
      mSettings.onDestroyed();
      mNativeClass=0;
      mWebView=null;
    }
  break;
case REQUEST_LABEL:
if (mWebView != null) {
  int nodePointer=msg.arg2;
  String label=nativeRequestLabel(msg.arg1,nodePointer);
  if (label != null && label.length() > 0) {
    Message.obtain(mWebView.mPrivateHandler,WebView.RETURN_LABEL,nodePointer,0,label).sendToTarget();
  }
}
break;
case UPDATE_FRAME_CACHE_IF_LOADING:
nativeUpdateFrameCacheIfLoading();
break;
case SCROLL_TEXT_INPUT:
nativeScrollFocusedTextInput(((Float)msg.obj).floatValue(),msg.arg1);
break;
case LOAD_URL:
{
GetUrlData param=(GetUrlData)msg.obj;
loadUrl(param.mUrl,param.mExtraHeaders);
break;
}
case POST_URL:
{
PostUrlData param=(PostUrlData)msg.obj;
mBrowserFrame.postUrl(param.mUrl,param.mPostData);
break;
}
case LOAD_DATA:
BaseUrlData loadParams=(BaseUrlData)msg.obj;
String baseUrl=loadParams.mBaseUrl;
if (baseUrl != null) {
int i=baseUrl.indexOf(':');
if (i > 0) {
String scheme=baseUrl.substring(0,i);
if (!scheme.startsWith("http") && !scheme.startsWith("ftp") && !scheme.startsWith("about")&& !scheme.startsWith("javascript")) {
nativeRegisterURLSchemeAsLocal(scheme);
}
}
}
mBrowserFrame.loadData(baseUrl,loadParams.mData,loadParams.mMimeType,loadParams.mEncoding,loadParams.mHistoryUrl);
break;
case STOP_LOADING:
if (mBrowserFrame.committed() && !mBrowserFrame.firstLayoutDone()) {
mBrowserFrame.didFirstLayout();
}
stopLoading();
break;
case RELOAD:
mBrowserFrame.reload(false);
break;
case KEY_DOWN:
key((KeyEvent)msg.obj,true);
break;
case KEY_UP:
key((KeyEvent)msg.obj,false);
break;
case CLICK:
nativeClick(msg.arg1,msg.arg2);
break;
case VIEW_SIZE_CHANGED:
{
WebView.ViewSizeData data=(WebView.ViewSizeData)msg.obj;
viewSizeChanged(data.mWidth,data.mHeight,data.mTextWrapWidth,data.mScale,data.mAnchorX,data.mAnchorY,data.mIgnoreHeight);
break;
}
case SET_SCROLL_OFFSET:
Point pt=(Point)msg.obj;
nativeSetScrollOffset(msg.arg1,pt.x,pt.y);
break;
case SET_GLOBAL_BOUNDS:
Rect r=(Rect)msg.obj;
nativeSetGlobalBounds(r.left,r.top,r.width(),r.height());
break;
case GO_BACK_FORWARD:
if (!mBrowserFrame.committed() && msg.arg1 == -1 && (mBrowserFrame.loadType() == BrowserFrame.FRAME_LOADTYPE_STANDARD)) {
mBrowserFrame.reload(true);
}
 else {
mBrowserFrame.goBackOrForward(msg.arg1);
}
break;
case RESTORE_STATE:
stopLoading();
restoreState(msg.arg1);
break;
case PAUSE_TIMERS:
mSavedPriority=Process.getThreadPriority(mTid);
Process.setThreadPriority(mTid,Process.THREAD_PRIORITY_BACKGROUND);
pauseTimers();
WebViewWorker.getHandler().sendEmptyMessage(WebViewWorker.MSG_PAUSE_CACHE_TRANSACTION);
break;
case RESUME_TIMERS:
Process.setThreadPriority(mTid,mSavedPriority);
resumeTimers();
WebViewWorker.getHandler().sendEmptyMessage(WebViewWorker.MSG_RESUME_CACHE_TRANSACTION);
break;
case ON_PAUSE:
nativePause();
break;
case ON_RESUME:
nativeResume();
break;
case FREE_MEMORY:
clearCache(false);
nativeFreeMemory();
break;
case SET_NETWORK_STATE:
if (BrowserFrame.sJavaBridge == null) {
throw new IllegalStateException("No WebView " + "has been created in this process!");
}
BrowserFrame.sJavaBridge.setNetworkOnLine(msg.arg1 == 1);
break;
case SET_NETWORK_TYPE:
if (BrowserFrame.sJavaBridge == null) {
throw new IllegalStateException("No WebView " + "has been created in this process!");
}
Map<String,String> map=(Map<String,String>)msg.obj;
BrowserFrame.sJavaBridge.setNetworkType(map.get("type"),map.get("subtype"));
break;
case CLEAR_CACHE:
clearCache(msg.arg1 == 1);
break;
case CLEAR_HISTORY:
mCallbackProxy.getBackForwardList().close(mBrowserFrame.mNativeFrame);
break;
case REPLACE_TEXT:
ReplaceTextData rep=(ReplaceTextData)msg.obj;
nativeReplaceTextfieldText(msg.arg1,msg.arg2,rep.mReplace,rep.mNewStart,rep.mNewEnd,rep.mTextGeneration);
break;
case PASS_TO_JS:
{
JSKeyData jsData=(JSKeyData)msg.obj;
KeyEvent evt=jsData.mEvent;
int keyCode=evt.getKeyCode();
int keyValue=evt.getUnicodeChar();
int generation=msg.arg1;
passToJs(generation,jsData.mCurrentText,keyCode,keyValue,evt.isDown(),evt.isShiftPressed(),evt.isAltPressed(),evt.isSymPressed());
break;
}
case SAVE_DOCUMENT_STATE:
{
CursorData cDat=(CursorData)msg.obj;
nativeSaveDocumentState(cDat.mFrame);
break;
}
case CLEAR_SSL_PREF_TABLE:
Network.getInstance(mContext).clearUserSslPrefTable();
break;
case TOUCH_UP:
TouchUpData touchUpData=(TouchUpData)msg.obj;
nativeTouchUp(touchUpData.mMoveGeneration,touchUpData.mFrame,touchUpData.mNode,touchUpData.mX,touchUpData.mY);
break;
case TOUCH_EVENT:
{
TouchEventData ted=(TouchEventData)msg.obj;
Message.obtain(mWebView.mPrivateHandler,WebView.PREVENT_TOUCH_ID,ted.mAction,nativeHandleTouchEvent(ted.mAction,ted.mX,ted.mY,ted.mMetaState) ? 1 : 0,ted.mReprocess ? ted : null).sendToTarget();
break;
}
case SET_ACTIVE:
nativeSetFocusControllerActive(msg.arg1 == 1);
break;
case ADD_JS_INTERFACE:
JSInterfaceData jsData=(JSInterfaceData)msg.obj;
mBrowserFrame.addJavascriptInterface(jsData.mObject,jsData.mInterfaceName);
break;
case REQUEST_EXT_REPRESENTATION:
mBrowserFrame.externalRepresentation((Message)msg.obj);
break;
case REQUEST_DOC_AS_TEXT:
mBrowserFrame.documentAsText((Message)msg.obj);
break;
case SET_MOVE_FOCUS:
CursorData focusData=(CursorData)msg.obj;
nativeMoveFocus(focusData.mFrame,focusData.mNode);
break;
case SET_MOVE_MOUSE:
CursorData cursorData=(CursorData)msg.obj;
nativeMoveMouse(cursorData.mFrame,cursorData.mX,cursorData.mY);
break;
case SET_MOVE_MOUSE_IF_LATEST:
CursorData cData=(CursorData)msg.obj;
nativeMoveMouseIfLatest(cData.mMoveGeneration,cData.mFrame,cData.mX,cData.mY);
break;
case REQUEST_CURSOR_HREF:
{
Message hrefMsg=(Message)msg.obj;
hrefMsg.getData().putString("url",nativeRetrieveHref(msg.arg1,msg.arg2));
hrefMsg.getData().putString("title",nativeRetrieveAnchorText(msg.arg1,msg.arg2));
hrefMsg.sendToTarget();
break;
}
case UPDATE_CACHE_AND_TEXT_ENTRY:
nativeUpdateFrameCache();
if (mWebView != null) {
mWebView.postInvalidate();
}
sendUpdateTextEntry();
break;
case DOC_HAS_IMAGES:
Message imageResult=(Message)msg.obj;
imageResult.arg1=mBrowserFrame.documentHasImages() ? 1 : 0;
imageResult.sendToTarget();
break;
case DELETE_SELECTION:
TextSelectionData deleteSelectionData=(TextSelectionData)msg.obj;
nativeDeleteSelection(deleteSelectionData.mStart,deleteSelectionData.mEnd,msg.arg1);
break;
case SET_SELECTION:
nativeSetSelection(msg.arg1,msg.arg2);
break;
case MODIFY_SELECTION:
ModifySelectionData modifySelectionData=(ModifySelectionData)msg.obj;
String selectionString=nativeModifySelection(modifySelectionData.mAlter,modifySelectionData.mDirection,modifySelectionData.mGranularity);
mWebView.mPrivateHandler.obtainMessage(WebView.SELECTION_STRING_CHANGED,selectionString).sendToTarget();
break;
case LISTBOX_CHOICES:
SparseBooleanArray choices=(SparseBooleanArray)msg.obj;
int choicesSize=msg.arg1;
boolean[] choicesArray=new boolean[choicesSize];
for (int c=0; c < choicesSize; c++) {
choicesArray[c]=choices.get(c);
}
nativeSendListBoxChoices(choicesArray,choicesSize);
break;
case SINGLE_LISTBOX_CHOICE:
nativeSendListBoxChoice(msg.arg1);
break;
case SET_BACKGROUND_COLOR:
nativeSetBackgroundColor(msg.arg1);
break;
case DUMP_DOMTREE:
nativeDumpDomTree(msg.arg1 == 1);
break;
case DUMP_RENDERTREE:
nativeDumpRenderTree(msg.arg1 == 1);
break;
case DUMP_NAVTREE:
nativeDumpNavTree();
break;
case DUMP_V8COUNTERS:
nativeDumpV8Counters();
break;
case SET_JS_FLAGS:
nativeSetJsFlags((String)msg.obj);
break;
case SAVE_WEBARCHIVE:
WebView.SaveWebArchiveMessage saveMessage=(WebView.SaveWebArchiveMessage)msg.obj;
saveMessage.mResultFile=saveWebArchive(saveMessage.mBasename,saveMessage.mAutoname);
mWebView.mPrivateHandler.obtainMessage(WebView.SAVE_WEBARCHIVE_FINISHED,saveMessage).sendToTarget();
break;
case GEOLOCATION_PERMISSIONS_PROVIDE:
GeolocationPermissionsData data=(GeolocationPermissionsData)msg.obj;
nativeGeolocationPermissionsProvide(data.mOrigin,data.mAllow,data.mRemember);
break;
case SYNC_SCROLL:
mWebkitScrollX=msg.arg1;
mWebkitScrollY=msg.arg2;
break;
case SPLIT_PICTURE_SET:
nativeSplitContent(msg.arg1);
mWebView.mPrivateHandler.obtainMessage(WebView.REPLACE_BASE_CONTENT,msg.arg1,0);
mSplitPictureIsScheduled=false;
break;
case CLEAR_CONTENT:
nativeClearContent();
break;
case MESSAGE_RELAY:
if (msg.obj instanceof Message) {
((Message)msg.obj).sendToTarget();
}
break;
case POPULATE_VISITED_LINKS:
nativeProvideVisitedHistory((String[])msg.obj);
break;
case VALID_NODE_BOUNDS:
{
MotionUpData motionUpData=(MotionUpData)msg.obj;
if (!nativeValidNodeAndBounds(motionUpData.mFrame,motionUpData.mNode,motionUpData.mBounds)) {
nativeUpdateFrameCache();
}
Message message=mWebView.mPrivateHandler.obtainMessage(WebView.DO_MOTION_UP,motionUpData.mX,motionUpData.mY);
mWebView.mPrivateHandler.sendMessageAtFrontOfQueue(message);
break;
}
case HIDE_FULLSCREEN:
nativeFullScreenPluginHidden(msg.arg1);
break;
case ADD_PACKAGE_NAMES:
if (BrowserFrame.sJavaBridge == null) {
throw new IllegalStateException("No WebView " + "has been created in this process!");
}
BrowserFrame.sJavaBridge.addPackageNames((Set<String>)msg.obj);
break;
case ADD_PACKAGE_NAME:
if (BrowserFrame.sJavaBridge == null) {
throw new IllegalStateException("No WebView " + "has been created in this process!");
}
BrowserFrame.sJavaBridge.addPackageName((String)msg.obj);
break;
case REMOVE_PACKAGE_NAME:
if (BrowserFrame.sJavaBridge == null) {
throw new IllegalStateException("No WebView " + "has been created in this process!");
}
BrowserFrame.sJavaBridge.removePackageName((String)msg.obj);
break;
case GET_TOUCH_HIGHLIGHT_RECTS:
TouchHighlightData d=(TouchHighlightData)msg.obj;
ArrayList<Rect> rects=nativeGetTouchHighlightRects(d.mX,d.mY,d.mSlop);
mWebView.mPrivateHandler.obtainMessage(WebView.SET_TOUCH_HIGHLIGHT_RECTS,rects).sendToTarget();
break;
case REMOVE_TOUCH_HIGHLIGHT_RECTS:
mWebView.mPrivateHandler.obtainMessage(WebView.SET_TOUCH_HIGHLIGHT_RECTS,null).sendToTarget();
break;
}
}
}
;
synchronized (this) {
int size=mMessages.size();
for (int i=0; i < size; i++) {
mHandler.sendMessage(mMessages.get(i));
}
mMessages=null;
}
}
