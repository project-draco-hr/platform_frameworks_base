{
  if (mNativeClass == 0) {
    return false;
  }
switch (eventType) {
case WebViewInputDispatcher.EVENT_TYPE_HIT_TEST:
    int x=Math.round(event.getX());
  int y=Math.round(event.getY());
WebKitHitTest hit=performHitTest(x,y,mWebViewClassic.getScaledNavSlop(),true);
mWebViewClassic.mPrivateHandler.obtainMessage(WebViewClassic.HIT_TEST_RESULT,hit).sendToTarget();
return false;
case WebViewInputDispatcher.EVENT_TYPE_CLICK:
return nativeMouseClick(mNativeClass);
case WebViewInputDispatcher.EVENT_TYPE_TOUCH:
{
int count=event.getPointerCount();
int[] idArray=new int[count];
int[] xArray=new int[count];
int[] yArray=new int[count];
for (int i=0; i < count; i++) {
idArray[i]=event.getPointerId(i);
xArray[i]=(int)event.getX(i);
yArray[i]=(int)event.getY(i);
}
int touchFlags=nativeHandleTouchEvent(mNativeClass,event.getActionMasked(),idArray,xArray,yArray,count,event.getActionIndex(),event.getMetaState());
if (touchFlags == 0 && event.getActionMasked() != MotionEvent.ACTION_CANCEL && (flags & WebViewInputDispatcher.FLAG_PRIVATE) == 0) {
dispatcher.skipWebkitForRemainingTouchStream();
}
return (touchFlags & TOUCH_FLAG_PREVENT_DEFAULT) > 0;
}
default :
return false;
}
}
