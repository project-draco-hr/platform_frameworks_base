{
  if (enable) {
    ClientDeathRecipient r=mBleApps.get(token);
    if (r == null) {
      ClientDeathRecipient deathRec=new ClientDeathRecipient();
      try {
        token.linkToDeath(deathRec,0);
      }
 catch (      RemoteException ex) {
        throw new IllegalArgumentException("Wake lock is already dead.");
      }
      mBleApps.put(token,deathRec);
synchronized (this) {
        ++mBleAppCount;
      }
      if (DBG)       Log.d(TAG,"Registered for death Notification");
    }
  }
 else {
    ClientDeathRecipient r=mBleApps.get(token);
    if (r != null) {
      try {
        token.linkToDeath(r,0);
      }
 catch (      RemoteException ex) {
        throw new IllegalArgumentException("Wake lock is already dead.");
      }
      mBleApps.remove(token);
synchronized (this) {
        if (mBleAppCount > 0)         --mBleAppCount;
      }
      if (DBG)       Log.d(TAG,"Unregistered for death Notification");
    }
  }
  if (DBG)   Log.d(TAG,"Updated BleAppCount" + mBleAppCount);
  if (mBleAppCount == 0 && mEnable) {
    try {
      if (mBluetooth != null && (mBluetooth.getState() != BluetoothAdapter.STATE_ON)) {
        if (DBG)         Log.d(TAG,"Reseting the mEnable flag for clean disable");
        mEnable=false;
      }
    }
 catch (    RemoteException e) {
      Log.e(TAG,"getState()",e);
    }
  }
  return mBleAppCount;
}
