{
  final Pair<Integer,Integer>[] resolutions;
switch (aspectRatio) {
case ASPECT_RATIO_3_2:
{
      resolutions=ASPECT_RATIO_3_2_RESOLUTIONS;
      break;
    }
case ASPECT_RATIO_4_3:
{
    resolutions=ASPECT_RATIO_4_3_RESOLUTIONS;
    break;
  }
case ASPECT_RATIO_5_3:
{
  resolutions=ASPECT_RATIO_5_3_RESOLUTIONS;
  break;
}
case ASPECT_RATIO_11_9:
{
resolutions=ASPECT_RATIO_11_9_RESOLUTIONS;
break;
}
case ASPECT_RATIO_16_9:
{
resolutions=ASPECT_RATIO_16_9_RESOLUTIONS;
break;
}
default :
{
throw new IllegalArgumentException("Unknown aspect ratio: " + aspectRatio);
}
}
VideoEditorProfile veProfile=VideoEditorProfile.get();
if (veProfile == null) {
throw new RuntimeException("Can't get the video editor profile");
}
final int maxWidth=veProfile.maxOutputVideoFrameWidth;
final int maxHeight=veProfile.maxOutputVideoFrameHeight;
Pair<Integer,Integer>[] tmpResolutions=new Pair[resolutions.length];
int numSupportedResolution=0;
int i=0;
for (i=0; i < resolutions.length; i++) {
if ((resolutions[i].first <= maxWidth) && (resolutions[i].second <= maxHeight)) {
tmpResolutions[numSupportedResolution]=resolutions[i];
numSupportedResolution++;
}
}
final Pair<Integer,Integer>[] supportedResolutions=new Pair[numSupportedResolution];
System.arraycopy(tmpResolutions,0,supportedResolutions,0,numSupportedResolution);
return supportedResolutions;
}
