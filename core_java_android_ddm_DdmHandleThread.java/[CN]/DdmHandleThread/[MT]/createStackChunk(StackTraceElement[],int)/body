{
  int bufferSize=0;
  bufferSize+=4;
  bufferSize+=4;
  bufferSize+=4;
  for (  StackTraceElement elem : trace) {
    bufferSize+=4 + elem.getClassName().length() * 2;
    bufferSize+=4 + elem.getMethodName().length() * 2;
    bufferSize+=4;
    if (elem.getFileName() != null)     bufferSize+=elem.getFileName().length() * 2;
    bufferSize+=4;
  }
  ByteBuffer out=ByteBuffer.allocate(bufferSize);
  out.putInt(0);
  out.putInt(threadId);
  out.putInt(trace.length);
  for (  StackTraceElement elem : trace) {
    out.putInt(elem.getClassName().length());
    putString(out,elem.getClassName());
    out.putInt(elem.getMethodName().length());
    putString(out,elem.getMethodName());
    if (elem.getFileName() != null) {
      out.putInt(elem.getFileName().length());
      putString(out,elem.getFileName());
    }
 else {
      out.putInt(0);
    }
    out.putInt(elem.getLineNumber());
  }
  return new Chunk(CHUNK_STKL,out);
}
