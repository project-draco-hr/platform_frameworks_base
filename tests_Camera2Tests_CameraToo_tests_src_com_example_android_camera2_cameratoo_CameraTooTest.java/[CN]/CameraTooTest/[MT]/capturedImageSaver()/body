{
  ByteBuffer buf=ByteBuffer.allocate(25);
  for (int index=0; index < buf.capacity(); ++index)   buf.put(index,(byte)index);
  Image.Plane plane=mock(Image.Plane.class);
  when(plane.getBuffer()).thenReturn(buf);
  when(plane.getPixelStride()).thenReturn(1);
  when(plane.getRowStride()).thenReturn(5);
  Image.Plane[] onlyPlaneThatMatters={plane};
  Image image=mock(Image.class);
  when(image.getPlanes()).thenReturn(onlyPlaneThatMatters);
  when(image.getWidth()).thenReturn(5);
  when(image.getHeight()).thenReturn(5);
  File picturesFolder=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);
  Set<File> preListing=new HashSet<File>(Arrays.asList(picturesFolder.listFiles(OUTPUT_FILE_DECIDER)));
  CameraTooActivity.CapturedImageSaver saver=new CameraTooActivity.CapturedImageSaver(image);
  saver.run();
  Set<File> postListing=new HashSet<File>(Arrays.asList(picturesFolder.listFiles(OUTPUT_FILE_DECIDER)));
  Set<File> newFiles=newlyAddedElements(preListing,postListing);
  assertEquals(newFiles.size(),1);
  File picture=newFiles.iterator().next();
  FileInputStream istream=new FileInputStream(picture);
  for (int count=0; count < buf.capacity(); ++count) {
    assertEquals(istream.read(),buf.get(count));
  }
  assertEquals(istream.read(),-1);
  assertTrue(picture.delete());
}
