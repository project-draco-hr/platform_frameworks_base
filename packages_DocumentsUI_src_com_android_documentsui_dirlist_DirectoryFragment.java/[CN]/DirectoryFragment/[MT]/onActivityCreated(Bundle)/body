{
  super.onActivityCreated(savedInstanceState);
  final Context context=getActivity();
  final State state=getDisplayState();
  final RootInfo root=getArguments().getParcelable(EXTRA_ROOT);
  final DocumentInfo doc=getArguments().getParcelable(EXTRA_DOC);
  mIconHelper=new IconHelper(context,MODE_GRID);
  mAdapter=new SectionBreakDocumentsAdapterWrapper(this,new ModelBackedDocumentsAdapter(this,mIconHelper));
  mRecView.setAdapter(mAdapter);
  mGestureDetector=new ListeningGestureDetector(this.getContext(),new GestureListener());
  mRecView.addOnItemTouchListener(mGestureDetector);
  mSelectionManager=new MultiSelectManager(mRecView,mAdapter,state.allowMultiple ? MultiSelectManager.MODE_MULTIPLE : MultiSelectManager.MODE_SINGLE);
  mSelectionManager.addCallback(new SelectionModeListener());
  mModel=new Model();
  mModel.addUpdateListener(mAdapter);
  mModel.addUpdateListener(mModelUpdateListener);
  mType=getArguments().getInt(EXTRA_TYPE);
  mStateKey=buildStateKey(root,doc);
  mTuner=FragmentTuner.pick(getContext(),state);
  mClipper=new DocumentClipper(context);
  boolean hideGridTitles;
  if (mType == TYPE_RECENT_OPEN) {
    hideGridTitles=MimePredicate.mimeMatches(MimePredicate.VISUAL_MIMES,state.acceptMimes);
  }
 else {
    hideGridTitles=(doc != null) && doc.isGridTitlesHidden();
  }
  GridDocumentHolder.setHideTitles(hideGridTitles);
  final ActivityManager am=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);
  boolean svelte=am.isLowRamDevice() && (mType == TYPE_RECENT_OPEN);
  mIconHelper.setThumbnailsEnabled(!svelte);
  mCallbacks=new LoaderCallbacks<DirectoryResult>(){
    @Override public Loader<DirectoryResult> onCreateLoader(    int id,    Bundle args){
      final String query=getArguments().getString(EXTRA_QUERY);
      Uri contentsUri;
switch (mType) {
case TYPE_NORMAL:
        contentsUri=DocumentsContract.buildChildDocumentsUri(doc.authority,doc.documentId);
      if (state.action == ACTION_MANAGE) {
        contentsUri=DocumentsContract.setManageMode(contentsUri);
      }
    return new DirectoryLoader(context,mType,root,doc,contentsUri,state.userSortOrder);
case TYPE_SEARCH:
  contentsUri=DocumentsContract.buildSearchDocumentsUri(root.authority,root.rootId,query);
if (state.action == ACTION_MANAGE) {
  contentsUri=DocumentsContract.setManageMode(contentsUri);
}
return new DirectoryLoader(context,mType,root,doc,contentsUri,state.userSortOrder);
case TYPE_RECENT_OPEN:
final RootsCache roots=DocumentsApplication.getRootsCache(context);
return new RecentLoader(context,roots,state);
default :
throw new IllegalStateException("Unknown type " + mType);
}
}
@Override public void onLoadFinished(Loader<DirectoryResult> loader,DirectoryResult result){
if (!isAdded()) return;
mModel.update(result);
state.derivedSortOrder=result.sortOrder;
updateDisplayState();
final SparseArray<Parcelable> container=state.dirState.remove(mStateKey);
if (container != null && !getArguments().getBoolean(EXTRA_IGNORE_STATE,false)) {
getView().restoreHierarchyState(container);
}
 else if (mLastSortOrder != state.derivedSortOrder) {
mRecView.smoothScrollToPosition(0);
}
mLastSortOrder=state.derivedSortOrder;
mTuner.onModelLoaded(mModel,mType);
}
@Override public void onLoaderReset(Loader<DirectoryResult> loader){
mModel.update(null);
}
}
;
getLoaderManager().restartLoader(LOADER_ID,null,mCallbacks);
}
