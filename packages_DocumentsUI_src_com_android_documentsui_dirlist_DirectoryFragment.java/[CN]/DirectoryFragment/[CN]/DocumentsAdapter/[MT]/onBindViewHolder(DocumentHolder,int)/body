{
  final Context context=getContext();
  final State state=getDisplayState();
  final RootsCache roots=DocumentsApplication.getRootsCache(context);
  final ThumbnailCache thumbs=DocumentsApplication.getThumbnailsCache(context,mThumbSize);
  holder.modelId=mModelIds.get(position);
  final Cursor cursor=mModel.getItem(holder.modelId);
  checkNotNull(cursor,"Cursor cannot be null.");
  final String docAuthority=getCursorString(cursor,RootCursorWrapper.COLUMN_AUTHORITY);
  final String docRootId=getCursorString(cursor,RootCursorWrapper.COLUMN_ROOT_ID);
  final String docId=getCursorString(cursor,Document.COLUMN_DOCUMENT_ID);
  final String docMimeType=getCursorString(cursor,Document.COLUMN_MIME_TYPE);
  final String docDisplayName=getCursorString(cursor,Document.COLUMN_DISPLAY_NAME);
  final long docLastModified=getCursorLong(cursor,Document.COLUMN_LAST_MODIFIED);
  final int docIcon=getCursorInt(cursor,Document.COLUMN_ICON);
  final int docFlags=getCursorInt(cursor,Document.COLUMN_FLAGS);
  final String docSummary=getCursorString(cursor,Document.COLUMN_SUMMARY);
  final long docSize=getCursorLong(cursor,Document.COLUMN_SIZE);
  final View itemView=holder.itemView;
  holder.setSelected(isSelected(holder.modelId));
  final ImageView iconMime=(ImageView)itemView.findViewById(R.id.icon_mime);
  final ImageView iconThumb=(ImageView)itemView.findViewById(R.id.icon_thumb);
  final TextView title=(TextView)itemView.findViewById(android.R.id.title);
  final ImageView icon1=(ImageView)itemView.findViewById(android.R.id.icon1);
  final TextView summary=(TextView)itemView.findViewById(android.R.id.summary);
  final TextView date=(TextView)itemView.findViewById(R.id.date);
  final TextView size=(TextView)itemView.findViewById(R.id.size);
  final ThumbnailAsyncTask oldTask=(ThumbnailAsyncTask)iconThumb.getTag();
  if (oldTask != null) {
    oldTask.preempt();
    iconThumb.setTag(null);
  }
  iconMime.animate().cancel();
  iconThumb.animate().cancel();
  final boolean supportsThumbnail=(docFlags & Document.FLAG_SUPPORTS_THUMBNAIL) != 0;
  final boolean allowThumbnail=(state.derivedMode == MODE_GRID) || MimePredicate.mimeMatches(MimePredicate.VISUAL_MIMES,docMimeType);
  final boolean showThumbnail=supportsThumbnail && allowThumbnail && !mSvelteRecents;
  final boolean enabled=mTuner.isDocumentEnabled(docMimeType,docFlags);
  final float iconAlpha=(state.derivedMode == MODE_LIST && !enabled) ? 0.5f : 1f;
  boolean cacheHit=false;
  if (showThumbnail) {
    final Uri uri=DocumentsContract.buildDocumentUri(docAuthority,docId);
    final Bitmap cachedResult=thumbs.get(uri);
    if (cachedResult != null) {
      iconThumb.setImageBitmap(cachedResult);
      cacheHit=true;
    }
 else {
      iconThumb.setImageDrawable(null);
      final ThumbnailAsyncTask task=new ThumbnailAsyncTask(uri,iconMime,iconThumb,mThumbSize,iconAlpha);
      iconThumb.setTag(task);
      ProviderExecutor.forAuthority(docAuthority).execute(task);
    }
  }
  if (cacheHit) {
    iconMime.setAlpha(0f);
    iconMime.setImageDrawable(null);
    iconThumb.setAlpha(1f);
  }
 else {
    iconMime.setAlpha(1f);
    iconThumb.setAlpha(0f);
    iconThumb.setImageDrawable(null);
    iconMime.setImageDrawable(getDocumentIcon(mContext,docAuthority,docId,docMimeType,docIcon,state));
  }
  if ((state.derivedMode == MODE_GRID) && mHideGridTitles) {
    title.setVisibility(View.GONE);
  }
 else {
    title.setText(docDisplayName);
    title.setVisibility(View.VISIBLE);
  }
  Drawable iconDrawable=null;
  if (mType == TYPE_RECENT_OPEN) {
    final RootInfo root=roots.getRootBlocking(docAuthority,docRootId);
    iconDrawable=root.loadIcon(mContext);
    if (summary != null) {
      final boolean alwaysShowSummary=getResources().getBoolean(R.bool.always_show_summary);
      if (alwaysShowSummary) {
        summary.setText(root.getDirectoryString());
        summary.setVisibility(View.VISIBLE);
      }
 else {
        if (iconDrawable != null && roots.isIconUniqueBlocking(root)) {
          summary.setVisibility(View.INVISIBLE);
        }
 else {
          summary.setText(root.getDirectoryString());
          summary.setVisibility(View.VISIBLE);
          summary.setTextAlignment(TextView.TEXT_ALIGNMENT_TEXT_END);
        }
      }
    }
  }
 else {
    if (Document.MIME_TYPE_DIR.equals(docMimeType) && state.derivedMode == MODE_GRID && showThumbnail) {
      iconDrawable=IconUtils.applyTintAttr(mContext,R.drawable.ic_doc_folder,android.R.attr.textColorPrimaryInverse);
    }
    if (summary != null) {
      if (docSummary != null) {
        summary.setText(docSummary);
        summary.setVisibility(View.VISIBLE);
      }
 else {
        summary.setVisibility(View.INVISIBLE);
      }
    }
  }
  if (iconDrawable != null) {
    icon1.setVisibility(View.VISIBLE);
    icon1.setImageDrawable(iconDrawable);
  }
 else {
    icon1.setVisibility(View.GONE);
  }
  if (docLastModified == -1) {
    date.setText(null);
  }
 else {
    date.setText(formatTime(mContext,docLastModified));
  }
  if (!state.showSize || Document.MIME_TYPE_DIR.equals(docMimeType) || docSize == -1) {
    size.setVisibility(View.GONE);
  }
 else {
    size.setVisibility(View.VISIBLE);
    size.setText(Formatter.formatFileSize(mContext,docSize));
  }
  setEnabledRecursive(itemView,enabled);
  iconMime.setAlpha(iconAlpha);
  iconThumb.setAlpha(iconAlpha);
  icon1.setAlpha(iconAlpha);
  if (DEBUG_ENABLE_DND) {
    setupDragAndDropOnDocumentView(itemView,cursor);
  }
}
