{
  AndroidTestRunner runner=super.getAndroidTestRunner();
  runner.addTestListener(new TestListener(){
    /** 
 * The last test class we executed code from.
 */
    private Class<?> lastClass;
    /** 
 * The minimum time we expect a test to take.
 */
    private static final int MINIMUM_TIME=100;
    /** 
 * The start time of our current test in System.currentTimeMillis().
 */
    private long startTime;
    public void startTest(    Test test){
      if (test.getClass() != lastClass) {
        lastClass=test.getClass();
        printMemory(test.getClass());
      }
      Thread.currentThread().setContextClassLoader(test.getClass().getClassLoader());
      startTime=System.currentTimeMillis();
    }
    public void endTest(    Test test){
      if (test instanceof TestCase) {
        cleanup((TestCase)test);
        long timeTaken=System.currentTimeMillis() - startTime;
        if (timeTaken < MINIMUM_TIME) {
          try {
            Thread.sleep(MINIMUM_TIME - timeTaken);
          }
 catch (          InterruptedException ignored) {
          }
        }
      }
    }
    public void addError(    Test test,    Throwable t){
    }
    public void addFailure(    Test test,    AssertionFailedError t){
    }
    /** 
 * Dumps some memory info.
 */
    private void printMemory(    Class<? extends Test> testClass){
      Runtime runtime=Runtime.getRuntime();
      long total=runtime.totalMemory();
      long free=runtime.freeMemory();
      long used=total - free;
      Log.d(TAG,"Total memory  : " + total);
      Log.d(TAG,"Used memory   : " + used);
      Log.d(TAG,"Free memory   : " + free);
      Log.d(TAG,"Now executing : " + testClass.getName());
    }
    /** 
 * Nulls all non-static reference fields in the given test class.
 * This method helps us with those test classes that don't have an
 * explicit tearDown() method. Normally the garbage collector should
 * take care of everything, but since JUnit keeps references to all
 * test cases, a little help might be a good idea.
 */
    private void cleanup(    TestCase test){
      Class<?> clazz=test.getClass();
      while (clazz != TestCase.class) {
        Field[] fields=clazz.getDeclaredFields();
        for (int i=0; i < fields.length; i++) {
          Field f=fields[i];
          if (!f.getType().isPrimitive() && !Modifier.isStatic(f.getModifiers())) {
            try {
              f.setAccessible(true);
              f.set(test,null);
            }
 catch (            Exception ignored) {
            }
          }
        }
        clazz=clazz.getSuperclass();
      }
    }
  }
);
  return runner;
}
