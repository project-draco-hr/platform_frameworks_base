{
  Console.log(Constants.DebugFlags.UI.TouchEvents,"[TaskStackViewTouchHandler|interceptTouchEvent]",Console.motionEventActionToString(ev.getAction()),Console.AnsiBlue);
  boolean hasChildren=(mSv.getChildCount() > 0);
  if (!hasChildren) {
    return false;
  }
  mInterceptedBySwipeHelper=mSwipeHelper.onInterceptTouchEvent(ev);
  if (mInterceptedBySwipeHelper) {
    return true;
  }
  boolean wasScrolling=!mSv.mScroller.isFinished() || (mSv.mScrollAnimator != null && mSv.mScrollAnimator.isRunning());
  int action=ev.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
{
      mInitialMotionX=mLastMotionX=(int)ev.getX();
      mInitialMotionY=mLastMotionY=(int)ev.getY();
      mActivePointerId=ev.getPointerId(0);
      mActiveTaskView=findViewAtPoint(mLastMotionX,mLastMotionY);
      mSv.abortScroller();
      mSv.abortBoundScrollAnimation();
      initOrResetVelocityTracker();
      mVelocityTracker.addMovement(ev);
      mIsScrolling=!mSv.mScroller.isFinished();
      break;
    }
case MotionEvent.ACTION_MOVE:
{
    if (mActivePointerId == INACTIVE_POINTER_ID)     break;
    int activePointerIndex=ev.findPointerIndex(mActivePointerId);
    int y=(int)ev.getY(activePointerIndex);
    int x=(int)ev.getX(activePointerIndex);
    if (Math.abs(y - mInitialMotionY) > mScrollTouchSlop) {
      mIsScrolling=true;
      initVelocityTrackerIfNotExists();
      mVelocityTracker.addMovement(ev);
      final ViewParent parent=mSv.getParent();
      if (parent != null) {
        parent.requestDisallowInterceptTouchEvent(true);
      }
      mSv.addHwLayersRefCount("stackScroll");
    }
    mLastMotionX=x;
    mLastMotionY=y;
    break;
  }
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
{
  mSv.animateBoundScroll();
  if (mIsScrolling) {
    mSv.decHwLayersRefCount("stackScroll");
  }
  mIsScrolling=false;
  mActivePointerId=INACTIVE_POINTER_ID;
  mActiveTaskView=null;
  mTotalScrollMotion=0;
  recycleVelocityTracker();
  break;
}
}
return wasScrolling || mIsScrolling;
}
