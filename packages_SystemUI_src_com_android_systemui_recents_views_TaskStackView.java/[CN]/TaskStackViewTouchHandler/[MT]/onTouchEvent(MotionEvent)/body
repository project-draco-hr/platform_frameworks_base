{
  Console.log(Constants.DebugFlags.TaskStack.SynchronizeViewsWithModel,"[TaskStackViewTouchHandler|touchEvent]",Console.motionEventActionToString(ev.getAction()),Console.AnsiBlue);
  boolean hasChildren=(mSv.getChildCount() > 0);
  if (!hasChildren) {
    return false;
  }
  if (mInterceptedBySwipeHelper && mSwipeHelper.onTouchEvent(ev)) {
    return true;
  }
  initVelocityTrackerIfNotExists();
  mVelocityTracker.addMovement(ev);
  int action=ev.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
{
      mInitialMotionX=mLastMotionX=(int)ev.getX();
      mInitialMotionY=mLastMotionY=(int)ev.getY();
      mActivePointerId=ev.getPointerId(0);
      mActiveTaskView=findViewAtPoint(mLastMotionX,mLastMotionY);
      mSv.mScroller.abortAnimation();
      mSv.abortBoundScrollAnimation();
      initOrResetVelocityTracker();
      mVelocityTracker.addMovement(ev);
      final ViewParent parent=mSv.getParent();
      if (parent != null) {
        parent.requestDisallowInterceptTouchEvent(true);
      }
      break;
    }
case MotionEvent.ACTION_MOVE:
{
    if (mActivePointerId == INACTIVE_POINTER_ID)     break;
    int activePointerIndex=ev.findPointerIndex(mActivePointerId);
    int x=(int)ev.getX(activePointerIndex);
    int y=(int)ev.getY(activePointerIndex);
    int deltaY=mLastMotionY - y;
    if (!mIsScrolling) {
      if (Math.abs(y - mInitialMotionY) > mScrollTouchSlop) {
        mIsScrolling=true;
        initOrResetVelocityTracker();
        mVelocityTracker.addMovement(ev);
        final ViewParent parent=mSv.getParent();
        if (parent != null) {
          parent.requestDisallowInterceptTouchEvent(true);
        }
        mSv.addHwLayersRefCount();
      }
    }
    if (mIsScrolling) {
      mSv.setStackScroll(mSv.getStackScroll() + deltaY);
      if (mSv.isScrollOutOfBounds()) {
        mVelocityTracker.clear();
      }
    }
    mLastMotionX=x;
    mLastMotionY=y;
    mTotalScrollMotion+=Math.abs(deltaY);
    break;
  }
case MotionEvent.ACTION_UP:
{
  final VelocityTracker velocityTracker=mVelocityTracker;
  velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
  int velocity=(int)velocityTracker.getYVelocity(mActivePointerId);
  if (mIsScrolling && (Math.abs(velocity) > mMinimumVelocity)) {
    Console.log(Constants.DebugFlags.UI.TouchEvents,"[TaskStackViewTouchHandler|fling]","scroll: " + mSv.getStackScroll() + " velocity: "+ velocity,Console.AnsiGreen);
    mSv.addHwLayersRefCount();
    mSv.mScroller.fling(0,mSv.getStackScroll(),0,-velocity,0,0,mSv.mMinScroll,mSv.mMaxScroll,0,0);
    mSv.invalidate();
  }
 else   if (mSv.isScrollOutOfBounds()) {
    mSv.animateBoundScroll(Constants.Values.TaskStackView.Animation.SnapScrollBackDuration);
  }
  mActivePointerId=INACTIVE_POINTER_ID;
  mIsScrolling=false;
  mTotalScrollMotion=0;
  recycleVelocityTracker();
  mSv.decHwLayersRefCount();
  break;
}
case MotionEvent.ACTION_CANCEL:
{
if (mSv.isScrollOutOfBounds()) {
  mSv.animateBoundScroll(Constants.Values.TaskStackView.Animation.SnapScrollBackDuration);
}
mActivePointerId=INACTIVE_POINTER_ID;
mIsScrolling=false;
mTotalScrollMotion=0;
recycleVelocityTracker();
mSv.decHwLayersRefCount();
break;
}
}
return true;
}
