{
  final RecentsConfiguration config=RecentsConfiguration.getInstance();
  final ArrayList<TaskView> childrenToRemove=new ArrayList<TaskView>();
  final HashMap<TaskView,Pair<Integer,TaskViewTransform>> childViewTransforms=new HashMap<TaskView,Pair<Integer,TaskViewTransform>>();
  int duration=getExitTransformsForFilterAnimation(curTasks,curTaskTransforms,tasks,taskTransforms,childViewTransforms,childrenToRemove,config);
  final boolean unifyNewViewAnimation=childrenToRemove.isEmpty();
  if (unifyNewViewAnimation) {
    int inDuration=getEnterTransformsForFilterAnimation(tasks,taskTransforms,childViewTransforms,config);
    duration=Math.max(duration,inDuration);
  }
  for (  final TaskView tv : childViewTransforms.keySet()) {
    Pair<Integer,TaskViewTransform> t=childViewTransforms.get(tv);
    tv.animate().cancel();
    tv.animate().setStartDelay(t.first).withEndAction(new Runnable(){
      @Override public void run(){
        childViewTransforms.remove(tv);
        if (childViewTransforms.isEmpty()) {
          for (          TaskView tv : childrenToRemove) {
            mViewPool.returnViewToPool(tv);
          }
          if (!unifyNewViewAnimation) {
            childViewTransforms.clear();
            int duration=getEnterTransformsForFilterAnimation(tasks,taskTransforms,childViewTransforms,config);
            for (            final TaskView tv : childViewTransforms.keySet()) {
              Pair<Integer,TaskViewTransform> t=childViewTransforms.get(tv);
              tv.animate().setStartDelay(t.first);
              tv.updateViewPropertiesToTaskTransform(null,t.second,duration);
            }
          }
        }
      }
    }
);
    tv.updateViewPropertiesToTaskTransform(null,t.second,duration);
  }
}
