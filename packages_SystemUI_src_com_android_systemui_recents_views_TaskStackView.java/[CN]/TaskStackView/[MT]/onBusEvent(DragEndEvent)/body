{
  if (event.dropTarget instanceof TaskStack.DockState) {
    mLayoutAlgorithm.clearUnfocusedTaskOverrides();
    return;
  }
  boolean isFreeformTask=event.task.isFreeformTask();
  boolean hasChangedStacks=(!isFreeformTask && event.dropTarget == mFreeformWorkspaceDropTarget) || (isFreeformTask && event.dropTarget == mStackDropTarget);
  if (hasChangedStacks) {
    if (event.dropTarget == mFreeformWorkspaceDropTarget) {
      mStack.moveTaskToStack(event.task,FREEFORM_WORKSPACE_STACK_ID);
    }
 else     if (event.dropTarget == mStackDropTarget) {
      mStack.moveTaskToStack(event.task,FULLSCREEN_WORKSPACE_STACK_ID);
    }
    updateLayoutAlgorithm(true);
    event.addPostAnimationCallback(new Runnable(){
      @Override public void run(){
        SystemServicesProxy ssp=Recents.getSystemServices();
        ssp.moveTaskToStack(event.task.key.id,event.task.key.stackId);
      }
    }
);
  }
  removeIgnoreTask(event.task);
  Utilities.setViewFrameFromTranslation(event.taskView);
  ArrayMap<Task,AnimationProps> animationOverrides=new ArrayMap<>();
  animationOverrides.put(event.task,new AnimationProps(SLOW_SYNC_STACK_DURATION,Interpolators.FAST_OUT_SLOW_IN,event.getAnimationTrigger().decrementOnAnimationEnd()));
  relayoutTaskViews(new AnimationProps(SLOW_SYNC_STACK_DURATION,Interpolators.FAST_OUT_SLOW_IN));
  event.getAnimationTrigger().increment();
}
