{
  if (event.dropTarget instanceof TaskStack.DockState) {
    return;
  }
  boolean isFreeformTask=event.task.isFreeformTask();
  boolean hasChangedStacks=(!isFreeformTask && event.dropTarget == mFreeformWorkspaceDropTarget) || (isFreeformTask && event.dropTarget == mStackDropTarget);
  if (hasChangedStacks) {
    ArrayList<Animator> animations=new ArrayList<>();
    if (event.dropTarget == mFreeformWorkspaceDropTarget) {
      mStack.moveTaskToStack(event.task,FREEFORM_WORKSPACE_STACK_ID);
      updateLayout(true);
      TaskViewThumbnail thumbnailView=event.taskView.mThumbnailView;
      float thumbnailScale=thumbnailView.computeThumbnailScale(true);
      RectF bitmapRect=thumbnailView.getScaledBitmapRect(thumbnailScale);
      AnimateableViewBounds viewBounds=event.taskView.getViewBounds();
      int clipRight=(int)(thumbnailView.getMeasuredWidth() - bitmapRect.width());
      int clipBottom=(int)(thumbnailView.getMeasuredHeight() - bitmapRect.height());
      animations.add(ObjectAnimator.ofFloat(thumbnailView,TaskViewThumbnail.BITMAP_SCALE,thumbnailView.getBitmapScale(),thumbnailScale));
      animations.add(ObjectAnimator.ofInt(viewBounds,AnimateableViewBounds.CLIP_BOTTOM,viewBounds.getClipBottom(),clipBottom));
      animations.add(ObjectAnimator.ofInt(viewBounds,AnimateableViewBounds.CLIP_RIGHT,viewBounds.getClipRight(),clipRight));
    }
 else     if (event.dropTarget == mStackDropTarget) {
      mStack.moveTaskToStack(event.task,FULLSCREEN_WORKSPACE_STACK_ID);
      updateLayout(true);
      TaskViewThumbnail thumbnailView=event.taskView.mThumbnailView;
      float thumbnailScale=thumbnailView.computeThumbnailScale(false);
      AnimateableViewBounds viewBounds=event.taskView.getViewBounds();
      animations.add(ObjectAnimator.ofFloat(thumbnailView,TaskViewThumbnail.BITMAP_SCALE,thumbnailView.getBitmapScale(),thumbnailScale));
      animations.add(ObjectAnimator.ofInt(viewBounds,AnimateableViewBounds.CLIP_BOTTOM,viewBounds.getClipBottom(),0));
      animations.add(ObjectAnimator.ofInt(viewBounds,AnimateableViewBounds.CLIP_RIGHT,viewBounds.getClipRight(),0));
    }
    event.postAnimationTrigger.increment();
    event.postAnimationTrigger.addLastDecrementRunnable(new Runnable(){
      @Override public void run(){
        SystemServicesProxy ssp=Recents.getSystemServices();
        ssp.moveTaskToStack(event.task.key.id,event.task.key.stackId);
      }
    }
);
    mDropAnimation=new AnimatorSet();
    mDropAnimation.playTogether(animations);
    mDropAnimation.setDuration(250);
    mDropAnimation.setInterpolator(mFastOutSlowInInterpolator);
    mDropAnimation.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        event.postAnimationTrigger.decrement();
      }
    }
);
    mDropAnimation.start();
  }
  event.postAnimationTrigger.increment();
  event.taskView.animate().withEndAction(event.postAnimationTrigger.decrementAsRunnable());
  requestSynchronizeStackViewsWithModel(250);
}
