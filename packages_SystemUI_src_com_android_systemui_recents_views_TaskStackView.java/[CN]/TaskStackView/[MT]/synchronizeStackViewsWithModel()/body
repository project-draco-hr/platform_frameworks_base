{
  if (mStackViewsDirty) {
    ArrayList<Task> tasks=mStack.getTasks();
    float stackScroll=mStackScroller.getStackScroll();
    int[] visibleRange=mTmpVisibleRange;
    boolean isValidVisibleRange=updateStackTransforms(mCurrentTaskTransforms,tasks,stackScroll,visibleRange,false);
    boolean hasStackBackTransform=false;
    boolean hasStackFrontTransform=false;
    if (DEBUG) {
      Log.d(TAG,"visibleRange: " + visibleRange[0] + " to "+ visibleRange[1]);
    }
    mTmpTaskViewMap.clear();
    List<TaskView> taskViews=getTaskViews();
    boolean wasLastFocusedTaskAnimated=false;
    int lastFocusedTaskIndex=-1;
    int taskViewCount=taskViews.size();
    for (int i=taskViewCount - 1; i >= 0; i--) {
      TaskView tv=taskViews.get(i);
      Task task=tv.getTask();
      int taskIndex=mStack.indexOfTask(task);
      if (visibleRange[1] <= taskIndex && taskIndex <= visibleRange[0]) {
        mTmpTaskViewMap.put(task,tv);
      }
 else {
        if (tv.isFocusedTask()) {
          wasLastFocusedTaskAnimated=tv.isFocusAnimated();
          lastFocusedTaskIndex=taskIndex;
          resetFocusedTask();
        }
        mViewPool.returnViewToPool(tv);
      }
    }
    for (int i=visibleRange[0]; isValidVisibleRange && i >= visibleRange[1]; i--) {
      Task task=tasks.get(i);
      TaskViewTransform transform=mCurrentTaskTransforms.get(i);
      TaskView tv=mTmpTaskViewMap.get(task);
      int taskIndex=mStack.indexOfTask(task);
      if (tv == null) {
        tv=mViewPool.pickUpViewFromPool(task,task);
        if (mLayersDisabled) {
          tv.disableLayersForOneFrame();
        }
        if (mStackViewsAnimationDuration > 0) {
          if (Float.compare(transform.p,0f) <= 0) {
            if (!hasStackBackTransform) {
              hasStackBackTransform=true;
              mLayoutAlgorithm.getStackTransform(0f,0f,mTmpStackBackTransform,null);
            }
            tv.updateViewPropertiesToTaskTransform(mTmpStackBackTransform,0);
          }
 else {
            if (!hasStackFrontTransform) {
              hasStackFrontTransform=true;
              mLayoutAlgorithm.getStackTransform(1f,0f,mTmpStackFrontTransform,null);
            }
            tv.updateViewPropertiesToTaskTransform(mTmpStackFrontTransform,0);
          }
        }
      }
      tv.updateViewPropertiesToTaskTransform(mCurrentTaskTransforms.get(taskIndex),mStackViewsAnimationDuration,mRequestUpdateClippingListener);
    }
    if (lastFocusedTaskIndex != -1) {
      if (lastFocusedTaskIndex < visibleRange[1]) {
        setFocusedTask(visibleRange[1],false,wasLastFocusedTaskAnimated);
      }
 else {
        setFocusedTask(visibleRange[0],false,wasLastFocusedTaskAnimated);
      }
    }
    mLayoutAlgorithm.getFreeformWorkspaceBounds(stackScroll,mTmpTransform);
    if (mTmpTransform.visible) {
      mTmpTransform.rect.roundOut(mTmpRect);
      mFreeformWorkspaceBackground.setAlpha(255);
      mFreeformWorkspaceBackground.setBounds(mTmpRect);
    }
 else {
      mFreeformWorkspaceBackground.setAlpha(0);
    }
    mStackViewsAnimationDuration=0;
    mStackViewsDirty=false;
    mStackViewsClipDirty=true;
    return true;
  }
  return false;
}
