{
  int res=0;
  SampleModelInfo srcInfo, dstInfo;
  int offsets[]=null;
  srcInfo=checkSampleModel(src.getSampleModel());
  dstInfo=checkSampleModel(dst.getSampleModel());
  if (srcInfo == null || dstInfo == null) {
    return verySlowFilter(src,dst);
  }
  if (src.getParent() != null || dst.getParent() != null) {
    if (src.getSampleModelTranslateX() != 0 || src.getSampleModelTranslateY() != 0 || dst.getSampleModelTranslateX() != 0 || dst.getSampleModelTranslateY() != 0) {
      offsets=new int[4];
      offsets[0]=-src.getSampleModelTranslateX() + src.getMinX();
      offsets[1]=-src.getSampleModelTranslateY() + src.getMinY();
      offsets[2]=-dst.getSampleModelTranslateX() + dst.getMinX();
      offsets[3]=-dst.getSampleModelTranslateY() + dst.getMinY();
    }
  }
  int rmxWidth=(srcInfo.channels + 1);
  float reorderedMatrix[]=new float[rmxWidth * dstInfo.channels];
  for (int j=0; j < dstInfo.channels; j++) {
    if (j >= dstInfo.channelsOrder.length) {
      continue;
    }
    for (int i=0; i < srcInfo.channels; i++) {
      if (i >= srcInfo.channelsOrder.length) {
        break;
      }
      reorderedMatrix[dstInfo.channelsOrder[j] * rmxWidth + srcInfo.channelsOrder[i]]=matrix[j][i];
    }
    if (mxWidth == rmxWidth) {
      reorderedMatrix[(dstInfo.channelsOrder[j] + 1) * rmxWidth - 1]=matrix[j][mxWidth - 1];
    }
  }
  Object srcData, dstData;
  AwtImageBackdoorAccessor dbAccess=AwtImageBackdoorAccessor.getInstance();
  try {
    srcData=dbAccess.getData(src.getDataBuffer());
    dstData=dbAccess.getData(dst.getDataBuffer());
  }
 catch (  IllegalArgumentException e) {
    return -1;
  }
  simpleCombineBands(srcData,src.getWidth(),src.getHeight(),srcInfo.stride,srcInfo.channels,dstData,dstInfo.stride,dstInfo.channels,reorderedMatrix,offsets);
  return res;
}
