{
  if (mNativePaint == 0)   throw new NullPointerException("Already finalized!");
  if (text == null) {
    throw new IllegalArgumentException("text cannot be null");
  }
  if ((start | end | contextStart| contextEnd| advancesIndex| (end - start)| (start - contextStart)| (contextEnd - end)| (text.length() - contextEnd)| (advances == null ? 0 : (advances.length - advancesIndex - (end - start)))) < 0) {
    throw new IndexOutOfBoundsException();
  }
  if (text.length() == 0 || start == end) {
    return 0f;
  }
  if (!mHasCompatScaling) {
    return nGetTextAdvances(mNativePaint,mNativeTypeface,text,start,end,contextStart,contextEnd,isRtl ? BIDI_FORCE_RTL : BIDI_FORCE_LTR,advances,advancesIndex);
  }
  final float oldSize=getTextSize();
  setTextSize(oldSize * mCompatScaling);
  float totalAdvance=nGetTextAdvances(mNativePaint,mNativeTypeface,text,start,end,contextStart,contextEnd,isRtl ? BIDI_FORCE_RTL : BIDI_FORCE_LTR,advances,advancesIndex);
  setTextSize(oldSize);
  if (advances != null) {
    for (int i=advancesIndex, e=i + (end - start); i < e; i++) {
      advances[i]*=mInvCompatScaling;
    }
  }
  return totalAdvance * mInvCompatScaling;
}
