{
  RecentsConfiguration config=Recents.getConfiguration();
  RecentsActivityLaunchState launchState=config.getLaunchState();
  Resources res=mStackView.getResources();
  Resources appRes=mStackView.getContext().getApplicationContext().getResources();
  TaskStackLayoutAlgorithm stackLayout=mStackView.getStackAlgorithm();
  TaskStackViewScroller stackScroller=mStackView.getScroller();
  TaskStack stack=mStackView.getStack();
  Task launchTargetTask=stack.getLaunchTarget();
  if (stack.getTaskCount() == 0) {
    return;
  }
  int taskViewEnterFromAppDuration=res.getInteger(R.integer.recents_task_enter_from_app_duration);
  int taskViewEnterFromAffiliatedAppDuration=res.getInteger(R.integer.recents_task_enter_from_affiliated_app_duration);
  int dockGestureAnimDuration=appRes.getInteger(R.integer.long_press_dock_anim_duration);
  List<TaskView> taskViews=mStackView.getTaskViews();
  int taskViewCount=taskViews.size();
  for (int i=taskViewCount - 1; i >= 0; i--) {
    int taskIndexFromFront=taskViewCount - i - 1;
    int taskIndexFromBack=i;
    final TaskView tv=taskViews.get(i);
    Task task=tv.getTask();
    boolean currentTaskOccludesLaunchTarget=launchTargetTask != null && launchTargetTask.group != null && launchTargetTask.group.isTaskAboveTask(task,launchTargetTask);
    stackLayout.getStackTransform(task,stackScroller.getStackScroll(),mTmpTransform,null);
    if (launchState.launchedFromApp && !launchState.launchedViaDockGesture) {
      if (task.isLaunchTarget) {
        tv.onStartLaunchTargetEnterAnimation(mTmpTransform,taskViewEnterFromAppDuration,mStackView.mScreenPinningEnabled,postAnimationTrigger);
      }
 else {
        if (currentTaskOccludesLaunchTarget) {
          AnimationProps taskAnimation=new AnimationProps(taskViewEnterFromAffiliatedAppDuration,Interpolators.ALPHA_IN,new AnimatorListenerAdapter(){
            @Override public void onAnimationEnd(            Animator animation){
              postAnimationTrigger.decrement();
              tv.setClipViewInStack(true);
            }
          }
);
          postAnimationTrigger.increment();
          mStackView.updateTaskViewToTransform(tv,mTmpTransform,taskAnimation);
        }
      }
    }
 else     if (launchState.launchedFromHome) {
      AnimationProps taskAnimation=new AnimationProps().setInitialPlayTime(AnimationProps.BOUNDS,Math.min(ENTER_EXIT_NUM_ANIMATING_TASKS,taskIndexFromFront) * DOUBLE_FRAME_OFFSET_MS).setStartDelay(AnimationProps.ALPHA,Math.min(ENTER_EXIT_NUM_ANIMATING_TASKS,taskIndexFromFront) * FRAME_OFFSET_MS).setDuration(AnimationProps.BOUNDS,ENTER_FROM_HOME_TRANSLATION_DURATION).setDuration(AnimationProps.ALPHA,ENTER_FROM_HOME_ALPHA_DURATION).setInterpolator(AnimationProps.BOUNDS,ENTER_FROM_HOME_TRANSLATION_INTERPOLATOR).setInterpolator(AnimationProps.ALPHA,ENTER_FROM_HOME_ALPHA_INTERPOLATOR).setListener(postAnimationTrigger.decrementOnAnimationEnd());
      postAnimationTrigger.increment();
      mStackView.updateTaskViewToTransform(tv,mTmpTransform,taskAnimation);
      if (i == taskViewCount - 1) {
        tv.onStartFrontTaskEnterAnimation(mStackView.mScreenPinningEnabled);
      }
    }
 else     if (launchState.launchedViaDockGesture) {
      AnimationProps taskAnimation=new AnimationProps().setDuration(AnimationProps.BOUNDS,dockGestureAnimDuration + (taskIndexFromBack * DOUBLE_FRAME_OFFSET_MS)).setInterpolator(AnimationProps.BOUNDS,ENTER_WHILE_DOCKING_INTERPOLATOR).setStartDelay(AnimationProps.BOUNDS,48).setListener(postAnimationTrigger.decrementOnAnimationEnd());
      postAnimationTrigger.increment();
      mStackView.updateTaskViewToTransform(tv,mTmpTransform,taskAnimation);
    }
  }
}
