{
synchronized (sLastLockObj) {
    if ((country != null) && country.equals(sLastCountry)) {
      if (DBG)       Log.d(TAG,"getTimeZones(" + country + "): return cached version");
      return sLastZones;
    }
  }
  ArrayList<TimeZone> tzs=new ArrayList<TimeZone>();
  if (country == null) {
    if (DBG)     Log.d(TAG,"getTimeZones(null): return empty list");
    return tzs;
  }
  Resources r=Resources.getSystem();
  XmlResourceParser parser=r.getXml(com.android.internal.R.xml.time_zones_by_country);
  try {
    XmlUtils.beginDocument(parser,"timezones");
    while (true) {
      XmlUtils.nextElement(parser);
      String element=parser.getName();
      if (element == null || !(element.equals("timezone"))) {
        break;
      }
      String code=parser.getAttributeValue(null,"code");
      if (country.equals(code)) {
        if (parser.next() == XmlPullParser.TEXT) {
          String zoneIdString=parser.getText();
          TimeZone tz=TimeZone.getTimeZone(zoneIdString);
          if (tz.getID().startsWith("GMT") == false) {
            tzs.add(tz);
            if (DBG) {
              Log.d(TAG,"getTimeZone('" + country + "'): found tz.getID=="+ ((tz != null) ? tz.getID() : "<no tz>"));
            }
          }
        }
      }
    }
  }
 catch (  XmlPullParserException e) {
    Log.e(TAG,"Got xml parser exception getTimeZone('" + country + "'): e=",e);
  }
catch (  IOException e) {
    Log.e(TAG,"Got IO exception getTimeZone('" + country + "'): e=",e);
  }
 finally {
    parser.close();
  }
synchronized (sLastLockObj) {
    sLastZones=tzs;
    sLastCountry=country;
    return sLastZones;
  }
}
