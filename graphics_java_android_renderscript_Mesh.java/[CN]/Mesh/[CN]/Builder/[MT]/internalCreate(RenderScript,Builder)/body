{
  int id=rs.nMeshCreate(b.mVertexTypeCount,b.mIndexTypes.size());
  Mesh newMesh=new Mesh(id,rs);
  newMesh.mIndexBuffers=new Allocation[b.mIndexTypes.size()];
  newMesh.mPrimitives=new Primitive[b.mIndexTypes.size()];
  newMesh.mVertexBuffers=new Allocation[b.mVertexTypeCount];
  for (int ct=0; ct < b.mIndexTypes.size(); ct++) {
    Allocation alloc=null;
    Entry entry=(Entry)b.mIndexTypes.elementAt(ct);
    if (entry.t != null) {
      alloc=Allocation.createTyped(rs,entry.t);
    }
 else     if (entry.e != null) {
      alloc=Allocation.createSized(rs,entry.e,entry.size);
    }
    int allocID=(alloc == null) ? 0 : alloc.getID();
    rs.nMeshBindIndex(id,allocID,entry.prim.mID,ct);
    newMesh.mIndexBuffers[ct]=alloc;
    newMesh.mPrimitives[ct]=entry.prim;
  }
  for (int ct=0; ct < b.mVertexTypeCount; ct++) {
    Allocation alloc=null;
    Entry entry=b.mVertexTypes[ct];
    if (entry.t != null) {
      alloc=Allocation.createTyped(rs,entry.t);
    }
 else     if (entry.e != null) {
      alloc=Allocation.createSized(rs,entry.e,entry.size);
    }
    rs.nMeshBindVertex(id,alloc.getID(),ct);
    newMesh.mVertexBuffers[ct]=alloc;
  }
  rs.nMeshInitVertexAttribs(id);
  return newMesh;
}
