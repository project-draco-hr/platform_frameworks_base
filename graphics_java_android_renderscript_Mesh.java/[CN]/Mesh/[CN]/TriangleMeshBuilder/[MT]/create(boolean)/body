{
  Element.Builder b=new Element.Builder(mRS);
  int floatCount=mVtxSize;
  b.add(Element.createVector(mRS,Element.DataType.FLOAT_32,mVtxSize),"position");
  if ((mFlags & COLOR) != 0) {
    floatCount+=4;
    b.add(Element.F32_4(mRS),"color");
  }
  if ((mFlags & TEXTURE_0) != 0) {
    floatCount+=2;
    b.add(Element.F32_2(mRS),"texture0");
  }
  if ((mFlags & NORMAL) != 0) {
    floatCount+=3;
    b.add(Element.F32_3(mRS),"normal");
  }
  mElement=b.create();
  int usage=Allocation.USAGE_SCRIPT;
  if (uploadToBufferObject) {
    usage|=Allocation.USAGE_GRAPHICS_VERTEX;
  }
  Builder smb=new Builder(mRS,usage);
  smb.addVertexType(mElement,mVtxCount / floatCount);
  smb.addIndexSetType(Element.U16(mRS),mIndexCount,Primitive.TRIANGLE);
  Mesh sm=smb.create();
  sm.getVertexAllocation(0).copy1DRangeFromUnchecked(0,mVtxCount / floatCount,mVtxData);
  if (uploadToBufferObject) {
    if (uploadToBufferObject) {
      sm.getVertexAllocation(0).syncAll(Allocation.USAGE_SCRIPT);
    }
  }
  sm.getIndexSetAllocation(0).copy1DRangeFromUnchecked(0,mIndexCount,mIndexData);
  if (uploadToBufferObject) {
    sm.getIndexSetAllocation(0).syncAll(Allocation.USAGE_SCRIPT);
  }
  return sm;
}
