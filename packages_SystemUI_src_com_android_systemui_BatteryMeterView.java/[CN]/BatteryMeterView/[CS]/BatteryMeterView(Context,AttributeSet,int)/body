{
  super(context,attrs,defStyle);
  final Resources res=context.getResources();
  TypedArray levels=res.obtainTypedArray(R.array.batterymeter_color_levels);
  TypedArray colors=res.obtainTypedArray(R.array.batterymeter_color_values);
  final int N=levels.length();
  mColors=new int[2 * N];
  for (int i=0; i < N; i++) {
    mColors[2 * i]=levels.getInt(i,0);
    mColors[2 * i + 1]=colors.getColor(i,0);
  }
  mShowPercent=ENABLE_PERCENT && 0 != Settings.System.getInt(context.getContentResolver(),"status_bar_show_battery_percent",0);
  mWarningString=context.getString(R.string.battery_meter_very_low_overlay_symbol);
  mFramePaint=new Paint(Paint.ANTI_ALIAS_FLAG);
  mFramePaint.setColor(res.getColor(R.color.batterymeter_frame_color));
  mBatteryPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
  mBatteryPaint.setColor(0xFF00FF00);
  mTextPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
  mTextPaint.setColor(0xFFFFFFFF);
  Typeface font=Typeface.create("sans-serif-condensed",Typeface.NORMAL);
  mTextPaint.setTypeface(font);
  mTextPaint.setTextAlign(Paint.Align.CENTER);
  mWarningTextPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
  mWarningTextPaint.setColor(mColors[1]);
  font=Typeface.create("sans-serif",Typeface.BOLD);
  mWarningTextPaint.setTypeface(font);
  mWarningTextPaint.setTextAlign(Paint.Align.CENTER);
  mLightning=getResources().getDrawable(R.drawable.lightning);
}
