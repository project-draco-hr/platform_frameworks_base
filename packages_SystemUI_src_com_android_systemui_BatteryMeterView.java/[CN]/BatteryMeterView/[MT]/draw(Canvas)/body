{
  BatteryTracker tracker=mDemoMode ? mDemoTracker : mTracker;
  final int level=tracker.level;
  float drawFrac=(float)level / 100f;
  final int pt=getPaddingTop();
  final int pl=getPaddingLeft();
  final int pr=getPaddingRight();
  final int pb=getPaddingBottom();
  int height=mHeight - pt - pb;
  int width=mWidth - pl - pr;
  mButtonHeight=(int)(height * 0.12f);
  final RectF frame=new RectF(0,0,width,height);
  frame.offset(pl,pt);
  final RectF buttonframe=new RectF(frame.left + width * 0.25f,frame.top,frame.right - width * 0.25f,frame.top + mButtonHeight);
  frame.top+=mButtonHeight;
  c.drawRect(frame,mFramePaint);
  final int pct=tracker.level;
  final int color=tracker.plugged ? mChargeColor : getColorForLevel(pct);
  mBatteryPaint.setColor(color);
  if (level >= FULL) {
    drawFrac=1f;
  }
 else   if (level <= EMPTY) {
    drawFrac=0f;
  }
  c.drawRect(buttonframe,drawFrac == 1f ? mBatteryPaint : mFramePaint);
  RectF clip=new RectF(frame);
  clip.top+=(frame.height() * (1f - drawFrac));
  c.save(Canvas.CLIP_SAVE_FLAG);
  c.clipRect(clip);
  c.drawRect(frame,mBatteryPaint);
  c.restore();
  if (level <= EMPTY) {
    final float x=mWidth * 0.5f;
    final float y=(mHeight + mWarningTextHeight) * 0.48f;
    c.drawText(mWarningString,x,y,mWarningTextPaint);
  }
 else   if (tracker.plugged) {
    final Rect r=new Rect((int)frame.left + width / 4,(int)frame.top + height / 5,(int)frame.right - width / 4,(int)frame.bottom - height / 6);
    mLightning.setBounds(r);
    mLightning.draw(c);
  }
 else   if (mShowPercent && !(tracker.level == 100 && !SHOW_100_PERCENT)) {
    mTextPaint.setTextSize(height * (SINGLE_DIGIT_PERCENT ? 0.75f : (tracker.level == 100 ? 0.38f : 0.5f)));
    mTextHeight=-mTextPaint.getFontMetrics().ascent;
    final String str=String.valueOf(SINGLE_DIGIT_PERCENT ? (pct / 10) : pct);
    final float x=mWidth * 0.5f;
    final float y=(mHeight + mTextHeight) * 0.47f;
    c.drawText(str,x,y,mTextPaint);
  }
}
