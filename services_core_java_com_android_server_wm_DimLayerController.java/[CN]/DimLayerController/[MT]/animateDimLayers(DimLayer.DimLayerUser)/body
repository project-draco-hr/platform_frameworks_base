{
  DimLayerState state=mState.get(dimLayerUser);
  if (DEBUG_DIM_LAYER)   Slog.v(TAG,"animateDimLayers," + " dimLayerUser=" + dimLayerUser.toShortString() + " state.animator="+ state.animator+ " state.continueDimming="+ state.continueDimming);
  final int dimLayer;
  final float dimAmount;
  if (state.animator == null) {
    dimLayer=state.dimLayer.getLayer();
    dimAmount=0;
  }
 else {
    if (state.dimAbove) {
      dimLayer=state.animator.mAnimLayer + LAYER_OFFSET_DIM;
      dimAmount=DEFAULT_DIM_AMOUNT_DEAD_WINDOW;
    }
 else {
      dimLayer=state.animator.mAnimLayer - LAYER_OFFSET_DIM;
      dimAmount=state.animator.mWin.mAttrs.dimAmount;
    }
  }
  final float targetAlpha=state.dimLayer.getTargetAlpha();
  if (targetAlpha != dimAmount) {
    if (state.animator == null) {
      state.dimLayer.hide(DEFAULT_DIM_DURATION);
    }
 else {
      long duration=(state.animator.mAnimating && state.animator.mAnimation != null) ? state.animator.mAnimation.computeDurationHint() : DEFAULT_DIM_DURATION;
      if (targetAlpha > dimAmount) {
        duration=getDimLayerFadeDuration(duration);
      }
      state.dimLayer.show(dimLayer,dimAmount,duration);
    }
  }
 else   if (state.dimLayer.getLayer() != dimLayer) {
    state.dimLayer.setLayer(dimLayer);
  }
  if (state.dimLayer.isAnimating()) {
    if (!mDisplayContent.mService.okToDisplay()) {
      state.dimLayer.show();
    }
 else {
      return state.dimLayer.stepAnimation();
    }
  }
  return false;
}
