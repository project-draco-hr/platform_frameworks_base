{
  mOverlayLayout=(ActionBarOverlayLayout)decor.findViewById(com.android.internal.R.id.decor_content_parent);
  if (mOverlayLayout != null) {
    mOverlayLayout.setActionBarVisibilityCallback(this);
  }
  mDecorToolbar=getDecorToolbar(decor.findViewById(com.android.internal.R.id.action_bar));
  mContextView=(ActionBarContextView)decor.findViewById(com.android.internal.R.id.action_context_bar);
  mContainerView=(ActionBarContainer)decor.findViewById(com.android.internal.R.id.action_bar_container);
  mSplitView=(ActionBarContainer)decor.findViewById(com.android.internal.R.id.split_action_bar);
  if (mDecorToolbar == null || mContextView == null || mContainerView == null) {
    throw new IllegalStateException(getClass().getSimpleName() + " can only be used " + "with a compatible window decor layout");
  }
  mContext=mDecorToolbar.getContext();
  mContextDisplayMode=mDecorToolbar.isSplit() ? CONTEXT_DISPLAY_SPLIT : CONTEXT_DISPLAY_NORMAL;
  final int current=mDecorToolbar.getDisplayOptions();
  final boolean homeAsUp=(current & DISPLAY_HOME_AS_UP) != 0;
  if (homeAsUp) {
    mDisplayHomeAsUpSet=true;
  }
  ActionBarPolicy abp=ActionBarPolicy.get(mContext);
  setHomeButtonEnabled(abp.enableHomeButtonByDefault() || homeAsUp);
  setHasEmbeddedTabs(abp.hasEmbeddedTabs());
  final TypedArray a=mContext.obtainStyledAttributes(null,com.android.internal.R.styleable.ActionBar,com.android.internal.R.attr.actionBarStyle,0);
  if (a.getBoolean(R.styleable.ActionBar_hideOnContentScroll,false)) {
    setHideOnContentScrollEnabled(true);
  }
  final int elevation=a.getDimensionPixelSize(R.styleable.ActionBar_elevation,0);
  if (elevation != 0) {
    setElevation(elevation);
  }
  a.recycle();
}
