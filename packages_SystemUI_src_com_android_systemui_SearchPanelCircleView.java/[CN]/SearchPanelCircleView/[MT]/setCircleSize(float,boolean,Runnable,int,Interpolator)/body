{
  boolean isAnimating=mCircleAnimator != null;
  boolean animationPending=isAnimating && !mCircleAnimator.isRunning();
  boolean animatingOut=isAnimating && mCircleAnimationEndValue == 0;
  if (animated || animationPending || animatingOut) {
    if (isAnimating) {
      if (circleSize == mCircleAnimationEndValue) {
        return;
      }
      mCircleAnimator.cancel();
    }
    mCircleAnimator=ValueAnimator.ofFloat(mCircleSize,circleSize);
    mCircleAnimator.addUpdateListener(mCircleUpdateListener);
    mCircleAnimator.addListener(mClearAnimatorListener);
    mCircleAnimator.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        if (endRunnable != null) {
          endRunnable.run();
        }
      }
    }
);
    Interpolator desiredInterpolator=interpolator != null ? interpolator : circleSize == 0 ? mDisappearInterpolator : mAppearInterpolator;
    mCircleAnimator.setInterpolator(desiredInterpolator);
    mCircleAnimator.setDuration(300);
    mCircleAnimator.setStartDelay(startDelay);
    mCircleAnimator.start();
    mCircleAnimationEndValue=circleSize;
  }
 else {
    if (isAnimating) {
      float diff=circleSize - mCircleAnimationEndValue;
      PropertyValuesHolder[] values=mCircleAnimator.getValues();
      values[0].setFloatValues(diff,circleSize);
      mCircleAnimator.setCurrentPlayTime(mCircleAnimator.getCurrentPlayTime());
      mCircleAnimationEndValue=circleSize;
    }
 else {
      applyCircleSize(circleSize);
      updateElevation();
    }
  }
}
