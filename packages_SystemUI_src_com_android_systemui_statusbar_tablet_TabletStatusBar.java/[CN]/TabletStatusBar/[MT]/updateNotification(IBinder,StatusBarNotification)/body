{
  if (DEBUG)   Slog.d(TAG,"updateNotification(" + key + " -> "+ notification+ ") // TODO");
  final NotificationData.Entry oldEntry=mNotns.findByKey(key);
  if (oldEntry == null) {
    Slog.w(TAG,"updateNotification for unknown key: " + key);
    return;
  }
  final StatusBarNotification oldNotification=oldEntry.notification;
  final RemoteViews oldContentView=oldNotification.notification.contentView;
  final RemoteViews contentView=notification.notification.contentView;
  if (DEBUG) {
    Slog.d(TAG,"old notification: when=" + oldNotification.notification.when + " ongoing="+ oldNotification.isOngoing()+ " expanded="+ oldEntry.expanded+ " contentView="+ oldContentView);
    Slog.d(TAG,"new notification: when=" + notification.notification.when + " ongoing="+ oldNotification.isOngoing()+ " contentView="+ contentView);
  }
  boolean contentsUnchanged=oldEntry.expanded != null && contentView != null && oldContentView != null && contentView.getPackage() != null && oldContentView.getPackage() != null && oldContentView.getPackage().equals(contentView.getPackage()) && oldContentView.getLayoutId() == contentView.getLayoutId();
  ViewGroup rowParent=(ViewGroup)oldEntry.row.getParent();
  boolean orderUnchanged=notification.notification.when == oldNotification.notification.when && notification.isOngoing() == oldNotification.isOngoing();
  boolean isLastAnyway=rowParent.indexOfChild(oldEntry.row) == rowParent.getChildCount() - 1;
  if (contentsUnchanged && (orderUnchanged || isLastAnyway)) {
    if (DEBUG)     Slog.d(TAG,"reusing notification for key: " + key);
    oldEntry.notification=notification;
    try {
      contentView.reapply(mContext,oldEntry.content);
      final PendingIntent contentIntent=notification.notification.contentIntent;
      if (contentIntent != null) {
        oldEntry.content.setOnClickListener(new NotificationClicker(contentIntent,notification.pkg,notification.tag,notification.id));
      }
 else {
        oldEntry.content.setOnClickListener(null);
      }
      final StatusBarIcon ic=new StatusBarIcon(notification.pkg,notification.notification.icon,notification.notification.iconLevel,notification.notification.number);
      if (!oldEntry.icon.set(ic)) {
        handleNotificationError(key,notification,"Couldn't update icon: " + ic);
        return;
      }
      if (notification.notification.largeIcon != null) {
        oldEntry.largeIcon.setImageBitmap(notification.notification.largeIcon);
      }
 else {
        oldEntry.largeIcon.getLayoutParams().width=0;
        oldEntry.largeIcon.setVisibility(View.INVISIBLE);
      }
      if (key == mNotificationPeekKey) {
        Message peekMsg=mHandler.obtainMessage(MSG_OPEN_NOTIFICATION_PEEK);
        peekMsg.arg1=mNotificationPeekIndex;
        mHandler.removeMessages(MSG_OPEN_NOTIFICATION_PEEK);
        mHandler.sendMessage(peekMsg);
      }
    }
 catch (    RuntimeException e) {
      Slog.w(TAG,"Couldn't reapply views for package " + contentView.getPackage(),e);
      removeNotificationViews(key);
      addNotificationViews(key,notification);
    }
  }
 else {
    if (DEBUG)     Slog.d(TAG,"not reusing notification for key: " + key);
    removeNotificationViews(key);
    addNotificationViews(key,notification);
  }
  final boolean immersive=isImmersive();
  if (false && immersive) {
  }
 else {
    tick(key,notification,false);
  }
  setAreThereNotifications();
}
