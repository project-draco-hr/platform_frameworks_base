{
  if (mIconLayout == null)   return;
  loadNotificationPanel();
  final LinearLayout.LayoutParams params=new LinearLayout.LayoutParams(mIconSize + 2 * mIconHPadding,mNaturalBarHeight);
  if (mNotificationDNDMode) {
    if (mIconLayout.getChildCount() == 0) {
      final Notification dndNotification=new Notification.Builder(mContext).setContentTitle(mContext.getText(R.string.notifications_off_title)).setContentText(mContext.getText(R.string.notifications_off_text)).setSmallIcon(R.drawable.ic_notification_dnd).setOngoing(true).getNotification();
      final StatusBarIconView iconView=new StatusBarIconView(mContext,"_dnd",dndNotification);
      iconView.setImageResource(R.drawable.ic_notification_dnd);
      iconView.setScaleType(ImageView.ScaleType.CENTER_INSIDE);
      iconView.setPadding(mIconHPadding,0,mIconHPadding,0);
      mNotificationDNDDummyEntry=new NotificationData.Entry(null,new StatusBarNotification("",0,"",0,0,Notification.PRIORITY_MAX,dndNotification),iconView);
      mIconLayout.addView(iconView,params);
    }
    return;
  }
 else   if (0 != (mDisabled & StatusBarManager.DISABLE_NOTIFICATION_ICONS)) {
    return;
  }
  int N=mNotificationData.size();
  if (DEBUG) {
    Slog.d(TAG,"refreshing icons: " + N + " notifications, mIconLayout="+ mIconLayout);
  }
  ArrayList<View> toShow=new ArrayList<View>();
  int maxNotificationIconsCount=mMaxNotificationIcons;
  if (mInputMethodSwitchButton.getVisibility() != View.GONE)   maxNotificationIconsCount--;
  if (mCompatModeButton.getVisibility() != View.GONE)   maxNotificationIconsCount--;
  final boolean provisioned=isDeviceProvisioned();
  for (int i=0; toShow.size() < maxNotificationIconsCount; i++) {
    if (i >= N)     break;
    Entry ent=mNotificationData.get(N - i - 1);
    if ((provisioned && ent.notification.score >= HIDE_ICONS_BELOW_SCORE) || showNotificationEvenIfUnprovisioned(ent.notification)) {
      toShow.add(ent.icon);
    }
  }
  ArrayList<View> toRemove=new ArrayList<View>();
  for (int i=0; i < mIconLayout.getChildCount(); i++) {
    View child=mIconLayout.getChildAt(i);
    if (!toShow.contains(child)) {
      toRemove.add(child);
    }
  }
  for (  View remove : toRemove) {
    mIconLayout.removeView(remove);
  }
  for (int i=0; i < toShow.size(); i++) {
    View v=toShow.get(i);
    v.setPadding(mIconHPadding,0,mIconHPadding,0);
    if (v.getParent() == null) {
      mIconLayout.addView(v,i,params);
    }
  }
}
