{
  Class helloClass=Class.forName(ClassTest.class.getName());
  Object instance=helloClass.newInstance();
  assertNotNull(instance);
  try {
    Class.forName("this.class.DoesNotExist");
    fail("unexpected success");
  }
 catch (  ClassNotFoundException ex) {
  }
  try {
    Class.forName("android.core.ClassWithPrivateConstructor").newInstance();
    fail("unexpected success");
  }
 catch (  IllegalAccessException ex) {
  }
  Method method=helloClass.getDeclaredMethod("method",(Class[])null);
  method.invoke(new ClassTest(),(Object[])null);
  method=helloClass.getDeclaredMethod("methodWithArgs",Object.class);
  Object invokeArgs[]=new Object[1];
  invokeArgs[0]="Hello";
  Object ret=method.invoke(new ClassTest(),invokeArgs);
  assertEquals(ret,invokeArgs[0]);
  method=helloClass.getDeclaredMethod("privateMethod",(Class[])null);
  method.invoke(new ClassTest(),(Object[])null);
  Class objectClass=Class.forName("java.lang.Object");
  assertEquals(helloClass.getSuperclass().getSuperclass().getSuperclass(),objectClass);
  assertTrue(objectClass.isAssignableFrom(helloClass));
  assertFalse(helloClass.isAssignableFrom(objectClass));
  Constructor constructor=helloClass.getConstructor((Class[])null);
  assertNotNull(constructor);
  assertTrue(Modifier.isPublic(helloClass.getModifiers()));
  helloClass.getMethod("method",(Class[])null);
  try {
    Class[] argTypes=new Class[1];
    argTypes[0]=helloClass;
    helloClass.getMethod("method",argTypes);
    fail("unexpected success");
  }
 catch (  NoSuchMethodException ex) {
  }
  SimpleClass obj=new SimpleClass();
  Field field=obj.getClass().getDeclaredField("str");
  field.set(obj,null);
}
