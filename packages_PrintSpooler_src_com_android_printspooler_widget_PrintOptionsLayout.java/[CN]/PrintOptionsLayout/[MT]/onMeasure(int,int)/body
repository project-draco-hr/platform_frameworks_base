{
  final int widthMode=MeasureSpec.getMode(widthMeasureSpec);
  final int widthSize=MeasureSpec.getSize(widthMeasureSpec);
  final int columnWidth=(widthSize != 0) ? (widthSize - mPaddingLeft - mPaddingRight) / mColumnCount : 0;
  int width=0;
  int height=0;
  int childState=0;
  final int childCount=getChildCount();
  final int rowCount=childCount / mColumnCount + childCount % mColumnCount;
  for (int row=0; row < rowCount; row++) {
    int rowWidth=0;
    int rowHeight=0;
    for (int col=0; col < mColumnCount; col++) {
      final int childIndex=row * mColumnCount + col;
      if (childIndex >= childCount) {
        break;
      }
      View child=getChildAt(childIndex);
      if (child.getVisibility() == GONE) {
        continue;
      }
      MarginLayoutParams childParams=(MarginLayoutParams)child.getLayoutParams();
      final int childWidthMeasureSpec;
      if (columnWidth > 0) {
        childWidthMeasureSpec=MeasureSpec.makeMeasureSpec(columnWidth - childParams.getMarginStart() - childParams.getMarginEnd(),MeasureSpec.EXACTLY);
      }
 else {
        childWidthMeasureSpec=getChildMeasureSpec(widthMeasureSpec,getPaddingStart() + getPaddingEnd() + width,childParams.width);
      }
      final int childHeightMeasureSpec=getChildMeasureSpec(heightMeasureSpec,getPaddingTop() + getPaddingBottom() + height,childParams.height);
      child.measure(childWidthMeasureSpec,childHeightMeasureSpec);
      childState=combineMeasuredStates(childState,child.getMeasuredState());
      rowWidth+=child.getMeasuredWidth() + childParams.getMarginStart() + childParams.getMarginEnd();
      rowHeight=Math.max(rowHeight,child.getMeasuredHeight() + childParams.topMargin + childParams.bottomMargin);
    }
    width=Math.max(width,rowWidth);
    height+=rowHeight;
  }
  width+=getPaddingStart() + getPaddingEnd();
  width=Math.max(width,getMinimumWidth());
  height+=getPaddingTop() + getPaddingBottom();
  height=Math.max(height,getMinimumHeight());
  setMeasuredDimension(resolveSizeAndState(width,widthMeasureSpec,childState),resolveSizeAndState(height,heightMeasureSpec,childState << MEASURED_HEIGHT_STATE_SHIFT));
}
