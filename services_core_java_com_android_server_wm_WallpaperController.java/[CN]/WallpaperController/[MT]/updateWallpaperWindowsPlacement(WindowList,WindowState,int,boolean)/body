{
  final DisplayInfo displayInfo=mService.getDefaultDisplayContentLocked().getDisplayInfo();
  final int dw=displayInfo.logicalWidth;
  final int dh=displayInfo.logicalHeight;
  boolean changed=false;
  for (int curTokenNdx=mWallpaperTokens.size() - 1; curTokenNdx >= 0; curTokenNdx--) {
    WindowToken token=mWallpaperTokens.get(curTokenNdx);
    if (token.hidden == visible) {
      if (DEBUG_WALLPAPER_LIGHT)       Slog.d(TAG,"Wallpaper token " + token + " hidden="+ !visible);
      token.hidden=!visible;
      mService.getDefaultDisplayContentLocked().layoutNeeded=true;
    }
    final WindowList tokenWindows=token.windows;
    for (int wallpaperNdx=tokenWindows.size() - 1; wallpaperNdx >= 0; wallpaperNdx--) {
      WindowState wallpaper=tokenWindows.get(wallpaperNdx);
      if (visible) {
        updateWallpaperOffset(wallpaper,dw,dh,false);
      }
      dispatchWallpaperVisibility(wallpaper,visible);
      wallpaper.mWinAnimator.mAnimLayer=wallpaper.mLayer + mWallpaperAnimLayerAdjustment;
      if (DEBUG_LAYERS || DEBUG_WALLPAPER_LIGHT)       Slog.v(TAG,"adjustWallpaper win " + wallpaper + " anim layer: "+ wallpaper.mWinAnimator.mAnimLayer);
      if (wallpaper == wallpaperTarget) {
        wallpaperTargetIndex--;
        wallpaperTarget=wallpaperTargetIndex > 0 ? windows.get(wallpaperTargetIndex - 1) : null;
        continue;
      }
      int oldIndex=windows.indexOf(wallpaper);
      if (oldIndex >= 0) {
        if (DEBUG_WINDOW_MOVEMENT)         Slog.v(TAG,"Wallpaper removing at " + oldIndex + ": "+ wallpaper);
        windows.remove(oldIndex);
        mService.mWindowsChanged=true;
        if (oldIndex < wallpaperTargetIndex) {
          wallpaperTargetIndex--;
        }
      }
      int insertionIndex=0;
      if (visible && wallpaperTarget != null) {
        final int type=wallpaperTarget.mAttrs.type;
        final int privateFlags=wallpaperTarget.mAttrs.privateFlags;
        if ((privateFlags & PRIVATE_FLAG_KEYGUARD) != 0 || type == TYPE_KEYGUARD_SCRIM) {
          insertionIndex=windows.indexOf(wallpaperTarget);
        }
      }
      if (DEBUG_WALLPAPER_LIGHT || DEBUG_WINDOW_MOVEMENT || (DEBUG_ADD_REMOVE && oldIndex != insertionIndex))       Slog.v(TAG,"Moving wallpaper " + wallpaper + " from "+ oldIndex+ " to "+ insertionIndex);
      windows.add(insertionIndex,wallpaper);
      mService.mWindowsChanged=true;
      changed=true;
    }
  }
  return changed;
}
