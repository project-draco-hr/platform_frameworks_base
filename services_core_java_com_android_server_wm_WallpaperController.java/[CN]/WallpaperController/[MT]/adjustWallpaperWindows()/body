{
  mService.mInnerFields.mWallpaperMayChange=false;
  boolean targetChanged=false;
  final DisplayInfo displayInfo=mService.getDefaultDisplayContentLocked().getDisplayInfo();
  final int dw=displayInfo.logicalWidth;
  final int dh=displayInfo.logicalHeight;
  final WindowAnimator winAnimator=mService.mAnimator;
  final WindowList windows=mService.getDefaultWindowListLocked();
  int N=windows.size();
  WindowState w=null;
  WindowState foundW=null;
  int foundI=0;
  WindowState topCurW=null;
  int topCurI=0;
  int windowDetachedI=-1;
  int i=N;
  while (i > 0) {
    i--;
    w=windows.get(i);
    if ((w.mAttrs.type == TYPE_WALLPAPER)) {
      if (topCurW == null) {
        topCurW=w;
        topCurI=i;
      }
      continue;
    }
    topCurW=null;
    if (w != winAnimator.mWindowDetachedWallpaper && w.mAppToken != null) {
      if (w.mAppToken.hidden && w.mAppToken.mAppAnimator.animation == null) {
        if (DEBUG_WALLPAPER)         Slog.v(TAG,"Skipping hidden and not animating token: " + w);
        continue;
      }
    }
    if (DEBUG_WALLPAPER)     Slog.v(TAG,"Win #" + i + " "+ w+ ": isOnScreen="+ w.isOnScreen()+ " mDrawState="+ w.mWinAnimator.mDrawState);
    final boolean hasWallpaper=(w.mAttrs.flags & FLAG_SHOW_WALLPAPER) != 0 || (w.mAppToken != null && w.mWinAnimator.mKeyguardGoingAwayAnimation);
    if (hasWallpaper && w.isOnScreen() && (mWallpaperTarget == w || w.isDrawFinishedLw())) {
      if (DEBUG_WALLPAPER)       Slog.v(TAG,"Found wallpaper target: #" + i + "="+ w);
      foundW=w;
      foundI=i;
      if (w == mWallpaperTarget && w.mWinAnimator.isAnimating()) {
        if (DEBUG_WALLPAPER)         Slog.v(TAG,"Win " + w + ": token animating, looking behind.");
        continue;
      }
      break;
    }
 else     if (w == winAnimator.mWindowDetachedWallpaper) {
      windowDetachedI=i;
    }
  }
  if (foundW == null && windowDetachedI >= 0) {
    if (DEBUG_WALLPAPER_LIGHT)     Slog.v(TAG,"Found animating detached wallpaper activity: #" + i + "="+ w);
    foundW=w;
    foundI=windowDetachedI;
  }
  if (mWallpaperTarget != foundW && (mLowerWallpaperTarget == null || mLowerWallpaperTarget != foundW)) {
    if (DEBUG_WALLPAPER_LIGHT) {
      Slog.v(TAG,"New wallpaper target: " + foundW + " oldTarget: "+ mWallpaperTarget);
    }
    mLowerWallpaperTarget=null;
    mUpperWallpaperTarget=null;
    WindowState oldW=mWallpaperTarget;
    mWallpaperTarget=foundW;
    targetChanged=true;
    if (foundW != null && oldW != null) {
      boolean oldAnim=oldW.isAnimatingLw();
      boolean foundAnim=foundW.isAnimatingLw();
      if (DEBUG_WALLPAPER_LIGHT) {
        Slog.v(TAG,"New animation: " + foundAnim + " old animation: "+ oldAnim);
      }
      if (foundAnim && oldAnim) {
        int oldI=windows.indexOf(oldW);
        if (DEBUG_WALLPAPER_LIGHT) {
          Slog.v(TAG,"New i: " + foundI + " old i: "+ oldI);
        }
        if (oldI >= 0) {
          if (DEBUG_WALLPAPER_LIGHT) {
            Slog.v(TAG,"Animating wallpapers: old#" + oldI + "="+ oldW+ "; new#"+ foundI+ "="+ foundW);
          }
          if (foundW.mAppToken != null && foundW.mAppToken.hiddenRequested) {
            if (DEBUG_WALLPAPER_LIGHT) {
              Slog.v(TAG,"Old wallpaper still the target.");
            }
            mWallpaperTarget=oldW;
            foundW=oldW;
            foundI=oldI;
          }
 else           if (foundI > oldI) {
            if (DEBUG_WALLPAPER_LIGHT) {
              Slog.v(TAG,"Found target above old target.");
            }
            mUpperWallpaperTarget=foundW;
            mLowerWallpaperTarget=oldW;
            foundW=oldW;
            foundI=oldI;
          }
 else {
            if (DEBUG_WALLPAPER_LIGHT) {
              Slog.v(TAG,"Found target below old target.");
            }
            mUpperWallpaperTarget=oldW;
            mLowerWallpaperTarget=foundW;
          }
        }
      }
    }
  }
 else   if (mLowerWallpaperTarget != null) {
    if (!mLowerWallpaperTarget.isAnimatingLw() || !mUpperWallpaperTarget.isAnimatingLw()) {
      if (DEBUG_WALLPAPER_LIGHT) {
        Slog.v(TAG,"No longer animating wallpaper targets!");
      }
      mLowerWallpaperTarget=null;
      mUpperWallpaperTarget=null;
      mWallpaperTarget=foundW;
      targetChanged=true;
    }
  }
  boolean visible=foundW != null;
  if (visible) {
    visible=isWallpaperVisible(foundW);
    if (DEBUG_WALLPAPER)     Slog.v(TAG,"Wallpaper visibility: " + visible);
    mWallpaperAnimLayerAdjustment=(mLowerWallpaperTarget == null && foundW.mAppToken != null) ? foundW.mAppToken.mAppAnimator.animLayerAdjustment : 0;
    final int maxLayer=(mService.mPolicy.getMaxWallpaperLayer() * TYPE_LAYER_MULTIPLIER) + TYPE_LAYER_OFFSET;
    while (foundI > 0) {
      WindowState wb=windows.get(foundI - 1);
      if (wb.mBaseLayer < maxLayer && wb.mAttachedWindow != foundW && (foundW.mAttachedWindow == null || wb.mAttachedWindow != foundW.mAttachedWindow) && (wb.mAttrs.type != TYPE_APPLICATION_STARTING || foundW.mToken == null || wb.mToken != foundW.mToken)) {
        break;
      }
      foundW=wb;
      foundI--;
    }
  }
 else {
    if (DEBUG_WALLPAPER)     Slog.v(TAG,"No wallpaper target");
  }
  if (foundW == null && topCurW != null) {
    foundW=topCurW;
    foundI=topCurI + 1;
  }
 else {
    foundW=foundI > 0 ? windows.get(foundI - 1) : null;
  }
  if (visible) {
    if (mWallpaperTarget.mWallpaperX >= 0) {
      mLastWallpaperX=mWallpaperTarget.mWallpaperX;
      mLastWallpaperXStep=mWallpaperTarget.mWallpaperXStep;
    }
    if (mWallpaperTarget.mWallpaperY >= 0) {
      mLastWallpaperY=mWallpaperTarget.mWallpaperY;
      mLastWallpaperYStep=mWallpaperTarget.mWallpaperYStep;
    }
    if (mWallpaperTarget.mWallpaperDisplayOffsetX != Integer.MIN_VALUE) {
      mLastWallpaperDisplayOffsetX=mWallpaperTarget.mWallpaperDisplayOffsetX;
    }
    if (mWallpaperTarget.mWallpaperDisplayOffsetY != Integer.MIN_VALUE) {
      mLastWallpaperDisplayOffsetY=mWallpaperTarget.mWallpaperDisplayOffsetY;
    }
  }
  boolean changed=false;
  for (int curTokenNdx=mWallpaperTokens.size() - 1; curTokenNdx >= 0; curTokenNdx--) {
    WindowToken token=mWallpaperTokens.get(curTokenNdx);
    if (token.hidden == visible) {
      if (DEBUG_WALLPAPER_LIGHT)       Slog.d(TAG,"Wallpaper token " + token + " hidden="+ !visible);
      token.hidden=!visible;
      mService.getDefaultDisplayContentLocked().layoutNeeded=true;
    }
    final WindowList tokenWindows=token.windows;
    for (int wallpaperNdx=tokenWindows.size() - 1; wallpaperNdx >= 0; wallpaperNdx--) {
      WindowState wallpaper=tokenWindows.get(wallpaperNdx);
      if (visible) {
        updateWallpaperOffset(wallpaper,dw,dh,false);
      }
      dispatchWallpaperVisibility(wallpaper,visible);
      wallpaper.mWinAnimator.mAnimLayer=wallpaper.mLayer + mWallpaperAnimLayerAdjustment;
      if (DEBUG_LAYERS || DEBUG_WALLPAPER_LIGHT)       Slog.v(TAG,"adjustWallpaper win " + wallpaper + " anim layer: "+ wallpaper.mWinAnimator.mAnimLayer);
      if (wallpaper == foundW) {
        foundI--;
        foundW=foundI > 0 ? windows.get(foundI - 1) : null;
        continue;
      }
      int oldIndex=windows.indexOf(wallpaper);
      if (oldIndex >= 0) {
        if (DEBUG_WINDOW_MOVEMENT)         Slog.v(TAG,"Wallpaper removing at " + oldIndex + ": "+ wallpaper);
        windows.remove(oldIndex);
        mService.mWindowsChanged=true;
        if (oldIndex < foundI) {
          foundI--;
        }
      }
      int insertionIndex=0;
      if (visible && foundW != null) {
        final int type=foundW.mAttrs.type;
        final int privateFlags=foundW.mAttrs.privateFlags;
        if ((privateFlags & PRIVATE_FLAG_KEYGUARD) != 0 || type == TYPE_KEYGUARD_SCRIM) {
          insertionIndex=windows.indexOf(foundW);
        }
      }
      if (DEBUG_WALLPAPER_LIGHT || DEBUG_WINDOW_MOVEMENT || DEBUG_ADD_REMOVE) {
        Slog.v(TAG,"Moving wallpaper " + wallpaper + " from "+ oldIndex+ " to "+ insertionIndex);
      }
      windows.add(insertionIndex,wallpaper);
      mService.mWindowsChanged=true;
      changed=true;
    }
  }
  if (targetChanged && DEBUG_WALLPAPER_LIGHT)   Slog.d(TAG,"New wallpaper: target=" + mWallpaperTarget + " lower="+ mLowerWallpaperTarget+ " upper="+ mUpperWallpaperTarget);
  return changed;
}
