{
  menu.addMenuPresenter(this,mContext);
  final LayoutInflater inflater=LayoutInflater.from(mContext);
  final MenuAdapter adapter=new MenuAdapter(menu,inflater,mOverflowOnly);
  adapter.setForceShowIcon(mForceShowIcon);
  final int menuWidth=measureIndividualMenuWidth(adapter,null,mContext,mMenuMaxWidth);
  final MenuPopupWindow popupWindow=createPopupWindow();
  popupWindow.setAdapter(adapter);
  popupWindow.setWidth(menuWidth);
  popupWindow.setDropDownGravity(mDropDownGravity);
  final CascadingMenuInfo parentInfo;
  final View parentView;
  if (mAddedMenus.size() > 0) {
    parentInfo=mAddedMenus.get(mAddedMenus.size() - 1);
    parentView=findParentViewForSubmenu(parentInfo,menu);
  }
 else {
    parentInfo=null;
    parentView=null;
  }
  final int x;
  final int y;
  if (parentView != null) {
    popupWindow.setTouchModal(false);
    popupWindow.setEnterTransition(null);
    final @HorizPosition int nextMenuPosition=getNextMenuPosition(menuWidth);
    final boolean showOnRight=nextMenuPosition == HORIZ_POSITION_RIGHT;
    mLastPosition=nextMenuPosition;
    final int[] tempLocation=new int[2];
    parentView.getLocationInWindow(tempLocation);
    final int parentOffsetLeft=parentInfo.window.getHorizontalOffset() + tempLocation[0];
    final int parentOffsetTop=parentInfo.window.getVerticalOffset() + tempLocation[1];
    if ((mDropDownGravity & Gravity.RIGHT) == Gravity.RIGHT) {
      if (showOnRight) {
        x=parentOffsetLeft + menuWidth;
      }
 else {
        x=parentOffsetLeft - parentView.getWidth();
      }
    }
 else {
      if (showOnRight) {
        x=parentOffsetLeft + parentView.getWidth();
      }
 else {
        x=parentOffsetLeft - menuWidth;
      }
    }
    y=parentOffsetTop;
  }
 else {
    x=mInitXOffset;
    y=mInitYOffset;
  }
  popupWindow.setHorizontalOffset(x);
  popupWindow.setVerticalOffset(y);
  final CascadingMenuInfo menuInfo=new CascadingMenuInfo(popupWindow,menu,mLastPosition);
  mAddedMenus.add(menuInfo);
  if (isShowing()) {
    popupWindow.show();
  }
}
