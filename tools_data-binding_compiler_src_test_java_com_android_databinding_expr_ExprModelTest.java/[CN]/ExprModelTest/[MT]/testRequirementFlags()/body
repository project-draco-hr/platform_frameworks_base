{
  LayoutBinder lb=new LayoutBinder(null);
  mExprModel=lb.getModel();
  IdentifierExpr a=lb.addVariable("a","java.lang.String");
  IdentifierExpr b=lb.addVariable("b","java.lang.String");
  IdentifierExpr c=lb.addVariable("c","java.lang.String");
  IdentifierExpr d=lb.addVariable("d","java.lang.String");
  IdentifierExpr e=lb.addVariable("e","java.lang.String");
  final Expr aTernary=lb.parse("a == null ? b == null ? c : d : e");
  assertTrue(aTernary instanceof TernaryExpr);
  final Expr bTernary=((TernaryExpr)aTernary).getIfTrue();
  assertTrue(bTernary instanceof TernaryExpr);
  final Expr aIsNull=mExprModel.comparison("==",a,mExprModel.symbol("null",Object.class));
  final Expr bIsNull=mExprModel.comparison("==",b,mExprModel.symbol("null",Object.class));
  lb.getModel().seal();
  Iterable<Expr> shouldRead=getShouldRead();
  assertEquals(2,Iterables.size(shouldRead));
  assertFalse(a.getShouldReadFlags().isEmpty());
  assertTrue(a.getShouldReadFlags().get(a.getId()));
  assertTrue(b.getShouldReadFlags().isEmpty());
  assertTrue(c.getShouldReadFlags().isEmpty());
  assertTrue(d.getShouldReadFlags().isEmpty());
  assertTrue(e.getShouldReadFlags().isEmpty());
  Iterable<Expr> readFirst=getReadFirst(shouldRead,null);
  assertEquals(1,Iterables.size(readFirst));
  final Expr first=Iterables.getFirst(readFirst,null);
  assertSame(a,first);
  assertTrue(mExprModel.markBitsRead());
  for (  Expr expr : mExprModel.getPendingExpressions()) {
    assertNull(expr.mShouldReadFlags);
  }
  shouldRead=getShouldRead();
  assertExactMatch(shouldRead,e,b,bIsNull);
  assertFlags(e,aTernary.getRequirementFlagIndex(false));
  assertFlags(b,aTernary.getRequirementFlagIndex(true));
  assertFlags(bIsNull,aTernary.getRequirementFlagIndex(true));
  assertTrue(mExprModel.markBitsRead());
  shouldRead=getShouldRead();
  assertEquals(4,Iterables.size(shouldRead));
  assertTrue(Iterables.contains(shouldRead,c));
  assertTrue(Iterables.contains(shouldRead,d));
  assertTrue(Iterables.contains(shouldRead,aTernary));
  assertTrue(Iterables.contains(shouldRead,bTernary));
  assertTrue(c.getShouldReadFlags().get(bTernary.getRequirementFlagIndex(true)));
  assertEquals(1,c.getShouldReadFlags().cardinality());
  assertTrue(d.getShouldReadFlags().get(bTernary.getRequirementFlagIndex(false)));
  assertEquals(1,d.getShouldReadFlags().cardinality());
  assertTrue(bTernary.getShouldReadFlags().get(aTernary.getRequirementFlagIndex(true)));
  assertEquals(1,bTernary.getShouldReadFlags().cardinality());
  assertEquals(5,aTernary.getShouldReadFlags().cardinality());
  for (  Expr expr : new Expr[]{a,b,c,d,e}) {
    assertTrue(aTernary.getShouldReadFlags().get(expr.getId()));
  }
  readFirst=getReadFirst(shouldRead);
  assertEquals(2,Iterables.size(readFirst));
  assertTrue(Iterables.contains(readFirst,c));
  assertTrue(Iterables.contains(readFirst,d));
  assertFalse(mExprModel.markBitsRead());
}
