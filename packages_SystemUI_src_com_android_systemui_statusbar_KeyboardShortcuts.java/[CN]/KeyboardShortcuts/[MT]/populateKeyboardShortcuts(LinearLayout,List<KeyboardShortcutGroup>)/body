{
  LayoutInflater inflater=LayoutInflater.from(mContext);
  final int keyboardShortcutGroupsSize=keyboardShortcutGroups.size();
  for (int i=0; i < keyboardShortcutGroupsSize; i++) {
    KeyboardShortcutGroup group=keyboardShortcutGroups.get(i);
    TextView categoryTitle=(TextView)inflater.inflate(R.layout.keyboard_shortcuts_category_title,keyboardShortcutsLayout,false);
    categoryTitle.setText(group.getLabel());
    categoryTitle.setTextColor(group.isSystemGroup() ? mContext.getColor(R.color.ksh_system_group_color) : mContext.getColor(R.color.ksh_application_group_color));
    keyboardShortcutsLayout.addView(categoryTitle);
    LinearLayout shortcutContainer=(LinearLayout)inflater.inflate(R.layout.keyboard_shortcuts_container,keyboardShortcutsLayout,false);
    final int itemsSize=group.getItems().size();
    for (int j=0; j < itemsSize; j++) {
      KeyboardShortcutInfo info=group.getItems().get(j);
      View shortcutView=inflater.inflate(R.layout.keyboard_shortcut_app_item,shortcutContainer,false);
      TextView textView=(TextView)shortcutView.findViewById(R.id.keyboard_shortcuts_keyword);
      textView.setText(info.getLabel());
      LinearLayout shortcutItemsContainer=(LinearLayout)shortcutView.findViewById(R.id.keyboard_shortcuts_item_container);
      List<String> shortcutKeys=getHumanReadableShortcutKeys(info);
      final int shortcutKeysSize=shortcutKeys.size();
      for (int k=0; k < shortcutKeysSize; k++) {
        String shortcutKey=shortcutKeys.get(k);
        TextView shortcutKeyView=(TextView)inflater.inflate(R.layout.keyboard_shortcuts_key_view,shortcutItemsContainer,false);
        shortcutKeyView.setText(shortcutKey);
        shortcutItemsContainer.addView(shortcutKeyView);
      }
      shortcutContainer.addView(shortcutView);
    }
    keyboardShortcutsLayout.addView(shortcutContainer);
    if (i < keyboardShortcutGroupsSize - 1) {
      View separator=inflater.inflate(R.layout.keyboard_shortcuts_category_separator,keyboardShortcutsLayout,false);
      keyboardShortcutsLayout.addView(separator);
    }
  }
}
