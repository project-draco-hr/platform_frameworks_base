{
  LayoutInflater inflater=LayoutInflater.from(mContext);
  final int keyboardShortcutGroupsSize=keyboardShortcutGroups.size();
  final int shortcutTextItemHeight=getShortcutTextItemHeight(inflater);
  for (int i=0; i < keyboardShortcutGroupsSize; i++) {
    KeyboardShortcutGroup group=keyboardShortcutGroups.get(i);
    TextView categoryTitle=(TextView)inflater.inflate(R.layout.keyboard_shortcuts_category_title,keyboardShortcutsLayout,false);
    categoryTitle.setText(group.getLabel());
    categoryTitle.setTextColor(group.isSystemGroup() ? mContext.getColor(R.color.ksh_system_group_color) : mContext.getColor(R.color.ksh_application_group_color));
    keyboardShortcutsLayout.addView(categoryTitle);
    LinearLayout shortcutContainer=(LinearLayout)inflater.inflate(R.layout.keyboard_shortcuts_container,keyboardShortcutsLayout,false);
    final int itemsSize=group.getItems().size();
    for (int j=0; j < itemsSize; j++) {
      KeyboardShortcutInfo info=group.getItems().get(j);
      if (info.getKeycode() != KeyEvent.KEYCODE_UNKNOWN && !KeyCharacterMap.deviceHasKey(info.getKeycode())) {
        Log.w(TAG,"Keyboard Shortcut contains key not on device, skipping.");
        continue;
      }
      List<StringOrDrawable> shortcutKeys=getHumanReadableShortcutKeys(info);
      if (shortcutKeys == null) {
        Log.w(TAG,"Keyboard Shortcut contains unsupported keys, skipping.");
        continue;
      }
      View shortcutView=inflater.inflate(R.layout.keyboard_shortcut_app_item,shortcutContainer,false);
      if (info.getIcon() != null) {
        ImageView shortcutIcon=(ImageView)shortcutView.findViewById(R.id.keyboard_shortcuts_icon);
        shortcutIcon.setImageIcon(info.getIcon());
        shortcutIcon.setVisibility(View.VISIBLE);
      }
      TextView shortcutKeyword=(TextView)shortcutView.findViewById(R.id.keyboard_shortcuts_keyword);
      shortcutKeyword.setText(info.getLabel());
      if (info.getIcon() != null) {
        RelativeLayout.LayoutParams lp=(RelativeLayout.LayoutParams)shortcutKeyword.getLayoutParams();
        lp.removeRule(RelativeLayout.ALIGN_PARENT_START);
        shortcutKeyword.setLayoutParams(lp);
      }
      ViewGroup shortcutItemsContainer=(ViewGroup)shortcutView.findViewById(R.id.keyboard_shortcuts_item_container);
      final int shortcutKeysSize=shortcutKeys.size();
      for (int k=0; k < shortcutKeysSize; k++) {
        StringOrDrawable shortcutRepresentation=shortcutKeys.get(k);
        if (shortcutRepresentation.drawable != null) {
          ImageView shortcutKeyIconView=(ImageView)inflater.inflate(R.layout.keyboard_shortcuts_key_icon_view,shortcutItemsContainer,false);
          Bitmap bitmap=Bitmap.createBitmap(shortcutTextItemHeight,shortcutTextItemHeight,Bitmap.Config.ARGB_8888);
          Canvas canvas=new Canvas(bitmap);
          shortcutRepresentation.drawable.setBounds(0,0,canvas.getWidth(),canvas.getHeight());
          shortcutRepresentation.drawable.draw(canvas);
          shortcutKeyIconView.setImageBitmap(bitmap);
          shortcutItemsContainer.addView(shortcutKeyIconView);
        }
 else         if (shortcutRepresentation.string != null) {
          TextView shortcutKeyTextView=(TextView)inflater.inflate(R.layout.keyboard_shortcuts_key_view,shortcutItemsContainer,false);
          shortcutKeyTextView.setText(shortcutRepresentation.string);
          shortcutItemsContainer.addView(shortcutKeyTextView);
        }
      }
      shortcutContainer.addView(shortcutView);
    }
    keyboardShortcutsLayout.addView(shortcutContainer);
    if (i < keyboardShortcutGroupsSize - 1) {
      View separator=inflater.inflate(R.layout.keyboard_shortcuts_category_separator,keyboardShortcutsLayout,false);
      keyboardShortcutsLayout.addView(separator);
    }
  }
}
