{
  if (DBG) {
    log("Poll ServiceState done: " + " oldSS=[" + ss + "] newSS=["+ newSS+ "] oldGprs="+ gprsState+ " newData="+ newGPRSState+ " oldMaxDataCalls="+ mMaxDataCalls+ " mNewMaxDataCalls="+ mNewMaxDataCalls+ " oldReasonDataDenied="+ mReasonDataDenied+ " mNewReasonDataDenied="+ mNewReasonDataDenied+ " oldType="+ ServiceState.rilRadioTechnologyToString(mRilRadioTechnology)+ " newType="+ ServiceState.rilRadioTechnologyToString(mNewRilRadioTechnology));
  }
  boolean hasRegistered=ss.getState() != ServiceState.STATE_IN_SERVICE && newSS.getState() == ServiceState.STATE_IN_SERVICE;
  boolean hasDeregistered=ss.getState() == ServiceState.STATE_IN_SERVICE && newSS.getState() != ServiceState.STATE_IN_SERVICE;
  boolean hasGprsAttached=gprsState != ServiceState.STATE_IN_SERVICE && newGPRSState == ServiceState.STATE_IN_SERVICE;
  boolean hasGprsDetached=gprsState == ServiceState.STATE_IN_SERVICE && newGPRSState != ServiceState.STATE_IN_SERVICE;
  boolean hasRadioTechnologyChanged=mRilRadioTechnology != mNewRilRadioTechnology;
  boolean hasChanged=!newSS.equals(ss);
  boolean hasRoamingOn=!ss.getRoaming() && newSS.getRoaming();
  boolean hasRoamingOff=ss.getRoaming() && !newSS.getRoaming();
  boolean hasLocationChanged=!newCellLoc.equals(cellLoc);
  if (ss.getState() != newSS.getState() || gprsState != newGPRSState) {
    EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE,ss.getState(),gprsState,newSS.getState(),newGPRSState);
  }
  ServiceState tss;
  tss=ss;
  ss=newSS;
  newSS=tss;
  newSS.setStateOutOfService();
  GsmCellLocation tcl=cellLoc;
  cellLoc=newCellLoc;
  newCellLoc=tcl;
  if (hasRadioTechnologyChanged) {
    int cid=-1;
    GsmCellLocation loc=((GsmCellLocation)phone.getCellLocation());
    if (loc != null)     cid=loc.getCid();
    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED,cid,mRilRadioTechnology,mNewRilRadioTechnology);
    if (DBG) {
      log("RAT switched " + ServiceState.rilRadioTechnologyToString(mRilRadioTechnology) + " -> "+ ServiceState.rilRadioTechnologyToString(mNewRilRadioTechnology)+ " at cell "+ cid);
    }
  }
  gprsState=newGPRSState;
  mReasonDataDenied=mNewReasonDataDenied;
  mMaxDataCalls=mNewMaxDataCalls;
  mRilRadioTechnology=mNewRilRadioTechnology;
  mNewRilRadioTechnology=0;
  newSS.setStateOutOfService();
  if (hasRadioTechnologyChanged) {
    phone.setSystemProperty(TelephonyProperties.PROPERTY_DATA_NETWORK_TYPE,ServiceState.rilRadioTechnologyToString(mRilRadioTechnology));
  }
  if (hasRegistered) {
    mNetworkAttachedRegistrants.notifyRegistrants();
    if (DBG) {
      log("pollStateDone: registering current mNitzUpdatedTime=" + mNitzUpdatedTime + " changing to false");
    }
    mNitzUpdatedTime=false;
  }
  if (hasChanged) {
    String operatorNumeric;
    updateSpnDisplay();
    phone.setSystemProperty(TelephonyProperties.PROPERTY_OPERATOR_ALPHA,ss.getOperatorAlphaLong());
    operatorNumeric=ss.getOperatorNumeric();
    phone.setSystemProperty(TelephonyProperties.PROPERTY_OPERATOR_NUMERIC,operatorNumeric);
    if (operatorNumeric == null) {
      if (DBG) {
        log("pollStateDone: operatorNumeric is null:" + " clear PROPERTY_OPERATOR_ISO_COUNTRY");
      }
      phone.setSystemProperty(TelephonyProperties.PROPERTY_OPERATOR_ISO_COUNTRY,"");
      mGotCountryCode=false;
      mNitzUpdatedTime=false;
    }
 else {
      String iso="";
      String mcc=operatorNumeric.substring(0,3);
      try {
        iso=MccTable.countryCodeForMcc(Integer.parseInt(mcc));
      }
 catch (      NumberFormatException ex) {
        loge("pollStateDone: countryCodeForMcc error" + ex);
      }
catch (      StringIndexOutOfBoundsException ex) {
        loge("pollStateDone: countryCodeForMcc error" + ex);
      }
      if (DBG) {
        log("pollStateDone: operatorNumeric=" + operatorNumeric + " mcc="+ mcc+ " iso="+ iso);
      }
      phone.setSystemProperty(TelephonyProperties.PROPERTY_OPERATOR_ISO_COUNTRY,iso);
      mGotCountryCode=true;
      TimeZone zone=null;
      if (!mNitzUpdatedTime && !mcc.equals("000") && !TextUtils.isEmpty(iso)&& getAutoTimeZone()) {
        boolean testOneUniqueOffsetPath=SystemProperties.getBoolean(TelephonyProperties.PROPERTY_IGNORE_NITZ,false) && ((SystemClock.uptimeMillis() & 1) == 0);
        ArrayList<TimeZone> uniqueZones=TimeUtils.getTimeZonesWithUniqueOffsets(iso);
        if ((uniqueZones.size() == 1) || testOneUniqueOffsetPath) {
          zone=uniqueZones.get(0);
          if (DBG) {
            log("pollStateDone: no nitz but one TZ for iso=" + iso + " with zone.getID="+ zone.getID()+ " testOneUniqueOffsetPath="+ testOneUniqueOffsetPath);
          }
          setAndBroadcastNetworkSetTimeZone(zone.getID());
        }
 else {
          if (DBG) {
            log("pollStateDone: there are " + uniqueZones.size() + " unique offsets for iso='"+ iso+ " testOneUniqueOffsetPath="+ testOneUniqueOffsetPath+ "', do nothing");
          }
        }
      }
      if (mNeedFixZone) {
        String zoneName=SystemProperties.get(TIMEZONE_PROPERTY);
        if (DBG) {
          log("pollStateDone: mNeedFixZone==true zoneName='" + zoneName + "' mZoneOffset="+ mZoneOffset+ " mZoneDst="+ mZoneDst+ " iso='"+ iso+ "' iso-cc-idx="+ Arrays.binarySearch(GMT_COUNTRY_CODES,iso));
        }
        if ((mZoneOffset == 0) && (mZoneDst == false) && (zoneName != null)&& (zoneName.length() > 0)&& (Arrays.binarySearch(GMT_COUNTRY_CODES,iso) < 0)) {
          zone=TimeZone.getDefault();
          long tzOffset;
          tzOffset=zone.getOffset(System.currentTimeMillis());
          if (getAutoTime()) {
            setAndBroadcastNetworkSetTime(System.currentTimeMillis() - tzOffset);
          }
 else {
            mSavedTime=mSavedTime - tzOffset;
          }
          if (DBG)           log("pollStateDone: using default TimeZone");
        }
 else         if (iso.equals("")) {
          zone=getNitzTimeZone(mZoneOffset,mZoneDst,mZoneTime);
          if (DBG)           log("pollStateDone: using NITZ TimeZone");
        }
 else {
          zone=TimeUtils.getTimeZone(mZoneOffset,mZoneDst,mZoneTime,iso);
          if (DBG)           log("pollStateDone: using getTimeZone(off, dst, time, iso)");
        }
        mNeedFixZone=false;
        if (zone != null) {
          log("pollStateDone: zone != null zone.getID=" + zone.getID());
          if (getAutoTimeZone()) {
            setAndBroadcastNetworkSetTimeZone(zone.getID());
          }
          saveNitzTimeZone(zone.getID());
        }
 else {
          log("pollStateDone: zone == null");
        }
      }
 else {
        if (DBG) {
          String zoneName=SystemProperties.get(TIMEZONE_PROPERTY);
          zone=TimeZone.getDefault();
          log("pollStateDone: mNeedFixZone==false zoneName='" + zoneName + "' mZoneOffset="+ mZoneOffset+ " mZoneDst="+ mZoneDst+ " iso='"+ iso+ "' iso-cc-idx="+ Arrays.binarySearch(GMT_COUNTRY_CODES,iso));
        }
      }
    }
    phone.setSystemProperty(TelephonyProperties.PROPERTY_OPERATOR_ISROAMING,ss.getRoaming() ? "true" : "false");
    phone.notifyServiceStateChanged(ss);
  }
  if (hasGprsAttached) {
    mAttachedRegistrants.notifyRegistrants();
  }
  if (hasGprsDetached) {
    mDetachedRegistrants.notifyRegistrants();
  }
  if (hasRadioTechnologyChanged) {
    phone.notifyDataConnection(Phone.REASON_NW_TYPE_CHANGED);
  }
  if (hasRoamingOn) {
    mRoamingOnRegistrants.notifyRegistrants();
  }
  if (hasRoamingOff) {
    mRoamingOffRegistrants.notifyRegistrants();
  }
  if (hasLocationChanged) {
    phone.notifyLocationChanged();
  }
  if (!isGprsConsistent(gprsState,ss.getState())) {
    if (!mStartedGprsRegCheck && !mReportedGprsNoReg) {
      mStartedGprsRegCheck=true;
      int check_period=Settings.Secure.getInt(phone.getContext().getContentResolver(),Settings.Secure.GPRS_REGISTER_CHECK_PERIOD_MS,DEFAULT_GPRS_CHECK_PERIOD_MILLIS);
      sendMessageDelayed(obtainMessage(EVENT_CHECK_REPORT_GPRS),check_period);
    }
  }
 else {
    mReportedGprsNoReg=false;
  }
}
