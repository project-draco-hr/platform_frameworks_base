{
  int ints[];
  String states[];
  if (ar.userObj != pollingContext)   return;
  if (ar.exception != null) {
    CommandException.Error err=null;
    if (ar.exception instanceof CommandException) {
      err=((CommandException)(ar.exception)).getCommandError();
    }
    if (err == CommandException.Error.RADIO_NOT_AVAILABLE) {
      cancelPollState();
      return;
    }
    if (!cm.getRadioState().isOn()) {
      cancelPollState();
      return;
    }
    if (err != CommandException.Error.OP_NOT_ALLOWED_BEFORE_REG_NW) {
      loge("RIL implementation has returned an error where it must succeed" + ar.exception);
    }
  }
 else   try {
switch (what) {
case EVENT_POLL_STATE_REGISTRATION:
      states=(String[])ar.result;
    int lac=-1;
  int cid=-1;
int regState=-1;
int reasonRegStateDenied=-1;
int psc=-1;
if (states.length > 0) {
try {
regState=Integer.parseInt(states[0]);
if (states.length >= 3) {
if (states[1] != null && states[1].length() > 0) {
  lac=Integer.parseInt(states[1],16);
}
if (states[2] != null && states[2].length() > 0) {
  cid=Integer.parseInt(states[2],16);
}
}
if (states.length > 14) {
if (states[14] != null && states[14].length() > 0) {
  psc=Integer.parseInt(states[14],16);
}
}
}
 catch (NumberFormatException ex) {
loge("error parsing RegistrationState: " + ex);
}
}
mGsmRoaming=regCodeIsRoaming(regState);
newSS.setState(regCodeToServiceState(regState));
if (regState == 10 || regState == 12 || regState == 13 || regState == 14) {
mEmergencyOnly=true;
}
 else {
mEmergencyOnly=false;
}
newCellLoc.setLacAndCid(lac,cid);
newCellLoc.setPsc(psc);
break;
case EVENT_POLL_STATE_GPRS:
states=(String[])ar.result;
int type=0;
regState=-1;
mNewReasonDataDenied=-1;
mNewMaxDataCalls=1;
if (states.length > 0) {
try {
regState=Integer.parseInt(states[0]);
if (states.length >= 4 && states[3] != null) {
type=Integer.parseInt(states[3]);
}
if ((states.length >= 5) && (regState == 3)) {
mNewReasonDataDenied=Integer.parseInt(states[4]);
}
if (states.length >= 6) {
mNewMaxDataCalls=Integer.parseInt(states[5]);
}
}
 catch (NumberFormatException ex) {
loge("error parsing GprsRegistrationState: " + ex);
}
}
newGPRSState=regCodeToServiceState(regState);
mDataRoaming=regCodeIsRoaming(regState);
mNewRadioTechnology=type;
newSS.setRadioTechnology(type);
break;
case EVENT_POLL_STATE_OPERATOR:
String opNames[]=(String[])ar.result;
if (opNames != null && opNames.length >= 3) {
newSS.setOperatorName(opNames[0],opNames[1],opNames[2]);
}
break;
case EVENT_POLL_STATE_NETWORK_SELECTION_MODE:
ints=(int[])ar.result;
newSS.setIsManualSelection(ints[0] == 1);
break;
}
}
 catch (RuntimeException ex) {
loge("Exception while polling service state. Probably malformed RIL response." + ex);
}
pollingContext[0]--;
if (pollingContext[0] == 0) {
boolean roaming=(mGsmRoaming || mDataRoaming);
if (mGsmRoaming && !isRoamingBetweenOperators(mGsmRoaming,newSS)) {
roaming=false;
}
newSS.setRoaming(roaming);
newSS.setEmergencyOnly(mEmergencyOnly);
pollStateDone();
}
}
