{
  File systemFontConfigLocation=getSystemFontConfigLocation();
  File configFilename=new File(systemFontConfigLocation,FONTS_CONFIG);
  try {
    FileInputStream fontsIn=new FileInputStream(configFilename);
    FontListParser.Config fontConfig=FontListParser.parse(fontsIn);
    List<FontFamily> familyList=new ArrayList<FontFamily>();
    for (int i=0; i < fontConfig.families.size(); i++) {
      FontListParser.Family f=fontConfig.families.get(i);
      if (i == 0 || f.name == null) {
        familyList.add(makeFamilyFromParsed(f));
      }
    }
    sFallbackFonts=familyList.toArray(new FontFamily[familyList.size()]);
    setDefault(Typeface.createFromFamilies(sFallbackFonts));
    Map<String,Typeface> systemFonts=new HashMap<String,Typeface>();
    for (int i=0; i < fontConfig.families.size(); i++) {
      Typeface typeface;
      FontListParser.Family f=fontConfig.families.get(i);
      if (f.name != null) {
        if (i == 0) {
          typeface=sDefaultTypeface;
        }
 else {
          FontFamily fontFamily=makeFamilyFromParsed(f);
          FontFamily[] families={fontFamily};
          typeface=Typeface.createFromFamiliesWithDefault(families);
        }
        systemFonts.put(f.name,typeface);
      }
    }
    for (    FontListParser.Alias alias : fontConfig.aliases) {
      Typeface base=systemFonts.get(alias.toName);
      Typeface newFace=base;
      int weight=alias.weight;
      if (weight != 400) {
        newFace=new Typeface(nativeCreateWeightAlias(base.native_instance,weight));
      }
      systemFonts.put(alias.name,newFace);
    }
    sSystemFontMap=systemFonts;
  }
 catch (  RuntimeException e) {
    Log.w(TAG,"Didn't create default family (most likely, non-Minikin build)",e);
  }
catch (  FileNotFoundException e) {
    Log.e(TAG,"Error opening " + configFilename,e);
  }
catch (  IOException e) {
    Log.e(TAG,"Error reading " + configFilename,e);
  }
catch (  XmlPullParserException e) {
    Log.e(TAG,"XML parse exception for " + configFilename,e);
  }
}
