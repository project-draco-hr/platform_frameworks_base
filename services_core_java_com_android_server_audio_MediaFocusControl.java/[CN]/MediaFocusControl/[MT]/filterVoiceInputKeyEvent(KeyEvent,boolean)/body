{
  if (DEBUG_RC) {
    Log.v(TAG,"voice input key event: " + keyEvent + ", needWakeLock="+ needWakeLock);
  }
  int voiceButtonAction=VOICEBUTTON_ACTION_DISCARD_CURRENT_KEY_PRESS;
  int keyAction=keyEvent.getAction();
synchronized (mVoiceEventLock) {
    if (keyAction == KeyEvent.ACTION_DOWN) {
      if (keyEvent.getRepeatCount() == 0) {
        mVoiceButtonDown=true;
        mVoiceButtonHandled=false;
      }
 else       if (mVoiceButtonDown && !mVoiceButtonHandled && (keyEvent.getFlags() & KeyEvent.FLAG_LONG_PRESS) != 0) {
        mVoiceButtonHandled=true;
        voiceButtonAction=VOICEBUTTON_ACTION_START_VOICE_INPUT;
      }
    }
 else     if (keyAction == KeyEvent.ACTION_UP) {
      if (mVoiceButtonDown) {
        mVoiceButtonDown=false;
        if (!mVoiceButtonHandled && !keyEvent.isCanceled()) {
          voiceButtonAction=VOICEBUTTON_ACTION_SIMULATE_KEY_PRESS;
        }
      }
    }
  }
switch (voiceButtonAction) {
case VOICEBUTTON_ACTION_DISCARD_CURRENT_KEY_PRESS:
    if (DEBUG_RC)     Log.v(TAG,"   ignore key event");
  break;
case VOICEBUTTON_ACTION_START_VOICE_INPUT:
if (DEBUG_RC) Log.v(TAG,"   start voice-based interactions");
startVoiceBasedInteractions(needWakeLock);
break;
case VOICEBUTTON_ACTION_SIMULATE_KEY_PRESS:
if (DEBUG_RC) Log.v(TAG,"   send simulated key event, wakelock=" + needWakeLock);
sendSimulatedMediaButtonEvent(keyEvent,needWakeLock);
break;
}
}
