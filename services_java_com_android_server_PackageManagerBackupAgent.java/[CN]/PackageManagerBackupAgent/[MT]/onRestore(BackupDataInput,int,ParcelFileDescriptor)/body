{
  List<ApplicationInfo> restoredApps=new ArrayList<ApplicationInfo>();
  HashMap<String,Metadata> sigMap=new HashMap<String,Metadata>();
  if (DEBUG)   Log.v(TAG,"onRestore()");
  int storedSystemVersion=-1;
  while (data.readNextHeader()) {
    String key=data.getKey();
    int dataSize=data.getDataSize();
    if (DEBUG)     Log.v(TAG,"   got key=" + key + " dataSize="+ dataSize);
    byte[] dataBuf=new byte[dataSize];
    data.readEntityData(dataBuf,0,dataSize);
    ByteArrayInputStream baStream=new ByteArrayInputStream(dataBuf);
    DataInputStream in=new DataInputStream(baStream);
    if (key.equals(GLOBAL_METADATA_KEY)) {
      int storedSdkVersion=in.readInt();
      if (DEBUG)       Log.v(TAG,"   storedSystemVersion = " + storedSystemVersion);
      if (storedSystemVersion > Build.VERSION.SDK_INT) {
        Log.w(TAG,"Restore set was from a later version of Android; not restoring");
        return;
      }
      mStoredSdkVersion=storedSdkVersion;
      mStoredIncrementalVersion=in.readUTF();
      if (DEBUG) {
        Log.i(TAG,"Restore set version " + storedSystemVersion + " is compatible with OS version "+ Build.VERSION.SDK_INT+ " ("+ mStoredIncrementalVersion+ " vs "+ Build.VERSION.INCREMENTAL+ ")");
      }
    }
 else {
      int versionCode=in.readInt();
      Signature[] sigs=unflattenSignatureArray(in);
      if (DEBUG) {
        Log.i(TAG,"   restored metadata for " + key + " dataSize="+ dataSize+ " versionCode="+ versionCode+ " sigs="+ sigs);
      }
      ApplicationInfo app=new ApplicationInfo();
      app.packageName=key;
      restoredApps.add(app);
      sigMap.put(key,new Metadata(versionCode,sigs));
    }
  }
  mRestoredSignatures=sigMap;
}
