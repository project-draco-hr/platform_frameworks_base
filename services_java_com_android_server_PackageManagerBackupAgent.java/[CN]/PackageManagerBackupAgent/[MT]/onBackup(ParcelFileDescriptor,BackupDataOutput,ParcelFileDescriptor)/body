{
  if (DEBUG)   Slog.v(TAG,"onBackup()");
  ByteArrayOutputStream bufStream=new ByteArrayOutputStream();
  DataOutputStream outWriter=new DataOutputStream(bufStream);
  parseStateFile(oldState);
  if (mStoredIncrementalVersion == null || !mStoredIncrementalVersion.equals(Build.VERSION.INCREMENTAL)) {
    Slog.i(TAG,"Previous metadata " + mStoredIncrementalVersion + " mismatch vs "+ Build.VERSION.INCREMENTAL+ " - rewriting");
    mExisting.clear();
  }
  try {
    if (!mExisting.contains(GLOBAL_METADATA_KEY)) {
      if (DEBUG)       Slog.v(TAG,"Storing global metadata key");
      outWriter.writeInt(Build.VERSION.SDK_INT);
      outWriter.writeUTF(Build.VERSION.INCREMENTAL);
      byte[] metadata=bufStream.toByteArray();
      data.writeEntityHeader(GLOBAL_METADATA_KEY,metadata.length);
      data.writeEntityData(metadata,metadata.length);
    }
 else {
      if (DEBUG)       Slog.v(TAG,"Global metadata key already stored");
      mExisting.remove(GLOBAL_METADATA_KEY);
    }
    for (    PackageInfo pkg : mAllPackages) {
      String packName=pkg.packageName;
      if (packName.equals(GLOBAL_METADATA_KEY)) {
        continue;
      }
 else {
        PackageInfo info=null;
        try {
          info=mPackageManager.getPackageInfo(packName,PackageManager.GET_SIGNATURES);
        }
 catch (        NameNotFoundException e) {
          mExisting.add(packName);
          continue;
        }
        boolean doBackup=false;
        if (!mExisting.contains(packName)) {
          doBackup=true;
        }
 else {
          if (info.versionCode != mStateVersions.get(packName).versionCode) {
            doBackup=true;
          }
          mExisting.remove(packName);
        }
        if (doBackup) {
          bufStream.reset();
          outWriter.writeInt(info.versionCode);
          byte[] versionBuf=bufStream.toByteArray();
          byte[] sigs=flattenSignatureArray(info.signatures);
          if (DEBUG) {
            Slog.v(TAG,"+ metadata for " + packName + " version="+ info.versionCode+ " versionLen="+ versionBuf.length+ " sigsLen="+ sigs.length);
          }
          data.writeEntityHeader(packName,versionBuf.length + sigs.length);
          data.writeEntityData(versionBuf,versionBuf.length);
          data.writeEntityData(sigs,sigs.length);
        }
      }
    }
    for (    String app : mExisting) {
      if (DEBUG)       Slog.v(TAG,"- removing metadata for deleted pkg " + app);
      try {
        data.writeEntityHeader(app,-1);
      }
 catch (      IOException e) {
        Slog.e(TAG,"Unable to write package deletions!");
        return;
      }
    }
  }
 catch (  IOException e) {
    Slog.e(TAG,"Unable to write package backup data file!");
    return;
  }
  writeStateFile(mAllPackages,newState);
}
