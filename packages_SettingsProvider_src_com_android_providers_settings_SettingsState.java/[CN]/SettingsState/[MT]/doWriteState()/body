{
  if (DEBUG_PERSISTENCE) {
    Slog.i(LOG_TAG,"[PERSIST START]");
  }
  AtomicFile destination=new AtomicFile(mStatePersistFile);
  final int version;
  final ArrayMap<String,Setting> settings;
synchronized (mLock) {
    version=mVersion;
    settings=new ArrayMap<>(mSettings);
    mDirty=false;
    mWriteScheduled=false;
  }
  FileOutputStream out=null;
  try {
    out=destination.startWrite();
    XmlSerializer serializer=Xml.newSerializer();
    serializer.setOutput(out,StandardCharsets.UTF_8.name());
    serializer.setFeature("http://xmlpull.org/v1/doc/features.html#indent-output",true);
    serializer.startDocument(null,true);
    serializer.startTag(null,TAG_SETTINGS);
    serializer.attribute(null,ATTR_VERSION,String.valueOf(version));
    final int settingCount=settings.size();
    for (int i=0; i < settingCount; i++) {
      Setting setting=settings.valueAt(i);
      writeSingleSetting(mVersion,serializer,setting.getId(),setting.getName(),setting.getValue(),setting.getPackageName());
      if (DEBUG_PERSISTENCE) {
        Slog.i(LOG_TAG,"[PERSISTED]" + setting.getName() + "="+ setting.getValue());
      }
    }
    serializer.endTag(null,TAG_SETTINGS);
    serializer.endDocument();
    destination.finishWrite(out);
    if (DEBUG_PERSISTENCE) {
      Slog.i(LOG_TAG,"[PERSIST END]");
    }
  }
 catch (  Throwable t) {
    Slog.wtf(LOG_TAG,"Failed to write settings, restoring backup",t);
    destination.failWrite(out);
    throw new IllegalStateException("Failed to write settings, restoring backup",t);
  }
 finally {
    IoUtils.closeQuietly(out);
  }
}
