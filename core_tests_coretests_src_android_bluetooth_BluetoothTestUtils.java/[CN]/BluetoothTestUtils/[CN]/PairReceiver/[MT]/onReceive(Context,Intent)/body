{
synchronized (this) {
    if (BluetoothDevice.ACTION_PAIRING_REQUEST.equals(intent.getAction()) && mDevice.equals(intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE))) {
      int type=intent.getIntExtra(BluetoothDevice.EXTRA_PAIRING_VARIANT,BluetoothDevice.ERROR);
      assertNotSame(type,BluetoothDevice.ERROR);
switch (type) {
case BluetoothDevice.PAIRING_VARIANT_PIN:
        mDevice.setPin(mPin);
      break;
case BluetoothDevice.PAIRING_VARIANT_PASSKEY:
    mDevice.setPasskey(mPasskey);
  break;
case BluetoothDevice.PAIRING_VARIANT_PASSKEY_CONFIRMATION:
case BluetoothDevice.PAIRING_VARIANT_CONSENT:
mDevice.setPairingConfirmation(true);
break;
case BluetoothDevice.PAIRING_VARIANT_OOB_CONSENT:
mDevice.setRemoteOutOfBandData();
break;
}
}
 else if (BluetoothDevice.ACTION_BOND_STATE_CHANGED.equals(intent.getAction()) && mDevice.equals(intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE))) {
mFiredFlags|=PAIR_FLAG;
int state=intent.getIntExtra(BluetoothDevice.EXTRA_BOND_STATE,BluetoothDevice.ERROR);
assertNotSame(state,BluetoothDevice.ERROR);
switch (state) {
case BluetoothDevice.BOND_BONDED:
mPairFiredFlags|=PAIR_STATE_BONDED;
break;
case BluetoothDevice.BOND_BONDING:
mPairFiredFlags|=PAIR_STATE_BONDING;
break;
case BluetoothDevice.BOND_NONE:
mPairFiredFlags|=PAIR_STATE_NONE;
break;
}
}
}
}
