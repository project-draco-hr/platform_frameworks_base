{
  int mask=PairReceiver.STATE_BONDING_FLAG | PairReceiver.STATE_BONDED_FLAG;
  long start=-1;
  String methodName=pair ? "pair()" : "acceptPair()";
  if (!adapter.isEnabled()) {
    fail(methodName + " bluetooth not enabled");
  }
  PairReceiver receiver=getPairReceiver(device,passkey,pin,mask);
  int state=device.getBondState();
switch (state) {
case BluetoothDevice.BOND_NONE:
    assertFalse(adapter.getBondedDevices().contains(device));
  start=System.currentTimeMillis();
if (pair) {
  assertTrue(device.createBond());
}
break;
case BluetoothDevice.BOND_BONDING:
mask=0;
break;
case BluetoothDevice.BOND_BONDED:
assertTrue(adapter.getBondedDevices().contains(device));
return;
default :
removeReceiver(receiver);
fail(String.format("%s invalid state: device=%s, state=%d",methodName,device,state));
}
long s=System.currentTimeMillis();
while (System.currentTimeMillis() - s < PAIR_TIMEOUT) {
state=device.getBondState();
if (state == BluetoothDevice.BOND_BONDED) {
assertTrue(adapter.getBondedDevices().contains(device));
if ((receiver.getFiredFlags() & mask) == mask) {
long finish=receiver.getCompletedTime();
if (start != -1 && finish != -1) {
writeOutput(String.format("%s completed in %d ms: device=%s",methodName,(finish - start),device));
}
 else {
writeOutput(String.format("%s completed: device=%s",methodName,device));
}
removeReceiver(receiver);
return;
}
}
sleep(POLL_TIME);
}
int firedFlags=receiver.getFiredFlags();
removeReceiver(receiver);
fail(String.format("%s timeout: device=%s, state=%d (expected %d), " + "flags=0x%x (expected 0x%x)",methodName,device,state,BluetoothDevice.BOND_BONDED,firedFlags,mask));
}
