{
  int mask=(BluetoothReceiver.STATE_TURNING_ON_FLAG | BluetoothReceiver.STATE_ON_FLAG | BluetoothReceiver.SCAN_MODE_CONNECTABLE_FLAG);
  mBluetoothReceiver.resetFiredFlags();
  int state=adapter.getState();
switch (state) {
case BluetoothAdapter.STATE_ON:
    assertTrue(adapter.isEnabled());
  return;
case BluetoothAdapter.STATE_OFF:
case BluetoothAdapter.STATE_TURNING_OFF:
assertFalse(adapter.isEnabled());
assertTrue(adapter.enable());
break;
case BluetoothAdapter.STATE_TURNING_ON:
assertFalse(adapter.isEnabled());
mask=0;
break;
default :
fail("enable() invalid state: state=" + state);
}
long s=System.currentTimeMillis();
while (System.currentTimeMillis() - s < ENABLE_TIMEOUT) {
state=adapter.getState();
if (state == BluetoothAdapter.STATE_ON) {
assertTrue(adapter.isEnabled());
if ((mBluetoothReceiver.getFiredFlags() & mask) == mask) {
mBluetoothReceiver.resetFiredFlags();
writeOutput(String.format("enable() completed in %d ms",(System.currentTimeMillis() - s)));
return;
}
}
 else {
assertFalse(adapter.isEnabled());
assertEquals(BluetoothAdapter.STATE_TURNING_ON,state);
}
sleep(POLL_TIME);
}
int firedFlags=mBluetoothReceiver.getFiredFlags();
mBluetoothReceiver.resetFiredFlags();
fail(String.format("enable() timeout: state=%d (expected %d), flags=0x%x (expected 0x%x)",state,BluetoothAdapter.STATE_ON,firedFlags,mask));
}
