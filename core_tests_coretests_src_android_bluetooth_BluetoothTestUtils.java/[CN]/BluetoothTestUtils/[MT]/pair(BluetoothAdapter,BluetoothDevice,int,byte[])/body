{
  int mask=PairReceiver.PAIR_FLAG;
  int pairMask=PairReceiver.PAIR_STATE_BONDING | PairReceiver.PAIR_STATE_BONDED;
  PairReceiver pairReceiver=getPairReceiver(mContext,device,passkey,pin);
  mReceivers.add(pairReceiver);
  if (!adapter.isEnabled()) {
    fail("pair() bluetooth not enabled");
  }
  int state=device.getBondState();
switch (state) {
case BluetoothDevice.BOND_BONDED:
    assertTrue(adapter.getBondedDevices().contains(device));
  return;
case BluetoothDevice.BOND_BONDING:
mask=pairMask=0;
break;
case BluetoothDevice.BOND_NONE:
assertFalse(adapter.getBondedDevices().contains(device));
assertTrue(device.createBond());
break;
default :
fail("pair() invalide state: state=" + state);
}
long s=System.currentTimeMillis();
while (System.currentTimeMillis() - s < PAIR_TIMEOUT) {
state=device.getBondState();
if (state == BluetoothDevice.BOND_BONDED) {
assertTrue(adapter.getBondedDevices().contains(device));
if ((pairReceiver.getFiredFlags() & mask) == mask && (pairReceiver.getPairFiredFlags() & pairMask) == pairMask) {
writeOutput(String.format("pair() completed in %d ms: device=%s",(System.currentTimeMillis() - s),device));
mReceivers.remove(pairReceiver);
mContext.unregisterReceiver(pairReceiver);
return;
}
}
sleep(POLL_TIME);
}
int firedFlags=pairReceiver.getFiredFlags();
int pairFiredFlags=pairReceiver.getPairFiredFlags();
pairReceiver.resetFiredFlags();
fail(String.format("pair() timeout: state=%d (expected %d), flags=0x%x (expected 0x%x), " + "pairFlags=0x%x (expected 0x%x)",state,BluetoothDevice.BOND_BONDED,firedFlags,mask,pairFiredFlags,pairMask));
}
