{
  if (methodName == null) {
    methodName=String.format("connectProfile(profile=%d, device=%s)",profile,device);
  }
  int mask=(ConnectProfileReceiver.STATE_CONNECTING_FLAG | ConnectProfileReceiver.STATE_CONNECTED_FLAG);
  long start=-1;
  if (!adapter.isEnabled()) {
    fail(String.format("%s bluetooth not enabled",methodName));
  }
  if (!adapter.getBondedDevices().contains(device)) {
    fail(String.format("%s device not paired",methodName));
  }
  BluetoothProfile proxy=connectProxy(adapter,profile);
  assertNotNull(proxy);
  ConnectProfileReceiver receiver=getConnectProfileReceiver(device,profile,mask);
  int state=proxy.getConnectionState(device);
switch (state) {
case BluetoothProfile.STATE_CONNECTED:
    removeReceiver(receiver);
  return;
case BluetoothProfile.STATE_CONNECTING:
mask=0;
break;
case BluetoothProfile.STATE_DISCONNECTED:
case BluetoothProfile.STATE_DISCONNECTING:
start=System.currentTimeMillis();
assertTrue(proxy.connect(device));
break;
default :
removeReceiver(receiver);
fail(String.format("%s invalid state: state=%d",methodName,state));
}
long s=System.currentTimeMillis();
while (System.currentTimeMillis() - s < CONNECT_DISCONNECT_PROFILE_TIMEOUT) {
state=proxy.getConnectionState(device);
if (state == BluetoothProfile.STATE_CONNECTED && (receiver.getFiredFlags() & mask) == mask) {
long finish=receiver.getCompletedTime();
if (start != -1 && finish != -1) {
writeOutput(String.format("%s completed in %d ms",methodName,(finish - start)));
}
 else {
writeOutput(String.format("%s completed",methodName));
}
removeReceiver(receiver);
return;
}
sleep(POLL_TIME);
}
int firedFlags=receiver.getFiredFlags();
removeReceiver(receiver);
fail(String.format("%s timeout: state=%d (expected %d), flags=0x%x (expected 0x%x)",methodName,state,BluetoothProfile.STATE_CONNECTED,firedFlags,mask));
}
