{
  long start=-1;
  int mask, role;
  String methodName;
  if (connect) {
    methodName=String.format("connectPan(device=%s)",device);
    mask=(ConnectProfileReceiver.STATE_CONNECTED_FLAG | ConnectProfileReceiver.STATE_CONNECTING_FLAG);
    role=BluetoothPan.LOCAL_PANU_ROLE;
  }
 else {
    methodName=String.format("incomingPanConnection(device=%s)",device);
    mask=ConnectProfileReceiver.STATE_CONNECTED_FLAG;
    role=BluetoothPan.LOCAL_NAP_ROLE;
  }
  if (!adapter.isEnabled()) {
    fail(String.format("%s bluetooth not enabled",methodName));
  }
  if (!adapter.getBondedDevices().contains(device)) {
    fail(String.format("%s device not paired",methodName));
  }
  mPan=(BluetoothPan)connectProxy(adapter,BluetoothProfile.PAN);
  assertNotNull(mPan);
  ConnectPanReceiver receiver=getConnectPanReceiver(device,role,mask);
  int state=mPan.getConnectionState(device);
switch (state) {
case BluetoothPan.STATE_CONNECTED:
    removeReceiver(receiver);
  return;
case BluetoothPan.STATE_CONNECTING:
mask=0;
break;
case BluetoothPan.STATE_DISCONNECTED:
case BluetoothPan.STATE_DISCONNECTING:
start=System.currentTimeMillis();
if (role == BluetoothPan.LOCAL_PANU_ROLE) {
Log.i("BT","connect to pan");
assertTrue(mPan.connect(device));
}
break;
default :
removeReceiver(receiver);
fail(String.format("%s invalid state: state=%d",methodName,state));
}
long s=System.currentTimeMillis();
while (System.currentTimeMillis() - s < CONNECT_DISCONNECT_PROFILE_TIMEOUT) {
state=mPan.getConnectionState(device);
if (state == BluetoothPan.STATE_CONNECTED && (receiver.getFiredFlags() & mask) == mask) {
long finish=receiver.getCompletedTime();
if (start != -1 && finish != -1) {
writeOutput(String.format("%s completed in %d ms",methodName,(finish - start)));
}
 else {
writeOutput(String.format("%s completed",methodName));
}
removeReceiver(receiver);
return;
}
sleep(POLL_TIME);
}
int firedFlags=receiver.getFiredFlags();
removeReceiver(receiver);
fail(String.format("%s timeout: state=%d (expected %d), flags=0x%x (expected 0x%s)",methodName,state,BluetoothPan.STATE_CONNECTED,firedFlags,mask));
}
