{
  int mask=(ConnectInputReceiver.STATE_DISCONNECTING_FLAG | ConnectInputReceiver.STATE_DISCONNECTED_FLAG);
  long start=-1;
  if (!adapter.isEnabled()) {
    fail(String.format("disconnectInput() bluetooth not enabled: device=%s",device));
  }
  if (!adapter.getBondedDevices().contains(device)) {
    fail(String.format("disconnectInput() device not paired: device=%s",device));
  }
  BluetoothInputDevice inputDevice=new BluetoothInputDevice(mContext);
  assertNotNull(inputDevice);
  ConnectInputReceiver receiver=getConnectInputReceiver(device,mask);
  int state=inputDevice.getInputDeviceState(device);
switch (state) {
case BluetoothInputDevice.STATE_CONNECTED:
case BluetoothInputDevice.STATE_CONNECTING:
    start=System.currentTimeMillis();
  assertTrue(inputDevice.disconnectInputDevice(device));
break;
case BluetoothInputDevice.STATE_DISCONNECTED:
removeReceiver(receiver);
return;
case BluetoothInputDevice.STATE_DISCONNECTING:
mask=0;
break;
default :
removeReceiver(receiver);
fail(String.format("disconnectInput() invalid state: device=%s, state=%d",device,state));
}
long s=System.currentTimeMillis();
while (System.currentTimeMillis() - s < CONNECT_DISCONNECT_PROFILE_TIMEOUT) {
state=inputDevice.getInputDeviceState(device);
if (state == BluetoothInputDevice.STATE_DISCONNECTED && (receiver.getFiredFlags() & mask) == mask) {
long finish=receiver.getCompletedTime();
if (start != -1 && finish != -1) {
writeOutput(String.format("disconnectInput() completed in %d ms: device=%s",(finish - start),device));
}
 else {
writeOutput(String.format("disconnectInput() completed: device=%s",device));
}
removeReceiver(receiver);
return;
}
sleep(POLL_TIME);
}
int firedFlags=receiver.getFiredFlags();
removeReceiver(receiver);
fail(String.format("disconnectInput() timeout: device=%s, state=%d (expected %d), " + "flags=0x%x (expected 0x%s)",device,state,BluetoothInputDevice.STATE_DISCONNECTED,firedFlags,mask));
}
