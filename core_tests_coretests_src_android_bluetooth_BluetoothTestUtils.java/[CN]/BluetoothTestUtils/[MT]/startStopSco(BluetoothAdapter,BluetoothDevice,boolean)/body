{
  long start=-1;
  int mask;
  String methodName;
  if (isStart) {
    methodName="startSco()";
    mask=StartStopScoReceiver.STATE_CONNECTED_FLAG;
  }
 else {
    methodName="stopSco()";
    mask=StartStopScoReceiver.STATE_DISCONNECTED_FLAG;
  }
  if (!adapter.isEnabled()) {
    fail(String.format("%s bluetooth not enabled: device=%s, start=%b",methodName,device,isStart));
  }
  if (!adapter.getBondedDevices().contains(device)) {
    fail(String.format("%s device not paired: device=%s, start=%b",methodName,device,isStart));
  }
  AudioManager manager=(AudioManager)mContext.getSystemService(Context.AUDIO_SERVICE);
  assertNotNull(manager);
  if (!manager.isBluetoothScoAvailableOffCall()) {
    fail(String.format("%s device does not support SCO: device=%s, start=%b",methodName,device,isStart));
  }
  boolean isScoOn=manager.isBluetoothScoOn();
  if (isStart == isScoOn) {
    return;
  }
  StartStopScoReceiver receiver=getStartStopScoReceiver(mask);
  start=System.currentTimeMillis();
  if (isStart) {
    manager.startBluetoothSco();
  }
 else {
    manager.stopBluetoothSco();
  }
  long s=System.currentTimeMillis();
  while (System.currentTimeMillis() - s < START_STOP_SCO_TIMEOUT) {
    isScoOn=manager.isBluetoothScoOn();
    if ((isStart == isScoOn) && (receiver.getFiredFlags() & mask) == mask) {
      long finish=receiver.getCompletedTime();
      if (start != -1 && finish != -1) {
        writeOutput(String.format("%s completed in %d ms",methodName,(finish - start)));
      }
 else {
        writeOutput(String.format("%s completed",methodName));
      }
      removeReceiver(receiver);
      return;
    }
    sleep(POLL_TIME);
  }
  int firedFlags=receiver.getFiredFlags();
  removeReceiver(receiver);
  fail(String.format("%s timeout: start=%b (expected %b), flags=0x%x (expected 0x%x)",methodName,isScoOn,isStart,firedFlags,mask));
}
