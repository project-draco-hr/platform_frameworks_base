{
  int mask=PairReceiver.STATE_NONE_FLAG;
  long start=-1;
  if (!adapter.isEnabled()) {
    fail("unpair() bluetooth not enabled");
  }
  PairReceiver receiver=getPairReceiver(device,0,null,mask);
  int state=device.getBondState();
switch (state) {
case BluetoothDevice.BOND_NONE:
    assertFalse(adapter.getBondedDevices().contains(device));
  removeReceiver(receiver);
return;
case BluetoothDevice.BOND_BONDING:
start=System.currentTimeMillis();
assertTrue(device.removeBond());
break;
case BluetoothDevice.BOND_BONDED:
assertTrue(adapter.getBondedDevices().contains(device));
start=System.currentTimeMillis();
assertTrue(device.removeBond());
break;
default :
removeReceiver(receiver);
fail(String.format("unpair() invalid state: device=%s, state=%d",device,state));
}
long s=System.currentTimeMillis();
while (System.currentTimeMillis() - s < PAIR_UNPAIR_TIMEOUT) {
if (device.getBondState() == BluetoothDevice.BOND_NONE && (receiver.getFiredFlags() & mask) == mask) {
assertFalse(adapter.getBondedDevices().contains(device));
long finish=receiver.getCompletedTime();
if (start != -1 && finish != -1) {
writeOutput(String.format("unpair() completed in %d ms: device=%s",(finish - start),device));
}
 else {
writeOutput(String.format("unpair() completed: device=%s",device));
}
removeReceiver(receiver);
return;
}
}
int firedFlags=receiver.getFiredFlags();
removeReceiver(receiver);
fail(String.format("unpair() timeout: device=%s, state=%d (expected %d), " + "flags=0x%x (expected 0x%x)",device,state,BluetoothDevice.BOND_BONDED,firedFlags,mask));
}
