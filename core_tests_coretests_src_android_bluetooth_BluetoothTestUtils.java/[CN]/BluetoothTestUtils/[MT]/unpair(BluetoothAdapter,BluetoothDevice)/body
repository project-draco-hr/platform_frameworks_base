{
  int mask=PairReceiver.PAIR_FLAG;
  int pairMask=PairReceiver.PAIR_STATE_NONE;
  PairReceiver pairReceiver=getPairReceiver(mContext,device,0,null);
  mReceivers.add(pairReceiver);
  if (!adapter.isEnabled()) {
    fail("unpair() bluetooth not enabled");
  }
  int state=device.getBondState();
switch (state) {
case BluetoothDevice.BOND_BONDED:
    assertTrue(adapter.getBondedDevices().contains(device));
  assertTrue(device.removeBond());
break;
case BluetoothDevice.BOND_BONDING:
assertTrue(device.removeBond());
break;
case BluetoothDevice.BOND_NONE:
assertFalse(adapter.getBondedDevices().contains(device));
return;
default :
fail("unpair() invalid state: state=" + state);
}
assertTrue(device.removeBond());
long s=System.currentTimeMillis();
while (System.currentTimeMillis() - s < UNPAIR_TIMEOUT) {
if (device.getBondState() == BluetoothDevice.BOND_NONE) {
assertFalse(adapter.getBondedDevices().contains(device));
if ((pairReceiver.getFiredFlags() & mask) == mask && (pairReceiver.getPairFiredFlags() & pairMask) == pairMask) {
writeOutput(String.format("unpair() completed in %d ms: device=%s",(System.currentTimeMillis() - s),device));
mReceivers.remove(pairReceiver);
mContext.unregisterReceiver(pairReceiver);
return;
}
}
}
int firedFlags=pairReceiver.getFiredFlags();
int pairFiredFlags=pairReceiver.getPairFiredFlags();
pairReceiver.resetFiredFlags();
fail(String.format("unpair() timeout: state=%d (expected %d), flags=0x%x (expected 0x%x), " + "pairFlags=0x%x (expected 0x%x)",state,BluetoothDevice.BOND_BONDED,firedFlags,mask,pairFiredFlags,pairMask));
}
