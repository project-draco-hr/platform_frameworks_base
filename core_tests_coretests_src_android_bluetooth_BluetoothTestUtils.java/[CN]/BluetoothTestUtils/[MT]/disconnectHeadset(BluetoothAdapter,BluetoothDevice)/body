{
  int mask=BluetoothReceiver.PROFILE_HEADSET_FLAG;
  int headsetMask=BluetoothReceiver.HEADSET_STATE_DISCONNECTED;
  mBluetoothReceiver.resetFiredFlags();
  if (!adapter.isEnabled()) {
    fail("disconnectHeadset() bluetooth not enabled");
  }
  if (!adapter.getBondedDevices().contains(device)) {
    fail("disconnectHeadset() device not paired: device=" + device);
  }
  while (!mHeadsetServiceListener.isConnected()) {
    sleep(POLL_TIME);
  }
  int state=mHeadset.getState(device);
switch (state) {
case BluetoothHeadset.STATE_CONNECTED:
    mHeadset.disconnectHeadset(device);
  break;
case BluetoothHeadset.STATE_CONNECTING:
mHeadset.disconnectHeadset(device);
break;
case BluetoothHeadset.STATE_DISCONNECTED:
return;
case BluetoothHeadset.STATE_ERROR:
fail("disconnectHeadset() error state");
break;
default :
fail("disconnectHeadset() invalid state: state=" + state);
}
long s=System.currentTimeMillis();
while (System.currentTimeMillis() - s < DISCONNECT_HEADSET_TIMEOUT) {
state=mHeadset.getState(device);
if (state == BluetoothHeadset.STATE_DISCONNECTED) {
assertFalse(mHeadset.isConnected(device));
if ((mBluetoothReceiver.getFiredFlags() & mask) == mask && (mBluetoothReceiver.getHeadsetFiredFlags() & headsetMask) == headsetMask) {
mBluetoothReceiver.resetFiredFlags();
writeOutput(String.format("disconnectHeadset() completed in %d ms: device=%s",(System.currentTimeMillis() - s),device));
return;
}
}
sleep(POLL_TIME);
}
int firedFlags=mBluetoothReceiver.getFiredFlags();
int headsetFiredFlags=mBluetoothReceiver.getHeadsetFiredFlags();
mBluetoothReceiver.resetFiredFlags();
fail(String.format("disconnectHeadset() timeout: state=%d (expected %d), " + "flags=0x%x (expected 0x%x), headsetFlags=0x%s (expected 0x%x)",state,BluetoothHeadset.STATE_DISCONNECTED,firedFlags,mask,headsetFiredFlags,headsetMask));
}
