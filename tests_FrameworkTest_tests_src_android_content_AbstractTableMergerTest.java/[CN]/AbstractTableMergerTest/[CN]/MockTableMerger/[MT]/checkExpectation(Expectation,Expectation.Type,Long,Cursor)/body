{
  assertEquals(expectation.mType,actualType);
  assertEquals(expectation.mLocalRowId,localRowId);
  final SortedSet<String> actualKeys=Sets.newSortedSet(cursor.getColumnNames());
  final SortedSet<String> expectedKeys=Sets.newSortedSet();
  for (  Map.Entry<String,Object> entry : expectation.mValues.valueSet()) {
    expectedKeys.add(entry.getKey());
  }
  actualKeys.remove("_id");
  actualKeys.remove("_sync_mark");
  actualKeys.remove("_sync_local_id");
  expectedKeys.remove("_sync_local_id");
  expectedKeys.remove("_id");
  assertEquals("column mismatch",TextUtils.join(",",expectedKeys),TextUtils.join(",",actualKeys));
  for (  String name : cursor.getColumnNames()) {
    if ("_id".equals(name)) {
      continue;
    }
    if (cursor.isNull(cursor.getColumnIndexOrThrow(name))) {
      assertNull(expectation.mValues.getAsString(name));
    }
 else {
      String actualValue=cursor.getString(cursor.getColumnIndexOrThrow(name));
      assertEquals("mismatch on column " + name,expectation.mValues.getAsString(name),actualValue);
    }
  }
}
