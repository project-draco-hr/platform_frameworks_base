{
  while (size > maxSize) {
    Map.Entry<K,V> toEvict=map.eldest();
    if (toEvict == null) {
      break;
    }
    K key=toEvict.getKey();
    V value=toEvict.getValue();
    map.remove(key);
    size-=safeSizeOf(key,value);
    evictionCount++;
    entryEvicted(key,value);
  }
  if (size < 0 || (map.isEmpty() && size != 0)) {
    throw new IllegalStateException(getClass().getName() + ".sizeOf() is reporting inconsistent results!");
  }
}
