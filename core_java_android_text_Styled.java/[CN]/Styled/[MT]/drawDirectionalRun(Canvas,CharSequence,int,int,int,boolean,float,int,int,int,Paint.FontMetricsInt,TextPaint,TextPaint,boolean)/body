{
  if (!(text instanceof Spanned)) {
    float ret=0;
    if (runIsRtl) {
      CharSequence tmp=TextUtils.getReverse(text,start,end);
      int tmpend=end - start;
      if (canvas != null || needWidth)       ret=paint.measureText(tmp,0,tmpend);
      if (canvas != null)       canvas.drawText(tmp,0,tmpend,x - ret,y,paint);
    }
 else {
      if (needWidth)       ret=paint.measureText(text,start,end);
      if (canvas != null)       canvas.drawText(text,start,end,x,y,paint);
    }
    if (fmi != null) {
      paint.getFontMetricsInt(fmi);
    }
    return ret * dir;
  }
  float ox=x;
  int minAscent=0, maxDescent=0, minTop=0, maxBottom=0;
  Spanned sp=(Spanned)text;
  Class<?> division;
  if (canvas == null)   division=MetricAffectingSpan.class;
 else   division=CharacterStyle.class;
  int next;
  for (int i=start; i < end; i=next) {
    next=sp.nextSpanTransition(i,end,division);
    x+=drawUniformRun(canvas,sp,i,next,dir,runIsRtl,x,top,y,bottom,fmi,paint,workPaint,needWidth || next != end);
    if (fmi != null) {
      if (fmi.ascent < minAscent)       minAscent=fmi.ascent;
      if (fmi.descent > maxDescent)       maxDescent=fmi.descent;
      if (fmi.top < minTop)       minTop=fmi.top;
      if (fmi.bottom > maxBottom)       maxBottom=fmi.bottom;
    }
  }
  if (fmi != null) {
    if (start == end) {
      paint.getFontMetricsInt(fmi);
    }
 else {
      fmi.ascent=minAscent;
      fmi.descent=maxDescent;
      fmi.top=minTop;
      fmi.bottom=maxBottom;
    }
  }
  return x - ox;
}
