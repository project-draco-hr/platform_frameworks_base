{
  Pattern p=Pattern.compile(":");
  String[] strings;
  strings=p.split("boo:and:foo");
  assertEquals(3,strings.length);
  assertEquals("boo",strings[0]);
  assertEquals("and",strings[1]);
  assertEquals("foo",strings[2]);
  strings=p.split("boo:and:foo",2);
  assertEquals(2,strings.length);
  assertEquals("boo",strings[0]);
  assertEquals("and:foo",strings[1]);
  strings=p.split("boo:and:foo",5);
  assertEquals(3,strings.length);
  assertEquals("boo",strings[0]);
  assertEquals("and",strings[1]);
  assertEquals("foo",strings[2]);
  strings=p.split("boo:and:foo",-2);
  assertEquals(3,strings.length);
  assertEquals("boo",strings[0]);
  assertEquals("and",strings[1]);
  assertEquals("foo",strings[2]);
  p=Pattern.compile("o");
  strings=p.split("boo:and:foo");
  assertEquals(3,strings.length);
  assertEquals("b",strings[0]);
  assertEquals("",strings[1]);
  assertEquals(":and:f",strings[2]);
  strings=p.split("boo:and:foo",5);
  assertEquals(5,strings.length);
  assertEquals("b",strings[0]);
  assertEquals("",strings[1]);
  assertEquals(":and:f",strings[2]);
  assertEquals("",strings[3]);
  assertEquals("",strings[4]);
  strings=p.split("boo:and:foo",-2);
  assertEquals(5,strings.length);
  assertEquals("b",strings[0]);
  assertEquals("",strings[1]);
  assertEquals(":and:f",strings[2]);
  assertEquals("",strings[3]);
  assertEquals("",strings[4]);
  strings=p.split("boo:and:foo",0);
  assertEquals(3,strings.length);
  assertEquals("b",strings[0]);
  assertEquals("",strings[1]);
  assertEquals(":and:f",strings[2]);
}
