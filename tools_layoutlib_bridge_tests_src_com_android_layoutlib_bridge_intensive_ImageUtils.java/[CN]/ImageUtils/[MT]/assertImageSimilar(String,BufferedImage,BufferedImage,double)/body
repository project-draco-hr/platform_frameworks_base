{
  assertEquals("Only TYPE_INT_ARGB image types are supported",TYPE_INT_ARGB,image.getType());
  if (goldenImage.getType() != TYPE_INT_ARGB) {
    BufferedImage temp=new BufferedImage(goldenImage.getWidth(),goldenImage.getHeight(),TYPE_INT_ARGB);
    temp.getGraphics().drawImage(goldenImage,0,0,null);
    goldenImage=temp;
  }
  assertEquals(TYPE_INT_ARGB,goldenImage.getType());
  int imageWidth=Math.min(goldenImage.getWidth(),image.getWidth());
  int imageHeight=Math.min(goldenImage.getHeight(),image.getHeight());
  int width=3 * imageWidth;
  @SuppressWarnings("UnnecessaryLocalVariable") int height=imageHeight;
  BufferedImage deltaImage=new BufferedImage(width,height,TYPE_INT_ARGB);
  Graphics g=deltaImage.getGraphics();
  long delta=0;
  for (int y=0; y < imageHeight; y++) {
    for (int x=0; x < imageWidth; x++) {
      int goldenRgb=goldenImage.getRGB(x,y);
      int rgb=image.getRGB(x,y);
      if (goldenRgb == rgb) {
        deltaImage.setRGB(imageWidth + x,y,0x00808080);
        continue;
      }
      if (((goldenRgb & 0xFF000000) == 0) && (rgb & 0xFF000000) == 0) {
        deltaImage.setRGB(imageWidth + x,y,0x00808080);
        continue;
      }
      int deltaR=((rgb & 0xFF0000) >>> 16) - ((goldenRgb & 0xFF0000) >>> 16);
      int newR=128 + deltaR & 0xFF;
      int deltaG=((rgb & 0x00FF00) >>> 8) - ((goldenRgb & 0x00FF00) >>> 8);
      int newG=128 + deltaG & 0xFF;
      int deltaB=(rgb & 0x0000FF) - (goldenRgb & 0x0000FF);
      int newB=128 + deltaB & 0xFF;
      int avgAlpha=((((goldenRgb & 0xFF000000) >>> 24) + ((rgb & 0xFF000000) >>> 24)) / 2) << 24;
      int newRGB=avgAlpha | newR << 16 | newG << 8 | newB;
      deltaImage.setRGB(imageWidth + x,y,newRGB);
      delta+=Math.abs(deltaR);
      delta+=Math.abs(deltaG);
      delta+=Math.abs(deltaB);
    }
  }
  long total=imageHeight * imageWidth * 3L* 256L;
  float percentDifference=(float)(delta * 100 / (double)total);
  String error=null;
  String imageName=getName(relativePath);
  if (percentDifference > maxPercentDifferent) {
    error=String.format("Images differ (by %.1f%%)",percentDifference);
  }
 else   if (Math.abs(goldenImage.getWidth() - image.getWidth()) >= 2) {
    error="Widths differ too much for " + imageName + ": "+ goldenImage.getWidth()+ "x"+ goldenImage.getHeight()+ "vs"+ image.getWidth()+ "x"+ image.getHeight();
  }
 else   if (Math.abs(goldenImage.getHeight() - image.getHeight()) >= 2) {
    error="Heights differ too much for " + imageName + ": "+ goldenImage.getWidth()+ "x"+ goldenImage.getHeight()+ "vs"+ image.getWidth()+ "x"+ image.getHeight();
  }
  assertEquals(TYPE_INT_ARGB,image.getType());
  if (error != null) {
    g.drawImage(goldenImage,0,0,null);
    g.drawImage(image,2 * imageWidth,0,null);
    if (imageWidth > 80) {
      g.setColor(Color.RED);
      g.drawString("Expected",10,20);
      g.drawString("Actual",2 * imageWidth + 10,20);
    }
    File output=new File(getTempDir(),"delta-" + imageName);
    if (output.exists()) {
      boolean deleted=output.delete();
      assertTrue(deleted);
    }
    ImageIO.write(deltaImage,"PNG",output);
    error+=" - see details in " + output.getPath() + "\n";
    error=saveImageAndAppendMessage(image,error,relativePath);
    System.out.println(error);
    fail(error);
  }
  g.dispose();
}
