{
  mContext=context;
  mNtpTime=NtpTrustedTime.getInstance(context);
  mILocationManager=ilocationManager;
  mLocation.setExtras(mLocationExtras);
  mPowerManager=(PowerManager)mContext.getSystemService(Context.POWER_SERVICE);
  mWakeLock=mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,WAKELOCK_KEY);
  mWakeLock.setReferenceCounted(true);
  mAlarmManager=(AlarmManager)mContext.getSystemService(Context.ALARM_SERVICE);
  mWakeupIntent=PendingIntent.getBroadcast(mContext,0,new Intent(ALARM_WAKEUP),0);
  mTimeoutIntent=PendingIntent.getBroadcast(mContext,0,new Intent(ALARM_TIMEOUT),0);
  mConnMgr=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
  mAppOpsService=IAppOpsService.Stub.asInterface(ServiceManager.getService(Context.APP_OPS_SERVICE));
  mBatteryStats=IBatteryStats.Stub.asInterface(ServiceManager.getService(BatteryStats.SERVICE_NAME));
  mProperties=new Properties();
  reloadGpsProperties(mContext,mProperties);
  mNIHandler=new GpsNetInitiatedHandler(context,mNetInitiatedListener,mSuplEsEnabled);
  SubscriptionManager.from(mContext).registerOnSubscriptionsChangedListener(mOnSubscriptionsChangedListener);
  mHandler=new ProviderHandler(looper);
  listenForBroadcasts();
  mHandler.post(new Runnable(){
    @Override public void run(){
      LocationManager locManager=(LocationManager)mContext.getSystemService(Context.LOCATION_SERVICE);
      final long minTime=0;
      final float minDistance=0;
      final boolean oneShot=false;
      LocationRequest request=LocationRequest.createFromDeprecatedProvider(LocationManager.PASSIVE_PROVIDER,minTime,minDistance,oneShot);
      request.setHideFromAppOps(true);
      locManager.requestLocationUpdates(request,new NetworkLocationListener(),mHandler.getLooper());
    }
  }
);
  mListenerHelper=new GpsStatusListenerHelper(mHandler){
    @Override protected boolean isAvailableInPlatform(){
      return GpsLocationProvider.isSupported();
    }
    @Override protected boolean isGpsEnabled(){
      return isEnabled();
    }
  }
;
  mGpsMeasurementsProvider=new GpsMeasurementsProvider(mHandler){
    @Override public boolean isAvailableInPlatform(){
      return native_is_measurement_supported();
    }
    @Override protected boolean registerWithService(){
      return native_start_measurement_collection();
    }
    @Override protected void unregisterFromService(){
      native_stop_measurement_collection();
    }
    @Override protected boolean isGpsEnabled(){
      return isEnabled();
    }
  }
;
  mGpsNavigationMessageProvider=new GpsNavigationMessageProvider(mHandler){
    @Override protected boolean isAvailableInPlatform(){
      return native_is_navigation_message_supported();
    }
    @Override protected boolean registerWithService(){
      return native_start_navigation_message_collection();
    }
    @Override protected void unregisterFromService(){
      native_stop_navigation_message_collection();
    }
    @Override protected boolean isGpsEnabled(){
      return isEnabled();
    }
  }
;
}
