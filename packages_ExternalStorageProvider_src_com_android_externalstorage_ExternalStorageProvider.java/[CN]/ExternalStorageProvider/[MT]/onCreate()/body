{
  mRoots=Lists.newArrayList();
  mIdToRoot=Maps.newHashMap();
  mIdToPath=Maps.newHashMap();
  try {
    final String rootId="primary";
    final File path=Environment.getExternalStorageDirectory();
    mIdToPath.put(rootId,path);
    final RootInfo root=new RootInfo();
    root.rootId=rootId;
    root.rootType=Root.ROOT_TYPE_DEVICE;
    root.flags=Root.FLAG_SUPPORTS_CREATE | Root.FLAG_LOCAL_ONLY | Root.FLAG_ADVANCED| Root.FLAG_SUPPORTS_SEARCH;
    root.title=getContext().getString(R.string.root_internal_storage);
    root.docId=getDocIdForFile(path);
    mRoots.add(root);
    mIdToRoot.put(rootId,root);
  }
 catch (  FileNotFoundException e) {
    throw new IllegalStateException(e);
  }
  try {
    final String rootId="documents";
    final File path=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS);
    mIdToPath.put(rootId,path);
    final RootInfo root=new RootInfo();
    root.rootId=rootId;
    root.rootType=Root.ROOT_TYPE_SHORTCUT;
    root.flags=Root.FLAG_SUPPORTS_CREATE | Root.FLAG_LOCAL_ONLY | Root.FLAG_SUPPORTS_SEARCH;
    root.title=getContext().getString(R.string.root_documents);
    root.docId=getDocIdForFile(path);
    mRoots.add(root);
    mIdToRoot.put(rootId,root);
  }
 catch (  FileNotFoundException e) {
    throw new IllegalStateException(e);
  }
  return true;
}
