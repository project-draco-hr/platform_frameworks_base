{
  final String[] rootsProjection=new String[]{BaseColumns._ID,RootColumns.ROOT_ID,RootColumns.ROOT_TYPE,RootColumns.ICON,RootColumns.TITLE,RootColumns.SUMMARY,RootColumns.AVAILABLE_BYTES};
  final String[] docsProjection=new String[]{BaseColumns._ID,DocumentColumns.DISPLAY_NAME,DocumentColumns.SIZE,DocumentColumns.DOC_ID,DocumentColumns.MIME_TYPE,DocumentColumns.LAST_MODIFIED,DocumentColumns.FLAGS};
switch (sMatcher.match(uri)) {
case URI_ROOTS:
{
      final MatrixCursor cursor=new MatrixCursor(rootsProjection);
      for (      Root root : mRoots.values()) {
        includeRoot(cursor,root);
      }
      return cursor;
    }
case URI_ROOTS_ID:
{
    final String root=uri.getPathSegments().get(1);
    final MatrixCursor cursor=new MatrixCursor(rootsProjection);
    includeRoot(cursor,mRoots.get(root));
    return cursor;
  }
case URI_DOCS_ID:
{
  final Root root=mRoots.get(uri.getPathSegments().get(1));
  final String docId=uri.getPathSegments().get(3);
  final MatrixCursor cursor=new MatrixCursor(docsProjection);
  final File file=docIdToFile(root,docId);
  includeFile(cursor,root,file);
  return cursor;
}
case URI_DOCS_ID_CONTENTS:
{
final Root root=mRoots.get(uri.getPathSegments().get(1));
final String docId=uri.getPathSegments().get(3);
final MatrixCursor cursor=new MatrixCursor(docsProjection);
final File parent=docIdToFile(root,docId);
for (File file : parent.listFiles()) {
  includeFile(cursor,root,file);
}
return cursor;
}
case URI_DOCS_ID_SEARCH:
{
final Root root=mRoots.get(uri.getPathSegments().get(1));
final String docId=uri.getPathSegments().get(3);
final String query=uri.getQueryParameter(DocumentsContract.PARAM_QUERY).toLowerCase();
final MatrixCursor cursor=new MatrixCursor(docsProjection);
final File parent=docIdToFile(root,docId);
final LinkedList<File> pending=new LinkedList<File>();
pending.add(parent);
while (!pending.isEmpty() && cursor.getCount() < 20) {
final File file=pending.removeFirst();
if (file.isDirectory()) {
  for (  File child : file.listFiles()) {
    pending.add(child);
  }
}
 else {
  if (file.getName().toLowerCase().contains(query)) {
    includeFile(cursor,root,file);
  }
}
}
return cursor;
}
default :
{
throw new UnsupportedOperationException("Unsupported Uri " + uri);
}
}
}
