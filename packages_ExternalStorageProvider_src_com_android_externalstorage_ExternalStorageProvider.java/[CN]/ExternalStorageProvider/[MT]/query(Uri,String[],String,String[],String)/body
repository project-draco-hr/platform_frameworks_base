{
switch (sMatcher.match(uri)) {
case URI_ROOTS:
{
      final MatrixCursor result=new MatrixCursor(projection != null ? projection : ALL_ROOTS_COLUMNS);
      for (      Root root : mRoots.values()) {
        includeRoot(result,root);
      }
      return result;
    }
case URI_ROOTS_ID:
{
    final Root root=mRoots.get(DocumentsContract.getRootId(uri));
    final MatrixCursor result=new MatrixCursor(projection != null ? projection : ALL_ROOTS_COLUMNS);
    includeRoot(result,root);
    return result;
  }
case URI_DOCS_ID:
{
  final Root root=mRoots.get(DocumentsContract.getRootId(uri));
  final String docId=DocumentsContract.getDocId(uri);
  final MatrixCursor result=new MatrixCursor(projection != null ? projection : ALL_DOCUMENTS_COLUMNS);
  final File file=docIdToFile(root,docId);
  includeFile(result,root,file);
  return result;
}
case URI_DOCS_ID_CONTENTS:
{
final Root root=mRoots.get(DocumentsContract.getRootId(uri));
final String docId=DocumentsContract.getDocId(uri);
final MatrixCursor result=new MatrixCursor(projection != null ? projection : ALL_DOCUMENTS_COLUMNS);
final File parent=docIdToFile(root,docId);
for (File file : parent.listFiles()) {
  includeFile(result,root,file);
}
return result;
}
case URI_DOCS_ID_SEARCH:
{
final Root root=mRoots.get(DocumentsContract.getRootId(uri));
final String docId=DocumentsContract.getDocId(uri);
final String query=DocumentsContract.getSearchQuery(uri).toLowerCase();
final MatrixCursor result=new MatrixCursor(projection != null ? projection : ALL_DOCUMENTS_COLUMNS);
final File parent=docIdToFile(root,docId);
final LinkedList<File> pending=new LinkedList<File>();
pending.add(parent);
while (!pending.isEmpty() && result.getCount() < 20) {
final File file=pending.removeFirst();
if (file.isDirectory()) {
  for (  File child : file.listFiles()) {
    pending.add(child);
  }
}
 else {
  if (file.getName().toLowerCase().contains(query)) {
    includeFile(result,root,file);
  }
}
}
return result;
}
default :
{
throw new UnsupportedOperationException("Unsupported Uri " + uri);
}
}
}
