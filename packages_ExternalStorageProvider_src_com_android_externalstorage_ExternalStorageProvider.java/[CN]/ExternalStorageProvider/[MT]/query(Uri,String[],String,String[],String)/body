{
  projection=new String[]{BaseColumns._ID,DocumentColumns.DISPLAY_NAME,DocumentColumns.SIZE,DocumentColumns.GUID,DocumentColumns.MIME_TYPE,DocumentColumns.LAST_MODIFIED,DocumentColumns.FLAGS};
  final MatrixCursor cursor=new MatrixCursor(projection);
switch (sMatcher.match(uri)) {
case URI_DOCS_ID:
{
      final int id=Integer.parseInt(uri.getPathSegments().get(1));
synchronized (mFiles) {
        includeFileLocked(cursor,id);
      }
      break;
    }
case URI_DOCS_ID_CONTENTS:
{
    final int parentId=Integer.parseInt(uri.getPathSegments().get(1));
synchronized (mFiles) {
      final File parent=mFiles.get(parentId);
      for (      File file : parent.listFiles()) {
        final int id=findOrCreateFileLocked(file);
        includeFileLocked(cursor,id);
      }
    }
    break;
  }
default :
{
  cursor.close();
  throw new UnsupportedOperationException("Unsupported Uri " + uri);
}
}
return cursor;
}
