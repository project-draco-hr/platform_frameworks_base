{
switch (sMatcher.match(uri)) {
case URI_DOCS_ID:
{
      final Root root=mRoots.get(DocumentsContract.getRootId(uri));
      final String docId=DocumentsContract.getDocId(uri);
      final File parent=docIdToFile(root,docId);
      final String mimeType=values.getAsString(DocumentColumns.MIME_TYPE);
      final String name=validateDisplayName(values.getAsString(DocumentColumns.DISPLAY_NAME),mimeType);
      final File file=new File(parent,name);
      if (Documents.MIME_TYPE_DIR.equals(mimeType)) {
        if (!file.mkdir()) {
          return null;
        }
      }
 else {
        try {
          if (!file.createNewFile()) {
            return null;
          }
        }
 catch (        IOException e) {
          Log.w(TAG,"Failed to create file",e);
          return null;
        }
      }
      final String newDocId=fileToDocId(root,file);
      return DocumentsContract.buildDocumentUri(AUTHORITY,root.name,newDocId);
    }
default :
{
    throw new UnsupportedOperationException("Unsupported Uri " + uri);
  }
}
}
