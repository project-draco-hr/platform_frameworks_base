{
  ServiceInfo serviceInfo=resolveInfo.serviceInfo;
  mId=new ComponentName(serviceInfo.packageName,serviceInfo.name).flattenToShortString();
  mResolveInfo=resolveInfo;
  XmlResourceParser parser=null;
  try {
    PackageManager packageManager=context.getPackageManager();
    parser=serviceInfo.loadXmlMetaData(packageManager,AccessibilityService.SERVICE_META_DATA);
    if (parser == null) {
      return;
    }
    int type=0;
    while (type != XmlPullParser.END_DOCUMENT && type != XmlPullParser.START_TAG) {
      type=parser.next();
    }
    String nodeName=parser.getName();
    if (!TAG_ACCESSIBILITY_SERVICE.equals(nodeName)) {
      throw new XmlPullParserException("Meta-data does not start with" + TAG_ACCESSIBILITY_SERVICE + " tag");
    }
    AttributeSet allAttributes=Xml.asAttributeSet(parser);
    Resources resources=packageManager.getResourcesForApplication(serviceInfo.applicationInfo);
    TypedArray asAttributes=resources.obtainAttributes(allAttributes,com.android.internal.R.styleable.AccessibilityService);
    eventTypes=asAttributes.getInt(com.android.internal.R.styleable.AccessibilityService_accessibilityEventTypes,0);
    String packageNamez=asAttributes.getString(com.android.internal.R.styleable.AccessibilityService_packageNames);
    if (packageNamez != null) {
      packageNames=packageNamez.split("(\\s)*,(\\s)*");
    }
    feedbackType=asAttributes.getInt(com.android.internal.R.styleable.AccessibilityService_accessibilityFeedbackType,0);
    notificationTimeout=asAttributes.getInt(com.android.internal.R.styleable.AccessibilityService_notificationTimeout,0);
    flags=asAttributes.getInt(com.android.internal.R.styleable.AccessibilityService_accessibilityFlags,0);
    mSettingsActivityName=asAttributes.getString(com.android.internal.R.styleable.AccessibilityService_settingsActivity);
    if (asAttributes.getBoolean(com.android.internal.R.styleable.AccessibilityService_canRetrieveWindowContent,false)) {
      mCapabilities|=CAPABILITY_CAN_RETRIEVE_WINDOW_CONTENT;
    }
    if (asAttributes.getBoolean(com.android.internal.R.styleable.AccessibilityService_canRequestTouchExplorationMode,false)) {
      mCapabilities|=CAPABILITY_CAN_REQUEST_TOUCH_EXPLORATION;
    }
    if (asAttributes.getBoolean(com.android.internal.R.styleable.AccessibilityService_canRequestEnhancedWebAccessibility,false)) {
      mCapabilities|=CAPABILITY_CAN_REQUEST_ENHANCED_WEB_ACCESSIBILITY;
    }
    if (asAttributes.getBoolean(com.android.internal.R.styleable.AccessibilityService_canRequestFilterKeyEvents,false)) {
      mCapabilities|=CAPABILITY_CAN_REQUEST_FILTER_KEY_EVENTS;
    }
    if (asAttributes.getBoolean(com.android.internal.R.styleable.AccessibilityService_canControlMagnification,false)) {
      mCapabilities|=CAPABILITY_CAN_CONTROL_MAGNIFICATION;
    }
    if (asAttributes.getBoolean(com.android.internal.R.styleable.AccessibilityService_canPerformGestures,false)) {
      mCapabilities|=CAPABILITY_CAN_PERFORM_GESTURES;
    }
    TypedValue peekedValue=asAttributes.peekValue(com.android.internal.R.styleable.AccessibilityService_description);
    if (peekedValue != null) {
      mDescriptionResId=peekedValue.resourceId;
      CharSequence nonLocalizedDescription=peekedValue.coerceToString();
      if (nonLocalizedDescription != null) {
        mNonLocalizedDescription=nonLocalizedDescription.toString().trim();
      }
    }
    asAttributes.recycle();
  }
 catch (  NameNotFoundException e) {
    throw new XmlPullParserException("Unable to create context for: " + serviceInfo.packageName);
  }
 finally {
    if (parser != null) {
      parser.close();
    }
  }
}
