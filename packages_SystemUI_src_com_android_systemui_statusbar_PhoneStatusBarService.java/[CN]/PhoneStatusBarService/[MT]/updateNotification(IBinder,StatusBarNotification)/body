{
  Slog.d(TAG,"updateNotification key=" + key + " notification="+ notification);
  NotificationData oldList;
  int oldIndex=mOngoing.findEntry(key);
  if (oldIndex >= 0) {
    oldList=mOngoing;
  }
 else {
    oldIndex=mLatest.findEntry(key);
    if (oldIndex < 0) {
      Slog.w(TAG,"updateNotification for unknown key: " + key);
      return;
    }
    oldList=mLatest;
  }
  final NotificationData.Entry oldEntry=oldList.getEntryAt(oldIndex);
  final StatusBarNotification oldNotification=oldEntry.notification;
  final RemoteViews oldContentView=oldNotification.notification.contentView;
  final RemoteViews contentView=notification.notification.contentView;
  if (notification.notification.when == oldNotification.notification.when && notification.isOngoing() == oldNotification.isOngoing() && oldEntry.expanded != null && contentView != null && oldContentView != null && contentView.getPackage() != null && oldContentView.getPackage() != null && oldContentView.getPackage().equals(contentView.getPackage()) && oldContentView.getLayoutId() == contentView.getLayoutId()) {
    Slog.d(TAG,"reusing notification");
    oldEntry.notification=notification;
    try {
      contentView.reapply(this,oldEntry.content);
      final PendingIntent contentIntent=notification.notification.contentIntent;
      if (contentIntent != null) {
        oldEntry.content.setOnClickListener(new Launcher(contentIntent,notification.pkg,notification.tag,notification.id));
      }
    }
 catch (    RuntimeException e) {
      Slog.w(TAG,"Couldn't reapply views for package " + contentView.getPackage(),e);
      removeNotificationViews(key);
      addNotificationViews(key,notification);
    }
    oldEntry.icon.set(new StatusBarIcon(notification.pkg,notification.notification.icon,notification.notification.iconLevel,notification.notification.number));
  }
 else {
    Slog.d(TAG,"not reusing notification");
    removeNotificationViews(key);
    addNotificationViews(key,notification);
  }
  setAreThereNotifications();
  updateExpandedViewPos(EXPANDED_LEAVE_ALONE);
}
