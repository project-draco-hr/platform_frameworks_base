{
  Details details=new Details(inCallCall.getHandle(),inCallCall.getHandlePresentation(),inCallCall.getCallerDisplayName(),inCallCall.getCallerDisplayNamePresentation(),inCallCall.getAccount(),inCallCall.getCapabilities(),inCallCall.getDisconnectCauseCode(),inCallCall.getDisconnectCauseMsg(),inCallCall.getConnectTimeMillis(),inCallCall.getGatewayInfo());
  boolean detailsChanged=!Objects.equals(mDetails,details);
  if (detailsChanged) {
    mDetails=details;
  }
  boolean cannedTextResponsesChanged=false;
  if (mCannedTextResponses == null && inCallCall.getCannedSmsResponses() != null && !inCallCall.getCannedSmsResponses().isEmpty()) {
    mCannedTextResponses=Collections.unmodifiableList(inCallCall.getCannedSmsResponses());
  }
  boolean callVideoProviderChanged=false;
  try {
    callVideoProviderChanged=!Objects.equals(mCallVideoProvider,inCallCall.getCallVideoProvider());
    if (callVideoProviderChanged) {
      mCallVideoProvider=inCallCall.getCallVideoProvider();
    }
  }
 catch (  RemoteException e) {
  }
  int state=stateFromInCallCallState(inCallCall.getState());
  boolean stateChanged=mState != state;
  if (stateChanged) {
    mState=state;
  }
  if (inCallCall.getParentCallId() != null) {
    mParent=mPhone.internalGetCallByTelecommId(inCallCall.getParentCallId());
  }
  mChildren.clear();
  if (inCallCall.getChildCallIds() != null) {
    for (int i=0; i < inCallCall.getChildCallIds().size(); i++) {
      mChildren.add(mPhone.internalGetCallByTelecommId(inCallCall.getChildCallIds().get(i)));
    }
  }
  if (stateChanged) {
    fireStateChanged(mState);
  }
  if (detailsChanged) {
    fireDetailsChanged(mDetails);
  }
  if (cannedTextResponsesChanged) {
    fireCannedTextResponsesLoaded(mCannedTextResponses);
  }
  if (callVideoProviderChanged) {
    fireCallVideoProviderChanged(mCallVideoProvider);
  }
  if (mState == STATE_DISCONNECTED) {
    fireCallDestroyed();
    mPhone.internalRemoveCall(this);
  }
}
