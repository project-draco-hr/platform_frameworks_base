{
  Unmarshaller unmarshaller=null;
  for (  Element element : roundEnv.getElementsAnnotatedWith(BinderBundle.class)) {
    if (element.getKind() != ElementKind.CLASS) {
      processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR,"BinderBundle associated with wrong type. Should be a class.",element);
      continue;
    }
    ByteArrayInputStream in=null;
    try {
      if (unmarshaller == null) {
        JAXBContext context=JAXBContext.newInstance(ResourceBundle.LayoutFileBundle.class);
        unmarshaller=context.createUnmarshaller();
      }
      BinderBundle binderBundle=element.getAnnotation(BinderBundle.class);
      String binderBundle64=binderBundle.value();
      byte[] buf=Base64.decodeBase64(binderBundle64);
      in=new ByteArrayInputStream(buf);
      Reader reader=new InputStreamReader(in);
      ResourceBundle.LayoutFileBundle layoutFileBundle=(ResourceBundle.LayoutFileBundle)unmarshaller.unmarshal(reader);
      resourceBundle.addLayoutBundle(layoutFileBundle,layoutFileBundle.getLayoutId());
    }
 catch (    Exception e) {
      StringWriter stringWriter=new StringWriter();
      e.printStackTrace(new PrintWriter(stringWriter));
      processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR,"Could not generate Binders from binder data store: " + stringWriter.getBuffer().toString(),element);
    }
 finally {
      if (in != null) {
        IOUtils.closeQuietly(in);
      }
    }
  }
  CompilerChef compilerChef=CompilerChef.createChef(resourceBundle,new AnnotationJavaFileWriter(processingEnv));
  compilerChef.writeDbrFile();
  compilerChef.writeViewBinderInterfaces();
  compilerChef.writeViewBinders();
}
