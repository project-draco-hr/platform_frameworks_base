{
  if (TextUtils.isEmpty(spec))   return null;
  try {
    final PulseSchedule rt=new PulseSchedule();
    rt.mSpec=spec;
    final String[] tokens=spec.split(",");
    rt.mSchedule=new int[tokens.length];
    for (int i=0; i < tokens.length; i++) {
      final Matcher m=PATTERN.matcher(tokens[i]);
      if (!m.matches())       throw new IllegalArgumentException("Bad token: " + tokens[i]);
      rt.mSchedule[i]=Integer.parseInt(m.group(1));
    }
    if (DEBUG)     Log.d(TAG,"Parsed spec [" + spec + "] as: "+ rt);
    return rt;
  }
 catch (  RuntimeException e) {
    Log.w(TAG,"Error parsing spec: " + spec,e);
    return null;
  }
}
