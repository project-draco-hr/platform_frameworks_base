{
  if (!mDependencyDirty) {
    boolean durationChanged=false;
    for (int i=0; i < mNodes.size(); i++) {
      Animator anim=mNodes.get(i).mAnimation;
      if (mNodes.get(i).mTotalDuration != anim.getTotalDuration()) {
        durationChanged=true;
        break;
      }
    }
    if (!durationChanged) {
      return;
    }
  }
  mDependencyDirty=false;
  int size=mNodes.size();
  for (int i=0; i < size; i++) {
    mNodes.get(i).mParentsAdded=false;
  }
  for (int i=0; i < size; i++) {
    Node node=mNodes.get(i);
    if (node.mParentsAdded) {
      continue;
    }
    node.mParentsAdded=true;
    if (node.mSiblings == null) {
      continue;
    }
    findSiblings(node,node.mSiblings);
    node.mSiblings.remove(node);
    int siblingSize=node.mSiblings.size();
    for (int j=0; j < siblingSize; j++) {
      node.addParents(node.mSiblings.get(j).mParents);
    }
    for (int j=0; j < siblingSize; j++) {
      Node sibling=node.mSiblings.get(j);
      sibling.addParents(node.mParents);
      sibling.mParentsAdded=true;
    }
  }
  for (int i=0; i < size; i++) {
    Node node=mNodes.get(i);
    if (node != mRootNode && node.mParents == null) {
      node.addParent(mRootNode);
    }
  }
  ArrayList<Node> visited=new ArrayList<Node>(mNodes.size());
  mRootNode.mStartTime=0;
  mRootNode.mEndTime=mDelayAnim.getDuration();
  updatePlayTime(mRootNode,visited);
  long maxEndTime=0;
  for (int i=0; i < size; i++) {
    Node node=mNodes.get(i);
    node.mTotalDuration=node.mAnimation.getTotalDuration();
    if (node.mEndTime == DURATION_INFINITE) {
      maxEndTime=DURATION_INFINITE;
      break;
    }
 else {
      maxEndTime=node.mEndTime > maxEndTime ? node.mEndTime : maxEndTime;
    }
  }
  mTotalDuration=maxEndTime;
}
