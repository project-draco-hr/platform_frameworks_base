{
  mCanceled=false;
  sortNodes();
  final ArrayList<Node> nodesToStart=new ArrayList<Node>();
  int numSortedNodes=mSortedNodes.size();
  for (int i=0; i < numSortedNodes; ++i) {
    Node node=mSortedNodes.get(i);
    if (mSetListener == null) {
      mSetListener=new AnimatorSetListener(this);
    }
    if (node.dependencies == null || node.dependencies.size() == 0) {
      nodesToStart.add(node);
    }
 else {
      int numDependencies=node.dependencies.size();
      for (int j=0; j < numDependencies; ++j) {
        Dependency dependency=node.dependencies.get(j);
        dependency.node.animation.addListener(new DependencyListener(this,node,dependency.rule));
      }
      node.tmpDependencies=(ArrayList<Dependency>)node.dependencies.clone();
    }
    node.animation.addListener(mSetListener);
  }
  if (mStartDelay <= 0) {
    for (    Node node : nodesToStart) {
      node.animation.start();
      mPlayingSet.add(node.animation);
    }
  }
 else {
    ValueAnimator delayAnim=ValueAnimator.ofFloat(0f,1f);
    delayAnim.setDuration(mStartDelay);
    delayAnim.addListener(new AnimatorListenerAdapter(){
      public void onAnimationEnd(      Animator anim){
        int numNodes=nodesToStart.size();
        for (int i=0; i < numNodes; ++i) {
          Node node=nodesToStart.get(i);
          node.animation.start();
          mPlayingSet.add(node.animation);
        }
      }
    }
);
  }
  if (mListeners != null) {
    ArrayList<AnimatorListener> tmpListeners=(ArrayList<AnimatorListener>)mListeners.clone();
    int numListeners=tmpListeners.size();
    for (int i=0; i < numListeners; ++i) {
      tmpListeners.get(i).onAnimationStart(this);
    }
  }
}
