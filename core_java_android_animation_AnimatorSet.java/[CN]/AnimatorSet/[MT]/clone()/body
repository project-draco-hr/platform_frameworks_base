{
  final AnimatorSet anim=(AnimatorSet)super.clone();
  final int nodeCount=mNodes.size();
  anim.mNeedsSort=true;
  anim.mTerminated=false;
  anim.mStarted=false;
  anim.mPlayingSet=new ArrayList<Animator>();
  anim.mNodeMap=new HashMap<Animator,Node>();
  anim.mNodes=new ArrayList<Node>(nodeCount);
  anim.mSortedNodes=new ArrayList<Node>(nodeCount);
  anim.mReversible=mReversible;
  anim.mSetListener=null;
  for (int n=0; n < nodeCount; n++) {
    final Node node=mNodes.get(n);
    Node nodeClone=node.clone();
    node.mTmpClone=nodeClone;
    anim.mNodes.add(nodeClone);
    anim.mNodeMap.put(nodeClone.animation,nodeClone);
    nodeClone.dependencies=null;
    nodeClone.tmpDependencies=null;
    nodeClone.nodeDependents=null;
    nodeClone.nodeDependencies=null;
    final ArrayList<AnimatorListener> cloneListeners=nodeClone.animation.getListeners();
    if (cloneListeners != null) {
      for (int i=cloneListeners.size() - 1; i >= 0; i--) {
        final AnimatorListener listener=cloneListeners.get(i);
        if (listener instanceof AnimatorSetListener) {
          cloneListeners.remove(i);
        }
      }
    }
  }
  for (int n=0; n < nodeCount; n++) {
    final Node node=mNodes.get(n);
    final Node clone=node.mTmpClone;
    if (node.dependencies != null) {
      clone.dependencies=new ArrayList<Dependency>(node.dependencies.size());
      final int depSize=node.dependencies.size();
      for (int i=0; i < depSize; i++) {
        final Dependency dependency=node.dependencies.get(i);
        Dependency cloneDependency=new Dependency(dependency.node.mTmpClone,dependency.rule);
        clone.dependencies.add(cloneDependency);
      }
    }
    if (node.nodeDependents != null) {
      clone.nodeDependents=new ArrayList<Node>(node.nodeDependents.size());
      for (      Node dep : node.nodeDependents) {
        clone.nodeDependents.add(dep.mTmpClone);
      }
    }
    if (node.nodeDependencies != null) {
      clone.nodeDependencies=new ArrayList<Node>(node.nodeDependencies.size());
      for (      Node dep : node.nodeDependencies) {
        clone.nodeDependencies.add(dep.mTmpClone);
      }
    }
  }
  for (int n=0; n < nodeCount; n++) {
    mNodes.get(n).mTmpClone=null;
  }
  return anim;
}
