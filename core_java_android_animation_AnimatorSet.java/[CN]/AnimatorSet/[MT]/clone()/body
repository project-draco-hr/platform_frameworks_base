{
  final AnimatorSet anim=(AnimatorSet)super.clone();
  final int nodeCount=mNodes.size();
  anim.mTerminated=false;
  anim.mStarted=false;
  anim.mPlayingSet=new ArrayList<Animator>();
  anim.mNodeMap=new ArrayMap<Animator,Node>();
  anim.mNodes=new ArrayList<Node>(nodeCount);
  anim.mReversible=mReversible;
  anim.mSetListener=new AnimatorSetListener(anim);
  for (int n=0; n < nodeCount; n++) {
    final Node node=mNodes.get(n);
    Node nodeClone=node.clone();
    node.mTmpClone=nodeClone;
    anim.mNodes.add(nodeClone);
    anim.mNodeMap.put(nodeClone.mAnimation,nodeClone);
    final ArrayList<AnimatorListener> cloneListeners=nodeClone.mAnimation.getListeners();
    if (cloneListeners != null) {
      for (int i=cloneListeners.size() - 1; i >= 0; i--) {
        final AnimatorListener listener=cloneListeners.get(i);
        if (listener instanceof AnimatorSetListener) {
          cloneListeners.remove(i);
        }
      }
    }
  }
  anim.mRootNode=mRootNode.mTmpClone;
  anim.mDelayAnim=(ValueAnimator)anim.mRootNode.mAnimation;
  for (int i=0; i < nodeCount; i++) {
    Node node=mNodes.get(i);
    node.mTmpClone.mLatestParent=node.mLatestParent == null ? null : node.mLatestParent.mTmpClone;
    int size=node.mChildNodes == null ? 0 : node.mChildNodes.size();
    for (int j=0; j < size; j++) {
      node.mTmpClone.mChildNodes.set(j,node.mChildNodes.get(j).mTmpClone);
    }
    size=node.mSiblings == null ? 0 : node.mSiblings.size();
    for (int j=0; j < size; j++) {
      node.mTmpClone.mSiblings.set(j,node.mSiblings.get(j).mTmpClone);
    }
    size=node.mParents == null ? 0 : node.mParents.size();
    for (int j=0; j < size; j++) {
      node.mTmpClone.mParents.set(j,node.mParents.get(j).mTmpClone);
    }
  }
  for (int n=0; n < nodeCount; n++) {
    mNodes.get(n).mTmpClone=null;
  }
  return anim;
}
