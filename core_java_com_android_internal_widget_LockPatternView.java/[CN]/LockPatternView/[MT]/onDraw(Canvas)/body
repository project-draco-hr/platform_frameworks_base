{
  final ArrayList<Cell> pattern=mPattern;
  final int count=pattern.size();
  final boolean[][] drawLookup=mPatternDrawLookup;
  if (mPatternDisplayMode == DisplayMode.Animate) {
    final int oneCycle=(count + 1) * MILLIS_PER_CIRCLE_ANIMATING;
    final int spotInCycle=(int)(SystemClock.elapsedRealtime() - mAnimatingPeriodStart) % oneCycle;
    final int numCircles=spotInCycle / MILLIS_PER_CIRCLE_ANIMATING;
    clearPatternDrawLookup();
    for (int i=0; i < numCircles; i++) {
      final Cell cell=pattern.get(i);
      drawLookup[cell.getRow()][cell.getColumn()]=true;
    }
    final boolean needToUpdateInProgressPoint=numCircles > 0 && numCircles < count;
    if (needToUpdateInProgressPoint) {
      final float percentageOfNextCircle=((float)(spotInCycle % MILLIS_PER_CIRCLE_ANIMATING)) / MILLIS_PER_CIRCLE_ANIMATING;
      final Cell currentCell=pattern.get(numCircles - 1);
      final float centerX=getCenterXForColumn(currentCell.column);
      final float centerY=getCenterYForRow(currentCell.row);
      final Cell nextCell=pattern.get(numCircles);
      final float dx=percentageOfNextCircle * (getCenterXForColumn(nextCell.column) - centerX);
      final float dy=percentageOfNextCircle * (getCenterYForRow(nextCell.row) - centerY);
      mInProgressX=centerX + dx;
      mInProgressY=centerY + dy;
    }
    invalidate();
  }
  final Path currentPath=mCurrentPath;
  currentPath.rewind();
  for (int i=0; i < 3; i++) {
    float centerY=getCenterYForRow(i);
    for (int j=0; j < 3; j++) {
      CellState cellState=mCellStates[i][j];
      float centerX=getCenterXForColumn(j);
      float size=cellState.size * cellState.scale;
      float translationY=cellState.translateY;
      drawCircle(canvas,(int)centerX,(int)centerY + translationY,size,drawLookup[i][j],cellState.alpha);
    }
  }
  final boolean drawPath=!mInStealthMode;
  if (drawPath) {
    mPathPaint.setColor(getCurrentColor(true));
    boolean anyCircles=false;
    float lastX=0f;
    float lastY=0f;
    for (int i=0; i < count; i++) {
      Cell cell=pattern.get(i);
      if (!drawLookup[cell.row][cell.column]) {
        break;
      }
      anyCircles=true;
      float centerX=getCenterXForColumn(cell.column);
      float centerY=getCenterYForRow(cell.row);
      if (i != 0) {
        CellState state=mCellStates[cell.row][cell.column];
        currentPath.rewind();
        currentPath.moveTo(lastX,lastY);
        if (state.lineEndX != Float.MIN_VALUE && state.lineEndY != Float.MIN_VALUE) {
          currentPath.lineTo(state.lineEndX,state.lineEndY);
        }
 else {
          currentPath.lineTo(centerX,centerY);
        }
        canvas.drawPath(currentPath,mPathPaint);
      }
      lastX=centerX;
      lastY=centerY;
    }
    if ((mPatternInProgress || mPatternDisplayMode == DisplayMode.Animate) && anyCircles) {
      currentPath.rewind();
      currentPath.moveTo(lastX,lastY);
      currentPath.lineTo(mInProgressX,mInProgressY);
      mPathPaint.setAlpha((int)(calculateLastSegmentAlpha(mInProgressX,mInProgressY,lastX,lastY) * 255f));
      canvas.drawPath(currentPath,mPathPaint);
    }
  }
}
