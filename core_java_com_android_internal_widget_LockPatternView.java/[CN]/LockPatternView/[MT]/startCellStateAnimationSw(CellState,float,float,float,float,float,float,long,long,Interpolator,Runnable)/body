{
  cellState.alpha=startAlpha;
  cellState.translationY=startTranslationY;
  cellState.radius=mDotSize / 2 * startScale;
  ValueAnimator animator=ValueAnimator.ofFloat(0f,1f);
  animator.setDuration(duration);
  animator.setStartDelay(delay);
  animator.setInterpolator(interpolator);
  animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    ValueAnimator animation){
      float t=(float)animation.getAnimatedValue();
      cellState.alpha=(1 - t) * startAlpha + t * endAlpha;
      cellState.translationY=(1 - t) * startTranslationY + t * endTranslationY;
      cellState.radius=mDotSize / 2 * ((1 - t) * startScale + t * endScale);
      invalidate();
    }
  }
);
  animator.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      if (finishRunnable != null) {
        finishRunnable.run();
      }
    }
  }
);
  animator.start();
}
