{
  if (mAnimation != null) {
    return false;
  }
  mCurrentX=x;
  mCurrentY=y;
  WindowState touchedWin=mDisplayContent.getTouchableWinAtPointLocked(x,y);
  if (!isWindowNotified(touchedWin)) {
    mDragResult=false;
    return true;
  }
  if (DEBUG_DRAG) {
    Slog.d(TAG_WM,"sending DROP to " + touchedWin);
  }
  final int targetUserId=UserHandle.getUserId(touchedWin.getOwningUid());
  DragAndDropPermissionsHandler dragAndDropPermissions=null;
  if ((mFlags & View.DRAG_FLAG_GLOBAL) != 0 && (mFlags & DRAG_FLAGS_URI_ACCESS) != 0) {
    dragAndDropPermissions=new DragAndDropPermissionsHandler(mData,mUid,touchedWin.getOwningPackage(),mFlags & DRAG_FLAGS_URI_PERMISSIONS,mSourceUserId,targetUserId);
  }
  if (mSourceUserId != targetUserId) {
    mData.fixUris(mSourceUserId);
  }
  final int myPid=Process.myPid();
  final IBinder token=touchedWin.mClient.asBinder();
  DragEvent evt=obtainDragEvent(touchedWin,DragEvent.ACTION_DROP,x,y,null,null,mData,dragAndDropPermissions,false);
  try {
    touchedWin.mClient.dispatchDragEvent(evt);
    mService.mH.removeMessages(H.DRAG_END_TIMEOUT,token);
    Message msg=mService.mH.obtainMessage(H.DRAG_END_TIMEOUT,token);
    mService.mH.sendMessageDelayed(msg,5000);
  }
 catch (  RemoteException e) {
    Slog.w(TAG_WM,"can't send drop notification to win " + touchedWin);
    return true;
  }
 finally {
    if (myPid != touchedWin.mSession.mPid) {
      evt.recycle();
    }
  }
  mToken=token;
  return false;
}
