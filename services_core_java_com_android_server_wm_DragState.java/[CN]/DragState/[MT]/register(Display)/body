{
  mDisplay=display;
  if (WindowManagerService.DEBUG_DRAG)   Slog.d(WindowManagerService.TAG,"registering drag input channel");
  if (mClientChannel != null) {
    Slog.e(WindowManagerService.TAG,"Duplicate register of drag input channel");
  }
 else {
    InputChannel[] channels=InputChannel.openInputChannelPair("drag");
    mServerChannel=channels[0];
    mClientChannel=channels[1];
    mService.mInputManager.registerInputChannel(mServerChannel,null);
    mInputEventReceiver=mService.new DragInputEventReceiver(mClientChannel,mService.mH.getLooper());
    mDragApplicationHandle=new InputApplicationHandle(null);
    mDragApplicationHandle.name="drag";
    mDragApplicationHandle.dispatchingTimeoutNanos=WindowManagerService.DEFAULT_INPUT_DISPATCHING_TIMEOUT_NANOS;
    mDragWindowHandle=new InputWindowHandle(mDragApplicationHandle,null,mDisplay.getDisplayId());
    mDragWindowHandle.name="drag";
    mDragWindowHandle.inputChannel=mServerChannel;
    mDragWindowHandle.layer=getDragLayerLw();
    mDragWindowHandle.layoutParamsFlags=0;
    mDragWindowHandle.layoutParamsPrivateFlags=0;
    mDragWindowHandle.layoutParamsType=WindowManager.LayoutParams.TYPE_DRAG;
    mDragWindowHandle.dispatchingTimeoutNanos=WindowManagerService.DEFAULT_INPUT_DISPATCHING_TIMEOUT_NANOS;
    mDragWindowHandle.visible=true;
    mDragWindowHandle.canReceiveKeys=false;
    mDragWindowHandle.hasFocus=true;
    mDragWindowHandle.hasWallpaper=false;
    mDragWindowHandle.paused=false;
    mDragWindowHandle.ownerPid=Process.myPid();
    mDragWindowHandle.ownerUid=Process.myUid();
    mDragWindowHandle.inputFeatures=0;
    mDragWindowHandle.scaleFactor=1.0f;
    mDragWindowHandle.touchableRegion.setEmpty();
    mDragWindowHandle.frameLeft=0;
    mDragWindowHandle.frameTop=0;
    Point p=new Point();
    mDisplay.getRealSize(p);
    mDragWindowHandle.frameRight=p.x;
    mDragWindowHandle.frameBottom=p.y;
    if (WindowManagerService.DEBUG_ORIENTATION) {
      Slog.d(WindowManagerService.TAG,"Pausing rotation during drag");
    }
    mService.pauseRotationLocked();
  }
}
