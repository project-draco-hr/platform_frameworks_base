{
  if (mNumber == 0) {
    return 0;
  }
  if (mNumber == 1) {
    return mRadii[0];
  }
  double cLat=getCentroidLat();
  double cLng=getCentroidLng();
  int meanDistanceSum=0;
  int smallestCircle=MAX_ACCURACY_ALLOWED;
  int smallestCircleDistance=MAX_ACCURACY_ALLOWED;
  float[] distance=new float[1];
  boolean outlierExists=false;
  for (int i=0; i < mNumber; i++) {
    Location.distanceBetween(cLat,cLng,mLats[i],mLngs[i],distance);
    meanDistanceSum+=(int)distance[0];
    if (distance[0] > mRadii[i]) {
      outlierExists=true;
    }
    if (mRadii[i] < smallestCircle) {
      smallestCircle=mRadii[i];
      smallestCircleDistance=(int)distance[0];
    }
  }
  if (outlierExists) {
    return meanDistanceSum / mNumber;
  }
 else {
    return Math.max(smallestCircle,smallestCircleDistance);
  }
}
