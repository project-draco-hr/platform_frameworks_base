{
  if (fd == null) {
    throw new IOException("socket not created");
  }
  try {
    Object toReturn;
switch (optID) {
case SocketOptions.SO_TIMEOUT:
      StructTimeval timeval=Os.getsockoptTimeval(fd,OsConstants.SOL_SOCKET,OsConstants.SO_SNDTIMEO);
    toReturn=(int)timeval.toMillis();
  break;
case SocketOptions.SO_RCVBUF:
case SocketOptions.SO_SNDBUF:
case SocketOptions.SO_REUSEADDR:
int osOpt=javaSoToOsOpt(optID);
toReturn=Os.getsockoptInt(fd,OsConstants.SOL_SOCKET,osOpt);
break;
case SocketOptions.SO_LINGER:
StructLinger linger=Os.getsockoptLinger(fd,OsConstants.SOL_SOCKET,OsConstants.SO_LINGER);
if (!linger.isOn()) {
toReturn=-1;
}
 else {
toReturn=linger.l_linger;
}
break;
case SocketOptions.TCP_NODELAY:
toReturn=Os.getsockoptInt(fd,OsConstants.IPPROTO_TCP,OsConstants.TCP_NODELAY);
break;
default :
throw new IOException("Unknown option: " + optID);
}
return toReturn;
}
 catch (ErrnoException e) {
throw e.rethrowAsIOException();
}
}
