{
  int audcodec=0;
  int vidcodec=0;
  if (filename == null) {
    throw new IllegalArgumentException("export: filename is null");
  }
  final File tempPathFile=new File(filename);
  if (tempPathFile == null) {
    throw new IOException(filename + "can not be created");
  }
  if (mMediaItems.size() == 0) {
    throw new IllegalStateException("No MediaItems added");
  }
switch (height) {
case MediaProperties.HEIGHT_144:
    break;
case MediaProperties.HEIGHT_288:
  break;
case MediaProperties.HEIGHT_360:
break;
case MediaProperties.HEIGHT_480:
break;
case MediaProperties.HEIGHT_720:
break;
case MediaProperties.HEIGHT_1080:
break;
default :
{
String message="Unsupported height value " + height;
throw new IllegalArgumentException(message);
}
}
switch (bitrate) {
case MediaProperties.BITRATE_28K:
break;
case MediaProperties.BITRATE_40K:
break;
case MediaProperties.BITRATE_64K:
break;
case MediaProperties.BITRATE_96K:
break;
case MediaProperties.BITRATE_128K:
break;
case MediaProperties.BITRATE_192K:
break;
case MediaProperties.BITRATE_256K:
break;
case MediaProperties.BITRATE_384K:
break;
case MediaProperties.BITRATE_512K:
break;
case MediaProperties.BITRATE_800K:
break;
case MediaProperties.BITRATE_2M:
break;
case MediaProperties.BITRATE_5M:
break;
case MediaProperties.BITRATE_8M:
break;
default :
{
final String message="Unsupported bitrate value " + bitrate;
throw new IllegalArgumentException(message);
}
}
computeTimelineDuration();
final long audioBitrate=MediaArtistNativeHelper.Bitrate.BR_96_KBPS;
final long fileSize=(mDurationMs * (bitrate + audioBitrate)) / 8000;
if (MAX_SUPPORTED_FILE_SIZE <= fileSize) {
throw new IllegalStateException("Export Size is more than 2GB");
}
switch (audioCodec) {
case MediaProperties.ACODEC_AAC_LC:
audcodec=MediaArtistNativeHelper.AudioFormat.AAC;
break;
case MediaProperties.ACODEC_AMRNB:
audcodec=MediaArtistNativeHelper.AudioFormat.AMR_NB;
break;
default :
{
String message="Unsupported audio codec type " + audioCodec;
throw new IllegalArgumentException(message);
}
}
switch (videoCodec) {
case MediaProperties.VCODEC_H263:
vidcodec=MediaArtistNativeHelper.VideoFormat.H263;
break;
case MediaProperties.VCODEC_H264:
vidcodec=MediaArtistNativeHelper.VideoFormat.H264;
break;
case MediaProperties.VCODEC_MPEG4:
vidcodec=MediaArtistNativeHelper.VideoFormat.MPEG4;
break;
default :
{
String message="Unsupported video codec type " + videoCodec;
throw new IllegalArgumentException(message);
}
}
boolean semAcquireDone=false;
try {
lock();
semAcquireDone=true;
if (mMANativeHelper == null) {
throw new IllegalStateException("The video editor is not initialized");
}
mMANativeHelper.setAudioCodec(audcodec);
mMANativeHelper.setVideoCodec(vidcodec);
mMANativeHelper.export(filename,mProjectPath,height,bitrate,mMediaItems,mTransitions,mAudioTracks,listener);
}
 catch (InterruptedException ex) {
Log.e(TAG,"Sem acquire NOT successful in export");
}
 finally {
if (semAcquireDone) {
unlock();
}
}
}
