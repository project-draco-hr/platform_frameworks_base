{
  if ((new File(mProjectPath + "/" + THUMBNAIL_FILENAME)).exists()) {
    (new File(mProjectPath + "/" + THUMBNAIL_FILENAME)).delete();
  }
  if (mMediaItems.size() > 0) {
    MediaItem mI=mMediaItems.get(0);
    int height=480;
    int width=854;
switch (mI.getAspectRatio()) {
case MediaProperties.ASPECT_RATIO_3_2:
      width=720;
    break;
case MediaProperties.ASPECT_RATIO_4_3:
  width=640;
break;
case MediaProperties.ASPECT_RATIO_5_3:
width=800;
break;
case MediaProperties.ASPECT_RATIO_11_9:
width=586;
break;
case MediaProperties.ASPECT_RATIO_16_9:
case MediaProperties.ASPECT_RATIO_UNDEFINED:
break;
}
Bitmap projectBitmap=null;
String filename=mI.getFilename();
if (mI instanceof MediaVideoItem) {
MediaMetadataRetriever retriever=new MediaMetadataRetriever();
retriever.setDataSource(filename);
Bitmap bitmap=retriever.getFrameAtTime();
retriever.release();
retriever=null;
if (bitmap == null) {
String msg="Thumbnail extraction from " + filename + " failed";
throw new IllegalArgumentException(msg);
}
projectBitmap=Bitmap.createScaledBitmap(bitmap,width,height,true);
}
 else {
try {
projectBitmap=mI.getThumbnail(width,height,500);
}
 catch (IllegalArgumentException e) {
String msg="Project thumbnail extraction from " + filename + " failed";
throw new IllegalArgumentException(msg);
}
catch (IOException e) {
String msg="IO Error creating project thumbnail";
throw new IllegalArgumentException(msg);
}
}
try {
FileOutputStream stream=new FileOutputStream(mProjectPath + "/" + THUMBNAIL_FILENAME);
projectBitmap.compress(Bitmap.CompressFormat.JPEG,100,stream);
stream.flush();
stream.close();
}
 catch (IOException e) {
throw new IllegalArgumentException("Error creating project thumbnail");
}
 finally {
projectBitmap.recycle();
}
}
}
