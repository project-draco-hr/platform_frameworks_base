{
  char[] out=new char[end - start];
  int outidx=0;
  boolean changed=false;
  onStart();
  for (int i=0; i < dstart; i++) {
    char c=dest.charAt(i);
    if (!isAllowed(c))     onInvalidCharacter(c);
  }
  for (int i=start; i < end; i++) {
    char c=source.charAt(i);
    if (isAllowed(c)) {
      out[outidx++]=c;
    }
 else {
      if (mAppendInvalid)       out[outidx++]=c;
 else       changed=true;
      onInvalidCharacter(c);
    }
  }
  for (int i=dend; i < dest.length(); i++) {
    char c=dest.charAt(i);
    if (!isAllowed(c))     onInvalidCharacter(c);
  }
  onStop();
  if (!changed) {
    return null;
  }
  String s=new String(out,0,outidx);
  if (source instanceof Spanned) {
    SpannableString sp=new SpannableString(s);
    TextUtils.copySpansFrom((Spanned)source,start,end,null,sp,0);
    return sp;
  }
 else {
    return s;
  }
}
