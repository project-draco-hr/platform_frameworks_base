{
  final int level=mLevel;
  if (level == -1)   return;
  float drawFrac=(float)level / 100f;
  final int height=mHeight;
  final int width=(int)(ASPECT_RATIO * mHeight);
  int px=(mWidth - width) / 2;
  final int buttonHeight=(int)(height * mButtonHeightFraction);
  mFrame.set(0,0,width,height);
  mFrame.offset(px,0);
  mButtonFrame.set(mFrame.left + Math.round(width * 0.25f),mFrame.top,mFrame.right - Math.round(width * 0.25f),mFrame.top + buttonHeight);
  mButtonFrame.top+=mSubpixelSmoothingLeft;
  mButtonFrame.left+=mSubpixelSmoothingLeft;
  mButtonFrame.right-=mSubpixelSmoothingRight;
  mFrame.top+=buttonHeight;
  mFrame.left+=mSubpixelSmoothingLeft;
  mFrame.top+=mSubpixelSmoothingLeft;
  mFrame.right-=mSubpixelSmoothingRight;
  mFrame.bottom-=mSubpixelSmoothingRight;
  mBatteryPaint.setColor(mPluggedIn ? mChargeColor : getColorForLevel(level));
  if (level >= FULL) {
    drawFrac=1f;
  }
 else   if (level <= mCriticalLevel) {
    drawFrac=0f;
  }
  final float levelTop=drawFrac == 1f ? mButtonFrame.top : (mFrame.top + (mFrame.height() * (1f - drawFrac)));
  mShapePath.reset();
  mShapePath.moveTo(mButtonFrame.left,mButtonFrame.top);
  mShapePath.lineTo(mButtonFrame.right,mButtonFrame.top);
  mShapePath.lineTo(mButtonFrame.right,mFrame.top);
  mShapePath.lineTo(mFrame.right,mFrame.top);
  mShapePath.lineTo(mFrame.right,mFrame.bottom);
  mShapePath.lineTo(mFrame.left,mFrame.bottom);
  mShapePath.lineTo(mFrame.left,mFrame.top);
  mShapePath.lineTo(mButtonFrame.left,mFrame.top);
  mShapePath.lineTo(mButtonFrame.left,mButtonFrame.top);
  if (mPluggedIn) {
    final float bl=mFrame.left + mFrame.width() / 4.5f;
    final float bt=mFrame.top + mFrame.height() / 6f;
    final float br=mFrame.right - mFrame.width() / 7f;
    final float bb=mFrame.bottom - mFrame.height() / 10f;
    if (mBoltFrame.left != bl || mBoltFrame.top != bt || mBoltFrame.right != br || mBoltFrame.bottom != bb) {
      mBoltFrame.set(bl,bt,br,bb);
      mBoltPath.reset();
      mBoltPath.moveTo(mBoltFrame.left + mBoltPoints[0] * mBoltFrame.width(),mBoltFrame.top + mBoltPoints[1] * mBoltFrame.height());
      for (int i=2; i < mBoltPoints.length; i+=2) {
        mBoltPath.lineTo(mBoltFrame.left + mBoltPoints[i] * mBoltFrame.width(),mBoltFrame.top + mBoltPoints[i + 1] * mBoltFrame.height());
      }
      mBoltPath.lineTo(mBoltFrame.left + mBoltPoints[0] * mBoltFrame.width(),mBoltFrame.top + mBoltPoints[1] * mBoltFrame.height());
    }
    float boltPct=(mBoltFrame.bottom - levelTop) / (mBoltFrame.bottom - mBoltFrame.top);
    boltPct=Math.min(Math.max(boltPct,0),1);
    if (boltPct <= BOLT_LEVEL_THRESHOLD) {
      c.drawPath(mBoltPath,mBoltPaint);
    }
 else {
      mShapePath.op(mBoltPath,Path.Op.DIFFERENCE);
    }
  }
  boolean pctOpaque=false;
  float pctX=0, pctY=0;
  String pctText=null;
  if (!mPluggedIn && level > mCriticalLevel && mShowPercent) {
    mTextPaint.setColor(getColorForLevel(level));
    mTextPaint.setTextSize(height * (SINGLE_DIGIT_PERCENT ? 0.75f : (mLevel == 100 ? 0.38f : 0.5f)));
    mTextHeight=-mTextPaint.getFontMetrics().ascent;
    pctText=String.valueOf(SINGLE_DIGIT_PERCENT ? (level / 10) : level);
    pctX=mWidth * 0.5f;
    pctY=(mHeight + mTextHeight) * 0.47f;
    pctOpaque=levelTop > pctY;
    if (!pctOpaque) {
      mTextPath.reset();
      mTextPaint.getTextPath(pctText,0,pctText.length(),pctX,pctY,mTextPath);
      mShapePath.op(mTextPath,Path.Op.DIFFERENCE);
    }
  }
  c.drawPath(mShapePath,mFramePaint);
  mFrame.top=levelTop;
  mClipPath.reset();
  mClipPath.addRect(mFrame,Path.Direction.CCW);
  mShapePath.op(mClipPath,Path.Op.INTERSECT);
  c.drawPath(mShapePath,mBatteryPaint);
  if (!mPluggedIn) {
    if (level <= mCriticalLevel) {
      final float x=mWidth * 0.5f;
      final float y=(mHeight + mWarningTextHeight) * 0.48f;
      c.drawText(mWarningString,x,y,mWarningTextPaint);
    }
 else     if (pctOpaque) {
      c.drawText(pctText,pctX,pctY,mTextPaint);
    }
  }
}
