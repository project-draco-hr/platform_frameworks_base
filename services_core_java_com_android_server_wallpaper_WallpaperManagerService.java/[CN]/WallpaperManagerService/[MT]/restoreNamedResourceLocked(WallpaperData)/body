{
  if (wallpaper.name.length() > 4 && "res:".equals(wallpaper.name.substring(0,4))) {
    String resName=wallpaper.name.substring(4);
    String pkg=null;
    int colon=resName.indexOf(':');
    if (colon > 0) {
      pkg=resName.substring(0,colon);
    }
    String ident=null;
    int slash=resName.lastIndexOf('/');
    if (slash > 0) {
      ident=resName.substring(slash + 1);
    }
    String type=null;
    if (colon > 0 && slash > 0 && (slash - colon) > 1) {
      type=resName.substring(colon + 1,slash);
    }
    if (pkg != null && ident != null && type != null) {
      int resId=-1;
      InputStream res=null;
      FileOutputStream fos=null;
      FileOutputStream cos=null;
      try {
        Context c=mContext.createPackageContext(pkg,Context.CONTEXT_RESTRICTED);
        Resources r=c.getResources();
        resId=r.getIdentifier(resName,null,null);
        if (resId == 0) {
          Slog.e(TAG,"couldn't resolve identifier pkg=" + pkg + " type="+ type+ " ident="+ ident);
          return false;
        }
        res=r.openRawResource(resId);
        if (wallpaper.wallpaperFile.exists()) {
          wallpaper.wallpaperFile.delete();
          wallpaper.cropFile.delete();
        }
        fos=new FileOutputStream(wallpaper.wallpaperFile);
        cos=new FileOutputStream(wallpaper.cropFile);
        byte[] buffer=new byte[32768];
        int amt;
        while ((amt=res.read(buffer)) > 0) {
          fos.write(buffer,0,amt);
          cos.write(buffer,0,amt);
        }
        Slog.v(TAG,"Restored wallpaper: " + resName);
        return true;
      }
 catch (      NameNotFoundException e) {
        Slog.e(TAG,"Package name " + pkg + " not found");
      }
catch (      Resources.NotFoundException e) {
        Slog.e(TAG,"Resource not found: " + resId);
      }
catch (      IOException e) {
        Slog.e(TAG,"IOException while restoring wallpaper ",e);
      }
 finally {
        IoUtils.closeQuietly(res);
        if (fos != null) {
          FileUtils.sync(fos);
        }
        if (cos != null) {
          FileUtils.sync(cos);
        }
        IoUtils.closeQuietly(fos);
        IoUtils.closeQuietly(cos);
      }
    }
  }
  return false;
}
