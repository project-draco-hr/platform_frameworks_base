{
  if (DEBUG)   Slog.v(TAG,"bindWallpaperComponentLocked: componentName=" + componentName);
  if (!force) {
    if (wallpaper.connection != null) {
      if (wallpaper.wallpaperComponent == null) {
        if (componentName == null) {
          if (DEBUG)           Slog.v(TAG,"bindWallpaperComponentLocked: still using default");
          return true;
        }
      }
 else       if (wallpaper.wallpaperComponent.equals(componentName)) {
        if (DEBUG)         Slog.v(TAG,"same wallpaper");
        return true;
      }
    }
  }
  try {
    if (componentName == null) {
      componentName=WallpaperManager.getDefaultWallpaperComponent(mContext);
      if (componentName == null) {
        componentName=mImageWallpaper;
        if (DEBUG)         Slog.v(TAG,"Using image wallpaper");
      }
    }
    int serviceUserId=wallpaper.userId;
    ServiceInfo si=mIPackageManager.getServiceInfo(componentName,PackageManager.GET_META_DATA | PackageManager.GET_PERMISSIONS,serviceUserId);
    if (si == null) {
      Slog.w(TAG,"Attempted wallpaper " + componentName + " is unavailable");
      return false;
    }
    if (!android.Manifest.permission.BIND_WALLPAPER.equals(si.permission)) {
      String msg="Selected service does not require " + android.Manifest.permission.BIND_WALLPAPER + ": "+ componentName;
      if (fromUser) {
        throw new SecurityException(msg);
      }
      Slog.w(TAG,msg);
      return false;
    }
    WallpaperInfo wi=null;
    Intent intent=new Intent(WallpaperService.SERVICE_INTERFACE);
    if (componentName != null && !componentName.equals(mImageWallpaper)) {
      List<ResolveInfo> ris=mIPackageManager.queryIntentServices(intent,intent.resolveTypeIfNeeded(mContext.getContentResolver()),PackageManager.GET_META_DATA,serviceUserId);
      for (int i=0; i < ris.size(); i++) {
        ServiceInfo rsi=ris.get(i).serviceInfo;
        if (rsi.name.equals(si.name) && rsi.packageName.equals(si.packageName)) {
          try {
            wi=new WallpaperInfo(mContext,ris.get(i));
          }
 catch (          XmlPullParserException e) {
            if (fromUser) {
              throw new IllegalArgumentException(e);
            }
            Slog.w(TAG,e);
            return false;
          }
catch (          IOException e) {
            if (fromUser) {
              throw new IllegalArgumentException(e);
            }
            Slog.w(TAG,e);
            return false;
          }
          break;
        }
      }
      if (wi == null) {
        String msg="Selected service is not a wallpaper: " + componentName;
        if (fromUser) {
          throw new SecurityException(msg);
        }
        Slog.w(TAG,msg);
        return false;
      }
    }
    if (DEBUG)     Slog.v(TAG,"Binding to:" + componentName);
    WallpaperConnection newConn=new WallpaperConnection(wi,wallpaper);
    intent.setComponent(componentName);
    intent.putExtra(Intent.EXTRA_CLIENT_LABEL,com.android.internal.R.string.wallpaper_binding_label);
    intent.putExtra(Intent.EXTRA_CLIENT_INTENT,PendingIntent.getActivityAsUser(mContext,0,Intent.createChooser(new Intent(Intent.ACTION_SET_WALLPAPER),mContext.getText(com.android.internal.R.string.chooser_wallpaper)),0,null,new UserHandle(serviceUserId)));
    if (!mContext.bindServiceAsUser(intent,newConn,Context.BIND_AUTO_CREATE | Context.BIND_SHOWING_UI,new UserHandle(serviceUserId))) {
      String msg="Unable to bind service: " + componentName;
      if (fromUser) {
        throw new IllegalArgumentException(msg);
      }
      Slog.w(TAG,msg);
      return false;
    }
    if (wallpaper.userId == mCurrentUserId && mLastWallpaper != null) {
      detachWallpaperLocked(mLastWallpaper);
    }
    wallpaper.wallpaperComponent=componentName;
    wallpaper.connection=newConn;
    newConn.mReply=reply;
    try {
      if (wallpaper.userId == mCurrentUserId) {
        if (DEBUG)         Slog.v(TAG,"Adding window token: " + newConn.mToken);
        mIWindowManager.addWindowToken(newConn.mToken,WindowManager.LayoutParams.TYPE_WALLPAPER);
        mLastWallpaper=wallpaper;
      }
    }
 catch (    RemoteException e) {
    }
  }
 catch (  RemoteException e) {
    String msg="Remote exception for " + componentName + "\n"+ e;
    if (fromUser) {
      throw new IllegalArgumentException(msg);
    }
    Slog.w(TAG,msg);
    return false;
  }
  return true;
}
