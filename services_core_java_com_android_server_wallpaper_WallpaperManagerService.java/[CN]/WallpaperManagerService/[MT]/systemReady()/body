{
  if (DEBUG)   Slog.v(TAG,"systemReady");
  WallpaperData wallpaper=mWallpaperMap.get(UserHandle.USER_SYSTEM);
  if (mImageWallpaper.equals(wallpaper.nextWallpaperComponent)) {
    if (!wallpaper.cropExists()) {
      if (DEBUG) {
        Slog.i(TAG,"No crop; regenerating from source");
      }
      generateCrop(wallpaper);
    }
    if (!wallpaper.cropExists()) {
      if (DEBUG) {
        Slog.i(TAG,"Unable to regenerate crop; resetting");
      }
      clearWallpaperLocked(false,FLAG_SYSTEM,UserHandle.USER_SYSTEM,null);
    }
  }
 else {
    if (DEBUG) {
      Slog.i(TAG,"Nondefault wallpaper component; gracefully ignoring");
    }
  }
  IntentFilter userFilter=new IntentFilter();
  userFilter.addAction(Intent.ACTION_USER_REMOVED);
  mContext.registerReceiver(new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      final String action=intent.getAction();
      if (Intent.ACTION_USER_REMOVED.equals(action)) {
        onRemoveUser(intent.getIntExtra(Intent.EXTRA_USER_HANDLE,UserHandle.USER_NULL));
      }
    }
  }
,userFilter);
  try {
    ActivityManagerNative.getDefault().registerUserSwitchObserver(new IUserSwitchObserver.Stub(){
      @Override public void onUserSwitching(      int newUserId,      IRemoteCallback reply){
        switchUser(newUserId,reply);
      }
      @Override public void onUserSwitchComplete(      int newUserId) throws RemoteException {
      }
      @Override public void onForegroundProfileSwitch(      int newProfileId){
      }
    }
);
  }
 catch (  RemoteException e) {
    e.printStackTrace();
  }
}
