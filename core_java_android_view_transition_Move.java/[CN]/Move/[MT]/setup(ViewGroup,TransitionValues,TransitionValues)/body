{
  if (startValues == null || endValues == null) {
    return false;
  }
  Map<String,Object> startParentVals=startValues.values;
  Map<String,Object> endParentVals=endValues.values;
  ViewGroup startParent=(ViewGroup)startParentVals.get(PROPNAME_PARENT);
  ViewGroup endParent=(ViewGroup)endParentVals.get(PROPNAME_PARENT);
  if (startParent == null || endParent == null) {
    return false;
  }
  final View view=endValues.view;
  boolean parentsEqual=(startParent == endParent) || (startParent.getId() == endParent.getId());
  if (!mReparent || parentsEqual) {
    Rect startBounds=(Rect)startValues.values.get(PROPNAME_BOUNDS);
    Rect endBounds=(Rect)endValues.values.get(PROPNAME_BOUNDS);
    int startLeft=startBounds.left;
    int endLeft=endBounds.left;
    int startTop=startBounds.top;
    int endTop=endBounds.top;
    int startRight=startBounds.right;
    int endRight=endBounds.right;
    int startBottom=startBounds.bottom;
    int endBottom=endBounds.bottom;
    int startWidth=startRight - startLeft;
    int startHeight=startBottom - startTop;
    int endWidth=endRight - endLeft;
    int endHeight=endBottom - endTop;
    int numChanges=0;
    if (startWidth != 0 && startHeight != 0 && endWidth != 0 && endHeight != 0) {
      if (startLeft != endLeft)       ++numChanges;
      if (startTop != endTop)       ++numChanges;
      if (startRight != endRight)       ++numChanges;
      if (startBottom != endBottom)       ++numChanges;
    }
    if (numChanges > 0) {
      if (!mResizeClip) {
        if (startLeft != endLeft)         view.setLeft(startLeft);
        if (startTop != endTop)         view.setTop(startTop);
        if (startRight != endRight)         view.setRight(startRight);
        if (startBottom != endBottom)         view.setBottom(startBottom);
      }
 else {
        if (startWidth != endWidth)         view.setRight(endLeft + Math.max(startWidth,endWidth));
        if (startHeight != endHeight)         view.setBottom(endTop + Math.max(startHeight,endHeight));
        if (startLeft != endLeft)         view.setTranslationX(startLeft - endLeft);
        if (startTop != endTop)         view.setTranslationY(startTop - endTop);
      }
      return true;
    }
  }
 else {
    int startX=(Integer)startValues.values.get(PROPNAME_WINDOW_X);
    int startY=(Integer)startValues.values.get(PROPNAME_WINDOW_Y);
    int endX=(Integer)endValues.values.get(PROPNAME_WINDOW_X);
    int endY=(Integer)endValues.values.get(PROPNAME_WINDOW_Y);
    if (startX != endX || startY != endY) {
      sceneRoot.getLocationInWindow(tempLocation);
      Bitmap bitmap=Bitmap.createBitmap(view.getWidth(),view.getHeight(),Bitmap.Config.ARGB_8888);
      Canvas canvas=new Canvas(bitmap);
      view.draw(canvas);
      final BitmapDrawable drawable=new BitmapDrawable(bitmap);
      view.setVisibility(View.INVISIBLE);
      sceneRoot.getOverlay().add(drawable);
      Rect startBounds=new Rect(startX - tempLocation[0],startY - tempLocation[1],startX - tempLocation[0] + view.getWidth(),startY - tempLocation[1] + view.getHeight());
      Rect endBounds=new Rect(endX - tempLocation[0],endY - tempLocation[1],endX - tempLocation[0] + view.getWidth(),endY - tempLocation[1] + view.getHeight());
      ObjectAnimator anim=ObjectAnimator.ofObject(drawable,"bounds",sRectEvaluator,startBounds,endBounds);
      anim.addListener(new AnimatorListenerAdapter(){
        @Override public void onAnimationEnd(        Animator animation){
          sceneRoot.getOverlay().remove(drawable);
          view.setVisibility(View.VISIBLE);
        }
      }
);
      endParentVals.put("drawableAnim",anim);
      return true;
    }
  }
  return false;
}
