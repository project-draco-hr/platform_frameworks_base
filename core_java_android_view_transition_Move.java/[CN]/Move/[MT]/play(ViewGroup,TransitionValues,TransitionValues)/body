{
  if (startValues == null || endValues == null) {
    return null;
  }
  final View view=endValues.view;
  if (view.getParent() == null) {
    return null;
  }
  ViewGroup startParent=(ViewGroup)startValues.values.get(PROPNAME_PARENT);
  ViewGroup endParent=(ViewGroup)endValues.values.get(PROPNAME_PARENT);
  if (startParent == null || endParent == null) {
    return null;
  }
  boolean parentsEqual=(startParent == endParent) || (startParent.getId() == endParent.getId());
  if (!mReparent || parentsEqual) {
    Rect startBounds=(Rect)startValues.values.get(PROPNAME_BOUNDS);
    Rect endBounds=(Rect)endValues.values.get(PROPNAME_BOUNDS);
    int startLeft=startBounds.left;
    int endLeft=endBounds.left;
    int startTop=startBounds.top;
    int endTop=endBounds.top;
    int startRight=startBounds.right;
    int endRight=endBounds.right;
    int startBottom=startBounds.bottom;
    int endBottom=endBounds.bottom;
    int startWidth=startRight - startLeft;
    int startHeight=startBottom - startTop;
    int endWidth=endRight - endLeft;
    int endHeight=endBottom - endTop;
    int numChanges=0;
    if (startWidth != 0 && startHeight != 0 && endWidth != 0 && endHeight != 0) {
      if (Transition.DBG) {
        Log.v(LOG_TAG,"Target = " + endValues.view);
        Log.v(LOG_TAG,"    start bounds: " + startLeft + ", "+ startTop+ ", "+ startRight+ ", "+ startBottom);
        Log.v(LOG_TAG,"    end bounds: " + endLeft + ", "+ endTop+ ", "+ endRight+ ", "+ endBottom);
      }
      if (startLeft != endLeft)       ++numChanges;
      if (startTop != endTop)       ++numChanges;
      if (startRight != endRight)       ++numChanges;
      if (startBottom != endBottom)       ++numChanges;
    }
    if (numChanges > 0) {
      if (!mResizeClip) {
        PropertyValuesHolder pvh[]=new PropertyValuesHolder[numChanges];
        int pvhIndex=0;
        if (startLeft != endLeft) {
          pvh[pvhIndex++]=PropertyValuesHolder.ofInt("left",startLeft,endLeft);
        }
        if (startTop != endTop) {
          pvh[pvhIndex++]=PropertyValuesHolder.ofInt("top",startTop,endTop);
        }
        if (startRight != endRight) {
          pvh[pvhIndex++]=PropertyValuesHolder.ofInt("right",startRight,endRight);
        }
        if (startBottom != endBottom) {
          pvh[pvhIndex++]=PropertyValuesHolder.ofInt("bottom",startBottom,endBottom);
        }
        ObjectAnimator anim=ObjectAnimator.ofPropertyValuesHolder(view,pvh);
        if (view.getParent() instanceof ViewGroup) {
          final ViewGroup parent=(ViewGroup)view.getParent();
          parent.suppressLayout(true);
          anim.addListener(new AnimatorListenerAdapter(){
            @Override public void onAnimationEnd(            Animator animation){
              parent.suppressLayout(false);
            }
          }
);
        }
        return anim;
      }
 else {
        float transXDelta=endLeft - startLeft;
        float transYDelta=endTop - startTop;
        int widthDelta=endWidth - startWidth;
        int heightDelta=endHeight - startHeight;
        numChanges=0;
        if (transXDelta != 0)         numChanges++;
        if (transYDelta != 0)         numChanges++;
        if (widthDelta != 0 || heightDelta != 0)         numChanges++;
        PropertyValuesHolder pvh[]=new PropertyValuesHolder[numChanges];
        int pvhIndex=0;
        if (transXDelta != 0) {
          pvh[pvhIndex++]=PropertyValuesHolder.ofFloat("translationX",view.getTranslationX(),0);
        }
        if (transYDelta != 0) {
          pvh[pvhIndex++]=PropertyValuesHolder.ofFloat("translationY",view.getTranslationY(),0);
        }
        if (widthDelta != 0 || heightDelta != 0) {
          Rect tempStartBounds=new Rect(0,0,startWidth,startHeight);
          Rect tempEndBounds=new Rect(0,0,endWidth,endHeight);
          pvh[pvhIndex++]=PropertyValuesHolder.ofObject("clipBounds",sRectEvaluator,tempStartBounds,tempEndBounds);
        }
        ObjectAnimator anim=ObjectAnimator.ofPropertyValuesHolder(view,pvh);
        if (view.getParent() instanceof ViewGroup) {
          final ViewGroup parent=(ViewGroup)view.getParent();
          parent.suppressLayout(true);
          anim.addListener(new AnimatorListenerAdapter(){
            @Override public void onAnimationEnd(            Animator animation){
              parent.suppressLayout(false);
            }
          }
);
        }
        anim.addListener(new AnimatorListenerAdapter(){
          @Override public void onAnimationEnd(          Animator animation){
            view.setClipBounds(null);
          }
        }
);
        return anim;
      }
    }
  }
 else {
    return (ObjectAnimator)endValues.values.get("drawableAnim");
  }
  return null;
}
