{
  boolean forceNewFocus=false;
synchronized (mH) {
    if (DEBUG)     Log.v(TAG,"onWindowFocus: " + focusedView + " softInputMode="+ softInputMode+ " first="+ first+ " flags=#"+ Integer.toHexString(windowFlags));
    if (mHasBeenInactive) {
      if (DEBUG)       Log.v(TAG,"Has been inactive!  Starting fresh");
      mHasBeenInactive=false;
      forceNewFocus=true;
    }
    focusInLocked(focusedView != null ? focusedView : rootView);
  }
  int controlFlags=0;
  if (focusedView != null) {
    controlFlags|=CONTROL_WINDOW_VIEW_HAS_FOCUS;
    if (focusedView.onCheckIsTextEditor()) {
      controlFlags|=CONTROL_WINDOW_IS_TEXT_EDITOR;
    }
  }
  if (first) {
    controlFlags|=CONTROL_WINDOW_FIRST;
  }
  if (checkFocusNoStartInput(forceNewFocus,true)) {
    if (startInputInner(rootView.getWindowToken(),controlFlags,softInputMode,windowFlags)) {
      return;
    }
  }
synchronized (mH) {
    try {
      if (DEBUG)       Log.v(TAG,"Reporting focus gain, without startInput");
      mService.windowGainedFocus(mClient,rootView.getWindowToken(),controlFlags,softInputMode,windowFlags,null,null);
    }
 catch (    RemoteException e) {
    }
  }
}
