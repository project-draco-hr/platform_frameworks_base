{
  if (mScreenWidth > 0 && mScreenHeight > 0 && mProgram != null) {
    float screenAspectRatio=(float)mScreenWidth / mScreenHeight;
    float relativeAspectRatio=screenAspectRatio / mAspectRatio;
    if (relativeAspectRatio == 1.0f && mRenderMode != RENDERMODE_CUSTOMIZE) {
      mProgram.setClearsOutput(false);
    }
 else {
switch (mRenderMode) {
case RENDERMODE_STRETCH:
        mProgram.setTargetRect(0,0,1,1);
      mTargetQuad.p0.set(0f,0.0f);
    mTargetQuad.p1.set(1f,0.0f);
  mTargetQuad.p2.set(0f,1.0f);
mTargetQuad.p3.set(1f,1.0f);
mProgram.setClearsOutput(false);
break;
case RENDERMODE_FIT:
if (relativeAspectRatio > 1.0f) {
mTargetQuad.p0.set(0.5f - 0.5f / relativeAspectRatio,0.0f);
mTargetQuad.p1.set(0.5f + 0.5f / relativeAspectRatio,0.0f);
mTargetQuad.p2.set(0.5f - 0.5f / relativeAspectRatio,1.0f);
mTargetQuad.p3.set(0.5f + 0.5f / relativeAspectRatio,1.0f);
}
 else {
mTargetQuad.p0.set(0.0f,0.5f - 0.5f * relativeAspectRatio);
mTargetQuad.p1.set(1.0f,0.5f - 0.5f * relativeAspectRatio);
mTargetQuad.p2.set(0.0f,0.5f + 0.5f * relativeAspectRatio);
mTargetQuad.p3.set(1.0f,0.5f + 0.5f * relativeAspectRatio);
}
mProgram.setClearsOutput(true);
break;
case RENDERMODE_FILL_CROP:
if (relativeAspectRatio > 1) {
mTargetQuad.p0.set(0.0f,0.5f - 0.5f * relativeAspectRatio);
mTargetQuad.p1.set(1.0f,0.5f - 0.5f * relativeAspectRatio);
mTargetQuad.p2.set(0.0f,0.5f + 0.5f * relativeAspectRatio);
mTargetQuad.p3.set(1.0f,0.5f + 0.5f * relativeAspectRatio);
}
 else {
mTargetQuad.p0.set(0.5f - 0.5f / relativeAspectRatio,0.0f);
mTargetQuad.p1.set(0.5f + 0.5f / relativeAspectRatio,0.0f);
mTargetQuad.p2.set(0.5f - 0.5f / relativeAspectRatio,1.0f);
mTargetQuad.p3.set(0.5f + 0.5f / relativeAspectRatio,1.0f);
}
mProgram.setClearsOutput(true);
break;
case RENDERMODE_CUSTOMIZE:
((ShaderProgram)mProgram).setSourceRegion(mSourceQuad);
break;
}
((ShaderProgram)mProgram).setTargetRegion(mTargetQuad);
}
}
}
