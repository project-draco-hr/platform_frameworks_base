{
  mCellWidth=(getMinWidth() + GRID_WIDTH - 1) / GRID_WIDTH;
  mCellHeight=(getHeight() + GRID_HEIGHT - 1) / GRID_HEIGHT;
  mGridNeighbors=new int[GRID_SIZE][];
  int[] indices=new int[mKeys.size()];
  final int gridWidth=GRID_WIDTH * mCellWidth;
  final int gridHeight=GRID_HEIGHT * mCellHeight;
  for (int x=0; x < gridWidth; x+=mCellWidth) {
    for (int y=0; y < gridHeight; y+=mCellHeight) {
      int count=0;
      for (int i=0; i < mKeys.size(); i++) {
        final Key key=mKeys.get(i);
        if (key.squaredDistanceFrom(x,y) < mProximityThreshold || key.squaredDistanceFrom(x + mCellWidth - 1,y) < mProximityThreshold || key.squaredDistanceFrom(x + mCellWidth - 1,y + mCellHeight - 1) < mProximityThreshold || key.squaredDistanceFrom(x,y + mCellHeight - 1) < mProximityThreshold) {
          indices[count++]=i;
        }
      }
      int[] cell=new int[count];
      System.arraycopy(indices,0,cell,0,count);
      mGridNeighbors[(y / mCellHeight) * GRID_WIDTH + (x / mCellWidth)]=cell;
    }
  }
}
