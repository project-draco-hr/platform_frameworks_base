{
  boolean inKey=false;
  boolean inRow=false;
  boolean leftMostKey=false;
  int row=0;
  int x=0;
  int y=0;
  Key key=null;
  Row currentRow=null;
  Resources res=context.getResources();
  boolean skipRow=false;
  try {
    int event;
    while ((event=parser.next()) != XmlResourceParser.END_DOCUMENT) {
      if (event == XmlResourceParser.START_TAG) {
        String tag=parser.getName();
        if (TAG_ROW.equals(tag)) {
          inRow=true;
          x=0;
          currentRow=createRowFromXml(res,parser);
          rows.add(currentRow);
          skipRow=currentRow.mode != 0 && currentRow.mode != mKeyboardMode;
          if (skipRow) {
            skipToEndOfRow(parser);
            inRow=false;
          }
        }
 else         if (TAG_KEY.equals(tag)) {
          inKey=true;
          key=createKeyFromXml(res,currentRow,x,y,parser);
          mKeys.add(key);
          if (key.codes[0] == KEYCODE_SHIFT) {
            for (int i=0; i < mShiftKeys.length; i++) {
              if (mShiftKeys[i] == null) {
                mShiftKeys[i]=key;
                mShiftKeyIndices[i]=mKeys.size() - 1;
                break;
              }
            }
            mModifierKeys.add(key);
          }
 else           if (key.codes[0] == KEYCODE_ALT) {
            mModifierKeys.add(key);
          }
          currentRow.mKeys.add(key);
        }
 else         if (TAG_KEYBOARD.equals(tag)) {
          parseKeyboardAttributes(res,parser);
        }
      }
 else       if (event == XmlResourceParser.END_TAG) {
        if (inKey) {
          inKey=false;
          x+=key.gap + key.width;
          if (x > mTotalWidth) {
            mTotalWidth=x;
          }
        }
 else         if (inRow) {
          inRow=false;
          y+=currentRow.verticalGap;
          y+=currentRow.defaultHeight;
          row++;
        }
 else {
        }
      }
    }
  }
 catch (  Exception e) {
    Log.e(TAG,"Parse error:" + e);
    e.printStackTrace();
  }
  mTotalHeight=y - mDefaultVerticalGap;
}
