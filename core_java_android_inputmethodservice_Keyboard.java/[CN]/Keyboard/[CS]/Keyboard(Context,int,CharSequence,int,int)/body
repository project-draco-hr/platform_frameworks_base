{
  this(context,layoutTemplateResId);
  int x=0;
  int y=0;
  int column=0;
  mTotalWidth=0;
  Row row=new Row(this);
  row.defaultHeight=mDefaultHeight;
  row.defaultWidth=mDefaultWidth;
  row.defaultHorizontalGap=mDefaultHorizontalGap;
  row.verticalGap=mDefaultVerticalGap;
  row.rowEdgeFlags=EDGE_TOP | EDGE_BOTTOM;
  final int maxColumns=columns == -1 ? Integer.MAX_VALUE : columns;
  for (int i=0; i < characters.length(); i++) {
    char c=characters.charAt(i);
    if (column >= maxColumns || x + mDefaultWidth + horizontalPadding > mDisplayWidth) {
      x=0;
      y+=mDefaultVerticalGap + mDefaultHeight;
      column=0;
    }
    final Key key=new Key(row);
    key.x=x;
    key.y=y;
    key.label=String.valueOf(c);
    key.codes=new int[]{c};
    column++;
    x+=key.width + key.gap;
    mKeys.add(key);
    row.mKeys.add(key);
    if (x > mTotalWidth) {
      mTotalWidth=x;
    }
  }
  mTotalHeight=y + mDefaultHeight;
  rows.add(row);
}
