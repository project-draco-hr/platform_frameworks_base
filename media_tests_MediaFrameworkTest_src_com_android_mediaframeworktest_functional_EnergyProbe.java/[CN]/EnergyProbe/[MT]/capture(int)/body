{
  int energy=0;
  int count=0;
  if (freq > mMaxFrequency) {
    return 0;
  }
  if (mVisualizer != null) {
    try {
      mVisualizer.setEnabled(true);
      for (int i=0; i < MEASURE_COUNT; i++) {
        if (mVisualizer.getFft(mFft) == Visualizer.SUCCESS) {
          if (freq == mMaxFrequency) {
            energy+=(int)mFft[0] * (int)mFft[0];
          }
 else {
            int bin=2 * (freq * CAPTURE_SIZE / mMaxFrequency / 2);
            if (bin < 2)             bin=2;
            int tmp=0;
            int j;
            for (j=0; (j < AVERAGE_COUNT) && ((bin + 2 * j) < CAPTURE_SIZE); j++) {
              tmp+=(int)mFft[bin + 2 * j] * (int)mFft[bin + 2 * j] + (int)mFft[bin + 2 * j + 1] * (int)mFft[bin + 2 * j + 1];
            }
            energy+=tmp / j;
          }
          count++;
        }
        Thread.sleep(mCapturePeriodMs);
      }
      mVisualizer.setEnabled(false);
    }
 catch (    IllegalStateException e) {
      Log.e(TAG,"Error capturing audio");
    }
  }
  if (count == 0) {
    return 0;
  }
  return energy / count;
}
