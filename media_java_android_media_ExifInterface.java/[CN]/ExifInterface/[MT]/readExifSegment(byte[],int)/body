{
  ByteOrderAwarenessDataInputStream dataInputStream=new ByteOrderAwarenessDataInputStream(exifBytes);
  short byteOrder=dataInputStream.readShort();
switch (byteOrder) {
case BYTE_ALIGN_II:
    if (DEBUG) {
      Log.d(TAG,"readExifSegment: Byte Align II");
    }
  dataInputStream.setByteOrder(ByteOrder.LITTLE_ENDIAN);
break;
case BYTE_ALIGN_MM:
if (DEBUG) {
Log.d(TAG,"readExifSegment: Byte Align MM");
}
dataInputStream.setByteOrder(ByteOrder.BIG_ENDIAN);
break;
default :
throw new IOException("Invalid byte order: " + Integer.toHexString(byteOrder));
}
int startCode=dataInputStream.readUnsignedShort();
if (startCode != 0x2a) {
throw new IOException("Invalid exif start: " + Integer.toHexString(startCode));
}
long firstIfdOffset=dataInputStream.readUnsignedInt();
if (firstIfdOffset < 8 || firstIfdOffset >= exifBytes.length) {
throw new IOException("Invalid first Ifd offset: " + firstIfdOffset);
}
firstIfdOffset-=8;
if (firstIfdOffset > 0) {
if (dataInputStream.skip(firstIfdOffset) != firstIfdOffset) throw new IOException("Couldn't jump to first Ifd: " + firstIfdOffset);
}
readImageFileDirectory(dataInputStream,IFD_TIFF_HINT);
try {
int jpegInterchangeFormat=Integer.parseInt(mAttributes.get(JPEG_INTERCHANGE_FORMAT_TAG.name));
int jpegInterchangeFormatLength=Integer.parseInt(mAttributes.get(JPEG_INTERCHANGE_FORMAT_LENGTH_TAG.name));
jpegInterchangeFormatLength=Math.min(jpegInterchangeFormat + jpegInterchangeFormatLength,exifOffsetFromBeginning + exifBytes.length) - jpegInterchangeFormat;
if (jpegInterchangeFormat > 0 && jpegInterchangeFormatLength > 0) {
mHasThumbnail=true;
mThumbnailOffset=exifOffsetFromBeginning + jpegInterchangeFormat;
mThumbnailLength=jpegInterchangeFormatLength;
if (mFilename == null && mAssetInputStream == null && mSeekableFileDescriptor == null) {
byte[] thumbnailBytes=new byte[jpegInterchangeFormatLength];
dataInputStream.seek(jpegInterchangeFormat);
dataInputStream.readFully(thumbnailBytes);
mThumbnailBytes=thumbnailBytes;
if (DEBUG) {
Bitmap bitmap=BitmapFactory.decodeByteArray(thumbnailBytes,0,thumbnailBytes.length);
Log.d(TAG,"Thumbnail offset: " + mThumbnailOffset + ", length: "+ mThumbnailLength+ ", width: "+ bitmap.getWidth()+ ", height: "+ bitmap.getHeight());
}
}
}
}
 catch (NumberFormatException e) {
}
convertToInt(TAG_IMAGE_WIDTH);
convertToInt(TAG_IMAGE_LENGTH);
convertToInt(TAG_ORIENTATION);
convertToInt(TAG_FLASH);
convertToRational(TAG_FOCAL_LENGTH);
convertToDouble(TAG_DIGITAL_ZOOM_RATIO);
convertToDouble(TAG_EXPOSURE_TIME);
convertToDouble(TAG_APERTURE);
convertToDouble(TAG_SUBJECT_DISTANCE);
convertToInt(TAG_ISO);
convertToDouble(TAG_EXPOSURE_BIAS_VALUE);
convertToInt(TAG_WHITE_BALANCE);
convertToInt(TAG_LIGHT_SOURCE);
convertToInt(TAG_METERING_MODE);
convertToInt(TAG_EXPOSURE_PROGRAM);
convertToInt(TAG_EXPOSURE_MODE);
convertToRational(TAG_GPS_ALTITUDE);
convertToInt(TAG_GPS_ALTITUDE_REF);
convertToRational(TAG_GPS_LONGITUDE);
convertToRational(TAG_GPS_LATITUDE);
convertToTimetamp(TAG_GPS_TIMESTAMP);
String valueOfDateTimeOriginal=mAttributes.get("DateTimeOriginal");
if (valueOfDateTimeOriginal != null) {
mAttributes.put(TAG_DATETIME,valueOfDateTimeOriginal);
}
if (!mAttributes.containsKey(TAG_IMAGE_WIDTH)) {
mAttributes.put(TAG_IMAGE_WIDTH,"0");
}
if (!mAttributes.containsKey(TAG_IMAGE_LENGTH)) {
mAttributes.put(TAG_IMAGE_LENGTH,"0");
}
if (!mAttributes.containsKey(TAG_ORIENTATION)) {
mAttributes.put(TAG_ORIENTATION,"0");
}
if (!mAttributes.containsKey(TAG_LIGHT_SOURCE)) {
mAttributes.put(TAG_LIGHT_SOURCE,"0");
}
}
