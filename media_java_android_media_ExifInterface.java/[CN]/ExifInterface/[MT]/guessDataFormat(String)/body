{
  if (entryValue.contains(",")) {
    String[] entryValues=entryValue.split(",");
    Pair<Integer,Integer> dataFormat=guessDataFormat(entryValues[0]);
    if (dataFormat.first == IFD_FORMAT_STRING) {
      return dataFormat;
    }
    for (int i=1; i < entryValues.length; ++i) {
      final Pair<Integer,Integer> guessDataFormat=guessDataFormat(entryValues[i]);
      int first=-1, second=-1;
      if (guessDataFormat.first == dataFormat.first || guessDataFormat.second == dataFormat.first) {
        first=dataFormat.first;
      }
      if (dataFormat.second != -1 && (guessDataFormat.first == dataFormat.second || guessDataFormat.second == dataFormat.second)) {
        second=dataFormat.second;
      }
      if (first == -1 && second == -1) {
        return new Pair<>(IFD_FORMAT_STRING,-1);
      }
      if (first == -1) {
        dataFormat=new Pair<>(second,-1);
        continue;
      }
      if (second == -1) {
        dataFormat=new Pair<>(first,-1);
        continue;
      }
    }
    return dataFormat;
  }
  if (entryValue.contains("/")) {
    String[] rationalNumber=entryValue.split("/");
    if (rationalNumber.length == 2) {
      try {
        long numerator=Long.parseLong(rationalNumber[0]);
        long denominator=Long.parseLong(rationalNumber[1]);
        if (numerator < 0L || denominator < 0L) {
          return new Pair<>(IFD_FORMAT_SRATIONAL,-1);
        }
        if (numerator > Integer.MAX_VALUE || denominator > Integer.MAX_VALUE) {
          return new Pair<>(IFD_FORMAT_URATIONAL,-1);
        }
        return new Pair<>(IFD_FORMAT_SRATIONAL,IFD_FORMAT_URATIONAL);
      }
 catch (      NumberFormatException e) {
      }
    }
    return new Pair<>(IFD_FORMAT_STRING,-1);
  }
  try {
    Long longValue=Long.parseLong(entryValue);
    if (longValue >= 0 && longValue <= 65535) {
      return new Pair<>(IFD_FORMAT_USHORT,IFD_FORMAT_ULONG);
    }
    if (longValue < 0) {
      return new Pair<>(IFD_FORMAT_SLONG,-1);
    }
    return new Pair<>(IFD_FORMAT_ULONG,-1);
  }
 catch (  NumberFormatException e) {
  }
  try {
    Double.parseDouble(entryValue);
    return new Pair<>(IFD_FORMAT_DOUBLE,-1);
  }
 catch (  NumberFormatException e) {
  }
  return new Pair<>(IFD_FORMAT_STRING,-1);
}
