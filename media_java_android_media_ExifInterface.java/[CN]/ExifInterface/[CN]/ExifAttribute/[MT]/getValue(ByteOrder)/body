{
  try {
    ByteOrderAwarenessDataInputStream inputStream=new ByteOrderAwarenessDataInputStream(bytes);
    inputStream.setByteOrder(byteOrder);
switch (format) {
case IFD_FORMAT_BYTE:
case IFD_FORMAT_SBYTE:
{
        if (bytes.length == 1 && bytes[0] >= 0 && bytes[0] <= 1) {
          return new String(new char[]{(char)(bytes[0] + '0')});
        }
        return new String(bytes,ASCII);
      }
case IFD_FORMAT_UNDEFINED:
case IFD_FORMAT_STRING:
{
      int index=0;
      if (numberOfComponents >= EXIF_ASCII_PREFIX.length) {
        boolean same=true;
        for (int i=0; i < EXIF_ASCII_PREFIX.length; ++i) {
          if (bytes[i] != EXIF_ASCII_PREFIX[i]) {
            same=false;
            break;
          }
        }
        if (same) {
          index=EXIF_ASCII_PREFIX.length;
        }
      }
      StringBuilder stringBuilder=new StringBuilder();
      while (index < numberOfComponents) {
        int ch=bytes[index];
        if (ch == 0) {
          break;
        }
        if (ch >= 32) {
          stringBuilder.append((char)ch);
        }
 else {
          stringBuilder.append('?');
        }
        ++index;
      }
      return stringBuilder.toString();
    }
case IFD_FORMAT_USHORT:
{
    final int[] values=new int[numberOfComponents];
    for (int i=0; i < numberOfComponents; ++i) {
      values[i]=inputStream.readUnsignedShort();
    }
    return values;
  }
case IFD_FORMAT_ULONG:
{
  final long[] values=new long[numberOfComponents];
  for (int i=0; i < numberOfComponents; ++i) {
    values[i]=inputStream.readUnsignedInt();
  }
  return values;
}
case IFD_FORMAT_URATIONAL:
{
final Rational[] values=new Rational[numberOfComponents];
for (int i=0; i < numberOfComponents; ++i) {
  final long numerator=inputStream.readUnsignedInt();
  final long denominator=inputStream.readUnsignedInt();
  values[i]=new Rational(numerator,denominator);
}
return values;
}
case IFD_FORMAT_SSHORT:
{
final int[] values=new int[numberOfComponents];
for (int i=0; i < numberOfComponents; ++i) {
values[i]=inputStream.readShort();
}
return values;
}
case IFD_FORMAT_SLONG:
{
final int[] values=new int[numberOfComponents];
for (int i=0; i < numberOfComponents; ++i) {
values[i]=inputStream.readInt();
}
return values;
}
case IFD_FORMAT_SRATIONAL:
{
final Rational[] values=new Rational[numberOfComponents];
for (int i=0; i < numberOfComponents; ++i) {
final long numerator=inputStream.readInt();
final long denominator=inputStream.readInt();
values[i]=new Rational(numerator,denominator);
}
return values;
}
case IFD_FORMAT_SINGLE:
{
final double[] values=new double[numberOfComponents];
for (int i=0; i < numberOfComponents; ++i) {
values[i]=inputStream.readFloat();
}
return values;
}
case IFD_FORMAT_DOUBLE:
{
final double[] values=new double[numberOfComponents];
for (int i=0; i < numberOfComponents; ++i) {
values[i]=inputStream.readDouble();
}
return values;
}
default :
return null;
}
}
 catch (IOException e) {
Log.w(TAG,"IOException occurred during reading a value",e);
return null;
}
}
