{
  from-=mRssiBase;
  to-=mRssiBase;
  int emptyCount=0;
  int d=from < to ? 1 : -1;
  for (int i=from; i != to; i+=d)   if (i >= 0 && i < mEntriesSize && mEntries[i].mVolume > 1.0) {
    emptyCount=0;
    if (mEntries[i].mValue < threshold) {
      int rssi=mRssiBase + i;
      if (DBG) {
        DecimalFormat df=new DecimalFormat("#.##");
        logd("Scan target found: rssi=" + rssi + " threshold="+ df.format(threshold * 100)+ "% value="+ df.format(mEntries[i].mValue * 100)+ "% volume="+ df.format(mEntries[i].mVolume));
      }
      return rssi;
    }
  }
 else   if (++emptyCount >= BSSID_STAT_EMPTY_COUNT) {
    int rssi=mRssiBase + i;
    double lossPreset=presetLoss(rssi);
    if (lossPreset < threshold) {
      if (DBG) {
        DecimalFormat df=new DecimalFormat("#.##");
        logd("Scan target found: rssi=" + rssi + " threshold="+ df.format(threshold * 100)+ "% value="+ df.format(lossPreset * 100)+ "% volume=preset");
      }
      return rssi;
    }
  }
  return mRssiBase + to;
}
