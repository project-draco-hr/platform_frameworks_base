{
synchronized (this) {
    TelephonyManager tm=TelephonyManager.getDefault();
    setRoamingStatus(tm.isNetworkRoaming());
    setSubtype(tm.getNetworkType(),tm.getNetworkTypeName());
    if (intent.getAction().equals(TelephonyIntents.ACTION_ANY_DATA_CONNECTION_STATE_CHANGED)) {
      Phone.DataState state=getMobileDataState(intent);
      String reason=intent.getStringExtra(Phone.STATE_CHANGE_REASON_KEY);
      String apnName=intent.getStringExtra(Phone.DATA_APN_KEY);
      String apnTypeList=intent.getStringExtra(Phone.DATA_APN_TYPES_KEY);
      mApnName=apnName;
      boolean unavailable=intent.getBooleanExtra(Phone.NETWORK_UNAVAILABLE_KEY,false);
      mNetworkInfo.setIsAvailable(!unavailable);
      if (isApnTypeIncluded(apnTypeList)) {
        if (mEnabled == false) {
          if (state == Phone.DataState.CONNECTED) {
            if (DBG)             Log.d(TAG,"replacing old mInterfaceName (" + mInterfaceName + ") with "+ intent.getStringExtra(Phone.DATA_IFACE_NAME_KEY)+ " for "+ mApnType);
            mInterfaceName=intent.getStringExtra(Phone.DATA_IFACE_NAME_KEY);
          }
          return;
        }
      }
 else {
        return;
      }
      if (DBG)       Log.d(TAG,mApnType + " Received state= " + state+ ", old= "+ mMobileDataState+ ", reason= "+ (reason == null ? "(unspecified)" : reason)+ ", apnTypeList= "+ apnTypeList);
      if (mMobileDataState != state) {
        mMobileDataState=state;
switch (state) {
case DISCONNECTED:
          if (isTeardownRequested()) {
            mEnabled=false;
            setTeardownRequested(false);
          }
        setDetailedState(DetailedState.DISCONNECTED,reason,apnName);
      boolean doReset=true;
    if (mIsDefaultOrHipri == true) {
      int typeToCheck=(Phone.APN_TYPE_DEFAULT.equals(mApnType) ? ConnectivityManager.TYPE_MOBILE_HIPRI : ConnectivityManager.TYPE_MOBILE);
      if (mConnectivityManager == null) {
        mConnectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
      }
      if (mConnectivityManager != null) {
        NetworkInfo info=mConnectivityManager.getNetworkInfo(typeToCheck);
        if (info != null && info.isConnected() == true) {
          doReset=false;
        }
      }
    }
  if (doReset && mInterfaceName != null) {
    NetworkUtils.resetConnections(mInterfaceName);
  }
break;
case CONNECTING:
setDetailedState(DetailedState.CONNECTING,reason,apnName);
break;
case SUSPENDED:
setDetailedState(DetailedState.SUSPENDED,reason,apnName);
break;
case CONNECTED:
mInterfaceName=intent.getStringExtra(Phone.DATA_IFACE_NAME_KEY);
if (mInterfaceName == null) {
Log.d(TAG,"CONNECTED event did not supply interface name.");
}
mDefaultGatewayAddr=intent.getIntExtra(Phone.DATA_GATEWAY_KEY,0);
setDetailedState(DetailedState.CONNECTED,reason,apnName);
break;
}
}
}
 else if (intent.getAction().equals(TelephonyIntents.ACTION_DATA_CONNECTION_FAILED)) {
mEnabled=false;
String reason=intent.getStringExtra(Phone.FAILURE_REASON_KEY);
String apnName=intent.getStringExtra(Phone.DATA_APN_KEY);
if (DBG) Log.d(TAG,"Received " + intent.getAction() + " broadcast"+ reason == null ? "" : "(" + reason + ")");
setDetailedState(DetailedState.FAILED,reason,apnName);
}
}
}
