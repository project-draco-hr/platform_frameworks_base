{
  if (intent.getAction().equals(TelephonyIntents.ACTION_DATA_CONNECTION_CONNECTED_TO_PROVISIONING_APN)) {
    String apnName=intent.getStringExtra(PhoneConstants.DATA_APN_KEY);
    String apnType=intent.getStringExtra(PhoneConstants.DATA_APN_TYPE_KEY);
    if (!TextUtils.equals(mApnType,apnType)) {
      return;
    }
    if (DBG) {
      log("Broadcast received: " + intent.getAction() + " apnType="+ apnType+ " apnName="+ apnName);
    }
    mMobileDataState=PhoneConstants.DataState.CONNECTING;
    updateLinkProperitesAndCapatilities(intent);
    setDetailedState(DetailedState.CONNECTED_TO_PROVISIONING_NETWORK,"",apnName);
  }
 else   if (intent.getAction().equals(TelephonyIntents.ACTION_ANY_DATA_CONNECTION_STATE_CHANGED)) {
    String apnType=intent.getStringExtra(PhoneConstants.DATA_APN_TYPE_KEY);
    if (VDBG) {
      log(String.format("Broadcast received: ACTION_ANY_DATA_CONNECTION_STATE_CHANGED" + "mApnType=%s %s received apnType=%s",mApnType,TextUtils.equals(apnType,mApnType) ? "==" : "!=",apnType));
    }
    if (!TextUtils.equals(apnType,mApnType)) {
      return;
    }
    int oldSubtype=mNetworkInfo.getSubtype();
    int newSubType=TelephonyManager.getDefault().getNetworkType();
    String subTypeName=TelephonyManager.getDefault().getNetworkTypeName();
    mNetworkInfo.setSubtype(newSubType,subTypeName);
    if (newSubType != oldSubtype && mNetworkInfo.isConnected()) {
      Message msg=mTarget.obtainMessage(EVENT_NETWORK_SUBTYPE_CHANGED,oldSubtype,0,mNetworkInfo);
      msg.sendToTarget();
    }
    PhoneConstants.DataState state=Enum.valueOf(PhoneConstants.DataState.class,intent.getStringExtra(PhoneConstants.STATE_KEY));
    String reason=intent.getStringExtra(PhoneConstants.STATE_CHANGE_REASON_KEY);
    String apnName=intent.getStringExtra(PhoneConstants.DATA_APN_KEY);
    mNetworkInfo.setRoaming(intent.getBooleanExtra(PhoneConstants.DATA_NETWORK_ROAMING_KEY,false));
    if (VDBG) {
      log(mApnType + " setting isAvailable to " + intent.getBooleanExtra(PhoneConstants.NETWORK_UNAVAILABLE_KEY,false));
    }
    mNetworkInfo.setIsAvailable(!intent.getBooleanExtra(PhoneConstants.NETWORK_UNAVAILABLE_KEY,false));
    if (DBG) {
      log("Received state=" + state + ", old="+ mMobileDataState+ ", reason="+ (reason == null ? "(unspecified)" : reason));
    }
    if (mMobileDataState != state) {
      mMobileDataState=state;
switch (state) {
case DISCONNECTED:
        if (isTeardownRequested()) {
          setTeardownRequested(false);
        }
      setDetailedState(DetailedState.DISCONNECTED,reason,apnName);
    break;
case CONNECTING:
  setDetailedState(DetailedState.CONNECTING,reason,apnName);
break;
case SUSPENDED:
setDetailedState(DetailedState.SUSPENDED,reason,apnName);
break;
case CONNECTED:
updateLinkProperitesAndCapatilities(intent);
setDetailedState(DetailedState.CONNECTED,reason,apnName);
break;
}
if (VDBG) {
Slog.d(TAG,"TelephonyMgr.DataConnectionStateChanged");
if (mNetworkInfo != null) {
Slog.d(TAG,"NetworkInfo = " + mNetworkInfo.toString());
Slog.d(TAG,"subType = " + String.valueOf(mNetworkInfo.getSubtype()));
Slog.d(TAG,"subType = " + mNetworkInfo.getSubtypeName());
}
if (mLinkProperties != null) {
Slog.d(TAG,"LinkProperties = " + mLinkProperties.toString());
}
 else {
Slog.d(TAG,"LinkProperties = ");
}
if (mLinkCapabilities != null) {
Slog.d(TAG,"LinkCapabilities = " + mLinkCapabilities.toString());
}
 else {
Slog.d(TAG,"LinkCapabilities = ");
}
}
mSamplingDataTracker.resetSamplingData();
}
 else {
if (TextUtils.equals(reason,PhoneConstants.REASON_LINK_PROPERTIES_CHANGED)) {
mLinkProperties=intent.getParcelableExtra(PhoneConstants.DATA_LINK_PROPERTIES_KEY);
if (mLinkProperties == null) {
loge("No link property in LINK_PROPERTIES change event.");
mLinkProperties=new LinkProperties();
}
mNetworkInfo.setDetailedState(mNetworkInfo.getDetailedState(),reason,mNetworkInfo.getExtraInfo());
Message msg=mTarget.obtainMessage(EVENT_CONFIGURATION_CHANGED,mNetworkInfo);
msg.sendToTarget();
}
}
}
 else if (intent.getAction().equals(TelephonyIntents.ACTION_DATA_CONNECTION_FAILED)) {
String apnType=intent.getStringExtra(PhoneConstants.DATA_APN_TYPE_KEY);
if (!TextUtils.equals(apnType,mApnType)) {
if (DBG) {
log(String.format("Broadcast received: ACTION_ANY_DATA_CONNECTION_FAILED ignore, " + "mApnType=%s != received apnType=%s",mApnType,apnType));
}
return;
}
String reason=intent.getStringExtra(PhoneConstants.FAILURE_REASON_KEY);
String apnName=intent.getStringExtra(PhoneConstants.DATA_APN_KEY);
if (DBG) {
log("Broadcast received: " + intent.getAction() + " reason="+ reason == null ? "null" : reason);
}
setDetailedState(DetailedState.FAILED,reason,apnName);
}
 else {
if (DBG) log("Broadcast received: ignore " + intent.getAction());
}
}
