{
  if (intent.getAction().equals(TelephonyIntents.ACTION_ANY_DATA_CONNECTION_STATE_CHANGED)) {
    String apnType=intent.getStringExtra(Phone.DATA_APN_TYPE_KEY);
    if (VDBG) {
      log(String.format("Broadcast received: ACTION_ANY_DATA_CONNECTION_STATE_CHANGED" + "mApnType=%s %s received apnType=%s",mApnType,TextUtils.equals(apnType,mApnType) ? "==" : "!=",apnType));
    }
    if (!TextUtils.equals(apnType,mApnType)) {
      return;
    }
    mNetworkInfo.setSubtype(TelephonyManager.getDefault().getNetworkType(),TelephonyManager.getDefault().getNetworkTypeName());
    Phone.DataState state=Enum.valueOf(Phone.DataState.class,intent.getStringExtra(Phone.STATE_KEY));
    String reason=intent.getStringExtra(Phone.STATE_CHANGE_REASON_KEY);
    String apnName=intent.getStringExtra(Phone.DATA_APN_KEY);
    mNetworkInfo.setIsAvailable(!intent.getBooleanExtra(Phone.NETWORK_UNAVAILABLE_KEY,false));
    if (DBG) {
      log("Received state=" + state + ", old="+ mMobileDataState+ ", reason="+ (reason == null ? "(unspecified)" : reason));
    }
    if (mMobileDataState != state) {
      mMobileDataState=state;
switch (state) {
case DISCONNECTED:
        if (isTeardownRequested()) {
          setTeardownRequested(false);
        }
      setDetailedState(DetailedState.DISCONNECTED,reason,apnName);
    boolean doReset=true;
  if (mIsDefaultOrHipri == true) {
    int typeToCheck=(Phone.APN_TYPE_DEFAULT.equals(mApnType) ? ConnectivityManager.TYPE_MOBILE_HIPRI : ConnectivityManager.TYPE_MOBILE);
    if (mConnectivityManager == null) {
      IBinder b=ServiceManager.getService(Context.CONNECTIVITY_SERVICE);
      mConnectivityManager=IConnectivityManager.Stub.asInterface(b);
    }
    try {
      if (mConnectivityManager != null) {
        NetworkInfo info=mConnectivityManager.getNetworkInfo(typeToCheck);
        if (info.isConnected() == true) {
          doReset=false;
        }
      }
    }
 catch (    RemoteException e) {
      loge("Exception trying to contact ConnService: " + e);
    }
  }
if (doReset && mLinkProperties != null) {
  String iface=mLinkProperties.getInterfaceName();
  if (iface != null)   NetworkUtils.resetConnections(iface);
}
break;
case CONNECTING:
setDetailedState(DetailedState.CONNECTING,reason,apnName);
break;
case SUSPENDED:
setDetailedState(DetailedState.SUSPENDED,reason,apnName);
break;
case CONNECTED:
mLinkProperties=intent.getParcelableExtra(Phone.DATA_LINK_PROPERTIES_KEY);
if (mLinkProperties == null) {
log("CONNECTED event did not supply link properties.");
mLinkProperties=new LinkProperties();
}
mLinkCapabilities=intent.getParcelableExtra(Phone.DATA_LINK_CAPABILITIES_KEY);
if (mLinkCapabilities == null) {
log("CONNECTED event did not supply link capabilities.");
mLinkCapabilities=new LinkCapabilities();
}
setDetailedState(DetailedState.CONNECTED,reason,apnName);
break;
}
}
}
 else if (intent.getAction().equals(TelephonyIntents.ACTION_DATA_CONNECTION_FAILED)) {
String apnType=intent.getStringExtra(Phone.DATA_APN_TYPE_KEY);
if (!TextUtils.equals(apnType,mApnType)) {
if (DBG) {
log(String.format("Broadcast received: ACTION_ANY_DATA_CONNECTION_FAILED ignore, " + "mApnType=%s != received apnType=%s",mApnType,apnType));
}
return;
}
String reason=intent.getStringExtra(Phone.FAILURE_REASON_KEY);
String apnName=intent.getStringExtra(Phone.DATA_APN_KEY);
if (DBG) {
log("Received " + intent.getAction() + " broadcast"+ reason == null ? "" : "(" + reason + ")");
}
setDetailedState(DetailedState.FAILED,reason,apnName);
}
 else if (intent.getAction().equals(DataConnectionTracker.ACTION_DATA_CONNECTION_TRACKER_MESSENGER)) {
if (DBG) log(mApnType + " got ACTION_DATA_CONNECTION_TRACKER_MESSENGER");
mMessenger=intent.getParcelableExtra(DataConnectionTracker.EXTRA_MESSENGER);
AsyncChannel ac=new AsyncChannel();
ac.connect(mContext,MobileDataStateTracker.this.mHandler,mMessenger);
}
 else {
if (DBG) log("Broadcast received: ignore " + intent.getAction());
}
}
