{
  int callerUid=UserHandle.getCallingUserId();
  int myUid=UserHandle.myUserId();
  if (VDBG) {
    log("listen: E pkg=" + pkgForDebug + " events=0x"+ Integer.toHexString(events)+ " notifyNow="+ notifyNow+ " subId="+ subId+ " myUid="+ myUid+ " callerUid="+ callerUid);
  }
  if (events != PhoneStateListener.LISTEN_NONE) {
    checkListenerPermission(events);
synchronized (mRecords) {
      Record r=null;
      find_and_add: {
        IBinder b=callback.asBinder();
        final int N=mRecords.size();
        for (int i=0; i < N; i++) {
          r=mRecords.get(i);
          if (b == r.binder) {
            break find_and_add;
          }
        }
        r=new Record();
        r.binder=b;
        mRecords.add(r);
        if (DBG)         log("listen: add new record");
      }
      r.callback=callback;
      r.pkgForDebug=pkgForDebug;
      r.callerUid=callerUid;
      if (!SubscriptionManager.isValidSubId(subId)) {
        r.subId=SubscriptionManager.DEFAULT_SUB_ID;
      }
 else {
        r.subId=subId;
      }
      r.phoneId=SubscriptionManager.getPhoneId(r.subId);
      int phoneId=r.phoneId;
      r.events=events;
      if (DBG) {
        log("listen:  Register r=" + r + " r.subId="+ r.subId+ " phoneId="+ phoneId);
      }
      if (VDBG)       toStringLogSSC("listen");
      if (notifyNow && validatePhoneId(phoneId)) {
        if ((events & PhoneStateListener.LISTEN_SERVICE_STATE) != 0) {
          try {
            if (VDBG)             log("listen: call onSSC state=" + mServiceState[phoneId]);
            r.callback.onServiceStateChanged(new ServiceState(mServiceState[phoneId]));
          }
 catch (          RemoteException ex) {
            remove(r.binder);
          }
        }
        if ((events & PhoneStateListener.LISTEN_SIGNAL_STRENGTH) != 0) {
          try {
            int gsmSignalStrength=mSignalStrength[phoneId].getGsmSignalStrength();
            r.callback.onSignalStrengthChanged((gsmSignalStrength == 99 ? -1 : gsmSignalStrength));
          }
 catch (          RemoteException ex) {
            remove(r.binder);
          }
        }
        if ((events & PhoneStateListener.LISTEN_MESSAGE_WAITING_INDICATOR) != 0) {
          try {
            r.callback.onMessageWaitingIndicatorChanged(mMessageWaiting[phoneId]);
          }
 catch (          RemoteException ex) {
            remove(r.binder);
          }
        }
        if ((events & PhoneStateListener.LISTEN_CALL_FORWARDING_INDICATOR) != 0) {
          try {
            r.callback.onCallForwardingIndicatorChanged(mCallForwarding[phoneId]);
          }
 catch (          RemoteException ex) {
            remove(r.binder);
          }
        }
        if (validateEventsAndUserLocked(r,PhoneStateListener.LISTEN_CELL_LOCATION)) {
          try {
            if (DBG_LOC)             log("listen: mCellLocation = " + mCellLocation[phoneId]);
            r.callback.onCellLocationChanged(new Bundle(mCellLocation[phoneId]));
          }
 catch (          RemoteException ex) {
            remove(r.binder);
          }
        }
        if ((events & PhoneStateListener.LISTEN_CALL_STATE) != 0) {
          try {
            r.callback.onCallStateChanged(mCallState[phoneId],mCallIncomingNumber[phoneId]);
          }
 catch (          RemoteException ex) {
            remove(r.binder);
          }
        }
        if ((events & PhoneStateListener.LISTEN_DATA_CONNECTION_STATE) != 0) {
          try {
            r.callback.onDataConnectionStateChanged(mDataConnectionState[phoneId],mDataConnectionNetworkType[phoneId]);
          }
 catch (          RemoteException ex) {
            remove(r.binder);
          }
        }
        if ((events & PhoneStateListener.LISTEN_DATA_ACTIVITY) != 0) {
          try {
            r.callback.onDataActivity(mDataActivity[phoneId]);
          }
 catch (          RemoteException ex) {
            remove(r.binder);
          }
        }
        if ((events & PhoneStateListener.LISTEN_SIGNAL_STRENGTHS) != 0) {
          try {
            r.callback.onSignalStrengthsChanged(mSignalStrength[phoneId]);
          }
 catch (          RemoteException ex) {
            remove(r.binder);
          }
        }
        if ((events & PhoneStateListener.LISTEN_OTASP_CHANGED) != 0) {
          try {
            r.callback.onOtaspChanged(mOtaspMode);
          }
 catch (          RemoteException ex) {
            remove(r.binder);
          }
        }
        if (validateEventsAndUserLocked(r,PhoneStateListener.LISTEN_CELL_INFO)) {
          try {
            if (DBG_LOC)             log("listen: mCellInfo[" + phoneId + "] = "+ mCellInfo.get(phoneId));
            r.callback.onCellInfoChanged(mCellInfo.get(phoneId));
          }
 catch (          RemoteException ex) {
            remove(r.binder);
          }
        }
        if ((events & PhoneStateListener.LISTEN_DATA_CONNECTION_REAL_TIME_INFO) != 0) {
          try {
            r.callback.onDataConnectionRealTimeInfoChanged(mDcRtInfo);
          }
 catch (          RemoteException ex) {
            remove(r.binder);
          }
        }
        if ((events & PhoneStateListener.LISTEN_PRECISE_CALL_STATE) != 0) {
          try {
            r.callback.onPreciseCallStateChanged(mPreciseCallState);
          }
 catch (          RemoteException ex) {
            remove(r.binder);
          }
        }
        if ((events & PhoneStateListener.LISTEN_PRECISE_DATA_CONNECTION_STATE) != 0) {
          try {
            r.callback.onPreciseDataConnectionStateChanged(mPreciseDataConnectionState);
          }
 catch (          RemoteException ex) {
            remove(r.binder);
          }
        }
      }
    }
  }
 else {
    if (DBG)     log("listen: Unregister");
    remove(callback.asBinder());
  }
}
