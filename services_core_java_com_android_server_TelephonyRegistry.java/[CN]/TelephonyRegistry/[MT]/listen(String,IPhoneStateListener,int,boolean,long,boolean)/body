{
  int callerUid=UserHandle.getCallingUserId();
  int myUid=UserHandle.myUserId();
  if (VDBG) {
    Slog.d(TAG,"listen: E pkg=" + pkgForDebug + " events=0x"+ Integer.toHexString(events)+ " notifyNow="+ notifyNow+ " subId="+ subId+ " isLegacyApp="+ isLegacyApp+ " myUid="+ myUid+ " callerUid="+ callerUid);
  }
  if (events != 0) {
    checkListenerPermission(events);
synchronized (mRecords) {
      Record r=null;
      find_and_add: {
        IBinder b=callback.asBinder();
        final int N=mRecords.size();
        for (int i=0; i < N; i++) {
          r=mRecords.get(i);
          if (b == r.binder) {
            break find_and_add;
          }
        }
        r=new Record();
        r.binder=b;
        r.callback=callback;
        r.pkgForDebug=pkgForDebug;
        r.callerUid=callerUid;
        r.subId=subId;
        r.isLegacyApp=isLegacyApp;
        if ((r.subId <= 0) || (r.subId == SubscriptionManager.INVALID_SUB_ID)) {
          r.subId=mDefaultSubId;
          r.isLegacyApp=true;
        }
        if (r.subId == SubscriptionManager.DEFAULT_SUB_ID) {
          r.subId=mDefaultSubId;
          r.isLegacyApp=true;
          if (DBG)           Slog.i(TAG,"listen: DEFAULT_SUB_ID");
        }
        mRecords.add(r);
        if (DBG)         Slog.i(TAG,"listen: add new record");
      }
      int phoneId=SubscriptionManager.getPhoneId(subId);
      r.events=events;
      if (DBG)       Slog.i(TAG,"listen: set events record=" + r);
      if (notifyNow && validatePhoneId(phoneId)) {
        if ((events & PhoneStateListener.LISTEN_SERVICE_STATE) != 0) {
          try {
            r.callback.onServiceStateChanged(new ServiceState(mServiceState[phoneId]));
          }
 catch (          RemoteException ex) {
            remove(r.binder);
          }
        }
        if ((events & PhoneStateListener.LISTEN_SIGNAL_STRENGTH) != 0) {
          try {
            int gsmSignalStrength=mSignalStrength[phoneId].getGsmSignalStrength();
            r.callback.onSignalStrengthChanged((gsmSignalStrength == 99 ? -1 : gsmSignalStrength));
          }
 catch (          RemoteException ex) {
            remove(r.binder);
          }
        }
        if ((events & PhoneStateListener.LISTEN_MESSAGE_WAITING_INDICATOR) != 0) {
          try {
            r.callback.onMessageWaitingIndicatorChanged(mMessageWaiting[phoneId]);
          }
 catch (          RemoteException ex) {
            remove(r.binder);
          }
        }
        if ((events & PhoneStateListener.LISTEN_CALL_FORWARDING_INDICATOR) != 0) {
          try {
            r.callback.onCallForwardingIndicatorChanged(mCallForwarding[phoneId]);
          }
 catch (          RemoteException ex) {
            remove(r.binder);
          }
        }
        if (validateEventsAndUserLocked(r,PhoneStateListener.LISTEN_CELL_LOCATION)) {
          try {
            if (DBG_LOC)             Slog.d(TAG,"listen: mCellLocation = " + mCellLocation[phoneId]);
            r.callback.onCellLocationChanged(new Bundle(mCellLocation[phoneId]));
          }
 catch (          RemoteException ex) {
            remove(r.binder);
          }
        }
        if ((events & PhoneStateListener.LISTEN_CALL_STATE) != 0) {
          try {
            r.callback.onCallStateChanged(mCallState[phoneId],mCallIncomingNumber[phoneId]);
          }
 catch (          RemoteException ex) {
            remove(r.binder);
          }
        }
        if ((events & PhoneStateListener.LISTEN_DATA_CONNECTION_STATE) != 0) {
          try {
            r.callback.onDataConnectionStateChanged(mDataConnectionState[phoneId],mDataConnectionNetworkType[phoneId]);
          }
 catch (          RemoteException ex) {
            remove(r.binder);
          }
        }
        if ((events & PhoneStateListener.LISTEN_DATA_ACTIVITY) != 0) {
          try {
            r.callback.onDataActivity(mDataActivity[phoneId]);
          }
 catch (          RemoteException ex) {
            remove(r.binder);
          }
        }
        if ((events & PhoneStateListener.LISTEN_SIGNAL_STRENGTHS) != 0) {
          try {
            r.callback.onSignalStrengthsChanged(mSignalStrength[phoneId]);
          }
 catch (          RemoteException ex) {
            remove(r.binder);
          }
        }
        if ((events & PhoneStateListener.LISTEN_OTASP_CHANGED) != 0) {
          try {
            r.callback.onOtaspChanged(mOtaspMode);
          }
 catch (          RemoteException ex) {
            remove(r.binder);
          }
        }
        if (validateEventsAndUserLocked(r,PhoneStateListener.LISTEN_CELL_INFO)) {
          try {
            if (DBG_LOC)             Slog.d(TAG,"listen: mCellInfo[" + phoneId + "] = "+ mCellInfo.get(phoneId));
            r.callback.onCellInfoChanged(mCellInfo.get(phoneId));
          }
 catch (          RemoteException ex) {
            remove(r.binder);
          }
        }
        if ((events & PhoneStateListener.LISTEN_DATA_CONNECTION_REAL_TIME_INFO) != 0) {
          try {
            r.callback.onDataConnectionRealTimeInfoChanged(mDcRtInfo);
          }
 catch (          RemoteException ex) {
            remove(r.binder);
          }
        }
        if ((events & PhoneStateListener.LISTEN_PRECISE_CALL_STATE) != 0) {
          try {
            r.callback.onPreciseCallStateChanged(mPreciseCallState);
          }
 catch (          RemoteException ex) {
            remove(r.binder);
          }
        }
        if ((events & PhoneStateListener.LISTEN_PRECISE_DATA_CONNECTION_STATE) != 0) {
          try {
            r.callback.onPreciseDataConnectionStateChanged(mPreciseDataConnectionState);
          }
 catch (          RemoteException ex) {
            remove(r.binder);
          }
        }
      }
    }
  }
 else {
    remove(callback.asBinder());
  }
}
