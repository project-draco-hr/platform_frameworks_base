{
  int callerUid=UserHandle.getCallingUserId();
  int myUid=UserHandle.myUserId();
  if (VDBG) {
    log("listen oscl: E pkg=" + pkgForDebug + " myUid="+ myUid+ " callerUid="+ callerUid+ " callback="+ callback+ " callback.asBinder="+ callback.asBinder());
  }
  checkOnSubscriptionsChangedListenerPermission();
  Record r=null;
synchronized (mRecords) {
    find_and_add: {
      IBinder b=callback.asBinder();
      final int N=mRecords.size();
      for (int i=0; i < N; i++) {
        r=mRecords.get(i);
        if (b == r.binder) {
          break find_and_add;
        }
      }
      r=new Record();
      r.binder=b;
      mRecords.add(r);
      if (DBG)       log("listen oscl: add new record");
    }
    r.onSubscriptionsChangedListenerCallback=callback;
    r.pkgForDebug=pkgForDebug;
    r.callerUid=callerUid;
    r.events=0;
    if (DBG) {
      log("listen oscl:  Register r=" + r);
    }
    if (hasNotifySubscriptionInfoChangedOccurred) {
      try {
        if (VDBG)         log("listen oscl: send to r=" + r);
        r.onSubscriptionsChangedListenerCallback.onSubscriptionsChanged();
        if (VDBG)         log("listen oscl: sent to r=" + r);
      }
 catch (      RemoteException e) {
        if (VDBG)         log("listen oscl: remote exception sending to r=" + r + " e="+ e);
        remove(r.binder);
      }
    }
 else {
      log("listen oscl: hasNotifySubscriptionInfoChangedOccurred==false no callback");
    }
  }
}
