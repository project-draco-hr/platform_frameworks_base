{
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println("Permission Denial: can't dump telephony.registry from from pid=" + Binder.getCallingPid() + ", uid="+ Binder.getCallingUid());
    return;
  }
synchronized (mRecords) {
    final int recordCount=mRecords.size();
    pw.println("last known state:");
    for (int i=0; i < TelephonyManager.getDefault().getPhoneCount(); i++) {
      pw.println("  Phone Id=" + i);
      pw.println("  mCallState=" + mCallState[i]);
      pw.println("  mCallIncomingNumber=" + mCallIncomingNumber[i]);
      pw.println("  mServiceState=" + mServiceState[i]);
      pw.println("  mSignalStrength=" + mSignalStrength[i]);
      pw.println("  mMessageWaiting=" + mMessageWaiting[i]);
      pw.println("  mCallForwarding=" + mCallForwarding[i]);
      pw.println("  mDataActivity=" + mDataActivity[i]);
      pw.println("  mDataConnectionState=" + mDataConnectionState[i]);
      pw.println("  mDataConnectionPossible=" + mDataConnectionPossible[i]);
      pw.println("  mDataConnectionReason=" + mDataConnectionReason[i]);
      pw.println("  mDataConnectionApn=" + mDataConnectionApn[i]);
      pw.println("  mDataConnectionLinkProperties=" + mDataConnectionLinkProperties[i]);
      pw.println("  mDataConnectionNetworkCapabilities=" + mDataConnectionNetworkCapabilities[i]);
      pw.println("  mCellLocation=" + mCellLocation[i]);
      pw.println("  mCellInfo=" + mCellInfo.get(i));
    }
    pw.println("  mDefaultSubId=" + mDefaultSubId);
    pw.println("  mDcRtInfo=" + mDcRtInfo);
    pw.println("registrations: count=" + recordCount);
    for (    Record r : mRecords) {
      pw.println("  " + r.pkgForDebug + " 0x"+ Integer.toHexString(r.events));
      pw.println("is Legacy = " + r.isLegacyApp + " subId = "+ r.subId);
    }
  }
}
