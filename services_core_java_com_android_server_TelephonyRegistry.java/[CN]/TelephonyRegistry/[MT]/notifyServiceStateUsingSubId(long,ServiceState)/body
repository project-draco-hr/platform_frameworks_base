{
  if (!checkNotifyPermission("notifyServiceState()")) {
    return;
  }
  if (subId == SubscriptionManager.DEFAULT_SUB_ID) {
    subId=mDefaultSubId;
    if (VDBG)     log("notifyServiceStateUsingSubId: using mDefaultSubId=" + mDefaultSubId);
  }
synchronized (mRecords) {
    int phoneId=SubscriptionManager.getPhoneId(subId);
    if (VDBG) {
      log("notifyServiceStateUsingSubId: subId=" + subId + " phoneId="+ phoneId+ " state="+ state);
    }
    if (validatePhoneId(phoneId)) {
      mServiceState[phoneId]=state;
      logServiceStateChanged("notifyServiceStateUsingSubId",subId,phoneId,state);
      if (VDBG)       toStringLogSSC("notifyServiceStateUsingSubId");
      for (      Record r : mRecords) {
        if (VDBG) {
          log("notifyServiceStateUsingSubId: r=" + r + " subId="+ subId+ " phoneId="+ phoneId+ " state="+ state);
        }
        if (((r.events & PhoneStateListener.LISTEN_SERVICE_STATE) != 0) && (r.phoneId == phoneId)) {
          try {
            if (DBG) {
              log("notifyServiceStateUsingSubId: callback.onSSC r=" + r + " subId="+ subId+ " phoneId="+ phoneId+ " state="+ state);
            }
            r.callback.onServiceStateChanged(new ServiceState(state));
          }
 catch (          RemoteException ex) {
            mRemoveList.add(r.binder);
          }
        }
      }
    }
 else {
      log("notifyServiceStateUsingSubId: INVALID phoneId=" + phoneId);
    }
    handleRemoveListLocked();
  }
  broadcastServiceStateChanged(state,subId);
}
