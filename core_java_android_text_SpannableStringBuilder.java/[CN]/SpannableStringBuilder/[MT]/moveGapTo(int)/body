{
  if (where == mGapStart)   return;
  boolean atEnd=(where == length());
  if (where < mGapStart) {
    int overlap=mGapStart - where;
    System.arraycopy(mText,where,mText,mGapStart + mGapLength - overlap,overlap);
  }
 else {
    int overlap=where - mGapStart;
    System.arraycopy(mText,where + mGapLength - overlap,mText,mGapStart,overlap);
  }
  if (mSpanCount != 0) {
    for (int i=0; i < mSpanCount; i++) {
      int start=mSpanStarts[i];
      int end=mSpanEnds[i];
      if (start > mGapStart)       start-=mGapLength;
      if (start > where)       start+=mGapLength;
 else       if (start == where) {
        int flag=(mSpanFlags[i] & START_MASK) >> START_SHIFT;
        if (flag == POINT || (atEnd && flag == PARAGRAPH))         start+=mGapLength;
      }
      if (end > mGapStart)       end-=mGapLength;
      if (end > where)       end+=mGapLength;
 else       if (end == where) {
        int flag=(mSpanFlags[i] & END_MASK);
        if (flag == POINT || (atEnd && flag == PARAGRAPH))         end+=mGapLength;
      }
      mSpanStarts[i]=start;
      mSpanEnds[i]=end;
    }
    calcMax(treeRoot());
  }
  mGapStart=where;
}
