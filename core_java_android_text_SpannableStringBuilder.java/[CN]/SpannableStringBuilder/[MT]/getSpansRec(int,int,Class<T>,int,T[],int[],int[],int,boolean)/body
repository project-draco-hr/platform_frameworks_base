{
  if ((i & 1) != 0) {
    int left=leftChild(i);
    int spanMax=mSpanMax[left];
    if (spanMax > mGapStart) {
      spanMax-=mGapLength;
    }
    if (spanMax >= queryStart) {
      count=getSpansRec(queryStart,queryEnd,kind,left,ret,priority,insertionOrder,count,sort);
    }
  }
  if (i >= mSpanCount)   return count;
  int spanStart=mSpanStarts[i];
  if (spanStart > mGapStart) {
    spanStart-=mGapLength;
  }
  if (spanStart <= queryEnd) {
    int spanEnd=mSpanEnds[i];
    if (spanEnd > mGapStart) {
      spanEnd-=mGapLength;
    }
    if (spanEnd >= queryStart && (spanStart == spanEnd || queryStart == queryEnd || (spanStart != queryEnd && spanEnd != queryStart)) && (Object.class == kind || kind.isInstance(mSpans[i]))) {
      int spanPriority=mSpanFlags[i] & SPAN_PRIORITY;
      int target=count;
      if (sort) {
        priority[target]=spanPriority;
        insertionOrder[target]=mSpanOrder[i];
      }
 else       if (spanPriority != 0) {
        int j=0;
        for (; j < count; j++) {
          int p=getSpanFlags(ret[j]) & SPAN_PRIORITY;
          if (spanPriority > p)           break;
        }
        System.arraycopy(ret,j,ret,j + 1,count - j);
        target=j;
      }
      ret[target]=(T)mSpans[i];
      count++;
    }
    if (count < ret.length && (i & 1) != 0) {
      count=getSpansRec(queryStart,queryEnd,kind,rightChild(i),ret,priority,insertionOrder,count,sort);
    }
  }
  return count;
}
