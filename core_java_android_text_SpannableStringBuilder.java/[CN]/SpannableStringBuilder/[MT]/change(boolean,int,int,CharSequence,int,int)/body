{
  checkRange("replace",start,end);
  int ret=tbend - tbstart;
  TextWatcher[] recipients=null;
  if (notify) {
    recipients=sendTextWillChange(start,end - start,tbend - tbstart);
  }
  for (int i=mSpanCount - 1; i >= 0; i--) {
    if ((mSpanFlags[i] & SPAN_PARAGRAPH) == SPAN_PARAGRAPH) {
      int st=mSpanStarts[i];
      if (st > mGapStart)       st-=mGapLength;
      int en=mSpanEnds[i];
      if (en > mGapStart)       en-=mGapLength;
      int ost=st;
      int oen=en;
      int clen=length();
      if (st > start && st <= end) {
        for (st=end; st < clen; st++)         if (st > end && charAt(st - 1) == '\n')         break;
      }
      if (en > start && en <= end) {
        for (en=end; en < clen; en++)         if (en > end && charAt(en - 1) == '\n')         break;
      }
      if (st != ost || en != oen)       setSpan(mSpans[i],st,en,mSpanFlags[i]);
    }
  }
  moveGapTo(end);
  final int nbNewChars=(tbend - tbstart) - (end - start);
  if (nbNewChars >= mGapLength) {
    resizeFor(mText.length + nbNewChars - mGapLength);
  }
  mGapStart+=nbNewChars;
  mGapLength-=nbNewChars;
  if (mGapLength < 1)   new Exception("mGapLength < 1").printStackTrace();
  TextUtils.getChars(tb,tbstart,tbend,mText,start);
  if (tb instanceof Spanned) {
    Spanned sp=(Spanned)tb;
    Object[] spans=sp.getSpans(tbstart,tbend,Object.class);
    for (int i=0; i < spans.length; i++) {
      int st=sp.getSpanStart(spans[i]);
      int en=sp.getSpanEnd(spans[i]);
      if (st < tbstart)       st=tbstart;
      if (en > tbend)       en=tbend;
      if (getSpanStart(spans[i]) < 0) {
        setSpan(false,spans[i],st - tbstart + start,en - tbstart + start,sp.getSpanFlags(spans[i]));
      }
    }
  }
  if (tbend > tbstart && end - start == 0) {
    if (notify) {
      sendTextChange(recipients,start,end - start,tbend - tbstart);
      sendTextHasChanged(recipients);
    }
    return ret;
  }
  boolean atend=(mGapStart + mGapLength == mText.length);
  for (int i=mSpanCount - 1; i >= 0; i--) {
    if (mSpanStarts[i] >= start && mSpanStarts[i] < mGapStart + mGapLength) {
      int flag=(mSpanFlags[i] & START_MASK) >> START_SHIFT;
      if (flag == POINT || (flag == PARAGRAPH && atend))       mSpanStarts[i]=mGapStart + mGapLength;
 else       mSpanStarts[i]=start;
    }
    if (mSpanEnds[i] >= start && mSpanEnds[i] < mGapStart + mGapLength) {
      int flag=(mSpanFlags[i] & END_MASK);
      if (flag == POINT || (flag == PARAGRAPH && atend))       mSpanEnds[i]=mGapStart + mGapLength;
 else       mSpanEnds[i]=start;
    }
    if (mSpanEnds[i] < mSpanStarts[i]) {
      removeSpan(i);
    }
  }
  if (notify) {
    sendTextChange(recipients,start,end - start,tbend - tbstart);
    sendTextHasChanged(recipients);
  }
  return ret;
}
