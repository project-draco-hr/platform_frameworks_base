{
  checkRange("setSpan",start,end);
  int flagsStart=(flags & START_MASK) >> START_SHIFT;
  if (flagsStart == PARAGRAPH) {
    if (start != 0 && start != length()) {
      char c=charAt(start - 1);
      if (c != '\n')       throw new RuntimeException("PARAGRAPH span must start at paragraph boundary");
    }
  }
  int flagsEnd=flags & END_MASK;
  if (flagsEnd == PARAGRAPH) {
    if (end != 0 && end != length()) {
      char c=charAt(end - 1);
      if (c != '\n')       throw new RuntimeException("PARAGRAPH span must end at paragraph boundary");
    }
  }
  if (flagsStart == POINT && flagsEnd == MARK && start == end) {
    if (send)     Log.e("SpannableStringBuilder","SPAN_EXCLUSIVE_EXCLUSIVE spans cannot have a zero length");
    return;
  }
  int nstart=start;
  int nend=end;
  if (start > mGapStart) {
    start+=mGapLength;
  }
 else   if (start == mGapStart) {
    if (flagsStart == POINT || (flagsStart == PARAGRAPH && start == length()))     start+=mGapLength;
  }
  if (end > mGapStart) {
    end+=mGapLength;
  }
 else   if (end == mGapStart) {
    if (flagsEnd == POINT || (flagsEnd == PARAGRAPH && end == length()))     end+=mGapLength;
  }
  int count=mSpanCount;
  Object[] spans=mSpans;
  for (int i=0; i < count; i++) {
    if (spans[i] == what) {
      int ostart=mSpanStarts[i];
      int oend=mSpanEnds[i];
      if (ostart > mGapStart)       ostart-=mGapLength;
      if (oend > mGapStart)       oend-=mGapLength;
      mSpanStarts[i]=start;
      mSpanEnds[i]=end;
      mSpanFlags[i]=flags;
      if (send)       sendSpanChanged(what,ostart,oend,nstart,nend);
      return;
    }
  }
  if (mSpanCount + 1 >= mSpans.length) {
    int newsize=ArrayUtils.idealIntArraySize(mSpanCount + 1);
    Object[] newspans=new Object[newsize];
    int[] newspanstarts=new int[newsize];
    int[] newspanends=new int[newsize];
    int[] newspanflags=new int[newsize];
    System.arraycopy(mSpans,0,newspans,0,mSpanCount);
    System.arraycopy(mSpanStarts,0,newspanstarts,0,mSpanCount);
    System.arraycopy(mSpanEnds,0,newspanends,0,mSpanCount);
    System.arraycopy(mSpanFlags,0,newspanflags,0,mSpanCount);
    mSpans=newspans;
    mSpanStarts=newspanstarts;
    mSpanEnds=newspanends;
    mSpanFlags=newspanflags;
  }
  mSpans[mSpanCount]=what;
  mSpanStarts[mSpanCount]=start;
  mSpanEnds[mSpanCount]=end;
  mSpanFlags[mSpanCount]=flags;
  mSpanCount++;
  if (send)   sendSpanAdded(what,nstart,nend);
}
