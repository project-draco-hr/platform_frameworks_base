{
  for (int i=0; i < mSpanCount; i++) {
    int spanFlags=mSpanFlags[i];
    if ((spanFlags & SPAN_ADDED) != 0)     continue;
    int spanStart=mSpanStarts[i];
    int spanEnd=mSpanEnds[i];
    if (spanStart > mGapStart)     spanStart-=mGapLength;
    if (spanEnd > mGapStart)     spanEnd-=mGapLength;
    int newReplaceEnd=replaceEnd + nbNewChars;
    boolean spanChanged=false;
    int previousSpanStart=spanStart;
    if (spanStart > newReplaceEnd) {
      if (nbNewChars != 0) {
        previousSpanStart-=nbNewChars;
        spanChanged=true;
      }
    }
 else     if (spanStart >= replaceStart) {
      if ((spanStart != replaceStart || ((spanFlags & SPAN_START_AT_START) != SPAN_START_AT_START)) && (spanStart != newReplaceEnd || ((spanFlags & SPAN_START_AT_END) != SPAN_START_AT_END))) {
        spanChanged=true;
      }
    }
    int previousSpanEnd=spanEnd;
    if (spanEnd > newReplaceEnd) {
      if (nbNewChars != 0) {
        previousSpanEnd-=nbNewChars;
        spanChanged=true;
      }
    }
 else     if (spanEnd >= replaceStart) {
      if ((spanEnd != replaceStart || ((spanFlags & SPAN_END_AT_START) != SPAN_END_AT_START)) && (spanEnd != newReplaceEnd || ((spanFlags & SPAN_END_AT_END) != SPAN_END_AT_END))) {
        spanChanged=true;
      }
    }
    if (spanChanged) {
      sendSpanChanged(mSpans[i],previousSpanStart,previousSpanEnd,spanStart,spanEnd);
    }
    mSpanFlags[i]&=~SPAN_START_END_MASK;
  }
  for (int i=0; i < mSpanCount; i++) {
    int spanFlags=mSpanFlags[i];
    if ((spanFlags & SPAN_ADDED) != 0) {
      mSpanFlags[i]&=~SPAN_ADDED;
      int spanStart=mSpanStarts[i];
      int spanEnd=mSpanEnds[i];
      if (spanStart > mGapStart)       spanStart-=mGapLength;
      if (spanEnd > mGapStart)       spanEnd-=mGapLength;
      sendSpanAdded(mSpans[i],spanStart,spanEnd);
    }
  }
}
