{
  int filtercount=mFilters.length;
  for (int i=0; i < filtercount; i++) {
    CharSequence repl=mFilters[i].filter(tb,tbstart,tbend,this,start,end);
    if (repl != null) {
      tb=repl;
      tbstart=0;
      tbend=repl.length();
    }
  }
  final int origLen=end - start;
  final int newLen=tbend - tbstart;
  if (origLen == 0 && newLen == 0) {
    return this;
  }
  TextWatcher[] textWatchers=getSpans(start,start + origLen,TextWatcher.class);
  sendBeforeTextChanged(textWatchers,start,origLen,newLen);
  boolean adjustSelection=origLen != 0 && newLen != 0;
  int selstart=0;
  int selend=0;
  if (adjustSelection) {
    selstart=Selection.getSelectionStart(this);
    selend=Selection.getSelectionEnd(this);
  }
  checkRange("replace",start,end);
  change(start,end,tb,tbstart,tbend);
  if (adjustSelection) {
    if (selstart > start && selstart < end) {
      long off=selstart - start;
      off=off * newLen / origLen;
      selstart=(int)off + start;
      setSpan(false,Selection.SELECTION_START,selstart,selstart,Spanned.SPAN_POINT_POINT);
    }
    if (selend > start && selend < end) {
      long off=selend - start;
      off=off * newLen / origLen;
      selend=(int)off + start;
      setSpan(false,Selection.SELECTION_END,selend,selend,Spanned.SPAN_POINT_POINT);
    }
  }
  sendTextChanged(textWatchers,start,origLen,newLen);
  sendAfterTextChanged(textWatchers);
  return this;
}
