{
  int count=0;
  if ((i & 1) != 0) {
    int left=leftChild(i);
    int spanMax=mSpanMax[left];
    if (spanMax > mGapStart) {
      spanMax-=mGapLength;
    }
    if (spanMax >= queryStart) {
      count=countSpans(queryStart,queryEnd,kind,left);
    }
  }
  if (i < mSpanCount) {
    int spanStart=mSpanStarts[i];
    if (spanStart > mGapStart) {
      spanStart-=mGapLength;
    }
    if (spanStart <= queryEnd) {
      int spanEnd=mSpanEnds[i];
      if (spanEnd > mGapStart) {
        spanEnd-=mGapLength;
      }
      if (spanEnd >= queryStart && (spanStart == spanEnd || queryStart == queryEnd || (spanStart != queryEnd && spanEnd != queryStart)) && kind.isInstance(mSpans[i])) {
        count++;
      }
      if ((i & 1) != 0) {
        count+=countSpans(queryStart,queryEnd,kind,rightChild(i));
      }
    }
  }
  return count;
}
