{
synchronized (mPointers) {
    final int w=getWidth();
    final int itemW=w / 7;
    final int base=-mTextMetrics.ascent + 1;
    final int bottom=mHeaderBottom;
    final int NP=mPointers.size();
    if (mActivePointerId >= 0) {
      final PointerState ps=mPointers.get(mActivePointerId);
      canvas.drawRect(0,0,itemW - 1,bottom,mTextBackgroundPaint);
      canvas.drawText(mText.clear().append("P: ").append(mCurNumPointers).append(" / ").append(mMaxNumPointers).toString(),1,base,mTextPaint);
      final int N=ps.mTraceCount;
      if ((mCurDown && ps.mCurDown) || N == 0) {
        canvas.drawRect(itemW,0,(itemW * 2) - 1,bottom,mTextBackgroundPaint);
        canvas.drawText(mText.clear().append("X: ").append(ps.mCoords.x,1).toString(),1 + itemW,base,mTextPaint);
        canvas.drawRect(itemW * 2,0,(itemW * 3) - 1,bottom,mTextBackgroundPaint);
        canvas.drawText(mText.clear().append("Y: ").append(ps.mCoords.y,1).toString(),1 + itemW * 2,base,mTextPaint);
      }
 else {
        float dx=ps.mTraceX[N - 1] - ps.mTraceX[0];
        float dy=ps.mTraceY[N - 1] - ps.mTraceY[0];
        canvas.drawRect(itemW,0,(itemW * 2) - 1,bottom,Math.abs(dx) < mVC.getScaledTouchSlop() ? mTextBackgroundPaint : mTextLevelPaint);
        canvas.drawText(mText.clear().append("dX: ").append(dx,1).toString(),1 + itemW,base,mTextPaint);
        canvas.drawRect(itemW * 2,0,(itemW * 3) - 1,bottom,Math.abs(dy) < mVC.getScaledTouchSlop() ? mTextBackgroundPaint : mTextLevelPaint);
        canvas.drawText(mText.clear().append("dY: ").append(dy,1).toString(),1 + itemW * 2,base,mTextPaint);
      }
      canvas.drawRect(itemW * 3,0,(itemW * 4) - 1,bottom,mTextBackgroundPaint);
      canvas.drawText(mText.clear().append("Xv: ").append(ps.mXVelocity,3).toString(),1 + itemW * 3,base,mTextPaint);
      canvas.drawRect(itemW * 4,0,(itemW * 5) - 1,bottom,mTextBackgroundPaint);
      canvas.drawText(mText.clear().append("Yv: ").append(ps.mYVelocity,3).toString(),1 + itemW * 4,base,mTextPaint);
      canvas.drawRect(itemW * 5,0,(itemW * 6) - 1,bottom,mTextBackgroundPaint);
      canvas.drawRect(itemW * 5,0,(itemW * 5) + (ps.mCoords.pressure * itemW) - 1,bottom,mTextLevelPaint);
      canvas.drawText(mText.clear().append("Prs: ").append(ps.mCoords.pressure,2).toString(),1 + itemW * 5,base,mTextPaint);
      canvas.drawRect(itemW * 6,0,w,bottom,mTextBackgroundPaint);
      canvas.drawRect(itemW * 6,0,(itemW * 6) + (ps.mCoords.size * itemW) - 1,bottom,mTextLevelPaint);
      canvas.drawText(mText.clear().append("Size: ").append(ps.mCoords.size,2).toString(),1 + itemW * 6,base,mTextPaint);
    }
    for (int p=0; p < NP; p++) {
      final PointerState ps=mPointers.get(p);
      final int N=ps.mTraceCount;
      float lastX=0, lastY=0;
      boolean haveLast=false;
      boolean drawn=false;
      mPaint.setARGB(255,128,255,255);
      for (int i=0; i < N; i++) {
        float x=ps.mTraceX[i];
        float y=ps.mTraceY[i];
        if (Float.isNaN(x)) {
          haveLast=false;
          continue;
        }
        if (haveLast) {
          canvas.drawLine(lastX,lastY,x,y,mPathPaint);
          canvas.drawPoint(lastX,lastY,mPaint);
          drawn=true;
        }
        lastX=x;
        lastY=y;
        haveLast=true;
      }
      if (drawn) {
        mPaint.setARGB(255,255,64,128);
        float xVel=ps.mXVelocity * (1000 / 60);
        float yVel=ps.mYVelocity * (1000 / 60);
        canvas.drawLine(lastX,lastY,lastX + xVel,lastY + yVel,mPaint);
      }
      if (mCurDown && ps.mCurDown) {
        canvas.drawLine(0,ps.mCoords.y,getWidth(),ps.mCoords.y,mTargetPaint);
        canvas.drawLine(ps.mCoords.x,0,ps.mCoords.x,getHeight(),mTargetPaint);
        int pressureLevel=(int)(ps.mCoords.pressure * 255);
        mPaint.setARGB(255,pressureLevel,255,255 - pressureLevel);
        canvas.drawPoint(ps.mCoords.x,ps.mCoords.y,mPaint);
        mPaint.setARGB(255,pressureLevel,255 - pressureLevel,128);
        drawOval(canvas,ps.mCoords.x,ps.mCoords.y,ps.mCoords.touchMajor,ps.mCoords.touchMinor,ps.mCoords.orientation,mPaint);
        mPaint.setARGB(255,pressureLevel,128,255 - pressureLevel);
        drawOval(canvas,ps.mCoords.x,ps.mCoords.y,ps.mCoords.toolMajor,ps.mCoords.toolMinor,ps.mCoords.orientation,mPaint);
        float arrowSize=ps.mCoords.toolMajor * 0.7f;
        if (arrowSize < 20) {
          arrowSize=20;
        }
        mPaint.setARGB(255,pressureLevel,255,0);
        float orientationVectorX=(float)(Math.sin(ps.mCoords.orientation) * arrowSize);
        float orientationVectorY=(float)(-Math.cos(ps.mCoords.orientation) * arrowSize);
        if (ps.mToolType == MotionEvent.TOOL_TYPE_STYLUS || ps.mToolType == MotionEvent.TOOL_TYPE_ERASER) {
          canvas.drawLine(ps.mCoords.x,ps.mCoords.y,ps.mCoords.x + orientationVectorX,ps.mCoords.y + orientationVectorY,mPaint);
        }
 else {
          canvas.drawLine(ps.mCoords.x - orientationVectorX,ps.mCoords.y - orientationVectorY,ps.mCoords.x + orientationVectorX,ps.mCoords.y + orientationVectorY,mPaint);
        }
        float tiltScale=(float)Math.sin(ps.mCoords.getAxisValue(MotionEvent.AXIS_TILT));
        canvas.drawCircle(ps.mCoords.x + orientationVectorX * tiltScale,ps.mCoords.y + orientationVectorY * tiltScale,3.0f,mPaint);
      }
    }
  }
}
