{
synchronized (mPointers) {
    int action=event.getAction();
    int NP=mPointers.size();
    if (action == MotionEvent.ACTION_DOWN || (action & MotionEvent.ACTION_MASK) == MotionEvent.ACTION_POINTER_DOWN) {
      final int index=(action & MotionEvent.ACTION_POINTER_INDEX_MASK) >> MotionEvent.ACTION_POINTER_INDEX_SHIFT;
      if (action == MotionEvent.ACTION_DOWN) {
        for (int p=0; p < NP; p++) {
          final PointerState ps=mPointers.get(p);
          ps.clearTrace();
          ps.mCurDown=false;
        }
        mCurDown=true;
        mMaxNumPointers=0;
        mVelocity.clear();
      }
      final int id=event.getPointerId(index);
      while (NP <= id) {
        PointerState ps=new PointerState();
        mPointers.add(ps);
        NP++;
      }
      if (mActivePointerId < 0 || !mPointers.get(mActivePointerId).mCurDown) {
        mActivePointerId=id;
      }
      final PointerState ps=mPointers.get(id);
      ps.mCurDown=true;
      if (mPrintCoords) {
        Log.i(TAG,mText.clear().append("Pointer ").append(id + 1).append(": DOWN").toString());
      }
    }
    final int NI=event.getPointerCount();
    mCurDown=action != MotionEvent.ACTION_UP && action != MotionEvent.ACTION_CANCEL;
    mCurNumPointers=mCurDown ? NI : 0;
    if (mMaxNumPointers < mCurNumPointers) {
      mMaxNumPointers=mCurNumPointers;
    }
    mVelocity.addMovement(event);
    mVelocity.computeCurrentVelocity(1);
    for (int i=0; i < NI; i++) {
      final int id=event.getPointerId(i);
      final PointerState ps=mPointers.get(id);
      final int N=event.getHistorySize();
      for (int j=0; j < N; j++) {
        event.getHistoricalPointerCoords(i,j,ps.mCoords);
        if (mPrintCoords) {
          logPointerCoords(ps.mCoords,id);
        }
        ps.addTrace(event.getHistoricalX(i,j),event.getHistoricalY(i,j));
      }
      event.getPointerCoords(i,ps.mCoords);
      if (mPrintCoords) {
        logPointerCoords(ps.mCoords,id);
      }
      ps.addTrace(ps.mCoords.x,ps.mCoords.y);
      ps.mXVelocity=mVelocity.getXVelocity(id);
      ps.mYVelocity=mVelocity.getYVelocity(id);
    }
    if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_CANCEL || (action & MotionEvent.ACTION_MASK) == MotionEvent.ACTION_POINTER_UP) {
      final int index=(action & MotionEvent.ACTION_POINTER_INDEX_MASK) >> MotionEvent.ACTION_POINTER_INDEX_SHIFT;
      final int id=event.getPointerId(index);
      final PointerState ps=mPointers.get(id);
      ps.mCurDown=false;
      if (mPrintCoords) {
        Log.i(TAG,mText.clear().append("Pointer ").append(id + 1).append(": UP").toString());
      }
      if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_CANCEL) {
        mCurDown=false;
      }
 else {
        if (mActivePointerId == id) {
          mActivePointerId=event.getPointerId(index == 0 ? 1 : 0);
        }
        ps.addTrace(Float.NaN,Float.NaN);
      }
    }
    postInvalidate();
  }
}
