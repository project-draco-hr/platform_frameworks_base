{
  Animator baseAnimator=(changeReason == APPEARING) ? mChangingAppearingAnim : mChangingDisappearingAnim;
  if (baseAnimator == null) {
    return;
  }
  staggerDelay=0;
  final long duration=(changeReason == APPEARING) ? mChangingAppearingDuration : mChangingDisappearingDuration;
  final ViewTreeObserver observer=parent.getViewTreeObserver();
  if (!observer.isAlive()) {
    return;
  }
  int numChildren=parent.getChildCount();
  for (int i=0; i < numChildren; ++i) {
    final View child=parent.getChildAt(i);
    if (child != newView) {
      setupChangeAnimation(parent,changeReason,baseAnimator,duration,child);
    }
  }
  if (mAnimateParentHierarchy) {
    Animator parentAnimator=(changeReason == APPEARING) ? defaultChangeIn : defaultChangeOut;
    ViewGroup tempParent=parent;
    while (tempParent != null) {
      ViewParent parentParent=tempParent.getParent();
      if (parentParent instanceof ViewGroup) {
        setupChangeAnimation((ViewGroup)parentParent,changeReason,parentAnimator,duration,tempParent);
        tempParent=(ViewGroup)parentParent;
      }
 else {
        tempParent=null;
      }
    }
  }
  observer.addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener(){
    public boolean onPreDraw(){
      parent.getViewTreeObserver().removeOnPreDrawListener(this);
      int count=layoutChangeListenerMap.size();
      if (count > 0) {
        Collection<View> views=layoutChangeListenerMap.keySet();
        for (        View view : views) {
          View.OnLayoutChangeListener listener=layoutChangeListenerMap.get(view);
          view.removeOnLayoutChangeListener(listener);
        }
      }
      layoutChangeListenerMap.clear();
      return true;
    }
  }
);
}
