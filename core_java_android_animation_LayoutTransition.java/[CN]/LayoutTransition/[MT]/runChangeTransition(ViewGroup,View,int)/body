{
  Animator baseAnimator=(changeReason == APPEARING) ? mChangingAppearingAnim : mChangingDisappearingAnim;
  if (baseAnimator == null) {
    return;
  }
  staggerDelay=0;
  final ViewTreeObserver observer=parent.getViewTreeObserver();
  if (!observer.isAlive()) {
    return;
  }
  int numChildren=parent.getChildCount();
  for (int i=0; i < numChildren; ++i) {
    final View child=parent.getChildAt(i);
    if (child != newView) {
      Animator currentAnimation=currentChangingAnimations.get(child);
      if (currentAnimation != null) {
        currentAnimation.cancel();
        currentChangingAnimations.remove(child);
      }
      final Animator anim=baseAnimator.clone();
      anim.setTarget(child);
      anim.setupStartValues();
      final View.OnLayoutChangeListener listener=new View.OnLayoutChangeListener(){
        public void onLayoutChange(        View v,        int left,        int top,        int right,        int bottom,        int oldLeft,        int oldTop,        int oldRight,        int oldBottom){
          anim.setupEndValues();
          long startDelay;
          long duration;
          if (changeReason == APPEARING) {
            startDelay=mChangingAppearingDelay + staggerDelay;
            staggerDelay+=mChangingAppearingStagger;
            duration=mChangingAppearingDuration;
          }
 else {
            startDelay=mChangingDisappearingDelay + staggerDelay;
            staggerDelay+=mChangingDisappearingStagger;
            duration=mChangingDisappearingDuration;
          }
          anim.setStartDelay(startDelay);
          anim.setDuration(duration);
          currentChangingAnimations.put(child,anim);
          if (anim instanceof ObjectAnimator) {
            ((ObjectAnimator)anim).setCurrentPlayTime(0);
          }
          anim.start();
          child.removeOnLayoutChangeListener(this);
          layoutChangeListenerMap.remove(child);
        }
      }
;
      anim.addListener(new AnimatorListenerAdapter(){
        private boolean canceled=false;
        @Override public void onAnimationStart(        Animator animator){
          if (mListeners != null) {
            for (            TransitionListener listener : mListeners) {
              listener.startTransition(LayoutTransition.this,parent,child,changeReason == APPEARING ? CHANGE_APPEARING : CHANGE_DISAPPEARING);
            }
          }
        }
        @Override public void onAnimationCancel(        Animator animator){
          canceled=true;
          child.removeOnLayoutChangeListener(listener);
          layoutChangeListenerMap.remove(child);
        }
        @Override public void onAnimationEnd(        Animator animator){
          if (!canceled) {
            currentChangingAnimations.remove(child);
          }
          if (mListeners != null) {
            for (            TransitionListener listener : mListeners) {
              listener.endTransition(LayoutTransition.this,parent,child,changeReason == APPEARING ? CHANGE_APPEARING : CHANGE_DISAPPEARING);
            }
          }
        }
      }
);
      child.addOnLayoutChangeListener(listener);
      layoutChangeListenerMap.put(child,listener);
    }
  }
  observer.addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener(){
    public boolean onPreDraw(){
      parent.getViewTreeObserver().removeOnPreDrawListener(this);
      int numChildren=parent.getChildCount();
      for (int i=0; i < numChildren; ++i) {
        final View child=parent.getChildAt(i);
        child.removeOnLayoutChangeListener(layoutChangeListenerMap.get(child));
      }
      layoutChangeListenerMap.clear();
      return true;
    }
  }
);
}
