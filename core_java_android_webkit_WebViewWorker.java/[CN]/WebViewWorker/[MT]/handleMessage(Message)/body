{
switch (msg.what) {
case MSG_ADD_STREAMLOADER:
{
      StreamLoader loader=(StreamLoader)msg.obj;
      loader.load();
      break;
    }
case MSG_ADD_HTTPLOADER:
{
    FrameLoader loader=(FrameLoader)msg.obj;
    loader.handleHTTPLoad();
    break;
  }
case MSG_CREATE_CACHE:
{
  CacheCreateData data=(CacheCreateData)msg.obj;
  CacheManager.CacheResult cache=CacheManager.createCacheFile(data.mUrl,data.mStatusCode,data.mHeaders,data.mMimeType,data.mPostId,false);
  if (cache != null) {
    mCacheResultMap.put(data.mListener,cache);
  }
 else {
    mCacheResultMap.remove(data.mListener);
  }
  break;
}
case MSG_UPDATE_CACHE_ENCODING:
{
CacheEncoding data=(CacheEncoding)msg.obj;
CacheManager.CacheResult cache=mCacheResultMap.get(data.mListener);
if (cache != null) {
  cache.encoding=data.mEncoding;
}
break;
}
case MSG_APPEND_CACHE:
{
CacheData data=(CacheData)msg.obj;
CacheManager.CacheResult cache=mCacheResultMap.get(data.mListener);
if (cache != null) {
cache.contentLength+=data.mChunk.mLength;
if (cache.contentLength > CacheManager.CACHE_MAX_SIZE) {
  CacheManager.cleanupCacheFile(cache);
  mCacheResultMap.remove(data.mListener);
}
 else {
  try {
    cache.outStream.write(data.mChunk.mArray,0,data.mChunk.mLength);
  }
 catch (  IOException e) {
    CacheManager.cleanupCacheFile(cache);
    mCacheResultMap.remove(data.mListener);
  }
}
}
data.mChunk.release();
break;
}
case MSG_SAVE_CACHE:
{
CacheSaveData data=(CacheSaveData)msg.obj;
CacheManager.CacheResult cache=mCacheResultMap.get(data.mListener);
if (cache != null) {
CacheManager.saveCacheFile(data.mUrl,data.mPostId,cache);
mCacheResultMap.remove(data.mListener);
}
break;
}
case MSG_REMOVE_CACHE:
{
LoadListener listener=(LoadListener)msg.obj;
CacheManager.CacheResult cache=mCacheResultMap.get(listener);
if (cache != null) {
CacheManager.cleanupCacheFile(cache);
mCacheResultMap.remove(listener);
}
break;
}
case MSG_TRIM_CACHE:
{
CacheManager.trimCacheIfNeeded();
break;
}
case MSG_CLEAR_CACHE:
{
CacheManager.clearCache();
break;
}
case MSG_CACHE_TRANSACTION_TICKER:
{
if (!mCacheTickersBlocked) {
CacheManager.endTransaction();
CacheManager.startTransaction();
sendEmptyMessageDelayed(MSG_CACHE_TRANSACTION_TICKER,CACHE_TRANSACTION_TICKER_INTERVAL);
}
break;
}
case MSG_PAUSE_CACHE_TRANSACTION:
{
if (CacheManager.disableTransaction()) {
mCacheTickersBlocked=true;
removeMessages(MSG_CACHE_TRANSACTION_TICKER);
}
break;
}
case MSG_RESUME_CACHE_TRANSACTION:
{
if (CacheManager.enableTransaction()) {
mCacheTickersBlocked=false;
sendEmptyMessageDelayed(MSG_CACHE_TRANSACTION_TICKER,CACHE_TRANSACTION_TICKER_INTERVAL);
}
break;
}
}
}
