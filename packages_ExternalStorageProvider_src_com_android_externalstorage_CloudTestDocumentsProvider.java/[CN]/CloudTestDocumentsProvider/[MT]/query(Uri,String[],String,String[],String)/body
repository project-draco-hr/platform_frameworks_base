{
switch (sMatcher.match(uri)) {
case URI_ROOTS:
{
      final MatrixCursor result=new MatrixCursor(projection != null ? projection : ALL_ROOTS_COLUMNS);
      includeDefaultRoot(result);
      return result;
    }
case URI_ROOTS_ID:
{
    final MatrixCursor result=new MatrixCursor(projection != null ? projection : ALL_ROOTS_COLUMNS);
    includeDefaultRoot(result);
    return result;
  }
case URI_DOCS_ID:
{
  final String docId=DocumentsContract.getDocId(uri);
  final MatrixCursor result=new MatrixCursor(projection != null ? projection : ALL_DOCUMENTS_COLUMNS);
  includeDoc(result,docId);
  return result;
}
case URI_DOCS_ID_CONTENTS:
{
final CloudCursor result=new CloudCursor(projection != null ? projection : ALL_DOCUMENTS_COLUMNS,uri);
for (String docId : mKnownDocs) {
  includeDoc(result,docId);
}
if (mPage < 3) {
  result.setHasMore();
}
result.setNotificationUri(getContext().getContentResolver(),uri);
return result;
}
default :
{
throw new UnsupportedOperationException("Unsupported Uri " + uri);
}
}
}
