{
switch (msg.what) {
case MSG_EMERGENCE_CHANGED:
    for (    EmergencyListener listener : mEmergencyListeners) {
      listener.setEmergencyCallsOnly(msg.arg1 != 0);
    }
  break;
case MSG_SUBS_CHANGED:
for (SignalCallback signalCluster : mSignalCallbacks) {
  signalCluster.setSubs((List<SubscriptionInfo>)msg.obj);
}
break;
case MSG_NO_SIM_VISIBLE_CHANGED:
for (SignalCallback signalCluster : mSignalCallbacks) {
signalCluster.setNoSims(msg.arg1 != 0);
}
break;
case MSG_ETHERNET_CHANGED:
for (SignalCallback signalCluster : mSignalCallbacks) {
signalCluster.setEthernetIndicators((IconState)msg.obj);
}
break;
case MSG_AIRPLANE_MODE_CHANGED:
for (SignalCallback signalCluster : mSignalCallbacks) {
signalCluster.setIsAirplaneMode((IconState)msg.obj);
}
break;
case MSG_MOBILE_DATA_ENABLED_CHANGED:
for (SignalCallback signalCluster : mSignalCallbacks) {
signalCluster.setMobileDataEnabled(msg.arg1 != 0);
}
break;
case MSG_ADD_REMOVE_EMERGENCY:
if (msg.arg1 != 0) {
mEmergencyListeners.add((EmergencyListener)msg.obj);
}
 else {
mEmergencyListeners.remove((EmergencyListener)msg.obj);
}
break;
case MSG_ADD_REMOVE_SIGNAL:
if (msg.arg1 != 0) {
mSignalCallbacks.add((SignalCallback)msg.obj);
}
 else {
mSignalCallbacks.remove((SignalCallback)msg.obj);
}
break;
}
}
