{
  mSilentModeAction=new SilentModeAction(mContext,mAudioManager,mHandler);
  mAirplaneModeOn=new ToggleAction(R.drawable.ic_lock_airplane_mode,R.drawable.ic_lock_airplane_mode_off,R.string.global_actions_toggle_airplane_mode,R.string.global_actions_airplane_mode_on_status,R.string.global_actions_airplane_mode_off_status){
    void onToggle(    boolean on){
      if (Boolean.parseBoolean(SystemProperties.get(TelephonyProperties.PROPERTY_INECM_MODE))) {
        mIsWaitingForEcmExit=true;
        Intent ecmDialogIntent=new Intent(TelephonyIntents.ACTION_SHOW_NOTICE_ECM_BLOCK_OTHERS,null);
        ecmDialogIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        mContext.startActivity(ecmDialogIntent);
      }
 else {
        changeAirplaneModeSystemSetting(on);
      }
    }
    @Override protected void changeStateFromPress(    boolean buttonOn){
      if (!(Boolean.parseBoolean(SystemProperties.get(TelephonyProperties.PROPERTY_INECM_MODE)))) {
        mState=buttonOn ? State.TurningOn : State.TurningOff;
        mAirplaneState=mState;
      }
    }
    public boolean showDuringKeyguard(){
      return true;
    }
    public boolean showBeforeProvisioning(){
      return false;
    }
  }
;
  mItems=new ArrayList<Action>();
  mItems.add(new SinglePressAction(com.android.internal.R.drawable.ic_lock_power_off,R.string.global_action_power_off){
    public void onPress(){
      ShutdownThread.shutdown(mContext,true);
    }
    public boolean showDuringKeyguard(){
      return true;
    }
    public boolean showBeforeProvisioning(){
      return true;
    }
  }
);
  mItems.add(mAirplaneModeOn);
  if (SHOW_SILENT_TOGGLE) {
    mItems.add(mSilentModeAction);
  }
  List<UserInfo> users=mContext.getPackageManager().getUsers();
  if (users.size() > 1) {
    UserInfo currentUser;
    try {
      currentUser=ActivityManagerNative.getDefault().getCurrentUser();
    }
 catch (    RemoteException re) {
      currentUser=null;
    }
    for (    final UserInfo user : users) {
      boolean isCurrentUser=currentUser == null ? user.id == 0 : (currentUser.id == user.id);
      SinglePressAction switchToUser=new SinglePressAction(com.android.internal.R.drawable.ic_menu_cc,(user.name != null ? user.name : "Primary") + (isCurrentUser ? " \u2714" : "")){
        public void onPress(){
          try {
            ActivityManagerNative.getDefault().switchUser(user.id);
            getWindowManager().lockNow();
          }
 catch (          RemoteException re) {
            Log.e(TAG,"Couldn't switch user " + re);
          }
        }
        public boolean showDuringKeyguard(){
          return true;
        }
        public boolean showBeforeProvisioning(){
          return false;
        }
      }
;
      mItems.add(switchToUser);
    }
  }
  mAdapter=new MyAdapter();
  final AlertDialog.Builder ab=new AlertDialog.Builder(mContext);
  ab.setAdapter(mAdapter,this).setInverseBackgroundForced(true);
  final AlertDialog dialog=ab.create();
  dialog.getListView().setItemsCanFocus(true);
  dialog.getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_DIALOG);
  dialog.setOnDismissListener(this);
  return dialog;
}
