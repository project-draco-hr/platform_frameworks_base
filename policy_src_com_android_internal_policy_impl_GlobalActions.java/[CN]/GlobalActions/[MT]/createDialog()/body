{
  if (!mHasVibrator) {
    mSilentModeAction=new SilentModeToggleAction();
  }
 else {
    mSilentModeAction=new SilentModeTriStateAction(mContext,mAudioManager,mHandler);
  }
  mAirplaneModeOn=new ToggleAction(R.drawable.ic_lock_airplane_mode,R.drawable.ic_lock_airplane_mode_off,R.string.global_actions_toggle_airplane_mode,R.string.global_actions_airplane_mode_on_status,R.string.global_actions_airplane_mode_off_status){
    void onToggle(    boolean on){
      if (mHasTelephony && Boolean.parseBoolean(SystemProperties.get(TelephonyProperties.PROPERTY_INECM_MODE))) {
        mIsWaitingForEcmExit=true;
        Intent ecmDialogIntent=new Intent(TelephonyIntents.ACTION_SHOW_NOTICE_ECM_BLOCK_OTHERS,null);
        ecmDialogIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        mContext.startActivity(ecmDialogIntent);
      }
 else {
        changeAirplaneModeSystemSetting(on);
      }
    }
    @Override protected void changeStateFromPress(    boolean buttonOn){
      if (!mHasTelephony)       return;
      if (!(Boolean.parseBoolean(SystemProperties.get(TelephonyProperties.PROPERTY_INECM_MODE)))) {
        mState=buttonOn ? State.TurningOn : State.TurningOff;
        mAirplaneState=mState;
      }
    }
    public boolean showDuringKeyguard(){
      return true;
    }
    public boolean showBeforeProvisioning(){
      return false;
    }
  }
;
  onAirplaneModeChanged();
  mItems=new ArrayList<Action>();
  String[] defaultActions=mContext.getResources().getStringArray(com.android.internal.R.array.config_globalActionsList);
  ArraySet<String> addedKeys=new ArraySet<String>();
  for (int i=0; i < defaultActions.length; i++) {
    String actionKey=defaultActions[i];
    if (addedKeys.contains(actionKey)) {
      continue;
    }
    if (GLOBAL_ACTION_KEY_POWER.equals(actionKey)) {
      mItems.add(new PowerAction());
    }
 else     if (GLOBAL_ACTION_KEY_AIRPLANE.equals(actionKey)) {
      mItems.add(mAirplaneModeOn);
    }
 else     if (GLOBAL_ACTION_KEY_BUGREPORT.equals(actionKey) && (Settings.Global.getInt(mContext.getContentResolver(),Settings.Global.BUGREPORT_IN_POWER_MENU,0) != 0 && isCurrentUserOwner())) {
      mItems.add(getBugReportAction());
    }
 else     if (GLOBAL_ACTION_KEY_SILENT.equals(actionKey) && mShowSilentToggle) {
      mItems.add(mSilentModeAction);
    }
 else     if (GLOBAL_ACTION_KEY_USERS.equals(actionKey) && SystemProperties.getBoolean("fw.power_user_switcher",false)) {
      addUsersToMenu(mItems);
    }
 else     if (GLOBAL_ACTION_KEY_SETTINGS.equals(actionKey)) {
      mItems.add(getSettingsAction());
    }
 else     if (GLOBAL_ACTION_KEY_LOCKDOWN.equals(actionKey) && hasTrustAgents()) {
      mItems.add(getLockdownAction());
    }
 else {
      Log.e(TAG,"Invalid global action key " + actionKey);
    }
    addedKeys.add(actionKey);
  }
  mAdapter=new MyAdapter();
  AlertParams params=new AlertParams(mContext);
  params.mAdapter=mAdapter;
  params.mOnClickListener=this;
  params.mForceInverseBackground=true;
  GlobalActionsDialog dialog=new GlobalActionsDialog(mContext,params);
  dialog.setCanceledOnTouchOutside(false);
  dialog.getListView().setItemsCanFocus(true);
  dialog.getListView().setLongClickable(true);
  dialog.getListView().setOnItemLongClickListener(new AdapterView.OnItemLongClickListener(){
    @Override public boolean onItemLongClick(    AdapterView<?> parent,    View view,    int position,    long id){
      final Action action=mAdapter.getItem(position);
      if (action instanceof LongPressAction) {
        return ((LongPressAction)action).onLongPress();
      }
      return false;
    }
  }
);
  dialog.getWindow().setType(WindowManager.LayoutParams.TYPE_KEYGUARD_DIALOG);
  dialog.setOnDismissListener(this);
  return dialog;
}
