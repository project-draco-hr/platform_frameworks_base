{
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println("Permission Denial: can't dump from from pid=" + Binder.getCallingPid() + ", uid="+ Binder.getCallingUid());
    return;
  }
synchronized (mGadgetIds) {
    int N=mInstalledProviders.size();
    pw.println("Providers: (size=" + N + ")");
    for (int i=0; i < N; i++) {
      Provider p=mInstalledProviders.get(i);
      GadgetProviderInfo info=p.info;
      pw.println("  [" + i + "] provder="+ info.provider+ " min=("+ info.minWidth+ "x"+ info.minHeight+ ")"+ " updatePeriodMillis="+ info.updatePeriodMillis+ " initialLayout="+ info.initialLayout+ " zombie="+ p.zombie);
    }
    N=mGadgetIds.size();
    pw.println("GadgetIds: (size=" + N + ")");
    for (int i=0; i < N; i++) {
      GadgetId id=mGadgetIds.get(i);
      pw.println("  [" + i + "] gadgetId="+ id.gadgetId+ " host="+ id.host.hostId+ "/"+ id.host.packageName+ " provider="+ (id.provider == null ? "null" : id.provider.info.provider)+ " host.callbacks="+ (id.host != null ? id.host.callbacks : "(no host)")+ " views="+ id.views);
    }
    N=mHosts.size();
    pw.println("Hosts: (size=" + N + ")");
    for (int i=0; i < N; i++) {
      Host host=mHosts.get(i);
      pw.println("  [" + i + "] packageName="+ host.packageName+ " uid="+ host.uid+ " hostId="+ host.hostId+ " callbacks="+ host.callbacks+ " instances.size="+ host.instances.size()+ " zombie="+ host.zombie);
    }
  }
}
