{
  FileOutputStream stream=null;
  int N;
  try {
    stream=new FileOutputStream(file,false);
    XmlSerializer out=new FastXmlSerializer();
    out.setOutput(stream,"utf-8");
    out.startDocument(null,true);
    out.startTag(null,"gs");
    int providerIndex=0;
    N=mInstalledProviders.size();
    for (int i=0; i < N; i++) {
      Provider p=mInstalledProviders.get(i);
      if (p.instances.size() > 0) {
        out.startTag(null,"p");
        out.attribute(null,"pkg",p.info.provider.getPackageName());
        out.attribute(null,"cl",p.info.provider.getClassName());
        out.endTag(null,"h");
        p.tag=providerIndex;
        providerIndex++;
      }
    }
    N=mHosts.size();
    for (int i=0; i < N; i++) {
      Host host=mHosts.get(i);
      out.startTag(null,"h");
      out.attribute(null,"pkg",host.packageName);
      out.attribute(null,"id",Integer.toHexString(host.hostId));
      out.endTag(null,"h");
      host.tag=i;
    }
    N=mGadgetIds.size();
    for (int i=0; i < N; i++) {
      GadgetId id=mGadgetIds.get(i);
      out.startTag(null,"g");
      out.attribute(null,"id",Integer.toHexString(id.gadgetId));
      out.attribute(null,"h",Integer.toHexString(id.host.tag));
      if (id.provider != null) {
        out.attribute(null,"p",Integer.toHexString(id.provider.tag));
      }
      out.endTag(null,"g");
    }
    out.endTag(null,"gs");
    out.endDocument();
    stream.close();
  }
 catch (  IOException e) {
    try {
      if (stream != null) {
        stream.close();
      }
    }
 catch (    IOException ex) {
    }
    if (file.exists()) {
      file.delete();
    }
  }
}
