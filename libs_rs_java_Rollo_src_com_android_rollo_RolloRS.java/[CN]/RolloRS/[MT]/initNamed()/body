{
  mRS.samplerBegin();
  mRS.samplerSet(RenderScript.SamplerParam.FILTER_MIN,RenderScript.SamplerValue.LINEAR);
  mRS.samplerSet(RenderScript.SamplerParam.FILTER_MAG,RenderScript.SamplerValue.LINEAR);
  mRS.samplerSet(RenderScript.SamplerParam.WRAP_MODE_S,RenderScript.SamplerValue.CLAMP);
  mRS.samplerSet(RenderScript.SamplerParam.WRAP_MODE_T,RenderScript.SamplerValue.CLAMP);
  mSampler=mRS.samplerCreate();
  mRS.programFragmentBegin(null,null);
  mRS.programFragmentSetTexEnable(0,true);
  mPFImages=mRS.programFragmentCreate();
  mPFImages.setName("PF");
  mPFImages.bindSampler(mSampler,0);
  mPFImages.bindSampler(mSampler,1);
  mRS.programFragmentStoreBegin(null,null);
  mRS.programFragmentStoreDepthFunc(RenderScript.DepthFunc.LESS);
  mRS.programFragmentStoreDitherEnable(false);
  mRS.programFragmentStoreDepthMask(false);
  mRS.programFragmentStoreBlendFunc(RenderScript.BlendSrcFunc.ONE,RenderScript.BlendDstFunc.ONE);
  mPFSBackground=mRS.programFragmentStoreCreate();
  mPFSBackground.setName("PFS");
  mRS.programFragmentStoreBegin(null,null);
  mRS.programFragmentStoreDepthFunc(RenderScript.DepthFunc.ALWAYS);
  mRS.programFragmentStoreDitherEnable(false);
  mRS.programFragmentStoreDepthMask(true);
  mRS.programFragmentStoreColorMask(false,false,false,false);
  mPFSShadow=mRS.programFragmentStoreCreate();
  mPFSShadow.setName("PFSShadow");
  mPVAlloc=new ProgramVertexAlloc(mRS);
  mRS.programVertexBegin(null,null);
  mRS.programVertexSetTextureMatrixEnable(true);
  mPV=mRS.programVertexCreate();
  mPV.setName("PV");
  mPV.bindAllocation(0,mPVAlloc.mAlloc);
  mPVAlloc.setupProjectionNormalized(320,480);
  mRS.contextBindProgramVertex(mPV);
  mAllocScratchBuf=new int[32];
  for (int ct=0; ct < mAllocScratchBuf.length; ct++) {
    mAllocScratchBuf[ct]=0;
  }
  mAllocScratch=mRS.allocationCreatePredefSized(RenderScript.ElementPredefined.USER_I32,mAllocScratchBuf.length);
  mAllocScratch.data(mAllocScratchBuf);
  Log.e("rs","Done loading named");
{
    mIcons=new RenderScript.Allocation[4];
    mAllocIconIDBuf=new int[mIcons.length];
    mAllocIconID=mRS.allocationCreatePredefSized(RenderScript.ElementPredefined.USER_I32,mAllocIconIDBuf.length);
    Bitmap b;
    BitmapFactory.Options opts=new BitmapFactory.Options();
    opts.inScaled=false;
    b=BitmapFactory.decodeResource(mRes,R.raw.browser,opts);
    mIcons[0]=mRS.allocationCreateFromBitmap(b,RenderScript.ElementPredefined.RGB_565,true);
    b=BitmapFactory.decodeResource(mRes,R.raw.market,opts);
    mIcons[1]=mRS.allocationCreateFromBitmap(b,RenderScript.ElementPredefined.RGB_565,true);
    b=BitmapFactory.decodeResource(mRes,R.raw.photos,opts);
    mIcons[2]=mRS.allocationCreateFromBitmap(b,RenderScript.ElementPredefined.RGB_565,true);
    b=BitmapFactory.decodeResource(mRes,R.raw.settings,opts);
    mIcons[3]=mRS.allocationCreateFromBitmap(b,RenderScript.ElementPredefined.RGB_565,true);
    for (int ct=0; ct < mIcons.length; ct++) {
      mIcons[ct].uploadToTexture(0);
      mAllocIconIDBuf[ct]=mIcons[ct].getID();
    }
    mAllocIconID.data(mAllocIconIDBuf);
    RenderScript.Element e=mRS.elementGetPredefined(RenderScript.ElementPredefined.RGB_565);
    mRS.typeBegin(e);
    mRS.typeAdd(RenderScript.Dimension.X,64);
    mRS.typeAdd(RenderScript.Dimension.Y,64);
    RenderScript.Type t=mRS.typeCreate();
    mIconPlate=mRS.allocationCreateTyped(t);
    int tmp[]=new int[64 * 32];
    for (int ct=0; ct < (64 * 32); ct++) {
      tmp[ct]=7 | (13 << 5) | (7 << 11);
      tmp[ct]=tmp[ct] | (tmp[ct] << 16);
    }
    for (int ct=0; ct < 32; ct++) {
      tmp[ct]=0;
      tmp[ct + (63 * 32)]=0;
    }
    for (int ct=0; ct < 64; ct++) {
      tmp[ct * 32]=0;
      tmp[ct * 32 + 31]=0;
    }
    mIconPlate.data(tmp);
    Log.e("xx","plate");
    mIconPlate.uploadToTexture(0);
    mIconPlate.setName("Plate");
    mPFImages.bindTexture(mIconPlate,0);
  }
}
