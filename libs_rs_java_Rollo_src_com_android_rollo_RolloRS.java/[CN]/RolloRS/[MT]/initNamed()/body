{
  mRS.samplerBegin();
  mRS.samplerSet(RenderScript.SamplerParam.FILTER_MIN,RenderScript.SamplerValue.LINEAR);
  mRS.samplerSet(RenderScript.SamplerParam.FILTER_MAG,RenderScript.SamplerValue.LINEAR);
  mRS.samplerSet(RenderScript.SamplerParam.WRAP_MODE_S,RenderScript.SamplerValue.CLAMP);
  mRS.samplerSet(RenderScript.SamplerParam.WRAP_MODE_T,RenderScript.SamplerValue.CLAMP);
  mSampler=mRS.samplerCreate();
  mRS.samplerBegin();
  mRS.samplerSet(RenderScript.SamplerParam.FILTER_MIN,RenderScript.SamplerValue.NEAREST);
  mRS.samplerSet(RenderScript.SamplerParam.FILTER_MAG,RenderScript.SamplerValue.NEAREST);
  mRS.samplerSet(RenderScript.SamplerParam.WRAP_MODE_S,RenderScript.SamplerValue.CLAMP);
  mRS.samplerSet(RenderScript.SamplerParam.WRAP_MODE_T,RenderScript.SamplerValue.CLAMP);
  mSamplerText=mRS.samplerCreate();
  mRS.programFragmentBegin(null,null);
  mRS.programFragmentSetTexEnable(0,true);
  mRS.programFragmentSetTexEnvMode(0,RenderScript.EnvMode.MODULATE);
  mPFImages=mRS.programFragmentCreate();
  mPFImages.setName("PF");
  mPFImages.bindSampler(mSampler,0);
  mRS.programFragmentBegin(null,null);
  mRS.programFragmentSetTexEnable(0,true);
  mRS.programFragmentSetTexEnvMode(0,RenderScript.EnvMode.MODULATE);
  mPFText=mRS.programFragmentCreate();
  mPFText.setName("PFText");
  mPFText.bindSampler(mSamplerText,0);
  mRS.programFragmentStoreBegin(null,null);
  mRS.programFragmentStoreDepthFunc(RenderScript.DepthFunc.LESS);
  mRS.programFragmentStoreDitherEnable(false);
  mRS.programFragmentStoreDepthMask(true);
  mRS.programFragmentStoreBlendFunc(RenderScript.BlendSrcFunc.SRC_ALPHA,RenderScript.BlendDstFunc.ONE_MINUS_SRC_ALPHA);
  mPFSBackground=mRS.programFragmentStoreCreate();
  mPFSBackground.setName("PFS");
  mRS.programFragmentStoreBegin(null,null);
  mRS.programFragmentStoreDepthFunc(RenderScript.DepthFunc.ALWAYS);
  mRS.programFragmentStoreDitherEnable(false);
  mRS.programFragmentStoreDepthMask(false);
  mRS.programFragmentStoreBlendFunc(RenderScript.BlendSrcFunc.SRC_ALPHA,RenderScript.BlendDstFunc.ONE_MINUS_SRC_ALPHA);
  mPFSText=mRS.programFragmentStoreCreate();
  mPFSText.setName("PFSText");
  mPVAlloc=new ProgramVertexAlloc(mRS);
  mRS.programVertexBegin(null,null);
  mRS.programVertexSetTextureMatrixEnable(false);
  mPV=mRS.programVertexCreate();
  mPV.setName("PV");
  mPV.bindAllocation(0,mPVAlloc.mAlloc);
  mPVAlloc.setupProjectionNormalized(mWidth,mHeight);
  mPVOrthoAlloc=new ProgramVertexAlloc(mRS);
  mRS.programVertexBegin(null,null);
  mRS.programVertexSetTextureMatrixEnable(true);
  mPVOrtho=mRS.programVertexCreate();
  mPVOrtho.setName("PVOrtho");
  mPVOrtho.bindAllocation(0,mPVOrthoAlloc.mAlloc);
  mPVOrthoAlloc.setupOrthoWindow(mWidth,mHeight);
  mRS.contextBindProgramVertex(mPV);
  mAllocScratchBuf=new int[32];
  for (int ct=0; ct < mAllocScratchBuf.length; ct++) {
    mAllocScratchBuf[ct]=0;
  }
  mAllocScratch=mRS.allocationCreatePredefSized(RenderScript.ElementPredefined.USER_I32,mAllocScratchBuf.length);
  mAllocScratch.data(mAllocScratchBuf);
  Log.e("rs","Done loading named");
{
    mIcons=new RenderScript.Allocation[29];
    mAllocIconIDBuf=new int[mIcons.length];
    mAllocIconID=mRS.allocationCreatePredefSized(RenderScript.ElementPredefined.USER_I32,mAllocIconIDBuf.length);
    mLabels=new RenderScript.Allocation[29];
    mAllocLabelIDBuf=new int[mLabels.length];
    mAllocLabelID=mRS.allocationCreatePredefSized(RenderScript.ElementPredefined.USER_I32,mLabels.length);
    Bitmap b;
    BitmapFactory.Options opts=new BitmapFactory.Options();
    opts.inScaled=false;
    b=BitmapFactory.decodeResource(mRes,R.raw.cf_background,opts);
    mBackground=mRS.allocationCreateFromBitmap(b,RenderScript.ElementPredefined.RGB_565,true);
    mBackground.setName("TexBk");
    b=BitmapFactory.decodeResource(mRes,R.raw.browser,opts);
    mIcons[0]=mRS.allocationCreateFromBitmap(b,RenderScript.ElementPredefined.RGBA_8888,true);
    mLabels[0]=makeTextBitmap("browser");
    b=BitmapFactory.decodeResource(mRes,R.raw.market,opts);
    mIcons[1]=mRS.allocationCreateFromBitmap(b,RenderScript.ElementPredefined.RGBA_8888,true);
    mLabels[1]=makeTextBitmap("market");
    b=BitmapFactory.decodeResource(mRes,R.raw.photos,opts);
    mIcons[2]=mRS.allocationCreateFromBitmap(b,RenderScript.ElementPredefined.RGBA_8888,true);
    mLabels[2]=makeTextBitmap("photos");
    b=BitmapFactory.decodeResource(mRes,R.raw.settings,opts);
    mIcons[3]=mRS.allocationCreateFromBitmap(b,RenderScript.ElementPredefined.RGBA_8888,true);
    mLabels[3]=makeTextBitmap("settings");
    b=BitmapFactory.decodeResource(mRes,R.raw.calendar,opts);
    mIcons[4]=mRS.allocationCreateFromBitmap(b,RenderScript.ElementPredefined.RGB_565,true);
    mLabels[4]=makeTextBitmap("creed");
    b=BitmapFactory.decodeResource(mRes,R.raw.g1155,opts);
    mIcons[5]=mRS.allocationCreateFromBitmap(b,RenderScript.ElementPredefined.RGB_565,true);
    mLabels[5]=makeTextBitmap("BOA");
    b=BitmapFactory.decodeResource(mRes,R.raw.g2140,opts);
    mIcons[6]=mRS.allocationCreateFromBitmap(b,RenderScript.ElementPredefined.RGB_565,true);
    mLabels[6]=makeTextBitmap("chess");
    b=BitmapFactory.decodeResource(mRes,R.raw.maps,opts);
    mIcons[7]=mRS.allocationCreateFromBitmap(b,RenderScript.ElementPredefined.RGB_565,true);
    mLabels[7]=makeTextBitmap("Dictionary");
    b=BitmapFactory.decodeResource(mRes,R.raw.path431,opts);
    mIcons[8]=mRS.allocationCreateFromBitmap(b,RenderScript.ElementPredefined.RGB_565,true);
    mLabels[8]=makeTextBitmap("facebook");
    b=BitmapFactory.decodeResource(mRes,R.raw.path676,opts);
    mIcons[9]=mRS.allocationCreateFromBitmap(b,RenderScript.ElementPredefined.RGB_565,true);
    mLabels[9]=makeTextBitmap("Flash Light");
    b=BitmapFactory.decodeResource(mRes,R.raw.path754,opts);
    mIcons[10]=mRS.allocationCreateFromBitmap(b,RenderScript.ElementPredefined.RGB_565,true);
    mLabels[10]=makeTextBitmap("Flight Control");
    b=BitmapFactory.decodeResource(mRes,R.raw.path815,opts);
    mIcons[11]=mRS.allocationCreateFromBitmap(b,RenderScript.ElementPredefined.RGB_565,true);
    mLabels[11]=makeTextBitmap("google earth");
    b=BitmapFactory.decodeResource(mRes,R.raw.path1920,opts);
    mIcons[12]=mRS.allocationCreateFromBitmap(b,RenderScript.ElementPredefined.RGB_565,true);
    mLabels[12]=makeTextBitmap("Harry Potter");
    b=BitmapFactory.decodeResource(mRes,R.raw.path1927,opts);
    mIcons[13]=mRS.allocationCreateFromBitmap(b,RenderScript.ElementPredefined.RGB_565,true);
    mLabels[13]=makeTextBitmap("Movies");
    b=BitmapFactory.decodeResource(mRes,R.raw.path3099,opts);
    mIcons[14]=mRS.allocationCreateFromBitmap(b,RenderScript.ElementPredefined.RGB_565,true);
    mLabels[14]=makeTextBitmap("NY Times");
    b=BitmapFactory.decodeResource(mRes,R.raw.path3950,opts);
    mIcons[15]=mRS.allocationCreateFromBitmap(b,RenderScript.ElementPredefined.RGB_565,true);
    mLabels[15]=makeTextBitmap("Pandora");
    b=BitmapFactory.decodeResource(mRes,R.raw.path4481,opts);
    mIcons[16]=mRS.allocationCreateFromBitmap(b,RenderScript.ElementPredefined.RGB_565,true);
    mLabels[16]=makeTextBitmap("Public Radio");
    b=BitmapFactory.decodeResource(mRes,R.raw.path5168,opts);
    mIcons[17]=mRS.allocationCreateFromBitmap(b,RenderScript.ElementPredefined.RGB_565,true);
    mLabels[17]=makeTextBitmap("Public Radio");
    b=BitmapFactory.decodeResource(mRes,R.raw.polygon2408,opts);
    mIcons[18]=mRS.allocationCreateFromBitmap(b,RenderScript.ElementPredefined.RGB_565,true);
    mLabels[18]=makeTextBitmap("Public Radio");
    mIcons[19]=mIcons[0];
    mIcons[20]=mIcons[1];
    mIcons[21]=mIcons[2];
    mIcons[22]=mIcons[3];
    mIcons[23]=mIcons[2];
    mIcons[24]=mIcons[1];
    mIcons[25]=mIcons[0];
    mIcons[26]=mIcons[1];
    mIcons[27]=mIcons[2];
    mIcons[28]=mIcons[3];
    mLabels[19]=mLabels[0];
    mLabels[20]=mLabels[1];
    mLabels[21]=mLabels[2];
    mLabels[22]=mLabels[3];
    mLabels[23]=mLabels[2];
    mLabels[24]=mLabels[1];
    mLabels[25]=mLabels[0];
    mLabels[26]=mLabels[1];
    mLabels[27]=mLabels[2];
    mLabels[28]=mLabels[3];
    for (int ct=0; ct < mIcons.length; ct++) {
      mIcons[ct].uploadToTexture(0);
      mLabels[ct].uploadToTexture(0);
      mAllocIconIDBuf[ct]=mIcons[ct].getID();
      mAllocLabelIDBuf[ct]=mLabels[ct].getID();
    }
    mAllocIconID.data(mAllocIconIDBuf);
    mAllocLabelID.data(mAllocLabelIDBuf);
    RenderScript.Element e=mRS.elementGetPredefined(RenderScript.ElementPredefined.RGB_565);
    mRS.typeBegin(e);
    mRS.typeAdd(RenderScript.Dimension.X,64);
    mRS.typeAdd(RenderScript.Dimension.Y,64);
    RenderScript.Type t=mRS.typeCreate();
    mIconPlate=mRS.allocationCreateTyped(t);
    int tmp[]=new int[64 * 32];
    for (int ct=0; ct < (64 * 32); ct++) {
      tmp[ct]=7 | (13 << 5) | (7 << 11);
      tmp[ct]=tmp[ct] | (tmp[ct] << 16);
    }
    for (int ct=0; ct < 32; ct++) {
      tmp[ct]=0;
      tmp[ct + (63 * 32)]=0;
    }
    for (int ct=0; ct < 64; ct++) {
      tmp[ct * 32]=0;
      tmp[ct * 32 + 31]=0;
    }
    mIconPlate.data(tmp);
    Log.e("xx","plate");
    mIconPlate.uploadToTexture(0);
    mIconPlate.setName("Plate");
    mPFImages.bindTexture(mIconPlate,0);
  }
}
