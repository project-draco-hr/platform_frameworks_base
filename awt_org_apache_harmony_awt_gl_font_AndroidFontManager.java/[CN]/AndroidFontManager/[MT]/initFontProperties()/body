{
  File fpFile=getFontPropertyFile();
  if (fpFile == null) {
    return false;
  }
  Properties props=getProperties(fpFile);
  if (props == null) {
    return false;
  }
  for (int i=0; i < LOGICAL_FONT_NAMES.length; i++) {
    String lName=LOGICAL_FONT_NAMES[i];
    for (int j=0; j < STYLE_NAMES.length; j++) {
      String styleName=STYLE_NAMES[j];
      Vector propsVector=new Vector();
      int numComp=0;
      boolean moreEntries=true;
      String value=null;
      while (moreEntries) {
        String property=FONT_MAPPING_KEYS[0].replaceAll("LogicalFontName",lName).replaceAll("StyleName",styleName).replaceAll("ComponentIndex",String.valueOf(numComp));
        value=props.getProperty(property);
        if ((j == 0) && (value == null)) {
          property=FONT_MAPPING_KEYS[1].replaceAll("LogicalFontName",lName).replaceAll("ComponentIndex",String.valueOf(numComp));
          value=props.getProperty(property);
        }
        if (value != null) {
          String[] fields=parseXLFD(value);
          if (fields == null) {
            throw new RuntimeException(Messages.getString("awt.08",value));
          }
          String fontName=fields[1];
          String weight=fields[2];
          String italic=fields[3];
          int style=getBoldStyle(weight) | getItalicStyle(italic);
          String encoding=props.getProperty(FONT_CHARACTER_ENCODING.replaceAll("LogicalFontName",lName).replaceAll("ComponentIndex",String.valueOf(numComp)));
          String exclString=props.getProperty(EXCLUSION_RANGES.replaceAll("LogicalFontName",lName).replaceAll("ComponentIndex",String.valueOf(numComp)));
          int[] exclRange=parseIntervals(exclString);
          FontProperty fp=new AndroidFontProperty(lName,styleName,null,fontName,value,style,exclRange,encoding);
          propsVector.add(fp);
          numComp++;
        }
 else {
          moreEntries=false;
        }
      }
      fProperties.put(LOGICAL_FONT_NAMES[i] + "." + j,propsVector);
    }
  }
  return true;
}
