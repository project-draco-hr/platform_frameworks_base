{
  TestSSLContext testSSLContext=TestSSLContext.create();
  MockWebServer proxy=new MockWebServer();
  proxy.useHttps(testSSLContext.serverContext.getSocketFactory(),true);
  MockResponse connectResponse=new MockResponse().setResponseCode(200);
  connectResponse.getHeaders().clear();
  proxy.enqueue(connectResponse);
  proxy.enqueue(new MockResponse().setResponseCode(200).setBody("this response comes via a secure proxy"));
  proxy.play();
  HttpClient httpProxyClient=new DefaultHttpClient();
  HttpHost proxyHost=new HttpHost("localhost",proxy.getPort());
  httpProxyClient.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY,proxyHost);
  SSLSocketFactory sslSocketFactory=new SSLSocketFactory(testSSLContext.clientContext.getSocketFactory());
  sslSocketFactory.setHostnameVerifier(new AllowAllHostnameVerifier());
  httpProxyClient.getConnectionManager().getSchemeRegistry().register(new Scheme("https",sslSocketFactory,443));
  HttpResponse response=httpProxyClient.execute(new HttpGet("https://android.com/foo"));
  assertEquals("this response comes via a secure proxy",contentToString(response));
  RecordedRequest connect=proxy.takeRequest();
  assertEquals("Connect line failure on proxy " + proxyHost.toHostString(),"CONNECT android.com:443 HTTP/1.1",connect.getRequestLine());
  assertContains(connect.getHeaders(),"Host: android.com");
  RecordedRequest get=proxy.takeRequest();
  assertEquals("GET /foo HTTP/1.1",get.getRequestLine());
  assertContains(get.getHeaders(),"Host: android.com");
}
