{
  AlgorithmParameterSpec algSpecificSpec=mSpec.getAlgorithmParameterSpec();
switch (mKeymasterAlgorithm) {
case KeymasterDefs.KM_ALGORITHM_RSA:
{
      BigInteger publicExponent=null;
      if (algSpecificSpec instanceof RSAKeyGenParameterSpec) {
        RSAKeyGenParameterSpec rsaSpec=(RSAKeyGenParameterSpec)algSpecificSpec;
        if (mKeySizeBits == -1) {
          mKeySizeBits=rsaSpec.getKeysize();
        }
 else         if (mKeySizeBits != rsaSpec.getKeysize()) {
          throw new InvalidAlgorithmParameterException("RSA key size must match " + " between " + mSpec + " and "+ algSpecificSpec+ ": "+ mKeySizeBits+ " vs "+ rsaSpec.getKeysize());
        }
        publicExponent=rsaSpec.getPublicExponent();
      }
 else       if (algSpecificSpec != null) {
        throw new InvalidAlgorithmParameterException("RSA may only use RSAKeyGenParameterSpec");
      }
      if (publicExponent == null) {
        publicExponent=RSAKeyGenParameterSpec.F4;
      }
      if (publicExponent.compareTo(BigInteger.ZERO) < 1) {
        throw new InvalidAlgorithmParameterException("RSA public exponent must be positive: " + publicExponent);
      }
      if (publicExponent.compareTo(KeymasterArguments.UINT64_MAX_VALUE) > 0) {
        throw new InvalidAlgorithmParameterException("Unsupported RSA public exponent: " + publicExponent + ". Maximum supported value: "+ KeymasterArguments.UINT64_MAX_VALUE);
      }
      mRSAPublicExponent=publicExponent;
      break;
    }
case KeymasterDefs.KM_ALGORITHM_EC:
  if (algSpecificSpec instanceof ECGenParameterSpec) {
    ECGenParameterSpec ecSpec=(ECGenParameterSpec)algSpecificSpec;
    String curveName=ecSpec.getName();
    Integer ecSpecKeySizeBits=SUPPORTED_EC_NIST_CURVE_NAME_TO_SIZE.get(curveName.toLowerCase(Locale.US));
    if (ecSpecKeySizeBits == null) {
      throw new InvalidAlgorithmParameterException("Unsupported EC curve name: " + curveName + ". Supported: "+ SUPPORTED_EC_NIST_CURVE_NAMES);
    }
    if (mKeySizeBits == -1) {
      mKeySizeBits=ecSpecKeySizeBits;
    }
 else     if (mKeySizeBits != ecSpecKeySizeBits) {
      throw new InvalidAlgorithmParameterException("EC key size must match " + " between " + mSpec + " and "+ algSpecificSpec+ ": "+ mKeySizeBits+ " vs "+ ecSpecKeySizeBits);
    }
  }
 else   if (algSpecificSpec != null) {
    throw new InvalidAlgorithmParameterException("EC may only use ECGenParameterSpec");
  }
break;
default :
throw new ProviderException("Unsupported algorithm: " + mKeymasterAlgorithm);
}
}
