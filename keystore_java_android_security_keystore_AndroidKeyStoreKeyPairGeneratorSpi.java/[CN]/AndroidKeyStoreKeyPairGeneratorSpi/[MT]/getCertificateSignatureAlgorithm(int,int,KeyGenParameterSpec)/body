{
  if ((spec.getPurposes() & KeyProperties.PURPOSE_SIGN) == 0) {
    return null;
  }
  if (!spec.isDigestsSpecified()) {
    return null;
  }
switch (keymasterAlgorithm) {
case KeymasterDefs.KM_ALGORITHM_EC:
{
      Set<Integer> availableKeymasterDigests=getAvailableKeymasterSignatureDigests(spec.getDigests(),AndroidKeyStoreBCWorkaroundProvider.getSupportedEcdsaSignatureDigests());
      int bestKeymasterDigest=-1;
      int bestDigestOutputSizeBits=-1;
      for (      int keymasterDigest : availableKeymasterDigests) {
        int outputSizeBits=KeymasterUtils.getDigestOutputSizeBits(keymasterDigest);
        if (outputSizeBits == keySizeBits) {
          bestKeymasterDigest=keymasterDigest;
          bestDigestOutputSizeBits=outputSizeBits;
          break;
        }
        if (bestKeymasterDigest == -1) {
          bestKeymasterDigest=keymasterDigest;
          bestDigestOutputSizeBits=outputSizeBits;
        }
 else {
          if (bestDigestOutputSizeBits < keySizeBits) {
            if (outputSizeBits > bestDigestOutputSizeBits) {
              bestKeymasterDigest=keymasterDigest;
              bestDigestOutputSizeBits=outputSizeBits;
            }
          }
 else {
            if ((outputSizeBits < bestDigestOutputSizeBits) && (outputSizeBits >= keySizeBits)) {
              bestKeymasterDigest=keymasterDigest;
              bestDigestOutputSizeBits=outputSizeBits;
            }
          }
        }
      }
      if (bestKeymasterDigest == -1) {
        return null;
      }
      return KeyProperties.Digest.fromKeymasterToSignatureAlgorithmDigest(bestKeymasterDigest) + "WithECDSA";
    }
case KeymasterDefs.KM_ALGORITHM_RSA:
{
    Set<Integer> availableKeymasterDigests=getAvailableKeymasterSignatureDigests(spec.getDigests(),AndroidKeyStoreBCWorkaroundProvider.getSupportedEcdsaSignatureDigests());
    int maxDigestOutputSizeBits=keySizeBits - 29 * 8;
    int bestKeymasterDigest=-1;
    int bestDigestOutputSizeBits=-1;
    for (    int keymasterDigest : availableKeymasterDigests) {
      int outputSizeBits=KeymasterUtils.getDigestOutputSizeBits(keymasterDigest);
      if (outputSizeBits > maxDigestOutputSizeBits) {
        continue;
      }
      if (bestKeymasterDigest == -1) {
        bestKeymasterDigest=keymasterDigest;
        bestDigestOutputSizeBits=outputSizeBits;
      }
 else {
        if (outputSizeBits > bestDigestOutputSizeBits) {
          bestKeymasterDigest=keymasterDigest;
          bestDigestOutputSizeBits=outputSizeBits;
        }
      }
    }
    if (bestKeymasterDigest == -1) {
      return null;
    }
    return KeyProperties.Digest.fromKeymasterToSignatureAlgorithmDigest(bestKeymasterDigest) + "WithRSA";
  }
default :
throw new ProviderException("Unsupported algorithm: " + keymasterAlgorithm);
}
}
