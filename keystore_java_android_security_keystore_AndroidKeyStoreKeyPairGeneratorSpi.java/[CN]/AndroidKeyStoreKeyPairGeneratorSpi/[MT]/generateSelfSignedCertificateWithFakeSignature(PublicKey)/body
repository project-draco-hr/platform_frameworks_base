{
  V3TBSCertificateGenerator tbsGenerator=new V3TBSCertificateGenerator();
  ASN1ObjectIdentifier sigAlgOid;
  AlgorithmIdentifier sigAlgId;
  byte[] signature;
switch (mKeymasterAlgorithm) {
case KeymasterDefs.KM_ALGORITHM_EC:
    sigAlgOid=X9ObjectIdentifiers.ecdsa_with_SHA256;
  sigAlgId=new AlgorithmIdentifier(sigAlgOid);
ASN1EncodableVector v=new ASN1EncodableVector();
v.add(new DERInteger(0));
v.add(new DERInteger(0));
signature=new DERSequence().getEncoded();
break;
case KeymasterDefs.KM_ALGORITHM_RSA:
sigAlgOid=PKCSObjectIdentifiers.sha256WithRSAEncryption;
sigAlgId=new AlgorithmIdentifier(sigAlgOid,DERNull.INSTANCE);
signature=new byte[1];
break;
default :
throw new ProviderException("Unsupported key algorithm: " + mKeymasterAlgorithm);
}
try (ASN1InputStream publicKeyInfoIn=new ASN1InputStream(publicKey.getEncoded())){
tbsGenerator.setSubjectPublicKeyInfo(SubjectPublicKeyInfo.getInstance(publicKeyInfoIn.readObject()));
}
 tbsGenerator.setSerialNumber(new ASN1Integer(mSpec.getCertificateSerialNumber()));
X509Principal subject=new X509Principal(mSpec.getCertificateSubject().getEncoded());
tbsGenerator.setSubject(subject);
tbsGenerator.setIssuer(subject);
tbsGenerator.setStartDate(new Time(mSpec.getCertificateNotBefore()));
tbsGenerator.setEndDate(new Time(mSpec.getCertificateNotAfter()));
tbsGenerator.setSignature(sigAlgId);
TBSCertificate tbsCertificate=tbsGenerator.generateTBSCertificate();
ASN1EncodableVector result=new ASN1EncodableVector();
result.add(tbsCertificate);
result.add(sigAlgId);
result.add(new DERBitString(signature));
return new X509CertificateObject(Certificate.getInstance(new DERSequence(result)));
}
