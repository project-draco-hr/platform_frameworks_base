{
  KeymasterArguments args=new KeymasterArguments();
  args.addUnsignedInt(KeymasterDefs.KM_TAG_KEY_SIZE,mKeySizeBits);
  args.addEnum(KeymasterDefs.KM_TAG_ALGORITHM,mKeymasterAlgorithm);
  args.addEnums(KeymasterDefs.KM_TAG_PURPOSE,mKeymasterPurposes);
  args.addEnums(KeymasterDefs.KM_TAG_BLOCK_MODE,mKeymasterBlockModes);
  args.addEnums(KeymasterDefs.KM_TAG_PADDING,mKeymasterEncryptionPaddings);
  args.addEnums(KeymasterDefs.KM_TAG_PADDING,mKeymasterSignaturePaddings);
  args.addEnums(KeymasterDefs.KM_TAG_DIGEST,mKeymasterDigests);
  KeymasterUtils.addUserAuthArgs(args,mSpec.isUserAuthenticationRequired(),mSpec.getUserAuthenticationValidityDurationSeconds(),mSpec.isUserAuthenticationValidWhileOnBody(),mSpec.isInvalidatedByBiometricEnrollment());
  args.addDateIfNotNull(KeymasterDefs.KM_TAG_ACTIVE_DATETIME,mSpec.getKeyValidityStart());
  args.addDateIfNotNull(KeymasterDefs.KM_TAG_ORIGINATION_EXPIRE_DATETIME,mSpec.getKeyValidityForOriginationEnd());
  args.addDateIfNotNull(KeymasterDefs.KM_TAG_USAGE_EXPIRE_DATETIME,mSpec.getKeyValidityForConsumptionEnd());
  addAlgorithmSpecificParameters(args);
  if (mSpec.isUniqueIdIncluded())   args.addBoolean(KeymasterDefs.KM_TAG_INCLUDE_UNIQUE_ID);
  return args;
}
