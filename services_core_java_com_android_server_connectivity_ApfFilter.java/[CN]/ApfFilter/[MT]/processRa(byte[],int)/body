{
  hexDump("Read packet = ",packet,length);
  for (int i=0; i < mRas.size(); i++) {
    Ra ra=mRas.get(i);
    if (ra.matches(packet,length)) {
      log("matched RA");
      ra.mLastSeen=curTime();
      ra.mMinLifetime=ra.minLifetime(packet,length);
      mRas.add(0,mRas.remove(i));
      maybeInstallNewProgram();
      return;
    }
  }
  for (int i=0; i < mRas.size(); ) {
    if (mRas.get(i).isExpired()) {
      log("expired RA");
      mRas.remove(i);
    }
 else {
      i++;
    }
  }
  if (mRas.size() >= MAX_RAS)   return;
  try {
    log("adding RA");
    mRas.add(new Ra(packet,length));
  }
 catch (  Exception e) {
    Log.e(TAG,"Error parsing RA: " + e);
    return;
  }
  installNewProgram();
}
