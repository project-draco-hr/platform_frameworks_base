{
  if (mRas.size() == 0)   return;
  final byte[] program;
  long programMinLifetime=Long.MAX_VALUE;
  try {
    ApfGenerator gen=new ApfGenerator();
    gen.setApfVersion(mNai.networkMisc.apfVersionSupported);
    int ras=0;
    for (    Ra ra : mRas) {
      if (ra.isExpired())       continue;
      ra.generateFilter(gen);
      if (gen.programLengthOverEstimate() > mNai.networkMisc.maximumApfProgramSize) {
        break;
      }
 else {
        ras++;
      }
    }
    gen=new ApfGenerator();
    gen.setApfVersion(mNai.networkMisc.apfVersionSupported);
    for (    Ra ra : mRas) {
      if (ras-- == 0)       break;
      if (ra.isExpired())       continue;
      programMinLifetime=Math.min(programMinLifetime,ra.generateFilter(gen));
    }
    program=gen.generate();
  }
 catch (  IllegalInstructionException e) {
    Log.e(TAG,"Program failed to generate: ",e);
    return;
  }
  mLastTimeInstalledProgram=curTime();
  mLastInstalledProgramMinLifetime=programMinLifetime;
  mLastInstalledProgram=program;
  if (VDBG) {
    hexDump("Installing filter: ",program,program.length);
  }
  mConnectivityService.pushApfProgramToNetwork(mNai,program);
}
