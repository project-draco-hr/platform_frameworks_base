{
  final int sourceWidth=MeasureSpec.getSize(widthMeasureSpec);
  int widthSize=sourceWidth;
  int heightSize=MeasureSpec.getSize(heightMeasureSpec);
  if (mMaxWidth >= 0) {
    widthSize=Math.min(widthSize,mMaxWidth);
  }
  final int widthSpec=MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.EXACTLY);
  final int heightSpec=MeasureSpec.makeMeasureSpec(heightSize,MeasureSpec.EXACTLY);
  final int widthPadding=getPaddingLeft() + getPaddingRight();
  int heightUsed=getPaddingTop() + getPaddingBottom();
  final int childCount=getChildCount();
  for (int i=0; i < childCount; i++) {
    final View child=getChildAt(i);
    final LayoutParams lp=(LayoutParams)child.getLayoutParams();
    if (lp.alwaysShow && child.getVisibility() != GONE) {
      measureChildWithMargins(child,widthSpec,widthPadding,heightSpec,heightUsed);
      heightUsed+=lp.topMargin + child.getMeasuredHeight() + lp.bottomMargin;
    }
  }
  final int alwaysShowHeight=heightUsed;
  for (int i=0; i < childCount; i++) {
    final View child=getChildAt(i);
    final LayoutParams lp=(LayoutParams)child.getLayoutParams();
    if (!lp.alwaysShow && child.getVisibility() != GONE) {
      measureChildWithMargins(child,widthSpec,widthPadding,heightSpec,heightUsed);
      heightUsed+=lp.topMargin + child.getMeasuredHeight() + lp.bottomMargin;
    }
  }
  mCollapsibleHeight=Math.max(0,heightUsed - alwaysShowHeight - getMaxCollapsedHeight());
  mUncollapsibleHeight=heightUsed - mCollapsibleHeight;
  if (isLaidOut()) {
    mCollapseOffset=Math.min(mCollapseOffset,mCollapsibleHeight);
  }
 else {
    mCollapseOffset=mOpenOnLayout ? 0 : mCollapsibleHeight;
  }
  mTopOffset=Math.max(0,heightSize - heightUsed) + (int)mCollapseOffset;
  setMeasuredDimension(sourceWidth,heightSize);
}
