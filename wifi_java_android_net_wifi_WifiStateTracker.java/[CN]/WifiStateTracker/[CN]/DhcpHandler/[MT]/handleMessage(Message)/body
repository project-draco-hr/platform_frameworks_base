{
  int event;
switch (msg.what) {
case EVENT_DHCP_START:
case EVENT_DHCP_RENEW:
    boolean modifiedBluetoothCoexistenceMode=false;
  int powerMode=DRIVER_POWER_MODE_AUTO;
if (shouldDisableCoexistenceMode()) {
  modifiedBluetoothCoexistenceMode=true;
  setBluetoothCoexistenceMode(WifiNative.BLUETOOTH_COEXISTENCE_MODE_DISABLED);
}
powerMode=getPowerMode();
if (powerMode < 0) {
powerMode=DRIVER_POWER_MODE_AUTO;
}
if (powerMode != DRIVER_POWER_MODE_ACTIVE) {
setPowerMode(DRIVER_POWER_MODE_ACTIVE);
}
synchronized (this) {
mCancelCallback=false;
}
if (msg.what == EVENT_DHCP_START) {
Log.d(TAG,"DHCP request started");
if (NetworkUtils.runDhcp(mInterfaceName,mDhcpInfo)) {
event=EVENT_INTERFACE_CONFIGURATION_SUCCEEDED;
Log.d(TAG,"DHCP succeeded with lease: " + mDhcpInfo.leaseDuration);
setDhcpRenewalAlarm(mDhcpInfo.leaseDuration);
}
 else {
event=EVENT_INTERFACE_CONFIGURATION_FAILED;
Log.e(TAG,"DHCP request failed: " + NetworkUtils.getDhcpError());
}
synchronized (this) {
if (!mCancelCallback) {
mWifiStateTrackerHandler.sendEmptyMessage(event);
}
}
}
 else if (msg.what == EVENT_DHCP_RENEW) {
Log.d(TAG,"DHCP renewal started");
int oIp=mDhcpInfo.ipAddress;
int oGw=mDhcpInfo.gateway;
int oMsk=mDhcpInfo.netmask;
int oDns1=mDhcpInfo.dns1;
int oDns2=mDhcpInfo.dns2;
if (NetworkUtils.runDhcpRenew(mInterfaceName,mDhcpInfo)) {
Log.d(TAG,"DHCP renewal with lease: " + mDhcpInfo.leaseDuration);
boolean changed=(oIp != mDhcpInfo.ipAddress || oGw != mDhcpInfo.gateway || oMsk != mDhcpInfo.netmask || oDns1 != mDhcpInfo.dns1 || oDns2 != mDhcpInfo.dns2);
if (changed) {
Log.d(TAG,"IP config change on renewal");
mWifiInfo.setIpAddress(mDhcpInfo.ipAddress);
NetworkUtils.resetConnections(mInterfaceName);
msg=mTarget.obtainMessage(EVENT_CONFIGURATION_CHANGED,mNetworkInfo);
msg.sendToTarget();
}
setDhcpRenewalAlarm(mDhcpInfo.leaseDuration);
}
 else {
event=EVENT_INTERFACE_CONFIGURATION_FAILED;
Log.d(TAG,"DHCP renewal failed: " + NetworkUtils.getDhcpError());
synchronized (this) {
if (!mCancelCallback) {
mWifiStateTrackerHandler.sendEmptyMessage(event);
}
}
}
}
if (powerMode != DRIVER_POWER_MODE_ACTIVE) {
setPowerMode(powerMode);
}
if (modifiedBluetoothCoexistenceMode) {
setBluetoothCoexistenceMode(WifiNative.BLUETOOTH_COEXISTENCE_MODE_SENSE);
}
break;
}
}
