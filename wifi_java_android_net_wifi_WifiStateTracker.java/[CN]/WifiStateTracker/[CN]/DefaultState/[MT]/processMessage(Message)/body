{
  if (DBG)   Log.d(TAG,getName() + message.toString() + "\n");
  SyncParams syncParams;
switch (message.what) {
case CMD_PING_SUPPLICANT:
case CMD_START_SCAN:
case CMD_DISCONNECT:
case CMD_RECONNECT:
case CMD_REASSOCIATE:
case CMD_REMOVE_NETWORK:
case CMD_ENABLE_NETWORK:
case CMD_DISABLE_NETWORK:
case CMD_ADD_OR_UPDATE_NETWORK:
case CMD_GET_RSSI:
case CMD_GET_RSSI_APPROX:
case CMD_GET_LINK_SPEED:
case CMD_GET_MAC_ADDR:
case CMD_SAVE_CONFIG:
case CMD_CONNECTION_STATUS:
case CMD_GET_NETWORK_CONFIG:
    if (message.arg2 == SYNCHRONOUS_CALL) {
      syncParams=(SyncParams)message.obj;
      syncParams.mSyncReturn.boolValue=false;
      syncParams.mSyncReturn.intValue=-1;
      syncParams.mSyncReturn.stringValue=null;
      syncParams.mSyncReturn.configList=null;
      notifyOnMsgObject(message);
    }
  break;
case CM_CMD_TEARDOWN:
EventLog.writeEvent(EVENTLOG_WIFI_EVENT_HANDLED,message.what);
mTeardownRequested.set(true);
sendMessage(CMD_DISCONNECT);
sendMessage(CMD_STOP_DRIVER);
mNetworkInfo.setIsAvailable(true);
break;
case CM_CMD_RECONNECT:
EventLog.writeEvent(EVENTLOG_WIFI_EVENT_HANDLED,message.what);
mTeardownRequested.set(false);
sendMessage(CMD_START_DRIVER);
sendMessage(CMD_RECONNECT);
break;
case CMD_ENABLE_RSSI_POLL:
mEnableRssiPolling=(message.arg1 == 1);
mSupplicantStateTracker.sendMessage(CMD_ENABLE_RSSI_POLL);
break;
default :
if (DBG) Log.w(TAG,"Unhandled " + message);
break;
}
return HANDLED;
}
