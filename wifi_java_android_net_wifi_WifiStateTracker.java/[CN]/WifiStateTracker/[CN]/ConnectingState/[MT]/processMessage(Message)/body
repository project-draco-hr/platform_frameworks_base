{
  if (DBG)   Log.d(TAG,getName() + message.toString() + "\n");
switch (message.what) {
case CMD_IP_CONFIG_SUCCESS:
    mReconnectCount=0;
  mLastSignalLevel=-1;
mWifiInfo.setIpAddress(mDhcpInfo.ipAddress);
Log.d(TAG,"IP configuration: " + mDhcpInfo);
configureNetworkProperties();
setDetailedState(DetailedState.CONNECTED);
sendNetworkStateChangeBroadcast(mLastBssid);
transitionTo(mConnectedState);
break;
case CMD_IP_CONFIG_FAILURE:
mWifiInfo.setIpAddress(0);
Log.e(TAG,"IP configuration failed");
if (++mReconnectCount > getMaxDhcpRetries()) {
Log.e(TAG,"Failed " + mReconnectCount + " times, Disabling "+ mLastNetworkId);
WifiNative.disableNetworkCommand(mLastNetworkId);
}
WifiNative.disconnectCommand();
WifiNative.reconnectCommand();
transitionTo(mDisconnectingState);
break;
case CMD_DISCONNECT:
if (message.arg2 == SYNCHRONOUS_CALL) {
SyncParams syncParams=(SyncParams)message.obj;
syncParams.mSyncReturn.boolValue=WifiNative.disconnectCommand();
notifyOnMsgObject(message);
}
 else {
WifiNative.disconnectCommand();
}
transitionTo(mDisconnectingState);
break;
case NETWORK_CONNECTION_EVENT:
break;
case CMD_STOP_DRIVER:
sendMessage(CMD_DISCONNECT);
deferMessage(message);
break;
case CMD_SET_SCAN_MODE:
if (message.arg1 == SCAN_ONLY_MODE) {
sendMessage(CMD_DISCONNECT);
deferMessage(message);
}
break;
case CMD_RECONFIGURE_IP:
deferMessage(message);
break;
default :
return NOT_HANDLED;
}
EventLog.writeEvent(EVENTLOG_WIFI_EVENT_HANDLED,message.what);
return HANDLED;
}
