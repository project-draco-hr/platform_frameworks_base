{
  super(context,attrs,defStyle);
  TypedArray attributesArray=context.obtainStyledAttributes(attrs,R.styleable.NumberPicker,defStyle,0);
  int orientation=attributesArray.getInt(R.styleable.NumberPicker_orientation,VERTICAL);
  setOrientation(orientation);
  mSolidColor=attributesArray.getColor(R.styleable.NumberPicker_solidColor,0);
  attributesArray.recycle();
  setWillNotDraw(false);
  setDrawSelectorWheel(false);
  LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  inflater.inflate(R.layout.number_picker,this,true);
  OnClickListener onClickListener=new OnClickListener(){
    public void onClick(    View v){
      mInputText.clearFocus();
      if (v.getId() == R.id.increment) {
        changeCurrent(mCurrent + 1);
      }
 else {
        changeCurrent(mCurrent - 1);
      }
    }
  }
;
  OnLongClickListener onLongClickListener=new OnLongClickListener(){
    public boolean onLongClick(    View v){
      mInputText.clearFocus();
      if (v.getId() == R.id.increment) {
        postUpdateValueFromLongPress(UPDATE_STEP_INCREMENT);
      }
 else {
        postUpdateValueFromLongPress(UPDATE_STEP_DECREMENT);
      }
      return true;
    }
  }
;
  mIncrementButton=(ImageButton)findViewById(R.id.increment);
  mIncrementButton.setOnClickListener(onClickListener);
  mIncrementButton.setOnLongClickListener(onLongClickListener);
  mDecrementButton=(ImageButton)findViewById(R.id.decrement);
  mDecrementButton.setOnClickListener(onClickListener);
  mDecrementButton.setOnLongClickListener(onLongClickListener);
  mInputText=(EditText)findViewById(R.id.timepicker_input);
  mInputText.setOnFocusChangeListener(new OnFocusChangeListener(){
    public void onFocusChange(    View v,    boolean hasFocus){
      if (!hasFocus) {
        validateInputTextView(v);
      }
    }
  }
);
  mInputText.setFilters(new InputFilter[]{new InputTextFilter()});
  mInputText.setRawInputType(InputType.TYPE_CLASS_NUMBER);
  mTouchSlop=ViewConfiguration.getTapTimeout();
  ViewConfiguration configuration=ViewConfiguration.get(context);
  mTouchSlop=configuration.getScaledTouchSlop();
  mMinimumFlingVelocity=configuration.getScaledMinimumFlingVelocity();
  mMaximumFlingVelocity=configuration.getScaledMaximumFlingVelocity() / SELECTOR_MAX_FLING_VELOCITY_ADJUSTMENT;
  mTextSize=(int)mInputText.getTextSize();
  Paint paint=new Paint();
  paint.setAntiAlias(true);
  paint.setTextAlign(Align.CENTER);
  paint.setTextSize(mTextSize);
  paint.setTypeface(mInputText.getTypeface());
  ColorStateList colors=mInputText.getTextColors();
  int color=colors.getColorForState(ENABLED_STATE_SET,Color.WHITE);
  paint.setColor(color);
  mSelectorPaint=paint;
  final ValueAnimator fadeScroller=ObjectAnimator.ofInt(this,"selectorPaintAlpha",255,0);
  final ObjectAnimator showIncrementButton=ObjectAnimator.ofFloat(mIncrementButton,"alpha",0,1);
  final ObjectAnimator showDecrementButton=ObjectAnimator.ofFloat(mDecrementButton,"alpha",0,1);
  mShowInputControlsAnimator=new AnimatorSet();
  mShowInputControlsAnimator.playTogether(fadeScroller,showIncrementButton,showDecrementButton);
  mShowInputControlsAnimator.setDuration(getResources().getInteger(R.integer.config_longAnimTime));
  mShowInputControlsAnimator.addListener(new AnimatorListenerAdapter(){
    private boolean mCanceled=false;
    @Override public void onAnimationEnd(    Animator animation){
      if (!mCanceled) {
        setDrawSelectorWheel(false);
      }
      mCanceled=false;
      mSelectorPaint.setAlpha(255);
      invalidate();
    }
    @Override public void onAnimationCancel(    Animator animation){
      if (mShowInputControlsAnimator.isRunning()) {
        mCanceled=true;
      }
    }
  }
);
  mFlingScroller=new Scroller(getContext(),null,true);
  mAdjustScroller=new Scroller(getContext(),new OvershootInterpolator());
  updateInputTextView();
  updateIncrementAndDecrementButtonsVisibilityState();
}
