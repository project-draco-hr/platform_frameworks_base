{
  super(context,attrs,defStyle);
  TypedArray attributesArray=context.obtainStyledAttributes(attrs,R.styleable.NumberPicker,defStyle,0);
  mSolidColor=attributesArray.getColor(R.styleable.NumberPicker_solidColor,0);
  mFlingable=attributesArray.getBoolean(R.styleable.NumberPicker_flingable,true);
  mSelectionDivider=attributesArray.getDrawable(R.styleable.NumberPicker_selectionDivider);
  int defSelectionDividerHeight=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,UNSCALED_DEFAULT_SELECTION_DIVIDER_HEIGHT,getResources().getDisplayMetrics());
  mSelectionDividerHeight=attributesArray.getDimensionPixelSize(R.styleable.NumberPicker_selectionDividerHeight,defSelectionDividerHeight);
  mMinHeight=attributesArray.getDimensionPixelSize(R.styleable.NumberPicker_minHeight,0);
  mMaxHeight=attributesArray.getDimensionPixelSize(R.styleable.NumberPicker_maxHeight,Integer.MAX_VALUE);
  if (mMinHeight > mMaxHeight) {
    throw new IllegalArgumentException("minHeight > maxHeight");
  }
  mMinWidth=attributesArray.getDimensionPixelSize(R.styleable.NumberPicker_minWidth,0);
  mMaxWidth=attributesArray.getDimensionPixelSize(R.styleable.NumberPicker_maxWidth,Integer.MAX_VALUE);
  if (mMinWidth > mMaxWidth) {
    throw new IllegalArgumentException("minWidth > maxWidth");
  }
  mComputeMaxWidth=(mMaxWidth == Integer.MAX_VALUE);
  attributesArray.recycle();
  mShowInputControlsAnimimationDuration=getResources().getInteger(R.integer.config_longAnimTime);
  setWillNotDraw(false);
  setSelectorWheelState(SELECTOR_WHEEL_STATE_NONE);
  LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  inflater.inflate(R.layout.number_picker,this,true);
  OnClickListener onClickListener=new OnClickListener(){
    public void onClick(    View v){
      InputMethodManager inputMethodManager=InputMethodManager.peekInstance();
      if (inputMethodManager != null && inputMethodManager.isActive(mInputText)) {
        inputMethodManager.hideSoftInputFromWindow(getWindowToken(),0);
      }
      mInputText.clearFocus();
      if (v.getId() == R.id.increment) {
        changeCurrentByOne(true);
      }
 else {
        changeCurrentByOne(false);
      }
    }
  }
;
  OnLongClickListener onLongClickListener=new OnLongClickListener(){
    public boolean onLongClick(    View v){
      mInputText.clearFocus();
      if (v.getId() == R.id.increment) {
        postChangeCurrentByOneFromLongPress(true);
      }
 else {
        postChangeCurrentByOneFromLongPress(false);
      }
      return true;
    }
  }
;
  mIncrementButton=(ImageButton)findViewById(R.id.increment);
  mIncrementButton.setOnClickListener(onClickListener);
  mIncrementButton.setOnLongClickListener(onLongClickListener);
  mDecrementButton=(ImageButton)findViewById(R.id.decrement);
  mDecrementButton.setOnClickListener(onClickListener);
  mDecrementButton.setOnLongClickListener(onLongClickListener);
  mInputText=(EditText)findViewById(R.id.numberpicker_input);
  mInputText.setOnFocusChangeListener(new OnFocusChangeListener(){
    public void onFocusChange(    View v,    boolean hasFocus){
      if (hasFocus) {
        mInputText.selectAll();
        InputMethodManager inputMethodManager=InputMethodManager.peekInstance();
        if (inputMethodManager != null) {
          inputMethodManager.showSoftInput(mInputText,0);
        }
      }
 else {
        mInputText.setSelection(0,0);
        validateInputTextView(v);
      }
    }
  }
);
  mInputText.setFilters(new InputFilter[]{new InputTextFilter()});
  mInputText.setRawInputType(InputType.TYPE_CLASS_NUMBER);
  mTouchSlop=ViewConfiguration.getTapTimeout();
  ViewConfiguration configuration=ViewConfiguration.get(context);
  mTouchSlop=configuration.getScaledTouchSlop();
  mMinimumFlingVelocity=configuration.getScaledMinimumFlingVelocity();
  mMaximumFlingVelocity=configuration.getScaledMaximumFlingVelocity() / SELECTOR_MAX_FLING_VELOCITY_ADJUSTMENT;
  mTextSize=(int)mInputText.getTextSize();
  Paint paint=new Paint();
  paint.setAntiAlias(true);
  paint.setTextAlign(Align.CENTER);
  paint.setTextSize(mTextSize);
  paint.setTypeface(mInputText.getTypeface());
  ColorStateList colors=mInputText.getTextColors();
  int color=colors.getColorForState(ENABLED_STATE_SET,Color.WHITE);
  paint.setColor(color);
  mSelectorWheelPaint=paint;
  mDimSelectorWheelAnimator=ObjectAnimator.ofInt(this,PROPERTY_SELECTOR_PAINT_ALPHA,SELECTOR_WHEEL_BRIGHT_ALPHA,SELECTOR_WHEEL_DIM_ALPHA);
  final ObjectAnimator showIncrementButton=ObjectAnimator.ofFloat(mIncrementButton,PROPERTY_BUTTON_ALPHA,BUTTON_ALPHA_TRANSPARENT,BUTTON_ALPHA_OPAQUE);
  final ObjectAnimator showDecrementButton=ObjectAnimator.ofFloat(mDecrementButton,PROPERTY_BUTTON_ALPHA,BUTTON_ALPHA_TRANSPARENT,BUTTON_ALPHA_OPAQUE);
  mShowInputControlsAnimator=new AnimatorSet();
  mShowInputControlsAnimator.playTogether(mDimSelectorWheelAnimator,showIncrementButton,showDecrementButton);
  mShowInputControlsAnimator.addListener(new AnimatorListenerAdapter(){
    private boolean mCanceled=false;
    @Override public void onAnimationEnd(    Animator animation){
      if (!mCanceled) {
        setSelectorWheelState(SELECTOR_WHEEL_STATE_SMALL);
      }
      mCanceled=false;
    }
    @Override public void onAnimationCancel(    Animator animation){
      if (mShowInputControlsAnimator.isRunning()) {
        mCanceled=true;
      }
    }
  }
);
  mFlingScroller=new Scroller(getContext(),null,true);
  mAdjustScroller=new Scroller(getContext(),new DecelerateInterpolator(2.5f));
  updateInputTextView();
  updateIncrementAndDecrementButtonsVisibilityState();
  if (mFlingable) {
    if (isInEditMode()) {
      setSelectorWheelState(SELECTOR_WHEEL_STATE_SMALL);
    }
 else {
      setSelectorWheelState(SELECTOR_WHEEL_STATE_LARGE);
      hideInputControls();
    }
  }
}
