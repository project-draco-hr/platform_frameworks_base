{
  super(context,attrs,defStyle);
  TypedArray attributesArray=context.obtainStyledAttributes(attrs,R.styleable.NumberPicker,defStyle,0);
  final int layoutResId=attributesArray.getResourceId(R.styleable.NumberPicker_internalLayout,DEFAULT_LAYOUT_RESOURCE_ID);
  mHasSelectorWheel=(layoutResId != DEFAULT_LAYOUT_RESOURCE_ID);
  mSolidColor=attributesArray.getColor(R.styleable.NumberPicker_solidColor,0);
  mSelectionDivider=attributesArray.getDrawable(R.styleable.NumberPicker_selectionDivider);
  final int defSelectionDividerHeight=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,UNSCALED_DEFAULT_SELECTION_DIVIDER_HEIGHT,getResources().getDisplayMetrics());
  mSelectionDividerHeight=attributesArray.getDimensionPixelSize(R.styleable.NumberPicker_selectionDividerHeight,defSelectionDividerHeight);
  final int defSelectionDividerDistance=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,UNSCALED_DEFAULT_SELECTION_DIVIDERS_DISTANCE,getResources().getDisplayMetrics());
  mSelectionDividersDistance=attributesArray.getDimensionPixelSize(R.styleable.NumberPicker_selectionDividersDistance,defSelectionDividerDistance);
  final int defMinFlingDistance=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,UNSCALED_DEFAULT_MIN_FLING_DISTANCE,getResources().getDisplayMetrics());
  mMinFlingDistance=attributesArray.getDimensionPixelSize(R.styleable.NumberPicker_minFlingDistance,defMinFlingDistance);
  mMinHeight=attributesArray.getDimensionPixelSize(R.styleable.NumberPicker_internalMinHeight,SIZE_UNSPECIFIED);
  mMaxHeight=attributesArray.getDimensionPixelSize(R.styleable.NumberPicker_internalMaxHeight,SIZE_UNSPECIFIED);
  if (mMinHeight != SIZE_UNSPECIFIED && mMaxHeight != SIZE_UNSPECIFIED && mMinHeight > mMaxHeight) {
    throw new IllegalArgumentException("minHeight > maxHeight");
  }
  mMinWidth=attributesArray.getDimensionPixelSize(R.styleable.NumberPicker_internalMinWidth,SIZE_UNSPECIFIED);
  mMaxWidth=attributesArray.getDimensionPixelSize(R.styleable.NumberPicker_internalMaxWidth,SIZE_UNSPECIFIED);
  if (mMinWidth != SIZE_UNSPECIFIED && mMaxWidth != SIZE_UNSPECIFIED && mMinWidth > mMaxWidth) {
    throw new IllegalArgumentException("minWidth > maxWidth");
  }
  mComputeMaxWidth=(mMaxWidth == Integer.MAX_VALUE);
  attributesArray.recycle();
  setWillNotDraw(!mHasSelectorWheel);
  LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  inflater.inflate(layoutResId,this,true);
  OnClickListener onClickListener=new OnClickListener(){
    public void onClick(    View v){
      hideSoftInput();
      mInputText.clearFocus();
      if (v.getId() == R.id.increment) {
        changeValueByOne(true);
      }
 else {
        changeValueByOne(false);
      }
    }
  }
;
  OnLongClickListener onLongClickListener=new OnLongClickListener(){
    public boolean onLongClick(    View v){
      hideSoftInput();
      mInputText.clearFocus();
      if (v.getId() == R.id.increment) {
        postChangeCurrentByOneFromLongPress(true,0);
      }
 else {
        postChangeCurrentByOneFromLongPress(false,0);
      }
      return true;
    }
  }
;
  if (!mHasSelectorWheel) {
    mIncrementButton=(ImageButton)findViewById(R.id.increment);
    mIncrementButton.setOnClickListener(onClickListener);
    mIncrementButton.setOnLongClickListener(onLongClickListener);
  }
 else {
    mIncrementButton=null;
  }
  if (!mHasSelectorWheel) {
    mDecrementButton=(ImageButton)findViewById(R.id.decrement);
    mDecrementButton.setOnClickListener(onClickListener);
    mDecrementButton.setOnLongClickListener(onLongClickListener);
  }
 else {
    mDecrementButton=null;
  }
  mInputText=(EditText)findViewById(R.id.numberpicker_input);
  mInputText.setOnFocusChangeListener(new OnFocusChangeListener(){
    public void onFocusChange(    View v,    boolean hasFocus){
      if (hasFocus) {
        mInputText.selectAll();
      }
 else {
        mInputText.setSelection(0,0);
        validateInputTextView(v);
      }
    }
  }
);
  mInputText.setFilters(new InputFilter[]{new InputTextFilter()});
  mInputText.setRawInputType(InputType.TYPE_CLASS_NUMBER);
  mInputText.setImeOptions(EditorInfo.IME_ACTION_DONE);
  ViewConfiguration configuration=ViewConfiguration.get(context);
  mTouchSlop=configuration.getScaledTouchSlop();
  mMinimumFlingVelocity=configuration.getScaledMinimumFlingVelocity();
  mMaximumFlingVelocity=configuration.getScaledMaximumFlingVelocity() / SELECTOR_MAX_FLING_VELOCITY_ADJUSTMENT;
  mTextSize=(int)mInputText.getTextSize();
  Paint paint=new Paint();
  paint.setAntiAlias(true);
  paint.setTextAlign(Align.CENTER);
  paint.setTextSize(mTextSize);
  paint.setTypeface(mInputText.getTypeface());
  ColorStateList colors=mInputText.getTextColors();
  int color=colors.getColorForState(ENABLED_STATE_SET,Color.WHITE);
  paint.setColor(color);
  mSelectorWheelPaint=paint;
  mFlingScroller=new Scroller(getContext(),null,true);
  mAdjustScroller=new Scroller(getContext(),new DecelerateInterpolator(2.5f));
  updateInputTextView();
}
