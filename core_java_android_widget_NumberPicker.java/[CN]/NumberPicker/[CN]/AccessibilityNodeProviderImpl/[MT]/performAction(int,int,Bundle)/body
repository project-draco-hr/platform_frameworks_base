{
switch (virtualViewId) {
case View.NO_ID:
{
switch (action) {
case AccessibilityNodeInfo.ACTION_ACCESSIBILITY_FOCUS:
{
          if (mAccessibilityFocusedView != virtualViewId) {
            mAccessibilityFocusedView=virtualViewId;
            requestAccessibilityFocus();
            return true;
          }
        }
      return false;
case AccessibilityNodeInfo.ACTION_CLEAR_ACCESSIBILITY_FOCUS:
{
      if (mAccessibilityFocusedView == virtualViewId) {
        mAccessibilityFocusedView=UNDEFINED;
        clearAccessibilityFocus();
        return true;
      }
      return false;
    }
}
}
break;
case VIRTUAL_VIEW_ID_INPUT:
{
switch (action) {
case AccessibilityNodeInfo.ACTION_FOCUS:
{
if (!mInputText.isFocused()) {
  return mInputText.requestFocus();
}
}
break;
case AccessibilityNodeInfo.ACTION_CLEAR_FOCUS:
{
if (mInputText.isFocused()) {
mInputText.clearFocus();
return true;
}
return false;
}
case AccessibilityNodeInfo.ACTION_CLICK:
{
showSoftInput();
return true;
}
case AccessibilityNodeInfo.ACTION_ACCESSIBILITY_FOCUS:
{
if (mAccessibilityFocusedView != virtualViewId) {
mAccessibilityFocusedView=virtualViewId;
sendAccessibilityEventForVirtualView(virtualViewId,AccessibilityEvent.TYPE_VIEW_ACCESSIBILITY_FOCUSED);
mInputText.invalidate();
return true;
}
}
return false;
case AccessibilityNodeInfo.ACTION_CLEAR_ACCESSIBILITY_FOCUS:
{
if (mAccessibilityFocusedView == virtualViewId) {
mAccessibilityFocusedView=UNDEFINED;
sendAccessibilityEventForVirtualView(virtualViewId,AccessibilityEvent.TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED);
mInputText.invalidate();
return true;
}
}
return false;
default :
{
return mInputText.performAccessibilityAction(action,arguments);
}
}
}
return false;
case VIRTUAL_VIEW_ID_INCREMENT:
{
switch (action) {
case AccessibilityNodeInfo.ACTION_CLICK:
{
NumberPicker.this.changeValueByOne(true);
sendAccessibilityEventForVirtualView(virtualViewId,AccessibilityEvent.TYPE_VIEW_CLICKED);
}
return true;
case AccessibilityNodeInfo.ACTION_ACCESSIBILITY_FOCUS:
{
if (mAccessibilityFocusedView != virtualViewId) {
mAccessibilityFocusedView=virtualViewId;
sendAccessibilityEventForVirtualView(virtualViewId,AccessibilityEvent.TYPE_VIEW_ACCESSIBILITY_FOCUSED);
invalidate(0,mBottomSelectionDividerBottom,mRight,mBottom);
return true;
}
}
return false;
case AccessibilityNodeInfo.ACTION_CLEAR_ACCESSIBILITY_FOCUS:
{
if (mAccessibilityFocusedView == virtualViewId) {
mAccessibilityFocusedView=UNDEFINED;
sendAccessibilityEventForVirtualView(virtualViewId,AccessibilityEvent.TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED);
invalidate(0,mBottomSelectionDividerBottom,mRight,mBottom);
return true;
}
}
return false;
}
}
return false;
case VIRTUAL_VIEW_ID_DECREMENT:
{
switch (action) {
case AccessibilityNodeInfo.ACTION_CLICK:
{
final boolean increment=(virtualViewId == VIRTUAL_VIEW_ID_INCREMENT);
NumberPicker.this.changeValueByOne(increment);
sendAccessibilityEventForVirtualView(virtualViewId,AccessibilityEvent.TYPE_VIEW_CLICKED);
}
return true;
case AccessibilityNodeInfo.ACTION_ACCESSIBILITY_FOCUS:
{
if (mAccessibilityFocusedView != virtualViewId) {
mAccessibilityFocusedView=virtualViewId;
sendAccessibilityEventForVirtualView(virtualViewId,AccessibilityEvent.TYPE_VIEW_ACCESSIBILITY_FOCUSED);
invalidate(0,0,mRight,mTopSelectionDividerTop);
return true;
}
}
return false;
case AccessibilityNodeInfo.ACTION_CLEAR_ACCESSIBILITY_FOCUS:
{
if (mAccessibilityFocusedView == virtualViewId) {
mAccessibilityFocusedView=UNDEFINED;
sendAccessibilityEventForVirtualView(virtualViewId,AccessibilityEvent.TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED);
invalidate(0,0,mRight,mTopSelectionDividerTop);
return true;
}
}
return false;
}
}
return false;
}
return super.performAction(virtualViewId,action,arguments);
}
