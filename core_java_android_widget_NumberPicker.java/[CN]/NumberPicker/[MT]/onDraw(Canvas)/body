{
  if (mSelectorWheelState == SELECTOR_WHEEL_STATE_NONE) {
    return;
  }
  float x=(mRight - mLeft) / 2;
  float y=mCurrentScrollOffset;
  final int restoreCount=canvas.save();
  if (mSelectorWheelState == SELECTOR_WHEEL_STATE_SMALL) {
    Rect clipBounds=canvas.getClipBounds();
    clipBounds.inset(0,mSelectorElementHeight);
    canvas.clipRect(clipBounds);
  }
  int[] selectorIndices=mSelectorIndices;
  for (int i=0; i < selectorIndices.length; i++) {
    int selectorIndex=selectorIndices[i];
    String scrollSelectorValue=mSelectorIndexToStringCache.get(selectorIndex);
    if (i != SELECTOR_MIDDLE_ITEM_INDEX || mInputText.getVisibility() != VISIBLE) {
      canvas.drawText(scrollSelectorValue,x,y,mSelectorWheelPaint);
    }
    y+=mSelectorElementHeight;
  }
  if (mSelectionDivider != null) {
    int topOfTopDivider=(getHeight() - mSelectorElementHeight - mSelectionDividerHeight) / 2;
    int bottomOfTopDivider=topOfTopDivider + mSelectionDividerHeight;
    mSelectionDivider.setBounds(0,topOfTopDivider,mRight,bottomOfTopDivider);
    mSelectionDivider.draw(canvas);
    int topOfBottomDivider=topOfTopDivider + mSelectorElementHeight;
    int bottomOfBottomDivider=bottomOfTopDivider + mSelectorElementHeight;
    mSelectionDivider.setBounds(0,topOfBottomDivider,mRight,bottomOfBottomDivider);
    mSelectionDivider.draw(canvas);
  }
  canvas.restoreToCount(restoreCount);
}
