{
  if (!isEnabled() || !mHasSelectorWheel) {
    return false;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(event);
  int action=event.getActionMasked();
switch (action) {
case MotionEvent.ACTION_MOVE:
{
      if (mIngonreMoveEvents) {
        break;
      }
      float currentMoveY=event.getY();
      if (mScrollState != OnScrollListener.SCROLL_STATE_TOUCH_SCROLL) {
        int deltaDownY=(int)Math.abs(currentMoveY - mLastDownEventY);
        if (deltaDownY > mTouchSlop) {
          removeAllCallbacks();
          onScrollStateChange(OnScrollListener.SCROLL_STATE_TOUCH_SCROLL);
        }
      }
 else {
        int deltaMoveY=(int)((currentMoveY - mLastDownOrMoveEventY) / TOUCH_SCROLL_DECELERATION_COEFFICIENT);
        scrollBy(0,deltaMoveY);
        invalidate();
      }
      mLastDownOrMoveEventY=currentMoveY;
    }
  break;
case MotionEvent.ACTION_UP:
{
  removeBeginSoftInputCommand();
  removeChangeCurrentByOneFromLongPress();
  VelocityTracker velocityTracker=mVelocityTracker;
  velocityTracker.computeCurrentVelocity(1000,mMaximumFlingVelocity);
  int initialVelocity=(int)velocityTracker.getYVelocity();
  if (Math.abs(initialVelocity) > mMinimumFlingVelocity) {
    int deltaMove=(int)(event.getY() - mLastDownEventY);
    int absDeltaMoveY=Math.abs(deltaMove);
    if (absDeltaMoveY > mMinFlingDistance) {
      fling(initialVelocity);
    }
 else {
      final int normalizedDeltaMove=(int)(absDeltaMoveY / TOUCH_SCROLL_DECELERATION_COEFFICIENT);
      if (normalizedDeltaMove < mSelectorElementHeight) {
        snapToNextValue(deltaMove < 0);
      }
 else {
        snapToClosestValue();
      }
    }
    onScrollStateChange(OnScrollListener.SCROLL_STATE_FLING);
  }
 else {
    int eventY=(int)event.getY();
    int deltaMoveY=(int)Math.abs(eventY - mLastDownEventY);
    long deltaTime=event.getEventTime() - mLastDownEventTime;
    if (deltaMoveY <= mTouchSlop && deltaTime < ViewConfiguration.getTapTimeout()) {
      if (mShowSoftInputOnTap) {
        mShowSoftInputOnTap=false;
        showSoftInput();
      }
 else {
        int selectorIndexOffset=(eventY / mSelectorElementHeight) - SELECTOR_MIDDLE_ITEM_INDEX;
        if (selectorIndexOffset > 0) {
          changeValueByOne(true);
        }
 else         if (selectorIndexOffset < 0) {
          changeValueByOne(false);
        }
      }
    }
 else {
      ensureScrollWheelAdjusted();
    }
    onScrollStateChange(OnScrollListener.SCROLL_STATE_IDLE);
  }
  mVelocityTracker.recycle();
  mVelocityTracker=null;
}
break;
}
return true;
}
