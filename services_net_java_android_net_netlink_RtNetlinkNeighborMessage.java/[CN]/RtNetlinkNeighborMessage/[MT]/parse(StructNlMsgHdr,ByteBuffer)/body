{
  final RtNetlinkNeighborMessage neighMsg=new RtNetlinkNeighborMessage(header);
  neighMsg.mNdmsg=StructNdMsg.parse(byteBuffer);
  if (neighMsg.mNdmsg == null) {
    return null;
  }
  final int baseOffset=byteBuffer.position();
  StructNlAttr nlAttr=findNextAttrOfType(NDA_DST,byteBuffer);
  if (nlAttr != null) {
    neighMsg.mDestination=nlAttr.getValueAsInetAddress();
  }
  byteBuffer.position(baseOffset);
  nlAttr=findNextAttrOfType(NDA_LLADDR,byteBuffer);
  if (nlAttr != null) {
    neighMsg.mLinkLayerAddr=nlAttr.nla_value;
  }
  byteBuffer.position(baseOffset);
  nlAttr=findNextAttrOfType(NDA_PROBES,byteBuffer);
  if (nlAttr != null) {
    neighMsg.mNumProbes=nlAttr.getValueAsInt(0);
  }
  byteBuffer.position(baseOffset);
  nlAttr=findNextAttrOfType(NDA_CACHEINFO,byteBuffer);
  if (nlAttr != null) {
    neighMsg.mCacheInfo=StructNdaCacheInfo.parse(nlAttr.getValueAsByteBuffer());
  }
  final int kMinConsumed=StructNlMsgHdr.STRUCT_SIZE + StructNdMsg.STRUCT_SIZE;
  final int kAdditionalSpace=NetlinkConstants.alignedLengthOf(neighMsg.mHeader.nlmsg_len - kMinConsumed);
  if (byteBuffer.remaining() < kAdditionalSpace) {
    byteBuffer.position(byteBuffer.limit());
  }
 else {
    byteBuffer.position(baseOffset + kAdditionalSpace);
  }
  return neighMsg;
}
