{
  super("AndroidKeyStoreBCWorkaround",1.0,"Android KeyStore security provider to work around Bouncy Castle");
  putMacImpl("HmacSHA1",PACKAGE_NAME + ".AndroidKeyStoreHmacSpi$HmacSHA1");
  put("Alg.Alias.Mac.1.2.840.113549.2.7","HmacSHA1");
  put("Alg.Alias.Mac.HMAC-SHA1","HmacSHA1");
  put("Alg.Alias.Mac.HMAC/SHA1","HmacSHA1");
  putMacImpl("HmacSHA224",PACKAGE_NAME + ".AndroidKeyStoreHmacSpi$HmacSHA224");
  put("Alg.Alias.Mac.1.2.840.113549.2.9","HmacSHA224");
  put("Alg.Alias.Mac.HMAC-SHA224","HmacSHA224");
  put("Alg.Alias.Mac.HMAC/SHA224","HmacSHA224");
  putMacImpl("HmacSHA256",PACKAGE_NAME + ".AndroidKeyStoreHmacSpi$HmacSHA256");
  put("Alg.Alias.Mac.1.2.840.113549.2.9","HmacSHA256");
  put("Alg.Alias.Mac.HMAC-SHA256","HmacSHA256");
  put("Alg.Alias.Mac.HMAC/SHA256","HmacSHA256");
  putMacImpl("HmacSHA384",PACKAGE_NAME + ".AndroidKeyStoreHmacSpi$HmacSHA384");
  put("Alg.Alias.Mac.1.2.840.113549.2.10","HmacSHA384");
  put("Alg.Alias.Mac.HMAC-SHA384","HmacSHA384");
  put("Alg.Alias.Mac.HMAC/SHA384","HmacSHA384");
  putMacImpl("HmacSHA512",PACKAGE_NAME + ".AndroidKeyStoreHmacSpi$HmacSHA512");
  put("Alg.Alias.Mac.1.2.840.113549.2.11","HmacSHA512");
  put("Alg.Alias.Mac.HMAC-SHA512","HmacSHA512");
  put("Alg.Alias.Mac.HMAC/SHA512","HmacSHA512");
  putSymmetricCipherImpl("AES/ECB/NoPadding",PACKAGE_NAME + ".AndroidKeyStoreUnauthenticatedAESCipherSpi$ECB$NoPadding");
  putSymmetricCipherImpl("AES/ECB/PKCS7Padding",PACKAGE_NAME + ".AndroidKeyStoreUnauthenticatedAESCipherSpi$ECB$PKCS7Padding");
  putSymmetricCipherImpl("AES/CBC/NoPadding",PACKAGE_NAME + ".AndroidKeyStoreUnauthenticatedAESCipherSpi$CBC$NoPadding");
  putSymmetricCipherImpl("AES/CBC/PKCS7Padding",PACKAGE_NAME + ".AndroidKeyStoreUnauthenticatedAESCipherSpi$CBC$PKCS7Padding");
  putSymmetricCipherImpl("AES/CTR/NoPadding",PACKAGE_NAME + ".AndroidKeyStoreUnauthenticatedAESCipherSpi$CTR$NoPadding");
  putAsymmetricCipherImpl("RSA/ECB/NoPadding",PACKAGE_NAME + ".AndroidKeyStoreRSACipherSpi$NoPadding");
  put("Alg.Alias.Cipher.RSA/None/NoPadding","RSA/ECB/NoPadding");
  putAsymmetricCipherImpl("RSA/ECB/PKCS1Padding",PACKAGE_NAME + ".AndroidKeyStoreRSACipherSpi$PKCS1Padding");
  put("Alg.Alias.Cipher.RSA/None/PKCS1Padding","RSA/ECB/PKCS1Padding");
  putAsymmetricCipherImpl("RSA/ECB/OAEPPadding",PACKAGE_NAME + ".AndroidKeyStoreRSACipherSpi$OAEPWithSHA1AndMGF1Padding");
  put("Alg.Alias.Cipher.RSA/None/OAEPPadding","RSA/ECB/OAEPPadding");
  putAsymmetricCipherImpl("RSA/ECB/OAEPWithSHA-1AndMGF1Padding",PACKAGE_NAME + ".AndroidKeyStoreRSACipherSpi$OAEPWithSHA1AndMGF1Padding");
  put("Alg.Alias.Cipher.RSA/None/OAEPWithSHA-1AndMGF1Padding","RSA/ECB/OAEPWithSHA-1AndMGF1Padding");
  putAsymmetricCipherImpl("RSA/ECB/OAEPWithSHA-224AndMGF1Padding",PACKAGE_NAME + ".AndroidKeyStoreRSACipherSpi$OAEPWithSHA224AndMGF1Padding");
  put("Alg.Alias.Cipher.RSA/None/OAEPWithSHA-224AndMGF1Padding","RSA/ECB/OAEPWithSHA-256AndMGF1Padding");
  putAsymmetricCipherImpl("RSA/ECB/OAEPWithSHA-256AndMGF1Padding",PACKAGE_NAME + ".AndroidKeyStoreRSACipherSpi$OAEPWithSHA256AndMGF1Padding");
  put("Alg.Alias.Cipher.RSA/None/OAEPWithSHA-256AndMGF1Padding","RSA/ECB/OAEPWithSHA-256AndMGF1Padding");
  putAsymmetricCipherImpl("RSA/ECB/OAEPWithSHA-384AndMGF1Padding",PACKAGE_NAME + ".AndroidKeyStoreRSACipherSpi$OAEPWithSHA384AndMGF1Padding");
  put("Alg.Alias.Cipher.RSA/None/OAEPWithSHA-384AndMGF1Padding","RSA/ECB/OAEPWithSHA-384AndMGF1Padding");
  putAsymmetricCipherImpl("RSA/ECB/OAEPWithSHA-512AndMGF1Padding",PACKAGE_NAME + ".AndroidKeyStoreRSACipherSpi$OAEPWithSHA512AndMGF1Padding");
  put("Alg.Alias.Cipher.RSA/None/OAEPWithSHA-512AndMGF1Padding","RSA/ECB/OAEPWithSHA-512AndMGF1Padding");
}
