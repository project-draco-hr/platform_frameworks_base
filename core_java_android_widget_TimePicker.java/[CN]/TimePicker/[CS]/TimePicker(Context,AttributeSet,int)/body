{
  super(context,attrs,defStyle);
  setCurrentLocale(Locale.getDefault());
  TypedArray attributesArray=context.obtainStyledAttributes(attrs,R.styleable.TimePicker,defStyle,0);
  int layoutResourceId=attributesArray.getResourceId(R.styleable.TimePicker_layout,R.layout.time_picker);
  attributesArray.recycle();
  LayoutInflater inflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  inflater.inflate(layoutResourceId,this,true);
  mHourSpinner=(NumberPicker)findViewById(R.id.hour);
  mHourSpinner.setOnValueChangedListener(new NumberPicker.OnValueChangeListener(){
    public void onValueChange(    NumberPicker spinner,    int oldVal,    int newVal){
      if (!is24HourView()) {
        if ((oldVal == HOURS_IN_HALF_DAY - 1 && newVal == HOURS_IN_HALF_DAY) || (oldVal == HOURS_IN_HALF_DAY && newVal == HOURS_IN_HALF_DAY - 1)) {
          mIsAm=!mIsAm;
          updateAmPmControl();
        }
      }
      onTimeChanged();
    }
  }
);
  EditText hourInput=(EditText)mHourSpinner.findViewById(R.id.numberpicker_input);
  hourInput.setImeOptions(EditorInfo.IME_ACTION_NEXT);
  mDivider=(TextView)findViewById(R.id.divider);
  if (mDivider != null) {
    mDivider.setText(R.string.time_picker_separator);
  }
  mMinuteSpinner=(NumberPicker)findViewById(R.id.minute);
  mMinuteSpinner.setMinValue(0);
  mMinuteSpinner.setMaxValue(59);
  mMinuteSpinner.setOnLongPressUpdateInterval(100);
  mMinuteSpinner.setFormatter(NumberPicker.TWO_DIGIT_FORMATTER);
  mMinuteSpinner.setOnValueChangedListener(new NumberPicker.OnValueChangeListener(){
    public void onValueChange(    NumberPicker spinner,    int oldVal,    int newVal){
      int minValue=mMinuteSpinner.getMinValue();
      int maxValue=mMinuteSpinner.getMaxValue();
      if (oldVal == maxValue && newVal == minValue) {
        int newHour=mHourSpinner.getValue() + 1;
        if (!is24HourView() && newHour == HOURS_IN_HALF_DAY) {
          mIsAm=!mIsAm;
          updateAmPmControl();
        }
        mHourSpinner.setValue(newHour);
      }
 else       if (oldVal == minValue && newVal == maxValue) {
        int newHour=mHourSpinner.getValue() - 1;
        if (!is24HourView() && newHour == HOURS_IN_HALF_DAY - 1) {
          mIsAm=!mIsAm;
          updateAmPmControl();
        }
        mHourSpinner.setValue(newHour);
      }
      onTimeChanged();
    }
  }
);
  EditText minuteInput=(EditText)mMinuteSpinner.findViewById(R.id.numberpicker_input);
  minuteInput.setImeOptions(EditorInfo.IME_ACTION_NEXT);
  mAmPmStrings=new DateFormatSymbols().getAmPmStrings();
  View amPmView=findViewById(R.id.amPm);
  if (amPmView instanceof Button) {
    mAmPmSpinner=null;
    mAmPmButton=(Button)amPmView;
    mAmPmButton.setOnClickListener(new OnClickListener(){
      public void onClick(      View button){
        button.requestFocus();
        mIsAm=!mIsAm;
        updateAmPmControl();
      }
    }
);
  }
 else {
    mAmPmButton=null;
    mAmPmSpinner=(NumberPicker)amPmView;
    mAmPmSpinner.setMinValue(0);
    mAmPmSpinner.setMaxValue(1);
    mAmPmSpinner.setDisplayedValues(mAmPmStrings);
    mAmPmSpinner.setOnValueChangedListener(new OnValueChangeListener(){
      public void onValueChange(      NumberPicker picker,      int oldVal,      int newVal){
        picker.requestFocus();
        mIsAm=!mIsAm;
        updateAmPmControl();
      }
    }
);
    EditText amPmInput=(EditText)mAmPmSpinner.findViewById(R.id.numberpicker_input);
    amPmInput.setImeOptions(EditorInfo.IME_ACTION_DONE);
  }
  updateHourControl();
  updateAmPmControl();
  setOnTimeChangedListener(NO_OP_CHANGE_LISTENER);
  setCurrentHour(mTempCalendar.get(Calendar.HOUR_OF_DAY));
  setCurrentMinute(mTempCalendar.get(Calendar.MINUTE));
  if (!isEnabled()) {
    setEnabled(false);
  }
  if (AccessibilityManager.getInstance(mContext).isEnabled()) {
    setContentDescriptions();
  }
}
