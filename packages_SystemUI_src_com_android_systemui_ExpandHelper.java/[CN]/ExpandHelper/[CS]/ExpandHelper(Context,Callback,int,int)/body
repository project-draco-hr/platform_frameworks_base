{
  mSmallSize=small;
  mMaximumStretch=mSmallSize * STRETCH_INTERVAL;
  mLargeSize=large;
  mContext=context;
  mCallback=callback;
  mScaler=new ViewScaler();
  mDetector=new ScaleGestureDetector(context,new ScaleGestureDetector.SimpleOnScaleGestureListener(){
    @Override public boolean onScaleBegin(    ScaleGestureDetector detector){
      if (DEBUG)       Log.v(TAG,"onscalebegin()");
      View v=mCallback.getChildAtPosition(detector.getFocusX(),detector.getFocusY());
      mInitialTouchSpan=Math.abs(detector.getCurrentSpanY());
      if (DEBUG)       Log.d(TAG,"got mInitialTouchSpan: " + mInitialTouchSpan);
      mStretching=initScale(v);
      return mStretching;
    }
    @Override public boolean onScale(    ScaleGestureDetector detector){
      if (DEBUG)       Log.v(TAG,"onscale() on " + mCurrView);
      float h=Math.abs(detector.getCurrentSpanY());
      if (DEBUG)       Log.d(TAG,"current span is: " + h);
      h=h + mOldHeight - mInitialTouchSpan;
      float target=h;
      if (DEBUG)       Log.d(TAG,"target is: " + target);
      h=h < mSmallSize ? mSmallSize : (h > mLargeSize ? mLargeSize : h);
      h=h > mNaturalHeight ? mNaturalHeight : h;
      if (DEBUG)       Log.d(TAG,"scale continues: h=" + h);
      mScaler.setHeight(h);
      float stretch=(float)Math.abs((target - h) / mMaximumStretch);
      float strength=1f / (1f + (float)Math.pow(Math.E,-1 * ((8f * stretch) - 5f)));
      if (DEBUG)       Log.d(TAG,"stretch: " + stretch + " strength: "+ strength);
      setGlow(GLOW_BASE + strength * (1f - GLOW_BASE));
      return true;
    }
    @Override public void onScaleEnd(    ScaleGestureDetector detector){
      if (DEBUG)       Log.v(TAG,"onscaleend()");
      if (DEBUG)       Log.d(TAG,"scale end");
      finishScale(false);
    }
  }
);
}
