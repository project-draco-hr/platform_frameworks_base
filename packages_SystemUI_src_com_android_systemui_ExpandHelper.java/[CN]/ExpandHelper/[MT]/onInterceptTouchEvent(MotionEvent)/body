{
  if (DEBUG)   Slog.d(TAG,"interceptTouch: act=" + (ev.getAction()) + " stretching="+ mStretching+ " onefinger="+ mPullingWithOneFinger);
  mDetector.onTouchEvent(ev);
  if (mStretching) {
    return true;
  }
 else {
    final int action=ev.getAction();
    if ((action == MotionEvent.ACTION_MOVE) && mPullingWithOneFinger) {
      return true;
    }
    if (mScrollView != null && mScrollView.getScrollY() > 0) {
      return false;
    }
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_MOVE:
{
        if (mWatchingForPull) {
          final int x=(int)ev.getX();
          final int y=(int)ev.getY();
          final int yDiff=y - mLastMotionY;
          if (yDiff > mTouchSlop) {
            mLastMotionY=y;
            mPullingWithOneFinger=initScale(findView(x,y));
            if (mPullingWithOneFinger) {
              mInitialTouchFocusY=mLastMotionY;
              mHasPopped=false;
            }
          }
          if (DEBUG)           Slog.d(TAG,"examining move: " + yDiff);
        }
 else {
          if (DEBUG)           Slog.d(TAG,"uninteresting move");
        }
        break;
      }
case MotionEvent.ACTION_DOWN:
    mWatchingForPull=isInside(mScrollView,ev.getX(),ev.getY());
  mLastMotionY=(int)ev.getY();
if (DEBUG) Slog.d(TAG,"action down: " + mWatchingForPull);
break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (mPullingWithOneFinger) {
finishScale(false);
}
mPullingWithOneFinger=false;
mWatchingForPull=false;
if (DEBUG) Slog.d(TAG,"action up: " + mWatchingForPull);
break;
}
return mPullingWithOneFinger;
}
}
