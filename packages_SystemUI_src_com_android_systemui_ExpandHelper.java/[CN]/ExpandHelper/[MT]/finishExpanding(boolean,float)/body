{
  if (!mExpanding)   return;
  if (DEBUG)   Log.d(TAG,"scale in finishing on view: " + mResizedView);
  float currentHeight=mScaler.getHeight();
  float targetHeight=mSmallSize;
  float h=mScaler.getHeight();
  final boolean wasClosed=(mOldHeight == mSmallSize);
  if (wasClosed) {
    targetHeight=(force || currentHeight > mSmallSize) ? mNaturalHeight : mSmallSize;
  }
 else {
    targetHeight=(force || currentHeight < mNaturalHeight) ? mSmallSize : mNaturalHeight;
  }
  if (mScaleAnimation.isRunning()) {
    mScaleAnimation.cancel();
  }
  mCallback.setUserExpandedChild(mResizedView,targetHeight == mNaturalHeight);
  mCallback.expansionStateChanged(false);
  if (targetHeight != currentHeight) {
    mScaleAnimation.setFloatValues(targetHeight);
    mScaleAnimation.setupStartValues();
    final View scaledView=mResizedView;
    mScaleAnimation.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        mCallback.setUserLockedChild(scaledView,false);
        mScaleAnimation.removeListener(this);
      }
    }
);
    mFlingAnimationUtils.apply(mScaleAnimation,currentHeight,targetHeight,velocity);
    mScaleAnimation.start();
  }
 else {
    mCallback.setUserLockedChild(mResizedView,false);
  }
  mExpanding=false;
  mExpansionStyle=NONE;
  if (DEBUG)   Log.d(TAG,"wasClosed is: " + wasClosed);
  if (DEBUG)   Log.d(TAG,"currentHeight is: " + currentHeight);
  if (DEBUG)   Log.d(TAG,"mSmallSize is: " + mSmallSize);
  if (DEBUG)   Log.d(TAG,"targetHeight is: " + targetHeight);
  if (DEBUG)   Log.d(TAG,"scale was finished on view: " + mResizedView);
}
