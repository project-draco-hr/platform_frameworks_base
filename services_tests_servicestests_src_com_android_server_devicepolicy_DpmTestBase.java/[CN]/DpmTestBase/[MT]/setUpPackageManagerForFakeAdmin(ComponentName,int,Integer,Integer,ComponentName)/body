{
  final ApplicationInfo ai=DpmTestUtils.cloneParcelable(mRealTestContext.getPackageManager().getApplicationInfo(copyFromAdmin.getPackageName(),PackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS));
  ai.enabledSetting=enabledSetting == null ? PackageManager.COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED : enabledSetting;
  if (appTargetSdk != null) {
    ai.targetSdkVersion=appTargetSdk;
  }
  ai.uid=packageUid;
  ai.packageName=admin.getPackageName();
  ai.name=admin.getClassName();
  doReturn(ai).when(mMockContext.ipackageManager).getApplicationInfo(eq(admin.getPackageName()),eq(PackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS),eq(UserHandle.getUserId(packageUid)));
  final Intent resolveIntent=new Intent();
  resolveIntent.setComponent(copyFromAdmin);
  final List<ResolveInfo> realResolveInfo=mRealTestContext.getPackageManager().queryBroadcastReceivers(resolveIntent,PackageManager.GET_META_DATA);
  assertNotNull(realResolveInfo);
  assertEquals(1,realResolveInfo.size());
  realResolveInfo.set(0,DpmTestUtils.cloneParcelable(realResolveInfo.get(0)));
  final ActivityInfo aci=realResolveInfo.get(0).activityInfo;
  aci.applicationInfo=ai;
  aci.packageName=admin.getPackageName();
  aci.name=admin.getClassName();
  doReturn(aci).when(mMockContext.ipackageManager).getReceiverInfo(eq(admin),anyInt(),eq(UserHandle.getUserId(packageUid)));
  markPackageAsInstalled(admin.getPackageName(),ai,UserHandle.getUserId(packageUid));
}
