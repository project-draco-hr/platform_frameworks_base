{
  if (mPos > 0) {
    if (mOutputStream != null) {
      CharBuffer charBuffer=CharBuffer.wrap(mText,0,mPos);
      CoderResult result=mCharset.encode(charBuffer,mBytes,true);
      while (true) {
        if (result.isError()) {
          throw new IOException(result.toString());
        }
 else         if (result.isOverflow()) {
          flushBytesLocked();
          result=mCharset.encode(charBuffer,mBytes,true);
          continue;
        }
        break;
      }
      flushBytesLocked();
      mOutputStream.flush();
    }
 else     if (mWriter != null) {
      mWriter.write(mText,0,mPos);
      mWriter.flush();
    }
 else {
      int nonEolOff=0;
      final int sepLen=mSeparator.length();
      final int len=sepLen < mPos ? sepLen : mPos;
      while (nonEolOff < len && mText[mPos - 1 - nonEolOff] == mSeparator.charAt(mSeparator.length() - 1 - nonEolOff)) {
        nonEolOff++;
      }
      if (nonEolOff >= mPos) {
        mPrinter.println("");
      }
 else {
        mPrinter.println(new String(mText,0,mPos - nonEolOff));
      }
    }
    mPos=0;
  }
}
