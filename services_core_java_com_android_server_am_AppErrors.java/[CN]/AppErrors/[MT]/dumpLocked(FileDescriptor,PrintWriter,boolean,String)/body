{
  if (!mProcessCrashTimes.getMap().isEmpty()) {
    boolean printed=false;
    final long now=SystemClock.uptimeMillis();
    final ArrayMap<String,SparseArray<Long>> pmap=mProcessCrashTimes.getMap();
    final int processCount=pmap.size();
    for (int ip=0; ip < processCount; ip++) {
      final String pname=pmap.keyAt(ip);
      final SparseArray<Long> uids=pmap.valueAt(ip);
      final int uidCount=uids.size();
      for (int i=0; i < uidCount; i++) {
        final int puid=uids.keyAt(i);
        final ProcessRecord r=mService.mProcessNames.get(pname,puid);
        if (dumpPackage != null && (r == null || !r.pkgList.containsKey(dumpPackage))) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println("  Time since processes crashed:");
          printed=true;
        }
        pw.print("    Process ");
        pw.print(pname);
        pw.print(" uid ");
        pw.print(puid);
        pw.print(": last crashed ");
        TimeUtils.formatDuration(now - uids.valueAt(i),pw);
        pw.println(" ago");
      }
    }
  }
  if (!mBadProcesses.getMap().isEmpty()) {
    boolean printed=false;
    final ArrayMap<String,SparseArray<BadProcessInfo>> pmap=mBadProcesses.getMap();
    final int processCount=pmap.size();
    for (int ip=0; ip < processCount; ip++) {
      final String pname=pmap.keyAt(ip);
      final SparseArray<BadProcessInfo> uids=pmap.valueAt(ip);
      final int uidCount=uids.size();
      for (int i=0; i < uidCount; i++) {
        final int puid=uids.keyAt(i);
        final ProcessRecord r=mService.mProcessNames.get(pname,puid);
        if (dumpPackage != null && (r == null || !r.pkgList.containsKey(dumpPackage))) {
          continue;
        }
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println("  Bad processes:");
          printed=true;
        }
        final BadProcessInfo info=uids.valueAt(i);
        pw.print("    Bad process ");
        pw.print(pname);
        pw.print(" uid ");
        pw.print(puid);
        pw.print(": crashed at time ");
        pw.println(info.time);
        if (info.shortMsg != null) {
          pw.print("      Short msg: ");
          pw.println(info.shortMsg);
        }
        if (info.longMsg != null) {
          pw.print("      Long msg: ");
          pw.println(info.longMsg);
        }
        if (info.stack != null) {
          pw.println("      Stack:");
          int lastPos=0;
          for (int pos=0; pos < info.stack.length(); pos++) {
            if (info.stack.charAt(pos) == '\n') {
              pw.print("        ");
              pw.write(info.stack,lastPos,pos - lastPos);
              pw.println();
              lastPos=pos + 1;
            }
          }
          if (lastPos < info.stack.length()) {
            pw.print("        ");
            pw.write(info.stack,lastPos,info.stack.length() - lastPos);
            pw.println();
          }
        }
      }
    }
  }
  return needSep;
}
