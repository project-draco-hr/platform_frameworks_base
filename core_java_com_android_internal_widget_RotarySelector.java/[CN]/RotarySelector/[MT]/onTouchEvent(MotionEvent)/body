{
  if (mAnimating) {
    return true;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(event);
  final int height=getHeight();
  final int eventX=isHoriz() ? (int)event.getX() : height - ((int)event.getY());
  final int hitWindow=mDimpleWidth;
  final int action=event.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (DBG)     log("touch-down");
  mTriggered=false;
if (mGrabbedState != NOTHING_GRABBED) {
  reset();
  invalidate();
}
if (eventX < mLeftHandleX + hitWindow) {
mRotaryOffsetX=eventX - mLeftHandleX;
setGrabbedState(LEFT_HANDLE_GRABBED);
invalidate();
vibrate(VIBRATE_SHORT);
}
 else if (eventX > mRightHandleX - hitWindow) {
mRotaryOffsetX=eventX - mRightHandleX;
setGrabbedState(RIGHT_HANDLE_GRABBED);
invalidate();
vibrate(VIBRATE_SHORT);
}
break;
case MotionEvent.ACTION_MOVE:
if (DBG) log("touch-move");
if (mGrabbedState == LEFT_HANDLE_GRABBED) {
mRotaryOffsetX=eventX - mLeftHandleX;
invalidate();
final int rightThresh=isHoriz() ? getRight() : height;
if (eventX >= rightThresh - mEdgeTriggerThresh && !mTriggered) {
mTriggered=true;
dispatchTriggerEvent(OnDialTriggerListener.LEFT_HANDLE);
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
final int rawVelocity=isHoriz() ? (int)velocityTracker.getXVelocity() : -(int)velocityTracker.getYVelocity();
final int velocity=Math.max(mMinimumVelocity,rawVelocity);
mDimplesOfFling=Math.max(8,Math.abs(velocity / mDimpleSpacing));
startAnimationWithVelocity(eventX - mLeftHandleX,mDimplesOfFling * mDimpleSpacing,velocity);
}
}
 else if (mGrabbedState == RIGHT_HANDLE_GRABBED) {
mRotaryOffsetX=eventX - mRightHandleX;
invalidate();
if (eventX <= mEdgeTriggerThresh && !mTriggered) {
mTriggered=true;
dispatchTriggerEvent(OnDialTriggerListener.RIGHT_HANDLE);
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
final int rawVelocity=isHoriz() ? (int)velocityTracker.getXVelocity() : -(int)velocityTracker.getYVelocity();
final int velocity=Math.min(-mMinimumVelocity,rawVelocity);
mDimplesOfFling=Math.max(8,Math.abs(velocity / mDimpleSpacing));
startAnimationWithVelocity(eventX - mRightHandleX,-(mDimplesOfFling * mDimpleSpacing),velocity);
}
}
break;
case MotionEvent.ACTION_UP:
if (DBG) log("touch-up");
if (mGrabbedState == LEFT_HANDLE_GRABBED && Math.abs(eventX - mLeftHandleX) > 5) {
startAnimation(eventX - mLeftHandleX,0,SNAP_BACK_ANIMATION_DURATION_MILLIS);
}
 else if (mGrabbedState == RIGHT_HANDLE_GRABBED && Math.abs(eventX - mRightHandleX) > 5) {
startAnimation(eventX - mRightHandleX,0,SNAP_BACK_ANIMATION_DURATION_MILLIS);
}
mRotaryOffsetX=0;
setGrabbedState(NOTHING_GRABBED);
invalidate();
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
break;
case MotionEvent.ACTION_CANCEL:
if (DBG) log("touch-cancel");
reset();
invalidate();
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
break;
}
return true;
}
