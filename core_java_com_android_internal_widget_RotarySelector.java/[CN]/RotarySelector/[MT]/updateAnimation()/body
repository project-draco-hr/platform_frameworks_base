{
  final long millisSoFar=currentAnimationTimeMillis() - mAnimationStartTime;
  final long millisLeft=mAnimationDuration - millisSoFar;
  final int totalDeltaX=mAnimatingDeltaXStart - mAnimatingDeltaXEnd;
  if (DBG)   log("millisleft for animating: " + millisLeft);
  if (millisLeft <= 0) {
    reset();
    return;
  }
  float interpolation=mInterpolator.getInterpolation((float)millisSoFar / mAnimationDuration);
  final int dx=(int)(totalDeltaX * (1 - interpolation));
  mRotaryOffsetX=mAnimatingDeltaXEnd + dx;
  if (mDimplesOfFling > 0) {
    if (mRotaryOffsetX < 4 * mDimpleSpacing) {
      mRotaryOffsetX+=(4 + mDimplesOfFling - 4) * mDimpleSpacing;
    }
 else     if (mRotaryOffsetX > 4 * mDimpleSpacing) {
      mRotaryOffsetX-=(4 + mDimplesOfFling - 4) * mDimpleSpacing;
    }
  }
  invalidate();
}
