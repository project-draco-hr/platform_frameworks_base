{
  super.onDraw(canvas);
  final int width=getWidth();
  final int height=getHeight();
  if (mAnimating) {
    updateAnimation();
  }
  canvas.drawBitmap(mBackground,mBgMatrix,mPaint);
  mArrowMatrix.reset();
switch (mGrabbedState) {
case NOTHING_GRABBED:
    break;
case LEFT_HANDLE_GRABBED:
  mArrowMatrix.setTranslate(0,0);
if (!isHoriz()) {
  mArrowMatrix.preRotate(-90,0,0);
  mArrowMatrix.postTranslate(0,height);
}
canvas.drawBitmap(mArrowLongLeft,mArrowMatrix,mPaint);
break;
case RIGHT_HANDLE_GRABBED:
mArrowMatrix.setTranslate(0,0);
if (!isHoriz()) {
mArrowMatrix.preRotate(-90,0,0);
mArrowMatrix.postTranslate(0,height + (mBackgroundWidth - height));
}
canvas.drawBitmap(mArrowLongRight,mArrowMatrix,mPaint);
break;
default :
throw new IllegalStateException("invalid mGrabbedState: " + mGrabbedState);
}
final int bgHeight=mBackgroundHeight;
final int bgTop=isHoriz() ? height - bgHeight : width - bgHeight;
{
final int xOffset=mLeftHandleX + mRotaryOffsetX;
final int drawableY=getYOnArc(mBackgroundWidth,mInnerRadius,mOuterRadius,xOffset);
if (isHoriz()) {
drawCentered(mDimple,canvas,xOffset,drawableY + bgTop);
if (mGrabbedState != RIGHT_HANDLE_GRABBED) {
drawCentered(mLeftHandleIcon,canvas,xOffset,drawableY + bgTop);
}
}
 else {
drawCentered(mDimple,canvas,drawableY + bgTop,height - xOffset);
if (mGrabbedState != RIGHT_HANDLE_GRABBED) {
drawCentered(mLeftHandleIcon,canvas,drawableY + bgTop,height - xOffset);
}
}
}
{
final int xOffset=isHoriz() ? width / 2 + mRotaryOffsetX : height / 2 + mRotaryOffsetX;
final int drawableY=getYOnArc(mBackgroundWidth,mInnerRadius,mOuterRadius,xOffset);
if (isHoriz()) {
drawCentered(mDimple,canvas,xOffset,drawableY + bgTop);
}
 else {
drawCentered(mDimple,canvas,drawableY + bgTop,height - xOffset);
}
}
{
final int xOffset=mRightHandleX + mRotaryOffsetX;
final int drawableY=getYOnArc(mBackgroundWidth,mInnerRadius,mOuterRadius,xOffset);
if (isHoriz()) {
drawCentered(mDimple,canvas,xOffset,drawableY + bgTop);
if (mGrabbedState != LEFT_HANDLE_GRABBED) {
drawCentered(mRightHandleIcon,canvas,xOffset,drawableY + bgTop);
}
}
 else {
drawCentered(mDimple,canvas,drawableY + bgTop,height - xOffset);
if (mGrabbedState != LEFT_HANDLE_GRABBED) {
drawCentered(mRightHandleIcon,canvas,drawableY + bgTop,height - xOffset);
}
}
}
int dimpleLeft=mRotaryOffsetX + mLeftHandleX - mDimpleSpacing;
final int halfdimple=mDimpleWidth / 2;
while (dimpleLeft > -halfdimple) {
final int drawableY=getYOnArc(mBackgroundWidth,mInnerRadius,mOuterRadius,dimpleLeft);
if (isHoriz()) {
drawCentered(mDimple,canvas,dimpleLeft,drawableY + bgTop);
}
 else {
drawCentered(mDimple,canvas,drawableY + bgTop,height - dimpleLeft);
}
dimpleLeft-=mDimpleSpacing;
}
int dimpleRight=mRotaryOffsetX + mRightHandleX + mDimpleSpacing;
final int rightThresh=mRight + halfdimple;
while (dimpleRight < rightThresh) {
final int drawableY=getYOnArc(mBackgroundWidth,mInnerRadius,mOuterRadius,dimpleRight);
if (isHoriz()) {
drawCentered(mDimple,canvas,dimpleRight,drawableY + bgTop);
}
 else {
drawCentered(mDimple,canvas,drawableY + bgTop,height - dimpleRight);
}
dimpleRight+=mDimpleSpacing;
}
}
