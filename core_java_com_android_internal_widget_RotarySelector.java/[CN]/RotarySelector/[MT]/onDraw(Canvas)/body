{
  super.onDraw(canvas);
  if (DBG) {
    log(String.format("onDraw: mAnimating=%s, mTouchDragOffset=%d, mGrabbedState=%d," + "mFrozen=%s",mAnimating,mTouchDragOffset,mGrabbedState,mFrozen));
  }
  final int height=getHeight();
  if (mAnimating && !mFrozen) {
    long millisLeft=mAnimationEndTime - currentAnimationTimeMillis();
    if (DBG)     log("millisleft for animating: " + millisLeft);
    if (millisLeft <= 0) {
      reset();
    }
 else {
      float interpolation=mInterpolator.getInterpolation((float)millisLeft / ANIMATION_DURATION_MILLIS);
      mTouchDragOffset=(int)(mAnimatingDelta * interpolation);
    }
  }
  final int backgroundW=mBackground.getIntrinsicWidth();
  final int backgroundH=mBackground.getIntrinsicHeight();
  final int backgroundY=height - backgroundH;
  if (DBG)   log("- Background INTRINSIC: " + backgroundW + " x "+ backgroundH);
  mBackground.setBounds(0,backgroundY,backgroundW,backgroundY + backgroundH);
  if (DBG)   log("  Background BOUNDS: " + mBackground.getBounds());
  mBackground.draw(canvas);
  Drawable currentArrow;
switch (mGrabbedState) {
case NOTHING_GRABBED:
    currentArrow=null;
  break;
case LEFT_HANDLE_GRABBED:
currentArrow=mArrowLongLeft;
break;
case RIGHT_HANDLE_GRABBED:
currentArrow=mArrowLongRight;
break;
default :
throw new IllegalStateException("invalid mGrabbedState: " + mGrabbedState);
}
if (currentArrow != null) currentArrow.draw(canvas);
final int outerRadius=(int)(mDensity * OUTER_ROTARY_RADIUS_DIP);
final int innerRadius=(int)((OUTER_ROTARY_RADIUS_DIP - ROTARY_STROKE_WIDTH_DIP) * mDensity);
final int bgTop=mBackground.getBounds().top;
{
final int xOffset=mLeftHandleX + mTouchDragOffset;
final int drawableY=getYOnArc(mBackground,innerRadius,outerRadius,xOffset);
drawCentered(mDimple,canvas,xOffset,drawableY + bgTop);
if (mGrabbedState != RIGHT_HANDLE_GRABBED) {
drawCentered(mLeftHandleIcon,canvas,xOffset,drawableY + bgTop);
}
}
if (DRAW_CENTER_DIMPLE) {
final int xOffset=getWidth() / 2 + mTouchDragOffset;
final int drawableY=getYOnArc(mBackground,innerRadius,outerRadius,xOffset);
drawCentered(mDimple,canvas,xOffset,drawableY + bgTop);
}
{
final int xOffset=mRightHandleX + mTouchDragOffset;
final int drawableY=getYOnArc(mBackground,innerRadius,outerRadius,xOffset);
drawCentered(mDimple,canvas,xOffset,drawableY + bgTop);
if (mGrabbedState != LEFT_HANDLE_GRABBED) {
drawCentered(mRightHandleIcon,canvas,xOffset,drawableY + bgTop);
}
}
if (mAnimating) invalidate();
}
