{
  super.onDraw(canvas);
  final int width=getWidth();
  if (VISUAL_DEBUG) {
    mPaint.setColor(0xffff0000);
    mPaint.setStyle(Paint.Style.STROKE);
    canvas.drawRect(0,0,width,getHeight(),mPaint);
  }
  final int height=getHeight();
  if (mAnimating) {
    updateAnimation();
  }
  canvas.drawBitmap(mBackground,mBgMatrix,mPaint);
  mArrowMatrix.reset();
switch (mGrabbedState) {
case NOTHING_GRABBED:
    break;
case LEFT_HANDLE_GRABBED:
  mArrowMatrix.setTranslate(0,0);
if (!isHoriz()) {
  mArrowMatrix.preRotate(-90,0,0);
  mArrowMatrix.postTranslate(0,height);
}
canvas.drawBitmap(mArrowLongLeft,mArrowMatrix,mPaint);
break;
case RIGHT_HANDLE_GRABBED:
mArrowMatrix.setTranslate(0,0);
if (!isHoriz()) {
mArrowMatrix.preRotate(-90,0,0);
mArrowMatrix.postTranslate(0,height + (mBackgroundWidth - height));
}
canvas.drawBitmap(mArrowLongRight,mArrowMatrix,mPaint);
break;
default :
throw new IllegalStateException("invalid mGrabbedState: " + mGrabbedState);
}
final int bgHeight=mBackgroundHeight;
final int bgTop=isHoriz() ? height - bgHeight : width - bgHeight;
if (VISUAL_DEBUG) {
float or=OUTER_ROTARY_RADIUS_DIP * mDensity;
final int vOffset=mBackgroundWidth - height;
final int midX=isHoriz() ? width / 2 : mBackgroundWidth / 2 - vOffset;
if (isHoriz()) {
canvas.drawCircle(midX,or + bgTop,or,mPaint);
}
 else {
canvas.drawCircle(or + bgTop,midX,or,mPaint);
}
}
{
final int xOffset=mLeftHandleX + mRotaryOffsetX;
final int drawableY=getYOnArc(mBackgroundWidth,mInnerRadius,mOuterRadius,xOffset);
final int x=isHoriz() ? xOffset : drawableY + bgTop;
final int y=isHoriz() ? drawableY + bgTop : height - xOffset;
if (mGrabbedState != RIGHT_HANDLE_GRABBED) {
drawCentered(mDimple,canvas,x,y);
drawCentered(mLeftHandleIcon,canvas,x,y);
}
 else {
drawCentered(mDimpleDim,canvas,x,y);
}
}
{
final int xOffset=isHoriz() ? width / 2 + mRotaryOffsetX : height / 2 + mRotaryOffsetX;
final int drawableY=getYOnArc(mBackgroundWidth,mInnerRadius,mOuterRadius,xOffset);
if (isHoriz()) {
drawCentered(mDimpleDim,canvas,xOffset,drawableY + bgTop);
}
 else {
drawCentered(mDimpleDim,canvas,drawableY + bgTop,height - xOffset);
}
}
{
final int xOffset=mRightHandleX + mRotaryOffsetX;
final int drawableY=getYOnArc(mBackgroundWidth,mInnerRadius,mOuterRadius,xOffset);
final int x=isHoriz() ? xOffset : drawableY + bgTop;
final int y=isHoriz() ? drawableY + bgTop : height - xOffset;
if (mGrabbedState != LEFT_HANDLE_GRABBED) {
drawCentered(mDimple,canvas,x,y);
drawCentered(mRightHandleIcon,canvas,x,y);
}
 else {
drawCentered(mDimpleDim,canvas,x,y);
}
}
int dimpleLeft=mRotaryOffsetX + mLeftHandleX - mDimpleSpacing;
final int halfdimple=mDimpleWidth / 2;
while (dimpleLeft > -halfdimple) {
final int drawableY=getYOnArc(mBackgroundWidth,mInnerRadius,mOuterRadius,dimpleLeft);
if (isHoriz()) {
drawCentered(mDimpleDim,canvas,dimpleLeft,drawableY + bgTop);
}
 else {
drawCentered(mDimpleDim,canvas,drawableY + bgTop,height - dimpleLeft);
}
dimpleLeft-=mDimpleSpacing;
}
int dimpleRight=mRotaryOffsetX + mRightHandleX + mDimpleSpacing;
final int rightThresh=mRight + halfdimple;
while (dimpleRight < rightThresh) {
final int drawableY=getYOnArc(mBackgroundWidth,mInnerRadius,mOuterRadius,dimpleRight);
if (isHoriz()) {
drawCentered(mDimpleDim,canvas,dimpleRight,drawableY + bgTop);
}
 else {
drawCentered(mDimpleDim,canvas,drawableY + bgTop,height - dimpleRight);
}
dimpleRight+=mDimpleSpacing;
}
}
