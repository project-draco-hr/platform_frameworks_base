{
  super.onDraw(canvas);
  if (DBG) {
    log(String.format("onDraw: mAnimating=%s, mRotaryOffsetX=%d, mGrabbedState=%d",mAnimating,mRotaryOffsetX,mGrabbedState));
  }
  final int height=getHeight();
  if (mAnimating) {
    updateAnimation();
  }
  final int backgroundW=mBackgroundWidth;
  final int backgroundH=mBackgroundHeight;
  final int backgroundY=height - backgroundH;
  if (DBG)   log("- Background INTRINSIC: " + backgroundW + " x "+ backgroundH);
  mBackground.setBounds(0,backgroundY,backgroundW,backgroundY + backgroundH);
  if (DBG)   log("  Background BOUNDS: " + mBackground.getBounds());
  mBackground.draw(canvas);
  Drawable currentArrow;
switch (mGrabbedState) {
case NOTHING_GRABBED:
    currentArrow=null;
  break;
case LEFT_HANDLE_GRABBED:
currentArrow=mArrowLongLeft;
break;
case RIGHT_HANDLE_GRABBED:
currentArrow=mArrowLongRight;
break;
default :
throw new IllegalStateException("invalid mGrabbedState: " + mGrabbedState);
}
if (currentArrow != null) currentArrow.draw(canvas);
final int bgTop=mBackground.getBounds().top;
{
final int xOffset=mLeftHandleX + mRotaryOffsetX;
final int drawableY=getYOnArc(mBackground,mInnerRadius,mOuterRadius,xOffset);
drawCentered(mDimple,canvas,xOffset,drawableY + bgTop);
if (mGrabbedState != RIGHT_HANDLE_GRABBED) {
drawCentered(mLeftHandleIcon,canvas,xOffset,drawableY + bgTop);
}
}
if (DRAW_CENTER_DIMPLE) {
final int xOffset=getWidth() / 2 + mRotaryOffsetX;
final int drawableY=getYOnArc(mBackground,mInnerRadius,mOuterRadius,xOffset);
drawCentered(mDimple,canvas,xOffset,drawableY + bgTop);
}
{
final int xOffset=mRightHandleX + mRotaryOffsetX;
final int drawableY=getYOnArc(mBackground,mInnerRadius,mOuterRadius,xOffset);
drawCentered(mDimple,canvas,xOffset,drawableY + bgTop);
if (mGrabbedState != LEFT_HANDLE_GRABBED) {
drawCentered(mRightHandleIcon,canvas,xOffset,drawableY + bgTop);
}
}
int dimpleLeft=mRotaryOffsetX + mLeftHandleX - mDimpleSpacing;
final int halfdimple=mDimpleWidth / 2;
while (dimpleLeft > -halfdimple) {
final int drawableY=getYOnArc(mBackground,mInnerRadius,mOuterRadius,dimpleLeft);
drawCentered(mDimple,canvas,dimpleLeft,drawableY + bgTop);
dimpleLeft-=mDimpleSpacing;
}
int dimpleRight=mRotaryOffsetX + mRightHandleX + mDimpleSpacing;
final int rightThresh=mRight + halfdimple;
while (dimpleRight < rightThresh) {
final int drawableY=getYOnArc(mBackground,mInnerRadius,mOuterRadius,dimpleRight);
drawCentered(mDimple,canvas,dimpleRight,drawableY + bgTop);
dimpleRight+=mDimpleSpacing;
}
}
