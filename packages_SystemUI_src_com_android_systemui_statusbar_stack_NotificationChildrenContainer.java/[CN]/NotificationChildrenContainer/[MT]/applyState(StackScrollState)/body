{
  int childCount=mChildren.size();
  ViewState tmpState=new ViewState();
  float expandFraction=0.0f;
  if (mUserLocked) {
    expandFraction=getGroupExpandFraction();
  }
  final boolean dividersVisible=mUserLocked || mNotificationParent.isGroupExpansionChanging();
  for (int i=0; i < childCount; i++) {
    ExpandableNotificationRow child=mChildren.get(i);
    StackViewState viewState=state.getViewStateForView(child);
    state.applyState(child,viewState);
    View divider=mDividers.get(i);
    tmpState.initFrom(divider);
    tmpState.yTranslation=viewState.yTranslation - mDividerHeight;
    float alpha=mChildrenExpanded && viewState.alpha != 0 ? 0.5f : 0;
    if (mUserLocked && viewState.alpha != 0) {
      alpha=NotificationUtils.interpolate(0,0.5f,Math.min(viewState.alpha,expandFraction));
    }
    tmpState.hidden=!dividersVisible;
    tmpState.alpha=alpha;
    state.applyViewState(divider,tmpState);
    child.setFakeShadowIntensity(0.0f,0.0f,0,0);
  }
  if (mOverflowNumber != null) {
    state.applyViewState(mOverflowNumber,mGroupOverFlowState);
    mNeverAppliedGroupState=false;
  }
  if (mNotificationHeader != null) {
    state.applyViewState(mNotificationHeader,mHeaderViewState);
  }
}
