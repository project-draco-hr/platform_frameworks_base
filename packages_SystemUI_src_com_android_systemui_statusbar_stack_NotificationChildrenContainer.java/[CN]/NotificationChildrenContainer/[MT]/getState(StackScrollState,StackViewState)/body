{
  int childCount=mChildren.size();
  int yPosition=mNotificationHeaderHeight;
  boolean firstChild=true;
  int maxAllowedVisibleChildren=getMaxAllowedVisibleChildren();
  int lastVisibleIndex=maxAllowedVisibleChildren - 1;
  int firstOverflowIndex=lastVisibleIndex + 1;
  float expandFactor=0;
  if (mUserLocked) {
    expandFactor=getGroupExpandFraction();
    firstOverflowIndex=getMaxAllowedVisibleChildren(true);
  }
  for (int i=0; i < childCount; i++) {
    ExpandableNotificationRow child=mChildren.get(i);
    if (!firstChild) {
      if (mUserLocked) {
        yPosition+=NotificationUtils.interpolate(mChildPadding,mDividerHeight,expandFactor);
      }
 else {
        yPosition+=mChildrenExpanded ? mDividerHeight : mChildPadding;
      }
    }
 else {
      if (mUserLocked) {
        yPosition+=NotificationUtils.interpolate(0,mNotificatonTopPadding + mDividerHeight,expandFactor);
      }
 else {
        yPosition+=mChildrenExpanded ? mNotificatonTopPadding + mDividerHeight : 0;
      }
      firstChild=false;
    }
    StackViewState childState=resultState.getViewStateForView(child);
    int intrinsicHeight=child.getIntrinsicHeight();
    childState.yTranslation=yPosition;
    childState.zTranslation=0;
    childState.height=intrinsicHeight;
    childState.dimmed=parentState.dimmed;
    childState.dark=parentState.dark;
    childState.hideSensitive=parentState.hideSensitive;
    childState.belowSpeedBump=parentState.belowSpeedBump;
    childState.clipTopAmount=0;
    childState.topOverLap=0;
    childState.alpha=0;
    if (i < firstOverflowIndex) {
      childState.alpha=1;
    }
 else     if (expandFactor == 1.0f && i <= lastVisibleIndex) {
      childState.alpha=(mActualHeight - childState.yTranslation) / childState.height;
      childState.alpha=Math.max(0.0f,Math.min(1.0f,childState.alpha));
    }
    childState.location=parentState.location;
    yPosition+=intrinsicHeight;
  }
  if (mOverflowNumber != null) {
    ExpandableNotificationRow overflowView=mChildren.get(Math.min(getMaxAllowedVisibleChildren(true),childCount) - 1);
    mGroupOverFlowState.copyFrom(resultState.getViewStateForView(overflowView));
    if (!mChildrenExpanded) {
      if (mUserLocked) {
        HybridNotificationView singleLineView=overflowView.getSingleLineView();
        View mirrorView=singleLineView.getTextView();
        if (mirrorView.getVisibility() == GONE) {
          mirrorView=singleLineView.getTitleView();
        }
        if (mirrorView.getVisibility() == GONE) {
          mirrorView=singleLineView;
        }
        mGroupOverFlowState.yTranslation+=NotificationUtils.getRelativeYOffset(mirrorView,overflowView);
        mGroupOverFlowState.alpha=mirrorView.getAlpha();
      }
    }
 else {
      mGroupOverFlowState.yTranslation+=mNotificationHeaderHeight;
      mGroupOverFlowState.alpha=0.0f;
    }
  }
}
