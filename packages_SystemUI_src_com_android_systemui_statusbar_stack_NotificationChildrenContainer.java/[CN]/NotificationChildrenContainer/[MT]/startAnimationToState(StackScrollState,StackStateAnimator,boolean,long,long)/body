{
  int childCount=mChildren.size();
  boolean firstChild=true;
  ViewState dividerState=new ViewState();
  int notGoneIndex=0;
  for (int i=0; i < childCount; i++) {
    ExpandableNotificationRow child=mChildren.get(i);
    StackViewState viewState=state.getViewStateForView(child);
    if (child.getVisibility() == View.GONE) {
      continue;
    }
    int difference=Math.min(StackStateAnimator.DELAY_EFFECT_MAX_INDEX_DIFFERENCE_CHILDREN,notGoneIndex + 1);
    long delay=withDelays ? difference * StackStateAnimator.ANIMATION_DELAY_PER_ELEMENT_EXPAND_CHILDREN : 0;
    delay+=baseDelay;
    if (!firstChild) {
      View divider=mDividers.get(i - 1);
      dividerState.initFrom(divider);
      dividerState.yTranslation=viewState.yTranslation - (mChildPadding + mDividerHeight) / 2.0f;
      dividerState.alpha=1;
      stateAnimator.startViewAnimations(divider,dividerState,delay,duration);
    }
 else {
      firstChild=false;
    }
    stateAnimator.startStackAnimations(child,viewState,state,-1,delay);
    notGoneIndex++;
  }
  dividerState.initFrom(mCollapseButton);
  dividerState.alpha=1.0f;
  stateAnimator.startViewAnimations(mCollapseButton,dividerState,baseDelay,duration);
  dividerState.initFrom(mCollapseDivider);
  dividerState.alpha=1.0f;
  dividerState.yTranslation=0.0f;
  stateAnimator.startViewAnimations(mCollapseDivider,dividerState,baseDelay,duration);
}
