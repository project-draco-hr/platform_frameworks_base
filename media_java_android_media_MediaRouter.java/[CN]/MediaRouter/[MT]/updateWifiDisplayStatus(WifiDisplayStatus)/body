{
  final WifiDisplayStatus oldStatus=sStatic.mLastKnownWifiDisplayStatus;
  boolean wantScan=false;
  boolean blockScan=false;
  WifiDisplay[] oldDisplays=oldStatus != null ? oldStatus.getRememberedDisplays() : new WifiDisplay[0];
  WifiDisplay[] newDisplays=newStatus.getRememberedDisplays();
  WifiDisplay[] availableDisplays=newStatus.getAvailableDisplays();
  WifiDisplay activeDisplay=newStatus.getActiveDisplay();
  for (int i=0; i < newDisplays.length; i++) {
    final WifiDisplay d=newDisplays[i];
    final WifiDisplay oldRemembered=findMatchingDisplay(d,oldDisplays);
    if (oldRemembered == null) {
      addRouteStatic(makeWifiDisplayRoute(d,findMatchingDisplay(d,availableDisplays) != null));
      wantScan=true;
    }
 else {
      final boolean available=findMatchingDisplay(d,availableDisplays) != null;
      final RouteInfo route=findWifiDisplayRoute(d);
      updateWifiDisplayRoute(route,d,available,newStatus);
    }
    if (d.equals(activeDisplay)) {
      final RouteInfo activeRoute=findWifiDisplayRoute(d);
      if (activeRoute != null) {
        selectRouteStatic(activeRoute.getSupportedTypes(),activeRoute);
        blockScan=true;
      }
    }
  }
  for (int i=0; i < oldDisplays.length; i++) {
    final WifiDisplay d=oldDisplays[i];
    final WifiDisplay newDisplay=findMatchingDisplay(d,newDisplays);
    if (newDisplay == null) {
      removeRoute(findWifiDisplayRoute(d));
    }
  }
  if (wantScan && !blockScan) {
    sStatic.mDisplayService.scanWifiDisplays();
  }
  sStatic.mLastKnownWifiDisplayStatus=newStatus;
}
