{
  final RouteInfo oldRoute=sStatic.mSelectedRoute;
  if (oldRoute == route)   return;
  if (!route.matchesTypes(types)) {
    Log.w(TAG,"selectRoute ignored; cannot select route with supported types " + typesToString(route.getSupportedTypes()) + " into route types "+ typesToString(types));
    return;
  }
  final RouteInfo btRoute=sStatic.mBluetoothA2dpRoute;
  if (btRoute != null && (types & ROUTE_TYPE_LIVE_AUDIO) != 0 && (route == btRoute || route == sStatic.mDefaultAudioVideo)) {
    try {
      sStatic.mAudioService.setBluetoothA2dpOn(route == btRoute);
    }
 catch (    RemoteException e) {
      Log.e(TAG,"Error changing Bluetooth A2DP state",e);
    }
  }
  final WifiDisplay activeDisplay=sStatic.mDisplayService.getWifiDisplayStatus().getActiveDisplay();
  final boolean oldRouteHasAddress=oldRoute != null && oldRoute.mDeviceAddress != null;
  final boolean newRouteHasAddress=route != null && route.mDeviceAddress != null;
  if (activeDisplay != null || oldRouteHasAddress || newRouteHasAddress) {
    if (newRouteHasAddress && !matchesDeviceAddress(activeDisplay,route)) {
      sStatic.mDisplayService.connectWifiDisplay(route.mDeviceAddress);
    }
 else     if (activeDisplay != null && !newRouteHasAddress) {
      sStatic.mDisplayService.disconnectWifiDisplay();
    }
  }
  sStatic.setSelectedRoute(route,explicit);
  if (oldRoute != null) {
    dispatchRouteUnselected(types & oldRoute.getSupportedTypes(),oldRoute);
  }
  if (route != null) {
    dispatchRouteSelected(types & route.getSupportedTypes(),route);
  }
}
