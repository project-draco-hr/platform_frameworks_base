{
  if (!mSharedElementReadyReceived) {
    mSharedElementReadyReceived=true;
    mHandler.removeCallbacks(this);
    mHandler.postDelayed(this,MAX_TRANSITION_FINISH_WAIT);
    if (!mSharedElementTargets.isEmpty()) {
      runOnUiThread(mHandler,new Runnable(){
        @Override public void run(){
          Transition transition=getTransitionManager().getEnterTransition(mContentScene);
          if (transition == null) {
            transition=TransitionManager.getDefaultTransition();
          }
          transition=addTransitionTargets(transition,mSharedElementTargets.values(),true);
          transition.setEpicenterCallback(mEpicenterCallback);
          if (transitionArgs == null) {
            TransitionManager.beginDelayedTransition(mDecor,transition);
            setViewVisibility(mSharedElementTargets.values(),View.VISIBLE);
          }
 else {
            mSceneTransitionListener.sharedElementStart(transition);
            setSharedElementState(mSharedElementTargets,transitionArgs);
            setViewVisibility(mSharedElementTargets.values(),View.VISIBLE);
            mDecor.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener(){
              @Override public boolean onPreDraw(){
                mDecor.getViewTreeObserver().removeOnPreDrawListener(this);
                mSceneTransitionListener.sharedElementEnd();
                mActivityOptions.dispatchSharedElementsReady();
                return true;
              }
            }
);
            TransitionManager.beginDelayedTransition(mDecor,transition);
          }
        }
      }
);
    }
    if (mAllowEnterOverlap) {
      fadeInBackground();
    }
  }
}
