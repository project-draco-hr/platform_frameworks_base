{
  if (!mSharedElementReadyReceived) {
    mSharedElementReadyReceived=true;
    mHandler.removeCallbacks(this);
    mHandler.postDelayed(this,MAX_TRANSITION_FINISH_WAIT);
    if (!mSharedElementTargets.isEmpty()) {
      Transition transition=getTransitionManager().getEnterTransition(mContentScene);
      if (transition == null) {
        transition=TransitionManager.getDefaultTransition();
      }
      transition=transition.clone();
      if (transitionArgs == null) {
        TransitionManager.beginDelayedTransition(mDecor,transition);
        setViewVisibility(mSharedElementTargets.values(),View.VISIBLE);
      }
 else {
        int[] tempLoc=new int[2];
        for (        Map.Entry<String,View> entry : mSharedElementTargets.entrySet()) {
          setSharedElementState(entry.getValue(),entry.getKey(),transitionArgs,tempLoc);
        }
        setViewVisibility(mSharedElementTargets.values(),View.VISIBLE);
        mSceneTransitionListener.sharedElementStart(transition);
        mDecor.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener(){
          @Override public boolean onPreDraw(){
            mDecor.getViewTreeObserver().removeOnPreDrawListener(this);
            mSceneTransitionListener.sharedElementEnd();
            mActivityOptions.dispatchSharedElementsReady();
            return true;
          }
        }
);
        TransitionManager.beginDelayedTransition(mDecor,transition);
      }
    }
    if (mTriggerEarly) {
      fadeInBackground();
    }
  }
}
