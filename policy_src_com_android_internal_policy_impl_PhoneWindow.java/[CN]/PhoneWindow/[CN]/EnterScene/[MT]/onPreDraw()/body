{
  ViewTreeObserver observer=mDecor.getViewTreeObserver();
  observer.removeOnPreDrawListener(this);
  if (!mEnterTransitionStarted && mSceneTransitionListener != null) {
    mEnterTransitionStarted=true;
    mDecor.captureTransitioningViews(mEnteringViews);
    ArrayList<String> sharedElementNames=mActivityOptions.getSharedElementNames();
    if (sharedElementNames != null) {
      mDecor.findSharedElements(mSharedElementTargets);
      if (mSharedElementsMap != null) {
        for (        Map.Entry<String,String> entry : mSharedElementsMap.entrySet()) {
          View sharedElement=mSharedElementTargets.remove(entry.getValue());
          if (sharedElement != null) {
            mSharedElementTargets.put(entry.getKey(),sharedElement);
          }
        }
      }
      mSharedElementTargets.keySet().retainAll(sharedElementNames);
      mEnteringViews.removeAll(mSharedElementTargets.values());
    }
    setViewVisibility(mEnteringViews,View.INVISIBLE);
    setViewVisibility(mSharedElementTargets.values(),View.INVISIBLE);
    if (mTriggerEarly) {
      beginEnterScene();
    }
    observer.addOnPreDrawListener(this);
  }
 else {
    mHandler.postDelayed(this,MAX_TRANSITION_START_WAIT);
    mActivityOptions.dispatchSceneTransitionStarted(this,new ArrayList<String>(mSharedElementTargets.keySet()));
  }
  return true;
}
