{
  final KeyEvent.DispatcherState dispatcher=mDecor != null ? mDecor.getKeyDispatcherState() : null;
switch (keyCode) {
case KeyEvent.KEYCODE_VOLUME_UP:
case KeyEvent.KEYCODE_VOLUME_DOWN:
{
      int direction=keyCode == KeyEvent.KEYCODE_VOLUME_UP ? AudioManager.ADJUST_RAISE : AudioManager.ADJUST_LOWER;
      if (mMediaController != null) {
        mMediaController.adjustVolume(direction,AudioManager.FLAG_SHOW_UI);
      }
 else {
        MediaSessionLegacyHelper.getHelper(getContext()).sendAdjustVolumeBy(mVolumeControlStreamType,direction,AudioManager.FLAG_SHOW_UI);
      }
      return true;
    }
case KeyEvent.KEYCODE_VOLUME_MUTE:
{
    getAudioManager().handleKeyDown(event,mVolumeControlStreamType);
    return true;
  }
case KeyEvent.KEYCODE_MEDIA_PLAY:
case KeyEvent.KEYCODE_MEDIA_PAUSE:
case KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE:
case KeyEvent.KEYCODE_MUTE:
case KeyEvent.KEYCODE_HEADSETHOOK:
case KeyEvent.KEYCODE_MEDIA_STOP:
case KeyEvent.KEYCODE_MEDIA_NEXT:
case KeyEvent.KEYCODE_MEDIA_PREVIOUS:
case KeyEvent.KEYCODE_MEDIA_REWIND:
case KeyEvent.KEYCODE_MEDIA_RECORD:
case KeyEvent.KEYCODE_MEDIA_FAST_FORWARD:
{
  if (mMediaController != null) {
    if (mMediaController.dispatchMediaButtonEvent(event)) {
      return true;
    }
  }
  return false;
}
case KeyEvent.KEYCODE_MENU:
{
onKeyDownPanel((featureId < 0) ? FEATURE_OPTIONS_PANEL : featureId,event);
return true;
}
case KeyEvent.KEYCODE_BACK:
{
if (event.getRepeatCount() > 0) break;
if (featureId < 0) break;
if (dispatcher != null) {
dispatcher.startTracking(event,this);
}
return true;
}
}
return false;
}
