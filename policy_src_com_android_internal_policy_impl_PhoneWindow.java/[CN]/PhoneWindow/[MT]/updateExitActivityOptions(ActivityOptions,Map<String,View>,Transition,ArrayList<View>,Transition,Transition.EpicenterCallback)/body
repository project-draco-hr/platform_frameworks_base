{
  final Bundle sharedElementArgs=new Bundle();
  captureTerminalSharedElementState(sharedElements,sharedElementArgs);
  ActivityOptions.SharedElementSource sharedElementSource=new ActivityOptions.SharedElementSource(){
    private Handler mHandler=new Handler();
    @Override public Bundle getSharedElementExitState(){
      return sharedElementArgs;
    }
    @Override public void acceptedSharedElements(    final ArrayList<String> sharedElementNames){
      if (sharedElementNames.size() == sharedElements.size()) {
        return;
      }
      runOnUiThread(mHandler,new Runnable(){
        @Override public void run(){
          Transition transition=mTransitionManager.getExitTransition(mContentScene);
          transition=transition.clone();
          transition.setEpicenterCallback(epicenterCallback);
          TransitionManager.beginDelayedTransition(mDecor,transition);
          for (          String name : sharedElements.keySet()) {
            if (!sharedElementNames.contains(name)) {
              sharedElements.get(name).setVisibility(View.INVISIBLE);
            }
          }
          sharedElements.keySet().retainAll(sharedElementNames);
        }
      }
);
    }
    @Override public void hideSharedElements(){
      if (sharedElements != null) {
        runOnUiThread(mHandler,new Runnable(){
          @Override public void run(){
            setViewVisibility(sharedElements.values(),View.INVISIBLE);
          }
        }
);
      }
    }
    @Override public void restore(    final Bundle sharedElementState){
      runOnUiThread(mHandler,new Runnable(){
        @Override public void run(){
          mTransitioningViews=null;
          Transition transition=mTransitionManager.getExitTransition(mContentScene);
          transition=transition.clone();
          transition.setEpicenterCallback(epicenterCallback);
          setSharedElementState(sharedElements,sharedElementState);
          setViewVisibility(sharedElements.values(),View.VISIBLE);
          if (mSceneTransitionListener != null) {
            mSceneTransitionListener.sharedElementStart(transition);
            mDecor.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener(){
              @Override public boolean onPreDraw(){
                mDecor.getViewTreeObserver().removeOnPreDrawListener(this);
                mSceneTransitionListener.sharedElementEnd();
                return true;
              }
            }
);
          }
          TransitionManager.beginDelayedTransition(mDecor,transition);
          setViewVisibility(transitioningViews,View.VISIBLE);
          for (          View sharedElement : sharedElements.values()) {
            sharedElement.requestLayout();
          }
        }
      }
);
    }
    @Override public void prepareForRestore(){
      if (mTransitioningViews != null) {
        runOnUiThread(mHandler,new Runnable(){
          @Override public void run(){
            setViewVisibility(mTransitioningViews,View.INVISIBLE);
          }
        }
);
      }
    }
  }
;
  activityOptions.updateSceneTransitionAnimation(exitTransition,sharedElementTransition,sharedElementSource);
}
