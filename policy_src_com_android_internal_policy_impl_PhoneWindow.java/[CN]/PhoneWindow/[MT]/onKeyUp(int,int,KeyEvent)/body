{
  final KeyEvent.DispatcherState dispatcher=mDecor != null ? mDecor.getKeyDispatcherState() : null;
  if (dispatcher != null) {
    dispatcher.handleUpEvent(event);
  }
switch (keyCode) {
case KeyEvent.KEYCODE_VOLUME_UP:
case KeyEvent.KEYCODE_VOLUME_DOWN:
{
      if (!event.isCanceled()) {
        AudioManager audioManager=(AudioManager)getContext().getSystemService(Context.AUDIO_SERVICE);
        if (audioManager != null) {
          audioManager.adjustSuggestedStreamVolume(AudioManager.ADJUST_SAME,mVolumeControlStreamType,AudioManager.FLAG_PLAY_SOUND);
          mVolumeKeyUpTime=SystemClock.uptimeMillis();
        }
      }
      return true;
    }
case KeyEvent.KEYCODE_MENU:
{
    onKeyUpPanel(featureId < 0 ? FEATURE_OPTIONS_PANEL : featureId,event);
    return true;
  }
case KeyEvent.KEYCODE_BACK:
{
  if (featureId < 0)   break;
  if (event.isTracking() && !event.isCanceled()) {
    if (featureId == FEATURE_OPTIONS_PANEL) {
      PanelFeatureState st=getPanelState(featureId,false);
      if (st != null && st.isInExpandedMode) {
        reopenMenu(true);
        return true;
      }
    }
    closePanel(featureId);
    return true;
  }
  break;
}
case KeyEvent.KEYCODE_HEADSETHOOK:
case KeyEvent.KEYCODE_MUTE:
case KeyEvent.KEYCODE_MEDIA_PLAY:
case KeyEvent.KEYCODE_MEDIA_PAUSE:
case KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE:
case KeyEvent.KEYCODE_MEDIA_STOP:
case KeyEvent.KEYCODE_MEDIA_NEXT:
case KeyEvent.KEYCODE_MEDIA_PREVIOUS:
case KeyEvent.KEYCODE_MEDIA_REWIND:
case KeyEvent.KEYCODE_MEDIA_RECORD:
case KeyEvent.KEYCODE_MEDIA_FAST_FORWARD:
{
Intent intent=new Intent(Intent.ACTION_MEDIA_BUTTON,null);
intent.putExtra(Intent.EXTRA_KEY_EVENT,event);
getContext().sendOrderedBroadcast(intent,null);
return true;
}
case KeyEvent.KEYCODE_CAMERA:
{
if (getKeyguardManager().inKeyguardRestrictedInputMode()) {
break;
}
if (event.isTracking() && !event.isCanceled()) {
}
return true;
}
case KeyEvent.KEYCODE_CALL:
{
if (getKeyguardManager().inKeyguardRestrictedInputMode()) {
break;
}
if (event.isTracking() && !event.isCanceled()) {
startCallActivity();
}
return true;
}
case KeyEvent.KEYCODE_SEARCH:
{
if (getKeyguardManager().inKeyguardRestrictedInputMode()) {
break;
}
if (event.isTracking() && !event.isCanceled()) {
launchDefaultSearch();
}
return true;
}
}
return false;
}
