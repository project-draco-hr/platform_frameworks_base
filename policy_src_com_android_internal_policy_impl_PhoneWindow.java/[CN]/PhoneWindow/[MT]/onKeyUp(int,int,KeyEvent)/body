{
  final KeyEvent.DispatcherState dispatcher=mDecor != null ? mDecor.getKeyDispatcherState() : null;
  if (dispatcher != null) {
    dispatcher.handleUpEvent(event);
  }
switch (keyCode) {
case KeyEvent.KEYCODE_VOLUME_UP:
case KeyEvent.KEYCODE_VOLUME_DOWN:
case KeyEvent.KEYCODE_VOLUME_MUTE:
{
      getAudioManager().handleKeyUp(event,mVolumeControlStreamType);
      return true;
    }
case KeyEvent.KEYCODE_MENU:
{
    onKeyUpPanel(featureId < 0 ? FEATURE_OPTIONS_PANEL : featureId,event);
    return true;
  }
case KeyEvent.KEYCODE_BACK:
{
  if (featureId < 0)   break;
  if (event.isTracking() && !event.isCanceled()) {
    if (featureId == FEATURE_OPTIONS_PANEL) {
      PanelFeatureState st=getPanelState(featureId,false);
      if (st != null && st.isInExpandedMode) {
        reopenMenu(true);
        return true;
      }
    }
    closePanel(featureId);
    return true;
  }
  break;
}
case KeyEvent.KEYCODE_SEARCH:
{
if (getKeyguardManager().inKeyguardRestrictedInputMode()) {
  break;
}
if (event.isTracking() && !event.isCanceled()) {
  launchDefaultSearch();
}
return true;
}
}
return false;
}
