{
  TypedArray a=getWindowStyle();
  if (false) {
    System.out.println("From style:");
    String s="Attrs:";
    for (int i=0; i < R.styleable.Window.length; i++) {
      s=s + " " + Integer.toHexString(R.styleable.Window[i])+ "="+ a.getString(i);
    }
    System.out.println(s);
  }
  mIsFloating=a.getBoolean(R.styleable.Window_windowIsFloating,false);
  int flagsToUpdate=(FLAG_LAYOUT_IN_SCREEN | FLAG_LAYOUT_INSET_DECOR) & (~getForcedWindowFlags());
  if (mIsFloating) {
    setLayout(WRAP_CONTENT,WRAP_CONTENT);
    setFlags(0,flagsToUpdate);
  }
 else {
    setFlags(FLAG_LAYOUT_IN_SCREEN | FLAG_LAYOUT_INSET_DECOR,flagsToUpdate);
  }
  if (a.getBoolean(R.styleable.Window_windowNoTitle,false)) {
    requestFeature(FEATURE_NO_TITLE);
  }
 else   if (a.getBoolean(R.styleable.Window_windowActionBar,false)) {
    requestFeature(FEATURE_ACTION_BAR);
  }
  if (a.getBoolean(R.styleable.Window_windowActionBarOverlay,false)) {
    requestFeature(FEATURE_ACTION_BAR_OVERLAY);
  }
  if (a.getBoolean(R.styleable.Window_windowActionModeOverlay,false)) {
    requestFeature(FEATURE_ACTION_MODE_OVERLAY);
  }
  if (a.getBoolean(R.styleable.Window_windowSwipeToDismiss,false)) {
    requestFeature(FEATURE_SWIPE_TO_DISMISS);
  }
  if (a.getBoolean(R.styleable.Window_windowFullscreen,false)) {
    setFlags(FLAG_FULLSCREEN,FLAG_FULLSCREEN & (~getForcedWindowFlags()));
  }
  if (a.getBoolean(R.styleable.Window_windowTranslucentStatus,false)) {
    setFlags(FLAG_TRANSLUCENT_STATUS,FLAG_TRANSLUCENT_STATUS & (~getForcedWindowFlags()));
  }
  if (a.getBoolean(R.styleable.Window_windowTranslucentNavigation,false)) {
    setFlags(FLAG_TRANSLUCENT_NAVIGATION,FLAG_TRANSLUCENT_NAVIGATION & (~getForcedWindowFlags()));
  }
  if (a.getBoolean(R.styleable.Window_windowOverscan,false)) {
    setFlags(FLAG_LAYOUT_IN_OVERSCAN,FLAG_LAYOUT_IN_OVERSCAN & (~getForcedWindowFlags()));
  }
  if (a.getBoolean(R.styleable.Window_windowShowWallpaper,false)) {
    setFlags(FLAG_SHOW_WALLPAPER,FLAG_SHOW_WALLPAPER & (~getForcedWindowFlags()));
  }
  if (a.getBoolean(R.styleable.Window_windowEnableSplitTouch,getContext().getApplicationInfo().targetSdkVersion >= android.os.Build.VERSION_CODES.HONEYCOMB)) {
    setFlags(FLAG_SPLIT_TOUCH,FLAG_SPLIT_TOUCH & (~getForcedWindowFlags()));
  }
  a.getValue(R.styleable.Window_windowMinWidthMajor,mMinWidthMajor);
  a.getValue(R.styleable.Window_windowMinWidthMinor,mMinWidthMinor);
  if (a.hasValue(R.styleable.Window_windowFixedWidthMajor)) {
    if (mFixedWidthMajor == null)     mFixedWidthMajor=new TypedValue();
    a.getValue(R.styleable.Window_windowFixedWidthMajor,mFixedWidthMajor);
  }
  if (a.hasValue(R.styleable.Window_windowFixedWidthMinor)) {
    if (mFixedWidthMinor == null)     mFixedWidthMinor=new TypedValue();
    a.getValue(R.styleable.Window_windowFixedWidthMinor,mFixedWidthMinor);
  }
  if (a.hasValue(R.styleable.Window_windowFixedHeightMajor)) {
    if (mFixedHeightMajor == null)     mFixedHeightMajor=new TypedValue();
    a.getValue(R.styleable.Window_windowFixedHeightMajor,mFixedHeightMajor);
  }
  if (a.hasValue(R.styleable.Window_windowFixedHeightMinor)) {
    if (mFixedHeightMinor == null)     mFixedHeightMinor=new TypedValue();
    a.getValue(R.styleable.Window_windowFixedHeightMinor,mFixedHeightMinor);
  }
  if (a.getBoolean(R.styleable.Window_windowContentTransitions,false)) {
    requestFeature(FEATURE_CONTENT_TRANSITIONS);
  }
  if (a.getBoolean(R.styleable.Window_windowActivityTransitions,false)) {
    requestFeature(FEATURE_ACTIVITY_TRANSITIONS);
  }
  final WindowManager windowService=(WindowManager)getContext().getSystemService(Context.WINDOW_SERVICE);
  if (windowService != null) {
    final Display display=windowService.getDefaultDisplay();
    final boolean shouldUseBottomOutset=display.getDisplayId() == Display.DEFAULT_DISPLAY || (getForcedWindowFlags() & FLAG_FULLSCREEN) != 0;
    if (shouldUseBottomOutset && a.hasValue(R.styleable.Window_windowOutsetBottom)) {
      if (mOutsetBottom == null)       mOutsetBottom=new TypedValue();
      a.getValue(R.styleable.Window_windowOutsetBottom,mOutsetBottom);
    }
  }
  final Context context=getContext();
  final int targetSdk=context.getApplicationInfo().targetSdkVersion;
  final boolean targetPreHoneycomb=targetSdk < android.os.Build.VERSION_CODES.HONEYCOMB;
  final boolean targetPreIcs=targetSdk < android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH;
  final boolean targetPreL=targetSdk < android.os.Build.VERSION_CODES.L;
  final boolean targetHcNeedsOptions=context.getResources().getBoolean(R.bool.target_honeycomb_needs_options_menu);
  final boolean noActionBar=!hasFeature(FEATURE_ACTION_BAR) || hasFeature(FEATURE_NO_TITLE);
  if (targetPreHoneycomb || (targetPreIcs && targetHcNeedsOptions && noActionBar)) {
    addFlags(WindowManager.LayoutParams.FLAG_NEEDS_MENU_KEY);
  }
 else {
    clearFlags(WindowManager.LayoutParams.FLAG_NEEDS_MENU_KEY);
  }
  if (!mIsFloating && ActivityManager.isHighEndGfx()) {
    if (!targetPreL && a.getBoolean(R.styleable.Window_windowDrawsSystemBarBackgrounds,false)) {
      setFlags(FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS,FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS & ~getForcedWindowFlags());
    }
  }
  if (!mForcedStatusBarColor) {
    mStatusBarColor=a.getColor(R.styleable.Window_statusBarColor,0xFF000000);
  }
  if (!mForcedNavigationBarColor) {
    mNavigationBarColor=a.getColor(R.styleable.Window_navigationBarColor,0xFF000000);
  }
  if (mAlwaysReadCloseOnTouchAttr || getContext().getApplicationInfo().targetSdkVersion >= android.os.Build.VERSION_CODES.HONEYCOMB) {
    if (a.getBoolean(R.styleable.Window_windowCloseOnTouchOutside,false)) {
      setCloseOnTouchOutsideIfNotSet(true);
    }
  }
  WindowManager.LayoutParams params=getAttributes();
  if (!hasSoftInputMode()) {
    params.softInputMode=a.getInt(R.styleable.Window_windowSoftInputMode,params.softInputMode);
  }
  if (a.getBoolean(R.styleable.Window_backgroundDimEnabled,mIsFloating)) {
    if ((getForcedWindowFlags() & WindowManager.LayoutParams.FLAG_DIM_BEHIND) == 0) {
      params.flags|=WindowManager.LayoutParams.FLAG_DIM_BEHIND;
    }
    if (!haveDimAmount()) {
      params.dimAmount=a.getFloat(android.R.styleable.Window_backgroundDimAmount,0.5f);
    }
  }
  if (params.windowAnimations == 0) {
    params.windowAnimations=a.getResourceId(R.styleable.Window_windowAnimationStyle,0);
  }
  if (getContainer() == null) {
    if (mBackgroundDrawable == null) {
      if (mBackgroundResource == 0) {
        mBackgroundResource=a.getResourceId(R.styleable.Window_windowBackground,0);
      }
      if (mFrameResource == 0) {
        mFrameResource=a.getResourceId(R.styleable.Window_windowFrame,0);
      }
      mBackgroundFallbackResource=a.getResourceId(R.styleable.Window_windowBackgroundFallback,0);
      if (false) {
        System.out.println("Background: " + Integer.toHexString(mBackgroundResource) + " Frame: "+ Integer.toHexString(mFrameResource));
      }
    }
    mElevation=a.getDimension(R.styleable.Window_windowElevation,0);
    mClipToOutline=a.getBoolean(R.styleable.Window_windowClipToOutline,false);
    mTextColor=a.getColor(R.styleable.Window_textColor,Color.TRANSPARENT);
  }
  int layoutResource;
  int features=getLocalFeatures();
  if ((features & (1 << FEATURE_SWIPE_TO_DISMISS)) != 0) {
    layoutResource=R.layout.screen_swipe_dismiss;
  }
 else   if ((features & ((1 << FEATURE_LEFT_ICON) | (1 << FEATURE_RIGHT_ICON))) != 0) {
    if (mIsFloating) {
      TypedValue res=new TypedValue();
      getContext().getTheme().resolveAttribute(R.attr.dialogTitleIconsDecorLayout,res,true);
      layoutResource=res.resourceId;
    }
 else {
      layoutResource=R.layout.screen_title_icons;
    }
    removeFeature(FEATURE_ACTION_BAR);
  }
 else   if ((features & ((1 << FEATURE_PROGRESS) | (1 << FEATURE_INDETERMINATE_PROGRESS))) != 0 && (features & (1 << FEATURE_ACTION_BAR)) == 0) {
    layoutResource=R.layout.screen_progress;
  }
 else   if ((features & (1 << FEATURE_CUSTOM_TITLE)) != 0) {
    if (mIsFloating) {
      TypedValue res=new TypedValue();
      getContext().getTheme().resolveAttribute(R.attr.dialogCustomTitleDecorLayout,res,true);
      layoutResource=res.resourceId;
    }
 else {
      layoutResource=R.layout.screen_custom_title;
    }
    removeFeature(FEATURE_ACTION_BAR);
  }
 else   if ((features & (1 << FEATURE_NO_TITLE)) == 0) {
    if (mIsFloating) {
      TypedValue res=new TypedValue();
      getContext().getTheme().resolveAttribute(R.attr.dialogTitleDecorLayout,res,true);
      layoutResource=res.resourceId;
    }
 else     if ((features & (1 << FEATURE_ACTION_BAR)) != 0) {
      layoutResource=a.getResourceId(R.styleable.Window_windowActionBarFullscreenDecorLayout,R.layout.screen_action_bar);
    }
 else {
      layoutResource=R.layout.screen_title;
    }
  }
 else   if ((features & (1 << FEATURE_ACTION_MODE_OVERLAY)) != 0) {
    layoutResource=R.layout.screen_simple_overlay_action_mode;
  }
 else {
    layoutResource=R.layout.screen_simple;
  }
  mDecor.startChanging();
  View in=mLayoutInflater.inflate(layoutResource,null);
  decor.addView(in,new ViewGroup.LayoutParams(MATCH_PARENT,MATCH_PARENT));
  mContentRoot=(ViewGroup)in;
  ViewGroup contentParent=(ViewGroup)findViewById(ID_ANDROID_CONTENT);
  if (contentParent == null) {
    throw new RuntimeException("Window couldn't find content container view");
  }
  if ((features & (1 << FEATURE_INDETERMINATE_PROGRESS)) != 0) {
    ProgressBar progress=getCircularProgressBar(false);
    if (progress != null) {
      progress.setIndeterminate(true);
    }
  }
  if ((features & (1 << FEATURE_SWIPE_TO_DISMISS)) != 0) {
    registerSwipeCallbacks();
  }
  if (getContainer() == null) {
    final Drawable background;
    if (mBackgroundResource != 0) {
      background=getContext().getDrawable(mBackgroundResource);
    }
 else {
      background=mBackgroundDrawable;
    }
    mDecor.setWindowBackground(background);
    final Drawable frame;
    if (mFrameResource != 0) {
      frame=getContext().getDrawable(mFrameResource);
    }
 else {
      frame=null;
    }
    mDecor.setWindowFrame(frame);
    mDecor.setElevation(mElevation);
    mDecor.setClipToOutline(mClipToOutline);
    if (mTitle != null) {
      setTitle(mTitle);
    }
    if (mTitleColor == 0) {
      mTitleColor=mTextColor;
    }
    setTitleColor(mTitleColor);
  }
  mDecor.finishChanging();
  return contentParent;
}
