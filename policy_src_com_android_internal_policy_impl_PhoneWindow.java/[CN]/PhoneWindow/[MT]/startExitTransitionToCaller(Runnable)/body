{
  Transition transition;
  if (mContentScene == null || mTransitionManager == null || mActivityOptions == null || (transition=mTransitionManager.getEnterTransition(mContentScene)) == null) {
    onTransitionEnd.run();
    return;
  }
  if (mAllowExitOverlap) {
    TransitionSet transitionSet=new TransitionSet();
    transitionSet.addTransition(transition);
    Fade fade=new Fade();
    transitionSet.addTransition(fade);
    transition=transitionSet;
  }
  final ArrayMap<String,View> sharedElements=new ArrayMap<String,View>();
  mapSharedElements(sharedElements);
  final Bundle sharedElementArgs=new Bundle();
  captureTerminalSharedElementState(sharedElements,sharedElementArgs);
  final ArrayList<View> transitioningViews=new ArrayList<View>();
  mDecor.captureTransitioningViews(transitioningViews);
  transitioningViews.removeAll(sharedElements.values());
  mSceneTransitionListener.convertToTranslucent();
  ExitSceneBack exitScene=new ExitSceneBack(onTransitionEnd,sharedElementArgs,sharedElements.values());
  exitScene.start(transition);
  mTransitionManager.beginDelayedTransition(mDecor,transition);
  setViewVisibility(transitioningViews,View.INVISIBLE);
}
