{
  final Bundle sharedElementArgs=new Bundle();
  captureTerminalSharedElementState(sharedElements,sharedElementArgs);
  ActivityOptions.SharedElementSource sharedElementSource=new ActivityOptions.SharedElementSource(){
    @Override public Bundle getSharedElementExitState(){
      return sharedElementArgs;
    }
    @Override public void acceptedSharedElements(    ArrayList<String> sharedElementNames){
      if (sharedElementNames.size() == sharedElements.size()) {
        return;
      }
      Transition transition=mTransitionManager.getExitTransition(mContentScene).clone();
      TransitionManager.beginDelayedTransition(mDecor,transition);
      for (      String name : sharedElements.keySet()) {
        if (!sharedElementNames.contains(name)) {
          sharedElements.get(name).setVisibility(View.INVISIBLE);
        }
      }
      sharedElements.keySet().retainAll(sharedElementNames);
    }
    @Override public void hideSharedElements(){
      if (sharedElements != null) {
        setViewVisibility(sharedElements.values(),View.INVISIBLE);
      }
    }
  }
;
  activityOptions.updateSceneTransitionAnimation(exitTransition,sharedElementTransition,sharedElementSource);
}
