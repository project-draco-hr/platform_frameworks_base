{
  boolean wantMini=(kind == Images.Thumbnails.MINI_KIND);
  int targetSize=wantMini ? TARGET_SIZE_MINI_THUMBNAIL : TARGET_SIZE_MICRO_THUMBNAIL;
  int maxPixels=wantMini ? MAX_NUM_PIXELS_THUMBNAIL : MAX_NUM_PIXELS_MICRO_THUMBNAIL;
  SizedThumbnailBitmap sizedThumbnailBitmap=new SizedThumbnailBitmap();
  Bitmap bitmap=null;
  MediaFileType fileType=MediaFile.getFileType(filePath);
  if (fileType != null && fileType.fileType == MediaFile.FILE_TYPE_JPEG) {
    createThumbnailFromEXIF(filePath,targetSize,maxPixels,sizedThumbnailBitmap);
    bitmap=sizedThumbnailBitmap.mBitmap;
  }
  if (bitmap == null) {
    FileInputStream stream=null;
    try {
      stream=new FileInputStream(filePath);
      FileDescriptor fd=stream.getFD();
      BitmapFactory.Options options=new BitmapFactory.Options();
      options.inSampleSize=1;
      options.inJustDecodeBounds=true;
      BitmapFactory.decodeFileDescriptor(fd,null,options);
      if (options.mCancel || options.outWidth == -1 || options.outHeight == -1) {
        return null;
      }
      options.inSampleSize=computeSampleSize(options,targetSize,maxPixels);
      options.inJustDecodeBounds=false;
      options.inDither=false;
      options.inPreferredConfig=Bitmap.Config.ARGB_8888;
      bitmap=BitmapFactory.decodeFileDescriptor(fd,null,options);
    }
 catch (    IOException ex) {
      Log.e(TAG,"",ex);
    }
catch (    OutOfMemoryError oom) {
      Log.e(TAG,"Unable to decode file " + filePath + ". OutOfMemoryError.",oom);
    }
 finally {
      try {
        if (stream != null) {
          stream.close();
        }
      }
 catch (      IOException ex) {
        Log.e(TAG,"",ex);
      }
    }
  }
  if (kind == Images.Thumbnails.MICRO_KIND) {
    bitmap=extractThumbnail(bitmap,TARGET_SIZE_MICRO_THUMBNAIL,TARGET_SIZE_MICRO_THUMBNAIL,OPTIONS_RECYCLE_INPUT);
  }
  return bitmap;
}
