{
  super(context);
  mCreationHardKeyboardHidden=configuration.hardKeyboardHidden;
  mCreationOrientation=configuration.orientation;
  mUpdateMonitor=updateMonitor;
  mCallback=callback;
  mLockPatternUtils=lockPatternUtils;
  LayoutInflater layoutInflater=LayoutInflater.from(context);
  if (mCreationOrientation != Configuration.ORIENTATION_LANDSCAPE) {
    layoutInflater.inflate(R.layout.keyguard_screen_password_portrait,this,true);
  }
 else {
    layoutInflater.inflate(R.layout.keyguard_screen_password_landscape,this,true);
  }
  mStatusViewManager=new KeyguardStatusViewManager(this,mUpdateMonitor,mLockPatternUtils,mCallback,true);
  final int quality=lockPatternUtils.getKeyguardStoredPasswordQuality();
  mIsAlpha=DevicePolicyManager.PASSWORD_QUALITY_ALPHABETIC == quality || DevicePolicyManager.PASSWORD_QUALITY_ALPHANUMERIC == quality || DevicePolicyManager.PASSWORD_QUALITY_COMPLEX == quality;
  mKeyboardView=(PasswordEntryKeyboardView)findViewById(R.id.keyboard);
  mPasswordEntry=(EditText)findViewById(R.id.passwordEntry);
  mPasswordEntry.setOnEditorActionListener(this);
  mKeyboardHelper=new PasswordEntryKeyboardHelper(context,mKeyboardView,this,false);
  if (mIsAlpha) {
    mKeyboardHelper.setKeyboardMode(PasswordEntryKeyboardHelper.KEYBOARD_MODE_ALPHA);
    mKeyboardView.setVisibility(View.GONE);
  }
 else {
    mKeyboardHelper.setKeyboardMode(PasswordEntryKeyboardHelper.KEYBOARD_MODE_NUMERIC);
    mKeyboardView.setVisibility(mCreationHardKeyboardHidden == Configuration.HARDKEYBOARDHIDDEN_NO ? View.INVISIBLE : View.VISIBLE);
  }
  mPasswordEntry.requestFocus();
  if (mIsAlpha) {
    mPasswordEntry.setKeyListener(TextKeyListener.getInstance());
    mPasswordEntry.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);
  }
 else {
    mPasswordEntry.setKeyListener(DigitsKeyListener.getInstance());
    mPasswordEntry.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_VARIATION_PASSWORD);
  }
  mKeyboardHelper.setVibratePattern(mLockPatternUtils.isTactileFeedbackEnabled() ? com.android.internal.R.array.config_virtualKeyVibePattern : 0);
  mPasswordEntry.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      mCallback.pokeWakelock();
    }
  }
);
  mPasswordEntry.addTextChangedListener(new TextWatcher(){
    public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    public void afterTextChanged(    Editable s){
      if (!mResuming) {
        mCallback.pokeWakelock();
      }
    }
  }
);
  View switchImeButton=findViewById(R.id.switch_ime_button);
  final InputMethodManager imm=(InputMethodManager)getContext().getSystemService(Context.INPUT_METHOD_SERVICE);
  if (mIsAlpha && switchImeButton != null && hasMultipleEnabledIMEsOrSubtypes(imm,false)) {
    switchImeButton.setVisibility(View.VISIBLE);
    switchImeButton.setOnClickListener(new OnClickListener(){
      public void onClick(      View v){
        mCallback.pokeWakelock();
        imm.showInputMethodPicker();
      }
    }
);
  }
}
