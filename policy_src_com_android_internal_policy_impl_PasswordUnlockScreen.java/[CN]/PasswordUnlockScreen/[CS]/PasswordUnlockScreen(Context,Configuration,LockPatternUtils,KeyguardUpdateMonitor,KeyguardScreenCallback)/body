{
  super(context);
  mCreationHardKeyboardHidden=configuration.hardKeyboardHidden;
  mCreationOrientation=configuration.orientation;
  mUpdateMonitor=updateMonitor;
  mCallback=callback;
  mLockPatternUtils=lockPatternUtils;
  LayoutInflater layoutInflater=LayoutInflater.from(context);
  if (mCreationOrientation != Configuration.ORIENTATION_LANDSCAPE) {
    layoutInflater.inflate(R.layout.keyguard_screen_password_portrait,this,true);
  }
 else {
    layoutInflater.inflate(R.layout.keyguard_screen_password_landscape,this,true);
  }
  mStatusView=new StatusView(this,mUpdateMonitor,mLockPatternUtils);
  final int quality=lockPatternUtils.getKeyguardStoredPasswordQuality();
  mIsAlpha=DevicePolicyManager.PASSWORD_QUALITY_ALPHABETIC == quality || DevicePolicyManager.PASSWORD_QUALITY_ALPHANUMERIC == quality || DevicePolicyManager.PASSWORD_QUALITY_COMPLEX == quality;
  final boolean isPhysicalKbShowing=false;
  mKeyboardView=(PasswordEntryKeyboardView)findViewById(R.id.keyboard);
  mKeyboardViewAlpha=(PasswordEntryKeyboardView)findViewById(R.id.keyboardAlpha);
  mPasswordEntry=(EditText)findViewById(R.id.passwordEntry);
  mPasswordEntry.setOnEditorActionListener(this);
  mPasswordEntry.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      if (mIsAlpha && !isPhysicalKbShowing && !mUseSystemIME) {
        final boolean visible=mKeyboardViewAlpha.getVisibility() == View.VISIBLE;
        mKeyboardViewAlpha.setVisibility(visible ? View.GONE : View.VISIBLE);
      }
      mCallback.pokeWakelock();
    }
  }
);
  if (!mIsAlpha) {
    mPasswordEntry.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_VARIATION_PASSWORD);
  }
 else {
    mPasswordEntry.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);
  }
  mEmergencyCallButton=(Button)findViewById(R.id.emergencyCall);
  mEmergencyCallButton.setOnClickListener(this);
  mLockPatternUtils.updateEmergencyCallButtonState(mEmergencyCallButton);
  mKeyboardHelper=new PasswordEntryKeyboardHelper(context,mKeyboardView,this,false);
  if (mKeyboardViewAlpha == null || !mIsAlpha) {
    mKeyboardHelper.setKeyboardMode(mIsAlpha ? PasswordEntryKeyboardHelper.KEYBOARD_MODE_ALPHA : PasswordEntryKeyboardHelper.KEYBOARD_MODE_NUMERIC);
    mKeyboardView.setVisibility(isPhysicalKbShowing ? View.INVISIBLE : View.VISIBLE);
  }
 else {
    mKeyboardHelperAlpha=new PasswordEntryKeyboardHelper(context,mKeyboardViewAlpha,this,false);
    mKeyboardHelper.setKeyboardMode(PasswordEntryKeyboardHelper.KEYBOARD_MODE_NUMERIC);
    mKeyboardHelperAlpha.setKeyboardMode(PasswordEntryKeyboardHelper.KEYBOARD_MODE_ALPHA);
    mKeyboardView.setVisibility(View.GONE);
    mPasswordEntry.setWidth(mKeyboardViewAlpha.getLayoutParams().width);
  }
  mPasswordEntry.requestFocus();
  if (mIsAlpha) {
    mPasswordEntry.setKeyListener(TextKeyListener.getInstance());
  }
 else {
    mPasswordEntry.setKeyListener(DigitsKeyListener.getInstance());
  }
  mKeyboardHelper.setVibratePattern(mLockPatternUtils.isTactileFeedbackEnabled() ? com.android.internal.R.array.config_virtualKeyVibePattern : 0);
  if (mKeyboardHelperAlpha != null) {
    mKeyboardHelperAlpha.setVibratePattern(mLockPatternUtils.isTactileFeedbackEnabled() ? com.android.internal.R.array.config_virtualKeyVibePattern : 0);
  }
  mStatusView.setCarrierText(LockScreen.getCarrierString(mUpdateMonitor.getTelephonyPlmn(),mUpdateMonitor.getTelephonySpn()));
  mUpdateMonitor.registerInfoCallback(this);
  resetStatusInfo();
}
