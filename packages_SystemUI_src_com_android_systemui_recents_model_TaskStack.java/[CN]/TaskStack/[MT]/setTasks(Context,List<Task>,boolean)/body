{
  ArrayMap<Task.TaskKey,Task> currentTasksMap=createTaskKeyMapFromList(mRawTaskList);
  ArrayMap<Task.TaskKey,Task> newTasksMap=createTaskKeyMapFromList(tasks);
  ArrayList<Task> addedTasks=new ArrayList<>();
  ArrayList<Task> removedTasks=new ArrayList<>();
  ArrayList<Task> allTasks=new ArrayList<>();
  if (mCb == null) {
    notifyStackChanges=false;
  }
  int taskCount=mRawTaskList.size();
  for (int i=taskCount - 1; i >= 0; i--) {
    Task task=mRawTaskList.get(i);
    if (!newTasksMap.containsKey(task.key)) {
      if (notifyStackChanges) {
        removedTasks.add(task);
      }
    }
    task.setGroup(null);
  }
  taskCount=tasks.size();
  for (int i=0; i < taskCount; i++) {
    Task newTask=tasks.get(i);
    Task currentTask=currentTasksMap.get(newTask.key);
    if (currentTask == null && notifyStackChanges) {
      addedTasks.add(newTask);
    }
 else     if (currentTask != null) {
      currentTask.copyFrom(newTask);
      newTask=currentTask;
    }
    allTasks.add(newTask);
  }
  for (int i=allTasks.size() - 1; i >= 0; i--) {
    allTasks.get(i).temporarySortIndexInStack=i;
  }
  Collections.sort(allTasks,FREEFORM_COMPARATOR);
  mStackTaskList.set(allTasks);
  mRawTaskList=allTasks;
  createAffiliatedGroupings(context);
  int removedTaskCount=removedTasks.size();
  Task newFrontMostTask=getStackFrontMostTask(false);
  for (int i=0; i < removedTaskCount; i++) {
    mCb.onStackTaskRemoved(this,removedTasks.get(i),newFrontMostTask,AnimationProps.IMMEDIATE,false);
  }
  int addedTaskCount=addedTasks.size();
  for (int i=0; i < addedTaskCount; i++) {
    mCb.onStackTaskAdded(this,addedTasks.get(i));
  }
  if (notifyStackChanges) {
    mCb.onStackTasksUpdated(this);
  }
}
