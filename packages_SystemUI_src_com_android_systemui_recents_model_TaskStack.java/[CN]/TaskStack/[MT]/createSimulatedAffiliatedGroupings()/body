{
  if (Constants.DebugFlags.App.EnableSimulatedTaskGroups) {
    HashMap<Task.TaskKey,Task> taskMap=new HashMap<Task.TaskKey,Task>();
    ArrayList<Task> tasks=mTaskList.getTasks();
    Collections.sort(tasks,new Comparator<Task>(){
      @Override public int compare(      Task task,      Task task2){
        return (int)(task.key.firstActiveTime - task2.key.firstActiveTime);
      }
    }
);
    NamedCounter counter=new NamedCounter("task-group","");
    int taskCount=tasks.size();
    String prevPackage="";
    String prevAffiliation="";
    Random r=new Random();
    int groupCountDown=1000;
    for (int i=0; i < taskCount; i++) {
      Task t=tasks.get(i);
      String packageName=t.key.baseIntent.getComponent().getPackageName();
      packageName="pkg";
      TaskGrouping group;
      if (packageName.equals(prevPackage) && groupCountDown > 0) {
        group=getGroupWithAffiliation(prevAffiliation);
        groupCountDown--;
      }
 else {
        String affiliation=counter.nextName();
        group=new TaskGrouping(affiliation);
        addGroup(group);
        prevAffiliation=affiliation;
        prevPackage=packageName;
        groupCountDown=1000;
      }
      group.addTask(t);
      taskMap.put(t.key,t);
    }
    Collections.sort(mGroups,new Comparator<TaskGrouping>(){
      @Override public int compare(      TaskGrouping taskGrouping,      TaskGrouping taskGrouping2){
        return (int)(taskGrouping.latestActiveTimeInGroup - taskGrouping2.latestActiveTimeInGroup);
      }
    }
);
    int taskIndex=0;
    int groupCount=mGroups.size();
    for (int i=0; i < groupCount; i++) {
      TaskGrouping group=mGroups.get(i);
      Collections.sort(group.mTasks,new Comparator<Task.TaskKey>(){
        @Override public int compare(        Task.TaskKey taskKey,        Task.TaskKey taskKey2){
          return (int)(taskKey.firstActiveTime - taskKey2.firstActiveTime);
        }
      }
);
      ArrayList<Task.TaskKey> groupTasks=group.mTasks;
      int groupTaskCount=groupTasks.size();
      for (int j=0; j < groupTaskCount; j++) {
        tasks.set(taskIndex,taskMap.get(groupTasks.get(j)));
        taskIndex++;
      }
    }
    mTaskList.set(tasks);
  }
 else {
    NamedCounter counter=new NamedCounter("task-group","");
    ArrayList<Task> tasks=mTaskList.getTasks();
    int taskCount=tasks.size();
    for (int i=0; i < taskCount; i++) {
      Task t=tasks.get(i);
      TaskGrouping group=new TaskGrouping(counter.nextName());
      addGroup(group);
      group.addTask(t);
    }
  }
}
