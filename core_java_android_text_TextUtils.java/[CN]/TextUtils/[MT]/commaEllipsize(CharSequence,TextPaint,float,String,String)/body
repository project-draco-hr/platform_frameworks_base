{
  int len=text.length();
  char[] buf=new char[len];
  TextUtils.getChars(text,0,len,buf,0);
  int commaCount=0;
  for (int i=0; i < len; i++) {
    if (buf[i] == ',') {
      commaCount++;
    }
  }
  float[] wid;
  if (text instanceof Spanned) {
    Spanned sp=(Spanned)text;
    TextPaint temppaint=new TextPaint();
    wid=new float[len * 2];
    int next;
    for (int i=0; i < len; i=next) {
      next=sp.nextSpanTransition(i,len,MetricAffectingSpan.class);
      Styled.getTextWidths(p,temppaint,sp,i,next,wid,null);
      System.arraycopy(wid,0,wid,len + i,next - i);
    }
    System.arraycopy(wid,len,wid,0,len);
  }
 else {
    wid=new float[len];
    p.getTextWidths(text,0,len,wid);
  }
  int ok=0;
  int okRemaining=commaCount + 1;
  String okFormat="";
  int w=0;
  int count=0;
  for (int i=0; i < len; i++) {
    w+=wid[i];
    if (buf[i] == ',') {
      count++;
      int remaining=commaCount - count + 1;
      float moreWid;
      String format;
      if (remaining == 1) {
        format=" " + oneMore;
      }
 else {
        format=" " + String.format(more,remaining);
      }
      moreWid=p.measureText(format);
      if (w + moreWid <= avail) {
        ok=i + 1;
        okRemaining=remaining;
        okFormat=format;
      }
    }
  }
  if (w <= avail) {
    return text;
  }
 else {
    SpannableStringBuilder out=new SpannableStringBuilder(okFormat);
    out.insert(0,text,0,ok);
    return out;
  }
}
