{
  runAction(new Action(ACTION_QUEUE_SYNTHESIZE_TO_FILE){
    @Override public void run(    ITextToSpeechService service) throws RemoteException {
      RequestCallbacks c=mDefaultRequestCallbacks;
      if (callbacks != null) {
        c=callbacks;
      }
      int addCallbackStatus=addCallback(utteranceId,c);
      if (addCallbackStatus != Status.SUCCESS) {
        c.onSynthesisFailure(utteranceId,Status.ERROR_INVALID_REQUEST);
        return;
      }
      ParcelFileDescriptor fileDescriptor=null;
      try {
        if (outputFile.exists() && !outputFile.canWrite()) {
          Log.e(TAG,"No permissions to write to " + outputFile);
          removeCallbackAndErr(utteranceId.toUniqueString(),Status.ERROR_OUTPUT);
          return;
        }
        fileDescriptor=ParcelFileDescriptor.open(outputFile,ParcelFileDescriptor.MODE_WRITE_ONLY | ParcelFileDescriptor.MODE_CREATE | ParcelFileDescriptor.MODE_TRUNCATE);
        int queueResult=service.synthesizeToFileDescriptorV2(getCallerIdentity(),fileDescriptor,new SynthesisRequestV2(markup,utteranceId.toUniqueString(),config));
        fileDescriptor.close();
        if (queueResult != Status.SUCCESS) {
          removeCallbackAndErr(utteranceId.toUniqueString(),queueResult);
        }
      }
 catch (      FileNotFoundException e) {
        Log.e(TAG,"Opening file " + outputFile + " failed",e);
        removeCallbackAndErr(utteranceId.toUniqueString(),Status.ERROR_OUTPUT);
      }
catch (      IOException e) {
        Log.e(TAG,"Closing file " + outputFile + " failed",e);
        removeCallbackAndErr(utteranceId.toUniqueString(),Status.ERROR_OUTPUT);
      }
    }
  }
);
}
