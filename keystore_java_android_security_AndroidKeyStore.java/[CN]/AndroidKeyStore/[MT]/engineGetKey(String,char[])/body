{
  if (isPrivateKeyEntry(alias)) {
    final OpenSSLEngine engine=OpenSSLEngine.getInstance("keystore");
    try {
      return engine.getPrivateKeyById(Credentials.USER_PRIVATE_KEY + alias);
    }
 catch (    InvalidKeyException e) {
      UnrecoverableKeyException t=new UnrecoverableKeyException("Can't get key");
      t.initCause(e);
      throw t;
    }
  }
 else   if (isSecretKeyEntry(alias)) {
    KeyCharacteristics keyCharacteristics=new KeyCharacteristics();
    String keyAliasInKeystore=Credentials.USER_SECRET_KEY + alias;
    int errorCode=mKeyStore.getKeyCharacteristics(keyAliasInKeystore,null,null,keyCharacteristics);
    if ((errorCode != KeymasterDefs.KM_ERROR_OK) && (errorCode != android.security.KeyStore.NO_ERROR)) {
      throw new UnrecoverableKeyException("Failed to load information about key." + " Error code: " + errorCode);
    }
    int keymasterAlgorithm=keyCharacteristics.hwEnforced.getInt(KeymasterDefs.KM_TAG_ALGORITHM,-1);
    if (keymasterAlgorithm == -1) {
      keymasterAlgorithm=keyCharacteristics.swEnforced.getInt(KeymasterDefs.KM_TAG_ALGORITHM,-1);
    }
    if (keymasterAlgorithm == -1) {
      throw new UnrecoverableKeyException("Key algorithm unknown");
    }
    int keymasterDigest=keyCharacteristics.hwEnforced.getInt(KeymasterDefs.KM_TAG_DIGEST,-1);
    if (keymasterDigest == -1) {
      keymasterDigest=keyCharacteristics.swEnforced.getInt(KeymasterDefs.KM_TAG_DIGEST,-1);
    }
    String keyAlgorithmString;
    try {
      keyAlgorithmString=KeymasterUtils.getJcaSecretKeyAlgorithm(keymasterAlgorithm,keymasterDigest);
    }
 catch (    IllegalArgumentException e) {
      throw (UnrecoverableKeyException)new UnrecoverableKeyException("Unsupported secret key type").initCause(e);
    }
    return new KeyStoreSecretKey(keyAliasInKeystore,keyAlgorithmString);
  }
  return null;
}
