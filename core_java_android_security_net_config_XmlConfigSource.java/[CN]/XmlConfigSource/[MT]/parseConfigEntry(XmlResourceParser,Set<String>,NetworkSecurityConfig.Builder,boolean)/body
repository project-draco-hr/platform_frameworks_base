{
  List<Pair<NetworkSecurityConfig.Builder,Set<Domain>>> builders=new ArrayList<>();
  NetworkSecurityConfig.Builder builder=new NetworkSecurityConfig.Builder();
  builder.setParent(parentBuilder);
  Set<Domain> domains=new ArraySet<>();
  boolean seenPinSet=false;
  boolean seenTrustAnchors=false;
  String configName=parser.getName();
  int outerDepth=parser.getDepth();
  builders.add(new Pair<>(builder,domains));
  for (int i=0; i < parser.getAttributeCount(); i++) {
    String name=parser.getAttributeName(i);
    if ("hstsEnforced".equals(name)) {
      builder.setHstsEnforced(parser.getAttributeBooleanValue(i,NetworkSecurityConfig.DEFAULT_HSTS_ENFORCED));
    }
 else     if ("cleartextTrafficPermitted".equals(name)) {
      builder.setCleartextTrafficPermitted(parser.getAttributeBooleanValue(i,NetworkSecurityConfig.DEFAULT_CLEARTEXT_TRAFFIC_PERMITTED));
    }
  }
  while (XmlUtils.nextElementWithin(parser,outerDepth)) {
    String tagName=parser.getName();
    if ("domain".equals(tagName)) {
      if (baseConfig) {
        throw new ParserException(parser,"domain element not allowed in base-config");
      }
      Domain domain=parseDomain(parser,seenDomains);
      domains.add(domain);
    }
 else     if ("trust-anchors".equals(tagName)) {
      if (seenTrustAnchors) {
        throw new ParserException(parser,"Multiple trust-anchor elements not allowed");
      }
      builder.addCertificatesEntryRefs(parseTrustAnchors(parser));
      seenTrustAnchors=true;
    }
 else     if ("pin-set".equals(tagName)) {
      if (baseConfig) {
        throw new ParserException(parser,"pin-set element not allowed in base-config");
      }
      if (seenPinSet) {
        throw new ParserException(parser,"Multiple pin-set elements not allowed");
      }
      builder.setPinSet(parsePinSet(parser));
      seenPinSet=true;
    }
 else     if ("domain-config".equals(tagName)) {
      if (baseConfig) {
        throw new ParserException(parser,"Nested domain-config not allowed in base-config");
      }
      builders.addAll(parseConfigEntry(parser,seenDomains,builder,false));
    }
 else {
      XmlUtils.skipCurrentTag(parser);
    }
  }
  if (!baseConfig && domains.isEmpty()) {
    throw new ParserException(parser,"No domain elements in domain-config");
  }
  return builders;
}
