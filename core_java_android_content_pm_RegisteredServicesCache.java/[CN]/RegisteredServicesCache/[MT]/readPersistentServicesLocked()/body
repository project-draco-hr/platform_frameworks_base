{
  mUserServices.clear();
  if (mSerializerAndParser == null) {
    return;
  }
  FileInputStream fis=null;
  try {
    mPersistentServicesFileDidNotExist=!mPersistentServicesFile.getBaseFile().exists();
    if (mPersistentServicesFileDidNotExist) {
      return;
    }
    fis=mPersistentServicesFile.openRead();
    XmlPullParser parser=Xml.newPullParser();
    parser.setInput(fis,null);
    int eventType=parser.getEventType();
    while (eventType != XmlPullParser.START_TAG && eventType != XmlPullParser.END_DOCUMENT) {
      eventType=parser.next();
    }
    String tagName=parser.getName();
    if ("services".equals(tagName)) {
      eventType=parser.next();
      do {
        if (eventType == XmlPullParser.START_TAG && parser.getDepth() == 2) {
          tagName=parser.getName();
          if ("service".equals(tagName)) {
            V service=mSerializerAndParser.createFromXml(parser);
            if (service == null) {
              break;
            }
            String uidString=parser.getAttributeValue(null,"uid");
            final int uid=Integer.parseInt(uidString);
            final int userId=UserHandle.getUserId(uid);
            final UserServices<V> user=findOrCreateUserLocked(userId);
            user.persistentServices.put(service,uid);
          }
        }
        eventType=parser.next();
      }
 while (eventType != XmlPullParser.END_DOCUMENT);
    }
  }
 catch (  Exception e) {
    Log.w(TAG,"Error reading persistent services, starting from scratch",e);
  }
 finally {
    IoUtils.closeQuietly(fis);
  }
}
