{
  boolean animateThumbToNewAngle=false;
  int totalDeltaAngle;
  totalDeltaAngle=getDelta(mPreviousCallbackAngle,touchAngle,useDirection,ccw);
  int fuzzyCallbackThreshold=(int)(mCallbackThreshold * 0.65f);
  if (totalDeltaAngle >= fuzzyCallbackThreshold || totalDeltaAngle <= -fuzzyCallbackThreshold) {
    if (!useDirection) {
      ccw=totalDeltaAngle > 0;
    }
    int oldTouchAngle=touchAngle;
    if (ccw && mThumbCcwBound != Integer.MIN_VALUE) {
      int deltaCcwBoundAndTouch=getDelta(mThumbCcwBound,touchAngle,useDirection,true);
      if (deltaCcwBoundAndTouch >= mCallbackThreshold / 2) {
        int deltaPreviousCbAndTouch=getDelta(mPreviousCallbackAngle,touchAngle,useDirection,true);
        if (deltaPreviousCbAndTouch >= deltaCcwBoundAndTouch) {
          touchAngle=mThumbCcwBound;
          ccw=false;
        }
      }
    }
 else     if (!ccw && mThumbCwBound != Integer.MIN_VALUE) {
      int deltaCwBoundAndTouch=getDelta(mThumbCwBound,touchAngle,useDirection,false);
      if (deltaCwBoundAndTouch <= -mCallbackThreshold / 2) {
        int deltaPreviousCbAndTouch=getDelta(mPreviousCallbackAngle,touchAngle,useDirection,false);
        if (deltaPreviousCbAndTouch <= deltaCwBoundAndTouch) {
          touchAngle=mThumbCwBound;
          ccw=true;
        }
      }
    }
    if (touchAngle != oldTouchAngle) {
      totalDeltaAngle=getDelta(mPreviousCallbackAngle,touchAngle,useDirection,ccw);
      animateThumbToNewAngle=true;
      mMode=MODE_IGNORE_UNTIL_UP;
    }
    if (mEnforceMaxAbsJump) {
      if (totalDeltaAngle <= -MAX_ABS_JUMP_DELTA_ANGLE) {
        totalDeltaAngle=-MAX_ABS_JUMP_DELTA_ANGLE;
        animateThumbToNewAngle=true;
      }
 else       if (totalDeltaAngle >= MAX_ABS_JUMP_DELTA_ANGLE) {
        totalDeltaAngle=MAX_ABS_JUMP_DELTA_ANGLE;
        animateThumbToNewAngle=true;
      }
    }
    int deltaLevels=Math.round((float)totalDeltaAngle / mCallbackThreshold);
    if (deltaLevels != 0) {
      boolean canStillZoom=mCallback.onZoomRingThumbDragged(deltaLevels,mThumbDragStartAngle,touchAngle);
      performHapticFeedback(HapticFeedbackConstants.ZOOM_RING_TICK,HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING | HapticFeedbackConstants.FLAG_IGNORE_VIEW_SETTING);
      mPreviousCallbackAngle=getValidAngle(mPreviousCallbackAngle + (deltaLevels * mCallbackThreshold));
    }
  }
  int deltaAngle=getDelta(mThumbAngle,touchAngle,useDirection,ccw);
  mAcculumalatedTrailAngle+=Math.toDegrees(deltaAngle / (double)RADIAN_INT_MULTIPLIER);
  if (animateThumbToNewAngle) {
    if (useDirection) {
      setThumbAngleAnimated(touchAngle,0,ccw);
    }
 else {
      setThumbAngleAnimated(touchAngle,0);
    }
  }
 else {
    setThumbAngleAuto(touchAngle,useDirection,ccw);
  }
}
