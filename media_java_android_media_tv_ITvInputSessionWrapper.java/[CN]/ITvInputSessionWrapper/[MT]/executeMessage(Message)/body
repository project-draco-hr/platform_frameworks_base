{
  if (mTvInputSessionImpl == null) {
    return;
  }
  long startTime=System.currentTimeMillis();
switch (msg.what) {
case DO_RELEASE:
{
      mTvInputSessionImpl.release();
      mTvInputSessionImpl=null;
      if (mReceiver != null) {
        mReceiver.dispose();
        mReceiver=null;
      }
      if (mChannel != null) {
        mChannel.dispose();
        mChannel=null;
      }
      break;
    }
case DO_SET_MAIN:
{
    mTvInputSessionImpl.setMain((Boolean)msg.obj);
    break;
  }
case DO_SET_SURFACE:
{
  mTvInputSessionImpl.setSurface((Surface)msg.obj);
  break;
}
case DO_DISPATCH_SURFACE_CHANGED:
{
SomeArgs args=(SomeArgs)msg.obj;
mTvInputSessionImpl.dispatchSurfaceChanged(args.argi1,args.argi2,args.argi3);
args.recycle();
break;
}
case DO_SET_STREAM_VOLUME:
{
mTvInputSessionImpl.setStreamVolume((Float)msg.obj);
break;
}
case DO_TUNE:
{
SomeArgs args=(SomeArgs)msg.obj;
mTvInputSessionImpl.tune((Uri)args.arg1,(Bundle)args.arg2);
args.recycle();
break;
}
case DO_SET_CAPTION_ENABLED:
{
mTvInputSessionImpl.setCaptionEnabled((Boolean)msg.obj);
break;
}
case DO_SELECT_TRACK:
{
SomeArgs args=(SomeArgs)msg.obj;
mTvInputSessionImpl.selectTrack((Integer)args.arg1,(String)args.arg2);
args.recycle();
break;
}
case DO_APP_PRIVATE_COMMAND:
{
SomeArgs args=(SomeArgs)msg.obj;
mTvInputSessionImpl.appPrivateCommand((String)args.arg1,(Bundle)args.arg2);
args.recycle();
break;
}
case DO_CREATE_OVERLAY_VIEW:
{
SomeArgs args=(SomeArgs)msg.obj;
mTvInputSessionImpl.createOverlayView((IBinder)args.arg1,(Rect)args.arg2);
args.recycle();
break;
}
case DO_RELAYOUT_OVERLAY_VIEW:
{
mTvInputSessionImpl.relayoutOverlayView((Rect)msg.obj);
break;
}
case DO_REMOVE_OVERLAY_VIEW:
{
mTvInputSessionImpl.removeOverlayView(true);
break;
}
case DO_REQUEST_UNBLOCK_CONTENT:
{
mTvInputSessionImpl.unblockContent((String)msg.obj);
break;
}
case DO_TIME_SHIFT_PAUSE:
{
mTvInputSessionImpl.timeShiftPause();
break;
}
case DO_TIME_SHIFT_RESUME:
{
mTvInputSessionImpl.timeShiftResume();
break;
}
case DO_TIME_SHIFT_SEEK_TO:
{
mTvInputSessionImpl.timeShiftSeekTo((Long)msg.obj);
break;
}
case DO_TIME_SHIFT_SET_PLAYBACK_RATE:
{
mTvInputSessionImpl.timeShiftSetPlaybackRate((Float)msg.obj,msg.arg1);
break;
}
case DO_TIME_SHIFT_TRACK_CURRENT_POSITION:
{
mTvInputSessionImpl.timeShiftTrackCurrentPosition((Boolean)msg.obj);
break;
}
default :
{
Log.w(TAG,"Unhandled message code: " + msg.what);
break;
}
}
long duration=System.currentTimeMillis() - startTime;
if (duration > MESSAGE_HANDLING_DURATION_THRESHOLD_MILLIS) {
Log.w(TAG,"Handling message (" + msg.what + ") took too long time (duration="+ duration+ "ms)");
if (msg.what == DO_TUNE && duration > MESSAGE_TUNE_DURATION_THRESHOLD_MILLIS) {
throw new RuntimeException("Too much time to handle tune request. (" + duration + "ms > "+ MESSAGE_TUNE_DURATION_THRESHOLD_MILLIS+ "ms) "+ "Consider handling the tune request in a separate thread.");
}
}
}
