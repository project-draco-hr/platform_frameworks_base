{
  int NUM_FILES=1500;
  int MAX_FILE_SIZE=3000;
  long[] reqs=new long[NUM_FILES];
  MultipleDownloadsCompletedReceiver receiver=registerNewMultipleDownloadsReceiver();
  Cursor cursor=null;
  try {
    Random r=new LoggingRng();
    for (int i=0; i < NUM_FILES; ++i) {
      int size=r.nextInt(MAX_FILE_SIZE);
      byte[] blobData=generateData(size,DataType.TEXT);
      Uri uri=getServerUri(DEFAULT_FILENAME);
      Request request=new Request(uri);
      request.setTitle(String.format("%s--%d",DEFAULT_FILENAME,i));
      enqueueResponse(HTTP_OK,blobData);
      Log.i(LOG_TAG,"issuing request: " + i);
      long reqId=mDownloadManager.enqueue(request);
      reqs[i]=reqId;
    }
    waitForDownloadsOrTimeout(WAIT_FOR_DOWNLOAD_POLL_TIME,MAX_WAIT_FOR_DOWNLOAD_TIME);
    cursor=mDownloadManager.query(new Query());
    assertEquals(NUM_FILES,cursor.getCount());
    Log.i(LOG_TAG,"Verified number of downloads in download manager is what we expect.");
    while (cursor.moveToNext()) {
      int status=cursor.getInt(cursor.getColumnIndex(DownloadManager.COLUMN_STATUS));
      String filename=cursor.getString(cursor.getColumnIndex(DownloadManager.COLUMN_URI));
      String errorString=String.format("File %s failed to download successfully. " + "Status code: %d",filename,status);
      assertEquals(errorString,DownloadManager.STATUS_SUCCESSFUL,status);
    }
    Log.i(LOG_TAG,"Verified each download was successful.");
    assertEquals(NUM_FILES,receiver.numDownloadsCompleted());
    Log.i(LOG_TAG,"Verified number of completed downloads in our receiver.");
    for (int i=0; i < NUM_FILES; ++i) {
      ParcelFileDescriptor pfd=mDownloadManager.openDownloadedFile(reqs[i]);
      pfd.close();
    }
    Log.i(LOG_TAG,"Verified we can open each file.");
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
    mContext.unregisterReceiver(receiver);
    removeAllCurrentDownloads();
  }
}
