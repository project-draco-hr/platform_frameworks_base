{
  String key=a.getString(R.styleable.RestrictionEntry_key);
  int restrictionType=a.getInt(R.styleable.RestrictionEntry_restrictionType,-1);
  String title=a.getString(R.styleable.RestrictionEntry_title);
  String description=a.getString(R.styleable.RestrictionEntry_description);
  int entries=a.getResourceId(R.styleable.RestrictionEntry_entries,0);
  int entryValues=a.getResourceId(R.styleable.RestrictionEntry_entryValues,0);
  if (restrictionType == -1) {
    Log.w(TAG,"restrictionType cannot be omitted");
    return null;
  }
  if (key == null) {
    Log.w(TAG,"key cannot be omitted");
    return null;
  }
  RestrictionEntry restriction=new RestrictionEntry(restrictionType,key);
  restriction.setTitle(title);
  restriction.setDescription(description);
  if (entries != 0) {
    restriction.setChoiceEntries(appContext,entries);
  }
  if (entryValues != 0) {
    restriction.setChoiceValues(appContext,entryValues);
  }
switch (restrictionType) {
case RestrictionEntry.TYPE_NULL:
case RestrictionEntry.TYPE_STRING:
case RestrictionEntry.TYPE_CHOICE:
    restriction.setSelectedString(a.getString(R.styleable.RestrictionEntry_defaultValue));
  break;
case RestrictionEntry.TYPE_INTEGER:
restriction.setIntValue(a.getInt(R.styleable.RestrictionEntry_defaultValue,0));
break;
case RestrictionEntry.TYPE_MULTI_SELECT:
int resId=a.getResourceId(R.styleable.RestrictionEntry_defaultValue,0);
if (resId != 0) {
restriction.setAllSelectedStrings(appContext.getResources().getStringArray(resId));
}
break;
case RestrictionEntry.TYPE_BOOLEAN:
restriction.setSelectedState(a.getBoolean(R.styleable.RestrictionEntry_defaultValue,false));
break;
case RestrictionEntry.TYPE_BUNDLE:
case RestrictionEntry.TYPE_BUNDLE_ARRAY:
final int outerDepth=xml.getDepth();
List<RestrictionEntry> restrictionEntries=new ArrayList<>();
while (XmlUtils.nextElementWithin(xml,outerDepth)) {
RestrictionEntry childEntry=loadRestrictionElement(appContext,xml);
if (childEntry == null) {
Log.w(TAG,"Child entry cannot be loaded for bundle restriction " + key);
}
 else {
restrictionEntries.add(childEntry);
if (restrictionType == RestrictionEntry.TYPE_BUNDLE_ARRAY && childEntry.getType() != RestrictionEntry.TYPE_BUNDLE) {
Log.w(TAG,"bundle_array " + key + " can only contain entries of type bundle");
}
}
}
restriction.setRestrictions(restrictionEntries.toArray(new RestrictionEntry[restrictionEntries.size()]));
break;
default :
Log.w(TAG,"Unknown restriction type " + restrictionType);
}
return restriction;
}
