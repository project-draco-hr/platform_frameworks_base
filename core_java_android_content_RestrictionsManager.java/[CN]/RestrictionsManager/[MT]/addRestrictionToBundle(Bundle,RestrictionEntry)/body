{
switch (entry.getType()) {
case RestrictionEntry.TYPE_BOOLEAN:
    bundle.putBoolean(entry.getKey(),entry.getSelectedState());
  break;
case RestrictionEntry.TYPE_CHOICE:
case RestrictionEntry.TYPE_CHOICE_LEVEL:
case RestrictionEntry.TYPE_MULTI_SELECT:
bundle.putStringArray(entry.getKey(),entry.getAllSelectedStrings());
break;
case RestrictionEntry.TYPE_INTEGER:
bundle.putInt(entry.getKey(),entry.getIntValue());
break;
case RestrictionEntry.TYPE_STRING:
case RestrictionEntry.TYPE_NULL:
bundle.putString(entry.getKey(),entry.getSelectedString());
break;
case RestrictionEntry.TYPE_BUNDLE:
RestrictionEntry[] restrictions=entry.getRestrictions();
Bundle childBundle=convertRestrictionsToBundle(Arrays.asList(restrictions));
bundle.putBundle(entry.getKey(),childBundle);
break;
case RestrictionEntry.TYPE_BUNDLE_ARRAY:
restrictions=entry.getRestrictions();
Bundle[] bundleArray=new Bundle[restrictions.length];
for (int i=0; i < restrictions.length; i++) {
bundleArray[i]=addRestrictionToBundle(new Bundle(),restrictions[i]);
}
bundle.putParcelableArray(entry.getKey(),bundleArray);
break;
default :
throw new IllegalArgumentException("Unsupported restrictionEntry type: " + entry.getType());
}
return bundle;
}
