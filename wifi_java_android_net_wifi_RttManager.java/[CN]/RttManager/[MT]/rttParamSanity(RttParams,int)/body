{
  if (mRttCapabilities == null) {
    if (getRttCapabilities() == null) {
      Log.e(TAG,"Can not get RTT capabilities");
      throw new IllegalStateException("RTT chip is not working");
    }
  }
  if (params.deviceType != RTT_PEER_TYPE_AP) {
    return false;
  }
 else   if (params.requestType != RTT_TYPE_ONE_SIDED && params.requestType != RTT_TYPE_TWO_SIDED) {
    Log.e(TAG,"Request " + index + ": Illegal Request Type: "+ params.requestType);
    return false;
  }
 else   if (params.requestType == RTT_TYPE_ONE_SIDED && !mRttCapabilities.oneSidedRttSupported) {
    Log.e(TAG,"Request " + index + ": One side RTT is not supported");
    return false;
  }
 else   if (params.requestType == RTT_TYPE_TWO_SIDED && !mRttCapabilities.twoSided11McRttSupported) {
    Log.e(TAG,"Request " + index + ": two side RTT is not supported");
    return false;
  }
 else   if (params.bssid == null || params.bssid.isEmpty()) {
    Log.e(TAG,"No BSSID is input");
  }
 else   if (params.numberBurst != 0) {
    Log.e(TAG,"Request " + index + ": Illegal number of burst: "+ params.numberBurst);
    return false;
  }
 else   if (params.numSamplesPerBurst <= 0 || params.numSamplesPerBurst > 31) {
    Log.e(TAG,"Request " + index + ": Illegal sample number per burst: "+ params.numSamplesPerBurst);
    return false;
  }
 else   if (params.numRetriesPerMeasurementFrame < 0 || params.numRetriesPerMeasurementFrame > 3) {
    Log.e(TAG,"Request " + index + ": Illegal measurement frame retry number:"+ params.numRetriesPerMeasurementFrame);
    return false;
  }
 else   if (params.numRetriesPerFTMR < 0 || params.numRetriesPerFTMR > 3) {
    Log.e(TAG,"Request " + index + ": Illegal FTMR frame retry number:"+ params.numRetriesPerFTMR);
    return false;
  }
 else   if (params.LCIRequest && !mRttCapabilities.lciSupported) {
    Log.e(TAG,"Request " + index + ": LCI is not supported");
    return false;
  }
 else   if (params.LCRRequest && !mRttCapabilities.lcrSupported) {
    Log.e(TAG,"Request " + index + ": LCR is not supported");
    return false;
  }
 else   if (params.burstTimeout < 1 || (params.burstTimeout > 11 && params.burstTimeout != 15)) {
    Log.e(TAG,"Request " + index + ": Illegal burst timeout: "+ params.burstTimeout);
    return false;
  }
 else   if ((params.preamble & mRttCapabilities.preambleSupported) == 0) {
    Log.e(TAG,"Request " + index + ": Do not support this preamble: "+ params.preamble);
    return false;
  }
 else   if ((params.bandwidth & mRttCapabilities.bwSupported) == 0) {
    Log.e(TAG,"Request " + index + ": Do not support this bandwidth: "+ params.bandwidth);
    return false;
  }
  return true;
}
