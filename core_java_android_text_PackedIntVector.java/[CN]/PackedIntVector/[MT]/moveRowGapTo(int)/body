{
  if (where == mRowGapStart) {
    return;
  }
 else   if (where > mRowGapStart) {
    int moving=where + mRowGapLength - (mRowGapStart + mRowGapLength);
    final int columns=mColumns;
    final int[] valuegap=mValueGap;
    final int[] values=mValues;
    final int gapend=mRowGapStart + mRowGapLength;
    for (int i=gapend; i < gapend + moving; i++) {
      int destrow=i - gapend + mRowGapStart;
      for (int j=0; j < columns; j++) {
        int val=values[i * columns + j];
        if (i >= valuegap[j]) {
          val+=valuegap[j + columns];
        }
        if (destrow >= valuegap[j]) {
          val-=valuegap[j + columns];
        }
        values[destrow * columns + j]=val;
      }
    }
  }
 else {
    int moving=mRowGapStart - where;
    final int columns=mColumns;
    final int[] valuegap=mValueGap;
    final int[] values=mValues;
    final int gapend=mRowGapStart + mRowGapLength;
    for (int i=where + moving - 1; i >= where; i--) {
      int destrow=i - where + gapend - moving;
      for (int j=0; j < columns; j++) {
        int val=values[i * columns + j];
        if (i >= valuegap[j]) {
          val+=valuegap[j + columns];
        }
        if (destrow >= valuegap[j]) {
          val-=valuegap[j + columns];
        }
        values[destrow * columns + j]=val;
      }
    }
  }
  mRowGapStart=where;
}
