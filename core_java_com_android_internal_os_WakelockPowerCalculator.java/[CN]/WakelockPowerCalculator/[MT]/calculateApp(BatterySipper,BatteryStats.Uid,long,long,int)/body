{
  long wakeLockTimeUs=0;
  final ArrayMap<String,? extends BatteryStats.Uid.Wakelock> wakelockStats=u.getWakelockStats();
  final int wakelockStatsCount=wakelockStats.size();
  for (int i=0; i < wakelockStatsCount; i++) {
    final BatteryStats.Uid.Wakelock wakelock=wakelockStats.valueAt(i);
    BatteryStats.Timer timer=wakelock.getWakeTime(BatteryStats.WAKE_TYPE_PARTIAL);
    if (timer != null) {
      wakeLockTimeUs+=timer.getTotalTimeLocked(rawRealtimeUs,statsType);
    }
  }
  app.wakeLockTimeMs=wakeLockTimeUs / 1000;
  mTotalAppWakelockTimeMs+=app.wakeLockTimeMs;
  app.wakeLockPowerMah=(app.wakeLockTimeMs * mPowerWakelock) / (1000 * 60 * 60);
  if (DEBUG && app.wakeLockPowerMah != 0) {
    Log.d(TAG,"UID " + u.getUid() + ": wake "+ app.wakeLockTimeMs+ " power="+ BatteryStatsHelper.makemAh(app.wakeLockPowerMah));
  }
}
