{
  mContext.callerPermissions.add(permission.MANAGE_DEVICE_ADMINS);
  mContext.callerPermissions.add(permission.MANAGE_USERS);
  mContext.callerPermissions.add(permission.MANAGE_PROFILE_AND_DEVICE_OWNERS);
  mContext.callerPermissions.add(permission.INTERACT_ACROSS_USERS_FULL);
  setUpPackageManagerForAdmin(admin1,DpmMockContext.CALLER_UID);
  dpm.setActiveAdmin(admin1,false);
  mContext.binder.callingUid=DpmMockContext.CALLER_SYSTEM_USER_UID;
  setUpPackageManagerForAdmin(admin1,DpmMockContext.CALLER_SYSTEM_USER_UID);
  dpm.setActiveAdmin(admin1,false);
  assertTrue(dpm.setDeviceOwner(admin1,"owner-name"));
  verify(mContext.iactivityManager,times(1)).updateDeviceOwner(eq(admin1.getPackageName()));
  assertEquals(admin1,dpm.getDeviceOwnerComponentOnAnyUser());
  mContext.binder.callingUid=DpmMockContext.CALLER_UID;
  doReturn(DpmMockContext.CALLER_UID).when(mContext.packageManager).getPackageUid(eq(admin1.getPackageName()),anyInt());
  try {
    dpm.clearDeviceOwnerApp(admin1.getPackageName());
    fail("Didn't throw");
  }
 catch (  SecurityException e) {
    assertEquals("clearDeviceOwner can only be called by the device owner",e.getMessage());
  }
  assertTrue(dpm.isDeviceManaged());
}
