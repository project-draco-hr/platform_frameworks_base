{
  mContext.callerPermissions.add(permission.MANAGE_DEVICE_ADMINS);
  mContext.callerPermissions.add(permission.MANAGE_PROFILE_AND_DEVICE_OWNERS);
  mContext.binder.callingUid=DpmMockContext.CALLER_SYSTEM_USER_UID;
  setUpPackageManagerForAdmin(admin1,DpmMockContext.CALLER_SYSTEM_USER_UID);
  dpm.setActiveAdmin(admin1,false);
  assertTrue(dpm.isAdminActive(admin1));
  try {
    dpm.reboot(admin1);
    fail("DA calls DPM.reboot(), did not throw expected SecurityException");
  }
 catch (  SecurityException expected) {
    MoreAsserts.assertContainsRegex("does not own the device",expected.getMessage());
  }
  assertTrue(dpm.setProfileOwner(admin1,null,UserHandle.USER_SYSTEM));
  try {
    dpm.reboot(admin1);
    fail("PO calls DPM.reboot(), did not throw expected SecurityException");
  }
 catch (  SecurityException expected) {
    MoreAsserts.assertContainsRegex("does not own the device",expected.getMessage());
  }
  dpm.clearProfileOwner(admin1);
  assertTrue(dpm.setDeviceOwner(admin1,null,UserHandle.USER_SYSTEM));
  when(mContext.telephonyManager.getCallState()).thenReturn(TelephonyManager.CALL_STATE_RINGING);
  try {
    dpm.reboot(admin1);
    fail("DPM.reboot() called when receiveing a call, should thrown IllegalStateException");
  }
 catch (  IllegalStateException expected) {
    MoreAsserts.assertContainsRegex("ongoing call on the device",expected.getMessage());
  }
  when(mContext.telephonyManager.getCallState()).thenReturn(TelephonyManager.CALL_STATE_OFFHOOK);
  try {
    dpm.reboot(admin1);
    fail("DPM.reboot() called when dialing, should thrown IllegalStateException");
  }
 catch (  IllegalStateException expected) {
    MoreAsserts.assertContainsRegex("ongoing call on the device",expected.getMessage());
  }
  when(mContext.telephonyManager.getCallState()).thenReturn(TelephonyManager.CALL_STATE_IDLE);
  dpm.reboot(admin1);
}
