{
  final int origCallingUser=mContext.binder.callingUid;
  final List origPermissions=new ArrayList(mContext.callerPermissions);
  mContext.callerPermissions.clear();
  mContext.callerPermissions.add(permission.MANAGE_USERS);
  mContext.binder.callingUid=Process.SYSTEM_UID;
  if (hasDeviceOwner) {
    assertTrue(dpm.isDeviceOwnerApp(admin1.getPackageName()));
    assertTrue(dpm.isDeviceOwnerAppOnCallingUser(admin1.getPackageName()));
    assertEquals(admin1,dpm.getDeviceOwnerComponentOnCallingUser());
    assertTrue(dpm.isDeviceOwnerAppOnAnyUser(admin1.getPackageName()));
    assertEquals(admin1,dpm.getDeviceOwnerComponentOnAnyUser());
    assertEquals(UserHandle.USER_SYSTEM,dpm.getDeviceOwnerUserId());
  }
 else {
    assertFalse(dpm.isDeviceOwnerApp(admin1.getPackageName()));
    assertFalse(dpm.isDeviceOwnerAppOnCallingUser(admin1.getPackageName()));
    assertEquals(null,dpm.getDeviceOwnerComponentOnCallingUser());
    assertFalse(dpm.isDeviceOwnerAppOnAnyUser(admin1.getPackageName()));
    assertEquals(null,dpm.getDeviceOwnerComponentOnAnyUser());
    assertEquals(UserHandle.USER_NULL,dpm.getDeviceOwnerUserId());
  }
  mContext.binder.callingUid=DpmMockContext.CALLER_SYSTEM_USER_UID;
  if (hasDeviceOwner) {
    assertTrue(dpm.isDeviceOwnerApp(admin1.getPackageName()));
    assertTrue(dpm.isDeviceOwnerAppOnCallingUser(admin1.getPackageName()));
    assertEquals(admin1,dpm.getDeviceOwnerComponentOnCallingUser());
    assertTrue(dpm.isDeviceOwnerAppOnAnyUser(admin1.getPackageName()));
    assertEquals(admin1,dpm.getDeviceOwnerComponentOnAnyUser());
    assertEquals(UserHandle.USER_SYSTEM,dpm.getDeviceOwnerUserId());
  }
 else {
    assertFalse(dpm.isDeviceOwnerApp(admin1.getPackageName()));
    assertFalse(dpm.isDeviceOwnerAppOnCallingUser(admin1.getPackageName()));
    assertEquals(null,dpm.getDeviceOwnerComponentOnCallingUser());
    assertFalse(dpm.isDeviceOwnerAppOnAnyUser(admin1.getPackageName()));
    assertEquals(null,dpm.getDeviceOwnerComponentOnAnyUser());
    assertEquals(UserHandle.USER_NULL,dpm.getDeviceOwnerUserId());
  }
  mContext.binder.callingUid=DpmMockContext.CALLER_UID;
  assertFalse(dpm.isDeviceOwnerApp(admin1.getPackageName()));
  assertFalse(dpm.isDeviceOwnerAppOnCallingUser(admin1.getPackageName()));
  assertEquals(null,dpm.getDeviceOwnerComponentOnCallingUser());
  if (hasDeviceOwner) {
    assertTrue(dpm.isDeviceOwnerAppOnAnyUser(admin1.getPackageName()));
    assertEquals(admin1,dpm.getDeviceOwnerComponentOnAnyUser());
    assertEquals(UserHandle.USER_SYSTEM,dpm.getDeviceOwnerUserId());
  }
 else {
    assertFalse(dpm.isDeviceOwnerAppOnAnyUser(admin1.getPackageName()));
    assertEquals(null,dpm.getDeviceOwnerComponentOnAnyUser());
    assertEquals(UserHandle.USER_NULL,dpm.getDeviceOwnerUserId());
  }
  mContext.binder.callingUid=Process.SYSTEM_UID;
  mContext.callerPermissions.remove(permission.MANAGE_USERS);
  if (hasDeviceOwner) {
    assertTrue(dpm.isDeviceOwnerApp(admin1.getPackageName()));
    assertTrue(dpm.isDeviceOwnerAppOnCallingUser(admin1.getPackageName()));
    assertEquals(admin1,dpm.getDeviceOwnerComponentOnCallingUser());
    assertTrue(dpm.isDeviceOwnerAppOnAnyUser(admin1.getPackageName()));
    assertEquals(admin1,dpm.getDeviceOwnerComponentOnAnyUser());
    assertEquals(UserHandle.USER_SYSTEM,dpm.getDeviceOwnerUserId());
  }
 else {
    assertFalse(dpm.isDeviceOwnerApp(admin1.getPackageName()));
    assertFalse(dpm.isDeviceOwnerAppOnCallingUser(admin1.getPackageName()));
    assertEquals(null,dpm.getDeviceOwnerComponentOnCallingUser());
    assertFalse(dpm.isDeviceOwnerAppOnAnyUser(admin1.getPackageName()));
    assertEquals(null,dpm.getDeviceOwnerComponentOnAnyUser());
    assertEquals(UserHandle.USER_NULL,dpm.getDeviceOwnerUserId());
  }
  mContext.binder.callingUid=DpmMockContext.CALLER_SYSTEM_USER_UID;
  if (hasDeviceOwner) {
    assertTrue(dpm.isDeviceOwnerApp(admin1.getPackageName()));
    assertTrue(dpm.isDeviceOwnerAppOnCallingUser(admin1.getPackageName()));
    assertEquals(admin1,dpm.getDeviceOwnerComponentOnCallingUser());
  }
 else {
    assertFalse(dpm.isDeviceOwnerApp(admin1.getPackageName()));
    assertFalse(dpm.isDeviceOwnerAppOnCallingUser(admin1.getPackageName()));
    assertEquals(null,dpm.getDeviceOwnerComponentOnCallingUser());
  }
  try {
    dpm.isDeviceOwnerAppOnAnyUser(admin1.getPackageName());
    fail();
  }
 catch (  SecurityException expected) {
  }
  try {
    dpm.getDeviceOwnerComponentOnAnyUser();
    fail();
  }
 catch (  SecurityException expected) {
  }
  try {
    dpm.getDeviceOwnerUserId();
    fail();
  }
 catch (  SecurityException expected) {
  }
  try {
    dpm.getDeviceOwnerNameOnAnyUser();
    fail();
  }
 catch (  SecurityException expected) {
  }
  mContext.binder.callingUid=DpmMockContext.CALLER_UID;
  assertFalse(dpm.isDeviceOwnerApp(admin1.getPackageName()));
  assertFalse(dpm.isDeviceOwnerAppOnCallingUser(admin1.getPackageName()));
  assertEquals(null,dpm.getDeviceOwnerComponentOnCallingUser());
  try {
    dpm.isDeviceOwnerAppOnAnyUser(admin1.getPackageName());
    fail();
  }
 catch (  SecurityException expected) {
  }
  try {
    dpm.getDeviceOwnerComponentOnAnyUser();
    fail();
  }
 catch (  SecurityException expected) {
  }
  try {
    dpm.getDeviceOwnerUserId();
    fail();
  }
 catch (  SecurityException expected) {
  }
  try {
    dpm.getDeviceOwnerNameOnAnyUser();
    fail();
  }
 catch (  SecurityException expected) {
  }
  mContext.binder.callingUid=origCallingUser;
  mContext.callerPermissions.addAll(origPermissions);
}
