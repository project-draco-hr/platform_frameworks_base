{
  final int ANOTHER_USER_ID=100;
  final int ANOTHER_ADMIN_UID=UserHandle.getUid(ANOTHER_USER_ID,456);
  mMockContext.addUser(ANOTHER_USER_ID,0);
  mContext.callerPermissions.add(permission.MANAGE_DEVICE_ADMINS);
  mContext.callerPermissions.add(permission.MANAGE_USERS);
  mContext.callerPermissions.add(permission.MANAGE_PROFILE_AND_DEVICE_OWNERS);
  mContext.callerPermissions.add(permission.INTERACT_ACROSS_USERS_FULL);
  mContext.binder.callingUid=DpmMockContext.CALLER_SYSTEM_USER_UID;
  setUpPackageManagerForAdmin(admin1,DpmMockContext.CALLER_SYSTEM_USER_UID);
  setUpPackageManagerForAdmin(admin3,DpmMockContext.CALLER_SYSTEM_USER_UID);
  setUpPackageManagerForAdmin(admin1,DpmMockContext.CALLER_UID);
  setUpPackageManagerForAdmin(admin2,DpmMockContext.CALLER_UID);
  setUpPackageManagerForAdmin(admin2,ANOTHER_ADMIN_UID);
  dpm.setActiveAdmin(admin1,false);
  dpm.setActiveAdmin(admin3,false);
  dpm.setActiveAdmin(admin1,false,DpmMockContext.CALLER_USER_HANDLE);
  dpm.setActiveAdmin(admin2,false,DpmMockContext.CALLER_USER_HANDLE);
  dpm.setActiveAdmin(admin2,false,ANOTHER_USER_ID);
  mContext.setUserRunning(DpmMockContext.CALLER_USER_HANDLE,true);
  assertTrue(dpm.setDeviceOwner(admin2,"owner-name",DpmMockContext.CALLER_USER_HANDLE));
  assertEquals(admin2,dpms.getDeviceOwnerComponent(false));
  assertEquals(admin2,dpms.getDeviceOwnerAdminLocked().info.getComponent());
  assertEquals(DpmMockContext.CALLER_UID,dpms.getDeviceOwnerAdminLocked().getUid());
}
