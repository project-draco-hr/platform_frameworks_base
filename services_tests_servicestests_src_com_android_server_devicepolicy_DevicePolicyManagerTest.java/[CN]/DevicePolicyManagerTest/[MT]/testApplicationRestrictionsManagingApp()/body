{
  setAsProfileOwner(admin1);
  final String nonExistAppRestrictionsManagerPackage="com.google.app.restrictions.manager2";
  final String appRestrictionsManagerPackage="com.google.app.restrictions.manager";
  final int appRestrictionsManagerAppId=20987;
  final int appRestrictionsManagerUid=UserHandle.getUid(DpmMockContext.CALLER_USER_HANDLE,appRestrictionsManagerAppId);
  doReturn(appRestrictionsManagerUid).when(mContext.packageManager).getPackageUidAsUser(eq(appRestrictionsManagerPackage),eq(DpmMockContext.CALLER_USER_HANDLE));
  mContext.binder.callingUid=appRestrictionsManagerUid;
  final PackageInfo pi=new PackageInfo();
  pi.applicationInfo=new ApplicationInfo();
  pi.applicationInfo.flags=ApplicationInfo.FLAG_HAS_CODE;
  doReturn(pi).when(mContext.ipackageManager).getPackageInfo(eq(appRestrictionsManagerPackage),anyInt(),eq(DpmMockContext.CALLER_USER_HANDLE));
  assertFalse(dpm.isCallerApplicationRestrictionsManagingPackage());
  Bundle rest=new Bundle();
  rest.putString("KEY_STRING","Foo1");
  try {
    dpm.setApplicationRestrictions(null,"pkg1",rest);
    fail("Didn't throw expected SecurityException");
  }
 catch (  SecurityException expected) {
    MoreAsserts.assertContainsRegex("caller cannot manage application restrictions",expected.getMessage());
  }
  try {
    dpm.getApplicationRestrictions(null,"pkg1");
    fail("Didn't throw expected SecurityException");
  }
 catch (  SecurityException expected) {
    MoreAsserts.assertContainsRegex("caller cannot manage application restrictions",expected.getMessage());
  }
  mContext.binder.callingUid=DpmMockContext.CALLER_UID;
  assertEquals(0,dpm.getApplicationRestrictions(admin1,"pkg1").size());
  try {
    dpm.setApplicationRestrictionsManagingPackage(admin1,nonExistAppRestrictionsManagerPackage);
    fail("Non-existent app set as app restriction manager.");
  }
 catch (  IllegalArgumentException expected) {
    MoreAsserts.assertContainsRegex("is not installed on the current user",expected.getMessage());
  }
  dpm.setApplicationRestrictionsManagingPackage(admin1,appRestrictionsManagerPackage);
  assertEquals(appRestrictionsManagerPackage,dpm.getApplicationRestrictionsManagingPackage(admin1));
  mContext.binder.callingUid=appRestrictionsManagerUid;
  assertTrue(dpm.isCallerApplicationRestrictionsManagingPackage());
  dpm.setApplicationRestrictions(null,"pkg1",rest);
  Bundle returned=dpm.getApplicationRestrictions(null,"pkg1");
  assertEquals(1,returned.size(),1);
  assertEquals("Foo1",returned.get("KEY_STRING"));
  mContext.binder.callingUid=UserHandle.getUid(UserHandle.USER_SYSTEM,appRestrictionsManagerAppId);
  assertFalse(dpm.isCallerApplicationRestrictionsManagingPackage());
  try {
    dpm.setApplicationRestrictions(null,"pkg1",rest);
    fail("Didn't throw expected SecurityException");
  }
 catch (  SecurityException expected) {
    MoreAsserts.assertContainsRegex("caller cannot manage application restrictions",expected.getMessage());
  }
  mContext.binder.callingUid=DpmMockContext.CALLER_UID;
  assertEquals(returned,dpm.getApplicationRestrictions(admin1,"pkg1"));
  dpm.setApplicationRestrictions(admin1,"pkg1",null);
  assertEquals(0,dpm.getApplicationRestrictions(admin1,"pkg1").size());
  dpm.setApplicationRestrictionsManagingPackage(admin1,null);
  assertNull(dpm.getApplicationRestrictionsManagingPackage(admin1));
  mContext.binder.callingUid=appRestrictionsManagerUid;
  assertFalse(dpm.isCallerApplicationRestrictionsManagingPackage());
  try {
    dpm.setApplicationRestrictions(null,"pkg1",null);
    fail("Didn't throw expected SecurityException");
  }
 catch (  SecurityException expected) {
    MoreAsserts.assertContainsRegex("caller cannot manage application restrictions",expected.getMessage());
  }
}
