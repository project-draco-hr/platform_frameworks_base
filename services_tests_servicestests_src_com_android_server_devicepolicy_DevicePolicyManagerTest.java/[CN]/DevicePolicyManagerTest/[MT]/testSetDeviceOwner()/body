{
  mContext.callerPermissions.add(permission.MANAGE_DEVICE_ADMINS);
  mContext.callerPermissions.add(permission.MANAGE_USERS);
  mContext.callerPermissions.add(permission.MANAGE_PROFILE_AND_DEVICE_OWNERS);
  mContext.callerPermissions.add(permission.INTERACT_ACROSS_USERS_FULL);
  mContext.binder.callingUid=DpmMockContext.CALLER_SYSTEM_USER_UID;
  setUpPackageManagerForAdmin(admin1,DpmMockContext.CALLER_SYSTEM_USER_UID);
  checkGetDeviceOwnerInfoApi(dpm,false);
  dpm.setActiveAdmin(admin1,false);
  assertTrue(dpm.setDeviceOwner(admin1,"owner-name"));
  assertEquals(admin1,dpm.getDeviceOwnerComponentOnCallingUser());
  assertEquals(admin1,dpm.getDeviceOwnerComponentOnAnyUser());
  checkGetDeviceOwnerInfoApi(dpm,true);
  mContext.binder.callingUid=DpmMockContext.CALLER_UID;
  assertEquals(null,dpm.getDeviceOwnerComponentOnCallingUser());
  assertEquals(admin1,dpm.getDeviceOwnerComponentOnAnyUser());
  mContext.binder.callingUid=DpmMockContext.CALLER_SYSTEM_USER_UID;
  verify(mContext.iactivityManager,times(1)).updateDeviceOwner(eq(admin1.getPackageName()));
  verify(mContext.ibackupManager,times(1)).setBackupServiceActive(eq(UserHandle.USER_SYSTEM),eq(false));
  verify(mContext.spiedContext,times(1)).sendBroadcastAsUser(MockUtils.checkIntentAction(DevicePolicyManager.ACTION_DEVICE_OWNER_CHANGED),MockUtils.checkUserHandle(UserHandle.USER_SYSTEM));
  assertEquals(admin1,dpm.getDeviceOwnerComponentOnAnyUser());
  setUpPackageManagerForAdmin(admin2,DpmMockContext.CALLER_SYSTEM_USER_UID);
  dpm.setActiveAdmin(admin2,true,UserHandle.USER_SYSTEM);
  try {
    dpm.setProfileOwner(admin2,"owner-name",UserHandle.USER_SYSTEM);
    fail("IllegalStateException not thrown");
  }
 catch (  IllegalStateException expected) {
    assertTrue("Message was: " + expected.getMessage(),expected.getMessage().contains("already has a device owner"));
  }
  dpm.removeActiveAdmin(admin1);
  assertTrue(dpm.isAdminActive(admin1));
}
