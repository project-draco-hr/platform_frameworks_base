{
  mContext.callerPermissions.add(permission.MANAGE_DEVICE_ADMINS);
  mContext.callerPermissions.add(permission.MANAGE_PROFILE_AND_DEVICE_OWNERS);
  mContext.callerPermissions.add(permission.INTERACT_ACROSS_USERS_FULL);
  mContext.binder.callingUid=DpmMockContext.CALLER_SYSTEM_USER_UID;
  setUpPackageManagerForAdmin(admin1,DpmMockContext.CALLER_SYSTEM_USER_UID);
  try {
    dpm.getWifiMacAddress();
    fail();
  }
 catch (  SecurityException e) {
    MoreAsserts.assertContainsRegex("No active admin owned",e.getMessage());
  }
  dpm.setActiveAdmin(admin1,false);
  assertTrue(dpm.isAdminActive(admin1));
  try {
    dpm.getWifiMacAddress();
    fail();
  }
 catch (  SecurityException e) {
    MoreAsserts.assertContainsRegex("No active admin owned",e.getMessage());
  }
  assertTrue(dpm.setProfileOwner(admin1,null,UserHandle.USER_SYSTEM));
  try {
    dpm.getWifiMacAddress();
    fail();
  }
 catch (  SecurityException e) {
    MoreAsserts.assertContainsRegex("No active admin owned",e.getMessage());
  }
  dpm.clearProfileOwner(admin1);
  assertTrue(dpm.setDeviceOwner(admin1,null,UserHandle.USER_SYSTEM));
  assertNull(dpm.getWifiMacAddress());
  when(mContext.wifiManager.getConnectionInfo()).thenReturn(new WifiInfo());
  assertNull(dpm.getWifiMacAddress());
  final WifiInfo wi=new WifiInfo();
  wi.setMacAddress("11:22:33:44:55:66");
  when(mContext.wifiManager.getConnectionInfo()).thenReturn(wi);
  assertEquals("11:22:33:44:55:66",dpm.getWifiMacAddress());
}
