{
  mContext.callerPermissions.add(android.Manifest.permission.MANAGE_DEVICE_ADMINS);
  dpm.setActiveAdmin(admin1,false);
  assertTrue(dpm.isAdminActive(admin1));
  assertFalse(dpm.isRemovingAdmin(admin1,DpmMockContext.CALLER_USER_HANDLE));
  verify(mContext.spiedContext,times(1)).sendBroadcastAsUser(MockUtils.checkIntentAction(DevicePolicyManager.ACTION_DEVICE_POLICY_MANAGER_STATE_CHANGED),MockUtils.checkUserHandle(DpmMockContext.CALLER_USER_HANDLE));
  mContext.callerPermissions.clear();
  dpm.removeActiveAdmin(admin1);
  final ArgumentCaptor<BroadcastReceiver> brCap=ArgumentCaptor.forClass(BroadcastReceiver.class);
  assertTrue(dpm.isAdminActive(admin1));
  assertTrue(dpm.isRemovingAdmin(admin1,DpmMockContext.CALLER_USER_HANDLE));
  verify(mContext.spiedContext).sendOrderedBroadcastAsUser(MockUtils.checkIntentAction(DeviceAdminReceiver.ACTION_DEVICE_ADMIN_DISABLED),MockUtils.checkUserHandle(DpmMockContext.CALLER_USER_HANDLE),isNull(String.class),brCap.capture(),eq(dpms.mHandler),eq(Activity.RESULT_OK),isNull(String.class),isNull(Bundle.class));
  brCap.getValue().onReceive(mContext,null);
  assertFalse(dpm.isAdminActive(admin1));
  assertFalse(dpm.isRemovingAdmin(admin1,DpmMockContext.CALLER_USER_HANDLE));
  verify(mContext.spiedContext,times(2)).sendBroadcastAsUser(MockUtils.checkIntentAction(DevicePolicyManager.ACTION_DEVICE_POLICY_MANAGER_STATE_CHANGED),MockUtils.checkUserHandle(DpmMockContext.CALLER_USER_HANDLE));
}
