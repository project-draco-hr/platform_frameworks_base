{
  mContext.callerPermissions.add(permission.MANAGE_DEVICE_ADMINS);
  mContext.callerPermissions.add(permission.MANAGE_USERS);
  mContext.callerPermissions.add(permission.MANAGE_PROFILE_AND_DEVICE_OWNERS);
  mContext.callerPermissions.add(permission.INTERACT_ACROSS_USERS_FULL);
  setUpPackageManagerForAdmin(admin1,DpmMockContext.CALLER_UID);
  dpm.setActiveAdmin(admin1,false);
  mContext.binder.callingUid=DpmMockContext.CALLER_SYSTEM_USER_UID;
  setUpPackageManagerForAdmin(admin1,DpmMockContext.CALLER_SYSTEM_USER_UID);
  dpm.setActiveAdmin(admin1,false);
  assertTrue(dpm.setDeviceOwner(admin1,"owner-name"));
  verify(mContext.iactivityManager,times(1)).updateDeviceOwner(eq(admin1.getPackageName()));
  assertEquals(admin1,dpm.getDeviceOwnerComponentOnAnyUser());
  dpm.addUserRestriction(admin1,UserManager.DISALLOW_ADD_USER);
  assertTrue(dpm.isAdminActive(admin1));
  assertFalse(dpm.isRemovingAdmin(admin1,UserHandle.USER_SYSTEM));
  when(mContext.userManager.getUserRestrictions()).thenReturn(new Bundle());
  doReturn(DpmMockContext.CALLER_SYSTEM_USER_UID).when(mContext.packageManager).getPackageUidAsUser(eq(admin1.getPackageName()),anyInt());
  when(mContext.userManager.isUserUnlocked(anyInt())).thenReturn(false);
  try {
    dpm.clearDeviceOwnerApp(admin1.getPackageName());
    fail("Didn't throw IllegalStateException");
  }
 catch (  IllegalStateException expected) {
    MoreAsserts.assertContainsRegex("User must be running and unlocked",expected.getMessage());
  }
  when(mContext.userManager.isUserUnlocked(anyInt())).thenReturn(true);
  reset(mContext.userManagerInternal);
  dpm.clearDeviceOwnerApp(admin1.getPackageName());
  assertNull(dpm.getDeviceOwnerComponentOnAnyUser());
  verify(mContext.userManagerInternal).setDevicePolicyUserRestrictions(eq(UserHandle.USER_SYSTEM),MockUtils.checkUserRestrictions(),MockUtils.checkUserRestrictions());
  assertTrue(dpm.isAdminActive(admin1));
  assertTrue(dpm.isRemovingAdmin(admin1,UserHandle.USER_SYSTEM));
}
