{
  mContext.callerPermissions.add(permission.MANAGE_DEVICE_ADMINS);
  mContext.callerPermissions.add(permission.MANAGE_PROFILE_AND_DEVICE_OWNERS);
  mContext.callerPermissions.add(permission.INTERACT_ACROSS_USERS_FULL);
  mContext.binder.callingUid=DpmMockContext.CALLER_SYSTEM_USER_UID;
  setUpPackageManagerForAdmin(admin1,DpmMockContext.CALLER_SYSTEM_USER_UID);
  dpm.setActiveAdmin(admin1,false,UserHandle.USER_SYSTEM);
  assertTrue(dpm.setDeviceOwner(admin1,"owner-name",UserHandle.USER_SYSTEM));
  DpmTestUtils.assertRestrictions(DpmTestUtils.newRestrictions(),dpms.getDeviceOwnerAdminLocked().ensureUserRestrictions());
  DpmTestUtils.assertRestrictions(DpmTestUtils.newRestrictions(),dpm.getUserRestrictions(admin1));
  reset(mContext.userManagerInternal);
  dpm.addUserRestriction(admin1,UserManager.DISALLOW_ADD_USER);
  verify(mContext.userManagerInternal).setDevicePolicyUserRestrictions(eq(UserHandle.USER_SYSTEM),MockUtils.checkUserRestrictions(),MockUtils.checkUserRestrictions(UserManager.DISALLOW_ADD_USER));
  reset(mContext.userManagerInternal);
  dpm.addUserRestriction(admin1,UserManager.DISALLOW_OUTGOING_CALLS);
  verify(mContext.userManagerInternal).setDevicePolicyUserRestrictions(eq(UserHandle.USER_SYSTEM),MockUtils.checkUserRestrictions(UserManager.DISALLOW_OUTGOING_CALLS),MockUtils.checkUserRestrictions(UserManager.DISALLOW_ADD_USER));
  reset(mContext.userManagerInternal);
  DpmTestUtils.assertRestrictions(DpmTestUtils.newRestrictions(UserManager.DISALLOW_ADD_USER,UserManager.DISALLOW_OUTGOING_CALLS),dpms.getDeviceOwnerAdminLocked().ensureUserRestrictions());
  DpmTestUtils.assertRestrictions(DpmTestUtils.newRestrictions(UserManager.DISALLOW_ADD_USER,UserManager.DISALLOW_OUTGOING_CALLS),dpm.getUserRestrictions(admin1));
  dpm.clearUserRestriction(admin1,UserManager.DISALLOW_ADD_USER);
  verify(mContext.userManagerInternal).setDevicePolicyUserRestrictions(eq(UserHandle.USER_SYSTEM),MockUtils.checkUserRestrictions(UserManager.DISALLOW_OUTGOING_CALLS),MockUtils.checkUserRestrictions());
  reset(mContext.userManagerInternal);
  DpmTestUtils.assertRestrictions(DpmTestUtils.newRestrictions(UserManager.DISALLOW_OUTGOING_CALLS),dpms.getDeviceOwnerAdminLocked().ensureUserRestrictions());
  DpmTestUtils.assertRestrictions(DpmTestUtils.newRestrictions(UserManager.DISALLOW_OUTGOING_CALLS),dpm.getUserRestrictions(admin1));
  dpm.clearUserRestriction(admin1,UserManager.DISALLOW_OUTGOING_CALLS);
  verify(mContext.userManagerInternal).setDevicePolicyUserRestrictions(eq(UserHandle.USER_SYSTEM),MockUtils.checkUserRestrictions(),MockUtils.checkUserRestrictions());
  reset(mContext.userManagerInternal);
  DpmTestUtils.assertRestrictions(DpmTestUtils.newRestrictions(),dpms.getDeviceOwnerAdminLocked().ensureUserRestrictions());
  DpmTestUtils.assertRestrictions(DpmTestUtils.newRestrictions(),dpm.getUserRestrictions(admin1));
  dpm.addUserRestriction(admin1,UserManager.DISALLOW_ADJUST_VOLUME);
  reset(mContext.userManagerInternal);
  dpm.addUserRestriction(admin1,UserManager.DISALLOW_UNMUTE_MICROPHONE);
  verify(mContext.userManagerInternal).setDevicePolicyUserRestrictions(eq(UserHandle.USER_SYSTEM),MockUtils.checkUserRestrictions(),MockUtils.checkUserRestrictions(UserManager.DISALLOW_ADJUST_VOLUME,UserManager.DISALLOW_UNMUTE_MICROPHONE));
  reset(mContext.userManagerInternal);
  dpm.clearUserRestriction(admin1,UserManager.DISALLOW_ADJUST_VOLUME);
  dpm.clearUserRestriction(admin1,UserManager.DISALLOW_UNMUTE_MICROPHONE);
  dpm.addUserRestriction(admin1,UserManager.DISALLOW_ADD_USER);
  verify(mContext.userManagerInternal).setDevicePolicyUserRestrictions(eq(UserHandle.USER_SYSTEM),MockUtils.checkUserRestrictions(),MockUtils.checkUserRestrictions(UserManager.DISALLOW_ADD_USER));
  reset(mContext.userManagerInternal);
  dpm.addUserRestriction(admin1,UserManager.DISALLOW_FUN);
  verify(mContext.userManagerInternal).setDevicePolicyUserRestrictions(eq(UserHandle.USER_SYSTEM),MockUtils.checkUserRestrictions(),MockUtils.checkUserRestrictions(UserManager.DISALLOW_FUN,UserManager.DISALLOW_ADD_USER));
  reset(mContext.userManagerInternal);
  dpm.setCameraDisabled(admin1,true);
  verify(mContext.userManagerInternal).setDevicePolicyUserRestrictions(eq(UserHandle.USER_SYSTEM),MockUtils.checkUserRestrictions(UserManager.DISALLOW_CAMERA),MockUtils.checkUserRestrictions(UserManager.DISALLOW_FUN,UserManager.DISALLOW_CAMERA,UserManager.DISALLOW_ADD_USER));
  reset(mContext.userManagerInternal);
  dpm.setCameraDisabled(admin1,false);
  reset(mContext.userManagerInternal);
  setUpPackageManagerForAdmin(admin2,DpmMockContext.CALLER_SYSTEM_USER_UID);
  dpm.setActiveAdmin(admin2,false,UserHandle.USER_SYSTEM);
  dpm.setCameraDisabled(admin2,true);
  verify(mContext.userManagerInternal).setDevicePolicyUserRestrictions(eq(UserHandle.USER_SYSTEM),MockUtils.checkUserRestrictions(UserManager.DISALLOW_CAMERA),MockUtils.checkUserRestrictions(UserManager.DISALLOW_FUN,UserManager.DISALLOW_ADD_USER));
  reset(mContext.userManagerInternal);
}
