{
  mContext.callerPermissions.add(permission.MANAGE_DEVICE_ADMINS);
  mContext.callerPermissions.add(permission.MANAGE_PROFILE_AND_DEVICE_OWNERS);
  mContext.callerPermissions.add(permission.INTERACT_ACROSS_USERS_FULL);
  mContext.binder.callingUid=DpmMockContext.CALLER_SYSTEM_USER_UID;
  setUpPackageManagerForAdmin(admin1,DpmMockContext.CALLER_SYSTEM_USER_UID);
  dpm.setActiveAdmin(admin1,false,UserHandle.USER_SYSTEM);
  assertTrue(dpm.setDeviceOwner(admin1,"owner-name",UserHandle.USER_SYSTEM));
  dpm.addUserRestriction(admin1,"rest1");
  dpm.addUserRestriction(admin1,"rest2");
  mContext.binder.callingUid=DpmMockContext.CALLER_UID;
  setAsProfileOwner(admin2);
  dpm.addUserRestriction(admin2,"restA");
  dpm.addUserRestriction(admin2,"restB");
  final Bundle in=DpmTestUtils.newRestrictions("abc");
  Bundle actual=dpms.mLocalService.getComposedUserRestrictions(UserHandle.USER_SYSTEM,in);
  DpmTestUtils.assertRestrictions(DpmTestUtils.newRestrictions("abc","rest1","rest2"),actual);
  actual=dpms.mLocalService.getComposedUserRestrictions(DpmMockContext.CALLER_USER_HANDLE,in);
  DpmTestUtils.assertRestrictions(DpmTestUtils.newRestrictions("abc","rest1","rest2","restA","restB"),actual);
  actual=dpms.mLocalService.getComposedUserRestrictions(DpmMockContext.CALLER_USER_HANDLE + 1,in);
  DpmTestUtils.assertRestrictions(DpmTestUtils.newRestrictions("abc","rest1","rest2"),actual);
}
