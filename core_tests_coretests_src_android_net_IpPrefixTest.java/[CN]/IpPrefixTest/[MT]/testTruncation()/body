{
  IpPrefix p;
  p=new IpPrefix(IPV4_BYTES,32);
  assertEquals("192.0.2.4/32",p.toString());
  p=new IpPrefix(IPV4_BYTES,29);
  assertEquals("192.0.2.0/29",p.toString());
  p=new IpPrefix(IPV4_BYTES,8);
  assertEquals("192.0.0.0/8",p.toString());
  p=new IpPrefix(IPV4_BYTES,0);
  assertEquals("0.0.0.0/0",p.toString());
  try {
    p=new IpPrefix(IPV4_BYTES,33);
    fail("Expected IllegalArgumentException: invalid prefix length");
  }
 catch (  RuntimeException expected) {
  }
  try {
    p=new IpPrefix(IPV4_BYTES,128);
    fail("Expected IllegalArgumentException: invalid prefix length");
  }
 catch (  RuntimeException expected) {
  }
  try {
    p=new IpPrefix(IPV4_BYTES,-1);
    fail("Expected IllegalArgumentException: negative prefix length");
  }
 catch (  RuntimeException expected) {
  }
  p=new IpPrefix(IPV6_BYTES,128);
  assertEquals("2001:db8:dead:beef:f00::a0/128",p.toString());
  p=new IpPrefix(IPV6_BYTES,122);
  assertEquals("2001:db8:dead:beef:f00::80/122",p.toString());
  p=new IpPrefix(IPV6_BYTES,64);
  assertEquals("2001:db8:dead:beef::/64",p.toString());
  p=new IpPrefix(IPV6_BYTES,3);
  assertEquals("2000::/3",p.toString());
  p=new IpPrefix(IPV6_BYTES,0);
  assertEquals("::/0",p.toString());
  try {
    p=new IpPrefix(IPV6_BYTES,-1);
    fail("Expected IllegalArgumentException: negative prefix length");
  }
 catch (  RuntimeException expected) {
  }
  try {
    p=new IpPrefix(IPV6_BYTES,129);
    fail("Expected IllegalArgumentException: negative prefix length");
  }
 catch (  RuntimeException expected) {
  }
}
