{
  if (mSettings.getCacheMode() != WebSettings.LOAD_DEFAULT) {
    cacheMode=mSettings.getCacheMode();
  }
  if (method.equals("POST")) {
    if (cacheMode == WebSettings.LOAD_NORMAL) {
      cacheMode=WebSettings.LOAD_NO_CACHE;
    }
    String[] ret=getUsernamePassword();
    if (ret != null) {
      String domUsername=ret[0];
      String domPassword=ret[1];
      maybeSavePassword(postData,domUsername,domPassword);
    }
  }
  boolean isMainFramePage=mIsMainFrame;
  if (DebugFlags.BROWSER_FRAME) {
    Log.v(LOGTAG,"startLoadingResource: url=" + url + ", method="+ method+ ", postData="+ postData+ ", isMainFramePage="+ isMainFramePage+ ", mainResource="+ mainResource+ ", userGesture="+ userGesture);
  }
  LoadListener loadListener=LoadListener.getLoadListener(mContext,this,url,loaderHandle,synchronous,isMainFramePage,mainResource,userGesture,postDataIdentifier,username,password);
  if (LoadListener.getNativeLoaderCount() > MAX_OUTSTANDING_REQUESTS) {
    loadListener.error(android.net.http.EventHandler.ERROR,mContext.getString(com.android.internal.R.string.httpErrorTooManyRequests));
    return loadListener;
  }
  FrameLoader loader=new FrameLoader(loadListener,mSettings,method,mCallbackProxy.shouldInterceptRequest(url));
  loader.setHeaders(headers);
  loader.setPostData(postData);
  loader.setCacheMode(headers.containsKey("If-Modified-Since") || headers.containsKey("If-None-Match") ? WebSettings.LOAD_NO_CACHE : cacheMode);
  loader.executeLoad();
  return !synchronous ? loadListener : null;
}
