{
  log("BluetoothOn process message: " + message.what);
  boolean retValue=HANDLED;
switch (message.what) {
case USER_TURN_OFF:
    if ((Boolean)message.obj) {
      persistSwitchSetting(false);
    }
  if (mBluetoothService.isDiscovering()) {
    mBluetoothService.cancelDiscovery();
  }
if (!mBluetoothService.isApplicationStateChangeTrackerEmpty()) {
  transitionTo(mPerProcessState);
  deferMessage(obtainMessage(TURN_HOT));
  break;
}
case AIRPLANE_MODE_ON:
transitionTo(mSwitching);
broadcastState(BluetoothAdapter.STATE_TURNING_OFF);
if (mBluetoothService.getAdapterConnectionState() != BluetoothAdapter.STATE_DISCONNECTED) {
mBluetoothService.disconnectDevices();
sendMessageDelayed(DEVICES_DISCONNECT_TIMEOUT,DEVICES_DISCONNECT_TIMEOUT_TIME);
}
 else {
mBluetoothService.switchConnectable(false);
}
if (message.what == AIRPLANE_MODE_ON) {
allProcessesCallback(false);
deferMessage(obtainMessage(AIRPLANE_MODE_ON));
}
break;
case AIRPLANE_MODE_OFF:
case USER_TURN_ON:
Log.w(TAG,"BluetoothOn received: " + message.what);
break;
case PER_PROCESS_TURN_ON:
perProcessCallback(true,(IBluetoothStateChangeCallback)message.obj);
break;
case PER_PROCESS_TURN_OFF:
perProcessCallback(false,(IBluetoothStateChangeCallback)message.obj);
break;
default :
return NOT_HANDLED;
}
return retValue;
}
