{
  if (DBG)   log("Switching process message: " + message.what);
  boolean retValue=HANDLED;
switch (message.what) {
case BECAME_PAIRABLE:
    String[] propVal={"Pairable",mBluetoothService.getProperty("Pairable")};
  mEventLoop.onPropertyChanged(propVal);
mBluetoothService.runBluetooth();
transitionTo(mBluetoothOn);
broadcastState(BluetoothAdapter.STATE_ON);
break;
case BECAME_NON_PAIRABLE:
if (mBluetoothService.getAdapterConnectionState() == BluetoothAdapter.STATE_DISCONNECTED) {
transitionTo(mHotOff);
finishSwitchingOff();
}
break;
case ALL_DEVICES_DISCONNECTED:
if (mBluetoothService.getScanMode() == BluetoothAdapter.SCAN_MODE_NONE) {
transitionTo(mHotOff);
finishSwitchingOff();
}
break;
case USER_TURN_ON:
case AIRPLANE_MODE_OFF:
case AIRPLANE_MODE_ON:
case PER_PROCESS_TURN_ON:
case PER_PROCESS_TURN_OFF:
case USER_TURN_OFF:
deferMessage(message);
break;
default :
return NOT_HANDLED;
}
return retValue;
}
