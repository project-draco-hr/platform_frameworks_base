{
  final NetworkStats stats=new NetworkStats(SystemClock.elapsedRealtime(),6);
  final NetworkStats.Entry entry=new NetworkStats.Entry();
  final ArrayList<String> keys=Lists.newArrayList(KEY_IFACE,KEY_ACTIVE,KEY_SNAP_RX_BYTES,KEY_SNAP_RX_PACKETS,KEY_SNAP_TX_BYTES,KEY_SNAP_TX_PACKETS,KEY_RX_BYTES,KEY_RX_PACKETS,KEY_TX_BYTES,KEY_TX_PACKETS);
  final ArrayList<String> values=Lists.newArrayList();
  final HashMap<String,String> parsed=Maps.newHashMap();
  BufferedReader reader=null;
  try {
    reader=new BufferedReader(new FileReader(mStatsXtIfaceAll));
    String line;
    while ((line=reader.readLine()) != null) {
      splitLine(line,values);
      parseLine(keys,values,parsed);
      entry.iface=parsed.get(KEY_IFACE);
      entry.uid=UID_ALL;
      entry.set=SET_DEFAULT;
      entry.tag=TAG_NONE;
      entry.rxBytes=getParsedLong(parsed,KEY_SNAP_RX_BYTES);
      entry.rxPackets=getParsedLong(parsed,KEY_SNAP_RX_PACKETS);
      entry.txBytes=getParsedLong(parsed,KEY_SNAP_TX_BYTES);
      entry.txPackets=getParsedLong(parsed,KEY_SNAP_TX_PACKETS);
      final boolean active=getParsedInt(parsed,KEY_ACTIVE) != 0;
      if (active) {
        entry.rxBytes+=getParsedLong(parsed,KEY_RX_BYTES);
        entry.rxPackets+=getParsedLong(parsed,KEY_RX_PACKETS);
        entry.txBytes+=getParsedLong(parsed,KEY_TX_BYTES);
        entry.txPackets+=getParsedLong(parsed,KEY_TX_PACKETS);
      }
      stats.addValues(entry);
    }
  }
 catch (  NullPointerException e) {
    throw new IllegalStateException("problem parsing stats: " + e);
  }
catch (  NumberFormatException e) {
    throw new IllegalStateException("problem parsing stats: " + e);
  }
catch (  IOException e) {
    throw new IllegalStateException("problem parsing stats: " + e);
  }
 finally {
    IoUtils.closeQuietly(reader);
  }
  return stats;
}
