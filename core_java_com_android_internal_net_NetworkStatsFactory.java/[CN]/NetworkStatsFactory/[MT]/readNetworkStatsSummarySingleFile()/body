{
  final StrictMode.ThreadPolicy savedPolicy=StrictMode.allowThreadDiskReads();
  final NetworkStats stats=new NetworkStats(SystemClock.elapsedRealtime(),6);
  final NetworkStats.Entry entry=new NetworkStats.Entry();
  ProcFileReader reader=null;
  try {
    reader=new ProcFileReader(new FileInputStream(mStatsXtIfaceAll));
    while (reader.hasMoreData()) {
      entry.iface=reader.nextString();
      entry.uid=UID_ALL;
      entry.set=SET_ALL;
      entry.tag=TAG_NONE;
      final boolean active=reader.nextInt() != 0;
      entry.rxBytes=reader.nextLong();
      entry.rxPackets=reader.nextLong();
      entry.txBytes=reader.nextLong();
      entry.txPackets=reader.nextLong();
      if (active) {
        entry.rxBytes+=reader.nextLong();
        entry.rxPackets+=reader.nextLong();
        entry.txBytes+=reader.nextLong();
        entry.txPackets+=reader.nextLong();
      }
      stats.addValues(entry);
      reader.finishLine();
    }
  }
 catch (  NullPointerException e) {
    throw new IllegalStateException("problem parsing stats: " + e);
  }
catch (  NumberFormatException e) {
    throw new IllegalStateException("problem parsing stats: " + e);
  }
catch (  IOException e) {
    throw new IllegalStateException("problem parsing stats: " + e);
  }
 finally {
    IoUtils.closeQuietly(reader);
    StrictMode.setThreadPolicy(savedPolicy);
  }
  return stats;
}
