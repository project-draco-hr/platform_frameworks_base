{
  final StrictMode.ThreadPolicy savedPolicy=StrictMode.allowThreadDiskReads();
  final NetworkStats stats=new NetworkStats(SystemClock.elapsedRealtime(),6);
  final NetworkStats.Entry entry=new NetworkStats.Entry();
  final HashSet<String> knownIfaces=Sets.newHashSet();
  final HashSet<String> activeIfaces=Sets.newHashSet();
  for (  String iface : fileListWithoutNull(mStatsXtIface)) {
    final File ifacePath=new File(mStatsXtIface,iface);
    final long active=readSingleLongFromFile(new File(ifacePath,"active"));
    if (active == 1) {
      knownIfaces.add(iface);
      activeIfaces.add(iface);
    }
 else     if (active == 0) {
      knownIfaces.add(iface);
    }
 else {
      continue;
    }
    entry.iface=iface;
    entry.uid=UID_ALL;
    entry.set=SET_ALL;
    entry.tag=TAG_NONE;
    entry.rxBytes=readSingleLongFromFile(new File(ifacePath,"rx_bytes"));
    entry.rxPackets=readSingleLongFromFile(new File(ifacePath,"rx_packets"));
    entry.txBytes=readSingleLongFromFile(new File(ifacePath,"tx_bytes"));
    entry.txPackets=readSingleLongFromFile(new File(ifacePath,"tx_packets"));
    stats.addValues(entry);
  }
  final ArrayList<String> values=Lists.newArrayList();
  BufferedReader reader=null;
  try {
    reader=new BufferedReader(new FileReader(mStatsIface));
    reader.readLine();
    reader.readLine();
    String line;
    while ((line=reader.readLine()) != null) {
      splitLine(line,values);
      try {
        entry.iface=values.get(0);
        entry.uid=UID_ALL;
        entry.set=SET_ALL;
        entry.tag=TAG_NONE;
        entry.rxBytes=Long.parseLong(values.get(1));
        entry.rxPackets=Long.parseLong(values.get(2));
        entry.txBytes=Long.parseLong(values.get(9));
        entry.txPackets=Long.parseLong(values.get(10));
        if (activeIfaces.contains(entry.iface)) {
          stats.combineValues(entry);
        }
 else         if (!knownIfaces.contains(entry.iface)) {
          stats.addValues(entry);
        }
      }
 catch (      NumberFormatException e) {
        Slog.w(TAG,"problem parsing stats row '" + line + "': "+ e);
      }
    }
  }
 catch (  NullPointerException e) {
    throw new IllegalStateException("problem parsing stats: " + e);
  }
catch (  NumberFormatException e) {
    throw new IllegalStateException("problem parsing stats: " + e);
  }
catch (  IOException e) {
    throw new IllegalStateException("problem parsing stats: " + e);
  }
 finally {
    IoUtils.closeQuietly(reader);
    StrictMode.setThreadPolicy(savedPolicy);
  }
  return stats;
}
