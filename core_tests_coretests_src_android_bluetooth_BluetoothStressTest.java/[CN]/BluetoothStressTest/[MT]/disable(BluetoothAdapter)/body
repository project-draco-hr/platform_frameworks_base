{
  int mask=STATE_TURNING_OFF_FLAG | STATE_OFF_FLAG | SCAN_MODE_NONE_FLAG;
  mReceiver.resetFiredFlags();
  int state=adapter.getState();
switch (state) {
case BluetoothAdapter.STATE_OFF:
    assertFalse(adapter.isEnabled());
  return;
case BluetoothAdapter.STATE_ON:
assertTrue(adapter.isEnabled());
assertTrue(adapter.disable());
break;
case BluetoothAdapter.STATE_TURNING_ON:
assertFalse(adapter.isEnabled());
assertTrue(adapter.disable());
break;
case BluetoothAdapter.STATE_TURNING_OFF:
assertFalse(adapter.isEnabled());
mask=0;
break;
default :
fail("disable() invalid state: " + state);
}
long s=System.currentTimeMillis();
while (System.currentTimeMillis() - s < DISABLE_TIMEOUT) {
state=adapter.getState();
if (state == BluetoothAdapter.STATE_OFF) {
assertFalse(adapter.isEnabled());
if ((mReceiver.getFiredFlags() & mask) == mask) {
mReceiver.resetFiredFlags();
return;
}
}
 else {
assertFalse(adapter.isEnabled());
assertEquals(BluetoothAdapter.STATE_TURNING_OFF,state);
}
sleep(POLL_TIME);
}
int firedFlags=mReceiver.getFiredFlags();
mReceiver.resetFiredFlags();
fail("disable() timeout: " + "state=" + state + " (expected "+ BluetoothAdapter.STATE_OFF+ ") "+ "flags="+ firedFlags+ " (expected "+ mask+ ")");
}
