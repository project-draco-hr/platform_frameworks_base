{
  final Handler handler;
  if (mCallbackMap.size() > 0) {
    handler=mCallbackMap.valueAt(0);
  }
 else   if (mTorchCallbackMap.size() > 0) {
    handler=mTorchCallbackMap.valueAt(0);
  }
 else {
    return;
  }
  if (DEBUG) {
    Log.v(TAG,"Reconnecting Camera Service in " + CAMERA_SERVICE_RECONNECT_DELAY_MS + " ms");
  }
  handler.postDelayed(new Runnable(){
    @Override public void run(){
      ICameraService cameraService=getCameraService();
      if (cameraService == null) {
synchronized (mLock) {
          if (DEBUG) {
            Log.v(TAG,"Reconnecting Camera Service failed.");
          }
          scheduleCameraServiceReconnectionLocked();
        }
      }
    }
  }
,CAMERA_SERVICE_RECONNECT_DELAY_MS);
}
