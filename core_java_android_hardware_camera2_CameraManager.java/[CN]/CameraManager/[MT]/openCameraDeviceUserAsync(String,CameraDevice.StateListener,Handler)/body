{
  CameraCharacteristics characteristics=getCameraCharacteristics(cameraId);
  CameraDevice device=null;
  try {
synchronized (mLock) {
      ICameraDeviceUser cameraUser=null;
      android.hardware.camera2.impl.CameraDeviceImpl deviceImpl=new android.hardware.camera2.impl.CameraDeviceImpl(cameraId,listener,handler,characteristics);
      BinderHolder holder=new BinderHolder();
      ICameraDeviceCallbacks callbacks=deviceImpl.getCallbacks();
      int id=Integer.parseInt(cameraId);
      try {
        mCameraService.connectDevice(callbacks,id,mContext.getPackageName(),USE_CALLING_UID,holder);
        cameraUser=ICameraDeviceUser.Stub.asInterface(holder.getBinder());
      }
 catch (      CameraRuntimeException e) {
        if (e.getReason() == CameraAccessException.CAMERA_DEPRECATED_HAL) {
          Log.i(TAG,"Using legacy camera HAL.");
          cameraUser=CameraDeviceUserShim.connectBinderShim(callbacks,id);
        }
 else         if (e.getReason() == CameraAccessException.CAMERA_IN_USE || e.getReason() == CameraAccessException.MAX_CAMERAS_IN_USE || e.getReason() == CameraAccessException.CAMERA_DISABLED || e.getReason() == CameraAccessException.CAMERA_DISCONNECTED || e.getReason() == CameraAccessException.CAMERA_ERROR) {
          deviceImpl.setRemoteFailure(e);
          if (e.getReason() == CameraAccessException.CAMERA_DISABLED || e.getReason() == CameraAccessException.CAMERA_DISCONNECTED) {
            throw e;
          }
        }
 else {
          throw e;
        }
      }
      deviceImpl.setRemoteDevice(cameraUser);
      device=deviceImpl;
    }
  }
 catch (  NumberFormatException e) {
    throw new IllegalArgumentException("Expected cameraId to be numeric, but it was: " + cameraId);
  }
catch (  CameraRuntimeException e) {
    throw e.asChecked();
  }
catch (  RemoteException e) {
  }
  return device;
}
