{
  CameraCharacteristics characteristics=null;
synchronized (mLock) {
    if (!getOrCreateDeviceIdListLocked().contains(cameraId)) {
      throw new IllegalArgumentException(String.format("Camera id %s does not match any" + " currently connected camera device",cameraId));
    }
    int id=Integer.valueOf(cameraId);
    ICameraService cameraService=CameraManagerGlobal.get().getCameraService();
    if (cameraService == null) {
      throw new CameraAccessException(CameraAccessException.CAMERA_DISCONNECTED,"Camera service is currently unavailable");
    }
    try {
      if (!supportsCamera2ApiLocked(cameraId)) {
        String[] outParameters=new String[1];
        cameraService.getLegacyParameters(id,outParameters);
        String parameters=outParameters[0];
        CameraInfo info=new CameraInfo();
        cameraService.getCameraInfo(id,info);
        characteristics=LegacyMetadataMapper.createCharacteristics(parameters,info);
      }
 else {
        CameraMetadataNative info=new CameraMetadataNative();
        cameraService.getCameraCharacteristics(id,info);
        characteristics=new CameraCharacteristics(info);
      }
    }
 catch (    CameraRuntimeException e) {
      throw e.asChecked();
    }
catch (    RemoteException e) {
      throw new CameraAccessException(CameraAccessException.CAMERA_DISCONNECTED,"Camera service is currently unavailable",e);
    }
  }
  return characteristics;
}
