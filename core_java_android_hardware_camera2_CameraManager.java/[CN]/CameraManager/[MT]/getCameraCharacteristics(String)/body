{
synchronized (mLock) {
    if (!getOrCreateDeviceIdListLocked().contains(cameraId)) {
      throw new IllegalArgumentException(String.format("Camera id %s does not match any" + " currently connected camera device",cameraId));
    }
  }
  int id=Integer.valueOf(cameraId);
  if (!supportsCamera2Api(cameraId)) {
    String[] outParameters=new String[1];
    try {
      mCameraService.getLegacyParameters(id,outParameters);
      String parameters=outParameters[0];
      CameraInfo info=new CameraInfo();
      mCameraService.getCameraInfo(id,info);
      return LegacyMetadataMapper.createCharacteristics(parameters,info);
    }
 catch (    RemoteException e) {
      return null;
    }
catch (    CameraRuntimeException e) {
      throw e.asChecked();
    }
  }
 else {
    CameraMetadataNative info=new CameraMetadataNative();
    try {
      mCameraService.getCameraCharacteristics(id,info);
    }
 catch (    CameraRuntimeException e) {
      throw e.asChecked();
    }
catch (    RemoteException e) {
      return null;
    }
    return new CameraCharacteristics(info);
  }
}
