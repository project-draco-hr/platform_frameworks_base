{
  if (!isOpen()) {
    throw new IllegalStateException("database not open");
  }
  if (!mLock.isHeldByCurrentThread()) {
    throw new IllegalStateException("no transaction pending");
  }
  try {
    if (mInnerTransactionIsSuccessful) {
      mInnerTransactionIsSuccessful=false;
    }
 else {
      mTransactionIsSuccessful=false;
    }
    if (mLock.getHoldCount() != 1) {
      return;
    }
    RuntimeException savedException=null;
    if (mTransactionListener != null) {
      try {
        if (mTransactionIsSuccessful) {
          mTransactionListener.onCommit();
        }
 else {
          mTransactionListener.onRollback();
        }
      }
 catch (      RuntimeException e) {
        savedException=e;
        mTransactionIsSuccessful=false;
      }
    }
    if (mTransactionIsSuccessful) {
      execSQL(COMMIT_SQL);
    }
 else {
      try {
        execSQL("ROLLBACK;");
        if (savedException != null) {
          throw savedException;
        }
      }
 catch (      SQLException e) {
        if (Config.LOGD) {
          Log.d(TAG,"exception during rollback, maybe the DB previously " + "performed an auto-rollback");
        }
      }
    }
  }
  finally {
    mTransactionListener=null;
    unlockForced();
    if (Config.LOGV) {
      Log.v(TAG,"unlocked " + Thread.currentThread() + ", holdCount is "+ mLock.getHoldCount());
    }
  }
}
