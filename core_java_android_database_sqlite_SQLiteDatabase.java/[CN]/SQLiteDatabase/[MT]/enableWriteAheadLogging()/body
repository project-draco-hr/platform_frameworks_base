{
synchronized (mLock) {
    throwIfNotOpenLocked();
    if (mIsWALEnabledLocked) {
      return true;
    }
    if (isReadOnlyLocked()) {
      return false;
    }
    if (mConfigurationLocked.isInMemoryDb()) {
      Log.i(TAG,"can't enable WAL for memory databases.");
      return false;
    }
    if (mHasAttachedDbsLocked) {
      if (Log.isLoggable(TAG,Log.DEBUG)) {
        Log.d(TAG,"this database: " + mConfigurationLocked.label + " has attached databases. can't  enable WAL.");
      }
      return false;
    }
    final int oldMaxConnectionPoolSize=mConfigurationLocked.maxConnectionPoolSize;
    final String oldSyncMode=mConfigurationLocked.syncMode;
    final String oldJournalMode=mConfigurationLocked.journalMode;
    mConfigurationLocked.maxConnectionPoolSize=SQLiteGlobal.getWALConnectionPoolSize();
    mConfigurationLocked.syncMode=SQLiteGlobal.getWALSyncMode();
    mConfigurationLocked.journalMode="WAL";
    try {
      mConnectionPoolLocked.reconfigure(mConfigurationLocked);
    }
 catch (    RuntimeException ex) {
      mConfigurationLocked.maxConnectionPoolSize=oldMaxConnectionPoolSize;
      mConfigurationLocked.syncMode=oldSyncMode;
      mConfigurationLocked.journalMode=oldJournalMode;
      throw ex;
    }
    mIsWALEnabledLocked=true;
  }
  return true;
}
