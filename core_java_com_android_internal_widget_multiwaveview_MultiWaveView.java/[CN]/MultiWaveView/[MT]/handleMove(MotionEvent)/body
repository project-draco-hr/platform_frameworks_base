{
  if (!mDragging) {
    return;
  }
  int activeTarget=-1;
  final int historySize=event.getHistorySize();
  for (int k=0; k < historySize + 1; k++) {
    float x=k < historySize ? event.getHistoricalX(k) : event.getX();
    float y=k < historySize ? event.getHistoricalY(k) : event.getY();
    float tx=x - mWaveCenterX;
    float ty=y - mWaveCenterY;
    float touchRadius=(float)Math.sqrt(dist2(tx,ty));
    final float scale=touchRadius > mOuterRadius ? mOuterRadius / touchRadius : 1.0f;
    float limitX=mWaveCenterX + tx * scale;
    float limitY=mWaveCenterY + ty * scale;
    boolean singleTarget=mTargetDrawables.size() == 1;
    if (singleTarget) {
      float snapRadius=mOuterRadius - mSnapMargin;
      if (touchRadius > snapRadius) {
        activeTarget=0;
        x=limitX;
        y=limitY;
      }
    }
 else {
      float best=Float.MAX_VALUE;
      final float hitRadius2=mHitRadius * mHitRadius;
      for (int i=0; i < mTargetDrawables.size(); i++) {
        TargetDrawable target=mTargetDrawables.get(i);
        float dx=limitX - target.getX();
        float dy=limitY - target.getY();
        float dist2=dx * dx + dy * dy;
        if (target.isValid() && dist2 < hitRadius2 && dist2 < best) {
          activeTarget=i;
          best=dist2;
        }
      }
      x=limitX;
      y=limitY;
    }
    if (activeTarget != -1) {
      switchToState(STATE_SNAP,x,y);
      float newX=singleTarget ? limitX : mTargetDrawables.get(activeTarget).getX();
      float newY=singleTarget ? limitY : mTargetDrawables.get(activeTarget).getY();
      moveHandleTo(newX,newY,false);
      TargetDrawable currentTarget=mTargetDrawables.get(activeTarget);
      if (currentTarget.hasState(TargetDrawable.STATE_FOCUSED)) {
        currentTarget.setState(TargetDrawable.STATE_FOCUSED);
        mHandleDrawable.setAlpha(0.0f);
      }
    }
 else {
      switchToState(STATE_TRACKING,x,y);
      moveHandleTo(x,y,false);
      mHandleDrawable.setAlpha(1.0f);
    }
  }
  invalidateGlobalRegion(mHandleDrawable);
  if (mActiveTarget != activeTarget && activeTarget != -1) {
    vibrate();
  }
  mActiveTarget=activeTarget;
}
