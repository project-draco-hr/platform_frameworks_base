{
  int activeTarget=-1;
  final int historySize=event.getHistorySize();
  ArrayList<TargetDrawable> targets=mTargetDrawables;
  int ntargets=targets.size();
  final boolean singleTarget=ntargets == 1;
  float x=0.0f;
  float y=0.0f;
  for (int k=0; k < historySize + 1; k++) {
    float eventX=k < historySize ? event.getHistoricalX(k) : event.getX();
    float eventY=k < historySize ? event.getHistoricalY(k) : event.getY();
    float tx=eventX - mWaveCenterX;
    float ty=eventY - mWaveCenterY;
    float touchRadius=(float)Math.sqrt(dist2(tx,ty));
    final float scale=touchRadius > mOuterRadius ? mOuterRadius / touchRadius : 1.0f;
    float limitX=tx * scale;
    float limitY=ty * scale;
    if (!mDragging) {
      trySwitchToFirstTouchState(eventX,eventY);
    }
    if (mDragging) {
      if (singleTarget) {
        float snapRadius=mOuterRadius - mSnapMargin;
        if (touchRadius > snapRadius) {
          activeTarget=0;
        }
      }
 else {
        float best=Float.MAX_VALUE;
        final float hitRadius2=mHitRadius * mHitRadius;
        for (int i=0; i < ntargets; i++) {
          TargetDrawable target=targets.get(i);
          float dx=limitX - target.getX();
          float dy=limitY - target.getY();
          float dist2=dx * dx + dy * dy;
          if (target.isEnabled() && dist2 < hitRadius2 && dist2 < best) {
            activeTarget=i;
            best=dist2;
          }
        }
      }
    }
    x=limitX;
    y=limitY;
  }
  if (!mDragging) {
    return;
  }
  if (activeTarget != -1) {
    switchToState(STATE_SNAP,x,y);
    TargetDrawable target=targets.get(activeTarget);
    final float newX=singleTarget ? x : target.getX();
    final float newY=singleTarget ? y : target.getY();
    moveHandleTo(newX,newY,false);
  }
 else {
    switchToState(STATE_TRACKING,x,y);
    moveHandleTo(x,y,false);
  }
  invalidateGlobalRegion(mHandleDrawable);
  if (mActiveTarget != activeTarget) {
    if (mActiveTarget != -1) {
      TargetDrawable target=targets.get(mActiveTarget);
      if (target.hasState(TargetDrawable.STATE_FOCUSED)) {
        target.setState(TargetDrawable.STATE_INACTIVE);
      }
    }
    if (activeTarget != -1) {
      TargetDrawable target=targets.get(activeTarget);
      if (target.hasState(TargetDrawable.STATE_FOCUSED)) {
        target.setState(TargetDrawable.STATE_FOCUSED);
      }
      if (AccessibilityManager.getInstance(mContext).isEnabled()) {
        String targetContentDescription=getTargetDescription(activeTarget);
        announceText(targetContentDescription);
      }
      activateHandle(0,0,0.0f,null);
    }
 else {
      activateHandle(0,0,1.0f,null);
    }
  }
  mActiveTarget=activeTarget;
}
