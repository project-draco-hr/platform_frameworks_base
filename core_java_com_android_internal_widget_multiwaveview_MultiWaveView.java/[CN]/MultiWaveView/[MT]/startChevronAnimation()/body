{
  final float r=mHandleDrawable.getWidth() * 0.4f;
  final float chevronAnimationDistance=mOuterRadius * 0.8f;
  final float from[][]={{mWaveCenterX - r,mWaveCenterY},{mWaveCenterX + r,mWaveCenterY},{mWaveCenterX,mWaveCenterY - r},{mWaveCenterX,mWaveCenterY + r}};
  final float to[][]={{mWaveCenterX - chevronAnimationDistance,mWaveCenterY},{mWaveCenterX + chevronAnimationDistance,mWaveCenterY},{mWaveCenterX,mWaveCenterY - chevronAnimationDistance},{mWaveCenterX,mWaveCenterY + chevronAnimationDistance}};
  mChevronAnimations.clear();
  for (int direction=0; direction < 4; direction++) {
    for (int count=0; count < mFeedbackCount; count++) {
      int delay=count * CHEVRON_INCREMENTAL_DELAY;
      final TargetDrawable icon=mChevronDrawables.get(direction * mFeedbackCount + count);
      if (icon == null) {
        continue;
      }
      mChevronAnimations.add(Tweener.to(icon,CHEVRON_ANIMATION_DURATION,"ease",mChevronAnimationInterpolator,"delay",delay,"x",new float[]{from[direction][0],to[direction][0]},"y",new float[]{from[direction][1],to[direction][1]},"alpha",new float[]{1.0f,0.0f},"onUpdate",mUpdateListener));
    }
  }
}
