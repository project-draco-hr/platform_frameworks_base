{
synchronized (mLock) {
    if (!mAvailable) {
      Slog.e(TAG,"Starting new runnable but context is unavailable > Error.");
      return false;
    }
    mPreferredUid=NO_PREFERRED_UID;
    mRunningJob=job;
    final boolean isDeadlineExpired=job.hasDeadlineConstraint() && (job.getLatestRunTimeElapsed() < SystemClock.elapsedRealtime());
    Uri[] triggeredUris=null;
    if (job.changedUris != null) {
      triggeredUris=new Uri[job.changedUris.size()];
      job.changedUris.toArray(triggeredUris);
    }
    String[] triggeredAuthorities=null;
    if (job.changedAuthorities != null) {
      triggeredAuthorities=new String[job.changedAuthorities.size()];
      job.changedAuthorities.toArray(triggeredAuthorities);
    }
    mParams=new JobParameters(this,job.getJobId(),job.getExtras(),isDeadlineExpired,triggeredUris,triggeredAuthorities);
    mExecutionStartTimeElapsed=SystemClock.elapsedRealtime();
    mVerb=VERB_BINDING;
    scheduleOpTimeOut();
    final Intent intent=new Intent().setComponent(job.getServiceComponent());
    boolean binding=mContext.bindServiceAsUser(intent,this,Context.BIND_AUTO_CREATE | Context.BIND_NOT_FOREGROUND,new UserHandle(job.getUserId()));
    if (!binding) {
      if (DEBUG) {
        Slog.d(TAG,job.getServiceComponent().getShortClassName() + " unavailable.");
      }
      mRunningJob=null;
      mParams=null;
      mExecutionStartTimeElapsed=0L;
      mVerb=VERB_FINISHED;
      removeOpTimeOut();
      return false;
    }
    try {
      mBatteryStats.noteJobStart(job.getName(),job.getSourceUid());
    }
 catch (    RemoteException e) {
    }
    mAvailable=false;
    return true;
  }
}
