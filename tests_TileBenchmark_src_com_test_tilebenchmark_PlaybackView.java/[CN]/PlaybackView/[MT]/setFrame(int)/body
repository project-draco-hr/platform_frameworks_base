{
  if (mProfData == null || mProfData.frames.length == 0) {
    return 0;
  }
  int readyTiles=0, unreadyTiles=0, unplacedTiles=0, numInvals=0;
  mTempShapes.clear();
  mRenderStrings.clear();
  for (  TileData t : mProfData.frames[frame]) {
    if (t == mProfData.frames[frame][0]) {
      mRenderStrings.add(tileString(R.string.format_view_pos,t));
    }
 else     if (t.level != INVAL_FLAG) {
      int colorId;
      if (t.isReady) {
        readyTiles++;
        colorId=R.color.ready_tile;
      }
 else {
        unreadyTiles++;
        colorId=R.color.unready_tile;
      }
      if (t.left < 0 || t.top < 0) {
        unplacedTiles++;
      }
      mTempShapes.add(new TileDrawable(t,colorId));
    }
 else {
      numInvals++;
      mRenderStrings.add(tileString(R.string.format_inval_pos,t));
    }
  }
  int invalId=0;
  for (  TileData t : mProfData.frames[frame]) {
    if (t.level == INVAL_FLAG && t != mProfData.frames[frame][0]) {
      TileDrawable invalShape=new TileDrawable(t,R.color.inval_region_start);
      ValueAnimator tileAnimator=ObjectAnimator.ofInt(invalShape,"color",getResources().getColor(R.color.inval_region_start),getResources().getColor(R.color.inval_region_stop));
      tileAnimator.setDuration(numInvals * INVAL_CYCLE);
      tileAnimator.setEvaluator(new ArgbEvaluator());
      tileAnimator.setRepeatCount(ValueAnimator.INFINITE);
      tileAnimator.setRepeatMode(ValueAnimator.RESTART);
      float delay=(float)(invalId) * INVAL_CYCLE;
      tileAnimator.setStartDelay((int)delay);
      invalId++;
      tileAnimator.start();
      mTempShapes.add(invalShape);
    }
  }
  mRenderStrings.add(statString(R.string.ready_tiles,readyTiles));
  mRenderStrings.add(statString(R.string.unready_tiles,unreadyTiles));
  mRenderStrings.add(statString(R.string.unplaced_tiles,unplacedTiles));
  mRenderStrings.add(statString(R.string.number_invalidates,numInvals));
  TileDrawable viewShape=new TileDrawable(mProfData.frames[frame][0],R.color.view);
  mTempShapes.add(viewShape);
  this.invalidate();
  return frame;
}
