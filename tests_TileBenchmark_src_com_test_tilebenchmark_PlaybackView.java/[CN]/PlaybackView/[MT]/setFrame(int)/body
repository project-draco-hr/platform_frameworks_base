{
  if (mProfData == null || mProfData.length == 0) {
    return 0;
  }
  int readyTiles=0, unreadyTiles=0, unplacedTiles=0;
  mTempShapes.clear();
  for (int tileID=2; tileID < mProfData[frame].length; tileID++) {
    TileData t=mProfData[frame][tileID];
    mTempShapes.add(new TileDrawable(t));
    if (t.isReady) {
      readyTiles++;
    }
 else {
      unreadyTiles++;
    }
    if (t.x < 0 || t.y < 0) {
      unplacedTiles++;
    }
  }
  mRenderStrings[0]=getResources().getString(R.string.format_stat_name,getResources().getString(R.string.ready_tiles),readyTiles);
  mRenderStrings[1]=getResources().getString(R.string.format_stat_name,getResources().getString(R.string.unready_tiles),unreadyTiles);
  mRenderStrings[2]=getResources().getString(R.string.format_stat_name,getResources().getString(R.string.unplaced_tiles),unplacedTiles);
  ShapeDrawable viewShape=new ShapeDrawable();
  viewShape.getPaint().setColor(0xff0000ff);
  viewShape.setAlpha(64);
  viewShape.setBounds(mProfData[frame][0].x,mProfData[frame][0].y,mProfData[frame][1].x,mProfData[frame][1].y);
  mTempShapes.add(viewShape);
  this.invalidate();
  return frame;
}
