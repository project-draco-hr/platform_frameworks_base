{
  if (mHealthDevices.get(device) == null) {
    mHealthDevices.put(device,BluetoothHealth.STATE_DISCONNECTED);
  }
  int currDeviceState=mHealthDevices.get(device);
  int newDeviceState=convertState(newChannelState);
  if (currDeviceState != newDeviceState) {
    List<HealthChannel> chan;
switch (currDeviceState) {
case BluetoothHealth.STATE_DISCONNECTED:
      updateAndsendIntent(device,currDeviceState,newDeviceState);
    break;
case BluetoothHealth.STATE_CONNECTING:
  if (newDeviceState == BluetoothHealth.STATE_CONNECTED) {
    updateAndsendIntent(device,currDeviceState,newDeviceState);
  }
 else {
    chan=findChannelByStates(device,new int[]{BluetoothHealth.STATE_CHANNEL_CONNECTING,BluetoothHealth.STATE_CHANNEL_DISCONNECTING});
    if (chan.isEmpty()) {
      updateAndsendIntent(device,currDeviceState,newDeviceState);
    }
  }
break;
case BluetoothHealth.STATE_CONNECTED:
chan=findChannelByStates(device,new int[]{BluetoothHealth.STATE_CHANNEL_CONNECTING,BluetoothHealth.STATE_CHANNEL_CONNECTED});
if (chan.isEmpty()) {
updateAndsendIntent(device,currDeviceState,newDeviceState);
}
case BluetoothHealth.STATE_DISCONNECTING:
chan=findChannelByStates(device,new int[]{BluetoothHealth.STATE_CHANNEL_CONNECTING,BluetoothHealth.STATE_CHANNEL_DISCONNECTING});
if (chan.isEmpty()) {
updateAndsendIntent(device,currDeviceState,newDeviceState);
}
break;
}
}
}
