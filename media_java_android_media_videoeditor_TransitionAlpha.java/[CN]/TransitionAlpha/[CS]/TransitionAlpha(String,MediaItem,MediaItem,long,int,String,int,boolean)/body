{
  super(transitionId,afterMediaItem,beforeMediaItem,durationMs,behavior);
  final BitmapFactory.Options dbo=new BitmapFactory.Options();
  dbo.inJustDecodeBounds=true;
  if (!new File(maskFilename).exists())   throw new IllegalArgumentException("File not Found " + maskFilename);
  BitmapFactory.decodeFile(maskFilename,dbo);
  mWidth=dbo.outWidth;
  mHeight=dbo.outHeight;
  if (afterMediaItem != null) {
    mNativeHelper=afterMediaItem.getNativeContext();
  }
 else {
    mNativeHelper=beforeMediaItem.getNativeContext();
  }
  mRGBMaskFile=String.format(mNativeHelper.getProjectPath() + "/" + "mask"+ transitionId+ ".rgb");
  FileOutputStream fl=null;
  try {
    fl=new FileOutputStream(mRGBMaskFile);
  }
 catch (  IOException e) {
  }
  final DataOutputStream dos=new DataOutputStream(fl);
  if (fl != null) {
    Bitmap imageBitmap=BitmapFactory.decodeFile(maskFilename);
    final int[] framingBuffer=new int[mWidth];
    ByteBuffer byteBuffer=ByteBuffer.allocate(framingBuffer.length * 4);
    IntBuffer intBuffer;
    byte[] array=byteBuffer.array();
    int tmp=0;
    while (tmp < mHeight) {
      imageBitmap.getPixels(framingBuffer,0,mWidth,0,tmp,mWidth,1);
      intBuffer=byteBuffer.asIntBuffer();
      intBuffer.put(framingBuffer,0,mWidth);
      try {
        dos.write(array);
      }
 catch (      IOException e) {
      }
      tmp+=1;
    }
    imageBitmap.recycle();
    try {
      fl.close();
    }
 catch (    IOException e) {
    }
  }
  mMaskFilename=maskFilename;
  mBlendingPercent=blendingPercent;
  mIsInvert=invert;
}
