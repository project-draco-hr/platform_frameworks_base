{
  String propName=property.mPropertyName;
  final Map<String,Collection<String>> paramMap=property.mParameterMap;
  final List<String> propValueList=property.mPropertyValueList;
  byte[] propBytes=property.mPropertyBytes;
  if (propValueList.size() == 0) {
    return;
  }
  final String propValue=listToString(propValueList).trim();
  if (propName.equals(Constants.PROPERTY_VERSION)) {
  }
 else   if (propName.equals(Constants.PROPERTY_FN)) {
    mFullName=propValue;
  }
 else   if (propName.equals(Constants.PROPERTY_NAME) && mFullName == null) {
    mFullName=propValue;
  }
 else   if (propName.equals(Constants.PROPERTY_N)) {
    handleNProperty(propValueList);
  }
 else   if (propName.equals(Constants.PROPERTY_NICKNAME)) {
    mPhoneticFullName=propValue;
  }
 else   if (propName.equals(Constants.PROPERTY_NICKNAME) || propName.equals(Constants.ImportOnly.PROPERTY_X_NICKNAME)) {
    addNickName(propValue);
  }
 else   if (propName.equals(Constants.PROPERTY_SOUND)) {
    Collection<String> typeCollection=paramMap.get(Constants.ATTR_TYPE);
    if (typeCollection != null && typeCollection.contains(Constants.ATTR_TYPE_X_IRMC_N)) {
      final List<String> phoneticNameList=VCardUtils.constructListFromValue(propValue,VCardConfig.isV30(mVCardType));
      handlePhoneticNameFromSound(phoneticNameList);
    }
 else {
    }
  }
 else   if (propName.equals(Constants.PROPERTY_ADR)) {
    boolean valuesAreAllEmpty=true;
    for (    String value : propValueList) {
      if (value.length() > 0) {
        valuesAreAllEmpty=false;
        break;
      }
    }
    if (valuesAreAllEmpty) {
      return;
    }
    int type=-1;
    String label="";
    boolean isPrimary=false;
    Collection<String> typeCollection=paramMap.get(Constants.ATTR_TYPE);
    if (typeCollection != null) {
      for (      String typeString : typeCollection) {
        typeString=typeString.toUpperCase();
        if (typeString.equals(Constants.ATTR_TYPE_PREF)) {
          isPrimary=true;
        }
 else         if (typeString.equals(Constants.ATTR_TYPE_HOME)) {
          type=StructuredPostal.TYPE_HOME;
          label="";
        }
 else         if (typeString.equals(Constants.ATTR_TYPE_WORK) || typeString.equalsIgnoreCase(Constants.ATTR_EXTRA_TYPE_COMPANY)) {
          type=StructuredPostal.TYPE_WORK;
          label="";
        }
 else         if (typeString.equals(Constants.ATTR_ADR_TYPE_PARCEL) || typeString.equals(Constants.ATTR_ADR_TYPE_DOM) || typeString.equals(Constants.ATTR_ADR_TYPE_INTL)) {
        }
 else {
          if (typeString.startsWith("X-") && type < 0) {
            typeString=typeString.substring(2);
          }
          type=StructuredPostal.TYPE_CUSTOM;
          label=typeString;
        }
      }
    }
    if (type < 0) {
      type=StructuredPostal.TYPE_HOME;
    }
    addPostal(type,propValueList,label,isPrimary);
  }
 else   if (propName.equals(Constants.PROPERTY_EMAIL)) {
    int type=-1;
    String label=null;
    boolean isPrimary=false;
    Collection<String> typeCollection=paramMap.get(Constants.ATTR_TYPE);
    if (typeCollection != null) {
      for (      String typeString : typeCollection) {
        typeString=typeString.toUpperCase();
        if (typeString.equals(Constants.ATTR_TYPE_PREF)) {
          isPrimary=true;
        }
 else         if (typeString.equals(Constants.ATTR_TYPE_HOME)) {
          type=Email.TYPE_HOME;
        }
 else         if (typeString.equals(Constants.ATTR_TYPE_WORK)) {
          type=Email.TYPE_WORK;
        }
 else         if (typeString.equals(Constants.ATTR_TYPE_CELL)) {
          type=Email.TYPE_MOBILE;
        }
 else {
          if (typeString.startsWith("X-") && type < 0) {
            typeString=typeString.substring(2);
          }
          type=Email.TYPE_CUSTOM;
          label=typeString;
        }
      }
    }
    if (type < 0) {
      type=Email.TYPE_OTHER;
    }
    addEmail(type,propValue,label,isPrimary);
  }
 else   if (propName.equals(Constants.PROPERTY_ORG)) {
    final int type=Organization.TYPE_WORK;
    boolean isPrimary=false;
    Collection<String> typeCollection=paramMap.get(Constants.ATTR_TYPE);
    if (typeCollection != null) {
      for (      String typeString : typeCollection) {
        if (typeString.equals(Constants.ATTR_TYPE_PREF)) {
          isPrimary=true;
        }
      }
    }
    handleOrgValue(type,propValueList,isPrimary);
  }
 else   if (propName.equals(Constants.PROPERTY_TITLE)) {
    handleTitleValue(propValue);
  }
 else   if (propName.equals(Constants.PROPERTY_ROLE)) {
  }
 else   if (propName.equals(Constants.PROPERTY_PHOTO) || propName.equals(Constants.PROPERTY_LOGO)) {
    Collection<String> paramMapValue=paramMap.get("VALUE");
    if (paramMapValue != null && paramMapValue.contains("URL")) {
    }
 else {
      final Collection<String> typeCollection=paramMap.get("TYPE");
      String formatName=null;
      boolean isPrimary=false;
      if (typeCollection != null) {
        for (        String typeValue : typeCollection) {
          if (Constants.ATTR_TYPE_PREF.equals(typeValue)) {
            isPrimary=true;
          }
 else           if (formatName == null) {
            formatName=typeValue;
          }
        }
      }
      addPhotoBytes(formatName,propBytes,isPrimary);
    }
  }
 else   if (propName.equals(Constants.PROPERTY_TEL)) {
    final Collection<String> typeCollection=paramMap.get(Constants.ATTR_TYPE);
    final Object typeObject=VCardUtils.getPhoneTypeFromStrings(typeCollection);
    final int type;
    final String label;
    if (typeObject instanceof Integer) {
      type=(Integer)typeObject;
      label=null;
    }
 else {
      type=Phone.TYPE_CUSTOM;
      label=typeObject.toString();
    }
    final boolean isPrimary;
    if (typeCollection != null && typeCollection.contains(Constants.ATTR_TYPE_PREF)) {
      isPrimary=true;
    }
 else {
      isPrimary=false;
    }
    addPhone(type,propValue,label,isPrimary);
  }
 else   if (propName.equals(Constants.PROPERTY_X_SKYPE_PSTNNUMBER)) {
    Collection<String> typeCollection=paramMap.get(Constants.ATTR_TYPE);
    int type=Phone.TYPE_OTHER;
    final String label=null;
    final boolean isPrimary;
    if (typeCollection != null && typeCollection.contains(Constants.ATTR_TYPE_PREF)) {
      isPrimary=true;
    }
 else {
      isPrimary=false;
    }
    addPhone(type,propValue,label,isPrimary);
  }
 else   if (sImMap.containsKey(propName)) {
    final int protocol=sImMap.get(propName);
    boolean isPrimary=false;
    int type=-1;
    final Collection<String> typeCollection=paramMap.get(Constants.ATTR_TYPE);
    if (typeCollection != null) {
      for (      String typeString : typeCollection) {
        if (typeString.equals(Constants.ATTR_TYPE_PREF)) {
          isPrimary=true;
        }
 else         if (type < 0) {
          if (typeString.equalsIgnoreCase(Constants.ATTR_TYPE_HOME)) {
            type=Im.TYPE_HOME;
          }
 else           if (typeString.equalsIgnoreCase(Constants.ATTR_TYPE_WORK)) {
            type=Im.TYPE_WORK;
          }
        }
      }
    }
    if (type < 0) {
      type=Phone.TYPE_HOME;
    }
    addIm(protocol,null,type,propValue,isPrimary);
  }
 else   if (propName.equals(Constants.PROPERTY_NOTE)) {
    addNote(propValue);
  }
 else   if (propName.equals(Constants.PROPERTY_URL)) {
    if (mWebsiteList == null) {
      mWebsiteList=new ArrayList<String>(1);
    }
    mWebsiteList.add(propValue);
  }
 else   if (propName.equals(Constants.PROPERTY_X_PHONETIC_FIRST_NAME)) {
    mPhoneticGivenName=propValue;
  }
 else   if (propName.equals(Constants.PROPERTY_X_PHONETIC_MIDDLE_NAME)) {
    mPhoneticMiddleName=propValue;
  }
 else   if (propName.equals(Constants.PROPERTY_X_PHONETIC_LAST_NAME)) {
    mPhoneticFamilyName=propValue;
  }
 else   if (propName.equals(Constants.PROPERTY_BDAY)) {
    mBirthday=propValue;
  }
 else {
  }
}
