{
  String propName=property.mPropertyName;
  final Map<String,Collection<String>> paramMap=property.mParameterMap;
  final List<String> propValueList=property.mPropertyValueList;
  byte[] propBytes=property.mPropertyBytes;
  if (propValueList.size() == 0) {
    return;
  }
  final String propValue=listToString(propValueList).trim();
  if (propName.equals("VERSION")) {
  }
 else   if (propName.equals("FN")) {
    mFullName=propValue;
  }
 else   if (propName.equals("NAME") && mFullName == null) {
    mFullName=propValue;
  }
 else   if (propName.equals("N")) {
    handleNProperty(propValueList);
  }
 else   if (propName.equals("SORT-STRING")) {
    mPhoneticFullName=propValue;
  }
 else   if (propName.equals("NICKNAME") || propName.equals("X-NICKNAME")) {
    addNickName(propValue);
  }
 else   if (propName.equals("SOUND")) {
    if (Constants.ATTR_TYPE_X_IRMC_N.equals(paramMap.get(Constants.ATTR_TYPE))) {
      handlePhoneticNameFromSound(propValueList);
    }
 else {
    }
  }
 else   if (propName.equals("ADR")) {
    boolean valuesAreAllEmpty=true;
    for (    String value : propValueList) {
      if (value.length() > 0) {
        valuesAreAllEmpty=false;
        break;
      }
    }
    if (valuesAreAllEmpty) {
      return;
    }
    int type=-1;
    String label="";
    boolean isPrimary=false;
    Collection<String> typeCollection=paramMap.get(Constants.ATTR_TYPE);
    if (typeCollection != null) {
      for (      String typeString : typeCollection) {
        typeString=typeString.toUpperCase();
        if (typeString.equals(Constants.ATTR_TYPE_PREF) && !mPrefIsSet_Address) {
          mPrefIsSet_Address=true;
          isPrimary=true;
        }
 else         if (typeString.equals(Constants.ATTR_TYPE_HOME)) {
          type=StructuredPostal.TYPE_HOME;
          label="";
        }
 else         if (typeString.equals(Constants.ATTR_TYPE_WORK) || typeString.equalsIgnoreCase("COMPANY")) {
          type=StructuredPostal.TYPE_WORK;
          label="";
        }
 else         if (typeString.equals("PARCEL") || typeString.equals("DOM") || typeString.equals("INTL")) {
        }
 else {
          if (typeString.startsWith("X-") && type < 0) {
            typeString=typeString.substring(2);
          }
          type=StructuredPostal.TYPE_CUSTOM;
          label=typeString;
        }
      }
    }
    if (type < 0) {
      type=StructuredPostal.TYPE_HOME;
    }
    addPostal(type,propValueList,label,isPrimary);
  }
 else   if (propName.equals("EMAIL")) {
    int type=-1;
    String label=null;
    boolean isPrimary=false;
    Collection<String> typeCollection=paramMap.get(Constants.ATTR_TYPE);
    if (typeCollection != null) {
      for (      String typeString : typeCollection) {
        typeString=typeString.toUpperCase();
        if (typeString.equals(Constants.ATTR_TYPE_PREF) && !mPrefIsSet_Email) {
          mPrefIsSet_Email=true;
          isPrimary=true;
        }
 else         if (typeString.equals(Constants.ATTR_TYPE_HOME)) {
          type=Email.TYPE_HOME;
        }
 else         if (typeString.equals(Constants.ATTR_TYPE_WORK)) {
          type=Email.TYPE_WORK;
        }
 else         if (typeString.equals(Constants.ATTR_TYPE_CELL)) {
          type=Email.TYPE_MOBILE;
        }
 else {
          if (typeString.startsWith("X-") && type < 0) {
            typeString=typeString.substring(2);
          }
          type=Email.TYPE_CUSTOM;
          label=typeString;
        }
      }
    }
    if (type < 0) {
      type=Email.TYPE_OTHER;
    }
    addEmail(type,propValue,label,isPrimary);
  }
 else   if (propName.equals("ORG")) {
    int type=Organization.TYPE_WORK;
    boolean isPrimary=false;
    Collection<String> typeCollection=paramMap.get(Constants.ATTR_TYPE);
    if (typeCollection != null) {
      for (      String typeString : typeCollection) {
        if (typeString.equals(Constants.ATTR_TYPE_PREF) && !mPrefIsSet_Organization) {
          mPrefIsSet_Organization=true;
          isPrimary=true;
        }
      }
    }
    StringBuilder builder=new StringBuilder();
    for (Iterator<String> iter=propValueList.iterator(); iter.hasNext(); ) {
      builder.append(iter.next());
      if (iter.hasNext()) {
        builder.append(' ');
      }
    }
    addOrganization(type,builder.toString(),"",isPrimary);
  }
 else   if (propName.equals("TITLE")) {
    setPosition(propValue);
  }
 else   if (propName.equals("ROLE")) {
    setPosition(propValue);
  }
 else   if (propName.equals("PHOTO") || propName.equals("LOGO")) {
    String formatName=null;
    Collection<String> typeCollection=paramMap.get("TYPE");
    if (typeCollection != null) {
      formatName=typeCollection.iterator().next();
    }
    Collection<String> paramMapValue=paramMap.get("VALUE");
    if (paramMapValue != null && paramMapValue.contains("URL")) {
    }
 else {
      addPhotoBytes(formatName,propBytes);
    }
  }
 else   if (propName.equals("TEL")) {
    Collection<String> typeCollection=paramMap.get(Constants.ATTR_TYPE);
    Object typeObject=VCardUtils.getPhoneTypeFromStrings(typeCollection);
    final int type;
    final String label;
    if (typeObject instanceof Integer) {
      type=(Integer)typeObject;
      label=null;
    }
 else {
      type=Phone.TYPE_CUSTOM;
      label=typeObject.toString();
    }
    final boolean isPrimary;
    if (!mPrefIsSet_Phone && typeCollection != null && typeCollection.contains(Constants.ATTR_TYPE_PREF)) {
      mPrefIsSet_Phone=true;
      isPrimary=true;
    }
 else {
      isPrimary=false;
    }
    addPhone(type,propValue,label,isPrimary);
  }
 else   if (propName.equals(Constants.PROPERTY_X_SKYPE_PSTNNUMBER)) {
    Collection<String> typeCollection=paramMap.get(Constants.ATTR_TYPE);
    int type=Phone.TYPE_OTHER;
    final String label=null;
    final boolean isPrimary;
    if (!mPrefIsSet_Phone && typeCollection != null && typeCollection.contains(Constants.ATTR_TYPE_PREF)) {
      mPrefIsSet_Phone=true;
      isPrimary=true;
    }
 else {
      isPrimary=false;
    }
    addPhone(type,propValue,label,isPrimary);
  }
 else   if (sImMap.containsKey(propName)) {
    int type=sImMap.get(propName);
    boolean isPrimary=false;
    final Collection<String> typeCollection=paramMap.get(Constants.ATTR_TYPE);
    if (typeCollection != null) {
      for (      String typeString : typeCollection) {
        if (typeString.equals(Constants.ATTR_TYPE_PREF)) {
          isPrimary=true;
        }
 else         if (typeString.equalsIgnoreCase(Constants.ATTR_TYPE_HOME)) {
          type=Phone.TYPE_HOME;
        }
 else         if (typeString.equalsIgnoreCase(Constants.ATTR_TYPE_WORK)) {
          type=Phone.TYPE_WORK;
        }
      }
    }
    if (type < 0) {
      type=Phone.TYPE_HOME;
    }
    addIm(type,propValue,null,isPrimary);
  }
 else   if (propName.equals("NOTE")) {
    addNote(propValue);
  }
 else   if (propName.equals("URL")) {
    if (mWebsiteList == null) {
      mWebsiteList=new ArrayList<String>(1);
    }
    mWebsiteList.add(propValue);
  }
 else   if (propName.equals("X-PHONETIC-FIRST-NAME")) {
    mPhoneticGivenName=propValue;
  }
 else   if (propName.equals("X-PHONETIC-MIDDLE-NAME")) {
    mPhoneticMiddleName=propValue;
  }
 else   if (propName.equals("X-PHONETIC-LAST-NAME")) {
    mPhoneticFamilyName=propValue;
  }
 else   if (propName.equals("BDAY")) {
    mBirthday=propValue;
  }
 else {
  }
}
