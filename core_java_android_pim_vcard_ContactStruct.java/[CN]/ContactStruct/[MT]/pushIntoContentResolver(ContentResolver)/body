{
  ArrayList<ContentProviderOperation> operationList=new ArrayList<ContentProviderOperation>();
  ContentProviderOperation.Builder builder=ContentProviderOperation.newInsert(RawContacts.CONTENT_URI);
  if (mAccount != null) {
    builder.withValue(RawContacts.ACCOUNT_NAME,mAccount.name);
    builder.withValue(RawContacts.ACCOUNT_TYPE,mAccount.type);
  }
 else {
    builder.withValues(new ContentValues());
  }
  operationList.add(builder.build());
{
    builder=ContentProviderOperation.newInsert(Data.CONTENT_URI);
    builder.withValueBackReference(StructuredName.RAW_CONTACT_ID,0);
    builder.withValue(Data.MIMETYPE,StructuredName.CONTENT_ITEM_TYPE);
    builder.withValue(StructuredName.GIVEN_NAME,mGivenName);
    builder.withValue(StructuredName.FAMILY_NAME,mFamilyName);
    builder.withValue(StructuredName.MIDDLE_NAME,mMiddleName);
    builder.withValue(StructuredName.PREFIX,mPrefix);
    builder.withValue(StructuredName.SUFFIX,mSuffix);
    builder.withValue(StructuredName.PHONETIC_GIVEN_NAME,mPhoneticGivenName);
    builder.withValue(StructuredName.PHONETIC_FAMILY_NAME,mPhoneticFamilyName);
    builder.withValue(StructuredName.PHONETIC_MIDDLE_NAME,mPhoneticMiddleName);
    builder.withValue(StructuredName.DISPLAY_NAME,getDisplayName());
    operationList.add(builder.build());
  }
  if (mNickNameList != null && mNickNameList.size() > 0) {
    boolean first=true;
    for (    String nickName : mNickNameList) {
      builder=ContentProviderOperation.newInsert(Data.CONTENT_URI);
      builder.withValueBackReference(Nickname.RAW_CONTACT_ID,0);
      builder.withValue(Data.MIMETYPE,Nickname.CONTENT_ITEM_TYPE);
      builder.withValue(Nickname.TYPE,Nickname.TYPE_DEFAULT);
      builder.withValue(Nickname.NAME,nickName);
      if (first) {
        builder.withValue(Data.IS_PRIMARY,1);
        first=false;
      }
      operationList.add(builder.build());
    }
  }
  if (mPhoneList != null) {
    for (    PhoneData phoneData : mPhoneList) {
      builder=ContentProviderOperation.newInsert(Data.CONTENT_URI);
      builder.withValueBackReference(Phone.RAW_CONTACT_ID,0);
      builder.withValue(Data.MIMETYPE,Phone.CONTENT_ITEM_TYPE);
      builder.withValue(Phone.TYPE,phoneData.type);
      if (phoneData.type == Phone.TYPE_CUSTOM) {
        builder.withValue(Phone.LABEL,phoneData.label);
      }
      builder.withValue(Phone.NUMBER,phoneData.data);
      if (phoneData.isPrimary) {
        builder.withValue(Data.IS_PRIMARY,1);
      }
      operationList.add(builder.build());
    }
  }
  if (mOrganizationList != null) {
    boolean first=true;
    for (    OrganizationData organizationData : mOrganizationList) {
      builder=ContentProviderOperation.newInsert(Data.CONTENT_URI);
      builder.withValueBackReference(Organization.RAW_CONTACT_ID,0);
      builder.withValue(Data.MIMETYPE,Organization.CONTENT_ITEM_TYPE);
      builder.withValue(Organization.TYPE,organizationData.type);
      builder.withValue(Organization.COMPANY,organizationData.companyName);
      builder.withValue(Organization.TITLE,organizationData.positionName);
      if (first) {
        builder.withValue(Data.IS_PRIMARY,1);
      }
      operationList.add(builder.build());
    }
  }
  if (mEmailList != null) {
    for (    EmailData emailData : mEmailList) {
      builder=ContentProviderOperation.newInsert(Data.CONTENT_URI);
      builder.withValueBackReference(Email.RAW_CONTACT_ID,0);
      builder.withValue(Data.MIMETYPE,Email.CONTENT_ITEM_TYPE);
      builder.withValue(Email.TYPE,emailData.type);
      if (emailData.type == Email.TYPE_CUSTOM) {
        builder.withValue(Email.LABEL,emailData.label);
      }
      builder.withValue(Email.DATA,emailData.data);
      if (emailData.isPrimary) {
        builder.withValue(Data.IS_PRIMARY,1);
      }
      operationList.add(builder.build());
    }
  }
  if (mPostalList != null) {
    for (    PostalData postalData : mPostalList) {
      builder=ContentProviderOperation.newInsert(Data.CONTENT_URI);
      VCardUtils.insertStructuredPostalDataUsingContactsStruct(mVCardType,builder,postalData);
      operationList.add(builder.build());
    }
  }
  if (mImList != null) {
    for (    ImData imData : mImList) {
      builder=ContentProviderOperation.newInsert(Data.CONTENT_URI);
      builder.withValueBackReference(Im.RAW_CONTACT_ID,0);
      builder.withValue(Data.MIMETYPE,Im.CONTENT_ITEM_TYPE);
      builder.withValue(Im.TYPE,imData.type);
      if (imData.type == Im.TYPE_CUSTOM) {
        builder.withValue(Im.LABEL,imData.label);
      }
      builder.withValue(Im.DATA,imData.data);
      if (imData.isPrimary) {
        builder.withValue(Data.IS_PRIMARY,1);
      }
    }
  }
  if (mNoteList != null) {
    for (    String note : mNoteList) {
      builder=ContentProviderOperation.newInsert(Data.CONTENT_URI);
      builder.withValueBackReference(Note.RAW_CONTACT_ID,0);
      builder.withValue(Data.MIMETYPE,Note.CONTENT_ITEM_TYPE);
      builder.withValue(Note.NOTE,note);
      operationList.add(builder.build());
    }
  }
  if (mPhotoList != null) {
    boolean first=true;
    for (    PhotoData photoData : mPhotoList) {
      builder=ContentProviderOperation.newInsert(Data.CONTENT_URI);
      builder.withValueBackReference(Photo.RAW_CONTACT_ID,0);
      builder.withValue(Data.MIMETYPE,Photo.CONTENT_ITEM_TYPE);
      builder.withValue(Photo.PHOTO,photoData.photoBytes);
      if (first) {
        builder.withValue(Data.IS_PRIMARY,1);
        first=false;
      }
      operationList.add(builder.build());
    }
  }
  if (mWebsiteList != null) {
    for (    String website : mWebsiteList) {
      builder=ContentProviderOperation.newInsert(Data.CONTENT_URI);
      builder.withValueBackReference(Website.RAW_CONTACT_ID,0);
      builder.withValue(Data.MIMETYPE,Website.CONTENT_ITEM_TYPE);
      builder.withValue(Website.URL,website);
      operationList.add(builder.build());
    }
  }
  if (!TextUtils.isEmpty(mBirthday)) {
    builder=ContentProviderOperation.newInsert(Data.CONTENT_URI);
    builder.withValueBackReference(Miscellaneous.RAW_CONTACT_ID,0);
    builder.withValue(Data.MIMETYPE,Miscellaneous.CONTENT_ITEM_TYPE);
    builder.withValue(Miscellaneous.BIRTHDAY,mBirthday);
    operationList.add(builder.build());
  }
  try {
    resolver.applyBatch(ContactsContract.AUTHORITY,operationList);
  }
 catch (  RemoteException e) {
    Log.e(LOG_TAG,String.format("%s: %s",e.toString(),e.getMessage()));
  }
catch (  OperationApplicationException e) {
    Log.e(LOG_TAG,String.format("%s: %s",e.toString(),e.getMessage()));
  }
}
