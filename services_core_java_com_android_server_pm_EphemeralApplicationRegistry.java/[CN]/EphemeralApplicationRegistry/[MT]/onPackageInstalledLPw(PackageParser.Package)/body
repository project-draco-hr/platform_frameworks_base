{
  if (!ENABLED) {
    return;
  }
  PackageSetting ps=(PackageSetting)pkg.mExtras;
  if (ps == null) {
    return;
  }
  for (  int userId : UserManagerService.getInstance().getUserIds()) {
    pruneUninstalledEphemeralAppsLPw(userId);
    if (mService.mPackages.get(pkg.packageName) == null || !ps.getInstalled(userId)) {
      continue;
    }
    propagateEphemeralAppPermissionsIfNeeded(pkg,userId);
    if (mUninstalledEphemeralApps != null) {
      List<UninstalledEphemeralAppState> uninstalledAppStates=mUninstalledEphemeralApps.get(userId);
      if (uninstalledAppStates != null) {
        final int appCount=uninstalledAppStates.size();
        for (int i=0; i < appCount; i++) {
          UninstalledEphemeralAppState uninstalledAppState=uninstalledAppStates.get(i);
          if (uninstalledAppState.mEphemeralApplicationInfo.getPackageName().equals(pkg.packageName)) {
            uninstalledAppStates.remove(i);
            break;
          }
        }
      }
    }
    File ephemeralAppDir=getEphemeralApplicationDir(pkg.packageName,userId);
    new File(ephemeralAppDir,EPHEMERAL_APP_METADATA_FILE).delete();
    new File(ephemeralAppDir,EPHEMERAL_APP_ICON_FILE).delete();
    File currentCookieFile=peekEphemeralCookieFile(pkg.packageName,userId);
    if (currentCookieFile == null) {
      continue;
    }
    File expectedCookeFile=computeEphemeralCookieFile(pkg,userId);
    if (!currentCookieFile.equals(expectedCookeFile)) {
      Slog.i(LOG_TAG,"Signature for package " + pkg.packageName + " changed - dropping cookie");
      currentCookieFile.delete();
    }
  }
}
