{
  int curIndex=startIndex;
  int endIndex=data.length;
  try {
    int tag;
    boolean cr;
    int temp=data[curIndex++] & 0xff;
switch (temp) {
case 0:
case 0xff:
case 0x80:
      Log.d("CAT     ","decode: unexpected first tag byte=" + Integer.toHexString(temp) + ", startIndex="+ startIndex+ " curIndex="+ curIndex+ " endIndex="+ endIndex);
    return null;
case 0x7f:
  tag=((data[curIndex] & 0xff) << 8) | (data[curIndex + 1] & 0xff);
cr=(tag & 0x8000) != 0;
tag&=~0x8000;
curIndex+=2;
break;
default :
tag=temp;
cr=(tag & 0x80) != 0;
tag&=~0x80;
break;
}
int length;
temp=data[curIndex++] & 0xff;
if (temp < 0x80) {
length=temp;
}
 else if (temp == 0x81) {
length=data[curIndex++] & 0xff;
if (length < 0x80) {
throw new ResultException(ResultCode.CMD_DATA_NOT_UNDERSTOOD,"length < 0x80 length=" + Integer.toHexString(length) + " startIndex="+ startIndex+ " curIndex="+ curIndex+ " endIndex="+ endIndex);
}
}
 else if (temp == 0x82) {
length=((data[curIndex] & 0xff) << 8) | (data[curIndex + 1] & 0xff);
curIndex+=2;
if (length < 0x100) {
throw new ResultException(ResultCode.CMD_DATA_NOT_UNDERSTOOD,"two byte length < 0x100 length=" + Integer.toHexString(length) + " startIndex="+ startIndex+ " curIndex="+ curIndex+ " endIndex="+ endIndex);
}
}
 else if (temp == 0x83) {
length=((data[curIndex] & 0xff) << 16) | ((data[curIndex + 1] & 0xff) << 8) | (data[curIndex + 2] & 0xff);
curIndex+=3;
if (length < 0x10000) {
throw new ResultException(ResultCode.CMD_DATA_NOT_UNDERSTOOD,"three byte length < 0x10000 length=0x" + Integer.toHexString(length) + " startIndex="+ startIndex+ " curIndex="+ curIndex+ " endIndex="+ endIndex);
}
}
 else {
throw new ResultException(ResultCode.CMD_DATA_NOT_UNDERSTOOD,"Bad length modifer=" + temp + " startIndex="+ startIndex+ " curIndex="+ curIndex+ " endIndex="+ endIndex);
}
return new ComprehensionTlv(tag,cr,length,data,curIndex);
}
 catch (IndexOutOfBoundsException e) {
throw new ResultException(ResultCode.CMD_DATA_NOT_UNDERSTOOD,"IndexOutOfBoundsException" + " startIndex=" + startIndex + " curIndex="+ curIndex+ " endIndex="+ endIndex);
}
}
