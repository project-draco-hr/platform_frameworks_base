{
  serializer.startTag("","node");
  if (!nafExcludedClass(node) && !nafCheck(node))   serializer.attribute("","NAF",Boolean.toString(true));
  serializer.attribute("","index",Integer.toString(index));
  serializer.attribute("","text",safeCharSeqToString(node.getText()));
  serializer.attribute("","resource-id",safeCharSeqToString(node.getViewIdResourceName()));
  serializer.attribute("","class",safeCharSeqToString(node.getClassName()));
  serializer.attribute("","package",safeCharSeqToString(node.getPackageName()));
  serializer.attribute("","content-desc",safeCharSeqToString(node.getContentDescription()));
  serializer.attribute("","checkable",Boolean.toString(node.isCheckable()));
  serializer.attribute("","checked",Boolean.toString(node.isChecked()));
  serializer.attribute("","clickable",Boolean.toString(node.isClickable()));
  serializer.attribute("","enabled",Boolean.toString(node.isEnabled()));
  serializer.attribute("","focusable",Boolean.toString(node.isFocusable()));
  serializer.attribute("","focused",Boolean.toString(node.isFocused()));
  serializer.attribute("","scrollable",Boolean.toString(node.isScrollable()));
  serializer.attribute("","long-clickable",Boolean.toString(node.isLongClickable()));
  serializer.attribute("","password",Boolean.toString(node.isPassword()));
  serializer.attribute("","selected",Boolean.toString(node.isSelected()));
  serializer.attribute("","bounds",AccessibilityNodeInfoHelper.getVisibleBoundsInScreen(node,width,height).toShortString());
  int count=node.getChildCount();
  for (int i=0; i < count; i++) {
    AccessibilityNodeInfo child=node.getChild(i);
    if (child != null) {
      if (child.isVisibleToUser()) {
        dumpNodeRec(child,serializer,i,width,height);
        child.recycle();
      }
 else {
        Log.i(LOGTAG,String.format("Skipping invisible child: %s",child.toString()));
      }
    }
 else {
      Log.i(LOGTAG,String.format("Null child %d/%d, parent: %s",i,count,node.toString()));
    }
  }
  serializer.endTag("","node");
}
