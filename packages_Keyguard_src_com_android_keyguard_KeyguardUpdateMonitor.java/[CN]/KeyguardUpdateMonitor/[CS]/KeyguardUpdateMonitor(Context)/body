{
  mContext=context;
  mSubscriptionManager=SubscriptionManager.from(context);
  mAlarmManager=context.getSystemService(AlarmManager.class);
  mDeviceProvisioned=isDeviceProvisionedInSettingsDb();
  if (!mDeviceProvisioned) {
    watchForDeviceProvisioning();
  }
  mBatteryStatus=new BatteryStatus(BATTERY_STATUS_UNKNOWN,100,0,0,0);
  final IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_TIME_TICK);
  filter.addAction(Intent.ACTION_TIME_CHANGED);
  filter.addAction(Intent.ACTION_BATTERY_CHANGED);
  filter.addAction(Intent.ACTION_TIMEZONE_CHANGED);
  filter.addAction(Intent.ACTION_AIRPLANE_MODE_CHANGED);
  filter.addAction(TelephonyIntents.ACTION_SIM_STATE_CHANGED);
  filter.addAction(TelephonyIntents.ACTION_SERVICE_STATE_CHANGED);
  filter.addAction(TelephonyManager.ACTION_PHONE_STATE_CHANGED);
  filter.addAction(AudioManager.RINGER_MODE_CHANGED_ACTION);
  context.registerReceiver(mBroadcastReceiver,filter);
  final IntentFilter bootCompleteFilter=new IntentFilter();
  bootCompleteFilter.setPriority(IntentFilter.SYSTEM_HIGH_PRIORITY);
  bootCompleteFilter.addAction(Intent.ACTION_BOOT_COMPLETED);
  context.registerReceiver(mBroadcastReceiver,bootCompleteFilter);
  final IntentFilter allUserFilter=new IntentFilter();
  allUserFilter.addAction(Intent.ACTION_USER_INFO_CHANGED);
  allUserFilter.addAction(AlarmManager.ACTION_NEXT_ALARM_CLOCK_CHANGED);
  allUserFilter.addAction(ACTION_FACE_UNLOCK_STARTED);
  allUserFilter.addAction(ACTION_FACE_UNLOCK_STOPPED);
  allUserFilter.addAction(DevicePolicyManager.ACTION_DEVICE_POLICY_MANAGER_STATE_CHANGED);
  context.registerReceiverAsUser(mBroadcastAllReceiver,UserHandle.ALL,allUserFilter,null,null);
  mSubscriptionManager.addOnSubscriptionsChangedListener(mSubscriptionListener);
  try {
    ActivityManagerNative.getDefault().registerUserSwitchObserver(new IUserSwitchObserver.Stub(){
      @Override public void onUserSwitching(      int newUserId,      IRemoteCallback reply){
        mHandler.sendMessage(mHandler.obtainMessage(MSG_USER_SWITCHING,newUserId,0,reply));
      }
      @Override public void onUserSwitchComplete(      int newUserId) throws RemoteException {
        mHandler.sendMessage(mHandler.obtainMessage(MSG_USER_SWITCH_COMPLETE,newUserId,0));
      }
      @Override public void onForegroundProfileSwitch(      int newProfileId){
      }
    }
);
  }
 catch (  RemoteException e) {
    e.printStackTrace();
  }
  IntentFilter strongAuthTimeoutFilter=new IntentFilter();
  strongAuthTimeoutFilter.addAction(ACTION_STRONG_AUTH_TIMEOUT);
  context.registerReceiver(mStrongAuthTimeoutReceiver,strongAuthTimeoutFilter,PERMISSION_SELF,null);
  mTrustManager=(TrustManager)context.getSystemService(Context.TRUST_SERVICE);
  mTrustManager.registerTrustListener(this);
  new LockPatternUtils(context).registerStrongAuthTracker(mStrongAuthTracker);
  mFpm=(FingerprintManager)context.getSystemService(Context.FINGERPRINT_SERVICE);
  updateFingerprintListeningState();
}
