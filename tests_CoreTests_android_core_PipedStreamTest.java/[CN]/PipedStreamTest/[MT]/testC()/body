{
  final PipedInputStream in=new PipedInputStream();
  final PipedOutputStream out=new PipedOutputStream(in);
  assertEquals(0,in.available());
  TestThread reader, writer;
  reader=new TestThread(){
    Fibonacci fib=new Fibonacci();
    @Override public void runTest() throws Exception {
      byte readBytes[]=new byte[1024 * 2];
      int ret;
      for (; ; ) {
        int nread=0;
        while (nread < readBytes.length) {
          ret=in.read(readBytes,nread,readBytes.length - nread);
          if (ret == -1) {
            return;
          }
          nread+=ret;
        }
        assertEquals(nread,readBytes.length);
        for (int i=0; i < (readBytes.length - 4); i+=4) {
          int readInt=(((int)readBytes[i + 0] & 0xff) << 24) | (((int)readBytes[i + 1] & 0xff) << 16) | (((int)readBytes[i + 2] & 0xff) << 8)| (((int)readBytes[i + 3] & 0xff) << 0);
          assertEquals(readInt,fib.next());
        }
      }
    }
  }
;
  reader.start();
  writer=new TestThread(){
    Fibonacci fib=new Fibonacci();
    @Override public void runTest() throws Exception {
      byte writeBytes[]=new byte[1024 * 2];
      for (int i=0; i < (writeBytes.length - 4); i+=4) {
        int toWrite=fib.next();
        writeBytes[i + 0]=(byte)(toWrite >> 24);
        writeBytes[i + 1]=(byte)(toWrite >> 16);
        writeBytes[i + 2]=(byte)(toWrite >> 8);
        writeBytes[i + 3]=(byte)(toWrite >> 0);
      }
      out.write(writeBytes,0,writeBytes.length);
      out.close();
    }
  }
;
  writer.start();
  for (; ; ) {
    try {
      reader.join(60 * 1000);
      writer.join(1 * 100);
      break;
    }
 catch (    InterruptedException ex) {
    }
  }
  if (writer.exception != null) {
    throw new Exception(writer.exception);
  }
  if (reader.exception != null) {
    throw new Exception(reader.exception);
  }
}
