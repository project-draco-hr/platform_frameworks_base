{
  ArrayList<String> directories=new ArrayList<String>();
  PackageManager pm=mContext.getPackageManager();
  List<ResolveInfo> plugins=pm.queryIntentServices(new Intent(PLUGIN_ACTION),PackageManager.GET_SERVICES | PackageManager.GET_META_DATA);
synchronized (mPackageInfoCache) {
    mPackageInfoCache.clear();
    for (    ResolveInfo info : plugins) {
      ServiceInfo serviceInfo=info.serviceInfo;
      if (serviceInfo == null) {
        Log.w(LOGTAG,"Ignore bad plugin");
        continue;
      }
      PackageInfo pkgInfo;
      try {
        pkgInfo=pm.getPackageInfo(serviceInfo.packageName,PackageManager.GET_PERMISSIONS | PackageManager.GET_SIGNATURES);
      }
 catch (      NameNotFoundException e) {
        Log.w(LOGTAG,"Can't find plugin: " + serviceInfo.packageName);
        continue;
      }
      if (pkgInfo == null) {
        continue;
      }
      String directory=pkgInfo.applicationInfo.dataDir + "/lib";
      if (directories.contains(directory)) {
        continue;
      }
      if (!containsPluginPermissionAndSignatures(pkgInfo)) {
        continue;
      }
      if (serviceInfo.metaData == null) {
        Log.e(LOGTAG,"The plugin '" + serviceInfo.name + "' has no type defined");
        continue;
      }
      String pluginType=serviceInfo.metaData.getString(PLUGIN_TYPE);
      if (!TYPE_NATIVE.equals(pluginType)) {
        Log.e(LOGTAG,"Unrecognized plugin type: " + pluginType);
        continue;
      }
      try {
        Class<?> cls=getPluginClass(serviceInfo.packageName,serviceInfo.name);
        boolean classFound=true;
        if (!classFound) {
          Log.e(LOGTAG,"The plugin's class' " + serviceInfo.name + "' does not extend the appropriate class.");
          continue;
        }
      }
 catch (      NameNotFoundException e) {
        Log.e(LOGTAG,"Can't find plugin: " + serviceInfo.packageName);
        continue;
      }
catch (      ClassNotFoundException e) {
        Log.e(LOGTAG,"Can't find plugin's class: " + serviceInfo.name);
        continue;
      }
      mPackageInfoCache.add(pkgInfo);
      directories.add(directory);
    }
  }
  return directories.toArray(new String[directories.size()]);
}
