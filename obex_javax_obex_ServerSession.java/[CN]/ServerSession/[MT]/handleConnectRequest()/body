{
  int packetLength;
  int version;
  int flags;
  int totalLength=7;
  byte[] head=null;
  int code=-1;
  HeaderSet request=new HeaderSet();
  HeaderSet reply=new HeaderSet();
  int bytesReceived;
  packetLength=input.read();
  packetLength=(packetLength << 8) + input.read();
  version=input.read();
  flags=input.read();
  maxPacketLength=input.read();
  maxPacketLength=(maxPacketLength << 8) + input.read();
  if (maxPacketLength > OBEXConstants.MAX_PACKET_SIZE_INT) {
    maxPacketLength=OBEXConstants.MAX_PACKET_SIZE_INT;
  }
  if (packetLength > OBEXConstants.MAX_PACKET_SIZE_INT) {
    code=ResponseCodes.OBEX_HTTP_REQ_TOO_LARGE;
    totalLength=7;
  }
 else {
    if (packetLength > 7) {
      byte[] headers=new byte[packetLength - 7];
      bytesReceived=input.read(headers);
      while (bytesReceived != headers.length) {
        bytesReceived+=input.read(headers,bytesReceived,headers.length - bytesReceived);
      }
      OBEXHelper.updateHeaderSet(request,headers);
    }
    if (request.connectionID != null) {
      listener.setConnectionID(OBEXHelper.convertToLong(request.connectionID));
    }
 else {
      listener.setConnectionID(1);
    }
    if (request.authResp != null) {
      if (!handleAuthResp(request.authResp)) {
        code=ResponseCodes.OBEX_HTTP_UNAUTHORIZED;
        listener.onAuthenticationFailure(OBEXHelper.getTagValue((byte)0x01,request.authResp));
      }
      request.authResp=null;
    }
    if (code != ResponseCodes.OBEX_HTTP_UNAUTHORIZED) {
      if (request.authChall != null) {
        handleAuthChall(request);
        reply.authResp=new byte[request.authResp.length];
        System.arraycopy(request.authResp,0,reply.authResp,0,reply.authResp.length);
        request.authChall=null;
        request.authResp=null;
      }
      try {
        code=listener.onConnect(request,reply);
        code=validateResponseCode(code);
        if (reply.nonce != null) {
          challengeDigest=new byte[16];
          System.arraycopy(reply.nonce,0,challengeDigest,0,16);
        }
 else {
          challengeDigest=null;
        }
        long id=listener.getConnectionID();
        if (id == -1) {
          reply.connectionID=null;
        }
 else {
          reply.connectionID=OBEXHelper.convertToByteArray(id);
        }
        head=OBEXHelper.createHeader(reply,false);
        totalLength+=head.length;
        if (totalLength > maxPacketLength) {
          totalLength=7;
          head=null;
          code=ResponseCodes.OBEX_HTTP_INTERNAL_ERROR;
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
        totalLength=7;
        head=null;
        code=ResponseCodes.OBEX_HTTP_INTERNAL_ERROR;
      }
    }
  }
  byte[] length=OBEXHelper.convertToByteArray(totalLength);
  byte[] sendData=new byte[totalLength];
  sendData[0]=(byte)code;
  sendData[1]=length[2];
  sendData[2]=length[3];
  sendData[3]=(byte)0x10;
  sendData[4]=(byte)0x00;
  sendData[5]=(byte)(OBEXConstants.MAX_PACKET_SIZE_INT >> 8);
  sendData[6]=(byte)(OBEXConstants.MAX_PACKET_SIZE_INT & 0xFF);
  if (head != null) {
    System.arraycopy(head,0,sendData,7,head.length);
  }
  output.write(sendData);
  output.flush();
}
