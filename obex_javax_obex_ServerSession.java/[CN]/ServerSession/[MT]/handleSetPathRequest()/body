{
  int length;
  int flags;
  int constants;
  int totalLength=3;
  byte[] head=null;
  int code=-1;
  int bytesReceived;
  HeaderSet request=new HeaderSet();
  HeaderSet reply=new HeaderSet();
  length=input.read();
  length=(length << 8) + input.read();
  flags=input.read();
  constants=input.read();
  if (length > OBEXConstants.MAX_PACKET_SIZE_INT) {
    code=ResponseCodes.OBEX_HTTP_REQ_TOO_LARGE;
    totalLength=3;
  }
 else {
    if (length > 5) {
      byte[] headers=new byte[length - 5];
      bytesReceived=input.read(headers);
      while (bytesReceived != headers.length) {
        bytesReceived+=input.read(headers,bytesReceived,headers.length - bytesReceived);
      }
      OBEXHelper.updateHeaderSet(request,headers);
      if (request.connectionID != null) {
        listener.setConnectionID(OBEXHelper.convertToLong(request.connectionID));
      }
 else {
        listener.setConnectionID(-1);
      }
      if (request.authResp != null) {
        if (!handleAuthResp(request.authResp)) {
          code=ResponseCodes.OBEX_HTTP_UNAUTHORIZED;
          listener.onAuthenticationFailure(OBEXHelper.getTagValue((byte)0x01,request.authResp));
        }
        request.authResp=null;
      }
    }
    if (code != ResponseCodes.OBEX_HTTP_UNAUTHORIZED) {
      if (request.authChall != null) {
        handleAuthChall(request);
        reply.authResp=new byte[request.authResp.length];
        System.arraycopy(request.authResp,0,reply.authResp,0,reply.authResp.length);
        request.authChall=null;
        request.authResp=null;
      }
      boolean backup=false;
      boolean create=true;
      if (!((flags & 1) == 0)) {
        backup=true;
      }
      if ((flags & 2) == 0) {
        create=false;
      }
      try {
        code=listener.onSetPath(request,reply,backup,create);
      }
 catch (      Exception e) {
        sendResponse(ResponseCodes.OBEX_HTTP_INTERNAL_ERROR,null);
        return;
      }
      code=validateResponseCode(code);
      if (reply.nonce != null) {
        challengeDigest=new byte[16];
        System.arraycopy(reply.nonce,0,challengeDigest,0,16);
      }
 else {
        challengeDigest=null;
      }
      long id=listener.getConnectionID();
      if (id == -1) {
        reply.connectionID=null;
      }
 else {
        reply.connectionID=OBEXHelper.convertToByteArray(id);
      }
      head=OBEXHelper.createHeader(reply,false);
      totalLength+=head.length;
      if (totalLength > maxPacketLength) {
        totalLength=3;
        head=null;
        code=ResponseCodes.OBEX_HTTP_INTERNAL_ERROR;
      }
    }
  }
  byte[] replyData=new byte[totalLength];
  replyData[0]=(byte)code;
  replyData[1]=(byte)(totalLength >> 8);
  replyData[2]=(byte)totalLength;
  if (head != null) {
    System.arraycopy(head,0,replyData,3,head.length);
  }
  output.write(replyData);
  output.flush();
}
