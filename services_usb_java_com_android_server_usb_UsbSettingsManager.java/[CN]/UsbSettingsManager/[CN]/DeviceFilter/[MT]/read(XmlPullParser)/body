{
  int vendorId=-1;
  int productId=-1;
  int deviceClass=-1;
  int deviceSubclass=-1;
  int deviceProtocol=-1;
  String manufacturerName=null;
  String productName=null;
  String serialNumber=null;
  int count=parser.getAttributeCount();
  for (int i=0; i < count; i++) {
    String name=parser.getAttributeName(i);
    String value=parser.getAttributeValue(i);
    if ("manufacturer-name".equals(name)) {
      manufacturerName=value;
    }
 else     if ("product-name".equals(name)) {
      productName=value;
    }
 else     if ("serial-number".equals(name)) {
      serialNumber=value;
    }
 else {
      int intValue=-1;
      int radix=10;
      if (value != null && value.length() > 2 && value.charAt(0) == '0' && (value.charAt(1) == 'x' || value.charAt(1) == 'X')) {
        radix=16;
        value=value.substring(2);
      }
      try {
        intValue=Integer.parseInt(value,radix);
      }
 catch (      NumberFormatException e) {
        Slog.e(TAG,"invalid number for field " + name,e);
        continue;
      }
      if ("vendor-id".equals(name)) {
        vendorId=intValue;
      }
 else       if ("product-id".equals(name)) {
        productId=intValue;
      }
 else       if ("class".equals(name)) {
        deviceClass=intValue;
      }
 else       if ("subclass".equals(name)) {
        deviceSubclass=intValue;
      }
 else       if ("protocol".equals(name)) {
        deviceProtocol=intValue;
      }
    }
  }
  return new DeviceFilter(vendorId,productId,deviceClass,deviceSubclass,deviceProtocol,manufacturerName,productName,serialNumber);
}
