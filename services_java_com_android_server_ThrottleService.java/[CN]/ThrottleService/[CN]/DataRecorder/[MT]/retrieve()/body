{
  File f=getDataFile();
  byte[] buffer;
  FileInputStream s=null;
  try {
    buffer=new byte[(int)f.length()];
    s=new FileInputStream(f);
    s.read(buffer);
  }
 catch (  IOException e) {
    Slog.e(TAG,"Error reading data file");
    return;
  }
 finally {
    if (s != null) {
      try {
        s.close();
      }
 catch (      Exception e) {
      }
    }
  }
  String data=new String(buffer);
  if (data == null || data.length() == 0) {
    if (DBG)     Slog.d(TAG,"data file empty");
    return;
  }
synchronized (mParent) {
    String[] parsed=data.split(":");
    int parsedUsed=0;
    if (parsed.length < 6) {
      Slog.e(TAG,"reading data file with insufficient length - ignoring");
      return;
    }
    if (Integer.parseInt(parsed[parsedUsed++]) != DATA_FILE_VERSION) {
      Slog.e(TAG,"reading data file with bad version - ignoring");
      return;
    }
    mPeriodCount=Integer.parseInt(parsed[parsedUsed++]);
    if (parsed.length != 5 + (2 * mPeriodCount)) {
      Slog.e(TAG,"reading data file with bad length (" + parsed.length + " != "+ (4 + (2 * mPeriodCount))+ ") - ignoring");
      return;
    }
    mPeriodRxData=new long[mPeriodCount];
    for (int i=0; i < mPeriodCount; i++) {
      mPeriodRxData[i]=Long.parseLong(parsed[parsedUsed++]);
    }
    mPeriodTxData=new long[mPeriodCount];
    for (int i=0; i < mPeriodCount; i++) {
      mPeriodTxData[i]=Long.parseLong(parsed[parsedUsed++]);
    }
    mCurrentPeriod=Integer.parseInt(parsed[parsedUsed++]);
    mPeriodStart=new GregorianCalendar();
    mPeriodStart.setTimeInMillis(Long.parseLong(parsed[parsedUsed++]));
    mPeriodEnd=new GregorianCalendar();
    mPeriodEnd.setTimeInMillis(Long.parseLong(parsed[parsedUsed++]));
  }
}
