{
  boolean testing=SystemProperties.get(TESTING_ENABLED_PROPERTY).equals("true");
  int pollingPeriod=DEFAULT_POLLING_PERIOD_SEC;
  if (testing)   pollingPeriod=TESTING_POLLING_PERIOD_SEC;
  mPolicyPollPeriodSec=Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.THROTTLE_POLLING_SEC,pollingPeriod);
  long defaultThreshold=DEFAULT_THRESHOLD;
  if (testing)   defaultThreshold=DEFAULT_TESTING_THRESHOLD;
synchronized (ThrottleService.this) {
    mPolicyThreshold=Settings.Secure.getLong(mContext.getContentResolver(),Settings.Secure.THROTTLE_THRESHOLD,defaultThreshold);
    mPolicyThrottleValue=Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.THROTTLE_VALUE,DEFAULT_THROTTLE_VALUE);
  }
  mPolicyResetDay=Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.THROTTLE_RESET_DAY,-1);
  if (mPolicyResetDay == -1 || ((mPolicyResetDay < 1) || (mPolicyResetDay > 28))) {
    Random g=new Random();
    mPolicyResetDay=1 + g.nextInt(28);
    Settings.Secure.putInt(mContext.getContentResolver(),Settings.Secure.THROTTLE_RESET_DAY,mPolicyResetDay);
  }
synchronized (ThrottleService.this) {
    mPolicyIface=Settings.Secure.getString(mContext.getContentResolver(),Settings.Secure.THROTTLE_IFACE);
    if (mPolicyIface == null)     mPolicyIface="rmnet0";
  }
  mPolicyNotificationsAllowedMask=Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.THROTTLE_NOTIFICATION_TYPE,NOTIFICATION_ALL);
  Slog.d(TAG,"onPolicyChanged testing=" + testing + ", period="+ mPolicyPollPeriodSec+ ", threshold="+ mPolicyThreshold+ ", value="+ mPolicyThrottleValue+ ", resetDay="+ mPolicyResetDay+ ", noteType="+ mPolicyNotificationsAllowedMask);
  Calendar end=calculatePeriodEnd();
  Calendar start=calculatePeriodStart(end);
  mRecorder.setNextPeriod(start,end);
  mAlarmManager.cancel(mPendingResetIntent);
  mAlarmManager.set(AlarmManager.RTC_WAKEUP,end.getTimeInMillis(),mPendingResetIntent);
}
