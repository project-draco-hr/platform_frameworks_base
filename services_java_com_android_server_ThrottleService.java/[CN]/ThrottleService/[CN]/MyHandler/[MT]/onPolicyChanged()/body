{
  boolean testing=SystemProperties.get(TESTING_ENABLED_PROPERTY).equals("true");
  int pollingPeriod=mContext.getResources().getInteger(R.integer.config_datause_polling_period_sec);
  mPolicyPollPeriodSec=Settings.Global.getInt(mContext.getContentResolver(),Settings.Global.THROTTLE_POLLING_SEC,pollingPeriod);
  long defaultThreshold=mContext.getResources().getInteger(R.integer.config_datause_threshold_bytes);
  int defaultValue=mContext.getResources().getInteger(R.integer.config_datause_throttle_kbitsps);
  long threshold=Settings.Global.getLong(mContext.getContentResolver(),Settings.Global.THROTTLE_THRESHOLD_BYTES,defaultThreshold);
  int value=Settings.Global.getInt(mContext.getContentResolver(),Settings.Global.THROTTLE_VALUE_KBITSPS,defaultValue);
  mPolicyThreshold.set(threshold);
  mPolicyThrottleValue.set(value);
  if (testing) {
    mPolicyPollPeriodSec=TESTING_POLLING_PERIOD_SEC;
    mPolicyThreshold.set(TESTING_THRESHOLD);
  }
  mPolicyResetDay=Settings.Global.getInt(mContext.getContentResolver(),Settings.Global.THROTTLE_RESET_DAY,-1);
  if (mPolicyResetDay == -1 || ((mPolicyResetDay < 1) || (mPolicyResetDay > 28))) {
    Random g=new Random();
    mPolicyResetDay=1 + g.nextInt(28);
    Settings.Global.putInt(mContext.getContentResolver(),Settings.Global.THROTTLE_RESET_DAY,mPolicyResetDay);
  }
  if (mIface == null) {
    mPolicyThreshold.set(0);
  }
  int defaultNotificationType=mContext.getResources().getInteger(R.integer.config_datause_notification_type);
  mPolicyNotificationsAllowedMask=Settings.Global.getInt(mContext.getContentResolver(),Settings.Global.THROTTLE_NOTIFICATION_TYPE,defaultNotificationType);
  final int maxNtpCacheAgeSec=Settings.Global.getInt(mContext.getContentResolver(),Settings.Global.THROTTLE_MAX_NTP_CACHE_AGE_SEC,(int)(MAX_NTP_CACHE_AGE / 1000));
  mMaxNtpCacheAge=maxNtpCacheAgeSec * 1000;
  if (VDBG || (mPolicyThreshold.get() != 0)) {
    Slog.d(TAG,"onPolicyChanged testing=" + testing + ", period="+ mPolicyPollPeriodSec+ ", threshold="+ mPolicyThreshold.get()+ ", value="+ mPolicyThrottleValue.get()+ ", resetDay="+ mPolicyResetDay+ ", noteType="+ mPolicyNotificationsAllowedMask+ ", mMaxNtpCacheAge="+ mMaxNtpCacheAge);
  }
  mThrottleIndex.set(THROTTLE_INDEX_UNINITIALIZED);
  onResetAlarm();
  onPollAlarm();
  Intent broadcast=new Intent(ThrottleManager.POLICY_CHANGED_ACTION);
  mContext.sendBroadcastAsUser(broadcast,UserHandle.ALL);
}
