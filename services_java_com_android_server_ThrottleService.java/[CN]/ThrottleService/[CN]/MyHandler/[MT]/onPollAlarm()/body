{
  long now=SystemClock.elapsedRealtime();
  long next=now + mPolicyPollPeriodSec * 1000;
  if (mTime.getCacheAge() > mMaxNtpCacheAge) {
    if (mTime.forceRefresh()) {
      if (VDBG)       Slog.d(TAG,"updated trusted time, reseting alarm");
      dispatchReset();
    }
  }
  long incRead=0;
  long incWrite=0;
  try {
    final NetworkStats stats=mNMService.getNetworkStatsSummary();
    final int index=stats.findIndex(mIface,NetworkStats.UID_ALL,NetworkStats.TAG_NONE);
    if (index != -1) {
      final NetworkStats.Entry entry=stats.getValues(index,null);
      incRead=entry.rxBytes - mLastRead;
      incWrite=entry.txBytes - mLastWrite;
    }
 else {
      Slog.w(TAG,"unable to find stats for iface " + mIface);
    }
    if ((incRead < 0) || (incWrite < 0)) {
      incRead+=mLastRead;
      incWrite+=mLastWrite;
      mLastRead=0;
      mLastWrite=0;
    }
  }
 catch (  RemoteException e) {
    Slog.e(TAG,"got remoteException in onPollAlarm:" + e);
  }
  boolean roaming="true".equals(SystemProperties.get(TelephonyProperties.PROPERTY_OPERATOR_ISROAMING));
  if (!roaming) {
    mRecorder.addData(incRead,incWrite);
  }
  long periodRx=mRecorder.getPeriodRx(0);
  long periodTx=mRecorder.getPeriodTx(0);
  long total=periodRx + periodTx;
  if (VDBG || (mPolicyThreshold.get() != 0)) {
    Slog.d(TAG,"onPollAlarm - roaming =" + roaming + ", read ="+ incRead+ ", written ="+ incWrite+ ", new total ="+ total);
  }
  mLastRead+=incRead;
  mLastWrite+=incWrite;
  checkThrottleAndPostNotification(total);
  Intent broadcast=new Intent(ThrottleManager.THROTTLE_POLL_ACTION);
  broadcast.putExtra(ThrottleManager.EXTRA_CYCLE_READ,periodRx);
  broadcast.putExtra(ThrottleManager.EXTRA_CYCLE_WRITE,periodTx);
  broadcast.putExtra(ThrottleManager.EXTRA_CYCLE_START,getPeriodStartTime(mIface));
  broadcast.putExtra(ThrottleManager.EXTRA_CYCLE_END,getResetTime(mIface));
  mContext.sendStickyBroadcast(broadcast);
  mPollStickyBroadcast=broadcast;
  mAlarmManager.cancel(mPendingPollIntent);
  mAlarmManager.set(AlarmManager.ELAPSED_REALTIME,next,mPendingPollIntent);
}
