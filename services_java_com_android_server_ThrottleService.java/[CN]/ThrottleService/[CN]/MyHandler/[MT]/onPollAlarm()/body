{
  long now=SystemClock.elapsedRealtime();
  long next=now + mPolicyPollPeriodSec * 1000;
  long incRead=0;
  long incWrite=0;
  try {
    incRead=mNMService.getInterfaceRxCounter(mPolicyIface) - mLastRead;
    incWrite=mNMService.getInterfaceTxCounter(mPolicyIface) - mLastWrite;
  }
 catch (  RemoteException e) {
    Slog.e(TAG,"got remoteException in onPollAlarm:" + e);
  }
  boolean roaming="true".equals(SystemProperties.get(TelephonyProperties.PROPERTY_OPERATOR_ISROAMING));
  if (!roaming) {
    mRecorder.addData(incRead,incWrite);
  }
  long periodRx=mRecorder.getPeriodRx(0);
  long periodTx=mRecorder.getPeriodTx(0);
  long total=periodRx + periodTx;
  if (DBG) {
    Slog.d(TAG,"onPollAlarm - now =" + now + ", roaming ="+ roaming+ ", read ="+ incRead+ ", written ="+ incWrite+ ", new total ="+ total);
  }
  mLastRead+=incRead;
  mLastWrite+=incWrite;
  checkThrottleAndPostNotification(total);
  Intent broadcast=new Intent(ThrottleManager.THROTTLE_POLL_ACTION);
  broadcast.putExtra(ThrottleManager.EXTRA_CYCLE_READ,periodRx);
  broadcast.putExtra(ThrottleManager.EXTRA_CYCLE_WRITE,periodTx);
  broadcast.putExtra(ThrottleManager.EXTRA_CYCLE_START,mRecorder.getPeriodStart());
  broadcast.putExtra(ThrottleManager.EXTRA_CYCLE_END,mRecorder.getPeriodEnd());
  mContext.sendStickyBroadcast(broadcast);
  mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,next,mPendingPollIntent);
}
