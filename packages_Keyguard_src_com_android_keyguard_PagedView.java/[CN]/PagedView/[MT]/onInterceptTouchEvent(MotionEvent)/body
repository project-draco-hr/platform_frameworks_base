{
  if (DISABLE_TOUCH_INTERACTION) {
    return false;
  }
  acquireVelocityTrackerAndAddMovement(ev);
  if (getChildCount() <= 0)   return super.onInterceptTouchEvent(ev);
  final int action=ev.getAction();
  if ((action == MotionEvent.ACTION_MOVE) && (mTouchState == TOUCH_STATE_SCROLLING)) {
    return true;
  }
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_MOVE:
{
      if (mActivePointerId != INVALID_POINTER) {
        if (mIsCameraEvent || determineScrollingStart(ev)) {
          startScrolling(ev);
        }
        break;
      }
      break;
    }
case MotionEvent.ACTION_DOWN:
{
    if (mIsCameraEvent && !mAnimatingWarp) {
      animateWarpPageOnScreen("interceptTouch(): DOWN");
    }
    saveDownState(ev);
    final int xDist=Math.abs(mScroller.getFinalX() - mScroller.getCurrX());
    final boolean finishedScrolling=(mScroller.isFinished() || xDist < mTouchSlop);
    if (finishedScrolling) {
      setTouchState(TOUCH_STATE_REST);
      mScroller.abortAnimation();
    }
 else {
      if (mIsCameraEvent || isTouchPointInViewportWithBuffer((int)mDownMotionX,(int)mDownMotionY)) {
        setTouchState(TOUCH_STATE_SCROLLING);
      }
 else {
        setTouchState(TOUCH_STATE_REST);
      }
    }
    if (!DISABLE_TOUCH_SIDE_PAGES) {
      if (mTouchState != TOUCH_STATE_PREV_PAGE && mTouchState != TOUCH_STATE_NEXT_PAGE) {
        if (getChildCount() > 0) {
          float x=ev.getX();
          float y=ev.getY();
          if (hitsPreviousPage(x,y)) {
            setTouchState(TOUCH_STATE_PREV_PAGE);
          }
 else           if (hitsNextPage(x,y)) {
            setTouchState(TOUCH_STATE_NEXT_PAGE);
          }
        }
      }
    }
    break;
  }
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
resetTouchState();
if (!isTouchPointInCurrentPage((int)mLastMotionX,(int)mLastMotionY)) {
return true;
}
break;
case MotionEvent.ACTION_POINTER_UP:
onSecondaryPointerUp(ev);
releaseVelocityTracker();
break;
}
return mTouchState != TOUCH_STATE_REST;
}
