{
  final BaseActivity activity=getActivity();
  final List<Long> measurements=new ArrayList<Long>();
  CountDownLatch signal;
  EventListener listener;
  for (int i=0; i < 10; i++) {
    signal=new CountDownLatch(1);
    listener=new EventListener(){
      @Override public void onDirectoryNavigated(      Uri uri){
        if (uri != null && TESTED_URI.equals(uri.toString())) {
          mStartTime=System.currentTimeMillis();
        }
 else {
          mStartTime=-1;
        }
      }
      @Override public void onDirectoryLoaded(      Uri uri){
        if (uri == null || !TESTED_URI.equals(uri.toString())) {
          return;
        }
        assertTrue(mStartTime != -1);
        getInstrumentation().waitForIdle(new Runnable(){
          @Override public void run(){
            assertTrue(mStartTime != -1);
            measurements.add(System.currentTimeMillis() - mStartTime);
            signal.countDown();
          }
        }
);
      }
      private long mStartTime=-1;
    }
;
    try {
      activity.addEventListener(listener);
      bots.roots.openRoot(STRESS_ROOT_1_ID);
      signal.await();
    }
  finally {
      activity.removeEventListener(listener);
    }
    assertEquals(i,measurements.size());
    bots.roots.openRoot(STRESS_ROOT_0_ID);
  }
  assertEquals(NUM_MEASUREMENTS,measurements.size());
  final Bundle status=new Bundle();
  status.putDouble(KEY_FILES_LISTED_PERFORMANCE_FIRST,measurements.get(0));
  final Long[] rawMeasurements=measurements.toArray(new Long[NUM_MEASUREMENTS]);
  Arrays.sort(rawMeasurements);
  final long median=rawMeasurements[NUM_MEASUREMENTS / 2 - 1];
  status.putDouble(KEY_FILES_LISTED_PERFORMANCE_MEDIAN,median);
  getInstrumentation().sendStatus(Activity.RESULT_OK,status);
}
