{
  if (mAutoPairingAddressBlacklist != null)   return;
  copyAutoPairingData();
  FileInputStream fstream=null;
  try {
    fstream=new FileInputStream(DYNAMIC_AUTO_PAIRING_BLACKLIST);
    DataInputStream in=new DataInputStream(fstream);
    BufferedReader file=new BufferedReader(new InputStreamReader(in));
    String line;
    while ((line=file.readLine()) != null) {
      line=line.trim();
      if (line.length() == 0 || line.startsWith("//"))       continue;
      String[] value=line.split("=");
      if (value != null && value.length == 2) {
        String[] val=value[1].split(",");
        if (value[0].equalsIgnoreCase("AddressBlacklist")) {
          mAutoPairingAddressBlacklist=new ArrayList<String>(Arrays.asList(val));
        }
 else         if (value[0].equalsIgnoreCase("ExactNameBlacklist")) {
          mAutoPairingExactNameBlacklist=new ArrayList<String>(Arrays.asList(val));
        }
 else         if (value[0].equalsIgnoreCase("PartialNameBlacklist")) {
          mAutoPairingPartialNameBlacklist=new ArrayList<String>(Arrays.asList(val));
        }
 else         if (value[0].equalsIgnoreCase("FixedPinZerosKeyboardBlacklist")) {
          mAutoPairingFixedPinZerosKeyboardList=new ArrayList<String>(Arrays.asList(val));
        }
 else         if (value[0].equalsIgnoreCase("DynamicAddressBlacklist")) {
          mAutoPairingDynamicAddressBlacklist=new ArrayList<String>(Arrays.asList(val));
        }
 else {
          Log.e(TAG,"Error parsing Auto pairing blacklist file");
        }
      }
    }
  }
 catch (  FileNotFoundException e) {
    Log.e(TAG,"FileNotFoundException: readAutoPairingData " + e);
  }
catch (  IOException e) {
    Log.e(TAG,"IOException: readAutoPairingData " + e);
  }
 finally {
    if (fstream != null) {
      try {
        fstream.close();
      }
 catch (      IOException e) {
      }
    }
  }
}
