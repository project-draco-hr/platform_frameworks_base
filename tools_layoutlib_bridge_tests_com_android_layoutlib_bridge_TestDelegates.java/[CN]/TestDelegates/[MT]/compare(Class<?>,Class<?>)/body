{
  Method[] originalMethods=originalClass.getDeclaredMethods();
  for (  Method originalMethod : originalMethods) {
    if (originalMethod.getAnnotation(LayoutlibDelegate.class) == null) {
      continue;
    }
    Class<?>[] parameters=originalMethod.getParameterTypes();
    if ((originalMethod.getModifiers() & Modifier.STATIC) == 0) {
      Class<?>[] newParameters=new Class<?>[parameters.length + 1];
      newParameters[0]=originalClass;
      System.arraycopy(parameters,0,newParameters,1,parameters.length);
      parameters=newParameters;
    }
    if (originalClass.getEnclosingClass() != null && (originalClass.getModifiers() & Modifier.STATIC) == 0) {
      Class<?>[] newParameters=new Class<?>[parameters.length + 1];
      newParameters[0]=originalClass.getEnclosingClass();
      System.arraycopy(parameters,0,newParameters,1,parameters.length);
      parameters=newParameters;
    }
    try {
      Method delegateMethod=delegateClass.getDeclaredMethod(originalMethod.getName(),parameters);
      assertTrue(String.format("Delegate method %1$s for class %2$s is not static",delegateMethod.getName(),originalClass.getName()),(delegateMethod.getModifiers() & Modifier.STATIC) == Modifier.STATIC);
    }
 catch (    NoSuchMethodException e) {
      StringBuilder sb=new StringBuilder(originalMethod.getName() + "(");
      for (int j=0; j < parameters.length; j++) {
        Class<?> theClass=parameters[j];
        sb.append(theClass.getName());
        int dimensions=0;
        while (theClass.isArray()) {
          dimensions++;
          theClass=theClass.getComponentType();
        }
        for (int i=0; i < dimensions; i++) {
          sb.append("[]");
        }
        if (j < (parameters.length - 1)) {
          sb.append(",");
        }
      }
      sb.append(")");
      fail(String.format("Missing %1$s.%2$s",delegateClass.getName(),sb.toString()));
    }
  }
}
