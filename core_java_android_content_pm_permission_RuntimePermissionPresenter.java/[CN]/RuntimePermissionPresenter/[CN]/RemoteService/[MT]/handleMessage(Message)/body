{
switch (msg.what) {
case MSG_GET_APP_PERMISSIONS:
{
      SomeArgs args=(SomeArgs)msg.obj;
      final String packageName=(String)args.arg1;
      final OnResultCallback callback=(OnResultCallback)args.arg2;
      final Handler handler=(Handler)args.arg3;
      args.recycle();
      final IRuntimePermissionPresenter remoteInstance;
synchronized (mLock) {
        remoteInstance=mRemoteInstance;
      }
      if (remoteInstance == null) {
        return;
      }
      try {
        remoteInstance.getAppPermissions(packageName,new RemoteCallback(new RemoteCallback.OnResultListener(){
          @Override public void onResult(          Bundle result){
            final List<RuntimePermissionPresentationInfo> reportedPermissions;
            List<RuntimePermissionPresentationInfo> permissions=null;
            if (result != null) {
              permissions=result.getParcelableArrayList(KEY_RESULT);
            }
            if (permissions == null) {
              permissions=Collections.emptyList();
            }
            reportedPermissions=permissions;
            if (handler != null) {
              handler.post(new Runnable(){
                @Override public void run(){
                  callback.onGetAppPermissions(reportedPermissions);
                }
              }
);
            }
 else {
              callback.onGetAppPermissions(reportedPermissions);
            }
          }
        }
,this));
      }
 catch (      RemoteException re) {
        Log.e(TAG,"Error getting app permissions",re);
      }
      scheduleUnbind();
    }
  break;
case MSG_GET_APPS_USING_PERMISSIONS:
{
  SomeArgs args=(SomeArgs)msg.obj;
  final OnResultCallback callback=(OnResultCallback)args.arg1;
  final Handler handler=(Handler)args.arg2;
  final boolean system=args.argi1 == 1;
  args.recycle();
  final IRuntimePermissionPresenter remoteInstance;
synchronized (mLock) {
    remoteInstance=mRemoteInstance;
  }
  if (remoteInstance == null) {
    return;
  }
  try {
    remoteInstance.getAppsUsingPermissions(system,new RemoteCallback(new RemoteCallback.OnResultListener(){
      @Override public void onResult(      Bundle result){
        final List<ApplicationInfo> reportedApps;
        List<ApplicationInfo> apps=null;
        if (result != null) {
          apps=result.getParcelableArrayList(KEY_RESULT);
        }
        if (apps == null) {
          apps=Collections.emptyList();
        }
        reportedApps=apps;
        if (handler != null) {
          handler.post(new Runnable(){
            @Override public void run(){
              callback.getAppsUsingPermissions(system,reportedApps);
            }
          }
);
        }
 else {
          callback.getAppsUsingPermissions(system,reportedApps);
        }
      }
    }
,this));
  }
 catch (  RemoteException re) {
    Log.e(TAG,"Error getting apps using permissions",re);
  }
  scheduleUnbind();
}
break;
case MSG_UNBIND:
{
synchronized (mLock) {
if (mBound) {
  mContext.unbindService(this);
  mBound=false;
}
mRemoteInstance=null;
}
}
break;
}
synchronized (mLock) {
scheduleNextMessageIfNeededLocked();
}
}
