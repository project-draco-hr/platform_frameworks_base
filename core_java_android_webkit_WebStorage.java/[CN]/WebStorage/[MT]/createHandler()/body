{
  if (mHandler == null) {
    mHandler=new Handler(){
      @Override public void handleMessage(      Message msg){
switch (msg.what) {
case SET_QUOTA_ORIGIN:
{
            Origin website=(Origin)msg.obj;
            nativeSetQuotaForOrigin(website.getOrigin(),website.getQuota());
          }
        break;
case DELETE_ORIGIN:
{
        Origin website=(Origin)msg.obj;
        nativeDeleteOrigin(website.getOrigin());
      }
    break;
case DELETE_ALL:
  nativeDeleteAllData();
break;
case GET_ORIGINS:
{
syncValues();
ValueCallback callback=(ValueCallback)msg.obj;
Map origins=new HashMap(mOrigins);
Map values=new HashMap<String,Object>();
values.put(CALLBACK,callback);
values.put(ORIGINS,origins);
postUIMessage(Message.obtain(null,RETURN_ORIGINS,values));
}
break;
case GET_USAGE_ORIGIN:
{
syncValues();
Map values=(Map)msg.obj;
String origin=(String)values.get(ORIGIN);
ValueCallback callback=(ValueCallback)values.get(CALLBACK);
Origin website=mOrigins.get(origin);
Map retValues=new HashMap<String,Object>();
retValues.put(CALLBACK,callback);
if (website != null) {
long usage=website.getUsage();
retValues.put(USAGE,new Long(usage));
}
postUIMessage(Message.obtain(null,RETURN_USAGE_ORIGIN,retValues));
}
break;
case GET_QUOTA_ORIGIN:
{
syncValues();
Map values=(Map)msg.obj;
String origin=(String)values.get(ORIGIN);
ValueCallback callback=(ValueCallback)values.get(CALLBACK);
Origin website=mOrigins.get(origin);
Map retValues=new HashMap<String,Object>();
retValues.put(CALLBACK,callback);
if (website != null) {
long quota=website.getQuota();
retValues.put(QUOTA,new Long(quota));
}
postUIMessage(Message.obtain(null,RETURN_QUOTA_ORIGIN,retValues));
}
break;
case UPDATE:
syncValues();
break;
}
}
}
;
}
}
