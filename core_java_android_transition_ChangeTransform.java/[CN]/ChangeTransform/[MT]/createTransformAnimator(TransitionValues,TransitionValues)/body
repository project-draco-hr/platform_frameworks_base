{
  Matrix startMatrix=(Matrix)startValues.values.get(PROPNAME_MATRIX);
  Matrix endMatrix=(Matrix)endValues.values.get(PROPNAME_MATRIX);
  if (startMatrix == null) {
    startMatrix=Matrix.IDENTITY_MATRIX;
  }
  if (endMatrix == null) {
    endMatrix=Matrix.IDENTITY_MATRIX;
  }
  if (startMatrix.equals(endMatrix)) {
    return null;
  }
  final Transforms transforms=(Transforms)endValues.values.get(PROPNAME_TRANSFORMS);
  final View view=endValues.view;
  setIdentityTransforms(view);
  ObjectAnimator animator=ObjectAnimator.ofObject(view,ANIMATION_MATRIX_PROPERTY,new TransitionUtils.MatrixEvaluator(),startMatrix,endMatrix);
  AnimatorListenerAdapter listener=new AnimatorListenerAdapter(){
    private boolean mIsCanceled;
    private Matrix mTempMatrix;
    @Override public void onAnimationCancel(    Animator animation){
      mIsCanceled=true;
    }
    @Override public void onAnimationEnd(    Animator animation){
      if (!mIsCanceled) {
        view.setTagInternal(R.id.transitionTransform,null);
        view.setTagInternal(R.id.parentMatrix,null);
      }
      ANIMATION_MATRIX_PROPERTY.set(view,null);
      transforms.restore(view);
    }
    @Override public void onAnimationPause(    Animator animation){
      ValueAnimator animator=(ValueAnimator)animation;
      Matrix currentMatrix=(Matrix)animator.getAnimatedValue();
      if (mTempMatrix == null) {
        mTempMatrix=new Matrix(currentMatrix);
      }
 else {
        mTempMatrix.set(currentMatrix);
      }
      view.setTagInternal(R.id.transitionTransform,mTempMatrix);
      transforms.restore(view);
    }
    @Override public void onAnimationResume(    Animator animation){
      setIdentityTransforms(view);
    }
  }
;
  animator.addListener(listener);
  animator.addPauseListener(listener);
  return animator;
}
