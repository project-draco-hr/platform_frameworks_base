{
  uid=mapUid(uid);
  if (type == WAKE_TYPE_PARTIAL) {
    mWakeLockNesting--;
    historyName=historyName == null || mRecordAllWakeLocks ? name : historyName;
    if (mWakeLockNesting == 0) {
      mHistoryCur.states&=~HistoryItem.STATE_WAKE_LOCK_FLAG;
      if (DEBUG_HISTORY)       Slog.v(TAG,"Stop wake lock to: " + Integer.toHexString(mHistoryCur.states));
      if (mRecordAllWakeLocks || (historyName != null && !historyName.equals(mInitialAcquireWakeName)) || uid != mInitialAcquireWakeUid) {
        mHistoryCur.wakelockTag=mHistoryCur.localWakelockTag;
        mHistoryCur.wakelockTag.string=historyName;
        mHistoryCur.wakelockTag.uid=uid;
      }
      mInitialAcquireWakeName=null;
      mInitialAcquireWakeUid=-1;
      addHistoryRecordLocked(elapsedRealtime,uptime);
    }
 else     if (mRecordAllWakeLocks) {
      if (mActiveEvents.updateState(HistoryItem.EVENT_WAKE_LOCK_FINISH,historyName,uid,0)) {
        return;
      }
      addHistoryEventLocked(elapsedRealtime,uptime,HistoryItem.EVENT_WAKE_LOCK_FINISH,historyName,uid);
    }
  }
  if (uid >= 0) {
    requestWakelockCpuUpdate();
    getUidStatsLocked(uid).noteStopWakeLocked(pid,name,type,elapsedRealtime);
  }
}
