{
  int firstToken=src.readInt();
  int deltaTimeToken=firstToken & DELTA_TIME_MASK;
  cur.cmd=HistoryItem.CMD_UPDATE;
  cur.numReadInts=1;
  if (DEBUG)   Slog.i(TAG,"READ DELTA: firstToken=0x" + Integer.toHexString(firstToken) + " deltaTimeToken="+ deltaTimeToken);
  if (deltaTimeToken < DELTA_TIME_ABS) {
    cur.time+=deltaTimeToken;
  }
 else   if (deltaTimeToken == DELTA_TIME_ABS) {
    cur.time=src.readLong();
    cur.numReadInts+=2;
    if (DEBUG)     Slog.i(TAG,"READ DELTA: ABS time=" + cur.time);
    cur.readFromParcel(src);
    return;
  }
 else   if (deltaTimeToken == DELTA_TIME_INT) {
    int delta=src.readInt();
    cur.time+=delta;
    cur.numReadInts+=1;
    if (DEBUG)     Slog.i(TAG,"READ DELTA: time delta=" + delta + " new time="+ cur.time);
  }
 else {
    long delta=src.readLong();
    if (DEBUG)     Slog.i(TAG,"READ DELTA: time delta=" + delta + " new time="+ cur.time);
    cur.time+=delta;
    cur.numReadInts+=2;
  }
  final int batteryLevelInt;
  if ((firstToken & DELTA_BATTERY_LEVEL_FLAG) != 0) {
    batteryLevelInt=src.readInt();
    cur.batteryLevel=(byte)((batteryLevelInt >> 25) & 0x7f);
    cur.batteryTemperature=(short)((batteryLevelInt << 7) >> 21);
    cur.batteryVoltage=(char)(batteryLevelInt & 0x3fff);
    cur.numReadInts+=1;
    if (DEBUG)     Slog.i(TAG,"READ DELTA: batteryToken=0x" + Integer.toHexString(batteryLevelInt) + " batteryLevel="+ cur.batteryLevel+ " batteryTemp="+ cur.batteryTemperature+ " batteryVolt="+ (int)cur.batteryVoltage);
  }
 else {
    batteryLevelInt=0;
  }
  if ((firstToken & DELTA_STATE_FLAG) != 0) {
    int stateInt=src.readInt();
    cur.states=(firstToken & DELTA_STATE_MASK) | (stateInt & (~DELTA_STATE_MASK));
    cur.batteryStatus=(byte)((stateInt >> STATE_BATTERY_STATUS_SHIFT) & STATE_BATTERY_STATUS_MASK);
    cur.batteryHealth=(byte)((stateInt >> STATE_BATTERY_HEALTH_SHIFT) & STATE_BATTERY_HEALTH_MASK);
    cur.batteryPlugType=(byte)((stateInt >> STATE_BATTERY_PLUG_SHIFT) & STATE_BATTERY_PLUG_MASK);
switch (cur.batteryPlugType) {
case 1:
      cur.batteryPlugType=BatteryManager.BATTERY_PLUGGED_AC;
    break;
case 2:
  cur.batteryPlugType=BatteryManager.BATTERY_PLUGGED_USB;
break;
case 3:
cur.batteryPlugType=BatteryManager.BATTERY_PLUGGED_WIRELESS;
break;
}
cur.numReadInts+=1;
if (DEBUG) Slog.i(TAG,"READ DELTA: stateToken=0x" + Integer.toHexString(stateInt) + " batteryStatus="+ cur.batteryStatus+ " batteryHealth="+ cur.batteryHealth+ " batteryPlugType="+ cur.batteryPlugType+ " states=0x"+ Integer.toHexString(cur.states));
}
 else {
cur.states=(firstToken & DELTA_STATE_MASK) | (cur.states & (~DELTA_STATE_MASK));
}
if ((firstToken & DELTA_STATE2_FLAG) != 0) {
cur.states2=src.readInt();
if (DEBUG) Slog.i(TAG,"READ DELTA: states2=0x" + Integer.toHexString(cur.states2));
}
if ((firstToken & DELTA_WAKELOCK_FLAG) != 0) {
int indexes=src.readInt();
int wakeLockIndex=indexes & 0xffff;
int wakeReasonIndex=(indexes >> 16) & 0xffff;
if (wakeLockIndex != 0xffff) {
cur.wakelockTag=cur.localWakelockTag;
readHistoryTag(wakeLockIndex,cur.wakelockTag);
if (DEBUG) Slog.i(TAG,"READ DELTA: wakelockTag=#" + cur.wakelockTag.poolIdx + " "+ cur.wakelockTag.uid+ ":"+ cur.wakelockTag.string);
}
 else {
cur.wakelockTag=null;
}
if (wakeReasonIndex != 0xffff) {
cur.wakeReasonTag=cur.localWakeReasonTag;
readHistoryTag(wakeReasonIndex,cur.wakeReasonTag);
if (DEBUG) Slog.i(TAG,"READ DELTA: wakeReasonTag=#" + cur.wakeReasonTag.poolIdx + " "+ cur.wakeReasonTag.uid+ ":"+ cur.wakeReasonTag.string);
}
 else {
cur.wakeReasonTag=null;
}
cur.numReadInts+=1;
}
 else {
cur.wakelockTag=null;
cur.wakeReasonTag=null;
}
if ((firstToken & DELTA_EVENT_FLAG) != 0) {
cur.eventTag=cur.localEventTag;
final int codeAndIndex=src.readInt();
cur.eventCode=(codeAndIndex & 0xffff);
final int index=((codeAndIndex >> 16) & 0xffff);
readHistoryTag(index,cur.eventTag);
cur.numReadInts+=1;
if (DEBUG) Slog.i(TAG,"READ DELTA: event=" + cur.eventCode + " tag=#"+ cur.eventTag.poolIdx+ " "+ cur.eventTag.uid+ ":"+ cur.eventTag.string);
}
 else {
cur.eventCode=HistoryItem.EVENT_NONE;
}
if ((batteryLevelInt & BATTERY_DELTA_LEVEL_FLAG) != 0) {
cur.stepDetails=mReadHistoryStepDetails;
cur.stepDetails.readFromParcel(src);
}
 else {
cur.stepDetails=null;
}
}
