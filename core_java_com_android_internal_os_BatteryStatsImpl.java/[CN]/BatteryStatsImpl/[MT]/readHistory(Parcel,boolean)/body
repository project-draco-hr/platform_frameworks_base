{
  final long historyBaseTime=in.readLong();
  mHistoryBuffer.setDataSize(0);
  mHistoryBuffer.setDataPosition(0);
  mHistoryStringPool.clear();
  mNextHistoryStringIdx=0;
  int numStrings=in.readInt();
  for (int i=0; i < numStrings; i++) {
    String str=in.readString();
    int idx=in.readInt();
    mHistoryStringPool.put(str,idx);
    if (idx >= mNextHistoryStringIdx) {
      mNextHistoryStringIdx=idx + 1;
    }
  }
  int bufSize=in.readInt();
  int curPos=in.dataPosition();
  if (bufSize >= (MAX_MAX_HISTORY_BUFFER * 3)) {
    Slog.w(TAG,"File corrupt: history data buffer too large " + bufSize);
  }
 else   if ((bufSize & ~3) != bufSize) {
    Slog.w(TAG,"File corrupt: history data buffer not aligned " + bufSize);
  }
 else {
    if (DEBUG_HISTORY)     Slog.i(TAG,"***************** READING NEW HISTORY: " + bufSize + " bytes at "+ curPos);
    mHistoryBuffer.appendFrom(in,curPos,bufSize);
    in.setDataPosition(curPos + bufSize);
  }
  if (andOldHistory) {
    readOldHistory(in);
  }
  if (DEBUG_HISTORY) {
    StringBuilder sb=new StringBuilder(128);
    sb.append("****************** OLD mHistoryBaseTime: ");
    TimeUtils.formatDuration(mHistoryBaseTime,sb);
    Slog.i(TAG,sb.toString());
  }
  mHistoryBaseTime=historyBaseTime;
  if (DEBUG_HISTORY) {
    StringBuilder sb=new StringBuilder(128);
    sb.append("****************** NEW mHistoryBaseTime: ");
    TimeUtils.formatDuration(mHistoryBaseTime,sb);
    Slog.i(TAG,sb.toString());
  }
  if (mHistoryBaseTime > 0) {
    long oldnow=SystemClock.elapsedRealtime();
    mHistoryBaseTime=(mHistoryBaseTime - oldnow) + 60 * 1000;
    if (DEBUG_HISTORY) {
      StringBuilder sb=new StringBuilder(128);
      sb.append("****************** ADJUSTED mHistoryBaseTime: ");
      TimeUtils.formatDuration(mHistoryBaseTime,sb);
      Slog.i(TAG,sb.toString());
    }
  }
}
