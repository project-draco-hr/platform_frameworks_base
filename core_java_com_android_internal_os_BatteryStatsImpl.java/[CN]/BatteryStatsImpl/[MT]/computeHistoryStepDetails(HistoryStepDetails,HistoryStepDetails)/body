{
  final HistoryStepDetails tmp=last != null ? mTmpHistoryStepDetails : out;
  requestImmediateCpuUpdate();
  if (last == null) {
    final int NU=mUidStats.size();
    for (int i=0; i < NU; i++) {
      final BatteryStatsImpl.Uid uid=mUidStats.valueAt(i);
      uid.mLastStepUserTime=uid.mCurStepUserTime;
      uid.mLastStepSystemTime=uid.mCurStepSystemTime;
    }
    mLastStepCpuUserTime=mCurStepCpuUserTime;
    mLastStepCpuSystemTime=mCurStepCpuSystemTime;
    mLastStepStatUserTime=mCurStepStatUserTime;
    mLastStepStatSystemTime=mCurStepStatSystemTime;
    mLastStepStatIOWaitTime=mCurStepStatIOWaitTime;
    mLastStepStatIrqTime=mCurStepStatIrqTime;
    mLastStepStatSoftIrqTime=mCurStepStatSoftIrqTime;
    mLastStepStatIdleTime=mCurStepStatIdleTime;
    tmp.clear();
    return;
  }
  if (DEBUG) {
    Slog.d(TAG,"Step stats last: user=" + mLastStepCpuUserTime + " sys="+ mLastStepStatSystemTime+ " io="+ mLastStepStatIOWaitTime+ " irq="+ mLastStepStatIrqTime+ " sirq="+ mLastStepStatSoftIrqTime+ " idle="+ mLastStepStatIdleTime);
    Slog.d(TAG,"Step stats cur: user=" + mCurStepCpuUserTime + " sys="+ mCurStepStatSystemTime+ " io="+ mCurStepStatIOWaitTime+ " irq="+ mCurStepStatIrqTime+ " sirq="+ mCurStepStatSoftIrqTime+ " idle="+ mCurStepStatIdleTime);
  }
  out.userTime=(int)(mCurStepCpuUserTime - mLastStepCpuUserTime);
  out.systemTime=(int)(mCurStepCpuSystemTime - mLastStepCpuSystemTime);
  out.statUserTime=(int)(mCurStepStatUserTime - mLastStepStatUserTime);
  out.statSystemTime=(int)(mCurStepStatSystemTime - mLastStepStatSystemTime);
  out.statIOWaitTime=(int)(mCurStepStatIOWaitTime - mLastStepStatIOWaitTime);
  out.statIrqTime=(int)(mCurStepStatIrqTime - mLastStepStatIrqTime);
  out.statSoftIrqTime=(int)(mCurStepStatSoftIrqTime - mLastStepStatSoftIrqTime);
  out.statIdlTime=(int)(mCurStepStatIdleTime - mLastStepStatIdleTime);
  out.appCpuUid1=out.appCpuUid2=out.appCpuUid3=-1;
  out.appCpuUTime1=out.appCpuUTime2=out.appCpuUTime3=0;
  out.appCpuSTime1=out.appCpuSTime2=out.appCpuSTime3=0;
  final int NU=mUidStats.size();
  for (int i=0; i < NU; i++) {
    final BatteryStatsImpl.Uid uid=mUidStats.valueAt(i);
    final int totalUTime=(int)(uid.mCurStepUserTime - uid.mLastStepUserTime);
    final int totalSTime=(int)(uid.mCurStepSystemTime - uid.mLastStepSystemTime);
    final int totalTime=totalUTime + totalSTime;
    uid.mLastStepUserTime=uid.mCurStepUserTime;
    uid.mLastStepSystemTime=uid.mCurStepSystemTime;
    if (totalTime <= (out.appCpuUTime3 + out.appCpuSTime3)) {
      continue;
    }
    if (totalTime <= (out.appCpuUTime2 + out.appCpuSTime2)) {
      out.appCpuUid3=uid.mUid;
      out.appCpuUTime3=totalUTime;
      out.appCpuSTime3=totalSTime;
    }
 else {
      out.appCpuUid3=out.appCpuUid2;
      out.appCpuUTime3=out.appCpuUTime2;
      out.appCpuSTime3=out.appCpuSTime2;
      if (totalTime <= (out.appCpuUTime1 + out.appCpuSTime1)) {
        out.appCpuUid2=uid.mUid;
        out.appCpuUTime2=totalUTime;
        out.appCpuSTime2=totalSTime;
      }
 else {
        out.appCpuUid2=out.appCpuUid1;
        out.appCpuUTime2=out.appCpuUTime1;
        out.appCpuSTime2=out.appCpuSTime1;
        out.appCpuUid1=uid.mUid;
        out.appCpuUTime1=totalUTime;
        out.appCpuSTime1=totalSTime;
      }
    }
  }
  mLastStepCpuUserTime=mCurStepCpuUserTime;
  mLastStepCpuSystemTime=mCurStepCpuSystemTime;
  mLastStepStatUserTime=mCurStepStatUserTime;
  mLastStepStatSystemTime=mCurStepStatSystemTime;
  mLastStepStatIOWaitTime=mCurStepStatIOWaitTime;
  mLastStepStatIrqTime=mCurStepStatIrqTime;
  mLastStepStatSoftIrqTime=mCurStepStatSoftIrqTime;
  mLastStepStatIdleTime=mCurStepStatIdleTime;
}
