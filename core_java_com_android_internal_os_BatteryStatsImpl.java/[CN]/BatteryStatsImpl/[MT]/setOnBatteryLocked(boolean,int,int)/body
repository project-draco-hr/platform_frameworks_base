{
  boolean doWrite=false;
  Message m=mHandler.obtainMessage(MSG_REPORT_POWER_CHANGE);
  m.arg1=onBattery ? 1 : 0;
  mHandler.sendMessage(m);
  mOnBattery=mOnBatteryInternal=onBattery;
  long uptime=SystemClock.uptimeMillis() * 1000;
  long mSecRealtime=SystemClock.elapsedRealtime();
  long realtime=mSecRealtime * 1000;
  if (onBattery) {
    boolean reset=false;
    if (oldStatus == BatteryManager.BATTERY_STATUS_FULL || level >= 90 || (mDischargeCurrentLevel < 20 && level >= 80)) {
      doWrite=true;
      resetAllStatsLocked();
      mDischargeStartLevel=level;
      reset=true;
    }
    pullPendingStateUpdatesLocked();
    mHistoryCur.batteryLevel=(byte)level;
    mHistoryCur.states&=~HistoryItem.STATE_BATTERY_PLUGGED_FLAG;
    if (DEBUG_HISTORY)     Slog.v(TAG,"Battery unplugged to: " + Integer.toHexString(mHistoryCur.states));
    addHistoryRecordLocked(mSecRealtime);
    mDischargeCurrentLevel=mDischargeUnplugLevel=level;
    if (mScreenOn) {
      mDischargeScreenOnUnplugLevel=level;
      mDischargeScreenOffUnplugLevel=0;
    }
 else {
      mDischargeScreenOnUnplugLevel=0;
      mDischargeScreenOffUnplugLevel=level;
    }
    mDischargeAmountScreenOn=0;
    mDischargeAmountScreenOff=0;
    updateTimeBasesLocked(true,!mScreenOn,uptime,realtime);
    if (reset) {
      initActiveHistoryEventsLocked(mSecRealtime);
    }
  }
 else {
    pullPendingStateUpdatesLocked();
    mHistoryCur.batteryLevel=(byte)level;
    mHistoryCur.states|=HistoryItem.STATE_BATTERY_PLUGGED_FLAG;
    if (DEBUG_HISTORY)     Slog.v(TAG,"Battery plugged to: " + Integer.toHexString(mHistoryCur.states));
    addHistoryRecordLocked(mSecRealtime);
    mDischargeCurrentLevel=level;
    if (level < mDischargeUnplugLevel) {
      mLowDischargeAmountSinceCharge+=mDischargeUnplugLevel - level - 1;
      mHighDischargeAmountSinceCharge+=mDischargeUnplugLevel - level;
    }
    updateDischargeScreenLevelsLocked(mScreenOn,mScreenOn);
    updateTimeBasesLocked(false,!mScreenOn,uptime,realtime);
  }
  if (doWrite || (mLastWriteTime + (60 * 1000)) < mSecRealtime) {
    if (mFile != null) {
      writeAsyncLocked();
    }
  }
}
