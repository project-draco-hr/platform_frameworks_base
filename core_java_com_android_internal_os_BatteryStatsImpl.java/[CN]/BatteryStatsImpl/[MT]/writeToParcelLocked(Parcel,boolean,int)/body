{
  pullPendingStateUpdatesLocked();
  final long uSecUptime=SystemClock.uptimeMillis() * 1000;
  final long uSecRealtime=SystemClock.elapsedRealtime() * 1000;
  final long batteryUptime=getBatteryUptimeLocked(uSecUptime);
  final long batteryRealtime=getBatteryRealtimeLocked(uSecRealtime);
  out.writeInt(MAGIC);
  writeHistory(out,false);
  out.writeInt(mStartCount);
  out.writeLong(mBatteryUptime);
  out.writeLong(mBatteryRealtime);
  out.writeLong(mStartClockTime);
  mScreenOnTimer.writeToParcel(out,batteryRealtime);
  for (int i=0; i < NUM_SCREEN_BRIGHTNESS_BINS; i++) {
    mScreenBrightnessTimer[i].writeToParcel(out,batteryRealtime);
  }
  mInputEventCounter.writeToParcel(out);
  mPhoneOnTimer.writeToParcel(out,batteryRealtime);
  for (int i=0; i < SignalStrength.NUM_SIGNAL_STRENGTH_BINS; i++) {
    mPhoneSignalStrengthsTimer[i].writeToParcel(out,batteryRealtime);
  }
  mPhoneSignalScanningTimer.writeToParcel(out,batteryRealtime);
  for (int i=0; i < NUM_DATA_CONNECTION_TYPES; i++) {
    mPhoneDataConnectionsTimer[i].writeToParcel(out,batteryRealtime);
  }
  for (int i=0; i < NUM_NETWORK_ACTIVITY_TYPES; i++) {
    mNetworkByteActivityCounters[i].writeToParcel(out);
    mNetworkPacketActivityCounters[i].writeToParcel(out);
  }
  mMobileRadioActiveTimer.writeToParcel(out,batteryRealtime);
  mWifiOnTimer.writeToParcel(out,batteryRealtime);
  mGlobalWifiRunningTimer.writeToParcel(out,batteryRealtime);
  mBluetoothOnTimer.writeToParcel(out,batteryRealtime);
  for (int i=0; i < NUM_BLUETOOTH_ACTIVE_TYPES; i++) {
    mBluetoothActiveTimer[i].writeToParcel(out,batteryRealtime);
  }
  out.writeLong(mUptime);
  out.writeLong(mUptimeStart);
  out.writeLong(mRealtime);
  out.writeLong(mRealtimeStart);
  out.writeInt(mOnBattery ? 1 : 0);
  out.writeLong(batteryUptime);
  out.writeLong(mTrackBatteryUptimeStart);
  out.writeLong(batteryRealtime);
  out.writeLong(mTrackBatteryRealtimeStart);
  out.writeLong(mUnpluggedBatteryUptime);
  out.writeLong(mUnpluggedBatteryRealtime);
  out.writeInt(mDischargeUnplugLevel);
  out.writeInt(mDischargeCurrentLevel);
  out.writeInt(mLowDischargeAmountSinceCharge);
  out.writeInt(mHighDischargeAmountSinceCharge);
  out.writeInt(mDischargeAmountScreenOn);
  out.writeInt(mDischargeAmountScreenOnSinceCharge);
  out.writeInt(mDischargeAmountScreenOff);
  out.writeInt(mDischargeAmountScreenOffSinceCharge);
  out.writeLong(mLastWriteTime);
  out.writeInt(getBluetoothPingCount());
  if (inclUids) {
    out.writeInt(mKernelWakelockStats.size());
    for (    Map.Entry<String,SamplingTimer> ent : mKernelWakelockStats.entrySet()) {
      SamplingTimer kwlt=ent.getValue();
      if (kwlt != null) {
        out.writeInt(1);
        out.writeString(ent.getKey());
        Timer.writeTimerToParcel(out,kwlt,batteryRealtime);
      }
 else {
        out.writeInt(0);
      }
    }
  }
 else {
    out.writeInt(0);
  }
  out.writeInt(sNumSpeedSteps);
  if (inclUids) {
    int size=mUidStats.size();
    out.writeInt(size);
    for (int i=0; i < size; i++) {
      out.writeInt(mUidStats.keyAt(i));
      Uid uid=mUidStats.valueAt(i);
      uid.writeToParcelLocked(out,batteryRealtime);
    }
  }
 else {
    out.writeInt(0);
  }
}
