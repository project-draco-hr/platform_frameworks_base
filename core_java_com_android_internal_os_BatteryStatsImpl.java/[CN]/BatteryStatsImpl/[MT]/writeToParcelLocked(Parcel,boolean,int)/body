{
  pullPendingStateUpdatesLocked();
  long startClockTime=getStartClockTime();
  final long uSecUptime=SystemClock.uptimeMillis() * 1000;
  final long uSecRealtime=SystemClock.elapsedRealtime() * 1000;
  final long batteryRealtime=mOnBatteryTimeBase.getRealtime(uSecRealtime);
  final long batteryScreenOffRealtime=mOnBatteryScreenOffTimeBase.getRealtime(uSecRealtime);
  out.writeInt(MAGIC);
  writeHistory(out,true,false);
  out.writeInt(mStartCount);
  out.writeLong(startClockTime);
  out.writeString(mStartPlatformVersion);
  out.writeString(mEndPlatformVersion);
  out.writeLong(mUptime);
  out.writeLong(mUptimeStart);
  out.writeLong(mRealtime);
  out.writeLong(mRealtimeStart);
  out.writeInt(mOnBattery ? 1 : 0);
  mOnBatteryTimeBase.writeToParcel(out,uSecUptime,uSecRealtime);
  mOnBatteryScreenOffTimeBase.writeToParcel(out,uSecUptime,uSecRealtime);
  mScreenOnTimer.writeToParcel(out,uSecRealtime);
  for (int i=0; i < NUM_SCREEN_BRIGHTNESS_BINS; i++) {
    mScreenBrightnessTimer[i].writeToParcel(out,uSecRealtime);
  }
  mInteractiveTimer.writeToParcel(out,uSecRealtime);
  mPowerSaveModeEnabledTimer.writeToParcel(out,uSecRealtime);
  out.writeLong(mLongestLightIdleTime);
  out.writeLong(mLongestFullIdleTime);
  mDeviceIdleModeLightTimer.writeToParcel(out,uSecRealtime);
  mDeviceIdleModeFullTimer.writeToParcel(out,uSecRealtime);
  mDeviceLightIdlingTimer.writeToParcel(out,uSecRealtime);
  mDeviceIdlingTimer.writeToParcel(out,uSecRealtime);
  mPhoneOnTimer.writeToParcel(out,uSecRealtime);
  for (int i=0; i < SignalStrength.NUM_SIGNAL_STRENGTH_BINS; i++) {
    mPhoneSignalStrengthsTimer[i].writeToParcel(out,uSecRealtime);
  }
  mPhoneSignalScanningTimer.writeToParcel(out,uSecRealtime);
  for (int i=0; i < NUM_DATA_CONNECTION_TYPES; i++) {
    mPhoneDataConnectionsTimer[i].writeToParcel(out,uSecRealtime);
  }
  for (int i=0; i < NUM_NETWORK_ACTIVITY_TYPES; i++) {
    mNetworkByteActivityCounters[i].writeToParcel(out);
    mNetworkPacketActivityCounters[i].writeToParcel(out);
  }
  mMobileRadioActiveTimer.writeToParcel(out,uSecRealtime);
  mMobileRadioActivePerAppTimer.writeToParcel(out,uSecRealtime);
  mMobileRadioActiveAdjustedTime.writeToParcel(out);
  mMobileRadioActiveUnknownTime.writeToParcel(out);
  mMobileRadioActiveUnknownCount.writeToParcel(out);
  mWifiOnTimer.writeToParcel(out,uSecRealtime);
  mGlobalWifiRunningTimer.writeToParcel(out,uSecRealtime);
  for (int i=0; i < NUM_WIFI_STATES; i++) {
    mWifiStateTimer[i].writeToParcel(out,uSecRealtime);
  }
  for (int i=0; i < NUM_WIFI_SUPPL_STATES; i++) {
    mWifiSupplStateTimer[i].writeToParcel(out,uSecRealtime);
  }
  for (int i=0; i < NUM_WIFI_SIGNAL_STRENGTH_BINS; i++) {
    mWifiSignalStrengthsTimer[i].writeToParcel(out,uSecRealtime);
  }
  for (int i=0; i < NUM_CONTROLLER_ACTIVITY_TYPES; i++) {
    mBluetoothActivityCounters[i].writeToParcel(out);
  }
  for (int i=0; i < NUM_CONTROLLER_ACTIVITY_TYPES; i++) {
    mWifiActivityCounters[i].writeToParcel(out);
  }
  out.writeInt(mHasWifiEnergyReporting ? 1 : 0);
  out.writeInt(mHasBluetoothEnergyReporting ? 1 : 0);
  out.writeInt(mNumConnectivityChange);
  out.writeInt(mLoadedNumConnectivityChange);
  out.writeInt(mUnpluggedNumConnectivityChange);
  mFlashlightOnTimer.writeToParcel(out,uSecRealtime);
  mCameraOnTimer.writeToParcel(out,uSecRealtime);
  out.writeInt(mDischargeUnplugLevel);
  out.writeInt(mDischargePlugLevel);
  out.writeInt(mDischargeCurrentLevel);
  out.writeInt(mCurrentBatteryLevel);
  out.writeInt(mLowDischargeAmountSinceCharge);
  out.writeInt(mHighDischargeAmountSinceCharge);
  out.writeInt(mDischargeAmountScreenOn);
  out.writeInt(mDischargeAmountScreenOnSinceCharge);
  out.writeInt(mDischargeAmountScreenOff);
  out.writeInt(mDischargeAmountScreenOffSinceCharge);
  mDischargeStepTracker.writeToParcel(out);
  mChargeStepTracker.writeToParcel(out);
  out.writeLong(mLastWriteTime);
  if (inclUids) {
    out.writeInt(mKernelWakelockStats.size());
    for (    Map.Entry<String,SamplingTimer> ent : mKernelWakelockStats.entrySet()) {
      SamplingTimer kwlt=ent.getValue();
      if (kwlt != null) {
        out.writeInt(1);
        out.writeString(ent.getKey());
        kwlt.writeToParcel(out,uSecRealtime);
      }
 else {
        out.writeInt(0);
      }
    }
    out.writeInt(mWakeupReasonStats.size());
    for (    Map.Entry<String,SamplingTimer> ent : mWakeupReasonStats.entrySet()) {
      SamplingTimer timer=ent.getValue();
      if (timer != null) {
        out.writeInt(1);
        out.writeString(ent.getKey());
        timer.writeToParcel(out,uSecRealtime);
      }
 else {
        out.writeInt(0);
      }
    }
  }
 else {
    out.writeInt(0);
  }
  if (inclUids) {
    int size=mUidStats.size();
    out.writeInt(size);
    for (int i=0; i < size; i++) {
      out.writeInt(mUidStats.keyAt(i));
      Uid uid=mUidStats.valueAt(i);
      uid.writeToParcelLocked(out,uSecRealtime);
    }
  }
 else {
    out.writeInt(0);
  }
}
