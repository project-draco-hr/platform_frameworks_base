{
  if (!SystemProperties.getBoolean(PROP_QTAGUID_ENABLED,false))   return;
  final NetworkStats snapshot;
  try {
    snapshot=mNetworkStatsFactory.readNetworkStatsDetail();
  }
 catch (  IOException e) {
    Log.wtf(TAG,"Failed to read network stats",e);
    return;
  }
  if (mLastSnapshot == null) {
    mLastSnapshot=snapshot;
    return;
  }
  final NetworkStats delta=snapshot.subtract(mLastSnapshot);
  mLastSnapshot=snapshot;
  NetworkStats.Entry entry=null;
  final int size=delta.size();
  for (int i=0; i < size; i++) {
    entry=delta.getValues(i,entry);
    if (entry.rxBytes == 0 || entry.txBytes == 0)     continue;
    if (entry.tag != NetworkStats.TAG_NONE)     continue;
    final Uid u=getUidStatsLocked(entry.uid);
    if (mMobileIfaces.contains(entry.iface)) {
      u.noteNetworkActivityLocked(NETWORK_MOBILE_RX_BYTES,entry.rxBytes);
      u.noteNetworkActivityLocked(NETWORK_MOBILE_TX_BYTES,entry.txBytes);
      mNetworkActivityCounters[NETWORK_MOBILE_RX_BYTES].addCountLocked(entry.rxBytes);
      mNetworkActivityCounters[NETWORK_MOBILE_TX_BYTES].addCountLocked(entry.txBytes);
    }
 else     if (mWifiIfaces.contains(entry.iface)) {
      u.noteNetworkActivityLocked(NETWORK_WIFI_RX_BYTES,entry.rxBytes);
      u.noteNetworkActivityLocked(NETWORK_WIFI_TX_BYTES,entry.txBytes);
      mNetworkActivityCounters[NETWORK_WIFI_RX_BYTES].addCountLocked(entry.rxBytes);
      mNetworkActivityCounters[NETWORK_WIFI_TX_BYTES].addCountLocked(entry.txBytes);
    }
  }
}
