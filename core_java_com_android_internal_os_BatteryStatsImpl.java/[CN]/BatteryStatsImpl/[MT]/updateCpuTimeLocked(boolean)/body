{
  final int cpuSpeedSteps=getCpuSpeedSteps();
  final long[] cpuSpeeds=mKernelCpuSpeedReader.readDelta();
  KernelUidCpuTimeReader.Callback callback=null;
  if (mOnBatteryInternal && !firstTime) {
    callback=new KernelUidCpuTimeReader.Callback(){
      @Override public void onUidCpuTime(      int uid,      long userTimeUs,      long systemTimeUs){
        final Uid u=getUidStatsLocked(mapUid(uid));
        u.mUserCpuTime.addCountLocked(userTimeUs);
        u.mSystemCpuTime.addCountLocked(systemTimeUs);
        for (int i=0; i < cpuSpeedSteps; i++) {
          if (u.mSpeedBins[i] == null) {
            u.mSpeedBins[i]=new LongSamplingCounter(mOnBatteryTimeBase);
          }
          u.mSpeedBins[i].addCountLocked(cpuSpeeds[i]);
        }
      }
    }
;
  }
  mKernelUidCpuTimeReader.readDelta(callback);
}
