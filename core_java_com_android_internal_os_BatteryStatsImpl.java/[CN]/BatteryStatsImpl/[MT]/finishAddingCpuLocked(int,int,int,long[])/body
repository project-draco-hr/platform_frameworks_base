{
  final int N=mPartialTimers.size();
  if (perc != 0) {
    int num=0;
    for (int i=0; i < N; i++) {
      StopwatchTimer st=mPartialTimers.get(i);
      if (st.mInList) {
        Uid uid=st.mUid;
        if (uid != null && uid.mUid != Process.SYSTEM_UID) {
          num++;
        }
      }
    }
    if (num != 0) {
      for (int i=0; i < N; i++) {
        StopwatchTimer st=mPartialTimers.get(i);
        if (st.mInList) {
          Uid uid=st.mUid;
          if (uid != null && uid.mUid != Process.SYSTEM_UID) {
            int myUTime=utime / num;
            int mySTime=stime / num;
            utime-=myUTime;
            stime-=mySTime;
            num--;
            Uid.Proc proc=uid.getProcessStatsLocked("*wakelock*");
            proc.addCpuTimeLocked(myUTime,mySTime);
            proc.addSpeedStepTimes(cpuSpeedTimes);
          }
        }
      }
    }
    if (utime != 0 || stime != 0) {
      Uid uid=getUidStatsLocked(Process.SYSTEM_UID);
      if (uid != null) {
        Uid.Proc proc=uid.getProcessStatsLocked("*lost*");
        proc.addCpuTimeLocked(utime,stime);
        proc.addSpeedStepTimes(cpuSpeedTimes);
      }
    }
  }
  final int NL=mLastPartialTimers.size();
  boolean diff=N != NL;
  for (int i=0; i < NL && !diff; i++) {
    diff|=mPartialTimers.get(i) != mLastPartialTimers.get(i);
  }
  if (!diff) {
    for (int i=0; i < NL; i++) {
      mPartialTimers.get(i).mInList=true;
    }
    return;
  }
  for (int i=0; i < NL; i++) {
    mLastPartialTimers.get(i).mInList=false;
  }
  mLastPartialTimers.clear();
  for (int i=0; i < N; i++) {
    StopwatchTimer st=mPartialTimers.get(i);
    st.mInList=true;
    mLastPartialTimers.add(st);
  }
}
