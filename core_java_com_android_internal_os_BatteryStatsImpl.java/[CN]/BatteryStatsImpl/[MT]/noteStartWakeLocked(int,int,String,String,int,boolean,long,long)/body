{
  uid=mapUid(uid);
  if (type == WAKE_TYPE_PARTIAL) {
    aggregateLastWakeupUptimeLocked(uptime);
    historyName=historyName == null || mRecordAllWakeLocks ? name : historyName;
    if (mWakeLockNesting == 0) {
      mHistoryCur.states|=HistoryItem.STATE_WAKE_LOCK_FLAG;
      if (DEBUG_HISTORY)       Slog.v(TAG,"Start wake lock to: " + Integer.toHexString(mHistoryCur.states));
      mHistoryCur.wakelockTag=mHistoryCur.localWakelockTag;
      mHistoryCur.wakelockTag.string=mInitialAcquireWakeName=historyName;
      mHistoryCur.wakelockTag.uid=mInitialAcquireWakeUid=uid;
      mWakeLockImportant=!unimportantForLogging;
      addHistoryRecordLocked(elapsedRealtime,uptime);
    }
 else     if (!mRecordAllWakeLocks && !mWakeLockImportant && !unimportantForLogging) {
      if (mHistoryLastWritten.wakelockTag != null) {
        mHistoryLastWritten.wakelockTag=null;
        mHistoryCur.wakelockTag=mHistoryCur.localWakelockTag;
        mHistoryCur.wakelockTag.string=mInitialAcquireWakeName=historyName;
        mHistoryCur.wakelockTag.uid=mInitialAcquireWakeUid=uid;
        addHistoryRecordLocked(elapsedRealtime,uptime);
      }
      mWakeLockImportant=true;
    }
 else     if (mRecordAllWakeLocks) {
      if (mActiveEvents.updateState(HistoryItem.EVENT_WAKE_LOCK_START,historyName,uid,0)) {
        mWakeLockNesting++;
        return;
      }
      addHistoryEventLocked(elapsedRealtime,uptime,HistoryItem.EVENT_WAKE_LOCK_START,historyName,uid);
    }
    mWakeLockNesting++;
  }
  if (uid >= 0) {
    requestWakelockCpuUpdate();
    getUidStatsLocked(uid).noteStartWakeLocked(pid,name,type,elapsedRealtime);
  }
}
