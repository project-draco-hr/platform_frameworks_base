{
  boolean doWrite=false;
  Message m=mHandler.obtainMessage(MSG_REPORT_POWER_CHANGE);
  m.arg1=onBattery ? 1 : 0;
  mHandler.sendMessage(m);
  mOnBattery=mOnBatteryInternal=onBattery;
  final long uptime=mSecUptime * 1000;
  final long realtime=mSecRealtime * 1000;
  final boolean screenOn=mScreenState == Display.STATE_ON;
  if (onBattery) {
    boolean reset=false;
    if (oldStatus == BatteryManager.BATTERY_STATUS_FULL || level >= 90 || (mDischargeCurrentLevel < 20 && level >= 80)) {
      doWrite=true;
      resetAllStatsLocked();
      mDischargeStartLevel=level;
      reset=true;
      mNumDischargeStepDurations=0;
    }
    mLastDischargeStepLevel=level;
    mLastDischargeStepTime=-1;
    pullPendingStateUpdatesLocked();
    mHistoryCur.batteryLevel=(byte)level;
    mHistoryCur.states&=~HistoryItem.STATE_BATTERY_PLUGGED_FLAG;
    if (DEBUG_HISTORY)     Slog.v(TAG,"Battery unplugged to: " + Integer.toHexString(mHistoryCur.states));
    if (reset) {
      mRecordingHistory=true;
      startRecordingHistory(mSecRealtime,mSecUptime,reset);
    }
    addHistoryRecordLocked(mSecRealtime,mSecUptime);
    mDischargeCurrentLevel=mDischargeUnplugLevel=level;
    if (screenOn) {
      mDischargeScreenOnUnplugLevel=level;
      mDischargeScreenOffUnplugLevel=0;
    }
 else {
      mDischargeScreenOnUnplugLevel=0;
      mDischargeScreenOffUnplugLevel=level;
    }
    mDischargeAmountScreenOn=0;
    mDischargeAmountScreenOff=0;
    updateTimeBasesLocked(true,!screenOn,uptime,realtime);
  }
 else {
    pullPendingStateUpdatesLocked();
    mHistoryCur.batteryLevel=(byte)level;
    mHistoryCur.states|=HistoryItem.STATE_BATTERY_PLUGGED_FLAG;
    if (DEBUG_HISTORY)     Slog.v(TAG,"Battery plugged to: " + Integer.toHexString(mHistoryCur.states));
    addHistoryRecordLocked(mSecRealtime,mSecUptime);
    mDischargeCurrentLevel=mDischargePlugLevel=level;
    if (level < mDischargeUnplugLevel) {
      mLowDischargeAmountSinceCharge+=mDischargeUnplugLevel - level - 1;
      mHighDischargeAmountSinceCharge+=mDischargeUnplugLevel - level;
    }
    updateDischargeScreenLevelsLocked(screenOn,screenOn);
    updateTimeBasesLocked(false,!screenOn,uptime,realtime);
    mNumChargeStepDurations=0;
    mLastChargeStepLevel=level;
    mLastChargeStepTime=-1;
  }
  if (doWrite || (mLastWriteTime + (60 * 1000)) < mSecRealtime) {
    if (mFile != null) {
      writeAsyncLocked();
    }
  }
}
