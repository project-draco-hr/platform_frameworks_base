{
  if (last == null || cur.cmd != HistoryItem.CMD_UPDATE) {
    dest.writeInt(DELTA_TIME_ABS);
    cur.writeToParcel(dest,0);
    return;
  }
  final long deltaTime=cur.time - last.time;
  final int lastBatteryLevelInt=buildBatteryLevelInt(last);
  final int lastStateInt=buildStateInt(last);
  int deltaTimeToken;
  if (deltaTime < 0 || deltaTime > Integer.MAX_VALUE) {
    deltaTimeToken=DELTA_TIME_LONG;
  }
 else   if (deltaTime >= DELTA_TIME_ABS) {
    deltaTimeToken=DELTA_TIME_INT;
  }
 else {
    deltaTimeToken=(int)deltaTime;
  }
  int firstToken=deltaTimeToken | (cur.states & DELTA_STATE_MASK);
  final int includeStepDetails=mLastHistoryStepLevel > cur.batteryLevel ? BATTERY_DELTA_LEVEL_FLAG : 0;
  final boolean computeStepDetails=includeStepDetails != 0 || mLastHistoryStepDetails == null;
  final int batteryLevelInt=buildBatteryLevelInt(cur) | includeStepDetails;
  final boolean batteryLevelIntChanged=batteryLevelInt != lastBatteryLevelInt;
  if (batteryLevelIntChanged) {
    firstToken|=DELTA_BATTERY_LEVEL_FLAG;
  }
  final int stateInt=buildStateInt(cur);
  final boolean stateIntChanged=stateInt != lastStateInt;
  if (stateIntChanged) {
    firstToken|=DELTA_STATE_FLAG;
  }
  final boolean state2IntChanged=cur.states2 != last.states2;
  if (state2IntChanged) {
    firstToken|=DELTA_STATE2_FLAG;
  }
  if (cur.wakelockTag != null || cur.wakeReasonTag != null) {
    firstToken|=DELTA_WAKELOCK_FLAG;
  }
  if (cur.eventCode != HistoryItem.EVENT_NONE) {
    firstToken|=DELTA_EVENT_FLAG;
  }
  dest.writeInt(firstToken);
  if (DEBUG)   Slog.i(TAG,"WRITE DELTA: firstToken=0x" + Integer.toHexString(firstToken) + " deltaTime="+ deltaTime);
  if (deltaTimeToken >= DELTA_TIME_INT) {
    if (deltaTimeToken == DELTA_TIME_INT) {
      if (DEBUG)       Slog.i(TAG,"WRITE DELTA: int deltaTime=" + (int)deltaTime);
      dest.writeInt((int)deltaTime);
    }
 else {
      if (DEBUG)       Slog.i(TAG,"WRITE DELTA: long deltaTime=" + deltaTime);
      dest.writeLong(deltaTime);
    }
  }
  if (batteryLevelIntChanged) {
    dest.writeInt(batteryLevelInt);
    if (DEBUG)     Slog.i(TAG,"WRITE DELTA: batteryToken=0x" + Integer.toHexString(batteryLevelInt) + " batteryLevel="+ cur.batteryLevel+ " batteryTemp="+ cur.batteryTemperature+ " batteryVolt="+ (int)cur.batteryVoltage);
  }
  if (stateIntChanged) {
    dest.writeInt(stateInt);
    if (DEBUG)     Slog.i(TAG,"WRITE DELTA: stateToken=0x" + Integer.toHexString(stateInt) + " batteryStatus="+ cur.batteryStatus+ " batteryHealth="+ cur.batteryHealth+ " batteryPlugType="+ cur.batteryPlugType+ " states=0x"+ Integer.toHexString(cur.states));
  }
  if (state2IntChanged) {
    dest.writeInt(cur.states2);
    if (DEBUG)     Slog.i(TAG,"WRITE DELTA: states2=0x" + Integer.toHexString(cur.states2));
  }
  if (cur.wakelockTag != null || cur.wakeReasonTag != null) {
    int wakeLockIndex;
    int wakeReasonIndex;
    if (cur.wakelockTag != null) {
      wakeLockIndex=writeHistoryTag(cur.wakelockTag);
      if (DEBUG)       Slog.i(TAG,"WRITE DELTA: wakelockTag=#" + cur.wakelockTag.poolIdx + " "+ cur.wakelockTag.uid+ ":"+ cur.wakelockTag.string);
    }
 else {
      wakeLockIndex=0xffff;
    }
    if (cur.wakeReasonTag != null) {
      wakeReasonIndex=writeHistoryTag(cur.wakeReasonTag);
      if (DEBUG)       Slog.i(TAG,"WRITE DELTA: wakeReasonTag=#" + cur.wakeReasonTag.poolIdx + " "+ cur.wakeReasonTag.uid+ ":"+ cur.wakeReasonTag.string);
    }
 else {
      wakeReasonIndex=0xffff;
    }
    dest.writeInt((wakeReasonIndex << 16) | wakeLockIndex);
  }
  if (cur.eventCode != HistoryItem.EVENT_NONE) {
    int index=writeHistoryTag(cur.eventTag);
    int codeAndIndex=(cur.eventCode & 0xffff) | (index << 16);
    dest.writeInt(codeAndIndex);
    if (DEBUG)     Slog.i(TAG,"WRITE DELTA: event=" + cur.eventCode + " tag=#"+ cur.eventTag.poolIdx+ " "+ cur.eventTag.uid+ ":"+ cur.eventTag.string);
  }
  if (computeStepDetails) {
    if (mPlatformIdleStateCallback != null) {
      mCurHistoryStepDetails.statPlatformIdleState=mPlatformIdleStateCallback.getPlatformLowPowerStats();
      if (DEBUG)       Slog.i(TAG,"WRITE PlatformIdleState:" + mCurHistoryStepDetails.statPlatformIdleState);
    }
    computeHistoryStepDetails(mCurHistoryStepDetails,mLastHistoryStepDetails);
    if (includeStepDetails != 0) {
      mCurHistoryStepDetails.writeToParcel(dest);
    }
    cur.stepDetails=mCurHistoryStepDetails;
    mLastHistoryStepDetails=mCurHistoryStepDetails;
  }
 else {
    cur.stepDetails=null;
  }
  if (mLastHistoryStepLevel < cur.batteryLevel) {
    mLastHistoryStepDetails=null;
  }
  mLastHistoryStepLevel=cur.batteryLevel;
}
