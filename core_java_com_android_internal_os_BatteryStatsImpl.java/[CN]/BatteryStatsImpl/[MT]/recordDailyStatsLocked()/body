{
  DailyItem item=new DailyItem();
  item.mStartTime=mDailyStartTime;
  item.mEndTime=System.currentTimeMillis();
  boolean hasData=false;
  if (mDailyDischargeStepTracker.mNumStepDurations > 0) {
    hasData=true;
    item.mDischargeSteps=new LevelStepTracker(mDailyDischargeStepTracker.mNumStepDurations,mDailyDischargeStepTracker.mStepDurations);
  }
  if (mDailyChargeStepTracker.mNumStepDurations > 0) {
    hasData=true;
    item.mChargeSteps=new LevelStepTracker(mDailyChargeStepTracker.mNumStepDurations,mDailyChargeStepTracker.mStepDurations);
  }
  mDailyDischargeStepTracker.init();
  mDailyChargeStepTracker.init();
  updateDailyDeadlineLocked();
  if (hasData) {
    mDailyItems.add(item);
    while (mDailyItems.size() > MAX_DAILY_ITEMS) {
      mDailyItems.remove(0);
    }
    final ByteArrayOutputStream memStream=new ByteArrayOutputStream();
    try {
      XmlSerializer out=new FastXmlSerializer();
      out.setOutput(memStream,"utf-8");
      writeDailyItemsLocked(out);
      BackgroundThread.getHandler().post(new Runnable(){
        @Override public void run(){
synchronized (mCheckinFile) {
            FileOutputStream stream=null;
            try {
              stream=mDailyFile.startWrite();
              memStream.writeTo(stream);
              stream.flush();
              FileUtils.sync(stream);
              stream.close();
              mDailyFile.finishWrite(stream);
            }
 catch (            IOException e) {
              Slog.w("BatteryStats","Error writing battery daily items",e);
              mDailyFile.failWrite(stream);
            }
          }
        }
      }
);
    }
 catch (    IOException e) {
    }
  }
}
