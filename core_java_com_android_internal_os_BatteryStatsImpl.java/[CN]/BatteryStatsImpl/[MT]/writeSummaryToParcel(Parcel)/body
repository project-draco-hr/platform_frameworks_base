{
  final long NOW_SYS=SystemClock.uptimeMillis() * 1000;
  final long NOWREAL_SYS=SystemClock.elapsedRealtime() * 1000;
  final long NOW=getBatteryUptimeLocked(NOW_SYS);
  final long NOWREAL=getBatteryRealtimeLocked(NOWREAL_SYS);
  out.writeInt(VERSION);
  out.writeInt(mStartCount);
  out.writeLong(computeBatteryUptime(NOW_SYS,STATS_TOTAL));
  out.writeLong(computeBatteryUptime(NOW_SYS,STATS_CURRENT));
  out.writeLong(computeBatteryRealtime(NOWREAL_SYS,STATS_TOTAL));
  out.writeLong(computeBatteryRealtime(NOWREAL_SYS,STATS_CURRENT));
  out.writeLong(computeUptime(NOW_SYS,STATS_TOTAL));
  out.writeLong(computeUptime(NOW_SYS,STATS_CURRENT));
  out.writeLong(computeRealtime(NOWREAL_SYS,STATS_TOTAL));
  out.writeLong(computeRealtime(NOWREAL_SYS,STATS_CURRENT));
  out.writeInt(mDischargeStartLevel);
  out.writeInt(mDischargeCurrentLevel);
  mScreenOnTimer.writeSummaryFromParcelLocked(out,NOWREAL);
  for (int i=0; i < NUM_SCREEN_BRIGHTNESS_BINS; i++) {
    mScreenBrightnessTimer[i].writeSummaryFromParcelLocked(out,NOWREAL);
  }
  mInputEventCounter.writeSummaryFromParcelLocked(out);
  mPhoneOnTimer.writeSummaryFromParcelLocked(out,NOWREAL);
  for (int i=0; i < NUM_SIGNAL_STRENGTH_BINS; i++) {
    mPhoneSignalStrengthsTimer[i].writeSummaryFromParcelLocked(out,NOWREAL);
  }
  for (int i=0; i < NUM_DATA_CONNECTION_TYPES; i++) {
    mPhoneDataConnectionsTimer[i].writeSummaryFromParcelLocked(out,NOWREAL);
  }
  mWifiOnTimer.writeSummaryFromParcelLocked(out,NOWREAL);
  mWifiRunningTimer.writeSummaryFromParcelLocked(out,NOWREAL);
  mBluetoothOnTimer.writeSummaryFromParcelLocked(out,NOWREAL);
  out.writeInt(mKernelWakelockStats.size());
  for (  Map.Entry<String,SamplingTimer> ent : mKernelWakelockStats.entrySet()) {
    Timer kwlt=ent.getValue();
    if (kwlt != null) {
      out.writeInt(1);
      out.writeString(ent.getKey());
      ent.getValue().writeSummaryFromParcelLocked(out,NOWREAL);
    }
 else {
      out.writeInt(0);
    }
  }
  out.writeInt(sNumSpeedSteps);
  final int NU=mUidStats.size();
  out.writeInt(NU);
  for (int iu=0; iu < NU; iu++) {
    out.writeInt(mUidStats.keyAt(iu));
    Uid u=mUidStats.valueAt(iu);
    u.mWifiTurnedOnTimer.writeSummaryFromParcelLocked(out,NOWREAL);
    u.mFullWifiLockTimer.writeSummaryFromParcelLocked(out,NOWREAL);
    u.mAudioTurnedOnTimer.writeSummaryFromParcelLocked(out,NOWREAL);
    u.mVideoTurnedOnTimer.writeSummaryFromParcelLocked(out,NOWREAL);
    u.mScanWifiLockTimer.writeSummaryFromParcelLocked(out,NOWREAL);
    u.mWifiMulticastTimer.writeSummaryFromParcelLocked(out,NOWREAL);
    if (u.mUserActivityCounters == null) {
      out.writeInt(0);
    }
 else {
      out.writeInt(1);
      for (int i=0; i < Uid.NUM_USER_ACTIVITY_TYPES; i++) {
        u.mUserActivityCounters[i].writeSummaryFromParcelLocked(out);
      }
    }
    int NW=u.mWakelockStats.size();
    out.writeInt(NW);
    if (NW > 0) {
      for (      Map.Entry<String,BatteryStatsImpl.Uid.Wakelock> ent : u.mWakelockStats.entrySet()) {
        out.writeString(ent.getKey());
        Uid.Wakelock wl=ent.getValue();
        if (wl.mTimerFull != null) {
          out.writeInt(1);
          wl.mTimerFull.writeSummaryFromParcelLocked(out,NOWREAL);
        }
 else {
          out.writeInt(0);
        }
        if (wl.mTimerPartial != null) {
          out.writeInt(1);
          wl.mTimerPartial.writeSummaryFromParcelLocked(out,NOWREAL);
        }
 else {
          out.writeInt(0);
        }
        if (wl.mTimerWindow != null) {
          out.writeInt(1);
          wl.mTimerWindow.writeSummaryFromParcelLocked(out,NOWREAL);
        }
 else {
          out.writeInt(0);
        }
      }
    }
    int NSE=u.mSensorStats.size();
    out.writeInt(NSE);
    if (NSE > 0) {
      for (      Map.Entry<Integer,BatteryStatsImpl.Uid.Sensor> ent : u.mSensorStats.entrySet()) {
        out.writeInt(ent.getKey());
        Uid.Sensor se=ent.getValue();
        if (se.mTimer != null) {
          out.writeInt(1);
          se.mTimer.writeSummaryFromParcelLocked(out,NOWREAL);
        }
 else {
          out.writeInt(0);
        }
      }
    }
    int NP=u.mProcessStats.size();
    out.writeInt(NP);
    if (NP > 0) {
      for (      Map.Entry<String,BatteryStatsImpl.Uid.Proc> ent : u.mProcessStats.entrySet()) {
        out.writeString(ent.getKey());
        Uid.Proc ps=ent.getValue();
        out.writeLong(ps.mUserTime);
        out.writeLong(ps.mUserTime - ps.mLoadedUserTime);
        out.writeLong(ps.mSystemTime);
        out.writeLong(ps.mSystemTime - ps.mLoadedSystemTime);
        out.writeInt(ps.mStarts);
        out.writeInt(ps.mStarts - ps.mLoadedStarts);
      }
    }
    NP=u.mPackageStats.size();
    out.writeInt(NP);
    if (NP > 0) {
      for (      Map.Entry<String,BatteryStatsImpl.Uid.Pkg> ent : u.mPackageStats.entrySet()) {
        out.writeString(ent.getKey());
        Uid.Pkg ps=ent.getValue();
        out.writeInt(ps.mWakeups);
        out.writeInt(ps.mWakeups - ps.mLoadedWakeups);
        final int NS=ps.mServiceStats.size();
        out.writeInt(NS);
        if (NS > 0) {
          for (          Map.Entry<String,BatteryStatsImpl.Uid.Pkg.Serv> sent : ps.mServiceStats.entrySet()) {
            out.writeString(sent.getKey());
            BatteryStatsImpl.Uid.Pkg.Serv ss=sent.getValue();
            long time=ss.getStartTimeToNowLocked(NOW);
            out.writeLong(time);
            out.writeLong(time - ss.mLoadedStartTime);
            out.writeInt(ss.mStarts);
            out.writeInt(ss.mStarts - ss.mLoadedStarts);
            out.writeInt(ss.mLaunches);
            out.writeInt(ss.mLaunches - ss.mLoadedLaunches);
          }
        }
      }
    }
    out.writeLong(u.getTcpBytesReceived(STATS_TOTAL));
    out.writeLong(u.getTcpBytesSent(STATS_TOTAL));
  }
}
