{
  int numWakelocks=in.readInt();
  mWakelockStats.clear();
  for (int j=0; j < numWakelocks; j++) {
    String wakelockName=in.readString();
    Uid.Wakelock wakelock=new Wakelock();
    wakelock.readFromParcelLocked(timeBase,screenOffTimeBase,in);
    mWakelockStats.add(wakelockName,wakelock);
  }
  int numSyncs=in.readInt();
  mSyncStats.clear();
  for (int j=0; j < numSyncs; j++) {
    String syncName=in.readString();
    if (in.readInt() != 0) {
      mSyncStats.add(syncName,new StopwatchTimer(Uid.this,SYNC,null,timeBase,in));
    }
  }
  int numJobs=in.readInt();
  mJobStats.clear();
  for (int j=0; j < numJobs; j++) {
    String jobName=in.readString();
    if (in.readInt() != 0) {
      mJobStats.add(jobName,new StopwatchTimer(Uid.this,JOB,null,timeBase,in));
    }
  }
  int numSensors=in.readInt();
  mSensorStats.clear();
  for (int k=0; k < numSensors; k++) {
    int sensorNumber=in.readInt();
    Uid.Sensor sensor=new Sensor(sensorNumber);
    sensor.readFromParcelLocked(mOnBatteryTimeBase,in);
    mSensorStats.put(sensorNumber,sensor);
  }
  int numProcs=in.readInt();
  mProcessStats.clear();
  for (int k=0; k < numProcs; k++) {
    String processName=in.readString();
    Uid.Proc proc=new Proc(processName);
    proc.readFromParcelLocked(in);
    mProcessStats.put(processName,proc);
  }
  int numPkgs=in.readInt();
  mPackageStats.clear();
  for (int l=0; l < numPkgs; l++) {
    String packageName=in.readString();
    Uid.Pkg pkg=new Pkg();
    pkg.readFromParcelLocked(in);
    mPackageStats.put(packageName,pkg);
  }
  mWifiRunning=false;
  if (in.readInt() != 0) {
    mWifiRunningTimer=new StopwatchTimer(Uid.this,WIFI_RUNNING,mWifiRunningTimers,mOnBatteryTimeBase,in);
  }
 else {
    mWifiRunningTimer=null;
  }
  mFullWifiLockOut=false;
  if (in.readInt() != 0) {
    mFullWifiLockTimer=new StopwatchTimer(Uid.this,FULL_WIFI_LOCK,mFullWifiLockTimers,mOnBatteryTimeBase,in);
  }
 else {
    mFullWifiLockTimer=null;
  }
  mWifiScanStarted=false;
  if (in.readInt() != 0) {
    mWifiScanTimer=new StopwatchTimer(Uid.this,WIFI_SCAN,mWifiScanTimers,mOnBatteryTimeBase,in);
  }
 else {
    mWifiScanTimer=null;
  }
  mWifiBatchedScanBinStarted=NO_BATCHED_SCAN_STARTED;
  for (int i=0; i < NUM_WIFI_BATCHED_SCAN_BINS; i++) {
    if (in.readInt() != 0) {
      makeWifiBatchedScanBin(i,in);
    }
 else {
      mWifiBatchedScanTimer[i]=null;
    }
  }
  mWifiMulticastEnabled=false;
  if (in.readInt() != 0) {
    mWifiMulticastTimer=new StopwatchTimer(Uid.this,WIFI_MULTICAST_ENABLED,mWifiMulticastTimers,mOnBatteryTimeBase,in);
  }
 else {
    mWifiMulticastTimer=null;
  }
  if (in.readInt() != 0) {
    mAudioTurnedOnTimer=new StopwatchTimer(Uid.this,AUDIO_TURNED_ON,mAudioTurnedOnTimers,mOnBatteryTimeBase,in);
  }
 else {
    mAudioTurnedOnTimer=null;
  }
  if (in.readInt() != 0) {
    mVideoTurnedOnTimer=new StopwatchTimer(Uid.this,VIDEO_TURNED_ON,mVideoTurnedOnTimers,mOnBatteryTimeBase,in);
  }
 else {
    mVideoTurnedOnTimer=null;
  }
  if (in.readInt() != 0) {
    mFlashlightTurnedOnTimer=new StopwatchTimer(Uid.this,FLASHLIGHT_TURNED_ON,mFlashlightTurnedOnTimers,mOnBatteryTimeBase,in);
  }
 else {
    mFlashlightTurnedOnTimer=null;
  }
  if (in.readInt() != 0) {
    mCameraTurnedOnTimer=new StopwatchTimer(Uid.this,CAMERA_TURNED_ON,mCameraTurnedOnTimers,mOnBatteryTimeBase,in);
  }
 else {
    mCameraTurnedOnTimer=null;
  }
  if (in.readInt() != 0) {
    mForegroundActivityTimer=new StopwatchTimer(Uid.this,FOREGROUND_ACTIVITY,null,mOnBatteryTimeBase,in);
  }
 else {
    mForegroundActivityTimer=null;
  }
  mProcessState=PROCESS_STATE_NONE;
  for (int i=0; i < NUM_PROCESS_STATE; i++) {
    if (in.readInt() != 0) {
      makeProcessState(i,in);
    }
 else {
      mProcessStateTimer[i]=null;
    }
  }
  if (in.readInt() != 0) {
    mVibratorOnTimer=new BatchTimer(Uid.this,VIBRATOR_ON,mOnBatteryTimeBase,in);
  }
 else {
    mVibratorOnTimer=null;
  }
  if (in.readInt() != 0) {
    mUserActivityCounters=new Counter[NUM_USER_ACTIVITY_TYPES];
    for (int i=0; i < NUM_USER_ACTIVITY_TYPES; i++) {
      mUserActivityCounters[i]=new Counter(mOnBatteryTimeBase,in);
    }
  }
 else {
    mUserActivityCounters=null;
  }
  if (in.readInt() != 0) {
    mNetworkByteActivityCounters=new LongSamplingCounter[NUM_NETWORK_ACTIVITY_TYPES];
    mNetworkPacketActivityCounters=new LongSamplingCounter[NUM_NETWORK_ACTIVITY_TYPES];
    for (int i=0; i < NUM_NETWORK_ACTIVITY_TYPES; i++) {
      mNetworkByteActivityCounters[i]=new LongSamplingCounter(mOnBatteryTimeBase,in);
      mNetworkPacketActivityCounters[i]=new LongSamplingCounter(mOnBatteryTimeBase,in);
    }
    mMobileRadioActiveTime=new LongSamplingCounter(mOnBatteryTimeBase,in);
    mMobileRadioActiveCount=new LongSamplingCounter(mOnBatteryTimeBase,in);
  }
 else {
    mNetworkByteActivityCounters=null;
    mNetworkPacketActivityCounters=null;
  }
  for (int i=0; i < NUM_CONTROLLER_ACTIVITY_TYPES; i++) {
    if (in.readInt() != 0) {
      mWifiControllerTime[i]=new LongSamplingCounter(mOnBatteryTimeBase,in);
    }
 else {
      mWifiControllerTime[i]=null;
    }
  }
  for (int i=0; i < NUM_CONTROLLER_ACTIVITY_TYPES; i++) {
    if (in.readInt() != 0) {
      mBluetoothControllerTime[i]=new LongSamplingCounter(mOnBatteryTimeBase,in);
    }
 else {
      mBluetoothControllerTime[i]=null;
    }
  }
  mUserCpuTime=new LongSamplingCounter(mOnBatteryTimeBase,in);
  mSystemCpuTime=new LongSamplingCounter(mOnBatteryTimeBase,in);
  mCpuPower=new LongSamplingCounter(mOnBatteryTimeBase,in);
  int bins=in.readInt();
  int steps=getCpuSpeedSteps();
  mSpeedBins=new LongSamplingCounter[bins >= steps ? bins : steps];
  for (int i=0; i < bins; i++) {
    if (in.readInt() != 0) {
      mSpeedBins[i]=new LongSamplingCounter(mOnBatteryTimeBase,in);
    }
  }
}
