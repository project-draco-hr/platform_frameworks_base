{
  int numWakelocks=in.readInt();
  mWakelockStats.clear();
  for (int j=0; j < numWakelocks; j++) {
    String wakelockName=in.readString();
    Uid.Wakelock wakelock=new Wakelock(mBsi,this);
    wakelock.readFromParcelLocked(timeBase,screenOffTimeBase,in);
    mWakelockStats.add(wakelockName,wakelock);
  }
  int numSyncs=in.readInt();
  mSyncStats.clear();
  for (int j=0; j < numSyncs; j++) {
    String syncName=in.readString();
    if (in.readInt() != 0) {
      mSyncStats.add(syncName,new StopwatchTimer(mBsi.mClocks,Uid.this,SYNC,null,timeBase,in));
    }
  }
  int numJobs=in.readInt();
  mJobStats.clear();
  for (int j=0; j < numJobs; j++) {
    String jobName=in.readString();
    if (in.readInt() != 0) {
      mJobStats.add(jobName,new StopwatchTimer(mBsi.mClocks,Uid.this,JOB,null,timeBase,in));
    }
  }
  int numSensors=in.readInt();
  mSensorStats.clear();
  for (int k=0; k < numSensors; k++) {
    int sensorNumber=in.readInt();
    Uid.Sensor sensor=new Sensor(mBsi,this,sensorNumber);
    sensor.readFromParcelLocked(mBsi.mOnBatteryTimeBase,in);
    mSensorStats.put(sensorNumber,sensor);
  }
  int numProcs=in.readInt();
  mProcessStats.clear();
  for (int k=0; k < numProcs; k++) {
    String processName=in.readString();
    Uid.Proc proc=new Proc(mBsi,processName);
    proc.readFromParcelLocked(in);
    mProcessStats.put(processName,proc);
  }
  int numPkgs=in.readInt();
  mPackageStats.clear();
  for (int l=0; l < numPkgs; l++) {
    String packageName=in.readString();
    Uid.Pkg pkg=new Pkg(mBsi);
    pkg.readFromParcelLocked(in);
    mPackageStats.put(packageName,pkg);
  }
  mWifiRunning=false;
  if (in.readInt() != 0) {
    mWifiRunningTimer=new StopwatchTimer(mBsi.mClocks,Uid.this,WIFI_RUNNING,mBsi.mWifiRunningTimers,mBsi.mOnBatteryTimeBase,in);
  }
 else {
    mWifiRunningTimer=null;
  }
  mFullWifiLockOut=false;
  if (in.readInt() != 0) {
    mFullWifiLockTimer=new StopwatchTimer(mBsi.mClocks,Uid.this,FULL_WIFI_LOCK,mBsi.mFullWifiLockTimers,mBsi.mOnBatteryTimeBase,in);
  }
 else {
    mFullWifiLockTimer=null;
  }
  mWifiScanStarted=false;
  if (in.readInt() != 0) {
    mWifiScanTimer=new StopwatchTimer(mBsi.mClocks,Uid.this,WIFI_SCAN,mBsi.mWifiScanTimers,mBsi.mOnBatteryTimeBase,in);
  }
 else {
    mWifiScanTimer=null;
  }
  mWifiBatchedScanBinStarted=NO_BATCHED_SCAN_STARTED;
  for (int i=0; i < NUM_WIFI_BATCHED_SCAN_BINS; i++) {
    if (in.readInt() != 0) {
      makeWifiBatchedScanBin(i,in);
    }
 else {
      mWifiBatchedScanTimer[i]=null;
    }
  }
  mWifiMulticastEnabled=false;
  if (in.readInt() != 0) {
    mWifiMulticastTimer=new StopwatchTimer(mBsi.mClocks,Uid.this,WIFI_MULTICAST_ENABLED,mBsi.mWifiMulticastTimers,mBsi.mOnBatteryTimeBase,in);
  }
 else {
    mWifiMulticastTimer=null;
  }
  if (in.readInt() != 0) {
    mAudioTurnedOnTimer=new StopwatchTimer(mBsi.mClocks,Uid.this,AUDIO_TURNED_ON,mBsi.mAudioTurnedOnTimers,mBsi.mOnBatteryTimeBase,in);
  }
 else {
    mAudioTurnedOnTimer=null;
  }
  if (in.readInt() != 0) {
    mVideoTurnedOnTimer=new StopwatchTimer(mBsi.mClocks,Uid.this,VIDEO_TURNED_ON,mBsi.mVideoTurnedOnTimers,mBsi.mOnBatteryTimeBase,in);
  }
 else {
    mVideoTurnedOnTimer=null;
  }
  if (in.readInt() != 0) {
    mFlashlightTurnedOnTimer=new StopwatchTimer(mBsi.mClocks,Uid.this,FLASHLIGHT_TURNED_ON,mBsi.mFlashlightTurnedOnTimers,mBsi.mOnBatteryTimeBase,in);
  }
 else {
    mFlashlightTurnedOnTimer=null;
  }
  if (in.readInt() != 0) {
    mCameraTurnedOnTimer=new StopwatchTimer(mBsi.mClocks,Uid.this,CAMERA_TURNED_ON,mBsi.mCameraTurnedOnTimers,mBsi.mOnBatteryTimeBase,in);
  }
 else {
    mCameraTurnedOnTimer=null;
  }
  if (in.readInt() != 0) {
    mForegroundActivityTimer=new StopwatchTimer(mBsi.mClocks,Uid.this,FOREGROUND_ACTIVITY,null,mBsi.mOnBatteryTimeBase,in);
  }
 else {
    mForegroundActivityTimer=null;
  }
  if (in.readInt() != 0) {
    mBluetoothScanTimer=new StopwatchTimer(mBsi.mClocks,Uid.this,BLUETOOTH_SCAN_ON,mBsi.mBluetoothScanOnTimers,mBsi.mOnBatteryTimeBase,in);
  }
 else {
    mBluetoothScanTimer=null;
  }
  mProcessState=ActivityManager.PROCESS_STATE_NONEXISTENT;
  for (int i=0; i < NUM_PROCESS_STATE; i++) {
    if (in.readInt() != 0) {
      makeProcessState(i,in);
    }
 else {
      mProcessStateTimer[i]=null;
    }
  }
  if (in.readInt() != 0) {
    mVibratorOnTimer=new BatchTimer(mBsi.mClocks,Uid.this,VIBRATOR_ON,mBsi.mOnBatteryTimeBase,in);
  }
 else {
    mVibratorOnTimer=null;
  }
  if (in.readInt() != 0) {
    mUserActivityCounters=new Counter[NUM_USER_ACTIVITY_TYPES];
    for (int i=0; i < NUM_USER_ACTIVITY_TYPES; i++) {
      mUserActivityCounters[i]=new Counter(mBsi.mOnBatteryTimeBase,in);
    }
  }
 else {
    mUserActivityCounters=null;
  }
  if (in.readInt() != 0) {
    mNetworkByteActivityCounters=new LongSamplingCounter[NUM_NETWORK_ACTIVITY_TYPES];
    mNetworkPacketActivityCounters=new LongSamplingCounter[NUM_NETWORK_ACTIVITY_TYPES];
    for (int i=0; i < NUM_NETWORK_ACTIVITY_TYPES; i++) {
      mNetworkByteActivityCounters[i]=new LongSamplingCounter(mBsi.mOnBatteryTimeBase,in);
      mNetworkPacketActivityCounters[i]=new LongSamplingCounter(mBsi.mOnBatteryTimeBase,in);
    }
    mMobileRadioActiveTime=new LongSamplingCounter(mBsi.mOnBatteryTimeBase,in);
    mMobileRadioActiveCount=new LongSamplingCounter(mBsi.mOnBatteryTimeBase,in);
  }
 else {
    mNetworkByteActivityCounters=null;
    mNetworkPacketActivityCounters=null;
  }
  if (in.readInt() != 0) {
    mWifiControllerActivity=new ControllerActivityCounterImpl(mBsi.mOnBatteryTimeBase,NUM_WIFI_TX_LEVELS,in);
  }
 else {
    mWifiControllerActivity=null;
  }
  if (in.readInt() != 0) {
    mBluetoothControllerActivity=new ControllerActivityCounterImpl(mBsi.mOnBatteryTimeBase,NUM_BT_TX_LEVELS,in);
  }
 else {
    mBluetoothControllerActivity=null;
  }
  if (in.readInt() != 0) {
    mModemControllerActivity=new ControllerActivityCounterImpl(mBsi.mOnBatteryTimeBase,ModemActivityInfo.TX_POWER_LEVELS,in);
  }
 else {
    mModemControllerActivity=null;
  }
  mUserCpuTime=new LongSamplingCounter(mBsi.mOnBatteryTimeBase,in);
  mSystemCpuTime=new LongSamplingCounter(mBsi.mOnBatteryTimeBase,in);
  mCpuPower=new LongSamplingCounter(mBsi.mOnBatteryTimeBase,in);
  if (in.readInt() != 0) {
    int numCpuClusters=in.readInt();
    if (mBsi.mPowerProfile != null && mBsi.mPowerProfile.getNumCpuClusters() != numCpuClusters) {
      throw new ParcelFormatException("Incompatible number of cpu clusters");
    }
    mCpuClusterSpeed=new LongSamplingCounter[numCpuClusters][];
    for (int cluster=0; cluster < numCpuClusters; cluster++) {
      if (in.readInt() != 0) {
        int numSpeeds=in.readInt();
        if (mBsi.mPowerProfile != null && mBsi.mPowerProfile.getNumSpeedStepsInCpuCluster(cluster) != numSpeeds) {
          throw new ParcelFormatException("Incompatible number of cpu speeds");
        }
        final LongSamplingCounter[] cpuSpeeds=new LongSamplingCounter[numSpeeds];
        mCpuClusterSpeed[cluster]=cpuSpeeds;
        for (int speed=0; speed < numSpeeds; speed++) {
          if (in.readInt() != 0) {
            cpuSpeeds[speed]=new LongSamplingCounter(mBsi.mOnBatteryTimeBase,in);
          }
        }
      }
 else {
        mCpuClusterSpeed[cluster]=null;
      }
    }
  }
 else {
    mCpuClusterSpeed=null;
  }
}
