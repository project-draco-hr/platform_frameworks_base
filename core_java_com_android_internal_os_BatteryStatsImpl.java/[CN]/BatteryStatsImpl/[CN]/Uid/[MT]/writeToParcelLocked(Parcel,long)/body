{
  int NW=mWakelockStats.size();
  out.writeInt(NW);
  for (int iw=0; iw < NW; iw++) {
    out.writeString(mWakelockStats.keyAt(iw));
    Uid.Wakelock wakelock=mWakelockStats.valueAt(iw);
    wakelock.writeToParcelLocked(out,elapsedRealtimeUs);
  }
  int NSE=mSensorStats.size();
  out.writeInt(NSE);
  for (int ise=0; ise < NSE; ise++) {
    out.writeInt(mSensorStats.keyAt(ise));
    Uid.Sensor sensor=mSensorStats.valueAt(ise);
    sensor.writeToParcelLocked(out,elapsedRealtimeUs);
  }
  int NP=mProcessStats.size();
  out.writeInt(NP);
  for (int ip=0; ip < NP; ip++) {
    out.writeString(mProcessStats.keyAt(ip));
    Uid.Proc proc=mProcessStats.valueAt(ip);
    proc.writeToParcelLocked(out);
  }
  out.writeInt(mPackageStats.size());
  for (  Map.Entry<String,Uid.Pkg> pkgEntry : mPackageStats.entrySet()) {
    out.writeString(pkgEntry.getKey());
    Uid.Pkg pkg=pkgEntry.getValue();
    pkg.writeToParcelLocked(out);
  }
  if (mWifiRunningTimer != null) {
    out.writeInt(1);
    mWifiRunningTimer.writeToParcel(out,elapsedRealtimeUs);
  }
 else {
    out.writeInt(0);
  }
  if (mFullWifiLockTimer != null) {
    out.writeInt(1);
    mFullWifiLockTimer.writeToParcel(out,elapsedRealtimeUs);
  }
 else {
    out.writeInt(0);
  }
  if (mWifiScanTimer != null) {
    out.writeInt(1);
    mWifiScanTimer.writeToParcel(out,elapsedRealtimeUs);
  }
 else {
    out.writeInt(0);
  }
  for (int i=0; i < NUM_WIFI_BATCHED_SCAN_BINS; i++) {
    if (mWifiBatchedScanTimer[i] != null) {
      out.writeInt(1);
      mWifiBatchedScanTimer[i].writeToParcel(out,elapsedRealtimeUs);
    }
 else {
      out.writeInt(0);
    }
  }
  if (mWifiMulticastTimer != null) {
    out.writeInt(1);
    mWifiMulticastTimer.writeToParcel(out,elapsedRealtimeUs);
  }
 else {
    out.writeInt(0);
  }
  if (mAudioTurnedOnTimer != null) {
    out.writeInt(1);
    mAudioTurnedOnTimer.writeToParcel(out,elapsedRealtimeUs);
  }
 else {
    out.writeInt(0);
  }
  if (mVideoTurnedOnTimer != null) {
    out.writeInt(1);
    mVideoTurnedOnTimer.writeToParcel(out,elapsedRealtimeUs);
  }
 else {
    out.writeInt(0);
  }
  if (mForegroundActivityTimer != null) {
    out.writeInt(1);
    mForegroundActivityTimer.writeToParcel(out,elapsedRealtimeUs);
  }
 else {
    out.writeInt(0);
  }
  for (int i=0; i < NUM_PROCESS_STATE; i++) {
    if (mProcessStateTimer[i] != null) {
      out.writeInt(1);
      mProcessStateTimer[i].writeToParcel(out,elapsedRealtimeUs);
    }
 else {
      out.writeInt(0);
    }
  }
  if (mVibratorOnTimer != null) {
    out.writeInt(1);
    mVibratorOnTimer.writeToParcel(out,elapsedRealtimeUs);
  }
 else {
    out.writeInt(0);
  }
  if (mUserActivityCounters != null) {
    out.writeInt(1);
    for (int i=0; i < NUM_USER_ACTIVITY_TYPES; i++) {
      mUserActivityCounters[i].writeToParcel(out);
    }
  }
 else {
    out.writeInt(0);
  }
  if (mNetworkByteActivityCounters != null) {
    out.writeInt(1);
    for (int i=0; i < NUM_NETWORK_ACTIVITY_TYPES; i++) {
      mNetworkByteActivityCounters[i].writeToParcel(out);
      mNetworkPacketActivityCounters[i].writeToParcel(out);
    }
    mMobileRadioActiveTime.writeToParcel(out);
    mMobileRadioActiveCount.writeToParcel(out);
  }
 else {
    out.writeInt(0);
  }
}
