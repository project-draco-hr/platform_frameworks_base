{
  StopwatchTimer t;
switch (type) {
case WAKE_TYPE_PARTIAL:
    t=mTimerPartial;
  if (t == null) {
    t=new StopwatchTimer(mBsi.mClocks,mUid,WAKE_TYPE_PARTIAL,mBsi.mPartialTimers,mBsi.mOnBatteryScreenOffTimeBase);
    mTimerPartial=t;
  }
return t;
case WAKE_TYPE_FULL:
t=mTimerFull;
if (t == null) {
t=new StopwatchTimer(mBsi.mClocks,mUid,WAKE_TYPE_FULL,mBsi.mFullTimers,mBsi.mOnBatteryTimeBase);
mTimerFull=t;
}
return t;
case WAKE_TYPE_WINDOW:
t=mTimerWindow;
if (t == null) {
t=new StopwatchTimer(mBsi.mClocks,mUid,WAKE_TYPE_WINDOW,mBsi.mWindowTimers,mBsi.mOnBatteryTimeBase);
mTimerWindow=t;
}
return t;
case WAKE_TYPE_DRAW:
t=mTimerDraw;
if (t == null) {
t=new StopwatchTimer(mBsi.mClocks,mUid,WAKE_TYPE_DRAW,mBsi.mDrawTimers,mBsi.mOnBatteryTimeBase);
mTimerDraw=t;
}
return t;
default :
throw new IllegalArgumentException("type=" + type);
}
}
