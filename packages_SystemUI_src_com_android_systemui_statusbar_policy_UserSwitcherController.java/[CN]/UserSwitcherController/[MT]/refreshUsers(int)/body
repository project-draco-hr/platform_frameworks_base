{
  if (DEBUG)   Log.d(TAG,"refreshUsers(forcePictureLoadForId=" + forcePictureLoadForId + ")");
  if (forcePictureLoadForId != UserHandle.USER_NULL) {
    mForcePictureLoadForUserId.put(forcePictureLoadForId,true);
  }
  if (mPauseRefreshUsers) {
    return;
  }
  SparseArray<Bitmap> bitmaps=new SparseArray<>(mUsers.size());
  final int N=mUsers.size();
  for (int i=0; i < N; i++) {
    UserRecord r=mUsers.get(i);
    if (r == null || r.picture == null || r.info == null || mForcePictureLoadForUserId.get(r.info.id)) {
      continue;
    }
    bitmaps.put(r.info.id,r.picture);
  }
  mForcePictureLoadForUserId.clear();
  final boolean addUsersWhenLocked=mAddUsersWhenLocked;
  new AsyncTask<SparseArray<Bitmap>,Void,ArrayList<UserRecord>>(){
    @SuppressWarnings("unchecked") @Override protected ArrayList<UserRecord> doInBackground(    SparseArray<Bitmap>... params){
      final SparseArray<Bitmap> bitmaps=params[0];
      List<UserInfo> infos=mUserManager.getUsers(true);
      if (infos == null) {
        return null;
      }
      ArrayList<UserRecord> records=new ArrayList<>(infos.size());
      int currentId=ActivityManager.getCurrentUser();
      boolean allowUserSwitching=mAllowUserSwitchingWhenSystemUserLocked || mUserManager.isUserUnlocked(UserHandle.SYSTEM);
      UserInfo currentUserInfo=null;
      UserRecord guestRecord=null;
      int avatarSize=mContext.getResources().getDimensionPixelSize(R.dimen.max_avatar_size);
      for (      UserInfo info : infos) {
        boolean isCurrent=currentId == info.id;
        if (isCurrent) {
          currentUserInfo=info;
        }
        boolean switchToEnabled=allowUserSwitching || isCurrent;
        if (info.isEnabled()) {
          if (info.isGuest()) {
            guestRecord=new UserRecord(info,null,true,isCurrent,false,false,switchToEnabled);
          }
 else           if (info.supportsSwitchToByUser()) {
            Bitmap picture=bitmaps.get(info.id);
            if (picture == null) {
              picture=mUserManager.getUserIcon(info.id);
              if (picture != null) {
                picture=BitmapHelper.createCircularClip(picture,avatarSize,avatarSize);
              }
            }
            int index=isCurrent ? 0 : records.size();
            records.add(index,new UserRecord(info,picture,false,isCurrent,false,false,switchToEnabled));
          }
        }
      }
      boolean systemCanCreateUsers=!mUserManager.hasBaseUserRestriction(UserManager.DISALLOW_ADD_USER,UserHandle.SYSTEM);
      boolean currentUserCanCreateUsers=currentUserInfo != null && (currentUserInfo.isAdmin() || currentUserInfo.id == UserHandle.USER_SYSTEM) && systemCanCreateUsers;
      boolean anyoneCanCreateUsers=systemCanCreateUsers && addUsersWhenLocked;
      boolean canCreateGuest=(currentUserCanCreateUsers || anyoneCanCreateUsers) && guestRecord == null;
      boolean canCreateUser=(currentUserCanCreateUsers || anyoneCanCreateUsers) && mUserManager.canAddMoreUsers();
      boolean createIsRestricted=!addUsersWhenLocked;
      if (!mSimpleUserSwitcher) {
        if (guestRecord == null) {
          if (canCreateGuest) {
            guestRecord=new UserRecord(null,null,true,false,false,createIsRestricted,allowUserSwitching);
            checkIfAddUserDisallowedByAdminOnly(guestRecord);
            records.add(guestRecord);
          }
        }
 else {
          int index=guestRecord.isCurrent ? 0 : records.size();
          records.add(index,guestRecord);
        }
      }
      if (!mSimpleUserSwitcher && canCreateUser) {
        UserRecord addUserRecord=new UserRecord(null,null,false,false,true,createIsRestricted,allowUserSwitching);
        checkIfAddUserDisallowedByAdminOnly(addUserRecord);
        records.add(addUserRecord);
      }
      return records;
    }
    @Override protected void onPostExecute(    ArrayList<UserRecord> userRecords){
      if (userRecords != null) {
        mUsers=userRecords;
        notifyAdapters();
      }
    }
  }
.execute((SparseArray)bitmaps);
}
