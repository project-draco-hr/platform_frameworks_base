{
  mAudioHandler.postDelayed(new Runnable(){
    public void run(){
synchronized (mAudioLock) {
        if (mPlaybackRate == 0.0) {
          return;
        }
        if (mAudioBuffers.isEmpty()) {
          return;
        }
        AudioBuffer audioBuffer=mAudioBuffers.get(0);
        int size=audioBuffer.mByteBuffer.remaining();
        if (size > 0 && mAudioTrack.getPlayState() != AudioTrack.PLAYSTATE_PLAYING) {
          try {
            mAudioTrack.play();
          }
 catch (          IllegalStateException e) {
            Log.w(TAG,"could not start audio track");
          }
        }
        int sizeWritten=mAudioTrack.write(audioBuffer.mByteBuffer,size,AudioTrack.WRITE_NON_BLOCKING);
        if (sizeWritten > 0) {
          if (audioBuffer.mPresentationTimeUs != -1) {
            native_updateQueuedAudioData(size,audioBuffer.mPresentationTimeUs);
            audioBuffer.mPresentationTimeUs=-1;
          }
          if (sizeWritten == size) {
            postReturnByteBuffer(audioBuffer);
            mAudioBuffers.remove(0);
            if (!mAudioBuffers.isEmpty()) {
              postRenderAudio(0);
            }
            return;
          }
        }
        long pendingTimeMs=TimeUnit.MICROSECONDS.toMillis(native_getPlayTimeForPendingAudioFrames());
        postRenderAudio(pendingTimeMs / 2);
      }
    }
  }
,delayMillis);
}
