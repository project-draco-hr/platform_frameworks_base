{
switch (msg.what) {
case EVENT_ENABLE_APN_REQUEST:
    int apnId=msg.arg1;
synchronized (this) {
    if (DBG) {
      Log.d(LOG_TAG,"got EVENT_ENABLE_APN_REQUEST with apnType = " + apnId + " and enable = "+ msg.arg2);
      Log.d(LOG_TAG,"dataEnabled[apnId] = " + dataEnabled[apnId] + ", enabledCount = "+ enabledCount);
    }
    if (msg.arg2 == APN_ENABLED) {
      if (!dataEnabled[apnId]) {
        dataEnabled[apnId]=true;
        enabledCount++;
        if (enabledCount == 1) {
          if (onTrySetupData(null) == false) {
            dataEnabled[apnId]=false;
            enabledCount--;
          }
        }
      }
    }
 else {
      if (dataEnabled[apnId]) {
        dataEnabled[apnId]=false;
        enabledCount--;
        if (enabledCount == 0) {
          onCleanUpConnection(true,Phone.REASON_DATA_DISABLED);
        }
      }
    }
  }
break;
case EVENT_TRY_SETUP_DATA:
String reason=null;
if (msg.obj instanceof String) {
reason=(String)msg.obj;
}
onTrySetupData(reason);
break;
case EVENT_ROAMING_OFF:
if (getDataOnRoamingEnabled() == false) {
mRetryMgr.resetRetryCount();
}
onRoamingOff();
break;
case EVENT_ROAMING_ON:
onRoamingOn();
break;
case EVENT_RADIO_AVAILABLE:
onRadioAvailable();
break;
case EVENT_RADIO_OFF_OR_NOT_AVAILABLE:
onRadioOffOrNotAvailable();
break;
case EVENT_DATA_SETUP_COMPLETE:
cidActive=msg.arg1;
onDataSetupComplete((AsyncResult)msg.obj);
break;
case EVENT_DISCONNECT_DONE:
onDisconnectDone((AsyncResult)msg.obj);
break;
case EVENT_VOICE_CALL_STARTED:
onVoiceCallStarted();
break;
case EVENT_VOICE_CALL_ENDED:
onVoiceCallEnded();
break;
case EVENT_CLEAN_UP_CONNECTION:
boolean tearDown=(msg.arg1 == 0) ? false : true;
onCleanUpConnection(tearDown,(String)msg.obj);
break;
default :
Log.e("DATA","Unidentified event = " + msg.what);
break;
}
}
