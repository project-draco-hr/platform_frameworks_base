{
  Slog.d(TAG,"Dispatch onUserSwitching oldUser #" + oldUserId + " newUser #"+ newUserId);
  final int observerCount=mUserSwitchObservers.beginBroadcast();
  if (observerCount > 0) {
    final IRemoteCallback callback=new IRemoteCallback.Stub(){
      int mCount=0;
      @Override public void sendResult(      Bundle data) throws RemoteException {
synchronized (mService) {
          if (mCurUserSwitchCallback == this) {
            mCount++;
            if (mCount == observerCount) {
              sendContinueUserSwitchLocked(uss,oldUserId,newUserId);
            }
          }
        }
      }
    }
;
synchronized (mService) {
      uss.switching=true;
      mCurUserSwitchCallback=callback;
    }
    for (int i=0; i < observerCount; i++) {
      try {
        mUserSwitchObservers.getBroadcastItem(i).onUserSwitching(newUserId,callback);
      }
 catch (      RemoteException e) {
      }
    }
  }
 else {
synchronized (mService) {
      sendContinueUserSwitchLocked(uss,oldUserId,newUserId);
    }
  }
  mUserSwitchObservers.finishBroadcast();
}
