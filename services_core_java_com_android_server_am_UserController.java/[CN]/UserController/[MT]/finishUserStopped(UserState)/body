{
  final int userId=uss.mHandle.getIdentifier();
  boolean stopped;
  ArrayList<IStopUserCallback> callbacks;
synchronized (mService) {
    callbacks=new ArrayList<>(uss.mStopCallbacks);
    if (mStartedUsers.get(userId) != uss) {
      stopped=false;
    }
 else     if (uss.state != UserState.STATE_SHUTDOWN) {
      stopped=false;
    }
 else {
      stopped=true;
      mStartedUsers.remove(userId);
      getUserManagerInternal().removeUserState(userId);
      mUserLru.remove(Integer.valueOf(userId));
      updateStartedUserArrayLocked();
      mService.onUserStoppedLocked(userId);
      forceStopUserLocked(userId,"finish user");
    }
  }
  for (int i=0; i < callbacks.size(); i++) {
    try {
      if (stopped)       callbacks.get(i).userStopped(userId);
 else       callbacks.get(i).userStopAborted(userId);
    }
 catch (    RemoteException e) {
    }
  }
  if (stopped) {
    mService.mSystemServiceManager.cleanupUser(userId);
synchronized (mService) {
      mService.mStackSupervisor.removeUserLocked(userId);
    }
    if (getUserInfo(userId).isEphemeral()) {
      mUserManager.removeUser(userId);
    }
  }
}
