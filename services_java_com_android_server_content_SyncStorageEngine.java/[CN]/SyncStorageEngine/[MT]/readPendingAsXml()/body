{
  FileInputStream fis=null;
  try {
    Log.v(TAG,"is this thing on");
    fis=mPendingFile.openRead();
    XmlPullParser parser=Xml.newPullParser();
    parser.setInput(fis,null);
    int eventType=parser.getEventType();
    while (eventType != XmlPullParser.START_TAG && eventType != XmlPullParser.END_DOCUMENT) {
      eventType=parser.next();
      Log.v(TAG,"go: " + eventType);
    }
    if (eventType == XmlPullParser.END_DOCUMENT)     return;
    String tagName=parser.getName();
    if (DEBUG_FILE) {
      Log.v(TAG,"got " + tagName);
    }
    if ("pending".equals(tagName)) {
      int version=-1;
      String versionString=parser.getAttributeValue(null,"version");
      if (versionString == null || Integer.parseInt(versionString) != PENDING_OPERATION_VERSION) {
        Log.w(TAG,"Unknown pending operation version " + version + "; trying to read as binary.");
        throw new XmlPullParserException("Unknown version.");
      }
      eventType=parser.next();
      PendingOperation pop=null;
      do {
        if (DEBUG_FILE) {
          Log.v(TAG,"parsing xml file");
        }
        if (eventType == XmlPullParser.START_TAG) {
          try {
            tagName=parser.getName();
            if (parser.getDepth() == 2 && "op".equals(tagName)) {
              int authorityId=Integer.valueOf(parser.getAttributeValue(null,XML_ATTR_AUTHORITYID));
              boolean expedited=Boolean.valueOf(parser.getAttributeValue(null,XML_ATTR_EXPEDITED));
              int syncSource=Integer.valueOf(parser.getAttributeValue(null,XML_ATTR_SOURCE));
              int reason=Integer.valueOf(parser.getAttributeValue(null,XML_ATTR_REASON));
              AuthorityInfo authority=mAuthorities.get(authorityId);
              if (DEBUG_FILE) {
                Log.v(TAG,authorityId + " " + expedited+ " "+ syncSource+ " "+ reason);
              }
              if (authority != null) {
                pop=new PendingOperation(authority.account,authority.userId,reason,syncSource,authority.authority,new Bundle(),expedited);
                pop.authorityId=authorityId;
                pop.flatExtras=null;
                mPendingOperations.add(pop);
                if (DEBUG_FILE)                 Log.v(TAG,"Adding pending op: account=" + pop.account + " auth="+ pop.authority+ " src="+ pop.syncSource+ " reason="+ pop.reason+ " expedited="+ pop.expedited);
              }
 else {
                pop=null;
                if (DEBUG_FILE) {
                  Log.v(TAG,"No authority found for " + authorityId + ", skipping");
                }
              }
            }
 else             if (parser.getDepth() == 3 && pop != null && "extra".equals(tagName)) {
              parseExtra(parser,pop.extras);
            }
          }
 catch (          NumberFormatException e) {
            Log.d(TAG,"Invalid data in xml file.",e);
          }
        }
        eventType=parser.next();
      }
 while (eventType != XmlPullParser.END_DOCUMENT);
    }
  }
 catch (  java.io.IOException e) {
    if (fis == null)     Log.i(TAG,"No initial pending operations.");
 else     Log.w(TAG,"Error reading pending data.",e);
    return;
  }
 finally {
    if (DEBUG_FILE)     Log.v(TAG,"Done reading pending ops");
    if (fis != null) {
      try {
        fis.close();
      }
 catch (      java.io.IOException e1) {
      }
    }
  }
}
