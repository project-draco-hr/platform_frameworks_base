{
  String[] nativeLibs=null;
  try {
    nativeLibs=WebViewFactory.getWebViewNativeLibraryPaths();
    if (nativeLibs != null) {
      long newVmSize=0L;
      for (      String path : nativeLibs) {
        if (path == null || TextUtils.isEmpty(path))         continue;
        if (DEBUG)         Log.d(LOGTAG,"Checking file size of " + path);
        File f=new File(path);
        if (f.exists()) {
          newVmSize=Math.max(newVmSize,f.length());
          continue;
        }
        if (path.contains("!")) {
          String[] split=TextUtils.split(path,"!");
          if (split.length == 2) {
            try {
              ZipFile z=new ZipFile(split[0]);
              ZipEntry e=z.getEntry(split[1]);
              if (e != null && e.getMethod() == ZipEntry.STORED) {
                newVmSize=Math.max(newVmSize,e.getSize());
                continue;
              }
            }
 catch (            IOException e) {
              Log.e(LOGTAG,"error reading APK file " + split[0] + ", ",e);
            }
          }
        }
        Log.e(LOGTAG,"error sizing load for " + path);
      }
      if (DEBUG) {
        Log.v(LOGTAG,"Based on library size, need " + newVmSize + " bytes of address space.");
      }
      newVmSize=Math.max(2 * newVmSize,CHROMIUM_WEBVIEW_DEFAULT_VMSIZE_BYTES);
      Log.d(LOGTAG,"Setting new address space to " + newVmSize);
      SystemProperties.set(CHROMIUM_WEBVIEW_VMSIZE_SIZE_PROPERTY,Long.toString(newVmSize));
    }
  }
 catch (  Throwable t) {
    Log.e(LOGTAG,"error preparing webview native library",t);
  }
  prepareWebViewInSystemServer(nativeLibs);
}
