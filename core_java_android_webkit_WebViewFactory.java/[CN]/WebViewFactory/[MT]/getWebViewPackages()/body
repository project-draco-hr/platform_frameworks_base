{
  XmlResourceParser parser=null;
  List<WebViewProviderInfo> webViewProviders=new ArrayList<WebViewProviderInfo>();
  try {
    parser=AppGlobals.getInitialApplication().getResources().getXml(com.android.internal.R.xml.config_webview_packages);
    XmlUtils.beginDocument(parser,TAG_START);
    while (true) {
      XmlUtils.nextElement(parser);
      String element=parser.getName();
      if (element == null) {
        break;
      }
      if (element.equals(TAG_WEBVIEW_PROVIDER)) {
        String packageName=parser.getAttributeValue(null,TAG_PACKAGE_NAME);
        if (packageName == null) {
          throw new MissingWebViewPackageException("WebView provider in framework resources missing package name");
        }
        String description=parser.getAttributeValue(null,TAG_DESCRIPTION);
        if (description == null) {
          throw new MissingWebViewPackageException("WebView provider in framework resources missing description");
        }
        String signature=parser.getAttributeValue(null,TAG_SIGNATURE);
        webViewProviders.add(new WebViewProviderInfo(packageName,description,signature));
      }
 else {
        Log.e(LOGTAG,"Found an element that is not a webview provider");
      }
    }
  }
 catch (  XmlPullParserException e) {
    throw new MissingWebViewPackageException("Error when parsing WebView meta data " + e);
  }
catch (  IOException e) {
    throw new MissingWebViewPackageException("Error when parsing WebView meta data " + e);
  }
 finally {
    if (parser != null)     parser.close();
  }
  return webViewProviders.toArray(new WebViewProviderInfo[webViewProviders.size()]);
}
