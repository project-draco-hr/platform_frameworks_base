{
  if (m.what == MSG_ANIMATE) {
    doAnimation();
    return;
  }
  if (m.what == MSG_ANIMATE_REVEAL) {
    doRevealAnimation();
    return;
  }
synchronized (mQueue) {
    boolean wasExpanded=mExpanded;
    boolean expand=wasExpanded;
    boolean doExpand=false;
    boolean doDisable=false;
    int disableWhat=0;
    int N=mQueue.size();
    while (N > 0) {
      PendingOp op=mQueue.get(0);
      boolean doOp=false;
      boolean visible=false;
      boolean doVisibility=false;
      if (op.code == OP_SET_VISIBLE) {
        doVisibility=true;
        visible=op.visible;
      }
 else       if (op.code == OP_EXPAND) {
        doExpand=true;
        expand=op.visible;
      }
 else       if (op.code == OP_TOGGLE) {
        doExpand=true;
        expand=!expand;
      }
 else {
        doOp=true;
      }
      if (alwaysHandle(op.code)) {
        for (int i=1; i < N; i++) {
          PendingOp o=mQueue.get(i);
          if (!alwaysHandle(o.code) && o.key == op.key) {
            if (o.code == OP_SET_VISIBLE) {
              visible=o.visible;
              doVisibility=true;
            }
 else             if (o.code == OP_EXPAND) {
              expand=o.visible;
              doExpand=true;
            }
 else {
              op.code=o.code;
              op.iconData=o.iconData;
              op.notificationData=o.notificationData;
            }
            mQueue.remove(i);
            i--;
            N--;
          }
        }
      }
      mQueue.remove(0);
      N--;
      if (doOp) {
switch (op.code) {
case OP_ADD_ICON:
case OP_UPDATE_ICON:
          performAddUpdateIcon(op.key,op.iconData,op.notificationData);
        break;
case OP_REMOVE_ICON:
      performRemoveIcon(op.key);
    break;
case OP_DISABLE:
  doDisable=true;
disableWhat=op.integer;
break;
}
}
if (doVisibility && op.code != OP_REMOVE_ICON) {
performSetIconVisibility(op.key,visible);
}
}
if (mQueue.size() != 0) {
throw new RuntimeException("Assertion failed: mQueue.size=" + mQueue.size());
}
if (doExpand) {
if (expand) {
animateExpand();
}
 else {
animateCollapse();
}
}
if (doDisable) {
performDisableActions(disableWhat);
}
}
}
