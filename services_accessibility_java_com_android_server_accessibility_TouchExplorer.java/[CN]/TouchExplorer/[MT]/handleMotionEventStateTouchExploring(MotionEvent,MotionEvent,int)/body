{
  ReceivedPointerTracker receivedTracker=mReceivedPointerTracker;
switch (event.getActionMasked()) {
case MotionEvent.ACTION_DOWN:
{
      mAms.onTouchInteractionStart();
      sendAccessibilityEvent(AccessibilityEvent.TYPE_TOUCH_INTERACTION_START);
      mSendHoverEnterAndMoveDelayed.cancel();
      mSendHoverExitDelayed.cancel();
      if (mSendTouchExplorationEndDelayed.isPending()) {
        mSendTouchExplorationEndDelayed.forceSendAndRemove();
      }
      if (mSendTouchInteractionEndDelayed.isPending()) {
        mSendTouchInteractionEndDelayed.forceSendAndRemove();
      }
      if (!mGestureDetector.firstTapDetected() && !mTouchExplorationInProgress) {
        if (!mSendHoverEnterAndMoveDelayed.isPending()) {
          final int pointerId=receivedTracker.getPrimaryPointerId();
          final int pointerIdBits=(1 << pointerId);
          mSendHoverEnterAndMoveDelayed.post(event,true,pointerIdBits,policyFlags);
        }
 else {
          mSendHoverEnterAndMoveDelayed.addEvent(event);
        }
      }
    }
  break;
case MotionEvent.ACTION_POINTER_DOWN:
{
  mSendHoverEnterAndMoveDelayed.cancel();
  mSendHoverExitDelayed.cancel();
}
break;
case MotionEvent.ACTION_MOVE:
{
final int pointerId=receivedTracker.getPrimaryPointerId();
final int pointerIndex=event.findPointerIndex(pointerId);
final int pointerIdBits=(1 << pointerId);
switch (event.getPointerCount()) {
case 1:
{
  if (mSendHoverEnterAndMoveDelayed.isPending()) {
    mSendHoverEnterAndMoveDelayed.addEvent(event);
  }
 else {
    if (mTouchExplorationInProgress) {
      sendTouchExplorationGestureStartAndHoverEnterIfNeeded(policyFlags);
      sendMotionEvent(event,MotionEvent.ACTION_HOVER_MOVE,pointerIdBits,policyFlags);
    }
  }
}
break;
case 2:
{
if (mSendHoverEnterAndMoveDelayed.isPending()) {
mSendHoverEnterAndMoveDelayed.cancel();
mSendHoverExitDelayed.cancel();
}
 else {
if (mTouchExplorationInProgress) {
  final float deltaX=receivedTracker.getReceivedPointerDownX(pointerId) - rawEvent.getX(pointerIndex);
  final float deltaY=receivedTracker.getReceivedPointerDownY(pointerId) - rawEvent.getY(pointerIndex);
  final double moveDelta=Math.hypot(deltaX,deltaY);
  if (moveDelta < mDoubleTapSlop) {
    break;
  }
  sendHoverExitAndTouchExplorationGestureEndIfNeeded(policyFlags);
}
}
if (isDraggingGesture(event)) {
mCurrentState=STATE_DRAGGING;
mDraggingPointerId=pointerId;
event.setEdgeFlags(receivedTracker.getLastReceivedDownEdgeFlags());
sendMotionEvent(event,MotionEvent.ACTION_DOWN,pointerIdBits,policyFlags);
}
 else {
mCurrentState=STATE_DELEGATING;
sendDownForAllNotInjectedPointers(event,policyFlags);
}
}
break;
default :
{
if (mSendHoverEnterAndMoveDelayed.isPending()) {
mSendHoverEnterAndMoveDelayed.cancel();
mSendHoverExitDelayed.cancel();
}
 else {
sendHoverExitAndTouchExplorationGestureEndIfNeeded(policyFlags);
}
mCurrentState=STATE_DELEGATING;
sendDownForAllNotInjectedPointers(event,policyFlags);
}
}
}
break;
case MotionEvent.ACTION_UP:
{
mAms.onTouchInteractionEnd();
final int pointerId=event.getPointerId(event.getActionIndex());
final int pointerIdBits=(1 << pointerId);
if (mSendHoverEnterAndMoveDelayed.isPending()) {
mSendHoverExitDelayed.post(event,pointerIdBits,policyFlags);
}
 else {
sendHoverExitAndTouchExplorationGestureEndIfNeeded(policyFlags);
}
if (!mSendTouchInteractionEndDelayed.isPending()) {
mSendTouchInteractionEndDelayed.post();
}
}
break;
}
}
