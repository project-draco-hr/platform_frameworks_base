{
  final long ONE_HOUR=60 * 60 * 1000L;
  final long TWO_HOURS=2 * ONE_HOUR;
  JobInfo.Builder b=new Builder(8,mComponent).setPeriodic(TWO_HOURS,ONE_HOUR).setPersisted(true);
  final long invalidLateRuntimeElapsedMillis=SystemClock.elapsedRealtime() + (TWO_HOURS * ONE_HOUR) + TWO_HOURS;
  final long invalidEarlyRuntimeElapsedMillis=invalidLateRuntimeElapsedMillis - TWO_HOURS;
  final JobStatus js=new JobStatus(b.build(),SOME_UID,"somePackage",0,"someTag",invalidEarlyRuntimeElapsedMillis,invalidLateRuntimeElapsedMillis);
  mTaskStoreUnderTest.add(js);
  Thread.sleep(IO_WAIT);
  final JobSet jobStatusSet=new JobSet();
  mTaskStoreUnderTest.readJobMapFromDisk(jobStatusSet);
  assertEquals("Incorrect # of persisted tasks.",1,jobStatusSet.size());
  JobStatus loaded=jobStatusSet.getAllJobs().iterator().next();
  final long newNowElapsed=SystemClock.elapsedRealtime();
  assertTrue("Early runtime wasn't correctly clamped.",loaded.getEarliestRunTime() <= newNowElapsed + TWO_HOURS);
  assertTrue("Early runtime wasn't correctly clamped.",loaded.getEarliestRunTime() <= newNowElapsed + TWO_HOURS + ONE_HOUR);
}
