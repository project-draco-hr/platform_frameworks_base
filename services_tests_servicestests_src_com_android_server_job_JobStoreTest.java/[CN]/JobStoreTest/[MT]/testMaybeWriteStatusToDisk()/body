{
  int taskId=5;
  long runByMillis=20000L;
  long runFromMillis=2000L;
  long initialBackoff=10000L;
  final JobInfo task=new Builder(taskId,mComponent).setRequiresCharging(true).setRequiredNetworkType(JobInfo.NETWORK_TYPE_ANY).setBackoffCriteria(initialBackoff,JobInfo.BACKOFF_POLICY_EXPONENTIAL).setOverrideDeadline(runByMillis).setMinimumLatency(runFromMillis).setPersisted(true).build();
  final JobStatus ts=JobStatus.createFromJobInfo(task,SOME_UID,null,-1);
  mTaskStoreUnderTest.add(ts);
  Thread.sleep(IO_WAIT);
  final ArraySet<JobStatus> jobStatusSet=new ArraySet<JobStatus>();
  mTaskStoreUnderTest.readJobMapFromDisk(jobStatusSet);
  assertEquals("Didn't get expected number of persisted tasks.",1,jobStatusSet.size());
  final JobStatus loadedTaskStatus=jobStatusSet.iterator().next();
  assertTasksEqual(task,loadedTaskStatus.getJob());
  assertTrue("JobStore#contains invalid.",mTaskStoreUnderTest.containsJob(ts));
  assertEquals("Different uids.",SOME_UID,loadedTaskStatus.getUid());
  compareTimestampsSubjectToIoLatency("Early run-times not the same after read.",ts.getEarliestRunTime(),loadedTaskStatus.getEarliestRunTime());
  compareTimestampsSubjectToIoLatency("Late run-times not the same after read.",ts.getLatestRunTimeElapsed(),loadedTaskStatus.getLatestRunTimeElapsed());
}
