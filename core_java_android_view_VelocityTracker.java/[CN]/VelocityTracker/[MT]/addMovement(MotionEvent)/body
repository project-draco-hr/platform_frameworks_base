{
  final int historySize=ev.getHistorySize();
  final int pointerCount=ev.getPointerCount();
  final int lastTouchIndex=mLastTouchIndex;
  final int nextTouchIndex=(lastTouchIndex + 1) % NUM_PAST;
  final int finalTouchIndex=(nextTouchIndex + historySize) % NUM_PAST;
  final int generation=mGeneration++;
  mLastTouchIndex=finalTouchIndex;
  Pointer previousPointer=null;
  for (int i=0; i < pointerCount; i++) {
    final int pointerId=ev.getPointerId(i);
    Pointer nextPointer;
    if (previousPointer == null || pointerId < previousPointer.id) {
      previousPointer=null;
      nextPointer=mPointerListHead;
    }
 else {
      nextPointer=previousPointer.next;
    }
    final Pointer pointer;
    for (; ; ) {
      if (nextPointer != null) {
        final int nextPointerId=nextPointer.id;
        if (nextPointerId == pointerId) {
          pointer=nextPointer;
          break;
        }
        if (nextPointerId < pointerId) {
          nextPointer=nextPointer.next;
          continue;
        }
      }
      pointer=obtainPointer();
      pointer.id=pointerId;
      pointer.pastTime[lastTouchIndex]=Long.MIN_VALUE;
      pointer.next=nextPointer;
      if (previousPointer == null) {
        mPointerListHead=pointer;
      }
 else {
        previousPointer.next=pointer;
      }
      break;
    }
    pointer.generation=generation;
    previousPointer=pointer;
    final float[] pastX=pointer.pastX;
    final float[] pastY=pointer.pastY;
    final long[] pastTime=pointer.pastTime;
    for (int j=0; j < historySize; j++) {
      final int touchIndex=(nextTouchIndex + j) % NUM_PAST;
      pastX[touchIndex]=ev.getHistoricalX(i,j);
      pastY[touchIndex]=ev.getHistoricalY(i,j);
      pastTime[touchIndex]=ev.getHistoricalEventTime(j);
    }
    pastX[finalTouchIndex]=ev.getX(i);
    pastY[finalTouchIndex]=ev.getY(i);
    pastTime[finalTouchIndex]=ev.getEventTime();
  }
  previousPointer=null;
  for (Pointer pointer=mPointerListHead; pointer != null; ) {
    final Pointer nextPointer=pointer.next;
    if (pointer.generation != generation) {
      if (previousPointer == null) {
        mPointerListHead=nextPointer;
      }
 else {
        previousPointer.next=nextPointer;
      }
      releasePointer(pointer);
    }
 else {
      previousPointer=pointer;
    }
    pointer=nextPointer;
  }
}
