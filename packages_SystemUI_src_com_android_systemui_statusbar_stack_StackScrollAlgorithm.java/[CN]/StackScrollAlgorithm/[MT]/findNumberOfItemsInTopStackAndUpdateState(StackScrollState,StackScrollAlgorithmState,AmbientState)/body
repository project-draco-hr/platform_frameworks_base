{
  float yPositionInScrollView=0.0f;
  int childCount=algorithmState.visibleChildren.size();
  for (int i=0; i < childCount; i++) {
    ExpandableView child=algorithmState.visibleChildren.get(i);
    StackViewState childViewState=resultState.getViewStateForView(child);
    int childHeight=getMaxAllowedChildHeight(child,ambientState);
    float yPositionInScrollViewAfterElement=yPositionInScrollView + childHeight + mPaddingBetweenElements;
    if (yPositionInScrollView < algorithmState.scrollY) {
      if (i == 0 && algorithmState.scrollY <= mFirstChildMinHeight) {
        int bottomPeekStart=ambientState.getInnerHeight() - mBottomStackPeekSize - mCollapseSecondCardPadding;
        float maxHeight=mIsExpansionChanging && child == mFirstChildWhileExpanding ? mFirstChildMaxHeight : childHeight;
        childViewState.height=(int)Math.max(Math.min(bottomPeekStart,maxHeight),mFirstChildMinHeight);
        algorithmState.itemsInTopStack=1.0f;
      }
 else       if (yPositionInScrollViewAfterElement < algorithmState.scrollY) {
        algorithmState.itemsInTopStack+=1.0f;
        if (i == 0) {
          childViewState.height=child.getMinHeight();
        }
      }
 else {
        algorithmState.scrolledPixelsTop=algorithmState.scrollY - yPositionInScrollView;
        algorithmState.partialInTop=(algorithmState.scrolledPixelsTop) / (childHeight + mPaddingBetweenElements);
        algorithmState.partialInTop=Math.max(0.0f,algorithmState.partialInTop);
        algorithmState.itemsInTopStack+=algorithmState.partialInTop;
        if (i == 0) {
          float newSize=yPositionInScrollViewAfterElement - mPaddingBetweenElements - algorithmState.scrollY + mFirstChildMinHeight;
          newSize=Math.max(mFirstChildMinHeight,newSize);
          algorithmState.itemsInTopStack=1.0f;
          childViewState.height=(int)newSize;
        }
        algorithmState.lastTopStackIndex=i;
        break;
      }
    }
 else {
      algorithmState.lastTopStackIndex=i - 1;
      break;
    }
    yPositionInScrollView=yPositionInScrollViewAfterElement;
  }
}
