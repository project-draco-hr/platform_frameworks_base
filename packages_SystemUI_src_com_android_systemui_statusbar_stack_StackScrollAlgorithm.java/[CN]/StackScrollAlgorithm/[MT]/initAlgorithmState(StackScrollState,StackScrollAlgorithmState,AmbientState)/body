{
  state.itemsInBottomStack=0.0f;
  state.partialInBottom=0.0f;
  float bottomOverScroll=ambientState.getOverScrollAmount(false);
  int scrollY=ambientState.getScrollY();
  scrollY=Math.max(0,scrollY);
  state.scrollY=(int)(scrollY + bottomOverScroll);
  ViewGroup hostView=resultState.getHostView();
  int childCount=hostView.getChildCount();
  state.visibleChildren.clear();
  state.visibleChildren.ensureCapacity(childCount);
  state.increasedPaddingSet.clear();
  int notGoneIndex=0;
  ExpandableView lastView=null;
  for (int i=0; i < childCount; i++) {
    ExpandableView v=(ExpandableView)hostView.getChildAt(i);
    if (v.getVisibility() != View.GONE) {
      notGoneIndex=updateNotGoneIndex(resultState,state,notGoneIndex,v);
      boolean needsIncreasedPadding=v.needsIncreasedPadding();
      if (needsIncreasedPadding) {
        state.increasedPaddingSet.add(v);
        if (lastView != null) {
          state.increasedPaddingSet.add(lastView);
        }
      }
      if (v instanceof ExpandableNotificationRow) {
        ExpandableNotificationRow row=(ExpandableNotificationRow)v;
        List<ExpandableNotificationRow> children=row.getNotificationChildren();
        if (row.isSummaryWithChildren() && children != null) {
          for (          ExpandableNotificationRow childRow : children) {
            if (childRow.getVisibility() != View.GONE) {
              StackViewState childState=resultState.getViewStateForView(childRow);
              childState.notGoneIndex=notGoneIndex;
              notGoneIndex++;
            }
          }
        }
      }
      lastView=v;
    }
  }
}
