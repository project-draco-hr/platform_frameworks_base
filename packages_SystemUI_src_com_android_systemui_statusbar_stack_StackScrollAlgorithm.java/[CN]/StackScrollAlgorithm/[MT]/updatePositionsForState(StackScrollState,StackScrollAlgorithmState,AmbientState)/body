{
  float bottomPeekStart=ambientState.getInnerHeight() - mBottomStackPeekSize;
  float bottomStackStart=bottomPeekStart - mBottomStackSlowDownLength;
  float currentYPosition=0.0f;
  float yPositionInScrollView=0.0f;
  ExpandableNotificationRow topHeadsUpEntry=ambientState.getTopHeadsUpEntry();
  int childCount=algorithmState.visibleChildren.size();
  int numberOfElementsCompletelyIn=algorithmState.partialInTop == 1.0f ? algorithmState.lastTopStackIndex : (int)algorithmState.itemsInTopStack;
  for (int i=0; i < childCount; i++) {
    ExpandableView child=algorithmState.visibleChildren.get(i);
    StackViewState childViewState=resultState.getViewStateForView(child);
    childViewState.location=StackViewState.LOCATION_UNKNOWN;
    int childHeight=getMaxAllowedChildHeight(child,ambientState);
    int minHeight=child.getMinHeight();
    float yPositionInScrollViewAfterElement=yPositionInScrollView + childHeight + mPaddingBetweenElements;
    float scrollOffset=yPositionInScrollView - algorithmState.scrollY + mFirstChildMinHeight;
    if (i == algorithmState.lastTopStackIndex + 1) {
      currentYPosition=Math.min(scrollOffset,bottomStackStart);
    }
    childViewState.yTranslation=currentYPosition;
    float nextYPosition=currentYPosition + childHeight + mPaddingBetweenElements;
    if (i <= algorithmState.lastTopStackIndex) {
      updateStateForTopStackChild(algorithmState,numberOfElementsCompletelyIn,i,childHeight,childViewState,scrollOffset);
      clampPositionToTopStackEnd(childViewState,childHeight);
      if (childViewState.yTranslation + childHeight + mPaddingBetweenElements >= bottomStackStart && !mIsExpansionChanging && i != 0) {
        int newSize=(int)Math.max(bottomStackStart - mPaddingBetweenElements - childViewState.yTranslation,minHeight);
        childViewState.height=newSize;
        updateStateForChildTransitioningInBottom(algorithmState,bottomStackStart,child,childViewState.yTranslation,childViewState,childHeight);
      }
      clampPositionToBottomStackStart(childViewState,childViewState.height,minHeight,ambientState);
    }
 else     if (nextYPosition >= bottomStackStart) {
      if (currentYPosition >= bottomStackStart) {
        updateStateForChildFullyInBottomStack(algorithmState,bottomStackStart,childViewState,minHeight,ambientState);
      }
 else {
        updateStateForChildTransitioningInBottom(algorithmState,bottomStackStart,child,currentYPosition,childViewState,childHeight);
      }
    }
 else {
      childViewState.location=StackViewState.LOCATION_MAIN_AREA;
      clampYTranslation(childViewState,childHeight,ambientState);
    }
    if (i == 0) {
      childViewState.alpha=1.0f;
      childViewState.yTranslation=Math.max(mFirstChildMinHeight - algorithmState.scrollY,0);
      if (childViewState.yTranslation + childViewState.height > bottomPeekStart - mCollapseSecondCardPadding) {
        childViewState.height=(int)Math.max(bottomPeekStart - mCollapseSecondCardPadding - childViewState.yTranslation,mFirstChildMinHeight);
      }
      childViewState.location=StackViewState.LOCATION_FIRST_CARD;
    }
    if (childViewState.location == StackViewState.LOCATION_UNKNOWN) {
      Log.wtf(LOG_TAG,"Failed to assign location for child " + i);
    }
    currentYPosition=childViewState.yTranslation + childHeight + mPaddingBetweenElements;
    yPositionInScrollView=yPositionInScrollViewAfterElement;
    if (ambientState.isShadeExpanded() && topHeadsUpEntry != null && child != topHeadsUpEntry) {
      childViewState.yTranslation+=topHeadsUpEntry.getHeadsUpHeight() - mFirstChildMinHeight;
    }
    childViewState.yTranslation+=ambientState.getTopPadding() + ambientState.getStackTranslation();
  }
  updateHeadsUpStates(resultState,algorithmState,ambientState);
}
