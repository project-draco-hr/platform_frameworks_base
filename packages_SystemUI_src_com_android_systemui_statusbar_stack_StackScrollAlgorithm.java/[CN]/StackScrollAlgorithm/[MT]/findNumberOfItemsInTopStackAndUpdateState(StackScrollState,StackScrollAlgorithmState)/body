{
  float yPositionInScrollView=0.0f;
  ViewGroup hostView=resultState.getHostView();
  int childCount=hostView.getChildCount();
  for (int i=0; i < childCount; i++) {
    View child=hostView.getChildAt(i);
    StackScrollState.ViewState childViewState=resultState.getViewStateForView(child);
    int childHeight=child.getHeight();
    float yPositionInScrollViewAfterElement=yPositionInScrollView + childHeight + mPaddingBetweenElements;
    if (yPositionInScrollView < algorithmState.scrollY) {
      if (yPositionInScrollViewAfterElement <= algorithmState.scrollY) {
        algorithmState.itemsInTopStack+=1.0f;
        if (childHeight != mCollapsedSize) {
          childViewState.height=mCollapsedSize;
        }
      }
 else {
        float newSize=yPositionInScrollViewAfterElement - mPaddingBetweenElements - algorithmState.scrollY;
        algorithmState.partialInTop=(mCollapsedSize - newSize) / (mCollapsedSize + mPaddingBetweenElements);
        algorithmState.partialInTop=Math.max(0.0f,algorithmState.partialInTop);
        algorithmState.itemsInTopStack+=algorithmState.partialInTop;
        newSize=Math.max(mCollapsedSize,newSize);
        if (newSize != childHeight) {
          childViewState.height=(int)newSize;
          algorithmState.scrollY=(int)yPositionInScrollView;
          resultState.setScrollY(algorithmState.scrollY);
        }
        if (childHeight > mCollapsedSize) {
          algorithmState.lastTopStackIndex=i;
          break;
        }
      }
    }
 else {
      algorithmState.lastTopStackIndex=i;
      if (i == 0) {
        float bottomPeekStart=getLayoutHeight() - mBottomStackPeekSize;
        float maxHeight=mIsExpansionChanging && child == mFirstChildWhileExpanding ? mFirstChildMaxHeight : childHeight;
        childViewState.height=(int)Math.max(Math.min(bottomPeekStart,maxHeight),mCollapsedSize);
      }
      break;
    }
    yPositionInScrollView=yPositionInScrollViewAfterElement;
  }
}
