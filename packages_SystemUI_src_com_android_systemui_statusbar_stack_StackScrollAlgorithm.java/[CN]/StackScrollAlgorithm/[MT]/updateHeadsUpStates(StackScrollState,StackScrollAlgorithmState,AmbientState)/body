{
  TreeMap<String,HeadsUpManager.HeadsUpEntry> headsUpEntries=ambientState.getHeadsUpEntries();
  boolean hasPinnedHeadsUp=false;
  for (  String key : headsUpEntries.keySet()) {
    ExpandableNotificationRow row=headsUpEntries.get(key).entry.row;
    StackViewState childState=resultState.getViewStateForView(row);
    if (!row.isInShade()) {
      childState.yTranslation=Math.max(childState.yTranslation,0);
      hasPinnedHeadsUp=true;
    }
    childState.height=Math.max(childState.height,row.getHeadsUpHeight());
    childState.yTranslation=Math.min(childState.yTranslation,ambientState.getMaxHeadsUpTranslation() - childState.height);
  }
  if (hasPinnedHeadsUp && !ambientState.isShadeExpanded()) {
    int childCount=algorithmState.visibleChildren.size();
    for (int i=0; i < childCount; i++) {
      ExpandableView child=algorithmState.visibleChildren.get(i);
      StackViewState state=resultState.getViewStateForView(child);
      boolean hideView=true;
      if (child instanceof ExpandableNotificationRow) {
        ExpandableNotificationRow row=(ExpandableNotificationRow)child;
        hideView=!row.isHeadsUp();
      }
      if (hideView) {
        state.alpha=0.0f;
      }
    }
  }
}
