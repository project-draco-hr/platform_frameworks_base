{
  int childCount=algorithmState.visibleChildren.size();
  ExpandableNotificationRow topHeadsUpEntry=null;
  for (int i=0; i < childCount; i++) {
    View child=algorithmState.visibleChildren.get(i);
    if (!(child instanceof ExpandableNotificationRow)) {
      break;
    }
    ExpandableNotificationRow row=(ExpandableNotificationRow)child;
    if (!row.isHeadsUp()) {
      break;
    }
    StackViewState childState=resultState.getViewStateForView(row);
    if (topHeadsUpEntry == null) {
      topHeadsUpEntry=row;
      childState.location=StackViewState.LOCATION_FIRST_HUN;
    }
    boolean isTopEntry=topHeadsUpEntry == row;
    float unmodifiedEndLocation=childState.yTranslation + childState.height;
    if (mIsExpanded) {
      clampHunToTop(ambientState,row,childState);
      clampHunToMaxTranslation(ambientState,row,childState);
    }
    if (row.isPinned()) {
      childState.yTranslation=Math.max(childState.yTranslation,0);
      childState.height=Math.max(row.getIntrinsicHeight(),childState.height);
      StackViewState topState=resultState.getViewStateForView(topHeadsUpEntry);
      if (!isTopEntry && (!mIsExpanded || unmodifiedEndLocation < topState.yTranslation + topState.height)) {
        childState.height=row.getIntrinsicHeight();
        childState.yTranslation=topState.yTranslation + topState.height - childState.height;
      }
    }
  }
}
