{
switch (msg.what) {
case DO_GET_TEXT_AFTER_CURSOR:
{
      SomeArgs args=(SomeArgs)msg.obj;
      try {
        InputConnection ic=mInputConnection.get();
        if (ic == null || !isActive()) {
          Log.w(TAG,"getTextAfterCursor on inactive InputConnection");
          args.callback.setTextAfterCursor(null,args.seq);
          return;
        }
        args.callback.setTextAfterCursor(ic.getTextAfterCursor(msg.arg1,msg.arg2),args.seq);
      }
 catch (      RemoteException e) {
        Log.w(TAG,"Got RemoteException calling setTextAfterCursor",e);
      }
      return;
    }
case DO_GET_TEXT_BEFORE_CURSOR:
{
    SomeArgs args=(SomeArgs)msg.obj;
    try {
      InputConnection ic=mInputConnection.get();
      if (ic == null || !isActive()) {
        Log.w(TAG,"getTextBeforeCursor on inactive InputConnection");
        args.callback.setTextBeforeCursor(null,args.seq);
        return;
      }
      args.callback.setTextBeforeCursor(ic.getTextBeforeCursor(msg.arg1,msg.arg2),args.seq);
    }
 catch (    RemoteException e) {
      Log.w(TAG,"Got RemoteException calling setTextBeforeCursor",e);
    }
    return;
  }
case DO_GET_SELECTED_TEXT:
{
  SomeArgs args=(SomeArgs)msg.obj;
  try {
    InputConnection ic=mInputConnection.get();
    if (ic == null || !isActive()) {
      Log.w(TAG,"getSelectedText on inactive InputConnection");
      args.callback.setSelectedText(null,args.seq);
      return;
    }
    args.callback.setSelectedText(ic.getSelectedText(msg.arg1),args.seq);
  }
 catch (  RemoteException e) {
    Log.w(TAG,"Got RemoteException calling setSelectedText",e);
  }
  return;
}
case DO_GET_CURSOR_CAPS_MODE:
{
SomeArgs args=(SomeArgs)msg.obj;
try {
  InputConnection ic=mInputConnection.get();
  if (ic == null || !isActive()) {
    Log.w(TAG,"getCursorCapsMode on inactive InputConnection");
    args.callback.setCursorCapsMode(0,args.seq);
    return;
  }
  args.callback.setCursorCapsMode(ic.getCursorCapsMode(msg.arg1),args.seq);
}
 catch (RemoteException e) {
  Log.w(TAG,"Got RemoteException calling setCursorCapsMode",e);
}
return;
}
case DO_GET_EXTRACTED_TEXT:
{
SomeArgs args=(SomeArgs)msg.obj;
try {
InputConnection ic=mInputConnection.get();
if (ic == null || !isActive()) {
  Log.w(TAG,"getExtractedText on inactive InputConnection");
  args.callback.setExtractedText(null,args.seq);
  return;
}
args.callback.setExtractedText(ic.getExtractedText((ExtractedTextRequest)args.arg1,msg.arg1),args.seq);
}
 catch (RemoteException e) {
Log.w(TAG,"Got RemoteException calling setExtractedText",e);
}
return;
}
case DO_COMMIT_TEXT:
{
InputConnection ic=mInputConnection.get();
if (ic == null || !isActive()) {
Log.w(TAG,"commitText on inactive InputConnection");
return;
}
ic.commitText((CharSequence)msg.obj,msg.arg1);
onUserAction();
return;
}
case DO_SET_SELECTION:
{
InputConnection ic=mInputConnection.get();
if (ic == null || !isActive()) {
Log.w(TAG,"setSelection on inactive InputConnection");
return;
}
ic.setSelection(msg.arg1,msg.arg2);
return;
}
case DO_PERFORM_EDITOR_ACTION:
{
InputConnection ic=mInputConnection.get();
if (ic == null || !isActive()) {
Log.w(TAG,"performEditorAction on inactive InputConnection");
return;
}
ic.performEditorAction(msg.arg1);
return;
}
case DO_PERFORM_CONTEXT_MENU_ACTION:
{
InputConnection ic=mInputConnection.get();
if (ic == null || !isActive()) {
Log.w(TAG,"performContextMenuAction on inactive InputConnection");
return;
}
ic.performContextMenuAction(msg.arg1);
return;
}
case DO_COMMIT_COMPLETION:
{
InputConnection ic=mInputConnection.get();
if (ic == null || !isActive()) {
Log.w(TAG,"commitCompletion on inactive InputConnection");
return;
}
ic.commitCompletion((CompletionInfo)msg.obj);
return;
}
case DO_COMMIT_CORRECTION:
{
InputConnection ic=mInputConnection.get();
if (ic == null || !isActive()) {
Log.w(TAG,"commitCorrection on inactive InputConnection");
return;
}
ic.commitCorrection((CorrectionInfo)msg.obj);
return;
}
case DO_SET_COMPOSING_TEXT:
{
InputConnection ic=mInputConnection.get();
if (ic == null || !isActive()) {
Log.w(TAG,"setComposingText on inactive InputConnection");
return;
}
ic.setComposingText((CharSequence)msg.obj,msg.arg1);
onUserAction();
return;
}
case DO_SET_COMPOSING_REGION:
{
InputConnection ic=mInputConnection.get();
if (ic == null || !isActive()) {
Log.w(TAG,"setComposingRegion on inactive InputConnection");
return;
}
ic.setComposingRegion(msg.arg1,msg.arg2);
return;
}
case DO_FINISH_COMPOSING_TEXT:
{
InputConnection ic=mInputConnection.get();
if (ic == null) {
Log.w(TAG,"finishComposingText on inactive InputConnection");
return;
}
ic.finishComposingText();
return;
}
case DO_SEND_KEY_EVENT:
{
InputConnection ic=mInputConnection.get();
if (ic == null || !isActive()) {
Log.w(TAG,"sendKeyEvent on inactive InputConnection");
return;
}
ic.sendKeyEvent((KeyEvent)msg.obj);
onUserAction();
return;
}
case DO_CLEAR_META_KEY_STATES:
{
InputConnection ic=mInputConnection.get();
if (ic == null || !isActive()) {
Log.w(TAG,"clearMetaKeyStates on inactive InputConnection");
return;
}
ic.clearMetaKeyStates(msg.arg1);
return;
}
case DO_DELETE_SURROUNDING_TEXT:
{
InputConnection ic=mInputConnection.get();
if (ic == null || !isActive()) {
Log.w(TAG,"deleteSurroundingText on inactive InputConnection");
return;
}
ic.deleteSurroundingText(msg.arg1,msg.arg2);
return;
}
case DO_BEGIN_BATCH_EDIT:
{
InputConnection ic=mInputConnection.get();
if (ic == null || !isActive()) {
Log.w(TAG,"beginBatchEdit on inactive InputConnection");
return;
}
ic.beginBatchEdit();
return;
}
case DO_END_BATCH_EDIT:
{
InputConnection ic=mInputConnection.get();
if (ic == null || !isActive()) {
Log.w(TAG,"endBatchEdit on inactive InputConnection");
return;
}
ic.endBatchEdit();
return;
}
case DO_REPORT_FULLSCREEN_MODE:
{
InputConnection ic=mInputConnection.get();
if (ic == null) {
Log.w(TAG,"reportFullscreenMode on inexistent InputConnection");
return;
}
final boolean enabled=msg.arg1 == 1;
ic.reportFullscreenMode(enabled);
onReportFullscreenMode(enabled);
return;
}
case DO_PERFORM_PRIVATE_COMMAND:
{
InputConnection ic=mInputConnection.get();
if (ic == null || !isActive()) {
Log.w(TAG,"performPrivateCommand on inactive InputConnection");
return;
}
SomeArgs args=(SomeArgs)msg.obj;
ic.performPrivateCommand((String)args.arg1,(Bundle)args.arg2);
return;
}
case DO_REQUEST_UPDATE_CURSOR_ANCHOR_INFO:
{
SomeArgs args=(SomeArgs)msg.obj;
try {
InputConnection ic=mInputConnection.get();
if (ic == null || !isActive()) {
Log.w(TAG,"requestCursorAnchorInfo on inactive InputConnection");
args.callback.setRequestUpdateCursorAnchorInfoResult(false,args.seq);
return;
}
args.callback.setRequestUpdateCursorAnchorInfoResult(ic.requestCursorUpdates(msg.arg1),args.seq);
}
 catch (RemoteException e) {
Log.w(TAG,"Got RemoteException calling requestCursorAnchorInfo",e);
}
return;
}
}
Log.w(TAG,"Unhandled message code: " + msg.what);
}
