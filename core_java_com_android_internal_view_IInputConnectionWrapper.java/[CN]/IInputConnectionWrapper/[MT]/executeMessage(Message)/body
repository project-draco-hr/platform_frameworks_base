{
switch (msg.what) {
case DO_GET_TEXT_AFTER_CURSOR:
{
      SomeArgs args=(SomeArgs)msg.obj;
      try {
        args.callback.setTextAfterCursor(mInputConnection.getTextAfterCursor(msg.arg1),args.seq);
      }
 catch (      RemoteException e) {
        Log.w(TAG,"Got RemoteException calling setTextAfterCursor",e);
      }
      return;
    }
case DO_GET_TEXT_BEFORE_CURSOR:
{
    SomeArgs args=(SomeArgs)msg.obj;
    try {
      args.callback.setTextBeforeCursor(mInputConnection.getTextBeforeCursor(msg.arg1),args.seq);
    }
 catch (    RemoteException e) {
      Log.w(TAG,"Got RemoteException calling setTextBeforeCursor",e);
    }
    return;
  }
case DO_GET_CURSOR_CAPS_MODE:
{
  SomeArgs args=(SomeArgs)msg.obj;
  try {
    args.callback.setCursorCapsMode(mInputConnection.getCursorCapsMode(msg.arg1),args.seq);
  }
 catch (  RemoteException e) {
    Log.w(TAG,"Got RemoteException calling setCursorCapsMode",e);
  }
  return;
}
case DO_GET_EXTRACTED_TEXT:
{
SomeArgs args=(SomeArgs)msg.obj;
try {
  args.callback.setExtractedText(mInputConnection.getExtractedText((ExtractedTextRequest)args.arg1,msg.arg1),args.seq);
}
 catch (RemoteException e) {
  Log.w(TAG,"Got RemoteException calling setExtractedText",e);
}
return;
}
case DO_COMMIT_TEXT:
{
mInputConnection.commitText((CharSequence)msg.obj,msg.arg1);
return;
}
case DO_COMMIT_COMPLETION:
{
mInputConnection.commitCompletion((CompletionInfo)msg.obj);
return;
}
case DO_SET_COMPOSING_TEXT:
{
mInputConnection.setComposingText((CharSequence)msg.obj,msg.arg1);
return;
}
case DO_FINISH_COMPOSING_TEXT:
{
mInputConnection.finishComposingText();
return;
}
case DO_SEND_KEY_EVENT:
{
mInputConnection.sendKeyEvent((KeyEvent)msg.obj);
return;
}
case DO_CLEAR_META_KEY_STATES:
{
mInputConnection.clearMetaKeyStates(msg.arg1);
return;
}
case DO_DELETE_SURROUNDING_TEXT:
{
mInputConnection.deleteSurroundingText(msg.arg1,msg.arg2);
return;
}
case DO_BEGIN_BATCH_EDIT:
{
mInputConnection.beginBatchEdit();
return;
}
case DO_END_BATCH_EDIT:
{
mInputConnection.beginBatchEdit();
return;
}
case DO_HIDE_STATUS_ICON:
{
mInputConnection.hideStatusIcon();
return;
}
case DO_SHOW_STATUS_ICON:
{
mInputConnection.showStatusIcon((String)msg.obj,msg.arg1);
return;
}
case DO_PERFORM_PRIVATE_COMMAND:
{
SomeArgs args=(SomeArgs)msg.obj;
mInputConnection.performPrivateCommand((String)args.arg1,(Bundle)args.arg2);
return;
}
}
Log.w(TAG,"Unhandled message code: " + msg.what);
}
