{
  assert(cursor != null);
  this.modelId=modelId;
  final String docAuthority=getCursorString(cursor,RootCursorWrapper.COLUMN_AUTHORITY);
  final String docId=getCursorString(cursor,Document.COLUMN_DOCUMENT_ID);
  final String docMimeType=getCursorString(cursor,Document.COLUMN_MIME_TYPE);
  final String docDisplayName=getCursorString(cursor,Document.COLUMN_DISPLAY_NAME);
  final long docLastModified=getCursorLong(cursor,Document.COLUMN_LAST_MODIFIED);
  final int docIcon=getCursorInt(cursor,Document.COLUMN_ICON);
  final int docFlags=getCursorInt(cursor,Document.COLUMN_FLAGS);
  final String docSummary=getCursorString(cursor,Document.COLUMN_SUMMARY);
  final long docSize=getCursorLong(cursor,Document.COLUMN_SIZE);
  final boolean isDirectory=Document.MIME_TYPE_DIR.equals(docMimeType);
  mIconHelper.stopLoading(mIconThumb);
  mIconMime.animate().cancel();
  mIconMime.setAlpha(1f);
  mIconThumb.animate().cancel();
  mIconThumb.setAlpha(0f);
  final Uri uri=DocumentsContract.buildDocumentUri(docAuthority,docId);
  mIconHelper.loadThumbnail(uri,docMimeType,docFlags,docIcon,mIconThumb,mIconMime,null);
  mTitle.setText(docDisplayName,TextView.BufferType.SPANNABLE);
  mTitle.setVisibility(View.VISIBLE);
  if (isDirectory) {
    mDetails.setVisibility(View.GONE);
  }
 else {
    boolean hasDetails=false;
    if (docSummary != null) {
      hasDetails=true;
      mSummary.setText(docSummary);
      mSummary.setVisibility(View.VISIBLE);
    }
 else {
      mSummary.setVisibility(View.INVISIBLE);
    }
    if (docLastModified == -1) {
      hasDetails=true;
      mDate.setText(null);
    }
 else {
      mDate.setText(Shared.formatTime(mContext,docLastModified));
    }
    if (!state.showSize || docSize == -1) {
      hasDetails=true;
      mSize.setVisibility(View.GONE);
      mDetails.setVisibility(View.GONE);
    }
 else {
      mSize.setVisibility(View.VISIBLE);
      mSize.setText(Formatter.formatFileSize(mContext,docSize));
    }
    mDetails.setVisibility(hasDetails ? View.VISIBLE : View.GONE);
  }
}
