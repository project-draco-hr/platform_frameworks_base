{
  this.modelId=modelId;
  checkNotNull(cursor,"Cursor cannot be null.");
  final String docAuthority=getCursorString(cursor,RootCursorWrapper.COLUMN_AUTHORITY);
  final String docId=getCursorString(cursor,Document.COLUMN_DOCUMENT_ID);
  final String docMimeType=getCursorString(cursor,Document.COLUMN_MIME_TYPE);
  final String docDisplayName=getCursorString(cursor,Document.COLUMN_DISPLAY_NAME);
  final long docLastModified=getCursorLong(cursor,Document.COLUMN_LAST_MODIFIED);
  final int docIcon=getCursorInt(cursor,Document.COLUMN_ICON);
  final int docFlags=getCursorInt(cursor,Document.COLUMN_FLAGS);
  final String docSummary=getCursorString(cursor,Document.COLUMN_SUMMARY);
  final long docSize=getCursorLong(cursor,Document.COLUMN_SIZE);
  mIconHelper.stopLoading(mIconThumb);
  mIconMime.animate().cancel();
  mIconThumb.animate().cancel();
  final Uri uri=DocumentsContract.buildDocumentUri(docAuthority,docId);
  mIconHelper.loadThumbnail(uri,docMimeType,docFlags,docIcon,mIconThumb,mIconMime);
  mTitle.setText(docDisplayName);
  mTitle.setVisibility(View.VISIBLE);
  if (docSummary != null) {
    mSummary.setText(docSummary);
    mSummary.setVisibility(View.VISIBLE);
  }
 else {
    mSummary.setVisibility(View.INVISIBLE);
  }
  if (docLastModified == -1) {
    mDate.setText(null);
  }
 else {
    mDate.setText(Shared.formatTime(mContext,docLastModified));
  }
  if (!state.showSize || Document.MIME_TYPE_DIR.equals(docMimeType) || docSize == -1) {
    mSize.setVisibility(View.GONE);
  }
 else {
    mSize.setVisibility(View.VISIBLE);
    mSize.setText(Formatter.formatFileSize(mContext,docSize));
  }
}
