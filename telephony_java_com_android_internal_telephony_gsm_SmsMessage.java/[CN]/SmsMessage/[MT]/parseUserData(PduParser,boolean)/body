{
  boolean hasMessageClass=false;
  boolean userDataCompressed=false;
  int encodingType=ENCODING_UNKNOWN;
  if ((dataCodingScheme & 0x80) == 0) {
    automaticDeletion=(0 != (dataCodingScheme & 0x40));
    userDataCompressed=(0 != (dataCodingScheme & 0x20));
    hasMessageClass=(0 != (dataCodingScheme & 0x10));
    if (userDataCompressed) {
      Log.w(LOG_TAG,"4 - Unsupported SMS data coding scheme " + "(compression) " + (dataCodingScheme & 0xff));
    }
 else {
switch ((dataCodingScheme >> 2) & 0x3) {
case 0:
        encodingType=ENCODING_7BIT;
      break;
case 2:
    encodingType=ENCODING_16BIT;
  break;
case 1:
case 3:
Log.w(LOG_TAG,"1 - Unsupported SMS data coding scheme " + (dataCodingScheme & 0xff));
encodingType=ENCODING_8BIT;
break;
}
}
}
 else if ((dataCodingScheme & 0xf0) == 0xf0) {
automaticDeletion=false;
hasMessageClass=true;
userDataCompressed=false;
if (0 == (dataCodingScheme & 0x04)) {
encodingType=ENCODING_7BIT;
}
 else {
encodingType=ENCODING_8BIT;
}
}
 else if ((dataCodingScheme & 0xF0) == 0xC0 || (dataCodingScheme & 0xF0) == 0xD0 || (dataCodingScheme & 0xF0) == 0xE0) {
if ((dataCodingScheme & 0xF0) == 0xE0) {
encodingType=ENCODING_16BIT;
}
 else {
encodingType=ENCODING_7BIT;
}
userDataCompressed=false;
boolean active=((dataCodingScheme & 0x08) == 0x08);
if ((dataCodingScheme & 0x03) == 0x00) {
isMwi=true;
mwiSense=active;
mwiDontStore=((dataCodingScheme & 0xF0) == 0xC0);
}
 else {
isMwi=false;
Log.w(LOG_TAG,"MWI for fax, email, or other " + (dataCodingScheme & 0xff));
}
}
 else {
Log.w(LOG_TAG,"3 - Unsupported SMS data coding scheme " + (dataCodingScheme & 0xff));
if (SimRegionCache.getRegion() == SimRegionCache.MCC_KOREAN) {
Log.w(LOG_TAG,"Korean SIM, using KSC5601 for decoding.");
encodingType=ENCODING_KSC5601;
}
}
int count=p.constructUserData(hasUserDataHeader,encodingType == ENCODING_7BIT);
this.userData=p.getUserData();
this.userDataHeader=p.getUserDataHeader();
switch (encodingType) {
case ENCODING_UNKNOWN:
case ENCODING_8BIT:
messageBody=null;
break;
case ENCODING_7BIT:
messageBody=p.getUserDataGSM7Bit(count);
break;
case ENCODING_16BIT:
messageBody=p.getUserDataUCS2(count);
break;
case ENCODING_KSC5601:
messageBody=p.getUserDataKSC5601(count);
break;
}
if (Config.LOGV) Log.v(LOG_TAG,"SMS message body (raw): '" + messageBody + "'");
if (messageBody != null) {
parseMessageBody();
}
if (!hasMessageClass) {
messageClass=MessageClass.UNKNOWN;
}
 else {
switch (dataCodingScheme & 0x3) {
case 0:
messageClass=MessageClass.CLASS_0;
break;
case 1:
messageClass=MessageClass.CLASS_1;
break;
case 2:
messageClass=MessageClass.CLASS_2;
break;
case 3:
messageClass=MessageClass.CLASS_3;
break;
}
}
}
