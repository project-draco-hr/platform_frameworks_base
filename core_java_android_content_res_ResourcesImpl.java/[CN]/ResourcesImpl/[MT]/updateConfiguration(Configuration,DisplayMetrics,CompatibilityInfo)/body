{
  Trace.traceBegin(Trace.TRACE_TAG_RESOURCES,"ResourcesImpl#updateConfiguration");
  try {
synchronized (mAccessLock) {
      if (false) {
        Slog.i(TAG,"**** Updating config of " + this + ": old config is "+ mConfiguration+ " old compat is "+ mDisplayAdjustments.getCompatibilityInfo());
        Slog.i(TAG,"**** Updating config of " + this + ": new config is "+ config+ " new compat is "+ compat);
      }
      if (compat != null) {
        mDisplayAdjustments.setCompatibilityInfo(compat);
      }
      if (metrics != null) {
        mMetrics.setTo(metrics);
      }
      mDisplayAdjustments.getCompatibilityInfo().applyToDisplayMetrics(mMetrics);
      final @Config int configChanges=calcConfigChanges(config);
      LocaleList locales=mConfiguration.getLocales();
      if (locales.isEmpty()) {
        locales=LocaleList.getDefault();
        mConfiguration.setLocales(locales);
      }
      if ((configChanges & ActivityInfo.CONFIG_LOCALE) != 0) {
        if (locales.size() > 1) {
          String[] availableLocales=mAssets.getNonSystemLocales();
          if (LocaleList.isPseudoLocalesOnly(availableLocales)) {
            availableLocales=mAssets.getLocales();
            if (LocaleList.isPseudoLocalesOnly(availableLocales)) {
              availableLocales=null;
            }
          }
          if (availableLocales != null) {
            final Locale bestLocale=locales.getFirstMatchWithEnglishSupported(availableLocales);
            if (bestLocale != null && bestLocale != locales.get(0)) {
              mConfiguration.setLocales(new LocaleList(bestLocale,locales));
            }
          }
        }
      }
      if (mConfiguration.densityDpi != Configuration.DENSITY_DPI_UNDEFINED) {
        mMetrics.densityDpi=mConfiguration.densityDpi;
        mMetrics.density=mConfiguration.densityDpi * DisplayMetrics.DENSITY_DEFAULT_SCALE;
      }
      mMetrics.scaledDensity=mMetrics.density * mConfiguration.fontScale;
      final int width, height;
      if (mMetrics.widthPixels >= mMetrics.heightPixels) {
        width=mMetrics.widthPixels;
        height=mMetrics.heightPixels;
      }
 else {
        width=mMetrics.heightPixels;
        height=mMetrics.widthPixels;
      }
      final int keyboardHidden;
      if (mConfiguration.keyboardHidden == Configuration.KEYBOARDHIDDEN_NO && mConfiguration.hardKeyboardHidden == Configuration.HARDKEYBOARDHIDDEN_YES) {
        keyboardHidden=Configuration.KEYBOARDHIDDEN_SOFT;
      }
 else {
        keyboardHidden=mConfiguration.keyboardHidden;
      }
      mAssets.setConfiguration(mConfiguration.mcc,mConfiguration.mnc,adjustLanguageTag(mConfiguration.getLocales().get(0).toLanguageTag()),mConfiguration.orientation,mConfiguration.touchscreen,mConfiguration.densityDpi,mConfiguration.keyboard,keyboardHidden,mConfiguration.navigation,width,height,mConfiguration.smallestScreenWidthDp,mConfiguration.screenWidthDp,mConfiguration.screenHeightDp,mConfiguration.screenLayout,mConfiguration.uiMode,Build.VERSION.RESOURCES_SDK_INT);
      if (DEBUG_CONFIG) {
        Slog.i(TAG,"**** Updating config of " + this + ": final config is "+ mConfiguration+ " final compat is "+ mDisplayAdjustments.getCompatibilityInfo());
      }
      mDrawableCache.onConfigurationChange(configChanges);
      mColorDrawableCache.onConfigurationChange(configChanges);
      mComplexColorCache.onConfigurationChange(configChanges);
      mAnimatorCache.onConfigurationChange(configChanges);
      mStateListAnimatorCache.onConfigurationChange(configChanges);
      flushLayoutCache();
    }
synchronized (sSync) {
      if (mPluralRule != null) {
        mPluralRule=PluralRules.forLocale(mConfiguration.getLocales().get(0));
      }
    }
  }
  finally {
    Trace.traceEnd(Trace.TRACE_TAG_RESOURCES);
  }
}
