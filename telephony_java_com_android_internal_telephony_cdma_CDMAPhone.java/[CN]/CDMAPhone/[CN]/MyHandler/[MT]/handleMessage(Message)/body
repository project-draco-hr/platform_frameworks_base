{
  AsyncResult ar;
  Message onComplete;
switch (msg.what) {
case EVENT_RADIO_AVAILABLE:
{
      mCM.getBasebandVersion(obtainMessage(EVENT_GET_BASEBAND_VERSION_DONE));
      mCM.getDeviceIdentity(obtainMessage(EVENT_GET_DEVICE_IDENTITY_DONE));
    }
  break;
case EVENT_GET_BASEBAND_VERSION_DONE:
{
  ar=(AsyncResult)msg.obj;
  if (ar.exception != null) {
    break;
  }
  if (LOCAL_DEBUG)   Log.d(LOG_TAG,"Baseband version: " + ar.result);
  setSystemProperty(PROPERTY_BASEBAND_VERSION,(String)ar.result);
}
break;
case EVENT_GET_DEVICE_IDENTITY_DONE:
{
ar=(AsyncResult)msg.obj;
if (ar.exception != null) {
break;
}
String[] respId=(String[])ar.result;
mEsn=respId[2];
mMeid=respId[3];
}
break;
case EVENT_EMERGENCY_CALLBACK_MODE_ENTER:
{
handleEnterEmergencyCallbackMode(msg);
}
break;
case EVENT_EXIT_EMERGENCY_CALLBACK_RESPONSE:
{
handleExitEmergencyCallbackMode(msg);
}
break;
case EVENT_RUIM_RECORDS_LOADED:
{
Log.d(LOG_TAG,"Event EVENT_RUIM_RECORDS_LOADED Received");
}
break;
case EVENT_RADIO_OFF_OR_NOT_AVAILABLE:
{
Log.d(LOG_TAG,"Event EVENT_RADIO_OFF_OR_NOT_AVAILABLE Received");
}
break;
case EVENT_RADIO_ON:
{
Log.d(LOG_TAG,"Event EVENT_RADIO_ON Received");
}
break;
case EVENT_SSN:
{
Log.d(LOG_TAG,"Event EVENT_SSN Received");
}
break;
case EVENT_CALL_RING:
{
Log.d(LOG_TAG,"Event EVENT_CALL_RING Received");
}
break;
case EVENT_REGISTERED_TO_NETWORK:
{
Log.d(LOG_TAG,"Event EVENT_REGISTERED_TO_NETWORK Received");
}
break;
case EVENT_NV_READY:
{
Log.d(LOG_TAG,"Event EVENT_NV_READY Received");
mEriManager.loadEriFile();
mNvLoadedRegistrants.notifyRegistrants();
if (mEriManager.isEriFileLoaded()) {
Log.d(LOG_TAG,"ERI read, notify registrants");
mEriFileLoadedRegistrants.notifyRegistrants();
}
setSystemProperty(PROPERTY_INECM_MODE,"false");
}
break;
default :
{
throw new RuntimeException("unexpected event not handled");
}
}
}
