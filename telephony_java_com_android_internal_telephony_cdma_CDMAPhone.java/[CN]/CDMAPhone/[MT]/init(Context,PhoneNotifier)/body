{
  mCM.setPhoneType(Phone.PHONE_TYPE_CDMA);
  mCT=new CdmaCallTracker(this);
  mCdmaSSM=CdmaSubscriptionSourceManager.getInstance(context,mCM,this,EVENT_CDMA_SUBSCRIPTION_SOURCE_CHANGED,null);
  mSMS=new CdmaSMSDispatcher(this,mSmsStorageMonitor,mSmsUsageMonitor);
  mDataConnectionTracker=new CdmaDataConnectionTracker(this);
  mRuimPhoneBookInterfaceManager=new RuimPhoneBookInterfaceManager(this);
  mRuimSmsInterfaceManager=new RuimSmsInterfaceManager(this,mSMS);
  mSubInfo=new PhoneSubInfo(this);
  mEriManager=new EriManager(this,context,EriManager.ERI_FROM_XML);
  mCM.registerForAvailable(this,EVENT_RADIO_AVAILABLE,null);
  registerForRuimRecordEvents();
  mCM.registerForOffOrNotAvailable(this,EVENT_RADIO_OFF_OR_NOT_AVAILABLE,null);
  mCM.registerForOn(this,EVENT_RADIO_ON,null);
  mCM.setOnSuppServiceNotification(this,EVENT_SSN,null);
  mSST.registerForNetworkAttached(this,EVENT_REGISTERED_TO_NETWORK,null);
  mCM.setEmergencyCallbackMode(this,EVENT_EMERGENCY_CALLBACK_MODE_ENTER,null);
  PowerManager pm=(PowerManager)context.getSystemService(Context.POWER_SERVICE);
  mWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,LOG_TAG);
  SystemProperties.set(TelephonyProperties.CURRENT_ACTIVE_PHONE,Integer.toString(Phone.PHONE_TYPE_CDMA));
  String inEcm=SystemProperties.get(TelephonyProperties.PROPERTY_INECM_MODE,"false");
  mIsPhoneInEcmState=inEcm.equals("true");
  if (mIsPhoneInEcmState) {
    mCM.exitEmergencyCallbackMode(obtainMessage(EVENT_EXIT_EMERGENCY_CALLBACK_RESPONSE));
  }
  mCarrierOtaSpNumSchema=SystemProperties.get(TelephonyProperties.PROPERTY_OTASP_NUM_SCHEMA,"");
  String operatorAlpha=SystemProperties.get("ro.cdma.home.operator.alpha");
  setSystemProperty(PROPERTY_ICC_OPERATOR_ALPHA,operatorAlpha);
  String operatorNumeric=SystemProperties.get(PROPERTY_CDMA_HOME_OPERATOR_NUMERIC);
  setSystemProperty(PROPERTY_ICC_OPERATOR_NUMERIC,operatorNumeric);
  setIsoCountryProperty(operatorNumeric);
  updateCurrentCarrierInProvider(operatorNumeric);
  notifier.notifyMessageWaitingChanged(this);
}
