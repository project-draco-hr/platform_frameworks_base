{
  boolean isOtaSpNum=false;
  int sysSelCodeInt=extractSelCodeFromOtaSpNum(dialStr);
  if (sysSelCodeInt == INVALID_SYSTEM_SELECTION_CODE) {
    return isOtaSpNum;
  }
  if (!TextUtils.isEmpty(mCarrierOtaSpNumSchema)) {
    Matcher m=pOtaSpNumSchema.matcher(mCarrierOtaSpNumSchema);
    if (DBG) {
      Log.d(LOG_TAG,"isCarrierOtaSpNum,schema" + mCarrierOtaSpNumSchema);
    }
    if (m.find()) {
      String sch[]=pOtaSpNumSchema.split(mCarrierOtaSpNumSchema);
      if (!TextUtils.isEmpty(sch[0]) && sch[0].equals("SELC")) {
        if (sysSelCodeInt != INVALID_SYSTEM_SELECTION_CODE) {
          isOtaSpNum=checkOtaSpNumBasedOnSysSelCode(sysSelCodeInt,sch);
        }
 else {
          if (DBG) {
            Log.d(LOG_TAG,"isCarrierOtaSpNum,sysSelCodeInt is invalid");
          }
        }
      }
 else       if (!TextUtils.isEmpty(sch[0]) && sch[0].equals("FC")) {
        int fcLen=Integer.parseInt((String)sch[1]);
        String fc=(String)sch[2];
        if (dialStr.regionMatches(0,fc,0,fcLen)) {
          isOtaSpNum=true;
        }
 else {
          if (DBG)           Log.d(LOG_TAG,"isCarrierOtaSpNum,not otasp number");
        }
      }
 else {
        if (DBG) {
          Log.d(LOG_TAG,"isCarrierOtaSpNum,ota schema not supported" + sch[0]);
        }
      }
    }
 else {
      if (DBG) {
        Log.d(LOG_TAG,"isCarrierOtaSpNum,ota schema pattern not right" + mCarrierOtaSpNumSchema);
      }
    }
  }
 else {
    if (DBG)     Log.d(LOG_TAG,"isCarrierOtaSpNum,ota schema pattern empty");
  }
  return isOtaSpNum;
}
