{
  if (start == measureLimit) {
    TextPaint wp=mWorkPaint;
    wp.set(mPaint);
    if (fmi != null) {
      expandMetricsFromPaint(fmi,wp);
    }
    return 0f;
  }
  if (mSpanned == null) {
    TextPaint wp=mWorkPaint;
    wp.set(mPaint);
    final int mlimit=measureLimit;
    return handleText(wp,start,mlimit,start,limit,runIsRtl,c,x,top,y,bottom,fmi,needWidth || mlimit < measureLimit);
  }
  mMetricAffectingSpanSpanSet.init(mSpanned,mStart + start,mStart + limit);
  mCharacterStyleSpanSet.init(mSpanned,mStart + start,mStart + limit);
  final float originalX=x;
  for (int i=start, inext; i < measureLimit; i=inext) {
    TextPaint wp=mWorkPaint;
    wp.set(mPaint);
    inext=mMetricAffectingSpanSpanSet.getNextTransition(mStart + i,mStart + limit) - mStart;
    int mlimit=Math.min(inext,measureLimit);
    ReplacementSpan replacement=null;
    for (int j=0; j < mMetricAffectingSpanSpanSet.numberOfSpans; j++) {
      if ((mMetricAffectingSpanSpanSet.spanStarts[j] >= mStart + mlimit) || (mMetricAffectingSpanSpanSet.spanEnds[j] <= mStart + i))       continue;
      MetricAffectingSpan span=mMetricAffectingSpanSpanSet.spans[j];
      if (span instanceof ReplacementSpan) {
        replacement=(ReplacementSpan)span;
      }
 else {
        span.updateDrawState(wp);
      }
    }
    if (replacement != null) {
      x+=handleReplacement(replacement,wp,i,mlimit,runIsRtl,c,x,top,y,bottom,fmi,needWidth || mlimit < measureLimit);
      continue;
    }
    for (int j=i, jnext; j < mlimit; j=jnext) {
      jnext=mCharacterStyleSpanSet.getNextTransition(mStart + j,mStart + mlimit) - mStart;
      wp.set(mPaint);
      for (int k=0; k < mCharacterStyleSpanSet.numberOfSpans; k++) {
        if ((mCharacterStyleSpanSet.spanStarts[k] >= mStart + jnext) || (mCharacterStyleSpanSet.spanEnds[k] <= mStart + j))         continue;
        CharacterStyle span=mCharacterStyleSpanSet.spans[k];
        span.updateDrawState(wp);
      }
      if (jnext < mLen) {
        wp.setHyphenEdit(0);
      }
      x+=handleText(wp,j,jnext,i,inext,runIsRtl,c,x,top,y,bottom,fmi,needWidth || jnext < measureLimit);
    }
  }
  return x - originalX;
}
