{
  mPaint=paint;
  mText=text;
  mStart=start;
  mLen=limit - start;
  mDir=dir;
  mDirections=directions;
  if (mDirections == null) {
    throw new IllegalArgumentException("Directions cannot be null");
  }
  mHasTabs=hasTabs;
  mSpanned=null;
  boolean hasReplacement=false;
  SpanSet<ReplacementSpan> replacementSpans=null;
  if (text instanceof Spanned) {
    mSpanned=(Spanned)text;
    replacementSpans=new SpanSet<ReplacementSpan>(mSpanned,start,limit,ReplacementSpan.class);
    hasReplacement=replacementSpans.numberOfSpans > 0;
  }
  mCharsValid=hasReplacement || hasTabs || directions != Layout.DIRS_ALL_LEFT_TO_RIGHT;
  if (mCharsValid) {
    if (mChars == null || mChars.length < mLen) {
      mChars=new char[ArrayUtils.idealCharArraySize(mLen)];
    }
    TextUtils.getChars(text,start,limit,mChars,0);
    if (hasReplacement) {
      char[] chars=mChars;
      for (int i=start, inext; i < limit; i=inext) {
        inext=replacementSpans.getNextTransition(i,limit);
        if (replacementSpans.hasSpansIntersecting(i,inext)) {
          chars[i - start]='\ufffc';
          for (int j=i - start + 1, e=inext - start; j < e; ++j) {
            chars[j]='\ufeff';
          }
        }
      }
    }
  }
  mTabs=tabStops;
}
