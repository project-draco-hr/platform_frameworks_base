{
  mPaint=paint;
  mText=text;
  mStart=start;
  mLen=limit - start;
  mDir=dir;
  mDirections=directions;
  mHasTabs=hasTabs;
  mSpanned=null;
  mPreppedIndex=0;
  mPreppedLimit=0;
  boolean hasReplacement=false;
  if (text instanceof Spanned) {
    mSpanned=(Spanned)text;
    hasReplacement=mSpanned.getSpans(start,limit,ReplacementSpan.class).length > 0;
  }
  mCharsValid=hasReplacement || hasTabs || directions != Layout.DIRS_ALL_LEFT_TO_RIGHT;
  if (mCharsValid) {
    if (mChars == null || mChars.length < mLen) {
      mChars=new char[ArrayUtils.idealCharArraySize(mLen)];
    }
    TextUtils.getChars(text,start,limit,mChars,0);
    if (hasTabs) {
      TabStopSpan[] tabs=mTabs;
      int tabLen=0;
      if (mSpanned != null && spans == null) {
        TabStopSpan[] newTabs=mSpanned.getSpans(start,limit,TabStopSpan.class);
        if (tabs == null || tabs.length < newTabs.length) {
          tabs=newTabs;
        }
 else {
          for (int i=0; i < newTabs.length; ++i) {
            tabs[i]=newTabs[i];
          }
        }
        tabLen=newTabs.length;
      }
 else       if (spans != null) {
        if (tabs == null || tabs.length < spans.length) {
          tabs=new TabStopSpan[spans.length];
        }
        for (int i=0; i < spans.length; ++i) {
          if (spans[i] instanceof TabStopSpan) {
            tabs[tabLen++]=(TabStopSpan)spans[i];
          }
        }
      }
      if (tabs != null && tabLen < tabs.length) {
        tabs[tabLen]=null;
      }
      mTabs=tabs;
    }
  }
}
