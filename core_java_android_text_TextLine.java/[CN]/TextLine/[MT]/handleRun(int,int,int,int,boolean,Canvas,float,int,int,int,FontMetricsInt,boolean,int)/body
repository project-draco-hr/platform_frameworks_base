{
  float ox=x;
  for (int i=start, inext; i < offset; i=inext) {
    TextPaint wp=mWorkPaint;
    wp.set(mPaint);
    int mnext;
    if (mSpanned == null) {
      inext=limit;
      mnext=offset;
    }
 else {
      inext=mSpanned.nextSpanTransition(mStart + i,mStart + limit,MetricAffectingSpan.class) - mStart;
      mnext=inext < offset ? inext : offset;
      MetricAffectingSpan[] spans=mSpanned.getSpans(mStart + i,mStart + mnext,MetricAffectingSpan.class);
      if (spans.length > 0) {
        ReplacementSpan replacement=null;
        for (int j=0; j < spans.length; j++) {
          MetricAffectingSpan span=spans[j];
          if (span instanceof ReplacementSpan) {
            replacement=(ReplacementSpan)span;
          }
 else {
            span.updateDrawState(wp);
          }
        }
        if (replacement != null) {
          x+=handleReplacement(replacement,wp,runIndex,i,mnext,runIsRtl,c,x,top,y,bottom,fmi,needWidth || mnext < offset,prepFlags);
          continue;
        }
      }
    }
    if (prepFlags != PREP_NONE) {
      handlePrep(wp,runIndex,i,inext,runIsRtl);
    }
    if (prepFlags != PREP_ONLY) {
      if (mSpanned == null || c == null) {
        x+=handleText(wp,i,mnext,runIsRtl,c,x,top,y,bottom,fmi,needWidth || mnext < offset);
      }
 else {
        for (int j=i, jnext; j < mnext; j=jnext) {
          jnext=mSpanned.nextSpanTransition(mStart + j,mStart + mnext,CharacterStyle.class) - mStart;
          CharacterStyle[] spans=mSpanned.getSpans(mStart + j,mStart + jnext,CharacterStyle.class);
          wp.set(mPaint);
          for (int k=0; k < spans.length; k++) {
            CharacterStyle span=spans[k];
            span.updateDrawState(wp);
          }
          x+=handleText(wp,j,jnext,runIsRtl,c,x,top,y,bottom,fmi,needWidth || jnext < offset);
        }
      }
    }
  }
  return x - ox;
}
