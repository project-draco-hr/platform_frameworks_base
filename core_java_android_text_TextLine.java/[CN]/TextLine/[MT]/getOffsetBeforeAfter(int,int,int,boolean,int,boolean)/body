{
  if (runIndex < 0 || offset == (after ? mLen : 0)) {
    if (after) {
      return TextUtils.getOffsetAfter(mText,offset + mStart) - mStart;
    }
    return TextUtils.getOffsetBefore(mText,offset + mStart) - mStart;
  }
  TextPaint wp=mWorkPaint;
  wp.set(mPaint);
  int spanStart=runStart;
  int spanLimit;
  if (mSpanned == null) {
    spanLimit=runLimit;
  }
 else {
    int target=after ? offset + 1 : offset;
    int limit=mStart + runLimit;
    while (true) {
      spanLimit=mSpanned.nextSpanTransition(mStart + spanStart,limit,MetricAffectingSpan.class) - mStart;
      if (spanLimit >= target) {
        break;
      }
      spanStart=spanLimit;
    }
    MetricAffectingSpan[] spans=mSpanned.getSpans(mStart + spanStart,mStart + spanLimit,MetricAffectingSpan.class);
    if (spans.length > 0) {
      ReplacementSpan replacement=null;
      for (int j=0; j < spans.length; j++) {
        MetricAffectingSpan span=spans[j];
        if (span instanceof ReplacementSpan) {
          replacement=(ReplacementSpan)span;
        }
 else {
          span.updateMeasureState(wp);
        }
      }
      if (replacement != null) {
        return after ? spanLimit : spanStart;
      }
    }
  }
  int flags=runIsRtl ? Paint.DIRECTION_RTL : Paint.DIRECTION_LTR;
  int cursorOpt=after ? Paint.CURSOR_AFTER : Paint.CURSOR_BEFORE;
  if (mCharsValid) {
    return wp.getTextRunCursor(mChars,spanStart,spanLimit - spanStart,flags,offset,cursorOpt);
  }
 else {
    return wp.getTextRunCursor(mText,mStart + spanStart,mStart + spanLimit,flags,mStart + offset,cursorOpt);
  }
}
