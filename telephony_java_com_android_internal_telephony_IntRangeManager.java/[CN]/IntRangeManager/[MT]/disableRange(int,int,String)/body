{
  int len=mRanges.size();
  for (int i=0; i < len; i++) {
    IntRange range=mRanges.get(i);
    if (startId < range.startId) {
      return false;
    }
 else     if (endId <= range.endId) {
      ArrayList<ClientRange> clients=range.clients;
      int crLength=clients.size();
      if (crLength == 1) {
        ClientRange cr=clients.get(0);
        if (cr.startId == startId && cr.endId == endId && cr.client.equals(client)) {
          if (tryAddSingleRange(startId,endId,false)) {
            mRanges.remove(i);
            return true;
          }
 else {
            return false;
          }
        }
 else {
          return false;
        }
      }
      int largestEndId=Integer.MIN_VALUE;
      boolean updateStarted=false;
      for (int crIndex=0; crIndex < crLength; crIndex++) {
        ClientRange cr=clients.get(crIndex);
        if (cr.startId == startId && cr.endId == endId && cr.client.equals(client)) {
          if (crIndex == crLength - 1) {
            if (range.endId == largestEndId) {
              clients.remove(crIndex);
              return true;
            }
 else {
              if (tryAddSingleRange(largestEndId + 1,range.endId,false)) {
                clients.remove(crIndex);
                range.endId=largestEndId;
                return true;
              }
 else {
                return false;
              }
            }
          }
          IntRange rangeCopy=new IntRange(range,crIndex);
          if (crIndex == 0) {
            int nextStartId=clients.get(1).startId;
            if (nextStartId != range.startId) {
              startUpdate();
              updateStarted=true;
              addRange(range.startId,nextStartId - 1,false);
              rangeCopy.startId=nextStartId;
            }
            largestEndId=clients.get(1).endId;
          }
          ArrayList<IntRange> newRanges=new ArrayList<IntRange>();
          IntRange currentRange=rangeCopy;
          for (int nextIndex=crIndex + 1; nextIndex < crLength; nextIndex++) {
            ClientRange nextCr=clients.get(nextIndex);
            if (nextCr.startId > largestEndId + 1) {
              if (!updateStarted) {
                startUpdate();
                updateStarted=true;
              }
              addRange(largestEndId + 1,nextCr.startId - 1,false);
              currentRange.endId=largestEndId;
              newRanges.add(currentRange);
              currentRange=new IntRange(nextCr);
            }
 else {
              currentRange.clients.add(nextCr);
            }
            if (nextCr.endId > largestEndId) {
              largestEndId=nextCr.endId;
            }
          }
          if (largestEndId < endId) {
            if (!updateStarted) {
              startUpdate();
              updateStarted=true;
            }
            addRange(largestEndId + 1,endId,false);
            currentRange.endId=largestEndId;
          }
          newRanges.add(currentRange);
          if (updateStarted && !finishUpdate()) {
            return false;
          }
          mRanges.remove(i);
          mRanges.addAll(i,newRanges);
          return true;
        }
 else {
          if (cr.endId > largestEndId) {
            largestEndId=cr.endId;
          }
        }
      }
    }
  }
  return false;
}
