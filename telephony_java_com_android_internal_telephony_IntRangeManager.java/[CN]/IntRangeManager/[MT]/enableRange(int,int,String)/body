{
  int len=mRanges.size();
  if (len == 0) {
    if (tryAddSingleRange(startId,endId,true)) {
      mRanges.add(new IntRange(startId,endId,client));
      return true;
    }
 else {
      return false;
    }
  }
  for (int startIndex=0; startIndex < len; startIndex++) {
    IntRange range=mRanges.get(startIndex);
    if (startId < range.startId) {
      if ((endId + 1) < range.startId) {
        if (tryAddSingleRange(startId,endId,true)) {
          mRanges.add(startIndex,new IntRange(startId,endId,client));
          return true;
        }
 else {
          return false;
        }
      }
 else       if (endId <= range.endId) {
        if (tryAddSingleRange(startId,range.startId - 1,true)) {
          range.startId=startId;
          range.clients.add(0,new ClientRange(startId,endId,client));
          return true;
        }
 else {
          return false;
        }
      }
 else {
        for (int endIndex=startIndex + 1; endIndex < len; endIndex++) {
          IntRange endRange=mRanges.get(endIndex);
          if ((endId + 1) < endRange.startId) {
            if (tryAddSingleRange(startId,endId,true)) {
              range.startId=startId;
              range.endId=endId;
              range.clients.add(0,new ClientRange(startId,endId,client));
              int joinIndex=startIndex + 1;
              for (int i=joinIndex; i < endIndex; i++) {
                IntRange joinRange=mRanges.get(joinIndex);
                range.clients.addAll(joinRange.clients);
                mRanges.remove(joinRange);
              }
              return true;
            }
 else {
              return false;
            }
          }
 else           if (endId <= endRange.endId) {
            if (tryAddSingleRange(startId,endRange.startId - 1,true)) {
              range.startId=startId;
              range.endId=endRange.endId;
              range.clients.add(0,new ClientRange(startId,endId,client));
              int joinIndex=startIndex + 1;
              for (int i=joinIndex; i <= endIndex; i++) {
                IntRange joinRange=mRanges.get(joinIndex);
                range.clients.addAll(joinRange.clients);
                mRanges.remove(joinRange);
              }
              return true;
            }
 else {
              return false;
            }
          }
        }
        if (tryAddSingleRange(startId,endId,true)) {
          range.startId=startId;
          range.endId=endId;
          range.clients.add(0,new ClientRange(startId,endId,client));
          int joinIndex=startIndex + 1;
          for (int i=joinIndex; i < len; i++) {
            IntRange joinRange=mRanges.get(joinIndex);
            range.clients.addAll(joinRange.clients);
            mRanges.remove(joinRange);
          }
          return true;
        }
 else {
          return false;
        }
      }
    }
 else     if ((startId + 1) <= range.endId) {
      if (endId <= range.endId) {
        range.insert(new ClientRange(startId,endId,client));
        return true;
      }
 else {
        for (int endIndex=startIndex + 1; endIndex < len; endIndex++) {
          IntRange endRange=mRanges.get(endIndex);
          if ((endId + 1) < endRange.startId) {
            if (tryAddSingleRange(range.endId + 1,endId,true)) {
              range.endId=endId;
              range.insert(new ClientRange(startId,endId,client));
              int joinIndex=startIndex + 1;
              for (int i=joinIndex; i < endIndex; i++) {
                IntRange joinRange=mRanges.get(joinIndex);
                range.clients.addAll(joinRange.clients);
                mRanges.remove(joinRange);
              }
              return true;
            }
 else {
              return false;
            }
          }
 else           if (endId <= endRange.endId) {
            if (tryAddSingleRange(range.endId + 1,endRange.startId - 1,true)) {
              range.endId=endRange.endId;
              range.insert(new ClientRange(startId,endId,client));
              int joinIndex=startIndex + 1;
              for (int i=joinIndex; i <= endIndex; i++) {
                IntRange joinRange=mRanges.get(joinIndex);
                range.clients.addAll(joinRange.clients);
                mRanges.remove(joinRange);
              }
              return true;
            }
 else {
              return false;
            }
          }
        }
      }
    }
  }
  if (tryAddSingleRange(startId,endId,true)) {
    mRanges.add(new IntRange(startId,endId,client));
    return true;
  }
 else {
    return false;
  }
}
