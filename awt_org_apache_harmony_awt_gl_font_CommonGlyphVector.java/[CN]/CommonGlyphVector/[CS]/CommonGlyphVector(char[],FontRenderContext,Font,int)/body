{
  int len=chars.length;
  this.font=fnt;
  this.transform=fnt.getTransform();
  this.peer=(FontPeerImpl)fnt.getPeer();
  gvShapes=new Shape[len];
  logicalPositions=new float[(len + 1) << 1];
  visualPositions=new float[(len + 1) << 1];
  defaultPositions=new float[(len + 1) << 1];
  glsTransforms=new AffineTransform[len];
  this.charVector=chars;
  this.vectorFRC=frc;
  LineMetricsImpl lmImpl=(LineMetricsImpl)fnt.getLineMetrics(String.valueOf(chars),frc);
  this.ascent=lmImpl.getAscent();
  this.height=lmImpl.getHeight();
  this.leading=lmImpl.getLeading();
  this.descent=lmImpl.getDescent();
  this.layoutFlags=flags;
  if ((flags & Font.LAYOUT_RIGHT_TO_LEFT) != 0) {
    char vector[]=new char[len];
    for (int i=0; i < len; i++) {
      vector[i]=chars[len - i - 1];
    }
    this.vector=peer.getGlyphs(vector);
  }
 else {
    this.vector=peer.getGlyphs(chars);
  }
  this.glsTransforms=new AffineTransform[len];
  setDefaultPositions();
  performDefaultLayout();
}
