{
  final int availableWidth=mPreviewArea.getWidth();
  final int availableHeight=mPreviewArea.getHeight();
  final float pageAspectRatio=(float)mMediaSize.getWidthMils() / mMediaSize.getHeightMils();
  final int columnCount=Math.min(mSelectedPageCount,mColumnCount);
  mPreviewArea.setColumnCount(columnCount);
  final int horizontalMargins=2 * columnCount * mPreviewPageMargin;
  final int horizontalPaddingAndMargins=horizontalMargins + 2 * mPreviewListPadding;
  final int pageContentDesiredWidth=(int)((((float)availableWidth - horizontalPaddingAndMargins) / columnCount) + 0.5f);
  final int pageContentDesiredHeight=(int)(((float)pageContentDesiredWidth / pageAspectRatio) + 0.5f);
  final int pageContentMaxHeight=availableHeight - 2 * (mPreviewListPadding + mPreviewPageMargin) - mFooterHeight;
  mPageContentHeight=Math.min(pageContentDesiredHeight,pageContentMaxHeight);
  mPageContentWidth=(int)((mPageContentHeight * pageAspectRatio) + 0.5f);
  final int totalContentWidth=columnCount * mPageContentWidth + horizontalMargins;
  final int horizontalPadding=(availableWidth - totalContentWidth) / 2;
  final int rowCount=mSelectedPageCount / columnCount + ((mSelectedPageCount % columnCount) > 0 ? 1 : 0);
  final int totalContentHeight=rowCount * (mPageContentHeight + mFooterHeight + 2 * mPreviewPageMargin);
  final int verticalPadding=Math.max(mPreviewListPadding,(availableHeight - totalContentHeight) / 2);
  mPreviewArea.setPadding(horizontalPadding,verticalPadding,horizontalPadding,verticalPadding);
}
