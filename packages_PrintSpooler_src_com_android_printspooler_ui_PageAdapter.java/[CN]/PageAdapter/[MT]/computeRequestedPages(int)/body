{
  if (mRequestedPages != null && PageRangeUtils.contains(mRequestedPages,pageInDocument)) {
    return mRequestedPages;
  }
  List<PageRange> pageRangesList=new ArrayList<>();
  int remainingPagesToRequest=MAX_PREVIEW_PAGES_BATCH;
  final int selectedPagesCount=mSelectedPages.length;
  PageRange[] boundPagesInDocument=computeBoundPagesInDocument();
  final int boundRangeCount=boundPagesInDocument.length;
  for (int i=0; i < boundRangeCount; i++) {
    PageRange boundRange=boundPagesInDocument[i];
    pageRangesList.add(boundRange);
  }
  remainingPagesToRequest-=PageRangeUtils.getNormalizedPageCount(boundPagesInDocument,mDocumentPageCount);
  final boolean requestFromStart=mRequestedPages == null || pageInDocument > mRequestedPages[mRequestedPages.length - 1].getEnd();
  if (!requestFromStart) {
    if (DEBUG) {
      Log.i(LOG_TAG,"Requesting from end");
    }
    for (int i=selectedPagesCount - 1; i >= 0; i--) {
      if (remainingPagesToRequest <= 0) {
        break;
      }
      PageRange selectedRange=PageRangeUtils.asAbsoluteRange(mSelectedPages[i],mDocumentPageCount);
      if (pageInDocument < selectedRange.getStart()) {
        continue;
      }
      PageRange pagesInRange;
      int rangeSpan;
      if (selectedRange.contains(pageInDocument)) {
        rangeSpan=pageInDocument - selectedRange.getStart() + 1;
        rangeSpan=Math.min(rangeSpan,remainingPagesToRequest);
        final int fromPage=Math.max(pageInDocument - rangeSpan - 1,0);
        rangeSpan=Math.max(rangeSpan,0);
        pagesInRange=new PageRange(fromPage,pageInDocument);
      }
 else {
        rangeSpan=selectedRange.getSize();
        rangeSpan=Math.min(rangeSpan,remainingPagesToRequest);
        rangeSpan=Math.max(rangeSpan,0);
        final int fromPage=Math.max(selectedRange.getEnd() - rangeSpan - 1,0);
        final int toPage=selectedRange.getEnd();
        pagesInRange=new PageRange(fromPage,toPage);
      }
      pageRangesList.add(pagesInRange);
      remainingPagesToRequest-=rangeSpan;
    }
  }
 else {
    if (DEBUG) {
      Log.i(LOG_TAG,"Requesting from start");
    }
    for (int i=0; i < selectedPagesCount; i++) {
      if (remainingPagesToRequest <= 0) {
        break;
      }
      PageRange selectedRange=PageRangeUtils.asAbsoluteRange(mSelectedPages[i],mDocumentPageCount);
      if (pageInDocument > selectedRange.getEnd()) {
        continue;
      }
      PageRange pagesInRange;
      int rangeSpan;
      if (selectedRange.contains(pageInDocument)) {
        rangeSpan=selectedRange.getEnd() - pageInDocument + 1;
        rangeSpan=Math.min(rangeSpan,remainingPagesToRequest);
        final int toPage=Math.min(pageInDocument + rangeSpan - 1,mDocumentPageCount - 1);
        pagesInRange=new PageRange(pageInDocument,toPage);
      }
 else {
        rangeSpan=selectedRange.getSize();
        rangeSpan=Math.min(rangeSpan,remainingPagesToRequest);
        final int fromPage=selectedRange.getStart();
        final int toPage=Math.min(selectedRange.getStart() + rangeSpan - 1,mDocumentPageCount - 1);
        pagesInRange=new PageRange(fromPage,toPage);
      }
      if (DEBUG) {
        Log.i(LOG_TAG,"computeRequestedPages() Adding range:" + pagesInRange);
      }
      pageRangesList.add(pagesInRange);
      remainingPagesToRequest-=rangeSpan;
    }
  }
  PageRange[] pageRanges=new PageRange[pageRangesList.size()];
  pageRangesList.toArray(pageRanges);
  return PageRangeUtils.normalize(pageRanges);
}
