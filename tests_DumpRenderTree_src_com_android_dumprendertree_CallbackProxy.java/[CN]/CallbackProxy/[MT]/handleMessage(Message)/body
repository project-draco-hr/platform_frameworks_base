{
switch (msg.what) {
case EVENT_DOM_LOG:
    mEventSender.enableDOMUIEventLogging(msg.arg1);
  break;
case EVENT_FIRE_KBD:
mEventSender.fireKeyboardEventsToElement(msg.arg1);
break;
case EVENT_KEY_DOWN_1:
HashMap map=(HashMap)msg.obj;
mEventSender.keyDown((String)map.get("character"),(String[])map.get("withModifiers"));
break;
case EVENT_KEY_DOWN_2:
mEventSender.keyDown((String)msg.obj);
break;
case EVENT_LEAP:
mEventSender.leapForward(msg.arg1);
break;
case EVENT_MOUSE_CLICK:
mEventSender.mouseClick();
break;
case EVENT_MOUSE_DOWN:
mEventSender.mouseDown();
break;
case EVENT_MOUSE_MOVE:
mEventSender.mouseMoveTo(msg.arg1,msg.arg2);
break;
case EVENT_MOUSE_UP:
mEventSender.mouseUp();
break;
case EVENT_TOUCH_START:
mEventSender.touchStart();
break;
case EVENT_TOUCH_MOVE:
mEventSender.touchMove();
break;
case EVENT_TOUCH_END:
mEventSender.touchEnd();
break;
case EVENT_TOUCH_CANCEL:
mEventSender.touchCancel();
break;
case EVENT_ADD_TOUCH_POINT:
mEventSender.addTouchPoint(msg.arg1,msg.arg2);
break;
case EVENT_UPDATE_TOUCH_POINT:
Bundle args=(Bundle)msg.obj;
int x=args.getInt("x");
int y=args.getInt("y");
int id=args.getInt("id");
mEventSender.updateTouchPoint(id,x,y);
break;
case EVENT_SET_TOUCH_MODIFIER:
Bundle modifierArgs=(Bundle)msg.obj;
String modifier=modifierArgs.getString("modifier");
boolean enabled=modifierArgs.getBoolean("enabled");
mEventSender.setTouchModifier(modifier,enabled);
break;
case EVENT_RELEASE_TOUCH_POINT:
mEventSender.releaseTouchPoint(msg.arg1);
break;
case EVENT_CLEAR_TOUCH_POINTS:
mEventSender.clearTouchPoints();
break;
case EVENT_CANCEL_TOUCH_POINT:
mEventSender.cancelTouchPoint(msg.arg1);
break;
case LAYOUT_CLEAR_LIST:
mLayoutTestController.clearBackForwardList();
break;
case LAYOUT_DISPLAY:
mLayoutTestController.display();
break;
case LAYOUT_DUMP_TEXT:
mLayoutTestController.dumpAsText();
break;
case LAYOUT_DUMP_CHILD_FRAMES_TEXT:
mLayoutTestController.dumpChildFramesAsText();
break;
case LAYOUT_DUMP_HISTORY:
mLayoutTestController.dumpBackForwardList();
break;
case LAYOUT_DUMP_CHILD_SCROLL:
mLayoutTestController.dumpChildFrameScrollPositions();
break;
case LAYOUT_DUMP_EDIT_CB:
mLayoutTestController.dumpEditingCallbacks();
break;
case LAYOUT_DUMP_SEL_RECT:
mLayoutTestController.dumpSelectionRect();
break;
case LAYOUT_DUMP_TITLE_CHANGES:
mLayoutTestController.dumpTitleChanges();
break;
case LAYOUT_KEEP_WEB_HISTORY:
mLayoutTestController.keepWebHistory();
break;
case LAYOUT_NOTIFY_DONE:
mLayoutTestController.notifyDone();
break;
case LAYOUT_QUEUE_BACK_NAV:
mLayoutTestController.queueBackNavigation(msg.arg1);
break;
case LAYOUT_QUEUE_FWD_NAV:
mLayoutTestController.queueForwardNavigation(msg.arg1);
break;
case LAYOUT_QUEUE_LOAD:
HashMap<String,String> loadMap=(HashMap<String,String>)msg.obj;
mLayoutTestController.queueLoad(loadMap.get("Url"),loadMap.get("frameTarget"));
break;
case LAYOUT_QUEUE_RELOAD:
mLayoutTestController.queueReload();
break;
case LAYOUT_QUEUE_SCRIPT:
mLayoutTestController.queueScript((String)msg.obj);
break;
case LAYOUT_REPAINT_HORZ:
mLayoutTestController.repaintSweepHorizontally();
break;
case LAYOUT_SET_ACCEPT_EDIT:
mLayoutTestController.setAcceptsEditing(msg.arg1 == 1 ? true : false);
break;
case LAYOUT_MAIN_FIRST_RESP:
mLayoutTestController.setMainFrameIsFirstResponder(msg.arg1 == 1 ? true : false);
break;
case LAYOUT_SET_WINDOW_KEY:
mLayoutTestController.setWindowIsKey(msg.arg1 == 1 ? true : false);
break;
case LAYOUT_TEST_REPAINT:
mLayoutTestController.testRepaint();
break;
case LAYOUT_WAIT_UNTIL_DONE:
mLayoutTestController.waitUntilDone();
break;
case LAYOUT_DUMP_DATABASE_CALLBACKS:
mLayoutTestController.dumpDatabaseCallbacks();
break;
case LAYOUT_SET_CAN_OPEN_WINDOWS:
mLayoutTestController.setCanOpenWindows();
break;
case SET_GEOLOCATION_PERMISSION:
mLayoutTestController.setGeolocationPermission(msg.arg1 == 1 ? true : false);
break;
case OVERRIDE_PREFERENCE:
String key=msg.getData().getString("key");
boolean value=msg.getData().getBoolean("value");
mLayoutTestController.overridePreference(key,value);
break;
case SET_XSS_AUDITOR_ENABLED:
mLayoutTestController.setXSSAuditorEnabled(msg.arg1 == 1);
break;
}
}
