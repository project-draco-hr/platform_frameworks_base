{
  final boolean measureMatchParentChildren=MeasureSpec.getMode(widthMeasureSpec) != MeasureSpec.EXACTLY || MeasureSpec.getMode(heightMeasureSpec) != MeasureSpec.EXACTLY;
  int maxHeight=0;
  int maxWidth=0;
  int childState=0;
  final int count=getChildCount();
  for (int i=0; i < count; i++) {
    final View child=getChildAt(i);
    if (getMeasureAllChildren() || child.getVisibility() != GONE) {
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      final boolean matchWidth=lp.width == LayoutParams.MATCH_PARENT;
      final boolean matchHeight=lp.height == LayoutParams.MATCH_PARENT;
      if (measureMatchParentChildren && (matchWidth || matchHeight)) {
        mMatchParentChildren.add(child);
      }
      measureChildWithMargins(child,widthMeasureSpec,0,heightMeasureSpec,0);
      int state=0;
      if (measureMatchParentChildren && !matchWidth) {
        maxWidth=Math.max(maxWidth,child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin);
        state|=child.getMeasuredWidthAndState() & MEASURED_STATE_MASK;
      }
      if (measureMatchParentChildren && !matchHeight) {
        maxHeight=Math.max(maxHeight,child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin);
        state|=(child.getMeasuredHeightAndState() >> MEASURED_HEIGHT_STATE_SHIFT) & (MEASURED_STATE_MASK >> MEASURED_HEIGHT_STATE_SHIFT);
      }
      childState=combineMeasuredStates(childState,state);
    }
  }
  maxWidth+=getPaddingLeft() + getPaddingRight();
  maxHeight+=getPaddingTop() + getPaddingBottom();
  maxHeight=Math.max(maxHeight,getSuggestedMinimumHeight());
  maxWidth=Math.max(maxWidth,getSuggestedMinimumWidth());
  final Drawable drawable=getForeground();
  if (drawable != null) {
    maxHeight=Math.max(maxHeight,drawable.getMinimumHeight());
    maxWidth=Math.max(maxWidth,drawable.getMinimumWidth());
  }
  setMeasuredDimension(resolveSizeAndState(maxWidth,widthMeasureSpec,childState),resolveSizeAndState(maxHeight,heightMeasureSpec,childState << MEASURED_HEIGHT_STATE_SHIFT));
  final int matchCount=mMatchParentChildren.size();
  for (int i=0; i < matchCount; i++) {
    final View child=mMatchParentChildren.get(i);
    final MarginLayoutParams lp=(MarginLayoutParams)child.getLayoutParams();
    final int childWidthMeasureSpec;
    if (lp.width == LayoutParams.MATCH_PARENT) {
      childWidthMeasureSpec=MeasureSpec.makeMeasureSpec(getMeasuredWidth() - getPaddingLeft() - getPaddingRight()- lp.leftMargin- lp.rightMargin,MeasureSpec.EXACTLY);
    }
 else {
      childWidthMeasureSpec=getChildMeasureSpec(widthMeasureSpec,getPaddingLeft() + getPaddingRight() + lp.leftMargin+ lp.rightMargin,lp.width);
    }
    final int childHeightMeasureSpec;
    if (lp.height == LayoutParams.MATCH_PARENT) {
      childHeightMeasureSpec=MeasureSpec.makeMeasureSpec(getMeasuredHeight() - getPaddingTop() - getPaddingBottom()- lp.topMargin- lp.bottomMargin,MeasureSpec.EXACTLY);
    }
 else {
      childHeightMeasureSpec=getChildMeasureSpec(heightMeasureSpec,getPaddingTop() + getPaddingBottom() + lp.topMargin+ lp.bottomMargin,lp.height);
    }
    child.measure(childWidthMeasureSpec,childHeightMeasureSpec);
  }
  mMatchParentChildren.clear();
}
