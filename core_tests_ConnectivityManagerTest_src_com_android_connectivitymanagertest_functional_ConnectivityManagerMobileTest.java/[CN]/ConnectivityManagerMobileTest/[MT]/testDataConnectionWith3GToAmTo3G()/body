{
  NetworkInfo networkInfo=cmActivity.mCM.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);
  cmActivity.setStateTransitionCriteria(ConnectivityManager.TYPE_MOBILE,networkInfo.getState(),NetworkState.TO_DISCONNECTION,State.DISCONNECTED);
  networkInfo=cmActivity.mCM.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
  assertEquals(State.DISCONNECTED,networkInfo.getState());
  log("Enable airplane mode");
  cmActivity.setAirplaneMode(getInstrumentation().getContext(),true);
  sleep(ConnectivityManagerTestActivity.SHORT_TIMEOUT);
  networkInfo=cmActivity.mCM.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
  assertEquals(State.DISCONNECTED,networkInfo.getState());
  if (!cmActivity.validateNetworkStates(ConnectivityManager.TYPE_MOBILE)) {
    log("Mobile state transition validation failed.");
    log("reason: " + cmActivity.getTransitionFailureReason(ConnectivityManager.TYPE_MOBILE));
    assertTrue(false);
  }
  networkInfo=cmActivity.mCM.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);
  cmActivity.setStateTransitionCriteria(ConnectivityManager.TYPE_MOBILE,networkInfo.getState(),NetworkState.TO_CONNECTION,State.CONNECTED);
  networkInfo=cmActivity.mCM.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
  cmActivity.setStateTransitionCriteria(ConnectivityManager.TYPE_WIFI,networkInfo.getState(),NetworkState.DO_NOTHING,State.DISCONNECTED);
  cmActivity.setAirplaneMode(getInstrumentation().getContext(),false);
  assertTrue(cmActivity.waitForNetworkState(ConnectivityManager.TYPE_MOBILE,State.CONNECTED,ConnectivityManagerTestActivity.LONG_TIMEOUT));
  if (!cmActivity.validateNetworkStates(ConnectivityManager.TYPE_MOBILE)) {
    log("Mobile state transition validation failed.");
    log("reason: " + cmActivity.getTransitionFailureReason(ConnectivityManager.TYPE_MOBILE));
    assertTrue(false);
  }
  if (!cmActivity.validateNetworkStates(ConnectivityManager.TYPE_WIFI)) {
    log("Wifi state transition validation failed.");
    log("reason: " + cmActivity.getTransitionFailureReason(ConnectivityManager.TYPE_WIFI));
    assertTrue(false);
  }
}
