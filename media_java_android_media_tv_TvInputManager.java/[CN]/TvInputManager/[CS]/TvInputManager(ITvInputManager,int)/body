{
  mService=service;
  mUserId=userId;
  mClient=new ITvInputClient.Stub(){
    @Override public void onSessionCreated(    String inputId,    IBinder token,    InputChannel channel,    int seq){
synchronized (mSessionCallbackRecordMap) {
        SessionCallbackRecord record=mSessionCallbackRecordMap.get(seq);
        if (record == null) {
          Log.e(TAG,"Callback not found for " + token);
          return;
        }
        Session session=null;
        if (token != null) {
          session=new Session(token,channel,mService,mUserId,seq,mSessionCallbackRecordMap);
        }
        record.postSessionCreated(session);
      }
    }
    @Override public void onSessionReleased(    int seq){
synchronized (mSessionCallbackRecordMap) {
        SessionCallbackRecord record=mSessionCallbackRecordMap.get(seq);
        mSessionCallbackRecordMap.delete(seq);
        if (record == null) {
          Log.e(TAG,"Callback not found for seq:" + seq);
          return;
        }
        record.mSession.releaseInternal();
        record.postSessionReleased();
      }
    }
    @Override public void onChannelRetuned(    Uri channelUri,    int seq){
synchronized (mSessionCallbackRecordMap) {
        SessionCallbackRecord record=mSessionCallbackRecordMap.get(seq);
        if (record == null) {
          Log.e(TAG,"Callback not found for seq " + seq);
          return;
        }
        record.postChannelRetuned(channelUri);
      }
    }
    @Override public void onTrackInfoChanged(    List<TvTrackInfo> tracks,    int seq){
synchronized (mSessionCallbackRecordMap) {
        SessionCallbackRecord record=mSessionCallbackRecordMap.get(seq);
        if (record == null) {
          Log.e(TAG,"Callback not found for seq " + seq);
          return;
        }
        record.postTrackInfoChanged(tracks);
      }
    }
    @Override public void onVideoAvailable(    int seq){
synchronized (mSessionCallbackRecordMap) {
        SessionCallbackRecord record=mSessionCallbackRecordMap.get(seq);
        if (record == null) {
          Log.e(TAG,"Callback not found for seq " + seq);
          return;
        }
        record.postVideoAvailable();
      }
    }
    @Override public void onVideoUnavailable(    int reason,    int seq){
synchronized (mSessionCallbackRecordMap) {
        SessionCallbackRecord record=mSessionCallbackRecordMap.get(seq);
        if (record == null) {
          Log.e(TAG,"Callback not found for seq " + seq);
          return;
        }
        record.postVideoUnavailable(reason);
      }
    }
    @Override public void onSessionEvent(    String eventType,    Bundle eventArgs,    int seq){
synchronized (mSessionCallbackRecordMap) {
        SessionCallbackRecord record=mSessionCallbackRecordMap.get(seq);
        if (record == null) {
          Log.e(TAG,"Callback not found for seq " + seq);
          return;
        }
        record.postSessionEvent(eventType,eventArgs);
      }
    }
    @Override public void onAvailabilityChanged(    String inputId,    boolean isAvailable){
synchronized (mTvInputListenerRecordsMap) {
        List<TvInputListenerRecord> records=mTvInputListenerRecordsMap.get(inputId);
        if (records == null) {
          return;
        }
        int recordsCount=records.size();
        for (int i=0; i < recordsCount; i++) {
          records.get(i).postAvailabilityChanged(inputId,isAvailable);
        }
      }
    }
  }
;
}
