{
  mService=service;
  mUserId=userId;
  mClient=new ITvInputClient.Stub(){
    @Override public void onSessionCreated(    String inputId,    IBinder token,    InputChannel channel,    int seq){
synchronized (mSessionCallbackRecordMap) {
        SessionCallbackRecord record=mSessionCallbackRecordMap.get(seq);
        if (record == null) {
          Log.e(TAG,"Callback not found for " + token);
          return;
        }
        Session session=null;
        if (token != null) {
          session=new Session(token,channel,mService,mUserId,seq,mSessionCallbackRecordMap);
        }
        record.postSessionCreated(session);
      }
    }
    @Override public void onSessionReleased(    int seq){
synchronized (mSessionCallbackRecordMap) {
        SessionCallbackRecord record=mSessionCallbackRecordMap.get(seq);
        mSessionCallbackRecordMap.delete(seq);
        if (record == null) {
          Log.e(TAG,"Callback not found for seq:" + seq);
          return;
        }
        record.mSession.releaseInternal();
        record.postSessionReleased();
      }
    }
    @Override public void onChannelRetuned(    Uri channelUri,    int seq){
synchronized (mSessionCallbackRecordMap) {
        SessionCallbackRecord record=mSessionCallbackRecordMap.get(seq);
        if (record == null) {
          Log.e(TAG,"Callback not found for seq " + seq);
          return;
        }
        record.postChannelRetuned(channelUri);
      }
    }
    @Override public void onTracksChanged(    List<TvTrackInfo> tracks,    int seq){
synchronized (mSessionCallbackRecordMap) {
        SessionCallbackRecord record=mSessionCallbackRecordMap.get(seq);
        if (record == null) {
          Log.e(TAG,"Callback not found for seq " + seq);
          return;
        }
        if (record.mSession.updateTracks(tracks)) {
          record.postTracksChanged(tracks);
          postVideoSizeChangedIfNeededLocked(record);
        }
      }
    }
    @Override public void onTrackSelected(    int type,    String trackId,    int seq){
synchronized (mSessionCallbackRecordMap) {
        SessionCallbackRecord record=mSessionCallbackRecordMap.get(seq);
        if (record == null) {
          Log.e(TAG,"Callback not found for seq " + seq);
          return;
        }
        if (record.mSession.updateTrackSelection(type,trackId)) {
          record.postTrackSelected(type,trackId);
          postVideoSizeChangedIfNeededLocked(record);
        }
      }
    }
    private void postVideoSizeChangedIfNeededLocked(    SessionCallbackRecord record){
      TvTrackInfo track=record.mSession.getVideoTrackToNotify();
      if (track != null) {
        record.postVideoSizeChanged(track.getVideoWidth(),track.getVideoHeight());
      }
    }
    @Override public void onVideoAvailable(    int seq){
synchronized (mSessionCallbackRecordMap) {
        SessionCallbackRecord record=mSessionCallbackRecordMap.get(seq);
        if (record == null) {
          Log.e(TAG,"Callback not found for seq " + seq);
          return;
        }
        record.postVideoAvailable();
      }
    }
    @Override public void onVideoUnavailable(    int reason,    int seq){
synchronized (mSessionCallbackRecordMap) {
        SessionCallbackRecord record=mSessionCallbackRecordMap.get(seq);
        if (record == null) {
          Log.e(TAG,"Callback not found for seq " + seq);
          return;
        }
        record.postVideoUnavailable(reason);
      }
    }
    @Override public void onContentAllowed(    int seq){
synchronized (mSessionCallbackRecordMap) {
        SessionCallbackRecord record=mSessionCallbackRecordMap.get(seq);
        if (record == null) {
          Log.e(TAG,"Callback not found for seq " + seq);
          return;
        }
        record.postContentAllowed();
      }
    }
    @Override public void onContentBlocked(    String rating,    int seq){
synchronized (mSessionCallbackRecordMap) {
        SessionCallbackRecord record=mSessionCallbackRecordMap.get(seq);
        if (record == null) {
          Log.e(TAG,"Callback not found for seq " + seq);
          return;
        }
        record.postContentBlocked(TvContentRating.unflattenFromString(rating));
      }
    }
    @Override public void onLayoutSurface(    int left,    int top,    int right,    int bottom,    int seq){
synchronized (mSessionCallbackRecordMap) {
        SessionCallbackRecord record=mSessionCallbackRecordMap.get(seq);
        if (record == null) {
          Log.e(TAG,"Callback not found for seq " + seq);
          return;
        }
        record.postLayoutSurface(left,top,right,bottom);
      }
    }
    @Override public void onSessionEvent(    String eventType,    Bundle eventArgs,    int seq){
synchronized (mSessionCallbackRecordMap) {
        SessionCallbackRecord record=mSessionCallbackRecordMap.get(seq);
        if (record == null) {
          Log.e(TAG,"Callback not found for seq " + seq);
          return;
        }
        record.postSessionEvent(eventType,eventArgs);
      }
    }
    @Override public void onTimeShiftStatusChanged(    int status,    int seq){
synchronized (mSessionCallbackRecordMap) {
        SessionCallbackRecord record=mSessionCallbackRecordMap.get(seq);
        if (record == null) {
          Log.e(TAG,"Callback not found for seq " + seq);
          return;
        }
        record.postTimeShiftStatusChanged(status);
      }
    }
    @Override public void onTimeShiftStartPositionChanged(    long timeMs,    int seq){
synchronized (mSessionCallbackRecordMap) {
        SessionCallbackRecord record=mSessionCallbackRecordMap.get(seq);
        if (record == null) {
          Log.e(TAG,"Callback not found for seq " + seq);
          return;
        }
        record.postTimeShiftStartPositionChanged(timeMs);
      }
    }
    @Override public void onTimeShiftCurrentPositionChanged(    long timeMs,    int seq){
synchronized (mSessionCallbackRecordMap) {
        SessionCallbackRecord record=mSessionCallbackRecordMap.get(seq);
        if (record == null) {
          Log.e(TAG,"Callback not found for seq " + seq);
          return;
        }
        record.postTimeShiftCurrentPositionChanged(timeMs);
      }
    }
  }
;
  ITvInputManagerCallback managerCallback=new ITvInputManagerCallback.Stub(){
    @Override public void onInputStateChanged(    String inputId,    int state){
synchronized (mLock) {
        mStateMap.put(inputId,state);
        for (        TvInputCallbackRecord record : mCallbackRecords) {
          record.postInputStateChanged(inputId,state);
        }
      }
    }
    @Override public void onInputAdded(    String inputId){
synchronized (mLock) {
        mStateMap.put(inputId,INPUT_STATE_CONNECTED);
        for (        TvInputCallbackRecord record : mCallbackRecords) {
          record.postInputAdded(inputId);
        }
      }
    }
    @Override public void onInputRemoved(    String inputId){
synchronized (mLock) {
        mStateMap.remove(inputId);
        for (        TvInputCallbackRecord record : mCallbackRecords) {
          record.postInputRemoved(inputId);
        }
      }
    }
    @Override public void onInputUpdated(    String inputId){
synchronized (mLock) {
        for (        TvInputCallbackRecord record : mCallbackRecords) {
          record.postInputUpdated(inputId);
        }
      }
    }
  }
;
  try {
    if (mService != null) {
      mService.registerCallback(managerCallback,mUserId);
      List<TvInputInfo> infos=mService.getTvInputList(mUserId);
synchronized (mLock) {
        for (        TvInputInfo info : infos) {
          String inputId=info.getId();
          mStateMap.put(inputId,mService.getTvInputState(inputId,mUserId));
        }
      }
    }
  }
 catch (  RemoteException e) {
    Log.e(TAG,"TvInputManager initialization failed",e);
  }
}
