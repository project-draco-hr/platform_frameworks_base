{
  mContext=context;
  mNtpTime=NtpTrustedTime.getInstance(context);
  mILocationManager=ilocationManager;
  mLocation.setExtras(mLocationExtras);
  mPowerManager=(PowerManager)mContext.getSystemService(Context.POWER_SERVICE);
  mWakeLock=mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,WAKELOCK_KEY);
  mWakeLock.setReferenceCounted(true);
  mAlarmManager=(AlarmManager)mContext.getSystemService(Context.ALARM_SERVICE);
  mWakeupIntent=PendingIntent.getBroadcast(mContext,0,new Intent(ALARM_WAKEUP),0);
  mTimeoutIntent=PendingIntent.getBroadcast(mContext,0,new Intent(ALARM_TIMEOUT),0);
  mConnMgr=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
  mAppOpsService=IAppOpsService.Stub.asInterface(ServiceManager.getService(Context.APP_OPS_SERVICE));
  mBatteryStats=IBatteryStats.Stub.asInterface(ServiceManager.getService(BatteryStats.SERVICE_NAME));
  mHandler=new ProviderHandler(looper);
  mProperties=new Properties();
  sendMessage(INITIALIZE_HANDLER,0,null);
  mNIHandler=new GpsNetInitiatedHandler(context,mNetInitiatedListener,mSuplEsEnabled);
  mListenerHelper=new GnssStatusListenerHelper(mHandler){
    @Override protected boolean isAvailableInPlatform(){
      return isSupported();
    }
    @Override protected boolean isGpsEnabled(){
      return isEnabled();
    }
  }
;
  mGnssMeasurementsProvider=new GnssMeasurementsProvider(mHandler){
    @Override public boolean isAvailableInPlatform(){
      return native_is_measurement_supported();
    }
    @Override protected boolean registerWithService(){
      return native_start_measurement_collection();
    }
    @Override protected void unregisterFromService(){
      native_stop_measurement_collection();
    }
    @Override protected boolean isGpsEnabled(){
      return isEnabled();
    }
  }
;
  mGnssNavigationMessageProvider=new GnssNavigationMessageProvider(mHandler){
    @Override protected boolean isAvailableInPlatform(){
      return native_is_navigation_message_supported();
    }
    @Override protected boolean registerWithService(){
      return native_start_navigation_message_collection();
    }
    @Override protected void unregisterFromService(){
      native_stop_navigation_message_collection();
    }
    @Override protected boolean isGpsEnabled(){
      return isEnabled();
    }
  }
;
}
