{
synchronized (sFile) {
    HashMap<String,Long> timestamps=new HashMap<String,Long>();
    boolean success=false;
    try (final FileInputStream stream=sFile.openRead()){
      XmlPullParser parser=Xml.newPullParser();
      parser.setInput(stream,StandardCharsets.UTF_8.name());
      int type;
      while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
        ;
      }
      if (type != XmlPullParser.START_TAG) {
        throw new IllegalStateException("no start tag found");
      }
      int outerDepth=parser.getDepth();
      while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
        if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
          continue;
        }
        String tagName=parser.getName();
        if (tagName.equals("log")) {
          final String filename=parser.getAttributeValue(null,"filename");
          final long timestamp=Long.valueOf(parser.getAttributeValue(null,"timestamp"));
          timestamps.put(filename,timestamp);
        }
 else {
          Slog.w(TAG,"Unknown tag: " + parser.getName());
          XmlUtils.skipCurrentTag(parser);
        }
      }
      success=true;
    }
 catch (    FileNotFoundException e) {
      Slog.i(TAG,"No existing last log timestamp file " + sFile.getBaseFile() + "; starting empty");
    }
catch (    IOException e) {
      Slog.w(TAG,"Failed parsing " + e);
    }
catch (    IllegalStateException e) {
      Slog.w(TAG,"Failed parsing " + e);
    }
catch (    NullPointerException e) {
      Slog.w(TAG,"Failed parsing " + e);
    }
catch (    XmlPullParserException e) {
      Slog.w(TAG,"Failed parsing " + e);
    }
 finally {
      if (!success) {
        timestamps.clear();
      }
    }
    return timestamps;
  }
}
