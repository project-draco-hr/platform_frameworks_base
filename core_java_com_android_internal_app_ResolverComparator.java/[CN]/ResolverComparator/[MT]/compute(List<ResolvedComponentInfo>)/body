{
  mScoredTargets.clear();
  final long recentSinceTime=mCurrentTime - RECENCY_TIME_PERIOD;
  long mostRecentlyUsedTime=recentSinceTime + 1;
  long mostTimeSpent=1;
  int mostLaunched=1;
  for (  ResolvedComponentInfo target : targets) {
    final ScoredTarget scoredTarget=new ScoredTarget(target.getResolveInfoAt(0).activityInfo);
    mScoredTargets.put(target.name,scoredTarget);
    final UsageStats pkStats=mStats.get(target.name.getPackageName());
    if (pkStats != null) {
      if (!target.name.getPackageName().equals(mReferrerPackage) && !isPersistentProcess(target)) {
        final long lastTimeUsed=pkStats.getLastTimeUsed();
        scoredTarget.lastTimeUsed=lastTimeUsed;
        if (lastTimeUsed > mostRecentlyUsedTime) {
          mostRecentlyUsedTime=lastTimeUsed;
        }
      }
      final long timeSpent=pkStats.getTotalTimeInForeground();
      scoredTarget.timeSpent=timeSpent;
      if (timeSpent > mostTimeSpent) {
        mostTimeSpent=timeSpent;
      }
      final int launched=pkStats.mLaunchCount;
      scoredTarget.launchCount=launched;
      if (launched > mostLaunched) {
        mostLaunched=launched;
      }
    }
  }
  if (DEBUG) {
    Log.d(TAG,"compute - mostRecentlyUsedTime: " + mostRecentlyUsedTime + " mostTimeSpent: "+ mostTimeSpent+ " recentSinceTime: "+ recentSinceTime+ " mostLaunched: "+ mostLaunched);
  }
  for (  ScoredTarget target : mScoredTargets.values()) {
    final float recency=(float)Math.max(target.lastTimeUsed - recentSinceTime,0) / (mostRecentlyUsedTime - recentSinceTime);
    final float recencyScore=recency * recency * RECENCY_MULTIPLIER;
    final float usageTimeScore=(float)target.timeSpent / mostTimeSpent;
    final float launchCountScore=(float)target.launchCount / mostLaunched;
    target.score=recencyScore + usageTimeScore + launchCountScore;
    if (DEBUG) {
      Log.d(TAG,"Scores: recencyScore: " + recencyScore + " usageTimeScore: "+ usageTimeScore+ " launchCountScore: "+ launchCountScore+ " - "+ target);
    }
  }
}
