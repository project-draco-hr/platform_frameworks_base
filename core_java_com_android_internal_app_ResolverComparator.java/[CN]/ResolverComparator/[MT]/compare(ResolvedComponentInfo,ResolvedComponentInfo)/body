{
  final ResolveInfo lhs=lhsp.getResolveInfoAt(0);
  final ResolveInfo rhs=rhsp.getResolveInfoAt(0);
  if (lhs.targetUserId != UserHandle.USER_CURRENT) {
    return 1;
  }
  if (mHttp) {
    final boolean lhsSpecific=ResolverActivity.isSpecificUriMatch(lhs.match);
    final boolean rhsSpecific=ResolverActivity.isSpecificUriMatch(rhs.match);
    if (lhsSpecific != rhsSpecific) {
      return lhsSpecific ? -1 : 1;
    }
  }
  final boolean lPinned=lhsp.isPinned();
  final boolean rPinned=rhsp.isPinned();
  if (lPinned && !rPinned) {
    return -1;
  }
 else   if (!lPinned && rPinned) {
    return 1;
  }
  if (!lPinned && !rPinned) {
    if (mStats != null) {
      final ScoredTarget lhsTarget=mScoredTargets.get(new ComponentName(lhs.activityInfo.packageName,lhs.activityInfo.name));
      final ScoredTarget rhsTarget=mScoredTargets.get(new ComponentName(rhs.activityInfo.packageName,rhs.activityInfo.name));
      final float diff=rhsTarget.score - lhsTarget.score;
      if (diff != 0) {
        return diff > 0 ? 1 : -1;
      }
    }
  }
  CharSequence sa=lhs.loadLabel(mPm);
  if (sa == null)   sa=lhs.activityInfo.name;
  CharSequence sb=rhs.loadLabel(mPm);
  if (sb == null)   sb=rhs.activityInfo.name;
  return mCollator.compare(sa.toString().trim(),sb.toString().trim());
}
