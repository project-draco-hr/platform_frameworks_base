{
  Float previousStartValue=getChildTag(child,TAG_START_SCALE);
  Float previousEndValue=getChildTag(child,TAG_END_SCALE);
  float newEndValue=viewState.scale;
  if (previousEndValue != null && previousEndValue == newEndValue) {
    return;
  }
  ObjectAnimator previousAnimator=getChildTag(child,TAG_ANIMATOR_SCALE);
  if (!mAnimationFilter.animateScale) {
    if (previousAnimator != null) {
      PropertyValuesHolder[] values=previousAnimator.getValues();
      float relativeDiff=newEndValue - previousEndValue;
      float newStartValue=previousStartValue + relativeDiff;
      values[0].setFloatValues(newStartValue,newEndValue);
      values[1].setFloatValues(newStartValue,newEndValue);
      child.setTag(TAG_START_SCALE,newStartValue);
      child.setTag(TAG_END_SCALE,newEndValue);
      previousAnimator.setCurrentPlayTime(previousAnimator.getCurrentPlayTime());
      return;
    }
 else {
      child.setScaleX(newEndValue);
      child.setScaleY(newEndValue);
    }
  }
  PropertyValuesHolder holderX=PropertyValuesHolder.ofFloat(View.SCALE_X,child.getScaleX(),newEndValue);
  PropertyValuesHolder holderY=PropertyValuesHolder.ofFloat(View.SCALE_Y,child.getScaleY(),newEndValue);
  ObjectAnimator animator=ObjectAnimator.ofPropertyValuesHolder(child,holderX,holderY);
  animator.setInterpolator(mFastOutSlowInInterpolator);
  long newDuration=cancelAnimatorAndGetNewDuration(duration,previousAnimator);
  animator.setDuration(newDuration);
  animator.addListener(getGlobalAnimationFinishedListener());
  animator.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      child.setTag(TAG_ANIMATOR_SCALE,null);
      child.setTag(TAG_START_SCALE,null);
      child.setTag(TAG_END_SCALE,null);
    }
  }
);
  startAnimator(animator);
  child.setTag(TAG_ANIMATOR_SCALE,animator);
  child.setTag(TAG_START_SCALE,child.getScaleX());
  child.setTag(TAG_END_SCALE,newEndValue);
}
