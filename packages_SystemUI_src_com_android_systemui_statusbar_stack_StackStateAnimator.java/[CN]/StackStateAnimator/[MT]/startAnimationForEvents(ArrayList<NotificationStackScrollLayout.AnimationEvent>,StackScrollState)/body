{
  int numEvents=mAnimationEvents.size();
  if (numEvents == 0) {
    return;
  }
  long lastEventStartTime=mAnimationEvents.get(numEvents - 1).eventStartTime;
  long eventEnd=lastEventStartTime + ANIMATION_DURATION;
  long currentTime=AnimationUtils.currentAnimationTimeMillis();
  long newDuration=eventEnd - currentTime;
  if (newDuration <= 0) {
    return;
  }
  initializeAddedViewStates(mAnimationEvents,finalState);
  int childCount=mHostLayout.getChildCount();
  boolean isFirstAnimatingView=true;
  for (int i=0; i < childCount; i++) {
    final ExpandableView child=(ExpandableView)mHostLayout.getChildAt(i);
    StackScrollState.ViewState viewState=finalState.getViewStateForView(child);
    if (viewState == null) {
      continue;
    }
    int childVisibility=child.getVisibility();
    boolean wasVisible=childVisibility == View.VISIBLE;
    final float alpha=viewState.alpha;
    if (!wasVisible && alpha != 0 && !viewState.gone) {
      child.setVisibility(View.VISIBLE);
    }
    startPropertyAnimation(newDuration,isFirstAnimatingView,child,viewState,alpha);
    child.setClipBounds(null);
    int currentHeigth=child.getActualHeight();
    if (viewState.height != currentHeigth) {
      startHeightAnimation(newDuration,child,viewState,currentHeigth);
    }
    isFirstAnimatingView=false;
  }
  mAnimationIsRunning=true;
}
