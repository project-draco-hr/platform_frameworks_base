{
  if (mAnimationFilter.hasDarkEvent) {
    return calculateDelayDark(viewState);
  }
  if (mAnimationFilter.hasGoToFullShadeEvent) {
    return calculateDelayGoToFullShade(viewState);
  }
  long minDelay=0;
  for (  NotificationStackScrollLayout.AnimationEvent event : mNewEvents) {
    long delayPerElement=ANIMATION_DELAY_PER_ELEMENT_INTERRUPTING;
switch (event.animationType) {
case NotificationStackScrollLayout.AnimationEvent.ANIMATION_TYPE_ADD:
{
        int ownIndex=viewState.notGoneIndex;
        int changingIndex=finalState.getViewStateForView(event.changingView).notGoneIndex;
        int difference=Math.abs(ownIndex - changingIndex);
        difference=Math.max(0,Math.min(DELAY_EFFECT_MAX_INDEX_DIFFERENCE,difference - 1));
        long delay=(DELAY_EFFECT_MAX_INDEX_DIFFERENCE - difference) * delayPerElement;
        minDelay=Math.max(delay,minDelay);
        break;
      }
case NotificationStackScrollLayout.AnimationEvent.ANIMATION_TYPE_REMOVE_SWIPED_OUT:
    delayPerElement=ANIMATION_DELAY_PER_ELEMENT_MANUAL;
case NotificationStackScrollLayout.AnimationEvent.ANIMATION_TYPE_REMOVE:
{
    int ownIndex=viewState.notGoneIndex;
    boolean noNextView=event.viewAfterChangingView == null;
    View viewAfterChangingView=noNextView ? mHostLayout.getLastChildNotGone() : event.viewAfterChangingView;
    int nextIndex=finalState.getViewStateForView(viewAfterChangingView).notGoneIndex;
    if (ownIndex >= nextIndex) {
      ownIndex++;
    }
    int difference=Math.abs(ownIndex - nextIndex);
    difference=Math.max(0,Math.min(DELAY_EFFECT_MAX_INDEX_DIFFERENCE,difference - 1));
    long delay=difference * delayPerElement;
    minDelay=Math.max(delay,minDelay);
    break;
  }
default :
break;
}
}
return minDelay;
}
