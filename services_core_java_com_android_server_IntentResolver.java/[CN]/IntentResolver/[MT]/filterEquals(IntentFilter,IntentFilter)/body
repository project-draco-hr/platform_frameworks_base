{
  int s1=f1.countActions();
  int s2=f2.countActions();
  if (s1 != s2) {
    return false;
  }
  for (int i=0; i < s1; i++) {
    if (!f2.hasAction(f1.getAction(i))) {
      return false;
    }
  }
  s1=f1.countCategories();
  s2=f2.countCategories();
  if (s1 != s2) {
    return false;
  }
  for (int i=0; i < s1; i++) {
    if (!f2.hasCategory(f1.getCategory(i))) {
      return false;
    }
  }
  s1=f1.countDataTypes();
  s2=f2.countDataTypes();
  if (s1 != s2) {
    return false;
  }
  for (int i=0; i < s1; i++) {
    if (!f2.hasExactDataType(f1.getDataType(i))) {
      return false;
    }
  }
  s1=f1.countDataSchemes();
  s2=f2.countDataSchemes();
  if (s1 != s2) {
    return false;
  }
  for (int i=0; i < s1; i++) {
    if (!f2.hasDataScheme(f1.getDataScheme(i))) {
      return false;
    }
  }
  s1=f1.countDataAuthorities();
  s2=f2.countDataAuthorities();
  if (s1 != s2) {
    return false;
  }
  for (int i=0; i < s1; i++) {
    if (!f2.hasDataAuthority(f1.getDataAuthority(i))) {
      return false;
    }
  }
  s1=f1.countDataPaths();
  s2=f2.countDataPaths();
  if (s1 != s2) {
    return false;
  }
  for (int i=0; i < s1; i++) {
    if (!f2.hasDataPath(f1.getDataPath(i))) {
      return false;
    }
  }
  s1=f1.countDataSchemeSpecificParts();
  s2=f2.countDataSchemeSpecificParts();
  if (s1 != s2) {
    return false;
  }
  for (int i=0; i < s1; i++) {
    if (!f2.hasDataSchemeSpecificPart(f1.getDataSchemeSpecificPart(i))) {
      return false;
    }
  }
  return true;
}
