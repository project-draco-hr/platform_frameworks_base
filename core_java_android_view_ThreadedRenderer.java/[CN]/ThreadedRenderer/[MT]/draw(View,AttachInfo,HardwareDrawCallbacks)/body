{
  attachInfo.mIgnoreDirtyState=true;
  final Choreographer choreographer=attachInfo.mViewRootImpl.mChoreographer;
  choreographer.mFrameInfo.markDrawStart();
  updateRootDisplayList(view,callbacks);
  if (!mCurrentContentBounds.equals(mStagedContentBounds)) {
    mCurrentContentBounds.set(mStagedContentBounds);
    nSetContentOverdrawProtectionBounds(mNativeProxy,mCurrentContentBounds.left,mCurrentContentBounds.top,mCurrentContentBounds.right,mCurrentContentBounds.bottom);
  }
  attachInfo.mIgnoreDirtyState=false;
  if (attachInfo.mPendingAnimatingRenderNodes != null) {
    final int count=attachInfo.mPendingAnimatingRenderNodes.size();
    for (int i=0; i < count; i++) {
      registerAnimatingRenderNode(attachInfo.mPendingAnimatingRenderNodes.get(i));
    }
    attachInfo.mPendingAnimatingRenderNodes.clear();
    attachInfo.mPendingAnimatingRenderNodes=null;
  }
  final long[] frameInfo=choreographer.mFrameInfo.mFrameInfo;
  int syncResult=nSyncAndDrawFrame(mNativeProxy,frameInfo,frameInfo.length);
  if ((syncResult & SYNC_LOST_SURFACE_REWARD_IF_FOUND) != 0) {
    setEnabled(false);
    attachInfo.mViewRootImpl.mSurface.release();
    attachInfo.mViewRootImpl.invalidate();
  }
  if ((syncResult & SYNC_INVALIDATE_REQUIRED) != 0) {
    attachInfo.mViewRootImpl.invalidate();
  }
}
