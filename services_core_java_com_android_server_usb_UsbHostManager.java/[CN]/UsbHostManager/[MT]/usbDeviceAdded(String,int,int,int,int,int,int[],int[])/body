{
  if (isBlackListed(deviceName) || isBlackListed(deviceClass,deviceSubclass,deviceProtocol)) {
    return;
  }
synchronized (mLock) {
    if (mDevices.get(deviceName) != null) {
      Slog.w(TAG,"device already on mDevices list: " + deviceName);
      return;
    }
    int numInterfaces=interfaceValues.length / 5;
    Parcelable[] interfaces=new UsbInterface[numInterfaces];
    try {
      int intf, endp, ival=0, eval=0;
      for (intf=0; intf < numInterfaces; intf++) {
        int interfaceId=interfaceValues[ival++];
        int interfaceClass=interfaceValues[ival++];
        int interfaceSubclass=interfaceValues[ival++];
        int interfaceProtocol=interfaceValues[ival++];
        int numEndpoints=interfaceValues[ival++];
        Parcelable[] endpoints=new UsbEndpoint[numEndpoints];
        for (endp=0; endp < numEndpoints; endp++) {
          int address=endpointValues[eval++];
          int attributes=endpointValues[eval++];
          int maxPacketSize=endpointValues[eval++];
          int interval=endpointValues[eval++];
          endpoints[endp]=new UsbEndpoint(address,attributes,maxPacketSize,interval);
        }
        if (isBlackListed(interfaceClass,interfaceSubclass,interfaceProtocol)) {
          return;
        }
        interfaces[intf]=new UsbInterface(interfaceId,interfaceClass,interfaceSubclass,interfaceProtocol,endpoints);
      }
    }
 catch (    Exception e) {
      Slog.e(TAG,"error parsing USB descriptors",e);
      return;
    }
    UsbDevice device=new UsbDevice(deviceName,vendorID,productID,deviceClass,deviceSubclass,deviceProtocol,interfaces);
    mDevices.put(deviceName,device);
    getCurrentSettings().deviceAttached(device);
  }
}
