{
  int flags=0;
  KeyProtection spec;
  if (param == null) {
    spec=getLegacyKeyProtectionParameter(key);
  }
 else   if (param instanceof KeyStoreParameter) {
    spec=getLegacyKeyProtectionParameter(key);
    KeyStoreParameter legacySpec=(KeyStoreParameter)param;
    if (legacySpec.isEncryptionRequired()) {
      flags=KeyStore.FLAG_ENCRYPTED;
    }
  }
 else   if (param instanceof KeyProtection) {
    spec=(KeyProtection)param;
  }
 else {
    throw new KeyStoreException("Unsupported protection parameter class:" + param.getClass().getName() + ". Supported: "+ KeyProtection.class.getName()+ ", "+ KeyStoreParameter.class.getName());
  }
  if ((chain == null) || (chain.length == 0)) {
    throw new KeyStoreException("Must supply at least one Certificate with PrivateKey");
  }
  X509Certificate[] x509chain=new X509Certificate[chain.length];
  for (int i=0; i < chain.length; i++) {
    if (!"X.509".equals(chain[i].getType())) {
      throw new KeyStoreException("Certificates must be in X.509 format: invalid cert #" + i);
    }
    if (!(chain[i] instanceof X509Certificate)) {
      throw new KeyStoreException("Certificates must be in X.509 format: invalid cert #" + i);
    }
    x509chain[i]=(X509Certificate)chain[i];
  }
  final byte[] userCertBytes;
  try {
    userCertBytes=x509chain[0].getEncoded();
  }
 catch (  CertificateEncodingException e) {
    throw new KeyStoreException("Failed to encode certificate #0",e);
  }
  final byte[] chainBytes;
  if (chain.length > 1) {
    final byte[][] certsBytes=new byte[x509chain.length - 1][];
    int totalCertLength=0;
    for (int i=0; i < certsBytes.length; i++) {
      try {
        certsBytes[i]=x509chain[i + 1].getEncoded();
        totalCertLength+=certsBytes[i].length;
      }
 catch (      CertificateEncodingException e) {
        throw new KeyStoreException("Failed to encode certificate #" + i,e);
      }
    }
    chainBytes=new byte[totalCertLength];
    int outputOffset=0;
    for (int i=0; i < certsBytes.length; i++) {
      final int certLength=certsBytes[i].length;
      System.arraycopy(certsBytes[i],0,chainBytes,outputOffset,certLength);
      outputOffset+=certLength;
      certsBytes[i]=null;
    }
  }
 else {
    chainBytes=null;
  }
  final String pkeyAlias;
  if (key instanceof AndroidKeyStorePrivateKey) {
    pkeyAlias=((AndroidKeyStoreKey)key).getAlias();
  }
 else {
    pkeyAlias=null;
  }
  byte[] pkcs8EncodedPrivateKeyBytes;
  KeymasterArguments importArgs;
  final boolean shouldReplacePrivateKey;
  if (pkeyAlias != null && pkeyAlias.startsWith(Credentials.USER_PRIVATE_KEY)) {
    final String keySubalias=pkeyAlias.substring(Credentials.USER_PRIVATE_KEY.length());
    if (!alias.equals(keySubalias)) {
      throw new KeyStoreException("Can only replace keys with same alias: " + alias + " != "+ keySubalias);
    }
    shouldReplacePrivateKey=false;
    importArgs=null;
    pkcs8EncodedPrivateKeyBytes=null;
  }
 else {
    shouldReplacePrivateKey=true;
    final String keyFormat=key.getFormat();
    if ((keyFormat == null) || (!"PKCS#8".equals(keyFormat))) {
      throw new KeyStoreException("Unsupported private key export format: " + keyFormat + ". Only private keys which export their key material in PKCS#8 format are"+ " supported.");
    }
    pkcs8EncodedPrivateKeyBytes=key.getEncoded();
    if (pkcs8EncodedPrivateKeyBytes == null) {
      throw new KeyStoreException("Private key did not export any key material");
    }
    importArgs=new KeymasterArguments();
    try {
      importArgs.addInt(KeymasterDefs.KM_TAG_ALGORITHM,KeyProperties.KeyAlgorithm.toKeymasterAsymmetricKeyAlgorithm(key.getAlgorithm()));
      @KeyProperties.PurposeEnum int purposes=spec.getPurposes();
      importArgs.addInts(KeymasterDefs.KM_TAG_PURPOSE,KeyProperties.Purpose.allToKeymaster(purposes));
      if (spec.isDigestsSpecified()) {
        importArgs.addInts(KeymasterDefs.KM_TAG_DIGEST,KeyProperties.Digest.allToKeymaster(spec.getDigests()));
      }
      importArgs.addInts(KeymasterDefs.KM_TAG_BLOCK_MODE,KeyProperties.BlockMode.allToKeymaster(spec.getBlockModes()));
      int[] keymasterEncryptionPaddings=KeyProperties.EncryptionPadding.allToKeymaster(spec.getEncryptionPaddings());
      if (((purposes & KeyProperties.PURPOSE_ENCRYPT) != 0) && (spec.isRandomizedEncryptionRequired())) {
        for (        int keymasterPadding : keymasterEncryptionPaddings) {
          if (!KeymasterUtils.isKeymasterPaddingSchemeIndCpaCompatibleWithAsymmetricCrypto(keymasterPadding)) {
            throw new KeyStoreException("Randomized encryption (IND-CPA) required but is violated by" + " encryption padding mode: " + KeyProperties.EncryptionPadding.fromKeymaster(keymasterPadding) + ". See KeyProtection documentation.");
          }
        }
      }
      importArgs.addInts(KeymasterDefs.KM_TAG_PADDING,keymasterEncryptionPaddings);
      importArgs.addInts(KeymasterDefs.KM_TAG_PADDING,KeyProperties.SignaturePadding.allToKeymaster(spec.getSignaturePaddings()));
      KeymasterUtils.addUserAuthArgs(importArgs,spec.isUserAuthenticationRequired(),spec.getUserAuthenticationValidityDurationSeconds());
      importArgs.addDate(KeymasterDefs.KM_TAG_ACTIVE_DATETIME,(spec.getKeyValidityStart() != null) ? spec.getKeyValidityStart() : new Date(0));
      importArgs.addDate(KeymasterDefs.KM_TAG_ORIGINATION_EXPIRE_DATETIME,(spec.getKeyValidityForOriginationEnd() != null) ? spec.getKeyValidityForOriginationEnd() : new Date(Long.MAX_VALUE));
      importArgs.addDate(KeymasterDefs.KM_TAG_USAGE_EXPIRE_DATETIME,(spec.getKeyValidityForConsumptionEnd() != null) ? spec.getKeyValidityForConsumptionEnd() : new Date(Long.MAX_VALUE));
    }
 catch (    IllegalArgumentException e) {
      throw new KeyStoreException("Invalid parameter",e);
    }
  }
  boolean success=false;
  try {
    if (shouldReplacePrivateKey) {
      Credentials.deleteAllTypesForAlias(mKeyStore,alias);
      KeyCharacteristics resultingKeyCharacteristics=new KeyCharacteristics();
      int errorCode=mKeyStore.importKey(Credentials.USER_PRIVATE_KEY + alias,importArgs,KeymasterDefs.KM_KEY_FORMAT_PKCS8,pkcs8EncodedPrivateKeyBytes,flags,resultingKeyCharacteristics);
      if (errorCode != KeyStore.NO_ERROR) {
        throw new KeyStoreException("Failed to store private key",KeyStore.getKeyStoreException(errorCode));
      }
    }
 else {
      Credentials.deleteCertificateTypesForAlias(mKeyStore,alias);
      Credentials.deleteSecretKeyTypeForAlias(mKeyStore,alias);
    }
    int errorCode=mKeyStore.insert(Credentials.USER_CERTIFICATE + alias,userCertBytes,KeyStore.UID_SELF,flags);
    if (errorCode != KeyStore.NO_ERROR) {
      throw new KeyStoreException("Failed to store certificate #0",KeyStore.getKeyStoreException(errorCode));
    }
    errorCode=mKeyStore.insert(Credentials.CA_CERTIFICATE + alias,chainBytes,KeyStore.UID_SELF,flags);
    if (errorCode != KeyStore.NO_ERROR) {
      throw new KeyStoreException("Failed to store certificate chain",KeyStore.getKeyStoreException(errorCode));
    }
    success=true;
  }
  finally {
    if (!success) {
      if (shouldReplacePrivateKey) {
        Credentials.deleteAllTypesForAlias(mKeyStore,alias);
      }
 else {
        Credentials.deleteCertificateTypesForAlias(mKeyStore,alias);
        Credentials.deleteSecretKeyTypeForAlias(mKeyStore,alias);
      }
    }
  }
}
