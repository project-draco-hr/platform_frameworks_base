{
  String keyAlgorithm=key.getAlgorithm();
  KeyProtection.Builder specBuilder;
  if (KeyProperties.KEY_ALGORITHM_EC.equalsIgnoreCase(keyAlgorithm)) {
    specBuilder=new KeyProtection.Builder(KeyProperties.PURPOSE_SIGN | KeyProperties.PURPOSE_VERIFY);
    specBuilder.setDigests(KeyProperties.DIGEST_NONE);
  }
 else   if (KeyProperties.KEY_ALGORITHM_RSA.equalsIgnoreCase(keyAlgorithm)) {
    specBuilder=new KeyProtection.Builder(KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT | KeyProperties.PURPOSE_SIGN| KeyProperties.PURPOSE_VERIFY);
    specBuilder.setDigests(KeyProperties.DIGEST_NONE);
    specBuilder.setSignaturePaddings(KeyProperties.SIGNATURE_PADDING_RSA_PKCS1);
    specBuilder.setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_NONE);
    specBuilder.setRandomizedEncryptionRequired(false);
  }
 else {
    throw new KeyStoreException("Unsupported key algorithm: " + keyAlgorithm);
  }
  specBuilder.setUserAuthenticationRequired(false);
  return specBuilder.build();
}
