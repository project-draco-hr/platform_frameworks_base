{
  if ((param != null) && (!(param instanceof KeyProtection))) {
    throw new KeyStoreException("Unsupported protection parameter class: " + param.getClass().getName() + ". Supported: "+ KeyProtection.class.getName());
  }
  KeyProtection params=(KeyProtection)param;
  if (key instanceof AndroidKeyStoreSecretKey) {
    String keyAliasInKeystore=((AndroidKeyStoreSecretKey)key).getAlias();
    if (keyAliasInKeystore == null) {
      throw new KeyStoreException("KeyStore-backed secret key does not have an alias");
    }
    if (!keyAliasInKeystore.startsWith(Credentials.USER_SECRET_KEY)) {
      throw new KeyStoreException("KeyStore-backed secret key has invalid alias: " + keyAliasInKeystore);
    }
    String keyEntryAlias=keyAliasInKeystore.substring(Credentials.USER_SECRET_KEY.length());
    if (!entryAlias.equals(keyEntryAlias)) {
      throw new KeyStoreException("Can only replace KeyStore-backed keys with same" + " alias: " + entryAlias + " != "+ keyEntryAlias);
    }
    if (params != null) {
      throw new KeyStoreException("Modifying KeyStore-backed key using protection" + " parameters not supported");
    }
    return;
  }
  if (params == null) {
    throw new KeyStoreException("Protection parameters must be specified when importing a symmetric key");
  }
  String keyExportFormat=key.getFormat();
  if (keyExportFormat == null) {
    throw new KeyStoreException("Only secret keys that export their key material are supported");
  }
 else   if (!"RAW".equals(keyExportFormat)) {
    throw new KeyStoreException("Unsupported secret key material export format: " + keyExportFormat);
  }
  byte[] keyMaterial=key.getEncoded();
  if (keyMaterial == null) {
    throw new KeyStoreException("Key did not export its key material despite supporting" + " RAW format export");
  }
  KeymasterArguments args=new KeymasterArguments();
  try {
    int keymasterAlgorithm=KeyProperties.KeyAlgorithm.toKeymasterSecretKeyAlgorithm(key.getAlgorithm());
    args.addEnum(KeymasterDefs.KM_TAG_ALGORITHM,keymasterAlgorithm);
    int[] keymasterDigests;
    if (keymasterAlgorithm == KeymasterDefs.KM_ALGORITHM_HMAC) {
      int keymasterImpliedDigest=KeyProperties.KeyAlgorithm.toKeymasterDigest(key.getAlgorithm());
      if (keymasterImpliedDigest == -1) {
        throw new ProviderException("HMAC key algorithm digest unknown for key algorithm " + key.getAlgorithm());
      }
      keymasterDigests=new int[]{keymasterImpliedDigest};
      if (params.isDigestsSpecified()) {
        int[] keymasterDigestsFromParams=KeyProperties.Digest.allToKeymaster(params.getDigests());
        if ((keymasterDigestsFromParams.length != 1) || (keymasterDigestsFromParams[0] != keymasterImpliedDigest)) {
          throw new KeyStoreException("Unsupported digests specification: " + Arrays.asList(params.getDigests()) + ". Only "+ KeyProperties.Digest.fromKeymaster(keymasterImpliedDigest)+ " supported for HMAC key algorithm "+ key.getAlgorithm());
        }
      }
    }
 else {
      if (params.isDigestsSpecified()) {
        keymasterDigests=KeyProperties.Digest.allToKeymaster(params.getDigests());
      }
 else {
        keymasterDigests=EmptyArray.INT;
      }
    }
    args.addEnums(KeymasterDefs.KM_TAG_DIGEST,keymasterDigests);
    @KeyProperties.PurposeEnum int purposes=params.getPurposes();
    int[] keymasterBlockModes=KeyProperties.BlockMode.allToKeymaster(params.getBlockModes());
    if (((purposes & KeyProperties.PURPOSE_ENCRYPT) != 0) && (params.isRandomizedEncryptionRequired())) {
      for (      int keymasterBlockMode : keymasterBlockModes) {
        if (!KeymasterUtils.isKeymasterBlockModeIndCpaCompatibleWithSymmetricCrypto(keymasterBlockMode)) {
          throw new KeyStoreException("Randomized encryption (IND-CPA) required but may be violated by" + " block mode: " + KeyProperties.BlockMode.fromKeymaster(keymasterBlockMode) + ". See KeyProtection documentation.");
        }
      }
    }
    args.addEnums(KeymasterDefs.KM_TAG_PURPOSE,KeyProperties.Purpose.allToKeymaster(purposes));
    args.addEnums(KeymasterDefs.KM_TAG_BLOCK_MODE,keymasterBlockModes);
    if (params.getSignaturePaddings().length > 0) {
      throw new KeyStoreException("Signature paddings not supported for symmetric keys");
    }
    int[] keymasterPaddings=KeyProperties.EncryptionPadding.allToKeymaster(params.getEncryptionPaddings());
    args.addEnums(KeymasterDefs.KM_TAG_PADDING,keymasterPaddings);
    KeymasterUtils.addUserAuthArgs(args,params.isUserAuthenticationRequired(),params.getUserAuthenticationValidityDurationSeconds());
    args.addDateIfNotNull(KeymasterDefs.KM_TAG_ACTIVE_DATETIME,params.getKeyValidityStart());
    args.addDateIfNotNull(KeymasterDefs.KM_TAG_ORIGINATION_EXPIRE_DATETIME,params.getKeyValidityForOriginationEnd());
    args.addDateIfNotNull(KeymasterDefs.KM_TAG_USAGE_EXPIRE_DATETIME,params.getKeyValidityForConsumptionEnd());
    if (((purposes & KeyProperties.PURPOSE_ENCRYPT) != 0) && (!params.isRandomizedEncryptionRequired())) {
      args.addBoolean(KeymasterDefs.KM_TAG_CALLER_NONCE);
    }
  }
 catch (  IllegalArgumentException|IllegalStateException e) {
    throw new KeyStoreException(e);
  }
  Credentials.deleteAllTypesForAlias(mKeyStore,entryAlias);
  String keyAliasInKeystore=Credentials.USER_SECRET_KEY + entryAlias;
  int errorCode=mKeyStore.importKey(keyAliasInKeystore,args,KeymasterDefs.KM_KEY_FORMAT_RAW,keyMaterial,0,new KeyCharacteristics());
  if (errorCode != KeyStore.NO_ERROR) {
    throw new KeyStoreException("Failed to import secret key. Keystore error code: " + errorCode);
  }
}
