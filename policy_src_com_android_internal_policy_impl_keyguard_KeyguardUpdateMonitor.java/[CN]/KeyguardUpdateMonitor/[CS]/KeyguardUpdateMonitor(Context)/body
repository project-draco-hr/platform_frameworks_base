{
  mContext=context;
  mDeviceProvisioned=Settings.Global.getInt(mContext.getContentResolver(),Settings.Global.DEVICE_PROVISIONED,0) != 0;
  if (!mDeviceProvisioned) {
    watchForDeviceProvisioning();
  }
  mSimState=IccCardConstants.State.NOT_READY;
  mBatteryStatus=new BatteryStatus(BATTERY_STATUS_UNKNOWN,100,0,0);
  mTelephonyPlmn=getDefaultPlmn();
  final IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_TIME_TICK);
  filter.addAction(Intent.ACTION_TIME_CHANGED);
  filter.addAction(Intent.ACTION_BATTERY_CHANGED);
  filter.addAction(Intent.ACTION_TIMEZONE_CHANGED);
  filter.addAction(TelephonyIntents.ACTION_SIM_STATE_CHANGED);
  filter.addAction(TelephonyManager.ACTION_PHONE_STATE_CHANGED);
  filter.addAction(TelephonyIntents.SPN_STRINGS_UPDATED_ACTION);
  filter.addAction(AudioManager.RINGER_MODE_CHANGED_ACTION);
  filter.addAction(DevicePolicyManager.ACTION_DEVICE_POLICY_MANAGER_STATE_CHANGED);
  filter.addAction(Intent.ACTION_USER_REMOVED);
  context.registerReceiver(mBroadcastReceiver,filter);
  try {
    ActivityManagerNative.getDefault().registerUserSwitchObserver(new IUserSwitchObserver.Stub(){
      @Override public void onUserSwitching(      int newUserId,      IRemoteCallback reply){
        mHandler.sendMessage(mHandler.obtainMessage(MSG_USER_SWITCHED,newUserId,0,reply));
      }
      @Override public void onUserSwitchComplete(      int newUserId) throws RemoteException {
      }
    }
);
  }
 catch (  RemoteException e) {
    e.printStackTrace();
  }
}
