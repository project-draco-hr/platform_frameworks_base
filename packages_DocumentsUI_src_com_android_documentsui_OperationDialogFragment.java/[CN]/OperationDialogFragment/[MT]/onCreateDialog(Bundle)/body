{
  super.onCreate(inState);
  final @DialogType int dialogType=getArguments().getInt(FileOperationService.EXTRA_DIALOG_TYPE);
  final @OpType int operationType=getArguments().getInt(FileOperationService.EXTRA_OPERATION);
  final ArrayList<DocumentInfo> srcList=getArguments().getParcelableArrayList(FileOperationService.EXTRA_SRC_LIST);
  final AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  String messageFormat;
switch (dialogType) {
case DIALOG_TYPE_CONVERTED:
    messageFormat=getString(R.string.copy_converted_warning_content);
  break;
case DIALOG_TYPE_FAILURE:
switch (operationType) {
case FileOperationService.OPERATION_COPY:
  messageFormat=getString(R.string.copy_failure_alert_content);
break;
case FileOperationService.OPERATION_MOVE:
messageFormat=getString(R.string.move_failure_alert_content);
break;
default :
throw new UnsupportedOperationException();
}
break;
default :
throw new UnsupportedOperationException();
}
final StringBuilder list=new StringBuilder("<p>");
for (DocumentInfo documentInfo : srcList) {
list.append(String.format("&#8226; %s<br>",documentInfo.displayName));
}
list.append("</p>");
builder.setMessage(Html.fromHtml(String.format(messageFormat,list.toString())));
builder.setPositiveButton(R.string.close,new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int id){
dialog.dismiss();
}
}
);
return builder.create();
}
