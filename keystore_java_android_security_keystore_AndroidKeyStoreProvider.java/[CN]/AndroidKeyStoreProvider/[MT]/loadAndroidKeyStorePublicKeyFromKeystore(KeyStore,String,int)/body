{
  KeyCharacteristics keyCharacteristics=new KeyCharacteristics();
  int errorCode=keyStore.getKeyCharacteristics(privateKeyAlias,null,null,uid,keyCharacteristics);
  if (errorCode != KeyStore.NO_ERROR) {
    throw (UnrecoverableKeyException)new UnrecoverableKeyException("Failed to obtain information about private key").initCause(KeyStore.getKeyStoreException(errorCode));
  }
  ExportResult exportResult=keyStore.exportKey(privateKeyAlias,KeymasterDefs.KM_KEY_FORMAT_X509,null,null,uid);
  if (exportResult.resultCode != KeyStore.NO_ERROR) {
    throw (UnrecoverableKeyException)new UnrecoverableKeyException("Failed to obtain X.509 form of public key").initCause(KeyStore.getKeyStoreException(errorCode));
  }
  final byte[] x509EncodedPublicKey=exportResult.exportData;
  Integer keymasterAlgorithm=keyCharacteristics.getEnum(KeymasterDefs.KM_TAG_ALGORITHM);
  if (keymasterAlgorithm == null) {
    throw new UnrecoverableKeyException("Key algorithm unknown");
  }
  String jcaKeyAlgorithm;
  try {
    jcaKeyAlgorithm=KeyProperties.KeyAlgorithm.fromKeymasterAsymmetricKeyAlgorithm(keymasterAlgorithm);
  }
 catch (  IllegalArgumentException e) {
    throw (UnrecoverableKeyException)new UnrecoverableKeyException("Failed to load private key").initCause(e);
  }
  return AndroidKeyStoreProvider.getAndroidKeyStorePublicKey(privateKeyAlias,uid,jcaKeyAlgorithm,x509EncodedPublicKey);
}
