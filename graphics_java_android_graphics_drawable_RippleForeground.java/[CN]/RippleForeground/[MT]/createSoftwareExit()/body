{
  final int radiusDuration;
  final int originDuration;
  final int opacityDuration;
  if (mIsBounded) {
    computeBoundedTargetValues();
    radiusDuration=BOUNDED_RADIUS_EXIT_DURATION;
    originDuration=BOUNDED_ORIGIN_EXIT_DURATION;
    opacityDuration=BOUNDED_OPACITY_EXIT_DURATION;
  }
 else {
    radiusDuration=getRadiusExitDuration();
    originDuration=radiusDuration;
    opacityDuration=getOpacityExitDuration();
  }
  final ObjectAnimator tweenRadius=ObjectAnimator.ofFloat(this,TWEEN_RADIUS,1);
  tweenRadius.setAutoCancel(true);
  tweenRadius.setDuration(radiusDuration);
  tweenRadius.setInterpolator(DECELERATE_INTERPOLATOR);
  final ObjectAnimator tweenOrigin=ObjectAnimator.ofFloat(this,TWEEN_ORIGIN,1);
  tweenOrigin.setAutoCancel(true);
  tweenOrigin.setDuration(originDuration);
  tweenOrigin.setInterpolator(DECELERATE_INTERPOLATOR);
  final ObjectAnimator opacity=ObjectAnimator.ofFloat(this,OPACITY,0);
  opacity.setAutoCancel(true);
  opacity.setDuration(opacityDuration);
  opacity.setInterpolator(LINEAR_INTERPOLATOR);
  final AnimatorSet set=new AnimatorSet();
  set.play(tweenOrigin).with(tweenRadius).with(opacity);
  set.addListener(mAnimationListener);
  return set;
}
