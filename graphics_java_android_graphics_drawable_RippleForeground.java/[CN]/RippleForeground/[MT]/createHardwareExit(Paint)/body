{
  final int radiusDuration;
  final int originDuration;
  final int opacityDuration;
  if (mIsBounded) {
    computeBoundedTargetValues();
    radiusDuration=BOUNDED_RADIUS_EXIT_DURATION;
    originDuration=BOUNDED_ORIGIN_EXIT_DURATION;
    opacityDuration=BOUNDED_OPACITY_EXIT_DURATION;
  }
 else {
    radiusDuration=getRadiusExitDuration();
    originDuration=radiusDuration;
    opacityDuration=getOpacityExitDuration();
  }
  final float startX=getCurrentX();
  final float startY=getCurrentY();
  final float startRadius=getCurrentRadius();
  p.setAlpha((int)(p.getAlpha() * mOpacity + 0.5f));
  mPropPaint=CanvasProperty.createPaint(p);
  mPropRadius=CanvasProperty.createFloat(startRadius);
  mPropX=CanvasProperty.createFloat(startX);
  mPropY=CanvasProperty.createFloat(startY);
  final RenderNodeAnimator radius=new RenderNodeAnimator(mPropRadius,mTargetRadius);
  radius.setDuration(radiusDuration);
  radius.setInterpolator(DECELERATE_INTERPOLATOR);
  final RenderNodeAnimator x=new RenderNodeAnimator(mPropX,mTargetX);
  x.setDuration(originDuration);
  x.setInterpolator(DECELERATE_INTERPOLATOR);
  final RenderNodeAnimator y=new RenderNodeAnimator(mPropY,mTargetY);
  y.setDuration(originDuration);
  y.setInterpolator(DECELERATE_INTERPOLATOR);
  final RenderNodeAnimator opacity=new RenderNodeAnimator(mPropPaint,RenderNodeAnimator.PAINT_ALPHA,0);
  opacity.setDuration(opacityDuration);
  opacity.setInterpolator(LINEAR_INTERPOLATOR);
  opacity.addListener(mAnimationListener);
  final RenderNodeAnimatorSet set=new RenderNodeAnimatorSet();
  set.add(radius);
  set.add(opacity);
  set.add(x);
  set.add(y);
  return set;
}
