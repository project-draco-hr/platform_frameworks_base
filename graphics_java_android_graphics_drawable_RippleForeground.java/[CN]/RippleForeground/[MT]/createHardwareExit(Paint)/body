{
  final int radiusDuration=getRadiusExitDuration();
  final int opacityDuration=getOpacityExitDuration();
  final float startX=MathUtils.lerp(mClampedStartingX - mBounds.exactCenterX(),mOuterX,mTweenX);
  final float startY=MathUtils.lerp(mClampedStartingY - mBounds.exactCenterY(),mOuterY,mTweenY);
  final float startRadius=MathUtils.lerp(0,mTargetRadius,mTweenRadius);
  p.setAlpha((int)(p.getAlpha() * mOpacity + 0.5f));
  mPropPaint=CanvasProperty.createPaint(p);
  mPropRadius=CanvasProperty.createFloat(startRadius);
  mPropX=CanvasProperty.createFloat(startX);
  mPropY=CanvasProperty.createFloat(startY);
  final RenderNodeAnimator radius=new RenderNodeAnimator(mPropRadius,mTargetRadius);
  radius.setDuration(radiusDuration);
  radius.setInterpolator(DECELERATE_INTERPOLATOR);
  final RenderNodeAnimator x=new RenderNodeAnimator(mPropX,mOuterX);
  x.setDuration(radiusDuration);
  x.setInterpolator(DECELERATE_INTERPOLATOR);
  final RenderNodeAnimator y=new RenderNodeAnimator(mPropY,mOuterY);
  y.setDuration(radiusDuration);
  y.setInterpolator(DECELERATE_INTERPOLATOR);
  final RenderNodeAnimator opacity=new RenderNodeAnimator(mPropPaint,RenderNodeAnimator.PAINT_ALPHA,0);
  opacity.setDuration(opacityDuration);
  opacity.setInterpolator(LINEAR_INTERPOLATOR);
  opacity.addListener(mAnimationListener);
  final RenderNodeAnimatorSet set=new RenderNodeAnimatorSet();
  set.add(radius);
  set.add(opacity);
  set.add(x);
  set.add(y);
  return set;
}
