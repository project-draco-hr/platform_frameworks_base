{
  HashMap<ControlledHash,Integer> hashMap=new HashMap<ControlledHash,Integer>();
  ArrayMap<ControlledHash,Integer> arrayMap=new ArrayMap<ControlledHash,Integer>();
  HashSet<ControlledHash> hashSet=new HashSet<ControlledHash>();
  ArraySet<ControlledHash> arraySet=new ArraySet<ControlledHash>();
  for (int i=0; i < OPS.length; i++) {
    Integer oldHash;
    Integer oldArray;
    boolean hashChanged;
    boolean arrayChanged;
switch (OPS[i]) {
case OP_ADD:
      Log.i("test","Adding key: " + KEYS[i]);
    oldHash=hashMap.put(new ControlledHash(KEYS[i]),i);
  oldArray=arrayMap.put(new ControlledHash(KEYS[i]),i);
hashChanged=hashSet.add(new ControlledHash(KEYS[i]));
arrayChanged=arraySet.add(new ControlledHash(KEYS[i]));
break;
case OP_REM:
Log.i("test","Removing key: " + KEYS[i]);
oldHash=hashMap.remove(new ControlledHash(KEYS[i]));
oldArray=arrayMap.remove(new ControlledHash(KEYS[i]));
hashChanged=hashSet.remove(new ControlledHash(KEYS[i]));
arrayChanged=arraySet.remove(new ControlledHash(KEYS[i]));
break;
default :
Log.e("test","Bad operation " + OPS[i] + " @ "+ i);
return;
}
if (!compare(oldHash,oldArray)) {
Log.e("test","Bad result: expected " + oldHash + ", got "+ oldArray);
dump(hashMap,arrayMap);
return;
}
if (hashChanged != arrayChanged) {
Log.e("test","Bad change: expected " + hashChanged + ", got "+ arrayChanged);
dump(hashSet,arraySet);
return;
}
if (!validateArrayMap(arrayMap)) {
dump(hashMap,arrayMap);
return;
}
if (!compareMaps(hashMap,arrayMap)) {
dump(hashMap,arrayMap);
return;
}
if (!compareSets(hashSet,arraySet)) {
dump(hashSet,arraySet);
return;
}
}
arrayMap.put(new ControlledHash(50000),100);
ControlledHash lookup=new ControlledHash(50000);
Iterator<ControlledHash> it=arrayMap.keySet().iterator();
while (it.hasNext()) {
if (it.next().equals(lookup)) {
it.remove();
}
}
if (arrayMap.containsKey(lookup)) {
Log.e("test","Bad map iterator: didn't remove test key");
dump(hashMap,arrayMap);
}
arraySet.add(new ControlledHash(50000));
it=arraySet.iterator();
while (it.hasNext()) {
if (it.next().equals(lookup)) {
it.remove();
}
}
if (arraySet.contains(lookup)) {
Log.e("test","Bad set iterator: didn't remove test key");
dump(hashSet,arraySet);
}
if (!equalsMapTest()) {
return;
}
if (!equalsSetTest()) {
return;
}
ArrayMap newMap=new ArrayMap<Integer,String>();
for (int i=0; i < 10; ++i) {
newMap.put(i,String.valueOf(i));
}
ArrayMap mapCopy=new ArrayMap(newMap);
if (!compare(mapCopy,newMap)) {
Log.e("test","ArrayMap copy constructor failure: expected " + newMap + ", got "+ mapCopy);
dump(newMap,mapCopy);
return;
}
ArraySet newSet=new ArraySet<Integer>();
for (int i=0; i < 10; ++i) {
newSet.add(i);
}
ArraySet setCopy=new ArraySet(newSet);
if (!compare(setCopy,newSet)) {
Log.e("test","ArraySet copy constructor failure: expected " + newSet + ", got "+ setCopy);
dump(newSet,setCopy);
return;
}
Log.e("test","Test successful; printing final map.");
dump(hashMap,arrayMap);
Log.e("test","Test successful; printing final set.");
dump(hashSet,arraySet);
}
