{
  HashMap<ControlledHash,Integer> mHashMap=new HashMap<ControlledHash,Integer>();
  ArrayMap<ControlledHash,Integer> mArrayMap=new ArrayMap<ControlledHash,Integer>();
  for (int i=0; i < OPS.length; i++) {
    Integer oldMap;
    Integer oldArray;
switch (OPS[i]) {
case OP_ADD:
      Log.i("test","Adding key: " + KEYS[i]);
    oldMap=mHashMap.put(new ControlledHash(KEYS[i]),i);
  oldArray=mArrayMap.put(new ControlledHash(KEYS[i]),i);
break;
case OP_REM:
Log.i("test","Removing key: " + KEYS[i]);
oldMap=mHashMap.remove(new ControlledHash(KEYS[i]));
oldArray=mArrayMap.remove(new ControlledHash(KEYS[i]));
break;
default :
Log.e("test","Bad operation " + OPS[i] + " @ "+ i);
return;
}
if (!compare(oldMap,oldArray)) {
Log.e("test","Bad result: expected " + oldMap + ", got "+ oldArray);
dump(mHashMap,mArrayMap);
return;
}
if (!validateArrayMap(mArrayMap)) {
dump(mHashMap,mArrayMap);
return;
}
if (!compareMaps(mHashMap,mArrayMap)) {
dump(mHashMap,mArrayMap);
return;
}
}
mArrayMap.put(new ControlledHash(50000),100);
ControlledHash lookup=new ControlledHash(50000);
Iterator<ControlledHash> it=mArrayMap.keySet().iterator();
while (it.hasNext()) {
if (it.next().equals(lookup)) {
it.remove();
}
}
if (mArrayMap.containsKey(lookup)) {
Log.e("test","Bad iterator: didn't remove test key");
dump(mHashMap,mArrayMap);
}
if (!equalsTest()) {
return;
}
ArrayMap newMap=new ArrayMap<Integer,String>();
for (int i=0; i < 10; ++i) {
newMap.put(i,String.valueOf(i));
}
ArrayMap mapCopy=new ArrayMap(newMap);
if (!compare(mapCopy,newMap)) {
Log.e("test","ArrayMap copy constructor failure: expected " + newMap + ", got "+ mapCopy);
dump(mHashMap,mArrayMap);
return;
}
Log.e("test","Test successful; printing final map.");
dump(mHashMap,mArrayMap);
}
