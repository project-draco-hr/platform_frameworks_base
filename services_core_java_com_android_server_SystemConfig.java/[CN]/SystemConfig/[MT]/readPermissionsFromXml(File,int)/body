{
  FileReader permReader=null;
  try {
    permReader=new FileReader(permFile);
  }
 catch (  FileNotFoundException e) {
    Slog.w(TAG,"Couldn't find or open permissions file " + permFile);
    return;
  }
  final boolean lowRam=ActivityManager.isLowRamDeviceStatic();
  try {
    XmlPullParser parser=Xml.newPullParser();
    parser.setInput(permReader);
    int type;
    while ((type=parser.next()) != parser.START_TAG && type != parser.END_DOCUMENT) {
      ;
    }
    if (type != parser.START_TAG) {
      throw new XmlPullParserException("No start tag found");
    }
    if (!parser.getName().equals("permissions") && !parser.getName().equals("config")) {
      throw new XmlPullParserException("Unexpected start tag in " + permFile + ": found "+ parser.getName()+ ", expected 'permissions' or 'config'");
    }
    boolean allowAll=permissionFlag == ALLOW_ALL;
    boolean allowLibs=(permissionFlag & ALLOW_LIBS) != 0;
    boolean allowFeatures=(permissionFlag & ALLOW_FEATURES) != 0;
    boolean allowPermissions=(permissionFlag & ALLOW_PERMISSIONS) != 0;
    boolean allowAppConfigs=(permissionFlag & ALLOW_APP_CONFIGS) != 0;
    while (true) {
      XmlUtils.nextElement(parser);
      if (parser.getEventType() == XmlPullParser.END_DOCUMENT) {
        break;
      }
      String name=parser.getName();
      if ("group".equals(name) && allowAll) {
        String gidStr=parser.getAttributeValue(null,"gid");
        if (gidStr != null) {
          int gid=android.os.Process.getGidForName(gidStr);
          mGlobalGids=appendInt(mGlobalGids,gid);
        }
 else {
          Slog.w(TAG,"<group> without gid in " + permFile + " at "+ parser.getPositionDescription());
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if ("permission".equals(name) && allowPermissions) {
        String perm=parser.getAttributeValue(null,"name");
        if (perm == null) {
          Slog.w(TAG,"<permission> without name in " + permFile + " at "+ parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        perm=perm.intern();
        readPermission(parser,perm);
      }
 else       if ("assign-permission".equals(name) && allowPermissions) {
        String perm=parser.getAttributeValue(null,"name");
        if (perm == null) {
          Slog.w(TAG,"<assign-permission> without name in " + permFile + " at "+ parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        String uidStr=parser.getAttributeValue(null,"uid");
        if (uidStr == null) {
          Slog.w(TAG,"<assign-permission> without uid in " + permFile + " at "+ parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        int uid=Process.getUidForName(uidStr);
        if (uid < 0) {
          Slog.w(TAG,"<assign-permission> with unknown uid \"" + uidStr + "  in "+ permFile+ " at "+ parser.getPositionDescription());
          XmlUtils.skipCurrentTag(parser);
          continue;
        }
        perm=perm.intern();
        ArraySet<String> perms=mSystemPermissions.get(uid);
        if (perms == null) {
          perms=new ArraySet<String>();
          mSystemPermissions.put(uid,perms);
        }
        perms.add(perm);
        XmlUtils.skipCurrentTag(parser);
      }
 else       if ("library".equals(name) && allowLibs) {
        String lname=parser.getAttributeValue(null,"name");
        String lfile=parser.getAttributeValue(null,"file");
        if (lname == null) {
          Slog.w(TAG,"<library> without name in " + permFile + " at "+ parser.getPositionDescription());
        }
 else         if (lfile == null) {
          Slog.w(TAG,"<library> without file in " + permFile + " at "+ parser.getPositionDescription());
        }
 else {
          mSharedLibraries.put(lname,lfile);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if ("feature".equals(name) && allowFeatures) {
        String fname=parser.getAttributeValue(null,"name");
        int fversion=XmlUtils.readIntAttribute(parser,"version",0);
        boolean allowed;
        if (!lowRam) {
          allowed=true;
        }
 else {
          String notLowRam=parser.getAttributeValue(null,"notLowRam");
          allowed=!"true".equals(notLowRam);
        }
        if (fname == null) {
          Slog.w(TAG,"<feature> without name in " + permFile + " at "+ parser.getPositionDescription());
        }
 else         if (allowed) {
          addFeature(fname,fversion);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if ("unavailable-feature".equals(name) && allowFeatures) {
        String fname=parser.getAttributeValue(null,"name");
        if (fname == null) {
          Slog.w(TAG,"<unavailable-feature> without name in " + permFile + " at "+ parser.getPositionDescription());
        }
 else {
          mUnavailableFeatures.add(fname);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if ("allow-in-power-save-except-idle".equals(name) && allowAll) {
        String pkgname=parser.getAttributeValue(null,"package");
        if (pkgname == null) {
          Slog.w(TAG,"<allow-in-power-save-except-idle> without package in " + permFile + " at "+ parser.getPositionDescription());
        }
 else {
          mAllowInPowerSaveExceptIdle.add(pkgname);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if ("allow-in-power-save".equals(name) && allowAll) {
        String pkgname=parser.getAttributeValue(null,"package");
        if (pkgname == null) {
          Slog.w(TAG,"<allow-in-power-save> without package in " + permFile + " at "+ parser.getPositionDescription());
        }
 else {
          mAllowInPowerSave.add(pkgname);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if ("allow-in-data-usage-save".equals(name) && allowAll) {
        String pkgname=parser.getAttributeValue(null,"package");
        if (pkgname == null) {
          Slog.w(TAG,"<allow-in-data-usage-save> without package in " + permFile + " at "+ parser.getPositionDescription());
        }
 else {
          mAllowInDataUsageSave.add(pkgname);
        }
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
 else       if ("app-link".equals(name) && allowAppConfigs) {
        String pkgname=parser.getAttributeValue(null,"package");
        if (pkgname == null) {
          Slog.w(TAG,"<app-link> without package in " + permFile + " at "+ parser.getPositionDescription());
        }
 else {
          mLinkedApps.add(pkgname);
        }
        XmlUtils.skipCurrentTag(parser);
      }
 else       if ("system-user-whitelisted-app".equals(name) && allowAppConfigs) {
        String pkgname=parser.getAttributeValue(null,"package");
        if (pkgname == null) {
          Slog.w(TAG,"<system-user-whitelisted-app> without package in " + permFile + " at "+ parser.getPositionDescription());
        }
 else {
          mSystemUserWhitelistedApps.add(pkgname);
        }
        XmlUtils.skipCurrentTag(parser);
      }
 else       if ("system-user-blacklisted-app".equals(name) && allowAppConfigs) {
        String pkgname=parser.getAttributeValue(null,"package");
        if (pkgname == null) {
          Slog.w(TAG,"<system-user-blacklisted-app without package in " + permFile + " at "+ parser.getPositionDescription());
        }
 else {
          mSystemUserBlacklistedApps.add(pkgname);
        }
        XmlUtils.skipCurrentTag(parser);
      }
 else {
        XmlUtils.skipCurrentTag(parser);
        continue;
      }
    }
  }
 catch (  XmlPullParserException e) {
    Slog.w(TAG,"Got exception parsing permissions.",e);
  }
catch (  IOException e) {
    Slog.w(TAG,"Got exception parsing permissions.",e);
  }
 finally {
    IoUtils.closeQuietly(permReader);
  }
  if (StorageManager.isNativeFileBasedEncryptionEnabled()) {
    addFeature(PackageManager.FEATURE_FILE_BASED_ENCRYPTION,0);
    addFeature(PackageManager.FEATURE_SECURELY_REMOVES_USERS,0);
  }
  for (  String featureName : mUnavailableFeatures) {
    removeFeature(featureName);
  }
}
