{
  if (bounds == null || bounds.contains(mBounds)) {
    return false;
  }
  mTmpRect2.set(mBounds);
  if (mBounds.left < bounds.left || mBounds.right > bounds.right) {
    final int maxRight=bounds.right - (bounds.width() / FIT_WITHIN_BOUNDS_DIVIDER);
    int horizontalDiff=bounds.left - mBounds.left;
    if ((horizontalDiff < 0 && mBounds.left >= maxRight) || (mBounds.left + horizontalDiff >= maxRight)) {
      horizontalDiff=maxRight - mBounds.left;
    }
    mTmpRect2.left+=horizontalDiff;
    mTmpRect2.right+=horizontalDiff;
  }
  if (mBounds.top < bounds.top || mBounds.bottom > bounds.bottom) {
    final int maxBottom=bounds.bottom - (bounds.height() / FIT_WITHIN_BOUNDS_DIVIDER);
    int verticalDiff=bounds.top - mBounds.top;
    if ((verticalDiff < 0 && mBounds.top >= maxBottom) || (mBounds.top + verticalDiff >= maxBottom)) {
      verticalDiff=maxBottom - mBounds.top;
    }
    mTmpRect2.top+=verticalDiff;
    mTmpRect2.bottom+=verticalDiff;
  }
  return setBounds(mTmpRect2);
}
