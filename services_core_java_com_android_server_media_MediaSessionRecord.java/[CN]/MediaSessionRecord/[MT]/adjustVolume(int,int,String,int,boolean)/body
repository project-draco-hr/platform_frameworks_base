{
  int previousFlagPlaySound=flags & AudioManager.FLAG_PLAY_SOUND;
  if (isPlaybackActive(false) || hasFlag(MediaSession.FLAG_EXCLUSIVE_GLOBAL_PRIORITY)) {
    flags&=~AudioManager.FLAG_PLAY_SOUND;
  }
  if (direction > 1) {
    direction=1;
  }
 else   if (direction < -1) {
    direction=-1;
  }
  if (mVolumeType == PlaybackInfo.PLAYBACK_TYPE_LOCAL) {
    if (mUseMasterVolume) {
      mAudioManagerInternal.adjustMasterVolumeForUid(direction,flags,packageName,uid);
      return;
    }
    int stream=AudioAttributes.toLegacyStreamType(mAudioAttrs);
    if (useSuggested) {
      if (AudioSystem.isStreamActive(stream,0)) {
        mAudioManagerInternal.adjustSuggestedStreamVolumeForUid(stream,direction,flags,packageName,uid);
      }
 else {
        flags|=previousFlagPlaySound;
        mAudioManagerInternal.adjustSuggestedStreamVolumeForUid(AudioManager.USE_DEFAULT_STREAM_TYPE,direction,flags,packageName,uid);
      }
    }
 else {
      mAudioManagerInternal.adjustStreamVolumeForUid(stream,direction,flags,packageName,uid);
    }
  }
 else {
    if (mVolumeControlType == VolumeProvider.VOLUME_CONTROL_FIXED) {
      return;
    }
    mSessionCb.adjustVolume(direction);
    int volumeBefore=(mOptimisticVolume < 0 ? mCurrentVolume : mOptimisticVolume);
    mOptimisticVolume=volumeBefore + direction;
    mOptimisticVolume=Math.max(0,Math.min(mOptimisticVolume,mMaxVolume));
    mHandler.removeCallbacks(mClearOptimisticVolumeRunnable);
    mHandler.postDelayed(mClearOptimisticVolumeRunnable,OPTIMISTIC_VOLUME_TIMEOUT);
    if (volumeBefore != mOptimisticVolume) {
      pushVolumeUpdate();
    }
    if (DEBUG) {
      Log.d(TAG,"Adjusted optimistic volume to " + mOptimisticVolume + " max is "+ mMaxVolume);
    }
  }
}
