{
  ServiceRecord r=null;
  if (DEBUG_SERVICE)   Slog.v(TAG_SERVICE,"retrieveServiceLocked: " + service + " type="+ resolvedType+ " callingUid="+ callingUid);
  userId=mAm.mUserController.handleIncomingUser(callingPid,callingUid,userId,false,ActivityManagerService.ALLOW_NON_FULL_IN_PROFILE,"service",null);
  ServiceMap smap=getServiceMap(userId);
  final ComponentName comp=service.getComponent();
  if (comp != null) {
    r=smap.mServicesByName.get(comp);
  }
  if (r == null) {
    Intent.FilterComparison filter=new Intent.FilterComparison(service);
    r=smap.mServicesByIntent.get(filter);
  }
  if (r == null) {
    try {
      ResolveInfo rInfo=AppGlobals.getPackageManager().resolveService(service,resolvedType,ActivityManagerService.STOCK_PM_FLAGS | PackageManager.MATCH_DEBUG_TRIAGED_MISSING,userId);
      ServiceInfo sInfo=rInfo != null ? rInfo.serviceInfo : null;
      if (sInfo == null) {
        Slog.w(TAG_SERVICE,"Unable to start service " + service + " U="+ userId+ ": not found");
        return null;
      }
      ComponentName name=new ComponentName(sInfo.applicationInfo.packageName,sInfo.name);
      if (userId > 0) {
        if (mAm.isSingleton(sInfo.processName,sInfo.applicationInfo,sInfo.name,sInfo.flags) && mAm.isValidSingletonCall(callingUid,sInfo.applicationInfo.uid)) {
          userId=0;
          smap=getServiceMap(0);
        }
        sInfo=new ServiceInfo(sInfo);
        sInfo.applicationInfo=mAm.getAppInfoForUser(sInfo.applicationInfo,userId);
      }
      r=smap.mServicesByName.get(name);
      if (r == null && createIfNeeded) {
        final long token=Binder.clearCallingIdentity();
        try {
          final int allowed=mAm.checkAllowBackgroundLocked(sInfo.applicationInfo.uid,sInfo.packageName,callingPid);
          if (allowed != ActivityManager.APP_START_MODE_NORMAL) {
            Slog.w(TAG,"Background execution not allowed: service " + service + " to "+ name.flattenToShortString()+ " from pid="+ callingPid+ " uid="+ callingUid+ " pkg="+ callingPackage);
            return null;
          }
        }
  finally {
          Binder.restoreCallingIdentity(token);
        }
        Intent.FilterComparison filter=new Intent.FilterComparison(service.cloneFilter());
        ServiceRestarter res=new ServiceRestarter();
        BatteryStatsImpl.Uid.Pkg.Serv ss=null;
        BatteryStatsImpl stats=mAm.mBatteryStatsService.getActiveStatistics();
synchronized (stats) {
          ss=stats.getServiceStatsLocked(sInfo.applicationInfo.uid,sInfo.packageName,sInfo.name);
        }
        r=new ServiceRecord(mAm,ss,name,filter,sInfo,callingFromFg,res);
        res.setService(r);
        smap.mServicesByName.put(name,r);
        smap.mServicesByIntent.put(filter,r);
        for (int i=mPendingServices.size() - 1; i >= 0; i--) {
          ServiceRecord pr=mPendingServices.get(i);
          if (pr.serviceInfo.applicationInfo.uid == sInfo.applicationInfo.uid && pr.name.equals(name)) {
            mPendingServices.remove(i);
          }
        }
      }
    }
 catch (    RemoteException ex) {
    }
  }
  if (r != null) {
    if (mAm.checkComponentPermission(r.permission,callingPid,callingUid,r.appInfo.uid,r.exported) != PackageManager.PERMISSION_GRANTED) {
      if (!r.exported) {
        Slog.w(TAG,"Permission Denial: Accessing service " + r.name + " from pid="+ callingPid+ ", uid="+ callingUid+ " that is not exported from uid "+ r.appInfo.uid);
        return new ServiceLookupResult(null,"not exported from uid " + r.appInfo.uid);
      }
      Slog.w(TAG,"Permission Denial: Accessing service " + r.name + " from pid="+ callingPid+ ", uid="+ callingUid+ " requires "+ r.permission);
      return new ServiceLookupResult(null,r.permission);
    }
 else     if (r.permission != null && callingPackage != null) {
      final int opCode=AppOpsManager.permissionToOpCode(r.permission);
      if (opCode != AppOpsManager.OP_NONE && mAm.mAppOpsService.noteOperation(opCode,callingUid,callingPackage) != AppOpsManager.MODE_ALLOWED) {
        Slog.w(TAG,"Appop Denial: Accessing service " + r.name + " from pid="+ callingPid+ ", uid="+ callingUid+ " requires appop "+ AppOpsManager.opToName(opCode));
        return null;
      }
    }
    if (!mAm.mIntentFirewall.checkService(r.name,service,callingUid,callingPid,resolvedType,r.appInfo)) {
      return null;
    }
    return new ServiceLookupResult(r,null);
  }
  return null;
}
