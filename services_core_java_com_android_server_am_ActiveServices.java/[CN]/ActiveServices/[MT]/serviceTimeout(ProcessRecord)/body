{
  String anrMessage=null;
synchronized (mAm) {
    if (proc.executingServices.size() == 0 || proc.thread == null) {
      return;
    }
    final long now=SystemClock.uptimeMillis();
    final long maxTime=now - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);
    ServiceRecord timeout=null;
    long nextTime=0;
    for (int i=proc.executingServices.size() - 1; i >= 0; i--) {
      ServiceRecord sr=proc.executingServices.valueAt(i);
      if (sr.executingStart < maxTime) {
        timeout=sr;
        break;
      }
      if (sr.executingStart > nextTime) {
        nextTime=sr.executingStart;
      }
    }
    if (timeout != null && mAm.mLruProcesses.contains(proc)) {
      Slog.w(TAG,"Timeout executing service: " + timeout);
      StringBuilder sb=new StringBuilder();
      sb.append("sxecuting service ");
      sb.append(timeout.shortName);
      sb.append(" (execStart=");
      TimeUtils.formatDuration(now - timeout.executingStart,sb);
      sb.append(", nesting=");
      sb.append(timeout.executeNesting);
      sb.append(", fg=");
      sb.append(proc.execServicesFg);
      sb.append(", create=");
      TimeUtils.formatDuration(now - timeout.createTime,sb);
      sb.append(", proc=");
      sb.append(timeout.app != null ? timeout.app.toShortString() : "null");
      sb.append(")");
      anrMessage=sb.toString();
    }
 else {
      Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);
      msg.obj=proc;
      mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));
    }
  }
  if (anrMessage != null) {
    mAm.appNotResponding(proc,null,null,false,anrMessage);
  }
}
