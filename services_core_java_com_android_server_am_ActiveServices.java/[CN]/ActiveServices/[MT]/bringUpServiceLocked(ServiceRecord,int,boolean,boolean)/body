{
  if (r.app != null && r.app.thread != null) {
    sendServiceArgsLocked(r,execInFg,false);
    return null;
  }
  if (!whileRestarting && r.restartDelay > 0) {
    return null;
  }
  if (DEBUG_SERVICE)   Slog.v(TAG_SERVICE,"Bringing up " + r + " "+ r.intent);
  if (mRestartingServices.remove(r)) {
    r.resetRestartCounter();
    clearRestartingIfNeededLocked(r);
  }
  if (r.delayed) {
    if (DEBUG_DELAYED_STARTS)     Slog.v(TAG_SERVICE,"REM FR DELAY LIST (bring up): " + r);
    getServiceMap(r.userId).mDelayedStartList.remove(r);
    r.delayed=false;
  }
  if (mAm.mStartedUsers.get(r.userId) == null) {
    String msg="Unable to launch app " + r.appInfo.packageName + "/"+ r.appInfo.uid+ " for service "+ r.intent.getIntent()+ ": user "+ r.userId+ " is stopped";
    Slog.w(TAG,msg);
    bringDownServiceLocked(r);
    return msg;
  }
  try {
    AppGlobals.getPackageManager().setPackageStoppedState(r.packageName,false,r.userId);
  }
 catch (  RemoteException e) {
  }
catch (  IllegalArgumentException e) {
    Slog.w(TAG,"Failed trying to unstop package " + r.packageName + ": "+ e);
  }
  final boolean isolated=(r.serviceInfo.flags & ServiceInfo.FLAG_ISOLATED_PROCESS) != 0;
  final String procName=r.processName;
  ProcessRecord app;
  if (!isolated) {
    app=mAm.getProcessRecordLocked(procName,r.appInfo.uid,false);
    if (DEBUG_MU)     Slog.v(TAG_MU,"bringUpServiceLocked: appInfo.uid=" + r.appInfo.uid + " app="+ app);
    if (app != null && app.thread != null) {
      try {
        app.addPackage(r.appInfo.packageName,r.appInfo.versionCode,mAm.mProcessStats);
        realStartServiceLocked(r,app,execInFg);
        return null;
      }
 catch (      TransactionTooLargeException e) {
        throw e;
      }
catch (      RemoteException e) {
        Slog.w(TAG,"Exception when starting service " + r.shortName,e);
      }
    }
  }
 else {
    app=r.isolatedProc;
  }
  if (app == null) {
    if ((app=mAm.startProcessLocked(procName,r.appInfo,true,intentFlags,"service",r.name,false,isolated,false)) == null) {
      String msg="Unable to launch app " + r.appInfo.packageName + "/"+ r.appInfo.uid+ " for service "+ r.intent.getIntent()+ ": process is bad";
      Slog.w(TAG,msg);
      bringDownServiceLocked(r);
      return msg;
    }
    if (isolated) {
      r.isolatedProc=app;
    }
  }
  if (!mPendingServices.contains(r)) {
    mPendingServices.add(r);
  }
  if (r.delayedStop) {
    r.delayedStop=false;
    if (r.startRequested) {
      if (DEBUG_DELAYED_STARTS)       Slog.v(TAG_SERVICE,"Applying delayed stop (in bring up): " + r);
      stopServiceLocked(r);
    }
  }
  return null;
}
