{
  boolean needSep=false;
  boolean printedAnything=false;
  ItemMatcher matcher=new ItemMatcher();
  matcher.build(args,opti);
  pw.println("ACTIVITY MANAGER SERVICES (dumpsys activity services)");
  try {
    int[] users=mAm.getUsersLocked();
    for (    int user : users) {
      ServiceMap smap=getServiceMap(user);
      boolean printed=false;
      if (smap.mServicesByName.size() > 0) {
        long nowReal=SystemClock.elapsedRealtime();
        needSep=false;
        for (int si=0; si < smap.mServicesByName.size(); si++) {
          ServiceRecord r=smap.mServicesByName.valueAt(si);
          if (!matcher.match(r,r.name)) {
            continue;
          }
          if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
            continue;
          }
          if (!printed) {
            if (printedAnything) {
              pw.println();
            }
            pw.println("  User " + user + " active services:");
            printed=true;
          }
          printedAnything=true;
          if (needSep) {
            pw.println();
          }
          pw.print("  * ");
          pw.println(r);
          if (dumpAll) {
            r.dump(pw,"    ");
            needSep=true;
          }
 else {
            pw.print("    app=");
            pw.println(r.app);
            pw.print("    created=");
            TimeUtils.formatDuration(r.createTime,nowReal,pw);
            pw.print(" started=");
            pw.print(r.startRequested);
            pw.print(" connections=");
            pw.println(r.connections.size());
            if (r.connections.size() > 0) {
              pw.println("    Connections:");
              for (int conni=0; conni < r.connections.size(); conni++) {
                ArrayList<ConnectionRecord> clist=r.connections.valueAt(conni);
                for (int i=0; i < clist.size(); i++) {
                  ConnectionRecord conn=clist.get(i);
                  pw.print("      ");
                  pw.print(conn.binding.intent.intent.getIntent().toShortString(false,false,false,false));
                  pw.print(" -> ");
                  ProcessRecord proc=conn.binding.client;
                  pw.println(proc != null ? proc.toShortString() : "null");
                }
              }
            }
          }
          if (dumpClient && r.app != null && r.app.thread != null) {
            pw.println("    Client:");
            pw.flush();
            try {
              TransferPipe tp=new TransferPipe();
              try {
                r.app.thread.dumpService(tp.getWriteFd().getFileDescriptor(),r,args);
                tp.setBufferPrefix("      ");
                tp.go(fd,2000);
              }
  finally {
                tp.kill();
              }
            }
 catch (            IOException e) {
              pw.println("      Failure while dumping the service: " + e);
            }
catch (            RemoteException e) {
              pw.println("      Got a RemoteException while dumping the service");
            }
            needSep=true;
          }
        }
        needSep|=printed;
      }
      printed=false;
      for (int si=0, SN=smap.mDelayedStartList.size(); si < SN; si++) {
        ServiceRecord r=smap.mDelayedStartList.get(si);
        if (!matcher.match(r,r.name)) {
          continue;
        }
        if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
          continue;
        }
        if (!printed) {
          if (printedAnything) {
            pw.println();
          }
          pw.println("  User " + user + " delayed start services:");
          printed=true;
        }
        printedAnything=true;
        pw.print("  * Delayed start ");
        pw.println(r);
      }
      printed=false;
      for (int si=0, SN=smap.mStartingBackground.size(); si < SN; si++) {
        ServiceRecord r=smap.mStartingBackground.get(si);
        if (!matcher.match(r,r.name)) {
          continue;
        }
        if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
          continue;
        }
        if (!printed) {
          if (printedAnything) {
            pw.println();
          }
          pw.println("  User " + user + " starting in background:");
          printed=true;
        }
        printedAnything=true;
        pw.print("  * Starting bg ");
        pw.println(r);
      }
    }
  }
 catch (  Exception e) {
    Slog.w(TAG,"Exception in dumpServicesLocked",e);
  }
  if (mPendingServices.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mPendingServices.size(); i++) {
      ServiceRecord r=mPendingServices.get(i);
      if (!matcher.match(r,r.name)) {
        continue;
      }
      if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
        continue;
      }
      printedAnything=true;
      if (!printed) {
        if (needSep)         pw.println();
        needSep=true;
        pw.println("  Pending services:");
        printed=true;
      }
      pw.print("  * Pending ");
      pw.println(r);
      r.dump(pw,"    ");
    }
    needSep=true;
  }
  if (mRestartingServices.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mRestartingServices.size(); i++) {
      ServiceRecord r=mRestartingServices.get(i);
      if (!matcher.match(r,r.name)) {
        continue;
      }
      if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
        continue;
      }
      printedAnything=true;
      if (!printed) {
        if (needSep)         pw.println();
        needSep=true;
        pw.println("  Restarting services:");
        printed=true;
      }
      pw.print("  * Restarting ");
      pw.println(r);
      r.dump(pw,"    ");
    }
    needSep=true;
  }
  if (mDestroyingServices.size() > 0) {
    boolean printed=false;
    for (int i=0; i < mDestroyingServices.size(); i++) {
      ServiceRecord r=mDestroyingServices.get(i);
      if (!matcher.match(r,r.name)) {
        continue;
      }
      if (dumpPackage != null && !dumpPackage.equals(r.appInfo.packageName)) {
        continue;
      }
      printedAnything=true;
      if (!printed) {
        if (needSep)         pw.println();
        needSep=true;
        pw.println("  Destroying services:");
        printed=true;
      }
      pw.print("  * Destroy ");
      pw.println(r);
      r.dump(pw,"    ");
    }
    needSep=true;
  }
  if (dumpAll) {
    boolean printed=false;
    for (int ic=0; ic < mServiceConnections.size(); ic++) {
      ArrayList<ConnectionRecord> r=mServiceConnections.valueAt(ic);
      for (int i=0; i < r.size(); i++) {
        ConnectionRecord cr=r.get(i);
        if (!matcher.match(cr.binding.service,cr.binding.service.name)) {
          continue;
        }
        if (dumpPackage != null && (cr.binding.client == null || !dumpPackage.equals(cr.binding.client.info.packageName))) {
          continue;
        }
        printedAnything=true;
        if (!printed) {
          if (needSep)           pw.println();
          needSep=true;
          pw.println("  Connection bindings to services:");
          printed=true;
        }
        pw.print("  * ");
        pw.println(cr);
        cr.dump(pw,"    ");
      }
    }
  }
  if (!printedAnything) {
    pw.println("  (nothing)");
  }
}
