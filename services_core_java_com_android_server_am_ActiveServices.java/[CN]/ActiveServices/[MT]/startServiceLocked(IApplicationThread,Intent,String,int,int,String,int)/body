{
  if (DEBUG_DELAYED_STARTS)   Slog.v(TAG_SERVICE,"startService: " + service + " type="+ resolvedType+ " args="+ service.getExtras());
  final boolean callerFg;
  if (caller != null) {
    final ProcessRecord callerApp=mAm.getRecordForAppLocked(caller);
    if (callerApp == null) {
      throw new SecurityException("Unable to find app for caller " + caller + " (pid="+ Binder.getCallingPid()+ ") when starting service "+ service);
    }
    callerFg=callerApp.setSchedGroup != Process.THREAD_GROUP_BG_NONINTERACTIVE;
  }
 else {
    callerFg=true;
  }
  ServiceLookupResult res=retrieveServiceLocked(service,resolvedType,callingPackage,callingPid,callingUid,userId,true,callerFg);
  if (res == null) {
    return null;
  }
  if (res.record == null) {
    return new ComponentName("!",res.permission != null ? res.permission : "private to package");
  }
  ServiceRecord r=res.record;
  if (!mAm.getUserManagerLocked().exists(r.userId)) {
    Slog.d(TAG,"Trying to start service with non-existent user! " + r.userId);
    return null;
  }
  NeededUriGrants neededGrants=mAm.checkGrantUriPermissionFromIntentLocked(callingUid,r.packageName,service,service.getFlags(),null,r.userId);
  if (unscheduleServiceRestartLocked(r,callingUid,false)) {
    if (DEBUG_SERVICE)     Slog.v(TAG_SERVICE,"START SERVICE WHILE RESTART PENDING: " + r);
  }
  r.lastActivity=SystemClock.uptimeMillis();
  r.startRequested=true;
  r.delayedStop=false;
  r.pendingStarts.add(new ServiceRecord.StartItem(r,false,r.makeNextStartId(),service,neededGrants));
  final ServiceMap smap=getServiceMap(r.userId);
  boolean addToStarting=false;
  if (!callerFg && r.app == null && mAm.mStartedUsers.get(r.userId) != null) {
    ProcessRecord proc=mAm.getProcessRecordLocked(r.processName,r.appInfo.uid,false);
    if (proc == null || proc.curProcState > ActivityManager.PROCESS_STATE_RECEIVER) {
      if (DEBUG_DELAYED_SERVICE)       Slog.v(TAG_SERVICE,"Potential start delay of " + r + " in "+ proc);
      if (r.delayed) {
        if (DEBUG_DELAYED_STARTS)         Slog.v(TAG_SERVICE,"Continuing to delay: " + r);
        return r.name;
      }
      if (smap.mStartingBackground.size() >= mMaxStartingBackground) {
        Slog.i(TAG_SERVICE,"Delaying start of: " + r);
        smap.mDelayedStartList.add(r);
        r.delayed=true;
        return r.name;
      }
      if (DEBUG_DELAYED_STARTS)       Slog.v(TAG_SERVICE,"Not delaying: " + r);
      addToStarting=true;
    }
 else     if (proc.curProcState >= ActivityManager.PROCESS_STATE_SERVICE) {
      addToStarting=true;
      if (DEBUG_DELAYED_STARTS)       Slog.v(TAG_SERVICE,"Not delaying, but counting as bg: " + r);
    }
 else     if (DEBUG_DELAYED_STARTS) {
      StringBuilder sb=new StringBuilder(128);
      sb.append("Not potential delay (state=").append(proc.curProcState).append(' ').append(proc.adjType);
      String reason=proc.makeAdjReason();
      if (reason != null) {
        sb.append(' ');
        sb.append(reason);
      }
      sb.append("): ");
      sb.append(r.toString());
      Slog.v(TAG_SERVICE,sb.toString());
    }
  }
 else   if (DEBUG_DELAYED_STARTS) {
    if (callerFg) {
      Slog.v(TAG_SERVICE,"Not potential delay (callerFg=" + callerFg + " uid="+ callingUid+ " pid="+ callingPid+ "): "+ r);
    }
 else     if (r.app != null) {
      Slog.v(TAG_SERVICE,"Not potential delay (cur app=" + r.app + "): "+ r);
    }
 else {
      Slog.v(TAG_SERVICE,"Not potential delay (user " + r.userId + " not started): "+ r);
    }
  }
  return startServiceInnerLocked(smap,service,r,callerFg,addToStarting);
}
