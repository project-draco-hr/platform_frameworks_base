{
  try {
    SurfaceHolder surfaceHolder=MediaFrameworkTest.mSurfaceView.getHolder();
    Camera.Parameters params=mCameraTestHelper.getCameraParameters();
    runOnLooper(new Runnable(){
      @Override public void run(){
        mCameraTestHelper.setupCameraTest();
      }
    }
);
switch (flash) {
case ON:
      params.setFlashMode(Camera.Parameters.FLASH_MODE_ON);
    break;
case OFF:
  params.setFlashMode(Camera.Parameters.FLASH_MODE_OFF);
break;
case AUTO:
params.setFlashMode(Camera.Parameters.FLASH_MODE_AUTO);
break;
}
switch (exposure) {
case MIN:
params.setExposureCompensation(params.getMinExposureCompensation());
break;
case MAX:
params.setExposureCompensation(params.getMaxExposureCompensation());
break;
case NONE:
params.setExposureCompensation(0);
break;
}
switch (whitebalance) {
case DAYLIGHT:
params.setWhiteBalance(Camera.Parameters.WHITE_BALANCE_DAYLIGHT);
break;
case FLUORESCENT:
params.setWhiteBalance(Camera.Parameters.WHITE_BALANCE_FLUORESCENT);
break;
case INCANDESCENT:
params.setWhiteBalance(Camera.Parameters.WHITE_BALANCE_INCANDESCENT);
break;
case CLOUDY:
params.setWhiteBalance(Camera.Parameters.WHITE_BALANCE_CLOUDY_DAYLIGHT);
break;
case AUTO:
params.setWhiteBalance(Camera.Parameters.WHITE_BALANCE_AUTO);
break;
}
switch (scenemode) {
case SUNSET:
params.setSceneMode(Camera.Parameters.SCENE_MODE_SUNSET);
break;
case ACTION:
params.setSceneMode(Camera.Parameters.SCENE_MODE_ACTION);
break;
case PARTY:
params.setSceneMode(Camera.Parameters.SCENE_MODE_PARTY);
break;
case NIGHT:
params.setSceneMode(Camera.Parameters.SCENE_MODE_NIGHT);
break;
case AUTO:
params.setSceneMode(Camera.Parameters.SCENE_MODE_AUTO);
break;
}
List<Camera.Size> supportedPictureSizes=params.getSupportedPictureSizes();
int mid=(int)Math.floor(supportedPictureSizes.size() / 2);
int low=supportedPictureSizes.size() - 1;
switch (picturesize) {
case SMALL:
params.setPictureSize(supportedPictureSizes.get(low).width,supportedPictureSizes.get(low).height);
break;
case MEDIUM:
params.setPictureSize(supportedPictureSizes.get(mid).width,supportedPictureSizes.get(mid).height);
break;
case LARGE:
params.setPictureSize(supportedPictureSizes.get(0).width,supportedPictureSizes.get(mid).height);
break;
}
switch (geotagging) {
case ON:
params.setGpsLatitude(MOCK_LATITUDE);
params.setGpsLongitude(MOCK_LONGITUDE);
break;
case OFF:
break;
}
mCameraTestHelper.setParameters(params);
mCameraTestHelper.startCameraPreview(surfaceHolder);
mCameraTestHelper.capturePhoto();
mCameraTestHelper.cleanupTestImages();
}
 catch (Exception e) {
Log.e(TAG,e.toString());
fail("Test case failed");
}
}
