{
  final LinkedList<Node> roots=findRoots(rules);
  int index=0;
  while (roots.size() > 0) {
    final Node node=roots.removeFirst();
    final View view=node.view;
    final int key=view.getId();
    sorted[index++]=view;
    final HashSet<Node> dependents=node.dependents;
    for (    Node dependent : dependents) {
      final SparseArray<Node> dependencies=dependent.dependencies;
      dependencies.remove(key);
      if (dependencies.size() == 0) {
        roots.add(dependent);
      }
    }
  }
  if (index < sorted.length) {
    throw new IllegalStateException("Circular dependencies cannot exist" + " in RelativeLayout");
  }
}
