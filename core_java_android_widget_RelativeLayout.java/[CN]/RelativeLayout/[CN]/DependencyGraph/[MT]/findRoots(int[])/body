{
  final SparseArray<Node> nodes=mNodes;
  final int count=nodes.size();
  for (int i=0; i < count; i++) {
    final Node node=nodes.valueAt(i);
    node.dependents.clear();
    node.dependencies.clear();
  }
  for (int i=0; i < count; i++) {
    final Node node=nodes.valueAt(i);
    final LayoutParams layoutParams=(LayoutParams)node.view.getLayoutParams();
    final int[] rules=layoutParams.mRules;
    final int rulesCount=rulesFilter.length;
    for (int j=0; j < rulesCount; j++) {
      final int rule=rules[rulesFilter[j]];
      if (rule > 0) {
        final Node dependency=nodes.get(rule);
        if (dependency == node) {
          throw new IllegalStateException("A view cannot have a dependency" + " on itself");
        }
        dependency.dependents.add(node);
        node.dependencies.put(rule,dependency);
      }
    }
  }
  final LinkedList<Node> roots=mRoots;
  roots.clear();
  for (int i=0; i < count; i++) {
    final Node node=nodes.valueAt(i);
    if (node.dependencies.size() == 0)     roots.add(node);
  }
  return roots;
}
