{
  if (!node.getTag().equals(NodeTag))   throw new IOException("Node is a '" + node.getTag() + "' instead of a 'Node'");
  Map<String,XMLNode> checkMap=new HashMap<>(3);
  String context=null;
  List<NodeData> values=new ArrayList<>();
  List<XMLNode> children=new ArrayList<>();
  NodeData curValue=null;
  for (  XMLNode child : node.getChildren()) {
    XMLNode old=checkMap.put(child.getTag(),child);
switch (child.getTag()) {
case NodeNameTag:
      if (curValue != null)       throw new IOException(NodeNameTag + " not expected");
    curValue=new NodeData(child.getText());
  break;
case PathTag:
if (curValue == null || curValue.getPath() != null) throw new IOException(PathTag + " not expected");
curValue.setPath(child.getText());
break;
case ValueTag:
if (!children.isEmpty()) throw new IOException(ValueTag + " in constructed node");
if (curValue == null || curValue.getValue() != null) throw new IOException(ValueTag + " not expected");
curValue.setValue(child.getText());
values.add(curValue);
curValue=null;
break;
case RTPropTag:
if (old != null) throw new IOException("Duplicate " + RTPropTag);
XMLNode typeNode=getNextNode(child,TypeTag);
XMLNode ddfName=getNextNode(typeNode,DDFNameTag);
context=ddfName.getText();
if (context == null) throw new IOException("No text in " + DDFNameTag);
break;
case NodeTag:
if (!values.isEmpty()) throw new IOException("Scalar node " + node.getText() + " has Node child");
children.add(child);
break;
}
}
if (values.isEmpty()) {
if (curValue == null) throw new IOException("Missing name");
OMANode subNode=parent.addChild(curValue.getName(),context,null,curValue.getPath());
for (XMLNode child : children) {
buildNode(subNode,child);
}
}
 else {
if (!children.isEmpty()) throw new IOException("Got both sub nodes and value(s)");
for (NodeData nodeData : values) {
parent.addChild(nodeData.getName(),context,nodeData.getValue(),nodeData.getPath());
}
}
}
