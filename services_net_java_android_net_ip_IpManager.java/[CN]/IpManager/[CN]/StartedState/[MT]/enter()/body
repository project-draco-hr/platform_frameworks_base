{
  mStartTimeMillis=SystemClock.elapsedRealtime();
  mApfFilter=ApfFilter.maybeCreate(mConfiguration.mApfCapabilities,mNetworkInterface,mCallback,mMulticastFiltering);
  if (mApfFilter == null) {
    mCallback.setFallbackMulticastFilter(mMulticastFiltering);
  }
  try {
    mNwService.setInterfaceIpv6PrivacyExtensions(mInterfaceName,true);
    mNwService.enableIpv6(mInterfaceName);
  }
 catch (  RemoteException re) {
    Log.e(mTag,"Unable to change interface settings: " + re);
  }
catch (  IllegalStateException ie) {
    Log.e(mTag,"Unable to change interface settings: " + ie);
  }
  if (mConfiguration.mUsingIpReachabilityMonitor) {
    mIpReachabilityMonitor=new IpReachabilityMonitor(mContext,mInterfaceName,new IpReachabilityMonitor.Callback(){
      @Override public void notifyLost(      InetAddress ip,      String logMsg){
        mCallback.onReachabilityLost(logMsg);
      }
    }
);
  }
  if (mConfiguration.mStaticIpConfig != null) {
    if (setIPv4Address(mConfiguration.mStaticIpConfig.ipAddress)) {
      handleIPv4Success(new DhcpResults(mConfiguration.mStaticIpConfig));
    }
 else {
      if (VDBG) {
        Log.d(mTag,"onProvisioningFailure()");
      }
      recordMetric(IPCE_IPMGR_PROVISIONING_FAIL);
      mCallback.onProvisioningFailure(new LinkProperties(mLinkProperties));
      transitionTo(mStoppingState);
    }
  }
 else {
    mDhcpClient=DhcpClient.makeDhcpClient(mContext,IpManager.this,mInterfaceName);
    mDhcpClient.registerForPreDhcpNotification();
    mDhcpClient.sendMessage(DhcpClient.CMD_START_DHCP);
    if (mConfiguration.mProvisioningTimeoutMs > 0) {
      final long alarmTime=SystemClock.elapsedRealtime() + mConfiguration.mProvisioningTimeoutMs;
      mProvisioningTimeoutAlarm.schedule(alarmTime);
    }
  }
}
