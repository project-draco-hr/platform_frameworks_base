{
  super(IpManager.class.getSimpleName() + "." + ifName);
  mTag=getName();
  mContext=context;
  mInterfaceName=ifName;
  mClatInterfaceName=CLAT_PREFIX + ifName;
  mCallback=callback;
  mNwService=nwService;
  mNetlinkTracker=new NetlinkTracker(mInterfaceName,new NetlinkTracker.Callback(){
    @Override public void update(){
      sendMessage(EVENT_NETLINK_LINKPROPERTIES_CHANGED);
    }
  }
){
    @Override public void interfaceAdded(    String iface){
      super.interfaceAdded(iface);
      if (mClatInterfaceName.equals(iface)) {
        mCallback.setNeighborDiscoveryOffload(false);
      }
    }
    @Override public void interfaceRemoved(    String iface){
      super.interfaceRemoved(iface);
      if (mClatInterfaceName.equals(iface)) {
        mCallback.setNeighborDiscoveryOffload(true);
      }
    }
  }
;
  try {
    mNwService.registerObserver(mNetlinkTracker);
  }
 catch (  RemoteException e) {
    Log.e(mTag,"Couldn't register NetlinkTracker: " + e.toString());
  }
  resetLinkProperties();
  addState(mStoppedState);
  addState(mStartedState);
  addState(mStoppingState);
  setInitialState(mStoppedState);
  setLogRecSize(MAX_LOG_RECORDS);
  super.start();
}
