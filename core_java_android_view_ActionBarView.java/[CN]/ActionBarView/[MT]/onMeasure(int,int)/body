{
  int widthMode=MeasureSpec.getMode(widthMeasureSpec);
  if (widthMode != MeasureSpec.EXACTLY) {
    throw new IllegalStateException(getClass().getSimpleName() + " can only be used " + "with android:layout_width=\"match_parent\" (or fill_parent)");
  }
  int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  if (heightMode != MeasureSpec.AT_MOST) {
    throw new IllegalStateException(getClass().getSimpleName() + " can only be used " + "with android:layout_height=\"wrap_content\"");
  }
  int contentWidth=MeasureSpec.getSize(widthMeasureSpec);
  int availableWidth=contentWidth - getPaddingLeft() - getPaddingRight();
  final int height=mContentHeight - getPaddingTop() - getPaddingBottom();
  final int childSpecHeight=MeasureSpec.makeMeasureSpec(height,MeasureSpec.AT_MOST);
  if (mLogoView != null && mLogoView.getVisibility() != GONE) {
    availableWidth=measureChildView(mLogoView,availableWidth,childSpecHeight,mSpacing);
  }
  if (mIconView != null && mIconView.getVisibility() != GONE) {
    availableWidth=measureChildView(mIconView,availableWidth,childSpecHeight,mSpacing);
  }
  final ArrayList<ActionView> actions=mActions;
  final int actionCount=actions.size();
  for (int i=0; i < actionCount; i++) {
    ActionView action=actions.get(i);
    availableWidth=measureChildView(action,availableWidth,childSpecHeight,mActionSpacing);
  }
switch (mNavigationMode) {
case ActionBar.NAVIGATION_MODE_NORMAL:
    if (mTitleView != null) {
      measureChildView(mTitleView,availableWidth,childSpecHeight,mSpacing);
    }
  break;
case ActionBar.NAVIGATION_MODE_CUSTOM:
if (mNavigationView != null) {
  mNavigationView.measure(MeasureSpec.makeMeasureSpec(availableWidth,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(height,MeasureSpec.EXACTLY));
}
break;
}
setMeasuredDimension(contentWidth,mContentHeight);
}
