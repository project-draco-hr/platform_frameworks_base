{
  final boolean hadErrors=hasErrors();
  String text=editable.toString();
  if (TextUtils.isEmpty(text)) {
    if (mPageRangeEditText.getError() == null) {
      mPageRangeEditText.setError("");
      updateOptionsUi();
    }
    return;
  }
  String escapedText=PATTERN_ESCAPE_SPECIAL_CHARS.matcher(text).replaceAll("////");
  if (!PATTERN_PAGE_RANGE.matcher(escapedText).matches()) {
    if (mPageRangeEditText.getError() == null) {
      mPageRangeEditText.setError("");
      updateOptionsUi();
    }
    return;
  }
  PrintDocumentInfo info=mPrintedDocument.getDocumentInfo().info;
  final int pageCount=(info != null) ? getAdjustedPageCount(info) : 0;
  Matcher matcher=PATTERN_DIGITS.matcher(text);
  while (matcher.find()) {
    String numericString=text.substring(matcher.start(),matcher.end()).trim();
    if (TextUtils.isEmpty(numericString)) {
      continue;
    }
    final int pageIndex=Integer.parseInt(numericString);
    if (pageIndex < 1 || pageIndex > pageCount) {
      if (mPageRangeEditText.getError() == null) {
        mPageRangeEditText.setError("");
        updateOptionsUi();
      }
      return;
    }
  }
  if (mPageRangeEditText.getError() != null) {
    mPageRangeEditText.setError(null);
    updateOptionsUi();
  }
  if (hadErrors && canUpdateDocument()) {
    updateDocument(false);
  }
}
