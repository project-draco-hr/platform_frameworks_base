{
  List<PageRange> rangesToShred=new ArrayList<>();
  PageRange previousRange=null;
  final int pageCount=printJob.getDocumentInfo().getPageCount();
  PageRange[] printedPages=printJob.getPages();
  final int rangeCount=printedPages.length;
  for (int i=0; i < rangeCount; i++) {
    PageRange range=PageRangeUtils.asAbsoluteRange(printedPages[i],pageCount);
    if (previousRange == null) {
      final int startPageIdx=0;
      final int endPageIdx=range.getStart() - 1;
      if (startPageIdx <= endPageIdx) {
        PageRange removedRange=new PageRange(startPageIdx,endPageIdx);
        rangesToShred.add(removedRange);
      }
    }
 else {
      final int startPageIdx=previousRange.getEnd() + 1;
      final int endPageIdx=range.getStart() - 1;
      if (startPageIdx <= endPageIdx) {
        PageRange removedRange=new PageRange(startPageIdx,endPageIdx);
        rangesToShred.add(removedRange);
      }
    }
    if (i == rangeCount - 1) {
      final int startPageIdx=range.getEnd() + 1;
      final int endPageIdx=printJob.getDocumentInfo().getPageCount() - 1;
      if (startPageIdx <= endPageIdx) {
        PageRange removedRange=new PageRange(startPageIdx,endPageIdx);
        rangesToShred.add(removedRange);
      }
    }
    previousRange=range;
  }
  PageRange[] result=new PageRange[rangesToShred.size()];
  rangesToShred.toArray(result);
  return result;
}
