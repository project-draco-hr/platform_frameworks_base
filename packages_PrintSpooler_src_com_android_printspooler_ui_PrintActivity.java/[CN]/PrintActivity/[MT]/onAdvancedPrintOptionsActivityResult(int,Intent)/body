{
  if (resultCode != RESULT_OK || data == null) {
    return;
  }
  PrintJobInfo printJobInfo=data.getParcelableExtra(PrintService.EXTRA_PRINT_JOB_INFO);
  if (printJobInfo == null) {
    return;
  }
  mPrintJob.setAdvancedOptions(printJobInfo.getAdvancedOptions());
  mCopiesEditText.setText(String.valueOf(printJobInfo.getCopies()));
  mPrintJob.setCopies(printJobInfo.getCopies());
  PrintAttributes currAttributes=mPrintJob.getAttributes();
  PrintAttributes newAttributes=printJobInfo.getAttributes();
  MediaSize oldMediaSize=currAttributes.getMediaSize();
  MediaSize newMediaSize=newAttributes.getMediaSize();
  if (!oldMediaSize.equals(newMediaSize)) {
    final int mediaSizeCount=mMediaSizeSpinnerAdapter.getCount();
    MediaSize newMediaSizePortrait=newAttributes.getMediaSize().asPortrait();
    for (int i=0; i < mediaSizeCount; i++) {
      MediaSize supportedSizePortrait=mMediaSizeSpinnerAdapter.getItem(i).value.asPortrait();
      if (supportedSizePortrait.equals(newMediaSizePortrait)) {
        currAttributes.setMediaSize(newMediaSize);
        mMediaSizeSpinner.setSelection(i);
        if (currAttributes.getMediaSize().isPortrait()) {
          if (mOrientationSpinner.getSelectedItemPosition() != 0) {
            mOrientationSpinner.setSelection(0);
          }
        }
 else {
          if (mOrientationSpinner.getSelectedItemPosition() != 1) {
            mOrientationSpinner.setSelection(1);
          }
        }
        break;
      }
    }
  }
  final int currColorMode=currAttributes.getColorMode();
  final int newColorMode=newAttributes.getColorMode();
  if (currColorMode != newColorMode) {
    final int colorModeCount=mColorModeSpinner.getCount();
    for (int i=0; i < colorModeCount; i++) {
      final int supportedColorMode=mColorModeSpinnerAdapter.getItem(i).value;
      if (supportedColorMode == newColorMode) {
        currAttributes.setColorMode(newColorMode);
        mColorModeSpinner.setSelection(i);
        break;
      }
    }
  }
  PageRange[] pageRanges=printJobInfo.getPages();
  if (pageRanges != null && pageRanges.length > 0) {
    pageRanges=PageRangeUtils.normalize(pageRanges);
    PrintDocumentInfo info=mPrintedDocument.getDocumentInfo().info;
    final int pageCount=(info != null) ? info.getPageCount() : 0;
    if (pageRanges.length == 1) {
      if (pageRanges[0].getStart() == 0 && pageRanges[0].getEnd() == pageCount - 1) {
        pageRanges[0]=PageRange.ALL_PAGES;
      }
    }
    if (Arrays.equals(pageRanges,ALL_PAGES_ARRAY)) {
      mPrintJob.setPages(pageRanges);
      if (mRangeOptionsSpinner.getSelectedItemPosition() != 0) {
        mRangeOptionsSpinner.setSelection(0);
      }
    }
 else     if (pageRanges[0].getStart() >= 0 && pageRanges[pageRanges.length - 1].getEnd() < pageCount) {
      mPrintJob.setPages(pageRanges);
      if (mRangeOptionsSpinner.getSelectedItemPosition() != 1) {
        mRangeOptionsSpinner.setSelection(1);
      }
      StringBuilder builder=new StringBuilder();
      final int pageRangeCount=pageRanges.length;
      for (int i=0; i < pageRangeCount; i++) {
        if (builder.length() > 0) {
          builder.append(',');
        }
        final int shownStartPage;
        final int shownEndPage;
        PageRange pageRange=pageRanges[i];
        if (pageRange.equals(PageRange.ALL_PAGES)) {
          shownStartPage=1;
          shownEndPage=pageCount;
        }
 else {
          shownStartPage=pageRange.getStart() + 1;
          shownEndPage=pageRange.getEnd() + 1;
        }
        builder.append(shownStartPage);
        if (shownStartPage != shownEndPage) {
          builder.append('-');
          builder.append(shownEndPage);
        }
      }
      mPageRangeEditText.setText(builder.toString());
    }
  }
  if (canUpdateDocument()) {
    updateDocument(true,false);
  }
}
