{
  super.onCreate(savedInstanceState);
  Bundle extras=getIntent().getExtras();
  mPrintJob=extras.getParcelable(PrintManager.EXTRA_PRINT_JOB);
  if (mPrintJob == null) {
    throw new IllegalArgumentException(PrintManager.EXTRA_PRINT_JOB + " cannot be null");
  }
  mPrintJob.setAttributes(new PrintAttributes.Builder().build());
  final IBinder adapter=extras.getBinder(PrintManager.EXTRA_PRINT_DOCUMENT_ADAPTER);
  if (adapter == null) {
    throw new IllegalArgumentException(PrintManager.EXTRA_PRINT_DOCUMENT_ADAPTER + " cannot be null");
  }
  mCallingPackageName=extras.getString(DocumentsContract.EXTRA_PACKAGE_NAME);
  mSpoolerProvider=new PrintSpoolerProvider(this,new Runnable(){
    @Override public void run(){
      mPrinterRegistry=new PrinterRegistry(PrintActivity.this,new Runnable(){
        @Override public void run(){
          setTitle(R.string.print_dialog);
          setContentView(R.layout.print_activity);
          mPrintedDocument=new RemotePrintDocument(PrintActivity.this,IPrintDocumentAdapter.Stub.asInterface(adapter),PrintSpoolerService.generateFileForPrintJob(PrintActivity.this,mPrintJob.getId()),new RemotePrintDocument.DocumentObserver(){
            @Override public void onDestroy(){
              finish();
            }
          }
,PrintActivity.this);
          mProgressMessageController=new ProgressMessageController(PrintActivity.this);
          mMediaSizeComparator=new MediaSizeComparator(PrintActivity.this);
          mDestinationSpinnerAdapter=new DestinationAdapter();
          bindUi();
          updateOptionsUi();
          mOptionsContent.setVisibility(View.VISIBLE);
          mRequestedPages=computeRequestedPages();
          mPrintedDocument.start();
          ensurePreviewUiShown();
        }
      }
);
    }
  }
);
}
