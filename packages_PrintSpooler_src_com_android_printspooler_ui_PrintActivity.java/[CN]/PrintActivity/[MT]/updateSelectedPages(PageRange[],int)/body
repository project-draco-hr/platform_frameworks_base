{
  if (selectedPages == null || selectedPages.length <= 0) {
    return;
  }
  selectedPages=PageRangeUtils.normalize(selectedPages);
  if (PageRangeUtils.isAllPages(selectedPages,pageInDocumentCount)) {
    selectedPages=new PageRange[]{PageRange.ALL_PAGES};
  }
  if (Arrays.equals(mSelectedPages,selectedPages)) {
    return;
  }
  mSelectedPages=selectedPages;
  mPrintJob.setPages(selectedPages);
  if (Arrays.equals(selectedPages,PageRange.ALL_PAGES_ARRAY)) {
    if (mRangeOptionsSpinner.getSelectedItemPosition() != 0) {
      mRangeOptionsSpinner.setSelection(0);
      mPageRangeEditText.setText("");
    }
  }
 else   if (selectedPages[0].getStart() >= 0 && selectedPages[selectedPages.length - 1].getEnd() < pageInDocumentCount) {
    if (mRangeOptionsSpinner.getSelectedItemPosition() != 1) {
      mRangeOptionsSpinner.setSelection(1);
    }
    StringBuilder builder=new StringBuilder();
    final int pageRangeCount=selectedPages.length;
    for (int i=0; i < pageRangeCount; i++) {
      if (builder.length() > 0) {
        builder.append(',');
      }
      final int shownStartPage;
      final int shownEndPage;
      PageRange pageRange=selectedPages[i];
      if (pageRange.equals(PageRange.ALL_PAGES)) {
        shownStartPage=1;
        shownEndPage=pageInDocumentCount;
      }
 else {
        shownStartPage=pageRange.getStart() + 1;
        shownEndPage=pageRange.getEnd() + 1;
      }
      builder.append(shownStartPage);
      if (shownStartPage != shownEndPage) {
        builder.append('-');
        builder.append(shownEndPage);
      }
    }
    mPageRangeEditText.setText(builder.toString());
  }
}
