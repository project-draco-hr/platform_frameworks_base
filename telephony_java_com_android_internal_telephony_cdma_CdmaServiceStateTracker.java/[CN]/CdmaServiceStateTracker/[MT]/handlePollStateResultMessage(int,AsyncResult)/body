{
  int ints[];
  String states[];
switch (what) {
case EVENT_POLL_STATE_REGISTRATION_CDMA:
    states=(String[])ar.result;
  int registrationState=4;
int radioTechnology=-1;
int baseStationId=-1;
int baseStationLatitude=CdmaCellLocation.INVALID_LAT_LONG;
int baseStationLongitude=CdmaCellLocation.INVALID_LAT_LONG;
int cssIndicator=0;
int systemId=0;
int networkId=0;
int roamingIndicator=-1;
int systemIsInPrl=0;
int defaultRoamingIndicator=0;
int reasonForDenial=0;
if (states.length == 14) {
try {
if (states[0] != null) {
registrationState=Integer.parseInt(states[0]);
}
if (states[3] != null) {
radioTechnology=Integer.parseInt(states[3]);
}
if (states[4] != null) {
baseStationId=Integer.parseInt(states[4]);
}
if (states[5] != null) {
baseStationLatitude=Integer.parseInt(states[5]);
}
if (states[6] != null) {
baseStationLongitude=Integer.parseInt(states[6]);
}
if (baseStationLatitude == 0 && baseStationLongitude == 0) {
baseStationLatitude=CdmaCellLocation.INVALID_LAT_LONG;
baseStationLongitude=CdmaCellLocation.INVALID_LAT_LONG;
}
if (states[7] != null) {
cssIndicator=Integer.parseInt(states[7]);
}
if (states[8] != null) {
systemId=Integer.parseInt(states[8]);
}
if (states[9] != null) {
networkId=Integer.parseInt(states[9]);
}
if (states[10] != null) {
roamingIndicator=Integer.parseInt(states[10]);
}
if (states[11] != null) {
systemIsInPrl=Integer.parseInt(states[11]);
}
if (states[12] != null) {
defaultRoamingIndicator=Integer.parseInt(states[12]);
}
if (states[13] != null) {
reasonForDenial=Integer.parseInt(states[13]);
}
}
 catch (NumberFormatException ex) {
Log.w(LOG_TAG,"error parsing RegistrationState: " + ex);
}
}
 else {
throw new RuntimeException("Warning! Wrong number of parameters returned from " + "RIL_REQUEST_REGISTRATION_STATE: expected 14 got " + states.length);
}
mRegistrationState=registrationState;
mCdmaRoaming=regCodeIsRoaming(registrationState) && !isRoamIndForHomeSystem(states[10]);
newSS.setState(regCodeToServiceState(registrationState));
if (checkAdditionalDataAvaiable()) {
this.newCdmaDataConnectionState=radioTechnologyToDataServiceState(radioTechnology);
newSS.setRadioTechnology(radioTechnology);
newNetworkType=radioTechnology;
}
newSS.setCssIndicator(cssIndicator);
newSS.setSystemAndNetworkId(systemId,networkId);
mRoamingIndicator=roamingIndicator;
mIsInPrl=(systemIsInPrl == 0) ? false : true;
mDefaultRoamingIndicator=defaultRoamingIndicator;
newCellLoc.setCellLocationData(baseStationId,baseStationLatitude,baseStationLongitude,systemId,networkId);
if (reasonForDenial == 0) {
mRegistrationDeniedReason=ServiceStateTracker.REGISTRATION_DENIED_GEN;
}
 else if (reasonForDenial == 1) {
mRegistrationDeniedReason=ServiceStateTracker.REGISTRATION_DENIED_AUTH;
}
 else {
mRegistrationDeniedReason="";
}
if (mRegistrationState == 3) {
if (DBG) log("Registration denied, " + mRegistrationDeniedReason);
}
break;
case EVENT_POLL_STATE_OPERATOR_CDMA:
String opNames[]=(String[])ar.result;
if (opNames != null && opNames.length >= 3) {
if ((opNames[2] == null) || (opNames[2].length() < 5) || ("00000".equals(opNames[2]))) {
opNames[2]=SystemProperties.get(CDMAPhone.PROPERTY_CDMA_HOME_OPERATOR_NUMERIC,"00000");
if (DBG) {
log("RIL_REQUEST_OPERATOR.response[2], the numeric, " + " is bad. Using SystemProperties '" + CDMAPhone.PROPERTY_CDMA_HOME_OPERATOR_NUMERIC + "'= "+ opNames[2]);
}
}
if (cm.getNvState().isNVReady()) {
newSS.setOperatorName(null,opNames[1],opNames[2]);
}
 else {
newSS.setOperatorName(opNames[0],opNames[1],opNames[2]);
}
}
 else {
Log.w(LOG_TAG,"error parsing opNames");
}
break;
default :
Log.e(LOG_TAG,"RIL response handle in wrong phone!" + " Expected CDMA RIL request and get GSM RIL request.");
break;
}
}
