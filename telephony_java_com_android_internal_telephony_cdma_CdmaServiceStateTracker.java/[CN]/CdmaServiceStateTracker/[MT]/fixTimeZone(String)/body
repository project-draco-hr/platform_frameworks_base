{
  TimeZone zone=null;
  String zoneName=SystemProperties.get(TIMEZONE_PROPERTY);
  if (DBG) {
    log("fixTimeZone zoneName='" + zoneName + "' mZoneOffset="+ mZoneOffset+ " mZoneDst="+ mZoneDst+ " iso-cc='"+ isoCountryCode+ "' iso-cc-idx="+ Arrays.binarySearch(GMT_COUNTRY_CODES,isoCountryCode));
  }
  if ((mZoneOffset == 0) && (mZoneDst == false) && (zoneName != null)&& (zoneName.length() > 0)&& (Arrays.binarySearch(GMT_COUNTRY_CODES,isoCountryCode) < 0)) {
    zone=TimeZone.getDefault();
    long ctm=System.currentTimeMillis();
    long tzOffset=zone.getOffset(ctm);
    if (DBG) {
      log("fixTimeZone: tzOffset=" + tzOffset + " ltod="+ TimeUtils.logTimeOfDay(ctm));
    }
    if (getAutoTime()) {
      long adj=ctm - tzOffset;
      if (DBG)       log("fixTimeZone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
      setAndBroadcastNetworkSetTime(adj);
    }
 else {
      mSavedTime=mSavedTime - tzOffset;
      if (DBG)       log("fixTimeZone: adj mSavedTime=" + mSavedTime);
    }
    if (DBG)     log("fixTimeZone: using default TimeZone");
  }
 else   if (isoCountryCode.equals("")) {
    zone=getNitzTimeZone(mZoneOffset,mZoneDst,mZoneTime);
    if (DBG)     log("fixTimeZone: using NITZ TimeZone");
  }
 else {
    zone=TimeUtils.getTimeZone(mZoneOffset,mZoneDst,mZoneTime,isoCountryCode);
    if (DBG)     log("fixTimeZone: using getTimeZone(off, dst, time, iso)");
  }
  mNeedFixZone=false;
  if (zone != null) {
    log("fixTimeZone: zone != null zone.getID=" + zone.getID());
    if (getAutoTimeZone()) {
      setAndBroadcastNetworkSetTimeZone(zone.getID());
    }
 else {
      log("fixTimeZone: skip changing zone as getAutoTimeZone was false");
    }
    saveNitzTimeZone(zone.getID());
  }
 else {
    log("fixTimeZone: zone == null, do nothing for zone");
  }
}
