{
  if (mDesiredPowerState && cm.getRadioState() == CommandsInterface.RadioState.RADIO_OFF) {
    cm.setRadioPower(true,null);
  }
 else   if (!mDesiredPowerState && cm.getRadioState().isOn()) {
    DataConnectionTracker dcTracker=phone.mDataConnection;
    if (!dcTracker.isDataConnectionAsDesired()) {
      EventLog.List val=new EventLog.List(dcTracker.getStateInString(),(dcTracker.getAnyDataEnabled() ? 1 : 0));
      EventLog.writeEvent(TelephonyEventLog.EVENT_LOG_DATA_STATE_RADIO_OFF,val);
    }
    Message msg=dcTracker.obtainMessage(DataConnectionTracker.EVENT_CLEAN_UP_CONNECTION);
    msg.arg1=1;
    msg.obj=CDMAPhone.REASON_RADIO_TURNED_OFF;
    dcTracker.sendMessage(msg);
synchronized (this) {
      if (!mPendingRadioPowerOffAfterDataOff) {
        DataConnectionTracker.State currentState=dcTracker.getState();
        if (currentState != DataConnectionTracker.State.CONNECTED && currentState != DataConnectionTracker.State.DISCONNECTING) {
          if (DBG)           log("Data disconnected, turn off radio right away.");
          cm.setRadioPower(false,null);
        }
 else         if (sendEmptyMessageDelayed(EVENT_SET_RADIO_POWER_OFF,5000)) {
          if (DBG)           log("Wait 5 sec for data to be disconnected, then turn off radio.");
          mPendingRadioPowerOffAfterDataOff=true;
        }
 else {
          Log.w(LOG_TAG,"Cannot send delayed Msg, turn off radio right away.");
          cm.setRadioPower(false,null);
        }
      }
    }
  }
}
