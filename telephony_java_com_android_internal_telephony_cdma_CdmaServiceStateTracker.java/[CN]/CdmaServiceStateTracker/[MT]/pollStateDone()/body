{
  if (DBG)   log("Poll ServiceState done: oldSS=[" + ss + "] newSS=["+ newSS+ "]");
  boolean hasRegistered=ss.getState() != ServiceState.STATE_IN_SERVICE && newSS.getState() == ServiceState.STATE_IN_SERVICE;
  boolean hasDeregistered=ss.getState() == ServiceState.STATE_IN_SERVICE && newSS.getState() != ServiceState.STATE_IN_SERVICE;
  boolean hasCdmaDataConnectionAttached=this.cdmaDataConnectionState != ServiceState.STATE_IN_SERVICE && this.newCdmaDataConnectionState == ServiceState.STATE_IN_SERVICE;
  boolean hasCdmaDataConnectionDetached=this.cdmaDataConnectionState == ServiceState.STATE_IN_SERVICE && this.newCdmaDataConnectionState != ServiceState.STATE_IN_SERVICE;
  boolean hasCdmaDataConnectionChanged=cdmaDataConnectionState != newCdmaDataConnectionState;
  boolean hasNetworkTypeChanged=networkType != newNetworkType;
  boolean hasChanged=!newSS.equals(ss);
  boolean hasRoamingOn=!ss.getRoaming() && newSS.getRoaming();
  boolean hasRoamingOff=ss.getRoaming() && !newSS.getRoaming();
  boolean hasLocationChanged=!newCellLoc.equals(cellLoc);
  if (ss.getState() != newSS.getState() || cdmaDataConnectionState != newCdmaDataConnectionState) {
    EventLog.writeEvent(EventLogTags.CDMA_SERVICE_STATE_CHANGE,ss.getState(),cdmaDataConnectionState,newSS.getState(),newCdmaDataConnectionState);
  }
  ServiceState tss;
  tss=ss;
  ss=newSS;
  newSS=tss;
  newSS.setStateOutOfService();
  CdmaCellLocation tcl=cellLoc;
  cellLoc=newCellLoc;
  newCellLoc=tcl;
  cdmaDataConnectionState=newCdmaDataConnectionState;
  networkType=newNetworkType;
  newSS.setStateOutOfService();
  if (hasNetworkTypeChanged) {
    phone.setSystemProperty(TelephonyProperties.PROPERTY_DATA_NETWORK_TYPE,networkTypeToString(networkType));
  }
  if (hasRegistered) {
    networkAttachedRegistrants.notifyRegistrants();
  }
  if (hasChanged) {
    if (cm.getRadioState().isNVReady()) {
      String eriText;
      if (ss.getState() == ServiceState.STATE_IN_SERVICE) {
        eriText=phone.getCdmaEriText();
      }
 else {
        eriText=phone.getContext().getText(com.android.internal.R.string.roamingTextSearching).toString();
      }
      ss.setCdmaEriText(eriText);
    }
    String operatorNumeric;
    phone.setSystemProperty(TelephonyProperties.PROPERTY_OPERATOR_ALPHA,ss.getOperatorAlphaLong());
    operatorNumeric=ss.getOperatorNumeric();
    phone.setSystemProperty(TelephonyProperties.PROPERTY_OPERATOR_NUMERIC,operatorNumeric);
    if (operatorNumeric == null) {
      phone.setSystemProperty(TelephonyProperties.PROPERTY_OPERATOR_ISO_COUNTRY,"");
    }
 else {
      String isoCountryCode="";
      try {
        isoCountryCode=MccTable.countryCodeForMcc(Integer.parseInt(operatorNumeric.substring(0,3)));
      }
 catch (      NumberFormatException ex) {
        Log.w(LOG_TAG,"countryCodeForMcc error" + ex);
      }
catch (      StringIndexOutOfBoundsException ex) {
        Log.w(LOG_TAG,"countryCodeForMcc error" + ex);
      }
      phone.setSystemProperty(TelephonyProperties.PROPERTY_OPERATOR_ISO_COUNTRY,isoCountryCode);
      mGotCountryCode=true;
      if (mNeedFixZone) {
        fixTimeZone(isoCountryCode);
      }
    }
    phone.setSystemProperty(TelephonyProperties.PROPERTY_OPERATOR_ISROAMING,ss.getRoaming() ? "true" : "false");
    updateSpnDisplay();
    phone.notifyServiceStateChanged(ss);
  }
  if (hasCdmaDataConnectionAttached) {
    cdmaDataConnectionAttachedRegistrants.notifyRegistrants();
  }
  if (hasCdmaDataConnectionDetached) {
    cdmaDataConnectionDetachedRegistrants.notifyRegistrants();
  }
  if (hasCdmaDataConnectionChanged || hasNetworkTypeChanged) {
    phone.notifyDataConnection();
  }
  if (hasRoamingOn) {
    roamingOnRegistrants.notifyRegistrants();
  }
  if (hasRoamingOff) {
    roamingOffRegistrants.notifyRegistrants();
  }
  if (hasLocationChanged) {
    phone.notifyLocationChanged();
  }
}
