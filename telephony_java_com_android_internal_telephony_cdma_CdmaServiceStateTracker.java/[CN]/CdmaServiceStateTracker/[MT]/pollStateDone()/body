{
  if (DBG)   log("pollStateDone: oldSS=[" + ss + "] newSS=["+ newSS+ "]");
  boolean hasRegistered=ss.getState() != ServiceState.STATE_IN_SERVICE && newSS.getState() == ServiceState.STATE_IN_SERVICE;
  boolean hasDeregistered=ss.getState() == ServiceState.STATE_IN_SERVICE && newSS.getState() != ServiceState.STATE_IN_SERVICE;
  boolean hasCdmaDataConnectionAttached=mDataConnectionState != ServiceState.STATE_IN_SERVICE && mNewDataConnectionState == ServiceState.STATE_IN_SERVICE;
  boolean hasCdmaDataConnectionDetached=mDataConnectionState == ServiceState.STATE_IN_SERVICE && mNewDataConnectionState != ServiceState.STATE_IN_SERVICE;
  boolean hasCdmaDataConnectionChanged=mDataConnectionState != mNewDataConnectionState;
  boolean hasRadioTechnologyChanged=mRilRadioTechnology != mNewRilRadioTechnology;
  boolean hasChanged=!newSS.equals(ss);
  boolean hasRoamingOn=!ss.getRoaming() && newSS.getRoaming();
  boolean hasRoamingOff=ss.getRoaming() && !newSS.getRoaming();
  boolean hasLocationChanged=!newCellLoc.equals(cellLoc);
  if (ss.getState() != newSS.getState() || mDataConnectionState != mNewDataConnectionState) {
    EventLog.writeEvent(EventLogTags.CDMA_SERVICE_STATE_CHANGE,ss.getState(),mDataConnectionState,newSS.getState(),mNewDataConnectionState);
  }
  ServiceState tss;
  tss=ss;
  ss=newSS;
  newSS=tss;
  newSS.setStateOutOfService();
  CdmaCellLocation tcl=cellLoc;
  cellLoc=newCellLoc;
  newCellLoc=tcl;
  mDataConnectionState=mNewDataConnectionState;
  mRilRadioTechnology=mNewRilRadioTechnology;
  mNewRilRadioTechnology=0;
  newSS.setStateOutOfService();
  if (hasRadioTechnologyChanged) {
    phone.setSystemProperty(TelephonyProperties.PROPERTY_DATA_NETWORK_TYPE,ServiceState.rilRadioTechnologyToString(mRilRadioTechnology));
  }
  if (hasRegistered) {
    mNetworkAttachedRegistrants.notifyRegistrants();
  }
  if (hasChanged) {
    if ((cm.getRadioState().isOn()) && (!isSubscriptionFromRuim)) {
      String eriText;
      if (ss.getState() == ServiceState.STATE_IN_SERVICE) {
        eriText=phone.getCdmaEriText();
      }
 else {
        eriText=phone.getContext().getText(com.android.internal.R.string.roamingTextSearching).toString();
      }
      ss.setOperatorAlphaLong(eriText);
    }
    String operatorNumeric;
    phone.setSystemProperty(TelephonyProperties.PROPERTY_OPERATOR_ALPHA,ss.getOperatorAlphaLong());
    String prevOperatorNumeric=SystemProperties.get(TelephonyProperties.PROPERTY_OPERATOR_NUMERIC,"");
    operatorNumeric=ss.getOperatorNumeric();
    phone.setSystemProperty(TelephonyProperties.PROPERTY_OPERATOR_NUMERIC,operatorNumeric);
    if (operatorNumeric == null) {
      if (DBG)       log("operatorNumeric is null");
      phone.setSystemProperty(TelephonyProperties.PROPERTY_OPERATOR_ISO_COUNTRY,"");
      mGotCountryCode=false;
    }
 else {
      String isoCountryCode="";
      String mcc=operatorNumeric.substring(0,3);
      try {
        isoCountryCode=MccTable.countryCodeForMcc(Integer.parseInt(operatorNumeric.substring(0,3)));
      }
 catch (      NumberFormatException ex) {
        loge("pollStateDone: countryCodeForMcc error" + ex);
      }
catch (      StringIndexOutOfBoundsException ex) {
        loge("pollStateDone: countryCodeForMcc error" + ex);
      }
      phone.setSystemProperty(TelephonyProperties.PROPERTY_OPERATOR_ISO_COUNTRY,isoCountryCode);
      mGotCountryCode=true;
      if (shouldFixTimeZoneNow(phone,operatorNumeric,prevOperatorNumeric,mNeedFixZone)) {
        fixTimeZone(isoCountryCode);
      }
    }
    phone.setSystemProperty(TelephonyProperties.PROPERTY_OPERATOR_ISROAMING,ss.getRoaming() ? "true" : "false");
    updateSpnDisplay();
    phone.notifyServiceStateChanged(ss);
  }
  if (hasCdmaDataConnectionAttached) {
    mAttachedRegistrants.notifyRegistrants();
  }
  if (hasCdmaDataConnectionDetached) {
    mDetachedRegistrants.notifyRegistrants();
  }
  if (hasCdmaDataConnectionChanged || hasRadioTechnologyChanged) {
    phone.notifyDataConnection(null);
  }
  if (hasRoamingOn) {
    mRoamingOnRegistrants.notifyRegistrants();
  }
  if (hasRoamingOff) {
    mRoamingOffRegistrants.notifyRegistrants();
  }
  if (hasLocationChanged) {
    phone.notifyLocationChanged();
  }
}
