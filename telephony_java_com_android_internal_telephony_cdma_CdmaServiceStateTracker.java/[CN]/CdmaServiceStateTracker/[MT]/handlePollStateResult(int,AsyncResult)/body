{
  int ints[];
  String states[];
  if (ar.userObj != pollingContext)   return;
  if (ar.exception != null) {
    CommandException.Error err=null;
    if (ar.exception instanceof CommandException) {
      err=((CommandException)(ar.exception)).getCommandError();
    }
    if (err == CommandException.Error.RADIO_NOT_AVAILABLE) {
      cancelPollState();
      return;
    }
    if (!cm.getRadioState().isOn()) {
      cancelPollState();
      return;
    }
    if (err != CommandException.Error.OP_NOT_ALLOWED_BEFORE_REG_NW && err != CommandException.Error.OP_NOT_ALLOWED_BEFORE_REG_NW) {
      Log.e(LOG_TAG,"RIL implementation has returned an error where it must succeed",ar.exception);
    }
  }
 else   try {
switch (what) {
case EVENT_POLL_STATE_REGISTRATION_CDMA:
      final int offset=3;
    states=(String[])ar.result;
  int responseValuesRegistrationState[]={-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1};
if (states.length == 14) {
  try {
    this.mRegistrationState=Integer.parseInt(states[0]);
  }
 catch (  NumberFormatException ex) {
    Log.w(LOG_TAG,"error parsing RegistrationState: " + ex);
  }
  try {
    responseValuesRegistrationState[0]=Integer.parseInt(states[3]);
    responseValuesRegistrationState[1]=Integer.parseInt(states[4],16);
    responseValuesRegistrationState[2]=Integer.parseInt(states[5],16);
    responseValuesRegistrationState[3]=Integer.parseInt(states[6],16);
    responseValuesRegistrationState[4]=Integer.parseInt(states[7]);
    responseValuesRegistrationState[5]=Integer.parseInt(states[8]);
    responseValuesRegistrationState[6]=Integer.parseInt(states[9]);
    responseValuesRegistrationState[7]=Integer.parseInt(states[10]);
    responseValuesRegistrationState[8]=Integer.parseInt(states[11]);
    responseValuesRegistrationState[9]=Integer.parseInt(states[12]);
    responseValuesRegistrationState[10]=Integer.parseInt(states[13]);
  }
 catch (  NumberFormatException ex) {
    Log.w(LOG_TAG,"Warning! There is an unexpected value" + "returned as response from " + "RIL_REQUEST_REGISTRATION_STATE.");
  }
}
 else {
  throw new RuntimeException("Warning! Wrong number of parameters returned from " + "RIL_REQUEST_REGISTRATION_STATE: expected 14 got " + states.length);
}
mCdmaRoaming=regCodeIsRoaming(this.mRegistrationState);
this.newCdmaDataConnectionState=radioTechnologyToServiceState(responseValuesRegistrationState[0]);
newSS.setState(regCodeToServiceState(this.mRegistrationState));
newSS.setRadioTechnology(responseValuesRegistrationState[0]);
newSS.setCssIndicator(responseValuesRegistrationState[4]);
newSS.setSystemAndNetworkId(responseValuesRegistrationState[5],responseValuesRegistrationState[6]);
mRoamingIndicator=responseValuesRegistrationState[7];
mIsInPrl=responseValuesRegistrationState[8];
mDefaultRoamingIndicator=responseValuesRegistrationState[9];
newNetworkType=responseValuesRegistrationState[0];
newCellLoc.setCellLocationData(responseValuesRegistrationState[1],responseValuesRegistrationState[2],responseValuesRegistrationState[3]);
if (responseValuesRegistrationState[10] == 0) {
mRegistrationDeniedReason=ServiceStateTracker.REGISTRATION_DENIED_GEN;
}
 else if (responseValuesRegistrationState[10] == 1) {
mRegistrationDeniedReason=ServiceStateTracker.REGISTRATION_DENIED_AUTH;
}
 else {
mRegistrationDeniedReason="";
}
if (mRegistrationState == 3) {
if (DBG) log("Registration denied, " + mRegistrationDeniedReason);
}
break;
case EVENT_POLL_STATE_OPERATOR_CDMA:
String opNames[]=(String[])ar.result;
if (opNames != null && opNames.length >= 3) {
newSS.setOperatorName(opNames[0],opNames[1],opNames[2]);
if (phone.mCM.getRadioState().isNVReady()) {
newSS.setOperatorName(null,opNames[1],opNames[2]);
}
 else {
newSS.setOperatorName(opNames[0],opNames[1],opNames[2]);
}
}
 else {
Log.w(LOG_TAG,"error parsing opNames");
}
break;
case EVENT_POLL_STATE_CDMA_SUBSCRIPTION:
String cdmaSubscription[]=(String[])ar.result;
if (cdmaSubscription != null && cdmaSubscription.length >= 4) {
mMdn=cdmaSubscription[0];
mHomeSystemId=Integer.parseInt(cdmaSubscription[1],16);
mHomeNetworkId=Integer.parseInt(cdmaSubscription[2],16);
mMin=cdmaSubscription[3];
}
 else {
Log.w(LOG_TAG,"error parsing cdmaSubscription");
}
break;
default :
Log.e(LOG_TAG,"RIL response handle in wrong phone!" + " Expected CDMA RIL request and get GSM RIL request.");
break;
}
}
 catch (RuntimeException ex) {
Log.e(LOG_TAG,"Exception while polling service state. " + "Probably malformed RIL response.",ex);
}
pollingContext[0]--;
if (pollingContext[0] == 0) {
boolean namMatch=false;
if ((mHomeSystemId != 0) && (mHomeSystemId == newSS.getSystemId())) {
namMatch=true;
}
if (isSubscriptionFromRuim) {
newSS.setRoaming(isRoamingBetweenOperators(mCdmaRoaming,newSS));
}
 else {
newSS.setRoaming(mCdmaRoaming);
}
if (mIsInPrl == 0 && mRegistrationState == 5) {
newSS.setCdmaRoamingIndicator(2);
}
 else if (!namMatch && (mIsInPrl == 1)) {
newSS.setCdmaRoamingIndicator(mRoamingIndicator);
}
 else if (namMatch && (mIsInPrl == 1) && mRoamingIndicator <= 2) {
newSS.setCdmaRoamingIndicator(1);
}
 else if (namMatch && (mIsInPrl == 1) && mRoamingIndicator > 2) {
newSS.setCdmaRoamingIndicator(mRoamingIndicator);
}
newSS.setCdmaDefaultRoamingIndicator(mDefaultRoamingIndicator);
if (DBG) {
log("Set CDMA Roaming Indicator to: " + newSS.getCdmaRoamingIndicator() + ". mCdmaRoaming = "+ mCdmaRoaming+ ",  namMatch = "+ namMatch+ ", mIsInPrl= "+ mIsInPrl+ ", mRoamingIndicator = "+ mRoamingIndicator+ ", mDefaultRoamingIndicator= "+ mDefaultRoamingIndicator);
}
pollStateDone();
}
}
