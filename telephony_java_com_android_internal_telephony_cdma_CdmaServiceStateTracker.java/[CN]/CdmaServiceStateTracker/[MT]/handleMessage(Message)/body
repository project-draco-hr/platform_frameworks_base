{
  AsyncResult ar;
  int[] ints;
  String[] strings;
  if (!phone.mIsTheCurrentActivePhone) {
    loge("Received message " + msg + "["+ msg.what+ "]"+ " while being destroyed. Ignoring.");
    return;
  }
switch (msg.what) {
case EVENT_CDMA_SUBSCRIPTION_SOURCE_CHANGED:
    handleCdmaSubscriptionSource(mCdmaSSM.getCdmaSubscriptionSource());
  break;
case EVENT_RUIM_READY:
if (DBG) log("Receive EVENT_RUIM_READY and Send Request getCDMASubscription.");
getSubscriptionInfoAndStartPollingThreads();
phone.prepareEri();
break;
case EVENT_NV_READY:
getSubscriptionInfoAndStartPollingThreads();
break;
case EVENT_RADIO_STATE_CHANGED:
if (cm.getRadioState() == RadioState.RADIO_ON) {
handleCdmaSubscriptionSource(mCdmaSSM.getCdmaSubscriptionSource());
queueNextSignalStrengthPoll();
}
setPowerStateToDesired();
pollState();
break;
case EVENT_NETWORK_STATE_CHANGED_CDMA:
pollState();
break;
case EVENT_GET_SIGNAL_STRENGTH:
if (!(cm.getRadioState().isOn())) {
return;
}
ar=(AsyncResult)msg.obj;
onSignalStrengthResult(ar);
queueNextSignalStrengthPoll();
break;
case EVENT_GET_LOC_DONE_CDMA:
ar=(AsyncResult)msg.obj;
if (ar.exception == null) {
String states[]=(String[])ar.result;
int baseStationId=-1;
int baseStationLatitude=CdmaCellLocation.INVALID_LAT_LONG;
int baseStationLongitude=CdmaCellLocation.INVALID_LAT_LONG;
int systemId=-1;
int networkId=-1;
if (states.length > 9) {
try {
if (states[4] != null) {
baseStationId=Integer.parseInt(states[4]);
}
if (states[5] != null) {
baseStationLatitude=Integer.parseInt(states[5]);
}
if (states[6] != null) {
baseStationLongitude=Integer.parseInt(states[6]);
}
if (baseStationLatitude == 0 && baseStationLongitude == 0) {
baseStationLatitude=CdmaCellLocation.INVALID_LAT_LONG;
baseStationLongitude=CdmaCellLocation.INVALID_LAT_LONG;
}
if (states[8] != null) {
systemId=Integer.parseInt(states[8]);
}
if (states[9] != null) {
networkId=Integer.parseInt(states[9]);
}
}
 catch (NumberFormatException ex) {
loge("error parsing cell location data: " + ex);
}
}
cellLoc.setCellLocationData(baseStationId,baseStationLatitude,baseStationLongitude,systemId,networkId);
phone.notifyLocationChanged();
}
disableSingleLocationUpdate();
break;
case EVENT_POLL_STATE_REGISTRATION_CDMA:
case EVENT_POLL_STATE_OPERATOR_CDMA:
ar=(AsyncResult)msg.obj;
handlePollStateResult(msg.what,ar);
break;
case EVENT_POLL_STATE_CDMA_SUBSCRIPTION:
ar=(AsyncResult)msg.obj;
if (ar.exception == null) {
String cdmaSubscription[]=(String[])ar.result;
if (cdmaSubscription != null && cdmaSubscription.length >= 5) {
mMdn=cdmaSubscription[0];
parseSidNid(cdmaSubscription[1],cdmaSubscription[2]);
mMin=cdmaSubscription[3];
mPrlVersion=cdmaSubscription[4];
if (DBG) log("GET_CDMA_SUBSCRIPTION: MDN=" + mMdn);
mIsMinInfoReady=true;
updateOtaspState();
if (mIccCard != null) {
if (DBG) log("GET_CDMA_SUBSCRIPTION broadcast Icc state changed");
mIccCard.broadcastIccStateChangedIntent(IccCard.INTENT_VALUE_ICC_IMSI,null);
}
 else {
if (DBG) {
log("GET_CDMA_SUBSCRIPTION mIccCard is null (probably NV type device)" + " can't broadcast Icc state changed");
}
}
}
 else {
if (DBG) {
log("GET_CDMA_SUBSCRIPTION: error parsing cdmaSubscription params num=" + cdmaSubscription.length);
}
}
}
break;
case EVENT_POLL_SIGNAL_STRENGTH:
cm.getSignalStrength(obtainMessage(EVENT_GET_SIGNAL_STRENGTH));
break;
case EVENT_NITZ_TIME:
ar=(AsyncResult)msg.obj;
String nitzString=(String)((Object[])ar.result)[0];
long nitzReceiveTime=((Long)((Object[])ar.result)[1]).longValue();
setTimeFromNITZString(nitzString,nitzReceiveTime);
break;
case EVENT_SIGNAL_STRENGTH_UPDATE:
ar=(AsyncResult)msg.obj;
dontPollSignalStrength=true;
onSignalStrengthResult(ar);
break;
case EVENT_RUIM_RECORDS_LOADED:
updateSpnDisplay();
break;
case EVENT_LOCATION_UPDATES_ENABLED:
ar=(AsyncResult)msg.obj;
if (ar.exception == null) {
cm.getVoiceRegistrationState(obtainMessage(EVENT_GET_LOC_DONE_CDMA,null));
}
break;
case EVENT_ERI_FILE_LOADED:
if (DBG) log("[CdmaServiceStateTracker] ERI file has been loaded, repolling.");
pollState();
break;
case EVENT_OTA_PROVISION_STATUS_CHANGE:
ar=(AsyncResult)msg.obj;
if (ar.exception == null) {
ints=(int[])ar.result;
int otaStatus=ints[0];
if (otaStatus == Phone.CDMA_OTA_PROVISION_STATUS_COMMITTED || otaStatus == Phone.CDMA_OTA_PROVISION_STATUS_OTAPA_STOPPED) {
if (DBG) log("EVENT_OTA_PROVISION_STATUS_CHANGE: Complete, Reload MDN");
cm.getCDMASubscription(obtainMessage(EVENT_POLL_STATE_CDMA_SUBSCRIPTION));
}
}
break;
case EVENT_CDMA_PRL_VERSION_CHANGED:
ar=(AsyncResult)msg.obj;
if (ar.exception == null) {
ints=(int[])ar.result;
mPrlVersion=Integer.toString(ints[0]);
}
break;
default :
super.handleMessage(msg);
break;
}
}
