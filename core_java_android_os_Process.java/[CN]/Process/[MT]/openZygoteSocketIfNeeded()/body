{
  int retryCount;
  if (sPreviousZygoteOpenFailed) {
    retryCount=0;
  }
 else {
    retryCount=10;
  }
  for (int retry=0; (sZygoteSocket == null) && (retry < (retryCount + 1)); retry++) {
    if (retry > 0) {
      try {
        Log.i("Zygote","Zygote not up yet, sleeping...");
        Thread.sleep(ZYGOTE_RETRY_MILLIS);
      }
 catch (      InterruptedException ex) {
      }
    }
    try {
      sZygoteSocket=new LocalSocket();
      sZygoteSocket.connect(new LocalSocketAddress(ZYGOTE_SOCKET,LocalSocketAddress.Namespace.RESERVED));
      sZygoteInputStream=new DataInputStream(sZygoteSocket.getInputStream());
      sZygoteWriter=new BufferedWriter(new OutputStreamWriter(sZygoteSocket.getOutputStream()),256);
      Log.i("Zygote","Process: zygote socket opened");
      sPreviousZygoteOpenFailed=false;
      break;
    }
 catch (    IOException ex) {
      if (sZygoteSocket != null) {
        try {
          sZygoteSocket.close();
        }
 catch (        IOException ex2) {
          Log.e(LOG_TAG,"I/O exception on close after exception",ex2);
        }
      }
      sZygoteSocket=null;
    }
  }
  if (sZygoteSocket == null) {
    sPreviousZygoteOpenFailed=true;
    throw new ZygoteStartFailedEx("connect failed");
  }
}
