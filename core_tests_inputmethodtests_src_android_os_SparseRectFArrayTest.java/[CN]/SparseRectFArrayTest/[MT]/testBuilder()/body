{
  final RectF TEMP_RECT=new RectF(10.0f,20.0f,30.0f,40.0f);
  final SparseRectFArrayBuilder builder=new SparseRectFArrayBuilder();
  builder.append(100,TEMP_RECT.left,TEMP_RECT.top,TEMP_RECT.right,TEMP_RECT.bottom);
  assertNull(builder.build().get(-1));
  assertNull(builder.build().get(0));
  assertNull(builder.build().get(99));
  assertEquals(TEMP_RECT,builder.build().get(100));
  assertNull(builder.build().get(101));
  builder.reset();
  assertNull(builder.build().get(100));
  builder.reset();
  for (int i=0; i < MANY_RECTS.length; i++) {
    final RectF rect=MANY_RECTS[i];
    if (rect != null) {
      builder.append(i,rect.left,rect.top,rect.right,rect.bottom);
    }
  }
  final SparseRectFArray array=builder.build();
  for (int i=0; i < MANY_RECTS.length; i++) {
    final RectF rect=MANY_RECTS[i];
    assertEquals(rect,array.get(i));
  }
  final SparseRectFArray array2=builder.build();
  for (int i=0; i < MANY_RECTS.length; i++) {
    final RectF rect=MANY_RECTS[i];
    assertEquals(rect,array2.get(i));
  }
  assertEqualRects(array,array2);
  final SparseRectFArray array3=cloneViaParcel(array);
  for (int i=0; i < MANY_RECTS.length; i++) {
    final RectF rect=MANY_RECTS[i];
    assertEquals(rect,array3.get(i));
  }
  assertEqualRects(array,array3);
  builder.reset();
  assertNull(builder.build().get(0));
}
