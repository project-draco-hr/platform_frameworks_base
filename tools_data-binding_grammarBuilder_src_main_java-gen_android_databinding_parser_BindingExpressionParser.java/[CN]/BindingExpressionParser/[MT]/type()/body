{
  TypeContext _localctx=new TypeContext(_ctx,getState());
  enterRule(_localctx,24,RULE_type);
  try {
    int _alt;
    setState(192);
switch (_input.LA(1)) {
case Identifier:
      enterOuterAlt(_localctx,1);
{
      setState(176);
      classOrInterfaceType();
      setState(181);
      _errHandler.sync(this);
      _alt=getInterpreter().adaptivePredict(_input,10,_ctx);
      while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt == 1) {
{
{
              setState(177);
              match(T__34);
              setState(178);
              match(T__40);
            }
          }
        }
        setState(183);
        _errHandler.sync(this);
        _alt=getInterpreter().adaptivePredict(_input,10,_ctx);
      }
    }
  break;
case T__42:
case T__39:
case T__29:
case T__23:
case T__22:
case T__21:
case T__19:
case T__16:
enterOuterAlt(_localctx,2);
{
setState(184);
primitiveType();
setState(189);
_errHandler.sync(this);
_alt=getInterpreter().adaptivePredict(_input,11,_ctx);
while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
  if (_alt == 1) {
{
{
        setState(185);
        match(T__34);
        setState(186);
        match(T__40);
      }
    }
  }
  setState(191);
  _errHandler.sync(this);
  _alt=getInterpreter().adaptivePredict(_input,11,_ctx);
}
}
break;
default :
throw new NoViableAltException(this);
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
exitRule();
}
return _localctx;
}
