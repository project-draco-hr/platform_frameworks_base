{
  if (dumping) {
    pw.println("Activity manager dump options:");
    pw.println("  [-a] [-c] [-p PACKAGE] [-h] [WHAT] ...");
    pw.println("  WHAT may be one of:");
    pw.println("    a[ctivities]: activity stack state");
    pw.println("    r[recents]: recent activities state");
    pw.println("    b[roadcasts] [PACKAGE_NAME] [history [-s]]: broadcast state");
    pw.println("    broadcast-stats [PACKAGE_NAME]: aggregated broadcast statistics");
    pw.println("    i[ntents] [PACKAGE_NAME]: pending intent state");
    pw.println("    p[rocesses] [PACKAGE_NAME]: process state");
    pw.println("    o[om]: out of memory management");
    pw.println("    perm[issions]: URI permission grant state");
    pw.println("    prov[iders] [COMP_SPEC ...]: content provider state");
    pw.println("    provider [COMP_SPEC]: provider client-side state");
    pw.println("    s[ervices] [COMP_SPEC ...]: service state");
    pw.println("    as[sociations]: tracked app associations");
    pw.println("    service [COMP_SPEC]: service client-side state");
    pw.println("    package [PACKAGE_NAME]: all state related to given package");
    pw.println("    all: dump all activities");
    pw.println("    top: dump the top activity");
    pw.println("  WHAT may also be a COMP_SPEC to dump activities.");
    pw.println("  COMP_SPEC may be a component name (com.foo/.myApp),");
    pw.println("    a partial substring in a component name, a");
    pw.println("    hex object identifier.");
    pw.println("  -a: include all available server state.");
    pw.println("  -c: include client state.");
    pw.println("  -p: limit output to given package.");
    pw.println("  --checkin: output checkin format, resetting data.");
    pw.println("  --C: output checkin format, not resetting data.");
  }
 else {
    pw.println("Activity manager (activity) commands:");
    pw.println("  help");
    pw.println("    Print this help text.");
    pw.println("  force-stop [--user <USER_ID> | all | current] <PACKAGE>");
    pw.println("    Completely stop the given application package.");
    pw.println("  kill [--user <USER_ID> | all | current] <PACKAGE>");
    pw.println("    Kill all processes associated with the given application.");
    pw.println("  kill-all");
    pw.println("    Kill all processes that are safe to kill (cached, etc).");
    pw.println("  write");
    pw.println("    Write all pending state to storage.");
    pw.println("  track-associations");
    pw.println("    Enable association tracking.");
    pw.println("  untrack-associations");
    pw.println("    Disable and clear association tracking.");
    pw.println("  is-user-stopped <USER_ID>");
    pw.println("    Returns whether <USER_ID> has been stopped or not.");
    pw.println("  lenient-background-check [<true|false>]");
    pw.println("    Optionally controls lenient background check mode, returns current mode.");
    pw.println("  get-uid-state <UID>");
    pw.println("    Gets the process state of an app given its <UID>.");
    pw.println("  attach-agent <PROCESS> <FILE>");
    pw.println("    Attach an agent to the specified <PROCESS>, which may be either a process name or a PID.");
  }
}
