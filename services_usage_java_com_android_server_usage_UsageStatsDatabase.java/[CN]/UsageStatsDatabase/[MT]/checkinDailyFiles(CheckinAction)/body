{
synchronized (mLock) {
    final TimeSparseArray<AtomicFile> files=mSortedStatFiles[UsageStatsManager.INTERVAL_DAILY];
    final int fileCount=files.size();
    int lastCheckin=-1;
    for (int i=0; i < fileCount - 1; i++) {
      if (files.valueAt(i).getBaseFile().getPath().endsWith(CHECKED_IN_SUFFIX)) {
        lastCheckin=i;
      }
    }
    final int start=lastCheckin + 1;
    if (start == fileCount - 1) {
      return true;
    }
    try {
      IntervalStats stats=new IntervalStats();
      for (int i=start; i < fileCount - 1; i++) {
        UsageStatsXml.read(files.valueAt(i),stats);
        if (!checkinAction.checkin(stats)) {
          return false;
        }
      }
    }
 catch (    IOException e) {
      Slog.e(TAG,"Failed to check-in",e);
      return false;
    }
    for (int i=start; i < fileCount - 1; i++) {
      final AtomicFile file=files.valueAt(i);
      final File checkedInFile=new File(file.getBaseFile().getPath() + CHECKED_IN_SUFFIX);
      if (!file.getBaseFile().renameTo(checkedInFile)) {
        Slog.e(TAG,"Failed to mark file " + file.getBaseFile().getPath() + " as checked-in");
        return true;
      }
      files.setValueAt(i,new AtomicFile(checkedInFile));
    }
  }
  return true;
}
