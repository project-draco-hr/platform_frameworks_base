{
synchronized (mLock) {
    final TimeSparseArray<AtomicFile> files=mSortedStatFiles[UsageStatsManager.INTERVAL_DAILY];
    final int fileCount=files.size();
    int start=0;
    while (start < fileCount - 1) {
      if (!files.valueAt(start).getBaseFile().getName().endsWith("-c")) {
        break;
      }
      start++;
    }
    if (start == fileCount - 1) {
      return true;
    }
    try {
      IntervalStats stats=new IntervalStats();
      for (int i=start; i < fileCount - 1; i++) {
        UsageStatsXml.read(files.valueAt(i),stats);
        if (!checkinAction.checkin(stats)) {
          return false;
        }
      }
    }
 catch (    IOException e) {
      Slog.e(TAG,"Failed to check-in",e);
      return false;
    }
    for (int i=start; i < fileCount - 1; i++) {
      final AtomicFile file=files.valueAt(i);
      final File checkedInFile=new File(file.getBaseFile().getParent(),file.getBaseFile().getName() + "-c");
      if (!file.getBaseFile().renameTo(checkedInFile)) {
        Slog.e(TAG,"Failed to mark file " + file.getBaseFile().getPath() + " as checked-in");
        return true;
      }
    }
  }
  return true;
}
