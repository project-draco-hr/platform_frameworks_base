{
synchronized (mLock) {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    if (KEY_USAGE_STATS.equals(key)) {
      prune(System.currentTimeMillis());
      DataOutputStream out=new DataOutputStream(baos);
      try {
        out.writeInt(BACKUP_VERSION);
        out.writeInt(mSortedStatFiles[UsageStatsManager.INTERVAL_DAILY].size());
        for (int i=0; i < mSortedStatFiles[UsageStatsManager.INTERVAL_DAILY].size(); i++) {
          writeIntervalStatsToStream(out,mSortedStatFiles[UsageStatsManager.INTERVAL_DAILY].valueAt(i));
        }
        out.writeInt(mSortedStatFiles[UsageStatsManager.INTERVAL_WEEKLY].size());
        for (int i=0; i < mSortedStatFiles[UsageStatsManager.INTERVAL_WEEKLY].size(); i++) {
          writeIntervalStatsToStream(out,mSortedStatFiles[UsageStatsManager.INTERVAL_WEEKLY].valueAt(i));
        }
        out.writeInt(mSortedStatFiles[UsageStatsManager.INTERVAL_MONTHLY].size());
        for (int i=0; i < mSortedStatFiles[UsageStatsManager.INTERVAL_MONTHLY].size(); i++) {
          writeIntervalStatsToStream(out,mSortedStatFiles[UsageStatsManager.INTERVAL_MONTHLY].valueAt(i));
        }
        out.writeInt(mSortedStatFiles[UsageStatsManager.INTERVAL_YEARLY].size());
        for (int i=0; i < mSortedStatFiles[UsageStatsManager.INTERVAL_YEARLY].size(); i++) {
          writeIntervalStatsToStream(out,mSortedStatFiles[UsageStatsManager.INTERVAL_YEARLY].valueAt(i));
        }
        if (DEBUG)         Slog.i(TAG,"Written " + baos.size() + " bytes of data");
      }
 catch (      IOException ioe) {
        Slog.d(TAG,"Failed to write data to output stream",ioe);
        baos.reset();
      }
    }
    return baos.toByteArray();
  }
}
