{
  if (root.getVisibility() != View.VISIBLE) {
    return;
  }
  Matrix parentMatrix=mMatrixStack.get(matrixStackIndex);
  matrixStackIndex++;
  Matrix matrix;
  if (mMatrixStack.size() > matrixStackIndex) {
    matrix=mMatrixStack.get(matrixStackIndex);
    matrix.set(parentMatrix);
  }
 else {
    matrix=new Matrix(parentMatrix);
    mMatrixStack.add(matrix);
  }
  matrix.preTranslate(root.getLeft(),root.getTop());
  int left=parentLeft + root.getLeft();
  int top=parentTop + root.getTop();
  Matrix transform=root.getTransformation();
  if (transform != null) {
    matrix.preConcat(transform);
  }
  if (root.getText() != null || root.getContentDescription() != null) {
    TextEntry te=new TextEntry(root,parentLeft,parentTop,matrix);
    mTextRects.add(te);
  }
  final int N=root.getChildCount();
  if (N > 0) {
    left-=root.getScrollX();
    top-=root.getScrollY();
    matrix.preTranslate(-root.getScrollX(),-root.getScrollY());
    for (int i=0; i < N; i++) {
      AssistStructure.ViewNode child=root.getChildAt(i);
      buildTextRects(child,matrixStackIndex,left,top);
    }
  }
}
