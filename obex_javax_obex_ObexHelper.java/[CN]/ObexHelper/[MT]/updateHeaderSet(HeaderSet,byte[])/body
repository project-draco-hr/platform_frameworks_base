{
  int index=0;
  int length=0;
  int headerID;
  byte[] value=null;
  byte[] body=null;
  HeaderSet headerImpl=header;
  try {
    while (index < headerArray.length) {
      headerID=0xFF & headerArray[index];
switch (headerID & (0xC0)) {
case 0x00:
case 0x40:
        boolean trimTail=true;
      index++;
    length=0xFF & headerArray[index];
  length=length << 8;
index++;
length+=0xFF & headerArray[index];
length-=3;
index++;
value=new byte[length];
System.arraycopy(headerArray,index,value,0,length);
if (length == 0 || (length > 0 && (value[length - 1] != 0))) {
trimTail=false;
}
switch (headerID) {
case HeaderSet.TYPE:
try {
if (trimTail == false) {
headerImpl.setHeader(headerID,new String(value,0,value.length,"ISO8859_1"));
}
 else {
headerImpl.setHeader(headerID,new String(value,0,value.length - 1,"ISO8859_1"));
}
}
 catch (UnsupportedEncodingException e) {
throw e;
}
break;
case HeaderSet.AUTH_CHALLENGE:
headerImpl.mAuthChall=new byte[length];
System.arraycopy(headerArray,index,headerImpl.mAuthChall,0,length);
break;
case HeaderSet.AUTH_RESPONSE:
headerImpl.mAuthResp=new byte[length];
System.arraycopy(headerArray,index,headerImpl.mAuthResp,0,length);
break;
case HeaderSet.BODY:
case HeaderSet.END_OF_BODY:
body=new byte[length + 1];
body[0]=(byte)headerID;
System.arraycopy(headerArray,index,body,1,length);
break;
case HeaderSet.TIME_ISO_8601:
try {
String dateString=new String(value,"ISO8859_1");
Calendar temp=Calendar.getInstance();
if ((dateString.length() == 16) && (dateString.charAt(15) == 'Z')) {
temp.setTimeZone(TimeZone.getTimeZone("UTC"));
}
temp.set(Calendar.YEAR,Integer.parseInt(dateString.substring(0,4)));
temp.set(Calendar.MONTH,Integer.parseInt(dateString.substring(4,6)));
temp.set(Calendar.DAY_OF_MONTH,Integer.parseInt(dateString.substring(6,8)));
temp.set(Calendar.HOUR_OF_DAY,Integer.parseInt(dateString.substring(9,11)));
temp.set(Calendar.MINUTE,Integer.parseInt(dateString.substring(11,13)));
temp.set(Calendar.SECOND,Integer.parseInt(dateString.substring(13,15)));
headerImpl.setHeader(HeaderSet.TIME_ISO_8601,temp);
}
 catch (UnsupportedEncodingException e) {
throw e;
}
break;
default :
if ((headerID & 0xC0) == 0x00) {
headerImpl.setHeader(headerID,ObexHelper.convertToUnicode(value,true));
}
 else {
headerImpl.setHeader(headerID,value);
}
}
index+=length;
break;
case 0x80:
index++;
try {
headerImpl.setHeader(headerID,Byte.valueOf(headerArray[index]));
}
 catch (Exception e) {
}
index++;
break;
case 0xC0:
index++;
value=new byte[4];
System.arraycopy(headerArray,index,value,0,4);
try {
if (headerID != HeaderSet.TIME_4_BYTE) {
if (headerID == HeaderSet.CONNECTION_ID) {
headerImpl.mConnectionID=new byte[4];
System.arraycopy(value,0,headerImpl.mConnectionID,0,4);
}
 else {
headerImpl.setHeader(headerID,Long.valueOf(convertToLong(value)));
}
}
 else {
Calendar temp=Calendar.getInstance();
temp.setTime(new Date(convertToLong(value) * 1000L));
headerImpl.setHeader(HeaderSet.TIME_4_BYTE,temp);
}
}
 catch (Exception e) {
throw new IOException("Header was not formatted properly");
}
index+=4;
break;
}
}
}
 catch (IOException e) {
throw new IOException("Header was not formatted properly");
}
return body;
}
