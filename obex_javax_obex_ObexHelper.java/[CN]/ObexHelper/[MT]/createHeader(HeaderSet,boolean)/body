{
  Long intHeader=null;
  String stringHeader=null;
  Calendar dateHeader=null;
  Byte byteHeader=null;
  StringBuffer buffer=null;
  byte[] value=null;
  byte[] result=null;
  byte[] lengthArray=new byte[2];
  int length;
  HeaderSet headImpl=null;
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  headImpl=head;
  try {
    if ((headImpl.mConnectionID != null) && (headImpl.getHeader(HeaderSet.TARGET) == null)) {
      out.write((byte)HeaderSet.CONNECTION_ID);
      out.write(headImpl.mConnectionID);
    }
    intHeader=(Long)headImpl.getHeader(HeaderSet.COUNT);
    if (intHeader != null) {
      out.write((byte)HeaderSet.COUNT);
      value=ObexHelper.convertToByteArray(intHeader.longValue());
      out.write(value);
      if (nullOut) {
        headImpl.setHeader(HeaderSet.COUNT,null);
      }
    }
    stringHeader=(String)headImpl.getHeader(HeaderSet.NAME);
    if (stringHeader != null) {
      out.write((byte)HeaderSet.NAME);
      value=ObexHelper.convertToUnicodeByteArray(stringHeader);
      length=value.length + 3;
      lengthArray[0]=(byte)(0xFF & (length >> 8));
      lengthArray[1]=(byte)(0xFF & length);
      out.write(lengthArray);
      out.write(value);
      if (nullOut) {
        headImpl.setHeader(HeaderSet.NAME,null);
      }
    }
 else     if (headImpl.getEmptyNameHeader()) {
      out.write((byte)HeaderSet.NAME);
      lengthArray[0]=(byte)0x00;
      lengthArray[1]=(byte)0x03;
      out.write(lengthArray);
    }
    stringHeader=(String)headImpl.getHeader(HeaderSet.TYPE);
    if (stringHeader != null) {
      out.write((byte)HeaderSet.TYPE);
      try {
        value=stringHeader.getBytes("ISO8859_1");
      }
 catch (      UnsupportedEncodingException e) {
        throw e;
      }
      length=value.length + 4;
      lengthArray[0]=(byte)(255 & (length >> 8));
      lengthArray[1]=(byte)(255 & length);
      out.write(lengthArray);
      out.write(value);
      out.write(0x00);
      if (nullOut) {
        headImpl.setHeader(HeaderSet.TYPE,null);
      }
    }
    intHeader=(Long)headImpl.getHeader(HeaderSet.LENGTH);
    if (intHeader != null) {
      out.write((byte)HeaderSet.LENGTH);
      value=ObexHelper.convertToByteArray(intHeader.longValue());
      out.write(value);
      if (nullOut) {
        headImpl.setHeader(HeaderSet.LENGTH,null);
      }
    }
    dateHeader=(Calendar)headImpl.getHeader(HeaderSet.TIME_ISO_8601);
    if (dateHeader != null) {
      buffer=new StringBuffer();
      int temp=dateHeader.get(Calendar.YEAR);
      for (int i=temp; i < 1000; i=i * 10) {
        buffer.append("0");
      }
      buffer.append(temp);
      temp=dateHeader.get(Calendar.MONTH);
      if (temp < 10) {
        buffer.append("0");
      }
      buffer.append(temp);
      temp=dateHeader.get(Calendar.DAY_OF_MONTH);
      if (temp < 10) {
        buffer.append("0");
      }
      buffer.append(temp);
      buffer.append("T");
      temp=dateHeader.get(Calendar.HOUR_OF_DAY);
      if (temp < 10) {
        buffer.append("0");
      }
      buffer.append(temp);
      temp=dateHeader.get(Calendar.MINUTE);
      if (temp < 10) {
        buffer.append("0");
      }
      buffer.append(temp);
      temp=dateHeader.get(Calendar.SECOND);
      if (temp < 10) {
        buffer.append("0");
      }
      buffer.append(temp);
      if (dateHeader.getTimeZone().getID().equals("UTC")) {
        buffer.append("Z");
      }
      try {
        value=buffer.toString().getBytes("ISO8859_1");
      }
 catch (      UnsupportedEncodingException e) {
        throw e;
      }
      length=value.length + 3;
      lengthArray[0]=(byte)(255 & (length >> 8));
      lengthArray[1]=(byte)(255 & length);
      out.write(HeaderSet.TIME_ISO_8601);
      out.write(lengthArray);
      out.write(value);
      if (nullOut) {
        headImpl.setHeader(HeaderSet.TIME_ISO_8601,null);
      }
    }
    dateHeader=(Calendar)headImpl.getHeader(HeaderSet.TIME_4_BYTE);
    if (dateHeader != null) {
      out.write(HeaderSet.TIME_4_BYTE);
      value=ObexHelper.convertToByteArray(dateHeader.getTime().getTime() / 1000L);
      out.write(value);
      if (nullOut) {
        headImpl.setHeader(HeaderSet.TIME_4_BYTE,null);
      }
    }
    stringHeader=(String)headImpl.getHeader(HeaderSet.DESCRIPTION);
    if (stringHeader != null) {
      out.write((byte)HeaderSet.DESCRIPTION);
      value=ObexHelper.convertToUnicodeByteArray(stringHeader);
      length=value.length + 3;
      lengthArray[0]=(byte)(255 & (length >> 8));
      lengthArray[1]=(byte)(255 & length);
      out.write(lengthArray);
      out.write(value);
      if (nullOut) {
        headImpl.setHeader(HeaderSet.DESCRIPTION,null);
      }
    }
    value=(byte[])headImpl.getHeader(HeaderSet.TARGET);
    if (value != null) {
      out.write((byte)HeaderSet.TARGET);
      length=value.length + 3;
      lengthArray[0]=(byte)(255 & (length >> 8));
      lengthArray[1]=(byte)(255 & length);
      out.write(lengthArray);
      out.write(value);
      if (nullOut) {
        headImpl.setHeader(HeaderSet.TARGET,null);
      }
    }
    value=(byte[])headImpl.getHeader(HeaderSet.HTTP);
    if (value != null) {
      out.write((byte)HeaderSet.HTTP);
      length=value.length + 3;
      lengthArray[0]=(byte)(255 & (length >> 8));
      lengthArray[1]=(byte)(255 & length);
      out.write(lengthArray);
      out.write(value);
      if (nullOut) {
        headImpl.setHeader(HeaderSet.HTTP,null);
      }
    }
    value=(byte[])headImpl.getHeader(HeaderSet.WHO);
    if (value != null) {
      out.write((byte)HeaderSet.WHO);
      length=value.length + 3;
      lengthArray[0]=(byte)(255 & (length >> 8));
      lengthArray[1]=(byte)(255 & length);
      out.write(lengthArray);
      out.write(value);
      if (nullOut) {
        headImpl.setHeader(HeaderSet.WHO,null);
      }
    }
    value=(byte[])headImpl.getHeader(HeaderSet.APPLICATION_PARAMETER);
    if (value != null) {
      out.write((byte)HeaderSet.APPLICATION_PARAMETER);
      length=value.length + 3;
      lengthArray[0]=(byte)(255 & (length >> 8));
      lengthArray[1]=(byte)(255 & length);
      out.write(lengthArray);
      out.write(value);
      if (nullOut) {
        headImpl.setHeader(HeaderSet.APPLICATION_PARAMETER,null);
      }
    }
    value=(byte[])headImpl.getHeader(HeaderSet.OBJECT_CLASS);
    if (value != null) {
      out.write((byte)HeaderSet.OBJECT_CLASS);
      length=value.length + 3;
      lengthArray[0]=(byte)(255 & (length >> 8));
      lengthArray[1]=(byte)(255 & length);
      out.write(lengthArray);
      out.write(value);
      if (nullOut) {
        headImpl.setHeader(HeaderSet.OBJECT_CLASS,null);
      }
    }
    for (int i=0; i < 16; i++) {
      stringHeader=(String)headImpl.getHeader(i + 0x30);
      if (stringHeader != null) {
        out.write((byte)i + 0x30);
        value=ObexHelper.convertToUnicodeByteArray(stringHeader);
        length=value.length + 3;
        lengthArray[0]=(byte)(255 & (length >> 8));
        lengthArray[1]=(byte)(255 & length);
        out.write(lengthArray);
        out.write(value);
        if (nullOut) {
          headImpl.setHeader(i + 0x30,null);
        }
      }
      value=(byte[])headImpl.getHeader(i + 0x70);
      if (value != null) {
        out.write((byte)i + 0x70);
        length=value.length + 3;
        lengthArray[0]=(byte)(255 & (length >> 8));
        lengthArray[1]=(byte)(255 & length);
        out.write(lengthArray);
        out.write(value);
        if (nullOut) {
          headImpl.setHeader(i + 0x70,null);
        }
      }
      byteHeader=(Byte)headImpl.getHeader(i + 0xB0);
      if (byteHeader != null) {
        out.write((byte)i + 0xB0);
        out.write(byteHeader.byteValue());
        if (nullOut) {
          headImpl.setHeader(i + 0xB0,null);
        }
      }
      intHeader=(Long)headImpl.getHeader(i + 0xF0);
      if (intHeader != null) {
        out.write((byte)i + 0xF0);
        out.write(ObexHelper.convertToByteArray(intHeader.longValue()));
        if (nullOut) {
          headImpl.setHeader(i + 0xF0,null);
        }
      }
    }
    if (headImpl.mAuthChall != null) {
      out.write((byte)HeaderSet.AUTH_CHALLENGE);
      length=headImpl.mAuthChall.length + 3;
      lengthArray[0]=(byte)(255 & (length >> 8));
      lengthArray[1]=(byte)(255 & length);
      out.write(lengthArray);
      out.write(headImpl.mAuthChall);
      if (nullOut) {
        headImpl.mAuthChall=null;
      }
    }
    if (headImpl.mAuthResp != null) {
      out.write((byte)HeaderSet.AUTH_RESPONSE);
      length=headImpl.mAuthResp.length + 3;
      lengthArray[0]=(byte)(255 & (length >> 8));
      lengthArray[1]=(byte)(255 & length);
      out.write(lengthArray);
      out.write(headImpl.mAuthResp);
      if (nullOut) {
        headImpl.mAuthResp=null;
      }
    }
  }
 catch (  IOException e) {
  }
 finally {
    result=out.toByteArray();
    try {
      out.close();
    }
 catch (    Exception ex) {
    }
  }
  return result;
}
