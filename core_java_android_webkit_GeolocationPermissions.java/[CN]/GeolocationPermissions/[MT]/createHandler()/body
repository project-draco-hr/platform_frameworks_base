{
  if (mHandler == null) {
    mHandler=new Handler(){
      @Override public void handleMessage(      Message msg){
switch (msg.what) {
case GET_ORIGINS:
{
            Set origins=nativeGetOrigins();
            ValueCallback callback=(ValueCallback)msg.obj;
            Map values=new HashMap<String,Object>();
            values.put(CALLBACK,callback);
            values.put(ORIGINS,origins);
            postUIMessage(Message.obtain(null,RETURN_ORIGINS,values));
          }
        break;
case GET_ALLOWED:
{
        Map values=(Map)msg.obj;
        String origin=(String)values.get(ORIGIN);
        ValueCallback callback=(ValueCallback)values.get(CALLBACK);
        boolean allowed=nativeGetAllowed(origin);
        Map retValues=new HashMap<String,Object>();
        retValues.put(CALLBACK,callback);
        retValues.put(ALLOWED,new Boolean(allowed));
        postUIMessage(Message.obtain(null,RETURN_ALLOWED,retValues));
      }
    break;
case CLEAR:
  nativeClear((String)msg.obj);
break;
case ALLOW:
nativeAllow((String)msg.obj);
break;
case CLEAR_ALL:
nativeClearAll();
break;
}
}
}
;
if (mQueuedMessages != null) {
while (!mQueuedMessages.isEmpty()) {
mHandler.sendMessage(mQueuedMessages.remove(0));
}
mQueuedMessages=null;
}
}
}
