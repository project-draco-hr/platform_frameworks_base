{
  float v=in;
  final float ns=1.0f / 1000000000.0f;
  float v1=mV[mIndex];
  if ((v - v1) > 180) {
    v-=360;
  }
 else   if ((v1 - v) > 180) {
    v+=360;
  }
  mIndex++;
  if (mIndex >= COUNT * 2)   mIndex=COUNT;
  mV[mIndex]=v;
  mT[mIndex]=time;
  mV[mIndex - COUNT]=v;
  mT[mIndex - COUNT]=time;
  float A, B, C, D, E;
  float a, b;
  int i;
  A=B=C=D=E=0;
  for (i=0; i < COUNT - 1; i++) {
    final int j=mIndex - 1 - i;
    final float Z=mV[j];
    final float T=(mT[j] / 2 + mT[j + 1] / 2 - time) * ns;
    float dT=(mT[j] - mT[j + 1]) * ns;
    dT*=dT;
    A+=Z * dT;
    B+=T * (T * dT);
    C+=(T * dT);
    D+=Z * (T * dT);
    E+=dT;
  }
  b=(A * B + C * D) / (E * B + C * C);
  a=(E * b - A) / C;
  float f=b + PREDICTION_TIME * a;
  f*=(1.0f / 360.0f);
  if (((f >= 0) ? f : -f) >= 0.5f)   f=f - (float)Math.ceil(f + 0.5f) + 1.0f;
  if (f < 0)   f+=1.0f;
  f*=360.0f;
  return f;
}
