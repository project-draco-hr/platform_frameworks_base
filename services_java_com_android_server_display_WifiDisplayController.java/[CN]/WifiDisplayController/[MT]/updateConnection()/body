{
  if (mRemoteDisplay != null && mConnectedDevice != mDesiredDevice) {
    Slog.i(TAG,"Stopped listening for RTSP connection on " + mRemoteDisplayInterface + " from Wifi display: "+ mConnectedDevice.deviceName);
    if (mRemoteDisplayConnected) {
      mAudioManager.setRemoteSubmixOn(false,REMOTE_SUBMIX_ADDRESS);
    }
    mRemoteDisplay.dispose();
    mRemoteDisplay=null;
    mRemoteDisplayInterface=null;
    mRemoteDisplayConnected=false;
    mHandler.removeCallbacks(mRtspTimeout);
    mHandler.post(new Runnable(){
      @Override public void run(){
        mListener.onDisplayDisconnected();
      }
    }
);
  }
  if (mConnectedDevice != null && mConnectedDevice != mDesiredDevice) {
    Slog.i(TAG,"Disconnecting from Wifi display: " + mConnectedDevice.deviceName);
    final WifiP2pDevice oldDevice=mConnectedDevice;
    mWifiP2pManager.removeGroup(mWifiP2pChannel,new ActionListener(){
      @Override public void onSuccess(){
        Slog.i(TAG,"Disconnected from Wifi display: " + oldDevice.deviceName);
        next();
      }
      @Override public void onFailure(      int reason){
        Slog.i(TAG,"Failed to disconnect from Wifi display: " + oldDevice.deviceName + ", reason="+ reason);
        next();
      }
      private void next(){
        if (mConnectedDevice == oldDevice) {
          mConnectedDevice=null;
          updateConnection();
        }
      }
    }
);
    return;
  }
  if (mConnectingDevice != null && mConnectingDevice != mDesiredDevice) {
    Slog.i(TAG,"Canceling connection to Wifi display: " + mConnectingDevice.deviceName);
    mHandler.removeCallbacks(mConnectionTimeout);
    final WifiP2pDevice oldDevice=mConnectingDevice;
    mWifiP2pManager.cancelConnect(mWifiP2pChannel,new ActionListener(){
      @Override public void onSuccess(){
        Slog.i(TAG,"Canceled connection to Wifi display: " + oldDevice.deviceName);
        next();
      }
      @Override public void onFailure(      int reason){
        Slog.i(TAG,"Failed to cancel connection to Wifi display: " + oldDevice.deviceName + ", reason="+ reason);
        next();
      }
      private void next(){
        if (mConnectingDevice == oldDevice) {
          mConnectingDevice=null;
          updateConnection();
        }
      }
    }
);
    return;
  }
  if (mDesiredDevice == null) {
    return;
  }
  if (mConnectedDevice == null && mConnectingDevice == null) {
    Slog.i(TAG,"Connecting to Wifi display: " + mDesiredDevice.deviceName);
    mConnectingDevice=mDesiredDevice;
    WifiP2pConfig config=new WifiP2pConfig();
    config.deviceAddress=mConnectingDevice.deviceAddress;
    final WifiDisplay display=createWifiDisplay(mConnectingDevice);
    mHandler.post(new Runnable(){
      @Override public void run(){
        mListener.onDisplayConnecting(display);
      }
    }
);
    final WifiP2pDevice newDevice=mDesiredDevice;
    mWifiP2pManager.connect(mWifiP2pChannel,config,new ActionListener(){
      @Override public void onSuccess(){
        Slog.i(TAG,"Initiated connection to Wifi display: " + newDevice.deviceName);
        mHandler.postDelayed(mConnectionTimeout,CONNECTION_TIMEOUT_SECONDS * 1000);
      }
      @Override public void onFailure(      int reason){
        if (mConnectingDevice == newDevice) {
          Slog.i(TAG,"Failed to initiate connection to Wifi display: " + newDevice.deviceName + ", reason="+ reason);
          mConnectingDevice=null;
          handleConnectionFailure(false);
        }
      }
    }
);
    return;
  }
  if (mConnectedDevice != null && mRemoteDisplay == null) {
    Inet4Address addr=getInterfaceAddress(mConnectedDeviceGroupInfo);
    if (addr == null) {
      Slog.i(TAG,"Failed to get local interface address for communicating " + "with Wifi display: " + mConnectedDevice.deviceName);
      handleConnectionFailure(false);
      return;
    }
    final WifiP2pDevice oldDevice=mConnectedDevice;
    final int port=getPortNumber(mConnectedDevice);
    final String iface=addr.getHostAddress() + ":" + port;
    mRemoteDisplayInterface=iface;
    Slog.i(TAG,"Listening for RTSP connection on " + iface + " from Wifi display: "+ mConnectedDevice.deviceName);
    mRemoteDisplay=RemoteDisplay.listen(iface,new RemoteDisplay.Listener(){
      @Override public void onDisplayConnected(      final Surface surface,      final int width,      final int height,      final int flags){
        if (mConnectedDevice == oldDevice && !mRemoteDisplayConnected) {
          Slog.i(TAG,"Opened RTSP connection with Wifi display: " + mConnectedDevice.deviceName);
          mRemoteDisplayConnected=true;
          mHandler.removeCallbacks(mRtspTimeout);
          mAudioManager.setRemoteSubmixOn(true,REMOTE_SUBMIX_ADDRESS);
          final WifiDisplay display=createWifiDisplay(mConnectedDevice);
          mHandler.post(new Runnable(){
            @Override public void run(){
              mListener.onDisplayConnected(display,surface,width,height,flags);
            }
          }
);
        }
      }
      @Override public void onDisplayDisconnected(){
        if (mConnectedDevice == oldDevice) {
          Slog.i(TAG,"Closed RTSP connection with Wifi display: " + mConnectedDevice.deviceName);
          mHandler.removeCallbacks(mRtspTimeout);
          disconnect();
        }
      }
      @Override public void onDisplayError(      int error){
        if (mConnectedDevice == oldDevice) {
          Slog.i(TAG,"Lost RTSP connection with Wifi display due to error " + error + ": "+ mConnectedDevice.deviceName);
          mHandler.removeCallbacks(mRtspTimeout);
          handleConnectionFailure(false);
        }
      }
    }
,mHandler);
    mHandler.postDelayed(mRtspTimeout,RTSP_TIMEOUT_SECONDS * 1000);
  }
}
