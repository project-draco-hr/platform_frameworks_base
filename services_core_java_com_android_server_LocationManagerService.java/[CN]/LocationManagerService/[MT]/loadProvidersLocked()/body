{
  PassiveProvider passiveProvider=new PassiveProvider(this);
  addProviderLocked(passiveProvider);
  mEnabledProviders.add(passiveProvider.getName());
  mPassiveProvider=passiveProvider;
  GpsLocationProvider gpsProvider=new GpsLocationProvider(mContext,this,mLocationHandler.getLooper());
  if (GpsLocationProvider.isSupported()) {
    mGpsStatusProvider=gpsProvider.getGpsStatusProvider();
    mNetInitiatedListener=gpsProvider.getNetInitiatedListener();
    addProviderLocked(gpsProvider);
    mRealProviders.put(LocationManager.GPS_PROVIDER,gpsProvider);
  }
  Resources resources=mContext.getResources();
  ArrayList<String> providerPackageNames=new ArrayList<String>();
  String[] pkgs=resources.getStringArray(com.android.internal.R.array.config_locationProviderPackageNames);
  if (D)   Log.d(TAG,"certificates for location providers pulled from: " + Arrays.toString(pkgs));
  if (pkgs != null)   providerPackageNames.addAll(Arrays.asList(pkgs));
  ensureFallbackFusedProviderPresentLocked(providerPackageNames);
  LocationProviderProxy networkProvider=LocationProviderProxy.createAndBind(mContext,LocationManager.NETWORK_PROVIDER,NETWORK_LOCATION_SERVICE_ACTION,com.android.internal.R.bool.config_enableNetworkLocationOverlay,com.android.internal.R.string.config_networkLocationProviderPackageName,com.android.internal.R.array.config_locationProviderPackageNames,mLocationHandler);
  if (networkProvider != null) {
    mRealProviders.put(LocationManager.NETWORK_PROVIDER,networkProvider);
    mProxyProviders.add(networkProvider);
    addProviderLocked(networkProvider);
  }
 else {
    Slog.w(TAG,"no network location provider found");
  }
  LocationProviderProxy fusedLocationProvider=LocationProviderProxy.createAndBind(mContext,LocationManager.FUSED_PROVIDER,FUSED_LOCATION_SERVICE_ACTION,com.android.internal.R.bool.config_enableFusedLocationOverlay,com.android.internal.R.string.config_fusedLocationProviderPackageName,com.android.internal.R.array.config_locationProviderPackageNames,mLocationHandler);
  if (fusedLocationProvider != null) {
    addProviderLocked(fusedLocationProvider);
    mProxyProviders.add(fusedLocationProvider);
    mEnabledProviders.add(fusedLocationProvider.getName());
    mRealProviders.put(LocationManager.FUSED_PROVIDER,fusedLocationProvider);
  }
 else {
    Slog.e(TAG,"no fused location provider found",new IllegalStateException("Location service needs a fused location provider"));
  }
  mGeocodeProvider=GeocoderProxy.createAndBind(mContext,com.android.internal.R.bool.config_enableGeocoderOverlay,com.android.internal.R.string.config_geocoderProviderPackageName,com.android.internal.R.array.config_locationProviderPackageNames,mLocationHandler);
  if (mGeocodeProvider == null) {
    Slog.e(TAG,"no geocoder provider found");
  }
  FlpHardwareProvider flpHardwareProvider=FlpHardwareProvider.getInstance(mContext);
  FusedProxy fusedProxy=FusedProxy.createAndBind(mContext,mLocationHandler,flpHardwareProvider.getLocationHardware(),com.android.internal.R.bool.config_enableFusedLocationOverlay,com.android.internal.R.string.config_fusedLocationProviderPackageName,com.android.internal.R.array.config_locationProviderPackageNames);
  if (fusedProxy == null) {
    Slog.e(TAG,"No FusedProvider found.");
  }
  GeofenceProxy provider=GeofenceProxy.createAndBind(mContext,com.android.internal.R.bool.config_enableGeofenceOverlay,com.android.internal.R.string.config_geofenceProviderPackageName,com.android.internal.R.array.config_locationProviderPackageNames,mLocationHandler,gpsProvider.getGpsGeofenceProxy(),flpHardwareProvider.getGeofenceHardware());
  if (provider == null) {
    Slog.e(TAG,"no geofence provider found");
  }
  String[] testProviderStrings=resources.getStringArray(com.android.internal.R.array.config_testLocationProviders);
  for (  String testProviderString : testProviderStrings) {
    String fragments[]=testProviderString.split(",");
    String name=fragments[0].trim();
    if (mProvidersByName.get(name) != null) {
      throw new IllegalArgumentException("Provider \"" + name + "\" already exists");
    }
    ProviderProperties properties=new ProviderProperties(Boolean.parseBoolean(fragments[1]),Boolean.parseBoolean(fragments[2]),Boolean.parseBoolean(fragments[3]),Boolean.parseBoolean(fragments[4]),Boolean.parseBoolean(fragments[5]),Boolean.parseBoolean(fragments[6]),Boolean.parseBoolean(fragments[7]),Integer.parseInt(fragments[8]),Integer.parseInt(fragments[9]));
    addTestProviderLocked(name,properties);
  }
}
