{
  final Locale[] availableLocales=new Locale[sources.size()];
  for (int i=0; i < availableLocales.length; ++i) {
    availableLocales[i]=extractor.get(sources.get(i));
  }
  final Locale[] sortedPreferredLanguages=new Locale[preferredLanguages.size()];
  if (sortedPreferredLanguages.length > 0) {
    int nextIndex=0;
    final int N=preferredLanguages.size();
    languageLoop:     for (int i=0; i < N; ++i) {
      final String language=getLanguage(preferredLanguages.get(i));
      for (int j=0; j < nextIndex; ++j) {
        if (TextUtils.equals(getLanguage(sortedPreferredLanguages[j]),language)) {
          continue languageLoop;
        }
      }
      for (int j=i; j < N; ++j) {
        final Locale locale=preferredLanguages.get(j);
        if (TextUtils.equals(language,getLanguage(locale))) {
          sortedPreferredLanguages[nextIndex]=locale;
          ++nextIndex;
        }
      }
    }
  }
  for (int languageIndex=0; languageIndex < sortedPreferredLanguages.length; ) {
    final String language=getLanguage(sortedPreferredLanguages[languageIndex]);
    int nextLanguageIndex=languageIndex;
    for (; nextLanguageIndex < sortedPreferredLanguages.length; ++nextLanguageIndex) {
      final Locale locale=sortedPreferredLanguages[nextLanguageIndex];
      if (!TextUtils.equals(getLanguage(locale),language)) {
        break;
      }
    }
    boolean found=false;
    for (int i=languageIndex; !found && i < nextLanguageIndex; ++i) {
      final Locale locale=sortedPreferredLanguages[i];
      for (int j=0; j < availableLocales.length; ++j) {
        if (!Objects.equals(locale,availableLocales[j])) {
          continue;
        }
        dest.add(sources.get(j));
        found=true;
        break;
      }
    }
    if (!found) {
      for (int j=0; j < availableLocales.length; ++j) {
        if (!TextUtils.equals(language,getLanguage(availableLocales[j]))) {
          continue;
        }
        dest.add(sources.get(j));
        break;
      }
    }
    languageIndex=nextLanguageIndex;
  }
}
