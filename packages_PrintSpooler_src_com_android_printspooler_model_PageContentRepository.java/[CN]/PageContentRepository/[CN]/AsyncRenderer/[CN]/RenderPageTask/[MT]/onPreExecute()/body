{
  mRenderedPage=mPageContentCache.getRenderedPage(mPageIndex);
  if (mRenderedPage != null && mRenderedPage.state == RenderedPage.STATE_RENDERED) {
    throw new IllegalStateException("Trying to render a rendered page");
  }
  if (mRenderedPage != null && !mRenderSpec.hasSameSize(mRenderedPage)) {
    if (DEBUG) {
      Log.i(LOG_TAG,"Recycling bitmap for page: " + mPageIndex + " with different size.");
    }
    mPageContentCache.removeRenderedPage(mPageIndex);
    mRenderedPage=null;
  }
  final int bitmapSizeInBytes=mRenderSpec.bitmapWidth * mRenderSpec.bitmapHeight * BYTES_PER_PIXEL;
  while (mRenderedPage == null) {
    if (mPageContentCache.getSizeInBytes() <= 0 || mPageContentCache.getSizeInBytes() + bitmapSizeInBytes <= mPageContentCache.getMaxSizeInBytes()) {
      break;
    }
    RenderedPage renderedPage=mPageContentCache.removeLeastNeeded();
    if (!mRenderSpec.hasSameSize(renderedPage)) {
      if (DEBUG) {
        Log.i(LOG_TAG,"Recycling bitmap for page: " + mPageIndex + " with different size.");
      }
      continue;
    }
    mRenderedPage=renderedPage;
    renderedPage.erase();
    if (DEBUG) {
      Log.i(LOG_TAG,"Reused bitmap for page: " + mPageIndex + " cache size: "+ mPageContentCache.getSizeInBytes()+ " bytes");
    }
    break;
  }
  if (mRenderedPage == null) {
    if (DEBUG) {
      Log.i(LOG_TAG,"Created bitmap for page: " + mPageIndex + " cache size: "+ mPageContentCache.getSizeInBytes()+ " bytes");
    }
    Bitmap bitmap=Bitmap.createBitmap(mRenderSpec.bitmapWidth,mRenderSpec.bitmapHeight,Bitmap.Config.ARGB_8888);
    bitmap.eraseColor(Color.WHITE);
    BitmapDrawable content=new BitmapDrawable(mContext.getResources(),bitmap);
    mRenderedPage=new RenderedPage(content);
  }
  mRenderedPage.renderSpec=mRenderSpec;
  mRenderedPage.state=RenderedPage.STATE_RENDERING;
  mPageContentCache.putRenderedPage(mPageIndex,mRenderedPage);
}
