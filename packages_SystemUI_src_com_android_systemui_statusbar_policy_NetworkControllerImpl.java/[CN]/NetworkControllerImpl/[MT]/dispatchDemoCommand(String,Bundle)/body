{
  if (!mDemoMode && command.equals(COMMAND_ENTER)) {
    if (DEBUG)     Log.d(TAG,"Entering demo mode");
    unregisterListeners();
    mDemoMode=true;
    mDemoInetCondition=mInetCondition ? 1 : 0;
    mDemoWifiState=mWifiSignalController.getState();
  }
 else   if (mDemoMode && command.equals(COMMAND_EXIT)) {
    if (DEBUG)     Log.d(TAG,"Exiting demo mode");
    mDemoMode=false;
    updateMobileControllers();
    for (    MobileSignalController controller : mMobileSignalControllers.values()) {
      controller.resetLastState();
    }
    mWifiSignalController.resetLastState();
    registerListeners();
    notifyAllListeners();
  }
 else   if (mDemoMode && command.equals(COMMAND_NETWORK)) {
    String airplane=args.getString("airplane");
    if (airplane != null) {
      boolean show=airplane.equals("show");
      int length=mSignalClusters.size();
      for (int i=0; i < length; i++) {
        mSignalClusters.get(i).setIsAirplaneMode(show,TelephonyIcons.FLIGHT_MODE_ICON,R.string.accessibility_airplane_mode);
      }
    }
    String fully=args.getString("fully");
    if (fully != null) {
      mDemoInetCondition=Boolean.parseBoolean(fully) ? 1 : 0;
      mWifiSignalController.setInetCondition(mDemoInetCondition);
      for (      MobileSignalController controller : mMobileSignalControllers.values()) {
        controller.setInetCondition(mDemoInetCondition,mDemoInetCondition);
      }
    }
    String wifi=args.getString("wifi");
    if (wifi != null) {
      boolean show=wifi.equals("show");
      String level=args.getString("level");
      if (level != null) {
        mDemoWifiState.level=level.equals("null") ? -1 : Math.min(Integer.parseInt(level),WifiIcons.WIFI_LEVEL_COUNT - 1);
        mDemoWifiState.connected=mDemoWifiState.level >= 0;
      }
      mDemoWifiState.enabled=show;
      mWifiSignalController.notifyListeners();
    }
    String sims=args.getString("sims");
    if (sims != null) {
      int num=Integer.parseInt(sims);
      List<SubscriptionInfo> subs=new ArrayList<SubscriptionInfo>();
      if (num != mMobileSignalControllers.size()) {
        mMobileSignalControllers.clear();
        int start=mSubscriptionManager.getActiveSubscriptionInfoCountMax();
        for (int i=start; i < start + num; i++) {
          SubscriptionInfo info=new SubscriptionInfo(i,"",i,"","",0,0,"",0,null,0,0,"");
          subs.add(info);
          mMobileSignalControllers.put(i,new MobileSignalController(mContext,mConfig,mHasMobileDataFeature,mPhone,mSignalsChangedCallbacks,mSignalClusters,this,info));
        }
      }
      final int n=mSignalClusters.size();
      for (int i=0; i < n; i++) {
        mSignalClusters.get(i).setSubs(subs);
      }
    }
    String nosim=args.getString("nosim");
    if (nosim != null) {
      boolean show=nosim.equals("show");
      final int n=mSignalClusters.size();
      for (int i=0; i < n; i++) {
        mSignalClusters.get(i).setNoSims(show);
      }
    }
    String mobile=args.getString("mobile");
    if (mobile != null) {
      boolean show=mobile.equals("show");
      String datatype=args.getString("datatype");
      String slotString=args.getString("slot");
      int slot=TextUtils.isEmpty(slotString) ? 0 : Integer.parseInt(slotString);
      MobileSignalController controller=mMobileSignalControllers.values().toArray(new MobileSignalController[0])[slot];
      controller.getState().dataSim=datatype != null;
      if (datatype != null) {
        controller.getState().iconGroup=datatype.equals("1x") ? TelephonyIcons.ONE_X : datatype.equals("3g") ? TelephonyIcons.THREE_G : datatype.equals("4g") ? TelephonyIcons.FOUR_G : datatype.equals("e") ? TelephonyIcons.E : datatype.equals("g") ? TelephonyIcons.G : datatype.equals("h") ? TelephonyIcons.H : datatype.equals("lte") ? TelephonyIcons.LTE : datatype.equals("roam") ? TelephonyIcons.ROAMING : TelephonyIcons.UNKNOWN;
      }
      int[][] icons=TelephonyIcons.TELEPHONY_SIGNAL_STRENGTH;
      String level=args.getString("level");
      if (level != null) {
        controller.getState().level=level.equals("null") ? -1 : Math.min(Integer.parseInt(level),icons[0].length - 1);
        controller.getState().connected=controller.getState().level >= 0;
      }
      controller.getState().enabled=show;
      controller.notifyListeners();
    }
    String carrierNetworkChange=args.getString("carriernetworkchange");
    if (carrierNetworkChange != null) {
      boolean show=carrierNetworkChange.equals("show");
      for (      MobileSignalController controller : mMobileSignalControllers.values()) {
        controller.setCarrierNetworkChangeMode(show);
      }
    }
  }
}
