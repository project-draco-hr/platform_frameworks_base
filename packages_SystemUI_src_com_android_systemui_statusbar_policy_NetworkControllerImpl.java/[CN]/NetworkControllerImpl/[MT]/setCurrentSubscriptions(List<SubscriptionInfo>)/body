{
  Collections.sort(subscriptions,new Comparator<SubscriptionInfo>(){
    @Override public int compare(    SubscriptionInfo lhs,    SubscriptionInfo rhs){
      return lhs.getSimSlotIndex() == rhs.getSimSlotIndex() ? lhs.getSubscriptionId() - rhs.getSubscriptionId() : lhs.getSimSlotIndex() - rhs.getSimSlotIndex();
    }
  }
);
  mCallbackHandler.setSubs(subscriptions);
  mCurrentSubscriptions=subscriptions;
  HashMap<Integer,MobileSignalController> cachedControllers=new HashMap<Integer,MobileSignalController>(mMobileSignalControllers);
  mMobileSignalControllers.clear();
  final int num=subscriptions.size();
  for (int i=0; i < num; i++) {
    int subId=subscriptions.get(i).getSubscriptionId();
    if (cachedControllers.containsKey(subId)) {
      mMobileSignalControllers.put(subId,cachedControllers.remove(subId));
    }
 else {
      MobileSignalController controller=new MobileSignalController(mContext,mConfig,mHasMobileDataFeature,mPhone,mCallbackHandler,this,subscriptions.get(i),mSubDefaults,mReceiverHandler.getLooper());
      mMobileSignalControllers.put(subId,controller);
      if (subscriptions.get(i).getSimSlotIndex() == 0) {
        mDefaultSignalController=controller;
      }
      if (mListening) {
        controller.registerListener();
      }
    }
  }
  if (mListening) {
    for (    Integer key : cachedControllers.keySet()) {
      if (cachedControllers.get(key) == mDefaultSignalController) {
        mDefaultSignalController=null;
      }
      cachedControllers.get(key).unregisterListener();
    }
  }
  pushConnectivityToSignals();
  updateAirplaneMode(true);
}
