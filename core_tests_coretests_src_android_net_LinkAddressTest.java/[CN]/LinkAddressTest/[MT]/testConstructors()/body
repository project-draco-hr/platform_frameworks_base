{
  LinkAddress address;
  address=new LinkAddress(V4_ADDRESS,25);
  assertEquals(V4_ADDRESS,address.getAddress());
  assertEquals(25,address.getPrefixLength());
  assertEquals(0,address.getFlags());
  assertEquals(RT_SCOPE_UNIVERSE,address.getScope());
  address=new LinkAddress(V6_ADDRESS,127);
  assertEquals(V6_ADDRESS,address.getAddress());
  assertEquals(127,address.getPrefixLength());
  assertEquals(0,address.getFlags());
  assertEquals(RT_SCOPE_UNIVERSE,address.getScope());
  address=new LinkAddress(V6 + "/64",IFA_F_DEPRECATED | IFA_F_PERMANENT,RT_SCOPE_LINK);
  assertEquals(V6_ADDRESS,address.getAddress());
  assertEquals(64,address.getPrefixLength());
  assertEquals(IFA_F_DEPRECATED | IFA_F_PERMANENT,address.getFlags());
  assertEquals(RT_SCOPE_LINK,address.getScope());
  address=new LinkAddress(V4 + "/23",123,456);
  assertEquals(V4_ADDRESS,address.getAddress());
  assertEquals(23,address.getPrefixLength());
  assertEquals(123,address.getFlags());
  assertEquals(456,address.getScope());
  List<InterfaceAddress> addrs=NetworkInterface.getByName("lo").getInterfaceAddresses();
  LinkAddress ipv4Loopback, ipv6Loopback;
  assertEquals(2,addrs.size());
  if (addrs.get(0).getAddress() instanceof Inet4Address) {
    ipv4Loopback=new LinkAddress(addrs.get(0));
    ipv6Loopback=new LinkAddress(addrs.get(1));
  }
 else {
    ipv4Loopback=new LinkAddress(addrs.get(1));
    ipv6Loopback=new LinkAddress(addrs.get(0));
  }
  assertEquals(NetworkUtils.numericToInetAddress("127.0.0.1"),ipv4Loopback.getAddress());
  assertEquals(8,ipv4Loopback.getPrefixLength());
  assertEquals(NetworkUtils.numericToInetAddress("::1"),ipv6Loopback.getAddress());
  assertEquals(128,ipv6Loopback.getPrefixLength());
  try {
    address=new LinkAddress(null,24);
    fail("Null InetAddress should cause IllegalArgumentException");
  }
 catch (  IllegalArgumentException expected) {
  }
  try {
    address=new LinkAddress((String)null,IFA_F_PERMANENT,RT_SCOPE_UNIVERSE);
    fail("Null string should cause IllegalArgumentException");
  }
 catch (  IllegalArgumentException expected) {
  }
  try {
    address=new LinkAddress((InterfaceAddress)null);
    fail("Null string should cause NullPointerException");
  }
 catch (  NullPointerException expected) {
  }
  try {
    address=new LinkAddress(V4_ADDRESS,-1);
    fail("Negative IPv4 prefix length should cause IllegalArgumentException");
  }
 catch (  IllegalArgumentException expected) {
  }
  try {
    address=new LinkAddress(V6_ADDRESS,-1);
    fail("Negative IPv6 prefix length should cause IllegalArgumentException");
  }
 catch (  IllegalArgumentException expected) {
  }
  try {
    address=new LinkAddress(V4_ADDRESS,33);
    fail("/33 IPv4 prefix length should cause IllegalArgumentException");
  }
 catch (  IllegalArgumentException expected) {
  }
  try {
    address=new LinkAddress(V4 + "/33",IFA_F_PERMANENT,RT_SCOPE_UNIVERSE);
    fail("/33 IPv4 prefix length should cause IllegalArgumentException");
  }
 catch (  IllegalArgumentException expected) {
  }
  try {
    address=new LinkAddress(V6_ADDRESS,129,IFA_F_PERMANENT,RT_SCOPE_UNIVERSE);
    fail("/129 IPv6 prefix length should cause IllegalArgumentException");
  }
 catch (  IllegalArgumentException expected) {
  }
  try {
    address=new LinkAddress(V6 + "/129",IFA_F_PERMANENT,RT_SCOPE_UNIVERSE);
    fail("/129 IPv6 prefix length should cause IllegalArgumentException");
  }
 catch (  IllegalArgumentException expected) {
  }
  try {
    address=new LinkAddress("224.0.0.2/32");
    fail("IPv4 multicast address should cause IllegalArgumentException");
  }
 catch (  IllegalArgumentException expected) {
  }
  try {
    address=new LinkAddress("ff02::1/128");
    fail("IPv6 multicast address should cause IllegalArgumentException");
  }
 catch (  IllegalArgumentException expected) {
  }
}
