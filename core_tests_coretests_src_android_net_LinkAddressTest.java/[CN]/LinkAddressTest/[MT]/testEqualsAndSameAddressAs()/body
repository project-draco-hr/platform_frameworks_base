{
  LinkAddress l1, l2, l3;
  l1=new LinkAddress("2001:db8::1/64");
  l2=new LinkAddress("2001:db8::1/64");
  assertLinkAddressesEqual(l1,l2);
  assertIsSameAddressAs(l1,l2);
  l2=new LinkAddress("2001:db8::1/65");
  assertLinkAddressesNotEqual(l1,l2);
  assertIsNotSameAddressAs(l1,l2);
  l2=new LinkAddress("2001:db8::2/64");
  assertLinkAddressesNotEqual(l1,l2);
  assertIsNotSameAddressAs(l1,l2);
  l1=new LinkAddress("192.0.2.1/24");
  l2=new LinkAddress("192.0.2.1/24");
  assertLinkAddressesEqual(l1,l2);
  assertIsSameAddressAs(l1,l2);
  l2=new LinkAddress("192.0.2.1/23");
  assertLinkAddressesNotEqual(l1,l2);
  assertIsNotSameAddressAs(l1,l2);
  l2=new LinkAddress("192.0.2.2/24");
  assertLinkAddressesNotEqual(l1,l2);
  assertIsNotSameAddressAs(l1,l2);
  l1=new LinkAddress(V6_ADDRESS,64);
  l2=new LinkAddress(V6_ADDRESS,64,0,RT_SCOPE_UNIVERSE);
  assertLinkAddressesEqual(l1,l2);
  assertIsSameAddressAs(l1,l2);
  l2=new LinkAddress(V6_ADDRESS,64,IFA_F_DEPRECATED,RT_SCOPE_UNIVERSE);
  assertLinkAddressesNotEqual(l1,l2);
  assertIsSameAddressAs(l1,l2);
  l1=new LinkAddress(V4_ADDRESS,24);
  l2=new LinkAddress(V4_ADDRESS,24,0,RT_SCOPE_UNIVERSE);
  assertLinkAddressesEqual(l1,l2);
  assertIsSameAddressAs(l1,l2);
  l2=new LinkAddress(V4_ADDRESS,24,0,RT_SCOPE_HOST);
  assertLinkAddressesNotEqual(l1,l2);
  assertIsSameAddressAs(l1,l2);
  l1=new LinkAddress("32.1.13.184/24");
  l2=new LinkAddress("2001:db8::1/24");
  l3=new LinkAddress("::2001:db8/24");
  byte[] ipv4Bytes=l1.getAddress().getAddress();
  byte[] l2FirstIPv6Bytes=Arrays.copyOf(l2.getAddress().getAddress(),4);
  byte[] l3LastIPv6Bytes=Arrays.copyOfRange(l3.getAddress().getAddress(),12,16);
  assertTrue(Arrays.equals(ipv4Bytes,l2FirstIPv6Bytes));
  assertTrue(Arrays.equals(ipv4Bytes,l3LastIPv6Bytes));
  assertLinkAddressesNotEqual(l1,l2);
  assertIsNotSameAddressAs(l1,l2);
  assertLinkAddressesNotEqual(l1,l3);
  assertIsNotSameAddressAs(l1,l3);
  String addressString=V4 + "/24";
  l1=new LinkAddress(addressString);
  l2=new LinkAddress("::ffff:" + addressString);
  assertLinkAddressesEqual(l1,l2);
  assertIsSameAddressAs(l1,l2);
}
