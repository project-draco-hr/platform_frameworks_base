{
  boolean speechQueueAvailable=false;
  try {
    speechQueueAvailable=speechQueueLock.tryLock(SPEECHQUEUELOCK_TIMEOUT,TimeUnit.MILLISECONDS);
    if (!speechQueueAvailable) {
      Log.e("TtsService","processSpeechQueue - Speech queue is unavailable.");
      return;
    }
    if (mSpeechQueue.size() < 1) {
      mIsSpeaking=false;
      broadcastTtsQueueProcessingCompleted();
      return;
    }
    mCurrentSpeechItem=mSpeechQueue.get(0);
    mIsSpeaking=true;
    SoundResource sr=getSoundResource(mCurrentSpeechItem);
    Log.v("TtsService","TTS processing: " + mCurrentSpeechItem.mText);
    if (sr == null) {
      if (mCurrentSpeechItem.mType == SpeechItem.TEXT) {
        mCurrentSpeechItem=splitCurrentTextIfNeeded(mCurrentSpeechItem);
        speakInternalOnly(mCurrentSpeechItem);
      }
 else       if (mCurrentSpeechItem.mType == SpeechItem.TEXT_TO_FILE) {
        synthToFileInternalOnly(mCurrentSpeechItem);
      }
 else {
        silence(mCurrentSpeechItem);
      }
    }
 else {
      cleanUpPlayer();
      if (sr.mSourcePackageName == PKGNAME) {
        mPlayer=MediaPlayer.create(this,sr.mResId);
      }
 else       if (sr.mSourcePackageName != null) {
        Context ctx;
        try {
          ctx=this.createPackageContext(sr.mSourcePackageName,0);
        }
 catch (        NameNotFoundException e) {
          e.printStackTrace();
          mSpeechQueue.remove(0);
          mIsSpeaking=false;
          return;
        }
        mPlayer=MediaPlayer.create(ctx,sr.mResId);
      }
 else {
        mPlayer=MediaPlayer.create(this,Uri.parse(sr.mFilename));
      }
      if (mPlayer == null) {
        mSpeechQueue.clear();
        mIsSpeaking=false;
        return;
      }
      mPlayer.setOnCompletionListener(this);
      try {
        mPlayer.setAudioStreamType(getStreamTypeFromParams(mCurrentSpeechItem.mParams));
        mPlayer.start();
      }
 catch (      IllegalStateException e) {
        mSpeechQueue.clear();
        mIsSpeaking=false;
        cleanUpPlayer();
        return;
      }
    }
    if (mSpeechQueue.size() > 0) {
      mSpeechQueue.remove(0);
    }
  }
 catch (  InterruptedException e) {
    Log.e("TtsService","TTS processSpeechQueue: tryLock interrupted");
    e.printStackTrace();
  }
 finally {
    if (speechQueueAvailable) {
      speechQueueLock.unlock();
    }
  }
}
