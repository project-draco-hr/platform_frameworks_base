{
  mContext.enforceCallingOrSelfPermission(DUMP,TAG);
synchronized (mRulesLock) {
    fout.println("Network policies:");
    for (    StrongTemplate template : mTemplatePolicy.keySet()) {
      final NetworkPolicy policy=mTemplatePolicy.get(template);
      fout.print("  ");
      fout.println(template.toString());
      fout.print("    ");
      fout.println(policy.toString());
    }
    fout.println("Policy status for known UIDs:");
    final SparseBooleanArray knownUids=new SparseBooleanArray();
    collectKeys(mUidPolicy,knownUids);
    collectKeys(mUidForeground,knownUids);
    collectKeys(mUidRules,knownUids);
    final int size=knownUids.size();
    for (int i=0; i < size; i++) {
      final int uid=knownUids.keyAt(i);
      fout.print("  UID=");
      fout.print(uid);
      fout.print(" policy=");
      final int policyIndex=mUidPolicy.indexOfKey(uid);
      if (policyIndex < 0) {
        fout.print("UNKNOWN");
      }
 else {
        dumpPolicy(fout,mUidPolicy.valueAt(policyIndex));
      }
      fout.print(" foreground=");
      final int foregroundIndex=mUidPidForeground.indexOfKey(uid);
      if (foregroundIndex < 0) {
        fout.print("UNKNOWN");
      }
 else {
        dumpSparseBooleanArray(fout,mUidPidForeground.valueAt(foregroundIndex));
      }
      fout.print(" rules=");
      final int rulesIndex=mUidRules.indexOfKey(uid);
      if (rulesIndex < 0) {
        fout.print("UNKNOWN");
      }
 else {
        dumpRules(fout,mUidRules.valueAt(rulesIndex));
      }
      fout.println();
    }
  }
}
