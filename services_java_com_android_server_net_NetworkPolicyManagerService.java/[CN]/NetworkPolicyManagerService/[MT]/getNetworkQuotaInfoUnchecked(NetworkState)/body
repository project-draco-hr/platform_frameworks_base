{
  final NetworkIdentity ident=NetworkIdentity.buildNetworkIdentity(mContext,state);
  final NetworkPolicy policy;
synchronized (mRulesLock) {
    policy=findPolicyForNetworkLocked(ident);
  }
  if (policy == null) {
    return null;
  }
  final long currentTime=mTime.hasCache() ? mTime.currentTimeMillis() : System.currentTimeMillis();
  final long start=computeLastCycleBoundary(currentTime,policy);
  final long end=currentTime;
  long totalBytes=0;
  try {
    final NetworkStats stats=mNetworkStats.getSummaryForNetwork(policy.template,start,end);
    final NetworkStats.Entry entry=stats.getValues(0,null);
    totalBytes=entry.rxBytes + entry.txBytes;
  }
 catch (  RemoteException e) {
    Slog.w(TAG,"problem reading summary for template " + policy.template);
  }
  final long softLimitBytes=policy.warningBytes != WARNING_DISABLED ? policy.warningBytes : NetworkQuotaInfo.NO_LIMIT;
  final long hardLimitBytes=policy.limitBytes != LIMIT_DISABLED ? policy.limitBytes : NetworkQuotaInfo.NO_LIMIT;
  return new NetworkQuotaInfo(totalBytes,softLimitBytes,hardLimitBytes);
}
