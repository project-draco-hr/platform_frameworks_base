{
  final int type=node.getSymbol().getType();
switch (type) {
case BindingExpressionParser.IntegerLiteral:
    return mModel.symbol(node.getText(),Integer.class);
case BindingExpressionParser.FloatingPointLiteral:
  return mModel.symbol(node.getText(),Float.class);
case BindingExpressionParser.BooleanLiteral:
return mModel.symbol(node.getText(),Boolean.class);
case BindingExpressionParser.CharacterLiteral:
return mModel.symbol(node.getText(),Character.class);
case BindingExpressionParser.SingleQuoteString:
return mModel.symbol(node.getText(),String.class);
case BindingExpressionParser.DoubleQuoteString:
return mModel.symbol(node.getText(),String.class);
case BindingExpressionParser.NullLiteral:
return mModel.symbol(node.getText(),Object.class);
default :
throw new RuntimeException("cannot create expression from terminal node " + node.toString());
}
}
