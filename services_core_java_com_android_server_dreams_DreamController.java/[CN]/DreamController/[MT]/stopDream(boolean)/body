{
  if (mCurrentDream == null) {
    return;
  }
  Trace.traceBegin(Trace.TRACE_TAG_POWER,"stopDream");
  try {
    if (!immediate) {
      if (mCurrentDream.mWakingGently) {
        return;
      }
      if (mCurrentDream.mService != null) {
        mCurrentDream.mWakingGently=true;
        try {
          mCurrentDream.mService.wakeUp();
          mHandler.postDelayed(mStopStubbornDreamRunnable,DREAM_FINISH_TIMEOUT);
          return;
        }
 catch (        RemoteException ex) {
        }
      }
    }
    final DreamRecord oldDream=mCurrentDream;
    mCurrentDream=null;
    Slog.i(TAG,"Stopping dream: name=" + oldDream.mName + ", isTest="+ oldDream.mIsTest+ ", canDoze="+ oldDream.mCanDoze+ ", userId="+ oldDream.mUserId);
    MetricsLogger.hidden(mContext,oldDream.mCanDoze ? MetricsEvent.DOZING : MetricsEvent.DREAMING);
    MetricsLogger.histogram(mContext,oldDream.mCanDoze ? "dozing_minutes" : "dreaming_minutes",(int)((SystemClock.elapsedRealtime() - mDreamStartTime) / (1000L * 60L)));
    mHandler.removeCallbacks(mStopUnconnectedDreamRunnable);
    mHandler.removeCallbacks(mStopStubbornDreamRunnable);
    if (oldDream.mSentStartBroadcast) {
      mContext.sendBroadcastAsUser(mDreamingStoppedIntent,UserHandle.ALL);
    }
    if (oldDream.mService != null) {
      try {
        oldDream.mService.detach();
      }
 catch (      RemoteException ex) {
      }
      try {
        oldDream.mService.asBinder().unlinkToDeath(oldDream,0);
      }
 catch (      NoSuchElementException ex) {
      }
      oldDream.mService=null;
    }
    if (oldDream.mBound) {
      mContext.unbindService(oldDream);
    }
    try {
      mIWindowManager.removeWindowToken(oldDream.mToken);
    }
 catch (    RemoteException ex) {
      Slog.w(TAG,"Error removing window token for dream.",ex);
    }
    mHandler.post(new Runnable(){
      @Override public void run(){
        mListener.onDreamStopped(oldDream.mToken);
      }
    }
);
  }
  finally {
    Trace.traceEnd(Trace.TRACE_TAG_POWER);
  }
}
