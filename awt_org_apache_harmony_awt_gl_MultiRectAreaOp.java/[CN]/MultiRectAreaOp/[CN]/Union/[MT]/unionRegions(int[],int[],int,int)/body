{
  Region d1=new Region(reg1);
  Region d2=new Region(reg2);
  int[] level=new int[height1 + height2];
  int[] level1=new int[height1];
  int[] level2=new int[height2];
  d1.createLevel(level1);
  d2.createLevel(level2);
  Region.sortOrdered(level1,level2,level);
  bottom=level[1] - 1;
  for (int i=2; i < level[0]; i++) {
    top=bottom + 1;
    bottom=level[i] - 1;
    d1.findActive(top,bottom);
    d2.findActive(top,bottom);
    int i1=1;
    int i2=1;
    boolean res1, res2;
    if (d1.active[0] > 1) {
      check(d1,1,false);
      rx1=d1.active[1];
      rx2=d1.active[3];
      i1+=4;
      res1=false;
      res2=true;
    }
 else     if (d2.active[0] > 1) {
      check(d2,1,false);
      rx1=d2.active[1];
      rx2=d2.active[3];
      i2+=4;
      res1=true;
      res2=false;
    }
 else {
      continue;
    }
    outer:     while (true) {
      while (res1) {
        if (i1 >= d1.active[0]) {
          dst.addRectCashed(rx1,top,rx2,bottom);
          while (i2 < d2.active[0]) {
            check(d2,i2,true);
            i2+=4;
          }
          break outer;
        }
        res1=next(d1,i1);
        i1+=4;
      }
      while (res2) {
        if (i2 >= d2.active[0]) {
          dst.addRectCashed(rx1,top,rx2,bottom);
          while (i1 < d1.active[0]) {
            check(d1,i1,true);
            i1+=4;
          }
          break outer;
        }
        res2=next(d2,i2);
        i2+=4;
      }
      res1=true;
      res2=true;
    }
    d1.deleteActive(bottom);
    d2.deleteActive(bottom);
  }
}
