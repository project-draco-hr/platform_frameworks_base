{
  Region d1=new Region(reg1);
  Region d2=new Region(reg2);
  int[] level=new int[height1 + height2];
  int[] level1=new int[height1];
  int[] level2=new int[height2];
  d1.createLevel(level1);
  d2.createLevel(level2);
  Region.sortOrdered(level1,level2,level);
  int top;
  int bottom=level[1] - 1;
  for (int i=2; i < level[0]; i++) {
    top=bottom + 1;
    bottom=level[i] - 1;
    d1.findActive(top,bottom);
    if (d1.active[0] == 1) {
      d2.deleteActive(bottom);
      continue;
    }
    d2.findActive(top,bottom);
    int i1=1;
    int i2=1;
    int rx1=0;
    int rx2=0;
    boolean next=true;
    while (true) {
      if (next) {
        next=false;
        if (i1 >= d1.active[0]) {
          break;
        }
        d1.active[i1 + 1]=bottom + 1;
        rx1=d1.active[i1];
        rx2=d1.active[i1 + 2];
        i1+=4;
      }
      if (i2 >= d2.active[0]) {
        dst.addRectCashed(rx1,top,rx2,bottom);
        for (int j=i1; j < d1.active[0]; j+=4) {
          dst.addRectCashed(d1.active[j],top,d1.active[j + 2],bottom);
          d1.active[j + 1]=bottom + 1;
        }
        break;
      }
      int x1=d2.active[i2];
      int x2=d2.active[i2 + 2];
      if (rx1 < x1) {
        if (rx2 >= x1) {
          if (rx2 <= x2) {
            dst.addRectCashed(rx1,top,x1 - 1,bottom);
            next=true;
          }
 else {
            dst.addRectCashed(rx1,top,x1 - 1,bottom);
            rx1=x2 + 1;
            i2+=4;
          }
        }
 else {
          dst.addRectCashed(rx1,top,rx2,bottom);
          next=true;
        }
      }
 else {
        if (rx1 <= x2) {
          if (rx2 <= x2) {
            next=true;
          }
 else {
            rx1=x2 + 1;
            i2+=4;
          }
        }
 else {
          i2+=4;
        }
      }
    }
    d1.deleteActive();
    d2.deleteActive(bottom);
  }
}
