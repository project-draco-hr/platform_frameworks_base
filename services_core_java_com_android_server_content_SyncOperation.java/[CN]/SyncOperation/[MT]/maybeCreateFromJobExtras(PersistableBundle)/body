{
  String accountName, accountType;
  String provider;
  int userId, owningUid;
  String owningPackage;
  int reason, source;
  int initiatedBy;
  Bundle extras;
  boolean allowParallelSyncs, isPeriodic;
  if (!jobExtras.getBoolean("SyncManagerJob",false)) {
    return null;
  }
  accountName=jobExtras.getString("accountName");
  accountType=jobExtras.getString("accountType");
  provider=jobExtras.getString("provider");
  userId=jobExtras.getInt("userId",Integer.MAX_VALUE);
  owningUid=jobExtras.getInt("owningUid");
  owningPackage=jobExtras.getString("owningPackage");
  reason=jobExtras.getInt("reason",Integer.MAX_VALUE);
  source=jobExtras.getInt("source",Integer.MAX_VALUE);
  allowParallelSyncs=jobExtras.getBoolean("allowParallelSyncs",false);
  isPeriodic=jobExtras.getBoolean("isPeriodic",false);
  initiatedBy=jobExtras.getInt("sourcePeriodicId",NO_JOB_ID);
  extras=new Bundle();
  PersistableBundle syncExtras=jobExtras.getPersistableBundle("syncExtras");
  if (syncExtras != null) {
    extras.putAll(syncExtras);
  }
  for (  String key : jobExtras.keySet()) {
    if (key != null && key.startsWith("ACCOUNT:")) {
      String newKey=key.substring(8);
      PersistableBundle accountsBundle=jobExtras.getPersistableBundle(key);
      Account account=new Account(accountsBundle.getString("accountName"),accountsBundle.getString("accountType"));
      extras.putParcelable(newKey,account);
    }
  }
  Account account=new Account(accountName,accountType);
  SyncStorageEngine.EndPoint target=new SyncStorageEngine.EndPoint(account,provider,userId);
  SyncOperation op=new SyncOperation(target,owningUid,owningPackage,reason,source,extras,allowParallelSyncs,isPeriodic,initiatedBy);
  op.jobId=jobExtras.getInt("jobId");
  op.periodMillis=jobExtras.getLong("periodMillis");
  op.flexMillis=jobExtras.getLong("flexMillis");
  op.expectedRuntime=jobExtras.getLong("expectedRuntime");
  return op;
}
