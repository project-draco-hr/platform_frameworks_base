{
  TextPaint workPaint=mWorkPaint;
  workPaint.set(paint);
  workPaint.baselineShift=0;
  ReplacementSpan replacement=null;
  for (int i=0; i < spans.length; i++) {
    MetricAffectingSpan span=spans[i];
    if (span instanceof ReplacementSpan) {
      replacement=(ReplacementSpan)span;
    }
 else {
      span.updateMeasureState(workPaint);
    }
  }
  float wid;
  if (replacement == null) {
    wid=addStyleRun(workPaint,len,fm);
  }
 else {
    wid=replacement.getSize(workPaint,mText,mTextStart + mPos,mTextStart + mPos + len,fm);
    float[] w=mWidths;
    w[mPos]=wid;
    for (int i=mPos + 1, e=mPos + len; i < e; i++)     w[i]=0;
  }
  if (fm != null) {
    if (workPaint.baselineShift < 0) {
      fm.ascent+=workPaint.baselineShift;
      fm.top+=workPaint.baselineShift;
    }
 else {
      fm.descent+=workPaint.baselineShift;
      fm.bottom+=workPaint.baselineShift;
    }
  }
  return wid;
}
