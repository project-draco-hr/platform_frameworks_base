{
  int baseLevel=dir == Layout.DIR_LEFT_TO_RIGHT ? 0 : 1;
  int curLevel=levels[lstart];
  int minLevel=curLevel;
  int runCount=1;
  for (int i=lstart + 1, e=lstart + len; i < e; ++i) {
    int level=levels[i];
    if (level != curLevel) {
      curLevel=level;
      ++runCount;
    }
  }
  int visLen=len;
  if ((curLevel & 1) != (baseLevel & 1)) {
    while (--visLen >= 0) {
      char ch=chars[cstart + visLen];
      if (ch == '\n') {
        --visLen;
        break;
      }
      if (ch != ' ' && ch != '\t') {
        break;
      }
    }
    ++visLen;
    if (visLen != len) {
      ++runCount;
    }
  }
  if (runCount == 1 && minLevel == baseLevel) {
    if ((minLevel & 1) != 0) {
      return Layout.DIRS_ALL_RIGHT_TO_LEFT;
    }
    return Layout.DIRS_ALL_LEFT_TO_RIGHT;
  }
  int[] ld=new int[runCount * 2];
  int maxLevel=minLevel;
  int levelBits=minLevel << Layout.RUN_LEVEL_SHIFT;
{
    int n=1;
    int prev=lstart;
    curLevel=minLevel;
    for (int i=lstart, e=lstart + visLen; i < e; ++i) {
      int level=levels[i];
      if (level != curLevel) {
        curLevel=level;
        if (level > maxLevel) {
          maxLevel=level;
        }
 else         if (level < minLevel) {
          minLevel=level;
        }
        ld[n++]=(i - prev) | levelBits;
        ld[n++]=i - lstart;
        levelBits=curLevel << Layout.RUN_LEVEL_SHIFT;
        prev=i;
      }
    }
    ld[n]=(lstart + visLen - prev) | levelBits;
    if (visLen < len) {
      ld[++n]=visLen;
      ld[++n]=(len - visLen) | (baseLevel << Layout.RUN_LEVEL_SHIFT);
    }
  }
  boolean swap;
  if ((minLevel & 1) == baseLevel) {
    minLevel+=1;
    swap=maxLevel > minLevel;
  }
 else {
    swap=runCount > 1;
  }
  if (swap) {
    for (int level=maxLevel - 1; level >= minLevel; --level) {
      for (int i=0; i < ld.length; i+=2) {
        if (levels[ld[i]] >= level) {
          int e=i + 2;
          while (e < ld.length && levels[ld[e]] >= level) {
            e+=2;
          }
          for (int low=i, hi=e - 2; low < hi; low+=2, hi-=2) {
            int x=ld[low];
            ld[low]=ld[hi];
            ld[hi]=x;
            x=ld[low + 1];
            ld[low + 1]=ld[hi + 1];
            ld[hi + 1]=x;
          }
          i=e + 2;
        }
      }
    }
  }
  return new Directions(ld);
}
