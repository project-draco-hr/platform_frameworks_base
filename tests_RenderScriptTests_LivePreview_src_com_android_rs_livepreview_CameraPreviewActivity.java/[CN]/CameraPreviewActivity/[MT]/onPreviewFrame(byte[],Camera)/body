{
  if (mProcessInProgress || mState != STATE_PREVIEW) {
    mCamera.addCallbackBuffer(data);
    return;
  }
  int expectedBytes=mPreviewSize.width * mPreviewSize.height * ImageFormat.getBitsPerPixel(ImageFormat.NV21) / 8;
  if (expectedBytes != data.length) {
    Log.e(TAG,"Mismatched size of buffer! Expected ");
    mState=STATE_NO_CALLBACKS;
    mCamera.setPreviewCallbackWithBuffer(null);
    return;
  }
  mProcessInProgress=true;
  if (mCallbackBitmap == null || mPreviewSize.width != mCallbackBitmap.getWidth() || mPreviewSize.height != mCallbackBitmap.getHeight()) {
    mCallbackBitmap=Bitmap.createBitmap(mPreviewSize.width,mPreviewSize.height,Bitmap.Config.ARGB_8888);
    mFormatView.setImageBitmap(mCallbackBitmap);
    mFilterYuv=new RsYuv(mRS,getResources(),mPreviewSize.width,mPreviewSize.height);
    mFormatView.setImageBitmap(mCallbackBitmap);
  }
  long t1=java.lang.System.currentTimeMillis();
  mFilterYuv.execute(data);
  mFilterYuv.copyOut(mCallbackBitmap);
  long t2=java.lang.System.currentTimeMillis();
  mTiming[mTimingSlot++]=t2 - t1;
  if (mTimingSlot >= mTiming.length) {
    float total=0;
    for (int i=0; i < mTiming.length; i++) {
      total+=(float)mTiming[i];
    }
    total/=mTiming.length;
    Log.e(TAG,"time + " + total);
    mTimingSlot=0;
  }
  mFormatView.invalidate();
  mCamera.addCallbackBuffer(data);
  mProcessInProgress=false;
}
