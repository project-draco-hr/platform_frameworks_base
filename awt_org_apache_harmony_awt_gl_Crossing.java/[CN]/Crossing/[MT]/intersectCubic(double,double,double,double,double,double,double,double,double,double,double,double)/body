{
  if ((rx2 < x1 && rx2 < cx1 && rx2 < cx2 && rx2 < x2) || (rx1 > x1 && rx1 > cx1 && rx1 > cx2 && rx1 > x2) || (ry1 > y1 && ry1 > cy1 && ry1 > cy2 && ry1 > y2)) {
    return 0;
  }
  if (ry2 < y1 && ry2 < cy1 && ry2 < cy2 && ry2 < y2 && rx1 != x1 && rx1 != x2) {
    if (x1 < x2) {
      return x1 < rx1 && rx1 < x2 ? 1 : 0;
    }
    return x2 < rx1 && rx1 < x1 ? -1 : 0;
  }
  CubicCurve c=new CubicCurve(x1,y1,cx1,cy1,cx2,cy2,x2,y2);
  double px1=rx1 - x1;
  double py1=ry1 - y1;
  double px2=rx2 - x1;
  double py2=ry2 - y1;
  double res1[]=new double[3];
  double res2[]=new double[3];
  int rc1=c.solvePoint(res1,px1);
  int rc2=c.solvePoint(res2,px2);
  if (rc1 == 0 && rc2 == 0) {
    return 0;
  }
  double minX=px1 - DELTA;
  double maxX=px2 + DELTA;
  double bound[]=new double[40];
  int bc=0;
  bc=c.addBound(bound,bc,res1,rc1,minX,maxX,false,0);
  bc=c.addBound(bound,bc,res2,rc2,minX,maxX,false,1);
  rc2=c.solveExtremX(res2);
  bc=c.addBound(bound,bc,res2,rc2,minX,maxX,true,2);
  rc2=c.solveExtremY(res2);
  bc=c.addBound(bound,bc,res2,rc2,minX,maxX,true,4);
  if (rx1 < x1 && x1 < rx2) {
    bound[bc++]=0.0;
    bound[bc++]=0.0;
    bound[bc++]=0.0;
    bound[bc++]=6;
  }
  if (rx1 < x2 && x2 < rx2) {
    bound[bc++]=1.0;
    bound[bc++]=c.ax;
    bound[bc++]=c.ay;
    bound[bc++]=7;
  }
  int cross=crossBound(bound,bc,py1,py2);
  if (cross != UNKNOWN) {
    return cross;
  }
  return c.cross(res1,rc1,py1,py2);
}
