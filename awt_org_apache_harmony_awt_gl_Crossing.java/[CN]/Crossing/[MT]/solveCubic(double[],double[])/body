{
  double d=eqn[3];
  if (d == 0) {
    return solveQuad(eqn,res);
  }
  double a=eqn[2] / d;
  double b=eqn[1] / d;
  double c=eqn[0] / d;
  int rc=0;
  double Q=(a * a - 3.0 * b) / 9.0;
  double R=(2.0 * a * a* a - 9.0 * a * b + 27.0 * c) / 54.0;
  double Q3=Q * Q * Q;
  double R2=R * R;
  double n=-a / 3.0;
  if (R2 < Q3) {
    double t=Math.acos(R / Math.sqrt(Q3)) / 3.0;
    double p=2.0 * Math.PI / 3.0;
    double m=-2.0 * Math.sqrt(Q);
    res[rc++]=m * Math.cos(t) + n;
    res[rc++]=m * Math.cos(t + p) + n;
    res[rc++]=m * Math.cos(t - p) + n;
  }
 else {
    double A=Math.pow(Math.abs(R) + Math.sqrt(R2 - Q3),1.0 / 3.0);
    if (R > 0.0) {
      A=-A;
    }
    if (-ROOT_DELTA < A && A < ROOT_DELTA) {
      res[rc++]=n;
    }
 else {
      double B=Q / A;
      res[rc++]=A + B + n;
      double delta=R2 - Q3;
      if (-ROOT_DELTA < delta && delta < ROOT_DELTA) {
        res[rc++]=-(A + B) / 2.0 + n;
      }
    }
  }
  return fixRoots(res,rc);
}
