{
  final Resources resources=context.getResources();
  ArrayList<String> localeList=new ArrayList<String>(Arrays.asList(Resources.getSystem().getAssets().getLocales()));
  if (isInDeveloperMode) {
    if (!localeList.contains("zz_ZZ")) {
      localeList.add("zz_ZZ");
    }
  }
  String[] locales=new String[localeList.size()];
  locales=localeList.toArray(locales);
  final String[] specialLocaleCodes=resources.getStringArray(R.array.special_locale_codes);
  final String[] specialLocaleNames=resources.getStringArray(R.array.special_locale_names);
  Arrays.sort(locales);
  final int origSize=locales.length;
  final LocaleInfo[] preprocess=new LocaleInfo[origSize];
  int finalSize=0;
  for (int i=0; i < origSize; i++) {
    final String s=locales[i];
    final int len=s.length();
    if (len == 5) {
      String language=s.substring(0,2);
      String country=s.substring(3,5);
      final Locale l=new Locale(language,country);
      if (finalSize == 0) {
        if (DEBUG) {
          Log.v(TAG,"adding initial " + toTitleCase(l.getDisplayLanguage(l)));
        }
        preprocess[finalSize++]=new LocaleInfo(toTitleCase(l.getDisplayLanguage(l)),l);
      }
 else {
        if (preprocess[finalSize - 1].locale.getLanguage().equals(language) && !preprocess[finalSize - 1].locale.getLanguage().equals("zz")) {
          if (DEBUG) {
            Log.v(TAG,"backing up and fixing " + preprocess[finalSize - 1].label + " to "+ getDisplayName(preprocess[finalSize - 1].locale,specialLocaleCodes,specialLocaleNames));
          }
          preprocess[finalSize - 1].label=toTitleCase(getDisplayName(preprocess[finalSize - 1].locale,specialLocaleCodes,specialLocaleNames));
          if (DEBUG) {
            Log.v(TAG,"  and adding " + toTitleCase(getDisplayName(l,specialLocaleCodes,specialLocaleNames)));
          }
          preprocess[finalSize++]=new LocaleInfo(toTitleCase(getDisplayName(l,specialLocaleCodes,specialLocaleNames)),l);
        }
 else {
          String displayName;
          if (s.equals("zz_ZZ")) {
            displayName="[Developer] Accented English";
          }
 else           if (s.equals("zz_ZY")) {
            displayName="[Developer] Fake Bi-Directional";
          }
 else {
            displayName=toTitleCase(l.getDisplayLanguage(l));
          }
          if (DEBUG) {
            Log.v(TAG,"adding " + displayName);
          }
          preprocess[finalSize++]=new LocaleInfo(displayName,l);
        }
      }
    }
  }
  final LocaleInfo[] localeInfos=new LocaleInfo[finalSize];
  for (int i=0; i < finalSize; i++) {
    localeInfos[i]=preprocess[i];
  }
  Arrays.sort(localeInfos);
  final LayoutInflater inflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  return new ArrayAdapter<LocaleInfo>(context,layoutId,fieldId,localeInfos){
    @Override public View getView(    int position,    View convertView,    ViewGroup parent){
      View view;
      TextView text;
      if (convertView == null) {
        view=inflater.inflate(layoutId,parent,false);
        text=(TextView)view.findViewById(fieldId);
        view.setTag(text);
      }
 else {
        view=convertView;
        text=(TextView)view.getTag();
      }
      LocaleInfo item=getItem(position);
      text.setText(item.toString());
      text.setTextLocale(item.getLocale());
      return view;
    }
  }
;
}
