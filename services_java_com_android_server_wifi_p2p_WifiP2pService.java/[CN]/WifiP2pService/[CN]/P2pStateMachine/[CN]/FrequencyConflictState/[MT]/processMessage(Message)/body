{
  if (DBG)   logd(getName() + message.toString());
switch (message.what) {
case WifiMonitor.P2P_GO_NEGOTIATION_SUCCESS_EVENT:
case WifiMonitor.P2P_GROUP_FORMATION_SUCCESS_EVENT:
    loge(getName() + "group sucess during freq conflict!");
  break;
case WifiMonitor.P2P_GROUP_STARTED_EVENT:
loge(getName() + "group started after freq conflict, handle anyway");
deferMessage(message);
transitionTo(mGroupNegotiationState);
break;
case WifiMonitor.P2P_GO_NEGOTIATION_FAILURE_EVENT:
case WifiMonitor.P2P_GROUP_REMOVED_EVENT:
case WifiMonitor.P2P_GROUP_FORMATION_FAILURE_EVENT:
break;
case DROP_WIFI_USER_REJECT:
handleGroupCreationFailure();
transitionTo(mInactiveState);
break;
case DROP_WIFI_USER_ACCEPT:
mWifiChannel.sendMessage(WifiP2pService.DISCONNECT_WIFI_REQUEST,1);
mTempoarilyDisconnectedWifi=true;
break;
case DISCONNECT_WIFI_RESPONSE:
if (DBG) logd(getName() + "Wifi disconnected, retry p2p");
transitionTo(mInactiveState);
sendMessage(WifiP2pManager.CONNECT,mSavedPeerConfig);
break;
default :
return NOT_HANDLED;
}
return HANDLED;
}
