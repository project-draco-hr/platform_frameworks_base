{
  int p=offset;
  byte[] output=new byte[len * 3 / 4];
  len+=offset;
  int op=0;
  final int[] decode=((flags & WEB_SAFE) == 0) ? DECODE : DECODE_WEBSAFE;
  int state=0;
  int value=0;
  while (p < len) {
    if (state == 0 && p + 4 <= len && (value=((decode[input[p] & 0xff] << 18) | (decode[input[p + 1] & 0xff] << 12) | (decode[input[p + 2] & 0xff] << 6)| (decode[input[p + 3] & 0xff]))) >= 0) {
      output[op + 2]=(byte)value;
      output[op + 1]=(byte)(value >> 8);
      output[op]=(byte)(value >> 16);
      op+=3;
      p+=4;
      continue;
    }
    int d=decode[input[p++] & 0xff];
switch (state) {
case 0:
      if (d >= 0) {
        value=d;
        ++state;
      }
 else       if (d != SKIP) {
        throw new IllegalArgumentException("bad base-64");
      }
    break;
case 1:
  if (d >= 0) {
    value=(value << 6) | d;
    ++state;
  }
 else   if (d != SKIP) {
    throw new IllegalArgumentException("bad base-64");
  }
break;
case 2:
if (d >= 0) {
value=(value << 6) | d;
++state;
}
 else if (d == EQUALS) {
output[op++]=(byte)(value >> 4);
state=4;
}
 else if (d != SKIP) {
throw new IllegalArgumentException("bad base-64");
}
break;
case 3:
if (d >= 0) {
value=(value << 6) | d;
output[op + 2]=(byte)value;
output[op + 1]=(byte)(value >> 8);
output[op]=(byte)(value >> 16);
op+=3;
state=0;
}
 else if (d == EQUALS) {
output[op + 1]=(byte)(value >> 2);
output[op]=(byte)(value >> 10);
op+=2;
state=5;
}
 else if (d != SKIP) {
throw new IllegalArgumentException("bad base-64");
}
break;
case 4:
if (d == EQUALS) {
++state;
}
 else if (d != SKIP) {
throw new IllegalArgumentException("bad base-64");
}
break;
case 5:
if (d != SKIP) {
throw new IllegalArgumentException("bad base-64");
}
break;
}
}
switch (state) {
case 0:
break;
case 1:
throw new IllegalArgumentException("bad base-64");
case 2:
output[op++]=(byte)(value >> 4);
break;
case 3:
output[op + 1]=(byte)(value >> 2);
output[op]=(byte)(value >> 10);
op+=2;
break;
case 4:
throw new IllegalArgumentException("bad base-64");
case 5:
break;
}
if (op == output.length) {
return output;
}
byte[] temp=new byte[op];
System.arraycopy(output,0,temp,0,op);
return temp;
}
