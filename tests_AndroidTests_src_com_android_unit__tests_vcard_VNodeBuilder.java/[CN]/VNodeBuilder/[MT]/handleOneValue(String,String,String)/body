{
  if (encoding != null) {
    if (encoding.equals("BASE64") || encoding.equals("B")) {
      mCurrentPropNode.propValue_bytes=Base64.decodeBase64(value.getBytes());
      return value;
    }
 else     if (encoding.equals("QUOTED-PRINTABLE")) {
      String quotedPrintable=value.replaceAll("= "," ").replaceAll("=\t","\t");
      String[] lines;
      if (mStrictLineBreakParsing) {
        lines=quotedPrintable.split("\r\n");
      }
 else {
        StringBuilder builder=new StringBuilder();
        int length=quotedPrintable.length();
        ArrayList<String> list=new ArrayList<String>();
        for (int i=0; i < length; i++) {
          char ch=quotedPrintable.charAt(i);
          if (ch == '\n') {
            list.add(builder.toString());
            builder=new StringBuilder();
          }
 else           if (ch == '\r') {
            list.add(builder.toString());
            builder=new StringBuilder();
            if (i < length - 1) {
              char nextCh=quotedPrintable.charAt(i + 1);
              if (nextCh == '\n') {
                i++;
              }
            }
          }
 else {
            builder.append(ch);
          }
        }
        String finalLine=builder.toString();
        if (finalLine.length() > 0) {
          list.add(finalLine);
        }
        lines=list.toArray(new String[0]);
      }
      StringBuilder builder=new StringBuilder();
      for (      String line : lines) {
        if (line.endsWith("=")) {
          line=line.substring(0,line.length() - 1);
        }
        builder.append(line);
      }
      byte[] bytes;
      try {
        bytes=builder.toString().getBytes(mSourceCharset);
      }
 catch (      UnsupportedEncodingException e1) {
        Log.e(LOG_TAG,"Failed to encode: charset=" + mSourceCharset);
        bytes=builder.toString().getBytes();
      }
      try {
        bytes=QuotedPrintableCodec.decodeQuotedPrintable(bytes);
      }
 catch (      DecoderException e) {
        Log.e(LOG_TAG,"Failed to decode quoted-printable: " + e);
        return "";
      }
      try {
        return new String(bytes,targetCharset);
      }
 catch (      UnsupportedEncodingException e) {
        Log.e(LOG_TAG,"Failed to encode: charset=" + targetCharset);
        return new String(bytes);
      }
    }
  }
  return encodeString(value,targetCharset);
}
