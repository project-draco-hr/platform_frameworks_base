{
  ReceivedPointerTracker receivedTracker=mReceivedPointerTracker;
  InjectedPointerTracker injectedTracker=mInjectedPointerTracker;
  final int activePointerCount=receivedTracker.getActivePointerCount();
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(event);
switch (event.getActionMasked()) {
case MotionEvent.ACTION_DOWN:
case MotionEvent.ACTION_POINTER_DOWN:
{
switch (activePointerCount) {
case 0:
{
          throw new IllegalStateException("The must always be one active pointer in" + "touch exploring state!");
        }
case 1:
{
        mSendHoverDelayed.remove();
        mPerformLongPressDelayed.remove();
        final int pointerId=receivedTracker.getPrimaryActivePointerId();
        final int pointerIdBits=(1 << pointerId);
        final int lastAction=injectedTracker.getLastInjectedHoverAction();
        if (lastAction == MotionEvent.ACTION_HOVER_EXIT) {
          mSendHoverDelayed.post(event,MotionEvent.ACTION_HOVER_ENTER,pointerIdBits,policyFlags,DELAY_SEND_HOVER_ENTER);
        }
 else {
          sendMotionEvent(event,MotionEvent.ACTION_HOVER_MOVE,pointerIdBits,policyFlags);
        }
        if (mLastTouchExploreEvent == null) {
          break;
        }
        if (event.getPointerCount() != mLastTouchExploreEvent.getPointerCount()) {
          mLastTouchExploreEvent=null;
          break;
        }
        final long pointerDownTime=receivedTracker.getReceivedPointerDownTime(pointerId);
        final long lastExploreTime=mLastTouchExploreEvent.getEventTime();
        final long deltaTimeExplore=pointerDownTime - lastExploreTime;
        if (deltaTimeExplore <= ACTIVATION_TIME_SLOP) {
          mPerformLongPressDelayed.post(event,policyFlags,ViewConfiguration.getLongPressTimeout());
          break;
        }
      }
    break;
default :
{
  }
break;
}
}
break;
case MotionEvent.ACTION_MOVE:
{
final int pointerId=receivedTracker.getPrimaryActivePointerId();
final int pointerIndex=event.findPointerIndex(pointerId);
final int pointerIdBits=(1 << pointerId);
switch (activePointerCount) {
case 0:
{
}
break;
case 1:
{
if (!mTouchExploreGestureInProgress) {
final float deltaX=receivedTracker.getReceivedPointerDownX(pointerId) - event.getX(pointerIndex);
final float deltaY=receivedTracker.getReceivedPointerDownY(pointerId) - event.getY(pointerIndex);
final double moveDelta=Math.hypot(deltaX,deltaY);
if (moveDelta > mTouchExplorationTapSlop) {
mVelocityTracker.computeCurrentVelocity(1000);
final float maxAbsVelocity=Math.max(Math.abs(mVelocityTracker.getXVelocity(pointerId)),Math.abs(mVelocityTracker.getYVelocity(pointerId)));
if (maxAbsVelocity > 1000) {
clear(event,policyFlags);
mCurrentState=STATE_GESTURE_DETECTING;
event.setAction(MotionEvent.ACTION_DOWN);
handleMotionEventGestureDetecting(event,policyFlags);
return;
}
mTouchExploreGestureInProgress=true;
sendAccessibilityEvent(TYPE_TOUCH_EXPLORATION_GESTURE_START);
mSendHoverDelayed.forceSendAndRemove();
mPerformLongPressDelayed.remove();
final int lastAction=injectedTracker.getLastInjectedHoverAction();
if (lastAction == MotionEvent.ACTION_HOVER_EXIT) {
sendMotionEvent(event,MotionEvent.ACTION_HOVER_ENTER,pointerIdBits,policyFlags);
}
sendMotionEvent(event,MotionEvent.ACTION_HOVER_MOVE,pointerIdBits,policyFlags);
}
}
 else {
sendMotionEvent(event,MotionEvent.ACTION_HOVER_MOVE,pointerIdBits,policyFlags);
}
if (!mTouchExploreGestureInProgress && mLastTouchExploreEvent != null && mPerformLongPressDelayed.isPenidng()) {
final float deltaX=mLastTouchExploreEvent.getX(pointerIndex) - event.getX(pointerIndex);
final float deltaY=mLastTouchExploreEvent.getY(pointerIndex) - event.getY(pointerIndex);
final float moveDelta=(float)Math.hypot(deltaX,deltaY);
if (moveDelta > mTouchExplorationTapSlop) {
mLastTouchExploreEvent=null;
mPerformLongPressDelayed.remove();
break;
}
}
}
break;
case 2:
{
mSendHoverDelayed.remove();
mPerformLongPressDelayed.remove();
ensureHoverExitSent(event,pointerIdBits,policyFlags);
if (isDraggingGesture(event)) {
mCurrentState=STATE_DRAGGING;
if (mTouchExploreGestureInProgress) {
sendAccessibilityEvent(TYPE_TOUCH_EXPLORATION_GESTURE_END);
mTouchExploreGestureInProgress=false;
}
mLastTouchExploreEvent=null;
mDraggingPointerId=pointerId;
sendMotionEvent(event,MotionEvent.ACTION_DOWN,pointerIdBits,policyFlags);
}
 else {
mCurrentState=STATE_DELEGATING;
mSendHoverDelayed.remove();
if (mTouchExploreGestureInProgress) {
sendAccessibilityEvent(TYPE_TOUCH_EXPLORATION_GESTURE_END);
mTouchExploreGestureInProgress=false;
}
mLastTouchExploreEvent=null;
sendDownForAllActiveNotInjectedPointers(event,policyFlags);
}
}
break;
default :
{
mSendHoverDelayed.remove();
mPerformLongPressDelayed.remove();
ensureHoverExitSent(event,pointerIdBits,policyFlags);
mCurrentState=STATE_DELEGATING;
mSendHoverDelayed.remove();
if (mTouchExploreGestureInProgress) {
sendAccessibilityEvent(TYPE_TOUCH_EXPLORATION_GESTURE_END);
mTouchExploreGestureInProgress=false;
}
mLastTouchExploreEvent=null;
sendDownForAllActiveNotInjectedPointers(event,policyFlags);
}
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_POINTER_UP:
{
final int pointerId=receivedTracker.getLastReceivedUpPointerId();
final int pointerIdBits=(1 << pointerId);
switch (activePointerCount) {
case 0:
{
if (!receivedTracker.wasLastReceivedUpPointerActive()) {
break;
}
mPerformLongPressDelayed.remove();
if (mTouchExploreGestureInProgress) {
mTouchExploreGestureInProgress=false;
mSendHoverDelayed.forceSendAndRemove();
ensureHoverExitSent(event,pointerIdBits,policyFlags);
mLastTouchExploreEvent=MotionEvent.obtain(event);
sendAccessibilityEvent(TYPE_TOUCH_EXPLORATION_GESTURE_END);
break;
}
if (mLastTouchExploreEvent != null) {
final long eventTime=receivedTracker.getLastReceivedUpPointerDownTime();
final long exploreTime=mLastTouchExploreEvent.getEventTime();
final long deltaTime=eventTime - exploreTime;
if (deltaTime > ACTIVATION_TIME_SLOP) {
mSendHoverDelayed.forceSendAndRemove();
ensureHoverExitSent(event,pointerIdBits,policyFlags);
mLastTouchExploreEvent=MotionEvent.obtain(event);
break;
}
final int pointerIndex=event.findPointerIndex(pointerId);
final float deltaX=mLastTouchExploreEvent.getX(pointerIndex) - event.getX(pointerIndex);
final float deltaY=mLastTouchExploreEvent.getY(pointerIndex) - event.getY(pointerIndex);
final float deltaMove=(float)Math.hypot(deltaX,deltaY);
if (deltaMove > mTouchExplorationTapSlop) {
mSendHoverDelayed.forceSendAndRemove();
ensureHoverExitSent(event,pointerIdBits,policyFlags);
mLastTouchExploreEvent=MotionEvent.obtain(event);
break;
}
mSendHoverDelayed.remove();
ensureHoverExitSent(event,pointerIdBits,policyFlags);
sendActionDownAndUp(mLastTouchExploreEvent,policyFlags);
mLastTouchExploreEvent=null;
}
 else {
mSendHoverDelayed.forceSendAndRemove();
ensureHoverExitSent(event,pointerIdBits,policyFlags);
mLastTouchExploreEvent=MotionEvent.obtain(event);
}
}
break;
}
if (mVelocityTracker != null) {
mVelocityTracker.clear();
mVelocityTracker=null;
}
}
break;
case MotionEvent.ACTION_CANCEL:
{
mSendHoverDelayed.remove();
mPerformLongPressDelayed.remove();
final int pointerId=receivedTracker.getPrimaryActivePointerId();
final int pointerIdBits=(1 << pointerId);
ensureHoverExitSent(event,pointerIdBits,policyFlags);
clear();
if (mVelocityTracker != null) {
mVelocityTracker.clear();
mVelocityTracker=null;
}
}
break;
}
}
