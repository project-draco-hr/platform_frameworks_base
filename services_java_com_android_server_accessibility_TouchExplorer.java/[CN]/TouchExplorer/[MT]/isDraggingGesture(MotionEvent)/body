{
  PointerTracker pointerTracker=mPointerTracker;
  int[] pointerIds=mTempPointerIds;
  pointerTracker.populateActivePointerIds(pointerIds);
  final int firstPtrIndex=event.findPointerIndex(pointerIds[0]);
  final int secondPtrIndex=event.findPointerIndex(pointerIds[1]);
  final float firstPtrX=event.getX(firstPtrIndex);
  final float firstPtrY=event.getY(firstPtrIndex);
  final float secondPtrX=event.getX(secondPtrIndex);
  final float secondPtrY=event.getY(secondPtrIndex);
  final float firstDeltaX=firstPtrX - pointerTracker.getReceivedPointerDownX(firstPtrIndex);
  final float firstDeltaY=firstPtrY - pointerTracker.getReceivedPointerDownY(firstPtrIndex);
  if (firstDeltaX == 0 && firstDeltaY == 0) {
    return true;
  }
  final float firstMagnitude=(float)Math.sqrt(firstDeltaX * firstDeltaX + firstDeltaY * firstDeltaY);
  final float firstXNormalized=(firstMagnitude > 0) ? firstDeltaX / firstMagnitude : firstDeltaX;
  final float firstYNormalized=(firstMagnitude > 0) ? firstDeltaY / firstMagnitude : firstDeltaY;
  final float secondDeltaX=secondPtrX - pointerTracker.getReceivedPointerDownX(secondPtrIndex);
  final float secondDeltaY=secondPtrY - pointerTracker.getReceivedPointerDownY(secondPtrIndex);
  if (secondDeltaX == 0 && secondDeltaY == 0) {
    return true;
  }
  final float secondMagnitude=(float)Math.sqrt(secondDeltaX * secondDeltaX + secondDeltaY * secondDeltaY);
  final float secondXNormalized=(secondMagnitude > 0) ? secondDeltaX / secondMagnitude : secondDeltaX;
  final float secondYNormalized=(secondMagnitude > 0) ? secondDeltaY / secondMagnitude : secondDeltaY;
  final float angleCos=firstXNormalized * secondXNormalized + firstYNormalized * secondYNormalized;
  if (angleCos < MAX_DRAGGING_ANGLE_COS) {
    return false;
  }
  return true;
}
