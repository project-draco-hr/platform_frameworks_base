{
  final IndentingPrintWriter pw=new IndentingPrintWriter(writer,"  ");
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println("Permission Denial: can't dump TvInputHardwareManager from pid=" + Binder.getCallingPid() + ", uid="+ Binder.getCallingUid());
    return;
  }
synchronized (mLock) {
    pw.println("TvInputHardwareManager Info:");
    pw.increaseIndent();
    pw.println("mConnections: deviceId -> Connection");
    pw.increaseIndent();
    for (int i=0; i < mConnections.size(); i++) {
      int deviceId=mConnections.keyAt(i);
      Connection mConnection=mConnections.valueAt(i);
      pw.println(deviceId + ": " + mConnection);
    }
    pw.decreaseIndent();
    pw.println("mHardwareList:");
    pw.increaseIndent();
    for (    TvInputHardwareInfo tvInputHardwareInfo : mHardwareList) {
      pw.println(tvInputHardwareInfo);
    }
    pw.decreaseIndent();
    pw.println("mHdmiDeviceList:");
    pw.increaseIndent();
    for (    HdmiDeviceInfo hdmiDeviceInfo : mHdmiDeviceList) {
      pw.println(hdmiDeviceInfo);
    }
    pw.decreaseIndent();
    pw.println("mHardwareInputIdMap: deviceId -> inputId");
    pw.increaseIndent();
    for (int i=0; i < mHardwareInputIdMap.size(); i++) {
      int deviceId=mHardwareInputIdMap.keyAt(i);
      String inputId=mHardwareInputIdMap.valueAt(i);
      pw.println(deviceId + ": " + inputId);
    }
    pw.decreaseIndent();
    pw.println("mHdmiInputIdMap: id -> inputId");
    pw.increaseIndent();
    for (int i=0; i < mHdmiInputIdMap.size(); i++) {
      int id=mHdmiInputIdMap.keyAt(i);
      String inputId=mHdmiInputIdMap.valueAt(i);
      pw.println(id + ": " + inputId);
    }
    pw.decreaseIndent();
    pw.println("mInputMap: inputId -> inputInfo");
    pw.increaseIndent();
    for (    Map.Entry<String,TvInputInfo> entry : mInputMap.entrySet()) {
      pw.println(entry.getKey() + ": " + entry.getValue());
    }
    pw.decreaseIndent();
    pw.decreaseIndent();
  }
}
