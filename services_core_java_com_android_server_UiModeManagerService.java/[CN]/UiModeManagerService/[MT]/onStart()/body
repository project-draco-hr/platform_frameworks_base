{
  final Context context=getContext();
  mTwilightManager=getLocalService(TwilightManager.class);
  final PowerManager powerManager=(PowerManager)context.getSystemService(Context.POWER_SERVICE);
  mWakeLock=powerManager.newWakeLock(PowerManager.FULL_WAKE_LOCK,TAG);
  context.registerReceiver(mDockModeReceiver,new IntentFilter(Intent.ACTION_DOCK_EVENT));
  context.registerReceiver(mBatteryReceiver,new IntentFilter(Intent.ACTION_BATTERY_CHANGED));
  mConfiguration.setToDefaults();
  final Resources res=context.getResources();
  mDefaultUiModeType=res.getInteger(com.android.internal.R.integer.config_defaultUiModeType);
  mCarModeKeepsScreenOn=(res.getInteger(com.android.internal.R.integer.config_carDockKeepsScreenOn) == 1);
  mDeskModeKeepsScreenOn=(res.getInteger(com.android.internal.R.integer.config_deskDockKeepsScreenOn) == 1);
  final PackageManager pm=context.getPackageManager();
  mTelevision=pm.hasSystemFeature(PackageManager.FEATURE_TELEVISION) || pm.hasSystemFeature(PackageManager.FEATURE_LEANBACK);
  mWatch=pm.hasSystemFeature(PackageManager.FEATURE_WATCH);
  final int defaultNightMode=res.getInteger(com.android.internal.R.integer.config_defaultNightMode);
  mNightMode=Settings.Secure.getInt(context.getContentResolver(),Settings.Secure.UI_NIGHT_MODE,defaultNightMode);
  mTwilightManager.registerListener(mTwilightListener,mHandler);
  publishBinderService(Context.UI_MODE_SERVICE,mService);
}
