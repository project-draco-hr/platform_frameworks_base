{
  ScanResult scanResult=null;
  if (line != null) {
synchronized (mScanResultCache) {
      scanResult=mScanResultCache.get(line);
      if (scanResult == null) {
        String[] result=scanResultPattern.split(line);
        if (3 <= result.length && result.length <= 5) {
          int frequency;
          int level;
          try {
            frequency=Integer.parseInt(result[1]);
            level=Integer.parseInt(result[2]);
          }
 catch (          NumberFormatException e) {
            frequency=0;
            level=0;
          }
          String ssid;
          String flags;
          if (result.length == 4) {
            if (result[3].charAt(0) == '[') {
              flags=result[3];
              ssid="";
            }
 else {
              flags="";
              ssid=result[3];
            }
          }
 else           if (result.length == 5) {
            flags=result[3];
            ssid=result[4];
          }
 else {
            flags="";
            ssid="";
          }
          if (0 < ssid.trim().length()) {
            scanResult=new ScanResult(ssid,result[0],flags,level,frequency);
            mScanResultCache.put(line,scanResult);
          }
        }
 else {
          Log.w(TAG,"Misformatted scan result text with " + result.length + " fields: "+ line);
        }
      }
    }
  }
  return scanResult;
}
