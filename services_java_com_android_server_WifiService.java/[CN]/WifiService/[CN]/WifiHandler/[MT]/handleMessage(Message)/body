{
switch (msg.what) {
case MESSAGE_ENABLE_WIFI:
    setWifiEnabledBlocking(true,msg.arg1 == 1,msg.arg2);
  if (mWifiWatchdogService == null) {
    mWifiWatchdogService=new WifiWatchdogService(mContext,mWifiStateTracker);
  }
sWakeLock.release();
break;
case MESSAGE_START_WIFI:
reportStartWorkSource();
mWifiStateTracker.setScanOnlyMode(msg.arg1 == WifiManager.WIFI_MODE_SCAN_ONLY);
mWifiStateTracker.restart();
mWifiStateTracker.setHighPerfMode(msg.arg1 == WifiManager.WIFI_MODE_FULL_HIGH_PERF);
sWakeLock.release();
break;
case MESSAGE_UPDATE_STATE:
doUpdateWifiState();
break;
case MESSAGE_DISABLE_WIFI:
setWifiEnabledBlocking(false,msg.arg1 == 1,msg.arg2);
mWifiWatchdogService=null;
sWakeLock.release();
break;
case MESSAGE_STOP_WIFI:
mWifiStateTracker.disconnectAndStop();
break;
case MESSAGE_RELEASE_WAKELOCK:
sDriverStopWakeLock.release();
break;
case MESSAGE_START_ACCESS_POINT:
setWifiApEnabledBlocking(true,msg.arg1,(WifiConfiguration)msg.obj);
sWakeLock.release();
break;
case MESSAGE_STOP_ACCESS_POINT:
setWifiApEnabledBlocking(false,msg.arg1,(WifiConfiguration)msg.obj);
sWakeLock.release();
break;
case MESSAGE_SET_CHANNELS:
setNumAllowedChannelsBlocking(msg.arg1,msg.arg2 == 1);
break;
case MESSAGE_ENABLE_NETWORKS:
mWifiStateTracker.enableAllNetworks(getConfiguredNetworks());
break;
case MESSAGE_START_SCAN:
boolean forceActive=(msg.arg1 == 1);
switch (mWifiStateTracker.getSupplicantState()) {
case DISCONNECTED:
case INACTIVE:
case SCANNING:
case DORMANT:
break;
default :
mWifiStateTracker.setScanResultHandling(WifiStateTracker.SUPPL_SCAN_HANDLING_LIST_ONLY);
break;
}
mWifiStateTracker.scan(forceActive);
break;
case MESSAGE_REPORT_WORKSOURCE:
reportStartWorkSource();
break;
case MESSAGE_ENABLE_RSSI_POLLING:
mWifiStateTracker.enableRssiPolling(msg.arg1 == 1);
break;
case MESSAGE_WRITE_WIFI_AP_CONFIG:
writeWifiApConfigBlocked((WifiConfiguration)msg.obj);
break;
case MESSAGE_READ_WIFI_AP_CONFIG:
readWifiApConfigBlocked();
break;
}
}
