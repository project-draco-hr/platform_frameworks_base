{
switch (msg.what) {
case AsyncChannel.CMD_CHANNEL_HALF_CONNECTED:
{
      if (msg.arg1 == AsyncChannel.STATUS_SUCCESSFUL) {
        Slog.d(TAG,"New client listening to asynchronous messages");
        mClients.add((AsyncChannel)msg.obj);
      }
 else {
        Slog.e(TAG,"Client connection failure, error=" + msg.arg1);
      }
      break;
    }
case AsyncChannel.CMD_CHANNEL_DISCONNECTED:
{
    if (msg.arg1 == AsyncChannel.STATUS_SEND_UNSUCCESSFUL) {
      Slog.d(TAG,"Send failed, client connection lost");
    }
 else {
      Slog.d(TAG,"Client connection lost with reason: " + msg.arg1);
    }
    mClients.remove((AsyncChannel)msg.obj);
    break;
  }
case AsyncChannel.CMD_CHANNEL_FULL_CONNECTION:
{
  AsyncChannel ac=new AsyncChannel();
  ac.connect(mContext,this,msg.replyTo);
  break;
}
case WifiManager.ENABLE_TRAFFIC_STATS_POLL:
{
mEnableTrafficStatsPoll=(msg.arg1 == 1);
mTrafficStatsPollToken++;
if (mEnableTrafficStatsPoll) {
  notifyOnDataActivity();
  sendMessageDelayed(Message.obtain(this,WifiManager.TRAFFIC_STATS_POLL,mTrafficStatsPollToken,0),POLL_TRAFFIC_STATS_INTERVAL_MSECS);
}
break;
}
case WifiManager.TRAFFIC_STATS_POLL:
{
if (msg.arg1 == mTrafficStatsPollToken) {
notifyOnDataActivity();
sendMessageDelayed(Message.obtain(this,WifiManager.TRAFFIC_STATS_POLL,mTrafficStatsPollToken,0),POLL_TRAFFIC_STATS_INTERVAL_MSECS);
}
break;
}
case WifiManager.CONNECT_NETWORK:
{
mWifiStateMachine.sendMessage(Message.obtain(msg));
break;
}
case WifiManager.SAVE_NETWORK:
{
mWifiStateMachine.sendMessage(Message.obtain(msg));
break;
}
case WifiManager.FORGET_NETWORK:
{
mWifiStateMachine.sendMessage(Message.obtain(msg));
break;
}
case WifiManager.START_WPS:
{
mWifiStateMachine.sendMessage(Message.obtain(msg));
break;
}
case WifiManager.CANCEL_WPS:
{
mWifiStateMachine.sendMessage(Message.obtain(msg));
break;
}
case WifiManager.DISABLE_NETWORK:
{
mWifiStateMachine.sendMessage(Message.obtain(msg));
break;
}
default :
{
Slog.d(TAG,"WifiServicehandler.handleMessage ignoring msg=" + msg);
break;
}
}
}
