{
  final long dstCount=dstData[dstOff + SYS_MEM_USAGE_SAMPLE_COUNT];
  final long addCount=addData[addOff + SYS_MEM_USAGE_SAMPLE_COUNT];
  if (dstCount == 0) {
    dstData[dstOff + SYS_MEM_USAGE_SAMPLE_COUNT]=addCount;
    for (int i=SYS_MEM_USAGE_CACHED_MINIMUM; i < SYS_MEM_USAGE_COUNT; i++) {
      dstData[dstOff + i]=addData[addOff + i];
    }
  }
 else   if (addCount > 0) {
    dstData[dstOff + SYS_MEM_USAGE_SAMPLE_COUNT]=dstCount + addCount;
    for (int i=SYS_MEM_USAGE_CACHED_MINIMUM; i < SYS_MEM_USAGE_COUNT; i+=3) {
      if (dstData[dstOff + i] > addData[addOff + i]) {
        dstData[dstOff + i]=addData[addOff + i];
      }
      dstData[dstOff + i + 1]=(long)(((dstData[dstOff + i + 1] * (double)dstCount) + (addData[addOff + i + 1] * (double)addCount)) / (dstCount + addCount));
      if (dstData[dstOff + i + 2] < addData[addOff + i + 2]) {
        dstData[dstOff + i + 2]=addData[addOff + i + 2];
      }
    }
  }
}
