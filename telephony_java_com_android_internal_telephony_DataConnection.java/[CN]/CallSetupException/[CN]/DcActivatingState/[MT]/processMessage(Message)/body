{
  boolean retVal;
  AsyncResult ar;
  ConnectionParams cp;
switch (msg.what) {
case EVENT_DISCONNECT:
    if (DBG)     log("DcActivatingState deferring msg.what=EVENT_DISCONNECT" + mRefCount);
  deferMessage(msg);
retVal=HANDLED;
break;
case EVENT_CONNECT:
if (DBG) log("DcActivatingState deferring msg.what=EVENT_CONNECT refCount = " + mRefCount);
deferMessage(msg);
retVal=HANDLED;
break;
case EVENT_SETUP_DATA_CONNECTION_DONE:
if (DBG) log("DcActivatingState msg.what=EVENT_SETUP_DATA_CONNECTION_DONE");
ar=(AsyncResult)msg.obj;
cp=(ConnectionParams)ar.userObj;
DataCallState.SetupResult result=onSetupConnectionCompleted(ar);
if (DBG) log("DcActivatingState onSetupConnectionCompleted result=" + result);
switch (result) {
case SUCCESS:
mActiveState.setEnterNotificationParams(cp,FailCause.NONE);
transitionTo(mActiveState);
break;
case ERR_BadCommand:
mInactiveState.setEnterNotificationParams(cp,result.mFailCause,-1);
transitionTo(mInactiveState);
break;
case ERR_UnacceptableParameter:
tearDownData(cp);
transitionTo(mDisconnectingErrorCreatingConnection);
break;
case ERR_GetLastErrorFromRil:
phone.mCM.getLastDataCallFailCause(obtainMessage(EVENT_GET_LAST_FAIL_DONE,cp));
break;
case ERR_RilError:
mInactiveState.setEnterNotificationParams(cp,result.mFailCause,getSuggestedRetryTime(ar));
transitionTo(mInactiveState);
break;
case ERR_Stale:
break;
default :
throw new RuntimeException("Unknown SetupResult, should not happen");
}
retVal=HANDLED;
break;
case EVENT_GET_LAST_FAIL_DONE:
ar=(AsyncResult)msg.obj;
cp=(ConnectionParams)ar.userObj;
FailCause cause=FailCause.UNKNOWN;
if (cp.tag == mTag) {
if (DBG) log("DcActivatingState msg.what=EVENT_GET_LAST_FAIL_DONE");
if (ar.exception == null) {
int rilFailCause=((int[])(ar.result))[0];
cause=FailCause.fromInt(rilFailCause);
}
mInactiveState.setEnterNotificationParams(cp,cause,-1);
transitionTo(mInactiveState);
}
 else {
if (DBG) {
log("DcActivatingState EVENT_GET_LAST_FAIL_DONE is stale cp.tag=" + cp.tag + ", mTag="+ mTag);
}
}
retVal=HANDLED;
break;
default :
if (VDBG) {
log("DcActivatingState not handled msg.what=0x" + Integer.toHexString(msg.what));
}
retVal=NOT_HANDLED;
break;
}
return retVal;
}
