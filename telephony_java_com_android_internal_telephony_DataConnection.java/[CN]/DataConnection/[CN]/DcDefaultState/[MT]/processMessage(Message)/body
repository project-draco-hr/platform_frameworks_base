{
  AsyncResult ar;
switch (msg.what) {
case AsyncChannel.CMD_CHANNEL_FULL_CONNECTION:
{
      if (mAc != null) {
        log("Disconnecting to previous connection mAc=" + mAc);
        mAc.replyToMessage(msg,AsyncChannel.CMD_CHANNEL_FULLY_CONNECTED,AsyncChannel.STATUS_FULL_CONNECTION_REFUSED_ALREADY_CONNECTED);
      }
 else {
        mAc=new AsyncChannel();
        mAc.connected(null,getHandler(),msg.replyTo);
        log("DcDefaultState: FULL_CONNECTION reply connected");
        mAc.replyToMessage(msg,AsyncChannel.CMD_CHANNEL_FULLY_CONNECTED,AsyncChannel.STATUS_SUCCESSFUL,mId,"hi");
      }
      break;
    }
case AsyncChannel.CMD_CHANNEL_DISCONNECT:
{
    log("CMD_CHANNEL_DISCONNECT");
    mAc.disconnect();
    break;
  }
case AsyncChannel.CMD_CHANNEL_DISCONNECTED:
{
  log("CMD_CHANNEL_DISCONNECTED");
  mAc=null;
  break;
}
case DataConnectionAc.REQ_IS_INACTIVE:
{
boolean val=getCurrentState() == mInactiveState;
log("REQ_IS_INACTIVE  isInactive=" + val);
mAc.replyToMessage(msg,DataConnectionAc.RSP_IS_INACTIVE,val ? 1 : 0);
break;
}
case DataConnectionAc.REQ_GET_CID:
{
log("REQ_GET_CID  cid=" + cid);
mAc.replyToMessage(msg,DataConnectionAc.RSP_GET_CID,cid);
break;
}
case DataConnectionAc.REQ_GET_APNSETTING:
{
log("REQ_GET_APNSETTING  apnSetting=" + mApn);
mAc.replyToMessage(msg,DataConnectionAc.RSP_GET_APNSETTING,mApn);
break;
}
case DataConnectionAc.REQ_GET_LINK_PROPERTIES:
{
LinkProperties lp=new LinkProperties(mLinkProperties);
log("REQ_GET_LINK_PROPERTIES linkProperties" + lp);
mAc.replyToMessage(msg,DataConnectionAc.RSP_GET_LINK_PROPERTIES,lp);
break;
}
case DataConnectionAc.REQ_SET_LINK_PROPERTIES_HTTP_PROXY:
{
ProxyProperties proxy=(ProxyProperties)msg.obj;
log("REQ_SET_LINK_PROPERTIES_HTTP_PROXY proxy=" + proxy);
mLinkProperties.setHttpProxy(proxy);
mAc.replyToMessage(msg,DataConnectionAc.RSP_SET_LINK_PROPERTIES_HTTP_PROXY);
break;
}
case DataConnectionAc.REQ_UPDATE_LINK_PROPERTIES_DATA_CALL_STATE:
{
DataCallState newState=(DataCallState)msg.obj;
int updated=updateLinkProperty(newState) ? 1 : 0;
if (DBG) {
log("REQ_UPDATE_LINK_PROPERTIES_DATA_CALL_STATE updated=" + (updated == 1) + " newState="+ newState);
}
mAc.replyToMessage(msg,DataConnectionAc.RSP_UPDATE_LINK_PROPERTIES_DATA_CALL_STATE,updated);
break;
}
case DataConnectionAc.REQ_GET_LINK_CAPABILITIES:
{
LinkCapabilities lc=new LinkCapabilities(mCapabilities);
log("REQ_GET_LINK_CAPABILITIES linkCapabilities" + lc);
mAc.replyToMessage(msg,DataConnectionAc.RSP_GET_LINK_CAPABILITIES,lc);
break;
}
case DataConnectionAc.REQ_RESET:
if (DBG) log("DcDefaultState: msg.what=REQ_RESET");
clearSettings();
mAc.replyToMessage(msg,DataConnectionAc.RSP_RESET);
transitionTo(mInactiveState);
break;
case EVENT_CONNECT:
if (DBG) log("DcDefaultState: msg.what=EVENT_CONNECT, fail not expected");
ConnectionParams cp=(ConnectionParams)msg.obj;
notifyConnectCompleted(cp,FailCause.UNKNOWN);
break;
case EVENT_DISCONNECT:
if (DBG) log("DcDefaultState: msg.what=EVENT_DISCONNECT");
notifyDisconnectCompleted((DisconnectParams)msg.obj);
break;
case EVENT_RIL_CONNECTED:
ar=(AsyncResult)msg.obj;
if (ar.exception == null) {
mRilVersion=(Integer)ar.result;
if (DBG) {
log("DcDefaultState: msg.what=EVENT_RIL_CONNECTED mRilVersion=" + mRilVersion);
}
}
 else {
log("Unexpected exception on EVENT_RIL_CONNECTED");
mRilVersion=-1;
}
break;
default :
if (DBG) {
log("DcDefaultState: shouldn't happen but ignore msg.what=" + msg.what);
}
break;
}
return HANDLED;
}
