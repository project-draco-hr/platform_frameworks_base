{
  r=Math.min(1.0f,r);
  r=Math.max(0,r);
  mYProgress=r;
  final LayoutParams viewLp=(LayoutParams)mView.getLayoutParams();
  final LayoutParams highlightLp=(LayoutParams)mHighlight.getLayoutParams();
  int stackDirection=(mStackMode == ITEMS_SLIDE_UP) ? 1 : -1;
switch (mMode) {
case NORMAL_MODE:
    viewLp.setVerticalOffset(Math.round(-r * stackDirection * mViewHeight));
  highlightLp.setVerticalOffset(Math.round(-r * stackDirection * mViewHeight));
mHighlight.setAlpha(highlightAlphaInterpolator(r));
float alpha=viewAlphaInterpolator(1 - r);
if (mView.getAlpha() == 0 && alpha != 0 && mView.getVisibility() != VISIBLE) {
mView.setVisibility(VISIBLE);
}
 else if (alpha == 0 && mView.getAlpha() != 0 && mView.getVisibility() == VISIBLE) {
mView.setVisibility(INVISIBLE);
}
mView.setAlpha(alpha);
mView.setRotationX(stackDirection * 90.0f * rotationInterpolator(r));
mHighlight.setRotationX(stackDirection * 90.0f * rotationInterpolator(r));
break;
case BEGINNING_OF_STACK_MODE:
r=r * 0.2f;
viewLp.setVerticalOffset(Math.round(-stackDirection * r * mViewHeight));
highlightLp.setVerticalOffset(Math.round(-stackDirection * r * mViewHeight));
mHighlight.setAlpha(highlightAlphaInterpolator(r));
break;
case END_OF_STACK_MODE:
r=(1 - r) * 0.2f;
viewLp.setVerticalOffset(Math.round(stackDirection * r * mViewHeight));
highlightLp.setVerticalOffset(Math.round(stackDirection * r * mViewHeight));
mHighlight.setAlpha(highlightAlphaInterpolator(r));
break;
}
}
