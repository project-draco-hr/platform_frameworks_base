{
  XmlPullParser parser=null;
  FileInputStream stream=null;
  Resources r=mContext.getResources();
  try {
    if (DBG)     Log.d(LOG_TAG,"loadEriFileFromXml: check for alternate file");
    stream=new FileInputStream(r.getString(com.android.internal.R.string.alternate_eri_file));
    parser=Xml.newPullParser();
    parser.setInput(stream,null);
    if (DBG)     Log.d(LOG_TAG,"loadEriFileFromXml: opened alternate file");
  }
 catch (  FileNotFoundException e) {
    if (DBG)     Log.d(LOG_TAG,"loadEriFileFromXml: no alternate file");
    parser=null;
  }
catch (  XmlPullParserException e) {
    if (DBG)     Log.d(LOG_TAG,"loadEriFileFromXml: no parser for alternate file");
    parser=null;
  }
  if (parser == null) {
    if (DBG)     Log.d(LOG_TAG,"loadEriFileFromXml: open normal file");
    parser=r.getXml(com.android.internal.R.xml.eri);
  }
  try {
    XmlUtils.beginDocument(parser,"EriFile");
    mEriFile.mVersionNumber=Integer.parseInt(parser.getAttributeValue(null,"VersionNumber"));
    mEriFile.mNumberOfEriEntries=Integer.parseInt(parser.getAttributeValue(null,"NumberOfEriEntries"));
    mEriFile.mEriFileType=Integer.parseInt(parser.getAttributeValue(null,"EriFileType"));
    int parsedEriEntries=0;
    while (true) {
      XmlUtils.nextElement(parser);
      String name=parser.getName();
      if (name == null) {
        if (parsedEriEntries != mEriFile.mNumberOfEriEntries)         Log.e(LOG_TAG,"Error Parsing ERI file: " + mEriFile.mNumberOfEriEntries + " defined, "+ parsedEriEntries+ " parsed!");
        break;
      }
 else       if (name.equals("CallPromptId")) {
        int id=Integer.parseInt(parser.getAttributeValue(null,"Id"));
        String text=parser.getAttributeValue(null,"CallPromptText");
        if (id >= 0 && id <= 2) {
          mEriFile.mCallPromptId[id]=text;
        }
 else {
          Log.e(LOG_TAG,"Error Parsing ERI file: found" + id + " CallPromptId");
        }
      }
 else       if (name.equals("EriInfo")) {
        int roamingIndicator=Integer.parseInt(parser.getAttributeValue(null,"RoamingIndicator"));
        int iconIndex=Integer.parseInt(parser.getAttributeValue(null,"IconIndex"));
        int iconMode=Integer.parseInt(parser.getAttributeValue(null,"IconMode"));
        String eriText=parser.getAttributeValue(null,"EriText");
        int callPromptId=Integer.parseInt(parser.getAttributeValue(null,"CallPromptId"));
        int alertId=Integer.parseInt(parser.getAttributeValue(null,"AlertId"));
        parsedEriEntries++;
        mEriFile.mRoamIndTable.put(roamingIndicator,new EriInfo(roamingIndicator,iconIndex,iconMode,eriText,callPromptId,alertId));
      }
    }
    if (DBG)     Log.d(LOG_TAG,"loadEriFileFromXml: eri parsing successful, file loaded");
    isEriFileLoaded=true;
  }
 catch (  Exception e) {
    Log.e(LOG_TAG,"Got exception while loading ERI file.",e);
  }
 finally {
    if (parser instanceof XmlResourceParser) {
      ((XmlResourceParser)parser).close();
    }
    try {
      if (stream != null) {
        stream.close();
      }
    }
 catch (    IOException e) {
    }
  }
}
