{
synchronized (service) {
    if (startTime != 0) {
      final long curTime=SystemClock.uptimeMillis();
      final long thisTime=curTime - startTime;
      final long totalTime=stack.mInitialStartTime != 0 ? (curTime - stack.mInitialStartTime) : thisTime;
      if (ActivityManagerService.SHOW_ACTIVITY_START_TIME) {
        EventLog.writeEvent(EventLogTags.ACTIVITY_LAUNCH_TIME,System.identityHashCode(this),shortComponentName,thisTime,totalTime);
        StringBuilder sb=service.mStringBuilder;
        sb.setLength(0);
        sb.append("Displayed activity ");
        sb.append(shortComponentName);
        sb.append(": ");
        sb.append(thisTime);
        sb.append(" ms (total ");
        sb.append(totalTime);
        sb.append(" ms)");
        Log.i(ActivityManagerService.TAG,sb.toString());
      }
      stack.reportActivityLaunchedLocked(false,this,thisTime,totalTime);
      if (totalTime > 0) {
        service.mUsageStatsService.noteLaunchTime(realActivity,(int)totalTime);
      }
      startTime=0;
      stack.mInitialStartTime=0;
    }
    stack.reportActivityVisibleLocked(this);
    if (ActivityManagerService.DEBUG_SWITCH)     Log.v(ActivityManagerService.TAG,"windowsVisible(): " + this);
    if (!nowVisible) {
      nowVisible=true;
      if (!idle) {
        stack.processStoppingActivitiesLocked(false);
      }
 else {
        final int N=stack.mWaitingVisibleActivities.size();
        if (N > 0) {
          for (int i=0; i < N; i++) {
            ActivityRecord r=(ActivityRecord)stack.mWaitingVisibleActivities.get(i);
            r.waitingVisible=false;
            if (ActivityManagerService.DEBUG_SWITCH)             Log.v(ActivityManagerService.TAG,"Was waiting for visible: " + r);
          }
          stack.mWaitingVisibleActivities.clear();
          Message msg=Message.obtain();
          msg.what=ActivityStack.IDLE_NOW_MSG;
          stack.mHandler.sendMessage(msg);
        }
      }
      service.scheduleAppGcsLocked();
    }
  }
}
