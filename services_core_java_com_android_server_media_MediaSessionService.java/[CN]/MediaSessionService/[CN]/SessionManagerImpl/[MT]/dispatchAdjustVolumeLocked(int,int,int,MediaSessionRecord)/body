{
  if (DEBUG) {
    String description=session == null ? null : session.toString();
    Log.d(TAG,"Adjusting session " + description + " by "+ direction+ ". flags="+ flags+ ", suggestedStream="+ suggestedStream);
  }
  boolean preferSuggestedStream=false;
  if (isValidLocalStreamType(suggestedStream) && AudioSystem.isStreamActive(suggestedStream,0)) {
    preferSuggestedStream=true;
  }
  if (session == null || preferSuggestedStream) {
    if ((flags & AudioManager.FLAG_ACTIVE_MEDIA_ONLY) != 0 && !AudioSystem.isStreamActive(AudioManager.STREAM_MUSIC,0)) {
      if (DEBUG) {
        Log.d(TAG,"No active session to adjust, skipping media only volume event");
      }
      return;
    }
    try {
      if (mUseMasterVolume) {
        mAudioService.adjustMasterVolume(direction,flags,getContext().getOpPackageName());
      }
 else {
        mAudioService.adjustSuggestedStreamVolume(direction,suggestedStream,flags,getContext().getOpPackageName());
      }
    }
 catch (    RemoteException e) {
      Log.e(TAG,"Error adjusting default volume.",e);
    }
  }
 else {
    session.adjustVolume(direction,flags,getContext().getPackageName(),UserHandle.myUserId(),true);
    if (session.getPlaybackType() == PlaybackInfo.PLAYBACK_TYPE_REMOTE && mRvc != null) {
      try {
        mRvc.remoteVolumeChanged(session.getControllerBinder(),flags);
      }
 catch (      Exception e) {
        Log.wtf(TAG,"Error sending volume change to system UI.",e);
      }
    }
  }
}
