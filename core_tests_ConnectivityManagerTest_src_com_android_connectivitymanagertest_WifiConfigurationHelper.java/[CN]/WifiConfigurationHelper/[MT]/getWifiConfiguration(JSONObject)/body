{
  String ssid=jsonConfig.getString("ssid");
  String password=null;
  WifiConfiguration config;
  int securityType=getSecurityType(jsonConfig.getString("security"));
switch (securityType) {
case NONE:
    config=createOpenConfig(ssid);
  break;
case WEP:
password=jsonConfig.getString("password");
config=createWepConfig(ssid,password);
break;
case PSK:
password=jsonConfig.getString("password");
config=createPskConfig(ssid,password);
break;
case EAP:
password=jsonConfig.getString("password");
int eapMethod=getEapMethod(jsonConfig.getString("eap"));
Integer phase2=null;
if (jsonConfig.has("phase2")) {
phase2=getPhase2(jsonConfig.getString("phase2"));
}
String identity=null;
if (jsonConfig.has("identity")) {
identity=jsonConfig.getString("identity");
}
String anonymousIdentity=null;
if (jsonConfig.has("anonymous_identity")) {
anonymousIdentity=jsonConfig.getString("anonymous_identity");
}
String caCert=null;
if (jsonConfig.has("ca_cert")) {
caCert=(jsonConfig.getString("ca_cert"));
}
String clientCert=null;
if (jsonConfig.has("client_cert")) {
clientCert=jsonConfig.getString("client_cert");
}
config=createEapConfig(ssid,password,eapMethod,phase2,identity,anonymousIdentity,caCert,clientCert);
break;
default :
throw new IllegalArgumentException();
}
if (jsonConfig.has("ip")) {
StaticIpConfiguration staticIpConfig=new StaticIpConfiguration();
InetAddress ipAddress=getInetAddress(jsonConfig.getString("ip"));
int prefixLength=getPrefixLength(jsonConfig.getInt("prefix_length"));
staticIpConfig.ipAddress=new LinkAddress(ipAddress,prefixLength);
staticIpConfig.gateway=getInetAddress(jsonConfig.getString("gateway"));
staticIpConfig.dnsServers.add(getInetAddress(jsonConfig.getString("dns1")));
staticIpConfig.dnsServers.add(getInetAddress(jsonConfig.getString("dns2")));
config.setIpAssignment(IpAssignment.STATIC);
config.setStaticIpConfiguration(staticIpConfig);
}
 else {
config.setIpAssignment(IpAssignment.DHCP);
}
config.setProxySettings(ProxySettings.NONE);
return config;
}
