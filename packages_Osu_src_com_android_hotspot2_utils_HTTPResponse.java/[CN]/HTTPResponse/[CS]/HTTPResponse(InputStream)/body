{
  int expected=Integer.MAX_VALUE;
  int offset=0;
  int body=-1;
  byte[] input=new byte[RX_BUFFER];
  int statusCode=-1;
  int bodyPattern=0;
  while (offset < expected) {
    int amount=in.read(input,offset,input.length - offset);
    Log.d(OSUManager.TAG,String.format("Reading into %d from %d, amount %d -> %d",input.length,offset,input.length - offset,amount));
    if (amount < 0) {
      throw new EOFException();
    }
    if (body < 0) {
      for (int n=offset; n < offset + amount; n++) {
        bodyPattern=(bodyPattern << 8) | (input[n] & 0xff);
        if (bodyPattern == 0x0d0a0d0a) {
          body=n + 1;
          statusCode=parseHeader(input,body,mHeaders);
          expected=calculateLength(body,mHeaders);
          if (expected > input.length) {
            input=Arrays.copyOf(input,expected);
          }
          break;
        }
      }
    }
    offset+=amount;
    if (offset < expected && offset == input.length) {
      input=Arrays.copyOf(input,input.length * 2);
    }
  }
  mStatusCode=statusCode;
  mBody=ByteBuffer.wrap(input,body,expected - body);
}
