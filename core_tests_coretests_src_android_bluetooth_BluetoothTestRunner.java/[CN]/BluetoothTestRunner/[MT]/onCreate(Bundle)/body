{
  String val=arguments.getString("enable_iterations");
  if (val != null) {
    try {
      sEnableIterations=Integer.parseInt(val);
    }
 catch (    NumberFormatException e) {
    }
  }
  val=arguments.getString("discoverable_iterations");
  if (val != null) {
    try {
      sDiscoverableIterations=Integer.parseInt(val);
    }
 catch (    NumberFormatException e) {
    }
  }
  val=arguments.getString("scan_iterations");
  if (val != null) {
    try {
      sScanIterations=Integer.parseInt(val);
    }
 catch (    NumberFormatException e) {
    }
  }
  val=arguments.getString("enable_pan_iterations");
  if (val != null) {
    try {
      sEnablePanIterations=Integer.parseInt(val);
    }
 catch (    NumberFormatException e) {
    }
  }
  val=arguments.getString("pair_iterations");
  if (val != null) {
    try {
      sPairIterations=Integer.parseInt(val);
    }
 catch (    NumberFormatException e) {
    }
  }
  val=arguments.getString("connect_a2dp_iterations");
  if (val != null) {
    try {
      sConnectA2dpIterations=Integer.parseInt(val);
    }
 catch (    NumberFormatException e) {
    }
  }
  val=arguments.getString("connect_headset_iterations");
  if (val != null) {
    try {
      sConnectHeadsetIterations=Integer.parseInt(val);
    }
 catch (    NumberFormatException e) {
    }
  }
  val=arguments.getString("connect_input_iterations");
  if (val != null) {
    try {
      sConnectInputIterations=Integer.parseInt(val);
    }
 catch (    NumberFormatException e) {
    }
  }
  val=arguments.getString("connect_pan_iterations");
  if (val != null) {
    try {
      sConnectPanIterations=Integer.parseInt(val);
    }
 catch (    NumberFormatException e) {
    }
  }
  val=arguments.getString("start_stop_sco_iterations");
  if (val != null) {
    try {
      sStartStopScoIterations=Integer.parseInt(val);
    }
 catch (    NumberFormatException e) {
    }
  }
  val=arguments.getString("pair_address");
  if (val != null) {
    sPairAddress=val;
  }
  val=arguments.getString("headset_address");
  if (val != null) {
    sHeadsetAddress=val;
  }
  val=arguments.getString("a2dp_address");
  if (val != null) {
    sA2dpAddress=val;
  }
  val=arguments.getString("input_address");
  if (val != null) {
    sInputAddress=val;
  }
  val=arguments.getString("pan_address");
  if (val != null) {
    sPanAddress=val;
  }
  val=arguments.getString("pair_pin");
  if (val != null) {
    sPairPin=BluetoothDevice.convertPinToBytes(val);
  }
  val=arguments.getString("pair_passkey");
  if (val != null) {
    try {
      sPairPasskey=Integer.parseInt(val);
    }
 catch (    NumberFormatException e) {
    }
  }
  Log.i(TAG,String.format("enable_iterations=%d",sEnableIterations));
  Log.i(TAG,String.format("discoverable_iterations=%d",sDiscoverableIterations));
  Log.i(TAG,String.format("scan_iterations=%d",sScanIterations));
  Log.i(TAG,String.format("pair_iterations=%d",sPairIterations));
  Log.i(TAG,String.format("connect_a2dp_iterations=%d",sConnectA2dpIterations));
  Log.i(TAG,String.format("connect_headset_iterations=%d",sConnectHeadsetIterations));
  Log.i(TAG,String.format("connect_input_iterations=%d",sConnectInputIterations));
  Log.i(TAG,String.format("connect_pan_iterations=%d",sConnectPanIterations));
  Log.i(TAG,String.format("start_stop_sco_iterations=%d",sStartStopScoIterations));
  Log.i(TAG,String.format("pair_address=%s",sPairAddress));
  Log.i(TAG,String.format("a2dp_address=%s",sA2dpAddress));
  Log.i(TAG,String.format("headset_address=%s",sHeadsetAddress));
  Log.i(TAG,String.format("input_address=%s",sInputAddress));
  Log.i(TAG,String.format("pan_address=%s",sPanAddress));
  Log.i(TAG,String.format("pair_pin=%s",new String(sPairPin)));
  Log.i(TAG,String.format("pair_passkey=%d",sPairPasskey));
  super.onCreate(arguments);
}
