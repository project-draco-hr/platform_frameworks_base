{
  final RippleForeground active=mRipple;
  final RippleBackground background=mBackground;
  final int count=mExitingRipplesCount;
  if (active == null && count <= 0 && (background == null || !background.isVisible())) {
    return;
  }
  final float x=mHotspotBounds.exactCenterX();
  final float y=mHotspotBounds.exactCenterY();
  canvas.translate(x,y);
  updateMaskShaderIfNeeded();
  if (mMaskShader != null) {
    final Rect bounds=getBounds();
    mMaskMatrix.setTranslate(bounds.left - x,bounds.top - y);
    mMaskShader.setLocalMatrix(mMaskMatrix);
  }
  final int color=mState.mColor.getColorForState(getState(),Color.BLACK);
  final int halfAlpha=(Color.alpha(color) / 2) << 24;
  final Paint p=getRipplePaint();
  if (mMaskColorFilter != null) {
    final int fullAlphaColor=color | (0xFF << 24);
    mMaskColorFilter.setColor(fullAlphaColor);
    p.setColor(halfAlpha);
    p.setColorFilter(mMaskColorFilter);
    p.setShader(mMaskShader);
  }
 else {
    final int halfAlphaColor=(color & 0xFFFFFF) | halfAlpha;
    p.setColor(halfAlphaColor);
    p.setColorFilter(null);
    p.setShader(null);
  }
  if (background != null && background.isVisible()) {
    background.draw(canvas,p);
  }
  if (count > 0) {
    final RippleForeground[] ripples=mExitingRipples;
    for (int i=0; i < count; i++) {
      ripples[i].draw(canvas,p);
    }
  }
  if (active != null) {
    active.draw(canvas,p);
  }
  canvas.translate(-x,-y);
}
