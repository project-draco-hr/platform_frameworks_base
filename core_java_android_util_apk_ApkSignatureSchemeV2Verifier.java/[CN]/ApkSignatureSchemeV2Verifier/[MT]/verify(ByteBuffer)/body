{
  apkContents=apkContents.slice();
  apkContents.order(ByteOrder.LITTLE_ENDIAN);
  int eocdOffset=ZipUtils.findZipEndOfCentralDirectoryRecord(apkContents);
  if (eocdOffset == -1) {
    throw new SignatureNotFoundException("Not an APK file: ZIP End of Central Directory record not found");
  }
  if (ZipUtils.isZip64EndOfCentralDirectoryLocatorPresent(apkContents,eocdOffset)) {
    throw new SignatureNotFoundException("ZIP64 APK not supported");
  }
  ByteBuffer eocd=sliceFromTo(apkContents,eocdOffset,apkContents.capacity());
  long centralDirOffsetLong=ZipUtils.getZipEocdCentralDirectoryOffset(eocd);
  if (centralDirOffsetLong >= eocdOffset) {
    throw new SignatureNotFoundException("ZIP Central Directory offset out of range: " + centralDirOffsetLong + ". ZIP End of Central Directory offset: "+ eocdOffset);
  }
  long centralDirSizeLong=ZipUtils.getZipEocdCentralDirectorySizeBytes(eocd);
  if (centralDirOffsetLong + centralDirSizeLong != eocdOffset) {
    throw new SignatureNotFoundException("ZIP Central Directory is not immediately followed by End of Central" + " Directory");
  }
  int centralDirOffset=(int)centralDirOffsetLong;
  int apkSigningBlockOffset=findApkSigningBlock(apkContents,centralDirOffset);
  ByteBuffer apkSigningBlock=sliceFromTo(apkContents,apkSigningBlockOffset,centralDirOffset);
  ByteBuffer apkSignatureSchemeV2Block=findApkSignatureSchemeV2Block(apkSigningBlock);
  return verify(apkContents,apkSignatureSchemeV2Block,apkSigningBlockOffset,centralDirOffset,eocdOffset);
}
