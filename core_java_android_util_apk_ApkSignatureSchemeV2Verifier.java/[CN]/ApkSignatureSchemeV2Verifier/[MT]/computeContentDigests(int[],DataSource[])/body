{
  long totalChunkCountLong=0;
  for (  DataSource input : contents) {
    totalChunkCountLong+=getChunkCount(input.size());
  }
  if (totalChunkCountLong >= Integer.MAX_VALUE / 1024) {
    throw new DigestException("Too many chunks: " + totalChunkCountLong);
  }
  int totalChunkCount=(int)totalChunkCountLong;
  byte[][] digestsOfChunks=new byte[digestAlgorithms.length][];
  for (int i=0; i < digestAlgorithms.length; i++) {
    int digestAlgorithm=digestAlgorithms[i];
    int digestOutputSizeBytes=getContentDigestAlgorithmOutputSizeBytes(digestAlgorithm);
    byte[] concatenationOfChunkCountAndChunkDigests=new byte[5 + totalChunkCount * digestOutputSizeBytes];
    concatenationOfChunkCountAndChunkDigests[0]=0x5a;
    setUnsignedInt32LittleEndian(totalChunkCount,concatenationOfChunkCountAndChunkDigests,1);
    digestsOfChunks[i]=concatenationOfChunkCountAndChunkDigests;
  }
  byte[] chunkContentPrefix=new byte[5];
  chunkContentPrefix[0]=(byte)0xa5;
  int chunkIndex=0;
  MessageDigest[] mds=new MessageDigest[digestAlgorithms.length];
  for (int i=0; i < digestAlgorithms.length; i++) {
    String jcaAlgorithmName=getContentDigestAlgorithmJcaDigestAlgorithm(digestAlgorithms[i]);
    try {
      mds[i]=MessageDigest.getInstance(jcaAlgorithmName);
    }
 catch (    NoSuchAlgorithmException e) {
      throw new RuntimeException(jcaAlgorithmName + " digest not supported",e);
    }
  }
  int dataSourceIndex=0;
  for (  DataSource input : contents) {
    long inputOffset=0;
    long inputRemaining=input.size();
    while (inputRemaining > 0) {
      int chunkSize=(int)Math.min(inputRemaining,CHUNK_SIZE_BYTES);
      setUnsignedInt32LittleEndian(chunkSize,chunkContentPrefix,1);
      for (int i=0; i < mds.length; i++) {
        mds[i].update(chunkContentPrefix);
      }
      try {
        input.feedIntoMessageDigests(mds,inputOffset,chunkSize);
      }
 catch (      IOException e) {
        throw new DigestException("Failed to digest chunk #" + chunkIndex + " of section #"+ dataSourceIndex,e);
      }
      for (int i=0; i < digestAlgorithms.length; i++) {
        int digestAlgorithm=digestAlgorithms[i];
        byte[] concatenationOfChunkCountAndChunkDigests=digestsOfChunks[i];
        int expectedDigestSizeBytes=getContentDigestAlgorithmOutputSizeBytes(digestAlgorithm);
        MessageDigest md=mds[i];
        int actualDigestSizeBytes=md.digest(concatenationOfChunkCountAndChunkDigests,5 + chunkIndex * expectedDigestSizeBytes,expectedDigestSizeBytes);
        if (actualDigestSizeBytes != expectedDigestSizeBytes) {
          throw new RuntimeException("Unexpected output size of " + md.getAlgorithm() + " digest: "+ actualDigestSizeBytes);
        }
      }
      inputOffset+=chunkSize;
      inputRemaining-=chunkSize;
      chunkIndex++;
    }
    dataSourceIndex++;
  }
  byte[][] result=new byte[digestAlgorithms.length][];
  for (int i=0; i < digestAlgorithms.length; i++) {
    int digestAlgorithm=digestAlgorithms[i];
    byte[] input=digestsOfChunks[i];
    String jcaAlgorithmName=getContentDigestAlgorithmJcaDigestAlgorithm(digestAlgorithm);
    MessageDigest md;
    try {
      md=MessageDigest.getInstance(jcaAlgorithmName);
    }
 catch (    NoSuchAlgorithmException e) {
      throw new RuntimeException(jcaAlgorithmName + " digest not supported",e);
    }
    byte[] output=md.digest(input);
    result[i]=output;
  }
  return result;
}
