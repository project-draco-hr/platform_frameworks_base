{
  long filePosition=mFilePosition + offset;
  long mmapFilePosition=(filePosition / MEMORY_PAGE_SIZE_BYTES) * MEMORY_PAGE_SIZE_BYTES;
  int dataStartOffsetInMmapRegion=(int)(filePosition - mmapFilePosition);
  long mmapRegionSize=size + dataStartOffsetInMmapRegion;
  long mmapPtr=0;
  try {
    mmapPtr=OS.mmap(0,mmapRegionSize,OsConstants.PROT_READ,OsConstants.MAP_SHARED | OsConstants.MAP_POPULATE,mFd,mmapFilePosition);
    ByteBuffer buf=new DirectByteBuffer(size,mmapPtr + dataStartOffsetInMmapRegion,mFd,null,true);
    for (    MessageDigest md : mds) {
      buf.position(0);
      md.update(buf);
    }
  }
 catch (  ErrnoException e) {
    throw new IOException("Failed to mmap " + mmapRegionSize + " bytes",e);
  }
 finally {
    if (mmapPtr != 0) {
      try {
        OS.munmap(mmapPtr,mmapRegionSize);
      }
 catch (      ErrnoException ignored) {
      }
    }
  }
}
