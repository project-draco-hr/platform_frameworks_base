{
  super.onCreate(savedInstanceState);
  EditText editText=new EditText(this);
  editText.setText(sSeedText);
  setContentView(editText);
  final Instrumentation instrumentation=new Instrumentation();
  final Semaphore sem=new Semaphore(0);
  MessageQueue.IdleHandler handler=new MessageQueue.IdleHandler(){
    @Override public boolean queueIdle(){
      sem.release();
      return true;
    }
  }
;
  Looper.myQueue().addIdleHandler(handler);
synchronized (mLock) {
    mShouldStop=false;
  }
  mThread=new Thread(new Runnable(){
    int codes[]={KeyEvent.KEYCODE_H,KeyEvent.KEYCODE_E,KeyEvent.KEYCODE_L,KeyEvent.KEYCODE_L,KeyEvent.KEYCODE_O,KeyEvent.KEYCODE_SPACE};
    int i=0;
    @Override public void run(){
      while (true) {
        try {
          sem.acquire();
        }
 catch (        InterruptedException e) {
        }
        int code=codes[i % codes.length];
        if (i % 100 == 99)         code=KeyEvent.KEYCODE_ENTER;
synchronized (mLock) {
          if (mShouldStop)           break;
        }
        instrumentation.sendKeyDownUpSync(code);
        i++;
      }
    }
  }
);
  mThread.start();
}
