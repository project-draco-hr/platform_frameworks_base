{
  final long deltaRealtime=this.elapsedRealtime - value.elapsedRealtime;
  if (enforceMonotonic && deltaRealtime < 0) {
    throw new IllegalArgumentException("found non-monotonic realtime");
  }
  final int length=length();
  final NetworkStats.Builder result=new NetworkStats.Builder(deltaRealtime,length);
  for (int i=0; i < length; i++) {
    final String iface=this.iface[i];
    final int uid=this.uid[i];
    final int j=value.findIndex(iface,uid);
    if (j == -1) {
      result.addEntry(iface,uid,this.rx[i],this.tx[i]);
    }
 else {
      final long rx=this.rx[i] - value.rx[j];
      final long tx=this.tx[i] - value.tx[j];
      if (enforceMonotonic && (rx < 0 || tx < 0)) {
        throw new IllegalArgumentException("found non-monotonic values");
      }
      result.addEntry(iface,uid,rx,tx);
    }
  }
  return result.build();
}
