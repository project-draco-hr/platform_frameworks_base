{
  final long deltaRealtime=this.elapsedRealtime - value.elapsedRealtime;
  if (deltaRealtime < 0) {
    throw new IllegalArgumentException("found non-monotonic realtime");
  }
  final Entry entry=new Entry();
  final NetworkStats result=new NetworkStats(deltaRealtime,size);
  for (int i=0; i < size; i++) {
    entry.iface=iface[i];
    entry.uid=uid[i];
    entry.set=set[i];
    entry.tag=tag[i];
    final int j=value.findIndexHinted(entry.iface,entry.uid,entry.set,entry.tag,i);
    if (j == -1) {
      entry.rxBytes=rxBytes[i];
      entry.rxPackets=rxPackets[i];
      entry.txBytes=txBytes[i];
      entry.txPackets=txPackets[i];
      entry.operations=operations[i];
    }
 else {
      entry.rxBytes=rxBytes[i] - value.rxBytes[j];
      entry.rxPackets=rxPackets[i] - value.rxPackets[j];
      entry.txBytes=txBytes[i] - value.txBytes[j];
      entry.txPackets=txPackets[i] - value.txPackets[j];
      entry.operations=operations[i] - value.operations[j];
      if (entry.rxBytes < 0 || entry.rxPackets < 0 || entry.txBytes < 0 || entry.txPackets < 0 || entry.operations < 0) {
        throw new NonMonotonicException(this,i,value,j);
      }
    }
    result.addValues(entry);
  }
  return result;
}
