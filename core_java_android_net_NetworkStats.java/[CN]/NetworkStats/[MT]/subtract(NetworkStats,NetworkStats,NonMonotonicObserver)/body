{
  long deltaRealtime=left.elapsedRealtime - right.elapsedRealtime;
  if (deltaRealtime < 0) {
    if (observer != null) {
      observer.foundNonMonotonic(left,-1,right,-1);
    }
    deltaRealtime=0;
  }
  final Entry entry=new Entry();
  final NetworkStats result=new NetworkStats(deltaRealtime,left.size);
  for (int i=0; i < left.size; i++) {
    entry.iface=left.iface[i];
    entry.uid=left.uid[i];
    entry.set=left.set[i];
    entry.tag=left.tag[i];
    final int j=right.findIndexHinted(entry.iface,entry.uid,entry.set,entry.tag,i);
    if (j == -1) {
      entry.rxBytes=left.rxBytes[i];
      entry.rxPackets=left.rxPackets[i];
      entry.txBytes=left.txBytes[i];
      entry.txPackets=left.txPackets[i];
      entry.operations=left.operations[i];
    }
 else {
      entry.rxBytes=left.rxBytes[i] - right.rxBytes[j];
      entry.rxPackets=left.rxPackets[i] - right.rxPackets[j];
      entry.txBytes=left.txBytes[i] - right.txBytes[j];
      entry.txPackets=left.txPackets[i] - right.txPackets[j];
      entry.operations=left.operations[i] - right.operations[j];
      if (entry.rxBytes < 0 || entry.rxPackets < 0 || entry.txBytes < 0 || entry.txPackets < 0 || entry.operations < 0) {
        if (observer != null) {
          observer.foundNonMonotonic(left,i,right,j);
        }
        entry.rxBytes=Math.max(entry.rxBytes,0);
        entry.rxPackets=Math.max(entry.rxPackets,0);
        entry.txBytes=Math.max(entry.txBytes,0);
        entry.txPackets=Math.max(entry.txPackets,0);
        entry.operations=Math.max(entry.operations,0);
      }
    }
    result.addValues(entry);
  }
  return result;
}
