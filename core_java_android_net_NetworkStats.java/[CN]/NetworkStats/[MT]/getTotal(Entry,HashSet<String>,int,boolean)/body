{
  final Entry entry=recycle != null ? recycle : new Entry();
  entry.iface=IFACE_ALL;
  entry.uid=limitUid;
  entry.set=SET_ALL;
  entry.tag=TAG_NONE;
  entry.roaming=ROAMING_ALL;
  entry.rxBytes=0;
  entry.rxPackets=0;
  entry.txBytes=0;
  entry.txPackets=0;
  entry.operations=0;
  for (int i=0; i < size; i++) {
    final boolean matchesUid=(limitUid == UID_ALL) || (limitUid == uid[i]);
    final boolean matchesIface=(limitIface == null) || (limitIface.contains(iface[i]));
    if (matchesUid && matchesIface) {
      if (tag[i] != TAG_NONE && !includeTags)       continue;
      entry.rxBytes+=rxBytes[i];
      entry.rxPackets+=rxPackets[i];
      entry.txBytes+=txBytes[i];
      entry.txPackets+=txPackets[i];
      entry.operations+=operations[i];
    }
  }
  return entry;
}
