{
  FileInputStream fis=null;
  try {
    fis=mContext.openFileInput(mHistoryFileName);
  }
 catch (  FileNotFoundException fnfe) {
    if (DEBUG) {
      Log.i(LOG_TAG,"Could not open historical records file: " + mHistoryFileName);
    }
    return;
  }
  try {
    XmlPullParser parser=Xml.newPullParser();
    parser.setInput(fis,null);
    int type=XmlPullParser.START_DOCUMENT;
    while (type != XmlPullParser.END_DOCUMENT && type != XmlPullParser.START_TAG) {
      type=parser.next();
    }
    if (!TAG_HISTORICAL_RECORDS.equals(parser.getName())) {
      throw new XmlPullParserException("Share records file does not start with " + TAG_HISTORICAL_RECORDS + " tag.");
    }
    List<HistoricalRecord> historicalRecords=mHistoricalRecords;
    historicalRecords.clear();
    while (true) {
      type=parser.next();
      if (type == XmlPullParser.END_DOCUMENT) {
        break;
      }
      if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
        continue;
      }
      String nodeName=parser.getName();
      if (!TAG_HISTORICAL_RECORD.equals(nodeName)) {
        throw new XmlPullParserException("Share records file not well-formed.");
      }
      String activity=parser.getAttributeValue(null,ATTRIBUTE_ACTIVITY);
      final long time=Long.parseLong(parser.getAttributeValue(null,ATTRIBUTE_TIME));
      final float weight=Float.parseFloat(parser.getAttributeValue(null,ATTRIBUTE_WEIGHT));
      HistoricalRecord readRecord=new HistoricalRecord(activity,time,weight);
      historicalRecords.add(readRecord);
      if (DEBUG) {
        Log.i(LOG_TAG,"Read " + readRecord.toString());
      }
    }
    if (DEBUG) {
      Log.i(LOG_TAG,"Read " + historicalRecords.size() + " historical records.");
    }
  }
 catch (  XmlPullParserException xppe) {
    Log.e(LOG_TAG,"Error reading historical recrod file: " + mHistoryFileName,xppe);
  }
catch (  IOException ioe) {
    Log.e(LOG_TAG,"Error reading historical recrod file: " + mHistoryFileName,ioe);
  }
 finally {
    if (fis != null) {
      try {
        fis.close();
      }
 catch (      IOException ioe) {
      }
    }
  }
}
