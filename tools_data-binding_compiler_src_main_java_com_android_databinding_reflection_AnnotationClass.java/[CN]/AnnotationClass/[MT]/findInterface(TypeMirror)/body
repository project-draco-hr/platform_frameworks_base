{
  Types typeUtil=getTypeUtils();
  TypeMirror foundInterface=null;
  if (typeUtil.isSameType(interfaceType,typeUtil.erasure(mTypeMirror))) {
    foundInterface=mTypeMirror;
  }
 else   if (mTypeMirror.getKind() == TypeKind.DECLARED) {
    DeclaredType declaredType=(DeclaredType)mTypeMirror;
    TypeElement typeElement=(TypeElement)declaredType.asElement();
    for (    TypeMirror type : typeElement.getInterfaces()) {
      if (typeUtil.isSameType(interfaceType,typeUtil.erasure(type))) {
        foundInterface=type;
        break;
      }
    }
    if (foundInterface == null) {
      printMessage(Diagnostic.Kind.ERROR,"Detected " + interfaceType + " type for "+ mTypeMirror+ ", but not able to find the implemented interface.");
      return null;
    }
  }
  if (foundInterface.getKind() != TypeKind.DECLARED) {
    printMessage(Diagnostic.Kind.ERROR,"Found " + interfaceType + " type for "+ mTypeMirror+ ", but it isn't a declared type: "+ foundInterface);
    return null;
  }
  return (DeclaredType)foundInterface;
}
