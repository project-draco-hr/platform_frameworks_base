{
  assertTrue("Should return Double.NaN",Double.isNaN(Math.cbrt(Double.NaN)));
  assertEquals("Should return Double.POSITIVE_INFINITY",Double.POSITIVE_INFINITY,Math.cbrt(Double.POSITIVE_INFINITY),0D);
  assertEquals("Should return Double.NEGATIVE_INFINITY",Double.NEGATIVE_INFINITY,Math.cbrt(Double.NEGATIVE_INFINITY),0D);
  assertEquals(Double.doubleToLongBits(0.0),Double.doubleToLongBits(Math.cbrt(0.0)));
  assertEquals(Double.doubleToLongBits(+0.0),Double.doubleToLongBits(Math.cbrt(+0.0)));
  assertEquals(Double.doubleToLongBits(-0.0),Double.doubleToLongBits(Math.cbrt(-0.0)));
  assertEquals("Should return 3.0",3.0,Math.cbrt(27.0),0D);
  assertEquals("Should return 23.111993172558684",23.111993172558684,Math.cbrt(12345.6),0D);
  assertEquals("Should return 5.643803094122362E102",5.643803094122362E102,Math.cbrt(Double.MAX_VALUE),0D);
  assertEquals("Should return 0.01",0.01,Math.cbrt(0.000001),0D);
  assertEquals("Should return -3.0",-3.0,Math.cbrt(-27.0),0D);
  assertEquals("Should return -23.111993172558684",-23.111993172558684,Math.cbrt(-12345.6),0D);
  assertEquals("Should return 1.7031839360032603E-108",1.7031839360032603E-108,Math.cbrt(Double.MIN_VALUE),0D);
  assertEquals("Should return -0.01",-0.01,Math.cbrt(-0.000001),0D);
}
