{
  assertTrue(Double.isNaN(Math.cosh(Double.NaN)));
  assertEquals("Should return POSITIVE_INFINITY",Double.POSITIVE_INFINITY,Math.cosh(Double.POSITIVE_INFINITY),0D);
  assertEquals("Should return POSITIVE_INFINITY",Double.POSITIVE_INFINITY,Math.cosh(Double.NEGATIVE_INFINITY),0D);
  assertEquals("Should return 1.0",1.0,Math.cosh(+0.0),0D);
  assertEquals("Should return 1.0",1.0,Math.cosh(-0.0),0D);
  assertEquals("Should return POSITIVE_INFINITY",Double.POSITIVE_INFINITY,Math.cosh(1234.56),0D);
  assertEquals("Should return POSITIVE_INFINITY",Double.POSITIVE_INFINITY,Math.cosh(-1234.56),0D);
  assertEquals("Should return 1.0000000000005",1.0000000000005,Math.cosh(0.000001),0D);
  assertEquals("Should return 1.0000000000005",1.0000000000005,Math.cosh(-0.000001),0D);
  assertEquals("Should return 5.212214351945598",5.212214351945598,Math.cosh(2.33482),0D);
  assertEquals("Should return POSITIVE_INFINITY",Double.POSITIVE_INFINITY,Math.cosh(Double.MAX_VALUE),0D);
  assertEquals("Should return 1.0",1.0,Math.cosh(Double.MIN_VALUE),0D);
}
