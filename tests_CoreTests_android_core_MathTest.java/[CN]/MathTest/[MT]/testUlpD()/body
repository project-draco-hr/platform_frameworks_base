{
  assertTrue("Should return NaN",Double.isNaN(Math.ulp(Double.NaN)));
  assertEquals("Returned incorrect value",Double.POSITIVE_INFINITY,Math.ulp(Double.POSITIVE_INFINITY),0D);
  assertEquals("Returned incorrect value",Double.POSITIVE_INFINITY,Math.ulp(Double.NEGATIVE_INFINITY),0D);
  assertEquals("Returned incorrect value",Double.MIN_VALUE,Math.ulp(0.0),0D);
  assertEquals("Returned incorrect value",Double.MIN_VALUE,Math.ulp(+0.0),0D);
  assertEquals("Returned incorrect value",Double.MIN_VALUE,Math.ulp(-0.0),0D);
  assertEquals("Returned incorrect value",Math.pow(2,971),Math.ulp(Double.MAX_VALUE),0D);
  assertEquals("Returned incorrect value",Math.pow(2,971),Math.ulp(-Double.MAX_VALUE),0D);
  assertEquals("Returned incorrect value",Double.MIN_VALUE,Math.ulp(Double.MIN_VALUE),0D);
  assertEquals("Returned incorrect value",Double.MIN_VALUE,Math.ulp(-Double.MIN_VALUE),0D);
  assertEquals("Returned incorrect value",2.220446049250313E-16,Math.ulp(1.0),0D);
  assertEquals("Returned incorrect value",2.220446049250313E-16,Math.ulp(-1.0),0D);
  assertEquals("Returned incorrect value",2.2737367544323206E-13,Math.ulp(1153.0),0D);
}
