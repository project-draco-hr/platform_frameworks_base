{
  if (args.length < 6) {
    System.out.println("required parameters: manifest adk-dir src-out-dir xml-out-dir " + "res-out-dir res-in-dir...");
    System.out.println("Creates an android data binding class and copies resources from");
    System.out.println("res-source to res-target and modifies binding layout files");
    System.out.println("in res-target. Binding data is extracted into XML files");
    System.out.println("and placed in xml-out-dir.");
    System.out.println("  manifest    path to AndroidManifest.xml file");
    System.out.println("  adk-dir     path to Android SDK home");
    System.out.println("  src-out-dir path to where generated source goes");
    System.out.println("  xml-out-dir path to where generated binding XML goes");
    System.out.println("  res-out-dir path to the where modified resources should go");
    System.out.println("  res-in-dir  path to source resources \"res\" directory. One" + " or more are allowed.");
    System.exit(1);
  }
  final boolean isLibrary;
  final String applicationPackage;
  final int minSdk;
  final Document androidManifest=readAndroidManifest(new File(args[MANIFEST_INDEX]));
  try {
    final XPathFactory xPathFactory=XPathFactory.newInstance();
    final XPath xPath=xPathFactory.newXPath();
    isLibrary=(Boolean)xPath.evaluate("boolean(/manifest/application)",androidManifest,XPathConstants.BOOLEAN);
    applicationPackage=xPath.evaluate("string(/manifest/@package)",androidManifest);
    final Double minSdkNumber=(Double)xPath.evaluate("number(/manifest/uses-sdk/@android:minSdkVersion)",androidManifest,XPathConstants.NUMBER);
    minSdk=minSdkNumber == null ? 1 : minSdkNumber.intValue();
  }
 catch (  XPathExpressionException e) {
    e.printStackTrace();
    System.exit(6);
    return;
  }
  final File srcDir=new File(args[SRC_INDEX],APP_SUBPATH);
  if (!makeTargetDir(srcDir)) {
    System.err.println("Could not create source directory " + srcDir);
    System.exit(2);
  }
  final File resTarget=new File(args[RES_OUT_INDEX]);
  if (!makeTargetDir(resTarget)) {
    System.err.println("Could not create resource directory: " + resTarget);
    System.exit(4);
  }
  final File xmlDir=new File(args[XML_INDEX]);
  if (!makeTargetDir(xmlDir)) {
    System.err.println("Could not create xml output directory: " + xmlDir);
    System.exit(5);
  }
  final File adkDir=new File(args[ADK_INDEX]);
  if (!adkDir.exists()) {
    System.err.println("Could not find android SDK directory: " + adkDir);
    System.exit(6);
  }
  System.out.println("Application Package: " + applicationPackage);
  System.out.println("Minimum SDK: " + minSdk);
  System.out.println("Target Resources: " + resTarget.getAbsolutePath());
  System.out.println("Target Source Dir: " + srcDir.getAbsolutePath());
  System.out.println("Target XML Dir: " + xmlDir.getAbsolutePath());
  boolean foundSomeResources=false;
  for (int i=RES_IN_INDEX; i < args.length; i++) {
    final File resDir=new File(args[i]);
    if (!resDir.exists()) {
      System.err.println("Could not find resource directory: " + resDir);
    }
 else {
      System.out.println("Source Resources: " + resDir.getAbsolutePath());
      try {
        FileUtils.copyDirectory(resDir,resTarget);
        addFromFile(resDir,resTarget);
        foundSomeResources=true;
      }
 catch (      IOException e) {
        System.err.println("Could not copy resources from " + resDir + " to "+ resTarget+ ": "+ e.getLocalizedMessage());
        System.exit(3);
      }
    }
  }
  if (!foundSomeResources) {
    System.err.println("No resource directories were found.");
    System.exit(7);
  }
  processLayoutFiles(applicationPackage,resTarget,srcDir,xmlDir,adkDir,minSdk,isLibrary);
}
