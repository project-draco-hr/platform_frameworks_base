{
  final long[] total=new long[2];
  final NetworkStatsHistory stats1=new NetworkStatsHistory(HOUR_IN_MILLIS);
  stats1.recordData(TEST_START,TEST_START + MINUTE_IN_MILLIS * 60,600L,600L);
  final long TEST_START_2=TEST_START + MINUTE_IN_MILLIS;
  final NetworkStatsHistory stats2=new NetworkStatsHistory(MINUTE_IN_MILLIS);
  stats2.recordData(TEST_START_2,TEST_START_2 + MINUTE_IN_MILLIS * 5,50L,50L);
  stats=new NetworkStatsHistory(MINUTE_IN_MILLIS);
  stats.recordEntireHistory(stats1);
  stats.recordEntireHistory(stats2);
  stats.getTotalData(TEST_START - WEEK_IN_MILLIS,TEST_START + WEEK_IN_MILLIS,total);
  assertTotalEquals(total,650L,650L);
  assertBucket(stats,0,10L,10L);
  assertBucket(stats,1,20L,20L);
  assertBucket(stats,2,20L,20L);
  assertBucket(stats,3,20L,20L);
  assertBucket(stats,4,20L,20L);
  assertBucket(stats,5,20L,20L);
  assertBucket(stats,6,10L,10L);
  stats=new NetworkStatsHistory(HOUR_IN_MILLIS / 4);
  stats.recordEntireHistory(stats1);
  stats.recordEntireHistory(stats2);
  stats.getTotalData(TEST_START - WEEK_IN_MILLIS,TEST_START + WEEK_IN_MILLIS,total);
  assertTotalEquals(total,650L,650L);
  assertBucket(stats,0,200L,200L);
  assertBucket(stats,1,150L,150L);
  assertBucket(stats,2,150L,150L);
  assertBucket(stats,3,150L,150L);
}
