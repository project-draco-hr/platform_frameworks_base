{
  String testClass=test.getClass().getName();
  String testName=((TestCase)test).getName();
  mTestResult=new Bundle(mResultTemplate);
  mTestResult.putString(REPORT_KEY_NAME_CLASS,testClass);
  mTestResult.putString(REPORT_KEY_NAME_TEST,testName);
  mTestResult.putInt(REPORT_KEY_NUM_CURRENT,++mTestNum);
  if (testClass != null && !testClass.equals(mTestClass)) {
    mTestResult.putString(Instrumentation.REPORT_KEY_STREAMRESULT,String.format("\n%s:",testClass));
    mTestClass=testClass;
  }
 else {
    mTestResult.putString(Instrumentation.REPORT_KEY_STREAMRESULT,"");
  }
  try {
    if (mTestNum == 1)     Thread.sleep(mDelayMsec);
  }
 catch (  InterruptedException e) {
    throw new IllegalStateException(e);
  }
  sendStatus(REPORT_VALUE_RESULT_START,mTestResult);
  mTestResultCode=0;
  mIsTimedTest=false;
  mIncludeDetailedStats=false;
  try {
    if (test.getClass().getMethod(testName).isAnnotationPresent(TimedTest.class)) {
      mIsTimedTest=true;
      mIncludeDetailedStats=test.getClass().getMethod(testName).getAnnotation(TimedTest.class).includeDetailedStats();
    }
 else     if (test.getClass().isAnnotationPresent(TimedTest.class)) {
      mIsTimedTest=true;
      mIncludeDetailedStats=test.getClass().getAnnotation(TimedTest.class).includeDetailedStats();
    }
  }
 catch (  SecurityException e) {
  }
catch (  NoSuchMethodException e) {
  }
  if (mIsTimedTest && mIncludeDetailedStats) {
    mPerfCollector.beginSnapshot("");
  }
 else   if (mIsTimedTest) {
    mPerfCollector.startTiming("");
  }
}
