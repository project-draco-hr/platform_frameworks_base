{
  final int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    mTouchAboveFalsingThreshold=false;
  mDragging=false;
mSnappingChild=false;
mLongPressSent=false;
mVelocityTracker.clear();
mCurrView=mCallback.getChildAtPosition(ev);
if (mCurrView != null) {
onDownUpdate(mCurrView);
mCanCurrViewBeDimissed=mCallback.canChildBeDismissed(mCurrView);
mVelocityTracker.addMovement(ev);
mInitialTouchPos=getPos(ev);
mPerpendicularInitialTouchPos=getPerpendicularPos(ev);
mTranslation=getTranslation(mCurrView);
if (mLongPressListener != null) {
if (mWatchLongPress == null) {
mWatchLongPress=new Runnable(){
@Override public void run(){
  float pos=getPos(ev);
  float delta=pos - mInitialTouchPos;
  if (mCurrView != null && !mLongPressSent && Math.abs(delta) < mPagingTouchSlop) {
    mLongPressSent=true;
    mCurrView.sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_LONG_CLICKED);
    mCurrView.getLocationOnScreen(mTmpPos);
    final int x=(int)ev.getRawX() - mTmpPos[0];
    final int y=(int)ev.getRawY() - mTmpPos[1];
    mLongPressListener.onLongPress(mCurrView,x,y);
  }
}
}
;
}
mHandler.postDelayed(mWatchLongPress,mLongPressTimeout);
}
}
break;
case MotionEvent.ACTION_MOVE:
if (mCurrView != null && !mLongPressSent) {
mVelocityTracker.addMovement(ev);
float pos=getPos(ev);
float perpendicularPos=getPerpendicularPos(ev);
float delta=pos - mInitialTouchPos;
float deltaPerpendicular=perpendicularPos - mPerpendicularInitialTouchPos;
if (Math.abs(delta) > mPagingTouchSlop && Math.abs(delta) > Math.abs(deltaPerpendicular)) {
mCallback.onBeginDrag(mCurrView);
mDragging=true;
mInitialTouchPos=getPos(ev);
mTranslation=getTranslation(mCurrView);
removeLongPressCallback();
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
final boolean captured=(mDragging || mLongPressSent);
mDragging=false;
mCurrView=null;
mLongPressSent=false;
removeLongPressCallback();
if (captured) return true;
break;
}
return mDragging || mLongPressSent;
}
