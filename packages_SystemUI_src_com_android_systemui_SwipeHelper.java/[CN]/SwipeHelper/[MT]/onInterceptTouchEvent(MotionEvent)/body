{
  final int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    mTouchAboveFalsingThreshold=false;
  mDragging=false;
mLongPressSent=false;
mCurrView=mCallback.getChildAtPosition(ev);
mVelocityTracker.clear();
if (mCurrView != null) {
mCurrAnimView=mCallback.getChildContentView(mCurrView);
mCanCurrViewBeDimissed=mCallback.canChildBeDismissed(mCurrView);
mVelocityTracker.addMovement(ev);
mInitialTouchPos=getPos(ev);
if (mLongPressListener != null) {
if (mWatchLongPress == null) {
mWatchLongPress=new Runnable(){
  @Override public void run(){
    if (mCurrView != null && !mLongPressSent) {
      mLongPressSent=true;
      mCurrView.sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_LONG_CLICKED);
      mCurrView.getLocationOnScreen(mTmpPos);
      final int x=(int)ev.getRawX() - mTmpPos[0];
      final int y=(int)ev.getRawY() - mTmpPos[1];
      mLongPressListener.onLongPress(mCurrView,x,y);
    }
  }
}
;
}
mHandler.postDelayed(mWatchLongPress,mLongPressTimeout);
}
}
break;
case MotionEvent.ACTION_MOVE:
if (mCurrView != null && !mLongPressSent) {
mVelocityTracker.addMovement(ev);
float pos=getPos(ev);
float delta=pos - mInitialTouchPos;
if (Math.abs(delta) > mPagingTouchSlop) {
mCallback.onBeginDrag(mCurrView);
mDragging=true;
mInitialTouchPos=getPos(ev) - getTranslation(mCurrAnimView);
removeLongPressCallback();
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
final boolean captured=(mDragging || mLongPressSent);
mDragging=false;
mCurrView=null;
mCurrAnimView=null;
mLongPressSent=false;
removeLongPressCallback();
if (captured) return true;
break;
}
return mDragging || mLongPressSent;
}
