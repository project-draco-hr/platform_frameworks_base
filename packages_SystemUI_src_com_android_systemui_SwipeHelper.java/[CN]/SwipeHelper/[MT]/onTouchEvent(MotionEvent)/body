{
  if (mLongPressSent) {
    return true;
  }
  if (!mDragging) {
    if (mCallback.getChildAtPosition(ev) != null) {
      onInterceptTouchEvent(ev);
      return true;
    }
 else {
      removeLongPressCallback();
      return false;
    }
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_OUTSIDE:
case MotionEvent.ACTION_MOVE:
    if (mCurrView != null) {
      float delta=getPos(ev) - mInitialTouchPos;
      float absDelta=Math.abs(delta);
      if (absDelta >= getFalsingThreshold()) {
        mTouchAboveFalsingThreshold=true;
      }
      if (CONSTRAIN_SWIPE && !mCallback.canChildBeDismissed(mCurrView)) {
        float size=getSize(mCurrView);
        float maxScrollDistance=0.25f * size;
        if (absDelta >= size) {
          delta=delta > 0 ? maxScrollDistance : -maxScrollDistance;
        }
 else {
          delta=maxScrollDistance * (float)Math.sin((delta / size) * (Math.PI / 2));
        }
      }
      setTranslation(mCurrView,mTranslation + delta);
      updateSwipeProgressFromOffset(mCurrView,mCanCurrViewBeDimissed);
      onMoveUpdate(mCurrView,mTranslation + delta,delta);
    }
  break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mCurrView == null) {
  break;
}
mVelocityTracker.computeCurrentVelocity(1000,getMaxVelocity());
float velocity=getVelocity(mVelocityTracker);
if (!handleUpEvent(ev,mCurrView,velocity,getTranslation(mCurrView))) {
if (isDismissGesture(ev)) {
dismissChild(mCurrView,velocity,!swipedFastEnough());
}
 else {
mCallback.onDragCancelled(mCurrView);
snapChild(mCurrView,0,velocity);
}
}
break;
}
return true;
}
