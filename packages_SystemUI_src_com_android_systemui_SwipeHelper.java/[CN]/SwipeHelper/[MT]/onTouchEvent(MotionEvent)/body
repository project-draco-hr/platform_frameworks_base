{
  if (!mDragging) {
    return false;
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_OUTSIDE:
case MotionEvent.ACTION_MOVE:
    if (mCurrView != null) {
      float delta=getPos(ev) - mInitialTouchPos;
      if (CONSTRAIN_SWIPE && !mCallback.canChildBeDismissed(mCurrView)) {
        float size=getSize(mCurrView);
        float maxScrollDistance=0.15f * size;
        if (Math.abs(delta) >= size) {
          delta=delta > 0 ? maxScrollDistance : -maxScrollDistance;
        }
 else {
          delta=maxScrollDistance * (float)Math.sin((delta / size) * (Math.PI / 2));
        }
      }
      setTranslation(mCurrView,delta);
      if (FADE_OUT_DURING_SWIPE) {
        mCurrView.setAlpha(getAlphaForOffset(mCurrView,getContentSize(mCurrView)));
      }
      invalidateGlobalRegion(mCurrView);
    }
  break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mCurrView != null) {
  float maxVelocity=1000;
  mVelocityTracker.computeCurrentVelocity(1000,maxVelocity);
  float escapeVelocity=SWIPE_ESCAPE_VELOCITY * mDensityScale;
  float velocity=getVelocity(mVelocityTracker);
  float perpendicularVelocity=getPerpendicularVelocity(mVelocityTracker);
  boolean childSwipedFarEnough=DISMISS_IF_SWIPED_FAR_ENOUGH && Math.abs(getPos(mCurrView)) > 0.4 * getSize(mCurrView);
  boolean childSwipedFastEnough=(Math.abs(velocity) > escapeVelocity) && (Math.abs(velocity) > Math.abs(perpendicularVelocity)) && (velocity > 0) == (getPos(mCurrView) > 0);
  boolean dismissChild=mCallback.canChildBeDismissed(mCurrView) && (childSwipedFastEnough || childSwipedFarEnough);
  if (dismissChild) {
    dismissChild(mCurrView,childSwipedFastEnough ? velocity : 0f);
  }
 else {
    snapChild(mCurrView,velocity);
  }
}
break;
}
return true;
}
