{
  final View animView=mCallback.getChildContentView(view);
  final boolean canAnimViewBeDismissed=mCallback.canChildBeDismissed(view);
  float newPos;
  boolean isLayoutRtl=view.getLayoutDirection() == View.LAYOUT_DIRECTION_RTL;
  if (velocity < 0 || (velocity == 0 && getTranslation(animView) < 0) || (velocity == 0 && getTranslation(animView) == 0 && mSwipeDirection == Y) || (velocity == 0 && getTranslation(animView) == 0 && isLayoutRtl)) {
    newPos=-getSize(animView);
  }
 else {
    newPos=getSize(animView);
  }
  long duration;
  if (fixedDuration == 0) {
    duration=MAX_ESCAPE_ANIMATION_DURATION;
    if (velocity != 0) {
      duration=Math.min(duration,(int)(Math.abs(newPos - getTranslation(animView)) * 1000f / Math.abs(velocity)));
    }
 else {
      duration=DEFAULT_ESCAPE_ANIMATION_DURATION;
    }
  }
 else {
    duration=fixedDuration;
  }
  if (!mDisableHwLayers) {
    animView.setLayerType(View.LAYER_TYPE_HARDWARE,null);
  }
  ObjectAnimator anim=createTranslationAnimation(animView,newPos);
  if (useAccelerateInterpolator) {
    anim.setInterpolator(mFastOutLinearInInterpolator);
  }
 else {
    anim.setInterpolator(sLinearInterpolator);
  }
  anim.setDuration(duration);
  if (delay > 0) {
    anim.setStartDelay(delay);
  }
  anim.addListener(new AnimatorListenerAdapter(){
    public void onAnimationEnd(    Animator animation){
      updateSwipeProgressFromOffset(animView,canAnimViewBeDismissed);
      mCallback.onChildDismissed(view);
      if (endAction != null) {
        endAction.run();
      }
      if (!mDisableHwLayers) {
        animView.setLayerType(View.LAYER_TYPE_NONE,null);
      }
    }
  }
);
  anim.addUpdateListener(new AnimatorUpdateListener(){
    public void onAnimationUpdate(    ValueAnimator animation){
      updateSwipeProgressFromOffset(animView,canAnimViewBeDismissed);
    }
  }
);
  prepareDismissAnimation(animView,anim);
  anim.start();
}
