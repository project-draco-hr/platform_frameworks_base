{
  final boolean mustNotify;
  boolean mustInitialize=false;
  boolean autoBrightnessAdjustmentChanged=false;
synchronized (mLock) {
    mPendingUpdatePowerStateLocked=false;
    if (mPendingRequestLocked == null) {
      return;
    }
    if (mPowerRequest == null) {
      mPowerRequest=new DisplayPowerRequest(mPendingRequestLocked);
      mWaitingForNegativeProximity=mPendingWaitForNegativeProximityLocked;
      mPendingWaitForNegativeProximityLocked=false;
      mPendingRequestChangedLocked=false;
      mustInitialize=true;
    }
 else     if (mPendingRequestChangedLocked) {
      autoBrightnessAdjustmentChanged=(mPowerRequest.screenAutoBrightnessAdjustment != mPendingRequestLocked.screenAutoBrightnessAdjustment);
      mPowerRequest.copyFrom(mPendingRequestLocked);
      mWaitingForNegativeProximity|=mPendingWaitForNegativeProximityLocked;
      mPendingWaitForNegativeProximityLocked=false;
      mPendingRequestChangedLocked=false;
      mDisplayReadyLocked=false;
    }
    mustNotify=!mDisplayReadyLocked;
  }
  if (mustInitialize) {
    initialize();
  }
  int state;
  int brightness=PowerManager.BRIGHTNESS_DEFAULT;
switch (mPowerRequest.policy) {
case DisplayPowerRequest.POLICY_OFF:
    state=Display.STATE_OFF;
  break;
case DisplayPowerRequest.POLICY_DOZE:
if (mPowerRequest.dozeScreenState != Display.STATE_UNKNOWN) {
  state=mPowerRequest.dozeScreenState;
}
 else {
  state=Display.STATE_DOZE;
}
brightness=mPowerRequest.dozeScreenBrightness;
break;
case DisplayPowerRequest.POLICY_DIM:
case DisplayPowerRequest.POLICY_BRIGHT:
default :
state=Display.STATE_ON;
break;
}
if (mProximitySensor != null) {
if (mPowerRequest.useProximitySensor && state != Display.STATE_OFF) {
setProximitySensorEnabled(true);
if (!mScreenOffBecauseOfProximity && mProximity == PROXIMITY_POSITIVE) {
mScreenOffBecauseOfProximity=true;
sendOnProximityPositiveWithWakelock();
}
}
 else if (mWaitingForNegativeProximity && mScreenOffBecauseOfProximity && mProximity == PROXIMITY_POSITIVE && state != Display.STATE_OFF) {
setProximitySensorEnabled(true);
}
 else {
setProximitySensorEnabled(false);
mWaitingForNegativeProximity=false;
}
if (mScreenOffBecauseOfProximity && mProximity != PROXIMITY_POSITIVE) {
mScreenOffBecauseOfProximity=false;
sendOnProximityNegativeWithWakelock();
}
}
 else {
mWaitingForNegativeProximity=false;
}
if (mScreenOffBecauseOfProximity) {
state=Display.STATE_OFF;
}
if (state == Display.STATE_OFF) {
brightness=PowerManager.BRIGHTNESS_OFF;
}
if (brightness < 0 && (state == Display.STATE_DOZE || state == Display.STATE_DOZE_SUSPEND)) {
brightness=mScreenBrightnessDozeConfig;
}
boolean autoBrightnessEnabled=false;
if (mAutomaticBrightnessController != null) {
autoBrightnessEnabled=mPowerRequest.useAutoBrightness && state == Display.STATE_ON && brightness < 0;
mAutomaticBrightnessController.configure(autoBrightnessEnabled,mPowerRequest.screenAutoBrightnessAdjustment);
}
boolean slowChange=false;
if (brightness < 0) {
if (autoBrightnessEnabled) {
brightness=mAutomaticBrightnessController.getAutomaticScreenBrightness();
}
if (brightness >= 0) {
brightness=clampScreenBrightness(brightness);
if (mAppliedAutoBrightness && !autoBrightnessAdjustmentChanged) {
slowChange=true;
}
mAppliedAutoBrightness=true;
}
 else {
mAppliedAutoBrightness=false;
}
}
 else {
mAppliedAutoBrightness=false;
}
if (brightness < 0) {
brightness=clampScreenBrightness(mPowerRequest.screenBrightness);
}
if (mPowerRequest.policy == DisplayPowerRequest.POLICY_DIM) {
if (brightness > mScreenBrightnessRangeMinimum) {
brightness=Math.max(Math.min(brightness - SCREEN_DIM_MINIMUM_REDUCTION,mScreenBrightnessDimConfig),mScreenBrightnessRangeMinimum);
}
if (!mAppliedDimming) {
slowChange=false;
}
mAppliedDimming=true;
}
if (mPowerRequest.lowPowerMode) {
if (brightness > mScreenBrightnessRangeMinimum) {
brightness=Math.max(brightness / 2,mScreenBrightnessRangeMinimum);
}
if (!mAppliedLowPower) {
slowChange=false;
}
mAppliedLowPower=true;
}
if (state != Display.STATE_OFF) {
animateScreenBrightness(brightness,slowChange ? BRIGHTNESS_RAMP_RATE_SLOW : BRIGHTNESS_RAMP_RATE_FAST);
}
if (state == Display.STATE_ON) {
if (!mColorFadeOffAnimator.isStarted()) {
setScreenState(Display.STATE_ON);
if (mPowerRequest.blockScreenOn && mPowerState.getColorFadeLevel() == 0.0f) {
blockScreenOn();
}
 else {
unblockScreenOn();
if (USE_COLOR_FADE_ON_ANIMATION && mPowerRequest.isBrightOrDim()) {
if (!mColorFadeOnAnimator.isStarted()) {
if (mPowerState.getColorFadeLevel() == 1.0f) {
mPowerState.dismissColorFade();
}
 else if (mPowerState.prepareColorFade(mContext,mColorFadeFadesConfig ? ColorFade.MODE_FADE : ColorFade.MODE_WARM_UP)) {
mColorFadeOnAnimator.start();
}
 else {
mColorFadeOnAnimator.end();
}
}
}
 else {
mPowerState.setColorFadeLevel(1.0f);
mPowerState.dismissColorFade();
}
}
}
}
 else if (state == Display.STATE_DOZE) {
unblockScreenOn();
if (!mScreenBrightnessRampAnimator.isAnimating() || mPowerState.getScreenState() != Display.STATE_ON) {
setScreenState(state);
mPowerState.setColorFadeLevel(1.0f);
mPowerState.dismissColorFade();
}
}
 else if (state == Display.STATE_DOZE_SUSPEND) {
unblockScreenOn();
if (!mScreenBrightnessRampAnimator.isAnimating() || mPowerState.getScreenState() == Display.STATE_DOZE_SUSPEND) {
setScreenState(state);
mPowerState.setColorFadeLevel(1.0f);
mPowerState.dismissColorFade();
}
}
 else {
unblockScreenOn();
if (!mColorFadeOnAnimator.isStarted()) {
if (mPowerRequest.policy == DisplayPowerRequest.POLICY_OFF) {
if (!mColorFadeOffAnimator.isStarted()) {
if (mPowerState.getColorFadeLevel() == 0.0f) {
setScreenState(Display.STATE_OFF);
}
 else if (mPowerState.prepareColorFade(mContext,mColorFadeFadesConfig ? ColorFade.MODE_FADE : ColorFade.MODE_COOL_DOWN) && mPowerState.getScreenState() != Display.STATE_OFF) {
mColorFadeOffAnimator.start();
}
 else {
mColorFadeOffAnimator.end();
}
}
}
 else {
setScreenState(Display.STATE_OFF);
}
}
}
if (mustNotify && !mScreenOnWasBlocked && !mColorFadeOnAnimator.isStarted()&& !mColorFadeOffAnimator.isStarted()&& !mScreenBrightnessRampAnimator.isAnimating()&& mPowerState.waitUntilClean(mCleanListener)) {
synchronized (mLock) {
if (!mPendingRequestChangedLocked) {
mDisplayReadyLocked=true;
if (DEBUG) {
Slog.d(TAG,"Display ready!");
}
}
}
sendOnStateChangedWithWakelock();
}
}
