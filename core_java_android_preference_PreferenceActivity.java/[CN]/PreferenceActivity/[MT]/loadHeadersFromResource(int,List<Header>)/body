{
  XmlResourceParser parser=null;
  try {
    parser=getResources().getXml(resid);
    AttributeSet attrs=Xml.asAttributeSet(parser);
    int type;
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && type != XmlPullParser.START_TAG) {
    }
    String nodeName=parser.getName();
    if (!"preference-headers".equals(nodeName)) {
      throw new RuntimeException("XML document must start with <preference-headers> tag; found" + nodeName + " at "+ parser.getPositionDescription());
    }
    Bundle curBundle=null;
    int outerDepth=parser.getDepth();
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
      if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
        continue;
      }
      nodeName=parser.getName();
      if ("header".equals(nodeName)) {
        Header header=new Header();
        TypedArray sa=getResources().obtainAttributes(attrs,com.android.internal.R.styleable.PreferenceHeader);
        header.title=sa.getText(com.android.internal.R.styleable.PreferenceHeader_title);
        header.summary=sa.getText(com.android.internal.R.styleable.PreferenceHeader_summary);
        header.iconRes=sa.getResourceId(com.android.internal.R.styleable.PreferenceHeader_icon,0);
        header.fragment=sa.getString(com.android.internal.R.styleable.PreferenceHeader_fragment);
        sa.recycle();
        if (curBundle == null) {
          curBundle=new Bundle();
        }
        getResources().parseBundleExtras(parser,curBundle);
        if (curBundle.size() > 0) {
          header.fragmentArguments=curBundle;
          curBundle=null;
        }
        target.add(header);
      }
 else {
        XmlUtils.skipCurrentTag(parser);
      }
    }
  }
 catch (  XmlPullParserException e) {
    throw new RuntimeException("Error parsing headers",e);
  }
catch (  IOException e) {
    throw new RuntimeException("Error parsing headers",e);
  }
 finally {
    if (parser != null)     parser.close();
  }
}
