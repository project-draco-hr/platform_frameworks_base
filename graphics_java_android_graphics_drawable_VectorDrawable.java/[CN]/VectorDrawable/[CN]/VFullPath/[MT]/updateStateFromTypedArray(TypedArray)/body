{
  int byteCount=TOTAL_PROPERTY_COUNT * 4;
  if (mPropertyData == null) {
    mPropertyData=new byte[byteCount];
  }
  boolean success=nGetFullPathProperties(mNativePtr,mPropertyData,byteCount);
  if (!success) {
    throw new RuntimeException("Error: inconsistent property count");
  }
  ByteBuffer properties=ByteBuffer.wrap(mPropertyData);
  properties.order(ByteOrder.nativeOrder());
  float strokeWidth=properties.getFloat(STROKE_WIDTH_INDEX * 4);
  int strokeColor=properties.getInt(STROKE_COLOR_INDEX * 4);
  float strokeAlpha=properties.getFloat(STROKE_ALPHA_INDEX * 4);
  int fillColor=properties.getInt(FILL_COLOR_INDEX * 4);
  float fillAlpha=properties.getFloat(FILL_ALPHA_INDEX * 4);
  float trimPathStart=properties.getFloat(TRIM_PATH_START_INDEX * 4);
  float trimPathEnd=properties.getFloat(TRIM_PATH_END_INDEX * 4);
  float trimPathOffset=properties.getFloat(TRIM_PATH_OFFSET_INDEX * 4);
  int strokeLineCap=properties.getInt(STROKE_LINE_CAP_INDEX * 4);
  int strokeLineJoin=properties.getInt(STROKE_LINE_JOIN_INDEX * 4);
  float strokeMiterLimit=properties.getFloat(STROKE_MITER_LIMIT_INDEX * 4);
  int fillType=properties.getInt(FILL_TYPE_INDEX * 4);
  Shader fillGradient=null;
  Shader strokeGradient=null;
  mChangingConfigurations|=a.getChangingConfigurations();
  mThemeAttrs=a.extractThemeAttrs();
  final String pathName=a.getString(R.styleable.VectorDrawablePath_name);
  if (pathName != null) {
    mPathName=pathName;
    nSetName(mNativePtr,mPathName);
  }
  final String pathString=a.getString(R.styleable.VectorDrawablePath_pathData);
  if (pathString != null) {
    mPathData=new PathParser.PathData(pathString);
    nSetPathString(mNativePtr,pathString,pathString.length());
  }
  final ComplexColor fillColors=a.getComplexColor(R.styleable.VectorDrawablePath_fillColor);
  if (fillColors != null) {
    if (fillColors instanceof GradientColor) {
      mFillColors=fillColors;
      fillGradient=((GradientColor)fillColors).getShader();
    }
 else     if (fillColors.isStateful()) {
      mFillColors=fillColors;
    }
 else {
      mFillColors=null;
    }
    fillColor=fillColors.getDefaultColor();
  }
  final ComplexColor strokeColors=a.getComplexColor(R.styleable.VectorDrawablePath_strokeColor);
  if (strokeColors != null) {
    if (strokeColors instanceof GradientColor) {
      mStrokeColors=strokeColors;
      strokeGradient=((GradientColor)strokeColors).getShader();
    }
 else     if (strokeColors.isStateful()) {
      mStrokeColors=strokeColors;
    }
 else {
      mStrokeColors=null;
    }
    strokeColor=strokeColors.getDefaultColor();
  }
  nUpdateFullPathFillGradient(mNativePtr,fillGradient != null ? fillGradient.getNativeInstance() : 0);
  nUpdateFullPathStrokeGradient(mNativePtr,strokeGradient != null ? strokeGradient.getNativeInstance() : 0);
  fillAlpha=a.getFloat(R.styleable.VectorDrawablePath_fillAlpha,fillAlpha);
  strokeLineCap=a.getInt(R.styleable.VectorDrawablePath_strokeLineCap,strokeLineCap);
  strokeLineJoin=a.getInt(R.styleable.VectorDrawablePath_strokeLineJoin,strokeLineJoin);
  strokeMiterLimit=a.getFloat(R.styleable.VectorDrawablePath_strokeMiterLimit,strokeMiterLimit);
  strokeAlpha=a.getFloat(R.styleable.VectorDrawablePath_strokeAlpha,strokeAlpha);
  strokeWidth=a.getFloat(R.styleable.VectorDrawablePath_strokeWidth,strokeWidth);
  trimPathEnd=a.getFloat(R.styleable.VectorDrawablePath_trimPathEnd,trimPathEnd);
  trimPathOffset=a.getFloat(R.styleable.VectorDrawablePath_trimPathOffset,trimPathOffset);
  trimPathStart=a.getFloat(R.styleable.VectorDrawablePath_trimPathStart,trimPathStart);
  fillType=a.getInt(R.styleable.VectorDrawablePath_fillType,fillType);
  nUpdateFullPathProperties(mNativePtr,strokeWidth,strokeColor,strokeAlpha,fillColor,fillAlpha,trimPathStart,trimPathEnd,trimPathOffset,strokeMiterLimit,strokeLineCap,strokeLineJoin,fillType);
}
