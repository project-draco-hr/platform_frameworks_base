{
  if (mThemeAttrs == null) {
    return;
  }
  final TypedArray a=t.resolveAttributes(mThemeAttrs,R.styleable.VectorDrawablePath);
  mClip=a.getBoolean(R.styleable.VectorDrawablePath_clipToPath,mClip);
  if (a.hasValue(R.styleable.VectorDrawablePath_name)) {
    mPathName=a.getString(R.styleable.VectorDrawablePath_name);
  }
  if (a.hasValue(R.styleable.VectorDrawablePath_pathData)) {
    mNode=PathParser.createNodesFromPathData(a.getString(R.styleable.VectorDrawablePath_pathData));
  }
  mFillColor=a.getColor(R.styleable.VectorDrawablePath_fill,mFillColor);
  mFillOpacity=a.getFloat(R.styleable.VectorDrawablePath_fillOpacity,mFillOpacity);
  mStrokeLineCap=getStrokeLineCap(a.getInt(R.styleable.VectorDrawablePath_strokeLineCap,-1),mStrokeLineCap);
  mStrokeLineJoin=getStrokeLineJoin(a.getInt(R.styleable.VectorDrawablePath_strokeLineJoin,-1),mStrokeLineJoin);
  mStrokeMiterlimit=a.getFloat(R.styleable.VectorDrawablePath_strokeMiterLimit,mStrokeMiterlimit);
  mStrokeColor=a.getColor(R.styleable.VectorDrawablePath_stroke,mStrokeColor);
  mStrokeOpacity=a.getFloat(R.styleable.VectorDrawablePath_strokeOpacity,mStrokeOpacity);
  mStrokeWidth=a.getFloat(R.styleable.VectorDrawablePath_strokeWidth,mStrokeWidth);
  mTrimPathEnd=a.getFloat(R.styleable.VectorDrawablePath_trimPathEnd,mTrimPathEnd);
  mTrimPathOffset=a.getFloat(R.styleable.VectorDrawablePath_trimPathOffset,mTrimPathOffset);
  mTrimPathStart=a.getFloat(R.styleable.VectorDrawablePath_trimPathStart,mTrimPathStart);
  updateColorAlphas();
  a.recycle();
}
