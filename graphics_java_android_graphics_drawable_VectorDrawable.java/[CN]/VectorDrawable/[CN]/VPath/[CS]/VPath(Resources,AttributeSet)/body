{
  TypedArray a=r.obtainAttributes(attrs,R.styleable.VectorDrawablePath);
  mClip=a.getBoolean(R.styleable.VectorDrawablePath_clipToPath,false);
  mId=a.getString(R.styleable.VectorDrawablePath_name);
  mNode=parsePath(a.getString(R.styleable.VectorDrawablePath_pathData));
  mFillColor=a.getColor(R.styleable.VectorDrawablePath_fill,0);
  mFillOpacity=a.getFloat(R.styleable.VectorDrawablePath_fillOpacity,Float.NaN);
  if (!Float.isNaN(mFillOpacity)) {
    mFillColor&=0x00FFFFFF;
    mFillColor|=((int)(0xFF * mFillOpacity)) << 24;
  }
  mRotate=a.getFloat(R.styleable.VectorDrawablePath_rotation,0);
  mPivotX=a.getFloat(R.styleable.VectorDrawablePath_pivotX,0);
  mPivotY=a.getFloat(R.styleable.VectorDrawablePath_pivotY,0);
  int lineCap=a.getInt(R.styleable.VectorDrawablePath_strokeLineCap,0);
switch (lineCap) {
case LINECAP_BUTT:
    mStrokelineCap=Paint.Cap.BUTT;
  break;
case LINECAP_ROUND:
mStrokelineCap=Paint.Cap.ROUND;
break;
case LINECAP_SQUARE:
mStrokelineCap=Paint.Cap.SQUARE;
break;
}
int lineJoin=a.getInt(R.styleable.VectorDrawablePath_strokeLineJoin,0);
switch (lineJoin) {
case LINEJOIN_MITER:
mStrokelineJoin=Paint.Join.MITER;
break;
case LINEJOIN_ROUND:
mStrokelineJoin=Paint.Join.ROUND;
break;
case LINEJOIN_BEVEL:
mStrokelineJoin=Paint.Join.BEVEL;
break;
}
mStrokeMiterlimit=a.getFloat(R.styleable.VectorDrawablePath_strokeMiterLimit,mStrokeMiterlimit);
mStrokeColor=a.getColor(R.styleable.VectorDrawablePath_stroke,mStrokeColor);
mStrokeOpacity=a.getFloat(R.styleable.VectorDrawablePath_strokeOpacity,Float.NaN);
if (!Float.isNaN(mStrokeOpacity)) {
mStrokeColor&=0x00FFFFFF;
mStrokeColor|=((int)(0xFF * mStrokeOpacity)) << 24;
}
mStrokeWidth=a.getFloat(R.styleable.VectorDrawablePath_strokeWidth,0);
mTrimPathEnd=a.getFloat(R.styleable.VectorDrawablePath_trimPathEnd,1);
mTrimPathOffset=a.getFloat(R.styleable.VectorDrawablePath_trimPathOffset,0);
mTrimPathStart=a.getFloat(R.styleable.VectorDrawablePath_trimPathStart,0);
int[] states={R.styleable.VectorDrawablePath_state_activated,R.styleable.VectorDrawablePath_state_checkable,R.styleable.VectorDrawablePath_state_checked,R.styleable.VectorDrawablePath_state_enabled,R.styleable.VectorDrawablePath_state_focused,R.styleable.VectorDrawablePath_state_hovered,R.styleable.VectorDrawablePath_state_pressed,R.styleable.VectorDrawablePath_state_selected,R.styleable.VectorDrawablePath_state_window_focused};
for (int state : states) {
if (a.hasValue(state)) {
addStateFilter(state,a.getBoolean(state,false));
}
}
a.recycle();
}
