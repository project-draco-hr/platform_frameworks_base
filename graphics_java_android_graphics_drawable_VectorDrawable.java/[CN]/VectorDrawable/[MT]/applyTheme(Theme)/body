{
  super.applyTheme(t);
  final VectorDrawableState state=mVectorState;
  if (state == null) {
    return;
  }
  final boolean changedDensity=mVectorState.setDensity(Drawable.resolveDensity(t.getResources(),0));
  mDpiScaledDirty|=changedDensity;
  if (state.mThemeAttrs != null) {
    final TypedArray a=t.resolveAttributes(state.mThemeAttrs,R.styleable.VectorDrawable);
    try {
      state.mCacheDirty=true;
      updateStateFromTypedArray(a);
    }
 catch (    XmlPullParserException e) {
      throw new RuntimeException(e);
    }
 finally {
      a.recycle();
    }
    mDpiScaledDirty=true;
  }
  if (state.mTint != null && state.mTint.canApplyTheme()) {
    state.mTint=state.mTint.obtainForTheme(t);
  }
  if (mVectorState != null && mVectorState.canApplyTheme()) {
    mVectorState.applyTheme(t);
  }
  updateLocalState(t.getResources());
}
