{
  final VectorDrawableState state=mVectorState;
  state.mChangingConfigurations|=a.getChangingConfigurations();
  state.mThemeAttrs=a.extractThemeAttrs();
  final int tintMode=a.getInt(R.styleable.VectorDrawable_tintMode,-1);
  if (tintMode != -1) {
    state.mTintMode=Drawable.parseTintMode(tintMode,Mode.SRC_IN);
  }
  final ColorStateList tint=a.getColorStateList(R.styleable.VectorDrawable_tint);
  if (tint != null) {
    state.mTint=tint;
  }
  state.mAutoMirrored=a.getBoolean(R.styleable.VectorDrawable_autoMirrored,state.mAutoMirrored);
  float viewportWidth=a.getFloat(R.styleable.VectorDrawable_viewportWidth,state.mViewportWidth);
  float viewportHeight=a.getFloat(R.styleable.VectorDrawable_viewportHeight,state.mViewportHeight);
  state.setViewportSize(viewportWidth,viewportHeight);
  if (state.mViewportWidth <= 0) {
    throw new XmlPullParserException(a.getPositionDescription() + "<vector> tag requires viewportWidth > 0");
  }
 else   if (state.mViewportHeight <= 0) {
    throw new XmlPullParserException(a.getPositionDescription() + "<vector> tag requires viewportHeight > 0");
  }
  state.mBaseWidth=a.getDimension(R.styleable.VectorDrawable_width,state.mBaseWidth);
  state.mBaseHeight=a.getDimension(R.styleable.VectorDrawable_height,state.mBaseHeight);
  if (state.mBaseWidth <= 0) {
    throw new XmlPullParserException(a.getPositionDescription() + "<vector> tag requires width > 0");
  }
 else   if (state.mBaseHeight <= 0) {
    throw new XmlPullParserException(a.getPositionDescription() + "<vector> tag requires height > 0");
  }
  final int insetLeft=a.getDimensionPixelOffset(R.styleable.VectorDrawable_opticalInsetLeft,state.mOpticalInsets.left);
  final int insetTop=a.getDimensionPixelOffset(R.styleable.VectorDrawable_opticalInsetTop,state.mOpticalInsets.top);
  final int insetRight=a.getDimensionPixelOffset(R.styleable.VectorDrawable_opticalInsetRight,state.mOpticalInsets.right);
  final int insetBottom=a.getDimensionPixelOffset(R.styleable.VectorDrawable_opticalInsetBottom,state.mOpticalInsets.bottom);
  state.mOpticalInsets=Insets.of(insetLeft,insetTop,insetRight,insetBottom);
  final float alphaInFloat=a.getFloat(R.styleable.VectorDrawable_alpha,state.getAlpha());
  state.setAlpha(alphaInFloat);
  final String name=a.getString(R.styleable.VectorDrawable_name);
  if (name != null) {
    state.mRootName=name;
    state.mVGTargetsMap.put(name,state);
  }
}
