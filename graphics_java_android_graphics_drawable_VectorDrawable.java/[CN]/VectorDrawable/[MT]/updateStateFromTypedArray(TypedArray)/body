{
  final VectorDrawableState state=mVectorState;
  final VPathRenderer pathRenderer=state.mVPathRenderer;
  state.mChangingConfigurations|=a.getChangingConfigurations();
  state.mThemeAttrs=a.extractThemeAttrs();
  final int tintMode=a.getInt(R.styleable.VectorDrawable_tintMode,-1);
  if (tintMode != -1) {
    state.mTintMode=Drawable.parseTintMode(tintMode,Mode.SRC_IN);
  }
  final ColorStateList tint=a.getColorStateList(R.styleable.VectorDrawable_tint);
  if (tint != null) {
    state.mTint=tint;
  }
  state.mAutoMirrored=a.getBoolean(R.styleable.VectorDrawable_autoMirrored,state.mAutoMirrored);
  pathRenderer.mViewportWidth=a.getFloat(R.styleable.VectorDrawable_viewportWidth,pathRenderer.mViewportWidth);
  pathRenderer.mViewportHeight=a.getFloat(R.styleable.VectorDrawable_viewportHeight,pathRenderer.mViewportHeight);
  if (pathRenderer.mViewportWidth <= 0) {
    throw new XmlPullParserException(a.getPositionDescription() + "<viewport> tag requires viewportWidth > 0");
  }
 else   if (pathRenderer.mViewportHeight <= 0) {
    throw new XmlPullParserException(a.getPositionDescription() + "<viewport> tag requires viewportHeight > 0");
  }
  pathRenderer.mBaseWidth=a.getDimension(R.styleable.VectorDrawable_width,pathRenderer.mBaseWidth);
  pathRenderer.mBaseHeight=a.getDimension(R.styleable.VectorDrawable_height,pathRenderer.mBaseHeight);
  if (pathRenderer.mBaseWidth <= 0) {
    throw new XmlPullParserException(a.getPositionDescription() + "<size> tag requires width > 0");
  }
 else   if (pathRenderer.mBaseHeight <= 0) {
    throw new XmlPullParserException(a.getPositionDescription() + "<size> tag requires height > 0");
  }
}
