{
  final VectorDrawableState state=mVectorState;
  final VPathRenderer pathRenderer=state.mVPathRenderer;
  state.mChangingConfigurations|=a.getChangingConfigurations();
  state.mThemeAttrs=a.extractThemeAttrs();
  final int targetDensity=Drawable.resolveDensity(a.getResources(),0);
  final int sourceDensity=pathRenderer.mSourceDensity;
  final float densityScale=targetDensity / (float)sourceDensity;
  pathRenderer.mSourceDensity=targetDensity;
  final int tintMode=a.getInt(R.styleable.VectorDrawable_tintMode,-1);
  if (tintMode != -1) {
    state.mTintMode=Drawable.parseTintMode(tintMode,Mode.SRC_IN);
  }
  final ColorStateList tint=a.getColorStateList(R.styleable.VectorDrawable_tint);
  if (tint != null) {
    state.mTint=tint;
  }
  state.mAutoMirrored=a.getBoolean(R.styleable.VectorDrawable_autoMirrored,state.mAutoMirrored);
  pathRenderer.mViewportWidth=a.getFloat(R.styleable.VectorDrawable_viewportWidth,pathRenderer.mViewportWidth);
  pathRenderer.mViewportHeight=a.getFloat(R.styleable.VectorDrawable_viewportHeight,pathRenderer.mViewportHeight);
  if (pathRenderer.mViewportWidth <= 0) {
    throw new XmlPullParserException(a.getPositionDescription() + "<vector> tag requires viewportWidth > 0");
  }
 else   if (pathRenderer.mViewportHeight <= 0) {
    throw new XmlPullParserException(a.getPositionDescription() + "<vector> tag requires viewportHeight > 0");
  }
  pathRenderer.mBaseWidth=a.getDimension(R.styleable.VectorDrawable_width,pathRenderer.mBaseWidth * densityScale);
  pathRenderer.mBaseHeight=a.getDimension(R.styleable.VectorDrawable_height,pathRenderer.mBaseHeight * densityScale);
  if (pathRenderer.mBaseWidth <= 0) {
    throw new XmlPullParserException(a.getPositionDescription() + "<vector> tag requires width > 0");
  }
 else   if (pathRenderer.mBaseHeight <= 0) {
    throw new XmlPullParserException(a.getPositionDescription() + "<vector> tag requires height > 0");
  }
  final int insetLeft=a.getDimensionPixelOffset(R.styleable.VectorDrawable_opticalInsetLeft,(int)(pathRenderer.mOpticalInsets.left * densityScale));
  final int insetTop=a.getDimensionPixelOffset(R.styleable.VectorDrawable_opticalInsetTop,(int)(pathRenderer.mOpticalInsets.top * densityScale));
  final int insetRight=a.getDimensionPixelOffset(R.styleable.VectorDrawable_opticalInsetRight,(int)(pathRenderer.mOpticalInsets.right * densityScale));
  final int insetBottom=a.getDimensionPixelOffset(R.styleable.VectorDrawable_opticalInsetBottom,(int)(pathRenderer.mOpticalInsets.bottom * densityScale));
  pathRenderer.mOpticalInsets=Insets.of(insetLeft,insetTop,insetRight,insetBottom);
  final float alphaInFloat=a.getFloat(R.styleable.VectorDrawable_alpha,pathRenderer.getAlpha());
  pathRenderer.setAlpha(alphaInFloat);
  final String name=a.getString(R.styleable.VectorDrawable_name);
  if (name != null) {
    pathRenderer.mRootName=name;
    pathRenderer.mVGTargetsMap.put(name,pathRenderer);
  }
}
