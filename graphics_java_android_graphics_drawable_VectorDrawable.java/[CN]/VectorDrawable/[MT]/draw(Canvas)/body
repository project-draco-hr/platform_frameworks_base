{
  final Rect bounds=getBounds();
  if (bounds.width() <= 0 || bounds.height() <= 0) {
    return;
  }
  final int saveCount=canvas.save();
  final boolean needMirroring=needMirroring();
  canvas.translate(bounds.left,bounds.top);
  if (needMirroring) {
    canvas.translate(bounds.width(),0);
    canvas.scale(-1.0f,1.0f);
  }
  final ColorFilter colorFilter=mColorFilter == null ? mTintFilter : mColorFilter;
  if (!mAllowCaching) {
    if (!mVectorState.hasTranslucentRoot()) {
      mVectorState.mVPathRenderer.draw(canvas,bounds.width(),bounds.height(),colorFilter);
    }
 else {
      mVectorState.createCachedBitmapIfNeeded(bounds);
      mVectorState.updateCachedBitmap(bounds);
      mVectorState.drawCachedBitmapWithRootAlpha(canvas,colorFilter);
    }
  }
 else {
    mVectorState.createCachedBitmapIfNeeded(bounds);
    if (!mVectorState.canReuseCache()) {
      mVectorState.updateCachedBitmap(bounds);
      mVectorState.updateCacheStates();
    }
    mVectorState.drawCachedBitmapWithRootAlpha(canvas,colorFilter);
  }
  canvas.restoreToCount(saveCount);
}
