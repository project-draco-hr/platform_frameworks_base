{
  final int saveCount=canvas.save();
  final Rect bounds=getBounds();
  if (bounds.width() == 0 || bounds.height() == 0) {
    return;
  }
  final boolean needMirroring=needMirroring();
  canvas.translate(bounds.left,bounds.top);
  if (needMirroring) {
    canvas.translate(bounds.width(),0);
    canvas.scale(-1.0f,1.0f);
  }
  if (!mAllowCaching) {
    mVectorState.mVPathRenderer.draw(canvas,bounds.width(),bounds.height());
  }
 else {
    Bitmap bitmap=mVectorState.mCachedBitmap;
    if (bitmap == null || !mVectorState.canReuseCache(bounds.width(),bounds.height())) {
      bitmap=Bitmap.createBitmap(bounds.width(),bounds.height(),Bitmap.Config.ARGB_8888);
      Canvas tmpCanvas=new Canvas(bitmap);
      mVectorState.mVPathRenderer.draw(tmpCanvas,bounds.width(),bounds.height());
      mVectorState.mCachedBitmap=bitmap;
      mVectorState.updateCacheStates();
    }
    canvas.drawBitmap(bitmap,null,bounds,null);
  }
  canvas.restoreToCount(saveCount);
}
