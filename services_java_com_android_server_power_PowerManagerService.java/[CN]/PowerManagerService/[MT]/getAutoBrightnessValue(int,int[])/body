{
  try {
    int i;
    for (i=0; i < mAutoBrightnessLevels.length; i++) {
      if (sensorValue < mAutoBrightnessLevels[i]) {
        break;
      }
    }
    final int minval=values[0];
    final int maxval=values[mAutoBrightnessLevels.length];
    final int range=(maxval - minval) + LIGHT_SENSOR_RANGE_EXPANSION;
    float valf=((values[i] - minval + (LIGHT_SENSOR_RANGE_EXPANSION / 2)) / (float)range);
    if (mLightSensorAdjustSetting > 0 && mLightSensorAdjustSetting <= 1) {
      float adj=(float)Math.sqrt(1.0f - mLightSensorAdjustSetting);
      if (adj <= .00001) {
        valf=1;
      }
 else {
        valf/=adj;
      }
    }
 else     if (mLightSensorAdjustSetting < 0 && mLightSensorAdjustSetting >= -1) {
      float adj=(float)Math.sqrt(1.0f + mLightSensorAdjustSetting);
      valf*=adj;
    }
    valf+=mLightSensorAdjustSetting / LIGHT_SENSOR_OFFSET_SCALE;
    int val=(int)((valf * range) + minval) - (LIGHT_SENSOR_RANGE_EXPANSION / 2);
    if (val < minval)     val=minval;
 else     if (val > maxval)     val=maxval;
    return val;
  }
 catch (  Exception e) {
    Slog.e(TAG,"Values array must be non-empty and must be one element longer than " + "the auto-brightness levels array.  Check config.xml.",e);
    return 255;
  }
}
