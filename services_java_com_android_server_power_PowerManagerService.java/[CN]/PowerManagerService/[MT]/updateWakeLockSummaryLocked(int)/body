{
  if ((dirty & (DIRTY_WAKE_LOCKS | DIRTY_WAKEFULNESS)) != 0) {
    mWakeLockSummary=0;
    final int numWakeLocks=mWakeLocks.size();
    for (int i=0; i < numWakeLocks; i++) {
      final WakeLock wakeLock=mWakeLocks.get(i);
switch (wakeLock.mFlags & PowerManager.WAKE_LOCK_LEVEL_MASK) {
case PowerManager.PARTIAL_WAKE_LOCK:
        mWakeLockSummary|=WAKE_LOCK_CPU;
      break;
case PowerManager.FULL_WAKE_LOCK:
    if (mWakefulness != WAKEFULNESS_ASLEEP) {
      mWakeLockSummary|=WAKE_LOCK_CPU | WAKE_LOCK_SCREEN_BRIGHT | WAKE_LOCK_BUTTON_BRIGHT;
    }
  break;
case PowerManager.SCREEN_BRIGHT_WAKE_LOCK:
if (mWakefulness != WAKEFULNESS_ASLEEP) {
  mWakeLockSummary|=WAKE_LOCK_CPU | WAKE_LOCK_SCREEN_BRIGHT;
}
break;
case PowerManager.SCREEN_DIM_WAKE_LOCK:
if (mWakefulness != WAKEFULNESS_ASLEEP) {
mWakeLockSummary|=WAKE_LOCK_CPU | WAKE_LOCK_SCREEN_DIM;
}
break;
case PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK:
if (mWakefulness != WAKEFULNESS_ASLEEP) {
mWakeLockSummary|=WAKE_LOCK_CPU | WAKE_LOCK_PROXIMITY_SCREEN_OFF;
}
break;
}
}
if (DEBUG_SPEW) {
Slog.d(TAG,"updateWakeLockSummaryLocked: mWakefulness=" + wakefulnessToString(mWakefulness) + ", mWakeLockSummary=0x"+ Integer.toHexString(mWakeLockSummary));
}
}
}
