{
  if (((mPokey & POKE_LOCK_IGNORE_TOUCH_EVENTS) != 0) && (eventType == TOUCH_EVENT)) {
    if (false) {
      Slog.d(TAG,"dropping touch mPokey=0x" + Integer.toHexString(mPokey));
    }
    return;
  }
synchronized (mLocks) {
    if (DEBUG) {
      Slog.d(TAG,"userActivity mLastEventTime=" + mLastEventTime + " time="+ time+ " mUserActivityAllowed="+ mUserActivityAllowed+ " mUserState=0x"+ Integer.toHexString(mUserState)+ " mWakeLockState=0x"+ Integer.toHexString(mWakeLockState)+ " mProximitySensorActive="+ mProximitySensorActive+ " timeoutOverride="+ timeoutOverride+ " force="+ force);
    }
    if (isScreenTurningOffLocked()) {
      Slog.d(TAG,"ignoring user activity while turning off screen");
      return;
    }
    if (mProximitySensorActive && mProximityWakeLockCount == 0) {
      mProximitySensorActive=false;
    }
    if (mLastEventTime <= time || force) {
      mLastEventTime=time;
      if ((mUserActivityAllowed && !mProximitySensorActive) || force) {
        if (eventType == BUTTON_EVENT && !mUseSoftwareAutoBrightness) {
          mUserState=(mKeyboardVisible ? ALL_BRIGHT : SCREEN_BUTTON_BRIGHT);
        }
 else {
          mUserState|=SCREEN_BRIGHT;
        }
        int uid=Binder.getCallingUid();
        long ident=Binder.clearCallingIdentity();
        try {
          mBatteryStats.noteUserActivity(uid,eventType);
        }
 catch (        RemoteException e) {
        }
 finally {
          Binder.restoreCallingIdentity(ident);
        }
        mWakeLockState=mLocks.reactivateScreenLocksLocked();
        setPowerState(mUserState | mWakeLockState,noChangeLights,WindowManagerPolicy.OFF_BECAUSE_OF_USER);
        setTimeoutLocked(time,timeoutOverride,SCREEN_BRIGHT);
      }
    }
  }
  if (mPolicy != null) {
    mPolicy.userActivity();
  }
}
