{
  if (!mAnimationStarted || mAnimationStartDelayed) {
    mAnimationStarted=true;
    mAnimationStartTime=now;
    mAnimationDuration=(long)(IME_ADJUST_ANIM_DURATION * mService.getWindowAnimationScaleLocked());
  }
  float t=Math.min(1f,(float)(now - mAnimationStartTime) / mAnimationDuration);
  t=(mAnimationTarget == 1f ? IME_ADJUST_ENTRY_INTERPOLATOR : TOUCH_RESPONSE_INTERPOLATOR).getInterpolation(t);
  final ArrayList<TaskStack> stacks=mDisplayContent.getStacks();
  boolean updated=false;
  for (int i=stacks.size() - 1; i >= 0; --i) {
    final TaskStack stack=stacks.get(i);
    if (stack != null && stack.isAdjustedForIme()) {
      if (t >= 1f && mAnimationTarget == 0f && mDividerAnimationTarget == 0f) {
        stack.resetAdjustedForIme(true);
        updated=true;
      }
 else {
        mLastAnimationProgress=getInterpolatedAnimationValue(t);
        mLastDividerProgress=getInterpolatedDividerValue(t);
        updated|=stack.updateAdjustForIme(mLastAnimationProgress,mLastDividerProgress,false);
      }
      if (t >= 1f) {
        stack.endImeAdjustAnimation();
      }
    }
  }
  if (updated) {
    mService.mWindowPlacerLocked.performSurfacePlacement();
  }
  if (t >= 1.0f) {
    mLastAnimationProgress=mAnimationTarget;
    mLastDividerProgress=mDividerAnimationTarget;
    mAnimatingForIme=false;
    return false;
  }
 else {
    return true;
  }
}
