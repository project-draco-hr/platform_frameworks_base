{
  final Configuration baseConfig=mService.mCurConfiguration;
  final Configuration config=new Configuration();
  for (int rotation=0; rotation < 4; rotation++) {
    final boolean rotated=(rotation == ROTATION_90 || rotation == ROTATION_270);
    final int dw=rotated ? mDisplayContent.mBaseDisplayHeight : mDisplayContent.mBaseDisplayWidth;
    final int dh=rotated ? mDisplayContent.mBaseDisplayWidth : mDisplayContent.mBaseDisplayHeight;
    mService.mPolicy.getStableInsetsLw(rotation,dw,dh,mTmpRect);
    config.setToDefaults();
    config.orientation=(dw <= dh) ? ORIENTATION_PORTRAIT : ORIENTATION_LANDSCAPE;
    config.screenWidthDp=(int)(mService.mPolicy.getConfigDisplayWidth(dw,dh,rotation,baseConfig.uiMode) / mDisplayContent.getDisplayMetrics().density);
    config.screenHeightDp=(int)(mService.mPolicy.getConfigDisplayHeight(dw,dh,rotation,baseConfig.uiMode) / mDisplayContent.getDisplayMetrics().density);
    final Context rotationContext=mService.mContext.createConfigurationContext(config);
    mSnapAlgorithmForRotation[rotation]=new DividerSnapAlgorithm(rotationContext.getResources(),dw,dh,getContentWidth(),config.orientation == ORIENTATION_PORTRAIT,mTmpRect);
  }
}
