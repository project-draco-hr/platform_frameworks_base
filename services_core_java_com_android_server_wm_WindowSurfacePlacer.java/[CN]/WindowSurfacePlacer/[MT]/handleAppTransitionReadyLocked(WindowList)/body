{
  int appsCount=mService.mOpeningApps.size();
  if (!transitionGoodToGo(appsCount)) {
    return 0;
  }
  if (DEBUG_APP_TRANSITIONS)   Slog.v(TAG,"**** GOOD TO GO");
  int transit=mService.mAppTransition.getAppTransition();
  if (mService.mSkipAppTransitionAnimation) {
    transit=AppTransition.TRANSIT_UNSET;
  }
  mService.mSkipAppTransitionAnimation=false;
  mService.mNoAnimationNotifyOnTransitionFinished.clear();
  mService.mH.removeMessages(APP_TRANSITION_TIMEOUT);
  mService.rebuildAppWindowListLocked();
  mWallpaperMayChange=false;
  LayoutParams animLp=null;
  int bestAnimLayer=-1;
  boolean fullscreenAnim=false;
  boolean voiceInteraction=false;
  final WindowState lowerWallpaperTarget=mWallpaperControllerLocked.getLowerWallpaperTarget();
  final WindowState upperWallpaperTarget=mWallpaperControllerLocked.getUpperWallpaperTarget();
  boolean openingAppHasWallpaper=false;
  boolean closingAppHasWallpaper=false;
  final AppWindowToken lowerWallpaperAppToken;
  final AppWindowToken upperWallpaperAppToken;
  if (lowerWallpaperTarget == null) {
    lowerWallpaperAppToken=upperWallpaperAppToken=null;
  }
 else {
    lowerWallpaperAppToken=lowerWallpaperTarget.mAppToken;
    upperWallpaperAppToken=upperWallpaperTarget.mAppToken;
  }
  int i;
  final int closingAppsCount=mService.mClosingApps.size();
  appsCount=closingAppsCount + mService.mOpeningApps.size();
  for (i=0; i < appsCount; i++) {
    final AppWindowToken wtoken;
    if (i < closingAppsCount) {
      wtoken=mService.mClosingApps.valueAt(i);
      if (wtoken == lowerWallpaperAppToken || wtoken == upperWallpaperAppToken) {
        closingAppHasWallpaper=true;
      }
    }
 else {
      wtoken=mService.mOpeningApps.valueAt(i - closingAppsCount);
      if (wtoken == lowerWallpaperAppToken || wtoken == upperWallpaperAppToken) {
        openingAppHasWallpaper=true;
      }
    }
    voiceInteraction|=wtoken.voiceInteraction;
    if (wtoken.appFullscreen) {
      WindowState ws=wtoken.findMainWindow();
      if (ws != null) {
        animLp=ws.mAttrs;
        bestAnimLayer=ws.mLayer;
        fullscreenAnim=true;
      }
    }
 else     if (!fullscreenAnim) {
      WindowState ws=wtoken.findMainWindow();
      if (ws != null) {
        if (ws.mLayer > bestAnimLayer) {
          animLp=ws.mAttrs;
          bestAnimLayer=ws.mLayer;
        }
      }
    }
  }
  transit=maybeUpdateTransitToWallpaper(transit,openingAppHasWallpaper,closingAppHasWallpaper,lowerWallpaperTarget,upperWallpaperTarget);
  if (!mService.mPolicy.allowAppAnimationsLw()) {
    if (DEBUG_APP_TRANSITIONS)     Slog.v(TAG,"Animations disallowed by keyguard or dream.");
    animLp=null;
  }
  processApplicationsAnimatingInPlace(transit);
  handleClosingApps(transit,animLp,voiceInteraction,mTmpLayerAndToken);
  final AppWindowToken topClosingApp=mTmpLayerAndToken.token;
  final int topClosingLayer=mTmpLayerAndToken.layer;
  final AppWindowToken topOpeningApp=handleOpeningApps(transit,animLp,voiceInteraction,topClosingLayer);
  final AppWindowAnimator openingAppAnimator=(topOpeningApp == null) ? null : topOpeningApp.mAppAnimator;
  final AppWindowAnimator closingAppAnimator=(topClosingApp == null) ? null : topClosingApp.mAppAnimator;
  mService.mAppTransition.goodToGo(openingAppAnimator,closingAppAnimator);
  mService.mAppTransition.postAnimationCallback();
  mService.mAppTransition.clear();
  mService.mOpeningApps.clear();
  mService.mClosingApps.clear();
  mService.getDefaultDisplayContentLocked().layoutNeeded=true;
  if (windows == mService.getDefaultWindowListLocked() && !mService.moveInputMethodWindowsIfNeededLocked(true)) {
    mService.mLayersController.assignLayersLocked(windows);
  }
  mService.updateFocusedWindowLocked(UPDATE_FOCUS_PLACING_SURFACES,true);
  mService.mFocusMayChange=false;
  mService.notifyActivityDrawnForKeyguard();
  return FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG;
}
