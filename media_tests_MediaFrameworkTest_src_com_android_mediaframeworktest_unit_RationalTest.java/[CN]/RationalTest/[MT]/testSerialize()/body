{
  assertEqualsAfterSerializing(ZERO);
  assertEqualsAfterSerializing(NaN);
  assertEqualsAfterSerializing(NEGATIVE_INFINITY);
  assertEqualsAfterSerializing(POSITIVE_INFINITY);
  assertEqualsAfterSerializing(UNIT);
  assertEqualsAfterSerializing(new Rational(100,200));
  assertEqualsAfterSerializing(new Rational(-100,200));
  assertEqualsAfterSerializing(new Rational(5,1));
  assertEqualsAfterSerializing(new Rational(Integer.MAX_VALUE,Integer.MIN_VALUE));
  try {
    Rational badZero=createIllegalRational(0,100);
    Rational results=serializeRoundTrip(badZero);
    fail("Deserializing " + results + " should not have succeeded");
  }
 catch (  InvalidObjectException e) {
  }
  try {
    Rational badPosInfinity=createIllegalRational(100,0);
    Rational results=serializeRoundTrip(badPosInfinity);
    fail("Deserializing " + results + " should not have succeeded");
  }
 catch (  InvalidObjectException e) {
  }
  try {
    Rational badNegInfinity=createIllegalRational(-100,0);
    Rational results=serializeRoundTrip(badNegInfinity);
    fail("Deserializing " + results + " should not have succeeded");
  }
 catch (  InvalidObjectException e) {
  }
  try {
    Rational badReduced=createIllegalRational(2,4);
    Rational results=serializeRoundTrip(badReduced);
    fail("Deserializing " + results + " should not have succeeded");
  }
 catch (  InvalidObjectException e) {
  }
  try {
    Rational badReducedNeg=createIllegalRational(-2,4);
    Rational results=serializeRoundTrip(badReducedNeg);
    fail("Deserializing " + results + " should not have succeeded");
  }
 catch (  InvalidObjectException e) {
  }
}
