{
  mIsCanceled=false;
  mProviderSyncStarted=false;
  mAdapterSyncStarted=false;
  String message=null;
  int isSyncable=ContentResolver.getIsSyncable(account,authority);
  if (isSyncable < 0) {
    try {
      isSyncable=(getIsSyncable(account)) ? 1 : 0;
      ContentResolver.setIsSyncable(account,authority,isSyncable);
    }
 catch (    IOException e) {
      ++mResult.stats.numIoExceptions;
    }
catch (    AuthenticatorException e) {
      ++mResult.stats.numParseExceptions;
    }
catch (    OperationCanceledException e) {
    }
  }
  if (extras.getBoolean(ContentResolver.SYNC_EXTRAS_INITIALIZE,false)) {
    return;
  }
  if (isSyncable <= 0) {
    return;
  }
  boolean manualSync=extras.getBoolean(ContentResolver.SYNC_EXTRAS_MANUAL,false);
  try {
    mProvider.onSyncStart(syncContext,account);
    mProviderSyncStarted=true;
    onSyncStarting(syncContext,account,manualSync,mResult);
    if (mResult.hasError()) {
      message="SyncAdapter failed while trying to start sync";
      return;
    }
    mAdapterSyncStarted=true;
    if (mIsCanceled) {
      return;
    }
    final String syncTracingEnabledValue=SystemProperties.get(TAG + "Tracing");
    final boolean syncTracingEnabled=!TextUtils.isEmpty(syncTracingEnabledValue);
    try {
      if (syncTracingEnabled) {
        System.gc();
        System.gc();
        Debug.startMethodTracing("synctrace." + System.currentTimeMillis());
      }
      runSyncLoop(syncContext,account,extras);
    }
  finally {
      if (syncTracingEnabled)       Debug.stopMethodTracing();
    }
    onSyncEnding(syncContext,!mResult.hasError());
    mAdapterSyncStarted=false;
    mProvider.onSyncStop(syncContext,true);
    mProviderSyncStarted=false;
  }
  finally {
    if (mAdapterSyncStarted) {
      mAdapterSyncStarted=false;
      onSyncEnding(syncContext,false);
    }
    if (mProviderSyncStarted) {
      mProviderSyncStarted=false;
      mProvider.onSyncStop(syncContext,false);
    }
    if (!mIsCanceled) {
      if (message != null)       syncContext.setStatusText(message);
    }
  }
}
