{
  final PackageParser.Package pkg;
synchronized (mPackages) {
    pkg=mPackages.get(ps.name);
  }
  final int[] userIds=(userId == UserHandle.USER_ALL) ? sUserManager.getUserIds() : new int[]{userId};
  for (  int nextUserId : userIds) {
    if (DEBUG_REMOVE) {
      Slog.d(TAG,"Updating package:" + ps.name + " install state for user:"+ nextUserId);
    }
    destroyAppDataLIF(pkg,userId,StorageManager.FLAG_STORAGE_DE | StorageManager.FLAG_STORAGE_CE);
    removeKeystoreDataIfNeeded(nextUserId,ps.appId);
    schedulePackageCleaning(ps.name,nextUserId,false);
synchronized (mPackages) {
      if (clearPackagePreferredActivitiesLPw(ps.name,nextUserId)) {
        scheduleWritePackageRestrictionsLocked(nextUserId);
      }
      resetUserChangesToRuntimePermissionsAndFlagsLPw(ps,nextUserId);
    }
  }
  if (outInfo != null) {
    outInfo.removedPackage=ps.name;
    outInfo.removedAppId=ps.appId;
    outInfo.removedUsers=userIds;
  }
  return true;
}
