{
  final PackageRemovedInfo info=new PackageRemovedInfo();
  final boolean res;
  final int removeUser=(deleteFlags & PackageManager.DELETE_ALL_USERS) != 0 ? UserHandle.USER_ALL : userId;
  if (isPackageDeviceAdmin(packageName,removeUser)) {
    Slog.w(TAG,"Not removing package " + packageName + ": has active device admin");
    return PackageManager.DELETE_FAILED_DEVICE_POLICY_MANAGER;
  }
  PackageSetting uninstalledPs=null;
  int[] allUsers;
synchronized (mPackages) {
    uninstalledPs=mSettings.mPackages.get(packageName);
    if (uninstalledPs == null) {
      Slog.w(TAG,"Not removing non-existent package " + packageName);
      return PackageManager.DELETE_FAILED_INTERNAL_ERROR;
    }
    allUsers=sUserManager.getUserIds();
    info.origUsers=uninstalledPs.queryInstalledUsers(allUsers,true);
  }
  final int freezeUser;
  if (isUpdatedSystemApp(uninstalledPs) && ((deleteFlags & PackageManager.DELETE_SYSTEM_APP) == 0)) {
    freezeUser=UserHandle.USER_ALL;
  }
 else {
    freezeUser=removeUser;
  }
synchronized (mInstallLock) {
    if (DEBUG_REMOVE)     Slog.d(TAG,"deletePackageX: pkg=" + packageName + " user="+ userId);
    try (PackageFreezer freezer=freezePackageForDelete(packageName,freezeUser,deleteFlags,"deletePackageX")){
      res=deletePackageLIF(packageName,UserHandle.of(removeUser),true,allUsers,deleteFlags | REMOVE_CHATTY,info,true,null);
    }
 synchronized (mPackages) {
      if (res) {
        mEphemeralApplicationRegistry.onPackageUninstalledLPw(uninstalledPs.pkg);
      }
    }
  }
  if (res) {
    final boolean killApp=(deleteFlags & PackageManager.DELETE_DONT_KILL_APP) == 0;
    info.sendPackageRemovedBroadcasts(killApp);
    info.sendSystemPackageUpdatedBroadcasts();
    info.sendSystemPackageAppearedBroadcasts();
  }
  Runtime.getRuntime().gc();
  if (info.args != null) {
synchronized (mInstallLock) {
      info.args.doPostDeleteLI(true);
    }
  }
  return res ? PackageManager.DELETE_SUCCEEDED : PackageManager.DELETE_FAILED_INTERNAL_ERROR;
}
