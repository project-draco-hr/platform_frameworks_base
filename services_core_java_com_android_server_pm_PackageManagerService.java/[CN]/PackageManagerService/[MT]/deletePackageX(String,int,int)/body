{
  final PackageRemovedInfo info=new PackageRemovedInfo();
  final boolean res;
  final UserHandle removeForUser=(flags & PackageManager.DELETE_ALL_USERS) != 0 ? UserHandle.ALL : new UserHandle(userId);
  if (isPackageDeviceAdmin(packageName,removeForUser.getIdentifier())) {
    Slog.w(TAG,"Not removing package " + packageName + ": has active device admin");
    return PackageManager.DELETE_FAILED_DEVICE_POLICY_MANAGER;
  }
  PackageParser.Package uninstalledPkg;
  int[] allUsers;
synchronized (mPackages) {
    uninstalledPkg=mPackages.get(packageName);
    PackageSetting ps=mSettings.mPackages.get(packageName);
    if (ps == null || uninstalledPkg == null) {
      Slog.w(TAG,"Not removing non-existent package " + packageName);
      return PackageManager.DELETE_FAILED_INTERNAL_ERROR;
    }
    allUsers=sUserManager.getUserIds();
    info.origUsers=ps.queryInstalledUsers(allUsers,true);
  }
synchronized (mInstallLock) {
    if (DEBUG_REMOVE)     Slog.d(TAG,"deletePackageX: pkg=" + packageName + " user="+ userId);
    res=deletePackageLI(packageName,removeForUser,true,allUsers,flags | REMOVE_CHATTY,info,true,null);
synchronized (mPackages) {
      if (res) {
        mEphemeralApplicationRegistry.onPackageUninstalledLPw(uninstalledPkg);
      }
    }
  }
  if (res) {
    info.sendPackageRemovedBroadcasts();
    info.sendSystemPackageUpdatedBroadcasts();
    info.sendSystemPackageAppearedBroadcasts();
  }
  Runtime.getRuntime().gc();
  if (info.args != null) {
synchronized (mInstallLock) {
      info.args.doPostDeleteLI(true);
    }
  }
  return res ? PackageManager.DELETE_SUCCEEDED : PackageManager.DELETE_FAILED_INTERNAL_ERROR;
}
