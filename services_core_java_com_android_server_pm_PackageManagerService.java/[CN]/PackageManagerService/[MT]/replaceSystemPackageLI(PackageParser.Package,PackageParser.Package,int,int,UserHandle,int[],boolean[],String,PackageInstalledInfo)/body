{
  if (DEBUG_INSTALL)   Slog.d(TAG,"replaceSystemPackageLI: new=" + pkg + ", old="+ deletedPackage);
  boolean updatedSettings=false;
  parseFlags|=PackageParser.PARSE_IS_SYSTEM;
  if ((deletedPackage.applicationInfo.flags & ApplicationInfo.FLAG_PRIVILEGED) != 0) {
    parseFlags|=PackageParser.PARSE_IS_PRIVILEGED;
  }
  String packageName=deletedPackage.packageName;
  if (packageName == null) {
    res.setError(INSTALL_FAILED_REPLACE_COULDNT_DELETE,"Attempt to delete null packageName.");
    return;
  }
  PackageParser.Package oldPkg;
  PackageSetting oldPkgSetting;
synchronized (mPackages) {
    oldPkg=mPackages.get(packageName);
    oldPkgSetting=mSettings.mPackages.get(packageName);
    if ((oldPkg == null) || (oldPkg.applicationInfo == null) || (oldPkgSetting == null)) {
      res.setError(INSTALL_FAILED_REPLACE_COULDNT_DELETE,"Couldn't find package:" + packageName + " information");
      return;
    }
  }
  killApplication(packageName,oldPkg.applicationInfo.uid,"replace sys pkg");
  res.removedInfo.uid=oldPkg.applicationInfo.uid;
  res.removedInfo.removedPackage=packageName;
  removePackageLI(oldPkgSetting,true);
synchronized (mPackages) {
    if (!mSettings.disableSystemPackageLPw(packageName) && deletedPackage != null) {
      res.removedInfo.args=createInstallArgsForExisting(0,deletedPackage.applicationInfo.getCodePath(),deletedPackage.applicationInfo.getResourcePath(),deletedPackage.applicationInfo.nativeLibraryRootDir,getAppDexInstructionSets(deletedPackage.applicationInfo));
    }
 else {
      res.removedInfo.args=null;
    }
  }
  deleteCodeCacheDirsLI(packageName);
  res.returnCode=PackageManager.INSTALL_SUCCEEDED;
  pkg.applicationInfo.flags|=ApplicationInfo.FLAG_UPDATED_SYSTEM_APP;
  PackageParser.Package newPackage=null;
  try {
    newPackage=scanPackageLI(pkg,parseFlags,scanFlags,0,user);
    if (newPackage.mExtras != null) {
      final PackageSetting newPkgSetting=(PackageSetting)newPackage.mExtras;
      newPkgSetting.firstInstallTime=oldPkgSetting.firstInstallTime;
      newPkgSetting.lastUpdateTime=System.currentTimeMillis();
      if (oldPkgSetting.sharedUser != newPkgSetting.sharedUser) {
        res.setError(INSTALL_FAILED_SHARED_USER_INCOMPATIBLE,"Forbidding shared user change from " + oldPkgSetting.sharedUser + " to "+ newPkgSetting.sharedUser);
        updatedSettings=true;
      }
    }
    if (res.returnCode == PackageManager.INSTALL_SUCCEEDED) {
      updateSettingsLI(newPackage,installerPackageName,allUsers,perUserInstalled,res);
      updatedSettings=true;
    }
  }
 catch (  PackageManagerException e) {
    res.setError("Package couldn't be installed in " + pkg.codePath,e);
  }
  if (res.returnCode != PackageManager.INSTALL_SUCCEEDED) {
    if (newPackage != null) {
      removeInstalledPackageLI(newPackage,true);
    }
    try {
      scanPackageLI(oldPkg,parseFlags,SCAN_UPDATE_SIGNATURE,0,user);
    }
 catch (    PackageManagerException e) {
      Slog.e(TAG,"Failed to restore original package: " + e.getMessage());
    }
synchronized (mPackages) {
      if (updatedSettings) {
        mSettings.enableSystemPackageLPw(packageName);
        mSettings.setInstallerPackageName(packageName,oldPkgSetting.installerPackageName);
      }
      mSettings.writeLPr();
    }
  }
}
