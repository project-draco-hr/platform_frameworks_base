{
  if (!sUserManager.exists(userId))   return Collections.emptyList();
  flags=updateFlagsForResolve(flags,userId,intent);
  enforceCrossUserPermission(Binder.getCallingUid(),userId,false,false,"query intent activities");
  ComponentName comp=intent.getComponent();
  if (comp == null) {
    if (intent.getSelector() != null) {
      intent=intent.getSelector();
      comp=intent.getComponent();
    }
  }
  if (comp != null) {
    final List<ResolveInfo> list=new ArrayList<ResolveInfo>(1);
    final ActivityInfo ai=getActivityInfo(comp,flags,userId);
    if (ai != null) {
      final ResolveInfo ri=new ResolveInfo();
      ri.activityInfo=ai;
      list.add(ri);
    }
    return list;
  }
synchronized (mPackages) {
    final String pkgName=intent.getPackage();
    if (pkgName == null) {
      List<CrossProfileIntentFilter> matchingFilters=getMatchingCrossProfileIntentFilters(intent,resolvedType,userId);
      ResolveInfo xpResolveInfo=querySkipCurrentProfileIntents(matchingFilters,intent,resolvedType,flags,userId);
      if (xpResolveInfo != null) {
        List<ResolveInfo> result=new ArrayList<ResolveInfo>(1);
        result.add(xpResolveInfo);
        return filterIfNotSystemUser(result,userId);
      }
      List<ResolveInfo> result=mActivities.queryIntent(intent,resolvedType,flags,userId);
      result=filterIfNotSystemUser(result,userId);
      boolean hasNonNegativePriorityResult=hasNonNegativePriority(result);
      xpResolveInfo=queryCrossProfileIntents(matchingFilters,intent,resolvedType,flags,userId,hasNonNegativePriorityResult);
      if (xpResolveInfo != null && isUserEnabled(xpResolveInfo.targetUserId)) {
        boolean isVisibleToUser=filterIfNotSystemUser(Collections.singletonList(xpResolveInfo),userId).size() > 0;
        if (isVisibleToUser) {
          result.add(xpResolveInfo);
          Collections.sort(result,mResolvePrioritySorter);
        }
      }
      if (hasWebURI(intent)) {
        CrossProfileDomainInfo xpDomainInfo=null;
        final UserInfo parent=getProfileParent(userId);
        if (parent != null) {
          xpDomainInfo=getCrossProfileDomainPreferredLpr(intent,resolvedType,flags,userId,parent.id);
        }
        if (xpDomainInfo != null) {
          if (xpResolveInfo != null) {
            result.remove(xpResolveInfo);
          }
          if (result.size() == 0) {
            result.add(xpDomainInfo.resolveInfo);
            return result;
          }
        }
 else         if (result.size() <= 1) {
          return result;
        }
        result=filterCandidatesWithDomainPreferredActivitiesLPr(intent,flags,result,xpDomainInfo,userId);
        Collections.sort(result,mResolvePrioritySorter);
      }
      return result;
    }
    final PackageParser.Package pkg=mPackages.get(pkgName);
    if (pkg != null) {
      return filterIfNotSystemUser(mActivities.queryIntentForPackage(intent,resolvedType,flags,pkg.activities,userId),userId);
    }
    return new ArrayList<ResolveInfo>();
  }
}
