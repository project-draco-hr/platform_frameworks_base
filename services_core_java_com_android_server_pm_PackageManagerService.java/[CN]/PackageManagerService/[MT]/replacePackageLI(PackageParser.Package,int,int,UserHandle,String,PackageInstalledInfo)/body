{
  final boolean isEphemeral=(parseFlags & PackageParser.PARSE_IS_EPHEMERAL) != 0;
  final PackageParser.Package oldPackage;
  final String pkgName=pkg.packageName;
  final int[] allUsers;
  final boolean weFroze;
synchronized (mPackages) {
    oldPackage=mPackages.get(pkgName);
    final boolean oldIsEphemeral=oldPackage.applicationInfo.isEphemeralApp();
    if (isEphemeral && !oldIsEphemeral) {
      Slog.w(TAG,"Can't replace app with ephemeral: " + pkgName);
      res.setReturnCode(PackageManager.INSTALL_FAILED_EPHEMERAL_INVALID);
      return;
    }
    if (DEBUG_INSTALL)     Slog.d(TAG,"replacePackageLI: new=" + pkg + ", old="+ oldPackage);
    final PackageSetting ps=mSettings.mPackages.get(pkgName);
    if (shouldCheckUpgradeKeySetLP(ps,scanFlags)) {
      if (!checkUpgradeKeySetLP(ps,pkg)) {
        res.setError(INSTALL_FAILED_UPDATE_INCOMPATIBLE,"New package not signed by keys specified by upgrade-keysets: " + pkgName);
        return;
      }
    }
 else {
      if (compareSignatures(oldPackage.mSignatures,pkg.mSignatures) != PackageManager.SIGNATURE_MATCH) {
        res.setError(INSTALL_FAILED_UPDATE_INCOMPATIBLE,"New package has a different signature: " + pkgName);
        return;
      }
    }
    String invalidPackageName=getParentOrChildPackageChangedSharedUser(oldPackage,pkg);
    if (invalidPackageName != null) {
      res.setError(INSTALL_FAILED_SHARED_USER_INCOMPATIBLE,"Package " + invalidPackageName + " tried to change user "+ oldPackage.mSharedUserId);
      return;
    }
    allUsers=sUserManager.getUserIds();
    if (!ps.frozen) {
      ps.frozen=true;
      weFroze=true;
    }
 else {
      weFroze=false;
    }
  }
  try {
    replacePackageDirtyLI(pkg,oldPackage,parseFlags,scanFlags,user,allUsers,installerPackageName,res);
  }
  finally {
    if (weFroze) {
      unfreezePackage(pkgName);
    }
  }
}
