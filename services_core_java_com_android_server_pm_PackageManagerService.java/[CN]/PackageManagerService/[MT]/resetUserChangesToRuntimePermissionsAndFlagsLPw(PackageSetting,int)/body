{
  if (ps.pkg == null) {
    return;
  }
  final int userSettableMask=FLAG_PERMISSION_USER_SET | FLAG_PERMISSION_USER_FIXED | FLAG_PERMISSION_REVOKE_ON_UPGRADE| FLAG_PERMISSION_REVIEW_REQUIRED;
  final int policyOrSystemFlags=FLAG_PERMISSION_SYSTEM_FIXED | FLAG_PERMISSION_POLICY_FIXED;
  boolean writeInstallPermissions=false;
  boolean writeRuntimePermissions=false;
  final int permissionCount=ps.pkg.requestedPermissions.size();
  for (int i=0; i < permissionCount; i++) {
    String permission=ps.pkg.requestedPermissions.get(i);
    BasePermission bp=mSettings.mPermissions.get(permission);
    if (bp == null) {
      continue;
    }
    if (ps.sharedUser != null) {
      boolean used=false;
      final int packageCount=ps.sharedUser.packages.size();
      for (int j=0; j < packageCount; j++) {
        PackageSetting pkg=ps.sharedUser.packages.valueAt(j);
        if (pkg.pkg != null && !pkg.pkg.packageName.equals(ps.pkg.packageName) && pkg.pkg.requestedPermissions.contains(permission)) {
          used=true;
          break;
        }
      }
      if (used) {
        continue;
      }
    }
    PermissionsState permissionsState=ps.getPermissionsState();
    final int oldFlags=permissionsState.getPermissionFlags(bp.name,userId);
    final boolean hasInstallState=permissionsState.getInstallPermissionState(bp.name) != null;
    int flags=0;
    if ((mPermissionReviewRequired || Build.PERMISSIONS_REVIEW_REQUIRED) && ps.pkg.applicationInfo.targetSdkVersion < Build.VERSION_CODES.M) {
      flags|=FLAG_PERMISSION_REVIEW_REQUIRED;
    }
    if (permissionsState.updatePermissionFlags(bp,userId,userSettableMask,flags)) {
      if (hasInstallState) {
        writeInstallPermissions=true;
      }
 else {
        writeRuntimePermissions=true;
      }
    }
    if (!bp.isRuntime()) {
      continue;
    }
    if ((oldFlags & policyOrSystemFlags) != 0) {
      continue;
    }
    if ((oldFlags & FLAG_PERMISSION_GRANTED_BY_DEFAULT) != 0) {
      if (permissionsState.grantRuntimePermission(bp,userId) != PERMISSION_OPERATION_FAILURE) {
        writeRuntimePermissions=true;
      }
    }
 else     if ((flags & FLAG_PERMISSION_REVIEW_REQUIRED) == 0) {
      final int revokeResult=permissionsState.revokeRuntimePermission(bp,userId);
switch (revokeResult) {
case PERMISSION_OPERATION_SUCCESS:
case PERMISSION_OPERATION_SUCCESS_GIDS_CHANGED:
{
          writeRuntimePermissions=true;
          final int appId=ps.appId;
          mHandler.post(new Runnable(){
            @Override public void run(){
              killUid(appId,userId,KILL_APP_REASON_PERMISSIONS_REVOKED);
            }
          }
);
        }
      break;
  }
}
}
if (writeRuntimePermissions) {
mSettings.writeRuntimePermissionsForUserLPr(userId,true);
}
if (writeInstallPermissions) {
mSettings.writeLPr();
}
}
