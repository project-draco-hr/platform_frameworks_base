{
  final boolean debug=(intent.getFlags() & Intent.FLAG_DEBUG_LOG_RESOLUTION) != 0;
  if (DEBUG_PREFERRED || DEBUG_DOMAIN_VERIFICATION) {
    Slog.v(TAG,"Filtering results with preferred activities. Candidates count: " + candidates.size());
  }
  ArrayList<ResolveInfo> result=new ArrayList<ResolveInfo>();
  ArrayList<ResolveInfo> alwaysList=new ArrayList<ResolveInfo>();
  ArrayList<ResolveInfo> undefinedList=new ArrayList<ResolveInfo>();
  ArrayList<ResolveInfo> alwaysAskList=new ArrayList<ResolveInfo>();
  ArrayList<ResolveInfo> neverList=new ArrayList<ResolveInfo>();
  ArrayList<ResolveInfo> matchAllList=new ArrayList<ResolveInfo>();
synchronized (mPackages) {
    final int count=candidates.size();
    for (int n=0; n < count; n++) {
      ResolveInfo info=candidates.get(n);
      String packageName=info.activityInfo.packageName;
      PackageSetting ps=mSettings.mPackages.get(packageName);
      if (ps != null) {
        if (info.handleAllWebDataURI) {
          matchAllList.add(info);
          continue;
        }
        long packedStatus=getDomainVerificationStatusLPr(ps,userId);
        int status=(int)(packedStatus >> 32);
        int linkGeneration=(int)(packedStatus & 0xFFFFFFFF);
        if (status == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ALWAYS) {
          if (DEBUG_DOMAIN_VERIFICATION) {
            Slog.i(TAG,"  + always: " + info.activityInfo.packageName + " : linkgen="+ linkGeneration);
          }
          info.preferredOrder=linkGeneration;
          alwaysList.add(info);
        }
 else         if (status == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_NEVER) {
          if (DEBUG_DOMAIN_VERIFICATION) {
            Slog.i(TAG,"  + never: " + info.activityInfo.packageName);
          }
          neverList.add(info);
        }
 else         if (status == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ALWAYS_ASK) {
          if (DEBUG_DOMAIN_VERIFICATION) {
            Slog.i(TAG,"  + always-ask: " + info.activityInfo.packageName);
          }
          alwaysAskList.add(info);
        }
 else         if (status == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_UNDEFINED || status == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ASK) {
          if (DEBUG_DOMAIN_VERIFICATION) {
            Slog.i(TAG,"  + ask: " + info.activityInfo.packageName);
          }
          undefinedList.add(info);
        }
      }
    }
    boolean includeBrowser=false;
    if (alwaysList.size() > 0) {
      result.addAll(alwaysList);
    }
 else {
      result.addAll(undefinedList);
      if (xpDomainInfo != null && (xpDomainInfo.bestDomainVerificationStatus != INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_NEVER)) {
        result.add(xpDomainInfo.resolveInfo);
      }
      includeBrowser=true;
    }
    if (alwaysAskList.size() > 0) {
      for (      ResolveInfo i : result) {
        i.preferredOrder=0;
      }
      result.addAll(alwaysAskList);
      includeBrowser=true;
    }
    if (includeBrowser) {
      if (DEBUG_DOMAIN_VERIFICATION) {
        Slog.v(TAG,"   ...including browsers in candidate set");
      }
      if ((matchFlags & MATCH_ALL) != 0) {
        result.addAll(matchAllList);
      }
 else {
        final String defaultBrowserPackageName=getDefaultBrowserPackageName(userId);
        int maxMatchPrio=0;
        ResolveInfo defaultBrowserMatch=null;
        final int numCandidates=matchAllList.size();
        for (int n=0; n < numCandidates; n++) {
          ResolveInfo info=matchAllList.get(n);
          if (info.priority > maxMatchPrio) {
            maxMatchPrio=info.priority;
          }
          if (info.activityInfo.packageName.equals(defaultBrowserPackageName)) {
            if (defaultBrowserMatch == null || (defaultBrowserMatch.priority < info.priority)) {
              if (debug) {
                Slog.v(TAG,"Considering default browser match " + info);
              }
              defaultBrowserMatch=info;
            }
          }
        }
        if (defaultBrowserMatch != null && defaultBrowserMatch.priority >= maxMatchPrio && !TextUtils.isEmpty(defaultBrowserPackageName)) {
          if (debug) {
            Slog.v(TAG,"Default browser match " + defaultBrowserMatch);
          }
          result.add(defaultBrowserMatch);
        }
 else {
          result.addAll(matchAllList);
        }
      }
      if (result.size() == 0) {
        result.addAll(candidates);
        result.removeAll(neverList);
      }
    }
  }
  if (DEBUG_PREFERRED || DEBUG_DOMAIN_VERIFICATION) {
    Slog.v(TAG,"Filtered results with preferred activities. New candidates count: " + result.size());
    for (    ResolveInfo info : result) {
      Slog.v(TAG,"  + " + info.activityInfo);
    }
  }
  return result;
}
