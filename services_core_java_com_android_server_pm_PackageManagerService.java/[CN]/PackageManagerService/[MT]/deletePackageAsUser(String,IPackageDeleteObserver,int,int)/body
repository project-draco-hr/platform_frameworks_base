{
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.DELETE_PACKAGES,null);
  final int uid=Binder.getCallingUid();
  if (UserHandle.getUserId(uid) != userId) {
    mContext.enforceCallingPermission(android.Manifest.permission.INTERACT_ACROSS_USERS_FULL,"deletePackage for user " + userId);
  }
  if (isUserRestricted(userId,UserManager.DISALLOW_UNINSTALL_APPS)) {
    try {
      observer.packageDeleted(packageName,PackageManager.DELETE_FAILED_USER_RESTRICTED);
    }
 catch (    RemoteException re) {
    }
    return;
  }
  boolean uninstallBlocked=false;
  if ((flags & PackageManager.DELETE_ALL_USERS) != 0) {
    int[] users=sUserManager.getUserIds();
    for (int i=0; i < users.length; ++i) {
      if (getBlockUninstallForUser(packageName,users[i])) {
        uninstallBlocked=true;
        break;
      }
    }
  }
 else {
    uninstallBlocked=getBlockUninstallForUser(packageName,userId);
  }
  if (uninstallBlocked) {
    try {
      observer.packageDeleted(packageName,PackageManager.DELETE_FAILED_OWNER_BLOCKED);
    }
 catch (    RemoteException re) {
    }
    return;
  }
  if (DEBUG_REMOVE) {
    Slog.d(TAG,"deletePackageAsUser: pkg=" + packageName + " user="+ userId);
  }
  mHandler.post(new Runnable(){
    public void run(){
      mHandler.removeCallbacks(this);
      final int returnCode=deletePackageX(packageName,userId,flags);
      if (observer != null) {
        try {
          observer.packageDeleted(packageName,returnCode);
        }
 catch (        RemoteException e) {
          Log.i(TAG,"Observer no longer exists.");
        }
      }
    }
  }
);
}
