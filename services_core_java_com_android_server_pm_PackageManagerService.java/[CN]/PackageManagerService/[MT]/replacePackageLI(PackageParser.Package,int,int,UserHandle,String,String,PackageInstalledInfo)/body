{
  final boolean isEphemeral=(parseFlags & PackageParser.PARSE_IS_EPHEMERAL) != 0;
  final PackageParser.Package oldPackage;
  final String pkgName=pkg.packageName;
  final int[] allUsers;
  final boolean[] perUserInstalled;
synchronized (mPackages) {
    oldPackage=mPackages.get(pkgName);
    final boolean oldIsEphemeral=oldPackage.applicationInfo.isEphemeralApp();
    if (isEphemeral && !oldIsEphemeral) {
      Slog.w(TAG,"Can't replace app with ephemeral: " + pkgName);
      res.returnCode=PackageManager.INSTALL_FAILED_EPHEMERAL_INVALID;
      return;
    }
    if (DEBUG_INSTALL)     Slog.d(TAG,"replacePackageLI: new=" + pkg + ", old="+ oldPackage);
    final PackageSetting ps=mSettings.mPackages.get(pkgName);
    if (shouldCheckUpgradeKeySetLP(ps,scanFlags)) {
      if (!checkUpgradeKeySetLP(ps,pkg)) {
        res.setError(INSTALL_FAILED_UPDATE_INCOMPATIBLE,"New package not signed by keys specified by upgrade-keysets: " + pkgName);
        return;
      }
    }
 else {
      if (compareSignatures(oldPackage.mSignatures,pkg.mSignatures) != PackageManager.SIGNATURE_MATCH) {
        res.setError(INSTALL_FAILED_UPDATE_INCOMPATIBLE,"New package has a different signature: " + pkgName);
        return;
      }
    }
    allUsers=sUserManager.getUserIds();
    perUserInstalled=new boolean[allUsers.length];
    for (int i=0; i < allUsers.length; i++) {
      perUserInstalled[i]=ps != null ? ps.getInstalled(allUsers[i]) : false;
    }
  }
  boolean sysPkg=(isSystemApp(oldPackage));
  if (sysPkg) {
    replaceSystemPackageLI(oldPackage,pkg,parseFlags,scanFlags,user,allUsers,perUserInstalled,installerPackageName,volumeUuid,res);
  }
 else {
    replaceNonSystemPackageLI(oldPackage,pkg,parseFlags,scanFlags,user,allUsers,perUserInstalled,installerPackageName,volumeUuid,res);
  }
}
