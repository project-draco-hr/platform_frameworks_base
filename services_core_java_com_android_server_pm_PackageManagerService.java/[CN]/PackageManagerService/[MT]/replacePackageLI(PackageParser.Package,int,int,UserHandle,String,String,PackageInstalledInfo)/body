{
  PackageParser.Package oldPackage;
  String pkgName=pkg.packageName;
  int[] allUsers;
  boolean[] perUserInstalled;
synchronized (mPackages) {
    oldPackage=mPackages.get(pkgName);
    if (DEBUG_INSTALL)     Slog.d(TAG,"replacePackageLI: new=" + pkg + ", old="+ oldPackage);
    PackageSetting ps=mSettings.mPackages.get(pkgName);
    if (ps == null || !ps.keySetData.isUsingUpgradeKeySets() || ps.sharedUser != null) {
      if (compareSignatures(oldPackage.mSignatures,pkg.mSignatures) != PackageManager.SIGNATURE_MATCH) {
        res.setError(INSTALL_FAILED_UPDATE_INCOMPATIBLE,"New package has a different signature: " + pkgName);
        return;
      }
    }
 else {
      if (!checkUpgradeKeySetLP(ps,pkg)) {
        res.setError(INSTALL_FAILED_UPDATE_INCOMPATIBLE,"New package not signed by keys specified by upgrade-keysets: " + pkgName);
        return;
      }
    }
    allUsers=sUserManager.getUserIds();
    perUserInstalled=new boolean[allUsers.length];
    for (int i=0; i < allUsers.length; i++) {
      perUserInstalled[i]=ps != null ? ps.getInstalled(allUsers[i]) : false;
    }
  }
  boolean sysPkg=(isSystemApp(oldPackage));
  if (sysPkg) {
    replaceSystemPackageLI(oldPackage,pkg,parseFlags,scanFlags,user,allUsers,perUserInstalled,installerPackageName,volumeUuid,res);
  }
 else {
    replaceNonSystemPackageLI(oldPackage,pkg,parseFlags,scanFlags,user,allUsers,perUserInstalled,installerPackageName,volumeUuid,res);
  }
}
