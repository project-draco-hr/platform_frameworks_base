{
  if (deletedPkg.parentPackage != null) {
    Slog.w(TAG,"Attempt to delete child system package " + deletedPkg.packageName);
    return false;
  }
  final boolean applyUserRestrictions=(allUserHandles != null) && (perUserInstalled != null);
  final PackageSetting disabledPs;
synchronized (mPackages) {
    disabledPs=mSettings.getDisabledSystemPkgLPr(deletedPkg.packageName);
  }
  if (DEBUG_REMOVE)   Slog.d(TAG,"deleteSystemPackageLI: newPs=" + deletedPkg.packageName + " disabledPs="+ disabledPs);
  if (disabledPs == null) {
    Slog.w(TAG,"Attempt to delete unknown system package " + deletedPkg.packageName);
    return false;
  }
 else   if (DEBUG_REMOVE) {
    Slog.d(TAG,"Deleting system pkg from data partition");
  }
  if (DEBUG_REMOVE) {
    if (applyUserRestrictions) {
      Slog.d(TAG,"Remembering install states:");
      for (int i=0; i < allUserHandles.length; i++) {
        Slog.d(TAG,"   u=" + allUserHandles[i] + " inst="+ perUserInstalled[i]);
      }
    }
  }
  outInfo.isRemovedPackageSystemUpdate=true;
  if (disabledPs.versionCode < deletedPs.versionCode) {
    flags&=~PackageManager.DELETE_KEEP_DATA;
  }
 else {
    flags|=PackageManager.DELETE_KEEP_DATA;
  }
  boolean ret=deleteInstalledPackageLI(deletedPkg,true,flags,allUserHandles,perUserInstalled,outInfo,writeSettings,replacingPackage);
  if (!ret) {
    return false;
  }
synchronized (mPackages) {
    enableSystemPackageLPw(disabledPs.pkg);
    removeNativeBinariesLI(deletedPkg);
  }
  if (DEBUG_REMOVE)   Slog.d(TAG,"Re-installing system package: " + disabledPs);
  int parseFlags=PackageParser.PARSE_MUST_BE_APK | PackageParser.PARSE_IS_SYSTEM;
  if (locationIsPrivileged(disabledPs.codePath)) {
    parseFlags|=PackageParser.PARSE_IS_PRIVILEGED;
  }
  final PackageParser.Package newPkg;
  try {
    newPkg=scanPackageTracedLI(disabledPs.codePath,parseFlags,SCAN_NO_PATHS,0,null);
  }
 catch (  PackageManagerException e) {
    Slog.w(TAG,"Failed to restore system package:" + deletedPkg.packageName + ": "+ e.getMessage());
    return false;
  }
  prepareAppDataAfterInstall(newPkg);
synchronized (mPackages) {
    PackageSetting ps=mSettings.mPackages.get(newPkg.packageName);
    ps.getPermissionsState().copyFrom(deletedPs.getPermissionsState());
    updatePermissionsLPw(newPkg.packageName,newPkg,UPDATE_PERMISSIONS_ALL | UPDATE_PERMISSIONS_REPLACE_PKG);
    if (applyUserRestrictions) {
      if (DEBUG_REMOVE) {
        Slog.d(TAG,"Propagating install state across reinstall");
      }
      for (int i=0; i < allUserHandles.length; i++) {
        if (DEBUG_REMOVE) {
          Slog.d(TAG,"    user " + allUserHandles[i] + " => "+ perUserInstalled[i]);
        }
        ps.setInstalled(perUserInstalled[i],allUserHandles[i]);
        mSettings.writeRuntimePermissionsForUserLPr(allUserHandles[i],false);
      }
      mSettings.writeAllUsersPackageRestrictionsLPr();
    }
    if (writeSettings) {
      mSettings.writeLPr();
    }
  }
  return true;
}
