{
synchronized (mPackages) {
    if (outInfo != null) {
      outInfo.uid=ps.appId;
    }
    if (outInfo != null && outInfo.removedChildPackages != null) {
      final int childCount=(ps.childPackageNames != null) ? ps.childPackageNames.size() : 0;
      for (int i=0; i < childCount; i++) {
        String childPackageName=ps.childPackageNames.get(i);
        PackageSetting childPs=mSettings.mPackages.get(childPackageName);
        if (childPs == null) {
          return false;
        }
        PackageRemovedInfo childInfo=outInfo.removedChildPackages.get(childPackageName);
        if (childInfo != null) {
          childInfo.uid=childPs.appId;
        }
      }
    }
  }
  removePackageDataLIF(ps,allUserHandles,outInfo,flags,writeSettings);
  final int childCount=(ps.childPackageNames != null) ? ps.childPackageNames.size() : 0;
  for (int i=0; i < childCount; i++) {
    PackageSetting childPs;
synchronized (mPackages) {
      childPs=mSettings.peekPackageLPr(ps.childPackageNames.get(i));
    }
    if (childPs != null) {
      PackageRemovedInfo childOutInfo=(outInfo != null && outInfo.removedChildPackages != null) ? outInfo.removedChildPackages.get(childPs.name) : null;
      final int deleteFlags=(flags & DELETE_KEEP_DATA) != 0 && (replacingPackage != null && !replacingPackage.hasChildPackage(childPs.name)) ? flags & ~DELETE_KEEP_DATA : flags;
      removePackageDataLIF(childPs,allUserHandles,childOutInfo,deleteFlags,writeSettings);
    }
  }
  if (ps.parentPackageName == null) {
    if (deleteCodeAndResources && (outInfo != null)) {
      outInfo.args=createInstallArgsForExisting(packageFlagsToInstallFlags(ps),ps.codePathString,ps.resourcePathString,getAppDexInstructionSets(ps));
      if (DEBUG_SD_INSTALL)       Slog.i(TAG,"args=" + outInfo.args);
    }
  }
  return true;
}
