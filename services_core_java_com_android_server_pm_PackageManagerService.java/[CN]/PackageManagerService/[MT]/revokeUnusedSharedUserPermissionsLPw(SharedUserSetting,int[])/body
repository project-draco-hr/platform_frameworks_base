{
  ArraySet<String> usedPermissions=new ArraySet<>();
  final int packageCount=su.packages.size();
  for (int i=0; i < packageCount; i++) {
    PackageSetting ps=su.packages.valueAt(i);
    if (ps.pkg == null) {
      continue;
    }
    final int requestedPermCount=ps.pkg.requestedPermissions.size();
    for (int j=0; j < requestedPermCount; j++) {
      String permission=ps.pkg.requestedPermissions.get(j);
      BasePermission bp=mSettings.mPermissions.get(permission);
      if (bp != null) {
        usedPermissions.add(permission);
      }
    }
  }
  PermissionsState permissionsState=su.getPermissionsState();
  List<PermissionState> installPermStates=permissionsState.getInstallPermissionStates();
  final int installPermCount=installPermStates.size();
  for (int i=installPermCount - 1; i >= 0; i--) {
    PermissionState permissionState=installPermStates.get(i);
    if (!usedPermissions.contains(permissionState.getName())) {
      BasePermission bp=mSettings.mPermissions.get(permissionState.getName());
      if (bp != null) {
        permissionsState.revokeInstallPermission(bp);
        permissionsState.updatePermissionFlags(bp,UserHandle.USER_ALL,PackageManager.MASK_PERMISSION_FLAGS,0);
      }
    }
  }
  int[] runtimePermissionChangedUserIds=EmptyArray.INT;
  for (  int userId : allUserIds) {
    List<PermissionState> runtimePermStates=permissionsState.getRuntimePermissionStates(userId);
    final int runtimePermCount=runtimePermStates.size();
    for (int i=runtimePermCount - 1; i >= 0; i--) {
      PermissionState permissionState=runtimePermStates.get(i);
      if (!usedPermissions.contains(permissionState.getName())) {
        BasePermission bp=mSettings.mPermissions.get(permissionState.getName());
        if (bp != null) {
          permissionsState.revokeRuntimePermission(bp,userId);
          permissionsState.updatePermissionFlags(bp,userId,PackageManager.MASK_PERMISSION_FLAGS,0);
          runtimePermissionChangedUserIds=ArrayUtils.appendInt(runtimePermissionChangedUserIds,userId);
        }
      }
    }
  }
  return runtimePermissionChangedUserIds;
}
