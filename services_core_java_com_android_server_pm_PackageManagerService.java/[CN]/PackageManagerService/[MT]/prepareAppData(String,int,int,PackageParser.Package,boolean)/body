{
  if (DEBUG_APP_DATA) {
    Slog.v(TAG,"prepareAppData for " + pkg.packageName + " u"+ userId+ " 0x"+ Integer.toHexString(flags)+ (restoreconNeeded ? " restoreconNeeded" : ""));
  }
  final String packageName=pkg.packageName;
  final ApplicationInfo app=pkg.applicationInfo;
  final int appId=UserHandle.getAppId(app.uid);
  Preconditions.checkNotNull(app.seinfo);
synchronized (mInstallLock) {
    try {
      mInstaller.createAppData(volumeUuid,packageName,userId,flags,appId,app.seinfo,app.targetSdkVersion);
    }
 catch (    InstallerException e) {
      if (app.isSystemApp()) {
        logCriticalInfo(Log.ERROR,"Failed to create app data for " + packageName + ", but trying to recover: "+ e);
        destroyAppDataLI(volumeUuid,packageName,userId,flags);
        try {
          mInstaller.createAppData(volumeUuid,packageName,userId,flags,appId,app.seinfo,app.targetSdkVersion);
          logCriticalInfo(Log.DEBUG,"Recovery succeeded!");
        }
 catch (        InstallerException e2) {
          logCriticalInfo(Log.DEBUG,"Recovery failed!");
        }
      }
 else {
        Slog.e(TAG,"Failed to create app data for " + packageName + ": "+ e);
      }
    }
    if (restoreconNeeded) {
      restoreconAppDataLI(volumeUuid,packageName,userId,flags,appId,app.seinfo);
    }
    if ((flags & Installer.FLAG_CE_STORAGE) != 0) {
      if (app.primaryCpuAbi != null && !VMRuntime.is64BitAbi(app.primaryCpuAbi)) {
        final String nativeLibPath=app.nativeLibraryDir;
        try {
          mInstaller.linkNativeLibraryDirectory(volumeUuid,packageName,nativeLibPath,userId);
        }
 catch (        InstallerException e) {
          Slog.e(TAG,"Failed to link native for " + packageName + ": "+ e);
        }
      }
    }
  }
}
