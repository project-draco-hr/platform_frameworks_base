{
  enforceSystemOrRoot("Only the system can request dexopt be performed");
  final HashSet<PackageParser.Package> pkgs;
synchronized (mPackages) {
    pkgs=mDeferredDexOpt;
    mDeferredDexOpt=null;
  }
  if (pkgs != null) {
    ArrayList<PackageParser.Package> sortedPkgs=new ArrayList<PackageParser.Package>();
    Intent intent=new Intent(Intent.ACTION_PRE_BOOT_COMPLETED);
    HashSet<String> pkgNames=getPackageNamesForIntent(intent);
    for (Iterator<PackageParser.Package> it=pkgs.iterator(); it.hasNext(); ) {
      PackageParser.Package pkg=it.next();
      if (pkgNames.contains(pkg.packageName)) {
        sortedPkgs.add(pkg);
        it.remove();
      }
    }
    for (Iterator<PackageParser.Package> it=pkgs.iterator(); it.hasNext(); ) {
      PackageParser.Package pkg=it.next();
      if (isSystemApp(pkg)) {
        sortedPkgs.add(pkg);
        it.remove();
      }
    }
    intent=new Intent(Intent.ACTION_BOOT_COMPLETED);
    pkgNames=getPackageNamesForIntent(intent);
    for (Iterator<PackageParser.Package> it=pkgs.iterator(); it.hasNext(); ) {
      PackageParser.Package pkg=it.next();
      if (pkgNames.contains(pkg.packageName)) {
        sortedPkgs.add(pkg);
        it.remove();
      }
    }
    filterRecentlyUsedApps(pkgs);
    for (    PackageParser.Package pkg : pkgs) {
      sortedPkgs.add(pkg);
    }
    int i=0;
    int total=sortedPkgs.size();
    for (    PackageParser.Package pkg : sortedPkgs) {
      performBootDexOpt(pkg,++i,total);
    }
  }
}
