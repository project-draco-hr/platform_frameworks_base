{
  int pFlags=args.flags;
  String installerPackageName=args.installerPackageName;
  File tmpPackageFile=new File(args.getCodePath());
  boolean forwardLocked=((pFlags & PackageManager.INSTALL_FORWARD_LOCK) != 0);
  boolean onSd=((pFlags & PackageManager.INSTALL_EXTERNAL) != 0);
  boolean replace=false;
  int scanMode=(onSd ? 0 : SCAN_MONITOR) | SCAN_FORCE_DEX | SCAN_UPDATE_SIGNATURE| (newInstall ? SCAN_NEW_INSTALL : 0);
  res.returnCode=PackageManager.INSTALL_SUCCEEDED;
  if (DEBUG_INSTALL)   Slog.d(TAG,"installPackageLI: path=" + tmpPackageFile);
  int parseFlags=mDefParseFlags | PackageParser.PARSE_CHATTY | (forwardLocked ? PackageParser.PARSE_FORWARD_LOCK : 0)| (onSd ? PackageParser.PARSE_ON_SDCARD : 0);
  PackageParser pp=new PackageParser();
  pp.setSeparateProcesses(mSeparateProcesses);
  pp.setDisplayMetrics(mMetrics);
  final PackageParser.Package pkg;
  try {
    pkg=pp.parsePackage(tmpPackageFile,parseFlags);
  }
 catch (  PackageParserException e) {
    res.setError("Failed parse during installPackageLI",e);
    return;
  }
  pkg.cpuAbiOverride=args.abiOverride;
  String pkgName=res.name=pkg.packageName;
  if ((pkg.applicationInfo.flags & ApplicationInfo.FLAG_TEST_ONLY) != 0) {
    if ((pFlags & PackageManager.INSTALL_ALLOW_TEST) == 0) {
      res.setError(INSTALL_FAILED_TEST_ONLY,"installPackageLI");
      return;
    }
  }
  try {
    pp.collectCertificates(pkg,parseFlags);
    pp.collectManifestDigest(pkg);
  }
 catch (  PackageParserException e) {
    res.setError("Failed collect during installPackageLI",e);
    return;
  }
  if (args.manifestDigest != null) {
    if (DEBUG_INSTALL) {
      final String parsedManifest=pkg.manifestDigest == null ? "null" : pkg.manifestDigest.toString();
      Slog.d(TAG,"Comparing manifests: " + args.manifestDigest.toString() + " vs. "+ parsedManifest);
    }
    if (!args.manifestDigest.equals(pkg.manifestDigest)) {
      res.setError(INSTALL_FAILED_PACKAGE_CHANGED,"Manifest digest changed");
      return;
    }
  }
 else   if (DEBUG_INSTALL) {
    final String parsedManifest=pkg.manifestDigest == null ? "null" : pkg.manifestDigest.toString();
    Slog.d(TAG,"manifestDigest was not present, but parser got: " + parsedManifest);
  }
  pp=null;
  String oldCodePath=null;
  boolean systemApp=false;
synchronized (mPackages) {
    int N=pkg.permissions.size();
    for (int i=N - 1; i >= 0; i--) {
      PackageParser.Permission perm=pkg.permissions.get(i);
      BasePermission bp=mSettings.mPermissions.get(perm.info.name);
      if (bp != null) {
        if (compareSignatures(bp.packageSetting.signatures.mSignatures,pkg.mSignatures) != PackageManager.SIGNATURE_MATCH) {
          if (!bp.sourcePackage.equals("android")) {
            res.setError(INSTALL_FAILED_DUPLICATE_PERMISSION,"Package " + pkg.packageName + " attempting to redeclare permission "+ perm.info.name+ " already owned by "+ bp.sourcePackage);
            res.origPermission=perm.info.name;
            res.origPackage=bp.sourcePackage;
            return;
          }
 else {
            Slog.w(TAG,"Package " + pkg.packageName + " attempting to redeclare system permission "+ perm.info.name+ "; ignoring new declaration");
            pkg.permissions.remove(i);
          }
        }
      }
    }
    if ((pFlags & PackageManager.INSTALL_REPLACE_EXISTING) != 0) {
      String oldName=mSettings.mRenamedPackages.get(pkgName);
      if (pkg.mOriginalPackages != null && pkg.mOriginalPackages.contains(oldName) && mPackages.containsKey(oldName)) {
        pkg.setPackageName(oldName);
        pkgName=pkg.packageName;
        replace=true;
        if (DEBUG_INSTALL)         Slog.d(TAG,"Replacing existing renamed package: oldName=" + oldName + " pkgName="+ pkgName);
      }
 else       if (mPackages.containsKey(pkgName)) {
        replace=true;
        if (DEBUG_INSTALL)         Slog.d(TAG,"Replace existing pacakge: " + pkgName);
      }
    }
    PackageSetting ps=mSettings.mPackages.get(pkgName);
    if (ps != null) {
      if (DEBUG_INSTALL)       Slog.d(TAG,"Existing package: " + ps);
      oldCodePath=mSettings.mPackages.get(pkgName).codePathString;
      if (ps.pkg != null && ps.pkg.applicationInfo != null) {
        systemApp=(ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0;
      }
      res.origUsers=ps.queryInstalledUsers(sUserManager.getUserIds(),true);
    }
  }
  if (systemApp && onSd) {
    res.setError(INSTALL_FAILED_INVALID_INSTALL_LOCATION,"Cannot install updates to system apps on sdcard");
    return;
  }
  if (!args.doRename(res.returnCode,pkg,oldCodePath)) {
    res.setError(INSTALL_FAILED_INSUFFICIENT_STORAGE,"Failed rename");
    return;
  }
  if (replace) {
    replacePackageLI(pkg,parseFlags,scanMode,args.user,installerPackageName,res);
  }
 else {
    installNewPackageLI(pkg,parseFlags,scanMode | SCAN_DELETE_DATA_ON_FAILURES,args.user,installerPackageName,res);
  }
synchronized (mPackages) {
    final PackageSetting ps=mSettings.mPackages.get(pkgName);
    if (ps != null) {
      res.newUsers=ps.queryInstalledUsers(sUserManager.getUserIds(),true);
    }
  }
}
