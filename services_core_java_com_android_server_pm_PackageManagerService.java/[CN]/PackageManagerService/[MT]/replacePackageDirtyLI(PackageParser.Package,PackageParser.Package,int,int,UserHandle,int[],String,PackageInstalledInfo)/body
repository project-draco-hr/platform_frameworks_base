{
  res.removedInfo=new PackageRemovedInfo();
  res.removedInfo.uid=oldPackage.applicationInfo.uid;
  res.removedInfo.removedPackage=oldPackage.packageName;
  res.removedInfo.isUpdate=true;
  final int childCount=(oldPackage.childPackages != null) ? oldPackage.childPackages.size() : 0;
  for (int i=0; i < childCount; i++) {
    boolean childPackageUpdated=false;
    PackageParser.Package childPkg=oldPackage.childPackages.get(i);
    if (res.addedChildPackages != null) {
      PackageInstalledInfo childRes=res.addedChildPackages.get(childPkg.packageName);
      if (childRes != null) {
        childRes.removedInfo.uid=childPkg.applicationInfo.uid;
        childRes.removedInfo.removedPackage=childPkg.packageName;
        childRes.removedInfo.isUpdate=true;
        childPackageUpdated=true;
      }
    }
    if (!childPackageUpdated) {
      PackageRemovedInfo childRemovedRes=new PackageRemovedInfo();
      childRemovedRes.removedPackage=childPkg.packageName;
      childRemovedRes.isUpdate=false;
      childRemovedRes.dataRemoved=true;
synchronized (mPackages) {
        PackageSetting childPs=mSettings.peekPackageLPr(childPkg.packageName);
        if (childPs != null) {
          childRemovedRes.origUsers=childPs.queryInstalledUsers(allUsers,true);
        }
      }
      if (res.removedInfo.removedChildPackages == null) {
        res.removedInfo.removedChildPackages=new ArrayMap<>();
      }
      res.removedInfo.removedChildPackages.put(childPkg.packageName,childRemovedRes);
    }
  }
  boolean sysPkg=(isSystemApp(oldPackage));
  if (sysPkg) {
    replaceSystemPackageLI(oldPackage,pkg,parseFlags,scanFlags,user,allUsers,installerPackageName,res);
  }
 else {
    replaceNonSystemPackageLI(oldPackage,pkg,parseFlags,scanFlags,user,allUsers,installerPackageName,res);
  }
}
