{
  if (!sUserManager.exists(userId))   return Collections.emptyList();
  enforceCrossUserPermission(Binder.getCallingUid(),userId,false,"query intent activities");
  ComponentName comp=intent.getComponent();
  if (comp == null) {
    if (intent.getSelector() != null) {
      intent=intent.getSelector();
      comp=intent.getComponent();
    }
  }
  if (comp != null) {
    final List<ResolveInfo> list=new ArrayList<ResolveInfo>(1);
    final ActivityInfo ai=getActivityInfo(comp,flags,userId);
    if (ai != null) {
      final ResolveInfo ri=new ResolveInfo();
      ri.activityInfo=ai;
      list.add(ri);
    }
    return list;
  }
synchronized (mPackages) {
    final String pkgName=intent.getPackage();
    if (pkgName == null) {
      List<ResolveInfo> result=mActivities.queryIntent(intent,resolvedType,flags,userId);
      List<ForwardingIntentFilter> fifs=getMatchingForwardingIntentFilters(intent,resolvedType,userId);
      if (fifs != null) {
        ForwardingIntentFilter forwardingIntentFilterWithResult=null;
        HashSet<Integer> alreadyTriedUserIds=new HashSet<Integer>();
        for (        ForwardingIntentFilter fif : fifs) {
          int userIdDest=fif.getUserIdDest();
          if (!alreadyTriedUserIds.contains(userIdDest)) {
            List<ResolveInfo> resultUser=mActivities.queryIntent(intent,resolvedType,flags,userIdDest);
            if (resultUser != null) {
              forwardingIntentFilterWithResult=fif;
              break;
            }
            alreadyTriedUserIds.add(userIdDest);
          }
        }
        if (forwardingIntentFilterWithResult != null) {
          ResolveInfo forwardingResolveInfo=createForwardingResolveInfo(forwardingIntentFilterWithResult,userId);
          result.add(forwardingResolveInfo);
        }
      }
      return result;
    }
    final PackageParser.Package pkg=mPackages.get(pkgName);
    if (pkg != null) {
      return mActivities.queryIntentForPackage(intent,resolvedType,flags,pkg.activities,userId);
    }
    return new ArrayList<ResolveInfo>();
  }
}
