{
  if (!sUserManager.exists(userId)) {
    Log.e(TAG,"No such user:" + userId);
    return;
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.GRANT_REVOKE_PERMISSIONS,"grantRuntimePermission");
  enforceCrossUserPermission(Binder.getCallingUid(),userId,true,false,"grantRuntimePermission");
  final int uid;
  final SettingBase sb;
synchronized (mPackages) {
    final PackageParser.Package pkg=mPackages.get(packageName);
    if (pkg == null) {
      throw new IllegalArgumentException("Unknown package: " + packageName);
    }
    final BasePermission bp=mSettings.mPermissions.get(name);
    if (bp == null) {
      throw new IllegalArgumentException("Unknown permission: " + name);
    }
    enforceDeclaredAsUsedAndRuntimePermission(pkg,bp);
    uid=pkg.applicationInfo.uid;
    sb=(SettingBase)pkg.mExtras;
    if (sb == null) {
      throw new IllegalArgumentException("Unknown package: " + packageName);
    }
    final PermissionsState permissionsState=sb.getPermissionsState();
    final int flags=permissionsState.getPermissionFlags(name,userId);
    if ((flags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
      throw new SecurityException("Cannot grant system fixed permission: " + name + " for package: "+ packageName);
    }
    final int result=permissionsState.grantRuntimePermission(bp,userId);
switch (result) {
case PermissionsState.PERMISSION_OPERATION_FAILURE:
{
        return;
      }
case PermissionsState.PERMISSION_OPERATION_SUCCESS_GIDS_CHANGED:
{
      mHandler.post(new Runnable(){
        @Override public void run(){
          killSettingPackagesForUser(sb,userId,KILL_APP_REASON_GIDS_CHANGED);
        }
      }
);
    }
  break;
}
mOnPermissionChangeListeners.onPermissionsChanged(uid);
mSettings.writeRuntimePermissionsForUserLPr(userId,false);
}
if (READ_EXTERNAL_STORAGE.equals(name) || WRITE_EXTERNAL_STORAGE.equals(name)) {
final long token=Binder.clearCallingIdentity();
try {
final StorageManager storage=mContext.getSystemService(StorageManager.class);
storage.remountUid(uid);
}
  finally {
Binder.restoreCallingIdentity(token);
}
}
}
