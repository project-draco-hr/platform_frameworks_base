{
  if (isSystemApp(pkg)) {
    PackageSetting ps=mSettings.mPackages.get(pkg.applicationInfo.packageName);
    setInternalAppNativeLibraryPath(pkg,ps);
  }
  if (pkg.usesLibraries != null || pkg.usesOptionalLibraries != null) {
    if (mTmpSharedLibraries == null || mTmpSharedLibraries.length < mSharedLibraries.size()) {
      mTmpSharedLibraries=new String[mSharedLibraries.size()];
    }
    int num=0;
    int N=pkg.usesLibraries != null ? pkg.usesLibraries.size() : 0;
    for (int i=0; i < N; i++) {
      final SharedLibraryEntry file=mSharedLibraries.get(pkg.usesLibraries.get(i));
      if (file == null) {
        Slog.e(TAG,"Package " + pkg.packageName + " requires unavailable shared library "+ pkg.usesLibraries.get(i)+ "; failing!");
        mLastScanError=PackageManager.INSTALL_FAILED_MISSING_SHARED_LIBRARY;
        return false;
      }
      num=addSharedLibraryLPw(file,num,changingLib);
    }
    N=pkg.usesOptionalLibraries != null ? pkg.usesOptionalLibraries.size() : 0;
    for (int i=0; i < N; i++) {
      final SharedLibraryEntry file=mSharedLibraries.get(pkg.usesOptionalLibraries.get(i));
      if (file == null) {
        Slog.w(TAG,"Package " + pkg.packageName + " desires unavailable shared library "+ pkg.usesOptionalLibraries.get(i)+ "; ignoring!");
      }
 else {
        num=addSharedLibraryLPw(file,num,changingLib);
      }
    }
    if (num > 0) {
      pkg.usesLibraryFiles=new String[num];
      System.arraycopy(mTmpSharedLibraries,0,pkg.usesLibraryFiles,0,num);
    }
 else {
      pkg.usesLibraryFiles=null;
    }
  }
  return true;
}
