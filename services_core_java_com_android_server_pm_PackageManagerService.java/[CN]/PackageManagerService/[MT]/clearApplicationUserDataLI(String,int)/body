{
  if (packageName == null) {
    Slog.w(TAG,"Attempt to delete null packageName.");
    return false;
  }
  PackageParser.Package pkg;
synchronized (mPackages) {
    pkg=mPackages.get(packageName);
    if (pkg == null) {
      final PackageSetting ps=mSettings.mPackages.get(packageName);
      if (ps != null) {
        pkg=ps.pkg;
      }
    }
    if (pkg == null) {
      Slog.w(TAG,"Package named '" + packageName + "' doesn't exist.");
      return false;
    }
    PackageSetting ps=(PackageSetting)pkg.mExtras;
    PermissionsState permissionsState=ps.getPermissionsState();
    revokeRuntimePermissionsAndClearUserSetFlagsLocked(permissionsState,userId);
  }
  int retCode=mInstaller.clearUserData(pkg.volumeUuid,packageName,userId);
  if (retCode < 0) {
    Slog.w(TAG,"Couldn't remove cache files for package: " + packageName);
    return false;
  }
  final int appId=pkg.applicationInfo.uid;
  removeKeystoreDataIfNeeded(userId,appId);
  if (pkg.applicationInfo.primaryCpuAbi != null && !VMRuntime.is64BitAbi(pkg.applicationInfo.primaryCpuAbi)) {
    final String nativeLibPath=pkg.applicationInfo.nativeLibraryDir;
    if (mInstaller.linkNativeLibraryDirectory(pkg.volumeUuid,pkg.packageName,nativeLibPath,userId) < 0) {
      Slog.w(TAG,"Failed linking native library dir");
      return false;
    }
  }
  return true;
}
