{
  if (DEBUG_DOMAIN_VERIFICATION)   Slog.d(TAG,"Start priming domain verifications");
  boolean updated=false;
  ArraySet<String> allHostsSet=new ArraySet<>();
  for (  PackageParser.Package pkg : mPackages.values()) {
    final String packageName=pkg.packageName;
    if (!hasDomainURLs(pkg)) {
      if (DEBUG_DOMAIN_VERIFICATION)       Slog.d(TAG,"No priming domain verifications for " + "package with no domain URLs: " + packageName);
      continue;
    }
    if (!pkg.isSystemApp()) {
      if (DEBUG_DOMAIN_VERIFICATION)       Slog.d(TAG,"No priming domain verifications for a non system package : " + packageName);
      continue;
    }
    for (    PackageParser.Activity a : pkg.activities) {
      for (      ActivityIntentInfo filter : a.intents) {
        if (hasValidDomains(filter)) {
          allHostsSet.addAll(filter.getHostsList());
        }
      }
    }
    if (allHostsSet.size() == 0) {
      allHostsSet.add("*");
    }
    ArrayList<String> allHostsList=new ArrayList<>(allHostsSet);
    IntentFilterVerificationInfo ivi=mSettings.createIntentFilterVerificationIfNeededLPw(packageName,allHostsList);
    if (ivi != null) {
      if (DEBUG_DOMAIN_VERIFICATION)       Slog.d(TAG,"Priming domain verifications for package: " + packageName + " with hosts:"+ ivi.getDomainsString());
      ivi.setStatus(INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ALWAYS);
      updated=true;
    }
 else {
      if (DEBUG_DOMAIN_VERIFICATION)       Slog.d(TAG,"No priming domain verifications for package: " + packageName);
    }
    allHostsSet.clear();
  }
  if (updated) {
    if (DEBUG_DOMAIN_VERIFICATION)     Slog.d(TAG,"Will need to write primed domain verifications");
  }
  if (DEBUG_DOMAIN_VERIFICATION)   Slog.d(TAG,"End priming domain verifications");
}
