{
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.DELETE_PACKAGES,null);
  Preconditions.checkNotNull(packageName);
  Preconditions.checkNotNull(observer);
  final int uid=Binder.getCallingUid();
  final boolean deleteAllUsers=(flags & PackageManager.DELETE_ALL_USERS) != 0;
  final int[] users=deleteAllUsers ? sUserManager.getUserIds() : new int[]{userId};
  if (UserHandle.getUserId(uid) != userId || (deleteAllUsers && users.length > 1)) {
    mContext.enforceCallingOrSelfPermission(android.Manifest.permission.INTERACT_ACROSS_USERS_FULL,"deletePackage for user " + userId);
  }
  if (isUserRestricted(userId,UserManager.DISALLOW_UNINSTALL_APPS)) {
    try {
      observer.onPackageDeleted(packageName,PackageManager.DELETE_FAILED_USER_RESTRICTED,null);
    }
 catch (    RemoteException re) {
    }
    return;
  }
  for (  int currentUserId : users) {
    if (getBlockUninstallForUser(packageName,currentUserId)) {
      try {
        observer.onPackageDeleted(packageName,PackageManager.DELETE_FAILED_OWNER_BLOCKED,null);
      }
 catch (      RemoteException re) {
      }
      return;
    }
  }
  if (DEBUG_REMOVE) {
    Slog.d(TAG,"deletePackageAsUser: pkg=" + packageName + " user="+ userId);
  }
  mHandler.post(new Runnable(){
    public void run(){
      mHandler.removeCallbacks(this);
      final int returnCode=deletePackageX(packageName,userId,flags);
      try {
        observer.onPackageDeleted(packageName,returnCode,null);
      }
 catch (      RemoteException e) {
        Log.i(TAG,"Observer no longer exists.");
      }
    }
  }
);
}
