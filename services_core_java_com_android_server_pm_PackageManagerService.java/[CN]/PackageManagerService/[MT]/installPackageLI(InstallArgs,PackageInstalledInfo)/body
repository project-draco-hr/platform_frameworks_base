{
  final int installFlags=args.installFlags;
  final String installerPackageName=args.installerPackageName;
  final String volumeUuid=args.volumeUuid;
  final File tmpPackageFile=new File(args.getCodePath());
  final boolean forwardLocked=((installFlags & PackageManager.INSTALL_FORWARD_LOCK) != 0);
  final boolean onExternal=(((installFlags & PackageManager.INSTALL_EXTERNAL) != 0) || (args.volumeUuid != null));
  boolean replace=false;
  int scanFlags=SCAN_NEW_INSTALL | SCAN_FORCE_DEX | SCAN_UPDATE_SIGNATURE;
  res.returnCode=PackageManager.INSTALL_SUCCEEDED;
  if (DEBUG_INSTALL)   Slog.d(TAG,"installPackageLI: path=" + tmpPackageFile);
  final int parseFlags=mDefParseFlags | PackageParser.PARSE_CHATTY | (forwardLocked ? PackageParser.PARSE_FORWARD_LOCK : 0)| (onExternal ? PackageParser.PARSE_EXTERNAL_STORAGE : 0);
  PackageParser pp=new PackageParser();
  pp.setSeparateProcesses(mSeparateProcesses);
  pp.setDisplayMetrics(mMetrics);
  final PackageParser.Package pkg;
  try {
    pkg=pp.parsePackage(tmpPackageFile,parseFlags);
  }
 catch (  PackageParserException e) {
    res.setError("Failed parse during installPackageLI",e);
    return;
  }
  pkg.cpuAbiOverride=args.abiOverride;
  String pkgName=res.name=pkg.packageName;
  if ((pkg.applicationInfo.flags & ApplicationInfo.FLAG_TEST_ONLY) != 0) {
    if ((installFlags & PackageManager.INSTALL_ALLOW_TEST) == 0) {
      res.setError(INSTALL_FAILED_TEST_ONLY,"installPackageLI");
      return;
    }
  }
  try {
    pp.collectCertificates(pkg,parseFlags);
    pp.collectManifestDigest(pkg);
  }
 catch (  PackageParserException e) {
    res.setError("Failed collect during installPackageLI",e);
    return;
  }
  if (args.manifestDigest != null) {
    if (DEBUG_INSTALL) {
      final String parsedManifest=pkg.manifestDigest == null ? "null" : pkg.manifestDigest.toString();
      Slog.d(TAG,"Comparing manifests: " + args.manifestDigest.toString() + " vs. "+ parsedManifest);
    }
    if (!args.manifestDigest.equals(pkg.manifestDigest)) {
      res.setError(INSTALL_FAILED_PACKAGE_CHANGED,"Manifest digest changed");
      return;
    }
  }
 else   if (DEBUG_INSTALL) {
    final String parsedManifest=pkg.manifestDigest == null ? "null" : pkg.manifestDigest.toString();
    Slog.d(TAG,"manifestDigest was not present, but parser got: " + parsedManifest);
  }
  pp=null;
  String oldCodePath=null;
  boolean systemApp=false;
synchronized (mPackages) {
    if ((installFlags & PackageManager.INSTALL_REPLACE_EXISTING) != 0) {
      String oldName=mSettings.mRenamedPackages.get(pkgName);
      if (pkg.mOriginalPackages != null && pkg.mOriginalPackages.contains(oldName) && mPackages.containsKey(oldName)) {
        pkg.setPackageName(oldName);
        pkgName=pkg.packageName;
        replace=true;
        if (DEBUG_INSTALL)         Slog.d(TAG,"Replacing existing renamed package: oldName=" + oldName + " pkgName="+ pkgName);
      }
 else       if (mPackages.containsKey(pkgName)) {
        replace=true;
        if (DEBUG_INSTALL)         Slog.d(TAG,"Replace existing pacakge: " + pkgName);
      }
      if (replace) {
        PackageParser.Package oldPackage=mPackages.get(pkgName);
        final int oldTargetSdk=oldPackage.applicationInfo.targetSdkVersion;
        final int newTargetSdk=pkg.applicationInfo.targetSdkVersion;
        if (oldTargetSdk > Build.VERSION_CODES.LOLLIPOP_MR1 && newTargetSdk <= Build.VERSION_CODES.LOLLIPOP_MR1) {
          res.setError(PackageManager.INSTALL_FAILED_PERMISSION_MODEL_DOWNGRADE,"Package " + pkg.packageName + " new target SDK "+ newTargetSdk+ " doesn't support runtime permissions but the old"+ " target SDK "+ oldTargetSdk+ " does.");
          return;
        }
      }
    }
    PackageSetting ps=mSettings.mPackages.get(pkgName);
    if (ps != null) {
      if (DEBUG_INSTALL)       Slog.d(TAG,"Existing package: " + ps);
      if (!ps.keySetData.isUsingUpgradeKeySets() || ps.sharedUser != null) {
        try {
          verifySignaturesLP(ps,pkg);
        }
 catch (        PackageManagerException e) {
          res.setError(e.error,e.getMessage());
          return;
        }
      }
 else {
        if (!checkUpgradeKeySetLP(ps,pkg)) {
          res.setError(INSTALL_FAILED_UPDATE_INCOMPATIBLE,"Package " + pkg.packageName + " upgrade keys do not match the "+ "previously installed version");
          return;
        }
      }
      oldCodePath=mSettings.mPackages.get(pkgName).codePathString;
      if (ps.pkg != null && ps.pkg.applicationInfo != null) {
        systemApp=(ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0;
      }
      res.origUsers=ps.queryInstalledUsers(sUserManager.getUserIds(),true);
    }
    int N=pkg.permissions.size();
    for (int i=N - 1; i >= 0; i--) {
      PackageParser.Permission perm=pkg.permissions.get(i);
      BasePermission bp=mSettings.mPermissions.get(perm.info.name);
      if (bp != null) {
        final boolean sigsOk;
        if (!bp.sourcePackage.equals(pkg.packageName) || !(bp.packageSetting instanceof PackageSetting) || !bp.packageSetting.keySetData.isUsingUpgradeKeySets()|| ((PackageSetting)bp.packageSetting).sharedUser != null) {
          sigsOk=compareSignatures(bp.packageSetting.signatures.mSignatures,pkg.mSignatures) == PackageManager.SIGNATURE_MATCH;
        }
 else {
          sigsOk=checkUpgradeKeySetLP((PackageSetting)bp.packageSetting,pkg);
        }
        if (!sigsOk) {
          if (!bp.sourcePackage.equals("android")) {
            res.setError(INSTALL_FAILED_DUPLICATE_PERMISSION,"Package " + pkg.packageName + " attempting to redeclare permission "+ perm.info.name+ " already owned by "+ bp.sourcePackage);
            res.origPermission=perm.info.name;
            res.origPackage=bp.sourcePackage;
            return;
          }
 else {
            Slog.w(TAG,"Package " + pkg.packageName + " attempting to redeclare system permission "+ perm.info.name+ "; ignoring new declaration");
            pkg.permissions.remove(i);
          }
        }
      }
    }
  }
  if (systemApp && onExternal) {
    res.setError(INSTALL_FAILED_INVALID_INSTALL_LOCATION,"Cannot install updates to system apps on sdcard");
    return;
  }
  if (args.move != null) {
    scanFlags|=SCAN_NO_DEX;
  }
 else   if (!forwardLocked && !pkg.applicationInfo.isExternalAsec()) {
    scanFlags|=SCAN_NO_DEX;
    try {
      deriveNonSystemPackageAbi(pkg,new File(pkg.codePath),args.abiOverride,true);
    }
 catch (    PackageManagerException pme) {
      Slog.e(TAG,"Error deriving application ABI",pme);
      res.setError(INSTALL_FAILED_INTERNAL_ERROR,"Error deriving application ABI");
      return;
    }
    int result=mPackageDexOptimizer.performDexOpt(pkg,null,true,false,false);
    if (result == PackageDexOptimizer.DEX_OPT_FAILED) {
      res.setError(INSTALL_FAILED_DEXOPT,"Dexopt failed for " + pkg.codePath);
      return;
    }
  }
  if (!args.doRename(res.returnCode,pkg,oldCodePath)) {
    res.setError(INSTALL_FAILED_INSUFFICIENT_STORAGE,"Failed rename");
    return;
  }
  startIntentFilterVerifications(args.user.getIdentifier(),pkg);
  if (replace) {
    replacePackageLI(pkg,parseFlags,scanFlags,args.user,installerPackageName,volumeUuid,res);
  }
 else {
    installNewPackageLI(pkg,parseFlags,scanFlags | SCAN_DELETE_DATA_ON_FAILURES,args.user,installerPackageName,volumeUuid,res);
  }
synchronized (mPackages) {
    final PackageSetting ps=mSettings.mPackages.get(pkgName);
    if (ps != null) {
      res.newUsers=ps.queryInstalledUsers(sUserManager.getUserIds(),true);
    }
  }
}
