{
  if (!(newState == COMPONENT_ENABLED_STATE_DEFAULT || newState == COMPONENT_ENABLED_STATE_ENABLED || newState == COMPONENT_ENABLED_STATE_DISABLED || newState == COMPONENT_ENABLED_STATE_DISABLED_USER || newState == COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED)) {
    throw new IllegalArgumentException("Invalid new component state: " + newState);
  }
  PackageSetting pkgSetting;
  final int uid=Binder.getCallingUid();
  final int permission=mContext.checkCallingOrSelfPermission(android.Manifest.permission.CHANGE_COMPONENT_ENABLED_STATE);
  enforceCrossUserPermission(uid,userId,false,true,"set enabled");
  final boolean allowedByPermission=(permission == PackageManager.PERMISSION_GRANTED);
  boolean sendNow=false;
  boolean isApp=(className == null);
  String componentName=isApp ? packageName : className;
  int packageUid=-1;
  ArrayList<String> components;
synchronized (mPackages) {
    pkgSetting=mSettings.mPackages.get(packageName);
    if (pkgSetting == null) {
      if (className == null) {
        throw new IllegalArgumentException("Unknown package: " + packageName);
      }
      throw new IllegalArgumentException("Unknown component: " + packageName + "/"+ className);
    }
    if (!allowedByPermission && !UserHandle.isSameApp(uid,pkgSetting.appId)) {
      throw new SecurityException("Permission Denial: attempt to change component state from pid=" + Binder.getCallingPid() + ", uid="+ uid+ ", package uid="+ pkgSetting.appId);
    }
    if (className == null) {
      if (pkgSetting.getEnabled(userId) == newState) {
        return;
      }
      if (newState == PackageManager.COMPONENT_ENABLED_STATE_DEFAULT || newState == PackageManager.COMPONENT_ENABLED_STATE_ENABLED) {
        callingPackage=null;
      }
      pkgSetting.setEnabled(newState,userId,callingPackage);
    }
 else {
      PackageParser.Package pkg=pkgSetting.pkg;
      if (pkg == null || !pkg.hasComponentClassName(className)) {
        if (pkg.applicationInfo.targetSdkVersion >= Build.VERSION_CODES.JELLY_BEAN) {
          throw new IllegalArgumentException("Component class " + className + " does not exist in "+ packageName);
        }
 else {
          Slog.w(TAG,"Failed setComponentEnabledSetting: component class " + className + " does not exist in "+ packageName);
        }
      }
switch (newState) {
case COMPONENT_ENABLED_STATE_ENABLED:
        if (!pkgSetting.enableComponentLPw(className,userId)) {
          return;
        }
      break;
case COMPONENT_ENABLED_STATE_DISABLED:
    if (!pkgSetting.disableComponentLPw(className,userId)) {
      return;
    }
  break;
case COMPONENT_ENABLED_STATE_DEFAULT:
if (!pkgSetting.restoreComponentLPw(className,userId)) {
  return;
}
break;
default :
Slog.e(TAG,"Invalid new component state: " + newState);
return;
}
}
scheduleWritePackageRestrictionsLocked(userId);
components=mPendingBroadcasts.get(userId,packageName);
final boolean newPackage=components == null;
if (newPackage) {
components=new ArrayList<String>();
}
if (!components.contains(componentName)) {
components.add(componentName);
}
if ((flags & PackageManager.DONT_KILL_APP) == 0) {
sendNow=true;
mPendingBroadcasts.remove(userId,packageName);
}
 else {
if (newPackage) {
mPendingBroadcasts.put(userId,packageName,components);
}
if (!mHandler.hasMessages(SEND_PENDING_BROADCAST)) {
mHandler.sendEmptyMessageDelayed(SEND_PENDING_BROADCAST,BROADCAST_DELAY);
}
}
}
long callingId=Binder.clearCallingIdentity();
try {
if (sendNow) {
packageUid=UserHandle.getUid(userId,pkgSetting.appId);
sendPackageChangedBroadcast(packageName,(flags & PackageManager.DONT_KILL_APP) != 0,components,packageUid);
}
}
  finally {
Binder.restoreCallingIdentity(callingId);
}
}
