{
  String pkgName=newPackage.packageName;
synchronized (mPackages) {
    mSettings.setInstallStatus(pkgName,PackageSettingBase.PKG_INSTALL_INCOMPLETE);
    mSettings.writeLPr();
  }
  if ((res.returnCode=moveDexFilesLI(oldPackage,newPackage)) != PackageManager.INSTALL_SUCCEEDED) {
    return;
  }
  if (DEBUG_INSTALL)   Slog.d(TAG,"New package installed in " + newPackage.codePath);
synchronized (mPackages) {
    updatePermissionsLPw(newPackage.packageName,newPackage,UPDATE_PERMISSIONS_REPLACE_PKG | (newPackage.permissions.size() > 0 ? UPDATE_PERMISSIONS_ALL : 0));
    if (isSystemApp(newPackage)) {
      if (DEBUG_INSTALL) {
        Slog.d(TAG,"Implicitly enabling system package on upgrade: " + pkgName);
      }
      PackageSetting ps=mSettings.mPackages.get(pkgName);
      if (ps != null) {
        if (res.origUsers != null) {
          for (          int userHandle : res.origUsers) {
            ps.setEnabled(COMPONENT_ENABLED_STATE_DEFAULT,userHandle,installerPackageName);
          }
        }
        if (allUsers != null && perUserInstalled != null) {
          for (int i=0; i < allUsers.length; i++) {
            if (DEBUG_INSTALL) {
              Slog.d(TAG,"    user " + allUsers[i] + " => "+ perUserInstalled[i]);
            }
            ps.setInstalled(perUserInstalled[i],allUsers[i]);
          }
        }
      }
    }
    res.name=pkgName;
    res.uid=newPackage.applicationInfo.uid;
    res.pkg=newPackage;
    mSettings.setInstallStatus(pkgName,PackageSettingBase.PKG_INSTALL_COMPLETE);
    mSettings.setInstallerPackageName(pkgName,installerPackageName);
    res.returnCode=PackageManager.INSTALL_SUCCEEDED;
    mSettings.writeLPr();
  }
}
