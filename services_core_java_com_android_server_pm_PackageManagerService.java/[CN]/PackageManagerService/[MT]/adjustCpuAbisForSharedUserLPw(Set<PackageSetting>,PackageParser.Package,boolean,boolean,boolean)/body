{
  String requiredInstructionSet=null;
  if (scannedPackage != null && scannedPackage.applicationInfo.primaryCpuAbi != null) {
    requiredInstructionSet=VMRuntime.getInstructionSet(scannedPackage.applicationInfo.primaryCpuAbi);
  }
  PackageSetting requirer=null;
  for (  PackageSetting ps : packagesForUser) {
    if (scannedPackage == null || !scannedPackage.packageName.equals(ps.name)) {
      if (ps.primaryCpuAbiString == null) {
        continue;
      }
      final String instructionSet=VMRuntime.getInstructionSet(ps.primaryCpuAbiString);
      if (requiredInstructionSet != null && !instructionSet.equals(requiredInstructionSet)) {
        String errorMessage="Instruction set mismatch, " + ((requirer == null) ? "[caller]" : requirer) + " requires "+ requiredInstructionSet+ " whereas "+ ps+ " requires "+ instructionSet;
        Slog.w(TAG,errorMessage);
      }
      if (requiredInstructionSet == null) {
        requiredInstructionSet=instructionSet;
        requirer=ps;
      }
    }
  }
  if (requiredInstructionSet != null) {
    String adjustedAbi;
    if (requirer != null) {
      adjustedAbi=requirer.primaryCpuAbiString;
      if (scannedPackage != null) {
        scannedPackage.applicationInfo.primaryCpuAbi=adjustedAbi;
      }
    }
 else {
      adjustedAbi=scannedPackage.applicationInfo.primaryCpuAbi;
    }
    for (    PackageSetting ps : packagesForUser) {
      if (scannedPackage == null || !scannedPackage.packageName.equals(ps.name)) {
        if (ps.primaryCpuAbiString != null) {
          continue;
        }
        ps.primaryCpuAbiString=adjustedAbi;
        if (ps.pkg != null && ps.pkg.applicationInfo != null) {
          ps.pkg.applicationInfo.primaryCpuAbi=adjustedAbi;
          Slog.i(TAG,"Adjusting ABI for : " + ps.name + " to "+ adjustedAbi);
          int result=mPackageDexOptimizer.performDexOpt(ps.pkg,null,forceDexOpt,deferDexOpt,true,bootComplete);
          if (result == PackageDexOptimizer.DEX_OPT_FAILED) {
            ps.primaryCpuAbiString=null;
            ps.pkg.applicationInfo.primaryCpuAbi=null;
            return;
          }
 else {
            mInstaller.rmdex(ps.codePathString,getDexCodeInstructionSet(getPreferredInstructionSet()));
          }
        }
      }
    }
  }
}
