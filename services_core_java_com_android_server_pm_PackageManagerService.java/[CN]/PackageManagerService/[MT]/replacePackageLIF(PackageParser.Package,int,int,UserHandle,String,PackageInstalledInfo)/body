{
  final boolean isEphemeral=(policyFlags & PackageParser.PARSE_IS_EPHEMERAL) != 0;
  final PackageParser.Package oldPackage;
  final String pkgName=pkg.packageName;
  final int[] allUsers;
  final int[] installedUsers;
synchronized (mPackages) {
    oldPackage=mPackages.get(pkgName);
    if (DEBUG_INSTALL)     Slog.d(TAG,"replacePackageLI: new=" + pkg + ", old="+ oldPackage);
    final boolean oldTargetsPreRelease=oldPackage.applicationInfo.targetSdkVersion == android.os.Build.VERSION_CODES.CUR_DEVELOPMENT;
    final boolean newTargetsPreRelease=pkg.applicationInfo.targetSdkVersion == android.os.Build.VERSION_CODES.CUR_DEVELOPMENT;
    if (oldTargetsPreRelease && !newTargetsPreRelease && ((policyFlags & PackageParser.PARSE_FORCE_SDK) == 0)) {
      Slog.w(TAG,"Can't install package targeting released sdk");
      res.setReturnCode(PackageManager.INSTALL_FAILED_UPDATE_INCOMPATIBLE);
      return;
    }
    final boolean oldIsEphemeral=oldPackage.applicationInfo.isEphemeralApp();
    if (isEphemeral && !oldIsEphemeral) {
      Slog.w(TAG,"Can't replace app with ephemeral: " + pkgName);
      res.setReturnCode(PackageManager.INSTALL_FAILED_EPHEMERAL_INVALID);
      return;
    }
    final PackageSetting ps=mSettings.mPackages.get(pkgName);
    if (shouldCheckUpgradeKeySetLP(ps,scanFlags)) {
      if (!checkUpgradeKeySetLP(ps,pkg)) {
        res.setError(INSTALL_FAILED_UPDATE_INCOMPATIBLE,"New package not signed by keys specified by upgrade-keysets: " + pkgName);
        return;
      }
    }
 else {
      if (compareSignatures(oldPackage.mSignatures,pkg.mSignatures) != PackageManager.SIGNATURE_MATCH) {
        res.setError(INSTALL_FAILED_UPDATE_INCOMPATIBLE,"New package has a different signature: " + pkgName);
        return;
      }
    }
    if (oldPackage.restrictUpdateHash != null && oldPackage.isSystemApp()) {
      byte[] digestBytes=null;
      try {
        final MessageDigest digest=MessageDigest.getInstance("SHA-512");
        updateDigest(digest,new File(pkg.baseCodePath));
        if (!ArrayUtils.isEmpty(pkg.splitCodePaths)) {
          for (          String path : pkg.splitCodePaths) {
            updateDigest(digest,new File(path));
          }
        }
        digestBytes=digest.digest();
      }
 catch (      NoSuchAlgorithmException|IOException e) {
        res.setError(INSTALL_FAILED_INVALID_APK,"Could not compute hash: " + pkgName);
        return;
      }
      if (!Arrays.equals(oldPackage.restrictUpdateHash,digestBytes)) {
        res.setError(INSTALL_FAILED_INVALID_APK,"New package fails restrict-update check: " + pkgName);
        return;
      }
      pkg.restrictUpdateHash=oldPackage.restrictUpdateHash;
    }
    String invalidPackageName=getParentOrChildPackageChangedSharedUser(oldPackage,pkg);
    if (invalidPackageName != null) {
      res.setError(INSTALL_FAILED_SHARED_USER_INCOMPATIBLE,"Package " + invalidPackageName + " tried to change user "+ oldPackage.mSharedUserId);
      return;
    }
    allUsers=sUserManager.getUserIds();
    installedUsers=ps.queryInstalledUsers(allUsers,true);
  }
  res.removedInfo=new PackageRemovedInfo();
  res.removedInfo.uid=oldPackage.applicationInfo.uid;
  res.removedInfo.removedPackage=oldPackage.packageName;
  res.removedInfo.isUpdate=true;
  res.removedInfo.origUsers=installedUsers;
  final int childCount=(oldPackage.childPackages != null) ? oldPackage.childPackages.size() : 0;
  for (int i=0; i < childCount; i++) {
    boolean childPackageUpdated=false;
    PackageParser.Package childPkg=oldPackage.childPackages.get(i);
    if (res.addedChildPackages != null) {
      PackageInstalledInfo childRes=res.addedChildPackages.get(childPkg.packageName);
      if (childRes != null) {
        childRes.removedInfo.uid=childPkg.applicationInfo.uid;
        childRes.removedInfo.removedPackage=childPkg.packageName;
        childRes.removedInfo.isUpdate=true;
        childPackageUpdated=true;
      }
    }
    if (!childPackageUpdated) {
      PackageRemovedInfo childRemovedRes=new PackageRemovedInfo();
      childRemovedRes.removedPackage=childPkg.packageName;
      childRemovedRes.isUpdate=false;
      childRemovedRes.dataRemoved=true;
synchronized (mPackages) {
        PackageSetting childPs=mSettings.peekPackageLPr(childPkg.packageName);
        if (childPs != null) {
          childRemovedRes.origUsers=childPs.queryInstalledUsers(allUsers,true);
        }
      }
      if (res.removedInfo.removedChildPackages == null) {
        res.removedInfo.removedChildPackages=new ArrayMap<>();
      }
      res.removedInfo.removedChildPackages.put(childPkg.packageName,childRemovedRes);
    }
  }
  boolean sysPkg=(isSystemApp(oldPackage));
  if (sysPkg) {
    final boolean privileged=(oldPackage.applicationInfo.privateFlags & ApplicationInfo.PRIVATE_FLAG_PRIVILEGED) != 0;
    final int systemPolicyFlags=policyFlags | PackageParser.PARSE_IS_SYSTEM | (privileged ? PackageParser.PARSE_IS_PRIVILEGED : 0);
    replaceSystemPackageLIF(oldPackage,pkg,systemPolicyFlags,scanFlags,user,allUsers,installerPackageName,res);
  }
 else {
    replaceNonSystemPackageLIF(oldPackage,pkg,policyFlags,scanFlags,user,allUsers,installerPackageName,res);
  }
}
