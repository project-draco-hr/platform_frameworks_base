{
  boolean dexopt=mLazyDexOpt || backgroundDexopt;
  boolean updateUsage=!backgroundDexopt;
  if (!dexopt && !updateUsage) {
    return false;
  }
  PackageParser.Package p;
  final String targetInstructionSet;
synchronized (mPackages) {
    p=mPackages.get(packageName);
    if (p == null) {
      return false;
    }
    if (updateUsage) {
      p.mLastPackageUsageTimeInMills=System.currentTimeMillis();
    }
    mPackageUsage.write(false);
    if (!dexopt) {
      return false;
    }
    targetInstructionSet=instructionSet != null ? instructionSet : getPrimaryInstructionSet(p.applicationInfo);
    if (p.mDexOptPerformed.contains(targetInstructionSet)) {
      return false;
    }
  }
synchronized (mInstallLock) {
    final String[] instructionSets=new String[]{targetInstructionSet};
    return performDexOptLI(p,instructionSets,false,false,true) == DEX_OPT_PERFORMED;
  }
}
