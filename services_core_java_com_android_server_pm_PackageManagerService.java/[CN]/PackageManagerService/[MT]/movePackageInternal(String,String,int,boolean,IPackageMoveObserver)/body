{
  final UserHandle user=new UserHandle(UserHandle.getCallingUserId());
  File codeFile=null;
  String installerPackageName=null;
  String packageAbiOverride=null;
synchronized (mPackages) {
    final PackageParser.Package pkg=mPackages.get(packageName);
    final PackageSetting ps=mSettings.mPackages.get(packageName);
    if (pkg == null || ps == null) {
      throw new PackageManagerException(MOVE_FAILED_DOESNT_EXIST,"Missing package");
    }
    if (pkg.applicationInfo.isSystemApp()) {
      throw new PackageManagerException(MOVE_FAILED_SYSTEM_PACKAGE,"Cannot move system application");
    }
 else     if (pkg.mOperationPending) {
      throw new PackageManagerException(MOVE_FAILED_OPERATION_PENDING,"Attempt to move package which has pending operations");
    }
    pkg.mOperationPending=true;
    codeFile=new File(pkg.codePath);
    installerPackageName=ps.installerPackageName;
    packageAbiOverride=ps.cpuAbiOverrideString;
  }
  final IPackageInstallObserver2 installObserver=new IPackageInstallObserver2.Stub(){
    @Override public void onUserActionRequired(    Intent intent) throws RemoteException {
      throw new IllegalStateException();
    }
    @Override public void onPackageInstalled(    String basePackageName,    int returnCode,    String msg,    Bundle extras) throws RemoteException {
      Slog.d(TAG,"Install result for move: " + PackageManager.installStatusToString(returnCode,msg));
synchronized (mPackages) {
        final PackageParser.Package pkg=mPackages.get(packageName);
        if (pkg != null) {
          pkg.mOperationPending=false;
        }
      }
      final int status=PackageManager.installStatusToPublicStatus(returnCode);
switch (status) {
case PackageInstaller.STATUS_SUCCESS:
        observer.packageMoved(packageName,PackageManager.MOVE_SUCCEEDED);
      break;
case PackageInstaller.STATUS_FAILURE_STORAGE:
    observer.packageMoved(packageName,PackageManager.MOVE_FAILED_INSUFFICIENT_STORAGE);
  break;
default :
observer.packageMoved(packageName,PackageManager.MOVE_FAILED_INTERNAL_ERROR);
break;
}
}
}
;
installFlags|=PackageManager.INSTALL_REPLACE_EXISTING;
final Message msg=mHandler.obtainMessage(INIT_COPY);
final OriginInfo origin=OriginInfo.fromExistingFile(codeFile);
msg.obj=new InstallParams(origin,installObserver,installFlags,installerPackageName,volumeUuid,null,user,packageAbiOverride);
mHandler.sendMessage(msg);
}
