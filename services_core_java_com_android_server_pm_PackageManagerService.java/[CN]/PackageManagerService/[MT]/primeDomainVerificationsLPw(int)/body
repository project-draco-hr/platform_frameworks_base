{
  if (DEBUG_DOMAIN_VERIFICATION) {
    Slog.d(TAG,"Priming domain verifications in user " + userId);
  }
  SystemConfig systemConfig=SystemConfig.getInstance();
  ArraySet<String> packages=systemConfig.getLinkedApps();
  ArraySet<String> domains=new ArraySet<String>();
  for (  String packageName : packages) {
    PackageParser.Package pkg=mPackages.get(packageName);
    if (pkg != null) {
      if (!pkg.isSystemApp()) {
        Slog.w(TAG,"Non-system app '" + packageName + "' in sysconfig <app-link>");
        continue;
      }
      domains.clear();
      for (      PackageParser.Activity a : pkg.activities) {
        for (        ActivityIntentInfo filter : a.intents) {
          if (hasValidDomains(filter)) {
            domains.addAll(filter.getHostsList());
          }
        }
      }
      if (domains.size() > 0) {
        if (DEBUG_DOMAIN_VERIFICATION) {
          Slog.v(TAG,"      + " + packageName);
        }
        final IntentFilterVerificationInfo ivi;
        ivi=mSettings.createIntentFilterVerificationIfNeededLPw(packageName,new ArrayList<String>(domains));
        ivi.setStatus(INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_UNDEFINED);
        mSettings.updateIntentFilterVerificationStatusLPw(packageName,INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ALWAYS,userId);
      }
 else {
        Slog.w(TAG,"Sysconfig <app-link> package '" + packageName + "' does not handle web links");
      }
    }
 else {
      Slog.w(TAG,"Unknown package '" + packageName + "' in sysconfig <app-link>");
    }
  }
  scheduleWritePackageRestrictionsLocked(userId);
  scheduleWriteSettingsLocked();
}
