{
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.INSTALL_PACKAGES,null);
  if (UserHandle.getCallingUserId() != userId) {
    mContext.enforceCallingOrSelfPermission(android.Manifest.permission.INTERACT_ACROSS_USERS_FULL,"installPackage " + userId);
  }
  final File originFile=new File(originPath);
  final int uid=Binder.getCallingUid();
  if (isUserRestricted(userId,UserManager.DISALLOW_INSTALL_APPS)) {
    try {
      if (observer != null) {
        observer.onPackageInstalled("",INSTALL_FAILED_USER_RESTRICTED,null,null);
      }
    }
 catch (    RemoteException re) {
    }
    return;
  }
  UserHandle user;
  if ((installFlags & PackageManager.INSTALL_ALL_USERS) != 0) {
    user=UserHandle.ALL;
  }
 else {
    user=new UserHandle(userId);
  }
  final int filteredInstallFlags;
  if (uid == Process.SHELL_UID || uid == 0) {
    if (DEBUG_INSTALL) {
      Slog.v(TAG,"Install from ADB");
    }
    filteredInstallFlags=installFlags | PackageManager.INSTALL_FROM_ADB;
  }
 else {
    filteredInstallFlags=installFlags & ~PackageManager.INSTALL_FROM_ADB;
  }
  verificationParams.setInstallerUid(uid);
  final OriginInfo origin=OriginInfo.fromUntrustedFile(originFile);
  final Message msg=mHandler.obtainMessage(INIT_COPY);
  msg.obj=new InstallParams(origin,observer,filteredInstallFlags,installerPackageName,verificationParams,user,packageAbiOverride);
  mHandler.sendMessage(msg);
}
