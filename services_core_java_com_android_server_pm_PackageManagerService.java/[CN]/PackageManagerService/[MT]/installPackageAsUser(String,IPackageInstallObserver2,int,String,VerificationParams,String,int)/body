{
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.INSTALL_PACKAGES,null);
  final int callingUid=Binder.getCallingUid();
  enforceCrossUserPermission(callingUid,userId,true,true,"installPackageAsUser");
  if (isUserRestricted(userId,UserManager.DISALLOW_INSTALL_APPS)) {
    try {
      if (observer != null) {
        observer.onPackageInstalled("",INSTALL_FAILED_USER_RESTRICTED,null,null);
      }
    }
 catch (    RemoteException re) {
    }
    return;
  }
  if ((callingUid == Process.SHELL_UID) || (callingUid == Process.ROOT_UID)) {
    installFlags|=PackageManager.INSTALL_FROM_ADB;
  }
 else {
    installFlags&=~PackageManager.INSTALL_FROM_ADB;
    installFlags&=~PackageManager.INSTALL_ALL_USERS;
  }
  UserHandle user;
  if ((installFlags & PackageManager.INSTALL_ALL_USERS) != 0) {
    user=UserHandle.ALL;
  }
 else {
    user=new UserHandle(userId);
  }
  if ((installFlags & PackageManager.INSTALL_GRANT_RUNTIME_PERMISSIONS) != 0 && mContext.checkCallingOrSelfPermission(Manifest.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS) == PackageManager.PERMISSION_DENIED) {
    throw new SecurityException("You need the " + "android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS permission " + "to use the PackageManager.INSTALL_GRANT_RUNTIME_PERMISSIONS flag");
  }
  verificationParams.setInstallerUid(callingUid);
  final File originFile=new File(originPath);
  final OriginInfo origin=OriginInfo.fromUntrustedFile(originFile);
  final Message msg=mHandler.obtainMessage(INIT_COPY);
  final InstallParams params=new InstallParams(origin,null,observer,installFlags,installerPackageName,null,verificationParams,user,packageAbiOverride,null);
  params.setTraceMethod("installAsUser").setTraceCookie(System.identityHashCode(params));
  msg.obj=params;
  Trace.asyncTraceBegin(TRACE_TAG_PACKAGE_MANAGER,"installAsUser",System.identityHashCode(msg.obj));
  Trace.asyncTraceBegin(TRACE_TAG_PACKAGE_MANAGER,"queueInstall",System.identityHashCode(msg.obj));
  mHandler.sendMessage(msg);
}
