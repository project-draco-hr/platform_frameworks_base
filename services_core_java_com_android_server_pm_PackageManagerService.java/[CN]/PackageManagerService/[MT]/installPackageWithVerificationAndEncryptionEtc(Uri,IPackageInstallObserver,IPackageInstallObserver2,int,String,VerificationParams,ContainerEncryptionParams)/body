{
  if (observer == null && observer2 == null) {
    throw new IllegalArgumentException("No install observer supplied");
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.INSTALL_PACKAGES,null);
  final int uid=Binder.getCallingUid();
  if (isUserRestricted(UserHandle.getUserId(uid),UserManager.DISALLOW_INSTALL_APPS)) {
    try {
      if (observer != null) {
        observer.packageInstalled("",PackageManager.INSTALL_FAILED_USER_RESTRICTED);
      }
      if (observer2 != null) {
        observer2.packageInstalled("",null,PackageManager.INSTALL_FAILED_USER_RESTRICTED);
      }
    }
 catch (    RemoteException re) {
    }
    return;
  }
  UserHandle user;
  if ((flags & PackageManager.INSTALL_ALL_USERS) != 0) {
    user=UserHandle.ALL;
  }
 else {
    user=new UserHandle(UserHandle.getUserId(uid));
  }
  final int filteredFlags;
  if (uid == Process.SHELL_UID || uid == 0) {
    if (DEBUG_INSTALL) {
      Slog.v(TAG,"Install from ADB");
    }
    filteredFlags=flags | PackageManager.INSTALL_FROM_ADB;
  }
 else {
    filteredFlags=flags & ~PackageManager.INSTALL_FROM_ADB;
  }
  verificationParams.setInstallerUid(uid);
  final Message msg=mHandler.obtainMessage(INIT_COPY);
  msg.obj=new InstallParams(packageURI,observer,observer2,filteredFlags,installerPackageName,verificationParams,encryptionParams,user);
  mHandler.sendMessage(msg);
}
