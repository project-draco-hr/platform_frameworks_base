{
  PackageSetting ps=null;
synchronized (mPackages) {
    pkg=mPackages.get(pkg.packageName);
    if (pkg == null) {
      return false;
    }
    ps=mSettings.mPackages.get(pkg.packageName);
    if (ps == null) {
      return false;
    }
    if (outInfo != null) {
      outInfo.uid=ps.appId;
    }
  }
  removePackageDataLI(ps,allUserHandles,perUserInstalled,outInfo,flags,writeSettings);
  final int childCount=(pkg.childPackages != null) ? pkg.childPackages.size() : 0;
  for (int i=0; i < childCount; i++) {
    PackageSetting childPs;
synchronized (mPackages) {
      childPs=mSettings.peekPackageLPr(pkg.childPackages.get(i).packageName);
    }
    if (childPs != null) {
      final int deleteFlags=(flags & DELETE_KEEP_DATA) != 0 && (replacingPackage != null && !replacingPackage.hasChildPackage(childPs.name)) ? flags & ~DELETE_KEEP_DATA : flags;
      removePackageDataLI(childPs,allUserHandles,perUserInstalled,outInfo,deleteFlags,writeSettings);
    }
  }
  if (ps.pkg.parentPackage == null) {
    if (deleteCodeAndResources && (outInfo != null)) {
      outInfo.args=createInstallArgsForExisting(packageFlagsToInstallFlags(ps),ps.codePathString,ps.resourcePathString,getAppDexInstructionSets(ps));
      if (DEBUG_SD_INSTALL)       Slog.i(TAG,"args=" + outInfo.args);
    }
  }
  return true;
}
