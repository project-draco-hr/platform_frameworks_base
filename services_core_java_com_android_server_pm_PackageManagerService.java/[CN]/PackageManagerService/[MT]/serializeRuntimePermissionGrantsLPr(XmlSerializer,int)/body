{
  serializer.startTag(null,TAG_ALL_GRANTS);
  final int N=mSettings.mPackages.size();
  for (int i=0; i < N; i++) {
    final PackageSetting ps=mSettings.mPackages.valueAt(i);
    boolean pkgGrantsKnown=false;
    PermissionsState packagePerms=ps.getPermissionsState();
    for (    PermissionState state : packagePerms.getRuntimePermissionStates(userId)) {
      final int grantFlags=state.getFlags();
      if ((grantFlags & SYSTEM_RUNTIME_GRANT_MASK) == 0) {
        final boolean isGranted=state.isGranted();
        if (isGranted || (grantFlags & USER_RUNTIME_GRANT_MASK) != 0) {
          final String packageName=mSettings.mPackages.keyAt(i);
          if (!pkgGrantsKnown) {
            serializer.startTag(null,TAG_GRANT);
            serializer.attribute(null,ATTR_PACKAGE_NAME,packageName);
            pkgGrantsKnown=true;
          }
          final boolean userSet=(grantFlags & FLAG_PERMISSION_USER_SET) != 0;
          final boolean userFixed=(grantFlags & FLAG_PERMISSION_USER_FIXED) != 0;
          final boolean revoke=(grantFlags & FLAG_PERMISSION_REVOKE_ON_UPGRADE) != 0;
          serializer.startTag(null,TAG_PERMISSION);
          serializer.attribute(null,ATTR_PERMISSION_NAME,state.getName());
          if (isGranted) {
            serializer.attribute(null,ATTR_IS_GRANTED,"true");
          }
          if (userSet) {
            serializer.attribute(null,ATTR_USER_SET,"true");
          }
          if (userFixed) {
            serializer.attribute(null,ATTR_USER_FIXED,"true");
          }
          if (revoke) {
            serializer.attribute(null,ATTR_REVOKE_ON_UPGRADE,"true");
          }
          serializer.endTag(null,TAG_PERMISSION);
        }
      }
    }
    if (pkgGrantsKnown) {
      serializer.endTag(null,TAG_GRANT);
    }
  }
  serializer.endTag(null,TAG_ALL_GRANTS);
}
