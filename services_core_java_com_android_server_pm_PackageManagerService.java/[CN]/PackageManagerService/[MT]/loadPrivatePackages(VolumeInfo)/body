{
  final ArrayList<ApplicationInfo> loaded=new ArrayList<>();
  final int parseFlags=mDefParseFlags | PackageParser.PARSE_EXTERNAL_STORAGE;
synchronized (mInstallLock) {
synchronized (mPackages) {
      final VersionInfo ver=mSettings.findOrCreateVersion(vol.fsUuid);
      final List<PackageSetting> packages=mSettings.getVolumePackagesLPr(vol.fsUuid);
      for (      PackageSetting ps : packages) {
        final PackageParser.Package pkg;
        try {
          pkg=scanPackageTracedLI(ps.codePath,parseFlags,SCAN_INITIAL,0L,null);
          loaded.add(pkg.applicationInfo);
        }
 catch (        PackageManagerException e) {
          Slog.w(TAG,"Failed to scan " + ps.codePath + ": "+ e.getMessage());
        }
        if (!Build.FINGERPRINT.equals(ver.fingerprint)) {
          deleteCodeCacheDirsLI(ps.volumeUuid,ps.name);
        }
      }
      int updateFlags=UPDATE_PERMISSIONS_ALL;
      if (ver.sdkVersion != mSdkVersion) {
        logCriticalInfo(Log.INFO,"Platform changed from " + ver.sdkVersion + " to "+ mSdkVersion+ "; regranting permissions for "+ vol.fsUuid);
        updateFlags|=UPDATE_PERMISSIONS_REPLACE_PKG | UPDATE_PERMISSIONS_REPLACE_ALL;
      }
      updatePermissionsLPw(null,null,updateFlags);
      ver.forceCurrent();
      mSettings.writeLPr();
    }
  }
  if (DEBUG_INSTALL)   Slog.d(TAG,"Loaded packages " + loaded);
  sendResourcesChangedBroadcast(true,false,loaded,null);
}
