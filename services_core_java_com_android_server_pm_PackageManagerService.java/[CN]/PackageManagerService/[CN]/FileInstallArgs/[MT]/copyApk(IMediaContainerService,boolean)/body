{
  if (temp) {
    createCopyFile();
  }
  final File codeFile=new File(codeFileName);
  if (!created) {
    try {
      codeFile.createNewFile();
      if (!setPermissions()) {
        return PackageManager.INSTALL_FAILED_INSUFFICIENT_STORAGE;
      }
    }
 catch (    IOException e) {
      Slog.w(TAG,"Failed to create file " + codeFile);
      return PackageManager.INSTALL_FAILED_INSUFFICIENT_STORAGE;
    }
  }
  final IParcelFileDescriptorFactory target=new IParcelFileDescriptorFactory.Stub(){
    @Override public ParcelFileDescriptor open(    String name,    int mode) throws RemoteException {
      try {
        return ParcelFileDescriptor.open(codeFile,ParcelFileDescriptor.MODE_READ_WRITE);
      }
 catch (      FileNotFoundException e) {
        throw new RemoteException(e.getMessage());
      }
    }
  }
;
  int ret=imcs.copyPackage(originFile.getAbsolutePath(),target);
  if (isFwdLocked()) {
    final File destResourceFile=new File(getResourcePath());
    try {
      PackageHelper.extractPublicFiles(codeFileName,destResourceFile);
    }
 catch (    IOException e) {
      Slog.e(TAG,"Couldn't create a new zip file for the public parts of a" + " forward-locked app.");
      destResourceFile.delete();
      return PackageManager.INSTALL_FAILED_INSUFFICIENT_STORAGE;
    }
  }
  final File nativeLibraryFile=new File(getNativeLibraryPath());
  Slog.i(TAG,"Copying native libraries to " + nativeLibraryFile.getPath());
  if (nativeLibraryFile.exists()) {
    NativeLibraryHelper.removeNativeBinariesFromDirLI(nativeLibraryFile);
    nativeLibraryFile.delete();
  }
  String[] abiList=(abiOverride != null) ? new String[]{abiOverride} : Build.SUPPORTED_ABIS;
  NativeLibraryHelper.Handle handle=null;
  try {
    handle=NativeLibraryHelper.Handle.create(codeFile);
    if (Build.SUPPORTED_64_BIT_ABIS.length > 0 && abiOverride == null && NativeLibraryHelper.hasRenderscriptBitcode(handle)) {
      abiList=Build.SUPPORTED_32_BIT_ABIS;
    }
    int copyRet=copyNativeLibrariesForInternalApp(handle,nativeLibraryFile,abiList);
    if (copyRet < 0 && copyRet != PackageManager.NO_NATIVE_LIBRARIES) {
      return copyRet;
    }
  }
 catch (  IOException e) {
    Slog.e(TAG,"Copying native libraries failed",e);
    ret=PackageManager.INSTALL_FAILED_INTERNAL_ERROR;
  }
 finally {
    IoUtils.closeQuietly(handle);
  }
  return ret;
}
