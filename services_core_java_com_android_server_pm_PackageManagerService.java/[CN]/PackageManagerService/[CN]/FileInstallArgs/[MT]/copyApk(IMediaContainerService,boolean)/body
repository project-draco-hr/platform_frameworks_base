{
  if (origin.staged) {
    Slog.d(TAG,origin.file + " already staged; skipping copy");
    codeFile=origin.file;
    resourceFile=origin.file;
    return PackageManager.INSTALL_SUCCEEDED;
  }
  try {
    final File tempDir=mInstallerService.allocateInternalStageDirLegacy();
    codeFile=tempDir;
    resourceFile=tempDir;
  }
 catch (  IOException e) {
    Slog.w(TAG,"Failed to create copy file: " + e);
    return PackageManager.INSTALL_FAILED_INSUFFICIENT_STORAGE;
  }
  final IParcelFileDescriptorFactory target=new IParcelFileDescriptorFactory.Stub(){
    @Override public ParcelFileDescriptor open(    String name,    int mode) throws RemoteException {
      if (!FileUtils.isValidExtFilename(name)) {
        throw new IllegalArgumentException("Invalid filename: " + name);
      }
      try {
        final File file=new File(codeFile,name);
        final FileDescriptor fd=Os.open(file.getAbsolutePath(),O_RDWR | O_CREAT,0644);
        Os.chmod(file.getAbsolutePath(),0644);
        return new ParcelFileDescriptor(fd);
      }
 catch (      ErrnoException e) {
        throw new RemoteException("Failed to open: " + e.getMessage());
      }
    }
  }
;
  int ret=PackageManager.INSTALL_SUCCEEDED;
  ret=imcs.copyPackage(origin.file.getAbsolutePath(),target);
  if (ret != PackageManager.INSTALL_SUCCEEDED) {
    Slog.e(TAG,"Failed to copy package");
    return ret;
  }
  final File libraryRoot=new File(codeFile,LIB_DIR_NAME);
  NativeLibraryHelper.Handle handle=null;
  try {
    handle=NativeLibraryHelper.Handle.create(codeFile);
    ret=NativeLibraryHelper.copyNativeBinariesWithOverride(handle,libraryRoot,abiOverride);
  }
 catch (  IOException e) {
    Slog.e(TAG,"Copying native libraries failed",e);
    ret=PackageManager.INSTALL_FAILED_INTERNAL_ERROR;
  }
 finally {
    IoUtils.closeQuietly(handle);
  }
  return ret;
}
