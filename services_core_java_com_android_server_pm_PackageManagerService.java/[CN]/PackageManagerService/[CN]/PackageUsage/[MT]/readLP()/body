{
synchronized (mFileLock) {
    AtomicFile file=getFile();
    BufferedInputStream in=null;
    try {
      in=new BufferedInputStream(file.openRead());
      StringBuffer sb=new StringBuffer();
      while (true) {
        String packageName=readToken(in,sb,' ');
        if (packageName == null) {
          break;
        }
        String timeInMillisString=readToken(in,sb,'\n');
        if (timeInMillisString == null) {
          throw new IOException("Failed to find last usage time for package " + packageName);
        }
        PackageParser.Package pkg=mPackages.get(packageName);
        if (pkg == null) {
          continue;
        }
        long timeInMillis;
        try {
          timeInMillis=Long.parseLong(timeInMillisString.toString());
        }
 catch (        NumberFormatException e) {
          throw new IOException("Failed to parse " + timeInMillisString + " as a long.",e);
        }
        pkg.mLastPackageUsageTimeInMills=timeInMillis;
      }
    }
 catch (    FileNotFoundException expected) {
      mIsHistoricalPackageUsageAvailable=false;
    }
catch (    IOException e) {
      Log.w(TAG,"Failed to read package usage times",e);
    }
 finally {
      IoUtils.closeQuietly(in);
    }
  }
  mLastWritten.set(SystemClock.elapsedRealtime());
}
