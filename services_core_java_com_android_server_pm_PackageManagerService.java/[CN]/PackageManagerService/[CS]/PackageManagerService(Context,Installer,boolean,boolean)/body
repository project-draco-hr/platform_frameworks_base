{
  EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_START,SystemClock.uptimeMillis());
  if (mSdkVersion <= 0) {
    Slog.w(TAG,"**** ro.build.version.sdk not set!");
  }
  mContext=context;
  mFactoryTest=factoryTest;
  mOnlyCore=onlyCore;
  mMetrics=new DisplayMetrics();
  mSettings=new Settings(mPackages);
  mSettings.addSharedUserLPw("android.uid.system",Process.SYSTEM_UID,ApplicationInfo.FLAG_SYSTEM,ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);
  mSettings.addSharedUserLPw("android.uid.phone",RADIO_UID,ApplicationInfo.FLAG_SYSTEM,ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);
  mSettings.addSharedUserLPw("android.uid.log",LOG_UID,ApplicationInfo.FLAG_SYSTEM,ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);
  mSettings.addSharedUserLPw("android.uid.nfc",NFC_UID,ApplicationInfo.FLAG_SYSTEM,ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);
  mSettings.addSharedUserLPw("android.uid.bluetooth",BLUETOOTH_UID,ApplicationInfo.FLAG_SYSTEM,ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);
  mSettings.addSharedUserLPw("android.uid.shell",SHELL_UID,ApplicationInfo.FLAG_SYSTEM,ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);
  String separateProcesses=SystemProperties.get("debug.separate_processes");
  if (separateProcesses != null && separateProcesses.length() > 0) {
    if ("*".equals(separateProcesses)) {
      mDefParseFlags=PackageParser.PARSE_IGNORE_PROCESSES;
      mSeparateProcesses=null;
      Slog.w(TAG,"Running with debug.separate_processes: * (ALL)");
    }
 else {
      mDefParseFlags=0;
      mSeparateProcesses=separateProcesses.split(",");
      Slog.w(TAG,"Running with debug.separate_processes: " + separateProcesses);
    }
  }
 else {
    mDefParseFlags=0;
    mSeparateProcesses=null;
  }
  mInstaller=installer;
  mPackageDexOptimizer=new PackageDexOptimizer(installer,mInstallLock,context,"*dexopt*");
  mMoveCallbacks=new MoveCallbacks(FgThread.get().getLooper());
  mOnPermissionChangeListeners=new OnPermissionChangeListeners(FgThread.get().getLooper());
  getDefaultDisplayMetrics(context,mMetrics);
  SystemConfig systemConfig=SystemConfig.getInstance();
  mGlobalGids=systemConfig.getGlobalGids();
  mSystemPermissions=systemConfig.getSystemPermissions();
  mAvailableFeatures=systemConfig.getAvailableFeatures();
synchronized (mInstallLock) {
synchronized (mPackages) {
      mHandlerThread=new ServiceThread(TAG,Process.THREAD_PRIORITY_BACKGROUND,true);
      mHandlerThread.start();
      mHandler=new PackageHandler(mHandlerThread.getLooper());
      mProcessLoggingHandler=new ProcessLoggingHandler();
      Watchdog.getInstance().addThread(mHandler,WATCHDOG_TIMEOUT);
      File dataDir=Environment.getDataDirectory();
      mAppInstallDir=new File(dataDir,"app");
      mAppLib32InstallDir=new File(dataDir,"app-lib");
      mEphemeralInstallDir=new File(dataDir,"app-ephemeral");
      mAsecInternalPath=new File(dataDir,"app-asec").getPath();
      mDrmAppPrivateInstallDir=new File(dataDir,"app-private");
      sUserManager=new UserManagerService(context,this,mPackages);
      ArrayMap<String,SystemConfig.PermissionEntry> permConfig=systemConfig.getPermissions();
      for (int i=0; i < permConfig.size(); i++) {
        SystemConfig.PermissionEntry perm=permConfig.valueAt(i);
        BasePermission bp=mSettings.mPermissions.get(perm.name);
        if (bp == null) {
          bp=new BasePermission(perm.name,"android",BasePermission.TYPE_BUILTIN);
          mSettings.mPermissions.put(perm.name,bp);
        }
        if (perm.gids != null) {
          bp.setGids(perm.gids,perm.perUser);
        }
      }
      ArrayMap<String,String> libConfig=systemConfig.getSharedLibraries();
      for (int i=0; i < libConfig.size(); i++) {
        mSharedLibraries.put(libConfig.keyAt(i),new SharedLibraryEntry(libConfig.valueAt(i),null));
      }
      mFoundPolicyFile=SELinuxMMAC.readInstallPolicy();
      mRestoredSettings=mSettings.readLPw(sUserManager.getUsers(false));
      String customResolverActivity=Resources.getSystem().getString(R.string.config_customResolverActivity);
      if (TextUtils.isEmpty(customResolverActivity)) {
        customResolverActivity=null;
      }
 else {
        mCustomResolverComponentName=ComponentName.unflattenFromString(customResolverActivity);
      }
      long startTime=SystemClock.uptimeMillis();
      EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_SYSTEM_SCAN_START,startTime);
      final int scanFlags=SCAN_NO_PATHS | SCAN_DEFER_DEX | SCAN_BOOTING| SCAN_INITIAL;
      final String bootClassPath=System.getenv("BOOTCLASSPATH");
      final String systemServerClassPath=System.getenv("SYSTEMSERVERCLASSPATH");
      if (bootClassPath == null) {
        Slog.w(TAG,"No BOOTCLASSPATH found!");
      }
      if (systemServerClassPath == null) {
        Slog.w(TAG,"No SYSTEMSERVERCLASSPATH found!");
      }
      final List<String> allInstructionSets=InstructionSets.getAllInstructionSets();
      final String[] dexCodeInstructionSets=getDexCodeInstructionSets(allInstructionSets.toArray(new String[allInstructionSets.size()]));
      if (mSharedLibraries.size() > 0) {
        for (        String dexCodeInstructionSet : dexCodeInstructionSets) {
          for (          SharedLibraryEntry libEntry : mSharedLibraries.values()) {
            final String lib=libEntry.path;
            if (lib == null) {
              continue;
            }
            try {
              int dexoptNeeded=DexFile.getDexOptNeeded(lib,dexCodeInstructionSet,getCompilerFilterForReason(REASON_SHARED_APK),false);
              if (dexoptNeeded != DexFile.NO_DEXOPT_NEEDED) {
                mInstaller.dexopt(lib,Process.SYSTEM_UID,dexCodeInstructionSet,dexoptNeeded,DEXOPT_PUBLIC,getCompilerFilterForReason(REASON_SHARED_APK),StorageManager.UUID_PRIVATE_INTERNAL);
              }
            }
 catch (            FileNotFoundException e) {
              Slog.w(TAG,"Library not found: " + lib);
            }
catch (            IOException|InstallerException e) {
              Slog.w(TAG,"Cannot dexopt " + lib + "; is it an APK or JAR? "+ e.getMessage());
            }
          }
        }
      }
      File frameworkDir=new File(Environment.getRootDirectory(),"framework");
      final VersionInfo ver=mSettings.getInternalVersion();
      mIsUpgrade=!Build.FINGERPRINT.equals(ver.fingerprint);
      mPromoteSystemApps=mIsUpgrade && ver.sdkVersion <= Build.VERSION_CODES.LOLLIPOP_MR1;
      if (mPromoteSystemApps) {
        Iterator<PackageSetting> pkgSettingIter=mSettings.mPackages.values().iterator();
        while (pkgSettingIter.hasNext()) {
          PackageSetting ps=pkgSettingIter.next();
          if (isSystemApp(ps)) {
            mExistingSystemPackages.add(ps.name);
          }
        }
      }
      mIsPreNUpgrade=!mSettings.isNWorkDone();
      mSettings.setNWorkDone();
      File vendorOverlayDir=new File(VENDOR_OVERLAY_DIR);
      scanDirTracedLI(vendorOverlayDir,PackageParser.PARSE_IS_SYSTEM | PackageParser.PARSE_IS_SYSTEM_DIR,scanFlags | SCAN_TRUSTED_OVERLAY,0);
      scanDirTracedLI(frameworkDir,PackageParser.PARSE_IS_SYSTEM | PackageParser.PARSE_IS_SYSTEM_DIR | PackageParser.PARSE_IS_PRIVILEGED,scanFlags | SCAN_NO_DEX,0);
      final File privilegedAppDir=new File(Environment.getRootDirectory(),"priv-app");
      scanDirTracedLI(privilegedAppDir,PackageParser.PARSE_IS_SYSTEM | PackageParser.PARSE_IS_SYSTEM_DIR | PackageParser.PARSE_IS_PRIVILEGED,scanFlags,0);
      final File systemAppDir=new File(Environment.getRootDirectory(),"app");
      scanDirTracedLI(systemAppDir,PackageParser.PARSE_IS_SYSTEM | PackageParser.PARSE_IS_SYSTEM_DIR,scanFlags,0);
      File vendorAppDir=new File("/vendor/app");
      try {
        vendorAppDir=vendorAppDir.getCanonicalFile();
      }
 catch (      IOException e) {
      }
      scanDirTracedLI(vendorAppDir,PackageParser.PARSE_IS_SYSTEM | PackageParser.PARSE_IS_SYSTEM_DIR,scanFlags,0);
      final File oemAppDir=new File(Environment.getOemDirectory(),"app");
      scanDirTracedLI(oemAppDir,PackageParser.PARSE_IS_SYSTEM | PackageParser.PARSE_IS_SYSTEM_DIR,scanFlags,0);
      final List<String> possiblyDeletedUpdatedSystemApps=new ArrayList<String>();
      if (!mOnlyCore) {
        Iterator<PackageSetting> psit=mSettings.mPackages.values().iterator();
        while (psit.hasNext()) {
          PackageSetting ps=psit.next();
          if ((ps.pkgFlags & ApplicationInfo.FLAG_SYSTEM) == 0) {
            continue;
          }
          final PackageParser.Package scannedPkg=mPackages.get(ps.name);
          if (scannedPkg != null) {
            if (mSettings.isDisabledSystemPackageLPr(ps.name)) {
              logCriticalInfo(Log.WARN,"Expecting better updated system app for " + ps.name + "; removing system app.  Last known codePath="+ ps.codePathString+ ", installStatus="+ ps.installStatus+ ", versionCode="+ ps.versionCode+ "; scanned versionCode="+ scannedPkg.mVersionCode);
              removePackageLI(scannedPkg,true);
              mExpectingBetter.put(ps.name,ps.codePath);
            }
            continue;
          }
          if (!mSettings.isDisabledSystemPackageLPr(ps.name)) {
            psit.remove();
            logCriticalInfo(Log.WARN,"System package " + ps.name + " no longer exists; wiping its data");
            removeDataDirsLIF(null,ps.name);
          }
 else {
            final PackageSetting disabledPs=mSettings.getDisabledSystemPkgLPr(ps.name);
            if (disabledPs.codePath == null || !disabledPs.codePath.exists()) {
              possiblyDeletedUpdatedSystemApps.add(ps.name);
            }
          }
        }
      }
      ArrayList<PackageSetting> deletePkgsList=mSettings.getListOfIncompleteInstallPackagesLPr();
      for (int i=0; i < deletePkgsList.size(); i++) {
        cleanupInstallFailedPackageLIF(deletePkgsList.get(i));
      }
      deleteTempPackageFiles();
      mSettings.pruneSharedUsersLPw();
      if (!mOnlyCore) {
        EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_DATA_SCAN_START,SystemClock.uptimeMillis());
        scanDirTracedLI(mAppInstallDir,0,scanFlags | SCAN_REQUIRE_KNOWN,0);
        scanDirTracedLI(mDrmAppPrivateInstallDir,PackageParser.PARSE_FORWARD_LOCK,scanFlags | SCAN_REQUIRE_KNOWN,0);
        scanDirLI(mEphemeralInstallDir,PackageParser.PARSE_IS_EPHEMERAL,scanFlags | SCAN_REQUIRE_KNOWN,0);
        for (        String deletedAppName : possiblyDeletedUpdatedSystemApps) {
          PackageParser.Package deletedPkg=mPackages.get(deletedAppName);
          mSettings.removeDisabledSystemPackageLPw(deletedAppName);
          String msg;
          if (deletedPkg == null) {
            msg="Updated system package " + deletedAppName + " no longer exists; wiping its data";
            removeDataDirsLIF(null,deletedAppName);
          }
 else {
            msg="Updated system app + " + deletedAppName + " no longer present; removing system privileges for "+ deletedAppName;
            deletedPkg.applicationInfo.flags&=~ApplicationInfo.FLAG_SYSTEM;
            PackageSetting deletedPs=mSettings.mPackages.get(deletedAppName);
            deletedPs.pkgFlags&=~ApplicationInfo.FLAG_SYSTEM;
          }
          logCriticalInfo(Log.WARN,msg);
        }
        for (int i=0; i < mExpectingBetter.size(); i++) {
          final String packageName=mExpectingBetter.keyAt(i);
          if (!mPackages.containsKey(packageName)) {
            final File scanFile=mExpectingBetter.valueAt(i);
            logCriticalInfo(Log.WARN,"Expected better " + packageName + " but never showed up; reverting to system");
            final int reparseFlags;
            if (FileUtils.contains(privilegedAppDir,scanFile)) {
              reparseFlags=PackageParser.PARSE_IS_SYSTEM | PackageParser.PARSE_IS_SYSTEM_DIR | PackageParser.PARSE_IS_PRIVILEGED;
            }
 else             if (FileUtils.contains(systemAppDir,scanFile)) {
              reparseFlags=PackageParser.PARSE_IS_SYSTEM | PackageParser.PARSE_IS_SYSTEM_DIR;
            }
 else             if (FileUtils.contains(vendorAppDir,scanFile)) {
              reparseFlags=PackageParser.PARSE_IS_SYSTEM | PackageParser.PARSE_IS_SYSTEM_DIR;
            }
 else             if (FileUtils.contains(oemAppDir,scanFile)) {
              reparseFlags=PackageParser.PARSE_IS_SYSTEM | PackageParser.PARSE_IS_SYSTEM_DIR;
            }
 else {
              Slog.e(TAG,"Ignoring unexpected fallback path " + scanFile);
              continue;
            }
            mSettings.enableSystemPackageLPw(packageName);
            try {
              scanPackageTracedLI(scanFile,reparseFlags,scanFlags,0,null);
            }
 catch (            PackageManagerException e) {
              Slog.e(TAG,"Failed to parse original system package: " + e.getMessage());
            }
          }
        }
      }
      mExpectingBetter.clear();
      mSetupWizardPackage=getSetupWizardPackageName();
      if (mProtectedFilters.size() > 0) {
        if (DEBUG_FILTERS && mSetupWizardPackage == null) {
          Slog.i(TAG,"No setup wizard;" + " All protected intents capped to priority 0");
        }
        for (        ActivityIntentInfo filter : mProtectedFilters) {
          if (filter.activity.info.packageName.equals(mSetupWizardPackage)) {
            if (DEBUG_FILTERS) {
              Slog.i(TAG,"Found setup wizard;" + " allow priority " + filter.getPriority() + ";"+ " package: "+ filter.activity.info.packageName+ " activity: "+ filter.activity.className+ " priority: "+ filter.getPriority());
            }
            continue;
          }
          Slog.w(TAG,"Protected action; cap priority to 0;" + " package: " + filter.activity.info.packageName + " activity: "+ filter.activity.className+ " origPrio: "+ filter.getPriority());
          filter.setPriority(0);
        }
      }
      mDeferProtectedFilters=false;
      mProtectedFilters.clear();
      updateAllSharedLibrariesLPw();
      for (      SharedUserSetting setting : mSettings.getAllSharedUsersLPw()) {
        adjustCpuAbisForSharedUserLPw(setting.packages,null,false);
      }
      mPackageUsage.readLP();
      EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_SCAN_END,SystemClock.uptimeMillis());
      Slog.i(TAG,"Time to scan packages: " + ((SystemClock.uptimeMillis() - startTime) / 1000f) + " seconds");
      int updateFlags=UPDATE_PERMISSIONS_ALL;
      if (ver.sdkVersion != mSdkVersion) {
        Slog.i(TAG,"Platform changed from " + ver.sdkVersion + " to "+ mSdkVersion+ "; regranting permissions for internal storage");
        updateFlags|=UPDATE_PERMISSIONS_REPLACE_PKG | UPDATE_PERMISSIONS_REPLACE_ALL;
      }
      updatePermissionsLPw(null,null,StorageManager.UUID_PRIVATE_INTERNAL,updateFlags);
      ver.sdkVersion=mSdkVersion;
      if (!onlyCore && (mPromoteSystemApps || !mRestoredSettings)) {
        for (        UserInfo user : sUserManager.getUsers(true)) {
          mSettings.applyDefaultPreferredAppsLPw(this,user.id);
          applyFactoryDefaultBrowserLPw(user.id);
          primeDomainVerificationsLPw(user.id);
        }
      }
      final int storageFlags;
      if (StorageManager.isFileEncryptedNativeOrEmulated()) {
        storageFlags=StorageManager.FLAG_STORAGE_DE;
      }
 else {
        storageFlags=StorageManager.FLAG_STORAGE_DE | StorageManager.FLAG_STORAGE_CE;
      }
      reconcileAppsData(StorageManager.UUID_PRIVATE_INTERNAL,UserHandle.USER_SYSTEM,storageFlags);
      if (mIsUpgrade && !onlyCore) {
        Slog.i(TAG,"Build fingerprint changed; clearing code caches");
        for (int i=0; i < mSettings.mPackages.size(); i++) {
          final PackageSetting ps=mSettings.mPackages.valueAt(i);
          if (Objects.equals(StorageManager.UUID_PRIVATE_INTERNAL,ps.volumeUuid)) {
            deleteCodeCacheDirsLIF(ps.volumeUuid,ps.name);
          }
        }
        ver.fingerprint=Build.FINGERPRINT;
      }
      checkDefaultBrowser();
      mExistingSystemPackages.clear();
      mPromoteSystemApps=false;
      ver.databaseVersion=Settings.CURRENT_DATABASE_VERSION;
      mSettings.writeLPr();
      EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_READY,SystemClock.uptimeMillis());
      if (!mOnlyCore) {
        mRequiredVerifierPackage=getRequiredButNotReallyRequiredVerifierLPr();
        mRequiredInstallerPackage=getRequiredInstallerLPr();
        mIntentFilterVerifierComponent=getIntentFilterVerifierComponentNameLPr();
        mIntentFilterVerifier=new IntentVerifierProxy(mContext,mIntentFilterVerifierComponent);
        mServicesSystemSharedLibraryPackageName=getRequiredSharedLibraryLPr(PackageManager.SYSTEM_SHARED_LIBRARY_SERVICES);
        getRequiredSharedLibraryLPr(PackageManager.SYSTEM_SHARED_LIBRARY_SHARED);
      }
 else {
        mRequiredVerifierPackage=null;
        mRequiredInstallerPackage=null;
        mIntentFilterVerifierComponent=null;
        mIntentFilterVerifier=null;
        mServicesSystemSharedLibraryPackageName=null;
      }
      mInstallerService=new PackageInstallerService(context,this);
      final ComponentName ephemeralResolverComponent=getEphemeralResolverLPr();
      final ComponentName ephemeralInstallerComponent=getEphemeralInstallerLPr();
      if (ephemeralInstallerComponent != null && ephemeralResolverComponent != null) {
        if (DEBUG_EPHEMERAL) {
          Slog.i(TAG,"Ephemeral activated; resolver: " + ephemeralResolverComponent + " installer:"+ ephemeralInstallerComponent);
        }
        mEphemeralResolverComponent=ephemeralResolverComponent;
        mEphemeralInstallerComponent=ephemeralInstallerComponent;
        setUpEphemeralInstallerActivityLP(mEphemeralInstallerComponent);
        mEphemeralResolverConnection=new EphemeralResolverConnection(mContext,mEphemeralResolverComponent);
      }
 else {
        if (DEBUG_EPHEMERAL) {
          final String missingComponent=(ephemeralResolverComponent == null) ? (ephemeralInstallerComponent == null) ? "resolver and installer" : "resolver" : "installer";
          Slog.i(TAG,"Ephemeral deactivated; missing " + missingComponent);
        }
        mEphemeralResolverComponent=null;
        mEphemeralInstallerComponent=null;
        mEphemeralResolverConnection=null;
      }
      mEphemeralApplicationRegistry=new EphemeralApplicationRegistry(this);
    }
  }
  Runtime.getRuntime().gc();
  mInstaller.setWarnIfHeld(mPackages);
  LocalServices.addService(PackageManagerInternal.class,new PackageManagerInternalImpl());
}
