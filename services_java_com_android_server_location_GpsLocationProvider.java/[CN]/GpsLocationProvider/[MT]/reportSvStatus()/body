{
  int svCount=native_read_sv_status(mSvs,mSnrs,mSvElevations,mSvAzimuths,mSvMasks);
synchronized (mListeners) {
    int size=mListeners.size();
    for (int i=0; i < size; i++) {
      Listener listener=mListeners.get(i);
      try {
        listener.mListener.onSvStatusChanged(svCount,mSvs,mSnrs,mSvElevations,mSvAzimuths,mSvMasks[EPHEMERIS_MASK],mSvMasks[ALMANAC_MASK],mSvMasks[USED_FOR_FIX_MASK]);
      }
 catch (      RemoteException e) {
        Log.w(TAG,"RemoteException in reportSvInfo");
        mListeners.remove(listener);
        size--;
      }
    }
  }
  if (VERBOSE) {
    Log.v(TAG,"SV count: " + svCount + " ephemerisMask: "+ Integer.toHexString(mSvMasks[EPHEMERIS_MASK])+ " almanacMask: "+ Integer.toHexString(mSvMasks[ALMANAC_MASK]));
    for (int i=0; i < svCount; i++) {
      Log.v(TAG,"sv: " + mSvs[i] + " snr: "+ mSnrs[i] / 10 + " elev: " + mSvElevations[i] + " azimuth: " + mSvAzimuths[i] + ((mSvMasks[EPHEMERIS_MASK] & (1 << (mSvs[i] - 1))) == 0 ? "  " : " E") + ((mSvMasks[ALMANAC_MASK] & (1 << (mSvs[i] - 1))) == 0 ? "  " : " A") + ((mSvMasks[USED_FOR_FIX_MASK] & (1 << (mSvs[i] - 1))) == 0 ? "" : "U"));
    }
  }
  updateStatus(mStatus,Integer.bitCount(mSvMasks[USED_FOR_FIX_MASK]));
  if (mNavigating && mStatus == LocationProvider.AVAILABLE && mLastFixTime > 0 && System.currentTimeMillis() - mLastFixTime > RECENT_FIX_TIMEOUT) {
    Intent intent=new Intent(LocationManager.GPS_FIX_CHANGE_ACTION);
    intent.putExtra(LocationManager.EXTRA_GPS_ENABLED,false);
    mContext.sendBroadcast(intent);
    updateStatus(LocationProvider.TEMPORARILY_UNAVAILABLE,mSvCount);
  }
}
