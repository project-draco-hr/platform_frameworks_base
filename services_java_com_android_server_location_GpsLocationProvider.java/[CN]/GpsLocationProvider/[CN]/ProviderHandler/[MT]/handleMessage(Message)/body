{
  int message=msg.what;
switch (message) {
case ENABLE:
    if (msg.arg1 == 1) {
      handleEnable();
    }
 else {
      handleDisable();
    }
  break;
case ENABLE_TRACKING:
handleEnableLocationTracking(msg.arg1 == 1);
break;
case UPDATE_NETWORK_STATE:
handleUpdateNetworkState(msg.arg1,(NetworkInfo)msg.obj);
break;
case INJECT_NTP_TIME:
handleInjectNtpTime();
break;
case DOWNLOAD_XTRA_DATA:
if (native_supports_xtra()) {
handleDownloadXtraData();
}
break;
case UPDATE_LOCATION:
handleUpdateLocation((Location)msg.obj);
break;
case ADD_LISTENER:
handleAddListener(msg.arg1);
break;
case REMOVE_LISTENER:
handleRemoveListener(msg.arg1);
break;
}
synchronized (mWakeLock) {
mPendingMessageBits&=~(1 << message);
if (message == ADD_LISTENER || message == REMOVE_LISTENER) {
mPendingListenerMessages--;
}
if (mPendingMessageBits == 0 && mPendingListenerMessages == 0) {
mWakeLock.release();
}
}
}
