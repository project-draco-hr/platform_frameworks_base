{
  final int dockedSide=getDockSide();
  final boolean dockedTopOrBottom=dockedSide == DOCKED_TOP || dockedSide == DOCKED_BOTTOM;
  if (imeWin == null || !dockedTopOrBottom) {
    return false;
  }
  final Rect displayContentRect=mTmpRect;
  final Rect contentBounds=mTmpRect2;
  getDisplayContent().getContentRect(displayContentRect);
  contentBounds.set(displayContentRect);
  int imeTop=Math.max(imeWin.getFrameLw().top,contentBounds.top);
  imeTop+=imeWin.getGivenContentInsetsLw().top;
  if (contentBounds.bottom > imeTop) {
    contentBounds.bottom=imeTop;
  }
  final int yOffset=displayContentRect.bottom - contentBounds.bottom;
  final int dividerWidth=getDisplayContent().mDividerControllerLocked.getContentWidth();
  final int dividerWidthInactive=getDisplayContent().mDividerControllerLocked.getContentWidthInactive();
  if (dockedSide == DOCKED_TOP) {
    final int minTopStackBottom=getMinTopStackBottom(displayContentRect,mBounds.bottom);
    final int bottom=Math.max(mBounds.bottom - yOffset + dividerWidth - dividerWidthInactive,minTopStackBottom);
    mTmpAdjustedBounds.set(mBounds);
    mTmpAdjustedBounds.bottom=(int)(mAdjustImeAmount * bottom + (1 - mAdjustImeAmount) * mBounds.bottom);
    mFullyAdjustedImeBounds.set(mBounds);
  }
 else {
    final int dividerWidthDelta=dividerWidthInactive - dividerWidth;
    final int topBeforeImeAdjust=mBounds.top - dividerWidth + dividerWidthInactive;
    final int minTopStackBottom=getMinTopStackBottom(displayContentRect,mBounds.top - dividerWidth);
    final int top=Math.max(mBounds.top - yOffset,minTopStackBottom + dividerWidthInactive);
    mTmpAdjustedBounds.set(mBounds);
    mTmpAdjustedBounds.top=mBounds.top + (int)(mAdjustImeAmount * (top - topBeforeImeAdjust) + mAdjustDividerAmount * dividerWidthDelta);
    mFullyAdjustedImeBounds.set(mBounds);
    mFullyAdjustedImeBounds.top=top;
    mFullyAdjustedImeBounds.bottom=top + mBounds.height();
  }
  return true;
}
