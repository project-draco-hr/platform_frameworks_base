{
  final boolean dockedStack=stackId == DOCKED_STACK_ID;
  final boolean splitHorizontally=displayRect.width() > displayRect.height();
  outBounds.set(displayRect);
  if (dockedStack) {
    if (mService.mDockedStackCreateBounds != null) {
      outBounds.set(mService.mDockedStackCreateBounds);
      return;
    }
    final DisplayInfo di=mDisplayContent.getDisplayInfo();
    mService.mPolicy.getStableInsetsLw(di.rotation,di.logicalWidth,di.logicalHeight,mTmpRect2);
    final int position=new DividerSnapAlgorithm(mService.mContext.getResources(),di.logicalWidth,di.logicalHeight,dockDividerWidth,mService.mCurConfiguration.orientation == ORIENTATION_PORTRAIT,mTmpRect2).getMiddleTarget().position;
    if (dockOnTopOrLeft) {
      if (splitHorizontally) {
        outBounds.right=position;
      }
 else {
        outBounds.bottom=position;
      }
    }
 else {
      if (splitHorizontally) {
        outBounds.left=position - dockDividerWidth;
      }
 else {
        outBounds.top=position - dockDividerWidth;
      }
    }
    return;
  }
  if (!dockOnTopOrLeft) {
    if (splitHorizontally) {
      outBounds.right=dockedBounds.left - dockDividerWidth;
    }
 else {
      outBounds.bottom=dockedBounds.top - dockDividerWidth;
    }
  }
 else {
    if (splitHorizontally) {
      outBounds.left=dockedBounds.right + dockDividerWidth;
    }
 else {
      outBounds.top=dockedBounds.bottom + dockDividerWidth;
    }
  }
  DockedDividerUtils.sanitizeStackBounds(outBounds);
}
