{
switch (ev.getActionMasked()) {
case MotionEvent.ACTION_DOWN:
{
      final float rawX=ev.getRawX();
      final float rawY=ev.getRawY();
      mTouchToWindowOffsetX=rawX - mPositionX;
      mTouchToWindowOffsetY=rawY - mPositionY;
      final int[] coords=mTempCoords;
      TextView.this.getLocationInWindow(coords);
      mLastParentX=coords[0];
      mLastParentY=coords[1];
      mIsDragging=true;
      if (mHasPastePopupWindow) {
        mTouchTimer=SystemClock.uptimeMillis();
      }
      break;
    }
case MotionEvent.ACTION_MOVE:
{
    final float rawX=ev.getRawX();
    final float rawY=ev.getRawY();
    final float newPosX=rawX - mTouchToWindowOffsetX + mHotspotX;
    final float newPosY=rawY - mTouchToWindowOffsetY + mHotspotY + mTouchOffsetY;
    mController.updatePosition(this,Math.round(newPosX),Math.round(newPosY));
    break;
  }
case MotionEvent.ACTION_UP:
if (mHasPastePopupWindow) {
  long delay=SystemClock.uptimeMillis() - mTouchTimer;
  if (delay < ViewConfiguration.getTapTimeout()) {
    final float touchOffsetX=ev.getRawX() - mPositionX;
    final float touchOffsetY=ev.getRawY() - mPositionY;
    final float dx=touchOffsetX - mTouchToWindowOffsetX;
    final float dy=touchOffsetY - mTouchToWindowOffsetY;
    final float distanceSquared=dx * dx + dy * dy;
    final ViewConfiguration viewConfiguration=ViewConfiguration.get(getContext());
    final int doubleTapSlop=viewConfiguration.getScaledDoubleTapSlop();
    final int slopSquared=doubleTapSlop * doubleTapSlop;
    if (distanceSquared < slopSquared) {
      if (mPastePopupWindow != null && mPastePopupWindow.isShowing()) {
        mPastePopupWindow.hide();
      }
 else {
        ((InsertionPointCursorController)mController).show(0);
      }
    }
  }
 else {
    mController.show();
  }
}
mIsDragging=false;
break;
case MotionEvent.ACTION_CANCEL:
mIsDragging=false;
}
return true;
}
