{
switch (event.getActionMasked()) {
case MotionEvent.ACTION_DOWN:
    final float x=event.getX();
  final float y=event.getY();
mMinTouchOffset=mMaxTouchOffset=getOffsetForPosition(x,y);
if (mGestureStayedInTapRegion) {
long duration=SystemClock.uptimeMillis() - mPreviousTapUpTime;
if (duration <= ViewConfiguration.getDoubleTapTimeout()) {
  final float deltaX=x - mDownPositionX;
  final float deltaY=y - mDownPositionY;
  final float distanceSquared=deltaX * deltaX + deltaY * deltaY;
  ViewConfiguration viewConfiguration=ViewConfiguration.get(TextView.this.getContext());
  int doubleTapSlop=viewConfiguration.getScaledDoubleTapSlop();
  boolean stayedInArea=distanceSquared < doubleTapSlop * doubleTapSlop;
  if (stayedInArea && isPositionOnText(x,y)) {
    startSelectionActionMode();
    getEditor().mDiscardNextActionUp=true;
  }
}
}
mDownPositionX=x;
mDownPositionY=y;
mGestureStayedInTapRegion=true;
break;
case MotionEvent.ACTION_POINTER_DOWN:
case MotionEvent.ACTION_POINTER_UP:
if (mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT)) {
updateMinAndMaxOffsets(event);
}
break;
case MotionEvent.ACTION_MOVE:
if (mGestureStayedInTapRegion) {
final float deltaX=event.getX() - mDownPositionX;
final float deltaY=event.getY() - mDownPositionY;
final float distanceSquared=deltaX * deltaX + deltaY * deltaY;
final ViewConfiguration viewConfiguration=ViewConfiguration.get(TextView.this.getContext());
int doubleTapTouchSlop=viewConfiguration.getScaledDoubleTapTouchSlop();
if (distanceSquared > doubleTapTouchSlop * doubleTapTouchSlop) {
mGestureStayedInTapRegion=false;
}
}
break;
case MotionEvent.ACTION_UP:
mPreviousTapUpTime=SystemClock.uptimeMillis();
break;
}
}
