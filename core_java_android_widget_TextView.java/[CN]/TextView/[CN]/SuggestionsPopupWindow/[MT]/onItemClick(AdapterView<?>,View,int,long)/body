{
  TextView textView=(TextView)view;
  Editable editable=(Editable)mText;
  SuggestionInfo suggestionInfo=mSuggestionInfos[position];
  if (suggestionInfo.suggestionIndex == DELETE_TEXT) {
    final int spanUnionStart=editable.getSpanStart(mSuggestionRangeSpan);
    int spanUnionEnd=editable.getSpanEnd(mSuggestionRangeSpan);
    if (spanUnionEnd < editable.length() && Character.isSpaceChar(editable.charAt(spanUnionEnd)) && (spanUnionStart == 0 || Character.isSpaceChar(editable.charAt(spanUnionStart - 1)))) {
      spanUnionEnd=spanUnionEnd + 1;
    }
    editable.replace(spanUnionStart,spanUnionEnd,"");
    hide();
    return;
  }
  final int spanStart=editable.getSpanStart(suggestionInfo.suggestionSpan);
  final int spanEnd=editable.getSpanEnd(suggestionInfo.suggestionSpan);
  if (spanStart < 0 || spanEnd < 0) {
    hide();
    return;
  }
  final String originalText=mText.subSequence(spanStart,spanEnd).toString();
  if (suggestionInfo.suggestionIndex == ADD_TO_DICTIONARY) {
    Intent intent=new Intent(Settings.ACTION_USER_DICTIONARY_INSERT);
    intent.putExtra("word",originalText);
    intent.setFlags(intent.getFlags() | Intent.FLAG_ACTIVITY_NEW_TASK);
    getContext().startActivity(intent);
    suggestionInfo.removeMisspelledFlag();
  }
 else {
    SuggestionSpan[] suggestionSpans=editable.getSpans(spanStart,spanEnd,SuggestionSpan.class);
    final int length=suggestionSpans.length;
    int[] suggestionSpansStarts=new int[length];
    int[] suggestionSpansEnds=new int[length];
    int[] suggestionSpansFlags=new int[length];
    for (int i=0; i < length; i++) {
      final SuggestionSpan suggestionSpan=suggestionSpans[i];
      suggestionSpansStarts[i]=editable.getSpanStart(suggestionSpan);
      suggestionSpansEnds[i]=editable.getSpanEnd(suggestionSpan);
      suggestionSpansFlags[i]=editable.getSpanFlags(suggestionSpan);
    }
    final int suggestionStart=suggestionInfo.suggestionStart;
    final int suggestionEnd=suggestionInfo.suggestionEnd;
    final String suggestion=textView.getText().subSequence(suggestionStart,suggestionEnd).toString();
    editable.replace(spanStart,spanEnd,suggestion);
    suggestionInfo.removeMisspelledFlag();
    if (!TextUtils.isEmpty(suggestionInfo.suggestionSpan.getNotificationTargetClassName())) {
      InputMethodManager imm=InputMethodManager.peekInstance();
      imm.notifySuggestionPicked(suggestionInfo.suggestionSpan,originalText,suggestionInfo.suggestionIndex);
    }
    String[] suggestions=suggestionInfo.suggestionSpan.getSuggestions();
    suggestions[suggestionInfo.suggestionIndex]=originalText;
    final int lengthDifference=suggestion.length() - (spanEnd - spanStart);
    for (int i=0; i < length; i++) {
      if (suggestionSpansStarts[i] <= spanStart && suggestionSpansEnds[i] >= spanEnd) {
        editable.setSpan(suggestionSpans[i],suggestionSpansStarts[i],suggestionSpansEnds[i] + lengthDifference,suggestionSpansFlags[i]);
      }
    }
    Selection.setSelection(editable,spanEnd + lengthDifference);
  }
  hide();
}
