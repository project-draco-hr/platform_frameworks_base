{
  if (!(mText instanceof Editable))   return;
  final int pos=TextView.this.getSelectionStart();
  Spannable spannable=(Spannable)TextView.this.mText;
  SuggestionSpan[] suggestionSpans=spannable.getSpans(pos,pos,SuggestionSpan.class);
  final int nbSpans=suggestionSpans.length;
  ViewGroup viewGroup=getViewGroup(true);
  mContainer.setContentView(viewGroup);
  int totalNbSuggestions=0;
  for (int spanIndex=0; spanIndex < nbSpans; spanIndex++) {
    SuggestionSpan suggestionSpan=suggestionSpans[spanIndex];
    final int spanStart=spannable.getSpanStart(suggestionSpan);
    final int spanEnd=spannable.getSpanEnd(suggestionSpan);
    final Long spanRange=packRangeInLong(spanStart,spanEnd);
    String[] suggestions=suggestionSpan.getSuggestions();
    int nbSuggestions=suggestions.length;
    for (int suggestionIndex=0; suggestionIndex < nbSuggestions; suggestionIndex++) {
      TextView textView=(TextView)viewGroup.getChildAt(totalNbSuggestions);
      textView.setText(suggestions[suggestionIndex]);
      textView.setTag(spanRange);
      totalNbSuggestions++;
      if (totalNbSuggestions == MAX_NUMBER_SUGGESTIONS) {
        spanIndex=nbSpans;
        break;
      }
    }
  }
  if (totalNbSuggestions == 0) {
    TextView textView=(TextView)viewGroup.getChildAt(0);
    textView.setText("No suggestions available");
    textView.setTag(NO_SUGGESTIONS);
    totalNbSuggestions++;
  }
  for (int i=0; i < MAX_NUMBER_SUGGESTIONS; i++) {
    viewGroup.getChildAt(i).setVisibility(i < totalNbSuggestions ? VISIBLE : GONE);
  }
  final int size=View.MeasureSpec.makeMeasureSpec(0,View.MeasureSpec.UNSPECIFIED);
  viewGroup.measure(size,size);
  positionAtCursor();
}
