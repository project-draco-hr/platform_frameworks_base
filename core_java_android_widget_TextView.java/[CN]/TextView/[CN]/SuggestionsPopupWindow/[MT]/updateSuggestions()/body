{
  Spannable spannable=(Spannable)TextView.this.mText;
  SuggestionSpan[] suggestionSpans=getSuggestionSpans();
  final int nbSpans=suggestionSpans.length;
  mNumberOfSuggestions=0;
  int spanUnionStart=mText.length();
  int spanUnionEnd=0;
  SuggestionSpan misspelledSpan=null;
  int underlineColor=0;
  for (int spanIndex=0; spanIndex < nbSpans; spanIndex++) {
    SuggestionSpan suggestionSpan=suggestionSpans[spanIndex];
    final int spanStart=spannable.getSpanStart(suggestionSpan);
    final int spanEnd=spannable.getSpanEnd(suggestionSpan);
    spanUnionStart=Math.min(spanStart,spanUnionStart);
    spanUnionEnd=Math.max(spanEnd,spanUnionEnd);
    if ((suggestionSpan.getFlags() & SuggestionSpan.FLAG_MISSPELLED) != 0) {
      misspelledSpan=suggestionSpan;
    }
    if (spanIndex == 0)     underlineColor=suggestionSpan.getUnderlineColor();
    String[] suggestions=suggestionSpan.getSuggestions();
    int nbSuggestions=suggestions.length;
    for (int suggestionIndex=0; suggestionIndex < nbSuggestions; suggestionIndex++) {
      SuggestionInfo suggestionInfo=mSuggestionInfos[mNumberOfSuggestions];
      suggestionInfo.suggestionSpan=suggestionSpan;
      suggestionInfo.suggestionIndex=suggestionIndex;
      suggestionInfo.text.replace(0,suggestionInfo.text.length(),suggestions[suggestionIndex]);
      mNumberOfSuggestions++;
      if (mNumberOfSuggestions == MAX_NUMBER_SUGGESTIONS) {
        spanIndex=nbSpans;
        break;
      }
    }
  }
  for (int i=0; i < mNumberOfSuggestions; i++) {
    highlightTextDifferences(mSuggestionInfos[i],spanUnionStart,spanUnionEnd);
  }
  if (misspelledSpan != null) {
    final int misspelledStart=spannable.getSpanStart(misspelledSpan);
    final int misspelledEnd=spannable.getSpanEnd(misspelledSpan);
    if (misspelledStart >= 0 && misspelledEnd > misspelledStart) {
      SuggestionInfo suggestionInfo=mSuggestionInfos[mNumberOfSuggestions];
      suggestionInfo.suggestionSpan=misspelledSpan;
      suggestionInfo.suggestionIndex=-1;
      suggestionInfo.text.replace(0,suggestionInfo.text.length(),getContext().getString(com.android.internal.R.string.addToDictionary));
      mNumberOfSuggestions++;
    }
  }
  if (mNumberOfSuggestions == 0)   return false;
  if (mSuggestionRangeSpan == null)   mSuggestionRangeSpan=new SuggestionRangeSpan();
  if (underlineColor == 0) {
    mSuggestionRangeSpan.setBackgroundColor(mHighlightColor);
  }
 else {
    final float BACKGROUND_TRANSPARENCY=0.3f;
    final int newAlpha=(int)(Color.alpha(underlineColor) * BACKGROUND_TRANSPARENCY);
    mSuggestionRangeSpan.setBackgroundColor((underlineColor & 0x00FFFFFF) + (newAlpha << 24));
  }
  spannable.setSpan(mSuggestionRangeSpan,spanUnionStart,spanUnionEnd,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  mSuggestionsAdapter.notifyDataSetChanged();
  return true;
}
