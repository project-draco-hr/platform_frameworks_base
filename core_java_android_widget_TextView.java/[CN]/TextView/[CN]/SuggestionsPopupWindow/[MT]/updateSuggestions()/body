{
  Spannable spannable=(Spannable)TextView.this.mText;
  SuggestionSpan[] suggestionSpans=getSuggestionSpans();
  final int nbSpans=suggestionSpans.length;
  mNumberOfSuggestions=0;
  int spanUnionStart=mText.length();
  int spanUnionEnd=0;
  for (int spanIndex=0; spanIndex < nbSpans; spanIndex++) {
    SuggestionSpan suggestionSpan=suggestionSpans[spanIndex];
    final int spanStart=spannable.getSpanStart(suggestionSpan);
    final int spanEnd=spannable.getSpanEnd(suggestionSpan);
    spanUnionStart=Math.min(spanStart,spanUnionStart);
    spanUnionEnd=Math.max(spanEnd,spanUnionEnd);
    String[] suggestions=suggestionSpan.getSuggestions();
    int nbSuggestions=suggestions.length;
    for (int suggestionIndex=0; suggestionIndex < nbSuggestions; suggestionIndex++) {
      SuggestionInfo suggestionInfo=mSuggestionInfos[mNumberOfSuggestions];
      suggestionInfo.spanStart=spanStart;
      suggestionInfo.spanEnd=spanEnd;
      suggestionInfo.suggestionSpan=suggestionSpan;
      suggestionInfo.suggestionIndex=suggestionIndex;
      suggestionInfo.text=new SpannableStringBuilder(suggestions[suggestionIndex]);
      mNumberOfSuggestions++;
      if (mNumberOfSuggestions == MAX_NUMBER_SUGGESTIONS) {
        spanIndex=nbSpans;
        break;
      }
    }
  }
  if (mNumberOfSuggestions == 0)   return false;
  if (mSuggestionRangeSpan == null)   mSuggestionRangeSpan=new SuggestionRangeSpan(mHighlightColor);
  ((Editable)mText).setSpan(mSuggestionRangeSpan,spanUnionStart,spanUnionEnd,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  for (int i=0; i < mNumberOfSuggestions; i++) {
    highlightTextDifferences(mSuggestionInfos[i],spanUnionStart,spanUnionEnd);
  }
  mSuggestionsAdapter.notifyDataSetChanged();
  return true;
}
