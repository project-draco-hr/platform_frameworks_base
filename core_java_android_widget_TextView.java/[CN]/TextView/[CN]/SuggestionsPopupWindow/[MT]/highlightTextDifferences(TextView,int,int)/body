{
  SuggestionInfo suggestionInfo=(SuggestionInfo)textView.getTag();
  final int spanStart=suggestionInfo.spanStart;
  final int spanEnd=suggestionInfo.spanEnd;
  final String text=textView.getText().toString();
  final String sourceText=mText.subSequence(spanStart,spanEnd).toString();
  long[] sourceWordLimits=getWordLimits(sourceText);
  long[] wordLimits=getWordLimits(text);
  SpannableStringBuilder ssb=new SpannableStringBuilder();
  ssb.append(mText.subSequence(unionStart,spanStart).toString());
  final int shift=spanStart - unionStart;
  suggestionInfo.suggestionStart=shift;
  suggestionInfo.suggestionEnd=shift + text.length();
  ssb.append(text);
  String[] words=new String[wordLimits.length];
  for (int i=0; i < wordLimits.length; i++) {
    int wordStart=extractRangeStartFromLong(wordLimits[i]);
    int wordEnd=extractRangeEndFromLong(wordLimits[i]);
    words[i]=text.substring(wordStart,wordEnd);
  }
  int previousCommonWordIndex=-1;
  int nbHighlightSpans=0;
  for (int i=0; i < sourceWordLimits.length; i++) {
    int wordStart=extractRangeStartFromLong(sourceWordLimits[i]);
    int wordEnd=extractRangeEndFromLong(sourceWordLimits[i]);
    String sourceWord=sourceText.substring(wordStart,wordEnd);
    for (int j=previousCommonWordIndex + 1; j < words.length; j++) {
      if (sourceWord.equals(words[j])) {
        if (j != previousCommonWordIndex + 1) {
          int firstDifferentPosition=previousCommonWordIndex < 0 ? 0 : extractRangeEndFromLong(wordLimits[previousCommonWordIndex]);
          int lastDifferentPosition=extractRangeStartFromLong(wordLimits[j]);
          ssb.setSpan(highlightSpan(nbHighlightSpans++),shift + firstDifferentPosition,shift + lastDifferentPosition,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
        }
 else {
          int previousSourceWordEnd=i == 0 ? 0 : extractRangeEndFromLong(sourceWordLimits[i - 1]);
          int sourceWordStart=extractRangeStartFromLong(sourceWordLimits[i]);
          String sourceSpaces=sourceText.substring(previousSourceWordEnd,sourceWordStart);
          int previousWordEnd=j == 0 ? 0 : extractRangeEndFromLong(wordLimits[j - 1]);
          int currentWordStart=extractRangeStartFromLong(wordLimits[j]);
          String textSpaces=text.substring(previousWordEnd,currentWordStart);
          if (!sourceSpaces.equals(textSpaces)) {
            ssb.setSpan(highlightSpan(nbHighlightSpans++),shift + previousWordEnd,shift + currentWordStart,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
          }
        }
        previousCommonWordIndex=j;
        break;
      }
    }
  }
  if (previousCommonWordIndex < words.length - 1) {
    int firstDifferentPosition=previousCommonWordIndex < 0 ? 0 : extractRangeEndFromLong(wordLimits[previousCommonWordIndex]);
    int lastDifferentPosition=textView.length();
    ssb.setSpan(highlightSpan(nbHighlightSpans++),shift + firstDifferentPosition,shift + lastDifferentPosition,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  }
 else {
    int lastSourceWordEnd=sourceWordLimits.length == 0 ? 0 : extractRangeEndFromLong(sourceWordLimits[sourceWordLimits.length - 1]);
    String sourceSpaces=sourceText.substring(lastSourceWordEnd,sourceText.length());
    int lastCommonTextWordEnd=previousCommonWordIndex < 0 ? 0 : extractRangeEndFromLong(wordLimits[previousCommonWordIndex]);
    String textSpaces=text.substring(lastCommonTextWordEnd,textView.length());
    if (!sourceSpaces.equals(textSpaces) && textSpaces.length() > 0) {
      ssb.setSpan(highlightSpan(nbHighlightSpans++),shift + lastCommonTextWordEnd,shift + textView.length(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
    }
  }
  ssb.append(mText.subSequence(spanEnd,unionEnd).toString());
  textView.setText(ssb);
}
