{
  final int itemId=item.getItemId();
  if (itemId == ID_SELECT_ALL) {
    Selection.setSelection((Spannable)mText,0,mText.length());
    if (mSelectionModifierCursorController != null) {
      mSelectionModifierCursorController.show();
    }
    return true;
  }
  ClipboardManager clipboard=(ClipboardManager)getContext().getSystemService(Context.CLIPBOARD_SERVICE);
  int min=0;
  int max=mText.length();
  if (isFocused()) {
    final int selStart=getSelectionStart();
    final int selEnd=getSelectionEnd();
    min=Math.max(0,Math.min(selStart,selEnd));
    max=Math.max(0,Math.max(selStart,selEnd));
  }
switch (item.getItemId()) {
case ID_PASTE:
    ClippedData clip=clipboard.getPrimaryClip();
  if (clip != null) {
    boolean didfirst=false;
    for (int i=0; i < clip.getItemCount(); i++) {
      CharSequence paste=clip.getItem(i).coerceToText(getContext());
      if (paste != null) {
        if (!didfirst) {
          Selection.setSelection((Spannable)mText,max);
          ((Editable)mText).replace(min,max,paste);
        }
 else {
          ((Editable)mText).insert(getSelectionEnd(),"\n");
          ((Editable)mText).insert(getSelectionEnd(),paste);
        }
      }
    }
    stopSelectionActionMode();
  }
return true;
case ID_CUT:
clipboard.setPrimaryClip(new ClippedData(null,null,new ClippedData.Item(mTransformed.subSequence(min,max))));
((Editable)mText).delete(min,max);
stopSelectionActionMode();
return true;
case ID_COPY:
clipboard.setPrimaryClip(new ClippedData(null,null,new ClippedData.Item(mTransformed.subSequence(min,max))));
stopSelectionActionMode();
return true;
}
return false;
}
