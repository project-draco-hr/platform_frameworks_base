{
  final int width=mRight - mLeft;
  final int height=mBottom - mTop;
  final long lineRange=layout.getLineRangeForDraw(canvas);
  int firstLine=TextUtils.unpackRangeStartFromLong(lineRange);
  int lastLine=TextUtils.unpackRangeEndFromLong(lineRange);
  if (lastLine < 0)   return;
  layout.drawBackground(canvas,highlight,mHighlightPaint,cursorOffsetVertical,firstLine,lastLine);
  if (mTextDisplayList == null || !mTextDisplayList.isValid()) {
    boolean displayListCreated=false;
    if (mTextDisplayList == null) {
      mTextDisplayList=getHardwareRenderer().createDisplayList("Text");
      displayListCreated=true;
    }
    final HardwareCanvas hardwareCanvas=mTextDisplayList.start();
    try {
      hardwareCanvas.setViewport(width,height);
      hardwareCanvas.onPreDraw(null);
      hardwareCanvas.translate(-mScrollX,-mScrollY);
      layout.drawText(hardwareCanvas,firstLine,lastLine);
      hardwareCanvas.translate(mScrollX,mScrollY);
    }
  finally {
      hardwareCanvas.onPostDraw();
      mTextDisplayList.end();
      if (displayListCreated && USE_DISPLAY_LIST_PROPERTIES) {
        mTextDisplayList.setLeftTopRightBottom(mLeft,mTop,mRight,mBottom);
      }
    }
  }
  canvas.translate(mScrollX,mScrollY);
  ((HardwareCanvas)canvas).drawDisplayList(mTextDisplayList,width,height,null,DisplayList.FLAG_CLIP_CHILDREN);
  canvas.translate(-mScrollX,-mScrollY);
}
