{
  final int action=event.getActionMasked();
  if (mEditor != null && action == MotionEvent.ACTION_DOWN) {
    final boolean isMouse=event.isFromSource(InputDevice.SOURCE_MOUSE);
    if ((mFirstTouch || (mEditor.mDoubleTap && isMouse)) && (SystemClock.uptimeMillis() - mLastTouchUpTime) <= ViewConfiguration.getDoubleTapTimeout()) {
      if (mFirstTouch) {
        mEditor.mTripleClick=false;
        mEditor.mDoubleTap=true;
        mFirstTouch=false;
      }
 else {
        mEditor.mTripleClick=true;
        mEditor.mDoubleTap=false;
        mFirstTouch=false;
      }
    }
 else {
      mEditor.mTripleClick=false;
      mEditor.mDoubleTap=false;
      mFirstTouch=true;
    }
  }
  if (action == MotionEvent.ACTION_UP) {
    mLastTouchUpTime=SystemClock.uptimeMillis();
  }
  if (mEditor != null) {
    mEditor.onTouchEvent(event);
    if (mEditor.mSelectionModifierCursorController != null && mEditor.mSelectionModifierCursorController.isDragAcceleratorActive()) {
      return true;
    }
  }
  final boolean superResult=super.onTouchEvent(event);
  if (mEditor != null && mEditor.mDiscardNextActionUp && action == MotionEvent.ACTION_UP) {
    mEditor.mDiscardNextActionUp=false;
    if (mEditor.mIsInsertionActionModeStartPending) {
      mEditor.startInsertionActionMode();
      mEditor.mIsInsertionActionModeStartPending=false;
    }
    return superResult;
  }
  final boolean touchIsFinished=(action == MotionEvent.ACTION_UP) && (mEditor == null || !mEditor.mIgnoreActionUpEvent) && isFocused();
  if ((mMovement != null || onCheckIsTextEditor()) && isEnabled() && mText instanceof Spannable&& mLayout != null) {
    boolean handled=false;
    if (mMovement != null) {
      handled|=mMovement.onTouchEvent(this,(Spannable)mText,event);
    }
    final boolean textIsSelectable=isTextSelectable();
    if (touchIsFinished && mLinksClickable && mAutoLinkMask != 0 && textIsSelectable) {
      ClickableSpan[] links=((Spannable)mText).getSpans(getSelectionStart(),getSelectionEnd(),ClickableSpan.class);
      if (links.length > 0) {
        links[0].onClick(this);
        handled=true;
      }
    }
    if (touchIsFinished && (isTextEditable() || textIsSelectable)) {
      final InputMethodManager imm=InputMethodManager.peekInstance();
      viewClicked(imm);
      if (!textIsSelectable && mEditor.mShowSoftInputOnFocus) {
        handled|=imm != null && imm.showSoftInput(this,0);
      }
      mEditor.onTouchUpEvent(event);
      handled=true;
    }
    if (handled) {
      return true;
    }
  }
  return superResult;
}
