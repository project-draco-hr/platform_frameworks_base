{
  final int action=event.getAction();
  if (action == MotionEvent.ACTION_DOWN) {
    mTouchFocusSelected=false;
    mScrolled=false;
  }
  final boolean superResult=super.onTouchEvent(event);
  if (mEatTouchRelease && action == MotionEvent.ACTION_UP) {
    mEatTouchRelease=false;
    return superResult;
  }
  if ((mMovement != null || onCheckIsTextEditor()) && mText instanceof Spannable && mLayout != null) {
    boolean handled=false;
    int oldSelStart=Selection.getSelectionStart(mText);
    int oldSelEnd=Selection.getSelectionEnd(mText);
    if (mMovement != null) {
      handled|=mMovement.onTouchEvent(this,(Spannable)mText,event);
    }
    if (mText instanceof Editable && onCheckIsTextEditor()) {
      if (action == MotionEvent.ACTION_UP && isFocused() && !mScrolled) {
        InputMethodManager imm=(InputMethodManager)getContext().getSystemService(Context.INPUT_METHOD_SERVICE);
        int newSelStart=Selection.getSelectionStart(mText);
        int newSelEnd=Selection.getSelectionEnd(mText);
        CommitSelectionReceiver csr=null;
        if (newSelStart != oldSelStart || newSelEnd != oldSelEnd) {
          csr=new CommitSelectionReceiver();
          csr.mNewStart=newSelStart;
          csr.mNewEnd=newSelEnd;
        }
        if (imm.showSoftInput(this,0,csr) && csr != null) {
          Selection.setSelection((Spannable)mText,oldSelStart,oldSelEnd);
          handled=true;
        }
      }
    }
    if (handled) {
      return true;
    }
  }
  return superResult;
}
