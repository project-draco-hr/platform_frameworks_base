{
  if (mCurrentAlpha <= ViewConfiguration.ALPHA_THRESHOLD_INT)   return;
  restartMarqueeIfNeeded();
  super.onDraw(canvas);
  final int compoundPaddingLeft=getCompoundPaddingLeft();
  final int compoundPaddingTop=getCompoundPaddingTop();
  final int compoundPaddingRight=getCompoundPaddingRight();
  final int compoundPaddingBottom=getCompoundPaddingBottom();
  final int scrollX=mScrollX;
  final int scrollY=mScrollY;
  final int right=mRight;
  final int left=mLeft;
  final int bottom=mBottom;
  final int top=mTop;
  final Drawables dr=mDrawables;
  if (dr != null) {
    int vspace=bottom - top - compoundPaddingBottom- compoundPaddingTop;
    int hspace=right - left - compoundPaddingRight- compoundPaddingLeft;
    if (dr.mDrawableLeft != null) {
      canvas.save();
      canvas.translate(scrollX + mPaddingLeft,scrollY + compoundPaddingTop + (vspace - dr.mDrawableHeightLeft) / 2);
      dr.mDrawableLeft.draw(canvas);
      canvas.restore();
    }
    if (dr.mDrawableRight != null) {
      canvas.save();
      canvas.translate(scrollX + right - left - mPaddingRight - dr.mDrawableSizeRight,scrollY + compoundPaddingTop + (vspace - dr.mDrawableHeightRight) / 2);
      dr.mDrawableRight.draw(canvas);
      canvas.restore();
    }
    if (dr.mDrawableTop != null) {
      canvas.save();
      canvas.translate(scrollX + compoundPaddingLeft + (hspace - dr.mDrawableWidthTop) / 2,scrollY + mPaddingTop);
      dr.mDrawableTop.draw(canvas);
      canvas.restore();
    }
    if (dr.mDrawableBottom != null) {
      canvas.save();
      canvas.translate(scrollX + compoundPaddingLeft + (hspace - dr.mDrawableWidthBottom) / 2,scrollY + bottom - top - mPaddingBottom - dr.mDrawableSizeBottom);
      dr.mDrawableBottom.draw(canvas);
      canvas.restore();
    }
  }
  int color=mCurTextColor;
  if (mLayout == null) {
    assumeLayout();
  }
  Layout layout=mLayout;
  if (mHint != null && mText.length() == 0) {
    if (mHintTextColor != null) {
      color=mCurHintTextColor;
    }
    layout=mHintLayout;
  }
  mTextPaint.setColor(color);
  if (mCurrentAlpha != 255) {
    mTextPaint.setAlpha((mCurrentAlpha * Color.alpha(color)) / 255);
  }
  mTextPaint.drawableState=getDrawableState();
  canvas.save();
  int extendedPaddingTop=getExtendedPaddingTop();
  int extendedPaddingBottom=getExtendedPaddingBottom();
  final int vspace=mBottom - mTop - compoundPaddingBottom- compoundPaddingTop;
  final int maxScrollY=mLayout.getHeight() - vspace;
  float clipLeft=compoundPaddingLeft + scrollX;
  float clipTop=(scrollY == 0) ? 0 : extendedPaddingTop + scrollY;
  float clipRight=right - left - compoundPaddingRight + scrollX;
  float clipBottom=bottom - top + scrollY - ((scrollY == maxScrollY) ? 0 : extendedPaddingBottom);
  if (mShadowRadius != 0) {
    clipLeft+=Math.min(0,mShadowDx - mShadowRadius);
    clipRight+=Math.max(0,mShadowDx + mShadowRadius);
    clipTop+=Math.min(0,mShadowDy - mShadowRadius);
    clipBottom+=Math.max(0,mShadowDy + mShadowRadius);
  }
  canvas.clipRect(clipLeft,clipTop,clipRight,clipBottom);
  int voffsetText=0;
  int voffsetCursor=0;
  if ((mGravity & Gravity.VERTICAL_GRAVITY_MASK) != Gravity.TOP) {
    voffsetText=getVerticalOffset(false);
    voffsetCursor=getVerticalOffset(true);
  }
  canvas.translate(compoundPaddingLeft,extendedPaddingTop + voffsetText);
  final int layoutDirection=getResolvedLayoutDirection();
  final int absoluteGravity=Gravity.getAbsoluteGravity(mGravity,layoutDirection);
  if (mEllipsize == TextUtils.TruncateAt.MARQUEE && mMarqueeFadeMode != MARQUEE_FADE_SWITCH_SHOW_ELLIPSIS) {
    if (!mSingleLine && getLineCount() == 1 && canMarquee() && (absoluteGravity & Gravity.HORIZONTAL_GRAVITY_MASK) != Gravity.LEFT) {
      canvas.translate(mLayout.getLineRight(0) - (mRight - mLeft - getCompoundPaddingLeft()- getCompoundPaddingRight()),0.0f);
    }
    if (mMarquee != null && mMarquee.isRunning()) {
      canvas.translate(-mMarquee.mScroll,0.0f);
    }
  }
  final int cursorOffsetVertical=voffsetCursor - voffsetText;
  Path highlight=getUpdatedHighlightPath();
  if (mEditor != null) {
    getEditor().onDraw(canvas,layout,highlight,mHighlightPaint,cursorOffsetVertical);
  }
 else {
    layout.draw(canvas,highlight,mHighlightPaint,cursorOffsetVertical);
  }
  if (mMarquee != null && mMarquee.shouldDrawGhost()) {
    canvas.translate((int)mMarquee.getGhostOffset(),0.0f);
    layout.draw(canvas,highlight,mHighlightPaint,cursorOffsetVertical);
  }
  canvas.restore();
}
