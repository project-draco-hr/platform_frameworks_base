{
  if (mCurrentAlpha <= ViewConfiguration.ALPHA_THRESHOLD_INT)   return;
  restartMarqueeIfNeeded();
  super.onDraw(canvas);
  final int compoundPaddingLeft=getCompoundPaddingLeft();
  final int compoundPaddingTop=getCompoundPaddingTop();
  final int compoundPaddingRight=getCompoundPaddingRight();
  final int compoundPaddingBottom=getCompoundPaddingBottom();
  final int scrollX=mScrollX;
  final int scrollY=mScrollY;
  final int right=mRight;
  final int left=mLeft;
  final int bottom=mBottom;
  final int top=mTop;
  final Drawables dr=mDrawables;
  if (dr != null) {
    int vspace=bottom - top - compoundPaddingBottom- compoundPaddingTop;
    int hspace=right - left - compoundPaddingRight- compoundPaddingLeft;
    if (dr.mDrawableLeft != null) {
      canvas.save();
      canvas.translate(scrollX + mPaddingLeft,scrollY + compoundPaddingTop + (vspace - dr.mDrawableHeightLeft) / 2);
      dr.mDrawableLeft.draw(canvas);
      canvas.restore();
    }
    if (dr.mDrawableRight != null) {
      canvas.save();
      canvas.translate(scrollX + right - left - mPaddingRight - dr.mDrawableSizeRight,scrollY + compoundPaddingTop + (vspace - dr.mDrawableHeightRight) / 2);
      dr.mDrawableRight.draw(canvas);
      canvas.restore();
    }
    if (dr.mDrawableTop != null) {
      canvas.save();
      canvas.translate(scrollX + compoundPaddingLeft + (hspace - dr.mDrawableWidthTop) / 2,scrollY + mPaddingTop);
      dr.mDrawableTop.draw(canvas);
      canvas.restore();
    }
    if (dr.mDrawableBottom != null) {
      canvas.save();
      canvas.translate(scrollX + compoundPaddingLeft + (hspace - dr.mDrawableWidthBottom) / 2,scrollY + bottom - top - mPaddingBottom - dr.mDrawableSizeBottom);
      dr.mDrawableBottom.draw(canvas);
      canvas.restore();
    }
  }
  if (mPreDrawState == PREDRAW_DONE) {
    final ViewTreeObserver observer=getViewTreeObserver();
    if (observer != null) {
      observer.removeOnPreDrawListener(this);
      mPreDrawState=PREDRAW_NOT_REGISTERED;
    }
  }
  int color=mCurTextColor;
  if (mLayout == null) {
    assumeLayout();
  }
  Layout layout=mLayout;
  int cursorcolor=color;
  if (mHint != null && mText.length() == 0) {
    if (mHintTextColor != null) {
      color=mCurHintTextColor;
    }
    layout=mHintLayout;
  }
  mTextPaint.setColor(color);
  if (mCurrentAlpha != 255) {
    mTextPaint.setAlpha((mCurrentAlpha * Color.alpha(color)) / 255);
  }
  mTextPaint.drawableState=getDrawableState();
  canvas.save();
  int extendedPaddingTop=getExtendedPaddingTop();
  int extendedPaddingBottom=getExtendedPaddingBottom();
  float clipLeft=compoundPaddingLeft + scrollX;
  float clipTop=extendedPaddingTop + scrollY;
  float clipRight=right - left - compoundPaddingRight + scrollX;
  float clipBottom=bottom - top - extendedPaddingBottom + scrollY;
  if (mShadowRadius != 0) {
    clipLeft+=Math.min(0,mShadowDx - mShadowRadius);
    clipRight+=Math.max(0,mShadowDx + mShadowRadius);
    clipTop+=Math.min(0,mShadowDy - mShadowRadius);
    clipBottom+=Math.max(0,mShadowDy + mShadowRadius);
  }
  canvas.clipRect(clipLeft,clipTop,clipRight,clipBottom);
  int voffsetText=0;
  int voffsetCursor=0;
{
    if ((mGravity & Gravity.VERTICAL_GRAVITY_MASK) != Gravity.TOP) {
      voffsetText=getVerticalOffset(false);
      voffsetCursor=getVerticalOffset(true);
    }
    canvas.translate(compoundPaddingLeft,extendedPaddingTop + voffsetText);
  }
  if (mEllipsize == TextUtils.TruncateAt.MARQUEE) {
    if (!mSingleLine && getLineCount() == 1 && canMarquee() && (mGravity & Gravity.HORIZONTAL_GRAVITY_MASK) != Gravity.LEFT) {
      canvas.translate(mLayout.getLineRight(0) - (mRight - mLeft - getCompoundPaddingLeft()- getCompoundPaddingRight()),0.0f);
    }
    if (mMarquee != null && mMarquee.isRunning()) {
      canvas.translate(-mMarquee.mScroll,0.0f);
    }
  }
  Path highlight=null;
  int selStart=-1, selEnd=-1;
  if (mMovement != null && (isFocused() || isPressed())) {
    selStart=getSelectionStart();
    selEnd=getSelectionEnd();
    if ((mCursorVisible || mTextIsSelectable) && selStart >= 0 && isEnabled()) {
      if (mHighlightPath == null)       mHighlightPath=new Path();
      if (selStart == selEnd) {
        if (!mTextIsSelectable && (SystemClock.uptimeMillis() - mShowCursor) % (2 * BLINK) < BLINK) {
          if (mHighlightPathBogus) {
            mHighlightPath.reset();
            mLayout.getCursorPath(selStart,mHighlightPath,mText);
            mHighlightPathBogus=false;
          }
          mHighlightPaint.setColor(cursorcolor);
          if (mCurrentAlpha != 255) {
            mHighlightPaint.setAlpha((mCurrentAlpha * Color.alpha(cursorcolor)) / 255);
          }
          mHighlightPaint.setStyle(Paint.Style.STROKE);
          highlight=mHighlightPath;
        }
      }
 else {
        if (mHighlightPathBogus) {
          mHighlightPath.reset();
          mLayout.getSelectionPath(selStart,selEnd,mHighlightPath);
          mHighlightPathBogus=false;
        }
        mHighlightPaint.setColor(mHighlightColor);
        if (mCurrentAlpha != 255) {
          mHighlightPaint.setAlpha((mCurrentAlpha * Color.alpha(mHighlightColor)) / 255);
        }
        mHighlightPaint.setStyle(Paint.Style.FILL);
        highlight=mHighlightPath;
      }
    }
  }
  final InputMethodState ims=mInputMethodState;
  final int cursorOffsetVertical=voffsetCursor - voffsetText;
  if (ims != null && ims.mBatchEditNesting == 0) {
    InputMethodManager imm=InputMethodManager.peekInstance();
    if (imm != null) {
      if (imm.isActive(this)) {
        boolean reported=false;
        if (ims.mContentChanged || ims.mSelectionModeChanged) {
          reported=reportExtractedText();
        }
        if (!reported && highlight != null) {
          int candStart=-1;
          int candEnd=-1;
          if (mText instanceof Spannable) {
            Spannable sp=(Spannable)mText;
            candStart=EditableInputConnection.getComposingSpanStart(sp);
            candEnd=EditableInputConnection.getComposingSpanEnd(sp);
          }
          imm.updateSelection(this,selStart,selEnd,candStart,candEnd);
        }
      }
      if (imm.isWatchingCursor(this) && highlight != null) {
        highlight.computeBounds(ims.mTmpRectF,true);
        ims.mTmpOffset[0]=ims.mTmpOffset[1]=0;
        canvas.getMatrix().mapPoints(ims.mTmpOffset);
        ims.mTmpRectF.offset(ims.mTmpOffset[0],ims.mTmpOffset[1]);
        ims.mTmpRectF.offset(0,cursorOffsetVertical);
        ims.mCursorRectInWindow.set((int)(ims.mTmpRectF.left + 0.5),(int)(ims.mTmpRectF.top + 0.5),(int)(ims.mTmpRectF.right + 0.5),(int)(ims.mTmpRectF.bottom + 0.5));
        imm.updateCursor(this,ims.mCursorRectInWindow.left,ims.mCursorRectInWindow.top,ims.mCursorRectInWindow.right,ims.mCursorRectInWindow.bottom);
      }
    }
  }
  if (mCorrectionHighlighter != null) {
    mCorrectionHighlighter.draw(canvas,cursorOffsetVertical);
  }
  layout.draw(canvas,highlight,mHighlightPaint,cursorOffsetVertical);
  if (mMarquee != null && mMarquee.shouldDrawGhost()) {
    canvas.translate((int)mMarquee.getGhostOffset(),0.0f);
    layout.draw(canvas,highlight,mHighlightPaint,cursorOffsetVertical);
  }
  canvas.restore();
  updateCursorControllerPositions();
}
