{
  super.onDraw(canvas);
  final int compoundPaddingLeft=getCompoundPaddingLeft();
  final int compoundPaddingTop=getCompoundPaddingTop();
  final int compoundPaddingRight=getCompoundPaddingRight();
  final int compoundPaddingBottom=getCompoundPaddingBottom();
  final int scrollX=mScrollX;
  final int scrollY=mScrollY;
  final int right=mRight;
  final int left=mLeft;
  final int bottom=mBottom;
  final int top=mTop;
  if (mDrawables) {
    int vspace=bottom - top - compoundPaddingBottom- compoundPaddingTop;
    int hspace=right - left - compoundPaddingRight- compoundPaddingLeft;
    if (mDrawableLeft != null) {
      canvas.save();
      canvas.translate(scrollX + mPaddingLeft,scrollY + compoundPaddingTop + (vspace - mDrawableHeightLeft) / 2);
      mDrawableLeft.draw(canvas);
      canvas.restore();
    }
    if (mDrawableRight != null) {
      canvas.save();
      canvas.translate(scrollX + right - left - mPaddingRight - mDrawableSizeRight,scrollY + compoundPaddingTop + (vspace - mDrawableHeightRight) / 2);
      mDrawableRight.draw(canvas);
      canvas.restore();
    }
    if (mDrawableTop != null) {
      canvas.save();
      canvas.translate(scrollX + compoundPaddingLeft + (hspace - mDrawableWidthTop) / 2,scrollY + mPaddingTop);
      mDrawableTop.draw(canvas);
      canvas.restore();
    }
    if (mDrawableBottom != null) {
      canvas.save();
      canvas.translate(scrollX + compoundPaddingLeft + (hspace - mDrawableWidthBottom) / 2,scrollY + bottom - top - mPaddingBottom - mDrawableSizeBottom);
      mDrawableBottom.draw(canvas);
      canvas.restore();
    }
  }
  if (mPreDrawState == PREDRAW_DONE) {
    final ViewTreeObserver observer=getViewTreeObserver();
    if (observer != null) {
      observer.removeOnPreDrawListener(this);
      mPreDrawState=PREDRAW_NOT_REGISTERED;
    }
  }
  int color=mCurTextColor;
  if (mLayout == null) {
    assumeLayout();
  }
  Layout layout=mLayout;
  int cursorcolor=color;
  if (mHint != null && mText.length() == 0) {
    if (mHintTextColor != null) {
      color=mCurHintTextColor;
    }
    layout=mHintLayout;
  }
  mTextPaint.setColor(color);
  mTextPaint.drawableState=getDrawableState();
  canvas.save();
  int extendedPaddingTop=getExtendedPaddingTop();
  int extendedPaddingBottom=getExtendedPaddingBottom();
  float clipLeft=compoundPaddingLeft + scrollX;
  float clipTop=extendedPaddingTop + scrollY;
  float clipRight=right - left - compoundPaddingRight + scrollX;
  float clipBottom=bottom - top - extendedPaddingBottom + scrollY;
  if (mShadowRadius != 0) {
    clipLeft+=Math.min(0,mShadowDx - mShadowRadius);
    clipRight+=Math.max(0,mShadowDx + mShadowRadius);
    clipTop+=Math.min(0,mShadowDy - mShadowRadius);
    clipBottom+=Math.max(0,mShadowDy + mShadowRadius);
  }
  canvas.clipRect(clipLeft,clipTop,clipRight,clipBottom);
  int voffsetText=0;
  int voffsetCursor=0;
{
    if ((mGravity & Gravity.VERTICAL_GRAVITY_MASK) != Gravity.TOP) {
      voffsetText=getVerticalOffset(false);
      voffsetCursor=getVerticalOffset(true);
    }
    canvas.translate(compoundPaddingLeft,extendedPaddingTop + voffsetText);
  }
  Path highlight=null;
  if (mMovement != null && (isFocused() || isPressed())) {
    int start=Selection.getSelectionStart(mText);
    int end=Selection.getSelectionEnd(mText);
    if (mCursorVisible && start >= 0 && isEnabled()) {
      if (mHighlightPath == null)       mHighlightPath=new Path();
      if (start == end) {
        if ((SystemClock.uptimeMillis() - mShowCursor) % (2 * BLINK) < BLINK) {
          if (mHighlightPathBogus) {
            mHighlightPath.reset();
            mLayout.getCursorPath(start,mHighlightPath,mText);
            mHighlightPathBogus=false;
          }
          mHighlightPaint.setColor(cursorcolor);
          mHighlightPaint.setStyle(Paint.Style.STROKE);
          highlight=mHighlightPath;
        }
      }
 else {
        if (mHighlightPathBogus) {
          mHighlightPath.reset();
          mLayout.getSelectionPath(start,end,mHighlightPath);
          mHighlightPathBogus=false;
        }
        mHighlightPaint.setColor(mHighlightColor);
        mHighlightPaint.setStyle(Paint.Style.FILL);
        highlight=mHighlightPath;
      }
    }
  }
  layout.draw(canvas,highlight,mHighlightPaint,voffsetCursor - voffsetText);
  canvas.restore();
}
