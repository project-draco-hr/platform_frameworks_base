{
switch (action) {
case AccessibilityNodeInfo.ACTION_CLICK:
{
      boolean handled=false;
      if (isClickable() || isLongClickable()) {
        if (isFocusable() && !isFocused()) {
          requestFocus();
        }
        performClick();
        handled=true;
      }
      if ((mMovement != null || onCheckIsTextEditor()) && isEnabled() && mText instanceof Spannable&& mLayout != null && (isTextEditable() || isTextSelectable()) && isFocused()) {
        final InputMethodManager imm=InputMethodManager.peekInstance();
        viewClicked(imm);
        if (!isTextSelectable() && mEditor.mShowSoftInputOnFocus && imm != null) {
          handled|=imm.showSoftInput(this,0);
        }
      }
      return handled;
    }
case AccessibilityNodeInfo.ACTION_COPY:
{
    if (isFocused() && canCopy()) {
      if (onTextContextMenuItem(ID_COPY)) {
        return true;
      }
    }
  }
return false;
case AccessibilityNodeInfo.ACTION_PASTE:
{
if (isFocused() && canPaste()) {
  if (onTextContextMenuItem(ID_PASTE)) {
    return true;
  }
}
}
return false;
case AccessibilityNodeInfo.ACTION_CUT:
{
if (isFocused() && canCut()) {
if (onTextContextMenuItem(ID_CUT)) {
return true;
}
}
}
return false;
case AccessibilityNodeInfo.ACTION_SET_SELECTION:
{
if (isFocused() && canSelectText()) {
ensureIterableTextForAccessibilitySelectable();
CharSequence text=getIterableTextForAccessibility();
if (text == null) {
return false;
}
final int start=(arguments != null) ? arguments.getInt(AccessibilityNodeInfo.ACTION_ARGUMENT_SELECTION_START_INT,-1) : -1;
final int end=(arguments != null) ? arguments.getInt(AccessibilityNodeInfo.ACTION_ARGUMENT_SELECTION_END_INT,-1) : -1;
if ((getSelectionStart() != start || getSelectionEnd() != end)) {
if (start == end && end == -1) {
Selection.removeSelection((Spannable)text);
return true;
}
if (start >= 0 && start <= end && end <= text.length()) {
Selection.setSelection((Spannable)text,start,end);
if (mEditor != null) {
mEditor.startSelectionActionMode();
}
return true;
}
}
}
}
return false;
case AccessibilityNodeInfo.ACTION_NEXT_AT_MOVEMENT_GRANULARITY:
case AccessibilityNodeInfo.ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY:
{
ensureIterableTextForAccessibilitySelectable();
return super.performAccessibilityAction(action,arguments);
}
default :
{
return super.performAccessibilityAction(action,arguments);
}
}
}
