{
  Layout.Alignment alignment;
switch (getTextAlignment()) {
case TEXT_ALIGNMENT_GRAVITY:
switch (mGravity & Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK) {
case Gravity.START:
      alignment=Layout.Alignment.ALIGN_NORMAL;
    break;
case Gravity.END:
  alignment=Layout.Alignment.ALIGN_OPPOSITE;
break;
case Gravity.LEFT:
alignment=Layout.Alignment.ALIGN_LEFT;
break;
case Gravity.RIGHT:
alignment=Layout.Alignment.ALIGN_RIGHT;
break;
case Gravity.CENTER_HORIZONTAL:
alignment=Layout.Alignment.ALIGN_CENTER;
break;
default :
alignment=Layout.Alignment.ALIGN_NORMAL;
break;
}
break;
case TEXT_ALIGNMENT_TEXT_START:
alignment=Layout.Alignment.ALIGN_NORMAL;
break;
case TEXT_ALIGNMENT_TEXT_END:
alignment=Layout.Alignment.ALIGN_OPPOSITE;
break;
case TEXT_ALIGNMENT_CENTER:
alignment=Layout.Alignment.ALIGN_CENTER;
break;
case TEXT_ALIGNMENT_VIEW_START:
alignment=(getLayoutDirection() == LAYOUT_DIRECTION_RTL) ? Layout.Alignment.ALIGN_RIGHT : Layout.Alignment.ALIGN_LEFT;
break;
case TEXT_ALIGNMENT_VIEW_END:
alignment=(getLayoutDirection() == LAYOUT_DIRECTION_RTL) ? Layout.Alignment.ALIGN_LEFT : Layout.Alignment.ALIGN_RIGHT;
break;
case TEXT_ALIGNMENT_INHERIT:
default :
alignment=Layout.Alignment.ALIGN_NORMAL;
break;
}
return alignment;
}
