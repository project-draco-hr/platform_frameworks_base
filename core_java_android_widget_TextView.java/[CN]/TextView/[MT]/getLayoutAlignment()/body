{
  if (mLayoutAlignment == null) {
    Layout.Alignment alignment;
    TextAlign textAlign=mTextAlign;
switch (textAlign) {
case INHERIT:
case GRAVITY:
switch (mGravity & Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK) {
case Gravity.START:
        alignment=Layout.Alignment.ALIGN_NORMAL;
      break;
case Gravity.END:
    alignment=Layout.Alignment.ALIGN_OPPOSITE;
  break;
case Gravity.LEFT:
alignment=Layout.Alignment.ALIGN_LEFT;
break;
case Gravity.RIGHT:
alignment=Layout.Alignment.ALIGN_RIGHT;
break;
case Gravity.CENTER_HORIZONTAL:
alignment=Layout.Alignment.ALIGN_CENTER;
break;
default :
alignment=Layout.Alignment.ALIGN_NORMAL;
break;
}
break;
case TEXT_START:
alignment=Layout.Alignment.ALIGN_NORMAL;
break;
case TEXT_END:
alignment=Layout.Alignment.ALIGN_OPPOSITE;
break;
case CENTER:
alignment=Layout.Alignment.ALIGN_CENTER;
break;
case VIEW_START:
alignment=(getResolvedLayoutDirection() == LAYOUT_DIRECTION_RTL) ? Layout.Alignment.ALIGN_RIGHT : Layout.Alignment.ALIGN_LEFT;
break;
case VIEW_END:
alignment=(getResolvedLayoutDirection() == LAYOUT_DIRECTION_RTL) ? Layout.Alignment.ALIGN_LEFT : Layout.Alignment.ALIGN_RIGHT;
break;
default :
alignment=Layout.Alignment.ALIGN_NORMAL;
break;
}
mLayoutAlignment=alignment;
}
return mLayoutAlignment;
}
