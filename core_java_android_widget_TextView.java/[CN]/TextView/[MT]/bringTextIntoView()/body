{
  int line=0;
  if ((mGravity & Gravity.VERTICAL_GRAVITY_MASK) == Gravity.BOTTOM) {
    line=mLayout.getLineCount() - 1;
  }
  Layout.Alignment a=mLayout.getParagraphAlignment(line);
  int dir=mLayout.getParagraphDirection(line);
  int hspace=mRight - mLeft - getCompoundPaddingLeft()- getCompoundPaddingRight();
  int vspace=mBottom - mTop - getExtendedPaddingTop()- getExtendedPaddingBottom();
  int ht=mLayout.getHeight();
  int scrollx, scrolly;
  if (a == Layout.Alignment.ALIGN_NORMAL) {
    a=dir == Layout.DIR_LEFT_TO_RIGHT ? Layout.Alignment.ALIGN_LEFT : Layout.Alignment.ALIGN_RIGHT;
  }
 else   if (a == Layout.Alignment.ALIGN_OPPOSITE) {
    a=dir == Layout.DIR_LEFT_TO_RIGHT ? Layout.Alignment.ALIGN_RIGHT : Layout.Alignment.ALIGN_LEFT;
  }
  if (a == Layout.Alignment.ALIGN_CENTER) {
    int left=(int)FloatMath.floor(mLayout.getLineLeft(line));
    int right=(int)FloatMath.ceil(mLayout.getLineRight(line));
    if (right - left < hspace) {
      scrollx=(right + left) / 2 - hspace / 2;
    }
 else {
      if (dir < 0) {
        scrollx=right - hspace;
      }
 else {
        scrollx=left;
      }
    }
  }
 else   if (a == Layout.Alignment.ALIGN_RIGHT) {
    int right=(int)FloatMath.ceil(mLayout.getLineRight(line));
    scrollx=right - hspace;
  }
 else {
    scrollx=(int)FloatMath.floor(mLayout.getLineLeft(line));
  }
  if (ht < vspace) {
    scrolly=0;
  }
 else {
    if ((mGravity & Gravity.VERTICAL_GRAVITY_MASK) == Gravity.BOTTOM) {
      scrolly=ht - vspace;
    }
 else {
      scrolly=0;
    }
  }
  if (scrollx != mScrollX || scrolly != mScrollY) {
    scrollTo(scrollx,scrolly);
    return true;
  }
 else {
    return false;
  }
}
