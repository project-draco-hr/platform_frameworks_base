{
  int min=0;
  int max=mText.length();
  if (isFocused()) {
    final int selStart=getSelectionStart();
    final int selEnd=getSelectionEnd();
    min=Math.max(0,Math.min(selStart,selEnd));
    max=Math.max(0,Math.max(selStart,selEnd));
  }
switch (id) {
case ID_SELECT_ALL:
    selectAllText();
  return true;
case ID_UNDO:
if (mEditor != null) {
  mEditor.undo();
}
return true;
case ID_REDO:
if (mEditor != null) {
mEditor.redo();
}
return true;
case ID_PASTE:
paste(min,max,true);
return true;
case ID_PASTE_AS_PLAIN_TEXT:
paste(min,max,false);
return true;
case ID_CUT:
setPrimaryClip(ClipData.newPlainText(null,getTransformedText(min,max)));
deleteText_internal(min,max);
stopTextActionMode();
return true;
case ID_COPY:
setPrimaryClip(ClipData.newPlainText(null,getTransformedText(min,max)));
stopTextActionMode();
return true;
case ID_REPLACE:
if (mEditor != null) {
mEditor.replace();
}
return true;
case ID_SHARE:
shareSelectedText();
return true;
}
return false;
}
