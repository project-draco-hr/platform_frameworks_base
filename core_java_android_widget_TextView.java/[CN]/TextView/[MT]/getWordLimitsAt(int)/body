{
  int klass=mInputType & InputType.TYPE_MASK_CLASS;
  int variation=mInputType & InputType.TYPE_MASK_VARIATION;
  if (hasPasswordTransformationMethod()) {
    return -1;
  }
  final int len=mText.length();
  if (klass == InputType.TYPE_CLASS_NUMBER || klass == InputType.TYPE_CLASS_PHONE || klass == InputType.TYPE_CLASS_DATETIME || variation == InputType.TYPE_TEXT_VARIATION_URI || variation == InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS || variation == InputType.TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS || variation == InputType.TYPE_TEXT_VARIATION_FILTER) {
    return len > 0 ? packRangeInLong(0,len) : -1;
  }
  int end=Math.min(offset,len);
  if (end < 0) {
    return -1;
  }
  final int MAX_LENGTH=48;
  int start=end;
  for (; start > 0; start--) {
    final char c=mTransformed.charAt(start - 1);
    final int type=Character.getType(c);
    if (start == end && type == Character.OTHER_PUNCTUATION) {
      continue;
    }
    if (type == Character.SURROGATE) {
      end=start - 1;
      continue;
    }
    if (!isWordCharacter(c,type))     break;
    if ((end - start) > MAX_LENGTH)     return -1;
  }
  for (; end < len; end++) {
    final int c=Character.codePointAt(mTransformed,end);
    final int type=Character.getType(c);
    if (!isWordCharacter(c,type))     break;
    if ((end - start) > MAX_LENGTH)     return -1;
    if (c > 0xFFFF) {
      end++;
    }
  }
  if (start == end) {
    return -1;
  }
  return packRangeInLong(start,end);
}
