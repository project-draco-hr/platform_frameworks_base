{
  if (!isEnabled()) {
    return super.onKeyUp(keyCode,event);
  }
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_CENTER:
    mDPadCenterIsDown=false;
  if (event.hasNoModifiers()) {
    if (hasOnClickListeners()) {
      if (mMovement != null && mText instanceof Editable && mLayout != null && onCheckIsTextEditor()) {
        InputMethodManager imm=InputMethodManager.peekInstance();
        viewClicked(imm);
        if (imm != null && mSoftInputShownOnFocus) {
          imm.showSoftInput(this,0);
        }
      }
    }
  }
return super.onKeyUp(keyCode,event);
case KeyEvent.KEYCODE_ENTER:
mEnterKeyIsDown=false;
if (event.hasNoModifiers()) {
if (mInputContentType != null && mInputContentType.onEditorActionListener != null && mInputContentType.enterDown) {
mInputContentType.enterDown=false;
if (mInputContentType.onEditorActionListener.onEditorAction(this,EditorInfo.IME_NULL,event)) {
  return true;
}
}
if ((event.getFlags() & KeyEvent.FLAG_EDITOR_ACTION) != 0 || shouldAdvanceFocusOnEnter()) {
if (hasOnClickListeners()) {
  View v=focusSearch(FOCUS_DOWN);
  if (v != null) {
    if (!v.requestFocus(FOCUS_DOWN)) {
      throw new IllegalStateException("focus search returned a view " + "that wasn't able to take focus!");
    }
    super.onKeyUp(keyCode,event);
    return true;
  }
 else   if ((event.getFlags() & KeyEvent.FLAG_EDITOR_ACTION) != 0) {
    InputMethodManager imm=InputMethodManager.peekInstance();
    if (imm != null && imm.isActive(this)) {
      imm.hideSoftInputFromWindow(getWindowToken(),0);
    }
  }
}
}
return super.onKeyUp(keyCode,event);
}
break;
}
if (mInput != null) if (mInput.onKeyUp(this,(Editable)mText,keyCode,event)) return true;
if (mMovement != null && mLayout != null) if (mMovement.onKeyUp(this,(Spannable)mText,keyCode,event)) return true;
return super.onKeyUp(keyCode,event);
}
