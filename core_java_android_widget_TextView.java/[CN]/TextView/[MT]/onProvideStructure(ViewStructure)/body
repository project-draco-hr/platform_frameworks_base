{
  super.onProvideStructure(structure);
  final boolean isPassword=hasPasswordTransformationMethod() || isPasswordInputType(getInputType());
  if (!isPassword) {
    if (mLayout == null) {
      assumeLayout();
    }
    Layout layout=mLayout;
    final int lineCount=layout.getLineCount();
    if (lineCount <= 1) {
      structure.setText(getText(),getSelectionStart(),getSelectionEnd());
    }
 else {
      final int[] tmpCords=new int[2];
      getLocationInWindow(tmpCords);
      final int topWindowLocation=tmpCords[1];
      View root=this;
      ViewParent viewParent=getParent();
      while (viewParent instanceof View) {
        root=(View)viewParent;
        viewParent=root.getParent();
      }
      final int windowHeight=root.getHeight();
      final int topLine;
      final int bottomLine;
      if (topWindowLocation >= 0) {
        topLine=getLineAtCoordinateUnclamped(0);
        bottomLine=getLineAtCoordinateUnclamped(windowHeight - 1);
      }
 else {
        topLine=getLineAtCoordinateUnclamped(-topWindowLocation);
        bottomLine=getLineAtCoordinateUnclamped(windowHeight - 1 - topWindowLocation);
      }
      int expandedTopLine=topLine - (bottomLine - topLine) / 2;
      if (expandedTopLine < 0) {
        expandedTopLine=0;
      }
      int expandedBottomLine=bottomLine + (bottomLine - topLine) / 2;
      if (expandedBottomLine >= lineCount) {
        expandedBottomLine=lineCount - 1;
      }
      int expandedTopChar=layout.getLineStart(expandedTopLine);
      int expandedBottomChar=layout.getLineEnd(expandedBottomLine);
      final int selStart=getSelectionStart();
      final int selEnd=getSelectionEnd();
      if (selStart < selEnd) {
        if (selStart < expandedTopChar) {
          expandedTopChar=selStart;
        }
        if (selEnd > expandedBottomChar) {
          expandedBottomChar=selEnd;
        }
      }
      CharSequence text=getText();
      if (expandedTopChar > 0 || expandedBottomChar < text.length()) {
        text=text.subSequence(expandedTopChar,expandedBottomChar);
      }
      structure.setText(text,selStart - expandedTopChar,selEnd - expandedTopChar);
      final int[] lineOffsets=new int[bottomLine - topLine + 1];
      final int[] lineBaselines=new int[bottomLine - topLine + 1];
      final int baselineOffset=getBaselineOffset();
      for (int i=topLine; i <= bottomLine; i++) {
        lineOffsets[i - topLine]=layout.getLineStart(i);
        lineBaselines[i - topLine]=layout.getLineBaseline(i) + baselineOffset;
      }
      structure.setTextLines(lineOffsets,lineBaselines);
    }
    int style=0;
    int typefaceStyle=getTypefaceStyle();
    if ((typefaceStyle & Typeface.BOLD) != 0) {
      style|=AssistStructure.ViewNode.TEXT_STYLE_BOLD;
    }
    if ((typefaceStyle & Typeface.ITALIC) != 0) {
      style|=AssistStructure.ViewNode.TEXT_STYLE_ITALIC;
    }
    int paintFlags=mTextPaint.getFlags();
    if ((paintFlags & Paint.FAKE_BOLD_TEXT_FLAG) != 0) {
      style|=AssistStructure.ViewNode.TEXT_STYLE_BOLD;
    }
    if ((paintFlags & Paint.UNDERLINE_TEXT_FLAG) != 0) {
      style|=AssistStructure.ViewNode.TEXT_STYLE_UNDERLINE;
    }
    if ((paintFlags & Paint.STRIKE_THRU_TEXT_FLAG) != 0) {
      style|=AssistStructure.ViewNode.TEXT_STYLE_STRIKE_THRU;
    }
    structure.setTextStyle(getTextSize(),getCurrentTextColor(),AssistStructure.ViewNode.TEXT_COLOR_UNDEFINED,style);
  }
  structure.setHint(getHint());
}
