{
  int selStart=getSelectionStart();
  int selEnd=getSelectionEnd();
  if (!isFocused()) {
    selStart=0;
    selEnd=mText.length();
  }
  int min=Math.min(selStart,selEnd);
  int max=Math.max(selStart,selEnd);
  if (min < 0) {
    min=0;
  }
  if (max < 0) {
    max=0;
  }
  ClipboardManager clip=(ClipboardManager)getContext().getSystemService(Context.CLIPBOARD_SERVICE);
switch (id) {
case ID_SELECT_ALL:
    Selection.setSelection((Spannable)mText,0,mText.length());
  return true;
case ID_CUT:
if (min == max) {
  min=0;
  max=mText.length();
}
clip.setText(mTransformed.subSequence(min,max));
((Editable)mText).delete(min,max);
return true;
case ID_COPY:
if (min == max) {
min=0;
max=mText.length();
}
clip.setText(mTransformed.subSequence(min,max));
return true;
case ID_PASTE:
CharSequence paste=clip.getText();
if (paste != null) {
Selection.setSelection((Spannable)mText,max);
((Editable)mText).replace(min,max,paste);
}
return true;
case ID_COPY_URL:
URLSpan[] urls=((Spanned)mText).getSpans(min,max,URLSpan.class);
if (urls.length == 1) {
clip.setText(urls[0].getURL());
}
return true;
case ID_SWITCH_IME:
InputMethodManager imm=InputMethodManager.peekInstance();
if (imm != null) {
imm.showInputMethodPicker();
}
return true;
}
return false;
}
