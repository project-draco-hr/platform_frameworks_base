{
  if (mTemporaryDetach) {
    super.onFocusChanged(focused,direction,previouslyFocusedRect);
    return;
  }
  mShowCursor=SystemClock.uptimeMillis();
  ensureEndedBatchEdit();
  if (focused) {
    int selStart=getSelectionStart();
    int selEnd=getSelectionEnd();
    final boolean isFocusHighlighted=mSelectAllOnFocus && selStart == 0 && selEnd == mText.length();
    mCreatedWithASelection=mFrozenWithFocus && hasSelection() && !isFocusHighlighted;
    if (!mFrozenWithFocus || (selStart < 0 || selEnd < 0)) {
      final int lastTapPosition=getLastTapPosition();
      if (lastTapPosition >= 0) {
        Selection.setSelection((Spannable)mText,lastTapPosition);
      }
      if (mMovement != null) {
        mMovement.onTakeFocus(this,(Spannable)mText,direction);
      }
      if (((this instanceof ExtractEditText) || mSelectionMoved) && selStart >= 0 && selEnd >= 0) {
        Selection.setSelection((Spannable)mText,selStart,selEnd);
      }
      if (mSelectAllOnFocus) {
        selectAll();
      }
      mTouchFocusSelected=true;
    }
    mFrozenWithFocus=false;
    mSelectionMoved=false;
    if (mText instanceof Spannable) {
      Spannable sp=(Spannable)mText;
      MetaKeyKeyListener.resetMetaState(sp);
    }
    makeBlink();
    if (mError != null) {
      showError();
    }
  }
 else {
    if (mError != null) {
      hideError();
    }
    onEndBatchEdit();
    hideInsertionPointCursorController();
    if (this instanceof ExtractEditText) {
      final int selStart=getSelectionStart();
      final int selEnd=getSelectionEnd();
      terminateSelectionActionMode();
      Selection.setSelection((Spannable)mText,selStart,selEnd);
    }
 else {
      terminateSelectionActionMode();
    }
    if (mSelectionModifierCursorController != null) {
      mSelectionModifierCursorController.resetTouchOffsets();
    }
  }
  startStopMarquee(focused);
  if (mTransformation != null) {
    mTransformation.onFocusChanged(this,mText,focused,direction,previouslyFocusedRect);
  }
  super.onFocusChanged(focused,direction,previouslyFocusedRect);
  if (focused) {
    onTouchFinished(null);
  }
}
