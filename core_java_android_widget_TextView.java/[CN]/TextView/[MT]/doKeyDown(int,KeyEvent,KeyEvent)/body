{
  if (!isEnabled()) {
    return KEY_EVENT_NOT_HANDLED;
  }
  if (event.getRepeatCount() == 0 && !KeyEvent.isModifierKey(keyCode)) {
    mPreventDefaultMovement=false;
  }
switch (keyCode) {
case KeyEvent.KEYCODE_ENTER:
    if (event.hasNoModifiers()) {
      if (mEditor != null && mEditor.mInputContentType != null) {
        if (mEditor.mInputContentType.onEditorActionListener != null && mEditor.mInputContentType.onEditorActionListener.onEditorAction(this,EditorInfo.IME_NULL,event)) {
          mEditor.mInputContentType.enterDown=true;
          return KEY_EVENT_HANDLED;
        }
      }
      if ((event.getFlags() & KeyEvent.FLAG_EDITOR_ACTION) != 0 || shouldAdvanceFocusOnEnter()) {
        if (hasOnClickListeners()) {
          return KEY_EVENT_NOT_HANDLED;
        }
        return KEY_EVENT_HANDLED;
      }
    }
  break;
case KeyEvent.KEYCODE_DPAD_CENTER:
if (event.hasNoModifiers()) {
  if (shouldAdvanceFocusOnEnter()) {
    return KEY_EVENT_NOT_HANDLED;
  }
}
break;
case KeyEvent.KEYCODE_TAB:
if (event.hasNoModifiers() || event.hasModifiers(KeyEvent.META_SHIFT_ON)) {
if (shouldAdvanceFocusOnTab()) {
return KEY_EVENT_NOT_HANDLED;
}
}
break;
case KeyEvent.KEYCODE_BACK:
if (mEditor != null && mEditor.mTextActionMode != null) {
stopTextActionMode();
return KEY_EVENT_HANDLED;
}
break;
case KeyEvent.KEYCODE_CUT:
if (event.hasNoModifiers() && canCut()) {
if (onTextContextMenuItem(ID_CUT)) {
return KEY_EVENT_HANDLED;
}
}
break;
case KeyEvent.KEYCODE_COPY:
if (event.hasNoModifiers() && canCopy()) {
if (onTextContextMenuItem(ID_COPY)) {
return KEY_EVENT_HANDLED;
}
}
break;
case KeyEvent.KEYCODE_PASTE:
if (event.hasNoModifiers() && canPaste()) {
if (onTextContextMenuItem(ID_PASTE)) {
return KEY_EVENT_HANDLED;
}
}
break;
}
if (mEditor != null && mEditor.mKeyListener != null) {
boolean doDown=true;
if (otherEvent != null) {
try {
beginBatchEdit();
final boolean handled=mEditor.mKeyListener.onKeyOther(this,(Editable)mText,otherEvent);
hideErrorIfUnchanged();
doDown=false;
if (handled) {
return KEY_EVENT_HANDLED;
}
}
 catch (AbstractMethodError e) {
}
 finally {
endBatchEdit();
}
}
if (doDown) {
beginBatchEdit();
final boolean handled=mEditor.mKeyListener.onKeyDown(this,(Editable)mText,keyCode,event);
endBatchEdit();
hideErrorIfUnchanged();
if (handled) return KEY_DOWN_HANDLED_BY_KEY_LISTENER;
}
}
if (mMovement != null && mLayout != null) {
boolean doDown=true;
if (otherEvent != null) {
try {
boolean handled=mMovement.onKeyOther(this,(Spannable)mText,otherEvent);
doDown=false;
if (handled) {
return KEY_EVENT_HANDLED;
}
}
 catch (AbstractMethodError e) {
}
}
if (doDown) {
if (mMovement.onKeyDown(this,(Spannable)mText,keyCode,event)) {
if (event.getRepeatCount() == 0 && !KeyEvent.isModifierKey(keyCode)) {
mPreventDefaultMovement=true;
}
return KEY_DOWN_HANDLED_BY_MOVEMENT_METHOD;
}
}
}
return mPreventDefaultMovement && !KeyEvent.isModifierKey(keyCode) ? KEY_EVENT_HANDLED : KEY_EVENT_NOT_HANDLED;
}
