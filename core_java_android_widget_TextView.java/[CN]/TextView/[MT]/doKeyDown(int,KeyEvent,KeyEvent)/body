{
  if (!isEnabled()) {
    return 0;
  }
switch (keyCode) {
case KeyEvent.KEYCODE_ENTER:
    if (!isInterestingEnter(event)) {
      return -1;
    }
  if ((event.getMetaState() & KeyEvent.META_ALT_ON) == 0 && mInputContentType != null && mInputContentType.onEditorActionListener != null) {
    mInputContentType.enterDown=true;
    return -1;
  }
case KeyEvent.KEYCODE_DPAD_CENTER:
if (shouldAdvanceFocusOnEnter()) {
  return 0;
}
}
if (mInput != null) {
mErrorWasChanged=false;
boolean doDown=true;
if (otherEvent != null) {
try {
  beginBatchEdit();
  boolean handled=mInput.onKeyOther(this,(Editable)mText,otherEvent);
  if (mError != null && !mErrorWasChanged) {
    setError(null,null);
  }
  doDown=false;
  if (handled) {
    return -1;
  }
}
 catch (AbstractMethodError e) {
}
 finally {
  endBatchEdit();
}
}
if (doDown) {
beginBatchEdit();
if (mInput.onKeyDown(this,(Editable)mText,keyCode,event)) {
  endBatchEdit();
  if (mError != null && !mErrorWasChanged) {
    setError(null,null);
  }
  return 1;
}
endBatchEdit();
}
}
if (mMovement != null && mLayout != null) {
boolean doDown=true;
if (otherEvent != null) {
try {
  boolean handled=mMovement.onKeyOther(this,(Spannable)mText,otherEvent);
  doDown=false;
  if (handled) {
    return -1;
  }
}
 catch (AbstractMethodError e) {
}
}
if (doDown) {
if (mMovement.onKeyDown(this,(Spannable)mText,keyCode,event)) return 2;
}
}
return 0;
}
