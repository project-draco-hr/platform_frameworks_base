{
  if (super.performLongClick()) {
    mDiscardNextActionUp=true;
    return true;
  }
  boolean handled=false;
  if (!isPositionOnText(mLastDownPositionX,mLastDownPositionY) && mInsertionControllerEnabled) {
    final int offset=getOffset(mLastDownPositionX,mLastDownPositionY);
    stopSelectionActionMode();
    Selection.setSelection((Spannable)mText,offset);
    getInsertionController().showWithPaste();
    handled=true;
  }
  if (!handled && mSelectionActionMode != null) {
    if (touchPositionIsInSelection()) {
      final int start=getSelectionStart();
      final int end=getSelectionEnd();
      CharSequence selectedText=mTransformed.subSequence(start,end);
      ClipData data=ClipData.newPlainText(null,selectedText);
      DragLocalState localState=new DragLocalState(this,start,end);
      startDrag(data,getTextThumbnailBuilder(selectedText),localState,0);
      stopSelectionActionMode();
    }
 else {
      updateSelectedRegion();
    }
    handled=true;
  }
  handled|=!handled && startSelectionActionMode();
  if (handled) {
    performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);
    mDiscardNextActionUp=true;
  }
  return handled;
}
