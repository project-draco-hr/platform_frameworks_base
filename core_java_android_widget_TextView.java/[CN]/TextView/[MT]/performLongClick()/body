{
  boolean handled=false;
  boolean vibrate=true;
  if (super.performLongClick()) {
    handled=true;
  }
  if (!handled && mEditor != null && !isPositionOnText(getEditor().mLastDownPositionX,getEditor().mLastDownPositionY) && getEditor().mInsertionControllerEnabled) {
    final int offset=getOffsetForPosition(getEditor().mLastDownPositionX,getEditor().mLastDownPositionY);
    stopSelectionActionMode();
    Selection.setSelection((Spannable)mText,offset);
    getInsertionController().showWithActionPopup();
    handled=true;
    vibrate=false;
  }
  if (!handled && mEditor != null && getEditor().mSelectionActionMode != null) {
    if (touchPositionIsInSelection()) {
      final int start=getSelectionStart();
      final int end=getSelectionEnd();
      CharSequence selectedText=getTransformedText(start,end);
      ClipData data=ClipData.newPlainText(null,selectedText);
      DragLocalState localState=new DragLocalState(this,start,end);
      startDrag(data,getTextThumbnailBuilder(selectedText),localState,0);
      stopSelectionActionMode();
    }
 else {
      getSelectionController().hide();
      selectCurrentWord();
      getSelectionController().show();
    }
    handled=true;
  }
  if (!handled) {
    vibrate=handled=startSelectionActionMode();
  }
  if (vibrate) {
    performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);
  }
  if (handled && mEditor != null) {
    getEditor().mDiscardNextActionUp=true;
  }
  return handled;
}
