{
  if (!isTextEditable() || !isSuggestionsEnabled() || !getSpellChecker().isSessionActive())   return;
  Editable text=(Editable)mText;
  final int shift=prepareWordIterator(start,end);
  final int shiftedStart=start - shift;
  final int shiftedEnd=end - shift;
  int wordStart=mWordIterator.preceding(shiftedStart);
  int wordEnd;
  if (wordStart == BreakIterator.DONE) {
    wordEnd=mWordIterator.following(shiftedStart);
    if (wordEnd != BreakIterator.DONE) {
      wordStart=mWordIterator.getBeginning(wordEnd);
    }
  }
 else {
    wordEnd=mWordIterator.getEnd(wordStart);
  }
  if (wordEnd == BreakIterator.DONE) {
    return;
  }
  SpellCheckSpan[] spellCheckSpans=text.getSpans(start - 1,end + 1,SpellCheckSpan.class);
  SuggestionSpan[] suggestionSpans=text.getSpans(start - 1,end + 1,SuggestionSpan.class);
  final int numberOfSpellCheckSpans=spellCheckSpans.length;
  while (wordStart <= shiftedEnd) {
    if (wordEnd >= shiftedStart) {
      if (wordStart < shiftedStart && wordEnd > shiftedStart) {
        removeSpansAt(start,spellCheckSpans,text);
        removeSpansAt(start,suggestionSpans,text);
      }
      if (wordStart < shiftedEnd && wordEnd > shiftedEnd) {
        removeSpansAt(end,spellCheckSpans,text);
        removeSpansAt(end,suggestionSpans,text);
      }
      boolean createSpellCheckSpan=true;
      if (wordEnd == shiftedStart) {
        for (int i=0; i < numberOfSpellCheckSpans; i++) {
          final int spanEnd=text.getSpanEnd(spellCheckSpans[i]);
          if (spanEnd == start) {
            createSpellCheckSpan=false;
            break;
          }
        }
      }
      if (wordStart == shiftedEnd) {
        for (int i=0; i < numberOfSpellCheckSpans; i++) {
          final int spanStart=text.getSpanStart(spellCheckSpans[i]);
          if (spanStart == end) {
            createSpellCheckSpan=false;
            break;
          }
        }
      }
      if (createSpellCheckSpan) {
        mSpellChecker.addSpellCheckSpan(wordStart + shift,wordEnd + shift);
      }
    }
    wordEnd=mWordIterator.following(wordEnd);
    if (wordEnd == BreakIterator.DONE)     break;
    wordStart=mWordIterator.getBeginning(wordEnd);
    if (wordStart == BreakIterator.DONE) {
      Log.e(LOG_TAG,"No word beginning from " + (wordEnd + shift) + "in "+ mText);
      break;
    }
  }
  mSpellChecker.spellCheck();
}
