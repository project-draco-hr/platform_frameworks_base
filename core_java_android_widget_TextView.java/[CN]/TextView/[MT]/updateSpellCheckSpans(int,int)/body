{
  if (!isTextEditable() || !isSuggestionsEnabled() || !getSpellChecker().isSessionActive())   return;
  Editable text=(Editable)mText;
  WordIterator wordIterator=getWordIterator();
  wordIterator.setCharSequence(text);
  int wordStart=wordIterator.preceding(start);
  int wordEnd;
  if (wordStart == BreakIterator.DONE) {
    wordEnd=wordIterator.following(start);
    if (wordEnd != BreakIterator.DONE) {
      wordStart=wordIterator.getBeginning(wordEnd);
    }
  }
 else {
    wordEnd=wordIterator.getEnd(wordStart);
  }
  if (wordEnd == BreakIterator.DONE) {
    return;
  }
  SpellCheckSpan[] spellCheckSpans=text.getSpans(start - 1,end + 1,SpellCheckSpan.class);
  SuggestionSpan[] suggestionSpans=text.getSpans(start - 1,end + 1,SuggestionSpan.class);
  final int numberOfSpellCheckSpans=spellCheckSpans.length;
  while (wordStart <= end) {
    if (wordEnd >= start) {
      if (wordStart < start && wordEnd > start) {
        removeSpansAt(start,spellCheckSpans,text);
        removeSpansAt(start,suggestionSpans,text);
      }
      if (wordStart < end && wordEnd > end) {
        removeSpansAt(end,spellCheckSpans,text);
        removeSpansAt(end,suggestionSpans,text);
      }
      boolean createSpellCheckSpan=true;
      if (wordEnd == start) {
        for (int i=0; i < numberOfSpellCheckSpans; i++) {
          final int spanEnd=text.getSpanEnd(spellCheckSpans[i]);
          if (spanEnd == start) {
            createSpellCheckSpan=false;
            break;
          }
        }
      }
      if (wordStart == end) {
        for (int i=0; i < numberOfSpellCheckSpans; i++) {
          final int spanStart=text.getSpanEnd(spellCheckSpans[i]);
          if (spanStart == end) {
            createSpellCheckSpan=false;
            break;
          }
        }
      }
      if (createSpellCheckSpan) {
        mSpellChecker.addSpellCheckSpan(wordStart,wordEnd);
      }
    }
    wordEnd=wordIterator.following(wordEnd);
    if (wordEnd == BreakIterator.DONE)     break;
    wordStart=wordIterator.getBeginning(wordEnd);
    if (wordStart == BreakIterator.DONE) {
      Log.e(LOG_TAG,"Unable to find word beginning from " + wordEnd + "in "+ mText);
      break;
    }
  }
  mSpellChecker.spellCheck();
}
