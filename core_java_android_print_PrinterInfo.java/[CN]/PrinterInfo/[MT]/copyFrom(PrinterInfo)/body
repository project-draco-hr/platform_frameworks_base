{
  mId=other.mId;
  mLabel=other.mLabel;
  mStatus=other.mStatus;
  mMinMargins=other.mMinMargins;
  if (other.mMediaSizes != null) {
    if (mMediaSizes != null) {
      mMediaSizes.clear();
      mMediaSizes.addAll(other.mMediaSizes);
    }
 else {
      mMediaSizes=new ArrayList<MediaSize>(other.mMediaSizes);
    }
  }
 else {
    mMediaSizes=null;
  }
  if (other.mResolutions != null) {
    if (mResolutions != null) {
      mResolutions.clear();
      mResolutions.addAll(other.mResolutions);
    }
 else {
      mResolutions=new ArrayList<Resolution>(other.mResolutions);
    }
  }
 else {
    mResolutions=null;
  }
  if (other.mInputTrays != null) {
    if (mInputTrays != null) {
      mInputTrays.clear();
      mInputTrays.addAll(other.mInputTrays);
    }
 else {
      mInputTrays=new ArrayList<Tray>(other.mInputTrays);
    }
  }
 else {
    mInputTrays=null;
  }
  if (other.mOutputTrays != null) {
    if (mOutputTrays != null) {
      mOutputTrays.clear();
      mOutputTrays.addAll(other.mOutputTrays);
    }
 else {
      mOutputTrays=new ArrayList<Tray>(other.mOutputTrays);
    }
  }
 else {
    mOutputTrays=null;
  }
  mDuplexModes=other.mDuplexModes;
  mColorModes=other.mColorModes;
  mFittingModes=other.mFittingModes;
  mOrientations=other.mOrientations;
  final int defaultCount=other.mDefaults.length;
  for (int i=0; i < defaultCount; i++) {
    mDefaults[i]=other.mDefaults[i];
  }
  mDefaultMargins=other.mDefaultMargins;
}
