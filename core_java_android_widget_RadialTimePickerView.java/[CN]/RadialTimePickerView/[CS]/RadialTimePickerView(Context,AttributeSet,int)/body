{
  super(context,attrs);
  final TypedArray a=mContext.obtainStyledAttributes(attrs,R.styleable.TimePicker,defStyle,0);
  final Resources res=getResources();
  mAmPmUnselectedColor=a.getColor(R.styleable.TimePicker_amPmUnselectedBackgroundColor,res.getColor(R.color.timepicker_default_ampm_unselected_background_color_holo_light));
  mAmPmSelectedColor=a.getColor(R.styleable.TimePicker_amPmSelectedBackgroundColor,res.getColor(R.color.timepicker_default_ampm_selected_background_color_holo_light));
  mAmPmTextColor=a.getColor(R.styleable.TimePicker_amPmTextColor,res.getColor(R.color.timepicker_default_text_color_holo_light));
  final int numbersTextColor=a.getColor(R.styleable.TimePicker_numbersTextColor,res.getColor(R.color.timepicker_default_text_color_holo_light));
  mTypeface=Typeface.create("sans-serif",Typeface.NORMAL);
  mPaint[HOURS]=new Paint();
  mPaint[HOURS].setColor(numbersTextColor);
  mPaint[HOURS].setAntiAlias(true);
  mPaint[HOURS].setTextAlign(Paint.Align.CENTER);
  mPaint[MINUTES]=new Paint();
  mPaint[MINUTES].setColor(numbersTextColor);
  mPaint[MINUTES].setAntiAlias(true);
  mPaint[MINUTES].setTextAlign(Paint.Align.CENTER);
  mPaintCenter.setColor(numbersTextColor);
  mPaintCenter.setAntiAlias(true);
  mPaintCenter.setTextAlign(Paint.Align.CENTER);
  mPaintSelector[HOURS][SELECTOR_CIRCLE]=new Paint();
  mPaintSelector[HOURS][SELECTOR_CIRCLE].setColor(a.getColor(R.styleable.TimePicker_numbersSelectorColor,R.color.holo_blue_light));
  mPaintSelector[HOURS][SELECTOR_CIRCLE].setAntiAlias(true);
  mPaintSelector[HOURS][SELECTOR_DOT]=new Paint();
  mPaintSelector[HOURS][SELECTOR_DOT].setColor(a.getColor(R.styleable.TimePicker_numbersSelectorColor,R.color.holo_blue_light));
  mPaintSelector[HOURS][SELECTOR_DOT].setAntiAlias(true);
  mPaintSelector[HOURS][SELECTOR_LINE]=new Paint();
  mPaintSelector[HOURS][SELECTOR_LINE].setColor(a.getColor(R.styleable.TimePicker_numbersSelectorColor,R.color.holo_blue_light));
  mPaintSelector[HOURS][SELECTOR_LINE].setAntiAlias(true);
  mPaintSelector[HOURS][SELECTOR_LINE].setStrokeWidth(2);
  mPaintSelector[MINUTES][SELECTOR_CIRCLE]=new Paint();
  mPaintSelector[MINUTES][SELECTOR_CIRCLE].setColor(a.getColor(R.styleable.TimePicker_numbersSelectorColor,R.color.holo_blue_light));
  mPaintSelector[MINUTES][SELECTOR_CIRCLE].setAntiAlias(true);
  mPaintSelector[MINUTES][SELECTOR_DOT]=new Paint();
  mPaintSelector[MINUTES][SELECTOR_DOT].setColor(a.getColor(R.styleable.TimePicker_numbersSelectorColor,R.color.holo_blue_light));
  mPaintSelector[MINUTES][SELECTOR_DOT].setAntiAlias(true);
  mPaintSelector[MINUTES][SELECTOR_LINE]=new Paint();
  mPaintSelector[MINUTES][SELECTOR_LINE].setColor(a.getColor(R.styleable.TimePicker_numbersSelectorColor,R.color.holo_blue_light));
  mPaintSelector[MINUTES][SELECTOR_LINE].setAntiAlias(true);
  mPaintSelector[MINUTES][SELECTOR_LINE].setStrokeWidth(2);
  mPaintAmPmText.setColor(mAmPmTextColor);
  mPaintAmPmText.setTypeface(mTypeface);
  mPaintAmPmText.setAntiAlias(true);
  mPaintAmPmText.setTextAlign(Paint.Align.CENTER);
  mPaintAmPmCircle[AM]=new Paint();
  mPaintAmPmCircle[AM].setAntiAlias(true);
  mPaintAmPmCircle[PM]=new Paint();
  mPaintAmPmCircle[PM].setAntiAlias(true);
  mPaintBackground.setColor(a.getColor(R.styleable.TimePicker_numbersBackgroundColor,Color.WHITE));
  mPaintBackground.setAntiAlias(true);
  final int disabledColor=a.getColor(R.styleable.TimePicker_disabledColor,res.getColor(R.color.timepicker_default_disabled_color_holo_light));
  mPaintDisabled.setColor(disabledColor);
  mPaintDisabled.setAntiAlias(true);
  if (DEBUG) {
    mPaintDebug.setColor(DEBUG_COLOR);
    mPaintDebug.setAntiAlias(true);
    mPaintDebug.setStrokeWidth(DEBUG_STROKE_WIDTH);
    mPaintDebug.setStyle(Paint.Style.STROKE);
    mPaintDebug.setTextAlign(Paint.Align.CENTER);
  }
  mShowHours=true;
  mIs24HourMode=false;
  mAmOrPm=AM;
  mAmOrPmPressed=-1;
  initHoursAndMinutesText();
  initData();
  mTransitionMidRadiusMultiplier=Float.parseFloat(res.getString(R.string.timepicker_transition_mid_radius_multiplier));
  mTransitionEndRadiusMultiplier=Float.parseFloat(res.getString(R.string.timepicker_transition_end_radius_multiplier));
  mTextGridHeights[HOURS]=new float[7];
  mTextGridHeights[MINUTES]=new float[7];
  mSelectionRadiusMultiplier=Float.parseFloat(res.getString(R.string.timepicker_selection_radius_multiplier));
  setOnTouchListener(this);
  final Calendar calendar=Calendar.getInstance(Locale.getDefault());
  final int currentHour=calendar.get(Calendar.HOUR_OF_DAY);
  final int currentMinute=calendar.get(Calendar.MINUTE);
  setCurrentHour(currentHour);
  setCurrentMinute(currentMinute);
  setHapticFeedbackEnabled(true);
}
