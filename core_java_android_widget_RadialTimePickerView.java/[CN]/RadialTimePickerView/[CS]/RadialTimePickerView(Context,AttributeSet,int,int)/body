{
  super(context,attrs);
  final TypedValue outValue=new TypedValue();
  context.getTheme().resolveAttribute(android.R.attr.disabledAlpha,outValue,true);
  mDisabledAlpha=(int)(outValue.getFloat() * 255 + 0.5f);
  final Resources res=getResources();
  final TypedArray a=mContext.obtainStyledAttributes(attrs,R.styleable.TimePicker,defStyleAttr,defStyleRes);
  mTypeface=Typeface.create("sans-serif",Typeface.NORMAL);
  for (int i=0; i < mAlpha.length; i++) {
    mAlpha[i]=new IntHolder(ALPHA_OPAQUE);
  }
  for (int i=0; i < mAlphaSelector.length; i++) {
    for (int j=0; j < mAlphaSelector[i].length; j++) {
      mAlphaSelector[i][j]=new IntHolder(ALPHA_OPAQUE);
    }
  }
  mNumbersTextColor=a.getColorStateList(R.styleable.TimePicker_numbersTextColor);
  mPaint[HOURS]=new Paint();
  mPaint[HOURS].setAntiAlias(true);
  mPaint[HOURS].setTextAlign(Paint.Align.CENTER);
  mPaint[MINUTES]=new Paint();
  mPaint[MINUTES].setAntiAlias(true);
  mPaint[MINUTES].setTextAlign(Paint.Align.CENTER);
  final ColorStateList selectorColors=a.getColorStateList(R.styleable.TimePicker_numbersSelectorColor);
  final int selectorActivatedColor=selectorColors.getColorForState(StateSet.get(StateSet.VIEW_STATE_ENABLED | StateSet.VIEW_STATE_ACTIVATED),0);
  mPaintCenter.setColor(selectorActivatedColor);
  mPaintCenter.setAntiAlias(true);
  final int textActivatedColor=mNumbersTextColor.getColorForState(StateSet.get(StateSet.VIEW_STATE_ENABLED | StateSet.VIEW_STATE_ACTIVATED),0);
  mPaintSelector[HOURS][SELECTOR_CIRCLE]=new Paint();
  mPaintSelector[HOURS][SELECTOR_CIRCLE].setAntiAlias(true);
  mColorSelector[HOURS][SELECTOR_CIRCLE]=selectorActivatedColor;
  mPaintSelector[HOURS][SELECTOR_DOT]=new Paint();
  mPaintSelector[HOURS][SELECTOR_DOT].setAntiAlias(true);
  mColorSelector[HOURS][SELECTOR_DOT]=textActivatedColor;
  mPaintSelector[HOURS][SELECTOR_LINE]=new Paint();
  mPaintSelector[HOURS][SELECTOR_LINE].setAntiAlias(true);
  mPaintSelector[HOURS][SELECTOR_LINE].setStrokeWidth(2);
  mColorSelector[HOURS][SELECTOR_LINE]=selectorActivatedColor;
  mPaintSelector[MINUTES][SELECTOR_CIRCLE]=new Paint();
  mPaintSelector[MINUTES][SELECTOR_CIRCLE].setAntiAlias(true);
  mColorSelector[MINUTES][SELECTOR_CIRCLE]=selectorActivatedColor;
  mPaintSelector[MINUTES][SELECTOR_DOT]=new Paint();
  mPaintSelector[MINUTES][SELECTOR_DOT].setAntiAlias(true);
  mColorSelector[MINUTES][SELECTOR_DOT]=textActivatedColor;
  mPaintSelector[MINUTES][SELECTOR_LINE]=new Paint();
  mPaintSelector[MINUTES][SELECTOR_LINE].setAntiAlias(true);
  mPaintSelector[MINUTES][SELECTOR_LINE].setStrokeWidth(2);
  mColorSelector[MINUTES][SELECTOR_LINE]=selectorActivatedColor;
  mPaintBackground.setColor(a.getColor(R.styleable.TimePicker_numbersBackgroundColor,context.getColor(R.color.timepicker_default_numbers_background_color_material)));
  mPaintBackground.setAntiAlias(true);
  if (DEBUG) {
    mPaintDebug.setColor(DEBUG_COLOR);
    mPaintDebug.setAntiAlias(true);
    mPaintDebug.setStrokeWidth(DEBUG_STROKE_WIDTH);
    mPaintDebug.setStyle(Paint.Style.STROKE);
    mPaintDebug.setTextAlign(Paint.Align.CENTER);
  }
  mShowHours=true;
  mIs24HourMode=false;
  mAmOrPm=AM;
  mTouchHelper=new RadialPickerTouchHelper();
  setAccessibilityDelegate(mTouchHelper);
  if (getImportantForAccessibility() == IMPORTANT_FOR_ACCESSIBILITY_AUTO) {
    setImportantForAccessibility(IMPORTANT_FOR_ACCESSIBILITY_YES);
  }
  initHoursAndMinutesText();
  initData();
  mSelectionRadiusMultiplier=res.getFloat(R.dimen.timepicker_selection_radius_multiplier);
  a.recycle();
  final Calendar calendar=Calendar.getInstance(Locale.getDefault());
  final int currentHour=calendar.get(Calendar.HOUR_OF_DAY);
  final int currentMinute=calendar.get(Calendar.MINUTE);
  setCurrentHourInternal(currentHour,false,false);
  setCurrentMinuteInternal(currentMinute,false);
  setHapticFeedbackEnabled(true);
}
