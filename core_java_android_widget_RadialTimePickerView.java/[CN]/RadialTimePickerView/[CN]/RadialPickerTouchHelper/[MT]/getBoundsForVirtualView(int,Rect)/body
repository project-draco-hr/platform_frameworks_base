{
  final float radius;
  final int type=getTypeFromId(virtualViewId);
  final int value=getValueFromId(virtualViewId);
  final float centerRadius;
  final float degrees;
  if (type == TYPE_HOUR) {
    final boolean innerCircle=mIs24HourMode && value > 0 && value <= 12;
    if (innerCircle) {
      centerRadius=mCircleRadius[HOURS_INNER] * mNumbersRadiusMultiplier[HOURS_INNER];
      radius=mSelectionRadius[HOURS_INNER];
    }
 else {
      centerRadius=mCircleRadius[HOURS] * mNumbersRadiusMultiplier[HOURS];
      radius=mSelectionRadius[HOURS];
    }
    degrees=getDegreesForHour(value);
  }
 else   if (type == TYPE_MINUTE) {
    centerRadius=mCircleRadius[MINUTES] * mNumbersRadiusMultiplier[MINUTES];
    degrees=getDegreesForMinute(value);
    radius=mSelectionRadius[MINUTES];
  }
 else {
    centerRadius=0;
    degrees=0;
    radius=0;
  }
  final double radians=Math.toRadians(degrees);
  final float xCenter=mXCenter + centerRadius * (float)Math.sin(radians);
  final float yCenter=mYCenter - centerRadius * (float)Math.cos(radians);
  bounds.set((int)(xCenter - radius),(int)(yCenter - radius),(int)(xCenter + radius),(int)(yCenter + radius));
}
