{
  final int hoursIndex=mIsOnInnerCircle ? HOURS_INNER : HOURS;
  final int hoursInset=mTextInset[hoursIndex];
  final int hoursAngleDeg=mSelectionDegrees[hoursIndex % 2];
  final float hoursDotScale=mSelectionDegrees[hoursIndex % 2] % 30 != 0 ? 1 : 0;
  final int minutesIndex=MINUTES;
  final int minutesInset=mTextInset[minutesIndex];
  final int minutesAngleDeg=mSelectionDegrees[minutesIndex];
  final float minutesDotScale=mSelectionDegrees[minutesIndex] % 30 != 0 ? 1 : 0;
  final int selRadius=mSelectorRadius;
  final float selLength=mCircleRadius - MathUtils.lerp(hoursInset,minutesInset,mHoursToMinutes);
  final double selAngleRad=Math.toRadians(MathUtils.lerpDeg(hoursAngleDeg,minutesAngleDeg,mHoursToMinutes));
  final float selCenterX=mXCenter + selLength * (float)Math.sin(selAngleRad);
  final float selCenterY=mYCenter - selLength * (float)Math.cos(selAngleRad);
  final Paint paint=mPaintSelector[SELECTOR_CIRCLE];
  paint.setColor(mSelectorColor);
  canvas.drawCircle(selCenterX,selCenterY,selRadius,paint);
  if (selectorPath != null) {
    selectorPath.reset();
    selectorPath.addCircle(selCenterX,selCenterY,selRadius,Path.Direction.CCW);
  }
  final float dotScale=MathUtils.lerp(hoursDotScale,minutesDotScale,mHoursToMinutes);
  if (dotScale > 0) {
    final Paint dotPaint=mPaintSelector[SELECTOR_DOT];
    dotPaint.setColor(mSelectorDotColor);
    canvas.drawCircle(selCenterX,selCenterY,mSelectorDotRadius * dotScale,dotPaint);
  }
  final double sin=Math.sin(selAngleRad);
  final double cos=Math.cos(selAngleRad);
  final float lineLength=selLength - selRadius;
  final int centerX=mXCenter + (int)(mCenterDotRadius * sin);
  final int centerY=mYCenter - (int)(mCenterDotRadius * cos);
  final float linePointX=centerX + (int)(lineLength * sin);
  final float linePointY=centerY - (int)(lineLength * cos);
  final Paint linePaint=mPaintSelector[SELECTOR_LINE];
  linePaint.setColor(mSelectorColor);
  linePaint.setStrokeWidth(mSelectorStroke);
  canvas.drawLine(mXCenter,mYCenter,linePointX,linePointY,linePaint);
}
