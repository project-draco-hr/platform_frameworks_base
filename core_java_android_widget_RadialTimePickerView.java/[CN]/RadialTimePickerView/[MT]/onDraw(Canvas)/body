{
  if (!mInputEnabled) {
    canvas.saveLayerAlpha(0,0,getWidth(),getHeight(),mDisabledAlpha);
  }
 else {
    canvas.save();
  }
  drawCircleBackground(canvas);
  final int hoursAlpha=mAlpha[HOURS].getValue();
  if (hoursAlpha > 0) {
    drawSelector(canvas,mIsOnInnerCircle ? HOURS_INNER : HOURS,null);
    drawTextElements(canvas,mTextSize[HOURS],mTypeface,mOuterTextHours,mOuterTextX[HOURS],mOuterTextY[HOURS],mPaint[HOURS],hoursAlpha,!mIsOnInnerCircle,mSelectionDegrees[HOURS],false);
    if (mIs24HourMode && mInnerTextHours != null) {
      drawTextElements(canvas,mTextSize[HOURS_INNER],mTypeface,mInnerTextHours,mInnerTextX,mInnerTextY,mPaint[HOURS],hoursAlpha,mIsOnInnerCircle,mSelectionDegrees[HOURS],false);
    }
  }
  final int minutesAlpha=mAlpha[MINUTES].getValue();
  if (minutesAlpha > 0) {
    drawSelector(canvas,MINUTES,mSelectorPath);
    canvas.save(Canvas.CLIP_SAVE_FLAG);
    canvas.clipPath(mSelectorPath,Region.Op.DIFFERENCE);
    drawTextElements(canvas,mTextSize[MINUTES],mTypeface,mOuterTextMinutes,mOuterTextX[MINUTES],mOuterTextY[MINUTES],mPaint[MINUTES],minutesAlpha,false,0,false);
    canvas.restore();
    canvas.save(Canvas.CLIP_SAVE_FLAG);
    canvas.clipPath(mSelectorPath,Region.Op.INTERSECT);
    drawTextElements(canvas,mTextSize[MINUTES],mTypeface,mOuterTextMinutes,mOuterTextX[MINUTES],mOuterTextY[MINUTES],mPaint[MINUTES],minutesAlpha,true,mSelectionDegrees[MINUTES],true);
    canvas.restore();
  }
  drawCenter(canvas);
  if (DEBUG) {
    drawDebug(canvas);
  }
  canvas.restore();
}
