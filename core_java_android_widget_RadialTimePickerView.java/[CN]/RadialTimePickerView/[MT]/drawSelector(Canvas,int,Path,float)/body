{
  mLineLength[index]=mCircleRadius - mTextInset[index];
  final double selectionRadians=Math.toRadians(mSelectionDegrees[index]);
  float pointX=mXCenter + (int)(mLineLength[index] * Math.sin(selectionRadians));
  float pointY=mYCenter - (int)(mLineLength[index] * Math.cos(selectionRadians));
  int color;
  int alpha;
  Paint paint;
  color=mColorSelector[index % 2][SELECTOR_CIRCLE];
  alpha=(int)(mAlphaSelector[index % 2][SELECTOR_CIRCLE].getValue() * alphaMod + 0.5f);
  paint=mPaintSelector[index % 2][SELECTOR_CIRCLE];
  paint.setColor(color);
  paint.setAlpha(getMultipliedAlpha(color,alpha));
  canvas.drawCircle(pointX,pointY,mSelectorRadius,paint);
  if (selectorPath != null) {
    mSelectorPath.reset();
    mSelectorPath.addCircle(pointX,pointY,mSelectorRadius,Path.Direction.CCW);
  }
  final boolean shouldDrawDot=mSelectionDegrees[index] % 30 != 0;
  if (shouldDrawDot) {
    color=mColorSelector[index % 2][SELECTOR_DOT];
    alpha=(int)(mAlphaSelector[index % 2][SELECTOR_DOT].getValue() * alphaMod + 0.5f);
    paint=mPaintSelector[index % 2][SELECTOR_DOT];
    paint.setColor(color);
    paint.setAlpha(getMultipliedAlpha(color,alpha));
    canvas.drawCircle(pointX,pointY,mSelectorDotRadius,paint);
  }
  final double sin=Math.sin(selectionRadians);
  final double cos=Math.cos(selectionRadians);
  final int lineLength=mLineLength[index] - mSelectorRadius;
  final int centerX=mXCenter + (int)(mCenterDotRadius * sin);
  final int centerY=mYCenter - (int)(mCenterDotRadius * cos);
  pointX=centerX + (int)(lineLength * sin);
  pointY=centerY - (int)(lineLength * cos);
  color=mColorSelector[index % 2][SELECTOR_LINE];
  alpha=(int)(mAlphaSelector[index % 2][SELECTOR_LINE].getValue() * alphaMod + 0.5f);
  paint=mPaintSelector[index % 2][SELECTOR_LINE];
  paint.setColor(color);
  paint.setAlpha(getMultipliedAlpha(color,alpha));
  canvas.drawLine(mXCenter,mYCenter,pointX,pointY,paint);
}
