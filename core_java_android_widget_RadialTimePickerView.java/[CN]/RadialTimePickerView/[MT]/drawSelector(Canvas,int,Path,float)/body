{
  final int alpha=(int)(mAlpha[index % 2].getValue() * alphaMod + 0.5f);
  final int color=applyAlpha(mSelectorColor,alpha);
  final int selRadius=mSelectorRadius;
  final int selLength=mCircleRadius - mTextInset[index];
  final double selAngleRad=Math.toRadians(mSelectionDegrees[index]);
  final float selCenterX=mXCenter + selLength * (float)Math.sin(selAngleRad);
  final float selCenterY=mYCenter - selLength * (float)Math.cos(selAngleRad);
  final Paint paint=mPaintSelector[index % 2][SELECTOR_CIRCLE];
  paint.setColor(color);
  canvas.drawCircle(selCenterX,selCenterY,selRadius,paint);
  if (selectorPath != null) {
    selectorPath.reset();
    selectorPath.addCircle(selCenterX,selCenterY,selRadius,Path.Direction.CCW);
  }
  final boolean shouldDrawDot=mSelectionDegrees[index] % 30 != 0;
  if (shouldDrawDot) {
    final Paint dotPaint=mPaintSelector[index % 2][SELECTOR_DOT];
    dotPaint.setColor(color);
    canvas.drawCircle(selCenterX,selCenterY,mSelectorDotRadius,dotPaint);
  }
  final double sin=Math.sin(selAngleRad);
  final double cos=Math.cos(selAngleRad);
  final int lineLength=selLength - selRadius;
  final int centerX=mXCenter + (int)(mCenterDotRadius * sin);
  final int centerY=mYCenter - (int)(mCenterDotRadius * cos);
  final float linePointX=centerX + (int)(lineLength * sin);
  final float linePointY=centerY - (int)(lineLength * cos);
  final Paint linePaint=mPaintSelector[index % 2][SELECTOR_LINE];
  linePaint.setColor(color);
  linePaint.setStrokeWidth(mSelectorStroke);
  canvas.drawLine(mXCenter,mYCenter,linePointX,linePointY,linePaint);
}
