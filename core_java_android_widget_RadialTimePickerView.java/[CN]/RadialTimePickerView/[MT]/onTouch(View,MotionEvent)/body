{
  if (!mInputEnabled) {
    return true;
  }
  final float eventX=event.getX();
  final float eventY=event.getY();
  int degrees;
  int snapDegrees;
  boolean result=false;
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
case MotionEvent.ACTION_MOVE:
    mAmOrPmPressed=getIsTouchingAmOrPm(eventX,eventY);
  if (mAmOrPmPressed != -1) {
    result=true;
  }
 else {
    degrees=getDegreesFromXY(eventX,eventY);
    if (degrees != -1) {
      snapDegrees=(mShowHours ? snapOnly30s(degrees,0) : snapPrefer30s(degrees)) % 360;
      if (mShowHours) {
        mSelectionDegrees[HOURS]=snapDegrees;
        mSelectionDegrees[HOURS_INNER]=snapDegrees;
      }
 else {
        mSelectionDegrees[MINUTES]=snapDegrees;
      }
      performHapticFeedback(HapticFeedbackConstants.CLOCK_TICK);
      if (mListener != null) {
        if (mShowHours) {
          mListener.onValueSelected(HOURS,getCurrentHour(),false);
        }
 else {
          mListener.onValueSelected(MINUTES,getCurrentMinute(),false);
        }
      }
      result=true;
    }
  }
invalidate();
return result;
case MotionEvent.ACTION_UP:
mAmOrPmPressed=getIsTouchingAmOrPm(eventX,eventY);
if (mAmOrPmPressed != -1) {
if (mAmOrPm != mAmOrPmPressed) {
swapAmPm();
}
mAmOrPmPressed=-1;
if (mListener != null) {
mListener.onValueSelected(AMPM,getCurrentHour(),true);
}
result=true;
}
 else {
degrees=getDegreesFromXY(eventX,eventY);
if (degrees != -1) {
snapDegrees=(mShowHours ? snapOnly30s(degrees,0) : snapPrefer30s(degrees)) % 360;
if (mShowHours) {
mSelectionDegrees[HOURS]=snapDegrees;
mSelectionDegrees[HOURS_INNER]=snapDegrees;
}
 else {
mSelectionDegrees[MINUTES]=snapDegrees;
}
if (mListener != null) {
if (mShowHours) {
  mListener.onValueSelected(HOURS,getCurrentHour(),true);
}
 else {
  mListener.onValueSelected(MINUTES,getCurrentMinute(),true);
}
}
result=true;
}
}
if (result) {
invalidate();
}
return result;
default :
break;
}
return false;
}
