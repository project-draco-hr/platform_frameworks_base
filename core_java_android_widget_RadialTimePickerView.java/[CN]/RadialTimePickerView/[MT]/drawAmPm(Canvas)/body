{
  final boolean isLayoutRtl=isLayoutRtl();
  int amColor=mAmPmUnselectedColor;
  int amAlpha=ALPHA_OPAQUE;
  int pmColor=mAmPmUnselectedColor;
  int pmAlpha=ALPHA_OPAQUE;
  if (mAmOrPm == AM) {
    amColor=mAmPmSelectedColor;
    amAlpha=ALPHA_AMPM_SELECTED;
  }
 else   if (mAmOrPm == PM) {
    pmColor=mAmPmSelectedColor;
    pmAlpha=ALPHA_AMPM_SELECTED;
  }
  if (mAmOrPmPressed == AM) {
    amColor=mAmPmSelectedColor;
    amAlpha=ALPHA_AMPM_PRESSED;
  }
 else   if (mAmOrPmPressed == PM) {
    pmColor=mAmPmSelectedColor;
    pmAlpha=ALPHA_AMPM_PRESSED;
  }
  mPaintAmPmCircle[AM].setColor(amColor);
  mPaintAmPmCircle[AM].setAlpha(getMultipliedAlpha(amColor,amAlpha));
  canvas.drawCircle(isLayoutRtl ? mRightIndicatorXCenter : mLeftIndicatorXCenter,mAmPmYCenter,mAmPmCircleRadius,mPaintAmPmCircle[AM]);
  mPaintAmPmCircle[PM].setColor(pmColor);
  mPaintAmPmCircle[PM].setAlpha(getMultipliedAlpha(pmColor,pmAlpha));
  canvas.drawCircle(isLayoutRtl ? mLeftIndicatorXCenter : mRightIndicatorXCenter,mAmPmYCenter,mAmPmCircleRadius,mPaintAmPmCircle[PM]);
  mPaintAmPmText.setColor(mAmPmTextColor);
  float textYCenter=mAmPmYCenter - (int)(mPaintAmPmText.descent() + mPaintAmPmText.ascent()) / 2;
  canvas.drawText(isLayoutRtl ? mAmPmText[PM] : mAmPmText[AM],mLeftIndicatorXCenter,textYCenter,mPaintAmPmText);
  canvas.drawText(isLayoutRtl ? mAmPmText[AM] : mAmPmText[PM],mRightIndicatorXCenter,textYCenter,mPaintAmPmText);
}
