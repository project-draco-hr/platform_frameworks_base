{
  final boolean wasOnInnerCircle=mIsOnInnerCircle;
  final int degrees=getDegreesFromXY(x,y);
  if (degrees == -1) {
    return false;
  }
  final int[] selectionDegrees=mSelectionDegrees;
  final int type;
  final int newValue;
  final boolean valueChanged;
  if (mShowHours) {
    final int snapDegrees=snapOnly30s(degrees,0) % 360;
    valueChanged=selectionDegrees[HOURS] != snapDegrees || selectionDegrees[HOURS_INNER] != snapDegrees || wasOnInnerCircle != mIsOnInnerCircle;
    selectionDegrees[HOURS]=snapDegrees;
    selectionDegrees[HOURS_INNER]=snapDegrees;
    type=HOURS;
    newValue=getCurrentHour();
  }
 else {
    final int snapDegrees=snapPrefer30s(degrees) % 360;
    valueChanged=selectionDegrees[MINUTES] != snapDegrees;
    selectionDegrees[MINUTES]=snapDegrees;
    type=MINUTES;
    newValue=getCurrentMinute();
  }
  if (valueChanged || forceSelection || autoAdvance) {
    if (mListener != null) {
      mListener.onValueSelected(type,newValue,autoAdvance);
    }
    if (valueChanged || forceSelection) {
      performHapticFeedback(HapticFeedbackConstants.CLOCK_TICK);
      invalidate();
    }
    return true;
  }
  return false;
}
