{
  final boolean wasOnInnerCircle=mIsOnInnerCircle;
  final int degrees=getDegreesFromXY(x,y);
  if (degrees == -1) {
    return false;
  }
  final int[] selectionDegrees=mSelectionDegrees;
  int type=-1;
  int newValue=-1;
  if (mShowHours) {
    final int snapDegrees=snapOnly30s(degrees,0) % 360;
    if (forceSelection || selectionDegrees[HOURS] != snapDegrees || selectionDegrees[HOURS_INNER] != snapDegrees || wasOnInnerCircle != mIsOnInnerCircle) {
      selectionDegrees[HOURS]=snapDegrees;
      selectionDegrees[HOURS_INNER]=snapDegrees;
      type=HOURS;
      newValue=getCurrentHour();
    }
  }
 else {
    final int snapDegrees=snapPrefer30s(degrees) % 360;
    if (forceSelection || selectionDegrees[MINUTES] != snapDegrees) {
      selectionDegrees[MINUTES]=snapDegrees;
      type=MINUTES;
      newValue=getCurrentMinute();
    }
  }
  if (newValue != -1) {
    if (mListener != null) {
      mListener.onValueSelected(type,newValue,autoAdvance);
    }
    performHapticFeedback(HapticFeedbackConstants.CLOCK_TICK);
    invalidate();
    return true;
  }
  return false;
}
