{
  final Context context=getContext();
  final TypedArray a=getContext().obtainStyledAttributes(attrs,R.styleable.TimePicker,defStyleAttr,defStyleRes);
  final ColorStateList numbersTextColor=a.getColorStateList(R.styleable.TimePicker_numbersTextColor);
  final ColorStateList numbersInnerTextColor=a.getColorStateList(R.styleable.TimePicker_numbersInnerTextColor);
  mTextColor[HOURS]=numbersTextColor == null ? ColorStateList.valueOf(MISSING_COLOR) : numbersTextColor;
  mTextColor[HOURS_INNER]=numbersInnerTextColor == null ? ColorStateList.valueOf(MISSING_COLOR) : numbersInnerTextColor;
  mTextColor[MINUTES]=mTextColor[HOURS];
  final ColorStateList selectorColors=a.getColorStateList(R.styleable.TimePicker_numbersSelectorColor);
  final int selectorActivatedColor;
  if (selectorColors != null) {
    final int[] stateSetEnabledActivated=StateSet.get(StateSet.VIEW_STATE_ENABLED | StateSet.VIEW_STATE_ACTIVATED);
    selectorActivatedColor=selectorColors.getColorForState(stateSetEnabledActivated,0);
  }
 else {
    selectorActivatedColor=MISSING_COLOR;
  }
  mPaintCenter.setColor(selectorActivatedColor);
  final int[] stateSetActivated=StateSet.get(StateSet.VIEW_STATE_ENABLED | StateSet.VIEW_STATE_ACTIVATED);
  mSelectorColor=selectorActivatedColor;
  mSelectorDotColor=mTextColor[HOURS].getColorForState(stateSetActivated,0);
  mPaintBackground.setColor(a.getColor(R.styleable.TimePicker_numbersBackgroundColor,context.getColor(R.color.timepicker_default_numbers_background_color_material)));
  a.recycle();
}
