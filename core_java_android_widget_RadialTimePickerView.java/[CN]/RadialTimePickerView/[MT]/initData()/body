{
  if (mIs24HourMode) {
    mOuterTextHours=mOuterHours24Texts;
    mInnerTextHours=mInnerHours24Texts;
  }
 else {
    mOuterTextHours=mHours12Texts;
    mInnerTextHours=null;
  }
  mOuterTextMinutes=mMinutesTexts;
  final Resources res=getResources();
  if (mIs24HourMode) {
    mNumbersRadiusMultiplier[HOURS]=res.getFloat(R.dimen.timepicker_numbers_radius_multiplier_outer);
    mTextSizeMultiplier[HOURS]=res.getFloat(R.dimen.timepicker_text_size_multiplier_outer);
    mNumbersRadiusMultiplier[HOURS_INNER]=res.getFloat(R.dimen.timepicker_numbers_radius_multiplier_inner);
    mTextSizeMultiplier[HOURS_INNER]=res.getFloat(R.dimen.timepicker_text_size_multiplier_inner);
  }
 else {
    mNumbersRadiusMultiplier[HOURS]=res.getFloat(R.dimen.timepicker_numbers_radius_multiplier_normal);
    mTextSizeMultiplier[HOURS]=res.getFloat(R.dimen.timepicker_text_size_multiplier_normal);
  }
  mNumbersRadiusMultiplier[MINUTES]=res.getFloat(R.dimen.timepicker_numbers_radius_multiplier_normal);
  mTextSizeMultiplier[MINUTES]=res.getFloat(R.dimen.timepicker_text_size_multiplier_normal);
  final int hoursAlpha=mShowHours ? ALPHA_OPAQUE : ALPHA_TRANSPARENT;
  mAlpha[HOURS].setValue(hoursAlpha);
  mAlphaSelector[HOURS][SELECTOR_CIRCLE].setValue(hoursAlpha);
  mAlphaSelector[HOURS][SELECTOR_DOT].setValue(hoursAlpha);
  mAlphaSelector[HOURS][SELECTOR_LINE].setValue(hoursAlpha);
  final int minutesAlpha=mShowHours ? ALPHA_TRANSPARENT : ALPHA_OPAQUE;
  mAlpha[MINUTES].setValue(minutesAlpha);
  mAlphaSelector[MINUTES][SELECTOR_CIRCLE].setValue(minutesAlpha);
  mAlphaSelector[MINUTES][SELECTOR_DOT].setValue(minutesAlpha);
  mAlphaSelector[MINUTES][SELECTOR_LINE].setValue(minutesAlpha);
}
