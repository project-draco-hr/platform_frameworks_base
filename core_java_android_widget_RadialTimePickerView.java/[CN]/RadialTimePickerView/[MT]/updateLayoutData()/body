{
  mXCenter=getWidth() / 2;
  mYCenter=getHeight() / 2;
  final int min=Math.min(mXCenter,mYCenter);
  mCircleRadius[HOURS]=min * mCircleRadiusMultiplier[HOURS];
  mCircleRadius[HOURS_INNER]=min * mCircleRadiusMultiplier[HOURS];
  mCircleRadius[MINUTES]=min * mCircleRadiusMultiplier[MINUTES];
  mMinHypotenuseForInnerNumber=(int)(mCircleRadius[HOURS] * mNumbersRadiusMultiplier[HOURS_INNER]) - mSelectionRadius[HOURS];
  mMaxHypotenuseForOuterNumber=(int)(mCircleRadius[HOURS] * mNumbersRadiusMultiplier[HOURS]) + mSelectionRadius[HOURS];
  mHalfwayHypotenusePoint=(int)(mCircleRadius[HOURS] * ((mNumbersRadiusMultiplier[HOURS] + mNumbersRadiusMultiplier[HOURS_INNER]) / 2));
  mTextSize[HOURS]=mCircleRadius[HOURS] * mTextSizeMultiplier[HOURS];
  mTextSize[MINUTES]=mCircleRadius[MINUTES] * mTextSizeMultiplier[MINUTES];
  if (mIs24HourMode) {
    mInnerTextSize=mCircleRadius[HOURS] * mTextSizeMultiplier[HOURS_INNER];
  }
  calculateGridSizesHours();
  calculateGridSizesMinutes();
  mSelectionRadius[HOURS]=(int)(mCircleRadius[HOURS] * mSelectionRadiusMultiplier);
  mSelectionRadius[HOURS_INNER]=mSelectionRadius[HOURS];
  mSelectionRadius[MINUTES]=(int)(mCircleRadius[MINUTES] * mSelectionRadiusMultiplier);
}
