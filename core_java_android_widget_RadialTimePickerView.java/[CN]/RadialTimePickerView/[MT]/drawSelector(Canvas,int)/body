{
  mLineLength[index]=(int)(mCircleRadius[index] * mNumbersRadiusMultiplier[index] * mAnimationRadiusMultiplier[index]);
  double selectionRadians=Math.toRadians(mSelectionDegrees[index]);
  int pointX=mXCenter + (int)(mLineLength[index] * Math.sin(selectionRadians));
  int pointY=mYCenter - (int)(mLineLength[index] * Math.cos(selectionRadians));
  int color;
  int alpha;
  Paint paint;
  color=mColorSelector[index % 2][SELECTOR_CIRCLE];
  alpha=mAlphaSelector[index % 2][SELECTOR_CIRCLE].getValue();
  paint=mPaintSelector[index % 2][SELECTOR_CIRCLE];
  paint.setColor(color);
  paint.setAlpha(getMultipliedAlpha(color,alpha));
  canvas.drawCircle(pointX,pointY,mSelectionRadius[index],paint);
  if (mSelectionDegrees[index] % 30 != 0) {
    color=mColorSelector[index % 2][SELECTOR_DOT];
    alpha=mAlphaSelector[index % 2][SELECTOR_DOT].getValue();
    paint=mPaintSelector[index % 2][SELECTOR_DOT];
    paint.setColor(color);
    paint.setAlpha(getMultipliedAlpha(color,alpha));
    canvas.drawCircle(pointX,pointY,(mSelectionRadius[index] * 2 / 7),paint);
  }
 else {
    int lineLength=mLineLength[index] - mSelectionRadius[index];
    pointX=mXCenter + (int)(lineLength * Math.sin(selectionRadians));
    pointY=mYCenter - (int)(lineLength * Math.cos(selectionRadians));
  }
  color=mColorSelector[index % 2][SELECTOR_LINE];
  alpha=mAlphaSelector[index % 2][SELECTOR_LINE].getValue();
  paint=mPaintSelector[index % 2][SELECTOR_LINE];
  paint.setColor(color);
  paint.setAlpha(getMultipliedAlpha(color,alpha));
  canvas.drawLine(mXCenter,mYCenter,pointX,pointY,paint);
}
