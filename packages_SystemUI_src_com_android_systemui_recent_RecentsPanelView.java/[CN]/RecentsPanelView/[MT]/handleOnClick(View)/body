{
  ViewHolder holder=(ViewHolder)view.getTag();
  TaskDescription ad=holder.taskDescription;
  final Context context=view.getContext();
  final ActivityManager am=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);
  Bitmap bm=holder.thumbnailViewImageBitmap;
  boolean usingDrawingCache;
  if (bm.getWidth() == holder.thumbnailViewImage.getWidth() && bm.getHeight() == holder.thumbnailViewImage.getHeight()) {
    usingDrawingCache=false;
  }
 else {
    holder.thumbnailViewImage.setDrawingCacheEnabled(true);
    bm=holder.thumbnailViewImage.getDrawingCache();
    usingDrawingCache=true;
  }
  if (mPlaceholderThumbnail == null) {
    mPlaceholderThumbnail=(ImageView)findViewById(R.id.recents_transition_placeholder_icon);
  }
  if (mTransitionBg == null) {
    mTransitionBg=(View)findViewById(R.id.recents_transition_background);
    IWindowManager wm=IWindowManager.Stub.asInterface(ServiceManager.getService(Context.WINDOW_SERVICE));
    try {
      if (!wm.hasSystemNavBar()) {
        FrameLayout.LayoutParams lp=(FrameLayout.LayoutParams)mTransitionBg.getLayoutParams();
        int statusBarHeight=getResources().getDimensionPixelSize(com.android.internal.R.dimen.status_bar_height);
        lp.setMargins(0,statusBarHeight,0,0);
        mTransitionBg.setLayoutParams(lp);
      }
    }
 catch (    RemoteException e) {
      Log.w(TAG,"Failing checking whether status bar is visible",e);
    }
  }
  final ImageView placeholderThumbnail=mPlaceholderThumbnail;
  mHideRecentsAfterThumbnailScaleUpStarted=false;
  placeholderThumbnail.setVisibility(VISIBLE);
  if (!usingDrawingCache) {
    placeholderThumbnail.setImageBitmap(bm);
  }
 else {
    Bitmap b2=bm.copy(bm.getConfig(),true);
    placeholderThumbnail.setImageBitmap(b2);
  }
  Rect r=new Rect();
  holder.thumbnailViewImage.getGlobalVisibleRect(r);
  placeholderThumbnail.setTranslationX(r.left);
  placeholderThumbnail.setTranslationY(r.top);
  show(false,true);
  mThumbnailScaleUpStarted=false;
  ActivityOptions opts=ActivityOptions.makeDelayedThumbnailScaleUpAnimation(holder.thumbnailViewImage,bm,0,0,new ActivityOptions.OnAnimationStartedListener(){
    @Override public void onAnimationStarted(){
      mThumbnailScaleUpStarted=true;
      if (!mHighEndGfx) {
        mPlaceholderThumbnail.setVisibility(INVISIBLE);
      }
      if (mHideRecentsAfterThumbnailScaleUpStarted) {
        hideWindow();
      }
    }
  }
);
  if (ad.taskId >= 0) {
    am.moveTaskToFront(ad.taskId,ActivityManager.MOVE_TASK_WITH_HOME,opts.toBundle());
  }
 else {
    Intent intent=ad.intent;
    intent.addFlags(Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY | Intent.FLAG_ACTIVITY_TASK_ON_HOME | Intent.FLAG_ACTIVITY_NEW_TASK);
    if (DEBUG)     Log.v(TAG,"Starting activity " + intent);
    context.startActivityAsUser(intent,opts.toBundle(),UserId.USER_CURRENT);
  }
  if (usingDrawingCache) {
    holder.thumbnailViewImage.setDrawingCacheEnabled(false);
  }
}
