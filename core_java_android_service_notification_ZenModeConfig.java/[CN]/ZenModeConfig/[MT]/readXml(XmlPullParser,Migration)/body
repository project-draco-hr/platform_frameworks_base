{
  int type=parser.getEventType();
  if (type != XmlPullParser.START_TAG)   return null;
  String tag=parser.getName();
  if (!ZEN_TAG.equals(tag))   return null;
  final ZenModeConfig rt=new ZenModeConfig();
  final int version=safeInt(parser,ZEN_ATT_VERSION,XML_VERSION);
  if (version == 1) {
    final XmlV1 v1=XmlV1.readXml(parser);
    return migration.migrate(v1);
  }
  while ((type=parser.next()) != XmlPullParser.END_DOCUMENT) {
    tag=parser.getName();
    if (type == XmlPullParser.END_TAG && ZEN_TAG.equals(tag)) {
      return rt;
    }
    if (type == XmlPullParser.START_TAG) {
      if (ALLOW_TAG.equals(tag)) {
        rt.allowCalls=safeBoolean(parser,ALLOW_ATT_CALLS,false);
        rt.allowRepeatCallers=safeBoolean(parser,ALLOW_ATT_REPEAT_CALLERS,DEFAULT_ALLOW_REPEAT_CALLERS);
        rt.allowMessages=safeBoolean(parser,ALLOW_ATT_MESSAGES,false);
        rt.allowReminders=safeBoolean(parser,ALLOW_ATT_REMINDERS,DEFAULT_ALLOW_REMINDERS);
        rt.allowEvents=safeBoolean(parser,ALLOW_ATT_EVENTS,DEFAULT_ALLOW_EVENTS);
        rt.allowFrom=safeInt(parser,ALLOW_ATT_FROM,SOURCE_ANYONE);
        if (rt.allowFrom < SOURCE_ANYONE || rt.allowFrom > MAX_SOURCE) {
          throw new IndexOutOfBoundsException("bad source in config:" + rt.allowFrom);
        }
      }
 else       if (MANUAL_TAG.equals(tag)) {
        rt.manualRule=readRuleXml(parser);
      }
 else       if (AUTOMATIC_TAG.equals(tag)) {
        final String id=parser.getAttributeValue(null,RULE_ATT_ID);
        final ZenRule automaticRule=readRuleXml(parser);
        if (id != null && automaticRule != null) {
          rt.automaticRules.put(id,automaticRule);
        }
      }
    }
  }
  throw new IllegalStateException("Failed to reach END_DOCUMENT");
}
