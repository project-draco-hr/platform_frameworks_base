{
  final Diff d=new Diff();
  if (to == null) {
    return d.addLine("config","delete");
  }
  if (user != to.user) {
    d.addLine("user",user,to.user);
  }
  if (allowCalls != to.allowCalls) {
    d.addLine("allowCalls",allowCalls,to.allowCalls);
  }
  if (allowRepeatCallers != to.allowRepeatCallers) {
    d.addLine("allowRepeatCallers",allowRepeatCallers,to.allowRepeatCallers);
  }
  if (allowMessages != to.allowMessages) {
    d.addLine("allowMessages",allowMessages,to.allowMessages);
  }
  if (allowCallsFrom != to.allowCallsFrom) {
    d.addLine("allowCallsFrom",allowCallsFrom,to.allowCallsFrom);
  }
  if (allowMessagesFrom != to.allowMessagesFrom) {
    d.addLine("allowMessagesFrom",allowMessagesFrom,to.allowMessagesFrom);
  }
  if (allowReminders != to.allowReminders) {
    d.addLine("allowReminders",allowReminders,to.allowReminders);
  }
  if (allowEvents != to.allowEvents) {
    d.addLine("allowEvents",allowEvents,to.allowEvents);
  }
  final ArraySet<String> allRules=new ArraySet<>();
  addKeys(allRules,automaticRules);
  addKeys(allRules,to.automaticRules);
  final int N=allRules.size();
  for (int i=0; i < N; i++) {
    final String rule=allRules.valueAt(i);
    final ZenRule fromRule=automaticRules != null ? automaticRules.get(rule) : null;
    final ZenRule toRule=to.automaticRules != null ? to.automaticRules.get(rule) : null;
    ZenRule.appendDiff(d,"automaticRule[" + rule + "]",fromRule,toRule);
  }
  ZenRule.appendDiff(d,"manualRule",manualRule,to.manualRule);
  return d;
}
