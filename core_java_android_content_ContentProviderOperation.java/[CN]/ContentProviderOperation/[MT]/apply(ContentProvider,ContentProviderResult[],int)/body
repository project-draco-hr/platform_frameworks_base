{
  ContentValues values=resolveValueBackReferences(backRefs,numBackRefs);
  String[] selectionArgs=resolveSelectionArgsBackReferences(backRefs,numBackRefs);
  if (mType == TYPE_INSERT) {
    Uri newUri=provider.insert(mUri,values);
    if (newUri == null) {
      throw new OperationApplicationException("insert failed");
    }
    return new ContentProviderResult(newUri);
  }
  int numRows;
  if (mType == TYPE_DELETE) {
    numRows=provider.delete(mUri,mSelection,selectionArgs);
  }
 else   if (mType == TYPE_UPDATE) {
    numRows=provider.update(mUri,values,mSelection,selectionArgs);
  }
 else   if (mType == TYPE_ASSERT) {
    String[] projection=null;
    if (values != null) {
      final ArrayList<String> projectionList=new ArrayList<String>();
      for (      Map.Entry<String,Object> entry : values.valueSet()) {
        projectionList.add(entry.getKey());
      }
      projection=projectionList.toArray(new String[projectionList.size()]);
    }
    final Cursor cursor=provider.query(mUri,projection,mSelection,selectionArgs,null);
    try {
      numRows=cursor.getCount();
      if (projection != null) {
        while (cursor.moveToNext()) {
          for (int i=0; i < projection.length; i++) {
            final String cursorValue=cursor.getString(i);
            final String expectedValue=values.getAsString(projection[i]);
            if (!TextUtils.equals(cursorValue,expectedValue)) {
              Log.e(TAG,this.toString());
              throw new OperationApplicationException("Found value " + cursorValue + " when expected "+ expectedValue+ " for column "+ projection[i]);
            }
          }
        }
      }
    }
  finally {
      cursor.close();
    }
  }
 else {
    Log.e(TAG,this.toString());
    throw new IllegalStateException("bad type, " + mType);
  }
  if (mExpectedCount != null && mExpectedCount != numRows) {
    Log.e(TAG,this.toString());
    throw new OperationApplicationException("wrong number of rows: " + numRows);
  }
  return new ContentProviderResult(numRows);
}
