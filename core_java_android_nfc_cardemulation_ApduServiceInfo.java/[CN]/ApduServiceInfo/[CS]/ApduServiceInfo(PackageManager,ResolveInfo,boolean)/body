{
  ServiceInfo si=info.serviceInfo;
  XmlResourceParser parser=null;
  try {
    if (onHost) {
      parser=si.loadXmlMetaData(pm,HostApduService.SERVICE_META_DATA);
      if (parser == null) {
        throw new XmlPullParserException("No " + HostApduService.SERVICE_META_DATA + " meta-data");
      }
    }
 else {
      parser=si.loadXmlMetaData(pm,OffHostApduService.SERVICE_META_DATA);
      if (parser == null) {
        throw new XmlPullParserException("No " + OffHostApduService.SERVICE_META_DATA + " meta-data");
      }
    }
    int eventType=parser.getEventType();
    while (eventType != XmlPullParser.START_TAG && eventType != XmlPullParser.END_DOCUMENT) {
      eventType=parser.next();
    }
    String tagName=parser.getName();
    if (onHost && !"host-apdu-service".equals(tagName)) {
      throw new XmlPullParserException("Meta-data does not start with <host-apdu-service> tag");
    }
 else     if (!onHost && !"offhost-apdu-service".equals(tagName)) {
      throw new XmlPullParserException("Meta-data does not start with <offhost-apdu-service> tag");
    }
    Resources res=pm.getResourcesForApplication(si.applicationInfo);
    AttributeSet attrs=Xml.asAttributeSet(parser);
    if (onHost) {
      TypedArray sa=res.obtainAttributes(attrs,com.android.internal.R.styleable.HostApduService);
      mService=info;
      mDescription=sa.getString(com.android.internal.R.styleable.HostApduService_description);
      mRequiresDeviceUnlock=sa.getBoolean(com.android.internal.R.styleable.HostApduService_requireDeviceUnlock,false);
      mBannerResourceId=sa.getResourceId(com.android.internal.R.styleable.HostApduService_apduServiceBanner,-1);
      sa.recycle();
    }
 else {
      TypedArray sa=res.obtainAttributes(attrs,com.android.internal.R.styleable.OffHostApduService);
      mService=info;
      mDescription=sa.getString(com.android.internal.R.styleable.OffHostApduService_description);
      mRequiresDeviceUnlock=false;
      mBannerResourceId=sa.getResourceId(com.android.internal.R.styleable.OffHostApduService_apduServiceBanner,-1);
      sa.recycle();
    }
    mStaticAidGroups=new HashMap<String,AidGroup>();
    mDynamicAidGroups=new HashMap<String,AidGroup>();
    mOnHost=onHost;
    final int depth=parser.getDepth();
    AidGroup currentGroup=null;
    while (((eventType=parser.next()) != XmlPullParser.END_TAG || parser.getDepth() > depth) && eventType != XmlPullParser.END_DOCUMENT) {
      tagName=parser.getName();
      if (eventType == XmlPullParser.START_TAG && "aid-group".equals(tagName) && currentGroup == null) {
        final TypedArray groupAttrs=res.obtainAttributes(attrs,com.android.internal.R.styleable.AidGroup);
        String groupCategory=groupAttrs.getString(com.android.internal.R.styleable.AidGroup_category);
        String groupDescription=groupAttrs.getString(com.android.internal.R.styleable.AidGroup_description);
        if (!CardEmulation.CATEGORY_PAYMENT.equals(groupCategory)) {
          groupCategory=CardEmulation.CATEGORY_OTHER;
        }
        currentGroup=mStaticAidGroups.get(groupCategory);
        if (currentGroup != null) {
          if (!CardEmulation.CATEGORY_OTHER.equals(groupCategory)) {
            Log.e(TAG,"Not allowing multiple aid-groups in the " + groupCategory + " category");
            currentGroup=null;
          }
        }
 else {
          currentGroup=new AidGroup(groupCategory,groupDescription);
        }
        groupAttrs.recycle();
      }
 else       if (eventType == XmlPullParser.END_TAG && "aid-group".equals(tagName) && currentGroup != null) {
        if (currentGroup.aids.size() > 0) {
          if (!mStaticAidGroups.containsKey(currentGroup.category)) {
            mStaticAidGroups.put(currentGroup.category,currentGroup);
          }
        }
 else {
          Log.e(TAG,"Not adding <aid-group> with empty or invalid AIDs");
        }
        currentGroup=null;
      }
 else       if (eventType == XmlPullParser.START_TAG && "aid-filter".equals(tagName) && currentGroup != null) {
        final TypedArray a=res.obtainAttributes(attrs,com.android.internal.R.styleable.AidFilter);
        String aid=a.getString(com.android.internal.R.styleable.AidFilter_name).toUpperCase();
        if (isValidAid(aid) && !currentGroup.aids.contains(aid)) {
          currentGroup.aids.add(aid);
        }
 else {
          Log.e(TAG,"Ignoring invalid or duplicate aid: " + aid);
        }
        a.recycle();
      }
    }
  }
 catch (  NameNotFoundException e) {
    throw new XmlPullParserException("Unable to create context for: " + si.packageName);
  }
 finally {
    if (parser != null)     parser.close();
  }
  mUid=si.applicationInfo.uid;
}
