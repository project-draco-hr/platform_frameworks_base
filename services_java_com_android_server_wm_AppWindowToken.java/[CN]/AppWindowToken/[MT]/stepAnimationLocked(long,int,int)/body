{
  if (service.okToDisplay()) {
    if (animation == WindowManagerService.sDummyAnimation) {
      return false;
    }
    if ((allDrawn || animating || startingDisplayed) && animation != null) {
      if (!animating) {
        if (WindowManagerService.DEBUG_ANIM)         Slog.v(WindowManagerService.TAG,"Starting animation in " + this + " @ "+ currentTime+ ": dw="+ dw+ " dh="+ dh+ " scale="+ service.mTransitionAnimationScale+ " allDrawn="+ allDrawn+ " animating="+ animating);
        if (!animInitialized) {
          animation.initialize(dw,dh,dw,dh);
        }
        animation.setStartTime(currentTime);
        animating=true;
        if (thumbnail != null) {
          thumbnail.show();
          thumbnailAnimation.setStartTime(currentTime);
        }
      }
      if (stepAnimation(currentTime)) {
        if (thumbnail != null) {
          stepThumbnailAnimation(currentTime);
        }
        return true;
      }
    }
  }
 else   if (animation != null) {
    animating=true;
    animation=null;
  }
  hasTransformation=false;
  if (!animating) {
    return false;
  }
  mAnimator.mPendingLayoutChanges|=WindowManagerPolicy.FINISH_LAYOUT_REDO_ANIM;
  if (WindowManagerService.DEBUG_LAYOUT_REPEATS) {
    service.debugLayoutRepeats("AppWindowToken",mAnimator.mPendingLayoutChanges);
  }
  clearAnimation();
  animating=false;
  if (animLayerAdjustment != 0) {
    animLayerAdjustment=0;
    updateLayers();
  }
  if (service.mInputMethodTarget != null && service.mInputMethodTarget.mAppToken == this) {
    service.moveInputMethodWindowsIfNeededLocked(true);
  }
  if (WindowManagerService.DEBUG_ANIM)   Slog.v(WindowManagerService.TAG,"Animation done in " + this + ": reportedVisible="+ reportedVisible);
  transformation.clear();
  final int N=windows.size();
  for (int i=0; i < N; i++) {
    windows.get(i).mWinAnimator.finishExit();
  }
  updateReportedVisibilityLocked();
  return false;
}
