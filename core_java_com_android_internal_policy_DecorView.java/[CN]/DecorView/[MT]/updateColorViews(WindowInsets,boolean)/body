{
  WindowManager.LayoutParams attrs=mWindow.getAttributes();
  int sysUiVisibility=attrs.systemUiVisibility | getWindowSystemUiVisibility();
  if (!mWindow.mIsFloating && ActivityManager.isHighEndGfx()) {
    boolean disallowAnimate=!isLaidOut();
    disallowAnimate|=((mLastWindowFlags ^ attrs.flags) & FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS) != 0;
    mLastWindowFlags=attrs.flags;
    if (insets != null) {
      mLastTopInset=Math.min(insets.getStableInsetTop(),insets.getSystemWindowInsetTop());
      mLastBottomInset=Math.min(insets.getStableInsetBottom(),insets.getSystemWindowInsetBottom());
      mLastRightInset=Math.min(insets.getStableInsetRight(),insets.getSystemWindowInsetRight());
      boolean hasTopStableInset=insets.getStableInsetTop() != 0;
      disallowAnimate|=(hasTopStableInset != mLastHasTopStableInset);
      mLastHasTopStableInset=hasTopStableInset;
      boolean hasBottomStableInset=insets.getStableInsetBottom() != 0;
      disallowAnimate|=(hasBottomStableInset != mLastHasBottomStableInset);
      mLastHasBottomStableInset=hasBottomStableInset;
      boolean hasRightStableInset=insets.getStableInsetRight() != 0;
      disallowAnimate|=(hasRightStableInset != mLastHasRightStableInset);
      mLastHasRightStableInset=hasRightStableInset;
    }
    boolean navBarToRightEdge=mLastBottomInset == 0 && mLastRightInset > 0;
    int navBarSize=navBarToRightEdge ? mLastRightInset : mLastBottomInset;
    updateColorViewInt(mNavigationColorViewState,sysUiVisibility,mWindow.mNavigationBarColor,navBarSize,navBarToRightEdge,0,animate && !disallowAnimate,false);
    boolean statusBarNeedsRightInset=navBarToRightEdge && mNavigationColorViewState.present;
    int statusBarRightInset=statusBarNeedsRightInset ? mLastRightInset : 0;
    updateColorViewInt(mStatusColorViewState,sysUiVisibility,calculateStatusBarColor(),mLastTopInset,false,statusBarRightInset,animate && !disallowAnimate,mForceWindowDrawsStatusBarBackground);
  }
  boolean consumingNavBar=(attrs.flags & FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS) != 0 && (sysUiVisibility & SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION) == 0 && (sysUiVisibility & SYSTEM_UI_FLAG_HIDE_NAVIGATION) == 0;
  int consumedRight=consumingNavBar ? mLastRightInset : 0;
  int consumedBottom=consumingNavBar ? mLastBottomInset : 0;
  if (mContentRoot != null && mContentRoot.getLayoutParams() instanceof MarginLayoutParams) {
    MarginLayoutParams lp=(MarginLayoutParams)mContentRoot.getLayoutParams();
    if (lp.rightMargin != consumedRight || lp.bottomMargin != consumedBottom) {
      lp.rightMargin=consumedRight;
      lp.bottomMargin=consumedBottom;
      mContentRoot.setLayoutParams(lp);
      if (insets == null) {
        requestApplyInsets();
      }
    }
    if (insets != null) {
      insets=insets.replaceSystemWindowInsets(insets.getSystemWindowInsetLeft(),insets.getSystemWindowInsetTop(),insets.getSystemWindowInsetRight() - consumedRight,insets.getSystemWindowInsetBottom() - consumedBottom);
    }
  }
  if (insets != null) {
    insets=insets.consumeStableInsets();
  }
  return insets;
}
