{
  cancelAnimations();
  mDrawingHardwareGlow=true;
  setExtendStart(CanvasProperty.createFloat(getExtendSize() / 2));
  final RenderNodeAnimator startAnim=new RenderNodeAnimator(getExtendStart(),getExtendSize() / 2 - GLOW_MAX_SCALE_FACTOR * getRippleSize() / 2);
  startAnim.setDuration(ANIMATION_DURATION_SCALE);
  startAnim.setInterpolator(mInterpolator);
  startAnim.addListener(mAnimatorListener);
  startAnim.setTarget(mTargetView);
  setExtendEnd(CanvasProperty.createFloat(getExtendSize() / 2));
  final RenderNodeAnimator endAnim=new RenderNodeAnimator(getExtendEnd(),getExtendSize() / 2 + GLOW_MAX_SCALE_FACTOR * getRippleSize() / 2);
  endAnim.setDuration(ANIMATION_DURATION_SCALE);
  endAnim.setInterpolator(mInterpolator);
  endAnim.addListener(mAnimatorListener);
  endAnim.setTarget(mTargetView);
  if (isHorizontal()) {
    mTopProp=CanvasProperty.createFloat(0f);
    mBottomProp=CanvasProperty.createFloat(getBounds().height());
    mRxProp=CanvasProperty.createFloat(getBounds().height() / 2);
    mRyProp=CanvasProperty.createFloat(getBounds().height() / 2);
  }
 else {
    mLeftProp=CanvasProperty.createFloat(0f);
    mRightProp=CanvasProperty.createFloat(getBounds().width());
    mRxProp=CanvasProperty.createFloat(getBounds().width() / 2);
    mRyProp=CanvasProperty.createFloat(getBounds().width() / 2);
  }
  mGlowScale=GLOW_MAX_SCALE_FACTOR;
  mGlowAlpha=GLOW_MAX_ALPHA;
  mRipplePaint=getRipplePaint();
  mRipplePaint.setAlpha((int)(mGlowAlpha * 255));
  mPaintProp=CanvasProperty.createPaint(mRipplePaint);
  startAnim.start();
  endAnim.start();
  mRunningAnimations.add(startAnim);
  mRunningAnimations.add(endAnim);
  invalidateSelf();
}
