{
  mIsListeningForGestures=true;
  float x=event.getX();
  float y=event.getY();
  mX=x;
  mY=y;
  mTotalLength=0;
  mIsGesturing=false;
  if (mGestureStrokeType == GESTURE_STROKE_TYPE_SINGLE || mResetGesture) {
    if (mHandleGestureActions)     setCurrentColor(mUncertainGestureColor);
    mResetGesture=false;
    mCurrentGesture=null;
    mPath.rewind();
  }
 else   if (mCurrentGesture == null || mCurrentGesture.getStrokesCount() == 0) {
    if (mHandleGestureActions)     setCurrentColor(mUncertainGestureColor);
  }
  if (mFadingHasStarted) {
    cancelClearAnimation();
  }
 else   if (mIsFadingOut) {
    setPaintAlpha(255);
    mIsFadingOut=false;
    mFadingHasStarted=false;
    removeCallbacks(mFadingOut);
  }
  if (mCurrentGesture == null) {
    mCurrentGesture=new Gesture();
  }
  mStrokeBuffer.add(new GesturePoint(x,y,event.getEventTime()));
  mPath.moveTo(x,y);
  final int border=mInvalidateExtraBorder;
  mInvalidRect.set((int)x - border,(int)y - border,(int)x + border,(int)y + border);
  mCurveEndX=x;
  mCurveEndY=y;
  final ArrayList<OnGestureListener> listeners=mOnGestureListeners;
  final int count=listeners.size();
  for (int i=0; i < count; i++) {
    listeners.get(i).onGestureStarted(this,event);
  }
}
