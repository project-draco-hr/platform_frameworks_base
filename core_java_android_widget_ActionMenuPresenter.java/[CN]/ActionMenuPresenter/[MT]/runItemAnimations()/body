{
  for (int i=0; i < mPreLayoutItems.size(); ++i) {
    int id=mPreLayoutItems.keyAt(i);
    final MenuItemLayoutInfo menuItemLayoutInfoPre=mPreLayoutItems.get(id);
    final int postLayoutIndex=mPostLayoutItems.indexOfKey(id);
    if (postLayoutIndex >= 0) {
      final MenuItemLayoutInfo menuItemLayoutInfoPost=mPostLayoutItems.valueAt(postLayoutIndex);
      PropertyValuesHolder pvhX=null;
      PropertyValuesHolder pvhY=null;
      if (menuItemLayoutInfoPre.left != menuItemLayoutInfoPost.left) {
        pvhX=PropertyValuesHolder.ofFloat(View.TRANSLATION_X,(menuItemLayoutInfoPre.left - menuItemLayoutInfoPost.left),0);
      }
      if (menuItemLayoutInfoPre.top != menuItemLayoutInfoPost.top) {
        pvhY=PropertyValuesHolder.ofFloat(View.TRANSLATION_Y,menuItemLayoutInfoPre.top - menuItemLayoutInfoPost.top,0);
      }
      if (pvhX != null || pvhY != null) {
        for (int j=0; j < mRunningItemAnimations.size(); ++j) {
          ItemAnimationInfo oldInfo=mRunningItemAnimations.get(j);
          if (oldInfo.id == id && oldInfo.animType == ItemAnimationInfo.MOVE) {
            oldInfo.animator.cancel();
          }
        }
        ObjectAnimator anim;
        if (pvhX != null) {
          if (pvhY != null) {
            anim=ObjectAnimator.ofPropertyValuesHolder(menuItemLayoutInfoPost.view,pvhX,pvhY);
          }
 else {
            anim=ObjectAnimator.ofPropertyValuesHolder(menuItemLayoutInfoPost.view,pvhX);
          }
        }
 else {
          anim=ObjectAnimator.ofPropertyValuesHolder(menuItemLayoutInfoPost.view,pvhY);
        }
        anim.setDuration(ITEM_ANIMATION_DURATION);
        anim.start();
        ItemAnimationInfo info=new ItemAnimationInfo(id,menuItemLayoutInfoPost,anim,ItemAnimationInfo.MOVE);
        mRunningItemAnimations.add(info);
        anim.addListener(new AnimatorListenerAdapter(){
          @Override public void onAnimationEnd(          Animator animation){
            for (int j=0; j < mRunningItemAnimations.size(); ++j) {
              if (mRunningItemAnimations.get(j).animator == animation) {
                mRunningItemAnimations.remove(j);
                break;
              }
            }
          }
        }
);
      }
      mPostLayoutItems.remove(id);
    }
 else {
      float oldAlpha=1;
      for (int j=0; j < mRunningItemAnimations.size(); ++j) {
        ItemAnimationInfo oldInfo=mRunningItemAnimations.get(j);
        if (oldInfo.id == id && oldInfo.animType == ItemAnimationInfo.FADE_IN) {
          oldAlpha=oldInfo.menuItemLayoutInfo.view.getAlpha();
          oldInfo.animator.cancel();
        }
      }
      ObjectAnimator anim=ObjectAnimator.ofFloat(menuItemLayoutInfoPre.view,View.ALPHA,oldAlpha,0);
      ((ViewGroup)mMenuView).getOverlay().add(menuItemLayoutInfoPre.view);
      anim.setDuration(ITEM_ANIMATION_DURATION);
      anim.start();
      ItemAnimationInfo info=new ItemAnimationInfo(id,menuItemLayoutInfoPre,anim,ItemAnimationInfo.FADE_OUT);
      mRunningItemAnimations.add(info);
      anim.addListener(new AnimatorListenerAdapter(){
        @Override public void onAnimationEnd(        Animator animation){
          for (int j=0; j < mRunningItemAnimations.size(); ++j) {
            if (mRunningItemAnimations.get(j).animator == animation) {
              mRunningItemAnimations.remove(j);
              break;
            }
          }
          ((ViewGroup)mMenuView).getOverlay().remove(menuItemLayoutInfoPre.view);
        }
      }
);
    }
  }
  for (int i=0; i < mPostLayoutItems.size(); ++i) {
    int id=mPostLayoutItems.keyAt(i);
    final int postLayoutIndex=mPostLayoutItems.indexOfKey(id);
    if (postLayoutIndex >= 0) {
      final MenuItemLayoutInfo menuItemLayoutInfo=mPostLayoutItems.valueAt(postLayoutIndex);
      float oldAlpha=0;
      for (int j=0; j < mRunningItemAnimations.size(); ++j) {
        ItemAnimationInfo oldInfo=mRunningItemAnimations.get(j);
        if (oldInfo.id == id && oldInfo.animType == ItemAnimationInfo.FADE_OUT) {
          oldAlpha=oldInfo.menuItemLayoutInfo.view.getAlpha();
          oldInfo.animator.cancel();
        }
      }
      ObjectAnimator anim=ObjectAnimator.ofFloat(menuItemLayoutInfo.view,View.ALPHA,oldAlpha,1);
      anim.start();
      anim.setDuration(ITEM_ANIMATION_DURATION);
      ItemAnimationInfo info=new ItemAnimationInfo(id,menuItemLayoutInfo,anim,ItemAnimationInfo.FADE_IN);
      mRunningItemAnimations.add(info);
      anim.addListener(new AnimatorListenerAdapter(){
        @Override public void onAnimationEnd(        Animator animation){
          for (int j=0; j < mRunningItemAnimations.size(); ++j) {
            if (mRunningItemAnimations.get(j).animator == animation) {
              mRunningItemAnimations.remove(j);
              break;
            }
          }
        }
      }
);
    }
  }
  mPreLayoutItems.clear();
  mPostLayoutItems.clear();
}
