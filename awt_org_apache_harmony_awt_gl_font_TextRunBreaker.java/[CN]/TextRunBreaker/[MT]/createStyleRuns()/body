{
  fonts=new HashMap<Integer,Font>();
  decorations=new HashMap<Integer,Decoration>();
  ArrayList<Integer> forcedFontRunStartsList=null;
  Map<? extends Attribute,?> attributes=null;
  Object val=aci.getAttribute(TextAttribute.JUSTIFICATION);
  if (val != null) {
    justification=((Float)val).floatValue();
  }
  for (int index=segmentsStart, nextRunStart=segmentsStart; index < segmentsEnd; index=nextRunStart, aci.setIndex(index)) {
    nextRunStart=aci.getRunLimit();
    attributes=unpackAttributes(aci.getAttributes());
    TextDecorator.Decoration d=TextDecorator.getDecoration(attributes);
    decorations.put(new Integer(index),d);
    Font value=(Font)attributes.get(TextAttribute.CHAR_REPLACEMENT);
    if (value == null) {
      value=(Font)attributes.get(TextAttribute.FONT);
      if (value == null) {
        if (attributes.get(TextAttribute.FAMILY) != null) {
          value=Font.getFont(attributes);
        }
        if (value == null) {
          if (forcedFontRunStartsList == null) {
            forcedFontRunStartsList=new ArrayList<Integer>();
          }
          FontFinder.findFonts(text,index,nextRunStart,forcedFontRunStartsList,fonts);
          value=fonts.get(new Integer(index));
        }
      }
    }
    fonts.put(new Integer(index),value);
  }
  if (forcedFontRunStartsList != null) {
    forcedFontRunStarts=new int[forcedFontRunStartsList.size()];
    for (int i=0; i < forcedFontRunStartsList.size(); i++) {
      forcedFontRunStarts[i]=forcedFontRunStartsList.get(i).intValue();
    }
  }
}
