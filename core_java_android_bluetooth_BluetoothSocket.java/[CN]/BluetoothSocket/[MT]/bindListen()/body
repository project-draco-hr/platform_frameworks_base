{
  int ret;
  if (mSocketState == SocketState.CLOSED)   return EBADFD;
  IBluetooth bluetoothProxy=BluetoothAdapter.getDefaultAdapter().getBluetoothService(null);
  if (bluetoothProxy == null) {
    Log.e(TAG,"bindListen fail, reason: bluetooth is off");
    return -1;
  }
  try {
    mPfd=bluetoothProxy.createSocketChannel(mType,mServiceName,mUuid,mPort,getSecurityFlags());
  }
 catch (  RemoteException e) {
    Log.e(TAG,Log.getStackTraceString(new Throwable()));
    return -1;
  }
  try {
synchronized (this) {
      Log.d(TAG,"bindListen(), SocketState: " + mSocketState + ", mPfd: "+ mPfd);
      if (mSocketState != SocketState.INIT)       return EBADFD;
      if (mPfd == null)       return -1;
      FileDescriptor fd=mPfd.getFileDescriptor();
      Log.d(TAG,"bindListen(), new LocalSocket ");
      mSocket=new LocalSocket(fd);
      Log.d(TAG,"bindListen(), new LocalSocket.getInputStream() ");
      mSocketIS=mSocket.getInputStream();
      mSocketOS=mSocket.getOutputStream();
    }
    Log.d(TAG,"bindListen(), readInt mSocketIS: " + mSocketIS);
    int channel=readInt(mSocketIS);
synchronized (this) {
      if (mSocketState == SocketState.INIT)       mSocketState=SocketState.LISTENING;
    }
    Log.d(TAG,"channel: " + channel);
    if (mPort == -1) {
      mPort=channel;
    }
    ret=0;
  }
 catch (  IOException e) {
    Log.e(TAG,"bindListen, fail to get port number, exception: " + e);
    return -1;
  }
  return ret;
}
