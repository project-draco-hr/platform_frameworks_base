{
  logv("Security type is %s",securityType.toString());
  WifiConfiguration config=null;
switch (securityType) {
case OPEN:
    config=WifiConfigurationHelper.createOpenConfig(ssid);
  break;
case WEP64:
assertNotNull("password is empty",password);
assertTrue(WifiConfigurationHelper.isHex(password,10));
config=WifiConfigurationHelper.createWepConfig(ssid,password);
config.allowedGroupCiphers.set(GroupCipher.WEP40);
break;
case WEP128:
assertNotNull("password is empty",password);
assertTrue(WifiConfigurationHelper.isHex(password,26));
config=WifiConfigurationHelper.createWepConfig(ssid,password);
config.allowedGroupCiphers.set(GroupCipher.WEP104);
break;
case WPA_TKIP:
assertNotNull("password is empty",password);
config=WifiConfigurationHelper.createPskConfig(ssid,password);
config.allowedAuthAlgorithms.set(AuthAlgorithm.OPEN);
config.allowedProtocols.set(Protocol.WPA);
config.allowedPairwiseCiphers.set(PairwiseCipher.TKIP);
config.allowedGroupCiphers.set(GroupCipher.TKIP);
break;
case WPA2_AES:
assertNotNull("password is empty",password);
config=WifiConfigurationHelper.createPskConfig(ssid,password);
config.allowedAuthAlgorithms.set(AuthAlgorithm.OPEN);
config.allowedProtocols.set(Protocol.RSN);
config.allowedPairwiseCiphers.set(PairwiseCipher.CCMP);
config.allowedGroupCiphers.set(GroupCipher.CCMP);
break;
default :
fail("Not a valid security type: " + securityType);
break;
}
return config;
}
