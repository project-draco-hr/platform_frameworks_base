{
  assertNotNull("no test ssid",mSsid);
  WifiConfiguration config=null;
  SECURITY_TYPE security=SECURITY_TYPE.valueOf(mSecurityType);
  logv("Security type is " + security.toString());
switch (security) {
case OPEN:
    config=WifiConfigurationHelper.createOpenConfig(mSsid);
  break;
case WEP64:
assertNotNull("password is empty",mPassword);
assertTrue(WifiConfigurationHelper.isHex(mPassword,10));
config=WifiConfigurationHelper.createWepConfig(mSsid,mPassword);
config.allowedGroupCiphers.set(GroupCipher.WEP40);
break;
case WEP128:
assertNotNull("password is empty",mPassword);
assertTrue(WifiConfigurationHelper.isHex(mPassword,26));
config=WifiConfigurationHelper.createWepConfig(mSsid,mPassword);
config.allowedGroupCiphers.set(GroupCipher.WEP104);
break;
case WPA_TKIP:
assertNotNull("password is empty",mPassword);
config=WifiConfigurationHelper.createPskConfig(mSsid,mPassword);
config.allowedAuthAlgorithms.set(AuthAlgorithm.OPEN);
config.allowedProtocols.set(Protocol.WPA);
config.allowedPairwiseCiphers.set(PairwiseCipher.TKIP);
config.allowedGroupCiphers.set(GroupCipher.TKIP);
break;
case WPA2_AES:
assertNotNull("password is empty",mPassword);
config=WifiConfigurationHelper.createPskConfig(mSsid,mPassword);
config.allowedAuthAlgorithms.set(AuthAlgorithm.OPEN);
config.allowedProtocols.set(Protocol.RSN);
config.allowedPairwiseCiphers.set(PairwiseCipher.CCMP);
config.allowedGroupCiphers.set(GroupCipher.CCMP);
break;
default :
fail("Not a valid security type: " + mSecurityType);
break;
}
logv("network config: %s",config.toString());
connectToWifi(config);
assertTrue("no network connectivity at end of test",checkNetworkConnectivity());
}
