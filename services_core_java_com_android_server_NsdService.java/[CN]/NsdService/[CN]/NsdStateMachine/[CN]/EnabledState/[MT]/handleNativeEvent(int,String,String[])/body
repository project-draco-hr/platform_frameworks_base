{
  boolean handled=true;
  NsdServiceInfo servInfo;
  int id=Integer.parseInt(cooked[1]);
  ClientInfo clientInfo=mIdToClientInfoMap.get(id);
  if (clientInfo == null) {
    Slog.e(TAG,"Unique id with no client mapping: " + id);
    handled=false;
    return handled;
  }
  int clientId=-1;
  int keyId=clientInfo.mClientIds.indexOfValue(id);
  if (keyId != -1) {
    clientId=clientInfo.mClientIds.keyAt(keyId);
  }
 else {
    Slog.d(TAG,"Notification for a listener that is no longer active: " + id);
    handled=false;
    return handled;
  }
switch (code) {
case NativeResponseCode.SERVICE_FOUND:
    if (DBG)     Slog.d(TAG,"SERVICE_FOUND Raw: " + raw);
  servInfo=new NsdServiceInfo(cooked[2],cooked[3]);
clientInfo.mChannel.sendMessage(NsdManager.SERVICE_FOUND,0,clientId,servInfo);
break;
case NativeResponseCode.SERVICE_LOST:
if (DBG) Slog.d(TAG,"SERVICE_LOST Raw: " + raw);
servInfo=new NsdServiceInfo(cooked[2],cooked[3]);
clientInfo.mChannel.sendMessage(NsdManager.SERVICE_LOST,0,clientId,servInfo);
break;
case NativeResponseCode.SERVICE_DISCOVERY_FAILED:
if (DBG) Slog.d(TAG,"SERVICE_DISC_FAILED Raw: " + raw);
clientInfo.mChannel.sendMessage(NsdManager.DISCOVER_SERVICES_FAILED,NsdManager.FAILURE_INTERNAL_ERROR,clientId);
break;
case NativeResponseCode.SERVICE_REGISTERED:
if (DBG) Slog.d(TAG,"SERVICE_REGISTERED Raw: " + raw);
servInfo=new NsdServiceInfo(cooked[2],null);
clientInfo.mChannel.sendMessage(NsdManager.REGISTER_SERVICE_SUCCEEDED,id,clientId,servInfo);
break;
case NativeResponseCode.SERVICE_REGISTRATION_FAILED:
if (DBG) Slog.d(TAG,"SERVICE_REGISTER_FAILED Raw: " + raw);
clientInfo.mChannel.sendMessage(NsdManager.REGISTER_SERVICE_FAILED,NsdManager.FAILURE_INTERNAL_ERROR,clientId);
break;
case NativeResponseCode.SERVICE_UPDATED:
break;
case NativeResponseCode.SERVICE_UPDATE_FAILED:
break;
case NativeResponseCode.SERVICE_RESOLVED:
if (DBG) Slog.d(TAG,"SERVICE_RESOLVED Raw: " + raw);
int index=cooked[2].indexOf(".");
if (index == -1) {
Slog.e(TAG,"Invalid service found " + raw);
break;
}
String name=cooked[2].substring(0,index);
String rest=cooked[2].substring(index);
String type=rest.replace(".local.","");
clientInfo.mResolvedService.setServiceName(name);
clientInfo.mResolvedService.setServiceType(type);
clientInfo.mResolvedService.setPort(Integer.parseInt(cooked[4]));
stopResolveService(id);
removeRequestMap(clientId,id,clientInfo);
int id2=getUniqueId();
if (getAddrInfo(id2,cooked[3])) {
storeRequestMap(clientId,id2,clientInfo,NsdManager.RESOLVE_SERVICE);
}
 else {
clientInfo.mChannel.sendMessage(NsdManager.RESOLVE_SERVICE_FAILED,NsdManager.FAILURE_INTERNAL_ERROR,clientId);
clientInfo.mResolvedService=null;
}
break;
case NativeResponseCode.SERVICE_RESOLUTION_FAILED:
if (DBG) Slog.d(TAG,"SERVICE_RESOLVE_FAILED Raw: " + raw);
stopResolveService(id);
removeRequestMap(clientId,id,clientInfo);
clientInfo.mResolvedService=null;
clientInfo.mChannel.sendMessage(NsdManager.RESOLVE_SERVICE_FAILED,NsdManager.FAILURE_INTERNAL_ERROR,clientId);
break;
case NativeResponseCode.SERVICE_GET_ADDR_FAILED:
stopGetAddrInfo(id);
removeRequestMap(clientId,id,clientInfo);
clientInfo.mResolvedService=null;
if (DBG) Slog.d(TAG,"SERVICE_RESOLVE_FAILED Raw: " + raw);
clientInfo.mChannel.sendMessage(NsdManager.RESOLVE_SERVICE_FAILED,NsdManager.FAILURE_INTERNAL_ERROR,clientId);
break;
case NativeResponseCode.SERVICE_GET_ADDR_SUCCESS:
if (DBG) Slog.d(TAG,"SERVICE_GET_ADDR_SUCCESS Raw: " + raw);
try {
clientInfo.mResolvedService.setHost(InetAddress.getByName(cooked[4]));
clientInfo.mChannel.sendMessage(NsdManager.RESOLVE_SERVICE_SUCCEEDED,0,clientId,clientInfo.mResolvedService);
}
 catch (java.net.UnknownHostException e) {
clientInfo.mChannel.sendMessage(NsdManager.RESOLVE_SERVICE_FAILED,NsdManager.FAILURE_INTERNAL_ERROR,clientId);
}
stopGetAddrInfo(id);
removeRequestMap(clientId,id,clientInfo);
clientInfo.mResolvedService=null;
break;
default :
handled=false;
break;
}
return handled;
}
