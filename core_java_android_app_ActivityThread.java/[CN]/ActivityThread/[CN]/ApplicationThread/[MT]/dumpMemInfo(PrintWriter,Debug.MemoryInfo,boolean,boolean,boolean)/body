{
  long nativeMax=Debug.getNativeHeapSize() / 1024;
  long nativeAllocated=Debug.getNativeHeapAllocatedSize() / 1024;
  long nativeFree=Debug.getNativeHeapFreeSize() / 1024;
  Runtime runtime=Runtime.getRuntime();
  long dalvikMax=runtime.totalMemory() / 1024;
  long dalvikFree=runtime.freeMemory() / 1024;
  long dalvikAllocated=dalvikMax - dalvikFree;
  long viewInstanceCount=ViewDebug.getViewInstanceCount();
  long viewRootInstanceCount=ViewDebug.getViewRootImplCount();
  long appContextInstanceCount=Debug.countInstancesOfClass(ContextImpl.class);
  long activityInstanceCount=Debug.countInstancesOfClass(Activity.class);
  int globalAssetCount=AssetManager.getGlobalAssetCount();
  int globalAssetManagerCount=AssetManager.getGlobalAssetManagerCount();
  int binderLocalObjectCount=Debug.getBinderLocalObjectCount();
  int binderProxyObjectCount=Debug.getBinderProxyObjectCount();
  int binderDeathObjectCount=Debug.getBinderDeathObjectCount();
  long openSslSocketCount=Debug.countInstancesOfClass(OpenSSLSocketImpl.class);
  SQLiteDebug.PagerStats stats=SQLiteDebug.getDatabaseInfo();
  dumpMemInfoTable(pw,memInfo,checkin,dumpFullInfo,dumpDalvik,Process.myPid(),(mBoundApplication != null) ? mBoundApplication.processName : "unknown",nativeMax,nativeAllocated,nativeFree,dalvikMax,dalvikAllocated,dalvikFree);
  if (checkin) {
    pw.print(viewInstanceCount);
    pw.print(',');
    pw.print(viewRootInstanceCount);
    pw.print(',');
    pw.print(appContextInstanceCount);
    pw.print(',');
    pw.print(activityInstanceCount);
    pw.print(',');
    pw.print(globalAssetCount);
    pw.print(',');
    pw.print(globalAssetManagerCount);
    pw.print(',');
    pw.print(binderLocalObjectCount);
    pw.print(',');
    pw.print(binderProxyObjectCount);
    pw.print(',');
    pw.print(binderDeathObjectCount);
    pw.print(',');
    pw.print(openSslSocketCount);
    pw.print(',');
    pw.print(stats.memoryUsed / 1024);
    pw.print(',');
    pw.print(stats.memoryUsed / 1024);
    pw.print(',');
    pw.print(stats.pageCacheOverflow / 1024);
    pw.print(',');
    pw.print(stats.largestMemAlloc / 1024);
    for (int i=0; i < stats.dbStats.size(); i++) {
      DbStats dbStats=stats.dbStats.get(i);
      pw.print(',');
      pw.print(dbStats.dbName);
      pw.print(',');
      pw.print(dbStats.pageSize);
      pw.print(',');
      pw.print(dbStats.dbSize);
      pw.print(',');
      pw.print(dbStats.lookaside);
      pw.print(',');
      pw.print(dbStats.cache);
      pw.print(',');
      pw.print(dbStats.cache);
    }
    pw.println();
    return;
  }
  pw.println(" ");
  pw.println(" Objects");
  printRow(pw,TWO_COUNT_COLUMNS,"Views:",viewInstanceCount,"ViewRootImpl:",viewRootInstanceCount);
  printRow(pw,TWO_COUNT_COLUMNS,"AppContexts:",appContextInstanceCount,"Activities:",activityInstanceCount);
  printRow(pw,TWO_COUNT_COLUMNS,"Assets:",globalAssetCount,"AssetManagers:",globalAssetManagerCount);
  printRow(pw,TWO_COUNT_COLUMNS,"Local Binders:",binderLocalObjectCount,"Proxy Binders:",binderProxyObjectCount);
  printRow(pw,ONE_COUNT_COLUMN,"Death Recipients:",binderDeathObjectCount);
  printRow(pw,ONE_COUNT_COLUMN,"OpenSSL Sockets:",openSslSocketCount);
  pw.println(" ");
  pw.println(" SQL");
  printRow(pw,ONE_COUNT_COLUMN,"MEMORY_USED:",stats.memoryUsed / 1024);
  printRow(pw,TWO_COUNT_COLUMNS,"PAGECACHE_OVERFLOW:",stats.pageCacheOverflow / 1024,"MALLOC_SIZE:",stats.largestMemAlloc / 1024);
  pw.println(" ");
  int N=stats.dbStats.size();
  if (N > 0) {
    pw.println(" DATABASES");
    printRow(pw,"  %8s %8s %14s %14s  %s","pgsz","dbsz","Lookaside(b)","cache","Dbname");
    for (int i=0; i < N; i++) {
      DbStats dbStats=stats.dbStats.get(i);
      printRow(pw,DB_INFO_FORMAT,(dbStats.pageSize > 0) ? String.valueOf(dbStats.pageSize) : " ",(dbStats.dbSize > 0) ? String.valueOf(dbStats.dbSize) : " ",(dbStats.lookaside > 0) ? String.valueOf(dbStats.lookaside) : " ",dbStats.cache,dbStats.dbName);
    }
  }
  String assetAlloc=AssetManager.getAssetAllocations();
  if (assetAlloc != null) {
    pw.println(" ");
    pw.println(" Asset Allocations");
    pw.print(assetAlloc);
  }
}
