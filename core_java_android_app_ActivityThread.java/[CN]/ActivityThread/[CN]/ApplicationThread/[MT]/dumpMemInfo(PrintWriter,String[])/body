{
  long nativeMax=Debug.getNativeHeapSize() / 1024;
  long nativeAllocated=Debug.getNativeHeapAllocatedSize() / 1024;
  long nativeFree=Debug.getNativeHeapFreeSize() / 1024;
  Debug.MemoryInfo memInfo=new Debug.MemoryInfo();
  Debug.getMemoryInfo(memInfo);
  Runtime runtime=Runtime.getRuntime();
  long dalvikMax=runtime.totalMemory() / 1024;
  long dalvikFree=runtime.freeMemory() / 1024;
  long dalvikAllocated=dalvikMax - dalvikFree;
  long viewInstanceCount=ViewDebug.getViewInstanceCount();
  long viewRootInstanceCount=ViewDebug.getViewRootImplCount();
  long appContextInstanceCount=Debug.countInstancesOfClass(ContextImpl.class);
  long activityInstanceCount=Debug.countInstancesOfClass(Activity.class);
  int globalAssetCount=AssetManager.getGlobalAssetCount();
  int globalAssetManagerCount=AssetManager.getGlobalAssetManagerCount();
  int binderLocalObjectCount=Debug.getBinderLocalObjectCount();
  int binderProxyObjectCount=Debug.getBinderProxyObjectCount();
  int binderDeathObjectCount=Debug.getBinderDeathObjectCount();
  long openSslSocketCount=Debug.countInstancesOfClass(OpenSSLSocketImpl.class);
  long sqliteAllocated=SQLiteDebug.getHeapAllocatedSize() / 1024;
  SQLiteDebug.PagerStats stats=SQLiteDebug.getDatabaseInfo();
  boolean doCheckinFormat=false;
  if (args != null) {
    for (    String arg : args) {
      if ("-c".equals(arg))       doCheckinFormat=true;
    }
  }
  if (doCheckinFormat) {
    String processName=(mBoundApplication != null) ? mBoundApplication.processName : "unknown";
    pw.print(ACTIVITY_THREAD_CHECKIN_VERSION);
    pw.print(',');
    pw.print(Process.myPid());
    pw.print(',');
    pw.print(processName);
    pw.print(',');
    pw.print(nativeMax);
    pw.print(',');
    pw.print(dalvikMax);
    pw.print(',');
    pw.print("N/A,");
    pw.print(nativeMax + dalvikMax);
    pw.print(',');
    pw.print(nativeAllocated);
    pw.print(',');
    pw.print(dalvikAllocated);
    pw.print(',');
    pw.print("N/A,");
    pw.print(nativeAllocated + dalvikAllocated);
    pw.print(',');
    pw.print(nativeFree);
    pw.print(',');
    pw.print(dalvikFree);
    pw.print(',');
    pw.print("N/A,");
    pw.print(nativeFree + dalvikFree);
    pw.print(',');
    pw.print(memInfo.nativePss);
    pw.print(',');
    pw.print(memInfo.dalvikPss);
    pw.print(',');
    pw.print(memInfo.otherPss);
    pw.print(',');
    pw.print(memInfo.nativePss + memInfo.dalvikPss + memInfo.otherPss);
    pw.print(',');
    pw.print(memInfo.nativeSharedDirty);
    pw.print(',');
    pw.print(memInfo.dalvikSharedDirty);
    pw.print(',');
    pw.print(memInfo.otherSharedDirty);
    pw.print(',');
    pw.print(memInfo.nativeSharedDirty + memInfo.dalvikSharedDirty + memInfo.otherSharedDirty);
    pw.print(',');
    pw.print(memInfo.nativePrivateDirty);
    pw.print(',');
    pw.print(memInfo.dalvikPrivateDirty);
    pw.print(',');
    pw.print(memInfo.otherPrivateDirty);
    pw.print(',');
    pw.print(memInfo.nativePrivateDirty + memInfo.dalvikPrivateDirty + memInfo.otherPrivateDirty);
    pw.print(',');
    pw.print(viewInstanceCount);
    pw.print(',');
    pw.print(viewRootInstanceCount);
    pw.print(',');
    pw.print(appContextInstanceCount);
    pw.print(',');
    pw.print(activityInstanceCount);
    pw.print(',');
    pw.print(globalAssetCount);
    pw.print(',');
    pw.print(globalAssetManagerCount);
    pw.print(',');
    pw.print(binderLocalObjectCount);
    pw.print(',');
    pw.print(binderProxyObjectCount);
    pw.print(',');
    pw.print(binderDeathObjectCount);
    pw.print(',');
    pw.print(openSslSocketCount);
    pw.print(',');
    pw.print(sqliteAllocated);
    pw.print(',');
    pw.print(stats.memoryUsed / 1024);
    pw.print(',');
    pw.print(stats.pageCacheOverflo / 1024);
    pw.print(',');
    pw.print(stats.largestMemAlloc / 1024);
    pw.print(',');
    for (int i=0; i < stats.dbStats.size(); i++) {
      DbStats dbStats=stats.dbStats.get(i);
      printRow(pw,DB_INFO_FORMAT,dbStats.pageSize,dbStats.dbSize,dbStats.lookaside,dbStats.cache,dbStats.dbName);
      pw.print(',');
    }
    return memInfo;
  }
  printRow(pw,HEAP_COLUMN,"","","Shared","Private","Heap","Heap","Heap");
  printRow(pw,HEAP_COLUMN,"","Pss","Dirty","Dirty","Size","Alloc","Free");
  printRow(pw,HEAP_COLUMN,"","------","------","------","------","------","------");
  printRow(pw,HEAP_COLUMN,"Native",memInfo.nativePss,memInfo.nativeSharedDirty,memInfo.nativePrivateDirty,nativeMax,nativeAllocated,nativeFree);
  printRow(pw,HEAP_COLUMN,"Dalvik",memInfo.dalvikPss,memInfo.dalvikSharedDirty,memInfo.dalvikPrivateDirty,dalvikMax,dalvikAllocated,dalvikFree);
  int otherPss=memInfo.otherPss;
  int otherSharedDirty=memInfo.otherSharedDirty;
  int otherPrivateDirty=memInfo.otherPrivateDirty;
  for (int i=0; i < Debug.MemoryInfo.NUM_OTHER_STATS; i++) {
    printRow(pw,HEAP_COLUMN,Debug.MemoryInfo.getOtherLabel(i),memInfo.getOtherPss(i),memInfo.getOtherSharedDirty(i),memInfo.getOtherPrivateDirty(i),"","","");
    otherPss-=memInfo.getOtherPss(i);
    otherSharedDirty-=memInfo.getOtherSharedDirty(i);
    otherPrivateDirty-=memInfo.getOtherPrivateDirty(i);
  }
  printRow(pw,HEAP_COLUMN,"Unknown",otherPss,otherSharedDirty,otherPrivateDirty,"","","");
  printRow(pw,HEAP_COLUMN,"TOTAL",memInfo.getTotalPss(),memInfo.getTotalSharedDirty(),memInfo.getTotalPrivateDirty(),nativeMax + dalvikMax,nativeAllocated + dalvikAllocated,nativeFree + dalvikFree);
  pw.println(" ");
  pw.println(" Objects");
  printRow(pw,TWO_COUNT_COLUMNS,"Views:",viewInstanceCount,"ViewRootImpl:",viewRootInstanceCount);
  printRow(pw,TWO_COUNT_COLUMNS,"AppContexts:",appContextInstanceCount,"Activities:",activityInstanceCount);
  printRow(pw,TWO_COUNT_COLUMNS,"Assets:",globalAssetCount,"AssetManagers:",globalAssetManagerCount);
  printRow(pw,TWO_COUNT_COLUMNS,"Local Binders:",binderLocalObjectCount,"Proxy Binders:",binderProxyObjectCount);
  printRow(pw,ONE_COUNT_COLUMN,"Death Recipients:",binderDeathObjectCount);
  printRow(pw,ONE_COUNT_COLUMN,"OpenSSL Sockets:",openSslSocketCount);
  pw.println(" ");
  pw.println(" SQL");
  printRow(pw,TWO_COUNT_COLUMNS_DB,"heap:",sqliteAllocated,"MEMORY_USED:",stats.memoryUsed / 1024);
  printRow(pw,TWO_COUNT_COLUMNS_DB,"PAGECACHE_OVERFLOW:",stats.pageCacheOverflo / 1024,"MALLOC_SIZE:",stats.largestMemAlloc / 1024);
  pw.println(" ");
  int N=stats.dbStats.size();
  if (N > 0) {
    pw.println(" DATABASES");
    printRow(pw,"  %8s %8s %14s %14s  %s","pgsz","dbsz","Lookaside(b)","cache","Dbname");
    for (int i=0; i < N; i++) {
      DbStats dbStats=stats.dbStats.get(i);
      printRow(pw,DB_INFO_FORMAT,(dbStats.pageSize > 0) ? String.valueOf(dbStats.pageSize) : " ",(dbStats.dbSize > 0) ? String.valueOf(dbStats.dbSize) : " ",(dbStats.lookaside > 0) ? String.valueOf(dbStats.lookaside) : " ",dbStats.cache,dbStats.dbName);
    }
  }
  String assetAlloc=AssetManager.getAssetAllocations();
  if (assetAlloc != null) {
    pw.println(" ");
    pw.println(" Asset Allocations");
    pw.print(assetAlloc);
  }
  return memInfo;
}
