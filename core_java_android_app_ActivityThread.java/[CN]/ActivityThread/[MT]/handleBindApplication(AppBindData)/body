{
  mBoundApplication=data;
  mConfiguration=new Configuration(data.config);
  android.ddm.DdmHandleAppName.setAppName(data.processName);
  TimeZone.setDefault(null);
  Locale.setDefault(data.config.locale);
  Resources.getSystem().updateConfiguration(mConfiguration,null);
  data.info=getPackageInfoNoCheck(data.appInfo);
  if (data.debugMode != IApplicationThread.DEBUG_OFF) {
    Debug.changeDebugPort(8100);
    if (data.debugMode == IApplicationThread.DEBUG_WAIT) {
      Log.w(TAG,"Application " + data.info.getPackageName() + " is waiting for the debugger on port 8100...");
      IActivityManager mgr=ActivityManagerNative.getDefault();
      try {
        mgr.showWaitingForDebugger(mAppThread,true);
      }
 catch (      RemoteException ex) {
      }
      Debug.waitForDebugger();
      try {
        mgr.showWaitingForDebugger(mAppThread,false);
      }
 catch (      RemoteException ex) {
      }
    }
 else {
      Log.w(TAG,"Application " + data.info.getPackageName() + " can be debugged on port 8100...");
    }
  }
  if (data.instrumentationName != null) {
    ApplicationContext appContext=new ApplicationContext();
    appContext.init(data.info,null,this);
    InstrumentationInfo ii=null;
    try {
      ii=appContext.getPackageManager().getInstrumentationInfo(data.instrumentationName,0);
    }
 catch (    PackageManager.NameNotFoundException e) {
    }
    if (ii == null) {
      throw new RuntimeException("Unable to find instrumentation info for: " + data.instrumentationName);
    }
    mInstrumentationAppDir=ii.sourceDir;
    mInstrumentationAppPackage=ii.packageName;
    mInstrumentedAppDir=data.info.getAppDir();
    ApplicationInfo instrApp=new ApplicationInfo();
    instrApp.packageName=ii.packageName;
    instrApp.sourceDir=ii.sourceDir;
    instrApp.publicSourceDir=ii.publicSourceDir;
    instrApp.dataDir=ii.dataDir;
    PackageInfo pi=getPackageInfo(instrApp,appContext.getClassLoader(),false,true);
    ApplicationContext instrContext=new ApplicationContext();
    instrContext.init(pi,null,this);
    try {
      java.lang.ClassLoader cl=instrContext.getClassLoader();
      mInstrumentation=(Instrumentation)cl.loadClass(data.instrumentationName.getClassName()).newInstance();
    }
 catch (    Exception e) {
      throw new RuntimeException("Unable to instantiate instrumentation " + data.instrumentationName + ": "+ e.toString(),e);
    }
    mInstrumentation.init(this,instrContext,appContext,new ComponentName(ii.packageName,ii.name),data.instrumentationWatcher);
    if (data.profileFile != null && !ii.handleProfiling) {
      data.handlingProfiling=true;
      File file=new File(data.profileFile);
      file.getParentFile().mkdirs();
      Debug.startMethodTracing(file.toString(),8 * 1024 * 1024);
    }
    try {
      mInstrumentation.onCreate(data.instrumentationArgs);
    }
 catch (    Exception e) {
      throw new RuntimeException("Exception thrown in onCreate() of " + data.instrumentationName + ": "+ e.toString(),e);
    }
  }
 else {
    mInstrumentation=new Instrumentation();
  }
  Application app=data.info.makeApplication(data.restrictedBackupMode);
  mInitialApplication=app;
  List<ProviderInfo> providers=data.providers;
  if (providers != null) {
    installContentProviders(app,providers);
  }
  try {
    mInstrumentation.callApplicationOnCreate(app);
  }
 catch (  Exception e) {
    if (!mInstrumentation.onException(app,e)) {
      throw new RuntimeException("Unable to create application " + app.getClass().getName() + ": "+ e.toString(),e);
    }
  }
}
