{
  unscheduleGcIdler();
  ActivityRecord r=performResumeActivity(token,clearHide);
  if (r != null) {
    final Activity a=r.activity;
    if (localLOGV)     Log.v(TAG,"Resume " + r + " started activity: "+ a.mStartedActivity+ ", hideForNow: "+ r.hideForNow+ ", finished: "+ a.mFinished);
    if (r.window == null && !a.mFinished && !a.mStartedActivity) {
      r.window=r.activity.getWindow();
      View decor=r.window.getDecorView();
      decor.setVisibility(View.INVISIBLE);
      ViewManager wm=a.getWindowManager();
      WindowManager.LayoutParams l=r.window.getAttributes();
      a.mDecor=decor;
      l.type=WindowManager.LayoutParams.TYPE_BASE_APPLICATION;
      wm.addView(decor,l);
    }
 else     if (a.mStartedActivity) {
      if (localLOGV)       Log.v(TAG,"Launch " + r + " mStartedActivity set");
      r.hideForNow=true;
    }
    if (!r.activity.mFinished && r.activity.mDecor != null && !r.hideForNow) {
      if (r.newConfig != null) {
        performConfigurationChanged(r.activity,r.newConfig);
        r.newConfig=null;
      }
      r.activity.mDecor.setVisibility(View.VISIBLE);
      mNumVisibleActivities++;
    }
    r.nextIdle=mNewActivities;
    mNewActivities=r;
    if (localLOGV)     Log.v(TAG,"Scheduling idle handler for " + r);
    Looper.myQueue().addIdleHandler(new Idler());
  }
 else {
    try {
      ActivityManagerNative.getDefault().finishActivity(token,Activity.RESULT_CANCELED,null);
    }
 catch (    RemoteException ex) {
    }
  }
}
