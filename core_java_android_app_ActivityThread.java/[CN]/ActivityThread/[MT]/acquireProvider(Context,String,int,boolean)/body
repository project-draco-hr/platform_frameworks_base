{
  final ProviderKey key=new ProviderKey(auth,userId);
  final IContentProvider provider=acquireExistingProvider(c,key,stable);
  if (provider != null) {
    return provider;
  }
  AcquiringProviderRecord r;
  boolean first=false;
synchronized (mAcquiringProviderMap) {
    r=mAcquiringProviderMap.get(key);
    if (r == null) {
      r=new AcquiringProviderRecord();
      mAcquiringProviderMap.put(key,r);
      first=true;
    }
 else {
      r.requests++;
    }
  }
  IActivityManager.ContentProviderHolder holder=null;
  try {
    if (first) {
      holder=ActivityManagerNative.getDefault().getContentProvider(getApplicationThread(),auth,userId,stable);
    }
 else {
synchronized (r) {
        while (r.acquiring) {
          try {
            r.wait();
          }
 catch (          InterruptedException e) {
          }
        }
        holder=r.holder;
      }
    }
  }
 catch (  RemoteException ex) {
  }
catch (  RuntimeException e) {
synchronized (r) {
      r.runtimeException=e;
    }
  }
 finally {
    if (first) {
synchronized (r) {
        r.holder=holder;
        r.acquiring=false;
        r.notifyAll();
      }
    }
synchronized (mAcquiringProviderMap) {
      if (--r.requests == 0) {
        mAcquiringProviderMap.remove(key);
      }
    }
    if (r.runtimeException != null) {
      throw r.runtimeException;
    }
  }
  if (holder == null) {
    Slog.e(TAG,"Failed to find provider info for " + auth);
    return null;
  }
  holder=installProvider(c,holder,holder.info,true,holder.noReleaseNeeded,stable);
  return holder.provider;
}
