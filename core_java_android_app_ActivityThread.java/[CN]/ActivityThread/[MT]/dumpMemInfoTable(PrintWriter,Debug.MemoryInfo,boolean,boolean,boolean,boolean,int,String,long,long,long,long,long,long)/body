{
  if (checkin) {
    pw.print(ACTIVITY_THREAD_CHECKIN_VERSION);
    pw.print(',');
    pw.print(pid);
    pw.print(',');
    pw.print(processName);
    pw.print(',');
    pw.print(nativeMax);
    pw.print(',');
    pw.print(dalvikMax);
    pw.print(',');
    pw.print("N/A,");
    pw.print(nativeMax + dalvikMax);
    pw.print(',');
    pw.print(nativeAllocated);
    pw.print(',');
    pw.print(dalvikAllocated);
    pw.print(',');
    pw.print("N/A,");
    pw.print(nativeAllocated + dalvikAllocated);
    pw.print(',');
    pw.print(nativeFree);
    pw.print(',');
    pw.print(dalvikFree);
    pw.print(',');
    pw.print("N/A,");
    pw.print(nativeFree + dalvikFree);
    pw.print(',');
    pw.print(memInfo.nativePss);
    pw.print(',');
    pw.print(memInfo.dalvikPss);
    pw.print(',');
    pw.print(memInfo.otherPss);
    pw.print(',');
    pw.print(memInfo.getTotalPss());
    pw.print(',');
    pw.print(memInfo.nativeSwappablePss);
    pw.print(',');
    pw.print(memInfo.dalvikSwappablePss);
    pw.print(',');
    pw.print(memInfo.otherSwappablePss);
    pw.print(',');
    pw.print(memInfo.getTotalSwappablePss());
    pw.print(',');
    pw.print(memInfo.nativeSharedDirty);
    pw.print(',');
    pw.print(memInfo.dalvikSharedDirty);
    pw.print(',');
    pw.print(memInfo.otherSharedDirty);
    pw.print(',');
    pw.print(memInfo.getTotalSharedDirty());
    pw.print(',');
    pw.print(memInfo.nativeSharedClean);
    pw.print(',');
    pw.print(memInfo.dalvikSharedClean);
    pw.print(',');
    pw.print(memInfo.otherSharedClean);
    pw.print(',');
    pw.print(memInfo.getTotalSharedClean());
    pw.print(',');
    pw.print(memInfo.nativePrivateDirty);
    pw.print(',');
    pw.print(memInfo.dalvikPrivateDirty);
    pw.print(',');
    pw.print(memInfo.otherPrivateDirty);
    pw.print(',');
    pw.print(memInfo.getTotalPrivateDirty());
    pw.print(',');
    pw.print(memInfo.nativePrivateClean);
    pw.print(',');
    pw.print(memInfo.dalvikPrivateClean);
    pw.print(',');
    pw.print(memInfo.otherPrivateClean);
    pw.print(',');
    pw.print(memInfo.getTotalPrivateClean());
    pw.print(',');
    for (int i=0; i < Debug.MemoryInfo.NUM_OTHER_STATS; i++) {
      pw.print(Debug.MemoryInfo.getOtherLabel(i));
      pw.print(',');
      pw.print(memInfo.getOtherPss(i));
      pw.print(',');
      pw.print(memInfo.getOtherSwappablePss(i));
      pw.print(',');
      pw.print(memInfo.getOtherSharedDirty(i));
      pw.print(',');
      pw.print(memInfo.getOtherSharedClean(i));
      pw.print(',');
      pw.print(memInfo.getOtherPrivateDirty(i));
      pw.print(',');
      pw.print(memInfo.getOtherPrivateClean(i));
      pw.print(',');
    }
    return;
  }
  if (!dumpSummaryOnly) {
    if (dumpFullInfo) {
      printRow(pw,HEAP_FULL_COLUMN,"","Pss","Pss","Shared","Private","Shared","Private",memInfo.hasSwappedOutPss ? "SwapPss" : "Swap","Heap","Heap","Heap");
      printRow(pw,HEAP_FULL_COLUMN,"","Total","Clean","Dirty","Dirty","Clean","Clean","Dirty","Size","Alloc","Free");
      printRow(pw,HEAP_FULL_COLUMN,"","------","------","------","------","------","------","------","------","------","------");
      printRow(pw,HEAP_FULL_COLUMN,"Native Heap",memInfo.nativePss,memInfo.nativeSwappablePss,memInfo.nativeSharedDirty,memInfo.nativePrivateDirty,memInfo.nativeSharedClean,memInfo.nativePrivateClean,memInfo.hasSwappedOutPss ? memInfo.nativeSwappedOut : memInfo.nativeSwappedOutPss,nativeMax,nativeAllocated,nativeFree);
      printRow(pw,HEAP_FULL_COLUMN,"Dalvik Heap",memInfo.dalvikPss,memInfo.dalvikSwappablePss,memInfo.dalvikSharedDirty,memInfo.dalvikPrivateDirty,memInfo.dalvikSharedClean,memInfo.dalvikPrivateClean,memInfo.hasSwappedOutPss ? memInfo.dalvikSwappedOut : memInfo.dalvikSwappedOutPss,dalvikMax,dalvikAllocated,dalvikFree);
    }
 else {
      printRow(pw,HEAP_COLUMN,"","Pss","Private","Private",memInfo.hasSwappedOutPss ? "SwapPss" : "Swap","Heap","Heap","Heap");
      printRow(pw,HEAP_COLUMN,"","Total","Dirty","Clean","Dirty","Size","Alloc","Free");
      printRow(pw,HEAP_COLUMN,"","------","------","------","------","------","------","------","------");
      printRow(pw,HEAP_COLUMN,"Native Heap",memInfo.nativePss,memInfo.nativePrivateDirty,memInfo.nativePrivateClean,memInfo.hasSwappedOutPss ? memInfo.nativeSwappedOutPss : memInfo.nativeSwappedOut,nativeMax,nativeAllocated,nativeFree);
      printRow(pw,HEAP_COLUMN,"Dalvik Heap",memInfo.dalvikPss,memInfo.dalvikPrivateDirty,memInfo.dalvikPrivateClean,memInfo.hasSwappedOutPss ? memInfo.dalvikSwappedOutPss : memInfo.dalvikSwappedOut,dalvikMax,dalvikAllocated,dalvikFree);
    }
    int otherPss=memInfo.otherPss;
    int otherSwappablePss=memInfo.otherSwappablePss;
    int otherSharedDirty=memInfo.otherSharedDirty;
    int otherPrivateDirty=memInfo.otherPrivateDirty;
    int otherSharedClean=memInfo.otherSharedClean;
    int otherPrivateClean=memInfo.otherPrivateClean;
    int otherSwappedOut=memInfo.otherSwappedOut;
    int otherSwappedOutPss=memInfo.otherSwappedOutPss;
    for (int i=0; i < Debug.MemoryInfo.NUM_OTHER_STATS; i++) {
      final int myPss=memInfo.getOtherPss(i);
      final int mySwappablePss=memInfo.getOtherSwappablePss(i);
      final int mySharedDirty=memInfo.getOtherSharedDirty(i);
      final int myPrivateDirty=memInfo.getOtherPrivateDirty(i);
      final int mySharedClean=memInfo.getOtherSharedClean(i);
      final int myPrivateClean=memInfo.getOtherPrivateClean(i);
      final int mySwappedOut=memInfo.getOtherSwappedOut(i);
      final int mySwappedOutPss=memInfo.getOtherSwappedOutPss(i);
      if (myPss != 0 || mySharedDirty != 0 || myPrivateDirty != 0 || mySharedClean != 0 || myPrivateClean != 0 || (memInfo.hasSwappedOutPss ? mySwappedOutPss : mySwappedOut) != 0) {
        if (dumpFullInfo) {
          printRow(pw,HEAP_FULL_COLUMN,Debug.MemoryInfo.getOtherLabel(i),myPss,mySwappablePss,mySharedDirty,myPrivateDirty,mySharedClean,myPrivateClean,memInfo.hasSwappedOutPss ? mySwappedOutPss : mySwappedOut,"","","");
        }
 else {
          printRow(pw,HEAP_COLUMN,Debug.MemoryInfo.getOtherLabel(i),myPss,myPrivateDirty,myPrivateClean,memInfo.hasSwappedOutPss ? mySwappedOutPss : mySwappedOut,"","","");
        }
        otherPss-=myPss;
        otherSwappablePss-=mySwappablePss;
        otherSharedDirty-=mySharedDirty;
        otherPrivateDirty-=myPrivateDirty;
        otherSharedClean-=mySharedClean;
        otherPrivateClean-=myPrivateClean;
        otherSwappedOut-=mySwappedOut;
        otherSwappedOutPss-=mySwappedOutPss;
      }
    }
    if (dumpFullInfo) {
      printRow(pw,HEAP_FULL_COLUMN,"Unknown",otherPss,otherSwappablePss,otherSharedDirty,otherPrivateDirty,otherSharedClean,otherPrivateClean,memInfo.hasSwappedOutPss ? otherSwappedOutPss : otherSwappedOut,"","","");
      printRow(pw,HEAP_FULL_COLUMN,"TOTAL",memInfo.getTotalPss(),memInfo.getTotalSwappablePss(),memInfo.getTotalSharedDirty(),memInfo.getTotalPrivateDirty(),memInfo.getTotalSharedClean(),memInfo.getTotalPrivateClean(),memInfo.hasSwappedOutPss ? memInfo.getTotalSwappedOut() : memInfo.getTotalSwappedOutPss(),nativeMax + dalvikMax,nativeAllocated + dalvikAllocated,nativeFree + dalvikFree);
    }
 else {
      printRow(pw,HEAP_COLUMN,"Unknown",otherPss,otherPrivateDirty,otherPrivateClean,memInfo.hasSwappedOutPss ? otherSwappedOutPss : otherSwappedOut,"","","");
      printRow(pw,HEAP_COLUMN,"TOTAL",memInfo.getTotalPss(),memInfo.getTotalPrivateDirty(),memInfo.getTotalPrivateClean(),memInfo.hasSwappedOutPss ? memInfo.getTotalSwappedOutPss() : memInfo.getTotalSwappedOut(),nativeMax + dalvikMax,nativeAllocated + dalvikAllocated,nativeFree + dalvikFree);
    }
    if (dumpDalvik) {
      pw.println(" ");
      pw.println(" Dalvik Details");
      for (int i=Debug.MemoryInfo.NUM_OTHER_STATS; i < Debug.MemoryInfo.NUM_OTHER_STATS + Debug.MemoryInfo.NUM_DVK_STATS; i++) {
        final int myPss=memInfo.getOtherPss(i);
        final int mySwappablePss=memInfo.getOtherSwappablePss(i);
        final int mySharedDirty=memInfo.getOtherSharedDirty(i);
        final int myPrivateDirty=memInfo.getOtherPrivateDirty(i);
        final int mySharedClean=memInfo.getOtherSharedClean(i);
        final int myPrivateClean=memInfo.getOtherPrivateClean(i);
        final int mySwappedOut=memInfo.getOtherSwappedOut(i);
        final int mySwappedOutPss=memInfo.getOtherSwappedOutPss(i);
        if (myPss != 0 || mySharedDirty != 0 || myPrivateDirty != 0 || mySharedClean != 0 || myPrivateClean != 0 || (memInfo.hasSwappedOutPss ? mySwappedOutPss : mySwappedOut) != 0) {
          if (dumpFullInfo) {
            printRow(pw,HEAP_FULL_COLUMN,Debug.MemoryInfo.getOtherLabel(i),myPss,mySwappablePss,mySharedDirty,myPrivateDirty,mySharedClean,myPrivateClean,memInfo.hasSwappedOutPss ? mySwappedOutPss : mySwappedOut,"","","");
          }
 else {
            printRow(pw,HEAP_COLUMN,Debug.MemoryInfo.getOtherLabel(i),myPss,myPrivateDirty,myPrivateClean,memInfo.hasSwappedOutPss ? mySwappedOutPss : mySwappedOut,"","","");
          }
        }
      }
    }
  }
  pw.println(" ");
  pw.println(" App Summary");
  printRow(pw,ONE_COUNT_COLUMN_HEADER,"","Pss(KB)");
  printRow(pw,ONE_COUNT_COLUMN_HEADER,"","------");
  printRow(pw,ONE_COUNT_COLUMN,"Java Heap:",memInfo.getSummaryJavaHeap());
  printRow(pw,ONE_COUNT_COLUMN,"Native Heap:",memInfo.getSummaryNativeHeap());
  printRow(pw,ONE_COUNT_COLUMN,"Code:",memInfo.getSummaryCode());
  printRow(pw,ONE_COUNT_COLUMN,"Stack:",memInfo.getSummaryStack());
  printRow(pw,ONE_COUNT_COLUMN,"Graphics:",memInfo.getSummaryGraphics());
  printRow(pw,ONE_COUNT_COLUMN,"Private Other:",memInfo.getSummaryPrivateOther());
  printRow(pw,ONE_COUNT_COLUMN,"System:",memInfo.getSummarySystem());
  pw.println(" ");
  if (memInfo.hasSwappedOutPss) {
    printRow(pw,TWO_COUNT_COLUMNS,"TOTAL:",memInfo.getSummaryTotalPss(),"TOTAL SWAP PSS:",memInfo.getSummaryTotalSwapPss());
  }
 else {
    printRow(pw,TWO_COUNT_COLUMNS,"TOTAL:",memInfo.getSummaryTotalPss(),"TOTAL SWAP (KB):",memInfo.getSummaryTotalSwap());
  }
}
