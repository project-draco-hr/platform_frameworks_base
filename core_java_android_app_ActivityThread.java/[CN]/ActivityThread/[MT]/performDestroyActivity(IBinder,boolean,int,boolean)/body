{
  ActivityClientRecord r=mActivities.get(token);
  Class activityClass=null;
  if (localLOGV)   Slog.v(TAG,"Performing finish of " + r);
  if (r != null) {
    activityClass=r.activity.getClass();
    r.activity.mConfigChangeFlags|=configChanges;
    if (finishing) {
      r.activity.mFinished=true;
    }
    if (!r.paused) {
      try {
        r.activity.mCalled=false;
        mInstrumentation.callActivityOnPause(r.activity);
        EventLog.writeEvent(LOG_ON_PAUSE_CALLED,r.activity.getComponentName().getClassName());
        if (!r.activity.mCalled) {
          throw new SuperNotCalledException("Activity " + safeToComponentShortString(r.intent) + " did not call through to super.onPause()");
        }
      }
 catch (      SuperNotCalledException e) {
        throw e;
      }
catch (      Exception e) {
        if (!mInstrumentation.onException(r.activity,e)) {
          throw new RuntimeException("Unable to pause activity " + safeToComponentShortString(r.intent) + ": "+ e.toString(),e);
        }
      }
      r.paused=true;
    }
    if (!r.stopped) {
      try {
        r.activity.performStop();
      }
 catch (      SuperNotCalledException e) {
        throw e;
      }
catch (      Exception e) {
        if (!mInstrumentation.onException(r.activity,e)) {
          throw new RuntimeException("Unable to stop activity " + safeToComponentShortString(r.intent) + ": "+ e.toString(),e);
        }
      }
      r.stopped=true;
    }
    if (getNonConfigInstance) {
      try {
        r.lastNonConfigurationInstances=r.activity.retainNonConfigurationInstances();
      }
 catch (      Exception e) {
        if (!mInstrumentation.onException(r.activity,e)) {
          throw new RuntimeException("Unable to retain activity " + r.intent.getComponent().toShortString() + ": "+ e.toString(),e);
        }
      }
    }
    try {
      r.activity.mCalled=false;
      mInstrumentation.callActivityOnDestroy(r.activity);
      if (!r.activity.mCalled) {
        throw new SuperNotCalledException("Activity " + safeToComponentShortString(r.intent) + " did not call through to super.onDestroy()");
      }
      if (r.window != null) {
        r.window.closeAllPanels();
      }
    }
 catch (    SuperNotCalledException e) {
      throw e;
    }
catch (    Exception e) {
      if (!mInstrumentation.onException(r.activity,e)) {
        throw new RuntimeException("Unable to destroy activity " + safeToComponentShortString(r.intent) + ": "+ e.toString(),e);
      }
    }
  }
  mActivities.remove(token);
  StrictMode.decrementExpectedActivityCount(activityClass);
  return r;
}
