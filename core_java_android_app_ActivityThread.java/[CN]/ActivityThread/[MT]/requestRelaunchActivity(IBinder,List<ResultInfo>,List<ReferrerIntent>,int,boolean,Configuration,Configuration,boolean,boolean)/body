{
  ActivityClientRecord target=null;
synchronized (mResourcesManager) {
    for (int i=0; i < mRelaunchingActivities.size(); i++) {
      ActivityClientRecord r=mRelaunchingActivities.get(i);
      if (r.token == token) {
        target=r;
        if (pendingResults != null) {
          if (r.pendingResults != null) {
            r.pendingResults.addAll(pendingResults);
          }
 else {
            r.pendingResults=pendingResults;
          }
        }
        if (pendingNewIntents != null) {
          if (r.pendingIntents != null) {
            r.pendingIntents.addAll(pendingNewIntents);
          }
 else {
            r.pendingIntents=pendingNewIntents;
          }
        }
        if (!r.onlyLocalRequest && fromServer) {
          try {
            ActivityManagerNative.getDefault().activityRelaunched(token);
          }
 catch (          RemoteException e) {
            e.printStackTrace();
          }
        }
        break;
      }
    }
    if (target == null) {
      target=new ActivityClientRecord();
      target.token=token;
      target.pendingResults=pendingResults;
      target.pendingIntents=pendingNewIntents;
      target.mPreserveWindow=preserveWindow;
      if (!fromServer) {
        ActivityClientRecord existing=mActivities.get(token);
        if (existing != null) {
          target.startsNotResumed=existing.paused;
          target.overrideConfig=existing.overrideConfig;
        }
        target.onlyLocalRequest=true;
      }
      mRelaunchingActivities.add(target);
      sendMessage(H.RELAUNCH_ACTIVITY,target);
    }
    if (fromServer) {
      target.startsNotResumed=notResumed;
      target.onlyLocalRequest=false;
    }
    if (config != null) {
      target.createdConfig=config;
    }
    if (overrideConfig != null) {
      target.overrideConfig=overrideConfig;
    }
    target.pendingConfigChanges|=configChanges;
    target.relaunchSeq=getLifecycleSeq();
  }
  if (DEBUG_ORDER)   Slog.d(TAG,"relaunchActivity " + ActivityThread.this + " operation received seq: "+ target.relaunchSeq);
}
