{
  if (!attribute.startsWith("android:")) {
    int colon=attribute.indexOf(':');
    if (colon >= 0) {
      attribute=attribute.substring(colon + 1);
    }
  }
  SetterCall setterCall=null;
  MethodDescription conversionMethod=null;
  if (viewType != null) {
    HashMap<AccessorKey,MethodDescription> adapters=mStore.adapterMethods.get(attribute);
    ModelMethod bestSetterMethod=getBestSetter(viewType,valueType,attribute,imports);
    ModelClass bestViewType=null;
    ModelClass bestValueType=null;
    if (bestSetterMethod != null) {
      bestViewType=bestSetterMethod.getDeclaringClass();
      bestValueType=bestSetterMethod.getParameterTypes()[0];
      setterCall=new ModelMethodSetter(bestSetterMethod);
    }
    if (adapters != null) {
      for (      AccessorKey key : adapters.keySet()) {
        try {
          ModelClass adapterViewType=mClassAnalyzer.findClass(key.viewType,imports);
          if (adapterViewType.isAssignableFrom(viewType)) {
            try {
              ModelClass adapterValueType=mClassAnalyzer.findClass(key.valueType,imports);
              boolean isBetterView=bestViewType == null || bestValueType.isAssignableFrom(adapterValueType);
              if (isBetterParameter(valueType,adapterValueType,bestValueType,isBetterView,imports)) {
                bestViewType=adapterViewType;
                bestValueType=adapterValueType;
                MethodDescription adapter=adapters.get(key);
                setterCall=new AdapterSetter(adapter);
              }
            }
 catch (            Exception e) {
              L.e(e,"Unknown class: %s",key.valueType);
            }
          }
        }
 catch (        Exception e) {
          L.e(e,"Unknown class: %s",key.viewType);
        }
      }
    }
    conversionMethod=getConversionMethod(valueType,bestValueType,imports);
    if (valueType.isObject() && setterCall != null && bestValueType.isNullable()) {
      setterCall.setCast(bestValueType);
    }
  }
  if (setterCall == null) {
    setterCall=new DummySetter(getDefaultSetter(attribute));
    L.d("Cannot find the setter for attribute " + attribute + ". might be an include file,"+ " moving on.");
  }
  setterCall.setConverter(conversionMethod);
  return setterCall;
}
