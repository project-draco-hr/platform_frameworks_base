{
  Log.w(TAG,"Upgrading settings database from version " + oldVersion + " to "+ currentVersion);
  int upgradeVersion=oldVersion;
  if (upgradeVersion == 20) {
    loadVibrateSetting(db,true);
    if (Config.LOGD)     Log.d(TAG,"Reset system vibrate setting");
    upgradeVersion=21;
  }
  if (upgradeVersion < 22) {
    upgradeVersion=22;
    upgradeLockPatternLocation(db);
  }
  if (upgradeVersion < 23) {
    db.execSQL("UPDATE favorites SET iconResource=0 WHERE iconType=0");
    upgradeVersion=23;
  }
  if (upgradeVersion == 23) {
    db.beginTransaction();
    try {
      db.execSQL("ALTER TABLE favorites ADD spanX INTEGER");
      db.execSQL("ALTER TABLE favorites ADD spanY INTEGER");
      db.execSQL("UPDATE favorites SET spanX=1, spanY=1 WHERE itemType<=0");
      db.execSQL("UPDATE favorites SET spanX=2, spanY=2 WHERE itemType=1000 or itemType=1002");
      db.execSQL("UPDATE favorites SET spanX=4, spanY=1 WHERE itemType=1001");
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    upgradeVersion=24;
  }
  if (upgradeVersion == 24) {
    db.beginTransaction();
    try {
      db.execSQL("DELETE FROM system WHERE name='network_preference'");
      db.execSQL("INSERT INTO system ('name', 'value') values ('network_preference', '" + ConnectivityManager.DEFAULT_NETWORK_PREFERENCE + "')");
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    upgradeVersion=25;
  }
  if (upgradeVersion == 25) {
    db.beginTransaction();
    try {
      db.execSQL("ALTER TABLE favorites ADD uri TEXT");
      db.execSQL("ALTER TABLE favorites ADD displayMode INTEGER");
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    upgradeVersion=26;
  }
  if (upgradeVersion == 26) {
    db.beginTransaction();
    try {
      createSecureTable(db);
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    upgradeVersion=27;
  }
  if (upgradeVersion == 27) {
    SQLiteStatement insertStmt=null;
    SQLiteStatement deleteStmt=null;
    db.beginTransaction();
    try {
      insertStmt=db.compileStatement("INSERT INTO secure (name,value) SELECT name,value FROM " + "system WHERE name=?");
      deleteStmt=db.compileStatement("DELETE FROM system WHERE name=?");
      String[] settingsToMove={Settings.Secure.ADB_ENABLED,Settings.Secure.ANDROID_ID,Settings.Secure.BLUETOOTH_ON,Settings.Secure.DATA_ROAMING,Settings.Secure.DEVICE_PROVISIONED,Settings.Secure.HTTP_PROXY,Settings.Secure.INSTALL_NON_MARKET_APPS,Settings.Secure.LOCATION_PROVIDERS_ALLOWED,Settings.Secure.LOGGING_ID,Settings.Secure.NETWORK_PREFERENCE,Settings.Secure.PARENTAL_CONTROL_ENABLED,Settings.Secure.PARENTAL_CONTROL_LAST_UPDATE,Settings.Secure.PARENTAL_CONTROL_REDIRECT_URL,Settings.Secure.SETTINGS_CLASSNAME,Settings.Secure.USB_MASS_STORAGE_ENABLED,Settings.Secure.USE_GOOGLE_MAIL,Settings.Secure.WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON,Settings.Secure.WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY,Settings.Secure.WIFI_NUM_OPEN_NETWORKS_KEPT,Settings.Secure.WIFI_ON,Settings.Secure.WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE,Settings.Secure.WIFI_WATCHDOG_AP_COUNT,Settings.Secure.WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS,Settings.Secure.WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED,Settings.Secure.WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS,Settings.Secure.WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT,Settings.Secure.WIFI_WATCHDOG_MAX_AP_CHECKS,Settings.Secure.WIFI_WATCHDOG_ON,Settings.Secure.WIFI_WATCHDOG_PING_COUNT,Settings.Secure.WIFI_WATCHDOG_PING_DELAY_MS,Settings.Secure.WIFI_WATCHDOG_PING_TIMEOUT_MS};
      for (      String setting : settingsToMove) {
        insertStmt.bindString(1,setting);
        insertStmt.execute();
        deleteStmt.bindString(1,setting);
        deleteStmt.execute();
      }
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
      if (insertStmt != null) {
        insertStmt.close();
      }
      if (deleteStmt != null) {
        deleteStmt.close();
      }
    }
    upgradeVersion=28;
  }
  if (upgradeVersion == 28 || upgradeVersion == 29) {
    db.beginTransaction();
    try {
      db.execSQL("DELETE FROM system WHERE name='" + Settings.System.MODE_RINGER_STREAMS_AFFECTED + "'");
      int newValue=(1 << AudioManager.STREAM_RING) | (1 << AudioManager.STREAM_NOTIFICATION) | (1 << AudioManager.STREAM_SYSTEM);
      db.execSQL("INSERT INTO system ('name', 'value') values ('" + Settings.System.MODE_RINGER_STREAMS_AFFECTED + "', '"+ String.valueOf(newValue)+ "')");
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    upgradeVersion=30;
  }
  if (upgradeVersion == 30) {
    db.beginTransaction();
    try {
      db.execSQL("UPDATE bookmarks SET folder = '@quicklaunch'");
      db.execSQL("UPDATE bookmarks SET title = ''");
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    upgradeVersion=31;
  }
  if (upgradeVersion == 31) {
    db.beginTransaction();
    try {
      db.execSQL("DELETE FROM system WHERE name='" + Settings.System.WINDOW_ANIMATION_SCALE + "'");
      db.execSQL("DELETE FROM system WHERE name='" + Settings.System.TRANSITION_ANIMATION_SCALE + "'");
      SQLiteStatement stmt=db.compileStatement("INSERT INTO system(name,value)" + " VALUES(?,?);");
      loadDefaultAnimationSettings(stmt);
      stmt.close();
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    upgradeVersion=32;
  }
  if (upgradeVersion == 32) {
    String wifiWatchList=SystemProperties.get("ro.com.android.wifi-watchlist");
    if (!TextUtils.isEmpty(wifiWatchList)) {
      db.beginTransaction();
      try {
        db.execSQL("INSERT OR IGNORE INTO secure(name,value) values('" + Settings.Secure.WIFI_WATCHDOG_WATCH_LIST + "','"+ wifiWatchList+ "');");
        db.setTransactionSuccessful();
      }
  finally {
        db.endTransaction();
      }
    }
    upgradeVersion=33;
  }
  if (upgradeVersion == 33) {
    db.beginTransaction();
    try {
      db.execSQL("INSERT INTO system(name,value) values('zoom','2');");
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    upgradeVersion=34;
  }
  if (upgradeVersion == 34) {
    db.beginTransaction();
    try {
      SQLiteStatement stmt=db.compileStatement("INSERT OR IGNORE INTO secure(name,value)" + " VALUES(?,?);");
      loadSecure35Settings(stmt);
      stmt.close();
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    upgradeVersion=35;
  }
  if (upgradeVersion == 35) {
    upgradeVersion=36;
  }
  if (upgradeVersion == 36) {
    db.beginTransaction();
    try {
      db.execSQL("DELETE FROM system WHERE name='" + Settings.System.MODE_RINGER_STREAMS_AFFECTED + "'");
      int newValue=(1 << AudioManager.STREAM_RING) | (1 << AudioManager.STREAM_NOTIFICATION) | (1 << AudioManager.STREAM_SYSTEM)| (1 << AudioManager.STREAM_SYSTEM_ENFORCED);
      db.execSQL("INSERT INTO system ('name', 'value') values ('" + Settings.System.MODE_RINGER_STREAMS_AFFECTED + "', '"+ String.valueOf(newValue)+ "')");
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    upgradeVersion=37;
  }
  if (upgradeVersion == 37) {
    db.beginTransaction();
    try {
      SQLiteStatement stmt=db.compileStatement("INSERT OR IGNORE INTO system(name,value)" + " VALUES(?,?);");
      loadStringSetting(stmt,Settings.System.AIRPLANE_MODE_TOGGLEABLE_RADIOS,R.string.airplane_mode_toggleable_radios);
      stmt.close();
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    upgradeVersion=38;
  }
  if (upgradeVersion == 38) {
    db.beginTransaction();
    try {
      String value=mContext.getResources().getBoolean(R.bool.assisted_gps_enabled) ? "1" : "0";
      db.execSQL("INSERT OR IGNORE INTO secure(name,value) values('" + Settings.Secure.ASSISTED_GPS_ENABLED + "','"+ value+ "');");
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    upgradeVersion=39;
  }
  if (upgradeVersion == 39) {
    db.beginTransaction();
    try {
      String value=mContext.getResources().getBoolean(R.bool.def_screen_brightness_automatic_mode) ? "1" : "0";
      db.execSQL("INSERT OR IGNORE INTO system(name,value) values('" + Settings.System.SCREEN_BRIGHTNESS_MODE + "','"+ value+ "');");
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    upgradeVersion=40;
  }
  if (upgradeVersion == 40) {
    db.beginTransaction();
    try {
      db.execSQL("DELETE FROM system WHERE name='" + Settings.System.WINDOW_ANIMATION_SCALE + "'");
      db.execSQL("DELETE FROM system WHERE name='" + Settings.System.TRANSITION_ANIMATION_SCALE + "'");
      SQLiteStatement stmt=db.compileStatement("INSERT INTO system(name,value)" + " VALUES(?,?);");
      loadDefaultAnimationSettings(stmt);
      stmt.close();
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    upgradeVersion=41;
  }
  if (upgradeVersion == 41) {
    db.beginTransaction();
    try {
      db.execSQL("DELETE FROM system WHERE name='" + Settings.System.HAPTIC_FEEDBACK_ENABLED + "'");
      SQLiteStatement stmt=db.compileStatement("INSERT INTO system(name,value)" + " VALUES(?,?);");
      loadDefaultHapticSettings(stmt);
      stmt.close();
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    upgradeVersion=42;
  }
  if (upgradeVersion == 42) {
    db.beginTransaction();
    try {
      SQLiteStatement stmt=db.compileStatement("INSERT INTO system(name,value)" + " VALUES(?,?);");
      loadBooleanSetting(stmt,Settings.System.NOTIFICATION_LIGHT_PULSE,R.bool.def_notification_pulse);
      stmt.close();
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    upgradeVersion=43;
  }
  if (upgradeVersion == 43) {
    db.beginTransaction();
    try {
      SQLiteStatement stmt=db.compileStatement("INSERT OR IGNORE INTO system(name,value)" + " VALUES(?,?);");
      loadSetting(stmt,Settings.System.VOLUME_BLUETOOTH_SCO,AudioManager.DEFAULT_STREAM_VOLUME[AudioManager.STREAM_BLUETOOTH_SCO]);
      stmt.close();
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    upgradeVersion=44;
  }
  if (upgradeVersion == 44) {
    db.execSQL("DROP TABLE IF EXISTS gservices");
    db.execSQL("DROP INDEX IF EXISTS gservicesIndex1");
    upgradeVersion=45;
  }
  if (upgradeVersion == 45) {
    db.beginTransaction();
    try {
      db.execSQL("INSERT INTO secure(name,value) values('" + Settings.Secure.MOUNT_PLAY_NOTIFICATION_SND + "','1');");
      db.execSQL("INSERT INTO secure(name,value) values('" + Settings.Secure.MOUNT_UMS_AUTOSTART + "','0');");
      db.execSQL("INSERT INTO secure(name,value) values('" + Settings.Secure.MOUNT_UMS_PROMPT + "','1');");
      db.execSQL("INSERT INTO secure(name,value) values('" + Settings.Secure.MOUNT_UMS_NOTIFY_ENABLED + "','1');");
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    upgradeVersion=46;
  }
  if (upgradeVersion != currentVersion) {
    Log.w(TAG,"Got stuck trying to upgrade from version " + upgradeVersion + ", must wipe the settings provider");
    db.execSQL("DROP TABLE IF EXISTS system");
    db.execSQL("DROP INDEX IF EXISTS systemIndex1");
    db.execSQL("DROP TABLE IF EXISTS secure");
    db.execSQL("DROP INDEX IF EXISTS secureIndex1");
    db.execSQL("DROP TABLE IF EXISTS gservices");
    db.execSQL("DROP INDEX IF EXISTS gservicesIndex1");
    db.execSQL("DROP TABLE IF EXISTS bluetooth_devices");
    db.execSQL("DROP TABLE IF EXISTS bookmarks");
    db.execSQL("DROP INDEX IF EXISTS bookmarksIndex1");
    db.execSQL("DROP INDEX IF EXISTS bookmarksIndex2");
    db.execSQL("DROP TABLE IF EXISTS favorites");
    onCreate(db);
  }
}
