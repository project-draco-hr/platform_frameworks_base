{
  Log.w(TAG,"Upgrading settings database from version " + oldVersion + " to "+ currentVersion);
  int upgradeVersion=oldVersion;
  if (upgradeVersion == 20) {
    loadVibrateSetting(db,true);
    upgradeVersion=21;
  }
  if (upgradeVersion < 22) {
    upgradeVersion=22;
    upgradeLockPatternLocation(db);
  }
  if (upgradeVersion < 23) {
    db.execSQL("UPDATE favorites SET iconResource=0 WHERE iconType=0");
    upgradeVersion=23;
  }
  if (upgradeVersion == 23) {
    db.beginTransaction();
    try {
      db.execSQL("ALTER TABLE favorites ADD spanX INTEGER");
      db.execSQL("ALTER TABLE favorites ADD spanY INTEGER");
      db.execSQL("UPDATE favorites SET spanX=1, spanY=1 WHERE itemType<=0");
      db.execSQL("UPDATE favorites SET spanX=2, spanY=2 WHERE itemType=1000 or itemType=1002");
      db.execSQL("UPDATE favorites SET spanX=4, spanY=1 WHERE itemType=1001");
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    upgradeVersion=24;
  }
  if (upgradeVersion == 24) {
    db.beginTransaction();
    try {
      db.execSQL("DELETE FROM system WHERE name='network_preference'");
      db.execSQL("INSERT INTO system ('name', 'value') values ('network_preference', '" + ConnectivityManager.DEFAULT_NETWORK_PREFERENCE + "')");
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    upgradeVersion=25;
  }
  if (upgradeVersion == 25) {
    db.beginTransaction();
    try {
      db.execSQL("ALTER TABLE favorites ADD uri TEXT");
      db.execSQL("ALTER TABLE favorites ADD displayMode INTEGER");
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    upgradeVersion=26;
  }
  if (upgradeVersion == 26) {
    db.beginTransaction();
    try {
      createSecureTable(db);
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    upgradeVersion=27;
  }
  if (upgradeVersion == 27) {
    String[] settingsToMove={Settings.Secure.ADB_ENABLED,Settings.Secure.ANDROID_ID,Settings.Secure.BLUETOOTH_ON,Settings.Secure.DATA_ROAMING,Settings.Secure.DEVICE_PROVISIONED,Settings.Secure.HTTP_PROXY,Settings.Secure.INSTALL_NON_MARKET_APPS,Settings.Secure.LOCATION_PROVIDERS_ALLOWED,Settings.Secure.LOGGING_ID,Settings.Secure.NETWORK_PREFERENCE,Settings.Secure.PARENTAL_CONTROL_ENABLED,Settings.Secure.PARENTAL_CONTROL_LAST_UPDATE,Settings.Secure.PARENTAL_CONTROL_REDIRECT_URL,Settings.Secure.SETTINGS_CLASSNAME,Settings.Secure.USB_MASS_STORAGE_ENABLED,Settings.Secure.USE_GOOGLE_MAIL,Settings.Secure.WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON,Settings.Secure.WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY,Settings.Secure.WIFI_NUM_OPEN_NETWORKS_KEPT,Settings.Secure.WIFI_ON,Settings.Secure.WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE,Settings.Secure.WIFI_WATCHDOG_AP_COUNT,Settings.Secure.WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS,Settings.Secure.WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED,Settings.Secure.WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS,Settings.Secure.WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT,Settings.Secure.WIFI_WATCHDOG_MAX_AP_CHECKS,Settings.Secure.WIFI_WATCHDOG_ON,Settings.Secure.WIFI_WATCHDOG_PING_COUNT,Settings.Secure.WIFI_WATCHDOG_PING_DELAY_MS,Settings.Secure.WIFI_WATCHDOG_PING_TIMEOUT_MS};
    moveSettingsToNewTable(db,TABLE_SYSTEM,TABLE_SECURE,settingsToMove,false);
    upgradeVersion=28;
  }
  if (upgradeVersion == 28 || upgradeVersion == 29) {
    db.beginTransaction();
    try {
      db.execSQL("DELETE FROM system WHERE name='" + Settings.System.MODE_RINGER_STREAMS_AFFECTED + "'");
      int newValue=(1 << AudioManager.STREAM_RING) | (1 << AudioManager.STREAM_NOTIFICATION) | (1 << AudioManager.STREAM_SYSTEM);
      db.execSQL("INSERT INTO system ('name', 'value') values ('" + Settings.System.MODE_RINGER_STREAMS_AFFECTED + "', '"+ String.valueOf(newValue)+ "')");
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    upgradeVersion=30;
  }
  if (upgradeVersion == 30) {
    db.beginTransaction();
    try {
      db.execSQL("UPDATE bookmarks SET folder = '@quicklaunch'");
      db.execSQL("UPDATE bookmarks SET title = ''");
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    upgradeVersion=31;
  }
  if (upgradeVersion == 31) {
    db.beginTransaction();
    SQLiteStatement stmt=null;
    try {
      db.execSQL("DELETE FROM system WHERE name='" + Settings.System.WINDOW_ANIMATION_SCALE + "'");
      db.execSQL("DELETE FROM system WHERE name='" + Settings.System.TRANSITION_ANIMATION_SCALE + "'");
      stmt=db.compileStatement("INSERT INTO system(name,value)" + " VALUES(?,?);");
      loadDefaultAnimationSettings(stmt);
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
      if (stmt != null)       stmt.close();
    }
    upgradeVersion=32;
  }
  if (upgradeVersion == 32) {
    String wifiWatchList=SystemProperties.get("ro.com.android.wifi-watchlist");
    if (!TextUtils.isEmpty(wifiWatchList)) {
      db.beginTransaction();
      try {
        db.execSQL("INSERT OR IGNORE INTO secure(name,value) values('" + Settings.Secure.WIFI_WATCHDOG_WATCH_LIST + "','"+ wifiWatchList+ "');");
        db.setTransactionSuccessful();
      }
  finally {
        db.endTransaction();
      }
    }
    upgradeVersion=33;
  }
  if (upgradeVersion == 33) {
    db.beginTransaction();
    try {
      db.execSQL("INSERT INTO system(name,value) values('zoom','2');");
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    upgradeVersion=34;
  }
  if (upgradeVersion == 34) {
    db.beginTransaction();
    SQLiteStatement stmt=null;
    try {
      stmt=db.compileStatement("INSERT OR IGNORE INTO secure(name,value)" + " VALUES(?,?);");
      loadSecure35Settings(stmt);
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
      if (stmt != null)       stmt.close();
    }
    upgradeVersion=35;
  }
  if (upgradeVersion == 35) {
    upgradeVersion=36;
  }
  if (upgradeVersion == 36) {
    db.beginTransaction();
    try {
      db.execSQL("DELETE FROM system WHERE name='" + Settings.System.MODE_RINGER_STREAMS_AFFECTED + "'");
      int newValue=(1 << AudioManager.STREAM_RING) | (1 << AudioManager.STREAM_NOTIFICATION) | (1 << AudioManager.STREAM_SYSTEM)| (1 << AudioManager.STREAM_SYSTEM_ENFORCED);
      db.execSQL("INSERT INTO system ('name', 'value') values ('" + Settings.System.MODE_RINGER_STREAMS_AFFECTED + "', '"+ String.valueOf(newValue)+ "')");
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    upgradeVersion=37;
  }
  if (upgradeVersion == 37) {
    db.beginTransaction();
    SQLiteStatement stmt=null;
    try {
      stmt=db.compileStatement("INSERT OR IGNORE INTO system(name,value)" + " VALUES(?,?);");
      loadStringSetting(stmt,Settings.System.AIRPLANE_MODE_TOGGLEABLE_RADIOS,R.string.airplane_mode_toggleable_radios);
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
      if (stmt != null)       stmt.close();
    }
    upgradeVersion=38;
  }
  if (upgradeVersion == 38) {
    db.beginTransaction();
    try {
      String value=mContext.getResources().getBoolean(R.bool.assisted_gps_enabled) ? "1" : "0";
      db.execSQL("INSERT OR IGNORE INTO secure(name,value) values('" + Settings.Global.ASSISTED_GPS_ENABLED + "','"+ value+ "');");
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    upgradeVersion=39;
  }
  if (upgradeVersion == 39) {
    upgradeAutoBrightness(db);
    upgradeVersion=40;
  }
  if (upgradeVersion == 40) {
    db.beginTransaction();
    SQLiteStatement stmt=null;
    try {
      db.execSQL("DELETE FROM system WHERE name='" + Settings.System.WINDOW_ANIMATION_SCALE + "'");
      db.execSQL("DELETE FROM system WHERE name='" + Settings.System.TRANSITION_ANIMATION_SCALE + "'");
      stmt=db.compileStatement("INSERT INTO system(name,value)" + " VALUES(?,?);");
      loadDefaultAnimationSettings(stmt);
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
      if (stmt != null)       stmt.close();
    }
    upgradeVersion=41;
  }
  if (upgradeVersion == 41) {
    db.beginTransaction();
    SQLiteStatement stmt=null;
    try {
      db.execSQL("DELETE FROM system WHERE name='" + Settings.System.HAPTIC_FEEDBACK_ENABLED + "'");
      stmt=db.compileStatement("INSERT INTO system(name,value)" + " VALUES(?,?);");
      loadDefaultHapticSettings(stmt);
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
      if (stmt != null)       stmt.close();
    }
    upgradeVersion=42;
  }
  if (upgradeVersion == 42) {
    db.beginTransaction();
    SQLiteStatement stmt=null;
    try {
      stmt=db.compileStatement("INSERT INTO system(name,value)" + " VALUES(?,?);");
      loadBooleanSetting(stmt,Settings.System.NOTIFICATION_LIGHT_PULSE,R.bool.def_notification_pulse);
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
      if (stmt != null)       stmt.close();
    }
    upgradeVersion=43;
  }
  if (upgradeVersion == 43) {
    db.beginTransaction();
    SQLiteStatement stmt=null;
    try {
      stmt=db.compileStatement("INSERT OR IGNORE INTO system(name,value)" + " VALUES(?,?);");
      loadSetting(stmt,Settings.System.VOLUME_BLUETOOTH_SCO,AudioManager.DEFAULT_STREAM_VOLUME[AudioManager.STREAM_BLUETOOTH_SCO]);
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
      if (stmt != null)       stmt.close();
    }
    upgradeVersion=44;
  }
  if (upgradeVersion == 44) {
    db.execSQL("DROP TABLE IF EXISTS gservices");
    db.execSQL("DROP INDEX IF EXISTS gservicesIndex1");
    upgradeVersion=45;
  }
  if (upgradeVersion == 45) {
    db.beginTransaction();
    try {
      db.execSQL("INSERT INTO secure(name,value) values('" + Settings.Secure.MOUNT_PLAY_NOTIFICATION_SND + "','1');");
      db.execSQL("INSERT INTO secure(name,value) values('" + Settings.Secure.MOUNT_UMS_AUTOSTART + "','0');");
      db.execSQL("INSERT INTO secure(name,value) values('" + Settings.Secure.MOUNT_UMS_PROMPT + "','1');");
      db.execSQL("INSERT INTO secure(name,value) values('" + Settings.Secure.MOUNT_UMS_NOTIFY_ENABLED + "','1');");
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    upgradeVersion=46;
  }
  if (upgradeVersion == 46) {
    db.beginTransaction();
    try {
      db.execSQL("DELETE FROM system WHERE name='lockscreen.password_type';");
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    upgradeVersion=47;
  }
  if (upgradeVersion == 47) {
    db.beginTransaction();
    try {
      db.execSQL("DELETE FROM system WHERE name='lockscreen.password_type';");
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    upgradeVersion=48;
  }
  if (upgradeVersion == 48) {
    upgradeVersion=49;
  }
  if (upgradeVersion == 49) {
    db.beginTransaction();
    SQLiteStatement stmt=null;
    try {
      stmt=db.compileStatement("INSERT INTO system(name,value)" + " VALUES(?,?);");
      loadUISoundEffectsSettings(stmt);
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
      if (stmt != null)       stmt.close();
    }
    upgradeVersion=50;
  }
  if (upgradeVersion == 50) {
    upgradeVersion=51;
  }
  if (upgradeVersion == 51) {
    String[] settingsToMove={Secure.LOCK_PATTERN_ENABLED,Secure.LOCK_PATTERN_VISIBLE,Secure.LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED,"lockscreen.password_type","lockscreen.lockoutattemptdeadline","lockscreen.patterneverchosen","lock_pattern_autolock","lockscreen.lockedoutpermanently","lockscreen.password_salt"};
    moveSettingsToNewTable(db,TABLE_SYSTEM,TABLE_SECURE,settingsToMove,false);
    upgradeVersion=52;
  }
  if (upgradeVersion == 52) {
    db.beginTransaction();
    SQLiteStatement stmt=null;
    try {
      stmt=db.compileStatement("INSERT INTO system(name,value)" + " VALUES(?,?);");
      loadBooleanSetting(stmt,Settings.System.VIBRATE_IN_SILENT,R.bool.def_vibrate_in_silent);
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
      if (stmt != null)       stmt.close();
    }
    upgradeVersion=53;
  }
  if (upgradeVersion == 53) {
    upgradeVersion=54;
  }
  if (upgradeVersion == 54) {
    db.beginTransaction();
    try {
      upgradeScreenTimeoutFromNever(db);
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    upgradeVersion=55;
  }
  if (upgradeVersion == 55) {
    String[] settingsToMove={Global.SET_INSTALL_LOCATION,Global.DEFAULT_INSTALL_LOCATION};
    moveSettingsToNewTable(db,TABLE_SYSTEM,TABLE_SECURE,settingsToMove,false);
    db.beginTransaction();
    SQLiteStatement stmt=null;
    try {
      stmt=db.compileStatement("INSERT INTO system(name,value)" + " VALUES(?,?);");
      loadSetting(stmt,Global.SET_INSTALL_LOCATION,0);
      loadSetting(stmt,Global.DEFAULT_INSTALL_LOCATION,PackageHelper.APP_INSTALL_AUTO);
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
      if (stmt != null)       stmt.close();
    }
    upgradeVersion=56;
  }
  if (upgradeVersion == 56) {
    db.beginTransaction();
    SQLiteStatement stmt=null;
    try {
      db.execSQL("DELETE FROM system WHERE name='" + Settings.System.AIRPLANE_MODE_TOGGLEABLE_RADIOS + "'");
      stmt=db.compileStatement("INSERT OR IGNORE INTO system(name,value)" + " VALUES(?,?);");
      loadStringSetting(stmt,Settings.System.AIRPLANE_MODE_TOGGLEABLE_RADIOS,R.string.airplane_mode_toggleable_radios);
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
      if (stmt != null)       stmt.close();
    }
    upgradeVersion=57;
  }
  if (upgradeVersion == 57) {
    db.beginTransaction();
    SQLiteStatement stmt=null;
    try {
      stmt=db.compileStatement("INSERT INTO secure(name,value)" + " VALUES(?,?);");
      loadBooleanSetting(stmt,Settings.Secure.ACCESSIBILITY_SCRIPT_INJECTION,R.bool.def_accessibility_script_injection);
      stmt.close();
      stmt=db.compileStatement("INSERT INTO secure(name,value)" + " VALUES(?,?);");
      loadStringSetting(stmt,Settings.Secure.ACCESSIBILITY_WEB_CONTENT_KEY_BINDINGS,R.string.def_accessibility_web_content_key_bindings);
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
      if (stmt != null)       stmt.close();
    }
    upgradeVersion=58;
  }
  if (upgradeVersion == 58) {
    int autoTimeValue=getIntValueFromSystem(db,Settings.System.AUTO_TIME,0);
    db.beginTransaction();
    SQLiteStatement stmt=null;
    try {
      stmt=db.compileStatement("INSERT INTO system(name,value)" + " VALUES(?,?);");
      loadSetting(stmt,Settings.System.AUTO_TIME_ZONE,autoTimeValue);
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
      if (stmt != null)       stmt.close();
    }
    upgradeVersion=59;
  }
  if (upgradeVersion == 59) {
    db.beginTransaction();
    SQLiteStatement stmt=null;
    try {
      stmt=db.compileStatement("INSERT INTO system(name,value)" + " VALUES(?,?);");
      loadBooleanSetting(stmt,Settings.System.USER_ROTATION,R.integer.def_user_rotation);
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
      if (stmt != null)       stmt.close();
    }
    upgradeVersion=60;
  }
  if (upgradeVersion == 60) {
    upgradeVersion=61;
  }
  if (upgradeVersion == 61) {
    upgradeVersion=62;
  }
  if (upgradeVersion == 62) {
    upgradeVersion=63;
  }
  if (upgradeVersion == 63) {
    db.beginTransaction();
    try {
      db.execSQL("DELETE FROM system WHERE name='" + Settings.System.MODE_RINGER_STREAMS_AFFECTED + "'");
      int newValue=(1 << AudioManager.STREAM_RING) | (1 << AudioManager.STREAM_NOTIFICATION) | (1 << AudioManager.STREAM_SYSTEM)| (1 << AudioManager.STREAM_SYSTEM_ENFORCED)| (1 << AudioManager.STREAM_MUSIC);
      db.execSQL("INSERT INTO system ('name', 'value') values ('" + Settings.System.MODE_RINGER_STREAMS_AFFECTED + "', '"+ String.valueOf(newValue)+ "')");
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    upgradeVersion=64;
  }
  if (upgradeVersion == 64) {
    db.beginTransaction();
    SQLiteStatement stmt=null;
    try {
      stmt=db.compileStatement("INSERT INTO secure(name,value)" + " VALUES(?,?);");
      loadIntegerSetting(stmt,Settings.Secure.LONG_PRESS_TIMEOUT,R.integer.def_long_press_timeout_millis);
      stmt.close();
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
      if (stmt != null)       stmt.close();
    }
    upgradeVersion=65;
  }
  if (upgradeVersion == 65) {
    db.beginTransaction();
    SQLiteStatement stmt=null;
    try {
      db.execSQL("DELETE FROM system WHERE name='" + Settings.System.WINDOW_ANIMATION_SCALE + "'");
      db.execSQL("DELETE FROM system WHERE name='" + Settings.System.TRANSITION_ANIMATION_SCALE + "'");
      stmt=db.compileStatement("INSERT INTO system(name,value)" + " VALUES(?,?);");
      loadDefaultAnimationSettings(stmt);
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
      if (stmt != null)       stmt.close();
    }
    upgradeVersion=66;
  }
  if (upgradeVersion == 66) {
    db.beginTransaction();
    try {
      int ringerModeAffectedStreams=(1 << AudioManager.STREAM_RING) | (1 << AudioManager.STREAM_NOTIFICATION) | (1 << AudioManager.STREAM_SYSTEM)| (1 << AudioManager.STREAM_SYSTEM_ENFORCED);
      if (!mContext.getResources().getBoolean(com.android.internal.R.bool.config_voice_capable)) {
        ringerModeAffectedStreams|=(1 << AudioManager.STREAM_MUSIC);
      }
      db.execSQL("DELETE FROM system WHERE name='" + Settings.System.MODE_RINGER_STREAMS_AFFECTED + "'");
      db.execSQL("INSERT INTO system ('name', 'value') values ('" + Settings.System.MODE_RINGER_STREAMS_AFFECTED + "', '"+ String.valueOf(ringerModeAffectedStreams)+ "')");
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    upgradeVersion=67;
  }
  if (upgradeVersion == 67) {
    db.beginTransaction();
    SQLiteStatement stmt=null;
    try {
      stmt=db.compileStatement("INSERT INTO secure(name,value)" + " VALUES(?,?);");
      loadBooleanSetting(stmt,Settings.Secure.TOUCH_EXPLORATION_ENABLED,R.bool.def_touch_exploration_enabled);
      stmt.close();
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
      if (stmt != null)       stmt.close();
    }
    upgradeVersion=68;
  }
  if (upgradeVersion == 68) {
    db.beginTransaction();
    try {
      db.execSQL("DELETE FROM system WHERE name='" + Settings.System.NOTIFICATIONS_USE_RING_VOLUME + "'");
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    upgradeVersion=69;
  }
  if (upgradeVersion == 69) {
    String airplaneRadios=mContext.getResources().getString(R.string.def_airplane_mode_radios);
    String toggleableRadios=mContext.getResources().getString(R.string.airplane_mode_toggleable_radios);
    db.beginTransaction();
    try {
      db.execSQL("UPDATE system SET value='" + airplaneRadios + "' "+ "WHERE name='"+ Settings.System.AIRPLANE_MODE_RADIOS+ "'");
      db.execSQL("UPDATE system SET value='" + toggleableRadios + "' "+ "WHERE name='"+ Settings.System.AIRPLANE_MODE_TOGGLEABLE_RADIOS+ "'");
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    upgradeVersion=70;
  }
  if (upgradeVersion == 70) {
    loadBookmarks(db);
    upgradeVersion=71;
  }
  if (upgradeVersion == 71) {
    db.beginTransaction();
    SQLiteStatement stmt=null;
    try {
      stmt=db.compileStatement("INSERT INTO secure(name,value)" + " VALUES(?,?);");
      loadBooleanSetting(stmt,Settings.Secure.ACCESSIBILITY_SPEAK_PASSWORD,R.bool.def_accessibility_speak_password);
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
      if (stmt != null)       stmt.close();
    }
    upgradeVersion=72;
  }
  if (upgradeVersion == 72) {
    db.beginTransaction();
    SQLiteStatement stmt=null;
    try {
      stmt=db.compileStatement("INSERT OR REPLACE INTO system(name,value)" + " VALUES(?,?);");
      loadBooleanSetting(stmt,Settings.System.VIBRATE_IN_SILENT,R.bool.def_vibrate_in_silent);
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
      if (stmt != null)       stmt.close();
    }
    upgradeVersion=73;
  }
  if (upgradeVersion == 73) {
    upgradeVibrateSettingFromNone(db);
    upgradeVersion=74;
  }
  if (upgradeVersion == 74) {
    db.beginTransaction();
    SQLiteStatement stmt=null;
    try {
      stmt=db.compileStatement("INSERT INTO secure(name,value) VALUES(?,?);");
      loadStringSetting(stmt,Settings.Secure.ACCESSIBILITY_SCREEN_READER_URL,R.string.def_accessibility_screen_reader_url);
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
      if (stmt != null)       stmt.close();
    }
    upgradeVersion=75;
  }
  if (upgradeVersion == 75) {
    db.beginTransaction();
    SQLiteStatement stmt=null;
    Cursor c=null;
    try {
      c=db.query(TABLE_SECURE,new String[]{"_id","value"},"name='lockscreen.disabled'",null,null,null,null);
      if (c == null || c.getCount() == 0) {
        stmt=db.compileStatement("INSERT INTO system(name,value)" + " VALUES(?,?);");
        loadBooleanSetting(stmt,Settings.System.LOCKSCREEN_DISABLED,R.bool.def_lockscreen_disabled);
      }
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
      if (c != null)       c.close();
      if (stmt != null)       stmt.close();
    }
    upgradeVersion=76;
  }
  if (upgradeVersion == 76) {
    db.beginTransaction();
    try {
      db.execSQL("DELETE FROM system WHERE name='" + Settings.System.VIBRATE_IN_SILENT + "'");
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
    }
    upgradeVersion=77;
  }
  if (upgradeVersion == 77) {
    loadVibrateWhenRingingSetting(db);
    upgradeVersion=78;
  }
  if (upgradeVersion == 78) {
    db.beginTransaction();
    SQLiteStatement stmt=null;
    try {
      stmt=db.compileStatement("INSERT OR REPLACE INTO secure(name,value)" + " VALUES(?,?);");
      loadStringSetting(stmt,Settings.Secure.ACCESSIBILITY_SCREEN_READER_URL,R.string.def_accessibility_screen_reader_url);
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
      if (stmt != null)       stmt.close();
    }
    upgradeVersion=79;
  }
  if (upgradeVersion == 79) {
    final boolean accessibilityEnabled=getIntValueFromTable(db,TABLE_SECURE,Settings.Secure.ACCESSIBILITY_ENABLED,0) == 1;
    final boolean touchExplorationEnabled=getIntValueFromTable(db,TABLE_SECURE,Settings.Secure.TOUCH_EXPLORATION_ENABLED,0) == 1;
    if (accessibilityEnabled && touchExplorationEnabled) {
      String enabledServices=getStringValueFromTable(db,TABLE_SECURE,Settings.Secure.ENABLED_ACCESSIBILITY_SERVICES,"");
      String touchExplorationGrantedServices=getStringValueFromTable(db,TABLE_SECURE,Settings.Secure.TOUCH_EXPLORATION_GRANTED_ACCESSIBILITY_SERVICES,"");
      if (TextUtils.isEmpty(touchExplorationGrantedServices) && !TextUtils.isEmpty(enabledServices)) {
        SQLiteStatement stmt=null;
        try {
          db.beginTransaction();
          stmt=db.compileStatement("INSERT OR REPLACE INTO secure(name,value)" + " VALUES(?,?);");
          loadSetting(stmt,Settings.Secure.TOUCH_EXPLORATION_GRANTED_ACCESSIBILITY_SERVICES,enabledServices);
          db.setTransactionSuccessful();
        }
  finally {
          db.endTransaction();
          if (stmt != null)           stmt.close();
        }
      }
    }
    upgradeVersion=80;
  }
  if (upgradeVersion == 80) {
    db.beginTransaction();
    SQLiteStatement stmt=null;
    try {
      stmt=db.compileStatement("INSERT OR REPLACE INTO secure(name,value)" + " VALUES(?,?);");
      loadBooleanSetting(stmt,Settings.Secure.SCREENSAVER_ENABLED,com.android.internal.R.bool.config_dreamsEnabledByDefault);
      loadBooleanSetting(stmt,Settings.Secure.SCREENSAVER_ACTIVATE_ON_DOCK,com.android.internal.R.bool.config_dreamsActivatedOnDockByDefault);
      loadBooleanSetting(stmt,Settings.Secure.SCREENSAVER_ACTIVATE_ON_SLEEP,com.android.internal.R.bool.config_dreamsActivatedOnSleepByDefault);
      loadStringSetting(stmt,Settings.Secure.SCREENSAVER_COMPONENTS,com.android.internal.R.string.config_dreamsDefaultComponent);
      loadStringSetting(stmt,Settings.Secure.SCREENSAVER_DEFAULT_COMPONENT,com.android.internal.R.string.config_dreamsDefaultComponent);
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
      if (stmt != null)       stmt.close();
    }
    upgradeVersion=81;
  }
  if (upgradeVersion == 81) {
    db.beginTransaction();
    SQLiteStatement stmt=null;
    try {
      stmt=db.compileStatement("INSERT OR REPLACE INTO secure(name,value)" + " VALUES(?,?);");
      loadBooleanSetting(stmt,Settings.Global.PACKAGE_VERIFIER_ENABLE,R.bool.def_package_verifier_enable);
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
      if (stmt != null)       stmt.close();
    }
    upgradeVersion=82;
  }
  if (upgradeVersion == 82) {
    if (mUserHandle == UserHandle.USER_OWNER) {
      db.beginTransaction();
      SQLiteStatement stmt=null;
      try {
        createGlobalTable(db);
        String[] settingsToMove=hashsetToStringArray(SettingsProvider.sSystemGlobalKeys);
        moveSettingsToNewTable(db,TABLE_SYSTEM,TABLE_GLOBAL,settingsToMove,false);
        settingsToMove=hashsetToStringArray(SettingsProvider.sSecureGlobalKeys);
        moveSettingsToNewTable(db,TABLE_SECURE,TABLE_GLOBAL,settingsToMove,false);
        db.setTransactionSuccessful();
      }
  finally {
        db.endTransaction();
        if (stmt != null)         stmt.close();
      }
    }
    upgradeVersion=83;
  }
  if (upgradeVersion == 83) {
    db.beginTransaction();
    SQLiteStatement stmt=null;
    try {
      stmt=db.compileStatement("INSERT INTO secure(name,value) VALUES(?,?);");
      loadBooleanSetting(stmt,Settings.Secure.ACCESSIBILITY_DISPLAY_MAGNIFICATION_ENABLED,R.bool.def_accessibility_display_magnification_enabled);
      stmt.close();
      stmt=db.compileStatement("INSERT INTO secure(name,value) VALUES(?,?);");
      loadFractionSetting(stmt,Settings.Secure.ACCESSIBILITY_DISPLAY_MAGNIFICATION_SCALE,R.fraction.def_accessibility_display_magnification_scale,1);
      stmt.close();
      stmt=db.compileStatement("INSERT INTO secure(name,value) VALUES(?,?);");
      loadBooleanSetting(stmt,Settings.Secure.ACCESSIBILITY_DISPLAY_MAGNIFICATION_AUTO_UPDATE,R.bool.def_accessibility_display_magnification_auto_update);
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
      if (stmt != null)       stmt.close();
    }
    upgradeVersion=84;
  }
  if (upgradeVersion == 84) {
    if (mUserHandle == UserHandle.USER_OWNER) {
      db.beginTransaction();
      SQLiteStatement stmt=null;
      try {
        String[] settingsToMove={Settings.Secure.ADB_ENABLED,Settings.Secure.BLUETOOTH_ON,Settings.Secure.DATA_ROAMING,Settings.Secure.DEVICE_PROVISIONED,Settings.Secure.INSTALL_NON_MARKET_APPS,Settings.Secure.USB_MASS_STORAGE_ENABLED};
        moveSettingsToNewTable(db,TABLE_SECURE,TABLE_GLOBAL,settingsToMove,true);
        db.setTransactionSuccessful();
      }
  finally {
        db.endTransaction();
        if (stmt != null)         stmt.close();
      }
    }
    upgradeVersion=85;
  }
  if (upgradeVersion == 85) {
    if (mUserHandle == UserHandle.USER_OWNER) {
      db.beginTransaction();
      try {
        String[] settingsToMove={Settings.System.STAY_ON_WHILE_PLUGGED_IN};
        moveSettingsToNewTable(db,TABLE_SYSTEM,TABLE_GLOBAL,settingsToMove,true);
        db.setTransactionSuccessful();
      }
  finally {
        db.endTransaction();
      }
    }
    upgradeVersion=86;
  }
  if (upgradeVersion == 86) {
    if (mUserHandle == UserHandle.USER_OWNER) {
      db.beginTransaction();
      try {
        String[] settingsToMove={Settings.Global.PACKAGE_VERIFIER_ENABLE,Settings.Global.PACKAGE_VERIFIER_TIMEOUT,Settings.Global.PACKAGE_VERIFIER_DEFAULT_RESPONSE};
        moveSettingsToNewTable(db,TABLE_SECURE,TABLE_GLOBAL,settingsToMove,true);
        db.setTransactionSuccessful();
      }
  finally {
        db.endTransaction();
      }
    }
    upgradeVersion=87;
  }
  if (upgradeVersion == 87) {
    if (mUserHandle == UserHandle.USER_OWNER) {
      db.beginTransaction();
      try {
        String[] settingsToMove={Settings.Global.DATA_STALL_ALARM_NON_AGGRESSIVE_DELAY_IN_MS,Settings.Global.DATA_STALL_ALARM_AGGRESSIVE_DELAY_IN_MS,Settings.Global.GPRS_REGISTER_CHECK_PERIOD_MS};
        moveSettingsToNewTable(db,TABLE_SECURE,TABLE_GLOBAL,settingsToMove,true);
        db.setTransactionSuccessful();
      }
  finally {
        db.endTransaction();
      }
    }
    upgradeVersion=88;
  }
  if (upgradeVersion == 88) {
    if (mUserHandle == UserHandle.USER_OWNER) {
      db.beginTransaction();
      try {
        String[] settingsToMove={Settings.Global.BATTERY_DISCHARGE_DURATION_THRESHOLD,Settings.Global.BATTERY_DISCHARGE_THRESHOLD,Settings.Global.SEND_ACTION_APP_ERROR,Settings.Global.DROPBOX_AGE_SECONDS,Settings.Global.DROPBOX_MAX_FILES,Settings.Global.DROPBOX_QUOTA_KB,Settings.Global.DROPBOX_QUOTA_PERCENT,Settings.Global.DROPBOX_RESERVE_PERCENT,Settings.Global.DROPBOX_TAG_PREFIX,Settings.Global.ERROR_LOGCAT_PREFIX,Settings.Global.SYS_FREE_STORAGE_LOG_INTERVAL,Settings.Global.DISK_FREE_CHANGE_REPORTING_THRESHOLD,Settings.Global.SYS_STORAGE_THRESHOLD_PERCENTAGE,Settings.Global.SYS_STORAGE_THRESHOLD_MAX_BYTES,Settings.Global.SYS_STORAGE_FULL_THRESHOLD_BYTES,Settings.Global.SYNC_MAX_RETRY_DELAY_IN_SECONDS,Settings.Global.CONNECTIVITY_CHANGE_DELAY,Settings.Global.CAPTIVE_PORTAL_DETECTION_ENABLED,Settings.Global.CAPTIVE_PORTAL_SERVER,Settings.Global.NSD_ON,Settings.Global.SET_INSTALL_LOCATION,Settings.Global.DEFAULT_INSTALL_LOCATION,Settings.Global.INET_CONDITION_DEBOUNCE_UP_DELAY,Settings.Global.INET_CONDITION_DEBOUNCE_DOWN_DELAY,Settings.Global.READ_EXTERNAL_STORAGE_ENFORCED_DEFAULT,Settings.Global.HTTP_PROXY,Settings.Global.GLOBAL_HTTP_PROXY_HOST,Settings.Global.GLOBAL_HTTP_PROXY_PORT,Settings.Global.GLOBAL_HTTP_PROXY_EXCLUSION_LIST,Settings.Global.SET_GLOBAL_HTTP_PROXY,Settings.Global.DEFAULT_DNS_SERVER};
        moveSettingsToNewTable(db,TABLE_SECURE,TABLE_GLOBAL,settingsToMove,true);
        db.setTransactionSuccessful();
      }
  finally {
        db.endTransaction();
      }
    }
    upgradeVersion=89;
  }
  if (upgradeVersion == 89) {
    if (mUserHandle == UserHandle.USER_OWNER) {
      db.beginTransaction();
      try {
        String[] prefixesToMove={Settings.Global.BLUETOOTH_HEADSET_PRIORITY_PREFIX,Settings.Global.BLUETOOTH_A2DP_SINK_PRIORITY_PREFIX,Settings.Global.BLUETOOTH_INPUT_DEVICE_PRIORITY_PREFIX};
        movePrefixedSettingsToNewTable(db,TABLE_SECURE,TABLE_GLOBAL,prefixesToMove);
        db.setTransactionSuccessful();
      }
  finally {
        db.endTransaction();
      }
    }
    upgradeVersion=90;
  }
  if (upgradeVersion == 90) {
    if (mUserHandle == UserHandle.USER_OWNER) {
      db.beginTransaction();
      try {
        String[] systemToGlobal={Settings.Global.WINDOW_ANIMATION_SCALE,Settings.Global.TRANSITION_ANIMATION_SCALE,Settings.Global.ANIMATOR_DURATION_SCALE,Settings.Global.FANCY_IME_ANIMATIONS,Settings.Global.COMPATIBILITY_MODE,Settings.Global.EMERGENCY_TONE,Settings.Global.CALL_AUTO_RETRY,Settings.Global.DEBUG_APP,Settings.Global.WAIT_FOR_DEBUGGER,Settings.Global.SHOW_PROCESSES,Settings.Global.ALWAYS_FINISH_ACTIVITIES};
        String[] secureToGlobal={Settings.Global.PREFERRED_NETWORK_MODE,Settings.Global.CDMA_SUBSCRIPTION_MODE};
        moveSettingsToNewTable(db,TABLE_SYSTEM,TABLE_GLOBAL,systemToGlobal,true);
        moveSettingsToNewTable(db,TABLE_SECURE,TABLE_GLOBAL,secureToGlobal,true);
        db.setTransactionSuccessful();
      }
  finally {
        db.endTransaction();
      }
    }
    upgradeVersion=91;
  }
  if (upgradeVersion == 91) {
    if (mUserHandle == UserHandle.USER_OWNER) {
      db.beginTransaction();
      try {
        String[] settingsToMove={Settings.Global.MODE_RINGER};
        moveSettingsToNewTable(db,TABLE_SYSTEM,TABLE_GLOBAL,settingsToMove,true);
        db.setTransactionSuccessful();
      }
  finally {
        db.endTransaction();
      }
    }
    upgradeVersion=92;
  }
  if (upgradeVersion == 92) {
    SQLiteStatement stmt=null;
    try {
      stmt=db.compileStatement("INSERT OR IGNORE INTO secure(name,value)" + " VALUES(?,?);");
      if (mUserHandle == UserHandle.USER_OWNER) {
        int deviceProvisioned=getIntValueFromTable(db,TABLE_GLOBAL,Settings.Global.DEVICE_PROVISIONED,0);
        loadSetting(stmt,Settings.Secure.USER_SETUP_COMPLETE,deviceProvisioned);
      }
 else {
        loadBooleanSetting(stmt,Settings.Secure.USER_SETUP_COMPLETE,R.bool.def_user_setup_complete);
      }
    }
  finally {
      if (stmt != null)       stmt.close();
    }
    upgradeVersion=93;
  }
  if (upgradeVersion == 93) {
    if (mUserHandle == UserHandle.USER_OWNER) {
      db.beginTransaction();
      try {
        String[] settingsToMove=hashsetToStringArray(SettingsProvider.sSystemGlobalKeys);
        moveSettingsToNewTable(db,TABLE_SYSTEM,TABLE_GLOBAL,settingsToMove,true);
        settingsToMove=hashsetToStringArray(SettingsProvider.sSecureGlobalKeys);
        moveSettingsToNewTable(db,TABLE_SECURE,TABLE_GLOBAL,settingsToMove,true);
        db.setTransactionSuccessful();
      }
  finally {
        db.endTransaction();
      }
    }
    upgradeVersion=94;
  }
  if (upgradeVersion == 94) {
    if (mUserHandle == UserHandle.USER_OWNER) {
      db.beginTransaction();
      SQLiteStatement stmt=null;
      try {
        stmt=db.compileStatement("INSERT OR REPLACE INTO global(name,value)" + " VALUES(?,?);");
        loadStringSetting(stmt,Settings.Global.WIRELESS_CHARGING_STARTED_SOUND,R.string.def_wireless_charging_started_sound);
        db.setTransactionSuccessful();
      }
  finally {
        db.endTransaction();
        if (stmt != null)         stmt.close();
      }
    }
    upgradeVersion=95;
  }
  if (upgradeVersion == 95) {
    if (mUserHandle == UserHandle.USER_OWNER) {
      db.beginTransaction();
      try {
        String[] settingsToMove={Settings.Global.BUGREPORT_IN_POWER_MENU};
        moveSettingsToNewTable(db,TABLE_SECURE,TABLE_GLOBAL,settingsToMove,true);
        db.setTransactionSuccessful();
      }
  finally {
        db.endTransaction();
      }
    }
    upgradeVersion=96;
  }
  if (upgradeVersion == 96) {
    upgradeVersion=97;
  }
  if (upgradeVersion == 97) {
    if (mUserHandle == UserHandle.USER_OWNER) {
      db.beginTransaction();
      SQLiteStatement stmt=null;
      try {
        stmt=db.compileStatement("INSERT OR REPLACE INTO global(name,value)" + " VALUES(?,?);");
        loadIntegerSetting(stmt,Settings.Global.LOW_BATTERY_SOUND_TIMEOUT,R.integer.def_low_battery_sound_timeout);
        db.setTransactionSuccessful();
      }
  finally {
        db.endTransaction();
        if (stmt != null)         stmt.close();
      }
    }
    upgradeVersion=98;
  }
  if (upgradeVersion == 98) {
    upgradeVersion=99;
  }
  if (upgradeVersion == 99) {
    upgradeVersion=100;
  }
  if (upgradeVersion == 100) {
    if (mUserHandle == UserHandle.USER_OWNER) {
      db.beginTransaction();
      SQLiteStatement stmt=null;
      try {
        stmt=db.compileStatement("INSERT OR REPLACE INTO global(name,value)" + " VALUES(?,?);");
        loadIntegerSetting(stmt,Global.HEADS_UP_NOTIFICATIONS_ENABLED,R.integer.def_heads_up_enabled);
        db.setTransactionSuccessful();
      }
  finally {
        db.endTransaction();
        if (stmt != null)         stmt.close();
      }
    }
    upgradeVersion=101;
  }
  if (upgradeVersion == 101) {
    if (mUserHandle == UserHandle.USER_OWNER) {
      db.beginTransaction();
      SQLiteStatement stmt=null;
      try {
        stmt=db.compileStatement("INSERT OR IGNORE INTO global(name,value)" + " VALUES(?,?);");
        loadSetting(stmt,Settings.Global.DEVICE_NAME,getDefaultDeviceName());
        db.setTransactionSuccessful();
      }
  finally {
        db.endTransaction();
        if (stmt != null)         stmt.close();
      }
    }
    upgradeVersion=102;
  }
  if (upgradeVersion == 102) {
    db.beginTransaction();
    SQLiteStatement stmt=null;
    try {
      if (mUserHandle == UserHandle.USER_OWNER) {
        String[] globalToSecure={Settings.Secure.INSTALL_NON_MARKET_APPS};
        moveSettingsToNewTable(db,TABLE_GLOBAL,TABLE_SECURE,globalToSecure,true);
      }
 else {
        stmt=db.compileStatement("INSERT OR IGNORE INTO secure(name,value)" + " VALUES(?,?);");
        loadBooleanSetting(stmt,Settings.Secure.INSTALL_NON_MARKET_APPS,R.bool.def_install_non_market_apps);
      }
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
      if (stmt != null)       stmt.close();
    }
    upgradeVersion=103;
  }
  if (upgradeVersion == 103) {
    db.beginTransaction();
    SQLiteStatement stmt=null;
    try {
      stmt=db.compileStatement("INSERT OR REPLACE INTO secure(name,value)" + " VALUES(?,?);");
      loadBooleanSetting(stmt,Settings.Secure.WAKE_GESTURE_ENABLED,R.bool.def_wake_gesture_enabled);
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
      if (stmt != null)       stmt.close();
    }
    upgradeVersion=104;
  }
  if (upgradeVersion < 105) {
    if (mUserHandle == UserHandle.USER_OWNER) {
      db.beginTransaction();
      SQLiteStatement stmt=null;
      try {
        stmt=db.compileStatement("INSERT OR IGNORE INTO global(name,value)" + " VALUES(?,?);");
        loadBooleanSetting(stmt,Settings.Global.GUEST_USER_ENABLED,R.bool.def_guest_user_enabled);
        db.setTransactionSuccessful();
      }
  finally {
        db.endTransaction();
        if (stmt != null)         stmt.close();
      }
    }
    upgradeVersion=105;
  }
  if (upgradeVersion < 106) {
    db.beginTransaction();
    SQLiteStatement stmt=null;
    try {
      stmt=db.compileStatement("INSERT OR IGNORE INTO secure(name,value)" + " VALUES(?,?);");
      loadIntegerSetting(stmt,Settings.Secure.LOCK_SCREEN_SHOW_NOTIFICATIONS,R.integer.def_lock_screen_show_notifications);
      if (mUserHandle == UserHandle.USER_OWNER) {
        final int oldShow=getIntValueFromTable(db,TABLE_GLOBAL,Settings.Secure.LOCK_SCREEN_SHOW_NOTIFICATIONS,-1);
        if (oldShow >= 0) {
          loadSetting(stmt,Settings.Secure.LOCK_SCREEN_SHOW_NOTIFICATIONS,oldShow);
          final SQLiteStatement deleteStmt=db.compileStatement("DELETE FROM global WHERE name=?");
          deleteStmt.bindString(1,Settings.Secure.LOCK_SCREEN_SHOW_NOTIFICATIONS);
          deleteStmt.execute();
        }
      }
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
      if (stmt != null)       stmt.close();
    }
    upgradeVersion=106;
  }
  if (upgradeVersion < 107) {
    if (mUserHandle == UserHandle.USER_OWNER) {
      db.beginTransaction();
      SQLiteStatement stmt=null;
      try {
        stmt=db.compileStatement("INSERT OR REPLACE INTO global(name,value)" + " VALUES(?,?);");
        loadStringSetting(stmt,Settings.Global.TRUSTED_SOUND,R.string.def_trusted_sound);
        db.setTransactionSuccessful();
      }
  finally {
        db.endTransaction();
        if (stmt != null)         stmt.close();
      }
    }
    upgradeVersion=107;
  }
  if (upgradeVersion < 108) {
    db.beginTransaction();
    SQLiteStatement stmt=null;
    try {
      stmt=db.compileStatement("INSERT OR REPLACE INTO system(name,value)" + " VALUES(?,?);");
      loadBooleanSetting(stmt,Settings.System.SCREEN_BRIGHTNESS_MODE,R.bool.def_screen_brightness_automatic_mode);
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
      if (stmt != null)       stmt.close();
    }
    upgradeVersion=108;
  }
  if (upgradeVersion < 109) {
    db.beginTransaction();
    SQLiteStatement stmt=null;
    try {
      stmt=db.compileStatement("INSERT OR IGNORE INTO secure(name,value)" + " VALUES(?,?);");
      loadBooleanSetting(stmt,Secure.LOCK_SCREEN_ALLOW_PRIVATE_NOTIFICATIONS,R.bool.def_lock_screen_allow_private_notifications);
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
      if (stmt != null)       stmt.close();
    }
    upgradeVersion=109;
  }
  if (upgradeVersion < 110) {
    db.beginTransaction();
    SQLiteStatement stmt=null;
    try {
      stmt=db.compileStatement("UPDATE system SET value = ? " + "WHERE name = ? AND value = ?;");
      stmt.bindString(1,Settings.System.SIP_ADDRESS_ONLY);
      stmt.bindString(2,Settings.System.SIP_CALL_OPTIONS);
      stmt.bindString(3,Settings.System.SIP_ASK_ME_EACH_TIME);
      stmt.execute();
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
      if (stmt != null)       stmt.close();
    }
    upgradeVersion=110;
  }
  if (upgradeVersion < 111) {
    if (mUserHandle == UserHandle.USER_OWNER) {
      db.beginTransaction();
      SQLiteStatement stmt=null;
      try {
        stmt=db.compileStatement("INSERT OR REPLACE INTO global(name,value)" + " VALUES(?,?);");
        loadSetting(stmt,Settings.Global.MODE_RINGER,AudioManager.RINGER_MODE_NORMAL);
        db.setTransactionSuccessful();
      }
  finally {
        db.endTransaction();
        if (stmt != null)         stmt.close();
      }
    }
    upgradeVersion=111;
  }
  if (upgradeVersion < 112) {
    if (mUserHandle == UserHandle.USER_OWNER) {
      db.beginTransaction();
      SQLiteStatement stmt=null;
      try {
        stmt=db.compileStatement("UPDATE global SET value = ? " + " WHERE name = ? AND value = ?");
        stmt.bindString(1,getDefaultDeviceName());
        stmt.bindString(2,Settings.Global.DEVICE_NAME);
        stmt.bindString(3,getOldDefaultDeviceName());
        stmt.execute();
        db.setTransactionSuccessful();
      }
  finally {
        db.endTransaction();
        if (stmt != null)         stmt.close();
      }
    }
    upgradeVersion=112;
  }
  if (upgradeVersion < 113) {
    db.beginTransaction();
    SQLiteStatement stmt=null;
    try {
      stmt=db.compileStatement("INSERT OR IGNORE INTO secure(name,value)" + " VALUES(?,?);");
      loadIntegerSetting(stmt,Settings.Secure.SLEEP_TIMEOUT,R.integer.def_sleep_timeout);
      db.setTransactionSuccessful();
    }
  finally {
      db.endTransaction();
      if (stmt != null)       stmt.close();
    }
    upgradeVersion=113;
  }
  if (upgradeVersion < 114) {
    if (mUserHandle == UserHandle.USER_OWNER) {
      db.beginTransaction();
      SQLiteStatement stmt=null;
      try {
        stmt=db.compileStatement("INSERT OR IGNORE INTO global(name,value)" + " VALUES(?,?);");
        loadSetting(stmt,Settings.Global.VOLTE_VT_ENABLED,ImsConfig.FeatureValueConstants.ON);
        db.setTransactionSuccessful();
      }
  finally {
        db.endTransaction();
        if (stmt != null)         stmt.close();
      }
    }
    upgradeVersion=114;
  }
  if (upgradeVersion != currentVersion) {
    Log.w(TAG,"Got stuck trying to upgrade from version " + upgradeVersion + ", must wipe the settings provider");
    db.execSQL("DROP TABLE IF EXISTS global");
    db.execSQL("DROP TABLE IF EXISTS globalIndex1");
    db.execSQL("DROP TABLE IF EXISTS system");
    db.execSQL("DROP INDEX IF EXISTS systemIndex1");
    db.execSQL("DROP TABLE IF EXISTS secure");
    db.execSQL("DROP INDEX IF EXISTS secureIndex1");
    db.execSQL("DROP TABLE IF EXISTS gservices");
    db.execSQL("DROP INDEX IF EXISTS gservicesIndex1");
    db.execSQL("DROP TABLE IF EXISTS bluetooth_devices");
    db.execSQL("DROP TABLE IF EXISTS bookmarks");
    db.execSQL("DROP INDEX IF EXISTS bookmarksIndex1");
    db.execSQL("DROP INDEX IF EXISTS bookmarksIndex2");
    db.execSQL("DROP TABLE IF EXISTS favorites");
    onCreate(db);
    String wipeReason=oldVersion + "/" + upgradeVersion+ "/"+ currentVersion;
    db.execSQL("INSERT INTO secure(name,value) values('" + "wiped_db_reason" + "','" + wipeReason + "');");
  }
}
