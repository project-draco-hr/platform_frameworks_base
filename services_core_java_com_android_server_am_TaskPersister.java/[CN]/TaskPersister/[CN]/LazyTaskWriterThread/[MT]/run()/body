{
  ArraySet<Integer> persistentTaskIds=new ArraySet<Integer>();
  while (true) {
synchronized (TaskPersister.this) {
      long now=SystemClock.uptimeMillis();
      final long releaseTime=now + (DEBUG ? DEBUG_INTER_TASK_DELAY_MS : INTER_TASK_DELAY_MS);
      while (mSlow && now < releaseTime) {
        try {
          if (DEBUG)           Slog.d(TAG,"LazyTaskWriter: waiting " + (releaseTime - now));
          TaskPersister.this.wait(releaseTime - now);
        }
 catch (        InterruptedException e) {
        }
        now=SystemClock.uptimeMillis();
      }
    }
    StringWriter stringWriter=null;
    TaskRecord task=null;
synchronized (mService) {
      final ArrayList<TaskRecord> tasks=mService.mRecentTasks;
      persistentTaskIds.clear();
      if (DEBUG)       Slog.d(TAG,"mRecents=" + tasks);
      for (int taskNdx=tasks.size() - 1; taskNdx >= 0; --taskNdx) {
        task=tasks.get(taskNdx);
        if (DEBUG)         Slog.d(TAG,"LazyTaskWriter: task=" + task + " persistable="+ task.isPersistable+ " needsPersisting="+ task.needsPersisting);
        if (task.isPersistable && !task.stack.isHomeStack()) {
          if (DEBUG)           Slog.d(TAG,"adding to persistentTaskIds task=" + task);
          persistentTaskIds.add(task.taskId);
          if (task.needsPersisting) {
            try {
              if (DEBUG)               Slog.d(TAG,"Saving task=" + task);
              stringWriter=saveToXml(task);
              break;
            }
 catch (            IOException e) {
            }
catch (            XmlPullParserException e) {
            }
 finally {
              task.needsPersisting=false;
            }
          }
        }
 else {
          if (DEBUG)           Slog.d(TAG,"omitting from persistentTaskIds task=" + task);
        }
      }
    }
    if (stringWriter != null) {
      FileOutputStream file=null;
      AtomicFile atomicFile=null;
      try {
        atomicFile=new AtomicFile(new File(sTasksDir,String.valueOf(task.taskId) + RECENTS_FILENAME + TASK_EXTENSION));
        file=atomicFile.startWrite();
        file.write(stringWriter.toString().getBytes());
        file.write('\n');
        atomicFile.finishWrite(file);
      }
 catch (      IOException e) {
        if (file != null) {
          atomicFile.failWrite(file);
        }
        Slog.e(TAG,"Unable to open " + atomicFile + " for persisting. "+ e);
      }
    }
 else {
      if (!DEBUG) {
        if (DEBUG)         Slog.d(TAG,"Calling removeObsoleteFiles persistentTaskIds=" + persistentTaskIds);
        removeObsoleteFiles(persistentTaskIds);
      }
synchronized (TaskPersister.this) {
        while (!mRecentsChanged) {
          if (DEBUG)           Slog.d(TAG,"LazyTaskWriter: Waiting.");
          try {
            TaskPersister.this.wait();
          }
 catch (          InterruptedException e) {
          }
        }
        mRecentsChanged=false;
        if (DEBUG)         Slog.d(TAG,"LazyTaskWriter: Awake");
      }
    }
  }
}
