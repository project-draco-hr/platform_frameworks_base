{
  File file=other.mFile;
  BufferedReader reader=null;
  TaskRecord task=null;
  if (DEBUG_RESTORER)   Slog.d(TAG,"createTaskRecordLocked: file=" + file.getName());
  try {
    reader=new BufferedReader(new FileReader(file));
    final XmlPullParser in=Xml.newPullParser();
    in.setInput(reader);
    int event;
    while (((event=in.next()) != XmlPullParser.END_DOCUMENT) && event != XmlPullParser.END_TAG) {
      final String name=in.getName();
      if (event == XmlPullParser.START_TAG) {
        if (TAG_TASK.equals(name)) {
          task=TaskRecord.restoreFromXml(in,mStackSupervisor,mStackSupervisor.getNextTaskId());
          if (DEBUG_RESTORER)           Slog.d(TAG,"createTaskRecordLocked: restored task=" + task);
          if (task != null) {
            task.isPersistable=true;
            task.inRecents=true;
            task.userId=UserHandle.USER_OWNER;
            task.mAffiliatedTaskId=INVALID_TASK_ID;
            task.mPrevAffiliateTaskId=INVALID_TASK_ID;
            task.mNextAffiliateTaskId=INVALID_TASK_ID;
          }
 else {
            Slog.e(TAG,"Unable to create task for backed-up file=" + file + ": "+ fileToString(file));
          }
        }
 else {
          Slog.wtf(TAG,"createTaskRecordLocked Unknown xml event=" + event + " name="+ name);
        }
      }
      XmlUtils.skipCurrentTag(in);
    }
  }
 catch (  Exception e) {
    Slog.wtf(TAG,"Unable to parse " + file + ". Error ",e);
    Slog.e(TAG,"Failing file: " + fileToString(file));
  }
 finally {
    IoUtils.closeQuietly(reader);
  }
  return task;
}
