{
  final TextTrackCue cue=cueBox.getCue();
  final int direction=getLayoutDirection();
  final int absAlignment=resolveCueAlignment(direction,cue.mAlignment);
  final boolean cueSnapToLines=cue.mSnapToLines;
  int size=100 * cueBox.getMeasuredWidth() / viewportWidth;
  int xPosition;
switch (absAlignment) {
case TextTrackCue.ALIGNMENT_LEFT:
    xPosition=cue.mTextPosition;
  break;
case TextTrackCue.ALIGNMENT_RIGHT:
xPosition=cue.mTextPosition - size;
break;
case TextTrackCue.ALIGNMENT_MIDDLE:
default :
xPosition=cue.mTextPosition - size / 2;
break;
}
if (direction == LAYOUT_DIRECTION_RTL) {
xPosition=100 - xPosition;
}
if (cueSnapToLines) {
final int paddingLeft=100 * getPaddingLeft() / viewportWidth;
final int paddingRight=100 * getPaddingRight() / viewportWidth;
if (xPosition < paddingLeft && xPosition + size > paddingLeft) {
xPosition+=paddingLeft;
size-=paddingLeft;
}
final float rightEdge=100 - paddingRight;
if (xPosition < rightEdge && xPosition + size > rightEdge) {
size-=paddingRight;
}
}
final int left=xPosition * viewportWidth / 100;
final int width=size * viewportWidth / 100;
final int yPosition=calculateLinePosition(cueBox);
final int height=cueBox.getMeasuredHeight();
final int top;
if (yPosition < 0) {
top=viewportHeight + yPosition * height;
}
 else {
top=yPosition * (viewportHeight - height) / 100;
}
cueBox.layout(left,top,left + width,top + height);
}
