{
  final SimpleMonthView v;
  if (convertView != null) {
    v=(SimpleMonthView)convertView;
  }
 else {
    v=new SimpleMonthView(mContext);
    final AbsListView.LayoutParams params=new AbsListView.LayoutParams(AbsListView.LayoutParams.MATCH_PARENT,AbsListView.LayoutParams.MATCH_PARENT);
    v.setLayoutParams(params);
    v.setClickable(true);
    v.setOnDayClickListener(mOnDayClickListener);
    if (mCalendarTextColors != null) {
      v.setTextColor(mCalendarTextColors);
    }
  }
  final int minMonth=mMinDate.get(Calendar.MONTH);
  final int minYear=mMinDate.get(Calendar.YEAR);
  final int currentMonth=position + minMonth;
  final int month=currentMonth % 12;
  final int year=currentMonth / 12 + minYear;
  final int selectedDay;
  if (isSelectedDayInMonth(year,month)) {
    selectedDay=mSelectedDay.get(Calendar.DAY_OF_MONTH);
  }
 else {
    selectedDay=-1;
  }
  v.reuse();
  final int enabledDayRangeStart;
  if (minMonth == month && minYear == year) {
    enabledDayRangeStart=mMinDate.get(Calendar.DAY_OF_MONTH);
  }
 else {
    enabledDayRangeStart=1;
  }
  final int enabledDayRangeEnd;
  if (mMaxDate.get(Calendar.MONTH) == month && mMaxDate.get(Calendar.YEAR) == year) {
    enabledDayRangeEnd=mMaxDate.get(Calendar.DAY_OF_MONTH);
  }
 else {
    enabledDayRangeEnd=31;
  }
  v.setMonthParams(selectedDay,month,year,mFirstDayOfWeek,enabledDayRangeStart,enabledDayRangeEnd);
  v.invalidate();
  return v;
}
