{
  final Editable editable=(Editable)mTextView.getText();
  final int selectionStart=Selection.getSelectionStart(editable);
  final int selectionEnd=Selection.getSelectionEnd(editable);
  TextInfo[] textInfos=new TextInfo[mLength];
  int textInfosCount=0;
  for (int i=0; i < mLength; i++) {
    SpellCheckSpan spellCheckSpan=mSpellCheckSpans[i];
    if (spellCheckSpan.isSpellCheckInProgress())     continue;
    final int start=editable.getSpanStart(spellCheckSpan);
    final int end=editable.getSpanEnd(spellCheckSpan);
    if (start >= 0 && end > start && (selectionEnd < start || selectionStart > end)) {
      final String word=editable.subSequence(start,end).toString();
      spellCheckSpan.setSpellCheckInProgress();
      textInfos[textInfosCount++]=new TextInfo(word,mCookie,mIds[i]);
    }
  }
  if (textInfosCount > 0) {
    if (textInfosCount < mLength) {
      TextInfo[] textInfosCopy=new TextInfo[textInfosCount];
      System.arraycopy(textInfos,0,textInfosCopy,0,textInfosCount);
      textInfos=textInfosCopy;
    }
    mSpellCheckerSession.getSuggestions(textInfos,SuggestionSpan.SUGGESTIONS_MAX_SIZE,false);
  }
}
