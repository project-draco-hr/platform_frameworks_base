{
  if (mSpellCheckerSession == null)   return;
  Editable editable=(Editable)mTextView.getText();
  final int selectionStart=Selection.getSelectionStart(editable);
  final int selectionEnd=Selection.getSelectionEnd(editable);
  TextInfo[] textInfos=new TextInfo[mLength];
  int textInfosCount=0;
  for (int i=0; i < mLength; i++) {
    final SpellCheckSpan spellCheckSpan=mSpellCheckSpans[i];
    if (mIds[i] < 0 || spellCheckSpan.isSpellCheckInProgress())     continue;
    final int start=editable.getSpanStart(spellCheckSpan);
    final int end=editable.getSpanEnd(spellCheckSpan);
    final boolean isEditing;
    final boolean apostrophe=(selectionStart == end + 1 && editable.charAt(end) == '\'');
    if (mIsSentenceSpellCheckSupported) {
      isEditing=!apostrophe && (selectionEnd <= start || selectionStart > end);
    }
 else {
      isEditing=!apostrophe && (selectionEnd < start || selectionStart > end);
    }
    if (start >= 0 && end > start && isEditing) {
      spellCheckSpan.setSpellCheckInProgress(true);
      final TextInfo textInfo=new TextInfo(editable,start,end,mCookie,mIds[i]);
      textInfos[textInfosCount++]=textInfo;
      if (DBG) {
        Log.d(TAG,"create TextInfo: (" + i + "/"+ mLength+ ") text = "+ textInfo.getSequence()+ ", cookie = "+ mCookie+ ", seq = "+ mIds[i]+ ", sel start = "+ selectionStart+ ", sel end = "+ selectionEnd+ ", start = "+ start+ ", end = "+ end);
      }
    }
  }
  if (textInfosCount > 0) {
    if (textInfosCount < textInfos.length) {
      TextInfo[] textInfosCopy=new TextInfo[textInfosCount];
      System.arraycopy(textInfos,0,textInfosCopy,0,textInfosCount);
      textInfos=textInfosCopy;
    }
    if (mIsSentenceSpellCheckSupported) {
      mSpellCheckerSession.getSentenceSuggestions(textInfos,SuggestionSpan.SUGGESTIONS_MAX_SIZE);
    }
 else {
      mSpellCheckerSession.getSuggestions(textInfos,SuggestionSpan.SUGGESTIONS_MAX_SIZE,false);
    }
  }
}
