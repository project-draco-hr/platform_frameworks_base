{
  final Editable editable=(Editable)mTextView.getText();
  for (int i=0; i < results.length; i++) {
    SuggestionsInfo suggestionsInfo=results[i];
    if (suggestionsInfo.getCookie() != mCookie)     continue;
    final int sequenceNumber=suggestionsInfo.getSequence();
    for (int j=mLength - 1; j >= 0; j--) {
      if (sequenceNumber == mIds[j]) {
        SpellCheckSpan spellCheckSpan=mSpellCheckSpans[j];
        final int attributes=suggestionsInfo.getSuggestionsAttributes();
        boolean isInDictionary=((attributes & SuggestionsInfo.RESULT_ATTR_IN_THE_DICTIONARY) > 0);
        boolean looksLikeTypo=((attributes & SuggestionsInfo.RESULT_ATTR_LOOKS_LIKE_TYPO) > 0);
        if (DEBUG_SPELL_CHECK) {
          final int start=editable.getSpanStart(spellCheckSpan);
          final int end=editable.getSpanEnd(spellCheckSpan);
          Log.d(LOG_TAG,"Result sequence=" + suggestionsInfo.getSequence() + " "+ editable.subSequence(start,end)+ "\t"+ (isInDictionary ? "IN_DICT" : "NOT_DICT")+ "\t"+ (looksLikeTypo ? "TYPO" : "NOT_TYPO"));
        }
        if (!isInDictionary && looksLikeTypo) {
          String[] suggestions=getSuggestions(suggestionsInfo);
          if (suggestions.length > 0) {
            SuggestionSpan suggestionSpan=new SuggestionSpan(mTextView.getContext(),suggestions,SuggestionSpan.FLAG_EASY_CORRECT | SuggestionSpan.FLAG_MISSPELLED);
            final int start=editable.getSpanStart(spellCheckSpan);
            final int end=editable.getSpanEnd(spellCheckSpan);
            editable.setSpan(suggestionSpan,start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
            mTextView.invalidate();
            if (DEBUG_SPELL_CHECK) {
              String suggestionsString="";
              for (              String s : suggestions) {
                suggestionsString+=s + "|";
              }
              Log.d(LOG_TAG,"  Suggestions for " + sequenceNumber + " "+ editable.subSequence(start,end)+ "  "+ suggestionsString);
            }
          }
        }
        editable.removeSpan(spellCheckSpan);
      }
    }
  }
}
