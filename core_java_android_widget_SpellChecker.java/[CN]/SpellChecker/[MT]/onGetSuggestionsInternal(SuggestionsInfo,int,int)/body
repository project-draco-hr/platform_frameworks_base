{
  if (suggestionsInfo == null || suggestionsInfo.getCookie() != mCookie) {
    return null;
  }
  final Editable editable=(Editable)mTextView.getText();
  final int sequenceNumber=suggestionsInfo.getSequence();
  for (int k=0; k < mLength; ++k) {
    if (sequenceNumber == mIds[k]) {
      final int attributes=suggestionsInfo.getSuggestionsAttributes();
      final boolean isInDictionary=((attributes & SuggestionsInfo.RESULT_ATTR_IN_THE_DICTIONARY) > 0);
      final boolean looksLikeTypo=((attributes & SuggestionsInfo.RESULT_ATTR_LOOKS_LIKE_TYPO) > 0);
      final SpellCheckSpan spellCheckSpan=mSpellCheckSpans[k];
      if (!isInDictionary && looksLikeTypo) {
        createMisspelledSuggestionSpan(editable,suggestionsInfo,spellCheckSpan,offset,length);
      }
 else {
        if (mIsSentenceSpellCheckSupported) {
          final int spellCheckSpanStart=editable.getSpanStart(spellCheckSpan);
          final int spellCheckSpanEnd=editable.getSpanEnd(spellCheckSpan);
          final int start;
          final int end;
          if (offset != USE_SPAN_RANGE && length != USE_SPAN_RANGE) {
            start=spellCheckSpanStart + offset;
            end=start + length;
          }
 else {
            start=spellCheckSpanStart;
            end=spellCheckSpanEnd;
          }
          if (spellCheckSpanStart >= 0 && spellCheckSpanEnd > spellCheckSpanStart && end > start) {
            final Long key=Long.valueOf(TextUtils.packRangeInLong(start,end));
            final SuggestionSpan tempSuggestionSpan=mSuggestionSpanCache.get(key);
            if (tempSuggestionSpan != null) {
              if (DBG) {
                Log.i(TAG,"Remove existing misspelled span. " + editable.subSequence(start,end));
              }
              editable.removeSpan(tempSuggestionSpan);
              mSuggestionSpanCache.remove(key);
            }
          }
        }
      }
      return spellCheckSpan;
    }
  }
  return null;
}
