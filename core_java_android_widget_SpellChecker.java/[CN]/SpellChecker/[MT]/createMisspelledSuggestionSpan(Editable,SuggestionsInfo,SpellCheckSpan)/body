{
  final int start=editable.getSpanStart(spellCheckSpan);
  final int end=editable.getSpanEnd(spellCheckSpan);
  if (start < 0 || end < 0)   return;
  SuggestionSpan[] suggestionSpans=editable.getSpans(start,end,SuggestionSpan.class);
  final int length=suggestionSpans.length;
  for (int i=0; i < length; i++) {
    final int spanStart=editable.getSpanStart(suggestionSpans[i]);
    final int spanEnd=editable.getSpanEnd(suggestionSpans[i]);
    if (spanStart != start || spanEnd != end) {
      suggestionSpans[i]=null;
    }
  }
  final int suggestionsCount=suggestionsInfo.getSuggestionsCount();
  String[] suggestions;
  if (suggestionsCount <= 0) {
    suggestions=ArrayUtils.emptyArray(String.class);
  }
 else {
    int numberOfSuggestions=0;
    suggestions=new String[suggestionsCount];
    for (int i=0; i < suggestionsCount; i++) {
      final String spellSuggestion=suggestionsInfo.getSuggestionAt(i);
      if (spellSuggestion == null)       break;
      boolean suggestionFound=false;
      for (int j=0; j < length && !suggestionFound; j++) {
        if (suggestionSpans[j] == null)         break;
        String[] suggests=suggestionSpans[j].getSuggestions();
        for (int k=0; k < suggests.length; k++) {
          if (spellSuggestion.equals(suggests[k])) {
            suggestionFound=true;
            break;
          }
        }
      }
      if (!suggestionFound) {
        suggestions[numberOfSuggestions++]=spellSuggestion;
      }
    }
    if (numberOfSuggestions != suggestionsCount) {
      String[] newSuggestions=new String[numberOfSuggestions];
      System.arraycopy(suggestions,0,newSuggestions,0,numberOfSuggestions);
      suggestions=newSuggestions;
    }
  }
  SuggestionSpan suggestionSpan=new SuggestionSpan(mTextView.getContext(),suggestions,SuggestionSpan.FLAG_EASY_CORRECT | SuggestionSpan.FLAG_MISSPELLED);
  editable.setSpan(suggestionSpan,start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  mTextView.invalidate();
}
