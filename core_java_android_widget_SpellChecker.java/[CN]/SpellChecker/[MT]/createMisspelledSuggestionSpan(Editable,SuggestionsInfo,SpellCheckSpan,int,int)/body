{
  final int spellCheckSpanStart=editable.getSpanStart(spellCheckSpan);
  final int spellCheckSpanEnd=editable.getSpanEnd(spellCheckSpan);
  if (spellCheckSpanStart < 0 || spellCheckSpanEnd <= spellCheckSpanStart)   return;
  final int start;
  final int end;
  if (offset != USE_SPAN_RANGE && length != USE_SPAN_RANGE) {
    start=spellCheckSpanStart + offset;
    end=start + length;
  }
 else {
    start=spellCheckSpanStart;
    end=spellCheckSpanEnd;
  }
  final int suggestionsCount=suggestionsInfo.getSuggestionsCount();
  String[] suggestions;
  if (suggestionsCount > 0) {
    suggestions=new String[suggestionsCount];
    for (int i=0; i < suggestionsCount; i++) {
      suggestions[i]=suggestionsInfo.getSuggestionAt(i);
    }
  }
 else {
    suggestions=ArrayUtils.emptyArray(String.class);
  }
  SuggestionSpan suggestionSpan=new SuggestionSpan(mTextView.getContext(),suggestions,SuggestionSpan.FLAG_EASY_CORRECT | SuggestionSpan.FLAG_MISSPELLED);
  if (mIsSentenceSpellCheckSupported) {
    final Long key=Long.valueOf(TextUtils.packRangeInLong(start,end));
    final SuggestionSpan tempSuggestionSpan=mSuggestionSpanCache.get(key);
    if (tempSuggestionSpan != null) {
      if (DBG) {
        Log.i(TAG,"Cached span on the same position is cleard. " + editable.subSequence(start,end));
      }
      editable.removeSpan(tempSuggestionSpan);
    }
    mSuggestionSpanCache.put(key,suggestionSpan);
  }
  editable.setSpan(suggestionSpan,start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  mTextView.invalidateRegion(start,end,false);
}
