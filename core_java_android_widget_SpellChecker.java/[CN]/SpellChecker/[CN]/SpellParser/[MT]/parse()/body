{
  final int start=mText.getSpanStart(mRange);
  final int end=mText.getSpanEnd(mRange);
  mWordIterator.setCharSequence(mText,start,end);
  int wordStart=mWordIterator.preceding(start);
  int wordEnd;
  if (wordStart == BreakIterator.DONE) {
    wordEnd=mWordIterator.following(start);
    if (wordEnd != BreakIterator.DONE) {
      wordStart=mWordIterator.getBeginning(wordEnd);
    }
  }
 else {
    wordEnd=mWordIterator.getEnd(wordStart);
  }
  if (wordEnd == BreakIterator.DONE) {
    mText.removeSpan(mRange);
    return;
  }
  SpellCheckSpan[] spellCheckSpans=mText.getSpans(start - 1,end + 1,SpellCheckSpan.class);
  SuggestionSpan[] suggestionSpans=mText.getSpans(start - 1,end + 1,SuggestionSpan.class);
  int nbWordsChecked=0;
  boolean scheduleOtherSpellCheck=false;
  while (wordStart <= end) {
    if (wordEnd >= start && wordEnd > wordStart) {
      if (wordStart < start && wordEnd > start) {
        removeSpansAt(start,spellCheckSpans);
        removeSpansAt(start,suggestionSpans);
      }
      if (wordStart < end && wordEnd > end) {
        removeSpansAt(end,spellCheckSpans);
        removeSpansAt(end,suggestionSpans);
      }
      boolean createSpellCheckSpan=true;
      if (wordEnd == start) {
        for (int i=0; i < spellCheckSpans.length; i++) {
          final int spanEnd=mText.getSpanEnd(spellCheckSpans[i]);
          if (spanEnd == start) {
            createSpellCheckSpan=false;
            break;
          }
        }
      }
      if (wordStart == end) {
        for (int i=0; i < spellCheckSpans.length; i++) {
          final int spanStart=mText.getSpanStart(spellCheckSpans[i]);
          if (spanStart == end) {
            createSpellCheckSpan=false;
            break;
          }
        }
      }
      if (createSpellCheckSpan) {
        if (nbWordsChecked == MAX_SPELL_BATCH_SIZE) {
          scheduleOtherSpellCheck=true;
          break;
        }
        addSpellCheckSpan(wordStart,wordEnd);
        nbWordsChecked++;
      }
    }
    wordEnd=mWordIterator.following(wordEnd);
    if (wordEnd == BreakIterator.DONE)     break;
    wordStart=mWordIterator.getBeginning(wordEnd);
    if (wordStart == BreakIterator.DONE) {
      break;
    }
  }
  if (scheduleOtherSpellCheck) {
    mText.setSpan(mRange,wordStart,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  }
 else {
    mText.removeSpan(mRange);
  }
  spellCheck();
}
