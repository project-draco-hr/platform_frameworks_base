{
  Editable editable=(Editable)mTextView.getText();
  final int start=editable.getSpanStart(mRange);
  final int end=editable.getSpanEnd(mRange);
  final WordIterator wordIterator=mTextView.getWordIterator();
  int wordIteratorWindowEnd=Math.min(end,start + WORD_ITERATOR_INTERVAL);
  wordIterator.setCharSequence(editable,start,wordIteratorWindowEnd);
  int wordStart=wordIterator.preceding(start);
  int wordEnd;
  if (wordStart == BreakIterator.DONE) {
    wordEnd=wordIterator.following(start);
    if (wordEnd != BreakIterator.DONE) {
      wordStart=wordIterator.getBeginning(wordEnd);
    }
  }
 else {
    wordEnd=wordIterator.getEnd(wordStart);
  }
  if (wordEnd == BreakIterator.DONE) {
    removeRangeSpan(editable);
    return;
  }
  SpellCheckSpan[] spellCheckSpans=editable.getSpans(start - 1,end + 1,SpellCheckSpan.class);
  SuggestionSpan[] suggestionSpans=editable.getSpans(start - 1,end + 1,SuggestionSpan.class);
  int wordCount=0;
  boolean scheduleOtherSpellCheck=false;
  while (wordStart <= end) {
    if (wordEnd >= start && wordEnd > wordStart) {
      if (wordCount >= MAX_NUMBER_OF_WORDS) {
        scheduleOtherSpellCheck=true;
        break;
      }
      if (wordStart < start && wordEnd > start) {
        removeSpansAt(editable,start,spellCheckSpans);
        removeSpansAt(editable,start,suggestionSpans);
      }
      if (wordStart < end && wordEnd > end) {
        removeSpansAt(editable,end,spellCheckSpans);
        removeSpansAt(editable,end,suggestionSpans);
      }
      boolean createSpellCheckSpan=true;
      if (wordEnd == start) {
        for (int i=0; i < spellCheckSpans.length; i++) {
          final int spanEnd=editable.getSpanEnd(spellCheckSpans[i]);
          if (spanEnd == start) {
            createSpellCheckSpan=false;
            break;
          }
        }
      }
      if (wordStart == end) {
        for (int i=0; i < spellCheckSpans.length; i++) {
          final int spanStart=editable.getSpanStart(spellCheckSpans[i]);
          if (spanStart == end) {
            createSpellCheckSpan=false;
            break;
          }
        }
      }
      if (createSpellCheckSpan) {
        addSpellCheckSpan(editable,wordStart,wordEnd);
      }
      wordCount++;
    }
    int originalWordEnd=wordEnd;
    wordEnd=wordIterator.following(wordEnd);
    if ((wordIteratorWindowEnd < end) && (wordEnd == BreakIterator.DONE || wordEnd >= wordIteratorWindowEnd)) {
      wordIteratorWindowEnd=Math.min(end,originalWordEnd + WORD_ITERATOR_INTERVAL);
      wordIterator.setCharSequence(editable,originalWordEnd,wordIteratorWindowEnd);
      wordEnd=wordIterator.following(originalWordEnd);
    }
    if (wordEnd == BreakIterator.DONE)     break;
    wordStart=wordIterator.getBeginning(wordEnd);
    if (wordStart == BreakIterator.DONE) {
      break;
    }
  }
  if (scheduleOtherSpellCheck) {
    setRangeSpan(editable,wordStart,end);
  }
 else {
    removeRangeSpan(editable);
  }
  spellCheck();
}
