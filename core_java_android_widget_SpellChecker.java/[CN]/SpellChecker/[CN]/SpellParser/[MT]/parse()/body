{
  Editable editable=(Editable)mTextView.getText();
  final int start=editable.getSpanStart(mRange);
  final int end=editable.getSpanEnd(mRange);
  int wordIteratorWindowEnd=Math.min(end,start + WORD_ITERATOR_INTERVAL);
  mWordIterator.setCharSequence(editable,start,wordIteratorWindowEnd);
  int wordStart=mWordIterator.preceding(start);
  int wordEnd;
  if (wordStart == BreakIterator.DONE) {
    wordEnd=mWordIterator.following(start);
    if (wordEnd != BreakIterator.DONE) {
      wordStart=mWordIterator.getBeginning(wordEnd);
    }
  }
 else {
    wordEnd=mWordIterator.getEnd(wordStart);
  }
  if (wordEnd == BreakIterator.DONE) {
    removeRangeSpan(editable);
    return;
  }
  SpellCheckSpan[] spellCheckSpans=editable.getSpans(start - 1,end + 1,SpellCheckSpan.class);
  SuggestionSpan[] suggestionSpans=editable.getSpans(start - 1,end + 1,SuggestionSpan.class);
  int wordCount=0;
  boolean scheduleOtherSpellCheck=false;
  if (mIsSentenceSpellCheckSupported) {
    int regionEnd;
    if (wordIteratorWindowEnd < end) {
      regionEnd=mWordIterator.preceding(wordIteratorWindowEnd);
      scheduleOtherSpellCheck=true;
    }
 else {
      regionEnd=mWordIterator.preceding(end);
    }
    boolean correct=regionEnd != BreakIterator.DONE;
    if (correct) {
      regionEnd=mWordIterator.getEnd(regionEnd);
      correct=regionEnd != BreakIterator.DONE;
    }
    if (!correct) {
      editable.removeSpan(mRange);
      return;
    }
    wordStart=regionEnd;
    final int spellCheckStart=Math.min(start,Math.max(wordStart,regionEnd - WORD_ITERATOR_INTERVAL));
    if (regionEnd <= spellCheckStart) {
      return;
    }
    addSpellCheckSpan(editable,spellCheckStart,regionEnd);
  }
 else {
    while (wordStart <= end) {
      if (wordEnd >= start && wordEnd > wordStart) {
        if (wordCount >= MAX_NUMBER_OF_WORDS) {
          scheduleOtherSpellCheck=true;
          break;
        }
        if (wordStart < start && wordEnd > start) {
          removeSpansAt(editable,start,spellCheckSpans);
          removeSpansAt(editable,start,suggestionSpans);
        }
        if (wordStart < end && wordEnd > end) {
          removeSpansAt(editable,end,spellCheckSpans);
          removeSpansAt(editable,end,suggestionSpans);
        }
        boolean createSpellCheckSpan=true;
        if (wordEnd == start) {
          for (int i=0; i < spellCheckSpans.length; i++) {
            final int spanEnd=editable.getSpanEnd(spellCheckSpans[i]);
            if (spanEnd == start) {
              createSpellCheckSpan=false;
              break;
            }
          }
        }
        if (wordStart == end) {
          for (int i=0; i < spellCheckSpans.length; i++) {
            final int spanStart=editable.getSpanStart(spellCheckSpans[i]);
            if (spanStart == end) {
              createSpellCheckSpan=false;
              break;
            }
          }
        }
        if (createSpellCheckSpan) {
          addSpellCheckSpan(editable,wordStart,wordEnd);
        }
        wordCount++;
      }
      int originalWordEnd=wordEnd;
      wordEnd=mWordIterator.following(wordEnd);
      if ((wordIteratorWindowEnd < end) && (wordEnd == BreakIterator.DONE || wordEnd >= wordIteratorWindowEnd)) {
        wordIteratorWindowEnd=Math.min(end,originalWordEnd + WORD_ITERATOR_INTERVAL);
        mWordIterator.setCharSequence(editable,originalWordEnd,wordIteratorWindowEnd);
        wordEnd=mWordIterator.following(originalWordEnd);
      }
      if (wordEnd == BreakIterator.DONE)       break;
      wordStart=mWordIterator.getBeginning(wordEnd);
      if (wordStart == BreakIterator.DONE) {
        break;
      }
    }
  }
  if (scheduleOtherSpellCheck) {
    setRangeSpan(editable,wordStart,end);
  }
 else {
    removeRangeSpan(editable);
  }
  spellCheck();
}
