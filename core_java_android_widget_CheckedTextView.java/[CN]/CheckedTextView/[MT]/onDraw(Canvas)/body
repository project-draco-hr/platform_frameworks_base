{
  super.onDraw(canvas);
  final Drawable checkMarkDrawable=mCheckMarkDrawable;
  if (checkMarkDrawable != null) {
    final int verticalGravity=getGravity() & Gravity.VERTICAL_GRAVITY_MASK;
    final int height=checkMarkDrawable.getIntrinsicHeight();
    int y=0;
switch (verticalGravity) {
case Gravity.BOTTOM:
      y=getHeight() - height;
    break;
case Gravity.CENTER_VERTICAL:
  y=(getHeight() - height) / 2;
break;
}
final boolean isLayoutRtl=isLayoutRtl();
final int width=getWidth();
final int top=y;
final int bottom=top + height;
final int left;
final int right;
if (isLayoutRtl) {
left=mBasePadding;
right=left + mCheckMarkWidth;
}
 else {
right=width - mBasePadding;
left=right - mCheckMarkWidth;
}
checkMarkDrawable.setBounds(mScrollX + left,top,mScrollX + right,bottom);
checkMarkDrawable.draw(canvas);
final Drawable background=getBackground();
if (background != null) {
background.setHotspotBounds(mScrollX + left,top,mScrollX + right,bottom);
}
}
}
