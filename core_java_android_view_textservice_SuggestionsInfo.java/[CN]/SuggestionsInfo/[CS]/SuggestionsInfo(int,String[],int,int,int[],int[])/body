{
  final int suggestsLen;
  if (suggestions == null) {
    mSuggestions=EMPTY;
    mSuggestionsAvailable=false;
    suggestsLen=0;
    mStartPosArray=new int[0];
    mLengthArray=new int[0];
  }
 else {
    mSuggestions=suggestions;
    mSuggestionsAvailable=true;
    suggestsLen=suggestions.length;
    if (startPosArray == null || lengthArray == null) {
      mStartPosArray=new int[suggestsLen];
      mLengthArray=new int[suggestsLen];
      for (int i=0; i < suggestsLen; ++i) {
        mStartPosArray[i]=0;
        mLengthArray[i]=NOT_A_LENGTH;
      }
    }
 else     if (suggestsLen != startPosArray.length || suggestsLen != lengthArray.length) {
      throw new IllegalArgumentException();
    }
 else {
      mStartPosArray=Arrays.copyOf(startPosArray,suggestsLen);
      mLengthArray=Arrays.copyOf(lengthArray,suggestsLen);
    }
  }
  mSuggestionsAttributes=suggestionsAttributes;
  mCookie=cookie;
  mSequence=sequence;
}
