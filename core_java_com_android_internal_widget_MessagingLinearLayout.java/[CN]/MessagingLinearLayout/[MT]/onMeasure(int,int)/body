{
switch (MeasureSpec.getMode(heightMeasureSpec)) {
case MeasureSpec.AT_MOST:
    heightMeasureSpec=MeasureSpec.makeMeasureSpec(Math.min(mMaxHeight,MeasureSpec.getSize(heightMeasureSpec)),MeasureSpec.AT_MOST);
  break;
case MeasureSpec.UNSPECIFIED:
heightMeasureSpec=MeasureSpec.makeMeasureSpec(mMaxHeight,MeasureSpec.AT_MOST);
break;
case MeasureSpec.EXACTLY:
break;
}
final int targetHeight=MeasureSpec.getSize(heightMeasureSpec);
final int count=getChildCount();
for (int i=0; i < count; ++i) {
final View child=getChildAt(i);
final LayoutParams lp=(LayoutParams)child.getLayoutParams();
lp.hide=true;
}
int totalHeight=mPaddingTop + mPaddingBottom;
boolean first=true;
for (int i=count - 1; i >= 0 && totalHeight < targetHeight; i--) {
if (getChildAt(i).getVisibility() == GONE) {
continue;
}
final View child=getChildAt(i);
LayoutParams lp=(LayoutParams)getChildAt(i).getLayoutParams();
if (child instanceof ImageFloatingTextView) {
((ImageFloatingTextView)child).setNumIndentLines(mIndentLines);
}
measureChildWithMargins(child,widthMeasureSpec,0,heightMeasureSpec,0);
final int childHeight=child.getMeasuredHeight();
int newHeight=Math.max(totalHeight,totalHeight + childHeight + lp.topMargin+ lp.bottomMargin+ (first ? 0 : mSpacing));
first=false;
if (newHeight <= targetHeight) {
totalHeight=newHeight;
lp.hide=false;
}
 else {
break;
}
}
int measuredWidth=mPaddingLeft + mPaddingRight;
int imageLines=mIndentLines;
for (int i=0; i < count; i++) {
final View child=getChildAt(i);
final LayoutParams lp=(LayoutParams)child.getLayoutParams();
if (child.getVisibility() == GONE || lp.hide) {
continue;
}
if (child instanceof ImageFloatingTextView) {
ImageFloatingTextView textChild=(ImageFloatingTextView)child;
if (imageLines == 2 && textChild.getLineCount() > 2) {
imageLines=3;
}
boolean changed=textChild.setNumIndentLines(Math.max(0,imageLines));
if (changed) {
measureChildWithMargins(child,widthMeasureSpec,0,heightMeasureSpec,0);
}
imageLines-=textChild.getLineCount();
}
measuredWidth=Math.max(measuredWidth,child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin+ mPaddingLeft+ mPaddingRight);
}
setMeasuredDimension(resolveSize(Math.max(getSuggestedMinimumWidth(),measuredWidth),widthMeasureSpec),resolveSize(Math.max(getSuggestedMinimumHeight(),totalHeight),heightMeasureSpec));
}
