{
  long now=SystemClock.elapsedRealtime();
  try (BufferedReader reader=new BufferedReader(new FileReader(sProcFile))){
    TextUtils.SimpleStringSplitter splitter=new TextUtils.SimpleStringSplitter(' ');
    String line;
    while ((line=reader.readLine()) != null) {
      splitter.setString(line);
      final String uidStr=splitter.next();
      final int uid=Integer.parseInt(uidStr.substring(0,uidStr.length() - 1),10);
      final long userTimeUs=Long.parseLong(splitter.next(),10);
      final long systemTimeUs=Long.parseLong(splitter.next(),10);
      if (callback != null) {
        long userTimeDeltaUs=userTimeUs;
        long systemTimeDeltaUs=systemTimeUs;
        int index=mLastUserTimeUs.indexOfKey(uid);
        if (index >= 0) {
          userTimeDeltaUs-=mLastUserTimeUs.valueAt(index);
          systemTimeDeltaUs-=mLastSystemTimeUs.valueAt(index);
          final long timeDiffMs=(now - mLastTimeRead) * 1000;
          if (userTimeDeltaUs < 0 || systemTimeDeltaUs < 0 || userTimeDeltaUs > timeDiffMs || systemTimeDeltaUs > timeDiffMs) {
            StringBuilder sb=new StringBuilder("Malformed cpu data!\n");
            sb.append("Time between reads: ");
            TimeUtils.formatDuration(timeDiffMs,sb);
            sb.append("ms\n");
            sb.append("Previous times: u=");
            TimeUtils.formatDuration(mLastUserTimeUs.valueAt(index) / 1000,sb);
            sb.append("ms s=");
            TimeUtils.formatDuration(mLastSystemTimeUs.valueAt(index) / 1000,sb);
            sb.append("ms\n");
            sb.append("Current times: u=");
            TimeUtils.formatDuration(userTimeUs / 1000,sb);
            sb.append("ms s=");
            TimeUtils.formatDuration(systemTimeUs / 1000,sb);
            sb.append("ms\n");
            sb.append("Delta for UID=").append(uid).append(": u=");
            TimeUtils.formatDuration(userTimeDeltaUs / 1000,sb);
            sb.append("ms s=");
            TimeUtils.formatDuration(systemTimeDeltaUs / 1000,sb);
            sb.append("ms");
            Slog.wtf(TAG,sb.toString());
            userTimeDeltaUs=0;
            systemTimeDeltaUs=0;
          }
        }
        if (userTimeDeltaUs != 0 || systemTimeDeltaUs != 0) {
          callback.onUidCpuTime(uid,userTimeDeltaUs,systemTimeDeltaUs);
        }
      }
      mLastUserTimeUs.put(uid,userTimeUs);
      mLastSystemTimeUs.put(uid,systemTimeUs);
    }
  }
 catch (  IOException e) {
    Slog.e(TAG,"Failed to read uid_cputime",e);
  }
  mLastTimeRead=now;
}
