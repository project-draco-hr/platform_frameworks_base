{
  try (BufferedReader reader=new BufferedReader(new FileReader(sProcFile))){
    TextUtils.SimpleStringSplitter splitter=new TextUtils.SimpleStringSplitter(' ');
    String line;
    while ((line=reader.readLine()) != null) {
      splitter.setString(line);
      final String uidStr=splitter.next();
      final int uid=Integer.parseInt(uidStr.substring(0,uidStr.length() - 1),10);
      final long userTimeUs=Long.parseLong(splitter.next(),10);
      final long systemTimeUs=Long.parseLong(splitter.next(),10);
      if (callback != null) {
        long userTimeDeltaUs=userTimeUs;
        long systemTimeDeltaUs=systemTimeUs;
        int index=mLastUserTimeUs.indexOfKey(uid);
        if (index >= 0) {
          userTimeDeltaUs-=mLastUserTimeUs.valueAt(index);
          systemTimeDeltaUs-=mLastSystemTimeUs.valueAt(index);
          if (userTimeDeltaUs < 0 || systemTimeDeltaUs < 0) {
            userTimeDeltaUs=userTimeUs;
            systemTimeDeltaUs=systemTimeUs;
          }
        }
        if (userTimeDeltaUs != 0 || systemTimeDeltaUs != 0) {
          callback.onUidCpuTime(uid,userTimeDeltaUs,systemTimeDeltaUs);
        }
      }
      mLastUserTimeUs.put(uid,userTimeUs);
      mLastSystemTimeUs.put(uid,systemTimeUs);
    }
  }
 catch (  IOException e) {
    Slog.e(TAG,"Failed to read uid_cputime",e);
  }
}
