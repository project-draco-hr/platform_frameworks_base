{
  short secs=7;
  int transactionId=0xdeadbeef;
  byte[] hwaddr={(byte)0xda,(byte)0x01,(byte)0x19,(byte)0x5b,(byte)0xb1,(byte)0x7a};
  byte[] params=new byte[]{DHCP_SUBNET_MASK,DHCP_ROUTER,DHCP_DNS_SERVER,DHCP_DOMAIN_NAME,DHCP_MTU,DHCP_LEASE_TIME};
  ByteBuffer packet=DhcpPacket.buildDiscoverPacket(DhcpPacket.ENCAP_L2,transactionId,secs,hwaddr,false,params);
  byte[] headers=new byte[]{(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xda,(byte)0x01,(byte)0x19,(byte)0x5b,(byte)0xb1,(byte)0x7a,(byte)0x08,(byte)0x00,(byte)0x45,(byte)0x10,(byte)0x01,(byte)0x52,(byte)0x00,(byte)0x00,(byte)0x40,(byte)0x00,(byte)0x40,(byte)0x11,(byte)0x39,(byte)0x8c,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0x00,(byte)0x44,(byte)0x00,(byte)0x43,(byte)0x01,(byte)0x3e,(byte)0xd8,(byte)0xa4,(byte)0x01,(byte)0x01,(byte)0x06,(byte)0x00,(byte)0xde,(byte)0xad,(byte)0xbe,(byte)0xef,(byte)0x00,(byte)0x07,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0xda,(byte)0x01,(byte)0x19,(byte)0x5b,(byte)0xb1,(byte)0x7a};
  byte[] options=new byte[]{(byte)0x63,(byte)0x82,(byte)0x53,(byte)0x63,(byte)0x35,(byte)0x01,(byte)0x01,(byte)0x3d,(byte)0x07,(byte)0x01,(byte)0xda,(byte)0x01,(byte)0x19,(byte)0x5b,(byte)0xb1,(byte)0x7a,(byte)0x39,(byte)0x02,(byte)0x05,(byte)0xdc,(byte)0x3c,(byte)0x10,'a','n','d','r','o','i','d','-','d','h','c','p','-','?','?','?',(byte)0x0c,(byte)0x18,'a','n','d','r','o','i','d','-','0','1','2','3','4','5','6','7','8','9','0','a','b','c','d','e',(byte)0x37,(byte)0x06,DHCP_SUBNET_MASK,DHCP_ROUTER,DHCP_DNS_SERVER,DHCP_DOMAIN_NAME,DHCP_MTU,DHCP_LEASE_TIME,(byte)0xff,(byte)0x00};
  byte[] expected=new byte[DhcpPacket.MIN_PACKET_LENGTH_L2 + options.length];
  assertTrue((expected.length & 1) == 0);
  System.arraycopy(headers,0,expected,0,headers.length);
  System.arraycopy(options,0,expected,DhcpPacket.MIN_PACKET_LENGTH_L2,options.length);
  byte[] actual=new byte[packet.limit()];
  packet.get(actual);
  String msg="Expected:\n  " + Arrays.toString(expected) + "\nActual:\n  "+ Arrays.toString(actual);
  assertTrue(msg,Arrays.equals(expected,actual));
}
