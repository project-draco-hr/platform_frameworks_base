{
  if (cmd == null) {
    return shell.handleDefaultCommands(cmd);
  }
  PrintWriter pw=shell.getOutPrintWriter();
switch (cmd) {
case "unplug":
{
      getContext().enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER,null);
      if (!mUpdatesStopped) {
        mLastBatteryProps.set(mBatteryProps);
      }
      mBatteryProps.chargerAcOnline=false;
      mBatteryProps.chargerUsbOnline=false;
      mBatteryProps.chargerWirelessOnline=false;
      long ident=Binder.clearCallingIdentity();
      try {
        mUpdatesStopped=true;
        processValuesLocked(false);
      }
  finally {
        Binder.restoreCallingIdentity(ident);
      }
    }
  break;
case "set":
{
  getContext().enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER,null);
  final String key=shell.getNextArg();
  if (key == null) {
    pw.println("No property specified");
    return -1;
  }
  final String value=shell.getNextArg();
  if (value == null) {
    pw.println("No value specified");
    return -1;
  }
  try {
    if (!mUpdatesStopped) {
      mLastBatteryProps.set(mBatteryProps);
    }
    boolean update=true;
switch (key) {
case "ac":
      mBatteryProps.chargerAcOnline=Integer.parseInt(value) != 0;
    break;
case "usb":
  mBatteryProps.chargerUsbOnline=Integer.parseInt(value) != 0;
break;
case "wireless":
mBatteryProps.chargerWirelessOnline=Integer.parseInt(value) != 0;
break;
case "status":
mBatteryProps.batteryStatus=Integer.parseInt(value);
break;
case "level":
mBatteryProps.batteryLevel=Integer.parseInt(value);
break;
case "invalid":
mInvalidCharger=Integer.parseInt(value);
break;
default :
pw.println("Unknown set option: " + key);
update=false;
break;
}
if (update) {
long ident=Binder.clearCallingIdentity();
try {
mUpdatesStopped=true;
processValuesLocked(false);
}
  finally {
Binder.restoreCallingIdentity(ident);
}
}
}
 catch (NumberFormatException ex) {
pw.println("Bad value: " + value);
return -1;
}
}
break;
case "reset":
{
getContext().enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER,null);
long ident=Binder.clearCallingIdentity();
try {
if (mUpdatesStopped) {
mUpdatesStopped=false;
mBatteryProps.set(mLastBatteryProps);
processValuesLocked(false);
}
}
  finally {
Binder.restoreCallingIdentity(ident);
}
}
break;
default :
return shell.handleDefaultCommands(cmd);
}
return 0;
}
