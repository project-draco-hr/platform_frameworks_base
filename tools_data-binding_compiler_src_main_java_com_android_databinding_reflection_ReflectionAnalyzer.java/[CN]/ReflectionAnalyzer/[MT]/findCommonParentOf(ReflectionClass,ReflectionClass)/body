{
  ReflectionClass curr=reflectionClass1;
  while (curr != null && !curr.isAssignableFrom(reflectionClass2)) {
    curr=curr.getSuperclass();
  }
  if (curr == null) {
    ReflectionClass primitive1=reflectionClass1.unbox();
    ReflectionClass primitive2=reflectionClass2.unbox();
    if (!reflectionClass1.equals(primitive1) || !reflectionClass2.equals(primitive2)) {
      return findCommonParentOf(primitive1,primitive2);
    }
  }
  Preconditions.checkNotNull(curr,"must be able to find a common parent for " + reflectionClass1 + " and "+ reflectionClass2);
  return curr;
}
