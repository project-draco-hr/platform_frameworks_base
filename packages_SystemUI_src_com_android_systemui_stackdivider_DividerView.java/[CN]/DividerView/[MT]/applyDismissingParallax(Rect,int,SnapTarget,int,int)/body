{
  float fraction=Math.min(1,Math.max(0,mSnapAlgorithm.calculateDismissingFraction(position)));
  SnapTarget dismissTarget=null;
  SnapTarget splitTarget=null;
  int start=0;
  if (position <= mSnapAlgorithm.getLastSplitTarget().position && dockSideTopLeft(dockSide)) {
    dismissTarget=mSnapAlgorithm.getDismissStartTarget();
    splitTarget=mSnapAlgorithm.getFirstSplitTarget();
    start=taskPosition;
  }
 else   if (position >= mSnapAlgorithm.getLastSplitTarget().position && dockSideBottomRight(dockSide)) {
    dismissTarget=mSnapAlgorithm.getDismissEndTarget();
    splitTarget=mSnapAlgorithm.getLastSplitTarget();
    start=splitTarget.position;
  }
  if (dismissTarget != null && fraction > 0f && isDismissing(splitTarget,position,dockSide)) {
    fraction=calculateParallaxDismissingFraction(fraction,dockSide);
    int offsetPosition=(int)(start + fraction * (dismissTarget.position - splitTarget.position));
    int width=taskRect.width();
    int height=taskRect.height();
switch (dockSide) {
case WindowManager.DOCKED_LEFT:
      taskRect.left=offsetPosition - width;
    taskRect.right=offsetPosition;
  break;
case WindowManager.DOCKED_RIGHT:
taskRect.left=offsetPosition + mDividerSize;
taskRect.right=offsetPosition + width + mDividerSize;
break;
case WindowManager.DOCKED_TOP:
taskRect.top=offsetPosition - height;
taskRect.bottom=offsetPosition;
break;
case WindowManager.DOCKED_BOTTOM:
taskRect.top=offsetPosition + mDividerSize;
taskRect.bottom=offsetPosition + height + mDividerSize;
break;
}
}
}
