{
  calculateBoundsForPosition(position,mDockSide,mDockedRect);
  if (mDockedRect.equals(mLastResizeRect)) {
    return;
  }
  mBackground.invalidate();
  mLastResizeRect.set(mDockedRect);
  if (taskPosition != TASK_POSITION_SAME) {
    calculateBoundsForPosition(position,invertDockSide(mDockSide),mOtherRect);
    calculateBoundsForPosition(taskPosition,mDockSide,mDockedTaskRect);
    calculateBoundsForPosition(taskPosition,invertDockSide(mDockSide),mOtherTaskRect);
    alignTopLeft(mDockedRect,mDockedTaskRect);
    alignTopLeft(mOtherRect,mOtherTaskRect);
    mDockedInsetRect.set(mDockedTaskRect);
    mOtherInsetRect.set(mOtherTaskRect);
    if (mDockSide == WindowManager.DOCKED_LEFT || mDockSide == WindowManager.DOCKED_TOP) {
      alignTopLeft(mDockedRect,mDockedInsetRect);
      alignBottomRight(mOtherRect,mOtherInsetRect);
    }
 else {
      alignBottomRight(mDockedRect,mDockedInsetRect);
      alignTopLeft(mOtherRect,mOtherInsetRect);
    }
    mWindowManagerProxy.resizeDockedStack(mDockedRect,mDockedTaskRect,mDockedInsetRect,mOtherTaskRect,mOtherInsetRect);
  }
 else {
    mWindowManagerProxy.resizeDockedStack(mDockedRect,null,null,null,null);
  }
  float fraction=mSnapAlgorithm.calculateDismissingFraction(position);
  fraction=Math.max(0,Math.min((fraction / DIM_START_FRACTION - 1f) / DIM_DAMP_FACTOR,1f));
  mWindowManagerProxy.setResizeDimLayer(fraction != 0f,getStackIdForDismissTarget(mSnapAlgorithm.getClosestDismissTarget(position)),fraction);
}
