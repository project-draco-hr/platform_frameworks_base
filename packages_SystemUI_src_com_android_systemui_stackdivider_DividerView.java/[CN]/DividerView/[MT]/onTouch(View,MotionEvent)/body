{
  convertToScreenCoordinates(event);
  final int action=event.getAction() & MotionEvent.ACTION_MASK;
switch (action) {
case MotionEvent.ACTION_DOWN:
    mVelocityTracker=VelocityTracker.obtain();
  mVelocityTracker.addMovement(event);
mStartX=(int)event.getX();
mStartY=(int)event.getY();
getLocationOnScreen(mTempInt2);
mDockSide=mWindowManagerProxy.getDockSide();
if (isHorizontalDivision()) {
mStartPosition=mTempInt2[1] + mDividerInsets;
}
 else {
mStartPosition=mTempInt2[0] + mDividerInsets;
}
if (mDockSide != WindowManager.DOCKED_INVALID) {
mWindowManagerProxy.setResizing(true);
mWindowManager.setSlippery(false);
liftBackground();
return true;
}
 else {
return false;
}
case MotionEvent.ACTION_MOVE:
mVelocityTracker.addMovement(event);
int x=(int)event.getX();
int y=(int)event.getY();
if (mDockSide != WindowManager.DOCKED_INVALID) {
resizeStack(calculatePosition(x,y));
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
mVelocityTracker.addMovement(event);
x=(int)event.getRawX();
y=(int)event.getRawY();
mVelocityTracker.computeCurrentVelocity(1000);
fling(x,y,mVelocityTracker.getXVelocity(),mVelocityTracker.getYVelocity());
mWindowManager.setSlippery(true);
releaseBackground();
break;
}
return true;
}
