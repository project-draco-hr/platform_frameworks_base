{
  final StreamTokenizer st=initTokenizer(r);
  final String identifierPattern="[a-zA-Z_$][0-9a-zA-Z_$]*";
  final Pattern propertyNamePattern=Pattern.compile("(" + identifierPattern + "\\.)*"+ identifierPattern);
  boolean eolNeeded=false;
  while (true) {
    int token;
    int eolStatus=eatEols(st);
    if (eolStatus < 0) {
      break;
    }
 else     if (eolNeeded && eolStatus == 0) {
      throw new ParseException(st,"end of line or end of file");
    }
    token=st.nextToken();
    if (token != StreamTokenizer.TT_WORD) {
      throw new ParseException(st,"property name");
    }
    final String propertyName=st.sval;
    if (!propertyNamePattern.matcher(propertyName).matches()) {
      throw new ParseException(st,"valid property name");
    }
    st.sval=null;
    token=st.nextToken();
    if (token != StreamTokenizer.TT_WORD) {
      throw new ParseException(st,"type name");
    }
    final int type=interpretType(st.sval);
    if (type == TYPE_ERROR) {
      throw new ParseException(st,"valid type name");
    }
    st.sval=null;
    if (type == TYPE_UNSET) {
      map.remove(propertyName);
    }
 else {
      token=st.nextToken();
      if (token != '=') {
        throw new ParseException(st,"'='");
      }
      final Object value=parseValue(st,type);
      final Object oldValue=map.remove(propertyName);
      if (oldValue != null) {
        if (value.getClass() != oldValue.getClass()) {
          throw new ParseException(st,"(property previously declared as a different type)");
        }
      }
      map.put(propertyName,value);
    }
    eolNeeded=true;
  }
}
