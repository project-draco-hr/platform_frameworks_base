{
  final int token=st.nextToken();
  if (type == TYPE_BOOLEAN) {
    if (token != StreamTokenizer.TT_WORD) {
      throw new ParseException(st,"boolean constant");
    }
    if ("true".equals(st.sval)) {
      return Boolean.TRUE;
    }
 else     if ("false".equals(st.sval)) {
      return Boolean.FALSE;
    }
    throw new ParseException(st,"boolean constant");
  }
 else   if ((type & 0xff) == 'I') {
    if (token != StreamTokenizer.TT_WORD) {
      throw new ParseException(st,"integer constant");
    }
    long value;
    try {
      value=Long.decode(st.sval);
    }
 catch (    NumberFormatException ex) {
      throw new ParseException(st,"integer constant");
    }
    int width=(type >> 8) & 0xff;
switch (width) {
case 1:
      if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE) {
        throw new ParseException(st,"8-bit integer constant");
      }
    return new Byte((byte)value);
case 2:
  if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {
    throw new ParseException(st,"16-bit integer constant");
  }
return new Short((short)value);
case 4:
if (value < Integer.MIN_VALUE || value > Integer.MAX_VALUE) {
throw new ParseException(st,"32-bit integer constant");
}
return new Integer((int)value);
case 8:
if (value < Long.MIN_VALUE || value > Long.MAX_VALUE) {
throw new ParseException(st,"64-bit integer constant");
}
return new Long(value);
default :
throw new IllegalStateException("Internal error; unexpected integer type width " + width);
}
}
 else if ((type & 0xff) == 'F') {
if (token != StreamTokenizer.TT_WORD) {
throw new ParseException(st,"float constant");
}
double value;
try {
value=Double.parseDouble(st.sval);
}
 catch (NumberFormatException ex) {
throw new ParseException(st,"float constant");
}
if (((type >> 8) & 0xff) == 4) {
double absValue=Math.abs(value);
if (absValue != 0.0 && !Double.isInfinite(value) && !Double.isNaN(value)) {
if (absValue < Float.MIN_VALUE || absValue > Float.MAX_VALUE) {
throw new ParseException(st,"32-bit float constant");
}
}
return new Float((float)value);
}
 else {
return new Double(value);
}
}
 else if (type == TYPE_STRING) {
if (token == '"') {
return st.sval;
}
 else if (token == StreamTokenizer.TT_WORD && "null".equals(st.sval)) {
return NULL_STRING;
}
throw new ParseException(st,"double-quoted string or 'null'");
}
throw new IllegalStateException("Internal error; unknown type " + type);
}
