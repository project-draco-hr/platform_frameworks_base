{
  int encoding;
  boolean hasLanguageIndicator=false;
switch ((mHeader.dataCodingScheme & 0xf0) >> 4) {
case 0x00:
    encoding=SmsMessage.ENCODING_7BIT;
  mLanguage=LANGUAGE_CODES_GROUP_0[mHeader.dataCodingScheme & 0x0f];
break;
case 0x01:
hasLanguageIndicator=true;
if ((mHeader.dataCodingScheme & 0x0f) == 0x01) {
encoding=SmsMessage.ENCODING_16BIT;
}
 else {
encoding=SmsMessage.ENCODING_7BIT;
}
break;
case 0x02:
encoding=SmsMessage.ENCODING_7BIT;
mLanguage=LANGUAGE_CODES_GROUP_2[mHeader.dataCodingScheme & 0x0f];
break;
case 0x03:
encoding=SmsMessage.ENCODING_7BIT;
break;
case 0x04:
case 0x05:
switch ((mHeader.dataCodingScheme & 0x0c) >> 2) {
case 0x01:
encoding=SmsMessage.ENCODING_8BIT;
break;
case 0x02:
encoding=SmsMessage.ENCODING_16BIT;
break;
case 0x00:
default :
encoding=SmsMessage.ENCODING_7BIT;
break;
}
break;
case 0x06:
case 0x07:
case 0x09:
case 0x0e:
encoding=SmsMessage.ENCODING_UNKNOWN;
break;
case 0x0f:
if (((mHeader.dataCodingScheme & 0x04) >> 2) == 0x01) {
encoding=SmsMessage.ENCODING_8BIT;
}
 else {
encoding=SmsMessage.ENCODING_7BIT;
}
break;
default :
encoding=SmsMessage.ENCODING_7BIT;
break;
}
if (mHeader.format == SmsCbHeader.FORMAT_UMTS) {
int nrPages=pdu[SmsCbHeader.PDU_HEADER_LENGTH];
if (pdu.length < SmsCbHeader.PDU_HEADER_LENGTH + 1 + (PDU_BODY_PAGE_LENGTH + 1) * nrPages) {
throw new IllegalArgumentException("Pdu length " + pdu.length + " does not match "+ nrPages+ " pages");
}
StringBuilder sb=new StringBuilder();
for (int i=0; i < nrPages; i++) {
int offset=SmsCbHeader.PDU_HEADER_LENGTH + 1 + (PDU_BODY_PAGE_LENGTH + 1) * i;
int length=pdu[offset + PDU_BODY_PAGE_LENGTH];
if (length > PDU_BODY_PAGE_LENGTH) {
throw new IllegalArgumentException("Page length " + length + " exceeds maximum value "+ PDU_BODY_PAGE_LENGTH);
}
sb.append(unpackBody(pdu,encoding,offset,length,hasLanguageIndicator));
}
mBody=sb.toString();
}
 else {
int offset=SmsCbHeader.PDU_HEADER_LENGTH;
int length=pdu.length - offset;
mBody=unpackBody(pdu,encoding,offset,length,hasLanguageIndicator);
}
}
