{
  StringBuilder buff=new StringBuilder();
  int myPid=Process.myPid();
  int total=0;
  SparseIntArray pidCounts=new SparseIntArray();
synchronized (sWindowToPidMap) {
    int size=sWindowToPidMap.size();
    if (size == 0) {
      return "";
    }
    for (int indx=0; indx < size; indx++) {
      int pid=sWindowToPidMap.valueAt(indx);
      int value=pidCounts.get(pid);
      pidCounts.put(pid,++value);
    }
  }
  int numPids=pidCounts.size();
  for (int i=0; i < numPids; i++) {
    buff.append(" (# cursors opened by ");
    int pid=pidCounts.keyAt(i);
    if (pid == myPid) {
      buff.append("this proc=");
    }
 else {
      buff.append("pid " + pid + "=");
    }
    int num=pidCounts.get(pid);
    buff.append(num + ")");
    total+=num;
  }
  String s=(buff.length() > 980) ? buff.substring(0,980) : buff.toString();
  return "# Open Cursors=" + total + s;
}
