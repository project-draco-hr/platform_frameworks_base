{
  Intent intent=new Intent(mAction);
  if (justCheckThisPackage != null) {
    intent.setPackage(justCheckThisPackage);
  }
  List<ResolveInfo> rInfos=mPm.queryIntentServicesAsUser(intent,PackageManager.GET_META_DATA,UserHandle.USER_SYSTEM);
  int bestVersion=Integer.MIN_VALUE;
  String bestPackage=null;
  boolean bestIsMultiuser=false;
  if (rInfos != null) {
    for (    ResolveInfo rInfo : rInfos) {
      String packageName=rInfo.serviceInfo.packageName;
      try {
        PackageInfo pInfo;
        pInfo=mPm.getPackageInfo(packageName,PackageManager.GET_SIGNATURES);
        if (!isSignatureMatch(pInfo.signatures)) {
          Log.w(mTag,packageName + " resolves service " + mAction+ ", but has wrong signature, ignoring");
          continue;
        }
      }
 catch (      NameNotFoundException e) {
        Log.wtf(mTag,e);
        continue;
      }
      int version=Integer.MIN_VALUE;
      boolean isMultiuser=false;
      if (rInfo.serviceInfo.metaData != null) {
        version=rInfo.serviceInfo.metaData.getInt(EXTRA_SERVICE_VERSION,Integer.MIN_VALUE);
        isMultiuser=rInfo.serviceInfo.metaData.getBoolean(EXTRA_SERVICE_IS_MULTIUSER);
      }
      if (version > mVersion) {
        bestVersion=version;
        bestPackage=packageName;
        bestIsMultiuser=isMultiuser;
      }
    }
    if (D) {
      Log.d(mTag,String.format("bindBestPackage for %s : %s found %d, %s",mAction,(justCheckThisPackage == null ? "" : "(" + justCheckThisPackage + ") "),rInfos.size(),(bestPackage == null ? "no new best package" : "new best package: " + bestPackage)));
    }
  }
 else {
    if (D)     Log.d(mTag,"Unable to query intent services for action: " + mAction);
  }
  if (bestPackage != null) {
    bindToPackageLocked(bestPackage,bestVersion,bestIsMultiuser);
    return true;
  }
  return false;
}
