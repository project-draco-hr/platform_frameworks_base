{
  Graphics2D g=getGraphics2d();
  g=(Graphics2D)g.create();
  if (paint.isAntiAliased()) {
    g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
    g.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
  }
  boolean useColorPaint=true;
  Shader_Delegate shaderDelegate=Shader_Delegate.getDelegate(paint.getShader());
  if (shaderDelegate != null) {
    java.awt.Paint shaderPaint=shaderDelegate.getJavaPaint();
    if (shaderPaint != null) {
      g.setPaint(shaderPaint);
      useColorPaint=false;
    }
 else {
      Bridge.getLog().warning(null,String.format("Shader '%1$s' is not supported in the Layout Preview.",shaderDelegate.getClass().getCanonicalName()));
    }
  }
  if (useColorPaint) {
    g.setColor(new Color(paint.getColor(),true));
  }
  int style=paint.getStyle();
  if (style == Paint.Style.STROKE.nativeInt || style == Paint.Style.FILL_AND_STROKE.nativeInt) {
    PathEffect_Delegate effectDelegate=PathEffect_Delegate.getDelegate(paint.getPathEffect());
    if (effectDelegate instanceof DashPathEffect_Delegate) {
      DashPathEffect_Delegate dpe=(DashPathEffect_Delegate)effectDelegate;
      g.setStroke(new BasicStroke(paint.getStrokeWidth(),paint.getJavaCap(),paint.getJavaJoin(),paint.getStrokeMiter(),dpe.getIntervals(),dpe.getPhase()));
    }
 else {
      g.setStroke(new BasicStroke(paint.getStrokeWidth(),paint.getJavaCap(),paint.getJavaJoin(),paint.getStrokeMiter()));
    }
  }
  Xfermode_Delegate xfermodeDelegate=Xfermode_Delegate.getDelegate(paint.getXfermode());
  if (xfermodeDelegate instanceof PorterDuffXfermode_Delegate) {
    int mode=((PorterDuffXfermode_Delegate)xfermodeDelegate).getMode();
    setModeInGraphics(g,mode);
  }
 else {
    g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER));
    if (xfermodeDelegate != null) {
      Bridge.getLog().warning(null,String.format("Xfermode '%1$s' is not supported in the Layout Preview.",xfermodeDelegate.getClass().getCanonicalName()));
    }
  }
  return g;
}
