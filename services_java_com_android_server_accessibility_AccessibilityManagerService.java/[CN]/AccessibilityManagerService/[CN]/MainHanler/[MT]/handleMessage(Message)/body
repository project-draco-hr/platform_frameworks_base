{
  final int type=msg.what;
switch (type) {
case MSG_TOGGLE_TOUCH_EXPLORATION:
{
      final int value=msg.arg1;
      Settings.Secure.putInt(mContext.getContentResolver(),Settings.Secure.TOUCH_EXPLORATION_ENABLED,value);
    }
  break;
case MSG_SHOW_ENABLE_TOUCH_EXPLORATION_DIALOG:
{
  final Service service=(Service)msg.obj;
  String label=service.mResolveInfo.loadLabel(mContext.getPackageManager()).toString();
synchronized (mLock) {
    if (mIsTouchExplorationEnabled) {
      return;
    }
    if (mEnableTouchExplorationDialog != null && mEnableTouchExplorationDialog.isShowing()) {
      return;
    }
    mEnableTouchExplorationDialog=new AlertDialog.Builder(mContext).setIcon(android.R.drawable.ic_dialog_alert).setPositiveButton(android.R.string.ok,new OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        mTouchExplorationGrantedServices.add(service.mComponentName);
        persistComponentNamesToSettingLocked(Settings.Secure.TOUCH_EXPLORATION_GRANTED_ACCESSIBILITY_SERVICES,mTouchExplorationGrantedServices);
        Settings.Secure.putInt(mContext.getContentResolver(),Settings.Secure.TOUCH_EXPLORATION_ENABLED,1);
      }
    }
).setNegativeButton(android.R.string.cancel,new OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        dialog.dismiss();
      }
    }
).setTitle(R.string.enable_explore_by_touch_warning_title).setMessage(mContext.getString(R.string.enable_explore_by_touch_warning_message,label)).create();
    mEnableTouchExplorationDialog.getWindow().setType(WindowManager.LayoutParams.TYPE_INPUT_METHOD_DIALOG);
    mEnableTouchExplorationDialog.setCanceledOnTouchOutside(true);
    mEnableTouchExplorationDialog.show();
  }
}
}
}
