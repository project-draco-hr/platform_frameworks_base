{
  IAccessibilityInteractionConnection connection=null;
synchronized (mLock) {
    final boolean permissionGranted=mSecurityPolicy.canGetAccessibilityNodeInfoLocked(this,accessibilityWindowId);
    if (permissionGranted) {
      connection=getConnectionToRetrievalAllowingWindowLocked();
    }
  }
  if (connection == null) {
    if (DEBUG) {
      Slog.e(LOG_TAG,"No interaction connection to focused window.");
    }
    return null;
  }
  final long identityToken=Binder.clearCallingIdentity();
  try {
    final int interactionId=mInteractionIdCounter.getAndIncrement();
    connection.findAccessibilityNodeInfosByViewText(text,accessibilityViewId,interactionId,mCallback);
    List<AccessibilityNodeInfo> infos=mCallback.getFindAccessibilityNodeInfosResultAndClear(interactionId);
    if (infos != null) {
      final int infoCount=infos.size();
      for (int i=0; i < infoCount; i++) {
        AccessibilityNodeInfo info=infos.get(i);
        info.setConnection(this);
        info.setSealed(true);
      }
    }
    return infos;
  }
 catch (  RemoteException re) {
    if (DEBUG) {
      Slog.e(LOG_TAG,"Error finding node.");
    }
  }
 finally {
    Binder.restoreCallingIdentity(identityToken);
  }
  return null;
}
