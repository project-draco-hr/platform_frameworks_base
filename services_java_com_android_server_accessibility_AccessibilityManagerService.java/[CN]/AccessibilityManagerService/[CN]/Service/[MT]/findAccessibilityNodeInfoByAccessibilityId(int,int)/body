{
  IAccessibilityInteractionConnection connection=null;
synchronized (mLock) {
    mSecurityPolicy.enforceCanRetrieveWindowContent(this);
    final boolean permissionGranted=mSecurityPolicy.canGetAccessibilityNodeInfoLocked(this,accessibilityWindowId);
    if (!permissionGranted) {
      return null;
    }
 else {
      connection=mWindowIdToInteractionConnectionMap.get(accessibilityWindowId);
      if (connection == null) {
        if (DEBUG) {
          Slog.e(LOG_TAG,"No interaction connection to window: " + accessibilityWindowId);
        }
        return null;
      }
    }
  }
  final long identityToken=Binder.clearCallingIdentity();
  try {
    final int interactionId=mInteractionIdCounter.getAndIncrement();
    connection.findAccessibilityNodeInfoByAccessibilityId(accessibilityViewId,interactionId,mCallback);
    AccessibilityNodeInfo info=mCallback.getFindAccessibilityNodeInfoResultAndClear(interactionId);
    if (info != null) {
      applyCompatibilityScaleIfNeeded(info);
      info.setConnection(this);
      info.setSealed(true);
    }
    return info;
  }
 catch (  RemoteException re) {
    if (DEBUG) {
      Slog.e(LOG_TAG,"Error requesting node with accessibilityViewId: " + accessibilityViewId);
    }
  }
 finally {
    Binder.restoreCallingIdentity(identityToken);
  }
  return null;
}
