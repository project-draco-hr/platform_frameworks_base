{
  final int resolvedWindowId=resolveAccessibilityWindowId(accessibilityWindowId);
  final int windowLeft;
  final int windowTop;
  IAccessibilityInteractionConnection connection=null;
synchronized (mLock) {
    mSecurityPolicy.enforceCanRetrieveWindowContent(this);
    final boolean permissionGranted=mSecurityPolicy.canRetrieveWindowContent(this);
    if (!permissionGranted) {
      return 0;
    }
 else {
      connection=getConnectionLocked(resolvedWindowId);
      if (connection == null) {
        return 0;
      }
    }
    IBinder token=mWindowIdToWindowTokenMap.get(resolvedWindowId);
    mWindowManagerService.getWindowFrame(token,mTempBounds);
    windowLeft=mTempBounds.left;
    windowTop=mTempBounds.top;
  }
  final int flags=(mIncludeNotImportantViews) ? AccessibilityNodeInfo.INCLUDE_NOT_IMPORTANT_VIEWS : 0;
  final int interrogatingPid=Binder.getCallingPid();
  final long identityToken=Binder.clearCallingIdentity();
  try {
    connection.findAccessibilityNodeInfoByViewId(accessibilityNodeId,viewId,windowLeft,windowTop,interactionId,callback,flags,interrogatingPid,interrogatingTid);
  }
 catch (  RemoteException re) {
    if (DEBUG) {
      Slog.e(LOG_TAG,"Error findAccessibilityNodeInfoByViewId().");
    }
  }
 finally {
    Binder.restoreCallingIdentity(identityToken);
  }
  return getCompatibilityScale(resolvedWindowId);
}
