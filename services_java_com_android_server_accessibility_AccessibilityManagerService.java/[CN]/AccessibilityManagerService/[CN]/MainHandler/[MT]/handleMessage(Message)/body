{
  final int type=msg.what;
switch (type) {
case MSG_SEND_ACCESSIBILITY_EVENT_TO_INPUT_FILTER:
{
      AccessibilityEvent event=(AccessibilityEvent)msg.obj;
synchronized (mLock) {
        if (mHasInputFilter && mInputFilter != null) {
          mInputFilter.notifyAccessibilityEvent(event);
        }
      }
      event.recycle();
    }
  break;
case MSG_SEND_STATE_TO_CLIENTS:
{
  final int clientState=msg.arg1;
  final int userId=msg.arg2;
  sendStateToClients(clientState,mGlobalClients);
  sendStateToClientsForUser(clientState,userId);
}
break;
case MSG_SEND_CLEARED_STATE_TO_CLIENTS_FOR_USER:
{
final int userId=msg.arg1;
sendStateToClientsForUser(0,userId);
}
break;
case MSG_SEND_RECREATE_INTERNAL_STATE:
{
final int userId=msg.arg1;
synchronized (mLock) {
UserState userState=getUserStateLocked(userId);
recreateInternalStateLocked(userState);
}
}
break;
case MSG_REGISTER_UI_TEST_AUTOMATION_SERVICE:
{
SomeArgs args=(SomeArgs)msg.obj;
try {
IAccessibilityServiceClient client=(IAccessibilityServiceClient)args.arg1;
AccessibilityServiceInfo info=(AccessibilityServiceInfo)args.arg2;
registerUiTestAutomationService(client,info);
}
  finally {
args.recycle();
}
}
break;
}
}
