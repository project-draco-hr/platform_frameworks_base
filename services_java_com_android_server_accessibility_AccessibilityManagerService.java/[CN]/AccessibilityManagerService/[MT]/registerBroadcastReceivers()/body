{
  PackageMonitor monitor=new PackageMonitor(){
    @Override public void onSomePackagesChanged(){
synchronized (mLock) {
        if (getChangingUserId() != mCurrentUserId) {
          return;
        }
        if (mUiAutomationService == null) {
          UserState userState=getCurrentUserStateLocked();
          populateInstalledAccessibilityServiceLocked(userState);
          manageServicesLocked(userState);
        }
      }
    }
    @Override public void onPackageRemoved(    String packageName,    int uid){
synchronized (mLock) {
        final int userId=getChangingUserId();
        if (userId != mCurrentUserId) {
          return;
        }
        UserState state=getUserStateLocked(userId);
        Iterator<ComponentName> it=state.mEnabledServices.iterator();
        while (it.hasNext()) {
          ComponentName comp=it.next();
          String compPkg=comp.getPackageName();
          if (compPkg.equals(packageName)) {
            it.remove();
            persistComponentNamesToSettingLocked(Settings.Secure.ENABLED_ACCESSIBILITY_SERVICES,state.mEnabledServices,userId);
            state.mTouchExplorationGrantedServices.remove(comp);
            persistComponentNamesToSettingLocked(Settings.Secure.TOUCH_EXPLORATION_GRANTED_ACCESSIBILITY_SERVICES,state.mEnabledServices,userId);
            return;
          }
        }
      }
    }
    @Override public boolean onHandleForceStop(    Intent intent,    String[] packages,    int uid,    boolean doit){
synchronized (mLock) {
        final int userId=getChangingUserId();
        if (userId != mCurrentUserId) {
          return false;
        }
        UserState state=getUserStateLocked(userId);
        Iterator<ComponentName> it=state.mEnabledServices.iterator();
        while (it.hasNext()) {
          ComponentName comp=it.next();
          String compPkg=comp.getPackageName();
          for (          String pkg : packages) {
            if (compPkg.equals(pkg)) {
              if (!doit) {
                return true;
              }
              it.remove();
              persistComponentNamesToSettingLocked(Settings.Secure.ENABLED_ACCESSIBILITY_SERVICES,state.mEnabledServices,userId);
            }
          }
        }
        return false;
      }
    }
  }
;
  monitor.register(mContext,null,UserHandle.ALL,true);
  IntentFilter intentFilter=new IntentFilter();
  intentFilter.addAction(Intent.ACTION_USER_SWITCHED);
  intentFilter.addAction(Intent.ACTION_USER_REMOVED);
  intentFilter.addAction(Intent.ACTION_USER_PRESENT);
  mContext.registerReceiverAsUser(new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      String action=intent.getAction();
      if (Intent.ACTION_USER_SWITCHED.equals(action)) {
        switchUser(intent.getIntExtra(Intent.EXTRA_USER_HANDLE,0));
      }
 else       if (Intent.ACTION_USER_REMOVED.equals(action)) {
        removeUser(intent.getIntExtra(Intent.EXTRA_USER_HANDLE,0));
      }
 else       if (Intent.ACTION_USER_PRESENT.equals(action)) {
        restoreStateFromMementoIfNeeded();
      }
    }
  }
,UserHandle.ALL,intentFilter,null,null);
}
