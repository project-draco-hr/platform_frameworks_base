{
  final ContentResolver cr=mContext.getContentResolver();
  final int userId=userState.mUserId;
  float[] colorMatrix=new float[16];
  float[] outputMatrix=new float[16];
  boolean hasColorTransform=false;
  Matrix.setIdentityM(colorMatrix,0);
  final boolean inversionEnabled=Settings.Secure.getIntForUser(cr,Settings.Secure.ACCESSIBILITY_DISPLAY_INVERSION_ENABLED,0,userId) == 1;
  if (inversionEnabled) {
    final int inversionMode=Settings.Secure.getIntForUser(cr,Settings.Secure.ACCESSIBILITY_DISPLAY_INVERSION,DEFAULT_DISPLAY_INVERSION,userId);
    final float[] inversionMatrix;
switch (inversionMode) {
case AccessibilityManager.INVERSION_HUE_ONLY:
      inversionMatrix=INVERSION_MATRIX_HUE_ONLY;
    break;
case AccessibilityManager.INVERSION_VALUE_ONLY:
  inversionMatrix=INVERSION_MATRIX_VALUE_ONLY;
break;
default :
inversionMatrix=INVERSION_MATRIX_STANDARD;
}
Matrix.multiplyMM(outputMatrix,0,colorMatrix,0,inversionMatrix,0);
final float[] temp=colorMatrix;
colorMatrix=outputMatrix;
outputMatrix=colorMatrix;
hasColorTransform=true;
}
final boolean contrastEnabled=Settings.Secure.getIntForUser(cr,Settings.Secure.ACCESSIBILITY_DISPLAY_CONTRAST_ENABLED,0,userId) == 1;
if (contrastEnabled) {
final float contrast=Settings.Secure.getFloatForUser(cr,Settings.Secure.ACCESSIBILITY_DISPLAY_CONTRAST,DEFAULT_DISPLAY_CONTRAST,userId);
final float brightness=Settings.Secure.getFloatForUser(cr,Settings.Secure.ACCESSIBILITY_DISPLAY_BRIGHTNESS,DEFAULT_DISPLAY_BRIGHTNESS,userId);
final float off=brightness * contrast - 0.5f * contrast + 0.5f;
final float[] contrastMatrix={contrast,0,0,0,0,contrast,0,0,0,0,contrast,0,off,off,off,1};
Matrix.multiplyMM(outputMatrix,0,colorMatrix,0,contrastMatrix,0);
final float[] temp=colorMatrix;
colorMatrix=outputMatrix;
outputMatrix=colorMatrix;
hasColorTransform=true;
}
final boolean daltonizerEnabled=Settings.Secure.getIntForUser(cr,Settings.Secure.ACCESSIBILITY_DISPLAY_DALTONIZER_ENABLED,0,userId) != 0;
if (daltonizerEnabled) {
final int daltonizerMode=Settings.Secure.getIntForUser(cr,Settings.Secure.ACCESSIBILITY_DISPLAY_DALTONIZER,DEFAULT_DISPLAY_DALTONIZER,userId);
if (daltonizerMode == AccessibilityManager.DALTONIZER_SIMULATE_MONOCHROMACY) {
Matrix.multiplyMM(outputMatrix,0,colorMatrix,0,GRAYSCALE_MATRIX,0);
final float[] temp=colorMatrix;
colorMatrix=outputMatrix;
outputMatrix=temp;
hasColorTransform=true;
nativeSetDaltonizerMode(AccessibilityManager.DALTONIZER_DISABLED);
}
 else {
nativeSetDaltonizerMode(daltonizerMode);
}
}
 else {
nativeSetDaltonizerMode(AccessibilityManager.DALTONIZER_DISABLED);
}
if (hasColorTransform) {
nativeSetColorTransform(colorMatrix);
}
 else {
nativeSetColorTransform(null);
}
}
