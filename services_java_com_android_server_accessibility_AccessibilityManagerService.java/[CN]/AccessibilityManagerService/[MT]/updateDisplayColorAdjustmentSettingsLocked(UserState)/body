{
  final ContentResolver cr=mContext.getContentResolver();
  final int userId=userState.mUserId;
  final float[] offsetVector=new float[3];
  float[] colorOffset=new float[3];
  float[] outputOffset=new float[3];
  float[] colorMatrix=new float[9];
  float[] outputMatrix=new float[9];
  boolean hasColorTransform=false;
  MatrixUtils.setIdentityM(colorMatrix,3,3);
  final boolean inversionEnabled=Settings.Secure.getIntForUser(cr,Settings.Secure.ACCESSIBILITY_DISPLAY_INVERSION_ENABLED,0,userId) == 1;
  if (inversionEnabled) {
    final int inversionMode=Settings.Secure.getIntForUser(cr,Settings.Secure.ACCESSIBILITY_DISPLAY_INVERSION,DEFAULT_DISPLAY_INVERSION,userId);
    final float[] inversionMatrix;
    final float inversionOffset;
switch (inversionMode) {
case AccessibilityManager.INVERSION_HUE_ONLY:
      inversionMatrix=INVERSION_MATRIX_HUE_ONLY;
    inversionOffset=INVERSION_OFFSET_HUE_ONLY;
  break;
case AccessibilityManager.INVERSION_VALUE_ONLY:
inversionMatrix=INVERSION_MATRIX_VALUE_ONLY;
inversionOffset=INVERSION_OFFSET_VALUE_ONLY;
break;
default :
inversionMatrix=INVERSION_MATRIX_STANDARD;
inversionOffset=INVERSION_OFFSET_STANDARD;
}
Arrays.fill(offsetVector,inversionOffset);
MatrixUtils.multiplyMM(outputMatrix,colorMatrix,3,3,inversionMatrix,3);
MatrixUtils.multiplyMM(outputOffset,colorOffset,1,3,inversionMatrix,3);
MatrixUtils.addMM(colorOffset,outputOffset,1,3,offsetVector);
final float[] temp=colorMatrix;
colorMatrix=outputMatrix;
outputMatrix=temp;
hasColorTransform=true;
}
final boolean contrastEnabled=Settings.Secure.getIntForUser(cr,Settings.Secure.ACCESSIBILITY_DISPLAY_CONTRAST_ENABLED,0,userId) == 1;
if (contrastEnabled) {
final float contrast=Settings.Secure.getFloatForUser(cr,Settings.Secure.ACCESSIBILITY_DISPLAY_CONTRAST,DEFAULT_DISPLAY_CONTRAST,userId);
final float brightness=Settings.Secure.getFloatForUser(cr,Settings.Secure.ACCESSIBILITY_DISPLAY_BRIGHTNESS,DEFAULT_DISPLAY_BRIGHTNESS,userId);
final float offset=brightness * contrast - 0.5f * contrast + 0.5f;
Arrays.fill(offsetVector,offset);
MatrixUtils.multiplyMS(outputMatrix,colorMatrix,contrast);
MatrixUtils.multiplyMS(outputOffset,colorOffset,contrast);
MatrixUtils.addMM(colorOffset,outputOffset,1,3,offsetVector);
final float[] temp=colorMatrix;
colorMatrix=outputMatrix;
outputMatrix=temp;
hasColorTransform=true;
}
final boolean daltonizerEnabled=Settings.Secure.getIntForUser(cr,Settings.Secure.ACCESSIBILITY_DISPLAY_DALTONIZER_ENABLED,0,userId) != 0;
if (daltonizerEnabled) {
final int daltonizerMode=Settings.Secure.getIntForUser(cr,Settings.Secure.ACCESSIBILITY_DISPLAY_DALTONIZER,DEFAULT_DISPLAY_DALTONIZER,userId);
if (daltonizerMode == AccessibilityManager.DALTONIZER_SIMULATE_MONOCHROMACY) {
MatrixUtils.multiplyMM(outputMatrix,colorMatrix,3,3,GRAYSCALE_MATRIX,3);
MatrixUtils.multiplyMM(outputOffset,colorOffset,1,3,GRAYSCALE_MATRIX,3);
final float[] temp=colorMatrix;
colorMatrix=outputMatrix;
outputMatrix=temp;
final float[] tempVec=colorOffset;
colorOffset=outputOffset;
outputOffset=temp;
hasColorTransform=true;
nativeSetDaltonizerMode(AccessibilityManager.DALTONIZER_DISABLED);
}
 else {
nativeSetDaltonizerMode(daltonizerMode);
}
}
 else {
nativeSetDaltonizerMode(AccessibilityManager.DALTONIZER_DISABLED);
}
if (hasColorTransform) {
nativeSetColorTransform(colorMatrix,colorOffset);
}
 else {
nativeSetColorTransform(null,null);
}
}
