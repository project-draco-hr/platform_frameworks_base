{
  LongArray changedWindows=mTempLongArray;
  changedWindows.clear();
  final int windowCount=windows.size();
  for (int i=0; i < windowCount; i++) {
    AccessibilityWindowInfo newState=windows.get(i);
    final int windowId=newState.getId();
    AccessibilityWindowInfo oldState=mIntrospectedWindows.get(windowId);
    if (oldState != null && oldState.changed(newState)) {
      oldState.recycle();
      mIntrospectedWindows.put(newState.getId(),AccessibilityWindowInfo.obtain(newState));
      changedWindows.add(windowId);
    }
  }
  final int introspectedWindowCount=mIntrospectedWindows.size();
  for (int i=introspectedWindowCount - 1; i >= 0; i--) {
    AccessibilityWindowInfo window=mIntrospectedWindows.valueAt(i);
    if (changedWindows.indexOf(window.getId()) < 0 && !windows.contains(window)) {
      changedWindows.add(window.getId());
      mIntrospectedWindows.removeAt(i);
      window.recycle();
    }
  }
  int[] windowIds=null;
  final int changedWindowCount=changedWindows.size();
  if (changedWindowCount > 0) {
    windowIds=new int[changedWindowCount];
    for (int i=0; i < changedWindowCount; i++) {
      windowIds[i]=(int)changedWindows.get(i);
    }
    changedWindows.clear();
  }
  mInvocationHandler.obtainMessage(InvocationHandler.MSG_ON_WINDOWS_CHANGED,windowIds).sendToTarget();
}
