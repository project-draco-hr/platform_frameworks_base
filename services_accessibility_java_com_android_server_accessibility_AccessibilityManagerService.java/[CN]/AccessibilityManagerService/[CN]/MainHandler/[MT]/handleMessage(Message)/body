{
  final int type=msg.what;
switch (type) {
case MSG_SEND_ACCESSIBILITY_EVENT_TO_INPUT_FILTER:
{
      AccessibilityEvent event=(AccessibilityEvent)msg.obj;
synchronized (mLock) {
        if (mHasInputFilter && mInputFilter != null) {
          mInputFilter.notifyAccessibilityEvent(event);
        }
      }
      event.recycle();
    }
  break;
case MSG_SEND_KEY_EVENT_TO_INPUT_FILTER:
{
  KeyEvent event=(KeyEvent)msg.obj;
  final int policyFlags=msg.arg1;
synchronized (mLock) {
    if (mHasInputFilter && mInputFilter != null) {
      mInputFilter.sendInputEvent(event,policyFlags);
    }
  }
  event.recycle();
}
break;
case MSG_SEND_STATE_TO_CLIENTS:
{
final int clientState=msg.arg1;
final int userId=msg.arg2;
sendStateToClients(clientState,mGlobalClients);
sendStateToClientsForUser(clientState,userId);
}
break;
case MSG_SEND_CLEARED_STATE_TO_CLIENTS_FOR_USER:
{
final int userId=msg.arg1;
sendStateToClientsForUser(0,userId);
}
break;
case MSG_ANNOUNCE_NEW_USER_IF_NEEDED:
{
announceNewUserIfNeeded();
}
break;
case MSG_UPDATE_INPUT_FILTER:
{
UserState userState=(UserState)msg.obj;
updateInputFilter(userState);
}
break;
case MSG_SHOW_ENABLED_TOUCH_EXPLORATION_DIALOG:
{
Service service=(Service)msg.obj;
showEnableTouchExplorationDialog(service);
}
break;
case MSG_CLEAR_ACCESSIBILITY_FOCUS:
{
final int windowId=msg.arg1;
InteractionBridge bridge;
synchronized (mLock) {
bridge=getInteractionBridgeLocked();
}
bridge.clearAccessibilityFocusNotLocked(windowId);
}
break;
}
}
