{
  final int oldWindowCount=mWindows.size();
  for (int i=oldWindowCount - 1; i >= 0; i--) {
    mWindows.remove(i).recycle();
  }
  mFocusedWindowId=INVALID_WINDOW_ID;
  if (!mTouchInteractionInProgress) {
    mActiveWindowId=INVALID_WINDOW_ID;
  }
  boolean activeWindowGone=true;
  final int windowCount=windows.size();
  if (windowCount > 0) {
    for (int i=0; i < windowCount; i++) {
      AccessibilityWindowInfo window=windows.get(i);
      final int windowId=window.getId();
      if (window.isFocused()) {
        mFocusedWindowId=windowId;
        if (!mTouchInteractionInProgress) {
          mActiveWindowId=windowId;
          window.setActive(true);
        }
 else         if (windowId == mActiveWindowId) {
          activeWindowGone=false;
        }
      }
      mWindows.add(window);
    }
    if (mTouchInteractionInProgress && activeWindowGone) {
      mActiveWindowId=mFocusedWindowId;
    }
    for (int i=0; i < windowCount; i++) {
      AccessibilityWindowInfo window=mWindows.get(i);
      if (window.getId() == mActiveWindowId) {
        window.setActive(true);
      }
    }
  }
  notifyWindowsChanged();
  if (mShowingFocusedWindowEvent != null) {
    final int windowId=mShowingFocusedWindowEvent.getWindowId();
    AccessibilityWindowInfo window=findWindowById(windowId);
    if (window != null && window.isFocused()) {
      sendAccessibilityEvent(mShowingFocusedWindowEvent,mCurrentUserId);
    }
    mShowingFocusedWindowEvent=null;
  }
}
