{
  mSecurityPolicy.enforceCallingPermission(Manifest.permission.RETRIEVE_WINDOW_CONTENT,FUNCTION_REGISTER_UI_TEST_AUTOMATION_SERVICE);
  accessibilityServiceInfo.setComponentName(sFakeAccessibilityServiceComponentName);
synchronized (mLock) {
    UserState userState=getCurrentUserStateLocked();
    if (userState.mUiAutomationService != null) {
      throw new IllegalStateException("UiAutomationService " + serviceClient + "already registered!");
    }
    try {
      owner.linkToDeath(userState.mUiAutomationSerivceOnwerDeathRecipient,0);
    }
 catch (    RemoteException re) {
      Slog.e(LOG_TAG,"Couldn't register for the death of a" + " UiTestAutomationService!",re);
      return;
    }
    userState.mUiAutomationServiceOwner=owner;
    userState.mUiAutomationServiceClient=serviceClient;
    userState.mUiAutomationFlags=flags;
    userState.mIsAccessibilityEnabled=true;
    userState.mInstalledServices.add(accessibilityServiceInfo);
    if (userState.isUiAutomationSuppressingOtherServices()) {
      userState.mIsTouchExplorationEnabled=false;
      userState.mIsEnhancedWebAccessibilityEnabled=false;
      userState.mIsDisplayMagnificationEnabled=false;
      userState.mIsAutoclickEnabled=false;
      userState.mEnabledServices.clear();
    }
    userState.mEnabledServices.add(sFakeAccessibilityServiceComponentName);
    userState.mTouchExplorationGrantedServices.add(sFakeAccessibilityServiceComponentName);
    onUserStateChangedLocked(userState);
  }
}
