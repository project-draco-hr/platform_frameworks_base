{
synchronized (mLock) {
    String label=service.mResolveInfo.loadLabel(mContext.getPackageManager()).toString();
    final UserState state=getCurrentUserStateLocked();
    if (state.mIsTouchExplorationEnabled) {
      return;
    }
    if (mEnableTouchExplorationDialog != null && mEnableTouchExplorationDialog.isShowing()) {
      return;
    }
    mEnableTouchExplorationDialog=new AlertDialog.Builder(mContext).setIconAttribute(android.R.attr.alertDialogIcon).setPositiveButton(android.R.string.ok,new OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        state.mTouchExplorationGrantedServices.add(service.mComponentName);
        persistComponentNamesToSettingLocked(Settings.Secure.TOUCH_EXPLORATION_GRANTED_ACCESSIBILITY_SERVICES,state.mTouchExplorationGrantedServices,state.mUserId);
        UserState userState=getUserStateLocked(service.mUserId);
        userState.mIsTouchExplorationEnabled=true;
        Settings.Secure.putIntForUser(mContext.getContentResolver(),Settings.Secure.TOUCH_EXPLORATION_ENABLED,1,service.mUserId);
        onUserStateChangedLocked(userState);
      }
    }
).setNegativeButton(android.R.string.cancel,new OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        dialog.dismiss();
      }
    }
).setTitle(R.string.enable_explore_by_touch_warning_title).setMessage(mContext.getString(R.string.enable_explore_by_touch_warning_message,label)).create();
    mEnableTouchExplorationDialog.getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ALERT);
    mEnableTouchExplorationDialog.getWindow().getAttributes().privateFlags|=WindowManager.LayoutParams.PRIVATE_FLAG_SHOW_FOR_ALL_USERS;
    mEnableTouchExplorationDialog.setCanceledOnTouchOutside(true);
    mEnableTouchExplorationDialog.show();
  }
}
