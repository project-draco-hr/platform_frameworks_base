{
  CameraMetadata metadata=new CameraMetadata();
  assertTrue(metadata.isEmpty());
  CaptureRequest request=new CaptureRequest();
  assertTrue(request.isEmpty());
  int status=mCameraUser.createDefaultRequest(TEMPLATE_PREVIEW,metadata);
  assertEquals(CameraBinderTestUtils.NO_ERROR,status);
  assertFalse(metadata.isEmpty());
  request.swap(metadata);
  assertFalse(request.isEmpty());
  assertTrue(metadata.isEmpty());
  SurfaceTexture surfaceTexture=new SurfaceTexture(0);
  surfaceTexture.setDefaultBufferSize(640,480);
  Surface surface=new Surface(surfaceTexture);
  int streamId=mCameraUser.createStream(10,20,30,surface);
  assertEquals(0,streamId);
  request.addTarget(surface);
  int requestId1;
  requestId1=mCameraUser.submitRequest(request,false);
  assertTrue("Request IDs should be non-negative",requestId1 >= 0);
  int requestIdStreaming=mCameraUser.submitRequest(request,true);
  assertTrue("Request IDs should be non-negative",requestIdStreaming >= 0);
  assertNotSame("Request IDs should be unique for multiple requests",requestId1,requestIdStreaming);
  status=mCameraUser.cancelRequest(-1);
  assertEquals("Invalid request IDs should not be cancellable",CameraBinderTestUtils.BAD_VALUE,status);
  status=mCameraUser.cancelRequest(requestId1);
  assertEquals("Non-streaming request IDs should not be cancellable",CameraBinderTestUtils.BAD_VALUE,status);
  status=mCameraUser.cancelRequest(requestIdStreaming);
  assertEquals("Streaming request IDs should be cancellable",CameraBinderTestUtils.NO_ERROR,status);
  surface.release();
  request.close();
  metadata.close();
}
