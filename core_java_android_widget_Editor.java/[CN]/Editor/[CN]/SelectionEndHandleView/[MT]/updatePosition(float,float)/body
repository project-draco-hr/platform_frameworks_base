{
  final int trueOffset=mTextView.getOffsetForPosition(x,y);
  final int currLine=mTextView.getLineAtCoordinate(y);
  int offset=trueOffset;
  boolean positionCursor=false;
  int end=getWordEnd(offset);
  int start=getWordStart(offset);
  if (offset > mPreviousOffset) {
    if (!mInWord || currLine > mPrevLine) {
      int midPoint=Math.min((end - start) / 2,2);
      if (offset >= start + midPoint || currLine > mPrevLine) {
        offset=end;
      }
 else {
        offset=mPreviousOffset;
      }
    }
    final Layout layout=mTextView.getLayout();
    if (layout != null && offset > trueOffset) {
      final float adjustedX=layout.getPrimaryHorizontal(offset);
      mTouchWordDelta=adjustedX - mTextView.convertToLocalHorizontalCoordinate(x);
    }
 else {
      mTouchWordDelta=0.0f;
    }
    positionCursor=true;
  }
 else {
    final int adjustedOffset=mTextView.getOffsetAtCoordinate(currLine,x + mTouchWordDelta);
    if (adjustedOffset < mPreviousOffset || currLine < mPrevLine) {
      if (currLine < mPrevLine) {
        offset=end;
        final Layout layout=mTextView.getLayout();
        if (layout != null && offset > trueOffset) {
          final float adjustedX=layout.getPrimaryHorizontal(offset);
          mTouchWordDelta=adjustedX - mTextView.convertToLocalHorizontalCoordinate(x);
        }
 else {
          mTouchWordDelta=0.0f;
        }
      }
 else {
        offset=adjustedOffset;
      }
      positionCursor=true;
    }
  }
  if (positionCursor) {
    final int selectionStart=mTextView.getSelectionStart();
    if (offset <= selectionStart) {
      int alteredOffset=mTextView.getOffsetAtCoordinate(mPrevLine,x);
      int length=mTextView.getText().length();
      if (alteredOffset <= selectionStart) {
        offset=getNextCursorOffset(selectionStart,true);
      }
 else {
        offset=Math.min(alteredOffset,length);
      }
      mTouchWordDelta=0.0f;
    }
    mInWord=!getWordIteratorWithText().isBoundary(offset);
    positionAtCursorOffset(offset,false);
  }
}
