{
  final Spannable spannable=(Spannable)mTextView.getText();
  final SuggestionSpan[] suggestionSpans=getSortedSuggestionSpans();
  final int nbSpans=suggestionSpans.length;
  if (nbSpans == 0)   return 0;
  int numberOfSuggestions=0;
  for (int spanIndex=0; spanIndex < nbSpans; spanIndex++) {
    final SuggestionSpan suggestionSpan=suggestionSpans[spanIndex];
    final int spanStart=spannable.getSpanStart(suggestionSpan);
    final int spanEnd=spannable.getSpanEnd(suggestionSpan);
    final String[] suggestions=suggestionSpan.getSuggestions();
    final int nbSuggestions=suggestions.length;
    for (int suggestionIndex=0; suggestionIndex < nbSuggestions; suggestionIndex++) {
      final String suggestion=suggestions[suggestionIndex];
      boolean suggestionIsDuplicate=false;
      for (int i=0; i < numberOfSuggestions; i++) {
        if (suggestionInfos[i].mText.toString().equals(suggestion)) {
          final SuggestionSpan otherSuggestionSpan=suggestionInfos[i].mSuggestionSpan;
          final int otherSpanStart=spannable.getSpanStart(otherSuggestionSpan);
          final int otherSpanEnd=spannable.getSpanEnd(otherSuggestionSpan);
          if (spanStart == otherSpanStart && spanEnd == otherSpanEnd) {
            suggestionIsDuplicate=true;
            break;
          }
        }
      }
      if (suggestionIsDuplicate) {
        continue;
      }
      SuggestionInfo suggestionInfo=suggestionInfos[numberOfSuggestions];
      suggestionInfo.mSuggestionSpan=suggestionSpan;
      suggestionInfo.mSuggestionIndex=suggestionIndex;
      suggestionInfo.mSuggestionStart=0;
      suggestionInfo.mSuggestionEnd=suggestion.length();
      suggestionInfo.mText.replace(0,suggestionInfo.mText.length(),suggestion);
      numberOfSuggestions++;
      if (numberOfSuggestions >= suggestionInfos.length) {
        return numberOfSuggestions;
      }
    }
  }
  return numberOfSuggestions;
}
