{
  Spannable spannable=(Spannable)mTextView.getText();
  SuggestionSpan[] suggestionSpans=getSuggestionSpans();
  final int nbSpans=suggestionSpans.length;
  if (nbSpans == 0)   return false;
  mNumberOfSuggestions=0;
  int spanUnionStart=mTextView.getText().length();
  int spanUnionEnd=0;
  mMisspelledSpan=null;
  int underlineColor=0;
  for (int spanIndex=0; spanIndex < nbSpans; spanIndex++) {
    SuggestionSpan suggestionSpan=suggestionSpans[spanIndex];
    final int spanStart=spannable.getSpanStart(suggestionSpan);
    final int spanEnd=spannable.getSpanEnd(suggestionSpan);
    spanUnionStart=Math.min(spanStart,spanUnionStart);
    spanUnionEnd=Math.max(spanEnd,spanUnionEnd);
    if ((suggestionSpan.getFlags() & SuggestionSpan.FLAG_MISSPELLED) != 0) {
      mMisspelledSpan=suggestionSpan;
    }
    if (spanIndex == 0)     underlineColor=suggestionSpan.getUnderlineColor();
    String[] suggestions=suggestionSpan.getSuggestions();
    int nbSuggestions=suggestions.length;
    for (int suggestionIndex=0; suggestionIndex < nbSuggestions; suggestionIndex++) {
      String suggestion=suggestions[suggestionIndex];
      boolean suggestionIsDuplicate=false;
      for (int i=0; i < mNumberOfSuggestions; i++) {
        if (mSuggestionInfos[i].text.toString().equals(suggestion)) {
          SuggestionSpan otherSuggestionSpan=mSuggestionInfos[i].suggestionSpan;
          final int otherSpanStart=spannable.getSpanStart(otherSuggestionSpan);
          final int otherSpanEnd=spannable.getSpanEnd(otherSuggestionSpan);
          if (spanStart == otherSpanStart && spanEnd == otherSpanEnd) {
            suggestionIsDuplicate=true;
            break;
          }
        }
      }
      if (!suggestionIsDuplicate) {
        SuggestionInfo suggestionInfo=mSuggestionInfos[mNumberOfSuggestions];
        suggestionInfo.suggestionSpan=suggestionSpan;
        suggestionInfo.suggestionIndex=suggestionIndex;
        suggestionInfo.text.replace(0,suggestionInfo.text.length(),suggestion);
        mNumberOfSuggestions++;
        if (mNumberOfSuggestions == MAX_NUMBER_SUGGESTIONS) {
          spanIndex=nbSpans;
          break;
        }
      }
    }
  }
  for (int i=0; i < mNumberOfSuggestions; i++) {
    highlightTextDifferences(mSuggestionInfos[i],spanUnionStart,spanUnionEnd);
  }
  int addToDictionaryButtonVisibility=View.GONE;
  if (mMisspelledSpan != null) {
    final int misspelledStart=spannable.getSpanStart(mMisspelledSpan);
    final int misspelledEnd=spannable.getSpanEnd(mMisspelledSpan);
    if (misspelledStart >= 0 && misspelledEnd > misspelledStart) {
      addToDictionaryButtonVisibility=View.VISIBLE;
    }
  }
  mAddToDictionaryButton.setVisibility(addToDictionaryButtonVisibility);
  if (mSuggestionRangeSpan == null)   mSuggestionRangeSpan=new SuggestionRangeSpan();
  if (underlineColor == 0) {
    mSuggestionRangeSpan.setBackgroundColor(mTextView.mHighlightColor);
  }
 else {
    final float BACKGROUND_TRANSPARENCY=0.4f;
    final int newAlpha=(int)(Color.alpha(underlineColor) * BACKGROUND_TRANSPARENCY);
    mSuggestionRangeSpan.setBackgroundColor((underlineColor & 0x00FFFFFF) + (newAlpha << 24));
  }
  spannable.setSpan(mSuggestionRangeSpan,spanUnionStart,spanUnionEnd,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  mSuggestionsAdapter.notifyDataSetChanged();
  return true;
}
