{
  final InputMethodState ims=mInputMethodState;
  if (ims == null || ims.mBatchEditNesting > 0) {
    return;
  }
  final InputMethodManager imm=InputMethodManager.peekInstance();
  if (null == imm) {
    return;
  }
  if (!imm.isActive(mTextView)) {
    return;
  }
  if (!imm.isCursorAnchorInfoEnabled()) {
    return;
  }
  Layout layout=mTextView.getLayout();
  if (layout == null) {
    return;
  }
  final CursorAnchorInfo.Builder builder=mSelectionInfoBuilder;
  builder.reset();
  final int selectionStart=mTextView.getSelectionStart();
  builder.setSelectionRange(selectionStart,mTextView.getSelectionEnd());
  mViewToScreenMatrix.set(mTextView.getMatrix());
  mTextView.getLocationOnScreen(mTmpIntOffset);
  mViewToScreenMatrix.postTranslate(mTmpIntOffset[0],mTmpIntOffset[1]);
  builder.setMatrix(mViewToScreenMatrix);
  final float viewportToContentHorizontalOffset=mTextView.viewportToContentHorizontalOffset();
  final float viewportToContentVerticalOffset=mTextView.viewportToContentVerticalOffset();
  final CharSequence text=mTextView.getText();
  if (text instanceof Spannable) {
    final Spannable sp=(Spannable)text;
    int composingTextStart=EditableInputConnection.getComposingSpanStart(sp);
    int composingTextEnd=EditableInputConnection.getComposingSpanEnd(sp);
    if (composingTextEnd < composingTextStart) {
      final int temp=composingTextEnd;
      composingTextEnd=composingTextStart;
      composingTextStart=temp;
    }
    final boolean hasComposingText=(0 <= composingTextStart) && (composingTextStart < composingTextEnd);
    if (hasComposingText) {
      final CharSequence composingText=text.subSequence(composingTextStart,composingTextEnd);
      builder.setComposingText(composingTextStart,composingText);
    }
    for (int offset=composingTextStart; offset < composingTextEnd; offset++) {
      if (offset < 0) {
        continue;
      }
      final boolean isRtl=layout.isRtlCharAt(offset);
      final int line=layout.getLineForOffset(offset);
      final int nextCharIndex=offset + 1;
      final float localLeadingEdgeX=layout.getPrimaryHorizontal(offset);
      final float localTrailingEdgeX;
      if (nextCharIndex != layout.getLineEnd(line)) {
        localTrailingEdgeX=layout.getPrimaryHorizontal(nextCharIndex);
      }
 else       if (isRtl) {
        localTrailingEdgeX=layout.getLineLeft(line);
      }
 else {
        localTrailingEdgeX=layout.getLineRight(line);
      }
      final float leadingEdgeX=localLeadingEdgeX + viewportToContentHorizontalOffset;
      final float trailingEdgeX=localTrailingEdgeX + viewportToContentHorizontalOffset;
      final float top=layout.getLineTop(line) + viewportToContentVerticalOffset;
      final float bottom=layout.getLineBottom(line) + viewportToContentVerticalOffset;
      final boolean isLeadingEdgeTopVisible=isPositionVisible(leadingEdgeX,top);
      final boolean isTrailingEdgeBottomVisible=isPositionVisible(trailingEdgeX,bottom);
      int characterRectFlags=0;
      if (isLeadingEdgeTopVisible || isTrailingEdgeBottomVisible) {
        characterRectFlags|=CursorAnchorInfo.FLAG_HAS_VISIBLE_REGION;
      }
      if (!isLeadingEdgeTopVisible || !isTrailingEdgeBottomVisible) {
        characterRectFlags|=CursorAnchorInfo.FLAG_HAS_INVISIBLE_REGION;
      }
      builder.addCharacterRect(offset,leadingEdgeX,top,trailingEdgeX,bottom,characterRectFlags);
    }
  }
  if (0 <= selectionStart) {
    final int offset=selectionStart;
    final int line=layout.getLineForOffset(offset);
    final float insertionMarkerX=layout.getPrimaryHorizontal(offset) + viewportToContentHorizontalOffset;
    final float insertionMarkerTop=layout.getLineTop(line) + viewportToContentVerticalOffset;
    final float insertionMarkerBaseline=layout.getLineBaseline(line) + viewportToContentVerticalOffset;
    final float insertionMarkerBottom=layout.getLineBottom(line) + viewportToContentVerticalOffset;
    final boolean isTopVisible=isPositionVisible(insertionMarkerX,insertionMarkerTop);
    final boolean isBottomVisible=isPositionVisible(insertionMarkerX,insertionMarkerBottom);
    int insertionMarkerFlags=0;
    if (isTopVisible || isBottomVisible) {
      insertionMarkerFlags|=CursorAnchorInfo.FLAG_HAS_VISIBLE_REGION;
    }
    if (!isTopVisible || !isBottomVisible) {
      insertionMarkerFlags|=CursorAnchorInfo.FLAG_HAS_INVISIBLE_REGION;
    }
    builder.setInsertionMarkerLocation(insertionMarkerX,insertionMarkerTop,insertionMarkerBaseline,insertionMarkerBottom,insertionMarkerFlags);
  }
  imm.updateCursorAnchorInfo(mTextView,builder.build());
}
