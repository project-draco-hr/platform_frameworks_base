{
  if (DEBUG_UNDO) {
    Log.d(TAG,"filter: source=" + source + " ("+ start+ "-"+ end+ ") "+ "dest="+ dest+ " ("+ dstart+ "-"+ dend+ ")");
  }
  if (!canUndoEdit(source,start,end,dest,dstart,dend)) {
    return null;
  }
  final boolean forceMerge=!mFirstFilterPass;
  mFirstFilterPass=false;
  EditOperation edit=new EditOperation(mEditor,forceMerge,source,start,end,dest,dstart,dend);
  final UndoManager um=mEditor.mUndoManager;
  um.beginUpdate("Edit text");
  EditOperation lastEdit=um.getLastOperation(EditOperation.class,mEditor.mUndoOwner,UndoManager.MERGE_MODE_UNIQUE);
  if (lastEdit == null) {
    if (DEBUG_UNDO)     Log.d(TAG,"filter: adding first op " + edit);
    um.addOperation(edit,UndoManager.MERGE_MODE_NONE);
  }
 else   if (!mIsUserEdit) {
    if (DEBUG_UNDO)     Log.d(TAG,"non-user edit, new op " + edit);
    um.commitState(mEditor.mUndoOwner);
    um.addOperation(edit,UndoManager.MERGE_MODE_NONE);
  }
 else   if (lastEdit.mergeWith(edit)) {
    if (DEBUG_UNDO)     Log.d(TAG,"filter: merge succeeded, created " + lastEdit);
  }
 else {
    if (DEBUG_UNDO)     Log.d(TAG,"filter: merge failed, adding " + edit);
    um.commitState(mEditor.mUndoOwner);
    um.addOperation(edit,UndoManager.MERGE_MODE_NONE);
  }
  um.endUpdate();
  return null;
}
