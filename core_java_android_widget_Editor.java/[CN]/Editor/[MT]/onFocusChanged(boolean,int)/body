{
  mShowCursor=SystemClock.uptimeMillis();
  ensureEndedBatchEdit();
  if (focused) {
    int selStart=mTextView.getSelectionStart();
    int selEnd=mTextView.getSelectionEnd();
    final boolean isFocusHighlighted=mSelectAllOnFocus && selStart == 0 && selEnd == mTextView.getText().length();
    mCreatedWithASelection=mFrozenWithFocus && mTextView.hasSelection() && !isFocusHighlighted;
    if (!mFrozenWithFocus || (selStart < 0 || selEnd < 0)) {
      final int lastTapPosition=getLastTapPosition();
      if (lastTapPosition >= 0) {
        Selection.setSelection((Spannable)mTextView.getText(),lastTapPosition);
      }
      MovementMethod mMovement=mTextView.getMovementMethod();
      if (mMovement != null) {
        mMovement.onTakeFocus(mTextView,(Spannable)mTextView.getText(),direction);
      }
      if (((mTextView instanceof ExtractEditText) || mSelectionMoved) && selStart >= 0 && selEnd >= 0) {
        Selection.setSelection((Spannable)mTextView.getText(),selStart,selEnd);
      }
      if (mSelectAllOnFocus) {
        mTextView.selectAllText();
      }
      mTouchFocusSelected=true;
    }
    mFrozenWithFocus=false;
    mSelectionMoved=false;
    if (mError != null) {
      showError();
    }
    makeBlink();
  }
 else {
    if (mError != null) {
      hideError();
    }
    mTextView.onEndBatchEdit();
    if (mTextView instanceof ExtractEditText) {
      final int selStart=mTextView.getSelectionStart();
      final int selEnd=mTextView.getSelectionEnd();
      hideControllers();
      Selection.setSelection((Spannable)mTextView.getText(),selStart,selEnd);
    }
 else {
      if (mTemporaryDetach)       mPreserveDetachedSelection=true;
      hideControllers();
      if (mTemporaryDetach)       mPreserveDetachedSelection=false;
      downgradeEasyCorrectionSpans();
    }
    if (mSelectionModifierCursorController != null) {
      mSelectionModifierCursorController.resetTouchOffsets();
    }
  }
}
