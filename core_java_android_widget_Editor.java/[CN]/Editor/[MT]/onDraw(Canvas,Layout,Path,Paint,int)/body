{
  final int selectionStart=mTextView.getSelectionStart();
  final int selectionEnd=mTextView.getSelectionEnd();
  final InputMethodState ims=mInputMethodState;
  if (ims != null && ims.mBatchEditNesting == 0) {
    InputMethodManager imm=InputMethodManager.peekInstance();
    if (imm != null) {
      if (imm.isActive(mTextView)) {
        boolean reported=false;
        if (ims.mContentChanged || ims.mSelectionModeChanged) {
          reported=reportExtractedText();
        }
        if (!reported && highlight != null) {
          int candStart=-1;
          int candEnd=-1;
          if (mTextView.getText() instanceof Spannable) {
            Spannable sp=(Spannable)mTextView.getText();
            candStart=EditableInputConnection.getComposingSpanStart(sp);
            candEnd=EditableInputConnection.getComposingSpanEnd(sp);
          }
          imm.updateSelection(mTextView,selectionStart,selectionEnd,candStart,candEnd);
        }
      }
      if (imm.isWatchingCursor(mTextView) && highlight != null) {
        highlight.computeBounds(ims.mTmpRectF,true);
        ims.mTmpOffset[0]=ims.mTmpOffset[1]=0;
        canvas.getMatrix().mapPoints(ims.mTmpOffset);
        ims.mTmpRectF.offset(ims.mTmpOffset[0],ims.mTmpOffset[1]);
        ims.mTmpRectF.offset(0,cursorOffsetVertical);
        ims.mCursorRectInWindow.set((int)(ims.mTmpRectF.left + 0.5),(int)(ims.mTmpRectF.top + 0.5),(int)(ims.mTmpRectF.right + 0.5),(int)(ims.mTmpRectF.bottom + 0.5));
        imm.updateCursor(mTextView,ims.mCursorRectInWindow.left,ims.mCursorRectInWindow.top,ims.mCursorRectInWindow.right,ims.mCursorRectInWindow.bottom);
      }
    }
  }
  if (mCorrectionHighlighter != null) {
    mCorrectionHighlighter.draw(canvas,cursorOffsetVertical);
  }
  if (highlight != null && selectionStart == selectionEnd && mCursorCount > 0) {
    drawCursor(canvas,cursorOffsetVertical);
    highlight=null;
  }
  if (mTextView.canHaveDisplayList() && canvas.isHardwareAccelerated()) {
    drawHardwareAccelerated(canvas,layout,highlight,highlightPaint,cursorOffsetVertical);
  }
 else {
    layout.draw(canvas,highlight,highlightPaint,cursorOffsetVertical);
  }
}
