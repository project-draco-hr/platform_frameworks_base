{
  StringBuilder content=new StringBuilder("");
  final DragAndDropPermissions permissions=DragAndDropPermissions.obtain(event);
  if (permissions != null) {
    permissions.takeTransient();
  }
  try {
    ClipData clipData=event.getClipData();
    final int itemCount=clipData.getItemCount();
    for (int i=0; i < itemCount; i++) {
      Item item=clipData.getItemAt(i);
      content.append(item.coerceToStyledText(mTextView.getContext()));
    }
  }
  finally {
    if (permissions != null) {
      permissions.release();
    }
  }
  final int offset=mTextView.getOffsetForPosition(event.getX(),event.getY());
  Object localState=event.getLocalState();
  DragLocalState dragLocalState=null;
  if (localState instanceof DragLocalState) {
    dragLocalState=(DragLocalState)localState;
  }
  boolean dragDropIntoItself=dragLocalState != null && dragLocalState.sourceTextView == mTextView;
  if (dragDropIntoItself) {
    if (offset >= dragLocalState.start && offset < dragLocalState.end) {
      return;
    }
  }
  final int originalLength=mTextView.getText().length();
  int min=offset;
  int max=offset;
  Selection.setSelection((Spannable)mTextView.getText(),max);
  mTextView.replaceText_internal(min,max,content);
  if (dragDropIntoItself) {
    int dragSourceStart=dragLocalState.start;
    int dragSourceEnd=dragLocalState.end;
    if (max <= dragSourceStart) {
      final int shift=mTextView.getText().length() - originalLength;
      dragSourceStart+=shift;
      dragSourceEnd+=shift;
    }
    mUndoInputFilter.setForceMerge(true);
    try {
      mTextView.deleteText_internal(dragSourceStart,dragSourceEnd);
      final int prevCharIdx=Math.max(0,dragSourceStart - 1);
      final int nextCharIdx=Math.min(mTextView.getText().length(),dragSourceStart + 1);
      if (nextCharIdx > prevCharIdx + 1) {
        CharSequence t=mTextView.getTransformedText(prevCharIdx,nextCharIdx);
        if (Character.isSpaceChar(t.charAt(0)) && Character.isSpaceChar(t.charAt(1))) {
          mTextView.deleteText_internal(prevCharIdx,prevCharIdx + 1);
        }
      }
    }
  finally {
      mUndoInputFilter.setForceMerge(false);
    }
  }
}
