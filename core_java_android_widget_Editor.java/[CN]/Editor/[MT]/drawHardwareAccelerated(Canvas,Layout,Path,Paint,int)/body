{
  final long lineRange=layout.getLineRangeForDraw(canvas);
  int firstLine=TextUtils.unpackRangeStartFromLong(lineRange);
  int lastLine=TextUtils.unpackRangeEndFromLong(lineRange);
  if (lastLine < 0)   return;
  layout.drawBackground(canvas,highlight,highlightPaint,cursorOffsetVertical,firstLine,lastLine);
  if (layout instanceof DynamicLayout) {
    if (mTextDisplayLists == null) {
      mTextDisplayLists=new DisplayList[ArrayUtils.idealObjectArraySize(0)];
    }
    int layoutHeight=layout.getHeight();
    if (mLastLayoutHeight != layoutHeight) {
      invalidateTextDisplayList();
      mLastLayoutHeight=layoutHeight;
    }
    DynamicLayout dynamicLayout=(DynamicLayout)layout;
    int[] blockEndLines=dynamicLayout.getBlockEndLines();
    int[] blockIndices=dynamicLayout.getBlockIndices();
    final int numberOfBlocks=dynamicLayout.getNumberOfBlocks();
    int endOfPreviousBlock=-1;
    int searchStartIndex=0;
    for (int i=0; i < numberOfBlocks; i++) {
      int blockEndLine=blockEndLines[i];
      int blockIndex=blockIndices[i];
      final boolean blockIsInvalid=blockIndex == DynamicLayout.INVALID_BLOCK_INDEX;
      if (blockIsInvalid) {
        blockIndex=getAvailableDisplayListIndex(blockIndices,numberOfBlocks,searchStartIndex);
        blockIndices[i]=blockIndex;
        searchStartIndex=blockIndex + 1;
      }
      DisplayList blockDisplayList=mTextDisplayLists[blockIndex];
      if (blockDisplayList == null) {
        blockDisplayList=mTextDisplayLists[blockIndex]=mTextView.getHardwareRenderer().createDisplayList("Text " + blockIndex);
      }
 else {
        if (blockIsInvalid)         blockDisplayList.invalidate();
      }
      if (!blockDisplayList.isValid()) {
        final int blockBeginLine=endOfPreviousBlock + 1;
        final int top=layout.getLineTop(blockBeginLine);
        final int bottom=layout.getLineBottom(blockEndLine);
        int left=0;
        int right=mTextView.getWidth();
        if (mTextView.getHorizontallyScrolling()) {
          float min=Float.MAX_VALUE;
          float max=Float.MIN_VALUE;
          for (int line=blockBeginLine; line <= blockEndLine; line++) {
            min=Math.min(min,layout.getLineLeft(line));
            max=Math.max(max,layout.getLineRight(line));
          }
          left=(int)min;
          right=(int)(max + 0.5f);
        }
        final HardwareCanvas hardwareCanvas=blockDisplayList.start();
        try {
          hardwareCanvas.setViewport(right - left,bottom - top);
          hardwareCanvas.onPreDraw(null);
          hardwareCanvas.translate(-left,-top);
          layout.drawText(hardwareCanvas,blockBeginLine,blockEndLine);
        }
  finally {
          hardwareCanvas.onPostDraw();
          blockDisplayList.end();
          blockDisplayList.setLeftTopRightBottom(left,top,right,bottom);
          blockDisplayList.setClipChildren(false);
        }
      }
      ((HardwareCanvas)canvas).drawDisplayList(blockDisplayList,null,0);
      endOfPreviousBlock=blockEndLine;
    }
  }
 else {
    layout.drawText(canvas,firstLine,lastLine);
  }
}
