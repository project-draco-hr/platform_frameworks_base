{
  CharSequence text=mTextView.getText();
  if (!(text instanceof Spannable))   return false;
  final Spannable spannable=(Spannable)text;
  final int selectionStart=mTextView.getSelectionStart();
  final int selectionEnd=mTextView.getSelectionEnd();
  final SuggestionSpan[] suggestionSpans=spannable.getSpans(selectionStart,selectionEnd,SuggestionSpan.class);
  if (suggestionSpans.length == 0) {
    return false;
  }
  if (selectionStart == selectionEnd) {
    return true;
  }
  int minSpanStart=mTextView.getText().length();
  int maxSpanEnd=0;
  int unionOfSpansCoveringSelectionStartStart=mTextView.getText().length();
  int unionOfSpansCoveringSelectionStartEnd=0;
  for (int i=0; i < suggestionSpans.length; i++) {
    final int spanStart=spannable.getSpanStart(suggestionSpans[i]);
    final int spanEnd=spannable.getSpanEnd(suggestionSpans[i]);
    minSpanStart=Math.min(minSpanStart,spanStart);
    maxSpanEnd=Math.max(maxSpanEnd,spanEnd);
    if (selectionStart < spanStart || selectionStart > spanEnd) {
      continue;
    }
    unionOfSpansCoveringSelectionStartStart=Math.min(unionOfSpansCoveringSelectionStartStart,spanStart);
    unionOfSpansCoveringSelectionStartEnd=Math.max(unionOfSpansCoveringSelectionStartEnd,spanEnd);
  }
  if (unionOfSpansCoveringSelectionStartStart >= unionOfSpansCoveringSelectionStartEnd) {
    return false;
  }
  if (minSpanStart < unionOfSpansCoveringSelectionStartStart || maxSpanEnd > unionOfSpansCoveringSelectionStartEnd) {
    return false;
  }
  return true;
}
