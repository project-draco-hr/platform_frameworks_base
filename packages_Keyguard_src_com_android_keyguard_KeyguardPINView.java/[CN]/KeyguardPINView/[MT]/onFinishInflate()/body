{
  super.onFinishInflate();
  mKeyguardBouncerFrame=(ViewGroup)findViewById(R.id.keyguard_bouncer_frame);
  mRow0=(ViewGroup)findViewById(R.id.row0);
  mRow1=(ViewGroup)findViewById(R.id.row1);
  mRow2=(ViewGroup)findViewById(R.id.row2);
  mRow3=(ViewGroup)findViewById(R.id.row3);
  mDivider=findViewById(R.id.divider);
  final View ok=findViewById(R.id.key_enter);
  if (ok != null) {
    ok.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        doHapticKeyClick();
        if (mPasswordEntry.isEnabled()) {
          verifyPasswordAndUnlock();
        }
      }
    }
);
    ok.setOnHoverListener(new LiftToActivateListener(getContext()));
  }
  View pinDelete=findViewById(R.id.delete_button);
  if (pinDelete != null) {
    pinDelete.setVisibility(View.VISIBLE);
    pinDelete.setOnClickListener(new OnClickListener(){
      public void onClick(      View v){
        if (mPasswordEntry.isEnabled()) {
          CharSequence str=mPasswordEntry.getText();
          if (str.length() > 0) {
            mPasswordEntry.setText(str.subSequence(0,str.length() - 1));
          }
        }
        doHapticKeyClick();
      }
    }
);
    pinDelete.setOnLongClickListener(new View.OnLongClickListener(){
      public boolean onLongClick(      View v){
        if (mPasswordEntry.isEnabled()) {
          mPasswordEntry.setText("");
        }
        doHapticKeyClick();
        return true;
      }
    }
);
  }
  mPasswordEntry.setKeyListener(DigitsKeyListener.getInstance());
  mPasswordEntry.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_VARIATION_PASSWORD);
  mPasswordEntry.requestFocus();
}
