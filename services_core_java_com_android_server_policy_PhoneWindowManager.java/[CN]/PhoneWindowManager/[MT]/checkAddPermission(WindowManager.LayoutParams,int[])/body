{
  int type=attrs.type;
  outAppOp[0]=AppOpsManager.OP_NONE;
  if (!((type >= FIRST_APPLICATION_WINDOW && type <= LAST_APPLICATION_WINDOW) || (type >= FIRST_SUB_WINDOW && type <= LAST_SUB_WINDOW) || (type >= FIRST_SYSTEM_WINDOW && type <= LAST_SYSTEM_WINDOW))) {
    return WindowManagerGlobal.ADD_INVALID_TYPE;
  }
  if (type < FIRST_SYSTEM_WINDOW || type > LAST_SYSTEM_WINDOW) {
    return WindowManagerGlobal.ADD_OKAY;
  }
  String permission=null;
switch (type) {
case TYPE_TOAST:
    outAppOp[0]=AppOpsManager.OP_TOAST_WINDOW;
  break;
case TYPE_DREAM:
case TYPE_INPUT_METHOD:
case TYPE_WALLPAPER:
case TYPE_PRIVATE_PRESENTATION:
case TYPE_VOICE_INTERACTION:
case TYPE_ACCESSIBILITY_OVERLAY:
break;
case TYPE_PHONE:
case TYPE_PRIORITY_PHONE:
case TYPE_SYSTEM_ALERT:
case TYPE_SYSTEM_ERROR:
case TYPE_SYSTEM_OVERLAY:
permission=android.Manifest.permission.SYSTEM_ALERT_WINDOW;
outAppOp[0]=AppOpsManager.OP_SYSTEM_ALERT_WINDOW;
break;
default :
permission=android.Manifest.permission.INTERNAL_SYSTEM_WINDOW;
}
if (permission != null) {
if (permission == android.Manifest.permission.SYSTEM_ALERT_WINDOW) {
final int callingUid=Binder.getCallingUid();
if (callingUid == Process.SYSTEM_UID) {
return WindowManagerGlobal.ADD_OKAY;
}
final int mode=mAppOpsManager.checkOp(outAppOp[0],callingUid,attrs.packageName);
if (mode == AppOpsManager.MODE_DEFAULT) {
if (mContext.checkCallingPermission(permission) != PackageManager.PERMISSION_GRANTED) {
return WindowManagerGlobal.ADD_PERMISSION_DENIED;
}
}
return WindowManagerGlobal.ADD_OKAY;
}
if (mContext.checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {
return WindowManagerGlobal.ADD_PERMISSION_DENIED;
}
}
return WindowManagerGlobal.ADD_OKAY;
}
