{
  final boolean dockedStackVisible=mWindowManagerInternal.isStackVisible(DOCKED_STACK_ID);
  final boolean freeformStackVisible=mWindowManagerInternal.isStackVisible(FREEFORM_WORKSPACE_STACK_ID);
  final boolean forceShowSystemBars=dockedStackVisible || freeformStackVisible;
  final boolean forceOpaqueSystemBars=forceShowSystemBars && !mForceStatusBarFromKeyguard;
  WindowState transWin=isStatusBarKeyguard() && !mHideLockScreen ? mStatusBar : mTopFullscreenOpaqueWindowState;
  vis=mStatusBarController.applyTranslucentFlagLw(transWin,vis,oldVis);
  vis=mNavigationBarController.applyTranslucentFlagLw(transWin,vis,oldVis);
  int type=win.getAttrs().type;
  boolean statusBarHasFocus=type == TYPE_STATUS_BAR;
  if (statusBarHasFocus && !isStatusBarKeyguard()) {
    int flags=View.SYSTEM_UI_FLAG_FULLSCREEN | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_IMMERSIVE| View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY| View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR;
    if (mHideLockScreen) {
      flags|=View.STATUS_BAR_TRANSLUCENT | View.NAVIGATION_BAR_TRANSLUCENT;
    }
    vis=(vis & ~flags) | (oldVis & flags);
  }
  if ((!areTranslucentBarsAllowed() && transWin != mStatusBar) || forceOpaqueSystemBars) {
    vis&=~(View.NAVIGATION_BAR_TRANSLUCENT | View.STATUS_BAR_TRANSLUCENT | View.SYSTEM_UI_TRANSPARENT);
  }
  if (mForceWindowDrawsStatusBarBackground) {
    vis|=View.STATUS_BAR_TRANSPARENT;
    vis&=~View.STATUS_BAR_TRANSLUCENT;
  }
  boolean immersiveSticky=(vis & View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY) != 0;
  final boolean hideStatusBarWM=mTopFullscreenOpaqueWindowState != null && (PolicyControl.getWindowFlags(mTopFullscreenOpaqueWindowState,null) & WindowManager.LayoutParams.FLAG_FULLSCREEN) != 0;
  final boolean hideStatusBarSysui=(vis & View.SYSTEM_UI_FLAG_FULLSCREEN) != 0;
  final boolean hideNavBarSysui=(vis & View.SYSTEM_UI_FLAG_HIDE_NAVIGATION) != 0;
  final boolean transientStatusBarAllowed=mStatusBar != null && (statusBarHasFocus || (!forceShowSystemBars && (hideStatusBarWM || (hideStatusBarSysui && immersiveSticky))));
  final boolean transientNavBarAllowed=mNavigationBar != null && !forceShowSystemBars && hideNavBarSysui && immersiveSticky;
  final long now=SystemClock.uptimeMillis();
  final boolean pendingPanic=mPendingPanicGestureUptime != 0 && now - mPendingPanicGestureUptime <= PANIC_GESTURE_EXPIRATION;
  if (pendingPanic && hideNavBarSysui && !isStatusBarKeyguard()&& mKeyguardDrawComplete) {
    mPendingPanicGestureUptime=0;
    mStatusBarController.showTransient();
    mNavigationBarController.showTransient();
  }
  final boolean denyTransientStatus=mStatusBarController.isTransientShowRequested() && !transientStatusBarAllowed && hideStatusBarSysui;
  final boolean denyTransientNav=mNavigationBarController.isTransientShowRequested() && !transientNavBarAllowed;
  if (denyTransientStatus || denyTransientNav || forceShowSystemBars) {
    clearClearableFlagsLw();
    vis&=~View.SYSTEM_UI_CLEARABLE_FLAGS;
  }
  final boolean immersive=(vis & View.SYSTEM_UI_FLAG_IMMERSIVE) != 0;
  immersiveSticky=(vis & View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY) != 0;
  final boolean navAllowedHidden=immersive || immersiveSticky;
  if (hideNavBarSysui && !navAllowedHidden && windowTypeToLayerLw(win.getBaseType()) > windowTypeToLayerLw(TYPE_INPUT_CONSUMER)) {
    vis=(vis & ~View.SYSTEM_UI_FLAG_HIDE_NAVIGATION);
  }
  vis=mStatusBarController.updateVisibilityLw(transientStatusBarAllowed,oldVis,vis);
  boolean oldImmersiveMode=isImmersiveMode(oldVis);
  boolean newImmersiveMode=isImmersiveMode(vis);
  if (win != null && oldImmersiveMode != newImmersiveMode) {
    final String pkg=win.getOwningPackage();
    mImmersiveModeConfirmation.immersiveModeChanged(pkg,newImmersiveMode,isUserSetupComplete());
  }
  vis=mNavigationBarController.updateVisibilityLw(transientNavBarAllowed,oldVis,vis);
  return vis;
}
