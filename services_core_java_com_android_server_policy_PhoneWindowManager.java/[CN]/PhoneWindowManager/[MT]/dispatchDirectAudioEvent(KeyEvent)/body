{
  if (event.getAction() != KeyEvent.ACTION_DOWN) {
    return;
  }
  int keyCode=event.getKeyCode();
  int flags=AudioManager.FLAG_SHOW_UI | AudioManager.FLAG_PLAY_SOUND;
  String pkgName=mContext.getOpPackageName();
switch (keyCode) {
case KeyEvent.KEYCODE_VOLUME_UP:
    try {
      if (mUseMasterVolume) {
        getAudioService().adjustMasterVolume(AudioManager.ADJUST_RAISE,flags,pkgName);
      }
 else {
        getAudioService().adjustSuggestedStreamVolume(AudioManager.ADJUST_RAISE,AudioManager.USE_DEFAULT_STREAM_TYPE,flags,pkgName);
      }
    }
 catch (    RemoteException e) {
      Log.e(TAG,"Error dispatching volume up in dispatchTvAudioEvent.",e);
    }
  break;
case KeyEvent.KEYCODE_VOLUME_DOWN:
try {
  if (mUseMasterVolume) {
    getAudioService().adjustMasterVolume(AudioManager.ADJUST_LOWER,flags,pkgName);
  }
 else {
    getAudioService().adjustSuggestedStreamVolume(AudioManager.ADJUST_LOWER,AudioManager.USE_DEFAULT_STREAM_TYPE,flags,pkgName);
  }
}
 catch (RemoteException e) {
  Log.e(TAG,"Error dispatching volume down in dispatchTvAudioEvent.",e);
}
break;
case KeyEvent.KEYCODE_VOLUME_MUTE:
try {
if (event.getRepeatCount() == 0) {
if (mUseMasterVolume) {
  getAudioService().adjustMasterVolume(AudioManager.ADJUST_TOGGLE_MUTE,flags,pkgName);
}
 else {
  getAudioService().adjustSuggestedStreamVolume(AudioManager.ADJUST_TOGGLE_MUTE,AudioManager.USE_DEFAULT_STREAM_TYPE,flags,pkgName);
}
}
}
 catch (RemoteException e) {
Log.e(TAG,"Error dispatching mute in dispatchTvAudioEvent.",e);
}
break;
}
}
