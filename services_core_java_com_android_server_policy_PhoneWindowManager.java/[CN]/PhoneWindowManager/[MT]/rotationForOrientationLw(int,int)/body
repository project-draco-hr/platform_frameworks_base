{
  if (false) {
    Slog.v(TAG,"rotationForOrientationLw(orient=" + orientation + ", last="+ lastRotation+ "); user="+ mUserRotation+ " "+ ((mUserRotationMode == WindowManagerPolicy.USER_ROTATION_LOCKED) ? "USER_ROTATION_LOCKED" : ""));
  }
  if (mForceDefaultOrientation) {
    return Surface.ROTATION_0;
  }
synchronized (mLock) {
    int sensorRotation=mOrientationListener.getProposedRotation();
    if (sensorRotation < 0) {
      sensorRotation=lastRotation;
    }
    final int preferredRotation;
    if (mLidState == LID_OPEN && mLidOpenRotation >= 0) {
      preferredRotation=mLidOpenRotation;
    }
 else     if (mDockMode == Intent.EXTRA_DOCK_STATE_CAR && (mCarDockEnablesAccelerometer || mCarDockRotation >= 0)) {
      preferredRotation=mCarDockEnablesAccelerometer ? sensorRotation : mCarDockRotation;
    }
 else     if ((mDockMode == Intent.EXTRA_DOCK_STATE_DESK || mDockMode == Intent.EXTRA_DOCK_STATE_LE_DESK || mDockMode == Intent.EXTRA_DOCK_STATE_HE_DESK) && (mDeskDockEnablesAccelerometer || mDeskDockRotation >= 0)) {
      preferredRotation=mDeskDockEnablesAccelerometer ? sensorRotation : mDeskDockRotation;
    }
 else     if (mHdmiPlugged && mDemoHdmiRotationLock) {
      preferredRotation=mDemoHdmiRotation;
    }
 else     if (mHdmiPlugged && mDockMode == Intent.EXTRA_DOCK_STATE_UNDOCKED && mUndockedHdmiRotation >= 0) {
      preferredRotation=mUndockedHdmiRotation;
    }
 else     if (mDemoRotationLock) {
      preferredRotation=mDemoRotation;
    }
 else     if (orientation == ActivityInfo.SCREEN_ORIENTATION_LOCKED) {
      preferredRotation=lastRotation;
    }
 else     if (!mSupportAutoRotation) {
      preferredRotation=-1;
    }
 else     if ((mUserRotationMode == WindowManagerPolicy.USER_ROTATION_FREE && (orientation == ActivityInfo.SCREEN_ORIENTATION_USER || orientation == ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED || orientation == ActivityInfo.SCREEN_ORIENTATION_USER_LANDSCAPE || orientation == ActivityInfo.SCREEN_ORIENTATION_USER_PORTRAIT || orientation == ActivityInfo.SCREEN_ORIENTATION_FULL_USER)) || orientation == ActivityInfo.SCREEN_ORIENTATION_SENSOR || orientation == ActivityInfo.SCREEN_ORIENTATION_FULL_SENSOR || orientation == ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE || orientation == ActivityInfo.SCREEN_ORIENTATION_SENSOR_PORTRAIT) {
      if (mAllowAllRotations < 0) {
        mAllowAllRotations=mContext.getResources().getBoolean(com.android.internal.R.bool.config_allowAllRotations) ? 1 : 0;
      }
      if (sensorRotation != Surface.ROTATION_180 || mAllowAllRotations == 1 || orientation == ActivityInfo.SCREEN_ORIENTATION_FULL_SENSOR || orientation == ActivityInfo.SCREEN_ORIENTATION_FULL_USER) {
        preferredRotation=sensorRotation;
      }
 else {
        preferredRotation=lastRotation;
      }
    }
 else     if (mUserRotationMode == WindowManagerPolicy.USER_ROTATION_LOCKED && orientation != ActivityInfo.SCREEN_ORIENTATION_NOSENSOR) {
      preferredRotation=mUserRotation;
    }
 else {
      preferredRotation=-1;
    }
switch (orientation) {
case ActivityInfo.SCREEN_ORIENTATION_PORTRAIT:
      if (isAnyPortrait(preferredRotation)) {
        return preferredRotation;
      }
    return mPortraitRotation;
case ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE:
  if (isLandscapeOrSeascape(preferredRotation)) {
    return preferredRotation;
  }
return mLandscapeRotation;
case ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT:
if (isAnyPortrait(preferredRotation)) {
return preferredRotation;
}
return mUpsideDownRotation;
case ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE:
if (isLandscapeOrSeascape(preferredRotation)) {
return preferredRotation;
}
return mSeascapeRotation;
case ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE:
case ActivityInfo.SCREEN_ORIENTATION_USER_LANDSCAPE:
if (isLandscapeOrSeascape(preferredRotation)) {
return preferredRotation;
}
if (isLandscapeOrSeascape(lastRotation)) {
return lastRotation;
}
return mLandscapeRotation;
case ActivityInfo.SCREEN_ORIENTATION_SENSOR_PORTRAIT:
case ActivityInfo.SCREEN_ORIENTATION_USER_PORTRAIT:
if (isAnyPortrait(preferredRotation)) {
return preferredRotation;
}
if (isAnyPortrait(lastRotation)) {
return lastRotation;
}
return mPortraitRotation;
default :
if (preferredRotation >= 0) {
return preferredRotation;
}
return Surface.ROTATION_0;
}
}
}
