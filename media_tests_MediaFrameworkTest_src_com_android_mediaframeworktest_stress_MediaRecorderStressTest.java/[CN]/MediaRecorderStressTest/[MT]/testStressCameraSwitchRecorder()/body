{
  String filename;
  SurfaceHolder mSurfaceHolder;
  mSurfaceHolder=MediaFrameworkTest.mSurfaceView.getHolder();
  File stressOutFile=new File(MEDIA_STRESS_OUTPUT);
  Writer output=new BufferedWriter(new FileWriter(stressOutFile,true));
  output.write("Camera and video recorder preview switching\n");
  output.write("Total number of loops:" + NUMBER_OF_SWTICHING_LOOPS_BW_CAMERA_AND_RECORDER + "\n");
  try {
    Log.v(TAG,"Start preview");
    output.write("No of loop: ");
    for (int i=0; i < NUMBER_OF_SWTICHING_LOOPS_BW_CAMERA_AND_RECORDER; i++) {
synchronized (lock) {
        initializeCameraMessageLooper();
        try {
          lock.wait(WAIT_FOR_COMMAND_TO_COMPLETE);
        }
 catch (        Exception e) {
          Log.v(TAG,"wait was interrupted.");
        }
      }
      mCamera.setErrorCallback(mCameraErrorCallback);
      mCamera.setPreviewDisplay(mSurfaceHolder);
      mCamera.startPreview();
      Thread.sleep(WAIT_TIME_CAMERA_TEST);
      mCamera.stopPreview();
      terminateCameraMessageLooper();
      mCamera=null;
      Log.v(TAG,"release camera");
      filename=OUTPUT_FILE + i + OUTPUT_FILE_EXT;
      Log.v(TAG,filename);
synchronized (recorderlock) {
        initializeRecorderMessageLooper();
        try {
          recorderlock.wait(WAIT_FOR_COMMAND_TO_COMPLETE);
        }
 catch (        Exception e) {
          Log.v(TAG,"wait was interrupted.");
        }
      }
      mRecorder.setOnErrorListener(mRecorderErrorCallback);
      mRecorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);
      mRecorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);
      mRecorder.setOutputFile(filename);
      mRecorder.setVideoFrameRate(20);
      mRecorder.setVideoSize(176,144);
      Log.v(TAG,"Media recorder setEncoder");
      mRecorder.setVideoEncoder(MediaRecorder.VideoEncoder.H263);
      Log.v(TAG,"mediaRecorder setPreview");
      mRecorder.setPreviewDisplay(mSurfaceHolder.getSurface());
      Log.v(TAG,"prepare");
      mRecorder.prepare();
      Log.v(TAG,"before release");
      Thread.sleep(WAIT_TIME_CAMERA_TEST);
      terminateRecorderMessageLooper();
      Log.v(TAG,"release video recorder");
      output.write(", " + i);
    }
  }
 catch (  Exception e) {
    assertTrue("Camer and recorder switch mode",false);
    Log.v(TAG,e.toString());
  }
  output.write("\n\n");
  output.close();
}
