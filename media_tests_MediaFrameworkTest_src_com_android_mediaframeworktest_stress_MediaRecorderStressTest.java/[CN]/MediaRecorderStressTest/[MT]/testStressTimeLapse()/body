{
  SurfaceHolder mSurfaceHolder;
  mSurfaceHolder=MediaFrameworkTest.mSurfaceView.getHolder();
  int record_duration=MediaRecorderStressTestRunner.mTimeLapseDuration;
  boolean remove_video=MediaRecorderStressTestRunner.mRemoveVideo;
  double captureRate=MediaRecorderStressTestRunner.mCaptureRate;
  String filename;
  File stressOutFile=new File(MEDIA_STRESS_OUTPUT);
  Writer output=new BufferedWriter(new FileWriter(stressOutFile,true));
  output.write("Start camera time lapse stress:\n");
  output.write("Total number of loops: " + NUMBER_OF_TIME_LAPSE_LOOPS + "\n");
  try {
    for (int j=0, n=Camera.getNumberOfCameras(); j < n; j++) {
      output.write("No of loop: camera " + j);
      for (int i=0; i < NUMBER_OF_TIME_LAPSE_LOOPS; i++) {
        filename=OUTPUT_FILE + j + "_"+ i+ OUTPUT_FILE_EXT;
        Log.v(TAG,filename);
        runOnLooper(new Runnable(){
          @Override public void run(){
            mRecorder=new MediaRecorder();
          }
        }
);
        mRecorder.setOnErrorListener(mRecorderErrorCallback);
        mRecorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);
        CamcorderProfile profile=CamcorderProfile.get(j,CamcorderProfile.QUALITY_TIME_LAPSE_HIGH);
        mRecorder.setProfile(profile);
        mRecorder.setCaptureRate(captureRate);
        mRecorder.setOutputFile(filename);
        Log.v(TAG,"mediaRecorder setPreviewDisplay");
        mRecorder.setPreviewDisplay(mSurfaceHolder.getSurface());
        mRecorder.prepare();
        mRecorder.start();
        Thread.sleep(record_duration);
        Log.v(TAG,"Before stop");
        mRecorder.stop();
        mRecorder.release();
        MediaPlayer mp=new MediaPlayer();
        mp.setDataSource(filename);
        mp.setDisplay(mSurfaceHolder);
        mp.prepare();
        mp.start();
        Thread.sleep(TIME_LAPSE_PLAYBACK_WAIT_TIME);
        mp.release();
        validateRecordedVideo(filename);
        if (remove_video) {
          removeRecordedVideo(filename);
        }
        output.write(", " + i);
      }
    }
  }
 catch (  IllegalStateException e) {
    assertTrue("Camera time lapse stress test IllegalStateException",false);
    Log.v(TAG,e.toString());
  }
catch (  IOException e) {
    assertTrue("Camera time lapse stress test IOException",false);
    Log.v(TAG,e.toString());
  }
catch (  Exception e) {
    assertTrue("Camera time lapse stress test Exception",false);
    Log.v(TAG,e.toString());
  }
  output.write("\n\n");
  output.close();
}
