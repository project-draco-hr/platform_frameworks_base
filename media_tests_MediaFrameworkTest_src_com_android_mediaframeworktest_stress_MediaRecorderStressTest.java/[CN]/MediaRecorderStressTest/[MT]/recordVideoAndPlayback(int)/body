{
  int iterations;
  int recordDuration;
  boolean removeVideo;
  int videoEncoder;
  int audioEncoder;
  int frameRate;
  int videoWidth;
  int videoHeight;
  int bitRate;
  if (profile != USE_TEST_RUNNER_PROFILE) {
    assertTrue(String.format("Camera doesn't support profile %d",profile),CamcorderProfile.hasProfile(CAMERA_ID,profile));
    CamcorderProfile camcorderProfile=CamcorderProfile.get(CAMERA_ID,profile);
    videoEncoder=camcorderProfile.videoCodec;
    audioEncoder=camcorderProfile.audioCodec;
    frameRate=camcorderProfile.videoFrameRate;
    videoWidth=camcorderProfile.videoFrameWidth;
    videoHeight=camcorderProfile.videoFrameHeight;
    bitRate=camcorderProfile.videoBitRate;
  }
 else {
    videoEncoder=MediaRecorderStressTestRunner.mVideoEncoder;
    audioEncoder=MediaRecorderStressTestRunner.mAudioEncoder;
    frameRate=MediaRecorderStressTestRunner.mFrameRate;
    videoWidth=MediaRecorderStressTestRunner.mVideoWidth;
    videoHeight=MediaRecorderStressTestRunner.mVideoHeight;
    bitRate=MediaRecorderStressTestRunner.mBitRate;
  }
  iterations=MediaRecorderStressTestRunner.mIterations;
  recordDuration=MediaRecorderStressTestRunner.mDuration;
  removeVideo=MediaRecorderStressTestRunner.mRemoveVideo;
  SurfaceHolder surfaceHolder=MediaFrameworkTest.mSurfaceView.getHolder();
  mOutput.write("Total number of loops: " + iterations + "\n");
  try {
    mOutput.write("No of loop: ");
    for (int i=0; i < iterations; i++) {
      String fileName=String.format("%s/temp%d%s",Environment.getExternalStorageDirectory(),i,OUTPUT_FILE_EXT);
      Log.v(TAG,fileName);
      runOnLooper(new Runnable(){
        @Override public void run(){
          mRecorder=new MediaRecorder();
        }
      }
);
      Log.v(TAG,"iterations : " + iterations);
      Log.v(TAG,"video encoder : " + videoEncoder);
      Log.v(TAG,"audio encoder : " + audioEncoder);
      Log.v(TAG,"frame rate : " + frameRate);
      Log.v(TAG,"video width : " + videoWidth);
      Log.v(TAG,"video height : " + videoHeight);
      Log.v(TAG,"bit rate : " + bitRate);
      Log.v(TAG,"record duration : " + recordDuration);
      mRecorder.setOnErrorListener(mRecorderErrorCallback);
      mRecorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);
      mRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
      mRecorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);
      mRecorder.setOutputFile(fileName);
      mRecorder.setVideoFrameRate(frameRate);
      mRecorder.setVideoSize(videoWidth,videoHeight);
      mRecorder.setVideoEncoder(videoEncoder);
      mRecorder.setAudioEncoder(audioEncoder);
      mRecorder.setVideoEncodingBitRate(bitRate);
      Log.v(TAG,"mediaRecorder setPreview");
      mRecorder.setPreviewDisplay(surfaceHolder.getSurface());
      mRecorder.prepare();
      mRecorder.start();
      Thread.sleep(recordDuration);
      Log.v(TAG,"Before stop");
      mRecorder.stop();
      mRecorder.release();
      MediaPlayer mp=new MediaPlayer();
      mp.setDataSource(fileName);
      mp.setDisplay(MediaFrameworkTest.mSurfaceView.getHolder());
      mp.prepare();
      mp.start();
      Thread.sleep(recordDuration);
      mp.release();
      validateRecordedVideo(fileName);
      if (removeVideo) {
        removeRecordedVideo(fileName);
      }
      if (i == 0) {
        mOutput.write(i + 1);
      }
 else {
        mOutput.write(String.format(", %d",(i + 1)));
      }
    }
  }
 catch (  Exception e) {
    Log.e(TAG,e.toString());
    fail("Record and playback");
  }
}
