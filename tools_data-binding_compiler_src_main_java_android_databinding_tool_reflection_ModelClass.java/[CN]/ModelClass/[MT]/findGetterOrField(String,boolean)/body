{
  String capitalized=StringUtils.capitalize(name);
  String[] methodNames={"get" + capitalized,"is" + capitalized,name};
  final ModelField backingField=getField(name,true,staticAccess);
  L.d("Finding getter or field for %s, field = %s",name,backingField == null ? null : backingField.getName());
  for (  String methodName : methodNames) {
    ModelMethod[] methods=getMethods(methodName,0);
    for (    ModelMethod method : methods) {
      if (method.isPublic() && method.isStatic() == staticAccess) {
        final Callable result=new Callable(Callable.Type.METHOD,methodName,method.getReturnType(null),true,method.isBindable() || (backingField != null && backingField.isBindable()));
        L.d("backing field for %s is %s",result,backingField);
        return result;
      }
    }
  }
  if (backingField != null && backingField.isPublic()) {
    ModelClass fieldType=backingField.getFieldType();
    return new Callable(Callable.Type.FIELD,name,fieldType,!backingField.isFinal() || fieldType.isObservable(),backingField.isBindable());
  }
  throw new IllegalArgumentException("cannot find " + name + " in "+ toJavaCode());
}
