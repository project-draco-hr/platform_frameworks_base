{
  pw.println("Content.");
  boolean printed=false;
  Iterator<JobStatus> it=mTrackedTasks.iterator();
  while (it.hasNext()) {
    JobStatus js=it.next();
    if (!js.shouldDump(filterUid)) {
      continue;
    }
    if (!printed) {
      pw.print("  ");
      printed=true;
    }
 else {
      pw.print(",");
    }
    pw.print(System.identityHashCode(js));
  }
  if (printed) {
    pw.println();
  }
  int N=mObservers.size();
  if (N > 0) {
    pw.println("  Observers:");
    for (int i=0; i < N; i++) {
      ObserverInstance obs=mObservers.valueAt(i);
      int M=obs.mJobs.size();
      boolean shouldDump=false;
      for (int j=0; j < M; j++) {
        JobInstance inst=obs.mJobs.valueAt(j);
        if (inst.mJobStatus.shouldDump(filterUid)) {
          shouldDump=true;
          break;
        }
      }
      if (!shouldDump) {
        continue;
      }
      pw.print("    ");
      pw.print(mObservers.keyAt(i));
      pw.print(" (");
      pw.print(System.identityHashCode(obs));
      pw.println("):");
      pw.println("      Jobs:");
      for (int j=0; j < M; j++) {
        JobInstance inst=obs.mJobs.valueAt(j);
        pw.print("        ");
        pw.print(System.identityHashCode(inst.mJobStatus));
        if (inst.mChangedAuthorities != null) {
          pw.println(":");
          if (inst.mTriggerPending) {
            pw.print("          Trigger pending: update=");
            TimeUtils.formatDuration(inst.mJobStatus.getTriggerContentUpdateDelay(),pw);
            pw.print(", max=");
            TimeUtils.formatDuration(inst.mJobStatus.getTriggerContentMaxDelay(),pw);
            pw.println();
          }
          pw.println("          Changed Authorities:");
          for (int k=0; k < inst.mChangedAuthorities.size(); k++) {
            pw.print("          ");
            pw.println(inst.mChangedAuthorities.valueAt(k));
          }
          if (inst.mChangedUris != null) {
            pw.println("          Changed URIs:");
            for (int k=0; k < inst.mChangedUris.size(); k++) {
              pw.print("          ");
              pw.println(inst.mChangedUris.valueAt(k));
            }
          }
        }
 else {
          pw.println();
        }
      }
    }
  }
}
