{
  if (mProcessed) {
    return true;
  }
  BindingAdapterStore store=BindingAdapterStore.get();
  for (  Element element : roundEnv.getElementsAnnotatedWith(BindingAdapter.class)) {
    TypeElement containingClass=(TypeElement)element.getEnclosingElement();
    store.clear(containingClass);
  }
  for (  Element element : roundEnv.getElementsAnnotatedWith(BindingAdapter.class)) {
    if (element.getKind() != ElementKind.METHOD || !element.getModifiers().contains(Modifier.STATIC)) {
      processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR,"@BindingAdapter on invalid element: " + element);
      continue;
    }
    BindingAdapter bindingAdapter=element.getAnnotation(BindingAdapter.class);
    ExecutableElement executableElement=(ExecutableElement)element;
    List<? extends VariableElement> parameters=executableElement.getParameters();
    if (parameters.size() != 2) {
      processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR,"@BindingAdapter does not take two parameters: " + element);
      continue;
    }
    TypeElement containingClass=(TypeElement)executableElement.getEnclosingElement();
    try {
      store.add(bindingAdapter.attribute(),parameters.get(0).asType(),parameters.get(1).asType(),containingClass,executableElement);
    }
 catch (    IllegalArgumentException e) {
      processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR,"@BindingAdapter for duplicate View and parameter type: " + element);
    }
  }
  try {
    store.write();
  }
 catch (  IOException e) {
    processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR,"Could not write BindingAdapter intermediate file: " + e.getLocalizedMessage());
    e.printStackTrace();
  }
  mProcessed=true;
  return true;
}
