{
  if (DBG)   log(getName() + message.toString() + "\n");
switch (message.what) {
case WifiMonitor.WPS_SUCCESS_EVENT:
    replyToMessage(mSourceMessage,WifiManager.WPS_COMPLETED);
  mSourceMessage.recycle();
mSourceMessage=null;
transitionTo(mDisconnectedState);
break;
case WifiMonitor.WPS_OVERLAP_EVENT:
replyToMessage(mSourceMessage,WifiManager.WPS_FAILED,WifiManager.WPS_OVERLAP_ERROR);
mSourceMessage.recycle();
mSourceMessage=null;
transitionTo(mDisconnectedState);
break;
case WifiMonitor.WPS_FAIL_EVENT:
case WifiMonitor.WPS_TIMEOUT_EVENT:
replyToMessage(mSourceMessage,WifiManager.WPS_FAILED,WifiManager.ERROR);
mSourceMessage.recycle();
mSourceMessage=null;
transitionTo(mDisconnectedState);
break;
case WifiManager.START_WPS:
replyToMessage(message,WifiManager.WPS_FAILED,WifiManager.IN_PROGRESS);
break;
case CMD_STOP_DRIVER:
case CMD_SET_SCAN_MODE:
case WifiManager.CONNECT_NETWORK:
case CMD_ENABLE_NETWORK:
case CMD_RECONNECT:
case CMD_REASSOCIATE:
case WifiMonitor.NETWORK_CONNECTION_EVENT:
deferMessage(message);
break;
case WifiMonitor.NETWORK_DISCONNECTION_EVENT:
if (DBG) log("Network connection lost");
handleNetworkDisconnect();
break;
default :
return NOT_HANDLED;
}
EventLog.writeEvent(EVENTLOG_WIFI_EVENT_HANDLED,message.what);
return HANDLED;
}
