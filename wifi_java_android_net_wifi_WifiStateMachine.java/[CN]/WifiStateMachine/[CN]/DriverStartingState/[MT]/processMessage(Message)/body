{
  if (DBG)   log(getName() + message.toString() + "\n");
switch (message.what) {
case WifiMonitor.SUPPLICANT_STATE_CHANGE_EVENT:
    SupplicantState state=handleSupplicantStateChange(message);
  if (SupplicantState.isDriverActive(state)) {
    transitionTo(mDriverStartedState);
  }
break;
case CMD_DRIVER_START_TIMED_OUT:
if (message.arg1 == mDriverStartToken) {
if (mTries >= 2) {
  loge("Failed to start driver after " + mTries);
  transitionTo(mDriverStoppedState);
}
 else {
  loge("Driver start failed, retrying");
  mWakeLock.acquire();
  mWifiNative.startDriver();
  mWakeLock.release();
  ++mTries;
  sendMessageDelayed(obtainMessage(CMD_DRIVER_START_TIMED_OUT,++mDriverStartToken,0),DRIVER_START_TIME_OUT_MSECS);
}
}
break;
case CMD_START_DRIVER:
case CMD_STOP_DRIVER:
case WifiMonitor.NETWORK_CONNECTION_EVENT:
case WifiMonitor.NETWORK_DISCONNECTION_EVENT:
case WifiMonitor.AUTHENTICATION_FAILURE_EVENT:
case WifiMonitor.WPS_OVERLAP_EVENT:
case CMD_SET_COUNTRY_CODE:
case CMD_SET_FREQUENCY_BAND:
case CMD_START_PACKET_FILTERING:
case CMD_STOP_PACKET_FILTERING:
case CMD_START_SCAN:
case CMD_DISCONNECT:
case CMD_REASSOCIATE:
case CMD_RECONNECT:
deferMessage(message);
break;
default :
return NOT_HANDLED;
}
return HANDLED;
}
