{
  if (DBG)   log(getName() + message.toString() + "\n");
  boolean eventLoggingEnabled=true;
switch (message.what) {
case CMD_SET_SCAN_TYPE:
    mSetScanActive=(message.arg1 == SCAN_ACTIVE);
  mWifiNative.setScanMode(mSetScanActive);
break;
case CMD_START_SCAN:
eventLoggingEnabled=false;
boolean forceActive=(message.arg1 == SCAN_ACTIVE);
if (forceActive && !mSetScanActive) {
mWifiNative.setScanMode(forceActive);
}
mWifiNative.scan();
if (forceActive && !mSetScanActive) {
mWifiNative.setScanMode(mSetScanActive);
}
mScanResultIsPending=true;
break;
case CMD_SET_HIGH_PERF_MODE:
setHighPerfModeEnabledNative(message.arg1 == 1);
break;
case CMD_SET_COUNTRY_CODE:
String country=(String)message.obj;
if (DBG) log("set country code " + country);
if (!mWifiNative.setCountryCode(country.toUpperCase())) {
loge("Failed to set country code " + country);
}
break;
case CMD_SET_FREQUENCY_BAND:
int band=message.arg1;
if (DBG) log("set frequency band " + band);
if (mWifiNative.setBand(band)) {
mFrequencyBand.set(band);
startScan(true);
}
 else {
loge("Failed to set frequency band " + band);
}
break;
case CMD_BLUETOOTH_ADAPTER_STATE_CHANGE:
mBluetoothConnectionActive=(message.arg1 != BluetoothAdapter.STATE_DISCONNECTED);
mWifiNative.setBluetoothCoexistenceScanMode(mBluetoothConnectionActive);
break;
case CMD_STOP_DRIVER:
int mode=message.arg1;
if (mInDelayedStop && mode != IN_ECM_STATE) {
if (DBG) log("Already in delayed stop");
break;
}
mInDelayedStop=true;
mDelayedStopCounter++;
if (DBG) log("Delayed stop message " + mDelayedStopCounter);
if (mode == IN_ECM_STATE) {
sendMessage(obtainMessage(CMD_DELAYED_STOP_DRIVER,mDelayedStopCounter,0));
}
 else {
sendMessageDelayed(obtainMessage(CMD_DELAYED_STOP_DRIVER,mDelayedStopCounter,0),DELAYED_DRIVER_STOP_MS);
}
break;
case CMD_START_DRIVER:
if (mInDelayedStop) {
mInDelayedStop=false;
mDelayedStopCounter++;
if (DBG) log("Delayed stop ignored due to start");
}
break;
case CMD_DELAYED_STOP_DRIVER:
if (message.arg1 != mDelayedStopCounter) break;
if (getCurrentState() != mDisconnectedState) {
mWifiNative.disconnect();
handleNetworkDisconnect();
}
mWakeLock.acquire();
mWifiNative.stopDriver();
transitionTo(mDriverStoppingState);
mWakeLock.release();
break;
case CMD_START_PACKET_FILTERING:
if (message.arg1 == MULTICAST_V6) {
mWifiNative.startFilteringMulticastV6Packets();
}
 else if (message.arg1 == MULTICAST_V4) {
mWifiNative.startFilteringMulticastV4Packets();
}
 else {
loge("Illegal arugments to CMD_START_PACKET_FILTERING");
}
break;
case CMD_STOP_PACKET_FILTERING:
if (message.arg1 == MULTICAST_V6) {
mWifiNative.stopFilteringMulticastV6Packets();
}
 else if (message.arg1 == MULTICAST_V4) {
mWifiNative.stopFilteringMulticastV4Packets();
}
 else {
loge("Illegal arugments to CMD_STOP_PACKET_FILTERING");
}
break;
default :
return NOT_HANDLED;
}
if (eventLoggingEnabled) {
EventLog.writeEvent(EVENTLOG_WIFI_EVENT_HANDLED,message.what);
}
return HANDLED;
}
