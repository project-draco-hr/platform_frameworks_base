{
switch (message.what) {
case CMD_START_SCAN:
    noteScanStart(message.arg1,(WorkSource)message.obj);
  startScanNative(WifiNative.SCAN_WITH_CONNECTION_SETUP);
break;
case CMD_SET_BATCHED_SCAN:
recordBatchedScanSettings((BatchedScanSettings)message.obj);
startBatchedScan();
break;
case CMD_SET_COUNTRY_CODE:
String country=(String)message.obj;
if (DBG) log("set country code " + country);
if (country != null) {
country=country.toUpperCase(Locale.ROOT);
if (mLastSetCountryCode == null || country.equals(mLastSetCountryCode) == false) {
if (mWifiNative.setCountryCode(country)) {
mLastSetCountryCode=country;
}
 else {
loge("Failed to set country code " + country);
}
}
}
break;
case CMD_SET_FREQUENCY_BAND:
int band=message.arg1;
if (DBG) log("set frequency band " + band);
if (mWifiNative.setBand(band)) {
mFrequencyBand.set(band);
mWifiNative.bssFlush();
startScanNative(WifiNative.SCAN_WITH_CONNECTION_SETUP);
}
 else {
loge("Failed to set frequency band " + band);
}
break;
case CMD_BLUETOOTH_ADAPTER_STATE_CHANGE:
mBluetoothConnectionActive=(message.arg1 != BluetoothAdapter.STATE_DISCONNECTED);
mWifiNative.setBluetoothCoexistenceScanMode(mBluetoothConnectionActive);
break;
case CMD_STOP_DRIVER:
int mode=message.arg1;
if (mInDelayedStop) {
if (DBG) log("Already in delayed stop");
break;
}
mWifiConfigStore.disableAllNetworks();
mInDelayedStop=true;
mDelayedStopCounter++;
if (DBG) log("Delayed stop message " + mDelayedStopCounter);
Intent driverStopIntent=new Intent(ACTION_DELAYED_DRIVER_STOP,null);
driverStopIntent.putExtra(DELAYED_STOP_COUNTER,mDelayedStopCounter);
mDriverStopIntent=PendingIntent.getBroadcast(mContext,DRIVER_STOP_REQUEST,driverStopIntent,PendingIntent.FLAG_UPDATE_CURRENT);
mAlarmManager.set(AlarmManager.RTC_WAKEUP,System.currentTimeMillis() + mDriverStopDelayMs,mDriverStopIntent);
break;
case CMD_START_DRIVER:
if (mInDelayedStop) {
mInDelayedStop=false;
mDelayedStopCounter++;
mAlarmManager.cancel(mDriverStopIntent);
if (DBG) log("Delayed stop ignored due to start");
if (mOperationalMode == CONNECT_MODE) {
mWifiConfigStore.enableAllNetworks();
}
}
break;
case CMD_DELAYED_STOP_DRIVER:
if (DBG) log("delayed stop " + message.arg1 + " "+ mDelayedStopCounter);
if (message.arg1 != mDelayedStopCounter) break;
if (getCurrentState() != mDisconnectedState) {
mWifiNative.disconnect();
handleNetworkDisconnect();
}
mWakeLock.acquire();
mWifiNative.stopDriver();
mWakeLock.release();
if (mP2pSupported) {
transitionTo(mWaitForP2pDisableState);
}
 else {
transitionTo(mDriverStoppingState);
}
break;
case CMD_START_PACKET_FILTERING:
if (message.arg1 == MULTICAST_V6) {
mWifiNative.startFilteringMulticastV6Packets();
}
 else if (message.arg1 == MULTICAST_V4) {
mWifiNative.startFilteringMulticastV4Packets();
}
 else {
loge("Illegal arugments to CMD_START_PACKET_FILTERING");
}
break;
case CMD_STOP_PACKET_FILTERING:
if (message.arg1 == MULTICAST_V6) {
mWifiNative.stopFilteringMulticastV6Packets();
}
 else if (message.arg1 == MULTICAST_V4) {
mWifiNative.stopFilteringMulticastV4Packets();
}
 else {
loge("Illegal arugments to CMD_STOP_PACKET_FILTERING");
}
break;
case CMD_SET_SUSPEND_OPT_ENABLED:
if (message.arg1 == 1) {
setSuspendOptimizationsNative(SUSPEND_DUE_TO_SCREEN,true);
mSuspendWakeLock.release();
}
 else {
setSuspendOptimizationsNative(SUSPEND_DUE_TO_SCREEN,false);
}
break;
case CMD_SET_HIGH_PERF_MODE:
if (message.arg1 == 1) {
setSuspendOptimizationsNative(SUSPEND_DUE_TO_HIGH_PERF,false);
}
 else {
setSuspendOptimizationsNative(SUSPEND_DUE_TO_HIGH_PERF,true);
}
break;
case CMD_ENABLE_TDLS:
if (message.obj != null) {
String remoteAddress=(String)message.obj;
boolean enable=(message.arg1 == 1);
mWifiNative.startTdls(remoteAddress,enable);
}
break;
default :
return NOT_HANDLED;
}
return HANDLED;
}
