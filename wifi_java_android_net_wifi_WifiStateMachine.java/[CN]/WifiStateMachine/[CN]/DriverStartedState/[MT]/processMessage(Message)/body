{
  if (DBG)   Log.d(TAG,getName() + message.toString() + "\n");
  SyncParams syncParams;
switch (message.what) {
case CMD_SET_SCAN_TYPE:
    if (message.arg1 == SCAN_ACTIVE) {
      WifiNative.setScanModeCommand(true);
    }
 else {
      WifiNative.setScanModeCommand(false);
    }
  break;
case CMD_SET_POWER_MODE:
WifiNative.setPowerModeCommand(message.arg1);
break;
case CMD_SET_BLUETOOTH_COEXISTENCE:
WifiNative.setBluetoothCoexistenceModeCommand(message.arg1);
break;
case CMD_SET_BLUETOOTH_SCAN_MODE:
WifiNative.setBluetoothCoexistenceScanModeCommand(message.arg1 == 1);
break;
case CMD_SET_NUM_ALLOWED_CHANNELS:
mNumAllowedChannels=message.arg1;
WifiNative.setNumAllowedChannelsCommand(message.arg1);
break;
case CMD_START_DRIVER:
break;
case CMD_STOP_DRIVER:
WifiNative.stopDriverCommand();
transitionTo(mDriverStoppingState);
break;
case CMD_REQUEST_CM_WAKELOCK:
if (mCm == null) {
mCm=(ConnectivityManager)mContext.getSystemService(Context.CONNECTIVITY_SERVICE);
}
mCm.requestNetworkTransitionWakelock(TAG);
break;
case CMD_START_PACKET_FILTERING:
WifiNative.startPacketFiltering();
break;
case CMD_STOP_PACKET_FILTERING:
WifiNative.stopPacketFiltering();
break;
default :
return NOT_HANDLED;
}
EventLog.writeEvent(EVENTLOG_WIFI_EVENT_HANDLED,message.what);
return HANDLED;
}
