{
  if (DBG)   Log.d(TAG,getName() + message.toString() + "\n");
switch (message.what) {
case SUP_CONNECTION_EVENT:
    Log.d(TAG,"Supplicant connection established");
  mSupplicantStateTracker.resetSupplicantState();
mLastBssid=null;
mLastNetworkId=-1;
mLastSignalLevel=-1;
mWifiInfo.setMacAddress(WifiNative.getMacAddressCommand());
WifiConfigStore.initialize(mContext);
if (mBluetoothA2dp == null) {
mBluetoothA2dp=new BluetoothA2dp(mContext);
}
checkIsBluetoothPlaying();
checkUseStaticIp();
sendSupplicantConnectionChangedBroadcast(true);
transitionTo(mDriverSupReadyState);
break;
case CMD_STOP_SUPPLICANT:
Log.d(TAG,"Stop supplicant received");
WifiNative.stopSupplicant();
transitionTo(mDriverLoadedState);
break;
case CMD_START_AP:
Log.d(TAG,"Failed to start soft AP with a running supplicant");
setWifiApState(WIFI_AP_STATE_FAILED);
break;
case CMD_START_DRIVER:
case CMD_STOP_DRIVER:
case CMD_SET_SCAN_MODE:
case CMD_SET_SCAN_TYPE:
case CMD_SET_POWER_MODE:
case CMD_SET_BLUETOOTH_COEXISTENCE:
case CMD_SET_BLUETOOTH_SCAN_MODE:
case CMD_SET_NUM_ALLOWED_CHANNELS:
case CMD_START_PACKET_FILTERING:
case CMD_STOP_PACKET_FILTERING:
deferMessage(message);
break;
case CMD_STOP_AP:
case CMD_START_SUPPLICANT:
case CMD_UNLOAD_DRIVER:
break;
default :
return NOT_HANDLED;
}
EventLog.writeEvent(EVENTLOG_WIFI_EVENT_HANDLED,message.what);
return HANDLED;
}
