{
  if (DBG)   Log.d(TAG,getName() + message.toString() + "\n");
switch (message.what) {
case CMD_IP_CONFIG_SUCCESS:
    mLastSignalLevel=-1;
  InetAddress addr;
synchronized (mDhcpInfoInternal) {
  addr=NetworkUtils.numericToInetAddress(mDhcpInfoInternal.ipAddress);
}
mWifiInfo.setInetAddress(addr);
configureLinkProperties();
if (getNetworkDetailedState() == DetailedState.CONNECTED) {
sendLinkConfigurationChangedBroadcast();
}
 else {
setNetworkDetailedState(DetailedState.CONNECTED);
sendNetworkStateChangeBroadcast(mLastBssid);
}
transitionTo(mConnectedState);
break;
case CMD_IP_CONFIG_FAILURE:
mWifiInfo.setInetAddress(null);
Log.e(TAG,"IP configuration failed");
if (++mReconnectCount > getMaxDhcpRetries()) {
Log.e(TAG,"Failed " + mReconnectCount + " times, Disabling "+ mLastNetworkId);
WifiConfigStore.disableNetwork(mLastNetworkId);
mReconnectCount=0;
}
WifiNative.disconnectCommand();
WifiNative.reconnectCommand();
transitionTo(mDisconnectingState);
break;
case CMD_DISCONNECT:
WifiNative.disconnectCommand();
transitionTo(mDisconnectingState);
break;
case CMD_CONNECT_NETWORK:
int netId=message.arg1;
if (mWifiInfo.getNetworkId() == netId) {
break;
}
return NOT_HANDLED;
case CMD_SAVE_NETWORK:
deferMessage(message);
break;
case NETWORK_CONNECTION_EVENT:
break;
case CMD_STOP_DRIVER:
sendMessage(CMD_DISCONNECT);
deferMessage(message);
break;
case CMD_SET_SCAN_MODE:
if (message.arg1 == SCAN_ONLY_MODE) {
sendMessage(CMD_DISCONNECT);
deferMessage(message);
}
break;
case CMD_START_SCAN:
deferMessage(message);
break;
case CMD_SET_HIGH_PERF_MODE:
deferMessage(message);
break;
default :
return NOT_HANDLED;
}
EventLog.writeEvent(EVENTLOG_WIFI_EVENT_HANDLED,message.what);
return HANDLED;
}
