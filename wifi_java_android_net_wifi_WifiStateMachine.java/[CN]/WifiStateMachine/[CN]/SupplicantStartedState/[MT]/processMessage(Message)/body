{
  if (DBG)   log(getName() + message.toString() + "\n");
  WifiConfiguration config;
switch (message.what) {
case CMD_STOP_SUPPLICANT:
    if (mP2pSupported) {
      transitionTo(mWaitForP2pDisableState);
    }
 else {
      transitionTo(mSupplicantStoppingState);
    }
  break;
case WifiMonitor.SUP_DISCONNECTION_EVENT:
loge("Connection lost, restart supplicant");
mWifiNative.killSupplicant(mP2pSupported);
mWifiNative.closeSupplicantConnection();
mNetworkInfo.setIsAvailable(false);
handleNetworkDisconnect();
sendSupplicantConnectionChangedBroadcast(false);
mSupplicantStateTracker.sendMessage(CMD_RESET_SUPPLICANT_STATE);
if (mP2pSupported) {
transitionTo(mWaitForP2pDisableState);
}
 else {
transitionTo(mDriverLoadedState);
}
sendMessageDelayed(CMD_START_SUPPLICANT,SUPPLICANT_RESTART_INTERVAL_MSECS);
break;
case WifiMonitor.SCAN_RESULTS_EVENT:
setScanResults();
sendScanResultsAvailableBroadcast();
mScanResultIsPending=false;
break;
case CMD_PING_SUPPLICANT:
boolean ok=mWifiNative.ping();
replyToMessage(message,message.what,ok ? SUCCESS : FAILURE);
break;
case CMD_ADD_OR_UPDATE_NETWORK:
config=(WifiConfiguration)message.obj;
replyToMessage(message,CMD_ADD_OR_UPDATE_NETWORK,mWifiConfigStore.addOrUpdateNetwork(config));
break;
case CMD_REMOVE_NETWORK:
ok=mWifiConfigStore.removeNetwork(message.arg1);
replyToMessage(message,message.what,ok ? SUCCESS : FAILURE);
break;
case CMD_ENABLE_NETWORK:
ok=mWifiConfigStore.enableNetwork(message.arg1,message.arg2 == 1);
replyToMessage(message,message.what,ok ? SUCCESS : FAILURE);
break;
case CMD_ENABLE_ALL_NETWORKS:
long time=android.os.SystemClock.elapsedRealtime();
if (time - mLastEnableAllNetworksTime > MIN_INTERVAL_ENABLE_ALL_NETWORKS_MS) {
mWifiConfigStore.enableAllNetworks();
mLastEnableAllNetworksTime=time;
}
break;
case WifiManager.DISABLE_NETWORK:
if (mWifiConfigStore.disableNetwork(message.arg1,WifiConfiguration.DISABLED_UNKNOWN_REASON) == true) {
replyToMessage(message,WifiManager.DISABLE_NETWORK_SUCCEEDED);
}
 else {
replyToMessage(message,WifiManager.DISABLE_NETWORK_FAILED,WifiManager.ERROR);
}
break;
case CMD_BLACKLIST_NETWORK:
mWifiNative.addToBlacklist((String)message.obj);
break;
case CMD_CLEAR_BLACKLIST:
mWifiNative.clearBlacklist();
break;
case CMD_SAVE_CONFIG:
ok=mWifiConfigStore.saveConfig();
replyToMessage(message,CMD_SAVE_CONFIG,ok ? SUCCESS : FAILURE);
IBackupManager ibm=IBackupManager.Stub.asInterface(ServiceManager.getService(Context.BACKUP_SERVICE));
if (ibm != null) {
try {
ibm.dataChanged("com.android.providers.settings");
}
 catch (Exception e) {
}
}
break;
case CMD_GET_CONFIGURED_NETWORKS:
replyToMessage(message,message.what,mWifiConfigStore.getConfiguredNetworks());
break;
case CMD_START_AP:
loge("Failed to start soft AP with a running supplicant");
setWifiApState(WIFI_AP_STATE_FAILED);
break;
case CMD_SET_SCAN_MODE:
mIsScanMode=(message.arg1 == SCAN_ONLY_MODE);
break;
case WifiManager.SAVE_NETWORK:
config=(WifiConfiguration)message.obj;
NetworkUpdateResult result=mWifiConfigStore.saveNetwork(config);
if (result.getNetworkId() != WifiConfiguration.INVALID_NETWORK_ID) {
replyToMessage(message,WifiManager.SAVE_NETWORK_SUCCEEDED);
}
 else {
loge("Failed to save network");
replyToMessage(message,WifiManager.SAVE_NETWORK_FAILED,WifiManager.ERROR);
}
break;
case WifiManager.FORGET_NETWORK:
if (mWifiConfigStore.forgetNetwork(message.arg1)) {
replyToMessage(message,WifiManager.FORGET_NETWORK_SUCCEEDED);
}
 else {
loge("Failed to forget network");
replyToMessage(message,WifiManager.FORGET_NETWORK_FAILED,WifiManager.ERROR);
}
break;
default :
return NOT_HANDLED;
}
return HANDLED;
}
