{
  if (DBG)   Log.d(TAG,getName() + message.toString() + "\n");
  WifiConfiguration config;
switch (message.what) {
case CMD_STOP_SUPPLICANT:
    EventLog.writeEvent(EVENTLOG_WIFI_EVENT_HANDLED,message.what);
  Log.d(TAG,"send terminate command to supplicant");
if (!WifiNative.terminateCommand()) {
  Log.e(TAG,"Failed to terminate cleanly, issue kill");
  WifiNative.killSupplicant();
}
handleNetworkDisconnect();
sendSupplicantConnectionChangedBroadcast(false);
mSupplicantStateTracker.resetSupplicantState();
transitionTo(mSupplicantStoppingState);
break;
case SUP_DISCONNECTION_EVENT:
EventLog.writeEvent(EVENTLOG_WIFI_EVENT_HANDLED,message.what);
Log.e(TAG,"Connection lost, restart supplicant");
WifiNative.killSupplicant();
WifiNative.closeSupplicantConnection();
handleNetworkDisconnect();
sendSupplicantConnectionChangedBroadcast(false);
mSupplicantStateTracker.resetSupplicantState();
transitionTo(mDriverLoadedState);
sendMessageDelayed(CMD_START_SUPPLICANT,SUPPLICANT_RESTART_INTERVAL_MSECS);
break;
case SCAN_RESULTS_EVENT:
setScanResults(WifiNative.scanResultsCommand());
sendScanResultsAvailableBroadcast();
break;
case CMD_PING_SUPPLICANT:
boolean ok=WifiNative.pingCommand();
mReplyChannel.replyToMessage(message,message.what,ok ? SUCCESS : FAILURE);
break;
case CMD_ADD_OR_UPDATE_NETWORK:
EventLog.writeEvent(EVENTLOG_WIFI_EVENT_HANDLED,message.what);
config=(WifiConfiguration)message.obj;
mReplyChannel.replyToMessage(message,CMD_ADD_OR_UPDATE_NETWORK,WifiConfigStore.addOrUpdateNetwork(config));
break;
case CMD_REMOVE_NETWORK:
EventLog.writeEvent(EVENTLOG_WIFI_EVENT_HANDLED,message.what);
ok=WifiConfigStore.removeNetwork(message.arg1);
mReplyChannel.replyToMessage(message,message.what,ok ? SUCCESS : FAILURE);
break;
case CMD_ENABLE_NETWORK:
EventLog.writeEvent(EVENTLOG_WIFI_EVENT_HANDLED,message.what);
ok=WifiConfigStore.enableNetwork(message.arg1,message.arg2 == 1);
mReplyChannel.replyToMessage(message,message.what,ok ? SUCCESS : FAILURE);
break;
case CMD_DISABLE_NETWORK:
EventLog.writeEvent(EVENTLOG_WIFI_EVENT_HANDLED,message.what);
ok=WifiConfigStore.disableNetwork(message.arg1);
mReplyChannel.replyToMessage(message,message.what,ok ? SUCCESS : FAILURE);
break;
case CMD_BLACKLIST_NETWORK:
EventLog.writeEvent(EVENTLOG_WIFI_EVENT_HANDLED,message.what);
WifiNative.addToBlacklistCommand((String)message.obj);
break;
case CMD_CLEAR_BLACKLIST:
WifiNative.clearBlacklistCommand();
break;
case CMD_SAVE_CONFIG:
ok=WifiConfigStore.saveConfig();
mReplyChannel.replyToMessage(message,CMD_SAVE_CONFIG,ok ? SUCCESS : FAILURE);
IBackupManager ibm=IBackupManager.Stub.asInterface(ServiceManager.getService(Context.BACKUP_SERVICE));
if (ibm != null) {
try {
ibm.dataChanged("com.android.providers.settings");
}
 catch (Exception e) {
}
}
break;
case CMD_START_AP:
Log.d(TAG,"Failed to start soft AP with a running supplicant");
EventLog.writeEvent(EVENTLOG_WIFI_EVENT_HANDLED,message.what);
setWifiApState(WIFI_AP_STATE_FAILED);
break;
case CMD_SET_SCAN_MODE:
mIsScanMode=(message.arg1 == SCAN_ONLY_MODE);
break;
case CMD_SAVE_NETWORK:
config=(WifiConfiguration)message.obj;
WifiConfigStore.saveNetwork(config);
break;
case CMD_FORGET_NETWORK:
WifiConfigStore.forgetNetwork(message.arg1);
break;
default :
return NOT_HANDLED;
}
return HANDLED;
}
