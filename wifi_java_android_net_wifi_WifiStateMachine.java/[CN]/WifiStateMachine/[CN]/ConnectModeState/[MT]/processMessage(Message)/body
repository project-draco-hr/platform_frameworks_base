{
  WifiConfiguration config;
  boolean ok;
switch (message.what) {
case WifiMonitor.AUTHENTICATION_FAILURE_EVENT:
    mSupplicantStateTracker.sendMessage(WifiMonitor.AUTHENTICATION_FAILURE_EVENT);
  break;
case WifiMonitor.SUPPLICANT_STATE_CHANGE_EVENT:
SupplicantState state=handleSupplicantStateChange(message);
if (!SupplicantState.isDriverActive(state)) {
if (mNetworkInfo.getState() != NetworkInfo.State.DISCONNECTED) {
  handleNetworkDisconnect();
}
log("Detected an interface down, restart driver");
transitionTo(mDriverStoppedState);
sendMessage(CMD_START_DRIVER);
break;
}
if (state == SupplicantState.DISCONNECTED && mNetworkInfo.getState() != NetworkInfo.State.DISCONNECTED) {
if (DBG) log("Missed CTRL-EVENT-DISCONNECTED, disconnect");
handleNetworkDisconnect();
transitionTo(mDisconnectedState);
}
break;
case WifiP2pService.DISCONNECT_WIFI_REQUEST:
if (message.arg1 == 1) {
mWifiNative.disconnect();
mTemporarilyDisconnectWifi=true;
}
 else {
mWifiNative.reconnect();
mTemporarilyDisconnectWifi=false;
}
break;
case CMD_ADD_OR_UPDATE_NETWORK:
config=(WifiConfiguration)message.obj;
replyToMessage(message,CMD_ADD_OR_UPDATE_NETWORK,mWifiConfigStore.addOrUpdateNetwork(config));
break;
case CMD_REMOVE_NETWORK:
ok=mWifiConfigStore.removeNetwork(message.arg1);
replyToMessage(message,message.what,ok ? SUCCESS : FAILURE);
break;
case CMD_ENABLE_NETWORK:
ok=mWifiConfigStore.enableNetwork(message.arg1,message.arg2 == 1);
replyToMessage(message,message.what,ok ? SUCCESS : FAILURE);
break;
case CMD_ENABLE_ALL_NETWORKS:
long time=android.os.SystemClock.elapsedRealtime();
if (time - mLastEnableAllNetworksTime > MIN_INTERVAL_ENABLE_ALL_NETWORKS_MS) {
mWifiConfigStore.enableAllNetworks();
mLastEnableAllNetworksTime=time;
}
break;
case WifiManager.DISABLE_NETWORK:
if (mWifiConfigStore.disableNetwork(message.arg1,WifiConfiguration.DISABLED_UNKNOWN_REASON) == true) {
replyToMessage(message,WifiManager.DISABLE_NETWORK_SUCCEEDED);
}
 else {
replyToMessage(message,WifiManager.DISABLE_NETWORK_FAILED,WifiManager.ERROR);
}
break;
case CMD_BLACKLIST_NETWORK:
mWifiNative.addToBlacklist((String)message.obj);
break;
case CMD_CLEAR_BLACKLIST:
mWifiNative.clearBlacklist();
break;
case CMD_SAVE_CONFIG:
ok=mWifiConfigStore.saveConfig();
replyToMessage(message,CMD_SAVE_CONFIG,ok ? SUCCESS : FAILURE);
IBackupManager ibm=IBackupManager.Stub.asInterface(ServiceManager.getService(Context.BACKUP_SERVICE));
if (ibm != null) {
try {
ibm.dataChanged("com.android.providers.settings");
}
 catch (Exception e) {
}
}
break;
case CMD_GET_CONFIGURED_NETWORKS:
replyToMessage(message,message.what,mWifiConfigStore.getConfiguredNetworks());
break;
case CMD_DISCONNECT:
mWifiNative.disconnect();
break;
case CMD_RECONNECT:
mWifiNative.reconnect();
break;
case CMD_REASSOCIATE:
mWifiNative.reassociate();
break;
case WifiManager.CONNECT_NETWORK:
int netId=message.arg1;
config=(WifiConfiguration)message.obj;
if (config != null) {
NetworkUpdateResult result=mWifiConfigStore.saveNetwork(config);
netId=result.getNetworkId();
}
if (mWifiConfigStore.selectNetwork(netId) && mWifiNative.reconnect()) {
mSupplicantStateTracker.sendMessage(WifiManager.CONNECT_NETWORK);
replyToMessage(message,WifiManager.CONNECT_NETWORK_SUCCEEDED);
transitionTo(mDisconnectingState);
}
 else {
loge("Failed to connect config: " + config + " netId: "+ netId);
replyToMessage(message,WifiManager.CONNECT_NETWORK_FAILED,WifiManager.ERROR);
break;
}
break;
case WifiManager.SAVE_NETWORK:
config=(WifiConfiguration)message.obj;
NetworkUpdateResult result=mWifiConfigStore.saveNetwork(config);
if (result.getNetworkId() != WifiConfiguration.INVALID_NETWORK_ID) {
replyToMessage(message,WifiManager.SAVE_NETWORK_SUCCEEDED);
}
 else {
loge("Failed to save network");
replyToMessage(message,WifiManager.SAVE_NETWORK_FAILED,WifiManager.ERROR);
}
break;
case WifiManager.FORGET_NETWORK:
if (mWifiConfigStore.forgetNetwork(message.arg1)) {
replyToMessage(message,WifiManager.FORGET_NETWORK_SUCCEEDED);
}
 else {
loge("Failed to forget network");
replyToMessage(message,WifiManager.FORGET_NETWORK_FAILED,WifiManager.ERROR);
}
break;
case WifiManager.START_WPS:
WpsInfo wpsInfo=(WpsInfo)message.obj;
WpsResult wpsResult;
switch (wpsInfo.setup) {
case WpsInfo.PBC:
wpsResult=mWifiConfigStore.startWpsPbc(wpsInfo);
break;
case WpsInfo.KEYPAD:
wpsResult=mWifiConfigStore.startWpsWithPinFromAccessPoint(wpsInfo);
break;
case WpsInfo.DISPLAY:
wpsResult=mWifiConfigStore.startWpsWithPinFromDevice(wpsInfo);
break;
default :
wpsResult=new WpsResult(Status.FAILURE);
loge("Invalid setup for WPS");
break;
}
if (wpsResult.status == Status.SUCCESS) {
replyToMessage(message,WifiManager.START_WPS_SUCCEEDED,wpsResult);
transitionTo(mWpsRunningState);
}
 else {
loge("Failed to start WPS with config " + wpsInfo.toString());
replyToMessage(message,WifiManager.WPS_FAILED,WifiManager.ERROR);
}
break;
case WifiMonitor.NETWORK_CONNECTION_EVENT:
if (DBG) log("Network connection established");
mLastNetworkId=message.arg1;
mLastBssid=(String)message.obj;
mWifiInfo.setBSSID(mLastBssid);
mWifiInfo.setNetworkId(mLastNetworkId);
setNetworkDetailedState(DetailedState.OBTAINING_IPADDR);
sendNetworkStateChangeBroadcast(mLastBssid);
transitionTo(mObtainingIpState);
break;
case WifiMonitor.NETWORK_DISCONNECTION_EVENT:
if (DBG) log("Network connection lost");
handleNetworkDisconnect();
transitionTo(mDisconnectedState);
break;
default :
return NOT_HANDLED;
}
return HANDLED;
}
