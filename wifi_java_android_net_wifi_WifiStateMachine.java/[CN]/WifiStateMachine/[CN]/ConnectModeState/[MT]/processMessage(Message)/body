{
  if (DBG)   Log.d(TAG,getName() + message.toString() + "\n");
  SyncParams syncParams;
  StateChangeResult stateChangeResult;
switch (message.what) {
case PASSWORD_MAY_BE_INCORRECT_EVENT:
    mPasswordKeyMayBeIncorrect=true;
  break;
case SUPPLICANT_STATE_CHANGE_EVENT:
stateChangeResult=(StateChangeResult)message.obj;
mSupplicantStateTracker.handleEvent(stateChangeResult);
break;
case CMD_START_SCAN:
if (message.arg2 == SYNCHRONOUS_CALL) {
syncParams=(SyncParams)message.obj;
syncParams.mSyncReturn.boolValue=true;
notifyOnMsgObject(message);
}
Message newMsg=obtainMessage();
newMsg.copyFrom(message);
mSupplicantStateTracker.sendMessage(newMsg);
break;
case CMD_DISCONNECT:
if (message.arg2 == SYNCHRONOUS_CALL) {
syncParams=(SyncParams)message.obj;
syncParams.mSyncReturn.boolValue=WifiNative.disconnectCommand();
notifyOnMsgObject(message);
}
 else {
WifiNative.disconnectCommand();
}
break;
case CMD_RECONNECT:
if (message.arg2 == SYNCHRONOUS_CALL) {
syncParams=(SyncParams)message.obj;
syncParams.mSyncReturn.boolValue=WifiNative.reconnectCommand();
notifyOnMsgObject(message);
}
 else {
WifiNative.reconnectCommand();
}
break;
case CMD_REASSOCIATE:
if (message.arg2 == SYNCHRONOUS_CALL) {
syncParams=(SyncParams)message.obj;
syncParams.mSyncReturn.boolValue=WifiNative.reassociateCommand();
notifyOnMsgObject(message);
}
 else {
WifiNative.reassociateCommand();
}
break;
case SCAN_RESULTS_EVENT:
WifiNative.setScanResultHandlingCommand(CONNECT_MODE);
return NOT_HANDLED;
case NETWORK_CONNECTION_EVENT:
Log.d(TAG,"Network connection established");
stateChangeResult=(StateChangeResult)message.obj;
mWifiInfo.setBSSID(mLastBssid=stateChangeResult.BSSID);
mWifiInfo.setNetworkId(stateChangeResult.networkId);
mLastNetworkId=stateChangeResult.networkId;
setDetailedState(DetailedState.OBTAINING_IPADDR);
sendNetworkStateChangeBroadcast(mLastBssid);
transitionTo(mConnectingState);
break;
case NETWORK_DISCONNECTION_EVENT:
Log.d(TAG,"Network connection lost");
handleNetworkDisconnect();
transitionTo(mDisconnectedState);
break;
case CMD_GET_RSSI:
syncParams=(SyncParams)message.obj;
syncParams.mSyncReturn.intValue=WifiNative.getRssiCommand();
notifyOnMsgObject(message);
break;
case CMD_GET_RSSI_APPROX:
syncParams=(SyncParams)message.obj;
syncParams.mSyncReturn.intValue=WifiNative.getRssiApproxCommand();
notifyOnMsgObject(message);
break;
case CMD_GET_LINK_SPEED:
syncParams=(SyncParams)message.obj;
syncParams.mSyncReturn.intValue=WifiNative.getLinkSpeedCommand();
notifyOnMsgObject(message);
break;
default :
return NOT_HANDLED;
}
EventLog.writeEvent(EVENTLOG_WIFI_EVENT_HANDLED,message.what);
return HANDLED;
}
