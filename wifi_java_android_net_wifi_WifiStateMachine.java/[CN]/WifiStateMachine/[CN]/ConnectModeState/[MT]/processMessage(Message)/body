{
  if (DBG)   log(getName() + message.toString() + "\n");
  StateChangeResult stateChangeResult;
switch (message.what) {
case WifiMonitor.AUTHENTICATION_FAILURE_EVENT:
    mSupplicantStateTracker.sendMessage(WifiMonitor.AUTHENTICATION_FAILURE_EVENT);
  break;
case WifiMonitor.SUPPLICANT_STATE_CHANGE_EVENT:
SupplicantState state=handleSupplicantStateChange(message);
if (!SupplicantState.isDriverActive(state)) {
if (mNetworkInfo.getState() != NetworkInfo.State.DISCONNECTED) {
  handleNetworkDisconnect();
}
log("Detected an interface down, restart driver");
transitionTo(mDriverStoppedState);
sendMessage(CMD_START_DRIVER);
break;
}
if (state == SupplicantState.DISCONNECTED && mNetworkInfo.getState() != NetworkInfo.State.DISCONNECTED) {
if (DBG) log("Missed CTRL-EVENT-DISCONNECTED, disconnect");
handleNetworkDisconnect();
transitionTo(mDisconnectedState);
}
break;
case WifiP2pService.DISCONNECT_WIFI_REQUEST:
if (message.arg1 == 1) {
mWifiNative.disconnect();
mTemporarilyDisconnectWifi=true;
}
 else {
mWifiNative.reconnect();
mTemporarilyDisconnectWifi=false;
}
break;
case CMD_DISCONNECT:
mWifiNative.disconnect();
break;
case CMD_RECONNECT:
mWifiNative.reconnect();
break;
case CMD_REASSOCIATE:
mWifiNative.reassociate();
break;
case WifiManager.CONNECT_NETWORK:
int netId=message.arg1;
WifiConfiguration config=(WifiConfiguration)message.obj;
if (config != null) {
NetworkUpdateResult result=mWifiConfigStore.saveNetwork(config);
netId=result.getNetworkId();
}
if (mWifiConfigStore.selectNetwork(netId) && mWifiNative.reconnect()) {
mSupplicantStateTracker.sendMessage(WifiManager.CONNECT_NETWORK);
replyToMessage(message,WifiManager.CONNECT_NETWORK_SUCCEEDED);
transitionTo(mDisconnectingState);
}
 else {
loge("Failed to connect config: " + config + " netId: "+ netId);
replyToMessage(message,WifiManager.CONNECT_NETWORK_FAILED,WifiManager.ERROR);
break;
}
break;
case WifiManager.START_WPS:
WpsInfo wpsInfo=(WpsInfo)message.obj;
WpsResult result;
switch (wpsInfo.setup) {
case WpsInfo.PBC:
result=mWifiConfigStore.startWpsPbc(wpsInfo);
break;
case WpsInfo.KEYPAD:
result=mWifiConfigStore.startWpsWithPinFromAccessPoint(wpsInfo);
break;
case WpsInfo.DISPLAY:
result=mWifiConfigStore.startWpsWithPinFromDevice(wpsInfo);
break;
default :
result=new WpsResult(Status.FAILURE);
loge("Invalid setup for WPS");
break;
}
if (result.status == Status.SUCCESS) {
replyToMessage(message,WifiManager.START_WPS_SUCCEEDED,result);
transitionTo(mWpsRunningState);
}
 else {
loge("Failed to start WPS with config " + wpsInfo.toString());
replyToMessage(message,WifiManager.WPS_FAILED,WifiManager.ERROR);
}
break;
case WifiMonitor.NETWORK_CONNECTION_EVENT:
if (DBG) log("Network connection established");
mLastNetworkId=message.arg1;
mLastBssid=(String)message.obj;
mWifiInfo.setBSSID(mLastBssid);
mWifiInfo.setNetworkId(mLastNetworkId);
setNetworkDetailedState(DetailedState.OBTAINING_IPADDR);
sendNetworkStateChangeBroadcast(mLastBssid);
transitionTo(mObtainingIpState);
break;
case WifiMonitor.NETWORK_DISCONNECTION_EVENT:
if (DBG) log("Network connection lost");
handleNetworkDisconnect();
transitionTo(mDisconnectedState);
break;
default :
return NOT_HANDLED;
}
return HANDLED;
}
