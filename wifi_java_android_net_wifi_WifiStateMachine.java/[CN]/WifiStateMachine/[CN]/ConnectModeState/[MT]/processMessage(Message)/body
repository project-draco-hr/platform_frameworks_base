{
  if (DBG)   Log.d(TAG,getName() + message.toString() + "\n");
  SyncParams syncParams;
  StateChangeResult stateChangeResult;
switch (message.what) {
case PASSWORD_MAY_BE_INCORRECT_EVENT:
    mPasswordKeyMayBeIncorrect=true;
  break;
case SUPPLICANT_STATE_CHANGE_EVENT:
stateChangeResult=(StateChangeResult)message.obj;
mSupplicantStateTracker.handleEvent(stateChangeResult);
break;
case CMD_START_SCAN:
Message newMsg=obtainMessage();
newMsg.copyFrom(message);
mSupplicantStateTracker.sendMessage(newMsg);
break;
case CMD_DISCONNECT:
WifiNative.disconnectCommand();
break;
case CMD_RECONNECT:
WifiNative.reconnectCommand();
break;
case CMD_REASSOCIATE:
WifiNative.reassociateCommand();
break;
case CMD_CONNECT_NETWORK:
int netId=message.arg1;
WifiConfiguration config=(WifiConfiguration)message.obj;
if (config != null) {
netId=addOrUpdateNetworkNative(config);
}
if (mLastPriority == -1 || mLastPriority > 1000000) {
List<WifiConfiguration> configList=getConfiguredNetworksNative();
for (WifiConfiguration conf : configList) {
if (conf.networkId != -1) {
conf.priority=0;
addOrUpdateNetworkNative(conf);
}
}
mLastPriority=0;
}
config=new WifiConfiguration();
config.networkId=netId;
config.priority=++mLastPriority;
addOrUpdateNetworkNative(config);
WifiNative.saveConfigCommand();
WifiNative.enableNetworkCommand(netId,true);
WifiNative.reconnectCommand();
mEnableAllNetworks=true;
break;
case SCAN_RESULTS_EVENT:
WifiNative.setScanResultHandlingCommand(CONNECT_MODE);
return NOT_HANDLED;
case NETWORK_CONNECTION_EVENT:
Log.d(TAG,"Network connection established");
stateChangeResult=(StateChangeResult)message.obj;
mWifiInfo.setSSID(fetchSSID());
mWifiInfo.setBSSID(mLastBssid=stateChangeResult.BSSID);
mWifiInfo.setNetworkId(stateChangeResult.networkId);
mLastNetworkId=stateChangeResult.networkId;
enableAllNetworks();
setDetailedState(DetailedState.OBTAINING_IPADDR);
sendNetworkStateChangeBroadcast(mLastBssid);
transitionTo(mConnectingState);
break;
case NETWORK_DISCONNECTION_EVENT:
Log.d(TAG,"Network connection lost");
enableAllNetworks();
handleNetworkDisconnect();
transitionTo(mDisconnectedState);
break;
case CMD_GET_RSSI:
syncParams=(SyncParams)message.obj;
syncParams.mSyncReturn.intValue=WifiNative.getRssiCommand();
notifyOnMsgObject(message);
break;
case CMD_GET_RSSI_APPROX:
syncParams=(SyncParams)message.obj;
syncParams.mSyncReturn.intValue=WifiNative.getRssiApproxCommand();
notifyOnMsgObject(message);
break;
case CMD_GET_LINK_SPEED:
syncParams=(SyncParams)message.obj;
syncParams.mSyncReturn.intValue=WifiNative.getLinkSpeedCommand();
notifyOnMsgObject(message);
break;
default :
return NOT_HANDLED;
}
EventLog.writeEvent(EVENTLOG_WIFI_EVENT_HANDLED,message.what);
return HANDLED;
}
