{
  if (DBG)   Log.d(TAG,getName() + message.toString() + "\n");
  StateChangeResult stateChangeResult;
switch (message.what) {
case PASSWORD_MAY_BE_INCORRECT_EVENT:
    mSupplicantStateTracker.sendMessage(PASSWORD_MAY_BE_INCORRECT_EVENT);
  break;
case WPS_OVERLAP_EVENT:
sendErrorBroadcast(WifiManager.WPS_OVERLAP_ERROR);
break;
case SUPPLICANT_STATE_CHANGE_EVENT:
stateChangeResult=(StateChangeResult)message.obj;
SupplicantState state=stateChangeResult.state;
EventLog.writeEvent(EVENTLOG_SUPPLICANT_STATE_CHANGED,state.ordinal());
mWifiInfo.setSupplicantState(state);
mWifiInfo.setNetworkId(stateChangeResult.networkId);
if (state == SupplicantState.ASSOCIATING) {
mWifiInfo.setBSSID(stateChangeResult.BSSID);
}
mSupplicantStateTracker.sendMessage(Message.obtain(message));
mWpsStateMachine.sendMessage(Message.obtain(message));
break;
case CMD_DISCONNECT:
WifiNative.disconnectCommand();
break;
case CMD_RECONNECT:
WifiNative.reconnectCommand();
break;
case CMD_REASSOCIATE:
WifiNative.reassociateCommand();
break;
case CMD_CONNECT_NETWORK:
int netId=message.arg1;
WifiConfiguration config=(WifiConfiguration)message.obj;
if (config != null) {
WifiConfigStore.selectNetwork(config);
}
 else {
WifiConfigStore.selectNetwork(netId);
}
mSupplicantStateTracker.sendMessage(CMD_CONNECT_NETWORK);
WifiNative.reconnectCommand();
transitionTo(mDisconnectingState);
break;
case CMD_START_WPS:
mWpsStateMachine.sendMessage(Message.obtain(message));
transitionTo(mWaitForWpsCompletionState);
break;
case SCAN_RESULTS_EVENT:
WifiNative.setScanResultHandlingCommand(CONNECT_MODE);
return NOT_HANDLED;
case NETWORK_CONNECTION_EVENT:
Log.d(TAG,"Network connection established");
mLastNetworkId=message.arg1;
mLastBssid=(String)message.obj;
mWifiInfo.setSSID(fetchSSID());
mWifiInfo.setBSSID(mLastBssid);
mWifiInfo.setNetworkId(mLastNetworkId);
setNetworkDetailedState(DetailedState.OBTAINING_IPADDR);
sendNetworkStateChangeBroadcast(mLastBssid);
transitionTo(mConnectingState);
break;
case NETWORK_DISCONNECTION_EVENT:
Log.d(TAG,"Network connection lost");
handleNetworkDisconnect();
transitionTo(mDisconnectedState);
break;
default :
return NOT_HANDLED;
}
EventLog.writeEvent(EVENTLOG_WIFI_EVENT_HANDLED,message.what);
return HANDLED;
}
