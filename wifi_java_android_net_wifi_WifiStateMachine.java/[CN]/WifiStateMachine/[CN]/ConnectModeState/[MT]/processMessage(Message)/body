{
  if (DBG)   Log.d(TAG,getName() + message.toString() + "\n");
  StateChangeResult stateChangeResult;
switch (message.what) {
case PASSWORD_MAY_BE_INCORRECT_EVENT:
    mPasswordKeyMayBeIncorrect=true;
  break;
case SUPPLICANT_STATE_CHANGE_EVENT:
stateChangeResult=(StateChangeResult)message.obj;
mSupplicantStateTracker.handleEvent(stateChangeResult);
break;
case CMD_START_SCAN:
Message newMsg=obtainMessage();
newMsg.copyFrom(message);
mSupplicantStateTracker.sendMessage(newMsg);
break;
case CMD_DISCONNECT:
WifiNative.disconnectCommand();
break;
case CMD_RECONNECT:
WifiNative.reconnectCommand();
break;
case CMD_REASSOCIATE:
WifiNative.reassociateCommand();
break;
case CMD_CONNECT_NETWORK:
int netId=message.arg1;
WifiConfiguration config=(WifiConfiguration)message.obj;
if (config != null) {
WifiConfigStore.selectNetwork(config);
}
 else {
WifiConfigStore.selectNetwork(netId);
}
mEnableAllNetworks=true;
WifiNative.reconnectCommand();
transitionTo(mDisconnectingState);
break;
case CMD_START_WPS_PBC:
String bssid=(String)message.obj;
boolean success=WifiConfigStore.startWpsPbc(bssid);
if (success) {
mWpsStarted=true;
transitionTo(mDisconnectingState);
}
break;
case CMD_START_WPS_PIN_FROM_AP:
bssid=(String)message.obj;
int apPin=message.arg1;
success=WifiConfigStore.startWpsWithPinFromAccessPoint(bssid,apPin);
if (success) {
mWpsStarted=true;
transitionTo(mDisconnectingState);
}
break;
case CMD_START_WPS_PIN_FROM_DEVICE:
bssid=(String)message.obj;
int pin=WifiConfigStore.startWpsWithPinFromDevice(bssid);
success=(pin != FAILURE);
mReplyChannel.replyToMessage(message,CMD_START_WPS_PIN_FROM_DEVICE,pin);
if (success) {
mWpsStarted=true;
transitionTo(mDisconnectingState);
}
break;
case SCAN_RESULTS_EVENT:
WifiNative.setScanResultHandlingCommand(CONNECT_MODE);
return NOT_HANDLED;
case NETWORK_CONNECTION_EVENT:
Log.d(TAG,"Network connection established");
stateChangeResult=(StateChangeResult)message.obj;
mWifiInfo.setSSID(fetchSSID());
mWifiInfo.setBSSID(mLastBssid=stateChangeResult.BSSID);
mWifiInfo.setNetworkId(stateChangeResult.networkId);
mLastNetworkId=stateChangeResult.networkId;
setDetailedState(DetailedState.OBTAINING_IPADDR);
sendNetworkStateChangeBroadcast(mLastBssid);
transitionTo(mConnectingState);
break;
case NETWORK_DISCONNECTION_EVENT:
Log.d(TAG,"Network connection lost");
handleNetworkDisconnect();
transitionTo(mDisconnectedState);
break;
default :
return NOT_HANDLED;
}
EventLog.writeEvent(EVENTLOG_WIFI_EVENT_HANDLED,message.what);
return HANDLED;
}
