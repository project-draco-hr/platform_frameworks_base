{
  if (DBG)   Log.d(TAG,getName() + message.toString() + "\n");
  SyncParams syncParams;
switch (message.what) {
case CMD_PING_SUPPLICANT:
case CMD_START_SCAN:
case CMD_DISCONNECT:
case CMD_RECONNECT:
case CMD_REASSOCIATE:
case CMD_REMOVE_NETWORK:
case CMD_ENABLE_NETWORK:
case CMD_DISABLE_NETWORK:
case CMD_ADD_OR_UPDATE_NETWORK:
case CMD_GET_RSSI:
case CMD_GET_RSSI_APPROX:
case CMD_GET_LINK_SPEED:
case CMD_GET_MAC_ADDR:
case CMD_SAVE_CONFIG:
case CMD_CONNECTION_STATUS:
case CMD_GET_NETWORK_CONFIG:
    if (message.arg2 == SYNCHRONOUS_CALL) {
      syncParams=(SyncParams)message.obj;
      syncParams.mSyncReturn.boolValue=false;
      syncParams.mSyncReturn.intValue=-1;
      syncParams.mSyncReturn.stringValue=null;
      syncParams.mSyncReturn.configList=null;
      notifyOnMsgObject(message);
    }
  break;
case CMD_ENABLE_RSSI_POLL:
mEnableRssiPolling=(message.arg1 == 1);
mSupplicantStateTracker.sendMessage(CMD_ENABLE_RSSI_POLL);
break;
case CMD_LOAD_DRIVER:
case CMD_UNLOAD_DRIVER:
case CMD_START_SUPPLICANT:
case CMD_STOP_SUPPLICANT:
case CMD_START_DRIVER:
case CMD_STOP_DRIVER:
case CMD_START_AP:
case CMD_STOP_AP:
case CMD_RECONFIGURE_IP:
case SUP_CONNECTION_EVENT:
case SUP_DISCONNECTION_EVENT:
case DRIVER_START_EVENT:
case DRIVER_STOP_EVENT:
case NETWORK_CONNECTION_EVENT:
case NETWORK_DISCONNECTION_EVENT:
case SCAN_RESULTS_EVENT:
case SUPPLICANT_STATE_CHANGE_EVENT:
case PASSWORD_MAY_BE_INCORRECT_EVENT:
case CMD_BLACKLIST_NETWORK:
case CMD_CLEAR_BLACKLIST:
case CMD_SET_SCAN_MODE:
case CMD_SET_SCAN_TYPE:
case CMD_SET_POWER_MODE:
case CMD_SET_BLUETOOTH_COEXISTENCE:
case CMD_SET_BLUETOOTH_SCAN_MODE:
case CMD_SET_NUM_ALLOWED_CHANNELS:
case CMD_REQUEST_CM_WAKELOCK:
case CMD_CONNECT_NETWORK:
case CMD_SAVE_NETWORK:
case CMD_FORGET_NETWORK:
break;
default :
Log.e(TAG,"Error! unhandled message" + message);
break;
}
return HANDLED;
}
