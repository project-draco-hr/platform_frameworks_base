{
  if (DBG)   log(getName() + message.toString() + "\n");
switch (message.what) {
case AsyncChannel.CMD_CHANNEL_HALF_CONNECTED:
    if (message.arg1 == AsyncChannel.STATUS_SUCCESSFUL) {
      mWifiP2pChannel.sendMessage(AsyncChannel.CMD_CHANNEL_FULL_CONNECTION);
    }
 else {
      loge("WifiP2pService connection failure, error=" + message.arg1);
    }
  break;
case AsyncChannel.CMD_CHANNEL_DISCONNECTED:
loge("WifiP2pService channel lost, message.arg1 =" + message.arg1);
break;
case CMD_BLUETOOTH_ADAPTER_STATE_CHANGE:
mBluetoothConnectionActive=(message.arg1 != BluetoothAdapter.STATE_DISCONNECTED);
break;
case CMD_PING_SUPPLICANT:
case CMD_ENABLE_NETWORK:
case CMD_ADD_OR_UPDATE_NETWORK:
case CMD_REMOVE_NETWORK:
case CMD_SAVE_CONFIG:
replyToMessage(message,message.what,FAILURE);
break;
case CMD_GET_CONFIGURED_NETWORKS:
replyToMessage(message,message.what,mWifiConfigStore.getConfiguredNetworks());
break;
case CMD_ENABLE_RSSI_POLL:
mEnableRssiPolling=(message.arg1 == 1);
break;
case CMD_ENABLE_BACKGROUND_SCAN:
mEnableBackgroundScan=(message.arg1 == 1);
break;
case CMD_SET_HIGH_PERF_MODE:
mHighPerfMode=(message.arg1 == 1);
break;
case CMD_LOAD_DRIVER:
case CMD_UNLOAD_DRIVER:
case CMD_START_SUPPLICANT:
case CMD_STOP_SUPPLICANT:
case CMD_STOP_SUPPLICANT_FAILED:
case CMD_START_DRIVER:
case CMD_STOP_DRIVER:
case CMD_DELAYED_STOP_DRIVER:
case CMD_START_AP:
case CMD_START_AP_SUCCESS:
case CMD_START_AP_FAILURE:
case CMD_STOP_AP:
case CMD_TETHER_STATE_CHANGE:
case CMD_TETHER_NOTIFICATION_TIMED_OUT:
case CMD_START_SCAN:
case CMD_DISCONNECT:
case CMD_RECONNECT:
case CMD_REASSOCIATE:
case WifiMonitor.SUP_CONNECTION_EVENT:
case WifiMonitor.SUP_DISCONNECTION_EVENT:
case WifiMonitor.NETWORK_CONNECTION_EVENT:
case WifiMonitor.NETWORK_DISCONNECTION_EVENT:
case WifiMonitor.SCAN_RESULTS_EVENT:
case WifiMonitor.SUPPLICANT_STATE_CHANGE_EVENT:
case WifiMonitor.AUTHENTICATION_FAILURE_EVENT:
case WifiMonitor.WPS_OVERLAP_EVENT:
case CMD_BLACKLIST_NETWORK:
case CMD_CLEAR_BLACKLIST:
case CMD_SET_SCAN_MODE:
case CMD_SET_SCAN_TYPE:
case CMD_SET_COUNTRY_CODE:
case CMD_SET_FREQUENCY_BAND:
case CMD_RSSI_POLL:
case CMD_ENABLE_ALL_NETWORKS:
case DhcpStateMachine.CMD_PRE_DHCP_ACTION:
case DhcpStateMachine.CMD_POST_DHCP_ACTION:
case CMD_SET_AP_CONFIG:
case CMD_SET_AP_CONFIG_COMPLETED:
case CMD_REQUEST_AP_CONFIG:
case CMD_RESPONSE_AP_CONFIG:
case WifiWatchdogStateMachine.POOR_LINK_DETECTED:
case WifiWatchdogStateMachine.GOOD_LINK_DETECTED:
case CMD_CLEAR_SUSPEND_OPTIMIZATIONS:
case CMD_NO_NETWORKS_PERIODIC_SCAN:
break;
case CMD_SET_SUSPEND_OPTIMIZATIONS:
mSuspendWakeLock.release();
break;
case WifiMonitor.DRIVER_HUNG_EVENT:
setWifiEnabled(false);
setWifiEnabled(true);
break;
case WifiManager.CONNECT_NETWORK:
replyToMessage(message,WifiManager.CONNECT_NETWORK_FAILED,WifiManager.BUSY);
break;
case WifiManager.FORGET_NETWORK:
replyToMessage(message,WifiManager.FORGET_NETWORK_FAILED,WifiManager.BUSY);
break;
case WifiManager.SAVE_NETWORK:
replyToMessage(message,WifiManager.SAVE_NETWORK_FAILED,WifiManager.BUSY);
break;
case WifiManager.START_WPS:
replyToMessage(message,WifiManager.WPS_FAILED,WifiManager.BUSY);
break;
case WifiManager.CANCEL_WPS:
replyToMessage(message,WifiManager.CANCEL_WPS_FAILED,WifiManager.BUSY);
break;
case WifiManager.DISABLE_NETWORK:
replyToMessage(message,WifiManager.DISABLE_NETWORK_FAILED,WifiManager.BUSY);
break;
case WifiWatchdogStateMachine.RSSI_FETCH:
replyToMessage(message,WifiWatchdogStateMachine.RSSI_FETCH_FAILED);
break;
default :
loge("Error! unhandled message" + message);
break;
}
return HANDLED;
}
