{
  super("WifiStateMachine");
  mContext=context;
  mInterfaceName=wlanInterface;
  mNetworkInfo=new NetworkInfo(ConnectivityManager.TYPE_WIFI,0,NETWORKTYPE,"");
  mBatteryStats=IBatteryStats.Stub.asInterface(ServiceManager.getService("batteryinfo"));
  IBinder b=ServiceManager.getService(Context.NETWORKMANAGEMENT_SERVICE);
  mNwService=INetworkManagementService.Stub.asInterface(b);
  mP2pSupported=mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_WIFI_DIRECT);
  mWifiNative=new WifiNative(mInterfaceName);
  mWifiConfigStore=new WifiConfigStore(context,mWifiNative);
  mWifiMonitor=new WifiMonitor(this,mWifiNative);
  mWifiInfo=new WifiInfo();
  mSupplicantStateTracker=new SupplicantStateTracker(context,this,mWifiConfigStore,getHandler());
  mLinkProperties=new LinkProperties();
  WifiApConfigStore wifiApConfigStore=WifiApConfigStore.makeWifiApConfigStore(context,getHandler());
  wifiApConfigStore.loadApConfiguration();
  mWifiApConfigChannel.connectSync(mContext,getHandler(),wifiApConfigStore.getMessenger());
  mNetworkInfo.setIsAvailable(false);
  mLinkProperties.clear();
  mLastBssid=null;
  mLastNetworkId=WifiConfiguration.INVALID_NETWORK_ID;
  mLastSignalLevel=-1;
  mAlarmManager=(AlarmManager)mContext.getSystemService(Context.ALARM_SERVICE);
  Intent scanIntent=new Intent(ACTION_START_SCAN,null);
  mScanIntent=PendingIntent.getBroadcast(mContext,SCAN_REQUEST,scanIntent,0);
  mDefaultFrameworkScanIntervalMs=mContext.getResources().getInteger(R.integer.config_wifi_framework_scan_interval);
  mDriverStopDelayMs=mContext.getResources().getInteger(R.integer.config_wifi_driver_stop_delay);
  mBackgroundScanSupported=mContext.getResources().getBoolean(R.bool.config_wifi_background_scan_support);
  mPrimaryDeviceType=mContext.getResources().getString(R.string.config_wifi_p2p_device_type);
  mUserWantsSuspendOpt.set(Settings.Global.getInt(mContext.getContentResolver(),Settings.Global.WIFI_SUSPEND_OPTIMIZATIONS_ENABLED,1) == 1);
  mContext.registerReceiver(new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      ArrayList<String> available=intent.getStringArrayListExtra(ConnectivityManager.EXTRA_AVAILABLE_TETHER);
      ArrayList<String> active=intent.getStringArrayListExtra(ConnectivityManager.EXTRA_ACTIVE_TETHER);
      sendMessage(CMD_TETHER_STATE_CHANGE,new TetherStateChange(available,active));
    }
  }
,new IntentFilter(ConnectivityManager.ACTION_TETHER_STATE_CHANGED));
  mContext.registerReceiver(new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      startScan(false);
    }
  }
,new IntentFilter(ACTION_START_SCAN));
  IntentFilter screenFilter=new IntentFilter();
  screenFilter.addAction(Intent.ACTION_SCREEN_ON);
  screenFilter.addAction(Intent.ACTION_SCREEN_OFF);
  BroadcastReceiver screenReceiver=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      String action=intent.getAction();
      if (action.equals(Intent.ACTION_SCREEN_ON)) {
        handleScreenStateChanged(true);
      }
 else       if (action.equals(Intent.ACTION_SCREEN_OFF)) {
        handleScreenStateChanged(false);
      }
    }
  }
;
  mContext.registerReceiver(screenReceiver,screenFilter);
  mContext.registerReceiver(new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      int counter=intent.getIntExtra(DELAYED_STOP_COUNTER,0);
      sendMessage(obtainMessage(CMD_DELAYED_STOP_DRIVER,counter,0));
    }
  }
,new IntentFilter(ACTION_DELAYED_DRIVER_STOP));
  mContext.getContentResolver().registerContentObserver(Settings.Global.getUriFor(Settings.Global.WIFI_SUSPEND_OPTIMIZATIONS_ENABLED),false,new ContentObserver(getHandler()){
    @Override public void onChange(    boolean selfChange){
      mUserWantsSuspendOpt.set(Settings.Global.getInt(mContext.getContentResolver(),Settings.Global.WIFI_SUSPEND_OPTIMIZATIONS_ENABLED,1) == 1);
    }
  }
);
  mScanResultCache=new LruCache<String,ScanResult>(SCAN_RESULT_CACHE_SIZE);
  PowerManager powerManager=(PowerManager)mContext.getSystemService(Context.POWER_SERVICE);
  mWakeLock=powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,getName());
  mSuspendWakeLock=powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,"WifiSuspend");
  mSuspendWakeLock.setReferenceCounted(false);
  addState(mDefaultState);
  addState(mInitialState,mDefaultState);
  addState(mDriverUnloadingState,mDefaultState);
  addState(mDriverUnloadedState,mDefaultState);
  addState(mDriverFailedState,mDriverUnloadedState);
  addState(mDriverLoadingState,mDefaultState);
  addState(mDriverLoadedState,mDefaultState);
  addState(mSupplicantStartingState,mDefaultState);
  addState(mSupplicantStartedState,mDefaultState);
  addState(mDriverStartingState,mSupplicantStartedState);
  addState(mDriverStartedState,mSupplicantStartedState);
  addState(mScanModeState,mDriverStartedState);
  addState(mConnectModeState,mDriverStartedState);
  addState(mL2ConnectedState,mConnectModeState);
  addState(mObtainingIpState,mL2ConnectedState);
  addState(mVerifyingLinkState,mL2ConnectedState);
  addState(mCaptivePortalCheckState,mL2ConnectedState);
  addState(mConnectedState,mL2ConnectedState);
  addState(mDisconnectingState,mConnectModeState);
  addState(mDisconnectedState,mConnectModeState);
  addState(mWpsRunningState,mConnectModeState);
  addState(mWaitForP2pDisableState,mSupplicantStartedState);
  addState(mDriverStoppingState,mSupplicantStartedState);
  addState(mDriverStoppedState,mSupplicantStartedState);
  addState(mSupplicantStoppingState,mDefaultState);
  addState(mSoftApStartingState,mDefaultState);
  addState(mSoftApStartedState,mDefaultState);
  addState(mTetheringState,mSoftApStartedState);
  addState(mTetheredState,mSoftApStartedState);
  addState(mSoftApStoppingState,mDefaultState);
  setInitialState(mInitialState);
  setLogRecSize(100);
  setLogOnlyTransitions(true);
  if (DBG)   setDbg(true);
  start();
}
