{
  ApfGenerator gen=new ApfGenerator();
  assertPass(gen);
  gen=new ApfGenerator();
  gen.addJump(gen.PASS_LABEL);
  byte[] program=gen.generate();
  assertEquals(1,program.length);
  assertEquals((14 << 3) | (0 << 1) | 0,program[0]);
  assertPass(program,new byte[MIN_PKT_SIZE],0);
  gen=new ApfGenerator();
  gen.addJump(gen.DROP_LABEL);
  program=gen.generate();
  assertEquals(2,program.length);
  assertEquals((14 << 3) | (1 << 1) | 0,program[0]);
  assertEquals(1,program[1]);
  assertDrop(program,new byte[15],15);
  gen=new ApfGenerator();
  gen.addJumpIfR0Equals(0,gen.DROP_LABEL);
  assertDrop(gen);
  gen=new ApfGenerator();
  gen.addJumpIfR0NotEquals(0,gen.DROP_LABEL);
  assertPass(gen);
  gen=new ApfGenerator();
  gen.addLoadImmediate(Register.R0,1);
  gen.addJumpIfR0NotEquals(0,gen.DROP_LABEL);
  assertDrop(gen);
  gen=new ApfGenerator();
  gen.addJumpIfR0EqualsR1(gen.DROP_LABEL);
  assertDrop(gen);
  gen=new ApfGenerator();
  gen.addJumpIfR0NotEqualsR1(gen.DROP_LABEL);
  assertPass(gen);
  gen=new ApfGenerator();
  gen.addLoadImmediate(Register.R0,1);
  gen.addJumpIfR0NotEqualsR1(gen.DROP_LABEL);
  assertDrop(gen);
  gen=new ApfGenerator();
  gen.addLoadImmediate(Register.R0,1234567890);
  gen.addJumpIfR0Equals(1234567890,gen.DROP_LABEL);
  assertDrop(gen);
  gen=new ApfGenerator();
  gen.addAdd(1234567890);
  gen.addJumpIfR0Equals(1234567890,gen.DROP_LABEL);
  assertDrop(gen);
  gen=new ApfGenerator();
  gen.addAdd(-1234567890);
  gen.addJumpIfR0Equals(-1234567890,gen.DROP_LABEL);
  assertDrop(gen);
  gen=new ApfGenerator();
  gen.addOr(1234567890);
  gen.addJumpIfR0Equals(1234567890,gen.DROP_LABEL);
  assertDrop(gen);
  gen=new ApfGenerator();
  gen.addLoadImmediate(Register.R0,1234567890);
  gen.addAnd(123456789);
  gen.addJumpIfR0Equals(1234567890 & 123456789,gen.DROP_LABEL);
  assertDrop(gen);
  gen=new ApfGenerator();
  gen.addLoadImmediate(Register.R0,1234567890);
  gen.addLeftShift(1);
  gen.addJumpIfR0Equals(1234567890 << 1,gen.DROP_LABEL);
  assertDrop(gen);
  gen=new ApfGenerator();
  gen.addLoadImmediate(Register.R0,1234567890);
  gen.addRightShift(1);
  gen.addJumpIfR0Equals(1234567890 >> 1,gen.DROP_LABEL);
  assertDrop(gen);
  gen=new ApfGenerator();
  gen.addLoadImmediate(Register.R0,1234567890);
  gen.addMul(2);
  gen.addJumpIfR0Equals(1234567890 * 2,gen.DROP_LABEL);
  assertDrop(gen);
  gen=new ApfGenerator();
  gen.addLoadImmediate(Register.R0,1234567890);
  gen.addDiv(2);
  gen.addJumpIfR0Equals(1234567890 / 2,gen.DROP_LABEL);
  assertDrop(gen);
  gen=new ApfGenerator();
  gen.addDiv(0);
  gen.addJump(gen.DROP_LABEL);
  assertPass(gen);
  gen=new ApfGenerator();
  gen.addLoadImmediate(Register.R1,1234567890);
  gen.addAddR1();
  gen.addJumpIfR0Equals(1234567890,gen.DROP_LABEL);
  assertDrop(gen);
  gen=new ApfGenerator();
  gen.addLoadImmediate(Register.R1,-1234567890);
  gen.addAddR1();
  gen.addJumpIfR0Equals(-1234567890,gen.DROP_LABEL);
  assertDrop(gen);
  gen=new ApfGenerator();
  gen.addLoadImmediate(Register.R1,1234567890);
  gen.addOrR1();
  gen.addJumpIfR0Equals(1234567890,gen.DROP_LABEL);
  assertDrop(gen);
  gen=new ApfGenerator();
  gen.addLoadImmediate(Register.R0,1234567890);
  gen.addLoadImmediate(Register.R1,123456789);
  gen.addAndR1();
  gen.addJumpIfR0Equals(1234567890 & 123456789,gen.DROP_LABEL);
  assertDrop(gen);
  gen=new ApfGenerator();
  gen.addLoadImmediate(Register.R0,1234567890);
  gen.addLoadImmediate(Register.R1,1);
  gen.addLeftShiftR1();
  gen.addJumpIfR0Equals(1234567890 << 1,gen.DROP_LABEL);
  assertDrop(gen);
  gen=new ApfGenerator();
  gen.addLoadImmediate(Register.R0,1234567890);
  gen.addLoadImmediate(Register.R1,-1);
  gen.addLeftShiftR1();
  gen.addJumpIfR0Equals(1234567890 >> 1,gen.DROP_LABEL);
  assertDrop(gen);
  gen=new ApfGenerator();
  gen.addLoadImmediate(Register.R0,1234567890);
  gen.addLoadImmediate(Register.R1,2);
  gen.addMulR1();
  gen.addJumpIfR0Equals(1234567890 * 2,gen.DROP_LABEL);
  assertDrop(gen);
  gen=new ApfGenerator();
  gen.addLoadImmediate(Register.R0,1234567890);
  gen.addLoadImmediate(Register.R1,2);
  gen.addDivR1();
  gen.addJumpIfR0Equals(1234567890 / 2,gen.DROP_LABEL);
  assertDrop(gen);
  gen=new ApfGenerator();
  gen.addDivR1();
  gen.addJump(gen.DROP_LABEL);
  assertPass(gen);
  gen=new ApfGenerator();
  gen.addLoad8(Register.R0,1);
  gen.addJumpIfR0Equals(45,gen.DROP_LABEL);
  assertDrop(gen,new byte[]{123,45,0,0,0,0,0,0,0,0,0,0,0,0,0},0);
  gen=new ApfGenerator();
  gen.addLoad8(Register.R0,16);
  gen.addJumpIfR0Equals(0,gen.DROP_LABEL);
  assertPass(gen,new byte[]{123,45,0,0,0,0,0,0,0,0,0,0,0,0,0},0);
  gen=new ApfGenerator();
  gen.addLoad16(Register.R0,1);
  gen.addJumpIfR0Equals((45 << 8) | 67,gen.DROP_LABEL);
  assertDrop(gen,new byte[]{123,45,67,0,0,0,0,0,0,0,0,0,0,0,0},0);
  gen=new ApfGenerator();
  gen.addLoad32(Register.R0,1);
  gen.addJumpIfR0Equals((45 << 24) | (67 << 16) | (89 << 8)| 12,gen.DROP_LABEL);
  assertDrop(gen,new byte[]{123,45,67,89,12,0,0,0,0,0,0,0,0,0,0},0);
  gen=new ApfGenerator();
  gen.addLoadImmediate(Register.R1,1);
  gen.addLoad8Indexed(Register.R0,0);
  gen.addJumpIfR0Equals(45,gen.DROP_LABEL);
  assertDrop(gen,new byte[]{123,45,0,0,0,0,0,0,0,0,0,0,0,0,0},0);
  gen=new ApfGenerator();
  gen.addLoadImmediate(Register.R1,8);
  gen.addLoad8Indexed(Register.R0,8);
  gen.addJumpIfR0Equals(0,gen.DROP_LABEL);
  assertPass(gen,new byte[]{123,45,0,0,0,0,0,0,0,0,0,0,0,0,0},0);
  gen=new ApfGenerator();
  gen.addLoadImmediate(Register.R1,1);
  gen.addLoad16Indexed(Register.R0,0);
  gen.addJumpIfR0Equals((45 << 8) | 67,gen.DROP_LABEL);
  assertDrop(gen,new byte[]{123,45,67,0,0,0,0,0,0,0,0,0,0,0,0},0);
  gen=new ApfGenerator();
  gen.addLoadImmediate(Register.R1,1);
  gen.addLoad32Indexed(Register.R0,0);
  gen.addJumpIfR0Equals((45 << 24) | (67 << 16) | (89 << 8)| 12,gen.DROP_LABEL);
  assertDrop(gen,new byte[]{123,45,67,89,12,0,0,0,0,0,0,0,0,0,0},0);
  gen=new ApfGenerator();
  gen.addJumpIfR0GreaterThan(0,gen.DROP_LABEL);
  assertPass(gen);
  gen=new ApfGenerator();
  gen.addLoadImmediate(Register.R0,1);
  gen.addJumpIfR0GreaterThan(0,gen.DROP_LABEL);
  assertDrop(gen);
  gen=new ApfGenerator();
  gen.addJumpIfR0LessThan(0,gen.DROP_LABEL);
  assertPass(gen);
  gen=new ApfGenerator();
  gen.addJumpIfR0LessThan(1,gen.DROP_LABEL);
  assertDrop(gen);
  gen=new ApfGenerator();
  gen.addJumpIfR0AnyBitsSet(3,gen.DROP_LABEL);
  assertPass(gen);
  gen=new ApfGenerator();
  gen.addLoadImmediate(Register.R0,1);
  gen.addJumpIfR0AnyBitsSet(3,gen.DROP_LABEL);
  assertDrop(gen);
  gen=new ApfGenerator();
  gen.addLoadImmediate(Register.R0,3);
  gen.addJumpIfR0AnyBitsSet(3,gen.DROP_LABEL);
  assertDrop(gen);
  gen=new ApfGenerator();
  gen.addJumpIfR0GreaterThanR1(gen.DROP_LABEL);
  assertPass(gen);
  gen=new ApfGenerator();
  gen.addLoadImmediate(Register.R0,2);
  gen.addLoadImmediate(Register.R1,1);
  gen.addJumpIfR0GreaterThanR1(gen.DROP_LABEL);
  assertDrop(gen);
  gen=new ApfGenerator();
  gen.addJumpIfR0LessThanR1(gen.DROP_LABEL);
  assertPass(gen);
  gen=new ApfGenerator();
  gen.addLoadImmediate(Register.R1,1);
  gen.addJumpIfR0LessThanR1(gen.DROP_LABEL);
  assertDrop(gen);
  gen=new ApfGenerator();
  gen.addLoadImmediate(Register.R1,3);
  gen.addJumpIfR0AnyBitsSetR1(gen.DROP_LABEL);
  assertPass(gen);
  gen=new ApfGenerator();
  gen.addLoadImmediate(Register.R1,3);
  gen.addLoadImmediate(Register.R0,1);
  gen.addJumpIfR0AnyBitsSetR1(gen.DROP_LABEL);
  assertDrop(gen);
  gen=new ApfGenerator();
  gen.addLoadImmediate(Register.R1,3);
  gen.addLoadImmediate(Register.R0,3);
  gen.addJumpIfR0AnyBitsSetR1(gen.DROP_LABEL);
  assertDrop(gen);
  gen=new ApfGenerator();
  gen.addLoadFromMemory(Register.R0,0);
  gen.addJumpIfR0Equals(0,gen.DROP_LABEL);
  assertDrop(gen);
  gen=new ApfGenerator();
  gen.addLoadImmediate(Register.R1,1234567890);
  gen.addStoreToMemory(Register.R1,12);
  gen.addLoadFromMemory(Register.R0,12);
  gen.addJumpIfR0Equals(1234567890,gen.DROP_LABEL);
  assertDrop(gen);
  gen=new ApfGenerator();
  gen.addLoadFromMemory(Register.R0,gen.FILTER_AGE_MEMORY_SLOT);
  gen.addJumpIfR0Equals(1234567890,gen.DROP_LABEL);
  assertDrop(gen,new byte[MIN_PKT_SIZE],1234567890);
  gen=new ApfGenerator();
  gen.addLoadFromMemory(Register.R0,gen.PACKET_SIZE_MEMORY_SLOT);
  gen.addJumpIfR0Equals(MIN_PKT_SIZE,gen.DROP_LABEL);
  assertDrop(gen);
  gen=new ApfGenerator();
  gen.addLoadFromMemory(Register.R0,gen.IPV4_HEADER_SIZE_MEMORY_SLOT);
  gen.addJumpIfR0Equals(20,gen.DROP_LABEL);
  assertDrop(gen,new byte[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0x45},0);
  gen=new ApfGenerator();
  gen.addLoadImmediate(Register.R0,1234567890);
  gen.addNot(Register.R0);
  gen.addJumpIfR0Equals(~1234567890,gen.DROP_LABEL);
  assertDrop(gen);
  gen=new ApfGenerator();
  gen.addLoadImmediate(Register.R0,1234567890);
  gen.addNeg(Register.R0);
  gen.addJumpIfR0Equals(-1234567890,gen.DROP_LABEL);
  assertDrop(gen);
  gen=new ApfGenerator();
  gen.addLoadImmediate(Register.R1,1234567890);
  gen.addMove(Register.R0);
  gen.addJumpIfR0Equals(1234567890,gen.DROP_LABEL);
  assertDrop(gen);
  gen=new ApfGenerator();
  gen.addLoadImmediate(Register.R0,1234567890);
  gen.addMove(Register.R1);
  gen.addJumpIfR0Equals(1234567890,gen.DROP_LABEL);
  assertDrop(gen);
  gen=new ApfGenerator();
  gen.addLoadImmediate(Register.R1,1234567890);
  gen.addSwap();
  gen.addJumpIfR0Equals(1234567890,gen.DROP_LABEL);
  assertDrop(gen);
  gen=new ApfGenerator();
  gen.addLoadImmediate(Register.R0,1234567890);
  gen.addSwap();
  gen.addJumpIfR0Equals(0,gen.DROP_LABEL);
  assertDrop(gen);
  gen=new ApfGenerator();
  gen.addLoadImmediate(Register.R0,1);
  gen.addJumpIfBytesNotEqual(Register.R0,new byte[]{123},gen.DROP_LABEL);
  program=gen.generate();
  assertEquals(6,program.length);
  assertEquals((13 << 3) | (1 << 1) | 0,program[0]);
  assertEquals(1,program[1]);
  assertEquals(((20 << 3) | (1 << 1) | 0) - 256,program[2]);
  assertEquals(1,program[3]);
  assertEquals(1,program[4]);
  assertEquals(123,program[5]);
  assertDrop(program,new byte[MIN_PKT_SIZE],0);
  gen=new ApfGenerator();
  gen.addLoadImmediate(Register.R0,1);
  gen.addJumpIfBytesNotEqual(Register.R0,new byte[]{123},gen.DROP_LABEL);
  byte[] packet123=new byte[]{0,123,0,0,0,0,0,0,0,0,0,0,0,0,0};
  assertPass(gen,packet123,0);
  gen=new ApfGenerator();
  gen.addJumpIfBytesNotEqual(Register.R0,new byte[]{123},gen.DROP_LABEL);
  assertDrop(gen,packet123,0);
  gen=new ApfGenerator();
  gen.addLoadImmediate(Register.R0,1);
  gen.addJumpIfBytesNotEqual(Register.R0,new byte[]{1,2,30,4,5},gen.DROP_LABEL);
  byte[] packet12345=new byte[]{0,1,2,3,4,5,0,0,0,0,0,0,0,0,0};
  assertDrop(gen,packet12345,0);
  gen=new ApfGenerator();
  gen.addLoadImmediate(Register.R0,1);
  gen.addJumpIfBytesNotEqual(Register.R0,new byte[]{1,2,3,4,5},gen.DROP_LABEL);
  assertPass(gen,packet12345,0);
}
