{
  final TaskViewTransform transform=ctx.currentTaskTransform;
  int startDelay=0;
  if (mConfig.launchedFromAppWithThumbnail) {
    if (mTask.isLaunchTarget) {
      if (Constants.DebugFlags.App.EnableThumbnailAlphaOnFrontmost) {
        mThumbnailView.startEnterRecentsAnimation(mConfig.transitionEnterFromAppDelay,new Runnable(){
          @Override public void run(){
            animateDimToProgress(0,mConfig.taskViewEnterFromAppDuration,ctx.postAnimationTrigger.decrementOnAnimationEnd());
          }
        }
);
      }
 else {
        animateDimToProgress(mConfig.transitionEnterFromAppDelay,mConfig.taskViewEnterFromAppDuration,ctx.postAnimationTrigger.decrementOnAnimationEnd());
      }
      ctx.postAnimationTrigger.increment();
      fadeInActionButton(mConfig.transitionEnterFromAppDelay,mConfig.taskViewEnterFromAppDuration);
    }
 else {
      if (ctx.currentTaskOccludesLaunchTarget) {
        setTranslationY(transform.translationY + mConfig.taskViewAffiliateGroupEnterOffsetPx);
        setAlpha(0f);
        animate().alpha(1f).translationY(transform.translationY).setStartDelay(mConfig.transitionEnterFromAppDelay).setUpdateListener(null).setInterpolator(mConfig.fastOutSlowInInterpolator).setDuration(mConfig.taskViewEnterFromHomeDuration).withEndAction(new Runnable(){
          @Override public void run(){
            ctx.postAnimationTrigger.decrement();
          }
        }
).start();
        ctx.postAnimationTrigger.increment();
      }
    }
    startDelay=mConfig.transitionEnterFromAppDelay;
  }
 else   if (mConfig.launchedFromHome) {
    int frontIndex=(ctx.currentStackViewCount - ctx.currentStackViewIndex - 1);
    int delay=mConfig.transitionEnterFromHomeDelay + frontIndex * mConfig.taskViewEnterFromHomeStaggerDelay;
    setScaleX(transform.scale);
    setScaleY(transform.scale);
    if (!mConfig.fakeShadows) {
      animate().translationZ(transform.translationZ);
    }
    animate().translationY(transform.translationY).setStartDelay(delay).setUpdateListener(ctx.updateListener).setInterpolator(mConfig.quintOutInterpolator).setDuration(mConfig.taskViewEnterFromHomeDuration + frontIndex * mConfig.taskViewEnterFromHomeStaggerDelay).withEndAction(new Runnable(){
      @Override public void run(){
        ctx.postAnimationTrigger.decrement();
      }
    }
).start();
    ctx.postAnimationTrigger.increment();
    startDelay=delay;
  }
  postDelayed(new Runnable(){
    @Override public void run(){
      enableFocusAnimations();
    }
  }
,(startDelay / 2));
}
