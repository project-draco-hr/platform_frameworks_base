{
  final TaskViewTransform transform=ctx.currentTaskTransform;
  int startDelay=0;
  if (mConfig.launchedFromAppWithScreenshot) {
    if (mTask.isLaunchTarget) {
      Rect taskRect=ctx.currentTaskRect;
      int duration=mConfig.taskViewEnterFromHomeDuration * 10;
      int windowInsetTop=mConfig.systemInsets.top;
      float taskScale=((float)taskRect.width() / getMeasuredWidth()) * transform.scale;
      float scaledYOffset=((1f - taskScale) * getMeasuredHeight()) / 2;
      float scaledWindowInsetTop=(int)(taskScale * windowInsetTop);
      float scaledTranslationY=taskRect.top + transform.translationY - (scaledWindowInsetTop + scaledYOffset);
      startDelay=mConfig.taskViewEnterFromHomeDelay;
      mViewBounds.animateClipTop(windowInsetTop,duration,new ValueAnimator.AnimatorUpdateListener(){
        @Override public void onAnimationUpdate(        ValueAnimator animation){
          int y=(Integer)animation.getAnimatedValue();
          mHeaderView.setTranslationY(y);
        }
      }
);
      int size=Math.round((taskRect.width() / taskScale));
      if (mConfig.hasHorizontalLayout()) {
        mViewBounds.animateClipRight(getMeasuredWidth() - size,duration);
      }
 else {
        mViewBounds.animateClipBottom(getMeasuredHeight() - (windowInsetTop + size),duration);
      }
      mHeaderView.startEnterRecentsAnimation(0,null);
      animate().scaleX(taskScale).scaleY(taskScale).translationY(scaledTranslationY).setDuration(duration).withEndAction(new Runnable(){
        @Override public void run(){
          setIsFullScreen(false);
          requestLayout();
          mViewBounds.setClipTop(0);
          mViewBounds.setClipBottom(0);
          mViewBounds.setClipRight(0);
          mHeaderView.setTranslationY(0);
          mThumbnailView.enableTaskBarClip(mHeaderView);
          animateFooterVisibility(true,mConfig.taskBarEnterAnimDuration);
          RecentsTaskLoader.getInstance().loadTaskData(mTask);
          AlternateRecentsComponent.consumeLastScreenshot();
          mCb.onTaskViewFullScreenTransitionCompleted();
          ctx.postAnimationTrigger.decrement();
        }
      }
).start();
    }
 else {
      mThumbnailView.enableTaskBarClip(mHeaderView);
      animateFooterVisibility(true,0);
    }
    ctx.postAnimationTrigger.increment();
  }
 else   if (mConfig.launchedFromAppWithThumbnail) {
    if (mTask.isLaunchTarget) {
      mHeaderView.startEnterRecentsAnimation(mConfig.taskBarEnterAnimDelay,mThumbnailView.enableTaskBarClipAsRunnable(mHeaderView));
      ObjectAnimator anim=ObjectAnimator.ofInt(this,"dim",getDimFromTaskProgress());
      anim.setStartDelay(mConfig.taskBarEnterAnimDelay);
      anim.setDuration(mConfig.taskBarEnterAnimDuration);
      anim.setInterpolator(mConfig.fastOutLinearInInterpolator);
      anim.addListener(new AnimatorListenerAdapter(){
        @Override public void onAnimationEnd(        Animator animation){
          ctx.postAnimationTrigger.decrement();
        }
      }
);
      anim.start();
      ctx.postAnimationTrigger.increment();
      animateFooterVisibility(true,mConfig.taskBarEnterAnimDuration);
      mActionButtonView.animate().alpha(1f).setStartDelay(mConfig.taskBarEnterAnimDelay).setDuration(mConfig.taskBarEnterAnimDuration).setInterpolator(mConfig.fastOutLinearInInterpolator).withLayer().start();
    }
 else {
      mThumbnailView.enableTaskBarClip(mHeaderView);
      if (ctx.currentTaskOccludesLaunchTarget) {
        setTranslationY(transform.translationY + mConfig.taskViewAffiliateGroupEnterOffsetPx);
        setAlpha(0f);
        animate().alpha(1f).translationY(transform.translationY).setStartDelay(mConfig.taskBarEnterAnimDelay).setUpdateListener(null).setInterpolator(mConfig.fastOutSlowInInterpolator).setDuration(mConfig.taskViewEnterFromHomeDuration).withEndAction(new Runnable(){
          @Override public void run(){
            mThumbnailView.enableTaskBarClip(mHeaderView);
            ctx.postAnimationTrigger.decrement();
          }
        }
).start();
        ctx.postAnimationTrigger.increment();
      }
    }
    startDelay=mConfig.taskBarEnterAnimDelay;
  }
 else   if (mConfig.launchedFromHome) {
    int frontIndex=(ctx.currentStackViewCount - ctx.currentStackViewIndex - 1);
    int delay=mConfig.taskBarEnterAnimDelay + frontIndex * mConfig.taskViewEnterFromHomeDelay;
    if (Constants.DebugFlags.App.EnableShadows) {
      animate().translationZ(transform.translationZ);
    }
    animate().scaleX(transform.scale).scaleY(transform.scale).translationY(transform.translationY).setStartDelay(delay).setUpdateListener(null).setInterpolator(mConfig.quintOutInterpolator).setDuration(mConfig.taskViewEnterFromHomeDuration).withEndAction(new Runnable(){
      @Override public void run(){
        mThumbnailView.enableTaskBarClip(mHeaderView);
        ctx.postAnimationTrigger.decrement();
      }
    }
).start();
    ctx.postAnimationTrigger.increment();
    animateFooterVisibility(true,mConfig.taskViewEnterFromHomeDuration);
    startDelay=delay;
  }
 else {
    mThumbnailView.enableTaskBarClip(mHeaderView);
    animateFooterVisibility(true,0);
  }
  postDelayed(new Runnable(){
    @Override public void run(){
      enableFocusAnimations();
    }
  }
,(startDelay / 2));
}
