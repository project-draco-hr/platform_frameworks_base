{
  getAccountsWithTypeAndFeatures(mAccountType,mFeatures,new Future2Callback(){
    public void run(    Future2 future){
      Bundle getAccountsResult;
      try {
        getAccountsResult=future.getResult();
      }
 catch (      OperationCanceledException e) {
        setException(e);
        return;
      }
catch (      IOException e) {
        setException(e);
        return;
      }
catch (      AuthenticatorException e) {
        setException(e);
        return;
      }
      Parcelable[] accounts=getAccountsResult.getParcelableArray(Constants.ACCOUNTS_KEY);
      if (accounts.length == 0) {
        if (mActivity != null) {
          mFuture=addAccount(mAccountType,mAuthTokenType,mFeatures,mAddAccountOptions,mActivity,mMyCallback,mHandler);
        }
 else {
          Bundle result=new Bundle();
          result.putString(Constants.ACCOUNT_NAME_KEY,null);
          result.putString(Constants.ACCOUNT_TYPE_KEY,null);
          result.putString(Constants.AUTHTOKEN_KEY,null);
          try {
            mResponse.onResult(result);
          }
 catch (          RemoteException e) {
          }
        }
      }
 else       if (accounts.length == 1) {
        if (mActivity == null) {
          mFuture=getAuthToken((Account)accounts[0],mAuthTokenType,false,mMyCallback,mHandler);
        }
 else {
          mFuture=getAuthToken((Account)accounts[0],mAuthTokenType,mLoginOptions,mActivity,mMyCallback,mHandler);
        }
      }
 else {
        if (mActivity != null) {
          IAccountManagerResponse chooseResponse=new IAccountManagerResponse.Stub(){
            public void onResult(            Bundle value) throws RemoteException {
              Account account=new Account(value.getString(Constants.ACCOUNT_NAME_KEY),value.getString(Constants.ACCOUNT_TYPE_KEY));
              mFuture=getAuthToken(account,mAuthTokenType,mLoginOptions,mActivity,mMyCallback,mHandler);
            }
            public void onError(            int errorCode,            String errorMessage) throws RemoteException {
              mResponse.onError(errorCode,errorMessage);
            }
          }
;
          Intent intent=new Intent();
          intent.setClassName("android","android.accounts.ChooseAccountActivity");
          intent.putExtra(Constants.ACCOUNTS_KEY,accounts);
          intent.putExtra(Constants.ACCOUNT_MANAGER_RESPONSE_KEY,new AccountManagerResponse(chooseResponse));
          mActivity.startActivity(intent);
        }
 else {
          Bundle result=new Bundle();
          result.putString(Constants.ACCOUNTS_KEY,null);
          try {
            mResponse.onResult(result);
          }
 catch (          RemoteException e) {
          }
        }
      }
    }
  }
,mHandler);
}
