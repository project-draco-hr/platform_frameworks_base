{
  if (x < 0 || y < 0 || x >= this.width || y >= this.height) {
    throw new ArrayIndexOutOfBoundsException(Messages.getString("awt.63"));
  }
switch (dataType) {
case DataBuffer.TYPE_BYTE:
    byte bdata[];
  if (obj == null) {
    bdata=new byte[numBands];
  }
 else {
    bdata=(byte[])obj;
  }
for (int i=0; i < numBands; i++) {
  bdata[i]=(byte)getSample(x,y,i,data);
}
obj=bdata;
break;
case DataBuffer.TYPE_SHORT:
case DataBuffer.TYPE_USHORT:
short sdata[];
if (obj == null) {
sdata=new short[numBands];
}
 else {
sdata=(short[])obj;
}
for (int i=0; i < numBands; i++) {
sdata[i]=(short)getSample(x,y,i,data);
}
obj=sdata;
break;
case DataBuffer.TYPE_INT:
int idata[];
if (obj == null) {
idata=new int[numBands];
}
 else {
idata=(int[])obj;
}
for (int i=0; i < numBands; i++) {
idata[i]=getSample(x,y,i,data);
}
obj=idata;
break;
case DataBuffer.TYPE_FLOAT:
float fdata[];
if (obj == null) {
fdata=new float[numBands];
}
 else {
fdata=(float[])obj;
}
for (int i=0; i < numBands; i++) {
fdata[i]=getSampleFloat(x,y,i,data);
}
obj=fdata;
break;
case DataBuffer.TYPE_DOUBLE:
double ddata[];
if (obj == null) {
ddata=new double[numBands];
}
 else {
ddata=(double[])obj;
}
for (int i=0; i < numBands; i++) {
ddata[i]=getSampleDouble(x,y,i,data);
}
obj=ddata;
break;
}
return obj;
}
