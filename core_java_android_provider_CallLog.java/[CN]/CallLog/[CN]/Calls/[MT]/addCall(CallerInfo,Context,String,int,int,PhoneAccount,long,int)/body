{
  final ContentResolver resolver=context.getContentResolver();
  int numberPresentation=PRESENTATION_ALLOWED;
  if (presentation == PhoneConstants.PRESENTATION_RESTRICTED) {
    numberPresentation=PRESENTATION_RESTRICTED;
  }
 else   if (presentation == PhoneConstants.PRESENTATION_PAYPHONE) {
    numberPresentation=PRESENTATION_PAYPHONE;
  }
 else   if (TextUtils.isEmpty(number) || presentation == PhoneConstants.PRESENTATION_UNKNOWN) {
    numberPresentation=PRESENTATION_UNKNOWN;
  }
  if (numberPresentation != PRESENTATION_ALLOWED) {
    number="";
    if (ci != null) {
      ci.name="";
    }
  }
  String accountComponentString=null;
  String accountId=null;
  if (account != null) {
    accountComponentString=account.getComponentName().flattenToString();
    accountId=account.getId();
  }
  ContentValues values=new ContentValues(6);
  values.put(NUMBER,number);
  values.put(NUMBER_PRESENTATION,Integer.valueOf(numberPresentation));
  values.put(TYPE,Integer.valueOf(callType));
  values.put(DATE,Long.valueOf(start));
  values.put(DURATION,Long.valueOf(duration));
  values.put(PHONE_ACCOUNT_COMPONENT_NAME,accountComponentString);
  values.put(PHONE_ACCOUNT_ID,accountId);
  values.put(NEW,Integer.valueOf(1));
  if (callType == MISSED_TYPE) {
    values.put(IS_READ,Integer.valueOf(0));
  }
  if (ci != null) {
    values.put(CACHED_NAME,ci.name);
    values.put(CACHED_NUMBER_TYPE,ci.numberType);
    values.put(CACHED_NUMBER_LABEL,ci.numberLabel);
  }
  if ((ci != null) && (ci.person_id > 0)) {
    final Cursor cursor;
    if (ci.normalizedNumber != null) {
      final String normalizedPhoneNumber=ci.normalizedNumber;
      cursor=resolver.query(Phone.CONTENT_URI,new String[]{Phone._ID},Phone.CONTACT_ID + " =? AND " + Phone.NORMALIZED_NUMBER+ " =?",new String[]{String.valueOf(ci.person_id),normalizedPhoneNumber},null);
    }
 else {
      final String phoneNumber=ci.phoneNumber != null ? ci.phoneNumber : number;
      cursor=resolver.query(Uri.withAppendedPath(Callable.CONTENT_FILTER_URI,Uri.encode(phoneNumber)),new String[]{Phone._ID},Phone.CONTACT_ID + " =?",new String[]{String.valueOf(ci.person_id)},null);
    }
    if (cursor != null) {
      try {
        if (cursor.getCount() > 0 && cursor.moveToFirst()) {
          final Uri feedbackUri=DataUsageFeedback.FEEDBACK_URI.buildUpon().appendPath(cursor.getString(0)).appendQueryParameter(DataUsageFeedback.USAGE_TYPE,DataUsageFeedback.USAGE_TYPE_CALL).build();
          resolver.update(feedbackUri,new ContentValues(),null,null);
        }
      }
  finally {
        cursor.close();
      }
    }
  }
  Uri result=resolver.insert(CONTENT_URI,values);
  removeExpiredEntries(context);
  return result;
}
