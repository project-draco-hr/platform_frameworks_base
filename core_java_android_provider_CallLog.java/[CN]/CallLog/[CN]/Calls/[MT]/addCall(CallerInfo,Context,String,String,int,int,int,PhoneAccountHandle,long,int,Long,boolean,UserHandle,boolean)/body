{
  if (VERBOSE_LOG) {
    Log.v(LOG_TAG,String.format("Add call: number=%s, user=%s, for all=%s",number,userToBeInsertedTo,addForAllUsers));
  }
  final ContentResolver resolver=context.getContentResolver();
  int numberPresentation=PRESENTATION_ALLOWED;
  TelecomManager tm=null;
  try {
    tm=TelecomManager.from(context);
  }
 catch (  UnsupportedOperationException e) {
  }
  String accountAddress=null;
  if (tm != null && accountHandle != null) {
    PhoneAccount account=tm.getPhoneAccount(accountHandle);
    if (account != null) {
      Uri address=account.getSubscriptionAddress();
      if (address != null) {
        accountAddress=address.getSchemeSpecificPart();
      }
    }
  }
  if (presentation == PhoneConstants.PRESENTATION_RESTRICTED) {
    numberPresentation=PRESENTATION_RESTRICTED;
  }
 else   if (presentation == PhoneConstants.PRESENTATION_PAYPHONE) {
    numberPresentation=PRESENTATION_PAYPHONE;
  }
 else   if (TextUtils.isEmpty(number) || presentation == PhoneConstants.PRESENTATION_UNKNOWN) {
    numberPresentation=PRESENTATION_UNKNOWN;
  }
  if (numberPresentation != PRESENTATION_ALLOWED) {
    number="";
    if (ci != null) {
      ci.name="";
    }
  }
  String accountComponentString=null;
  String accountId=null;
  if (accountHandle != null) {
    accountComponentString=accountHandle.getComponentName().flattenToString();
    accountId=accountHandle.getId();
  }
  ContentValues values=new ContentValues(6);
  values.put(NUMBER,number);
  values.put(POST_DIAL_DIGITS,postDialDigits);
  values.put(NUMBER_PRESENTATION,Integer.valueOf(numberPresentation));
  values.put(TYPE,Integer.valueOf(callType));
  values.put(FEATURES,features);
  values.put(DATE,Long.valueOf(start));
  values.put(DURATION,Long.valueOf(duration));
  if (dataUsage != null) {
    values.put(DATA_USAGE,dataUsage);
  }
  values.put(PHONE_ACCOUNT_COMPONENT_NAME,accountComponentString);
  values.put(PHONE_ACCOUNT_ID,accountId);
  values.put(PHONE_ACCOUNT_ADDRESS,accountAddress);
  values.put(NEW,Integer.valueOf(1));
  values.put(ADD_FOR_ALL_USERS,addForAllUsers ? 1 : 0);
  if (callType == MISSED_TYPE) {
    values.put(IS_READ,Integer.valueOf(is_read ? 1 : 0));
  }
  if ((ci != null) && (ci.contactIdOrZero > 0)) {
    final Cursor cursor;
    if (ci.normalizedNumber != null) {
      final String normalizedPhoneNumber=ci.normalizedNumber;
      cursor=resolver.query(Phone.CONTENT_URI,new String[]{Phone._ID},Phone.CONTACT_ID + " =? AND " + Phone.NORMALIZED_NUMBER+ " =?",new String[]{String.valueOf(ci.contactIdOrZero),normalizedPhoneNumber},null);
    }
 else {
      final String phoneNumber=ci.phoneNumber != null ? ci.phoneNumber : number;
      cursor=resolver.query(Uri.withAppendedPath(Callable.CONTENT_FILTER_URI,Uri.encode(phoneNumber)),new String[]{Phone._ID},Phone.CONTACT_ID + " =?",new String[]{String.valueOf(ci.contactIdOrZero)},null);
    }
    if (cursor != null) {
      try {
        if (cursor.getCount() > 0 && cursor.moveToFirst()) {
          final String dataId=cursor.getString(0);
          updateDataUsageStatForData(resolver,dataId);
          if (duration >= MIN_DURATION_FOR_NORMALIZED_NUMBER_UPDATE_MS && callType == Calls.OUTGOING_TYPE && TextUtils.isEmpty(ci.normalizedNumber)) {
            updateNormalizedNumber(context,resolver,dataId,number);
          }
        }
      }
  finally {
        cursor.close();
      }
    }
  }
  Uri result=null;
  final UserManager userManager=context.getSystemService(UserManager.class);
  final int currentUserId=userManager.getUserHandle();
  if (addForAllUsers) {
    final Uri uriForSystem=addEntryAndRemoveExpiredEntries(context,userManager,UserHandle.SYSTEM,values);
    if (uriForSystem == null || SHADOW_AUTHORITY.equals(uriForSystem.getAuthority())) {
      return null;
    }
    if (UserHandle.USER_SYSTEM == currentUserId) {
      result=uriForSystem;
    }
    final List<UserInfo> users=userManager.getUsers(true);
    final int count=users.size();
    for (int i=0; i < count; i++) {
      final UserInfo userInfo=users.get(i);
      final UserHandle userHandle=userInfo.getUserHandle();
      final int userId=userHandle.getIdentifier();
      if (userHandle.isSystem()) {
        continue;
      }
      if (!shouldHaveSharedCallLogEntries(context,userManager,userId)) {
        continue;
      }
      if (userManager.isUserRunning(userHandle) && userManager.isUserUnlocked(userHandle)) {
        final Uri uri=addEntryAndRemoveExpiredEntries(context,userManager,userHandle,values);
        if (userId == currentUserId) {
          result=uri;
        }
      }
    }
  }
 else {
    final UserHandle targetUserHandle=userToBeInsertedTo != null ? userToBeInsertedTo : UserHandle.of(currentUserId);
    result=addEntryAndRemoveExpiredEntries(context,userManager,targetUserHandle,values);
  }
  return result;
}
