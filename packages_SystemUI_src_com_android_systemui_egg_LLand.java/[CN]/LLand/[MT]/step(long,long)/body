{
  t=t_ms / 1000f;
  dt=dt_ms / 1000f;
  if (DEBUG) {
    t*=DEBUG_SPEED_MULTIPLIER;
    dt*=DEBUG_SPEED_MULTIPLIER;
  }
  final int N=getChildCount();
  int i=0;
  for (; i < N; i++) {
    final View v=getChildAt(i);
    if (v instanceof GameView) {
      ((GameView)v).step(t_ms,dt_ms,t,dt);
    }
  }
  if (mPlaying && mDroid.below(mHeight)) {
    if (DEBUG_IDDQD) {
      poke();
    }
 else {
      L("player hit the floor");
      stop();
    }
  }
  boolean passedBarrier=false;
  for (int j=mObstaclesInPlay.size(); j-- > 0; ) {
    final Obstacle ob=mObstaclesInPlay.get(j);
    if (mPlaying && ob.intersects(mDroid) && !DEBUG_IDDQD) {
      L("player hit an obstacle");
      stop();
    }
 else     if (ob.cleared(mDroid)) {
      passedBarrier=true;
      mObstaclesInPlay.remove(j);
    }
  }
  if (mPlaying && passedBarrier) {
    addScore(1);
  }
  while (i-- > 0) {
    final View v=getChildAt(i);
    if (v instanceof Obstacle) {
      if (v.getTranslationX() + v.getWidth() < 0) {
        removeViewAt(i);
      }
    }
 else     if (v instanceof Scenery) {
      final Scenery s=(Scenery)v;
      if (v.getTranslationX() + s.w < 0) {
        v.setTranslationX(getWidth());
      }
    }
  }
  if (mPlaying && (t - mLastPipeTime) > PARAMS.OBSTACLE_PERIOD) {
    mLastPipeTime=t;
    final int obstacley=(int)(Math.random() * (mHeight - 2 * PARAMS.OBSTACLE_MIN - PARAMS.OBSTACLE_GAP)) + PARAMS.OBSTACLE_MIN;
    final Obstacle p1=new Obstacle(getContext(),obstacley);
    addView(p1,new LayoutParams(PARAMS.OBSTACLE_WIDTH,mHeight,Gravity.TOP | Gravity.LEFT));
    p1.setTranslationX(mWidth);
    p1.setTranslationY(-mHeight);
    p1.setTranslationZ(0);
    p1.animate().translationY(-mHeight + p1.h).translationZ(PARAMS.OBSTACLE_Z).setStartDelay(irand(0,250)).setDuration(250);
    mObstaclesInPlay.add(p1);
    final Obstacle p2=new Obstacle(getContext(),mHeight - obstacley - PARAMS.OBSTACLE_GAP);
    addView(p2,new LayoutParams(PARAMS.OBSTACLE_WIDTH,mHeight,Gravity.TOP | Gravity.LEFT));
    p2.setTranslationX(mWidth);
    p2.setTranslationY(mHeight);
    p2.setTranslationZ(0);
    p2.animate().translationY(mHeight - p2.h).translationZ(PARAMS.OBSTACLE_Z).setStartDelay(irand(0,100)).setDuration(400);
    mObstaclesInPlay.add(p2);
  }
  if (DEBUG) {
    final Rect r=new Rect();
    mDroid.getHitRect(r);
    r.inset(-4,-4);
    invalidate(r);
  }
}
