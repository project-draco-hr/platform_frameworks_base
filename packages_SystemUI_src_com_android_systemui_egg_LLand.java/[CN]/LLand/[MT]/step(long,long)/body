{
  t=t_ms / 1000f;
  dt=dt_ms / 1000f;
  if (DEBUG) {
    t*=DEBUG_SPEED_MULTIPLIER;
    dt*=DEBUG_SPEED_MULTIPLIER;
  }
  final int N=getChildCount();
  int i=0;
  for (; i < N; i++) {
    final View v=getChildAt(i);
    if (v instanceof GameView) {
      ((GameView)v).step(t_ms,dt_ms,t,dt);
    }
  }
  if (mPlaying && mDroid.below(mHeight)) {
    if (DEBUG_IDDQD) {
      poke();
      unpoke();
    }
 else {
      L("player hit the floor");
      thump();
      stop();
    }
  }
  boolean passedBarrier=false;
  for (int j=mObstaclesInPlay.size(); j-- > 0; ) {
    final Obstacle ob=mObstaclesInPlay.get(j);
    if (mPlaying && ob.intersects(mDroid) && !DEBUG_IDDQD) {
      L("player hit an obstacle");
      thump();
      stop();
    }
 else     if (ob.cleared(mDroid)) {
      if (ob instanceof Stem)       passedBarrier=true;
      mObstaclesInPlay.remove(j);
    }
  }
  if (mPlaying && passedBarrier) {
    addScore(1);
  }
  while (i-- > 0) {
    final View v=getChildAt(i);
    if (v instanceof Obstacle) {
      if (v.getTranslationX() + v.getWidth() < 0) {
        removeViewAt(i);
      }
    }
 else     if (v instanceof Scenery) {
      final Scenery s=(Scenery)v;
      if (v.getTranslationX() + s.w < 0) {
        v.setTranslationX(getWidth());
      }
    }
  }
  if (mPlaying && (t - mLastPipeTime) > PARAMS.OBSTACLE_PERIOD) {
    mLastPipeTime=t;
    final int obstacley=(int)(frand() * (mHeight - 2 * PARAMS.OBSTACLE_MIN - PARAMS.OBSTACLE_GAP)) + PARAMS.OBSTACLE_MIN;
    final int inset=(PARAMS.OBSTACLE_WIDTH - PARAMS.OBSTACLE_STEM_WIDTH) / 2;
    final int yinset=PARAMS.OBSTACLE_WIDTH / 2;
    final int d1=irand(0,250);
    final Obstacle s1=new Stem(getContext(),obstacley - yinset,false);
    addView(s1,new LayoutParams(PARAMS.OBSTACLE_STEM_WIDTH,(int)s1.h,Gravity.TOP | Gravity.LEFT));
    s1.setTranslationX(mWidth + inset);
    s1.setTranslationY(-s1.h - yinset);
    s1.setTranslationZ(PARAMS.OBSTACLE_Z * 0.75f);
    s1.animate().translationY(0).setStartDelay(d1).setDuration(250);
    mObstaclesInPlay.add(s1);
    final Obstacle p1=new Pop(getContext(),PARAMS.OBSTACLE_WIDTH);
    addView(p1,new LayoutParams(PARAMS.OBSTACLE_WIDTH,PARAMS.OBSTACLE_WIDTH,Gravity.TOP | Gravity.LEFT));
    p1.setTranslationX(mWidth);
    p1.setTranslationY(-PARAMS.OBSTACLE_WIDTH);
    p1.setTranslationZ(PARAMS.OBSTACLE_Z);
    p1.setScaleX(0.25f);
    p1.setScaleY(0.25f);
    p1.animate().translationY(s1.h - inset).scaleX(1f).scaleY(1f).setStartDelay(d1).setDuration(250);
    mObstaclesInPlay.add(p1);
    final int d2=irand(0,250);
    final Obstacle s2=new Stem(getContext(),mHeight - obstacley - PARAMS.OBSTACLE_GAP- yinset,true);
    addView(s2,new LayoutParams(PARAMS.OBSTACLE_STEM_WIDTH,(int)s2.h,Gravity.TOP | Gravity.LEFT));
    s2.setTranslationX(mWidth + inset);
    s2.setTranslationY(mHeight + yinset);
    s2.setTranslationZ(PARAMS.OBSTACLE_Z * 0.75f);
    s2.animate().translationY(mHeight - s2.h).setStartDelay(d2).setDuration(400);
    mObstaclesInPlay.add(s2);
    final Obstacle p2=new Pop(getContext(),PARAMS.OBSTACLE_WIDTH);
    addView(p2,new LayoutParams(PARAMS.OBSTACLE_WIDTH,PARAMS.OBSTACLE_WIDTH,Gravity.TOP | Gravity.LEFT));
    p2.setTranslationX(mWidth);
    p2.setTranslationY(mHeight);
    p2.setTranslationZ(PARAMS.OBSTACLE_Z);
    p2.setScaleX(0.25f);
    p2.setScaleY(0.25f);
    p2.animate().translationY(mHeight - s2.h - yinset).scaleX(1f).scaleY(1f).setStartDelay(d2).setDuration(400);
    mObstaclesInPlay.add(p2);
  }
  if (DEBUG_DRAW)   invalidate();
}
