{
  String countStr=parser.getAttributeValue(null,"count");
  if (countStr == null) {
    PackageManagerService.reportSettingsProblem(Log.WARN,"Error in package manager settings: <signatures> has" + " no count at " + parser.getPositionDescription());
    XmlUtils.skipCurrentTag(parser);
  }
  final int count=Integer.parseInt(countStr);
  mSignatures=new Signature[count];
  int pos=0;
  int outerDepth=parser.getDepth();
  int type;
  while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
    if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
      continue;
    }
    String tagName=parser.getName();
    if (tagName.equals("cert")) {
      if (pos < count) {
        String index=parser.getAttributeValue(null,"index");
        if (index != null) {
          try {
            int idx=Integer.parseInt(index);
            String key=parser.getAttributeValue(null,"key");
            if (key == null) {
              if (idx >= 0 && idx < pastSignatures.size()) {
                Signature sig=pastSignatures.get(idx);
                if (sig != null) {
                  mSignatures[pos]=pastSignatures.get(idx);
                  pos++;
                }
 else {
                  PackageManagerService.reportSettingsProblem(Log.WARN,"Error in package manager settings: <cert> " + "index " + index + " is not defined at "+ parser.getPositionDescription());
                }
              }
 else {
                PackageManagerService.reportSettingsProblem(Log.WARN,"Error in package manager settings: <cert> " + "index " + index + " is out of bounds at "+ parser.getPositionDescription());
              }
            }
 else {
              while (pastSignatures.size() <= idx) {
                pastSignatures.add(null);
              }
              Signature sig=new Signature(key);
              pastSignatures.set(idx,sig);
              mSignatures[pos]=sig;
              pos++;
            }
          }
 catch (          NumberFormatException e) {
            PackageManagerService.reportSettingsProblem(Log.WARN,"Error in package manager settings: <cert> " + "index " + index + " is not a number at "+ parser.getPositionDescription());
          }
catch (          IllegalArgumentException e) {
            PackageManagerService.reportSettingsProblem(Log.WARN,"Error in package manager settings: <cert> " + "index " + index + " has an invalid signature at "+ parser.getPositionDescription()+ ": "+ e.getMessage());
          }
        }
 else {
          PackageManagerService.reportSettingsProblem(Log.WARN,"Error in package manager settings: <cert> has" + " no index at " + parser.getPositionDescription());
        }
      }
 else {
        PackageManagerService.reportSettingsProblem(Log.WARN,"Error in package manager settings: too " + "many <cert> tags, expected " + count + " at "+ parser.getPositionDescription());
      }
    }
 else {
      PackageManagerService.reportSettingsProblem(Log.WARN,"Unknown element under <cert>: " + parser.getName());
    }
    XmlUtils.skipCurrentTag(parser);
  }
  if (pos < count) {
    Signature[] newSigs=new Signature[pos];
    System.arraycopy(mSignatures,0,newSigs,0,pos);
    mSignatures=newSigs;
  }
}
