{
  if (VDBG)   Log.v(TAG,"ctor: looper=" + looper);
  mHandler=new Handler(looper){
    @Override public void handleMessage(    Message msg){
      if (DBG)       Log.d(TAG,"What=" + msg.what + ", msg="+ msg);
switch (msg.what) {
case LISTEN_PUBLISH_FAIL:
        WifiNanSessionListener.this.onPublishFail(msg.arg1);
      break;
case LISTEN_PUBLISH_TERMINATED:
    WifiNanSessionListener.this.onPublishTerminated(msg.arg1);
  break;
case LISTEN_SUBSCRIBE_FAIL:
WifiNanSessionListener.this.onSubscribeFail(msg.arg1);
break;
case LISTEN_SUBSCRIBE_TERMINATED:
WifiNanSessionListener.this.onSubscribeTerminated(msg.arg1);
break;
case LISTEN_MATCH:
WifiNanSessionListener.this.onMatch(msg.getData().getInt(MESSAGE_BUNDLE_KEY_PEER_ID),msg.getData().getByteArray(MESSAGE_BUNDLE_KEY_MESSAGE),msg.arg1,msg.getData().getByteArray(MESSAGE_BUNDLE_KEY_MESSAGE2),msg.arg2);
break;
case LISTEN_MESSAGE_SEND_SUCCESS:
WifiNanSessionListener.this.onMessageSendSuccess(msg.arg1);
break;
case LISTEN_MESSAGE_SEND_FAIL:
WifiNanSessionListener.this.onMessageSendFail(msg.arg1,msg.arg2);
break;
case LISTEN_MESSAGE_RECEIVED:
WifiNanSessionListener.this.onMessageReceived(msg.arg2,msg.getData().getByteArray(MESSAGE_BUNDLE_KEY_MESSAGE),msg.arg1);
break;
}
}
}
;
}
