{
  final int outerDepth=parser.getDepth();
  while (XmlUtils.nextElementWithin(parser,outerDepth)) {
    if (parser.getName().equals("keyboard-layout")) {
      String descriptor=parser.getAttributeValue(null,"descriptor");
      if (descriptor == null) {
        throw new XmlPullParserException("Missing descriptor attribute on keyboard-layout.");
      }
      String current=parser.getAttributeValue(null,"current");
      if (mKeyboardLayouts.contains(descriptor)) {
        throw new XmlPullParserException("Found duplicate keyboard layout.");
      }
      mKeyboardLayouts.add(descriptor);
      if (current != null && current.equals("true")) {
        if (mCurrentKeyboardLayout != null) {
          throw new XmlPullParserException("Found multiple current keyboard layouts.");
        }
        mCurrentKeyboardLayout=descriptor;
      }
    }
 else     if (parser.getName().equals("calibration")) {
      String format=parser.getAttributeValue(null,"format");
      if (format == null) {
        throw new XmlPullParserException("Missing format attribute on calibration.");
      }
      if (format.equals("affine")) {
        float[] matrix=TouchCalibration.IDENTITY.getAffineTransform();
        int depth=parser.getDepth();
        while (XmlUtils.nextElementWithin(parser,depth)) {
          String tag=parser.getName().toLowerCase();
          String value=parser.nextText();
          for (int i=0; i < matrix.length && i < CALIBRATION_NAME.length; i++) {
            if (tag.equals(CALIBRATION_NAME[i])) {
              matrix[i]=Float.parseFloat(value);
              break;
            }
          }
        }
        mTouchCalibration=new TouchCalibration(matrix[0],matrix[1],matrix[2],matrix[3],matrix[4],matrix[5]);
      }
 else {
        throw new XmlPullParserException("Unsupported format for calibration.");
      }
    }
  }
  Collections.sort(mKeyboardLayouts);
  if (mCurrentKeyboardLayout == null && !mKeyboardLayouts.isEmpty()) {
    mCurrentKeyboardLayout=mKeyboardLayouts.get(0);
  }
}
