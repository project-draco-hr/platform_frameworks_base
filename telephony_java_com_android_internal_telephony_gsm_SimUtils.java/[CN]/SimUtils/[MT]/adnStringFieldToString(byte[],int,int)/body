{
  if (length >= 1) {
    if (data[offset] == (byte)0x80) {
      int ucslen=(length - 1) / 2;
      String ret=null;
      try {
        ret=new String(data,offset + 1,ucslen * 2,"utf-16be");
      }
 catch (      UnsupportedEncodingException ex) {
        Log.e(LOG_TAG,"implausible UnsupportedEncodingException",ex);
      }
      if (ret != null) {
        ucslen=ret.length();
        while (ucslen > 0 && ret.charAt(ucslen - 1) == '\uFFFF')         ucslen--;
        return ret.substring(0,ucslen);
      }
    }
  }
  boolean isucs2=false;
  char base='\0';
  int len=0;
  if (length >= 3 && data[offset] == (byte)0x81) {
    len=data[offset + 1] & 0xFF;
    if (len > length - 3)     len=length - 3;
    base=(char)((data[offset + 2] & 0xFF) << 7);
    offset+=3;
    isucs2=true;
  }
 else   if (length >= 4 && data[offset] == (byte)0x82) {
    len=data[offset + 1] & 0xFF;
    if (len > length - 4)     len=length - 4;
    base=(char)(((data[offset + 2] & 0xFF) << 8) | (data[offset + 3] & 0xFF));
    offset+=4;
    isucs2=true;
  }
  if (isucs2) {
    StringBuilder ret=new StringBuilder();
    while (len > 0) {
      if (data[offset] < 0) {
        ret.append((char)(base + (data[offset] & 0x7F)));
        offset++;
        len--;
      }
      int count=0;
      while (count < len && data[offset + count] >= 0)       count++;
      ret.append(GsmAlphabet.gsm8BitUnpackedToString(data,offset,count));
      offset+=count;
      len-=count;
    }
    return ret.toString();
  }
  return GsmAlphabet.gsm8BitUnpackedToString(data,offset,length);
}
