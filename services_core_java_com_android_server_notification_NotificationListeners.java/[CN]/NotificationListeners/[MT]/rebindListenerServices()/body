{
  final int[] userIds=mUserProfiles.getCurrentProfileIds();
  final int nUserIds=userIds.length;
  final SparseArray<String> flat=new SparseArray<String>();
  for (int i=0; i < nUserIds; ++i) {
    flat.put(userIds[i],Settings.Secure.getStringForUser(mContext.getContentResolver(),Settings.Secure.ENABLED_NOTIFICATION_LISTENERS,userIds[i]));
  }
  NotificationListenerInfo[] toRemove=new NotificationListenerInfo[mListeners.size()];
  final SparseArray<ArrayList<ComponentName>> toAdd=new SparseArray<ArrayList<ComponentName>>();
synchronized (mMutex) {
    toRemove=mListeners.toArray(toRemove);
    final ArraySet<ComponentName> newEnabled=new ArraySet<ComponentName>();
    final ArraySet<String> newPackages=new ArraySet<String>();
    for (int i=0; i < nUserIds; ++i) {
      final ArrayList<ComponentName> add=new ArrayList<ComponentName>();
      toAdd.put(userIds[i],add);
      String toDecode=flat.get(userIds[i]);
      if (toDecode != null) {
        String[] components=toDecode.split(ENABLED_NOTIFICATION_LISTENERS_SEPARATOR);
        for (int j=0; j < components.length; j++) {
          final ComponentName component=ComponentName.unflattenFromString(components[j]);
          if (component != null) {
            newEnabled.add(component);
            add.add(component);
            newPackages.add(component.getPackageName());
          }
        }
      }
    }
    mEnabledListenersForCurrentProfiles=newEnabled;
    mEnabledListenerPackageNames=newPackages;
  }
  for (  NotificationListenerInfo info : toRemove) {
    final ComponentName component=info.component;
    final int oldUser=info.userid;
    Slog.v(TAG,"disabling notification listener for user " + oldUser + ": "+ component);
    unregisterListenerService(component,info.userid);
  }
  for (int i=0; i < nUserIds; ++i) {
    final ArrayList<ComponentName> add=toAdd.get(userIds[i]);
    final int N=add.size();
    for (int j=0; j < N; j++) {
      final ComponentName component=add.get(j);
      Slog.v(TAG,"enabling notification listener for user " + userIds[i] + ": "+ component);
      registerListenerService(component,userIds[i]);
    }
  }
}
