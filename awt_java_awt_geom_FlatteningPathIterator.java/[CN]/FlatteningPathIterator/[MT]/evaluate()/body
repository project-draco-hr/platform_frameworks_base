{
  if (bufEmpty) {
    bufType=p.currentSegment(coords);
  }
switch (bufType) {
case SEG_MOVETO:
case SEG_LINETO:
    px=coords[0];
  py=coords[1];
break;
case SEG_QUADTO:
if (bufEmpty) {
bufIndex-=6;
buf[bufIndex + 0]=px;
buf[bufIndex + 1]=py;
System.arraycopy(coords,0,buf,bufIndex + 2,4);
bufSubdiv=0;
}
while (bufSubdiv < bufLimit) {
if (QuadCurve2D.getFlatnessSq(buf,bufIndex) < flatness2) {
break;
}
if (bufIndex <= 4) {
double tmp[]=new double[bufSize + BUFFER_CAPACITY];
System.arraycopy(buf,bufIndex,tmp,bufIndex + BUFFER_CAPACITY,bufSize - bufIndex);
buf=tmp;
bufSize+=BUFFER_CAPACITY;
bufIndex+=BUFFER_CAPACITY;
}
QuadCurve2D.subdivide(buf,bufIndex,buf,bufIndex - 4,buf,bufIndex);
bufIndex-=4;
bufSubdiv++;
}
bufIndex+=4;
px=buf[bufIndex];
py=buf[bufIndex + 1];
bufEmpty=(bufIndex == bufSize - 2);
if (bufEmpty) {
bufIndex=bufSize;
bufType=SEG_LINETO;
}
 else {
bufSubdiv--;
}
break;
case SEG_CUBICTO:
if (bufEmpty) {
bufIndex-=8;
buf[bufIndex + 0]=px;
buf[bufIndex + 1]=py;
System.arraycopy(coords,0,buf,bufIndex + 2,6);
bufSubdiv=0;
}
while (bufSubdiv < bufLimit) {
if (CubicCurve2D.getFlatnessSq(buf,bufIndex) < flatness2) {
break;
}
if (bufIndex <= 6) {
double tmp[]=new double[bufSize + BUFFER_CAPACITY];
System.arraycopy(buf,bufIndex,tmp,bufIndex + BUFFER_CAPACITY,bufSize - bufIndex);
buf=tmp;
bufSize+=BUFFER_CAPACITY;
bufIndex+=BUFFER_CAPACITY;
}
CubicCurve2D.subdivide(buf,bufIndex,buf,bufIndex - 6,buf,bufIndex);
bufIndex-=6;
bufSubdiv++;
}
bufIndex+=6;
px=buf[bufIndex];
py=buf[bufIndex + 1];
bufEmpty=(bufIndex == bufSize - 2);
if (bufEmpty) {
bufIndex=bufSize;
bufType=SEG_LINETO;
}
 else {
bufSubdiv--;
}
break;
}
}
