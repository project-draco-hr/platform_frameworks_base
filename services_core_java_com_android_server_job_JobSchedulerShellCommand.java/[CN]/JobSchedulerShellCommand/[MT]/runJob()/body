{
  try {
    final int uid=Binder.getCallingUid();
    final int perm=mPM.checkUidPermission("android.permission.CHANGE_APP_IDLE_STATE",uid);
    if (perm != PackageManager.PERMISSION_GRANTED) {
      throw new SecurityException("Uid " + uid + " not permitted to force scheduled jobs");
    }
  }
 catch (  RemoteException e) {
  }
  final PrintWriter pw=getOutPrintWriter();
  boolean force=false;
  int userId=UserHandle.USER_SYSTEM;
  String opt;
  while ((opt=getNextOption()) != null) {
switch (opt) {
case "-f":
case "--force":
      force=true;
    break;
case "-u":
case "--user":
  userId=Integer.parseInt(getNextArgRequired());
break;
default :
pw.println("Error: unknown option '" + opt + "'");
return -1;
}
}
final String pkgName=getNextArgRequired();
final int jobId=Integer.parseInt(getNextArgRequired());
int ret=mInternal.executeRunCommand(pkgName,userId,jobId,force);
switch (ret) {
case CMD_ERR_NO_PACKAGE:
pw.print("Package not found: ");
pw.print(pkgName);
pw.print(" / user ");
pw.println(userId);
break;
case CMD_ERR_NO_JOB:
pw.print("Could not find job ");
pw.print(jobId);
pw.print(" in package ");
pw.print(pkgName);
pw.print(" / user ");
pw.println(userId);
break;
case CMD_ERR_CONSTRAINTS:
pw.print("Job ");
pw.print(jobId);
pw.print(" in package ");
pw.print(pkgName);
pw.print(" / user ");
pw.print(userId);
pw.println(" has functional constraints but --force not specified");
break;
default :
pw.print("Running job");
if (force) {
pw.print(" [FORCED]");
}
pw.println();
break;
}
return ret;
}
