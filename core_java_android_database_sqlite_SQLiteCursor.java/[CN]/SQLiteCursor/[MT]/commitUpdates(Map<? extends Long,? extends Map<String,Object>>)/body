{
  if (!supportsUpdates()) {
    Log.e(TAG,"commitUpdates not supported on this cursor, did you " + "include the _id column?");
    return false;
  }
synchronized (mUpdatedRows) {
    if (additionalValues != null) {
      mUpdatedRows.putAll(additionalValues);
    }
    if (mUpdatedRows.size() == 0) {
      return true;
    }
    mDatabase.beginTransaction();
    try {
      StringBuilder sql=new StringBuilder(128);
      for (      Map.Entry<Long,Map<String,Object>> rowEntry : mUpdatedRows.entrySet()) {
        Map<String,Object> values=rowEntry.getValue();
        Long rowIdObj=rowEntry.getKey();
        if (rowIdObj == null || values == null) {
          throw new IllegalStateException("null rowId or values found! rowId = " + rowIdObj + ", values = "+ values);
        }
        if (values.size() == 0) {
          continue;
        }
        long rowId=rowIdObj.longValue();
        Iterator<Map.Entry<String,Object>> valuesIter=values.entrySet().iterator();
        sql.setLength(0);
        sql.append("UPDATE " + mEditTable + " SET ");
        Object[] bindings=new Object[values.size()];
        int i=0;
        while (valuesIter.hasNext()) {
          Map.Entry<String,Object> entry=valuesIter.next();
          sql.append(entry.getKey());
          sql.append("=?");
          bindings[i]=entry.getValue();
          if (valuesIter.hasNext()) {
            sql.append(", ");
          }
          i++;
        }
        sql.append(" WHERE " + mColumns[mRowIdColumnIndex] + '='+ rowId);
        sql.append(';');
        mDatabase.execSQL(sql.toString(),bindings);
        mDatabase.rowUpdated(mEditTable,rowId);
      }
      mDatabase.setTransactionSuccessful();
    }
  finally {
      mDatabase.endTransaction();
    }
    mUpdatedRows.clear();
  }
  onChange(true);
  return true;
}
