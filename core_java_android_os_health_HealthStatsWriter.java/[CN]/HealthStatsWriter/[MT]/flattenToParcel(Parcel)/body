{
  int[] keys;
  out.writeString(mConstants.getDataType());
  out.writeInt(countBooleanArray(mTimerFields));
  keys=mConstants.getKeys(HealthKeys.TYPE_TIMER);
  for (int i=0; i < keys.length; i++) {
    if (mTimerFields[i]) {
      out.writeInt(keys[i]);
      out.writeInt(mTimerCounts[i]);
      out.writeLong(mTimerTimes[i]);
    }
  }
  out.writeInt(countBooleanArray(mMeasurementFields));
  keys=mConstants.getKeys(HealthKeys.TYPE_MEASUREMENT);
  for (int i=0; i < keys.length; i++) {
    if (mMeasurementFields[i]) {
      out.writeInt(keys[i]);
      out.writeLong(mMeasurementValues[i]);
    }
  }
  out.writeInt(countObjectArray(mStatsValues));
  keys=mConstants.getKeys(HealthKeys.TYPE_STATS);
  for (int i=0; i < keys.length; i++) {
    if (mStatsValues[i] != null) {
      out.writeInt(keys[i]);
      writeHealthStatsWriterMap(out,mStatsValues[i]);
    }
  }
  out.writeInt(countObjectArray(mTimersValues));
  keys=mConstants.getKeys(HealthKeys.TYPE_TIMERS);
  for (int i=0; i < keys.length; i++) {
    if (mTimersValues[i] != null) {
      out.writeInt(keys[i]);
      writeParcelableMap(out,mTimersValues[i]);
    }
  }
  out.writeInt(countObjectArray(mMeasurementsValues));
  keys=mConstants.getKeys(HealthKeys.TYPE_MEASUREMENTS);
  for (int i=0; i < keys.length; i++) {
    if (mMeasurementsValues[i] != null) {
      out.writeInt(keys[i]);
      writeLongsMap(out,mMeasurementsValues[i]);
    }
  }
}
