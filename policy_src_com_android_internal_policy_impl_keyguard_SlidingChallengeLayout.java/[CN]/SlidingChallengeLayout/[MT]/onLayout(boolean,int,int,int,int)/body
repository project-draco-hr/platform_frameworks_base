{
  final int paddingLeft=getPaddingLeft();
  final int paddingTop=getPaddingTop();
  final int paddingRight=getPaddingRight();
  final int paddingBottom=getPaddingBottom();
  final int width=r - l;
  final int height=b - t;
  final int count=getChildCount();
  for (int i=0; i < count; i++) {
    final View child=getChildAt(i);
    if (child.getVisibility() == GONE)     continue;
    final LayoutParams lp=(LayoutParams)child.getLayoutParams();
    if (lp.childType == LayoutParams.CHILD_TYPE_CHALLENGE) {
      final int center=(paddingLeft + width - paddingRight) / 2;
      final int childWidth=child.getMeasuredWidth();
      final int childHeight=child.getMeasuredHeight();
      final int left=center - childWidth / 2;
      final int layoutBottom=height - paddingBottom - lp.bottomMargin;
      final int bottom=layoutBottom + (int)((childHeight - mChallengeBottomBound) * (1 - mChallengeOffset));
      child.setAlpha(getChallengeAlpha());
      child.layout(left,bottom - childHeight,left + childWidth,bottom);
    }
 else     if (lp.childType == LayoutParams.CHILD_TYPE_EXPAND_CHALLENGE_HANDLE) {
      final int center=(paddingLeft + width - paddingRight) / 2;
      final int left=center - child.getMeasuredWidth() / 2;
      final int right=left + child.getMeasuredWidth();
      final int bottom=height - paddingBottom - lp.bottomMargin;
      final int top=bottom - child.getMeasuredHeight();
      child.layout(left,top,right,bottom);
    }
 else {
      child.layout(paddingLeft + lp.leftMargin,paddingTop + lp.topMargin,paddingLeft + child.getMeasuredWidth(),paddingTop + child.getMeasuredHeight());
    }
  }
  if (!mHasLayout) {
    if (mFrameDrawable != null) {
      mFrameDrawable.setAlpha(0);
    }
    mHasLayout=true;
  }
}
