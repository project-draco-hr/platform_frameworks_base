{
  if (scanRecord == null) {
    return null;
  }
  int currentPos=0;
  int advertiseFlag=-1;
  List<ParcelUuid> serviceUuids=new ArrayList<ParcelUuid>();
  String localName=null;
  int txPowerLevel=Integer.MIN_VALUE;
  SparseArray<byte[]> manufacturerData=new SparseArray<byte[]>();
  Map<ParcelUuid,byte[]> serviceData=new ArrayMap<ParcelUuid,byte[]>();
  try {
    while (currentPos < scanRecord.length) {
      int length=scanRecord[currentPos++] & 0xFF;
      if (length == 0) {
        break;
      }
      int dataLength=length - 1;
      int fieldType=scanRecord[currentPos++] & 0xFF;
switch (fieldType) {
case DATA_TYPE_FLAGS:
        advertiseFlag=scanRecord[currentPos] & 0xFF;
      break;
case DATA_TYPE_SERVICE_UUIDS_16_BIT_PARTIAL:
case DATA_TYPE_SERVICE_UUIDS_16_BIT_COMPLETE:
    parseServiceUuid(scanRecord,currentPos,dataLength,BluetoothUuid.UUID_BYTES_16_BIT,serviceUuids);
  break;
case DATA_TYPE_SERVICE_UUIDS_32_BIT_PARTIAL:
case DATA_TYPE_SERVICE_UUIDS_32_BIT_COMPLETE:
parseServiceUuid(scanRecord,currentPos,dataLength,BluetoothUuid.UUID_BYTES_32_BIT,serviceUuids);
break;
case DATA_TYPE_SERVICE_UUIDS_128_BIT_PARTIAL:
case DATA_TYPE_SERVICE_UUIDS_128_BIT_COMPLETE:
parseServiceUuid(scanRecord,currentPos,dataLength,BluetoothUuid.UUID_BYTES_128_BIT,serviceUuids);
break;
case DATA_TYPE_LOCAL_NAME_SHORT:
case DATA_TYPE_LOCAL_NAME_COMPLETE:
localName=new String(extractBytes(scanRecord,currentPos,dataLength));
break;
case DATA_TYPE_TX_POWER_LEVEL:
txPowerLevel=scanRecord[currentPos];
break;
case DATA_TYPE_SERVICE_DATA:
int serviceUuidLength=BluetoothUuid.UUID_BYTES_16_BIT;
byte[] serviceDataUuidBytes=extractBytes(scanRecord,currentPos,serviceUuidLength);
ParcelUuid serviceDataUuid=BluetoothUuid.parseUuidFrom(serviceDataUuidBytes);
byte[] serviceDataArray=extractBytes(scanRecord,currentPos + serviceUuidLength,dataLength - serviceUuidLength);
serviceData.put(serviceDataUuid,serviceDataArray);
break;
case DATA_TYPE_MANUFACTURER_SPECIFIC_DATA:
int manufacturerId=((scanRecord[currentPos + 1] & 0xFF) << 8) + (scanRecord[currentPos] & 0xFF);
byte[] manufacturerDataBytes=extractBytes(scanRecord,currentPos + 2,dataLength - 2);
manufacturerData.put(manufacturerId,manufacturerDataBytes);
break;
default :
break;
}
currentPos+=dataLength;
}
if (serviceUuids.isEmpty()) {
serviceUuids=null;
}
return new ScanRecord(serviceUuids,manufacturerData,serviceData,advertiseFlag,txPowerLevel,localName,scanRecord);
}
 catch (Exception e) {
Log.e(TAG,"unable to parse scan record: " + Arrays.toString(scanRecord));
return new ScanRecord(null,null,null,-1,Integer.MIN_VALUE,null,scanRecord);
}
}
