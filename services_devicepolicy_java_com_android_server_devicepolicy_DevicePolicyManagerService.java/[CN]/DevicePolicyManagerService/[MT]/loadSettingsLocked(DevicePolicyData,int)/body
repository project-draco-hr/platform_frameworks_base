{
  JournaledFile journal=makeJournaledFile(userHandle);
  FileInputStream stream=null;
  File file=journal.chooseForRead();
  try {
    stream=new FileInputStream(file);
    XmlPullParser parser=Xml.newPullParser();
    parser.setInput(stream,StandardCharsets.UTF_8.name());
    int type;
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && type != XmlPullParser.START_TAG) {
    }
    String tag=parser.getName();
    if (!"policies".equals(tag)) {
      throw new XmlPullParserException("Settings do not start with policies tag: found " + tag);
    }
    String permissionProvider=parser.getAttributeValue(null,ATTR_PERMISSION_PROVIDER);
    if (permissionProvider != null) {
      policy.mRestrictionsProvider=ComponentName.unflattenFromString(permissionProvider);
    }
    String userSetupComplete=parser.getAttributeValue(null,ATTR_SETUP_COMPLETE);
    if (userSetupComplete != null && Boolean.toString(true).equals(userSetupComplete)) {
      policy.mUserSetupComplete=true;
    }
    String permissionPolicy=parser.getAttributeValue(null,ATTR_PERMISSION_POLICY);
    if (!TextUtils.isEmpty(permissionPolicy)) {
      policy.mPermissionPolicy=Integer.parseInt(permissionPolicy);
    }
    policy.mDelegatedCertInstallerPackage=parser.getAttributeValue(null,ATTR_DELEGATED_CERT_INSTALLER);
    type=parser.next();
    int outerDepth=parser.getDepth();
    policy.mLockTaskPackages.clear();
    policy.mAdminList.clear();
    policy.mAdminMap.clear();
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
      if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
        continue;
      }
      tag=parser.getName();
      if ("admin".equals(tag)) {
        String name=parser.getAttributeValue(null,"name");
        try {
          DeviceAdminInfo dai=findAdmin(ComponentName.unflattenFromString(name),userHandle,false);
          if (VERBOSE_LOG && (UserHandle.getUserId(dai.getActivityInfo().applicationInfo.uid) != userHandle)) {
            Slog.w(LOG_TAG,"findAdmin returned an incorrect uid " + dai.getActivityInfo().applicationInfo.uid + " for user "+ userHandle);
          }
          if (dai != null) {
            ActiveAdmin ap=new ActiveAdmin(dai);
            ap.readFromXml(parser);
            policy.mAdminMap.put(ap.info.getComponent(),ap);
          }
        }
 catch (        RuntimeException e) {
          Slog.w(LOG_TAG,"Failed loading admin " + name,e);
        }
      }
 else       if ("failed-password-attempts".equals(tag)) {
        policy.mFailedPasswordAttempts=Integer.parseInt(parser.getAttributeValue(null,"value"));
      }
 else       if ("password-owner".equals(tag)) {
        policy.mPasswordOwner=Integer.parseInt(parser.getAttributeValue(null,"value"));
      }
 else       if ("active-password".equals(tag)) {
        policy.mActivePasswordQuality=Integer.parseInt(parser.getAttributeValue(null,"quality"));
        policy.mActivePasswordLength=Integer.parseInt(parser.getAttributeValue(null,"length"));
        policy.mActivePasswordUpperCase=Integer.parseInt(parser.getAttributeValue(null,"uppercase"));
        policy.mActivePasswordLowerCase=Integer.parseInt(parser.getAttributeValue(null,"lowercase"));
        policy.mActivePasswordLetters=Integer.parseInt(parser.getAttributeValue(null,"letters"));
        policy.mActivePasswordNumeric=Integer.parseInt(parser.getAttributeValue(null,"numeric"));
        policy.mActivePasswordSymbols=Integer.parseInt(parser.getAttributeValue(null,"symbols"));
        policy.mActivePasswordNonLetter=Integer.parseInt(parser.getAttributeValue(null,"nonletter"));
      }
 else       if (TAG_LOCK_TASK_COMPONENTS.equals(tag)) {
        policy.mLockTaskPackages.add(parser.getAttributeValue(null,"name"));
      }
 else       if (TAG_STATUS_BAR.equals(tag)) {
        policy.mStatusBarDisabled=Boolean.parseBoolean(parser.getAttributeValue(null,ATTR_DISABLED));
      }
 else       if (DO_NOT_ASK_CREDENTIALS_ON_BOOT_XML.equals(tag)) {
        policy.doNotAskCredentialsOnBoot=true;
      }
 else {
        Slog.w(LOG_TAG,"Unknown tag: " + tag);
        XmlUtils.skipCurrentTag(parser);
      }
    }
  }
 catch (  NullPointerException e) {
    Slog.w(LOG_TAG,"failed parsing " + file + " "+ e);
  }
catch (  NumberFormatException e) {
    Slog.w(LOG_TAG,"failed parsing " + file + " "+ e);
  }
catch (  XmlPullParserException e) {
    Slog.w(LOG_TAG,"failed parsing " + file + " "+ e);
  }
catch (  FileNotFoundException e) {
  }
catch (  IOException e) {
    Slog.w(LOG_TAG,"failed parsing " + file + " "+ e);
  }
catch (  IndexOutOfBoundsException e) {
    Slog.w(LOG_TAG,"failed parsing " + file + " "+ e);
  }
  try {
    if (stream != null) {
      stream.close();
    }
  }
 catch (  IOException e) {
  }
  policy.mAdminList.addAll(policy.mAdminMap.values());
  final long identity=mInjector.binderClearCallingIdentity();
  try {
    LockPatternUtils utils=mInjector.newLockPatternUtils();
    if (utils.getActivePasswordQuality(userHandle) < policy.mActivePasswordQuality) {
      Slog.w(LOG_TAG,"Active password quality 0x" + Integer.toHexString(policy.mActivePasswordQuality) + " does not match actual quality 0x"+ Integer.toHexString(utils.getActivePasswordQuality(userHandle)));
      policy.mActivePasswordQuality=DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED;
      policy.mActivePasswordLength=0;
      policy.mActivePasswordUpperCase=0;
      policy.mActivePasswordLowerCase=0;
      policy.mActivePasswordLetters=0;
      policy.mActivePasswordNumeric=0;
      policy.mActivePasswordSymbols=0;
      policy.mActivePasswordNonLetter=0;
    }
  }
  finally {
    mInjector.binderRestoreCallingIdentity(identity);
  }
  validatePasswordOwnerLocked(policy);
  updateMaximumTimeToLockLocked(policy);
  updateLockTaskPackagesLocked(policy.mLockTaskPackages,userHandle);
  if (policy.mStatusBarDisabled) {
    setStatusBarDisabledInternal(policy.mStatusBarDisabled,userHandle);
  }
}
