{
  UserInfo currentUser;
  try {
    currentUser=mInjector.getIActivityManager().getCurrentUser();
  }
 catch (  RemoteException e) {
    Slog.e(LOG_TAG,"Failed to make remote calls to get current user",e);
    return null;
  }
  int userId=currentUser.id;
synchronized (this) {
    List<String> result=null;
    int[] profileIds=mUserManager.getProfileIdsWithDisabled(userId);
    for (    int profileId : profileIds) {
      DevicePolicyData policy=getUserDataUnchecked(profileId);
      final int N=policy.mAdminList.size();
      for (int j=0; j < N; j++) {
        ActiveAdmin admin=policy.mAdminList.get(j);
        List<String> fromAdmin=admin.permittedInputMethods;
        if (fromAdmin != null) {
          if (result == null) {
            result=new ArrayList<String>(fromAdmin);
          }
 else {
            result.retainAll(fromAdmin);
          }
        }
      }
    }
    if (result != null) {
      InputMethodManager inputMethodManager=mContext.getSystemService(InputMethodManager.class);
      List<InputMethodInfo> imes=inputMethodManager.getInputMethodList();
      long id=mInjector.binderClearCallingIdentity();
      try {
        if (imes != null) {
          for (          InputMethodInfo ime : imes) {
            ServiceInfo serviceInfo=ime.getServiceInfo();
            ApplicationInfo applicationInfo=serviceInfo.applicationInfo;
            if ((applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0) {
              result.add(serviceInfo.packageName);
            }
          }
        }
      }
  finally {
        mInjector.binderRestoreCallingIdentity(id);
      }
    }
    return result;
  }
}
