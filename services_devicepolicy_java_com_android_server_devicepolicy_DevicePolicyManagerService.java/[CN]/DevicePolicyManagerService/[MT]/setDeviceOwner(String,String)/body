{
  if (!mHasFeature) {
    return false;
  }
  if (packageName == null || !DeviceOwner.isInstalled(packageName,mContext.getPackageManager())) {
    throw new IllegalArgumentException("Invalid package name " + packageName + " for device owner");
  }
synchronized (this) {
    if (isDeviceProvisioned()) {
      throw new IllegalStateException("Trying to set device owner but device is already provisioned.");
    }
    if (mDeviceOwner != null && mDeviceOwner.hasDeviceOwner()) {
      throw new IllegalStateException("Trying to set device owner but device owner is already set.");
    }
    long token=Binder.clearCallingIdentity();
    try {
      mAppOpsService.setDeviceOwner(packageName);
    }
 catch (    RemoteException e) {
      Log.w(LOG_TAG,"Unable to notify AppOpsService of DeviceOwner",e);
    }
 finally {
      Binder.restoreCallingIdentity(token);
    }
    if (mDeviceOwner == null) {
      mDeviceOwner=DeviceOwner.createWithDeviceOwner(packageName,ownerName);
      mDeviceOwner.writeOwnerFile();
      return true;
    }
 else {
      mDeviceOwner.setDeviceOwner(packageName,ownerName);
      mDeviceOwner.writeOwnerFile();
      return true;
    }
  }
}
