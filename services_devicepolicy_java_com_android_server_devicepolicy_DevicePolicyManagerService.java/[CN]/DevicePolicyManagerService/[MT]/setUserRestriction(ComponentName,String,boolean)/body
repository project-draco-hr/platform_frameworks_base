{
  Preconditions.checkNotNull(who,"ComponentName is null");
  final int userHandle=mInjector.userHandleGetCallingUserId();
  final UserHandle user=new UserHandle(userHandle);
synchronized (mUserManagerInternal.getUserRestrictionsLock()) {
synchronized (this) {
      ActiveAdmin activeAdmin=getActiveAdminForCallerLocked(who,DeviceAdminInfo.USES_POLICY_PROFILE_OWNER);
      boolean isDeviceOwner=isDeviceOwner(who);
      if (!isDeviceOwner && userHandle != UserHandle.USER_SYSTEM && DEVICE_OWNER_USER_RESTRICTIONS.contains(key)) {
        throw new SecurityException("Profile owners cannot set user restriction " + key);
      }
      if (IMMUTABLE_USER_RESTRICTIONS.contains(key)) {
        throw new SecurityException("User restriction " + key + " cannot be changed");
      }
      final long id=mInjector.binderClearCallingIdentity();
      try {
        final boolean alreadyRestricted=mUserManager.hasUserRestriction(key,user);
        activeAdmin.ensureUserRestrictions().putBoolean(key,enabledFromThisOwner);
        saveSettingsLocked(userHandle);
        if (isDeviceOwner) {
          mUserManagerInternal.updateEffectiveUserRestrictionsForAllUsersRL();
        }
 else {
          mUserManagerInternal.updateEffectiveUserRestrictionsRL(userHandle);
        }
        final boolean enabled=mUserManager.hasUserRestriction(key,user);
        if (enabled && !alreadyRestricted) {
          if (UserManager.DISALLOW_UNMUTE_MICROPHONE.equals(key)) {
            mInjector.getIAudioService().setMicrophoneMute(true,mContext.getPackageName(),userHandle);
          }
 else           if (UserManager.DISALLOW_ADJUST_VOLUME.equals(key)) {
            mInjector.getIAudioService().setMasterMute(true,0,mContext.getPackageName(),userHandle);
          }
 else           if (UserManager.DISALLOW_CONFIG_WIFI.equals(key)) {
            mInjector.settingsSecurePutIntForUser(Settings.Secure.WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON,0,userHandle);
          }
 else           if (UserManager.DISALLOW_SHARE_LOCATION.equals(key)) {
            mInjector.settingsSecurePutIntForUser(Settings.Secure.LOCATION_MODE,Settings.Secure.LOCATION_MODE_OFF,userHandle);
            mInjector.settingsSecurePutStringForUser(Settings.Secure.LOCATION_PROVIDERS_ALLOWED,"",userHandle);
          }
 else           if (UserManager.DISALLOW_DEBUGGING_FEATURES.equals(key)) {
            if (userHandle == UserHandle.USER_SYSTEM) {
              mInjector.settingsGlobalPutStringForUser(Settings.Global.ADB_ENABLED,"0",userHandle);
            }
          }
 else           if (UserManager.ENSURE_VERIFY_APPS.equals(key)) {
            mInjector.settingsGlobalPutStringForUser(Settings.Global.PACKAGE_VERIFIER_ENABLE,"1",userHandle);
            mInjector.settingsGlobalPutStringForUser(Settings.Global.PACKAGE_VERIFIER_INCLUDE_ADB,"1",userHandle);
          }
 else           if (UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES.equals(key)) {
            mInjector.settingsSecurePutIntForUser(Settings.Secure.INSTALL_NON_MARKET_APPS,0,userHandle);
          }
        }
        if (enabled != alreadyRestricted) {
          if (UserManager.DISALLOW_SHARE_LOCATION.equals(key)) {
            final String property=Settings.Secure.SYS_PROP_SETTING_VERSION;
            long version=mInjector.systemPropertiesGetLong(property,0) + 1;
            mInjector.systemPropertiesSet(property,Long.toString(version));
            final String name=Settings.Secure.LOCATION_PROVIDERS_ALLOWED;
            Uri url=Uri.withAppendedPath(Settings.Secure.CONTENT_URI,name);
            mContext.getContentResolver().notifyChange(url,null,true,userHandle);
          }
        }
        if (!enabled && alreadyRestricted) {
          if (UserManager.DISALLOW_UNMUTE_MICROPHONE.equals(key)) {
            mInjector.getIAudioService().setMicrophoneMute(false,mContext.getPackageName(),userHandle);
          }
 else           if (UserManager.DISALLOW_ADJUST_VOLUME.equals(key)) {
            mInjector.getIAudioService().setMasterMute(false,0,mContext.getPackageName(),userHandle);
          }
        }
      }
 catch (      RemoteException re) {
        Slog.e(LOG_TAG,"Failed to talk to AudioService.",re);
      }
 finally {
        mInjector.binderRestoreCallingIdentity(id);
      }
      sendChangedNotification(userHandle);
    }
  }
}
