{
  Preconditions.checkNotNull(packageName,"packageName is null");
  final int callingUid=mInjector.binderGetCallingUid();
  try {
    int uid=mContext.getPackageManager().getPackageUidAsUser(packageName,0);
    if (uid != callingUid) {
      throw new SecurityException("Invalid packageName");
    }
  }
 catch (  NameNotFoundException e) {
    throw new SecurityException(e);
  }
synchronized (this) {
    final ComponentName deviceOwnerComponent=mOwners.getDeviceOwnerComponent();
    final int deviceOwnerUserId=mOwners.getDeviceOwnerUserId();
    if (!mOwners.hasDeviceOwner() || !deviceOwnerComponent.getPackageName().equals(packageName) || (deviceOwnerUserId != UserHandle.getUserId(callingUid))) {
      throw new SecurityException("clearDeviceOwner can only be called by the device owner");
    }
    enforceUserUnlocked(deviceOwnerUserId);
    final ActiveAdmin admin=getDeviceOwnerAdminLocked();
    if (admin != null) {
      admin.disableCamera=false;
      admin.userRestrictions=null;
      admin.forceEphemeralUsers=false;
      mUserManagerInternal.setForceEphemeralUsers(admin.forceEphemeralUsers);
    }
    clearUserPoliciesLocked(deviceOwnerUserId);
    mOwners.clearDeviceOwner();
    mOwners.writeDeviceOwner();
    updateDeviceOwnerLocked();
    disableDeviceLoggingIfNotCompliant();
    long ident=mInjector.binderClearCallingIdentity();
    try {
      mInjector.getIBackupManager().setBackupServiceActive(UserHandle.USER_SYSTEM,true);
      removeActiveAdminLocked(deviceOwnerComponent,deviceOwnerUserId);
    }
 catch (    RemoteException e) {
      throw new IllegalStateException("Failed reactivating backup service.",e);
    }
 finally {
      mInjector.binderRestoreCallingIdentity(ident);
    }
  }
}
