{
  Preconditions.checkNotNull(admin,"ComponentName is null");
  UserHandle user=null;
synchronized (this) {
    getActiveAdminForCallerLocked(admin,DeviceAdminInfo.USES_POLICY_DEVICE_OWNER);
    final long id=mInjector.binderClearCallingIdentity();
    try {
      UserInfo userInfo=mUserManager.createUser(name,0);
      if (userInfo != null) {
        user=userInfo.getUserHandle();
      }
    }
  finally {
      mInjector.binderRestoreCallingIdentity(id);
    }
  }
  if (user == null) {
    return null;
  }
  final long id=mInjector.binderClearCallingIdentity();
  try {
    final String adminPkg=admin.getPackageName();
    final int userHandle=user.getIdentifier();
    try {
      if (!mIPackageManager.isPackageAvailable(adminPkg,userHandle)) {
        mIPackageManager.installExistingPackageAsUser(adminPkg,userHandle);
      }
    }
 catch (    RemoteException e) {
      Slog.e(LOG_TAG,"Failed to make remote calls for createAndManageUser, " + "removing created user",e);
      mUserManager.removeUser(user.getIdentifier());
      return null;
    }
    setActiveAdmin(admin,true,userHandle);
synchronized (this) {
      DevicePolicyData policyData=getUserData(userHandle);
      policyData.mInitBundle=adminExtras;
      policyData.mAdminBroadcastPending=true;
      saveSettingsLocked(userHandle);
    }
    final String ownerName=getProfileOwnerName(Process.myUserHandle().getIdentifier());
    setProfileOwner(admin,ownerName,userHandle);
    if ((flags & DevicePolicyManager.SKIP_SETUP_WIZARD) != 0) {
      Settings.Secure.putIntForUser(mContext.getContentResolver(),Settings.Secure.USER_SETUP_COMPLETE,1,userHandle);
    }
    return user;
  }
  finally {
    mInjector.binderRestoreCallingIdentity(id);
  }
}
