{
  final int callingUid=Binder.getCallingUid();
  final int userHandle=UserHandle.getUserId(callingUid);
  final DevicePolicyData policy=getUserData(userHandle);
  List<ActiveAdmin> candidates=new ArrayList<ActiveAdmin>();
  if (who != null) {
    ActiveAdmin admin=policy.mAdminMap.get(who);
    if (admin == null) {
      throw new SecurityException("No active admin " + who);
    }
    if (admin.getUid() != callingUid) {
      throw new SecurityException("Admin " + who + " is not owned by uid "+ Binder.getCallingUid());
    }
    candidates.add(admin);
  }
 else {
    for (    ActiveAdmin admin : policy.mAdminList) {
      if (admin.getUid() == callingUid) {
        candidates.add(admin);
      }
    }
  }
  for (  ActiveAdmin admin : candidates) {
    boolean ownsDevice=isDeviceOwner(admin.info.getPackageName());
    boolean ownsProfile=(getProfileOwner(userHandle) != null && getProfileOwner(userHandle).getPackageName().equals(admin.info.getPackageName()));
    if (reqPolicy == DeviceAdminInfo.USES_POLICY_DEVICE_OWNER) {
      if (ownsDevice) {
        return admin;
      }
    }
 else     if (reqPolicy == DeviceAdminInfo.USES_POLICY_PROFILE_OWNER) {
      if (ownsDevice || ownsProfile) {
        return admin;
      }
    }
 else {
      if (admin.info.usesPolicy(reqPolicy)) {
        return admin;
      }
    }
  }
  if (who != null) {
    if (reqPolicy == DeviceAdminInfo.USES_POLICY_DEVICE_OWNER) {
      throw new SecurityException("Admin " + candidates.get(0).info.getComponent() + " does not own the device");
    }
    if (reqPolicy == DeviceAdminInfo.USES_POLICY_PROFILE_OWNER) {
      throw new SecurityException("Admin " + candidates.get(0).info.getComponent() + " does not own the profile");
    }
    throw new SecurityException("Admin " + candidates.get(0).info.getComponent() + " did not specify uses-policy for: "+ candidates.get(0).info.getTagForPolicy(reqPolicy));
  }
 else {
    throw new SecurityException("No active admin owned by uid " + Binder.getCallingUid() + " for policy #"+ reqPolicy);
  }
}
