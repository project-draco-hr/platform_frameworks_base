{
  final Pair<String,Integer> packageUserPair=new Pair<>(packageName,userId);
synchronized (this) {
    if (!mPackagesToRemove.contains(packageUserPair)) {
      return;
    }
    mPackagesToRemove.remove(packageUserPair);
  }
  try {
    if (mInjector.getIPackageManager().getPackageInfo(packageName,0,userId) == null) {
      return;
    }
  }
 catch (  RemoteException re) {
    Log.e(LOG_TAG,"Failure talking to PackageManager while getting package info");
  }
  try {
    mInjector.getIActivityManager().forceStopPackage(packageName,userId);
  }
 catch (  RemoteException re) {
    Log.e(LOG_TAG,"Failure talking to ActivityManager while force stopping package");
  }
  final Uri packageURI=Uri.parse("package:" + packageName);
  final Intent uninstallIntent=new Intent(Intent.ACTION_UNINSTALL_PACKAGE,packageURI);
  uninstallIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  mContext.startActivityAsUser(uninstallIntent,UserHandle.of(userId));
}
