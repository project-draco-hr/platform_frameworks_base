{
  DevicePolicyData policy=getUserData(userHandle);
  JournaledFile journal=makeJournaledFile(userHandle);
  FileOutputStream stream=null;
  try {
    stream=new FileOutputStream(journal.chooseForWrite(),false);
    XmlSerializer out=new FastXmlSerializer();
    out.setOutput(stream,"utf-8");
    out.startDocument(null,true);
    out.startTag(null,"policies");
    if (policy.mRestrictionsProvider != null) {
      out.attribute(null,ATTR_PERMISSION_PROVIDER,policy.mRestrictionsProvider.flattenToString());
    }
    if (policy.mUserSetupComplete) {
      out.attribute(null,ATTR_SETUP_COMPLETE,Boolean.toString(true));
    }
    if (policy.mDelegatedCertInstallerPackage != null) {
      out.attribute(null,ATTR_DELEGATED_CERT_INSTALLER,policy.mDelegatedCertInstallerPackage);
    }
    final int N=policy.mAdminList.size();
    for (int i=0; i < N; i++) {
      ActiveAdmin ap=policy.mAdminList.get(i);
      if (ap != null) {
        out.startTag(null,"admin");
        out.attribute(null,"name",ap.info.getComponent().flattenToString());
        ap.writeToXml(out);
        out.endTag(null,"admin");
      }
    }
    if (policy.mPasswordOwner >= 0) {
      out.startTag(null,"password-owner");
      out.attribute(null,"value",Integer.toString(policy.mPasswordOwner));
      out.endTag(null,"password-owner");
    }
    if (policy.mFailedPasswordAttempts != 0) {
      out.startTag(null,"failed-password-attempts");
      out.attribute(null,"value",Integer.toString(policy.mFailedPasswordAttempts));
      out.endTag(null,"failed-password-attempts");
    }
    if (policy.mActivePasswordQuality != 0 || policy.mActivePasswordLength != 0 || policy.mActivePasswordUpperCase != 0 || policy.mActivePasswordLowerCase != 0 || policy.mActivePasswordLetters != 0 || policy.mActivePasswordNumeric != 0 || policy.mActivePasswordSymbols != 0 || policy.mActivePasswordNonLetter != 0) {
      out.startTag(null,"active-password");
      out.attribute(null,"quality",Integer.toString(policy.mActivePasswordQuality));
      out.attribute(null,"length",Integer.toString(policy.mActivePasswordLength));
      out.attribute(null,"uppercase",Integer.toString(policy.mActivePasswordUpperCase));
      out.attribute(null,"lowercase",Integer.toString(policy.mActivePasswordLowerCase));
      out.attribute(null,"letters",Integer.toString(policy.mActivePasswordLetters));
      out.attribute(null,"numeric",Integer.toString(policy.mActivePasswordNumeric));
      out.attribute(null,"symbols",Integer.toString(policy.mActivePasswordSymbols));
      out.attribute(null,"nonletter",Integer.toString(policy.mActivePasswordNonLetter));
      out.endTag(null,"active-password");
    }
    for (int i=0; i < policy.mLockTaskPackages.size(); i++) {
      String component=policy.mLockTaskPackages.get(i);
      out.startTag(null,TAG_LOCK_TASK_COMPONENTS);
      out.attribute(null,"name",component);
      out.endTag(null,TAG_LOCK_TASK_COMPONENTS);
    }
    if (!policy.mStatusBarEnabledState) {
      out.startTag(null,TAG_STATUS_BAR);
      out.attribute(null,ATTR_ENABLED,Boolean.toString(policy.mStatusBarEnabledState));
      out.endTag(null,TAG_STATUS_BAR);
    }
    if (policy.doNotAskCredentialsOnBoot) {
      out.startTag(null,DO_NOT_ASK_CREDENTIALS_ON_BOOT_XML);
      out.endTag(null,DO_NOT_ASK_CREDENTIALS_ON_BOOT_XML);
    }
    out.endTag(null,"policies");
    out.endDocument();
    stream.flush();
    FileUtils.sync(stream);
    stream.close();
    journal.commit();
    sendChangedNotification(userHandle);
  }
 catch (  IOException e) {
    try {
      if (stream != null) {
        stream.close();
      }
    }
 catch (    IOException ex) {
    }
    journal.rollback();
  }
}
