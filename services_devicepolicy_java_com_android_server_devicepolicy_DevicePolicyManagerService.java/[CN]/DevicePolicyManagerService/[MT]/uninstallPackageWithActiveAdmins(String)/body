{
  enforceCanManageDeviceAdmin();
  Preconditions.checkArgument(!TextUtils.isEmpty(packageName));
  final int userId=mInjector.userHandleGetCallingUserId();
  final ComponentName profileOwner=getProfileOwner(userId);
  if (profileOwner != null && packageName.equals(profileOwner.getPackageName())) {
    throw new IllegalArgumentException("Cannot uninstall a package with a profile owner");
  }
  final ComponentName deviceOwner=getDeviceOwnerComponent(false);
  if (getDeviceOwnerUserId() == userId && deviceOwner != null && packageName.equals(deviceOwner.getPackageName())) {
    throw new IllegalArgumentException("Cannot uninstall a package with a device owner");
  }
  final Pair<String,Integer> packageUserPair=new Pair<>(packageName,userId);
synchronized (this) {
    mPackagesToRemove.add(packageUserPair);
  }
  final List<ComponentName> allActiveAdmins=getActiveAdmins(userId);
  final List<ComponentName> packageActiveAdmins=new ArrayList<>();
  if (allActiveAdmins != null) {
    for (    ComponentName activeAdmin : allActiveAdmins) {
      if (packageName.equals(activeAdmin.getPackageName())) {
        packageActiveAdmins.add(activeAdmin);
        removeActiveAdmin(activeAdmin,userId);
      }
    }
  }
  if (packageActiveAdmins.size() == 0) {
    startUninstallIntent(packageName,userId);
  }
 else {
    mHandler.postDelayed(new Runnable(){
      @Override public void run(){
        for (        ComponentName activeAdmin : packageActiveAdmins) {
          removeAdminArtifacts(activeAdmin,userId);
        }
        startUninstallIntent(packageName,userId);
      }
    }
,DEVICE_ADMIN_DEACTIVATE_TIMEOUT);
  }
}
