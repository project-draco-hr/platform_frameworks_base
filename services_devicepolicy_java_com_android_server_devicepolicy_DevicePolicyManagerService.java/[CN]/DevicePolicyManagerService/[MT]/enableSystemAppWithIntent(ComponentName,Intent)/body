{
  Preconditions.checkNotNull(who,"ComponentName is null");
synchronized (this) {
    getActiveAdminForCallerLocked(who,DeviceAdminInfo.USES_POLICY_PROFILE_OWNER);
    int userId=UserHandle.getCallingUserId();
    long id=mInjector.binderClearCallingIdentity();
    try {
      UserManager um=UserManager.get(mContext);
      UserInfo primaryUser=um.getProfileParent(userId);
      if (primaryUser == null) {
        primaryUser=um.getUserInfo(userId);
      }
      List<ResolveInfo> activitiesToEnable=mIPackageManager.queryIntentActivities(intent,intent.resolveTypeIfNeeded(mContext.getContentResolver()),0,primaryUser.id);
      if (VERBOSE_LOG) {
        Slog.d(LOG_TAG,"Enabling system activities: " + activitiesToEnable);
      }
      int numberOfAppsInstalled=0;
      if (activitiesToEnable != null) {
        for (        ResolveInfo info : activitiesToEnable) {
          if (info.activityInfo != null) {
            String packageName=info.activityInfo.packageName;
            if (isSystemApp(mIPackageManager,packageName,primaryUser.id)) {
              numberOfAppsInstalled++;
              mIPackageManager.installExistingPackageAsUser(packageName,userId);
            }
 else {
              Slog.d(LOG_TAG,"Not enabling " + packageName + " since is not a"+ " system app");
            }
          }
        }
      }
      return numberOfAppsInstalled;
    }
 catch (    RemoteException e) {
      Slog.wtf(LOG_TAG,"Failed to resolve intent for: " + intent);
      return 0;
    }
 finally {
      mInjector.binderRestoreCallingIdentity(id);
    }
  }
}
