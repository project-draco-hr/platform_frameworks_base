{
  if (!mHasFeature) {
    return false;
  }
  Preconditions.checkNotNull(who,"ComponentName is null");
  ensureDeviceOwnerManagingSingleUser(who);
  if (mRemoteBugreportServiceIsActive.get() || (getDeviceOwnerRemoteBugreportUri() != null)) {
    Slog.d(LOG_TAG,"Remote bugreport wasn't started because there's already one running.");
    return false;
  }
  final long callingIdentity=mInjector.binderClearCallingIdentity();
  try {
    ActivityManagerNative.getDefault().requestBugReport(ActivityManager.BUGREPORT_OPTION_REMOTE);
    mRemoteBugreportServiceIsActive.set(true);
    mRemoteBugreportSharingAccepted.set(false);
    registerRemoteBugreportReceivers();
    mInjector.getNotificationManager().notify(LOG_TAG,RemoteBugreportUtils.REMOTE_BUGREPORT_CONSENT_NOTIFICATION_ID,RemoteBugreportUtils.buildRemoteBugreportConsentNotification(mContext));
    mInjector.getNotificationManager().notify(LOG_TAG,RemoteBugreportUtils.REMOTE_BUGREPORT_IN_PROGRESS_NOTIFICATION_ID,RemoteBugreportUtils.buildRemoteBugreportInProgressNotification(mContext,true));
    mHandler.postDelayed(mRemoteBugreportTimeoutRunnable,RemoteBugreportUtils.REMOTE_BUGREPORT_TIMEOUT_MILLIS);
    return true;
  }
 catch (  RemoteException re) {
    Slog.e(LOG_TAG,"Failed to make remote calls to start bugreportremote service",re);
    return false;
  }
 finally {
    mInjector.binderRestoreCallingIdentity(callingIdentity);
  }
}
