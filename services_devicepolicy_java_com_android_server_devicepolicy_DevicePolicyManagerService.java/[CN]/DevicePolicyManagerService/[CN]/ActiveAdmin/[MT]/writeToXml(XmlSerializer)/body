{
  out.startTag(null,TAG_POLICIES);
  info.writePoliciesToXml(out);
  out.endTag(null,TAG_POLICIES);
  if (passwordQuality != DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED) {
    out.startTag(null,TAG_PASSWORD_QUALITY);
    out.attribute(null,ATTR_VALUE,Integer.toString(passwordQuality));
    out.endTag(null,TAG_PASSWORD_QUALITY);
    if (minimumPasswordLength != DEF_MINIMUM_PASSWORD_LENGTH) {
      out.startTag(null,TAG_MIN_PASSWORD_LENGTH);
      out.attribute(null,ATTR_VALUE,Integer.toString(minimumPasswordLength));
      out.endTag(null,TAG_MIN_PASSWORD_LENGTH);
    }
    if (passwordHistoryLength != DEF_PASSWORD_HISTORY_LENGTH) {
      out.startTag(null,TAG_PASSWORD_HISTORY_LENGTH);
      out.attribute(null,ATTR_VALUE,Integer.toString(passwordHistoryLength));
      out.endTag(null,TAG_PASSWORD_HISTORY_LENGTH);
    }
    if (minimumPasswordUpperCase != DEF_MINIMUM_PASSWORD_UPPER_CASE) {
      out.startTag(null,TAG_MIN_PASSWORD_UPPERCASE);
      out.attribute(null,ATTR_VALUE,Integer.toString(minimumPasswordUpperCase));
      out.endTag(null,TAG_MIN_PASSWORD_UPPERCASE);
    }
    if (minimumPasswordLowerCase != DEF_MINIMUM_PASSWORD_LOWER_CASE) {
      out.startTag(null,TAG_MIN_PASSWORD_LOWERCASE);
      out.attribute(null,ATTR_VALUE,Integer.toString(minimumPasswordLowerCase));
      out.endTag(null,TAG_MIN_PASSWORD_LOWERCASE);
    }
    if (minimumPasswordLetters != DEF_MINIMUM_PASSWORD_LETTERS) {
      out.startTag(null,TAG_MIN_PASSWORD_LETTERS);
      out.attribute(null,ATTR_VALUE,Integer.toString(minimumPasswordLetters));
      out.endTag(null,TAG_MIN_PASSWORD_LETTERS);
    }
    if (minimumPasswordNumeric != DEF_MINIMUM_PASSWORD_NUMERIC) {
      out.startTag(null,TAG_MIN_PASSWORD_NUMERIC);
      out.attribute(null,ATTR_VALUE,Integer.toString(minimumPasswordNumeric));
      out.endTag(null,TAG_MIN_PASSWORD_NUMERIC);
    }
    if (minimumPasswordSymbols != DEF_MINIMUM_PASSWORD_SYMBOLS) {
      out.startTag(null,TAG_MIN_PASSWORD_SYMBOLS);
      out.attribute(null,ATTR_VALUE,Integer.toString(minimumPasswordSymbols));
      out.endTag(null,TAG_MIN_PASSWORD_SYMBOLS);
    }
    if (minimumPasswordNonLetter > DEF_MINIMUM_PASSWORD_NON_LETTER) {
      out.startTag(null,TAG_MIN_PASSWORD_NONLETTER);
      out.attribute(null,ATTR_VALUE,Integer.toString(minimumPasswordNonLetter));
      out.endTag(null,TAG_MIN_PASSWORD_NONLETTER);
    }
  }
  if (maximumTimeToUnlock != DEF_MAXIMUM_TIME_TO_UNLOCK) {
    out.startTag(null,TAG_MAX_TIME_TO_UNLOCK);
    out.attribute(null,ATTR_VALUE,Long.toString(maximumTimeToUnlock));
    out.endTag(null,TAG_MAX_TIME_TO_UNLOCK);
  }
  if (maximumFailedPasswordsForWipe != DEF_MAXIMUM_FAILED_PASSWORDS_FOR_WIPE) {
    out.startTag(null,TAG_MAX_FAILED_PASSWORD_WIPE);
    out.attribute(null,ATTR_VALUE,Integer.toString(maximumFailedPasswordsForWipe));
    out.endTag(null,TAG_MAX_FAILED_PASSWORD_WIPE);
  }
  if (specifiesGlobalProxy) {
    out.startTag(null,TAG_SPECIFIES_GLOBAL_PROXY);
    out.attribute(null,ATTR_VALUE,Boolean.toString(specifiesGlobalProxy));
    out.endTag(null,TAG_SPECIFIES_GLOBAL_PROXY);
    if (globalProxySpec != null) {
      out.startTag(null,TAG_GLOBAL_PROXY_SPEC);
      out.attribute(null,ATTR_VALUE,globalProxySpec);
      out.endTag(null,TAG_GLOBAL_PROXY_SPEC);
    }
    if (globalProxyExclusionList != null) {
      out.startTag(null,TAG_GLOBAL_PROXY_EXCLUSION_LIST);
      out.attribute(null,ATTR_VALUE,globalProxyExclusionList);
      out.endTag(null,TAG_GLOBAL_PROXY_EXCLUSION_LIST);
    }
  }
  if (passwordExpirationTimeout != DEF_PASSWORD_EXPIRATION_TIMEOUT) {
    out.startTag(null,TAG_PASSWORD_EXPIRATION_TIMEOUT);
    out.attribute(null,ATTR_VALUE,Long.toString(passwordExpirationTimeout));
    out.endTag(null,TAG_PASSWORD_EXPIRATION_TIMEOUT);
  }
  if (passwordExpirationDate != DEF_PASSWORD_EXPIRATION_DATE) {
    out.startTag(null,TAG_PASSWORD_EXPIRATION_DATE);
    out.attribute(null,ATTR_VALUE,Long.toString(passwordExpirationDate));
    out.endTag(null,TAG_PASSWORD_EXPIRATION_DATE);
  }
  if (encryptionRequested) {
    out.startTag(null,TAG_ENCRYPTION_REQUESTED);
    out.attribute(null,ATTR_VALUE,Boolean.toString(encryptionRequested));
    out.endTag(null,TAG_ENCRYPTION_REQUESTED);
  }
  if (disableCamera) {
    out.startTag(null,TAG_DISABLE_CAMERA);
    out.attribute(null,ATTR_VALUE,Boolean.toString(disableCamera));
    out.endTag(null,TAG_DISABLE_CAMERA);
  }
  if (disableCallerId) {
    out.startTag(null,TAG_DISABLE_CALLER_ID);
    out.attribute(null,ATTR_VALUE,Boolean.toString(disableCallerId));
    out.endTag(null,TAG_DISABLE_CALLER_ID);
  }
  if (disableBluetoothContactSharing) {
    out.startTag(null,TAG_DISABLE_BLUETOOTH_CONTACT_SHARING);
    out.attribute(null,ATTR_VALUE,Boolean.toString(disableBluetoothContactSharing));
    out.endTag(null,TAG_DISABLE_BLUETOOTH_CONTACT_SHARING);
  }
  if (disableScreenCapture) {
    out.startTag(null,TAG_DISABLE_SCREEN_CAPTURE);
    out.attribute(null,ATTR_VALUE,Boolean.toString(disableScreenCapture));
    out.endTag(null,TAG_DISABLE_SCREEN_CAPTURE);
  }
  if (requireAutoTime) {
    out.startTag(null,TAG_REQUIRE_AUTO_TIME);
    out.attribute(null,ATTR_VALUE,Boolean.toString(requireAutoTime));
    out.endTag(null,TAG_REQUIRE_AUTO_TIME);
  }
  if (disabledKeyguardFeatures != DEF_KEYGUARD_FEATURES_DISABLED) {
    out.startTag(null,TAG_DISABLE_KEYGUARD_FEATURES);
    out.attribute(null,ATTR_VALUE,Integer.toString(disabledKeyguardFeatures));
    out.endTag(null,TAG_DISABLE_KEYGUARD_FEATURES);
  }
  if (!accountTypesWithManagementDisabled.isEmpty()) {
    out.startTag(null,TAG_DISABLE_ACCOUNT_MANAGEMENT);
    for (    String ac : accountTypesWithManagementDisabled) {
      out.startTag(null,TAG_ACCOUNT_TYPE);
      out.attribute(null,ATTR_VALUE,ac);
      out.endTag(null,TAG_ACCOUNT_TYPE);
    }
    out.endTag(null,TAG_DISABLE_ACCOUNT_MANAGEMENT);
  }
  if (!trustAgentInfos.isEmpty()) {
    Set<Entry<String,TrustAgentInfo>> set=trustAgentInfos.entrySet();
    out.startTag(null,TAG_MANAGE_TRUST_AGENT_FEATURES);
    for (    Entry<String,TrustAgentInfo> entry : set) {
      TrustAgentInfo trustAgentInfo=entry.getValue();
      out.startTag(null,TAG_TRUST_AGENT_COMPONENT);
      out.attribute(null,ATTR_VALUE,entry.getKey());
      if (trustAgentInfo.options != null) {
        out.startTag(null,TAG_TRUST_AGENT_COMPONENT_OPTIONS);
        try {
          trustAgentInfo.options.saveToXml(out);
        }
 catch (        XmlPullParserException e) {
          Log.e(LOG_TAG,"Failed to save TrustAgent options",e);
        }
        out.endTag(null,TAG_TRUST_AGENT_COMPONENT_OPTIONS);
      }
      out.endTag(null,TAG_TRUST_AGENT_COMPONENT);
    }
    out.endTag(null,TAG_MANAGE_TRUST_AGENT_FEATURES);
  }
  if (crossProfileWidgetProviders != null && !crossProfileWidgetProviders.isEmpty()) {
    out.startTag(null,TAG_CROSS_PROFILE_WIDGET_PROVIDERS);
    final int providerCount=crossProfileWidgetProviders.size();
    for (int i=0; i < providerCount; i++) {
      String provider=crossProfileWidgetProviders.get(i);
      out.startTag(null,TAG_PROVIDER);
      out.attribute(null,ATTR_VALUE,provider);
      out.endTag(null,TAG_PROVIDER);
    }
    out.endTag(null,TAG_CROSS_PROFILE_WIDGET_PROVIDERS);
  }
  writePackageListToXml(out,TAG_PERMITTED_ACCESSIBILITY_SERVICES,permittedAccessiblityServices);
  writePackageListToXml(out,TAG_PERMITTED_IMES,permittedInputMethods);
  writePackageListToXml(out,TAG_KEEP_UNINSTALLED_PACKAGES,keepUninstalledPackages);
  if (hasUserRestrictions()) {
    UserRestrictionsUtils.writeRestrictions(out,userRestrictions,TAG_USER_RESTRICTIONS);
  }
}
