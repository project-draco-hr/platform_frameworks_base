{
  int outerDepth=parser.getDepth();
  int type;
  while ((type=parser.next()) != END_DOCUMENT && (type != END_TAG || parser.getDepth() > outerDepth)) {
    if (type == END_TAG || type == TEXT) {
      continue;
    }
    String tag=parser.getName();
    if (TAG_POLICIES.equals(tag)) {
      info.readPoliciesFromXml(parser);
    }
 else     if (TAG_PASSWORD_QUALITY.equals(tag)) {
      passwordQuality=Integer.parseInt(parser.getAttributeValue(null,ATTR_VALUE));
    }
 else     if (TAG_MIN_PASSWORD_LENGTH.equals(tag)) {
      minimumPasswordLength=Integer.parseInt(parser.getAttributeValue(null,ATTR_VALUE));
    }
 else     if (TAG_PASSWORD_HISTORY_LENGTH.equals(tag)) {
      passwordHistoryLength=Integer.parseInt(parser.getAttributeValue(null,ATTR_VALUE));
    }
 else     if (TAG_MIN_PASSWORD_UPPERCASE.equals(tag)) {
      minimumPasswordUpperCase=Integer.parseInt(parser.getAttributeValue(null,ATTR_VALUE));
    }
 else     if (TAG_MIN_PASSWORD_LOWERCASE.equals(tag)) {
      minimumPasswordLowerCase=Integer.parseInt(parser.getAttributeValue(null,ATTR_VALUE));
    }
 else     if (TAG_MIN_PASSWORD_LETTERS.equals(tag)) {
      minimumPasswordLetters=Integer.parseInt(parser.getAttributeValue(null,ATTR_VALUE));
    }
 else     if (TAG_MIN_PASSWORD_NUMERIC.equals(tag)) {
      minimumPasswordNumeric=Integer.parseInt(parser.getAttributeValue(null,ATTR_VALUE));
    }
 else     if (TAG_MIN_PASSWORD_SYMBOLS.equals(tag)) {
      minimumPasswordSymbols=Integer.parseInt(parser.getAttributeValue(null,ATTR_VALUE));
    }
 else     if (TAG_MIN_PASSWORD_NONLETTER.equals(tag)) {
      minimumPasswordNonLetter=Integer.parseInt(parser.getAttributeValue(null,ATTR_VALUE));
    }
 else     if (TAG_MAX_TIME_TO_UNLOCK.equals(tag)) {
      maximumTimeToUnlock=Long.parseLong(parser.getAttributeValue(null,ATTR_VALUE));
    }
 else     if (TAG_MAX_FAILED_PASSWORD_WIPE.equals(tag)) {
      maximumFailedPasswordsForWipe=Integer.parseInt(parser.getAttributeValue(null,ATTR_VALUE));
    }
 else     if (TAG_SPECIFIES_GLOBAL_PROXY.equals(tag)) {
      specifiesGlobalProxy=Boolean.parseBoolean(parser.getAttributeValue(null,ATTR_VALUE));
    }
 else     if (TAG_GLOBAL_PROXY_SPEC.equals(tag)) {
      globalProxySpec=parser.getAttributeValue(null,ATTR_VALUE);
    }
 else     if (TAG_GLOBAL_PROXY_EXCLUSION_LIST.equals(tag)) {
      globalProxyExclusionList=parser.getAttributeValue(null,ATTR_VALUE);
    }
 else     if (TAG_PASSWORD_EXPIRATION_TIMEOUT.equals(tag)) {
      passwordExpirationTimeout=Long.parseLong(parser.getAttributeValue(null,ATTR_VALUE));
    }
 else     if (TAG_PASSWORD_EXPIRATION_DATE.equals(tag)) {
      passwordExpirationDate=Long.parseLong(parser.getAttributeValue(null,ATTR_VALUE));
    }
 else     if (TAG_ENCRYPTION_REQUESTED.equals(tag)) {
      encryptionRequested=Boolean.parseBoolean(parser.getAttributeValue(null,ATTR_VALUE));
    }
 else     if (TAG_DISABLE_CAMERA.equals(tag)) {
      disableCamera=Boolean.parseBoolean(parser.getAttributeValue(null,ATTR_VALUE));
    }
 else     if (TAG_DISABLE_CALLER_ID.equals(tag)) {
      disableCallerId=Boolean.parseBoolean(parser.getAttributeValue(null,ATTR_VALUE));
    }
 else     if (TAG_DISABLE_CONTACTS_SEARCH.equals(tag)) {
      disableContactsSearch=Boolean.parseBoolean(parser.getAttributeValue(null,ATTR_VALUE));
    }
 else     if (TAG_DISABLE_BLUETOOTH_CONTACT_SHARING.equals(tag)) {
      disableBluetoothContactSharing=Boolean.parseBoolean(parser.getAttributeValue(null,ATTR_VALUE));
    }
 else     if (TAG_DISABLE_SCREEN_CAPTURE.equals(tag)) {
      disableScreenCapture=Boolean.parseBoolean(parser.getAttributeValue(null,ATTR_VALUE));
    }
 else     if (TAG_REQUIRE_AUTO_TIME.equals(tag)) {
      requireAutoTime=Boolean.parseBoolean(parser.getAttributeValue(null,ATTR_VALUE));
    }
 else     if (TAG_DISABLE_KEYGUARD_FEATURES.equals(tag)) {
      disabledKeyguardFeatures=Integer.parseInt(parser.getAttributeValue(null,ATTR_VALUE));
    }
 else     if (TAG_DISABLE_ACCOUNT_MANAGEMENT.equals(tag)) {
      accountTypesWithManagementDisabled=readDisableAccountInfo(parser,tag);
    }
 else     if (TAG_MANAGE_TRUST_AGENT_FEATURES.equals(tag)) {
      trustAgentInfos=getAllTrustAgentInfos(parser,tag);
    }
 else     if (TAG_CROSS_PROFILE_WIDGET_PROVIDERS.equals(tag)) {
      crossProfileWidgetProviders=getCrossProfileWidgetProviders(parser,tag);
    }
 else     if (TAG_PERMITTED_ACCESSIBILITY_SERVICES.equals(tag)) {
      permittedAccessiblityServices=readPackageList(parser,tag);
    }
 else     if (TAG_PERMITTED_IMES.equals(tag)) {
      permittedInputMethods=readPackageList(parser,tag);
    }
 else     if (TAG_KEEP_UNINSTALLED_PACKAGES.equals(tag)) {
      keepUninstalledPackages=readPackageList(parser,tag);
    }
 else     if (TAG_USER_RESTRICTIONS.equals(tag)) {
      UserRestrictionsUtils.readRestrictions(parser,ensureUserRestrictions());
    }
 else {
      Slog.w(LOG_TAG,"Unknown admin tag: " + tag);
      XmlUtils.skipCurrentTag(parser);
    }
  }
}
