{
  if (intent.hasExtra(EXTRA_CANCEL)) {
    handleCancel(intent);
    return;
  }
  final PowerManager.WakeLock wakeLock=mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG);
  final ArrayList<DocumentInfo> srcs=intent.getParcelableArrayListExtra(EXTRA_SRC_LIST);
  final DocumentStack stack=intent.getParcelableExtra(Shared.EXTRA_STACK);
  final int transferMode=intent.getIntExtra(EXTRA_TRANSFER_MODE,TRANSFER_MODE_COPY);
  try {
    wakeLock.acquire();
    mSrcClient=DocumentsApplication.acquireUnstableProviderOrThrow(getContentResolver(),srcs.get(0).authority);
    mDstClient=DocumentsApplication.acquireUnstableProviderOrThrow(getContentResolver(),stack.peek().authority);
    setupCopyJob(srcs,stack,transferMode);
    final String opDesc=transferMode == TRANSFER_MODE_COPY ? "copy" : "move";
    DocumentInfo srcInfo;
    DocumentInfo dstInfo;
    for (int i=0; i < srcs.size() && !mIsCancelled; ++i) {
      srcInfo=srcs.get(i);
      dstInfo=stack.peek();
      if (dstInfo.equals(srcInfo) || isDescendentOf(srcInfo,dstInfo)) {
        if (DEBUG)         Log.d(TAG,"Skipping recursive " + opDesc + " of directory "+ dstInfo.derivedUri);
        mFailedFiles.add(srcInfo);
        continue;
      }
      if (DEBUG)       Log.d(TAG,"Performing " + opDesc + " of "+ srcInfo.displayName+ " ("+ srcInfo.derivedUri+ ")"+ " to "+ dstInfo.displayName+ " ("+ dstInfo.derivedUri+ ")");
      copy(srcInfo,dstInfo,transferMode);
    }
  }
 catch (  Exception e) {
    Log.e(TAG,"Exceptions occurred during copying",e);
  }
 finally {
    if (DEBUG)     Log.d(TAG,"Cleaning up after copy");
    ContentProviderClient.releaseQuietly(mSrcClient);
    ContentProviderClient.releaseQuietly(mDstClient);
    wakeLock.release();
    mNotificationManager.cancel(mJobId,0);
    if (mFailedFiles.size() > 0) {
      Log.e(TAG,mFailedFiles.size() + " files failed to copy");
      final Context context=getApplicationContext();
      final Intent navigateIntent=buildNavigateIntent(context,stack);
      navigateIntent.putExtra(EXTRA_FAILURE,FAILURE_COPY);
      navigateIntent.putExtra(EXTRA_TRANSFER_MODE,transferMode);
      navigateIntent.putParcelableArrayListExtra(EXTRA_SRC_LIST,mFailedFiles);
      final int titleResourceId=(transferMode == TRANSFER_MODE_COPY ? R.plurals.copy_error_notification_title : R.plurals.move_error_notification_title);
      final Notification.Builder errorBuilder=new Notification.Builder(this).setContentTitle(context.getResources().getQuantityString(titleResourceId,mFailedFiles.size(),mFailedFiles.size())).setContentText(getString(R.string.notification_touch_for_details)).setContentIntent(PendingIntent.getActivity(context,0,navigateIntent,PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_ONE_SHOT)).setCategory(Notification.CATEGORY_ERROR).setSmallIcon(R.drawable.ic_menu_copy).setAutoCancel(true);
      mNotificationManager.notify(mJobId,0,errorBuilder.build());
    }
    if (mJobFinishedListener != null) {
      mJobFinishedListener.onFinished(mFailedFiles);
    }
    if (DEBUG)     Log.d(TAG,"Done cleaning up");
  }
}
