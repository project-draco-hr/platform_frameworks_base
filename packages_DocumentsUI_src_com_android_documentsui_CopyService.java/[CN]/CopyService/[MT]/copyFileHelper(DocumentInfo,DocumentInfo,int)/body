{
  CancellationSignal canceller=new CancellationSignal();
  ParcelFileDescriptor srcFile=null;
  ParcelFileDescriptor dstFile=null;
  InputStream src=null;
  OutputStream dst=null;
  boolean success=true;
  try {
    if (srcInfo.isVirtualDocument() && srcInfo.isTypedDocument()) {
      final String[] streamTypes=mSrcClient.getStreamTypes(srcInfo.derivedUri,"*/*");
      if (streamTypes.length > 0) {
        final AssetFileDescriptor srcFileAsAsset=mSrcClient.openTypedAssetFileDescriptor(srcInfo.derivedUri,streamTypes[0],null,canceller);
        srcFile=srcFileAsAsset.getParcelFileDescriptor();
        src=new AssetFileDescriptor.AutoCloseInputStream(srcFileAsAsset);
      }
 else {
        mFailedFiles.add(srcInfo);
      }
    }
 else {
      srcFile=mSrcClient.openFile(srcInfo.derivedUri,"r",canceller);
      src=new ParcelFileDescriptor.AutoCloseInputStream(srcFile);
    }
    dstFile=mDstClient.openFile(dstInfo.derivedUri,"w",canceller);
    dst=new ParcelFileDescriptor.AutoCloseOutputStream(dstFile);
    byte[] buffer=new byte[8192];
    int len;
    while ((len=src.read(buffer)) != -1) {
      if (mIsCancelled) {
        success=false;
        break;
      }
      dst.write(buffer,0,len);
      makeProgress(len);
    }
    srcFile.checkError();
  }
 catch (  IOException e) {
    success=false;
    mFailedFiles.add(srcInfo);
    if (dstFile != null) {
      try {
        dstFile.closeWithError(e.getMessage());
      }
 catch (      IOException closeError) {
        Log.e(TAG,"Error closing destination",closeError);
      }
    }
  }
 finally {
    IoUtils.closeQuietly(src);
    IoUtils.closeQuietly(dst);
  }
  if (!success) {
    canceller.cancel();
    try {
      DocumentsContract.deleteDocument(mDstClient,dstInfo.derivedUri);
    }
 catch (    RemoteException e) {
      Log.w(TAG,"Failed to cleanup after copy error: " + srcInfo.derivedUri,e);
      throw e;
    }
  }
  return success;
}
