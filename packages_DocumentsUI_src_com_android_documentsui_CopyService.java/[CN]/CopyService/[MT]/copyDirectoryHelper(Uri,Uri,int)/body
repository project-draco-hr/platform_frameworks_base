{
  final String queryColumns[]=new String[]{Document.COLUMN_DISPLAY_NAME,Document.COLUMN_DOCUMENT_ID,Document.COLUMN_MIME_TYPE,Document.COLUMN_SIZE};
  final Uri queryUri=DocumentsContract.buildChildDocumentsUri(srcDirUri.getAuthority(),DocumentsContract.getDocumentId(srcDirUri));
  Cursor cursor=null;
  try {
    cursor=mSrcClient.query(queryUri,queryColumns,null,null,null);
    while (cursor.moveToNext()) {
      final String childMimeType=getCursorString(cursor,Document.COLUMN_MIME_TYPE);
      final Uri dstUri=DocumentsContract.createDocument(mDstClient,dstDirUri,childMimeType,getCursorString(cursor,Document.COLUMN_DISPLAY_NAME));
      final Uri childUri=DocumentsContract.buildDocumentUri(srcDirUri.getAuthority(),getCursorString(cursor,Document.COLUMN_DOCUMENT_ID));
      if (Document.MIME_TYPE_DIR.equals(childMimeType)) {
        copyDirectoryHelper(childUri,dstUri,mode);
      }
 else {
        copyFileHelper(childUri,dstUri,mode);
      }
    }
    if (mode == TRANSFER_MODE_MOVE) {
      try {
        DocumentsContract.deleteDocument(mSrcClient,srcDirUri);
      }
 catch (      RemoteException e) {
        Log.w(TAG,"Failed to clean up after move: " + srcDirUri,e);
        throw e;
      }
    }
  }
  finally {
    IoUtils.closeQuietly(cursor);
  }
}
