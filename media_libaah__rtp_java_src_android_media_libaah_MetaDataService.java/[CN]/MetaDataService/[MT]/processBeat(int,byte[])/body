{
  if (buffer == null) {
    return;
  }
  ByteBuffer byteBuffer=ByteBuffer.wrap(buffer,0,item_len);
  byteBuffer.order(ByteOrder.BIG_ENDIAN);
  short count=byteBuffer.getShort();
  if (count * BEAT_FIXED_LENGTH + 2 != item_len) {
    return;
  }
  if (mCachedBeats == null || mCachedBeats.length < count) {
    BeatListener.BeatInfo[] beats=new BeatListener.BeatInfo[count];
    int i=0;
    if (mCachedBeats != null) {
      for (; i < mCachedBeats.length; i++) {
        beats[i]=mCachedBeats[i];
      }
    }
    for (; i < count; i++) {
      beats[i]=new BeatListener.BeatInfo();
    }
    mCachedBeats=beats;
  }
  for (int idx=0; idx < count; idx++) {
    mCachedBeats[idx].timestamp=byteBuffer.getLong();
    mCachedBeats[idx].beatValue=byteBuffer.getFloat();
    mCachedBeats[idx].smoothedBeatValue=byteBuffer.getFloat();
    mCachedBeats[idx].sequenceNumber=byteBuffer.getInt();
  }
synchronized (this) {
    for (int i=0, c=mBeatListeners.size(); i < c; i++) {
      mBeatListeners.get(i).onBeat(count,mCachedBeats);
    }
  }
}
