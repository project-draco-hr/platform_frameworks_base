{
  if (Log.isLoggable(TAG,Log.VERBOSE)) {
    Log.v(TAG,"removeAccount: " + account + ", response "+ response+ ", caller's uid "+ Binder.getCallingUid()+ ", pid "+ Binder.getCallingPid());
  }
  if (response == null)   throw new IllegalArgumentException("response is null");
  if (account == null)   throw new IllegalArgumentException("account is null");
  checkManageAccountsPermission();
  UserHandle user=Binder.getCallingUserHandle();
  UserAccounts accounts=getUserAccountsForCaller();
  if (!canUserModifyAccounts(Binder.getCallingUid())) {
    try {
      response.onError(AccountManager.ERROR_CODE_UNSUPPORTED_OPERATION,"User cannot modify accounts");
    }
 catch (    RemoteException re) {
    }
  }
  long identityToken=clearCallingIdentity();
  cancelNotification(getSigninRequiredNotificationId(accounts,account),user);
synchronized (accounts.credentialsPermissionNotificationIds) {
    for (    Pair<Pair<Account,String>,Integer> pair : accounts.credentialsPermissionNotificationIds.keySet()) {
      if (account.equals(pair.first.first)) {
        int id=accounts.credentialsPermissionNotificationIds.get(pair);
        cancelNotification(id,user);
      }
    }
  }
  try {
    new RemoveAccountSession(accounts,response,account).bind();
  }
  finally {
    restoreCallingIdentity(identityToken);
  }
}
