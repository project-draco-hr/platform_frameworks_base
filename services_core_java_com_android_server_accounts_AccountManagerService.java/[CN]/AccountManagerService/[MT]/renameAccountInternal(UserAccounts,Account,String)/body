{
  Account resultAccount=null;
  cancelNotification(getSigninRequiredNotificationId(accounts,accountToRename),new UserHandle(accounts.userId));
synchronized (accounts.credentialsPermissionNotificationIds) {
    for (    Pair<Pair<Account,String>,Integer> pair : accounts.credentialsPermissionNotificationIds.keySet()) {
      if (accountToRename.equals(pair.first.first)) {
        int id=accounts.credentialsPermissionNotificationIds.get(pair);
        cancelNotification(id,new UserHandle(accounts.userId));
      }
    }
  }
synchronized (accounts.cacheLock) {
    final SQLiteDatabase db=accounts.openHelper.getWritableDatabase();
    db.beginTransaction();
    boolean isSuccessful=false;
    Account renamedAccount=new Account(newName,accountToRename.type);
    try {
      final ContentValues values=new ContentValues();
      values.put(ACCOUNTS_NAME,newName);
      values.put(ACCOUNTS_PREVIOUS_NAME,accountToRename.name);
      final long accountId=getAccountIdLocked(db,accountToRename);
      if (accountId >= 0) {
        final String[] argsAccountId={String.valueOf(accountId)};
        db.update(TABLE_ACCOUNTS,values,ACCOUNTS_ID + "=?",argsAccountId);
        db.setTransactionSuccessful();
        isSuccessful=true;
      }
    }
  finally {
      db.endTransaction();
      if (isSuccessful) {
        insertAccountIntoCacheLocked(accounts,renamedAccount);
        HashMap<String,String> tmpData=accounts.userDataCache.get(accountToRename);
        HashMap<String,String> tmpTokens=accounts.authTokenCache.get(accountToRename);
        removeAccountFromCacheLocked(accounts,accountToRename);
        accounts.userDataCache.put(renamedAccount,tmpData);
        accounts.authTokenCache.put(renamedAccount,tmpTokens);
        accounts.previousNameCache.put(renamedAccount,new AtomicReference<String>(accountToRename.name));
        resultAccount=renamedAccount;
        if (accounts.userId == UserHandle.USER_OWNER) {
          List<UserInfo> users=mUserManager.getUsers(true);
          for (          UserInfo user : users) {
            if (!user.isPrimary() && user.isRestricted()) {
              renameSharedAccountAsUser(accountToRename,newName,user.id);
            }
          }
        }
        sendAccountsChangedBroadcast(accounts.userId);
      }
    }
  }
  return resultAccount;
}
