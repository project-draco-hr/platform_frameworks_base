{
  int callingUid=Binder.getCallingUid();
  if (isCrossUser(callingUid,UserHandle.USER_ALL)) {
    throw new SecurityException("Calling copyAccountToUser requires " + android.Manifest.permission.INTERACT_ACROSS_USERS_FULL);
  }
  final UserAccounts fromAccounts=getUserAccounts(userFrom);
  final UserAccounts toAccounts=getUserAccounts(userTo);
  if (fromAccounts == null || toAccounts == null) {
    if (response != null) {
      Bundle result=new Bundle();
      result.putBoolean(AccountManager.KEY_BOOLEAN_RESULT,false);
      try {
        response.onResult(result);
      }
 catch (      RemoteException e) {
        Slog.w(TAG,"Failed to report error back to the client." + e);
      }
    }
    return;
  }
  Slog.d(TAG,"Copying account " + account.name + " from user "+ userFrom+ " to user "+ userTo);
  long identityToken=clearCallingIdentity();
  try {
    new Session(fromAccounts,response,account.type,false,false,account.name,false){
      @Override protected String toDebugString(      long now){
        return super.toDebugString(now) + ", getAccountCredentialsForClone" + ", "+ account.type;
      }
      @Override public void run() throws RemoteException {
        mAuthenticator.getAccountCredentialsForCloning(this,account);
      }
      @Override public void onResult(      Bundle result){
        if (result != null && result.getBoolean(AccountManager.KEY_BOOLEAN_RESULT,false)) {
          completeCloningAccount(response,result,account,toAccounts);
        }
 else {
          super.onResult(result);
        }
      }
    }
.bind();
  }
  finally {
    restoreCallingIdentity(identityToken);
  }
}
