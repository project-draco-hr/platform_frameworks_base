{
  final int callingUid=Binder.getCallingUid();
  if (Log.isLoggable(TAG,Log.VERBOSE)) {
    Log.v(TAG,"removeAccount: " + account + ", response "+ response+ ", caller's uid "+ callingUid+ ", pid "+ Binder.getCallingPid()+ ", for user id "+ userId);
  }
  if (response == null)   throw new IllegalArgumentException("response is null");
  if (account == null)   throw new IllegalArgumentException("account is null");
  if (isCrossUser(callingUid,userId)) {
    throw new SecurityException(String.format("User %s tying remove account for %s",UserHandle.getCallingUserId(),userId));
  }
  if (!isAccountManagedByCaller(account.type,callingUid) && !isSystemUid(callingUid)) {
    String msg=String.format("uid %s cannot remove accounts of type: %s",callingUid,account.type);
    throw new SecurityException(msg);
  }
  if (!canUserModifyAccounts(userId)) {
    try {
      response.onError(AccountManager.ERROR_CODE_USER_RESTRICTED,"User cannot modify accounts");
    }
 catch (    RemoteException re) {
    }
    return;
  }
  if (!canUserModifyAccountsForType(userId,account.type)) {
    try {
      response.onError(AccountManager.ERROR_CODE_MANAGEMENT_DISABLED_FOR_ACCOUNT_TYPE,"User cannot modify accounts of this type (policy).");
    }
 catch (    RemoteException re) {
    }
    return;
  }
  UserHandle user=new UserHandle(userId);
  long identityToken=clearCallingIdentity();
  UserAccounts accounts=getUserAccounts(userId);
  cancelNotification(getSigninRequiredNotificationId(accounts,account),user);
synchronized (accounts.credentialsPermissionNotificationIds) {
    for (    Pair<Pair<Account,String>,Integer> pair : accounts.credentialsPermissionNotificationIds.keySet()) {
      if (account.equals(pair.first.first)) {
        int id=accounts.credentialsPermissionNotificationIds.get(pair);
        cancelNotification(id,user);
      }
    }
  }
  logRecord(accounts,DebugDbHelper.ACTION_CALLED_ACCOUNT_REMOVE,TABLE_ACCOUNTS);
  try {
    new RemoveAccountSession(accounts,response,account,expectActivityLaunch).bind();
  }
  finally {
    restoreCallingIdentity(identityToken);
  }
}
