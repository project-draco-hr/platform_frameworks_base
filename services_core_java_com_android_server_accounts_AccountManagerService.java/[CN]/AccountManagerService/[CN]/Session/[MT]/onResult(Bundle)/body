{
  mNumResults++;
  Intent intent=null;
  if (result != null && mAuthDetailsRequired) {
    long lastAuthenticatedTime=DatabaseUtils.longForQuery(mAccounts.openHelper.getReadableDatabase(),"select " + ACCOUNTS_LAST_AUTHENTICATE_TIME_EPOCH_MILLIS + " from "+ TABLE_ACCOUNTS+ " WHERE "+ ACCOUNTS_NAME+ "=? AND "+ ACCOUNTS_TYPE+ "=?",new String[]{mAccountName,mAccountType});
    result.putLong(AccountManager.KEY_LAST_AUTHENTICATE_TIME_MILLIS_EPOCH,lastAuthenticatedTime);
  }
  if (result != null && (intent=result.getParcelable(AccountManager.KEY_INTENT)) != null) {
    int authenticatorUid=Binder.getCallingUid();
    long bid=Binder.clearCallingIdentity();
    try {
      PackageManager pm=mContext.getPackageManager();
      ResolveInfo resolveInfo=pm.resolveActivityAsUser(intent,0,mAccounts.userId);
      int targetUid=resolveInfo.activityInfo.applicationInfo.uid;
      if (PackageManager.SIGNATURE_MATCH != pm.checkSignatures(authenticatorUid,targetUid)) {
        throw new SecurityException("Activity to be started with KEY_INTENT must " + "share Authenticator's signatures");
      }
    }
  finally {
      Binder.restoreCallingIdentity(bid);
    }
  }
  if (result != null && !TextUtils.isEmpty(result.getString(AccountManager.KEY_AUTHTOKEN))) {
    String accountName=result.getString(AccountManager.KEY_ACCOUNT_NAME);
    String accountType=result.getString(AccountManager.KEY_ACCOUNT_TYPE);
    if (!TextUtils.isEmpty(accountName) && !TextUtils.isEmpty(accountType)) {
      Account account=new Account(accountName,accountType);
      cancelNotification(getSigninRequiredNotificationId(mAccounts,account),new UserHandle(mAccounts.userId));
    }
  }
  IAccountManagerResponse response;
  if (mExpectActivityLaunch && result != null && result.containsKey(AccountManager.KEY_INTENT)) {
    response=mResponse;
  }
 else {
    response=getResponseAndClose();
  }
  if (response != null) {
    try {
      if (result == null) {
        if (Log.isLoggable(TAG,Log.VERBOSE)) {
          Log.v(TAG,getClass().getSimpleName() + " calling onError() on response " + response);
        }
        response.onError(AccountManager.ERROR_CODE_INVALID_RESPONSE,"null bundle returned");
      }
 else {
        if (mStripAuthTokenFromResult) {
          result.remove(AccountManager.KEY_AUTHTOKEN);
        }
        if (Log.isLoggable(TAG,Log.VERBOSE)) {
          Log.v(TAG,getClass().getSimpleName() + " calling onResult() on response " + response);
        }
        if ((result.getInt(AccountManager.KEY_ERROR_CODE,-1) > 0) && (intent == null)) {
          response.onError(result.getInt(AccountManager.KEY_ERROR_CODE),result.getString(AccountManager.KEY_ERROR_MESSAGE));
        }
 else {
          response.onResult(result);
        }
      }
    }
 catch (    RemoteException e) {
      if (Log.isLoggable(TAG,Log.VERBOSE)) {
        Log.v(TAG,"failure while notifying response",e);
      }
    }
  }
}
