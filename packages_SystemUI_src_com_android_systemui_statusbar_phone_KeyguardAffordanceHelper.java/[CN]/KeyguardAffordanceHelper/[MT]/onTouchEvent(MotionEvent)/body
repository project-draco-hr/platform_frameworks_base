{
  int action=event.getActionMasked();
  if (mMotionCancelled && action != MotionEvent.ACTION_DOWN) {
    return false;
  }
  final float y=event.getY();
  final float x=event.getX();
  boolean isUp=false;
switch (action) {
case MotionEvent.ACTION_DOWN:
    View targetView=getIconAtPosition(x,y);
  if (targetView == null || (mTargetedView != null && mTargetedView != targetView)) {
    mMotionCancelled=true;
    return false;
  }
if (mTargetedView != null) {
  cancelAnimation();
}
 else {
  mTouchSlopExeeded=false;
}
mCallback.onSwipingStarted(targetView == mRightIcon);
mSwipingInProgress=true;
mTargetedView=targetView;
mInitialTouchX=x;
mInitialTouchY=y;
mTranslationOnDown=mTranslation;
initVelocityTracker();
trackMovement(event);
mMotionCancelled=false;
break;
case MotionEvent.ACTION_POINTER_DOWN:
mMotionCancelled=true;
endMotion(true,x,y);
break;
case MotionEvent.ACTION_MOVE:
trackMovement(event);
float xDist=x - mInitialTouchX;
float yDist=y - mInitialTouchY;
float distance=(float)Math.hypot(xDist,yDist);
if (!mTouchSlopExeeded && distance > mTouchSlop) {
mTouchSlopExeeded=true;
}
if (mSwipingInProgress) {
if (mTargetedView == mRightIcon) {
distance=mTranslationOnDown - distance;
distance=Math.min(0,distance);
}
 else {
distance=mTranslationOnDown + distance;
distance=Math.max(0,distance);
}
setTranslation(distance,false,false);
}
break;
case MotionEvent.ACTION_UP:
isUp=true;
case MotionEvent.ACTION_CANCEL:
boolean hintOnTheRight=mTargetedView == mRightIcon;
trackMovement(event);
endMotion(!isUp,x,y);
if (!mTouchSlopExeeded && isUp) {
mCallback.onIconClicked(hintOnTheRight);
}
break;
}
return true;
}
