{
  String rawData=mWifiNative.getBatchedScanResults();
  if (DEBUG_PARSE)   log("rawData = " + rawData);
  mBatchedScanMinPollTime=0;
  if (rawData == null || rawData.equalsIgnoreCase("OK")) {
    loge("Unexpected BatchedScanResults :" + rawData);
    return;
  }
  int scanCount=0;
  final String END_OF_BATCHES="----";
  final String SCANCOUNT="scancount=";
  final String TRUNCATED="trunc";
  final String AGE="age=";
  final String DIST="dist=";
  final String DISTSD="distSd=";
  String splitData[]=rawData.split("\n");
  int n=0;
  if (splitData[n].startsWith(SCANCOUNT)) {
    try {
      scanCount=Integer.parseInt(splitData[n++].substring(SCANCOUNT.length()));
    }
 catch (    NumberFormatException e) {
      loge("scancount parseInt Exception from " + splitData[n]);
    }
  }
 else   log("scancount not found");
  if (scanCount == 0) {
    loge("scanCount==0 - aborting");
    return;
  }
  final Intent intent=new Intent(WifiManager.BATCHED_SCAN_RESULTS_AVAILABLE_ACTION);
  intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT);
synchronized (mBatchedScanResults) {
    mBatchedScanResults.clear();
    BatchedScanResult batchedScanResult=new BatchedScanResult();
    String bssid=null;
    WifiSsid wifiSsid=null;
    int level=0;
    int freq=0;
    int dist, distSd;
    long tsf=0;
    dist=distSd=ScanResult.UNSPECIFIED;
    final long now=SystemClock.elapsedRealtime();
    final int bssidStrLen=BSSID_STR.length();
    while (true) {
      while (n < splitData.length) {
        if (DEBUG_PARSE)         logd("parsing " + splitData[n]);
        if (splitData[n].equals(END_OF_BATCHES)) {
          if (n + 1 != splitData.length) {
            loge("didn't consume " + (splitData.length - n));
          }
          if (mBatchedScanResults.size() > 0) {
            mContext.sendBroadcastAsUser(intent,UserHandle.ALL);
          }
          logd("retrieveBatchedScanResults X");
          return;
        }
        if ((splitData[n].equals(END_STR)) || splitData[n].equals(DELIMITER_STR)) {
          if (bssid != null) {
            batchedScanResult.scanResults.add(new ScanResult(wifiSsid,bssid,"",level,freq,tsf,dist,distSd));
            wifiSsid=null;
            bssid=null;
            level=0;
            freq=0;
            tsf=0;
            dist=distSd=ScanResult.UNSPECIFIED;
          }
          if (splitData[n].equals(END_STR)) {
            if (batchedScanResult.scanResults.size() != 0) {
              mBatchedScanResults.add(batchedScanResult);
              batchedScanResult=new BatchedScanResult();
            }
 else {
              logd("Found empty batch");
            }
          }
        }
 else         if (splitData[n].equals(TRUNCATED)) {
          batchedScanResult.truncated=true;
        }
 else         if (splitData[n].startsWith(BSSID_STR)) {
          bssid=new String(splitData[n].getBytes(),bssidStrLen,splitData[n].length() - bssidStrLen);
        }
 else         if (splitData[n].startsWith(FREQ_STR)) {
          try {
            freq=Integer.parseInt(splitData[n].substring(FREQ_STR.length()));
          }
 catch (          NumberFormatException e) {
            loge("Invalid freqency: " + splitData[n]);
            freq=0;
          }
        }
 else         if (splitData[n].startsWith(AGE)) {
          try {
            tsf=now - Long.parseLong(splitData[n].substring(AGE.length()));
            tsf*=1000;
          }
 catch (          NumberFormatException e) {
            loge("Invalid timestamp: " + splitData[n]);
            tsf=0;
          }
        }
 else         if (splitData[n].startsWith(SSID_STR)) {
          wifiSsid=WifiSsid.createFromAsciiEncoded(splitData[n].substring(SSID_STR.length()));
        }
 else         if (splitData[n].startsWith(LEVEL_STR)) {
          try {
            level=Integer.parseInt(splitData[n].substring(LEVEL_STR.length()));
            if (level > 0)             level-=256;
          }
 catch (          NumberFormatException e) {
            loge("Invalid level: " + splitData[n]);
            level=0;
          }
        }
 else         if (splitData[n].startsWith(DIST)) {
          try {
            dist=Integer.parseInt(splitData[n].substring(DIST.length()));
          }
 catch (          NumberFormatException e) {
            loge("Invalid distance: " + splitData[n]);
            dist=ScanResult.UNSPECIFIED;
          }
        }
 else         if (splitData[n].startsWith(DISTSD)) {
          try {
            distSd=Integer.parseInt(splitData[n].substring(DISTSD.length()));
          }
 catch (          NumberFormatException e) {
            loge("Invalid distanceSd: " + splitData[n]);
            distSd=ScanResult.UNSPECIFIED;
          }
        }
 else {
          loge("Unable to parse batched scan result line: " + splitData[n]);
        }
        n++;
      }
      rawData=mWifiNative.getBatchedScanResults();
      if (DEBUG_PARSE)       log("reading more data:\n" + rawData);
      if (rawData == null) {
        loge("Unexpected null BatchedScanResults");
        return;
      }
      splitData=rawData.split("\n");
      if (splitData.length == 0 || splitData[0].equals("ok")) {
        loge("batch scan results just ended!");
        if (mBatchedScanResults.size() > 0) {
          mContext.sendStickyBroadcastAsUser(intent,UserHandle.ALL);
        }
        return;
      }
      n=0;
    }
  }
}
