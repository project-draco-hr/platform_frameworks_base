{
switch (message.what) {
case WifiMonitor.SUP_CONNECTION_EVENT:
    if (DBG)     log("Supplicant connection established");
  setWifiState(WIFI_STATE_ENABLED);
mSupplicantRestartCount=0;
mSupplicantStateTracker.sendMessage(CMD_RESET_SUPPLICANT_STATE);
mLastBssid=null;
mLastNetworkId=WifiConfiguration.INVALID_NETWORK_ID;
mLastSignalLevel=-1;
mWifiInfo.setMacAddress(mWifiNative.getMacAddress());
mWifiConfigStore.loadAndEnableAllNetworks();
initializeWpsDetails();
sendSupplicantConnectionChangedBroadcast(true);
transitionTo(mDriverStartedState);
break;
case WifiMonitor.SUP_DISCONNECTION_EVENT:
if (++mSupplicantRestartCount <= SUPPLICANT_RESTART_TRIES) {
loge("Failed to setup control channel, restart supplicant");
mWifiMonitor.killSupplicant(mP2pSupported);
transitionTo(mInitialState);
sendMessageDelayed(CMD_START_SUPPLICANT,SUPPLICANT_RESTART_INTERVAL_MSECS);
}
 else {
loge("Failed " + mSupplicantRestartCount + " times to start supplicant, unload driver");
mSupplicantRestartCount=0;
setWifiState(WIFI_STATE_UNKNOWN);
transitionTo(mInitialState);
}
break;
case CMD_START_SUPPLICANT:
case CMD_STOP_SUPPLICANT:
case CMD_START_AP:
case CMD_STOP_AP:
case CMD_START_DRIVER:
case CMD_STOP_DRIVER:
case CMD_SET_OPERATIONAL_MODE:
case CMD_SET_COUNTRY_CODE:
case CMD_SET_FREQUENCY_BAND:
case CMD_START_PACKET_FILTERING:
case CMD_STOP_PACKET_FILTERING:
deferMessage(message);
break;
default :
return NOT_HANDLED;
}
return HANDLED;
}
