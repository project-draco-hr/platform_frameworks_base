{
  android.os.Parcel data=android.os.Parcel.obtain();
  android.os.Parcel reply=android.os.Parcel.obtain();
  InetSocketAddress ret_val=null;
  try {
    int res;
    data.writeInterfaceToken(mInterfaceDesc);
    mRemote.transact(method_code,data,reply,0);
    res=reply.readInt();
    if (0 == res) {
      int type;
      int port=0;
      String addrStr=null;
      type=reply.readInt();
      if (AF_INET == type) {
        int addr=reply.readInt();
        port=reply.readInt();
        addrStr=String.format(Locale.US,"%d.%d.%d.%d",(addr >> 24) & 0xFF,(addr >> 16) & 0xFF,(addr >> 8) & 0xFF,addr & 0xFF);
      }
 else       if (AF_INET6 == type) {
        int addr1=reply.readInt();
        int addr2=reply.readInt();
        int addr3=reply.readInt();
        int addr4=reply.readInt();
        port=reply.readInt();
        int flowinfo=reply.readInt();
        int scope_id=reply.readInt();
        addrStr=String.format(Locale.US,"[%04X:%04X:%04X:%04X:%04X:%04X:%04X:%04X]",(addr1 >> 16) & 0xFFFF,addr1 & 0xFFFF,(addr2 >> 16) & 0xFFFF,addr2 & 0xFFFF,(addr3 >> 16) & 0xFFFF,addr3 & 0xFFFF,(addr4 >> 16) & 0xFFFF,addr4 & 0xFFFF);
      }
      if (null != addrStr) {
        ret_val=new InetSocketAddress(addrStr,port);
      }
    }
  }
  finally {
    reply.recycle();
    data.recycle();
  }
  return ret_val;
}
