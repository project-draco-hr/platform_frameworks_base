{
  final Activity activity=getActivity();
  final String sampleText="abc def ghi";
  final String[] candidate={"DEF","Def"};
  final SuggestionSpan suggestionSpan=new SuggestionSpan(activity,candidate,SuggestionSpan.FLAG_AUTO_CORRECTION);
  final int spanStart=4;
  final int spanEnd=7;
  TextAppearanceSpan expectedSpan=new TextAppearanceSpan(activity,android.R.style.TextAppearance_SuggestionHighlight);
  TextPaint tmpTp=new TextPaint();
  expectedSpan.updateDrawState(tmpTp);
  final int expectedHighlightTextColor=tmpTp.getColor();
  final float expectedHighlightTextSize=tmpTp.getTextSize();
  final EditText editText=(EditText)activity.findViewById(R.id.textview);
  final Editor editor=editText.getEditorForTesting();
  assertNotNull(editor);
  activity.runOnUiThread(new Runnable(){
    public void run(){
      SpannableStringBuilder ssb=new SpannableStringBuilder();
      ssb.append(sampleText);
      ssb.setSpan(suggestionSpan,spanStart,spanEnd,Spanned.SPAN_INCLUSIVE_INCLUSIVE);
      editText.setText(ssb);
      Selection.setSelection(editText.getText(),spanStart,spanEnd);
      editText.onTextContextMenuItem(TextView.ID_REPLACE);
    }
  }
);
  getInstrumentation().waitForIdleSync();
  activity.runOnUiThread(new Runnable(){
    public void run(){
      Editor.SuggestionsPopupWindow popupWindow=editor.getSuggestionsPopupWindowForTesting();
      assertNotNull(popupWindow);
      ListView listView=(ListView)popupWindow.getContentViewForTesting();
      assertNotNull(listView);
      int childNum=listView.getChildCount();
      assertEquals(candidate.length + 1,childNum);
      for (int i=0; i < candidate.length; ++i) {
        TextView textView=(TextView)listView.getChildAt(i);
        assertNotNull(textView);
        Spanned spanned=(Spanned)textView.getText();
        assertNotNull(spanned);
        assertEquals(candidate[i],spanned.toString());
        TextAppearanceSpan[] taSpan=spanned.getSpans(0,candidate[i].length(),TextAppearanceSpan.class);
        assertEquals(1,taSpan.length);
        TextPaint tp=new TextPaint();
        taSpan[0].updateDrawState(tp);
        assertEquals(expectedHighlightTextColor,tp.getColor());
        assertEquals(expectedHighlightTextSize,tp.getTextSize());
      }
    }
  }
);
}
