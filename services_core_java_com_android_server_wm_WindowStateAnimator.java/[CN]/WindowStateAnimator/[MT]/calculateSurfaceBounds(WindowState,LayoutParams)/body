{
  if ((attrs.flags & FLAG_SCALED) != 0) {
    mTmpSize.right=mTmpSize.left + w.mRequestedWidth;
    mTmpSize.bottom=mTmpSize.top + w.mRequestedHeight;
  }
 else {
    if (w.isDragResizing()) {
      if (w.getResizeMode() == DRAG_RESIZE_MODE_FREEFORM) {
        mTmpSize.left=0;
        mTmpSize.top=0;
      }
      final DisplayInfo displayInfo=w.getDisplayInfo();
      mTmpSize.right=mTmpSize.left + displayInfo.logicalWidth;
      mTmpSize.bottom=mTmpSize.top + displayInfo.logicalHeight;
    }
 else {
      mTmpSize.right=mTmpSize.left + w.mCompatFrame.width();
      mTmpSize.bottom=mTmpSize.top + w.mCompatFrame.height();
    }
  }
  if (mTmpSize.width() < 1) {
    mTmpSize.right=mTmpSize.left + 1;
  }
  if (mTmpSize.height() < 1) {
    mTmpSize.bottom=mTmpSize.top + 1;
  }
  final int displayId=w.getDisplayId();
  float scale=1.0f;
  if (mService.mAccessibilityController != null && displayId == DEFAULT_DISPLAY) {
    final MagnificationSpec spec=mService.mAccessibilityController.getMagnificationSpecForWindowLocked(w);
    if (spec != null && !spec.isNop()) {
      scale=spec.scale;
    }
  }
  mTmpSize.left-=scale * attrs.surfaceInsets.left;
  mTmpSize.top-=scale * attrs.surfaceInsets.top;
  mTmpSize.right+=scale * attrs.surfaceInsets.right;
  mTmpSize.bottom+=scale * attrs.surfaceInsets.bottom;
}
