{
  final WindowState w=mWin;
  float left=w.mShownPosition.x;
  float top=w.mShownPosition.y;
  int width;
  int height;
  if ((w.mAttrs.flags & LayoutParams.FLAG_SCALED) != 0) {
    width=w.mRequestedWidth;
    height=w.mRequestedHeight;
  }
 else {
    final DisplayInfo displayInfo=w.getDisplayInfo();
    if (w.isDragResizing() && w.getResizeMode() == DRAG_RESIZE_MODE_FREEFORM) {
      left=0;
      top=0;
    }
    if (displayInfo != null && w.isDragResizing()) {
      width=displayInfo.logicalWidth;
      height=displayInfo.logicalHeight;
    }
 else {
      width=w.mCompatFrame.width();
      height=w.mCompatFrame.height();
    }
  }
  if (width < 1) {
    width=1;
  }
  if (height < 1) {
    height=1;
  }
  final LayoutParams attrs=w.getAttrs();
  final int displayId=w.getDisplayId();
  float scale=1.0f;
  if (mService.mAccessibilityController != null && displayId == Display.DEFAULT_DISPLAY) {
    MagnificationSpec spec=mService.mAccessibilityController.getMagnificationSpecForWindowLocked(w);
    if (spec != null && !spec.isNop()) {
      scale=spec.scale;
    }
  }
  width+=scale * (attrs.surfaceInsets.left + attrs.surfaceInsets.right);
  height+=scale * (attrs.surfaceInsets.top + attrs.surfaceInsets.bottom);
  left-=scale * attrs.surfaceInsets.left;
  top-=scale * attrs.surfaceInsets.top;
  mSurfaceController.setPositionInTransaction(left,top,recoveringMemory);
  mSurfaceResized=mSurfaceController.setSizeInTransaction(width,height,mDsDx * w.mHScale,mDtDx * w.mVScale,mDsDy * w.mHScale,mDtDy * w.mVScale,recoveringMemory);
  if (mSurfaceResized) {
    mAnimator.setPendingLayoutChanges(w.getDisplayId(),WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER);
    w.applyDimLayerIfNeeded();
  }
  updateSurfaceWindowCrop(recoveringMemory);
}
