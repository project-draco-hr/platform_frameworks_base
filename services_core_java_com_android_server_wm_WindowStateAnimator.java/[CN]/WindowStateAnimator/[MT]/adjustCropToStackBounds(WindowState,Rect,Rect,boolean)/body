{
  final DisplayContent displayContent=w.getDisplayContent();
  if (displayContent != null && !displayContent.isDefaultDisplay) {
    return;
  }
  if (w.getBaseType() == TYPE_WALLPAPER) {
    final WindowState wallpaperTarget=mWallpaperControllerLocked.getWallpaperTarget();
    if (wallpaperTarget != null) {
      final Task task=wallpaperTarget.getTask();
      final WindowStateAnimator winAnimator=wallpaperTarget.mWinAnimator;
      final boolean useFinalCropOnWallpaper=!winAnimator.isAnimationSet() || winAnimator.resolveStackClip() == STACK_CLIP_AFTER_ANIM;
      if (task != null && !task.isFullscreen() && task.cropWindowsToStackBounds() && useFinalCropOnWallpaper) {
        final TaskStack stack=task.mStack;
        if (stack != null && !stack.isFullscreen()) {
          stack.getDimBounds(mTmpStackBounds);
          finalClipRect.set(mTmpStackBounds);
        }
      }
    }
    return;
  }
  final Task task=w.getTask();
  if (task == null || !task.cropWindowsToStackBounds()) {
    return;
  }
  final int stackClip=resolveStackClip();
  if (isAnimationSet() && stackClip == STACK_CLIP_NONE) {
    return;
  }
  final WindowState winShowWhenLocked=(WindowState)mPolicy.getWinShowWhenLockedLw();
  if (w == winShowWhenLocked && mPolicy.isKeyguardShowingOrOccluded()) {
    return;
  }
  final TaskStack stack=task.mStack;
  stack.getDimBounds(mTmpStackBounds);
  final Rect surfaceInsets=w.getAttrs().surfaceInsets;
  final int frameX=isFreeformResizing ? (int)mSurfaceController.getX() : w.mFrame.left + mWin.mXOffset - surfaceInsets.left;
  final int frameY=isFreeformResizing ? (int)mSurfaceController.getY() : w.mFrame.top + mWin.mYOffset - surfaceInsets.top;
  final boolean useFinalClipRect=isAnimationSet() && stackClip == STACK_CLIP_AFTER_ANIM || mDestroyPreservedSurfaceUponRedraw;
  if (useFinalClipRect) {
    finalClipRect.set(mTmpStackBounds);
  }
 else {
    if (StackId.hasWindowShadow(stack.mStackId) && !StackId.isTaskResizeAllowed(stack.mStackId)) {
      mTmpStackBounds.inset(-surfaceInsets.left,-surfaceInsets.top,-surfaceInsets.right,-surfaceInsets.bottom);
    }
    clipRect.left=Math.max(0,Math.max(mTmpStackBounds.left,frameX + clipRect.left) - frameX);
    clipRect.top=Math.max(0,Math.max(mTmpStackBounds.top,frameY + clipRect.top) - frameY);
    clipRect.right=Math.max(0,Math.min(mTmpStackBounds.right,frameX + clipRect.right) - frameX);
    clipRect.bottom=Math.max(0,Math.min(mTmpStackBounds.bottom,frameY + clipRect.bottom) - frameY);
  }
}
