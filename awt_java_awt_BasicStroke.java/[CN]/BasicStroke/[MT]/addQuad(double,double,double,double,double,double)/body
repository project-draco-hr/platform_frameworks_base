{
  double x21=x2 - x1;
  double y21=y2 - y1;
  double x23=x2 - x3;
  double y23=y2 - y3;
  double l21=Math.sqrt(x21 * x21 + y21 * y21);
  double l23=Math.sqrt(x23 * x23 + y23 * y23);
  if (l21 == 0.0 && l23 == 0.0) {
    addLine(x1,y1,x3,y3,false);
    return;
  }
  if (l21 == 0.0) {
    addLine(x2,y2,x3,y3,false);
    return;
  }
  if (l23 == 0.0) {
    addLine(x1,y1,x2,y2,false);
    return;
  }
  double w;
  w=w2 / l21;
  double mx1=-y21 * w;
  double my1=x21 * w;
  w=w2 / l23;
  double mx3=y23 * w;
  double my3=-x23 * w;
  double lx1=x1 + mx1;
  double ly1=y1 + my1;
  double rx1=x1 - mx1;
  double ry1=y1 - my1;
  if (checkMove) {
    if (isMove) {
      isMove=false;
      lp.moveTo(lx1,ly1);
      rp.moveTo(rx1,ry1);
    }
 else {
      addJoin(lp,x1,y1,lx1,ly1,true);
      addJoin(rp,x1,y1,rx1,ry1,false);
    }
  }
  if (x21 * y23 - y21 * x23 == 0.0) {
    if (x21 * x23 + y21 * y23 > 0.0) {
      if (l21 == l23) {
        double px=x1 + (x21 + x23) / 4.0;
        double py=y1 + (y21 + y23) / 4.0;
        lp.lineTo(px + mx1,py + my1);
        rp.lineTo(px - mx1,py - my1);
        lp.lineTo(px - mx1,py - my1);
        rp.lineTo(px + mx1,py + my1);
        lp.lineTo(x3 - mx1,y3 - my1);
        rp.lineTo(x3 + mx1,y3 + my1);
      }
 else {
        double px1, py1;
        double k=l21 / (l21 + l23);
        double px=x1 + (x21 + x23) * k * k;
        double py=y1 + (y21 + y23) * k * k;
        px1=(x1 + px) / 2.0;
        py1=(y1 + py) / 2.0;
        lp.quadTo(px1 + mx1,py1 + my1,px + mx1,py + my1);
        rp.quadTo(px1 - mx1,py1 - my1,px - mx1,py - my1);
        lp.lineTo(px - mx1,py - my1);
        rp.lineTo(px + mx1,py + my1);
        px1=(x3 + px) / 2.0;
        py1=(y3 + py) / 2.0;
        lp.quadTo(px1 - mx1,py1 - my1,x3 - mx1,y3 - my1);
        rp.quadTo(px1 + mx1,py1 + my1,x3 + mx1,y3 + my1);
      }
    }
 else {
      lp.quadTo(x2 + mx1,y2 + my1,x3 + mx3,y3 + my3);
      rp.quadTo(x2 - mx1,y2 - my1,x3 - mx3,y3 - my3);
    }
  }
 else {
    addSubQuad(x1,y1,x2,y2,x3,y3,0);
  }
}
