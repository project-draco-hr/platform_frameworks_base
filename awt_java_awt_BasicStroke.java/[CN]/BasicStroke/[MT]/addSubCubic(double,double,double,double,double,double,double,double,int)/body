{
  double x12=x1 - x2;
  double y12=y1 - y2;
  double x23=x2 - x3;
  double y23=y2 - y3;
  double x34=x3 - x4;
  double y34=y3 - y4;
  double cos2=-x12 * x23 - y12 * y23;
  double cos3=-x23 * x34 - y23 * y34;
  double sin2=-x12 * y23 + y12 * x23;
  double sin3=-x23 * y34 + y23 * x34;
  double sin0=-x12 * y34 + y12 * x34;
  double cos0=-x12 * x34 - y12 * y34;
  if (level < MAX_LEVEL && (sin2 != 0.0 || sin3 != 0.0 || sin0 != 0.0) && (cos2 >= 0.0 || cos3 >= 0.0 || cos0 >= 0.0 || (Math.abs(sin2 / cos2) > curveDelta) || (Math.abs(sin3 / cos3) > curveDelta) || (Math.abs(sin0 / cos0) > curveDelta))) {
    double cx=(x2 + x3) / 2.0;
    double cy=(y2 + y3) / 2.0;
    double lx2=(x2 + x1) / 2.0;
    double ly2=(y2 + y1) / 2.0;
    double rx3=(x3 + x4) / 2.0;
    double ry3=(y3 + y4) / 2.0;
    double lx3=(cx + lx2) / 2.0;
    double ly3=(cy + ly2) / 2.0;
    double rx2=(cx + rx3) / 2.0;
    double ry2=(cy + ry3) / 2.0;
    cx=(lx3 + rx2) / 2.0;
    cy=(ly3 + ry2) / 2.0;
    addSubCubic(x1,y1,lx2,ly2,lx3,ly3,cx,cy,level + 1);
    addSubCubic(cx,cy,rx2,ry2,rx3,ry3,x4,y4,level + 1);
  }
 else {
    double w, mx1, my1, mx2, my2, mx3, my3, mx4, my4;
    double l12=Math.sqrt(x12 * x12 + y12 * y12);
    double l23=Math.sqrt(x23 * x23 + y23 * y23);
    double l34=Math.sqrt(x34 * x34 + y34 * y34);
    if (l12 == 0.0) {
      w=w2 / l23;
      mx1=y23 * w;
      my1=-x23 * w;
      w=w2 / l34;
      mx4=y34 * w;
      my4=-x34 * w;
    }
 else     if (l34 == 0.0) {
      w=w2 / l12;
      mx1=y12 * w;
      my1=-x12 * w;
      w=w2 / l23;
      mx4=y23 * w;
      my4=-x23 * w;
    }
 else {
      w=w2 / l12;
      mx1=y12 * w;
      my1=-x12 * w;
      w=w2 / l34;
      mx4=y34 * w;
      my4=-x34 * w;
    }
    if (sin2 == 0.0) {
      mx2=mx1;
      my2=my1;
    }
 else {
      w=w2 / sin2;
      mx2=-(x12 * l23 - x23 * l12) * w;
      my2=-(y12 * l23 - y23 * l12) * w;
    }
    if (sin3 == 0.0) {
      mx3=mx4;
      my3=my4;
    }
 else {
      w=w2 / sin3;
      mx3=-(x23 * l34 - x34 * l23) * w;
      my3=-(y23 * l34 - y34 * l23) * w;
    }
    lp.cubicTo(x2 + mx2,y2 + my2,x3 + mx3,y3 + my3,x4 + mx4,y4 + my4);
    rp.cubicTo(x2 - mx2,y2 - my2,x3 - mx3,y3 - my3,x4 - mx4,y4 - my4);
  }
}
