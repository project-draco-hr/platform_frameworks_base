{
  double x21=x2 - x1;
  double y21=y2 - y1;
  double x23=x2 - x3;
  double y23=y2 - y3;
  double cos=x21 * x23 + y21 * y23;
  double sin=x21 * y23 - y21 * x23;
  if (level < MAX_LEVEL && (cos >= 0.0 || (Math.abs(sin / cos) > curveDelta))) {
    double c1x=(x2 + x1) / 2.0;
    double c1y=(y2 + y1) / 2.0;
    double c2x=(x2 + x3) / 2.0;
    double c2y=(y2 + y3) / 2.0;
    double c3x=(c1x + c2x) / 2.0;
    double c3y=(c1y + c2y) / 2.0;
    addSubQuad(x1,y1,c1x,c1y,c3x,c3y,level + 1);
    addSubQuad(c3x,c3y,c2x,c2y,x3,y3,level + 1);
  }
 else {
    double w;
    double l21=Math.sqrt(x21 * x21 + y21 * y21);
    double l23=Math.sqrt(x23 * x23 + y23 * y23);
    w=w2 / sin;
    double mx2=(x21 * l23 + x23 * l21) * w;
    double my2=(y21 * l23 + y23 * l21) * w;
    w=w2 / l23;
    double mx3=y23 * w;
    double my3=-x23 * w;
    lp.quadTo(x2 + mx2,y2 + my2,x3 + mx3,y3 + my3);
    rp.quadTo(x2 - mx2,y2 - my2,x3 - mx3,y3 - my3);
  }
}
