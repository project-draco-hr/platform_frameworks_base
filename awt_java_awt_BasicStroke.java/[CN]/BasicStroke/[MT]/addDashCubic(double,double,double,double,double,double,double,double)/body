{
  double x12=x1 - x2;
  double y12=y1 - y2;
  double x23=x2 - x3;
  double y23=y2 - y3;
  double x34=x3 - x4;
  double y34=y3 - y4;
  double l12=Math.sqrt(x12 * x12 + y12 * y12);
  double l23=Math.sqrt(x23 * x23 + y23 * y23);
  double l34=Math.sqrt(x34 * x34 + y34 * y34);
  if (l12 == 0.0 && l23 == 0.0 && l34 == 0.0) {
    return;
  }
  if (l12 == 0.0 && l23 == 0.0) {
    addDashLine(x3,y3,x4,y4);
    return;
  }
  if (l23 == 0.0 && l34 == 0.0) {
    addDashLine(x1,y1,x2,y2);
    return;
  }
  if (l12 == 0.0 && l34 == 0.0) {
    addDashLine(x2,y2,x3,y3);
    return;
  }
  double ax=x4 - x1 + 3.0 * (x2 - x3);
  double ay=y4 - y1 + 3.0 * (y2 - y3);
  double bx=3.0 * (x1 + x3 - x2 - x2);
  double by=3.0 * (y1 + y3 - y2 - y2);
  double cx=3.0 * (x2 - x1);
  double cy=3.0 * (y2 - y1);
  double dx=x1;
  double dy=y1;
  double px1=0.0;
  double py1=0.0;
  double prev=0.0;
  dasher.init(new DashIterator.Cubic(x1,y1,x2,y2,x3,y3,x4,y4));
  while (!dasher.eof()) {
    double t=dasher.getValue();
    scx=t * (t * (t * ax + bx) + cx) + dx;
    scy=t * (t * (t * ay + by) + cy) + dy;
    if (dasher.isOpen()) {
      px1=scx;
      py1=scy;
      double dx1=t * (t * (ax + ax + ax) + bx + bx) + cx;
      double dy1=t * (t * (ay + ay + ay) + by + by) + cy;
      double w=w2 / Math.sqrt(dx1 * dx1 + dy1 * dy1);
      double mx1=-dy1 * w;
      double my1=dx1 * w;
      double lx1=px1 + mx1;
      double ly1=py1 + my1;
      double rx1=px1 - mx1;
      double ry1=py1 - my1;
      if (isMove) {
        isMove=false;
        smx=px1;
        smy=py1;
        rp.clean();
        lp.moveTo(lx1,ly1);
        rp.moveTo(rx1,ry1);
      }
 else {
        addJoin(lp,x1,y1,lx1,ly1,true);
        addJoin(rp,x1,y1,rx1,ry1,false);
      }
    }
 else     if (dasher.isContinue()) {
      double sx1=x2 - x23 * prev;
      double sy1=y2 - y23 * prev;
      double sx2=x3 - x34 * prev;
      double sy2=y3 - y34 * prev;
      double sx3=sx1 + (sx2 - sx1) * prev;
      double sy3=sy1 + (sy2 - sy1) * prev;
      double t2=(t - prev) / (1 - prev);
      double sx4=sx3 + (sx2 - sx3) * t2;
      double sy4=sy3 + (sy2 - sy3) * t2;
      double px4=scx;
      double py4=scy;
      double px2=px1 + (sx3 - px1) * t2;
      double py2=py1 + (sy3 - py1) * t2;
      double px3=px2 + (sx4 - px2) * t2;
      double py3=py2 + (sy4 - py2) * t2;
      addCubic(px1,py1,px2,py2,px3,py3,px4,py4);
      if (dasher.isClosed()) {
        addCap(lp,px4,py4,rp.xLast,rp.yLast);
        lp.combine(rp);
        if (isFirst) {
          isFirst=false;
          fmx=smx;
          fmy=smy;
          sp=lp;
          lp=new BufferedPath();
        }
 else {
          addCap(lp,smx,smy,lp.xMove,lp.yMove);
          lp.closePath();
        }
        isMove=true;
      }
    }
    prev=t;
    dasher.next();
  }
}
