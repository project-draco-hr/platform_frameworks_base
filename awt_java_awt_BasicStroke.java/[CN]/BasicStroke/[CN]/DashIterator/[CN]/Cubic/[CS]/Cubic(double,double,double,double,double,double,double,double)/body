{
  double nx1=x1 + x3 - x2 - x2;
  double ny1=y1 + y3 - y2 - y2;
  double nx2=x2 + x4 - x3 - x3;
  double ny2=y2 + y4 - y3 - y3;
  double max=Math.max(Math.abs(nx1) + Math.abs(ny1),Math.abs(nx2) + Math.abs(ny2));
  int n=(int)(1 + Math.sqrt(0.75 * max) * FLATNESS);
  step=1.0 / n;
  double ax=x4 - x1 + 3.0 * (x2 - x3);
  double ay=y4 - y1 + 3.0 * (y2 - y3);
  double bx=3.0 * (x1 + x3 - x2 - x2);
  double by=3.0 * (y1 + y3 - y2 - y2);
  double cx=3.0 * (x2 - x1);
  double cy=3.0 * (y2 - y1);
  double dx1=step * (step * (step * ax + bx) + cx);
  double dy1=step * (step * (step * ay + by) + cy);
  double dx2=step * (step * (step * ax * 6.0 + bx * 2.0));
  double dy2=step * (step * (step * ay * 6.0 + by * 2.0));
  double dx3=step * (step * (step * ax * 6.0));
  double dy3=step * (step * (step * ay * 6.0));
  double vx=x1;
  double vy=y1;
  valSize=n;
  values=new double[valSize];
  double pvx=vx;
  double pvy=vy;
  length=0.0;
  for (int i=0; i < n; i++) {
    vx+=dx1;
    vy+=dy1;
    dx1+=dx2;
    dy1+=dy2;
    dx2+=dx3;
    dy2+=dy3;
    double lx=vx - pvx;
    double ly=vy - pvy;
    values[i]=Math.sqrt(lx * lx + ly * ly);
    length+=values[i];
    pvx=vx;
    pvy=vy;
  }
  valPos=0;
  curLen=0.0;
  prevLen=0.0;
}
