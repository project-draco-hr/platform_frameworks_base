{
  assert(null != pduDataStream);
  byte[] contentType=null;
  pduDataStream.mark(1);
  int temp=pduDataStream.read();
  assert(-1 != temp);
  pduDataStream.reset();
  int cur=(temp & 0xFF);
  if (cur < TEXT_MIN) {
    int length=parseValueLength(pduDataStream);
    int startPos=pduDataStream.available();
    pduDataStream.mark(1);
    temp=pduDataStream.read();
    assert(-1 != temp);
    pduDataStream.reset();
    int first=(temp & 0xFF);
    if ((first >= TEXT_MIN) && (first <= TEXT_MAX)) {
      contentType=parseWapString(pduDataStream,TYPE_TEXT_STRING);
    }
 else     if (first > TEXT_MAX) {
      int index=parseShortInteger(pduDataStream);
      if (index < PduContentTypes.contentTypes.length) {
        contentType=(PduContentTypes.contentTypes[index]).getBytes();
      }
 else {
        pduDataStream.reset();
        contentType=parseWapString(pduDataStream,TYPE_TEXT_STRING);
      }
    }
 else {
      Log.e(LOG_TAG,"Corrupt content-type");
      return (PduContentTypes.contentTypes[0]).getBytes();
    }
    int endPos=pduDataStream.available();
    int parameterLen=length - (startPos - endPos);
    if (parameterLen > 0) {
      parseContentTypeParams(pduDataStream,map,parameterLen);
    }
    if (parameterLen < 0) {
      Log.e(LOG_TAG,"Corrupt MMS message");
      return (PduContentTypes.contentTypes[0]).getBytes();
    }
  }
 else   if (cur <= TEXT_MAX) {
    contentType=parseWapString(pduDataStream,TYPE_TEXT_STRING);
  }
 else {
    contentType=(PduContentTypes.contentTypes[parseShortInteger(pduDataStream)]).getBytes();
  }
  return contentType;
}
