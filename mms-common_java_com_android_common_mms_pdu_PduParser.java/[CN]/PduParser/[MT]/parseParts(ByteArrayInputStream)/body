{
  if (pduDataStream == null) {
    return null;
  }
  int count=parseUnsignedInt(pduDataStream);
  PduBody body=new PduBody();
  for (int i=0; i < count; i++) {
    int headerLength=parseUnsignedInt(pduDataStream);
    int dataLength=parseUnsignedInt(pduDataStream);
    PduPart part=new PduPart();
    int startPos=pduDataStream.available();
    if (startPos <= 0) {
      return null;
    }
    HashMap<Integer,Object> map=new HashMap<Integer,Object>();
    byte[] contentType=parseContentType(pduDataStream,map);
    if (null != contentType) {
      part.setContentType(contentType);
    }
 else {
      part.setContentType((PduContentTypes.contentTypes[0]).getBytes());
    }
    byte[] name=(byte[])map.get(PduPart.P_NAME);
    if (null != name) {
      part.setName(name);
    }
    Integer charset=(Integer)map.get(PduPart.P_CHARSET);
    if (null != charset) {
      part.setCharset(charset);
    }
    int endPos=pduDataStream.available();
    int partHeaderLen=headerLength - (startPos - endPos);
    if (partHeaderLen > 0) {
      if (false == parsePartHeaders(pduDataStream,part,partHeaderLen)) {
        return null;
      }
    }
 else     if (partHeaderLen < 0) {
      return null;
    }
    if ((null == part.getContentLocation()) && (null == part.getName()) && (null == part.getFilename())&& (null == part.getContentId())) {
      part.setContentLocation(Long.toOctalString(System.currentTimeMillis()).getBytes());
    }
    if (dataLength > 0) {
      byte[] partData=new byte[dataLength];
      pduDataStream.read(partData,0,dataLength);
      byte[] partDataEncoding=part.getContentTransferEncoding();
      if (null != partDataEncoding) {
        String encoding=new String(partDataEncoding);
        if (encoding.equalsIgnoreCase(PduPart.P_BASE64)) {
          partData=Base64.decodeBase64(partData);
        }
 else         if (encoding.equalsIgnoreCase(PduPart.P_QUOTED_PRINTABLE)) {
          partData=QuotedPrintable.decodeQuotedPrintable(partData);
        }
 else {
        }
      }
      if (null == partData) {
        log("Decode part data error!");
        return null;
      }
      part.setData(partData);
    }
    if (THE_FIRST_PART == checkPartPosition(part)) {
      body.addPart(0,part);
    }
 else {
      body.addPart(part);
    }
  }
  return body;
}
