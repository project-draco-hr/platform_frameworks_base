{
  AsyncResult ar;
  byte data[];
  boolean isCsimRecordLoadResponse=false;
  try {
switch (msg.what) {
case EVENT_GET_PL_DONE:
      if (DBG)       log("EF_GET_EF_PL_DONE");
    isCsimRecordLoadResponse=true;
  ar=(AsyncResult)msg.obj;
if (ar.exception != null) {
  Log.e(LOG_TAG,"ar.exception = " + ar.exception);
  break;
}
mEFpl=(byte[])ar.result;
if (DBG) log("EF_PL=" + IccUtils.bytesToHexString(mEFpl));
break;
case EVENT_GET_CSIM_LI_DONE:
if (DBG) log("EVENT_GET_CSIM_LI_DONE");
isCsimRecordLoadResponse=true;
ar=(AsyncResult)msg.obj;
if (ar.exception != null) {
Log.e(LOG_TAG,"ar.exception = " + ar.exception);
break;
}
mEFli=(byte[])ar.result;
for (int i=0; i < mEFli.length; i+=2) {
switch (mEFli[i + 1]) {
case 0x01:
mEFli[i]='e';
mEFli[i + 1]='n';
break;
case 0x02:
mEFli[i]='f';
mEFli[i + 1]='r';
break;
case 0x03:
mEFli[i]='e';
mEFli[i + 1]='s';
break;
case 0x04:
mEFli[i]='j';
mEFli[i + 1]='a';
break;
case 0x05:
mEFli[i]='k';
mEFli[i + 1]='o';
break;
case 0x06:
mEFli[i]='z';
mEFli[i + 1]='h';
break;
case 0x07:
mEFli[i]='h';
mEFli[i + 1]='e';
break;
default :
mEFli[i]=' ';
mEFli[i + 1]=' ';
}
}
if (DBG) log("EF_LI=" + IccUtils.bytesToHexString(mEFli));
break;
case EVENT_GET_CSIM_SPN_DONE:
if (DBG) log("EVENT_GET_CSIM_SPN_DONE");
isCsimRecordLoadResponse=true;
ar=(AsyncResult)msg.obj;
if (ar.exception != null) {
Log.e(LOG_TAG,"ar.exception=" + ar.exception);
break;
}
onGetCSimSpnDone(ar);
break;
default :
super.handleMessage(msg);
}
}
 catch (RuntimeException exc) {
Log.w(LOG_TAG,"Exception parsing SIM record",exc);
}
 finally {
if (isCsimRecordLoadResponse) {
onRecordLoaded();
}
}
}
