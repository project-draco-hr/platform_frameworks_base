{
  byte[] data=(byte[])ar.result;
  if (DBG)   log("CSIM_SPN=" + IccUtils.bytesToHexString(data));
  mCsimSpnDisplayCondition=((0x01 & data[0]) != 0);
  int encoding=data[1];
  int language=data[2];
  byte[] spnData=new byte[32];
  System.arraycopy(data,3,spnData,0,(data.length < 32) ? data.length : 32);
  int numBytes;
  for (numBytes=0; numBytes < spnData.length; numBytes++) {
    if ((spnData[numBytes] & 0xFF) == 0xFF)     break;
  }
  if (numBytes == 0) {
    spn="";
    return;
  }
  try {
switch (encoding) {
case UserData.ENCODING_OCTET:
case UserData.ENCODING_LATIN:
      spn=new String(spnData,0,numBytes,"ISO-8859-1");
    break;
case UserData.ENCODING_IA5:
case UserData.ENCODING_GSM_7BIT_ALPHABET:
case UserData.ENCODING_7BIT_ASCII:
  spn=GsmAlphabet.gsm7BitPackedToString(spnData,0,(numBytes * 8) / 7);
break;
case UserData.ENCODING_UNICODE_16:
spn=new String(spnData,0,numBytes,"utf-16");
break;
default :
log("SPN encoding not supported");
}
}
 catch (Exception e) {
log("spn decode error: " + e);
}
if (DBG) log("spn=" + spn);
if (DBG) log("spnCondition=" + mCsimSpnDisplayCondition);
phone.setSystemProperty(PROPERTY_ICC_OPERATOR_ALPHA,spn);
}
