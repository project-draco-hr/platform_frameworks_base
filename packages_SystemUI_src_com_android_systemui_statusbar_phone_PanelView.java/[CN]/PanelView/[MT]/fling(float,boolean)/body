{
  cancelPeek();
  float target=expand ? getMaxPanelHeight() : 0.0f;
  final boolean clearAllExpandHack=expand && fullyExpandedClearAllVisible() && mExpandedHeight < getMaxPanelHeight() - getClearAllHeight() && !isClearAllVisible();
  if (clearAllExpandHack) {
    target=getMaxPanelHeight() - getClearAllHeight();
  }
  if (target == mExpandedHeight || getOverExpansionAmount() > 0f && expand) {
    notifyExpandingFinished();
    return;
  }
  mOverExpandedBeforeFling=getOverExpansionAmount() > 0f;
  ValueAnimator animator=createHeightAnimator(target);
  if (expand) {
    mFlingAnimationUtils.apply(animator,mExpandedHeight,target,vel,getHeight());
  }
 else {
    mFlingAnimationUtils.applyDismissing(animator,mExpandedHeight,target,vel,getHeight());
    if (vel == 0) {
      animator.setDuration((long)(animator.getDuration() * getCannedFlingDurationFactor()));
    }
  }
  animator.addListener(new AnimatorListenerAdapter(){
    private boolean mCancelled;
    @Override public void onAnimationCancel(    Animator animation){
      mCancelled=true;
    }
    @Override public void onAnimationEnd(    Animator animation){
      if (clearAllExpandHack && !mCancelled) {
        mHeightAnimator=createHeightAnimator(getMaxPanelHeight());
        mHeightAnimator.setInterpolator(mLinearOutSlowInInterpolator);
        mHeightAnimator.setDuration(350);
        mHeightAnimator.addListener(new AnimatorListenerAdapter(){
          private boolean mCancelled;
          @Override public void onAnimationCancel(          Animator animation){
            mCancelled=true;
          }
          @Override public void onAnimationEnd(          Animator animation){
            mHeightAnimator=null;
            if (!mCancelled) {
              notifyExpandingFinished();
            }
          }
        }
);
        mHeightAnimator.start();
      }
 else {
        mHeightAnimator=null;
        if (!mCancelled) {
          notifyExpandingFinished();
        }
      }
    }
  }
);
  mHeightAnimator=animator;
  animator.start();
}
