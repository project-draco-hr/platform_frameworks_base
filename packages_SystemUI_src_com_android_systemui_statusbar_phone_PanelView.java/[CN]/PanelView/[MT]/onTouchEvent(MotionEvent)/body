{
  if (mInstantExpanding || mTouchDisabled || (mMotionAborted && event.getActionMasked() != MotionEvent.ACTION_DOWN)) {
    return false;
  }
  if (isFullyCollapsed() && event.getPointerCount() == 1 && event.getToolType(0) == MotionEvent.TOOL_TYPE_MOUSE) {
    if (event.getAction() == MotionEvent.ACTION_UP) {
      expand(true);
    }
    return true;
  }
  int pointerIndex=event.findPointerIndex(mTrackingPointer);
  if (pointerIndex < 0) {
    pointerIndex=0;
    mTrackingPointer=event.getPointerId(pointerIndex);
  }
  final float x=event.getX(pointerIndex);
  final float y=event.getY(pointerIndex);
  if (event.getActionMasked() == MotionEvent.ACTION_DOWN) {
    mGestureWaitForTouchSlop=isFullyCollapsed() || hasConflictingGestures();
    mIgnoreXTouchSlop=isFullyCollapsed() || shouldGestureIgnoreXTouchSlop(x,y);
  }
switch (event.getActionMasked()) {
case MotionEvent.ACTION_DOWN:
    startExpandMotion(x,y,false,mExpandedHeight);
  mJustPeeked=false;
mPanelClosedOnDown=isFullyCollapsed();
mHasLayoutedSinceDown=false;
mUpdateFlingOnLayout=false;
mMotionAborted=false;
mPeekTouching=mPanelClosedOnDown;
mTouchAboveFalsingThreshold=false;
mCollapsedAndHeadsUpOnDown=isFullyCollapsed() && mHeadsUpManager.hasPinnedHeadsUp();
if (mVelocityTracker == null) {
initVelocityTracker();
}
trackMovement(event);
if (!mGestureWaitForTouchSlop || (mHeightAnimator != null && !mHintAnimationRunning) || mPeekPending|| mPeekAnimator != null) {
cancelHeightAnimator();
cancelPeek();
mTouchSlopExceeded=(mHeightAnimator != null && !mHintAnimationRunning) || mPeekPending || mPeekAnimator != null;
onTrackingStarted();
}
if (isFullyCollapsed() && !mHeadsUpManager.hasPinnedHeadsUp()) {
schedulePeek();
}
break;
case MotionEvent.ACTION_POINTER_UP:
final int upPointer=event.getPointerId(event.getActionIndex());
if (mTrackingPointer == upPointer) {
final int newIndex=event.getPointerId(0) != upPointer ? 0 : 1;
final float newY=event.getY(newIndex);
final float newX=event.getX(newIndex);
mTrackingPointer=event.getPointerId(newIndex);
startExpandMotion(newX,newY,true,mExpandedHeight);
}
break;
case MotionEvent.ACTION_POINTER_DOWN:
if (mStatusBar.getBarState() == StatusBarState.KEYGUARD) {
mMotionAborted=true;
endMotionEvent(event,x,y,true);
return false;
}
break;
case MotionEvent.ACTION_MOVE:
float h=y - mInitialTouchY;
if (Math.abs(h) > mTouchSlop && (Math.abs(h) > Math.abs(x - mInitialTouchX) || mIgnoreXTouchSlop)) {
mTouchSlopExceeded=true;
if (mGestureWaitForTouchSlop && !mTracking && !mCollapsedAndHeadsUpOnDown) {
if (!mJustPeeked && mInitialOffsetOnTouch != 0f) {
startExpandMotion(x,y,false,mExpandedHeight);
h=0;
}
cancelHeightAnimator();
removeCallbacks(mPeekRunnable);
mPeekPending=false;
onTrackingStarted();
}
}
final float newHeight=Math.max(0,h + mInitialOffsetOnTouch);
if (newHeight > mPeekHeight) {
if (mPeekAnimator != null) {
mPeekAnimator.cancel();
}
mJustPeeked=false;
}
if (-h >= getFalsingThreshold()) {
mTouchAboveFalsingThreshold=true;
mUpwardsWhenTresholdReached=isDirectionUpwards(x,y);
}
if (!mJustPeeked && (!mGestureWaitForTouchSlop || mTracking) && !isTrackingBlocked()) {
setExpandedHeightInternal(newHeight);
}
trackMovement(event);
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
trackMovement(event);
endMotionEvent(event,x,y,false);
break;
}
return !mGestureWaitForTouchSlop || mTracking;
}
