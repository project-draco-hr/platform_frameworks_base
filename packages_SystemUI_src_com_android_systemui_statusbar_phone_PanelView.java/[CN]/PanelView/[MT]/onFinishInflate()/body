{
  super.onFinishInflate();
  mHandleView=findViewById(R.id.handle);
  loadDimens();
  if (DEBUG)   logf("handle view: " + mHandleView);
  if (mHandleView != null) {
    mHandleView.setOnTouchListener(new View.OnTouchListener(){
      @Override public boolean onTouch(      View v,      MotionEvent event){
        int pointerIndex=event.findPointerIndex(mTrackingPointer);
        if (pointerIndex < 0) {
          pointerIndex=0;
          mTrackingPointer=event.getPointerId(pointerIndex);
        }
        final float y=event.getY(pointerIndex);
        final float rawDelta=event.getRawY() - event.getY();
        final float rawY=y + rawDelta;
        if (DEBUG)         logf("handle.onTouch: a=%s p=[%d,%d] y=%.1f rawY=%.1f off=%.1f",MotionEvent.actionToString(event.getAction()),mTrackingPointer,pointerIndex,y,rawY,mTouchOffset);
        PanelView.this.getLocationOnScreen(mAbsPos);
switch (event.getActionMasked()) {
case MotionEvent.ACTION_DOWN:
          mTracking=true;
        mHandleView.setPressed(true);
      postInvalidate();
    mInitialTouchY=y;
  mVelocityTracker=FlingTracker.obtain();
trackMovement(event);
mTimeAnimator.cancel();
mBar.onTrackingStarted(PanelView.this);
mTouchOffset=(rawY - mAbsPos[1]) - mExpandedHeight;
if (mExpandedHeight == 0) {
mJustPeeked=true;
runPeekAnimation();
}
break;
case MotionEvent.ACTION_POINTER_UP:
final int upPointer=event.getPointerId(event.getActionIndex());
if (mTrackingPointer == upPointer) {
final int newIndex=event.getPointerId(0) != upPointer ? 0 : 1;
final float newY=event.getY(newIndex);
final float newRawY=newY + rawDelta;
mTrackingPointer=event.getPointerId(newIndex);
mTouchOffset=(newRawY - mAbsPos[1]) - mExpandedHeight;
mInitialTouchY=newY;
}
break;
case MotionEvent.ACTION_MOVE:
final float h=rawY - mAbsPos[1] - mTouchOffset;
if (h > mPeekHeight) {
if (mPeekAnimator != null && mPeekAnimator.isStarted()) {
mPeekAnimator.cancel();
}
mJustPeeked=false;
}
if (!mJustPeeked) {
PanelView.this.setExpandedHeightInternal(h);
mBar.panelExpansionChanged(PanelView.this,mExpandedFraction);
}
trackMovement(event);
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
mFinalTouchY=y;
mTracking=false;
mTrackingPointer=-1;
mHandleView.setPressed(false);
postInvalidate();
mBar.onTrackingStopped(PanelView.this);
trackMovement(event);
float vel=0, yVel=0, xVel=0;
boolean negative=false;
if (mVelocityTracker != null) {
mVelocityTracker.computeCurrentVelocity(1000);
yVel=mVelocityTracker.getYVelocity();
negative=yVel < 0;
xVel=mVelocityTracker.getXVelocity();
if (xVel < 0) {
xVel=-xVel;
}
if (xVel > mFlingGestureMaxXVelocityPx) {
xVel=mFlingGestureMaxXVelocityPx;
}
vel=(float)Math.hypot(yVel,xVel);
if (vel > mFlingGestureMaxOutputVelocityPx) {
vel=mFlingGestureMaxOutputVelocityPx;
}
mVelocityTracker.recycle();
mVelocityTracker=null;
}
final float deltaY=Math.abs(mFinalTouchY - mInitialTouchY);
if (deltaY < mFlingGestureMinDistPx || vel < mFlingExpandMinVelocityPx) {
vel=0;
}
if (negative) {
vel=-vel;
}
if (DEBUG) logf("gesture: dy=%f vel=(%f,%f) vlinear=%f",deltaY,xVel,yVel,vel);
fling(vel,true);
break;
}
return true;
}
}
);
}
}
