{
  if (mInstantExpanding || (mMotionAborted && event.getActionMasked() != MotionEvent.ACTION_DOWN)) {
    return false;
  }
  int pointerIndex=event.findPointerIndex(mTrackingPointer);
  if (pointerIndex < 0) {
    pointerIndex=0;
    mTrackingPointer=event.getPointerId(pointerIndex);
  }
  final float x=event.getX(pointerIndex);
  final float y=event.getY(pointerIndex);
  boolean scrolledToBottom=isScrolledToBottom();
switch (event.getActionMasked()) {
case MotionEvent.ACTION_DOWN:
    mStatusBar.userActivity();
  if (mHeightAnimator != null && !mHintAnimationRunning || mPeekPending || mPeekAnimator != null) {
    cancelHeightAnimator();
    cancelPeek();
    mTouchSlopExceeded=true;
    return true;
  }
mInitialTouchY=y;
mInitialTouchX=x;
mTouchStartedInEmptyArea=!isInContentBounds(x,y);
mTouchSlopExceeded=false;
mJustPeeked=false;
mMotionAborted=false;
mPanelClosedOnDown=isFullyCollapsed();
mHasLayoutedSinceDown=false;
mUpdateFlingOnLayout=false;
mTouchAboveFalsingThreshold=false;
initVelocityTracker();
trackMovement(event);
break;
case MotionEvent.ACTION_POINTER_UP:
final int upPointer=event.getPointerId(event.getActionIndex());
if (mTrackingPointer == upPointer) {
final int newIndex=event.getPointerId(0) != upPointer ? 0 : 1;
mTrackingPointer=event.getPointerId(newIndex);
mInitialTouchX=event.getX(newIndex);
mInitialTouchY=event.getY(newIndex);
}
break;
case MotionEvent.ACTION_POINTER_DOWN:
if (mStatusBar.getBarState() == StatusBarState.KEYGUARD) {
mMotionAborted=true;
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
}
break;
case MotionEvent.ACTION_MOVE:
final float h=y - mInitialTouchY;
trackMovement(event);
if (scrolledToBottom || mTouchStartedInEmptyArea) {
if (h < -mTouchSlop && h < -Math.abs(x - mInitialTouchX)) {
cancelHeightAnimator();
startExpandMotion(x,y,true,mExpandedHeight);
return true;
}
}
break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
break;
}
return false;
}
