{
  long elapsedRealtime=0;
  NetworkState[] state=null;
  NetworkStats stats=null;
  NetworkStats detail=null;
  final File statsFile=new File(mStatsDir,"netstats.bin");
  assertFalse(statsFile.exists());
  state=new NetworkState[]{buildWifi()};
  stats=new NetworkStats.Builder(elapsedRealtime,0).build();
  detail=new NetworkStats.Builder(elapsedRealtime,0).build();
  expect(mConnManager.getAllNetworkState()).andReturn(state).atLeastOnce();
  expect(mNetManager.getNetworkStatsSummary()).andReturn(stats).atLeastOnce();
  expect(mNetManager.getNetworkStatsDetail()).andReturn(detail).atLeastOnce();
  expectTime(TEST_START + elapsedRealtime);
  replay();
  mServiceContext.sendBroadcast(new Intent(CONNECTIVITY_ACTION));
  verifyAndReset();
  assertNetworkTotal(TEMPLATE_WIFI,0L,0L);
  elapsedRealtime+=HOUR_IN_MILLIS;
  stats=new NetworkStats.Builder(elapsedRealtime,1).addEntry(TEST_IFACE,UID_ALL,1024L,2048L).build();
  expect(mNetManager.getNetworkStatsSummary()).andReturn(stats).atLeastOnce();
  expect(mNetManager.getNetworkStatsDetail()).andReturn(detail).atLeastOnce();
  expectTime(TEST_START + elapsedRealtime);
  replay();
  mServiceContext.sendBroadcast(new Intent(ACTION_NETWORK_STATS_POLL));
  verifyAndReset();
  assertNetworkTotal(TEMPLATE_WIFI,1024L,2048L);
  mServiceContext.sendBroadcast(new Intent(Intent.ACTION_SHUTDOWN));
  assertNetworkTotal(TEMPLATE_WIFI,0L,0L);
  assertTrue(statsFile.exists());
  expectSystemReady();
  replay();
  mService.systemReady();
  verifyAndReset();
  assertNetworkTotal(TEMPLATE_WIFI,1024L,2048L);
}
