{
  StringBuilder toReturn=new StringBuilder();
  int length=args.length;
  for (int i=0; i < length; i++) {
    toReturn.append((i > 0) ? "," : "");
    if (args[i] instanceof List<?>) {
      toReturn.append("[");
      List<Object> aList=(List<Object>)args[i];
      for (int j=0; j < aList.size(); j++) {
        String comma=((j == 0) ? "" : ",");
        toReturn.append(comma + convertToJsArgs(aList.get(j)));
      }
      toReturn.append("]");
    }
 else     if (args[i] instanceof Map<?,?>) {
      Map<Object,Object> aMap=(Map<Object,Object>)args[i];
      String toAdd="{";
      for (      Object key : aMap.keySet()) {
        toAdd+=key + ":" + convertToJsArgs(aMap.get(key))+ ",";
      }
      toReturn.append(toAdd.substring(0,toAdd.length() - 1) + "}");
    }
 else     if (args[i] instanceof WebElement) {
      toReturn.append("{" + ELEMENT_KEY + ":\""+ ((WebElement)args[i]).getId()+ "\"}");
    }
 else     if (args[i] instanceof Number || args[i] instanceof Boolean) {
      toReturn.append(String.valueOf(args[i]));
    }
 else     if (args[i] instanceof String) {
      toReturn.append(escapeAndQuote((String)args[i]));
    }
 else {
      throw new IllegalArgumentException("Javascript arguments can be " + "a Number, a Boolean, a String, a WebElement, " + "or a List or a Map of those. Got: "+ ((args[i] == null) ? "null" : args[i].toString()));
    }
  }
  return toReturn.toString();
}
