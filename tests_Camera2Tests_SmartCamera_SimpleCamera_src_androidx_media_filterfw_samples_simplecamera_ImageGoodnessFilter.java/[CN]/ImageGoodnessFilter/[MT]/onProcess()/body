{
  FrameValue sharpnessFrameValue=getConnectedInputPort("sharpness").pullFrame().asFrameValue();
  float sharpness=((Float)sharpnessFrameValue.getValue()).floatValue();
  FrameValue overExposureFrameValue=getConnectedInputPort("overExposure").pullFrame().asFrameValue();
  float overExposure=((Float)overExposureFrameValue.getValue()).floatValue();
  FrameValue underExposureFrameValue=getConnectedInputPort("underExposure").pullFrame().asFrameValue();
  float underExposure=((Float)underExposureFrameValue.getValue()).floatValue();
  FrameValue colorfulnessFrameValue=getConnectedInputPort("colorfulness").pullFrame().asFrameValue();
  float colorfulness=((Float)colorfulnessFrameValue.getValue()).floatValue();
  FrameValue contrastRatingFrameValue=getConnectedInputPort("contrastRating").pullFrame().asFrameValue();
  float contrastRating=((Float)contrastRatingFrameValue.getValue()).floatValue();
  FrameValue brightnessFrameValue=getConnectedInputPort("brightness").pullFrame().asFrameValue();
  float brightness=((Float)brightnessFrameValue.getValue()).floatValue();
  FrameValue motionValuesFrameValue=getConnectedInputPort("motionValues").pullFrame().asFrameValue();
  float[] motionValues=(float[])motionValuesFrameValue.getValue();
  float vectorAccel=(float)Math.sqrt(Math.pow(motionValues[0],2) + Math.pow(motionValues[1],2) + Math.pow(motionValues[2],2));
  String outStr;
  FrameValue capturingFrameValue=getConnectedInputPort("capturing").pullFrame().asFrameValue();
  boolean capturing=(Boolean)capturingFrameValue.getValue();
  FrameImage2D inputImage=getConnectedInputPort("image").pullFrame().asFrameImage2D();
  float score=0.0f;
  score=computePictureScore(vectorAccel,sharpness,underExposure,overExposure,contrastRating,colorfulness,brightness);
  if (scoreMean == 0)   scoreMean=score;
 else   scoreMean=scoreMean * (1 - DECAY) + score * DECAY;
  if (motionMean == 0)   motionMean=vectorAccel;
 else   motionMean=motionMean * (1 - DECAY) + vectorAccel * DECAY;
  float classifierScore=classifierComputeScore(vectorAccel,sharpness,underExposure,colorfulness,contrastRating,score);
  final float GREAT_SCORE=3.5f;
  final float GOOD_SCORE=2.5f;
  final float OK_SCORE=1.5f;
  final float BAD_SCORE=0.5f;
  if (score >= GREAT_SCORE) {
    outStr=GREAT;
  }
 else   if (score >= GOOD_SCORE) {
    outStr=GOOD;
  }
 else   if (score >= OK_SCORE) {
    outStr=OK;
  }
 else   if (score >= BAD_SCORE) {
    outStr=BAD;
  }
 else {
    outStr=AWFUL;
  }
  if (capturing) {
    if (outStr.equals(GREAT)) {
      Bitmap bitmap=inputImage.toBitmap();
      new AsyncOperation().execute(bitmap);
      final float RESET_FEATURES=0.01f;
      sharpnessMean=RESET_FEATURES;
      underExposureMean=RESET_FEATURES;
      overExposureMean=RESET_FEATURES;
      contrastMean=RESET_FEATURES;
      colorfulnessMean=RESET_FEATURES;
      brightnessMean=RESET_FEATURES;
    }
  }
  OutputPort outPort=getConnectedOutputPort("goodOrBadPic");
  FrameValue stringFrame=outPort.fetchAvailableFrame(null).asFrameValue();
  stringFrame.setValue(outStr);
  outPort.pushFrame(stringFrame);
  OutputPort scoreOutPort=getConnectedOutputPort("score");
  FrameValue scoreFrame=scoreOutPort.fetchAvailableFrame(null).asFrameValue();
  scoreFrame.setValue(score);
  scoreOutPort.pushFrame(scoreFrame);
}
