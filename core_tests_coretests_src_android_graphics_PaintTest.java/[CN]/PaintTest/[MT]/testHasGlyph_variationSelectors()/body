{
  final Typeface fontTypeface=Typeface.createFromAsset(getInstrumentation().getContext().getAssets(),"fonts/hasGlyphTestFont.ttf");
  Paint p=new Paint();
  p.setTypeface(fontTypeface);
  HasGlyphTestCase[] HAS_GLYPH_TEST_CASES={new HasGlyphTestCase(0x0061,new Integer[]{0xFE00,0xE0100,0xE0101,0xE0102}),new HasGlyphTestCase(0x0062,new Integer[]{0xFE01,0xE0101,0xE0102,0xE0103}),new HasGlyphTestCase(0x0063,new Integer[]{}),new HasGlyphTestCase(0x0064,new Integer[]{0xFE02,0xE0102,0xE0103}),new HasGlyphTestCase(0x1F000,new Integer[]{0xFE00,0xE0100,0xE0101,0xE0102}),new HasGlyphTestCase(0x1F001,new Integer[]{0xFE01,0xE0101,0xE0102,0xE0103}),new HasGlyphTestCase(0x1F002,new Integer[]{}),new HasGlyphTestCase(0x1F003,new Integer[]{0xFE02,0xE0102,0xE0103})};
  for (  HasGlyphTestCase testCase : HAS_GLYPH_TEST_CASES) {
    for (int vs=0xFE00; vs <= 0xE01EF; ++vs) {
      if (vs == 0xFF00) {
        vs=0xE0100;
      }
      final String signature="hasGlyph(U+" + Integer.toHexString(testCase.mBaseCodepoint) + " U+"+ Integer.toHexString(vs)+ ")";
      final String testString=codePointsToString(new int[]{testCase.mBaseCodepoint,vs});
      if (testCase.mVariationSelectors.contains(vs)) {
        assertTrue(signature + " is expected to be true",p.hasGlyph(testString));
      }
 else {
        assertFalse(signature + " is expected to be false",p.hasGlyph(testString));
      }
    }
  }
}
