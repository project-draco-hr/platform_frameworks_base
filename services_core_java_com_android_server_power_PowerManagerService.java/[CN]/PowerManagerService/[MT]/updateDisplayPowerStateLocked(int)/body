{
  final boolean oldDisplayReady=mDisplayReady;
  if ((dirty & (DIRTY_WAKE_LOCKS | DIRTY_USER_ACTIVITY | DIRTY_WAKEFULNESS| DIRTY_ACTUAL_DISPLAY_POWER_STATE_UPDATED| DIRTY_BOOT_COMPLETED| DIRTY_SETTINGS| DIRTY_SCREEN_BRIGHTNESS_BOOST)) != 0) {
    mDisplayPowerRequest.policy=getDesiredScreenPolicyLocked();
    boolean brightnessSetByUser=true;
    int screenBrightness=mScreenBrightnessSettingDefault;
    float screenAutoBrightnessAdjustment=0.0f;
    boolean autoBrightness=(mScreenBrightnessModeSetting == Settings.System.SCREEN_BRIGHTNESS_MODE_AUTOMATIC);
    if (isValidBrightness(mScreenBrightnessOverrideFromWindowManager)) {
      screenBrightness=mScreenBrightnessOverrideFromWindowManager;
      autoBrightness=false;
      brightnessSetByUser=false;
    }
 else     if (isValidBrightness(mTemporaryScreenBrightnessSettingOverride)) {
      screenBrightness=mTemporaryScreenBrightnessSettingOverride;
    }
 else     if (isValidBrightness(mScreenBrightnessSetting)) {
      screenBrightness=mScreenBrightnessSetting;
    }
    if (autoBrightness) {
      screenBrightness=mScreenBrightnessSettingDefault;
      if (isValidAutoBrightnessAdjustment(mTemporaryScreenAutoBrightnessAdjustmentSettingOverride)) {
        screenAutoBrightnessAdjustment=mTemporaryScreenAutoBrightnessAdjustmentSettingOverride;
      }
 else       if (isValidAutoBrightnessAdjustment(mScreenAutoBrightnessAdjustmentSetting)) {
        screenAutoBrightnessAdjustment=mScreenAutoBrightnessAdjustmentSetting;
      }
    }
    screenBrightness=Math.max(Math.min(screenBrightness,mScreenBrightnessSettingMaximum),mScreenBrightnessSettingMinimum);
    screenAutoBrightnessAdjustment=Math.max(Math.min(screenAutoBrightnessAdjustment,1.0f),-1.0f);
    mDisplayPowerRequest.screenBrightness=screenBrightness;
    mDisplayPowerRequest.screenAutoBrightnessAdjustment=screenAutoBrightnessAdjustment;
    mDisplayPowerRequest.brightnessSetByUser=brightnessSetByUser;
    mDisplayPowerRequest.useAutoBrightness=autoBrightness;
    mDisplayPowerRequest.useProximitySensor=shouldUseProximitySensorLocked();
    mDisplayPowerRequest.lowPowerMode=mLowPowerModeEnabled;
    mDisplayPowerRequest.boostScreenBrightness=mScreenBrightnessBoostInProgress;
    if (mDisplayPowerRequest.policy == DisplayPowerRequest.POLICY_DOZE) {
      mDisplayPowerRequest.dozeScreenState=mDozeScreenStateOverrideFromDreamManager;
      if (mDisplayPowerRequest.dozeScreenState == Display.STATE_DOZE_SUSPEND && (mWakeLockSummary & WAKE_LOCK_DRAW) != 0) {
        mDisplayPowerRequest.dozeScreenState=Display.STATE_DOZE;
      }
      mDisplayPowerRequest.dozeScreenBrightness=mDozeScreenBrightnessOverrideFromDreamManager;
    }
 else {
      mDisplayPowerRequest.dozeScreenState=Display.STATE_UNKNOWN;
      mDisplayPowerRequest.dozeScreenBrightness=PowerManager.BRIGHTNESS_DEFAULT;
    }
    mDisplayReady=mDisplayManagerInternal.requestPowerState(mDisplayPowerRequest,mRequestWaitForNegativeProximity);
    mRequestWaitForNegativeProximity=false;
    if (DEBUG_SPEW) {
      Slog.d(TAG,"updateDisplayPowerStateLocked: mDisplayReady=" + mDisplayReady + ", policy="+ mDisplayPowerRequest.policy+ ", mWakefulness="+ mWakefulness+ ", mWakeLockSummary=0x"+ Integer.toHexString(mWakeLockSummary)+ ", mUserActivitySummary=0x"+ Integer.toHexString(mUserActivitySummary)+ ", mBootCompleted="+ mBootCompleted+ ", mScreenBrightnessBoostInProgress="+ mScreenBrightnessBoostInProgress);
    }
  }
  return mDisplayReady && !oldDisplayReady;
}
