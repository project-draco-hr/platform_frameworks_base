{
  LruCache<String,String> cache=new LruCache<String,String>(3);
  assertStatistics(cache);
  assertEquals(null,cache.put("a","A"));
  expectedPutCount++;
  assertStatistics(cache);
  assertHit(cache,"a","A");
  assertSnapshot(cache,"a","A");
  assertEquals(null,cache.put("b","B"));
  expectedPutCount++;
  assertStatistics(cache);
  assertHit(cache,"a","A");
  assertHit(cache,"b","B");
  assertSnapshot(cache,"a","A","b","B");
  assertEquals(null,cache.put("c","C"));
  expectedPutCount++;
  assertStatistics(cache);
  assertHit(cache,"a","A");
  assertHit(cache,"b","B");
  assertHit(cache,"c","C");
  assertSnapshot(cache,"a","A","b","B","c","C");
  assertEquals(null,cache.put("d","D"));
  expectedPutCount++;
  expectedEvictionCount++;
  assertStatistics(cache);
  assertMiss(cache,"a");
  assertHit(cache,"b","B");
  assertHit(cache,"c","C");
  assertHit(cache,"d","D");
  assertHit(cache,"b","B");
  assertHit(cache,"c","C");
  assertSnapshot(cache,"d","D","b","B","c","C");
  assertEquals(null,cache.put("e","E"));
  expectedPutCount++;
  expectedEvictionCount++;
  assertStatistics(cache);
  assertMiss(cache,"d");
  assertMiss(cache,"a");
  assertHit(cache,"e","E");
  assertHit(cache,"b","B");
  assertHit(cache,"c","C");
  assertSnapshot(cache,"e","E","b","B","c","C");
}
