{
  List<Field> instanceFields=findInstanceFields(type);
  if (instanceFields.size() == 0) {
    throw new UnsupportedOperationException("Class has no instance fields: " + type);
  }
  Constructor<T> constructor=null;
  int fieldCount=instanceFields.size();
  HashSet<Class<?>> fieldTypes=new HashSet<Class<?>>();
  for (  Field f : instanceFields) {
    fieldTypes.add(f.getType());
  }
  @SuppressWarnings("unchecked") Constructor<T>[] constructors=(Constructor<T>[])type.getConstructors();
  for (  Constructor<T> ctor : constructors) {
    Log.v(TAG,String.format("Inspecting constructor '%s'",ctor));
    Class<?>[] parameterTypes=ctor.getParameterTypes();
    if (parameterTypes.length == fieldCount) {
      boolean match=true;
      HashSet<Class<?>> argTypes=new HashSet<Class<?>>();
      for (      Class<?> t : parameterTypes) {
        argTypes.add(t);
      }
      match=argTypes.equals(fieldTypes);
      if (match) {
        constructor=ctor;
        break;
      }
 else {
        Log.w(TAG,String.format("Constructor args did not have matching types"));
      }
    }
 else {
      Log.v(TAG,String.format("Constructor did not have expected amount of fields (had %d, expected %d)",parameterTypes.length,fieldCount));
    }
  }
  if (constructors.length == 0) {
    Log.w(TAG,String.format("Type %s had no public constructors",type));
  }
  if (constructor == null) {
    throw new UnsupportedOperationException("Failed to find any applicable constructors for type " + type);
  }
  return constructor;
}
