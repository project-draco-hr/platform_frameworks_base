{
  int outBitrate=0;
  mExportFilename=filePath;
  previewStoryBoard(mediaItemsList,mediaTransitionList,mediaBGMList,null);
  mExportProgressListener=listener;
  mProgressToApp=0;
switch (bitrate) {
case MediaProperties.BITRATE_28K:
    outBitrate=Bitrate.BR_32_KBPS;
  break;
case MediaProperties.BITRATE_40K:
outBitrate=Bitrate.BR_48_KBPS;
break;
case MediaProperties.BITRATE_64K:
outBitrate=Bitrate.BR_64_KBPS;
break;
case MediaProperties.BITRATE_96K:
outBitrate=Bitrate.BR_96_KBPS;
break;
case MediaProperties.BITRATE_128K:
outBitrate=Bitrate.BR_128_KBPS;
break;
case MediaProperties.BITRATE_192K:
outBitrate=Bitrate.BR_192_KBPS;
break;
case MediaProperties.BITRATE_256K:
outBitrate=Bitrate.BR_256_KBPS;
break;
case MediaProperties.BITRATE_384K:
outBitrate=Bitrate.BR_384_KBPS;
break;
case MediaProperties.BITRATE_512K:
outBitrate=Bitrate.BR_512_KBPS;
break;
case MediaProperties.BITRATE_800K:
outBitrate=Bitrate.BR_800_KBPS;
break;
case MediaProperties.BITRATE_2M:
outBitrate=Bitrate.BR_2_MBPS;
break;
case MediaProperties.BITRATE_5M:
outBitrate=Bitrate.BR_5_MBPS;
break;
case MediaProperties.BITRATE_8M:
outBitrate=Bitrate.BR_8_MBPS;
break;
default :
throw new IllegalArgumentException("Argument Bitrate incorrect");
}
mPreviewEditSettings.videoFrameRate=VideoFrameRate.FR_30_FPS;
mPreviewEditSettings.outputFile=mOutputFilename=filePath;
int aspectRatio=mVideoEditor.getAspectRatio();
mPreviewEditSettings.videoFrameSize=findVideoResolution(aspectRatio,height);
mPreviewEditSettings.videoFormat=VideoFormat.H264;
mPreviewEditSettings.audioFormat=AudioFormat.AAC;
mPreviewEditSettings.audioSamplingFreq=AudioSamplingFrequency.FREQ_32000;
mPreviewEditSettings.maxFileSize=0;
mPreviewEditSettings.audioChannels=2;
mPreviewEditSettings.videoBitrate=outBitrate;
mPreviewEditSettings.audioBitrate=Bitrate.BR_96_KBPS;
mPreviewEditSettings.transitionSettingsArray=new TransitionSettings[mTotalClips - 1];
for (int index=0; index < mTotalClips - 1; index++) {
mPreviewEditSettings.transitionSettingsArray[index]=new TransitionSettings();
mPreviewEditSettings.transitionSettingsArray[index].videoTransitionType=VideoTransition.NONE;
mPreviewEditSettings.transitionSettingsArray[index].audioTransitionType=AudioTransition.NONE;
}
for (int clipCnt=0; clipCnt < mPreviewEditSettings.clipSettingsArray.length; clipCnt++) {
if (mPreviewEditSettings.clipSettingsArray[clipCnt].fileType == FileType.JPG) {
mPreviewEditSettings.clipSettingsArray[clipCnt].clipPath=mPreviewEditSettings.clipSettingsArray[clipCnt].clipOriginalPath;
}
}
nativePopulateSettings(mPreviewEditSettings,mClipProperties,mAudioSettings);
int err=0;
try {
mProcessingState=PROCESSING_EXPORT;
mProcessingObject=null;
err=generateClip(mPreviewEditSettings);
mProcessingState=PROCESSING_NONE;
}
 catch (IllegalArgumentException ex) {
Log.e(TAG,"IllegalArgument for generateClip");
throw ex;
}
catch (IllegalStateException ex) {
Log.e(TAG,"IllegalStateExceptiont for generateClip");
throw ex;
}
catch (RuntimeException ex) {
Log.e(TAG,"RuntimeException for generateClip");
throw ex;
}
if (err != 0) {
Log.e(TAG,"RuntimeException for generateClip");
throw new RuntimeException("generateClip failed with error=" + err);
}
mExportProgressListener=null;
}
