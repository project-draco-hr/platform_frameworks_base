{
  final int decWidth=(width + 1) & 0xFFFFFFFE;
  final int decHeight=(height + 1) & 0xFFFFFFFE;
  final int thumbnailSize=decWidth * decHeight;
  final int[] decArray=new int[thumbnailSize];
  final IntBuffer decBuffer=IntBuffer.allocate(thumbnailSize);
  final boolean needToMassage=(decWidth != width || decHeight != height || videoRotation != 0);
  final Bitmap tmpBitmap=needToMassage ? Bitmap.createBitmap(decWidth,decHeight,Bitmap.Config.ARGB_8888) : null;
  final boolean needToSwapWH=(videoRotation == 90 || videoRotation == 270);
  final int outWidth=needToSwapWH ? height : width;
  final int outHeight=needToSwapWH ? width : height;
  nativeGetPixelsList(filename,decArray,decWidth,decHeight,thumbnailCount,startMs,endMs,indices,new NativeGetPixelsListCallback(){
    public void onThumbnail(    int index){
      Bitmap outBitmap=Bitmap.createBitmap(outWidth,outHeight,Bitmap.Config.ARGB_8888);
      decBuffer.rewind();
      decBuffer.put(decArray,0,thumbnailSize);
      decBuffer.rewind();
      if (!needToMassage) {
        outBitmap.copyPixelsFromBuffer(decBuffer);
      }
 else {
        tmpBitmap.copyPixelsFromBuffer(decBuffer);
        final Canvas canvas=new Canvas(outBitmap);
        Matrix m=new Matrix();
        float sx=1f / decWidth;
        float sy=1f / decHeight;
        m.postScale(sx,sy);
        m.postRotate(videoRotation,0.5f,0.5f);
        m.postScale(outWidth,outHeight);
        canvas.drawBitmap(tmpBitmap,m,sResizePaint);
      }
      callback.onThumbnail(outBitmap,index);
    }
  }
);
  if (tmpBitmap != null) {
    tmpBitmap.recycle();
  }
}
