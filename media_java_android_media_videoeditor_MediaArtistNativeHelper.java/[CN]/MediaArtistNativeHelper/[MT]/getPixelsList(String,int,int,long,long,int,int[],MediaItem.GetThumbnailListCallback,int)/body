{
  final int newWidth=(width + 1) & 0xFFFFFFFE;
  final int newHeight=(height + 1) & 0xFFFFFFFE;
  final int thumbnailSize=newWidth * newHeight;
  final Bitmap tempBitmap=(newWidth != width || newHeight != height) ? Bitmap.createBitmap(newWidth,newHeight,Bitmap.Config.ARGB_8888) : null;
  final int[] rgb888=new int[thumbnailSize];
  final IntBuffer tmpBuffer=IntBuffer.allocate(thumbnailSize);
  nativeGetPixelsList(filename,rgb888,newWidth,newHeight,thumbnailCount,videoRotation,startMs,endMs,indices,new NativeGetPixelsListCallback(){
    public void onThumbnail(    int index){
      Bitmap bitmap=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);
      tmpBuffer.put(rgb888,0,thumbnailSize);
      tmpBuffer.rewind();
      if ((newWidth == width) && (newHeight == height)) {
        bitmap.copyPixelsFromBuffer(tmpBuffer);
      }
 else {
        tempBitmap.copyPixelsFromBuffer(tmpBuffer);
        final Canvas canvas=new Canvas(bitmap);
        canvas.drawBitmap(tempBitmap,new Rect(0,0,newWidth,newHeight),new Rect(0,0,width,height),sResizePaint);
        canvas.setBitmap(null);
      }
      if (videoRotation == 0) {
        callback.onThumbnail(bitmap,index);
      }
 else {
        Matrix mtx=new Matrix();
        mtx.postRotate(videoRotation);
        Bitmap rotatedBmp=Bitmap.createBitmap(bitmap,0,0,width,height,mtx,false);
        callback.onThumbnail(rotatedBmp,index);
        if (bitmap != null) {
          bitmap.recycle();
        }
      }
    }
  }
);
  if (tempBitmap != null) {
    tempBitmap.recycle();
  }
}
