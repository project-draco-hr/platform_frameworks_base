{
  Uri uri=baseUri;
  List<String> selectionParts=new ArrayList<String>();
  if (mId != null) {
    uri=ContentUris.withAppendedId(uri,mId);
  }
  if (mStatusFlags != null) {
    List<String> parts=new ArrayList<String>();
    if ((mStatusFlags & STATUS_PENDING) != 0) {
      parts.add(statusClause("=",Downloads.STATUS_PENDING));
    }
    if ((mStatusFlags & STATUS_RUNNING) != 0) {
      parts.add(statusClause("=",Downloads.STATUS_RUNNING));
    }
    if ((mStatusFlags & STATUS_PAUSED) != 0) {
      parts.add(statusClause("=",Downloads.Impl.STATUS_PAUSED_BY_APP));
      parts.add(statusClause("=",Downloads.Impl.STATUS_WAITING_TO_RETRY));
      parts.add(statusClause("=",Downloads.Impl.STATUS_WAITING_FOR_NETWORK));
      parts.add(statusClause("=",Downloads.Impl.STATUS_QUEUED_FOR_WIFI));
    }
    if ((mStatusFlags & STATUS_SUCCESSFUL) != 0) {
      parts.add(statusClause("=",Downloads.STATUS_SUCCESS));
    }
    if ((mStatusFlags & STATUS_FAILED) != 0) {
      parts.add("(" + statusClause(">=",400) + " AND "+ statusClause("<",600)+ ")");
    }
    selectionParts.add(joinStrings(" OR ",parts));
  }
  if (mOnlyIncludeVisibleInDownloadsUi) {
    selectionParts.add(Downloads.Impl.COLUMN_IS_VISIBLE_IN_DOWNLOADS_UI + " != '0'");
  }
  String selection=joinStrings(" AND ",selectionParts);
  String orderDirection=(mOrderDirection == ORDER_ASCENDING ? "ASC" : "DESC");
  String orderBy=mOrderByColumn + " " + orderDirection;
  return resolver.query(uri,projection,selection,null,orderBy);
}
