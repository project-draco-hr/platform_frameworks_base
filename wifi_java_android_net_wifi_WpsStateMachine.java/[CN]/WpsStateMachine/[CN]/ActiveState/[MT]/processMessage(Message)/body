{
  boolean retValue=HANDLED;
  if (DBG)   Log.d(TAG,getName() + message.toString() + "\n");
switch (message.what) {
case WifiMonitor.SUPPLICANT_STATE_CHANGE_EVENT:
    StateChangeResult stateChangeResult=(StateChangeResult)message.obj;
  SupplicantState supState=(SupplicantState)stateChangeResult.state;
switch (supState) {
case COMPLETED:
  Log.d(TAG,"WPS set up successful");
mWifiConfigStore.enableAllNetworks();
mWifiConfigStore.loadConfiguredNetworks();
mWifiConfigStore.updateIpAndProxyFromWpsConfig(stateChangeResult.networkId,mWpsInfo);
mWifiStateMachine.sendMessage(WifiStateMachine.WPS_COMPLETED_EVENT);
transitionTo(mInactiveState);
break;
case INACTIVE:
Log.d(TAG,"WPS set up failed, enabling other networks");
mWifiConfigStore.enableAllNetworks();
mWifiStateMachine.sendMessage(WifiStateMachine.WPS_COMPLETED_EVENT);
transitionTo(mInactiveState);
break;
default :
if (DBG) Log.d(TAG,"Ignoring supplicant state " + supState.name());
break;
}
break;
case WifiStateMachine.CMD_START_WPS:
mReplyChannel.replyToMessage(message,WifiManager.CMD_WPS_COMPLETED,new WpsResult(Status.IN_PROGRESS));
break;
default :
retValue=NOT_HANDLED;
}
return retValue;
}
