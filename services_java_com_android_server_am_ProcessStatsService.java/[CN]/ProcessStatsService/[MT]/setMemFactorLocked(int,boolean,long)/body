{
  mMemFactorLowered=memFactor < mLastMemOnlyState;
  mLastMemOnlyState=memFactor;
  if (screenOn) {
    memFactor+=ProcessStats.ADJ_SCREEN_ON;
  }
  if (memFactor != mProcessStats.mMemFactor) {
    if (mProcessStats.mMemFactor != ProcessStats.STATE_NOTHING) {
      mProcessStats.mMemFactorDurations[mProcessStats.mMemFactor]+=now - mProcessStats.mStartTime;
    }
    mProcessStats.mMemFactor=memFactor;
    mProcessStats.mStartTime=now;
    ArrayMap<String,SparseArray<ProcessStats.PackageState>> pmap=mProcessStats.mPackages.getMap();
    for (int i=0; i < pmap.size(); i++) {
      SparseArray<ProcessStats.PackageState> uids=pmap.valueAt(i);
      for (int j=0; j < uids.size(); j++) {
        ProcessStats.PackageState pkg=uids.valueAt(j);
        ArrayMap<String,ProcessStats.ServiceState> services=pkg.mServices;
        for (int k=0; k < services.size(); k++) {
          ProcessStats.ServiceState service=services.valueAt(k);
          if (service.isActive()) {
            if (service.mStartedState != ProcessStats.STATE_NOTHING) {
              service.setStarted(true,memFactor,now);
            }
            if (service.mBoundState != ProcessStats.STATE_NOTHING) {
              service.setBound(true,memFactor,now);
            }
            if (service.mExecState != ProcessStats.STATE_NOTHING) {
              service.setExecuting(true,memFactor,now);
            }
          }
        }
      }
    }
    return true;
  }
  return false;
}
