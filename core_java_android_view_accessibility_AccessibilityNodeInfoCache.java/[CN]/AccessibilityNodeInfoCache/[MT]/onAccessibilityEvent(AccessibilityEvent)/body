{
  if (ENABLED) {
    final int eventType=event.getEventType();
switch (eventType) {
case AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED:
case AccessibilityEvent.TYPE_VIEW_HOVER_ENTER:
case AccessibilityEvent.TYPE_VIEW_HOVER_EXIT:
{
        final int windowId=event.getWindowId();
        if (mWindowId != windowId) {
          mWindowId=windowId;
          clear();
        }
      }
    break;
case AccessibilityEvent.TYPE_VIEW_FOCUSED:
case AccessibilityEvent.TYPE_VIEW_ACCESSIBILITY_FOCUSED:
case AccessibilityEvent.TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED:
case AccessibilityEvent.TYPE_VIEW_SELECTED:
case AccessibilityEvent.TYPE_VIEW_TEXT_CHANGED:
case AccessibilityEvent.TYPE_VIEW_TEXT_SELECTION_CHANGED:
{
    refreshCachedNode(event.getSourceNodeId());
  }
break;
case AccessibilityEvent.TYPE_VIEW_SCROLLED:
{
clearSubTreeLocked(event.getSourceNodeId());
}
break;
case AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED:
{
synchronized (mLock) {
final long sourceId=event.getSourceNodeId();
if ((event.getContentChangeTypes() & AccessibilityEvent.CONTENT_CHANGE_TYPE_SUBTREE) != 0) {
clearSubTreeLocked(sourceId);
}
 else {
refreshCachedNode(sourceId);
}
}
}
break;
}
if (CHECK_INTEGRITY_IF_DEBUGGABLE_BUILD && Build.IS_DEBUGGABLE) {
checkIntegrity();
}
}
}
