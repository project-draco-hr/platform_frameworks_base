{
  if (DEBUG) {
    Log.i(LOG_TAG,"write()");
  }
  new AsyncTask<Void,Void,Void>(){
    @Override protected Void doInBackground(    Void... params){
      InputStream in=null;
      OutputStream out=null;
      ParcelFileDescriptor source=null;
      ParcelFileDescriptor sink=null;
      try {
        ParcelFileDescriptor[] pipe=ParcelFileDescriptor.createPipe();
        source=pipe[0];
        sink=pipe[1];
        in=new FileInputStream(source.getFileDescriptor());
        out=new FileOutputStream(mFile);
        mRemoteInterface.write(pages,sink,callback,sequence);
        sink.close();
        sink=null;
        final byte[] buffer=new byte[8192];
        while (true) {
          final int readByteCount=in.read(buffer);
          if (readByteCount < 0) {
            break;
          }
          out.write(buffer,0,readByteCount);
        }
      }
 catch (      RemoteException re) {
        Log.e(LOG_TAG,"Error calling write()",re);
      }
catch (      IOException ioe) {
        Log.e(LOG_TAG,"Error calling write()",ioe);
      }
 finally {
        IoUtils.closeQuietly(in);
        IoUtils.closeQuietly(out);
        IoUtils.closeQuietly(sink);
        IoUtils.closeQuietly(source);
      }
      return null;
    }
  }
.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,(Void[])null);
}
