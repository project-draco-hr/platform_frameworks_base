{
  int nstart=start;
  int nend=end;
  checkRange("setSpan",start,end);
  if ((flags & Spannable.SPAN_PARAGRAPH) == Spannable.SPAN_PARAGRAPH) {
    if (start != 0 && start != length()) {
      char c=charAt(start - 1);
      if (c != '\n')       throw new RuntimeException("PARAGRAPH span must start at paragraph boundary" + " (" + start + " follows "+ c+ ")");
    }
    if (end != 0 && end != length()) {
      char c=charAt(end - 1);
      if (c != '\n')       throw new RuntimeException("PARAGRAPH span must end at paragraph boundary" + " (" + end + " follows "+ c+ ")");
    }
  }
  int count=mSpanCount;
  Object[] spans=mSpans;
  int[] data=mSpanData;
  for (int i=0; i < count; i++) {
    if (spans[i] == what) {
      int ostart=data[i * COLUMNS + START];
      int oend=data[i * COLUMNS + END];
      data[i * COLUMNS + START]=start;
      data[i * COLUMNS + END]=end;
      data[i * COLUMNS + FLAGS]=flags;
      sendSpanChanged(what,ostart,oend,nstart,nend);
      return;
    }
  }
  if (mSpanCount + 1 >= mSpans.length) {
    int newsize=ArrayUtils.idealIntArraySize(mSpanCount + 1);
    Object[] newtags=new Object[newsize];
    int[] newdata=new int[newsize * 3];
    System.arraycopy(mSpans,0,newtags,0,mSpanCount);
    System.arraycopy(mSpanData,0,newdata,0,mSpanCount * 3);
    mSpans=newtags;
    mSpanData=newdata;
  }
  mSpans[mSpanCount]=what;
  mSpanData[mSpanCount * COLUMNS + START]=start;
  mSpanData[mSpanCount * COLUMNS + END]=end;
  mSpanData[mSpanCount * COLUMNS + FLAGS]=flags;
  mSpanCount++;
  if (this instanceof Spannable)   sendSpanAdded(what,nstart,nend);
}
