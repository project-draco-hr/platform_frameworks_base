{
  int count=0;
  int spanCount=mSpanCount;
  Object[] spans=mSpans;
  int[] data=mSpanData;
  Object[] ret=null;
  Object ret1=null;
  for (int i=0; i < spanCount; i++) {
    if (kind != null && !kind.isInstance(spans[i])) {
      continue;
    }
    int spanStart=data[i * COLUMNS + START];
    int spanEnd=data[i * COLUMNS + END];
    if (spanStart > queryEnd) {
      continue;
    }
    if (spanEnd < queryStart) {
      continue;
    }
    if (spanStart != spanEnd && queryStart != queryEnd) {
      if (spanStart == queryEnd) {
        continue;
      }
      if (spanEnd == queryStart) {
        continue;
      }
    }
    if (count == 0) {
      ret1=spans[i];
      count++;
    }
 else {
      if (count == 1) {
        ret=(Object[])Array.newInstance(kind,spanCount - i + 1);
        ret[0]=ret1;
      }
      int prio=data[i * COLUMNS + FLAGS] & Spanned.SPAN_PRIORITY;
      if (prio != 0) {
        int j;
        for (j=0; j < count; j++) {
          int p=getSpanFlags(ret[j]) & Spanned.SPAN_PRIORITY;
          if (prio > p) {
            break;
          }
        }
        System.arraycopy(ret,j,ret,j + 1,count - j);
        ret[j]=spans[i];
        count++;
      }
 else {
        ret[count++]=spans[i];
      }
    }
  }
  if (count == 0) {
    return (T[])ArrayUtils.emptyArray(kind);
  }
  if (count == 1) {
    ret=(Object[])Array.newInstance(kind,1);
    ret[0]=ret1;
    return (T[])ret;
  }
  if (count == ret.length) {
    return (T[])ret;
  }
  Object[] nret=(Object[])Array.newInstance(kind,count);
  System.arraycopy(ret,0,nret,0,count);
  return (T[])nret;
}
