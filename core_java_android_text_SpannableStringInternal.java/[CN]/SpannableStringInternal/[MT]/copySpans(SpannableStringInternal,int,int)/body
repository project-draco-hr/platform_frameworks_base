{
  if (start == 0 && end == src.length()) {
    mSpans=ArrayUtils.newUnpaddedObjectArray(src.mSpans.length);
    mSpanData=new int[src.mSpanData.length];
    mSpanCount=src.mSpanCount;
    System.arraycopy(src.mSpans,0,mSpans,0,src.mSpans.length);
    System.arraycopy(src.mSpanData,0,mSpanData,0,mSpanData.length);
  }
 else {
    int count=0;
    int[] srcData=src.mSpanData;
    int limit=src.mSpanCount;
    for (int i=0; i < limit; i++) {
      int spanStart=srcData[i * COLUMNS + START];
      int spanEnd=srcData[i * COLUMNS + END];
      if (isOutOfCopyRange(start,end,spanStart,spanEnd))       continue;
      count++;
    }
    if (count == 0)     return;
    Object[] srcSpans=src.mSpans;
    mSpanCount=count;
    mSpans=ArrayUtils.newUnpaddedObjectArray(mSpanCount);
    mSpanData=new int[mSpanCount * COLUMNS];
    for (int i=0, j=0; i < limit; i++) {
      int spanStart=srcData[i * COLUMNS + START];
      int spanEnd=srcData[i * COLUMNS + END];
      if (isOutOfCopyRange(start,end,spanStart,spanEnd))       continue;
      if (spanStart < start)       spanStart=start;
      if (spanEnd > end)       spanEnd=end;
      mSpans[j]=srcSpans[i];
      mSpanData[j * COLUMNS + START]=spanStart - start;
      mSpanData[j * COLUMNS + END]=spanEnd - start;
      mSpanData[j * COLUMNS + FLAGS]=srcData[i * COLUMNS + FLAGS];
      j++;
    }
  }
}
