{
  ArrayList<Prediction> list=new ArrayList<Prediction>();
  Iterator<Instance> it=mInstances.values().iterator();
  Log.v(LOGTAG,mInstances.size() + " instances found");
  TreeMap<String,Double> label2score=new TreeMap<String,Double>();
  while (it.hasNext()) {
    Instance sample=it.next();
    double dis=RecognitionUtil.cosineDistance(sample,instance);
    double weight=Math.exp(-dis * dis / (2 * variance));
    Log.v(LOGTAG,sample.label + " = " + dis+ " weight = "+ weight);
    Double score=label2score.get(sample.label);
    if (score == null) {
      score=weight;
    }
 else {
      score+=weight;
    }
    label2score.put(sample.label,score);
  }
  double sum=0;
  Iterator it2=label2score.keySet().iterator();
  while (it2.hasNext()) {
    String name=(String)it2.next();
    double score=label2score.get(name);
    sum+=score;
    list.add(new Prediction(name,score));
  }
  it2=list.iterator();
  while (it2.hasNext()) {
    Prediction name=(Prediction)it2.next();
    name.score/=sum;
  }
  Collections.sort(list,new Comparator<Prediction>(){
    public int compare(    Prediction object1,    Prediction object2){
      double score1=object1.score;
      double score2=object2.score;
      if (score1 > score2)       return -1;
 else       if (score1 < score2)       return 1;
 else       return 0;
    }
  }
);
  it2=list.iterator();
  while (it2.hasNext()) {
    Prediction name=(Prediction)it2.next();
    Log.v(LOGTAG,"prediction [" + name.label + " = "+ name.score+ "]");
  }
  return list;
}
