{
  if (isMultiArch) {
    final int abi32=NativeLibraryHelper.findSupportedAbi(handle,Build.SUPPORTED_32_BIT_ABIS);
    final int abi64=NativeLibraryHelper.findSupportedAbi(handle,Build.SUPPORTED_64_BIT_ABIS);
    if (abi32 >= 0 && abi64 >= 0) {
      return new String[]{Build.SUPPORTED_64_BIT_ABIS[abi64],Build.SUPPORTED_32_BIT_ABIS[abi32]};
    }
 else     if (abi64 >= 0) {
      return new String[]{Build.SUPPORTED_64_BIT_ABIS[abi64]};
    }
 else     if (abi32 >= 0) {
      return new String[]{Build.SUPPORTED_32_BIT_ABIS[abi32]};
    }
    if (abi64 != PackageManager.NO_NATIVE_LIBRARIES || abi32 != PackageManager.NO_NATIVE_LIBRARIES) {
      throw new IOException("Error determining ABI list: errorCode=[" + abi32 + ","+ abi64+ "]");
    }
  }
 else {
    String[] abiList=Build.SUPPORTED_ABIS;
    if (abiOverride != null) {
      abiList=new String[]{abiOverride};
    }
 else     if (Build.SUPPORTED_64_BIT_ABIS.length > 0 && NativeLibraryHelper.hasRenderscriptBitcode(handle)) {
      abiList=Build.SUPPORTED_32_BIT_ABIS;
    }
    final int abi=NativeLibraryHelper.findSupportedAbi(handle,abiList);
    if (abi >= 0) {
      return new String[]{Build.SUPPORTED_ABIS[abi]};
    }
    if (abi != PackageManager.NO_NATIVE_LIBRARIES) {
      throw new IOException("Error determining ABI list: errorCode=" + abi);
    }
  }
  return null;
}
