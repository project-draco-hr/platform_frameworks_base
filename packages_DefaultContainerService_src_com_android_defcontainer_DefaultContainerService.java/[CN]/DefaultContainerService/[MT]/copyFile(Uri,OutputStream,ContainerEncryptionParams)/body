{
  String scheme=pPackageURI.getScheme();
  InputStream inStream=null;
  try {
    if (scheme == null || scheme.equals("file")) {
      final InputStream is=new FileInputStream(new File(pPackageURI.getPath()));
      inStream=new BufferedInputStream(is);
    }
 else     if (scheme.equals("content")) {
      final ParcelFileDescriptor fd;
      try {
        fd=getContentResolver().openFileDescriptor(pPackageURI,"r");
      }
 catch (      FileNotFoundException e) {
        Slog.e(TAG,"Couldn't open file descriptor from download service. " + "Failed with exception " + e);
        throw e;
      }
      if (fd == null) {
        Slog.e(TAG,"Provider returned no file descriptor for " + pPackageURI.toString());
        throw new FileNotFoundException("provider returned no file descriptor");
      }
 else {
        if (localLOGV) {
          Slog.i(TAG,"Opened file descriptor from download service.");
        }
        inStream=new ParcelFileDescriptor.AutoCloseInputStream(fd);
      }
    }
 else {
      Slog.e(TAG,"Package URI is not 'file:' or 'content:' - " + pPackageURI);
      throw new FileNotFoundException("Package URI is not 'file:' or 'content:'");
    }
    ApkContainer container=new ApkContainer(inStream,encryptionParams);
    try {
      copyToFile(container.getInputStream(),outStream);
      if (!container.isAuthenticated()) {
        throw new DigestException();
      }
    }
 catch (    GeneralSecurityException e) {
      throw new DigestException("A problem occured copying the file.");
    }
  }
  finally {
    IoUtils.closeQuietly(inStream);
  }
}
