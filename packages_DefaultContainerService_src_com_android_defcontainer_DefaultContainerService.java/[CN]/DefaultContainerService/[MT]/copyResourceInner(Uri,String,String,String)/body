{
  String status=Environment.getExternalStorageState();
  if (!status.equals(Environment.MEDIA_MOUNTED)) {
    Log.w(TAG,"Make sure sdcard is mounted.");
    return null;
  }
  String codePath=packageURI.getPath();
  File codeFile=new File(codePath);
  long sizeBytes=codeFile.length();
  ZipFile zipFile;
  List<Pair<ZipEntry,String>> nativeFiles;
  try {
    zipFile=new ZipFile(codeFile);
    nativeFiles=new LinkedList<Pair<ZipEntry,String>>();
    NativeLibraryHelper.listPackageNativeBinariesLI(zipFile,nativeFiles);
    final int N=nativeFiles.size();
    for (int i=0; i < N; i++) {
      final Pair<ZipEntry,String> entry=nativeFiles.get(i);
      sizeBytes+=entry.first.getSize();
    }
  }
 catch (  ZipException e) {
    Log.w(TAG,"Failed to extract data from package file",e);
    return null;
  }
catch (  IOException e) {
    Log.w(TAG,"Failed to cache package shared libs",e);
    return null;
  }
  String newCachePath=null;
  if ((newCachePath=PackageHelper.createSdDir(sizeBytes,newCid,key,Process.myUid())) == null) {
    Log.e(TAG,"Failed to create container " + newCid);
    return null;
  }
  if (localLOGV)   Log.i(TAG,"Created container for " + newCid + " at path : "+ newCachePath);
  File resFile=new File(newCachePath,resFileName);
  if (!FileUtils.copyFile(new File(codePath),resFile)) {
    Log.e(TAG,"Failed to copy " + codePath + " to "+ resFile);
    PackageHelper.destroySdDir(newCid);
    return null;
  }
  try {
    File sharedLibraryDir=new File(newCachePath,LIB_DIR_NAME);
    sharedLibraryDir.mkdir();
    final int N=nativeFiles.size();
    for (int i=0; i < N; i++) {
      final Pair<ZipEntry,String> entry=nativeFiles.get(i);
      InputStream is=zipFile.getInputStream(entry.first);
      try {
        File destFile=new File(sharedLibraryDir,entry.second);
        if (!FileUtils.copyToFile(is,destFile)) {
          throw new IOException("Couldn't copy native binary " + entry.first.getName() + " to "+ entry.second);
        }
      }
  finally {
        is.close();
      }
    }
  }
 catch (  IOException e) {
    Log.e(TAG,"Couldn't copy native file to container",e);
    PackageHelper.destroySdDir(newCid);
    return null;
  }
  if (localLOGV)   Log.i(TAG,"Copied " + codePath + " to "+ resFile);
  if (!PackageHelper.finalizeSdDir(newCid)) {
    Log.e(TAG,"Failed to finalize " + newCid + " at path "+ newCachePath);
    PackageHelper.destroySdDir(newCid);
  }
  if (localLOGV)   Log.i(TAG,"Finalized container " + newCid);
  if (PackageHelper.isContainerMounted(newCid)) {
    if (localLOGV)     Log.i(TAG,"Unmounting " + newCid + " at path "+ newCachePath);
    Runtime.getRuntime().gc();
    PackageHelper.unMountSdDir(newCid);
  }
 else {
    if (localLOGV)     Log.i(TAG,"Container " + newCid + " not mounted");
  }
  return newCachePath;
}
