{
  String codePath=packageURI.getPath();
  String newCachePath=null;
  final int CREATE_FAILED=1;
  final int COPY_FAILED=2;
  final int FINALIZE_FAILED=3;
  final int PASS=4;
  int errCode=CREATE_FAILED;
  if ((newCachePath=createSdDir(packageURI,newCacheId,key)) != null) {
    if (localLOGV)     Log.i(TAG,"Created container for " + newCacheId + " at path : "+ newCachePath);
    File resFile=new File(newCachePath,resFileName);
    errCode=COPY_FAILED;
    if (FileUtils.copyFile(new File(codePath),resFile)) {
      if (localLOGV)       Log.i(TAG,"Copied " + codePath + " to "+ resFile);
      errCode=FINALIZE_FAILED;
      if (finalizeSdDir(newCacheId)) {
        errCode=PASS;
      }
    }
  }
  String errMsg="";
switch (errCode) {
case CREATE_FAILED:
    errMsg="CREATE_FAILED";
  break;
case COPY_FAILED:
errMsg="COPY_FAILED";
if (localLOGV) Log.i(TAG,"Destroying " + newCacheId + " at path "+ newCachePath+ " after "+ errMsg);
destroySdDir(newCacheId);
break;
case FINALIZE_FAILED:
errMsg="FINALIZE_FAILED";
if (localLOGV) Log.i(TAG,"Destroying " + newCacheId + " at path "+ newCachePath+ " after "+ errMsg);
destroySdDir(newCacheId);
break;
default :
errMsg="PASS";
if (localLOGV) Log.i(TAG,"Unmounting " + newCacheId + " at path "+ newCachePath+ " after "+ errMsg);
unMountSdDir(newCacheId);
break;
}
if (errCode != PASS) {
return null;
}
return newCachePath;
}
