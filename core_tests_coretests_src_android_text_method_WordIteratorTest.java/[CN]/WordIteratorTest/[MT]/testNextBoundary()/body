{
  final String text="abc def-ghi. jkl";
  WordIterator wordIterator=new WordIterator(Locale.ENGLISH);
  wordIterator.setCharSequence(text,0,text.length());
  try {
    wordIterator.nextBoundary(-1);
    fail("nextBoundary with invalid offset should throw IllegalArgumentException.");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    wordIterator.nextBoundary(text.length() + 1);
    fail("nextBoundary with invalid offset should throw IllegalArgumentException.");
  }
 catch (  IllegalArgumentException e) {
  }
  int currentOffset=0;
  currentOffset=wordIterator.nextBoundary(currentOffset);
  assertEquals(text.indexOf('c') + 1,currentOffset);
  currentOffset=wordIterator.nextBoundary(currentOffset);
  assertEquals(text.indexOf('d'),currentOffset);
  currentOffset=wordIterator.nextBoundary(currentOffset);
  assertEquals(text.indexOf('f') + 1,currentOffset);
  currentOffset=wordIterator.nextBoundary(currentOffset);
  assertEquals(text.indexOf('g'),currentOffset);
  currentOffset=wordIterator.nextBoundary(currentOffset);
  assertEquals(text.indexOf('i') + 1,currentOffset);
  currentOffset=wordIterator.nextBoundary(currentOffset);
  assertEquals(text.indexOf('.') + 1,currentOffset);
  currentOffset=wordIterator.nextBoundary(currentOffset);
  assertEquals(text.indexOf('j'),currentOffset);
  currentOffset=wordIterator.nextBoundary(currentOffset);
  assertEquals(text.length(),currentOffset);
  currentOffset=wordIterator.nextBoundary(currentOffset);
  assertEquals(BreakIterator.DONE,currentOffset);
}
