{
{
    final String text="abc def-ghi. jkl";
    WordIterator wordIterator=new WordIterator(Locale.ENGLISH);
    wordIterator.setCharSequence(text,0,text.length());
    try {
      wordIterator.getBeginning(-1);
      fail("getBeginning with invalid offset should throw IllegalArgumentException.");
    }
 catch (    IllegalArgumentException e) {
    }
    try {
      wordIterator.getBeginning(text.length() + 1);
      fail("getBeginning with invalid offset should throw IllegalArgumentException.");
    }
 catch (    IllegalArgumentException e) {
    }
    try {
      wordIterator.getPrevWordBeginningOnTwoWordsBoundary(-1);
      fail("getPrevWordBeginningOnTwoWordsBoundary with invalid offset should throw " + "IllegalArgumentException.");
    }
 catch (    IllegalArgumentException e) {
    }
    try {
      wordIterator.getPrevWordBeginningOnTwoWordsBoundary(text.length() + 1);
      fail("getPrevWordBeginningOnTwoWordsBoundary with invalid offset should throw " + "IllegalArgumentException.");
    }
 catch (    IllegalArgumentException e) {
    }
  }
{
    final String text="abc def-ghi. jkl";
    WordIterator wordIterator=new WordIterator(Locale.ENGLISH);
    wordIterator.setCharSequence(text,0,text.length());
    assertEquals(text.indexOf('a'),wordIterator.getBeginning(text.indexOf('a')));
    assertEquals(text.indexOf('a'),wordIterator.getBeginning(text.indexOf('c')));
    assertEquals(text.indexOf('a'),wordIterator.getBeginning(text.indexOf('c') + 1));
    assertEquals(text.indexOf('d'),wordIterator.getBeginning(text.indexOf('d')));
    assertEquals(text.indexOf('d'),wordIterator.getBeginning(text.indexOf('-')));
    assertEquals(text.indexOf('g'),wordIterator.getBeginning(text.indexOf('g')));
    assertEquals(text.indexOf('g'),wordIterator.getBeginning(text.indexOf('.')));
    assertEquals(BreakIterator.DONE,wordIterator.getBeginning(text.indexOf('.') + 1));
    assertEquals(text.indexOf('j'),wordIterator.getBeginning(text.indexOf('j')));
    assertEquals(text.indexOf('j'),wordIterator.getBeginning(text.indexOf('l') + 1));
    for (int i=0; i < text.length(); i++) {
      assertEquals(wordIterator.getBeginning(i),wordIterator.getPrevWordBeginningOnTwoWordsBoundary(i));
    }
  }
{
    final String text="\u3042\u30A2\u30A3\u30A4";
    WordIterator wordIterator=new WordIterator(Locale.JAPANESE);
    wordIterator.setCharSequence(text,0,text.length());
    assertEquals(text.indexOf('\u3042'),wordIterator.getBeginning(text.indexOf('\u3042')));
    assertEquals(text.indexOf('\u30A2'),wordIterator.getBeginning(text.indexOf('\u30A2')));
    assertEquals(text.indexOf('\u30A2'),wordIterator.getBeginning(text.indexOf('\u30A4')));
    assertEquals(text.indexOf('\u30A2'),wordIterator.getBeginning(text.length()));
    assertEquals(text.indexOf('\u3042'),wordIterator.getPrevWordBeginningOnTwoWordsBoundary(text.indexOf('\u3042')));
    assertEquals(text.indexOf('\u3042'),wordIterator.getPrevWordBeginningOnTwoWordsBoundary(text.indexOf('\u30A2')));
    assertEquals(text.indexOf('\u30A2'),wordIterator.getPrevWordBeginningOnTwoWordsBoundary(text.indexOf('\u30A4')));
    assertEquals(text.indexOf('\u30A2'),wordIterator.getPrevWordBeginningOnTwoWordsBoundary(text.length()));
  }
}
