{
  int type;
  final int innerDepth=parser.getDepth() + 1;
  int depth;
  int[][] stateSpecList=ArrayUtils.newUnpaddedArray(int[].class,20);
  int[] colorList=new int[stateSpecList.length];
  int listSize=0;
  while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && ((depth=parser.getDepth()) >= innerDepth || type != XmlPullParser.END_TAG)) {
    if (type != XmlPullParser.START_TAG) {
      continue;
    }
    if (depth > innerDepth || !parser.getName().equals("item")) {
      continue;
    }
    int alphaRes=0;
    float alpha=1.0f;
    int colorRes=0;
    int color=0xffff0000;
    boolean haveColor=false;
    int i;
    int j=0;
    final int numAttrs=attrs.getAttributeCount();
    int[] stateSpec=new int[numAttrs];
    for (i=0; i < numAttrs; i++) {
      final int stateResId=attrs.getAttributeNameResource(i);
      if (stateResId == 0)       break;
      if (stateResId == com.android.internal.R.attr.alpha) {
        alphaRes=attrs.getAttributeResourceValue(i,0);
        if (alphaRes == 0) {
          alpha=attrs.getAttributeFloatValue(i,1.0f);
        }
      }
 else       if (stateResId == com.android.internal.R.attr.color) {
        colorRes=attrs.getAttributeResourceValue(i,0);
        if (colorRes == 0) {
          color=attrs.getAttributeIntValue(i,color);
          haveColor=true;
        }
      }
 else {
        stateSpec[j++]=attrs.getAttributeBooleanValue(i,false) ? stateResId : -stateResId;
      }
    }
    stateSpec=StateSet.trimStateSet(stateSpec,j);
    if (colorRes != 0) {
      color=r.getColor(colorRes);
    }
 else     if (!haveColor) {
      throw new XmlPullParserException(parser.getPositionDescription() + ": <item> tag requires a 'android:color' attribute.");
    }
    if (alphaRes != 0) {
      alpha=r.getFraction(alphaRes,1,1);
    }
    final int alphaMod=MathUtils.constrain((int)(Color.alpha(color) * alpha),0,255);
    color=(color & 0xFFFFFF) | (alphaMod << 24);
    if (listSize == 0 || stateSpec.length == 0) {
      mDefaultColor=color;
    }
    colorList=GrowingArrayUtils.append(colorList,listSize,color);
    stateSpecList=GrowingArrayUtils.append(stateSpecList,listSize,stateSpec);
    listSize++;
  }
  mColors=new int[listSize];
  mStateSpecs=new int[listSize][];
  System.arraycopy(colorList,0,mColors,0,listSize);
  System.arraycopy(stateSpecList,0,mStateSpecs,0,listSize);
}
