{
  final int innerDepth=parser.getDepth() + 1;
  int depth;
  int type;
  int changingConfigurations=0;
  int defaultColor=DEFAULT_COLOR;
  boolean hasUnresolvedAttrs=false;
  int[][] stateSpecList=ArrayUtils.newUnpaddedArray(int[].class,20);
  int[][] themeAttrsList=new int[stateSpecList.length][];
  int[] colorList=new int[stateSpecList.length];
  int listSize=0;
  while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && ((depth=parser.getDepth()) >= innerDepth || type != XmlPullParser.END_TAG)) {
    if (type != XmlPullParser.START_TAG || depth > innerDepth || !parser.getName().equals("item")) {
      continue;
    }
    final TypedArray a=Resources.obtainAttributes(r,theme,attrs,R.styleable.ColorStateListItem);
    final int[] themeAttrs=a.extractThemeAttrs();
    final int baseColor=a.getColor(R.styleable.ColorStateListItem_color,0);
    final float alphaMod=a.getFloat(R.styleable.ColorStateListItem_alpha,1.0f);
    changingConfigurations|=a.getChangingConfigurations();
    a.recycle();
    int j=0;
    final int numAttrs=attrs.getAttributeCount();
    int[] stateSpec=new int[numAttrs];
    for (int i=0; i < numAttrs; i++) {
      final int stateResId=attrs.getAttributeNameResource(i);
switch (stateResId) {
case R.attr.color:
case R.attr.alpha:
        break;
default :
      stateSpec[j++]=attrs.getAttributeBooleanValue(i,false) ? stateResId : -stateResId;
  }
}
stateSpec=StateSet.trimStateSet(stateSpec,j);
final int color=modulateColorAlpha(baseColor,alphaMod);
if (listSize == 0 || stateSpec.length == 0) {
  defaultColor=color;
}
if (themeAttrs != null) {
  hasUnresolvedAttrs=true;
}
colorList=GrowingArrayUtils.append(colorList,listSize,color);
themeAttrsList=GrowingArrayUtils.append(themeAttrsList,listSize,themeAttrs);
stateSpecList=GrowingArrayUtils.append(stateSpecList,listSize,stateSpec);
listSize++;
}
mChangingConfigurations=changingConfigurations;
mDefaultColor=defaultColor;
if (hasUnresolvedAttrs) {
mThemeAttrs=new int[listSize][];
System.arraycopy(themeAttrsList,0,mThemeAttrs,0,listSize);
}
 else {
mThemeAttrs=null;
}
mColors=new int[listSize];
mStateSpecs=new int[listSize][];
System.arraycopy(colorList,0,mColors,0,listSize);
System.arraycopy(stateSpecList,0,mStateSpecs,0,listSize);
onColorsChanged();
}
