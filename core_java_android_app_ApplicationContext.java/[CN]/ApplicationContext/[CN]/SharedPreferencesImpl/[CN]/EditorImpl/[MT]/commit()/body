{
  boolean returnValue;
  boolean hasListeners;
  List<String> keysModified=null;
  List<OnSharedPreferenceChangeListener> listeners=null;
synchronized (SharedPreferencesImpl.this) {
    hasListeners=mListeners.size() > 0;
    if (hasListeners) {
      keysModified=new ArrayList<String>();
      listeners=new ArrayList<OnSharedPreferenceChangeListener>(mListeners);
    }
synchronized (this) {
      if (mClear) {
        mMap.clear();
        mClear=false;
      }
      Iterator<Entry<String,Object>> it=mModified.entrySet().iterator();
      while (it.hasNext()) {
        Map.Entry<String,Object> e=it.next();
        String k=e.getKey();
        Object v=e.getValue();
        if (v == this) {
          mMap.remove(k);
        }
 else {
          mMap.put(k,v);
        }
        if (hasListeners) {
          keysModified.add(k);
        }
      }
      mModified.clear();
    }
    returnValue=writeFileLocked();
  }
  if (hasListeners) {
    for (int i=keysModified.size() - 1; i >= 0; i--) {
      final String key=keysModified.get(i);
      final int listenersSize=listeners.size();
      for (int j=0; j < listenersSize; j++) {
        listeners.get(j).onSharedPreferenceChanged(SharedPreferencesImpl.this,key);
      }
    }
  }
  return returnValue;
}
