{
  this(recyclerView.getAdapter(),new RuntimeItemFinder(recyclerView),mode);
  if (mode == MODE_MULTIPLE) {
    mBandManager=new BandController(mHelper,new RuntimeBandEnvironment(recyclerView));
  }
  GestureDetector.SimpleOnGestureListener listener=new GestureDetector.SimpleOnGestureListener(){
    @Override public boolean onSingleTapUp(    MotionEvent e){
      return MultiSelectManager.this.onSingleTapUp(new MotionInputEvent(e,recyclerView));
    }
    @Override public void onLongPress(    MotionEvent e){
      MultiSelectManager.this.onLongPress(new MotionInputEvent(e,recyclerView));
    }
  }
;
  CompositeOnGestureListener compositeListener=new CompositeOnGestureListener(Lists.<OnGestureListener>newArrayList(listener,gestureDelegate),Lists.<OnDoubleTapListener>newArrayList(listener,gestureDelegate));
  final GestureDetector detector=new GestureDetector(recyclerView.getContext(),compositeListener);
  detector.setOnDoubleTapListener(compositeListener);
  recyclerView.addOnItemTouchListener(new RecyclerView.OnItemTouchListener(){
    @Override public boolean onInterceptTouchEvent(    RecyclerView rv,    MotionEvent e){
      detector.onTouchEvent(e);
      if (mBandManager == null) {
        return false;
      }
      if (mBandManager.shouldStart(e)) {
        mBandManager.startBandSelect(new Point((int)e.getX(),(int)e.getY()));
      }
 else       if (mBandManager.isActive() && Events.isMouseEvent(e) && Events.isActionUp(e)) {
        mBandManager.handleInputEvent(new MotionInputEvent(e,recyclerView));
      }
      return mBandManager.isActive();
    }
    @Override public void onTouchEvent(    RecyclerView rv,    MotionEvent e){
      mBandManager.handleInputEvent(new MotionInputEvent(e,recyclerView));
    }
    @Override public void onRequestDisallowInterceptTouchEvent(    boolean disallowIntercept){
    }
  }
);
}
