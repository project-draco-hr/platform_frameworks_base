{
  Account[] accounts=mAccountManager.getAccounts();
  SyncAdapterType[] syncAdapters=ContentResolver.getSyncAdapterTypesAsUser(mContext.getUserId());
  HashMap<String,List<String>> accountTypeToAuthorities=new HashMap<String,List<String>>();
  for (  SyncAdapterType syncAdapter : syncAdapters) {
    if (!syncAdapter.isUserVisible()) {
      continue;
    }
    if (!accountTypeToAuthorities.containsKey(syncAdapter.accountType)) {
      accountTypeToAuthorities.put(syncAdapter.accountType,new ArrayList<String>());
    }
    accountTypeToAuthorities.get(syncAdapter.accountType).add(syncAdapter.authority);
  }
  JSONObject backupJSON=new JSONObject();
  backupJSON.put(KEY_VERSION,JSON_FORMAT_VERSION);
  backupJSON.put(KEY_MASTER_SYNC_ENABLED,ContentResolver.getMasterSyncAutomatically());
  JSONArray accountJSONArray=new JSONArray();
  for (  Account account : accounts) {
    List<String> authorities=accountTypeToAuthorities.get(account.type);
    if (authorities == null || authorities.isEmpty()) {
      continue;
    }
    JSONObject accountJSON=new JSONObject();
    accountJSON.put(KEY_ACCOUNT_NAME,account.name);
    accountJSON.put(KEY_ACCOUNT_TYPE,account.type);
    JSONArray authoritiesJSONArray=new JSONArray();
    for (    String authority : authorities) {
      int syncState=ContentResolver.getIsSyncable(account,authority);
      boolean syncEnabled=ContentResolver.getSyncAutomatically(account,authority);
      JSONObject authorityJSON=new JSONObject();
      authorityJSON.put(KEY_AUTHORITY_NAME,authority);
      authorityJSON.put(KEY_AUTHORITY_SYNC_STATE,syncState);
      authorityJSON.put(KEY_AUTHORITY_SYNC_ENABLED,syncEnabled);
      authoritiesJSONArray.put(authorityJSON);
    }
    accountJSON.put(KEY_ACCOUNT_AUTHORITIES,authoritiesJSONArray);
    accountJSONArray.put(accountJSON);
  }
  backupJSON.put(KEY_ACCOUNTS,accountJSONArray);
  return backupJSON;
}
