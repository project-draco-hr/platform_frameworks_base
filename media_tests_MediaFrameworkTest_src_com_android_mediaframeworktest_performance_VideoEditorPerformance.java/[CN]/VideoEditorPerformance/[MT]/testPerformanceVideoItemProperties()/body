{
  final String videoItemFileName1=INPUT_FILE_PATH + "H264_BP_1080x720_30fps_800kbps_1_17.mp4";
  final int videoItemStartTime1=0;
  final int videoItemEndTime1=10100;
  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;
  final int aspectRatio=MediaProperties.ASPECT_RATIO_3_2;
  final int fileType=MediaProperties.FILE_MP4;
  final int videoCodecType=MediaProperties.VCODEC_H264BP;
  final int duration=77366;
  final int videoBitrate=3169971;
  final int fps=30;
  final int videoProfile=MediaProperties.H264_PROFILE_0_LEVEL_1_3;
  final int width=1080;
  final int height=MediaProperties.HEIGHT_720;
  float timeTaken=0.0f;
  final String[] loggingInfo=new String[1];
  final MediaVideoItem mediaVideoItem=new MediaVideoItem(mVideoEditor,"m0",videoItemFileName1,renderingMode);
  mediaVideoItem.setExtractBoundaries(videoItemStartTime1,videoItemEndTime1);
  long beginTime=SystemClock.uptimeMillis();
  for (int i=0; i < (NUM_OF_ITERATIONS * 10); i++) {
    try {
      assertEquals("Aspect Ratio Mismatch",aspectRatio,mediaVideoItem.getAspectRatio());
      assertEquals("File Type Mismatch",fileType,mediaVideoItem.getFileType());
      assertEquals("VideoCodec Mismatch",videoCodecType,mediaVideoItem.getVideoType());
      assertEquals("duration Mismatch",duration,mediaVideoItem.getDuration());
      assertEquals("Video Profile ",videoProfile,mediaVideoItem.getVideoProfile());
      assertEquals("Video height ",height,mediaVideoItem.getHeight());
      assertEquals("Video width ",width,mediaVideoItem.getWidth());
    }
 catch (    Exception e1) {
      assertTrue("Can not create Video Item with file name = " + e1.toString(),false);
    }
  }
  timeTaken=calculateTimeTaken(beginTime,(NUM_OF_ITERATIONS * 10));
  loggingInfo[0]="Time taken to get Media Properties\t" + timeTaken;
  writeTimingInfo("testPerformanceVideoItemProperties:",loggingInfo);
}
