{
  final String videoItemFileName1=INPUT_FILE_PATH + "H264_BP_1080x720_30fps_800kbps_1_17.mp4";
  final String videoItemFileName2=INPUT_FILE_PATH + "MPEG4_SP_640x480_15fps_512kbps_AACLC_48khz_132kbps_s_0_26.mp4";
  final int videoStartTime1=0;
  final int videoEndTime1=10000;
  final int videoStartTime2=0;
  final int videoEndTime2=10000;
  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;
  final int transitionDuration=5000;
  final int transitionBehavior=Transition.BEHAVIOR_MIDDLE_FAST;
  final int effectItemStartTime=5000;
  final int effectItemDurationTime=5000;
  final int effectType=EffectColor.TYPE_COLOR;
  final int effectColorType=EffectColor.GREEN;
  long averageDuration=0;
  final String[] loggingInfo=new String[1];
  final MediaVideoItem mediaVideoItem1=new MediaVideoItem(mVideoEditor,"mediaItem1",videoItemFileName1,renderingMode);
  mediaVideoItem1.setExtractBoundaries(videoStartTime1,videoEndTime1);
  mVideoEditor.addMediaItem(mediaVideoItem1);
  final MediaVideoItem mediaVideoItem2=new MediaVideoItem(mVideoEditor,"mediaItem2",videoItemFileName2,renderingMode);
  mediaVideoItem2.setExtractBoundaries(videoStartTime2,videoEndTime2);
  mVideoEditor.addMediaItem(mediaVideoItem2);
  final TransitionCrossfade transitionCrossFade=new TransitionCrossfade("transitionCrossFade",mediaVideoItem1,mediaVideoItem2,transitionDuration,transitionBehavior);
  mVideoEditor.addTransition(transitionCrossFade);
  final EffectColor effectColor=new EffectColor(mediaVideoItem1,"effect",effectItemStartTime,effectItemDurationTime,effectType,effectColorType);
  mediaVideoItem1.addEffect(effectColor);
  for (int i=0; i < NUM_OF_ITERATIONS; i++) {
    final long duration1=SystemClock.uptimeMillis();
    mVideoEditor.generatePreview(new MediaProcessingProgressListener(){
      public void onProgress(      Object item,      int action,      int progress){
      }
    }
);
    final long duration2=SystemClock.uptimeMillis();
    mVideoEditor.removeTransition(transitionCrossFade.getId());
    mVideoEditor.addTransition(transitionCrossFade);
    averageDuration+=(duration2 - duration1);
  }
  SystemClock.uptimeMillis();
  final long durationToAddObjects=(averageDuration);
  final float timeTaken=(float)durationToAddObjects * 1.0f / (float)NUM_OF_ITERATIONS;
  loggingInfo[0]="Time taken to testPerformanceEffectOverlappingTransition\t" + timeTaken;
  writeTimingInfo("testPerformanceEffectOverlappingTransition:",loggingInfo);
}
