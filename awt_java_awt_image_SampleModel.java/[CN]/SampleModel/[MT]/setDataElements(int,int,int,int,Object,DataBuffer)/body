{
  int numDataElements=getNumDataElements();
  int idx=0;
switch (getTransferType()) {
case DataBuffer.TYPE_BYTE:
    byte bbuf[]=new byte[numDataElements];
  for (int i=y; i < y + h; i++) {
    for (int j=x; j < x + w; j++) {
      for (int n=0; n < numDataElements; n++) {
        bbuf[n]=((byte[])obj)[idx++];
      }
      setDataElements(j,i,bbuf,data);
    }
  }
break;
case DataBuffer.TYPE_SHORT:
case DataBuffer.TYPE_USHORT:
short sbuf[]=new short[numDataElements];
for (int i=y; i < y + h; i++) {
for (int j=x; j < x + w; j++) {
for (int n=0; n < numDataElements; n++) {
  sbuf[n]=((short[])obj)[idx++];
}
setDataElements(j,i,sbuf,data);
}
}
break;
case DataBuffer.TYPE_INT:
int ibuf[]=new int[numDataElements];
for (int i=y; i < y + h; i++) {
for (int j=x; j < x + w; j++) {
for (int n=0; n < numDataElements; n++) {
ibuf[n]=((int[])obj)[idx++];
}
setDataElements(j,i,ibuf,data);
}
}
break;
case DataBuffer.TYPE_FLOAT:
float fbuf[]=new float[numDataElements];
for (int i=y; i < y + h; i++) {
for (int j=x; j < x + w; j++) {
for (int n=0; n < numDataElements; n++) {
fbuf[n]=((float[])obj)[idx++];
}
setDataElements(j,i,fbuf,data);
}
}
break;
case DataBuffer.TYPE_DOUBLE:
double dbuf[]=new double[numDataElements];
for (int i=y; i < y + h; i++) {
for (int j=x; j < x + w; j++) {
for (int n=0; n < numDataElements; n++) {
dbuf[n]=((double[])obj)[idx++];
}
setDataElements(j,i,dbuf,data);
}
}
break;
}
}
