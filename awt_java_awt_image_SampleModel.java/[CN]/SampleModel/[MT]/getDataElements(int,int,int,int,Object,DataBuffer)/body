{
  int numDataElements=getNumDataElements();
  int idx=0;
switch (getTransferType()) {
case DataBuffer.TYPE_BYTE:
    byte bdata[];
  byte bbuf[]=null;
if (obj == null) {
  bdata=new byte[numDataElements * w * h];
}
 else {
  bdata=(byte[])obj;
}
for (int i=y; i < y + h; i++) {
for (int j=x; j < x + w; j++) {
  bbuf=(byte[])getDataElements(j,i,bbuf,data);
  for (int n=0; n < numDataElements; n++) {
    bdata[idx++]=bbuf[n];
  }
}
}
obj=bdata;
break;
case DataBuffer.TYPE_SHORT:
case DataBuffer.TYPE_USHORT:
short sdata[];
short sbuf[]=null;
if (obj == null) {
sdata=new short[numDataElements * w * h];
}
 else {
sdata=(short[])obj;
}
for (int i=y; i < y + h; i++) {
for (int j=x; j < x + w; j++) {
sbuf=(short[])getDataElements(j,i,sbuf,data);
for (int n=0; n < numDataElements; n++) {
sdata[idx++]=sbuf[n];
}
}
}
obj=sdata;
break;
case DataBuffer.TYPE_INT:
int idata[];
int ibuf[]=null;
if (obj == null) {
idata=new int[numDataElements * w * h];
}
 else {
idata=(int[])obj;
}
for (int i=y; i < y + h; i++) {
for (int j=x; j < x + w; j++) {
ibuf=(int[])getDataElements(j,i,ibuf,data);
for (int n=0; n < numDataElements; n++) {
idata[idx++]=ibuf[n];
}
}
}
obj=idata;
break;
case DataBuffer.TYPE_FLOAT:
float fdata[];
float fbuf[]=null;
if (obj == null) {
fdata=new float[numDataElements * w * h];
}
 else {
fdata=(float[])obj;
}
for (int i=y; i < y + h; i++) {
for (int j=x; j < x + w; j++) {
fbuf=(float[])getDataElements(j,i,fbuf,data);
for (int n=0; n < numDataElements; n++) {
fdata[idx++]=fbuf[n];
}
}
}
obj=fdata;
break;
case DataBuffer.TYPE_DOUBLE:
double ddata[];
double dbuf[]=null;
if (obj == null) {
ddata=new double[numDataElements * w * h];
}
 else {
ddata=(double[])obj;
}
for (int i=y; i < y + h; i++) {
for (int j=x; j < x + w; j++) {
dbuf=(double[])getDataElements(j,i,dbuf,data);
for (int n=0; n < numDataElements; n++) {
ddata[idx++]=dbuf[n];
}
}
}
obj=ddata;
break;
}
return obj;
}
