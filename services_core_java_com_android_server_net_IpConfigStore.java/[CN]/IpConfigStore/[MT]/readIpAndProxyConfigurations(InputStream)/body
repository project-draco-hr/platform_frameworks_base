{
  SparseArray<IpConfiguration> networks=new SparseArray<IpConfiguration>();
  DataInputStream in=null;
  try {
    in=new DataInputStream(inputStream);
    int version=in.readInt();
    if (version != 2 && version != 1) {
      loge("Bad version on IP configuration file, ignore read");
      return null;
    }
    while (true) {
      int id=-1;
      IpAssignment ipAssignment=IpAssignment.DHCP;
      ProxySettings proxySettings=ProxySettings.NONE;
      StaticIpConfiguration staticIpConfiguration=new StaticIpConfiguration();
      String proxyHost=null;
      String pacFileUrl=null;
      int proxyPort=-1;
      String exclusionList=null;
      String key;
      do {
        key=in.readUTF();
        try {
          if (key.equals(ID_KEY)) {
            id=in.readInt();
          }
 else           if (key.equals(IP_ASSIGNMENT_KEY)) {
            ipAssignment=IpAssignment.valueOf(in.readUTF());
          }
 else           if (key.equals(LINK_ADDRESS_KEY)) {
            LinkAddress linkAddr=new LinkAddress(NetworkUtils.numericToInetAddress(in.readUTF()),in.readInt());
            if (linkAddr.getAddress() instanceof Inet4Address && staticIpConfiguration.ipAddress == null) {
              staticIpConfiguration.ipAddress=linkAddr;
            }
 else {
              loge("Non-IPv4 or duplicate address: " + linkAddr);
            }
          }
 else           if (key.equals(GATEWAY_KEY)) {
            LinkAddress dest=null;
            InetAddress gateway=null;
            if (version == 1) {
              gateway=NetworkUtils.numericToInetAddress(in.readUTF());
              if (staticIpConfiguration.gateway == null) {
                staticIpConfiguration.gateway=gateway;
              }
 else {
                loge("Duplicate gateway: " + gateway.getHostAddress());
              }
            }
 else {
              if (in.readInt() == 1) {
                dest=new LinkAddress(NetworkUtils.numericToInetAddress(in.readUTF()),in.readInt());
              }
              if (in.readInt() == 1) {
                gateway=NetworkUtils.numericToInetAddress(in.readUTF());
              }
              RouteInfo route=new RouteInfo(dest,gateway);
              if (route.isIPv4Default() && staticIpConfiguration.gateway == null) {
                staticIpConfiguration.gateway=gateway;
              }
 else {
                loge("Non-IPv4 default or duplicate route: " + route);
              }
            }
          }
 else           if (key.equals(DNS_KEY)) {
            staticIpConfiguration.dnsServers.add(NetworkUtils.numericToInetAddress(in.readUTF()));
          }
 else           if (key.equals(PROXY_SETTINGS_KEY)) {
            proxySettings=ProxySettings.valueOf(in.readUTF());
          }
 else           if (key.equals(PROXY_HOST_KEY)) {
            proxyHost=in.readUTF();
          }
 else           if (key.equals(PROXY_PORT_KEY)) {
            proxyPort=in.readInt();
          }
 else           if (key.equals(PROXY_PAC_FILE)) {
            pacFileUrl=in.readUTF();
          }
 else           if (key.equals(EXCLUSION_LIST_KEY)) {
            exclusionList=in.readUTF();
          }
 else           if (key.equals(EOS)) {
            break;
          }
 else {
            loge("Ignore unknown key " + key + "while reading");
          }
        }
 catch (        IllegalArgumentException e) {
          loge("Ignore invalid address while reading" + e);
        }
      }
 while (true);
      if (id != -1) {
        IpConfiguration config=new IpConfiguration();
        networks.put(id,config);
switch (ipAssignment) {
case STATIC:
          config.staticIpConfiguration=staticIpConfiguration;
        config.ipAssignment=ipAssignment;
      break;
case DHCP:
    config.ipAssignment=ipAssignment;
  break;
case UNASSIGNED:
loge("BUG: Found UNASSIGNED IP on file, use DHCP");
config.ipAssignment=IpAssignment.DHCP;
break;
default :
loge("Ignore invalid ip assignment while reading.");
config.ipAssignment=IpAssignment.UNASSIGNED;
break;
}
switch (proxySettings) {
case STATIC:
ProxyInfo proxyInfo=new ProxyInfo(proxyHost,proxyPort,exclusionList);
config.proxySettings=proxySettings;
config.httpProxy=proxyInfo;
break;
case PAC:
ProxyInfo proxyPacProperties=new ProxyInfo(pacFileUrl);
config.proxySettings=proxySettings;
config.httpProxy=proxyPacProperties;
break;
case NONE:
config.proxySettings=proxySettings;
break;
case UNASSIGNED:
loge("BUG: Found UNASSIGNED proxy on file, use NONE");
config.proxySettings=ProxySettings.NONE;
break;
default :
loge("Ignore invalid proxy settings while reading");
config.proxySettings=ProxySettings.UNASSIGNED;
break;
}
}
 else {
if (DBG) log("Missing id while parsing configuration");
}
}
}
 catch (EOFException ignore) {
}
catch (IOException e) {
loge("Error parsing configuration: " + e);
}
 finally {
if (in != null) {
try {
in.close();
}
 catch (Exception e) {
}
}
}
return networks;
}
