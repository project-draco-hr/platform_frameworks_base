{
switch (keyCode) {
case KeyEvent.KEYCODE_VOLUME_UP:
case KeyEvent.KEYCODE_VOLUME_DOWN:
{
      AudioManager audioManager=(AudioManager)getContext().getSystemService(Context.AUDIO_SERVICE);
      if (audioManager != null) {
        audioManager.adjustSuggestedStreamVolume(AudioManager.ADJUST_SAME,mVolumeControlStreamType,AudioManager.FLAG_PLAY_SOUND);
        mVolumeKeyUpTime=SystemClock.uptimeMillis();
      }
      return true;
    }
case KeyEvent.KEYCODE_MENU:
{
    onKeyUpPanel(featureId < 0 ? FEATURE_OPTIONS_PANEL : featureId,event);
    return true;
  }
case KeyEvent.KEYCODE_HEADSETHOOK:
case KeyEvent.KEYCODE_PLAYPAUSE:
case KeyEvent.KEYCODE_STOP:
case KeyEvent.KEYCODE_NEXTSONG:
case KeyEvent.KEYCODE_PREVIOUSSONG:
case KeyEvent.KEYCODE_REWIND:
case KeyEvent.KEYCODE_FORWARD:
{
  Intent intent=new Intent(Intent.ACTION_MEDIA_BUTTON,null);
  intent.putExtra(Intent.EXTRA_KEY_EVENT,event);
  getContext().sendOrderedBroadcast(intent,null);
  return true;
}
case KeyEvent.KEYCODE_CAMERA:
{
if (getKeyguardManager().inKeyguardRestrictedInputMode()) {
  break;
}
if (event.getRepeatCount() > 0) break;
mKeycodeMenuTimeoutHandler.removeMessages(MSG_CAMERA_LONG_PRESS);
if (!mKeycodeCameraTimeoutActive) break;
mKeycodeCameraTimeoutActive=false;
return true;
}
case KeyEvent.KEYCODE_CALL:
{
if (getKeyguardManager().inKeyguardRestrictedInputMode()) {
break;
}
if (event.getRepeatCount() > 0) break;
mKeycodeMenuTimeoutHandler.removeMessages(MSG_CALL_LONG_PRESS);
if (!mKeycodeCallTimeoutActive) break;
mKeycodeCallTimeoutActive=false;
startCallActivity();
return true;
}
case KeyEvent.KEYCODE_SEARCH:
{
if (getKeyguardManager().inKeyguardRestrictedInputMode() || !mSearchKeyDownReceived) {
break;
}
mSearchKeyDownReceived=false;
launchDefaultSearch();
return true;
}
}
return false;
}
