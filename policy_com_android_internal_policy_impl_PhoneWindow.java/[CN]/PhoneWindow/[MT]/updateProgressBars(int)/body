{
  ProgressBar circularProgressBar=getCircularProgressBar(true);
  ProgressBar horizontalProgressBar=getHorizontalProgressBar(true);
  final int features=getLocalFeatures();
  if (value == PROGRESS_VISIBILITY_ON) {
    if ((features & (1 << FEATURE_PROGRESS)) != 0) {
      int level=horizontalProgressBar.getProgress();
      int visibility=(horizontalProgressBar.isIndeterminate() || level < 10000) ? View.VISIBLE : View.INVISIBLE;
      horizontalProgressBar.setVisibility(visibility);
    }
    if ((features & (1 << FEATURE_INDETERMINATE_PROGRESS)) != 0) {
      circularProgressBar.setVisibility(View.VISIBLE);
    }
  }
 else   if (value == PROGRESS_VISIBILITY_OFF) {
    if ((features & (1 << FEATURE_PROGRESS)) != 0) {
      horizontalProgressBar.setVisibility(View.GONE);
    }
    if ((features & (1 << FEATURE_INDETERMINATE_PROGRESS)) != 0) {
      circularProgressBar.setVisibility(View.GONE);
    }
  }
 else   if (value == PROGRESS_INDETERMINATE_ON) {
    horizontalProgressBar.setIndeterminate(true);
  }
 else   if (value == PROGRESS_INDETERMINATE_OFF) {
    horizontalProgressBar.setIndeterminate(false);
  }
 else   if (PROGRESS_START <= value && value <= PROGRESS_END) {
    horizontalProgressBar.setProgress(value - PROGRESS_START);
    if (value < PROGRESS_END) {
      showProgressBars(horizontalProgressBar,circularProgressBar);
    }
 else {
      hideProgressBars(horizontalProgressBar,circularProgressBar);
    }
  }
 else   if (PROGRESS_SECONDARY_START <= value && value <= PROGRESS_SECONDARY_END) {
    horizontalProgressBar.setSecondaryProgress(value - PROGRESS_SECONDARY_START);
    showProgressBars(horizontalProgressBar,circularProgressBar);
  }
}
