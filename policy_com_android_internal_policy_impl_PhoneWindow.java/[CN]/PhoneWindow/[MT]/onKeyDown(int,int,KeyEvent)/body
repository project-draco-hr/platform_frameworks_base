{
switch (keyCode) {
case KeyEvent.KEYCODE_VOLUME_UP:
case KeyEvent.KEYCODE_VOLUME_DOWN:
{
      AudioManager audioManager=(AudioManager)getContext().getSystemService(Context.AUDIO_SERVICE);
      if (audioManager != null) {
        audioManager.adjustSuggestedStreamVolume(keyCode == KeyEvent.KEYCODE_VOLUME_UP ? AudioManager.ADJUST_RAISE : AudioManager.ADJUST_LOWER,mVolumeControlStreamType,AudioManager.FLAG_SHOW_UI | AudioManager.FLAG_VIBRATE);
      }
      return true;
    }
case KeyEvent.KEYCODE_HEADSETHOOK:
case KeyEvent.KEYCODE_PLAYPAUSE:
case KeyEvent.KEYCODE_STOP:
case KeyEvent.KEYCODE_NEXTSONG:
case KeyEvent.KEYCODE_PREVIOUSSONG:
case KeyEvent.KEYCODE_REWIND:
case KeyEvent.KEYCODE_FORWARD:
{
    Intent intent=new Intent(Intent.ACTION_MEDIA_BUTTON,null);
    intent.putExtra(Intent.EXTRA_KEY_EVENT,event);
    getContext().sendOrderedBroadcast(intent,null);
    return true;
  }
case KeyEvent.KEYCODE_CAMERA:
{
  if (getKeyguardManager().inKeyguardRestrictedInputMode()) {
    break;
  }
  if (event.getRepeatCount() > 0)   break;
  mKeycodeCameraTimeoutActive=true;
  mKeycodeCameraTimeoutHandler.removeMessages(0);
  Message message=mKeycodeCameraTimeoutHandler.obtainMessage(0);
  message.obj=event;
  mKeycodeCameraTimeoutHandler.sendMessageDelayed(message,ViewConfiguration.getLongPressTimeout());
  return true;
}
case KeyEvent.KEYCODE_MENU:
{
if (event.getRepeatCount() > 0) break;
onKeyDownPanel((featureId < 0) ? FEATURE_OPTIONS_PANEL : featureId,event);
return true;
}
case KeyEvent.KEYCODE_BACK:
{
if (event.getRepeatCount() > 0) break;
if (featureId < 0) break;
if (featureId == FEATURE_OPTIONS_PANEL) {
PanelFeatureState st=getPanelState(featureId,false);
if (st != null && st.isInExpandedMode) {
  reopenMenu(true);
  return true;
}
}
closePanel(featureId);
return true;
}
case KeyEvent.KEYCODE_CALL:
{
if (getKeyguardManager().inKeyguardRestrictedInputMode()) {
break;
}
if (event.getRepeatCount() > 0) break;
mKeycodeCallTimeoutActive=true;
mKeycodeCallTimeoutHandler.removeMessages(0);
mKeycodeCallTimeoutHandler.sendMessageDelayed(mKeycodeCallTimeoutHandler.obtainMessage(0),ViewConfiguration.getLongPressTimeout());
return true;
}
case KeyEvent.KEYCODE_SEARCH:
{
if (event.getRepeatCount() == 0) {
mSearchKeyDownReceived=true;
}
break;
}
}
return false;
}
