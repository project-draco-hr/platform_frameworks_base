{
  Log.d(TAG,"Tethering starting");
  mContext=context;
  mLooper=looper;
  IBinder b=ServiceManager.getService(Context.NETWORKMANAGEMENT_SERVICE);
  INetworkManagementService service=INetworkManagementService.Stub.asInterface(b);
  try {
    service.registerObserver(this);
  }
 catch (  RemoteException e) {
    Log.e(TAG,"Error registering observer :" + e);
  }
  mIfaces=new HashMap<String,TetherInterfaceSM>();
  mTetherMasterSM=new TetherMasterSM("TetherMaster",mLooper);
  mTetherMasterSM.start();
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_BATTERY_CHANGED);
  filter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);
  filter.addAction(Intent.ACTION_BOOT_COMPLETED);
  filter.addAction(Intent.ACTION_MEDIA_SHARED);
  filter.addAction(Intent.ACTION_MEDIA_UNSHARED);
  mUsbMassStorageOff=!Environment.MEDIA_SHARED.equals(Environment.getExternalStorageState());
  mStateReceiver=new StateReceiver();
  mContext.registerReceiver(mStateReceiver,filter);
  mDhcpRange=context.getResources().getStringArray(com.android.internal.R.array.config_tether_dhcp_range);
  if (mDhcpRange.length == 0) {
    mDhcpRange=new String[2];
    mDhcpRange[0]=DHCP_DEFAULT_RANGE_START;
    mDhcpRange[1]=DHCP_DEFAULT_RANGE_STOP;
  }
 else   if (mDhcpRange.length == 1) {
    String[] tmp=new String[2];
    tmp[0]=mDhcpRange[0];
    tmp[1]=new String("");
    mDhcpRange=tmp;
  }
  mDunRequired=context.getResources().getBoolean(com.android.internal.R.bool.config_tether_dun_required);
  mTetherableUsbRegexs=context.getResources().getStringArray(com.android.internal.R.array.config_tether_usb_regexs);
  mTetherableWifiRegexs=context.getResources().getStringArray(com.android.internal.R.array.config_tether_wifi_regexs);
  mUpstreamIfaceRegexs=context.getResources().getStringArray(com.android.internal.R.array.config_tether_upstream_regexs);
  mDnsServers=new String[2];
  mDnsServers[0]=DNS_DEFAULT_SERVER1;
  mDnsServers[1]=DNS_DEFAULT_SERVER2;
}
