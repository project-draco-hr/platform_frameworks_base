{
  Log.d(TAG,"TetheredState.processMessage what=" + message.what);
  boolean retValue=true;
  boolean error=false;
switch (message.what) {
case CMD_TETHER_UNREQUESTED:
case CMD_INTERFACE_DOWN:
    IBinder b=ServiceManager.getService(Context.NETWORKMANAGEMENT_SERVICE);
  INetworkManagementService service=INetworkManagementService.Stub.asInterface(b);
try {
  service.disableNat(mIfaceName,mUpstreamIfaceName);
}
 catch (Exception e) {
  transitionTo(mDisableNatErrorState);
  break;
}
try {
service.untetherInterface(mIfaceName);
}
 catch (Exception e) {
transitionTo(mUntetherInterfaceErrorState);
break;
}
Message m=mTetherMasterSM.obtainMessage(TetherMasterSM.CMD_TETHER_MODE_UNREQUESTED);
m.obj=TetherInterfaceSM.this;
mTetherMasterSM.sendMessage(m);
if (message.what == CMD_TETHER_UNREQUESTED) {
if (mUsb) {
if (!Tethering.this.configureUsb(false)) {
transitionTo(mUsbConfigurationErrorState);
}
 else {
transitionTo(mInitialState);
}
}
 else {
transitionTo(mInitialState);
}
}
 else if (message.what == CMD_INTERFACE_DOWN) {
transitionTo(mUnavailableState);
}
Log.d(TAG,"Untethered " + mIfaceName);
sendTetherStateChangedBroadcast();
break;
case CMD_CELL_DUN_ERROR:
case CMD_IP_FORWARDING_ENABLE_ERROR:
case CMD_IP_FORWARDING_DISABLE_ERROR:
case CMD_START_TETHERING_ERROR:
case CMD_STOP_TETHERING_ERROR:
case CMD_SET_DNS_FORWARDERS_ERROR:
error=true;
case CMD_TETHER_MODE_DEAD:
b=ServiceManager.getService(Context.NETWORKMANAGEMENT_SERVICE);
service=INetworkManagementService.Stub.asInterface(b);
try {
service.disableNat(mIfaceName,mUpstreamIfaceName);
}
 catch (Exception e) {
transitionTo(mDisableNatErrorState);
break;
}
try {
service.untetherInterface(mIfaceName);
}
 catch (Exception e) {
transitionTo(mUntetherInterfaceErrorState);
break;
}
if (error) {
transitionTo(mMasterTetherErrorState);
break;
}
Log.d(TAG,"Tether lost upstream connection " + mIfaceName);
sendTetherStateChangedBroadcast();
if (mUsb) {
if (!Tethering.this.configureUsb(false)) {
transitionTo(mUsbConfigurationErrorState);
break;
}
}
transitionTo(mInitialState);
break;
case CMD_TRANSITION_TO_ERROR:
HierarchicalState s=(HierarchicalState)(message.obj);
transitionTo(s);
break;
default :
retValue=false;
break;
}
return retValue;
}
