{
  Log.d(TAG,"CellDunRequestedState.processMessage what=" + message.what);
  boolean retValue=true;
switch (message.what) {
case CMD_TETHER_MODE_REQUESTED:
    TetherInterfaceSM who=(TetherInterfaceSM)message.obj;
  mNotifyList.add(who);
break;
case CMD_TETHER_MODE_UNREQUESTED:
who=(TetherInterfaceSM)message.obj;
int index=mNotifyList.indexOf(who);
if (index != -1) {
mNotifyList.remove(index);
if (mNotifyList.isEmpty()) {
transitionTo(mCellDunUnRequestedState);
}
}
break;
case CMD_CELL_DUN_ENABLED:
IBinder b=ServiceManager.getService(Context.NETWORKMANAGEMENT_SERVICE);
INetworkManagementService service=INetworkManagementService.Stub.asInterface(b);
try {
service.setIpForwardingEnabled(true);
}
 catch (Exception e) {
transitionTo(mSetIpForwardingEnabledErrorState);
break;
}
try {
service.startTethering(mDhcpRange[0],mDhcpRange[1]);
}
 catch (Exception e) {
transitionTo(mStartTetheringErrorState);
break;
}
try {
service.setDnsForwarders(mDnsServers);
}
 catch (Exception e) {
transitionTo(mSetDnsForwardersErrorState);
break;
}
transitionTo(mTetherModeAliveState);
break;
case CMD_CELL_DUN_DISABLED:
break;
case CMD_CELL_DUN_TIMEOUT:
if (message.arg1 == mSequenceNumber) {
transitionTo(mCellDunErrorState);
}
break;
default :
retValue=false;
break;
}
return retValue;
}
