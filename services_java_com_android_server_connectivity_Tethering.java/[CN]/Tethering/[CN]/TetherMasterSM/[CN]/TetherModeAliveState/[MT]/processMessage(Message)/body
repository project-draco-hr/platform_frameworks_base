{
  Log.d(TAG,"TetherModeAliveState.processMessage what=" + message.what);
  boolean retValue=true;
switch (message.what) {
case CMD_TETHER_MODE_REQUESTED:
    TetherInterfaceSM who=(TetherInterfaceSM)message.obj;
  mNotifyList.add(who);
who.sendMessage(who.obtainMessage(TetherInterfaceSM.CMD_TETHER_MODE_ALIVE));
break;
case CMD_TETHER_MODE_UNREQUESTED:
who=(TetherInterfaceSM)message.obj;
int index=mNotifyList.indexOf(who);
if (index != -1) {
mNotifyList.remove(index);
if (mNotifyList.isEmpty()) {
transitionTo(mCellDunUnRequestedState);
}
}
break;
case CMD_CELL_DUN_DISABLED:
int size=mNotifyList.size();
for (int i=0; i < size; i++) {
TetherInterfaceSM sm=(TetherInterfaceSM)mNotifyList.get(i);
mNotifyList.remove(i);
sm.sendMessage(sm.obtainMessage(TetherInterfaceSM.CMD_TETHER_MODE_DEAD));
}
IBinder b=ServiceManager.getService(Context.NETWORKMANAGEMENT_SERVICE);
INetworkManagementService service=INetworkManagementService.Stub.asInterface(b);
try {
service.stopTethering();
}
 catch (Exception e) {
transitionTo(mStopTetheringErrorState);
break;
}
try {
service.setIpForwardingEnabled(false);
}
 catch (Exception e) {
transitionTo(mSetIpForwardingDisabledErrorState);
break;
}
transitionTo(mInitialState);
break;
case CMD_CELL_DUN_RENEW:
Log.d(TAG,"renewing dun connection - requeuing for another " + CELL_DUN_RENEW_MS + "ms");
b=ServiceManager.getService(Context.CONNECTIVITY_SERVICE);
IConnectivityManager cservice=IConnectivityManager.Stub.asInterface(b);
try {
cservice.startUsingNetworkFeature(ConnectivityManager.TYPE_MOBILE,Phone.FEATURE_ENABLE_DUN,new Binder());
}
 catch (Exception e) {
}
sendMessageDelayed(obtainMessage(CMD_CELL_DUN_RENEW),CELL_DUN_RENEW_MS);
break;
default :
retValue=false;
break;
}
return retValue;
}
