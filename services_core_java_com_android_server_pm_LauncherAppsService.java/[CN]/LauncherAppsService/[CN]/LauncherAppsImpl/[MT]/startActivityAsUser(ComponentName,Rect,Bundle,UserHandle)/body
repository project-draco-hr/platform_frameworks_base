{
  ensureInUserProfiles(user,"Cannot start activity for unrelated profile " + user);
  if (!isUserEnabled(user)) {
    throw new IllegalStateException("Cannot start activity for disabled profile " + user);
  }
  Intent launchIntent=new Intent(Intent.ACTION_MAIN);
  launchIntent.addCategory(Intent.CATEGORY_LAUNCHER);
  prepareIntentForLaunch(launchIntent,sourceBounds);
  launchIntent.setPackage(component.getPackageName());
  long ident=Binder.clearCallingIdentity();
  try {
    IPackageManager pm=AppGlobals.getPackageManager();
    ActivityInfo info=pm.getActivityInfo(component,PackageManager.MATCH_DIRECT_BOOT_AWARE | PackageManager.MATCH_DIRECT_BOOT_UNAWARE,user.getIdentifier());
    if (!info.exported) {
      throw new SecurityException("Cannot launch non-exported components " + component);
    }
    List<ResolveInfo> apps=mPm.queryIntentActivitiesAsUser(launchIntent,PackageManager.MATCH_DIRECT_BOOT_AWARE | PackageManager.MATCH_DIRECT_BOOT_UNAWARE,user.getIdentifier());
    final int size=apps.size();
    for (int i=0; i < size; ++i) {
      ActivityInfo activityInfo=apps.get(i).activityInfo;
      if (activityInfo.packageName.equals(component.getPackageName()) && activityInfo.name.equals(component.getClassName())) {
        launchIntent.setComponent(component);
        mContext.startActivityAsUser(launchIntent,opts,user);
        return;
      }
    }
    throw new SecurityException("Attempt to launch activity without " + " category Intent.CATEGORY_LAUNCHER " + component);
  }
  finally {
    Binder.restoreCallingIdentity(ident);
  }
}
