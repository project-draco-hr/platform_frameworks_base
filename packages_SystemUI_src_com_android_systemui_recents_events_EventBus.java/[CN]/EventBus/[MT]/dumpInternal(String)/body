{
  String innerPrefix=prefix + "  ";
  String innerInnerPrefix=innerPrefix + "  ";
  StringBuilder output=new StringBuilder();
  output.append(prefix);
  output.append("Registered class types:");
  output.append("\n");
  ArrayList<Class<?>> subsciberTypes=new ArrayList<>(mSubscriberTypeMap.keySet());
  Collections.sort(subsciberTypes,new Comparator<Class<?>>(){
    @Override public int compare(    Class<?> o1,    Class<?> o2){
      return o1.getSimpleName().compareTo(o2.getSimpleName());
    }
  }
);
  for (int i=0; i < subsciberTypes.size(); i++) {
    Class<?> clz=subsciberTypes.get(i);
    output.append(innerPrefix);
    output.append(clz.getSimpleName());
    output.append("\n");
  }
  output.append(prefix);
  output.append("Event map:");
  output.append("\n");
  ArrayList<Class<?>> classes=new ArrayList<>(mEventTypeMap.keySet());
  Collections.sort(classes,new Comparator<Class<?>>(){
    @Override public int compare(    Class<?> o1,    Class<?> o2){
      return o1.getSimpleName().compareTo(o2.getSimpleName());
    }
  }
);
  for (int i=0; i < classes.size(); i++) {
    Class<?> clz=classes.get(i);
    output.append(innerPrefix);
    output.append(clz.getSimpleName());
    output.append(" -> ");
    output.append("\n");
    ArrayList<EventHandler> handlers=mEventTypeMap.get(clz);
    for (    EventHandler handler : handlers) {
      Object subscriber=handler.subscriber.getReference();
      if (subscriber != null) {
        String id=Integer.toHexString(System.identityHashCode(subscriber));
        output.append(innerInnerPrefix);
        output.append(subscriber.getClass().getSimpleName());
        output.append(" [0x" + id + ", #"+ handler.priority+ "]");
        output.append("\n");
      }
    }
  }
  return output.toString();
}
