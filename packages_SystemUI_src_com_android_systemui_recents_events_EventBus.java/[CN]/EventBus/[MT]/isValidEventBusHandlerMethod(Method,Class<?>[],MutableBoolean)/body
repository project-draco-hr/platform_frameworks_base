{
  int modifiers=method.getModifiers();
  if (Modifier.isPublic(modifiers) && Modifier.isFinal(modifiers) && method.getReturnType().equals(Void.TYPE)&& parameterTypes.length == 1) {
    if (EventBus.InterprocessEvent.class.isAssignableFrom(parameterTypes[0]) && method.getName().startsWith(INTERPROCESS_METHOD_PREFIX)) {
      isInterprocessEventOut.value=true;
      return true;
    }
 else     if (EventBus.Event.class.isAssignableFrom(parameterTypes[0]) && method.getName().startsWith(METHOD_PREFIX)) {
      isInterprocessEventOut.value=false;
      return true;
    }
 else {
      if (DEBUG_TRACE_ALL) {
        if (!EventBus.Event.class.isAssignableFrom(parameterTypes[0])) {
          logWithPid("  Expected method take an Event-based parameter: " + method.getName());
        }
 else         if (!method.getName().startsWith(INTERPROCESS_METHOD_PREFIX) && !method.getName().startsWith(METHOD_PREFIX)) {
          logWithPid("  Expected method start with method prefix: " + method.getName());
        }
      }
    }
  }
 else {
    if (DEBUG_TRACE_ALL) {
      if (!Modifier.isPublic(modifiers)) {
        logWithPid("  Expected method to be public: " + method.getName());
      }
 else       if (!Modifier.isFinal(modifiers)) {
        logWithPid("  Expected method to be final: " + method.getName());
      }
 else       if (!method.getReturnType().equals(Void.TYPE)) {
        logWithPid("  Expected method to return null: " + method.getName());
      }
    }
  }
  return false;
}
