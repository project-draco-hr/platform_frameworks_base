{
switch (msg.what) {
case MSG_UPDATE_STATE:
    mConnected=(msg.arg1 == 1);
  mConfigured=(msg.arg2 == 1);
if (!mConnected) {
  mUsbDataUnlocked=false;
}
updateUsbNotification();
updateAdbNotification();
if (UsbManager.containsFunction(mCurrentFunctions,UsbManager.USB_FUNCTION_ACCESSORY)) {
updateCurrentAccessory();
}
 else if (!mConnected) {
setEnabledFunctions(null,false);
}
if (mBootCompleted) {
updateUsbStateBroadcastIfNeeded();
updateUsbFunctions();
}
break;
case MSG_UPDATE_HOST_STATE:
mHostConnected=(msg.arg1 == 1);
updateUsbNotification();
break;
case MSG_ENABLE_ADB:
setAdbEnabled(msg.arg1 == 1);
break;
case MSG_SET_CURRENT_FUNCTIONS:
String functions=(String)msg.obj;
setEnabledFunctions(functions,false);
break;
case MSG_UPDATE_USER_RESTRICTIONS:
setEnabledFunctions(mCurrentFunctions,false);
break;
case MSG_SET_USB_DATA_UNLOCKED:
setUsbDataUnlocked(msg.arg1 == 1);
break;
case MSG_SYSTEM_READY:
updateUsbNotification();
updateAdbNotification();
updateUsbStateBroadcastIfNeeded();
updateUsbFunctions();
break;
case MSG_BOOT_COMPLETED:
mBootCompleted=true;
if (mCurrentAccessory != null) {
getCurrentSettings().accessoryAttached(mCurrentAccessory);
}
if (mDebuggingManager != null) {
mDebuggingManager.setAdbEnabled(mAdbEnabled);
}
break;
case MSG_USER_SWITCHED:
{
if (mCurrentUser != msg.arg1) {
final boolean active=UsbManager.containsFunction(mCurrentFunctions,UsbManager.USB_FUNCTION_MTP) || UsbManager.containsFunction(mCurrentFunctions,UsbManager.USB_FUNCTION_PTP);
if (mUsbDataUnlocked && active && mCurrentUser != UserHandle.USER_NULL) {
Slog.v(TAG,"Current user switched to " + mCurrentUser + "; resetting USB host stack for MTP or PTP");
setEnabledFunctions(mCurrentFunctions,true);
}
mCurrentUser=msg.arg1;
}
break;
}
}
}
