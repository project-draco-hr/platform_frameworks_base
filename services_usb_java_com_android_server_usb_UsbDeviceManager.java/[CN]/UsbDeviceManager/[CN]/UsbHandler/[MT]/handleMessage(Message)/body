{
switch (msg.what) {
case MSG_UPDATE_STATE:
    mConnected=(msg.arg1 == 1);
  mConfigured=(msg.arg2 == 1);
updateUsbNotification();
updateAdbNotification();
if (containsFunction(mCurrentFunctions,UsbManager.USB_FUNCTION_ACCESSORY)) {
updateCurrentAccessory();
}
 else if (!mConnected) {
setEnabledFunctions(getDefaultFunctions());
}
if (mBootCompleted) {
updateUsbState();
updateAudioSourceFunction();
updateMidiFunction();
}
break;
case MSG_ENABLE_ADB:
setAdbEnabled(msg.arg1 == 1);
break;
case MSG_SET_CURRENT_FUNCTIONS:
String functions=(String)msg.obj;
setEnabledFunctions(functions);
break;
case MSG_SYSTEM_READY:
setUsbConfig(mCurrentFunctions);
updatePersistentProperty();
updateUsbNotification();
updateAdbNotification();
updateUsbState();
updateAudioSourceFunction();
updateMidiFunction();
break;
case MSG_BOOT_COMPLETED:
mBootCompleted=true;
setUsbConfig(mCurrentFunctions);
if (mCurrentAccessory != null) {
getCurrentSettings().accessoryAttached(mCurrentAccessory);
}
if (mDebuggingManager != null) {
mDebuggingManager.setAdbEnabled(mAdbEnabled);
}
break;
case MSG_USER_SWITCHED:
{
UserManager userManager=(UserManager)mContext.getSystemService(Context.USER_SERVICE);
UserHandle userHandle=new UserHandle(msg.arg1);
if (userManager.hasUserRestriction(UserManager.DISALLOW_USB_FILE_TRANSFER,userHandle)) {
Slog.v(TAG,"Switched to user " + msg.arg1 + " with DISALLOW_USB_FILE_TRANSFER restriction; disabling USB.");
setUsbConfig("none");
mCurrentUser=msg.arg1;
break;
}
final boolean mtpActive=containsFunction(mCurrentFunctions,UsbManager.USB_FUNCTION_MTP) || containsFunction(mCurrentFunctions,UsbManager.USB_FUNCTION_PTP);
if (mtpActive && mCurrentUser != UserHandle.USER_NULL) {
Slog.v(TAG,"Current user switched; resetting USB host stack for MTP");
setUsbConfig("none");
setUsbConfig(mCurrentFunctions);
}
mCurrentUser=msg.arg1;
break;
}
}
}
