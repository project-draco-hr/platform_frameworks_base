{
  isTTypeIntegral=false;
  nColorChannels=pf.getNumComponents();
  float maxValues[]=new float[nColorChannels];
  float minValues[]=new float[nColorChannels];
switch (pf.getColorSpaceType()) {
case ColorSpace.TYPE_XYZ:
    minValues[0]=0;
  minValues[1]=0;
minValues[2]=0;
maxValues[0]=MAX_XYZ;
maxValues[1]=MAX_XYZ;
maxValues[2]=MAX_XYZ;
break;
case ColorSpace.TYPE_Lab:
minValues[0]=0;
minValues[1]=-128;
minValues[2]=-128;
maxValues[0]=100;
maxValues[1]=127;
maxValues[2]=127;
break;
default :
for (int i=0; i < nColorChannels; i++) {
minValues[i]=0;
maxValues[i]=1;
}
}
channelMinValues=minValues;
channelMulipliers=new float[nColorChannels];
invChannelMulipliers=new float[nColorChannels];
for (int i=0; i < nColorChannels; i++) {
channelMulipliers[i]=MAX_SHORT / (maxValues[i] - channelMinValues[i]);
invChannelMulipliers[i]=(maxValues[i] - channelMinValues[i]) / MAX_SHORT;
}
}
