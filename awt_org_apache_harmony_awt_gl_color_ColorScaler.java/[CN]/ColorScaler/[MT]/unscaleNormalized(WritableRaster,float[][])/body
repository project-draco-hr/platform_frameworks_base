{
  int width=r.getWidth();
  int height=r.getHeight();
  float normMultipliers[]=new float[nColorChannels];
  int pos=0;
  if (isTTypeIntegral) {
    for (int i=0; i < nColorChannels; i++) {
      normMultipliers[i]=invChannelMulipliers[i] * MAX_SHORT;
    }
    int sample;
    for (int row=r.getMinX(); row < width; row++) {
      for (int col=r.getMinY(); col < height; col++) {
        for (int chan=0; chan < nColorChannels; chan++) {
          sample=(int)(data[pos][chan] * normMultipliers[chan] + 0.5f);
          r.setSample(row,col,chan,sample);
        }
        pos++;
      }
    }
  }
 else {
    for (int row=r.getMinX(); row < width; row++) {
      for (int col=r.getMinY(); col < height; col++) {
        for (int chan=0; chan < nColorChannels; chan++) {
          r.setSample(row,col,chan,data[pos][chan]);
        }
        pos++;
      }
    }
  }
}
