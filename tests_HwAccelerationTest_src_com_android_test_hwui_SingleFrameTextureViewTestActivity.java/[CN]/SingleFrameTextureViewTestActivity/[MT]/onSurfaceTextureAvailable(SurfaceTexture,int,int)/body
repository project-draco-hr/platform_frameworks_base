{
  Log.d(LOG_TAG,"onSurfaceAvailable");
  mGLThread=new Thread(){
    static final int EGL_CONTEXT_CLIENT_VERSION=0x3098;
    static final int EGL_OPENGL_ES2_BIT=4;
    private EGL10 mEgl;
    private EGLDisplay mEglDisplay;
    private EGLConfig mEglConfig;
    private EGLContext mEglContext;
    private EGLSurface mEglSurface;
    @Override public void run(){
      initGL();
      try {
        Thread.sleep(500);
      }
 catch (      InterruptedException e) {
      }
      for (int i=0; i < 2; i++) {
        if (i == 0) {
          glClearColor(0.0f,0.0f,1.0f,1.0f);
        }
 else {
          glClearColor(0.0f,1.0f,0.0f,1.0f);
        }
        glClear(GL_COLOR_BUFFER_BIT);
        Log.d(LOG_TAG,"eglSwapBuffers");
        if (!mEgl.eglSwapBuffers(mEglDisplay,mEglSurface)) {
          throw new RuntimeException("Cannot swap buffers");
        }
        try {
          Thread.sleep(50);
        }
 catch (        InterruptedException e) {
        }
      }
      try {
        Thread.sleep(500);
      }
 catch (      InterruptedException e) {
      }
      finishGL();
    }
    private void finishGL(){
      mEgl.eglDestroyContext(mEglDisplay,mEglContext);
      mEgl.eglDestroySurface(mEglDisplay,mEglSurface);
    }
    private void initGL(){
      mEgl=(EGL10)EGLContext.getEGL();
      mEglDisplay=mEgl.eglGetDisplay(EGL10.EGL_DEFAULT_DISPLAY);
      if (mEglDisplay == EGL10.EGL_NO_DISPLAY) {
        throw new RuntimeException("eglGetDisplay failed " + GLUtils.getEGLErrorString(mEgl.eglGetError()));
      }
      int[] version=new int[2];
      if (!mEgl.eglInitialize(mEglDisplay,version)) {
        throw new RuntimeException("eglInitialize failed " + GLUtils.getEGLErrorString(mEgl.eglGetError()));
      }
      mEglConfig=chooseEglConfig();
      if (mEglConfig == null) {
        throw new RuntimeException("eglConfig not initialized");
      }
      mEglContext=createContext(mEgl,mEglDisplay,mEglConfig);
      mEglSurface=mEgl.eglCreateWindowSurface(mEglDisplay,mEglConfig,surface,null);
      if (mEglSurface == null || mEglSurface == EGL10.EGL_NO_SURFACE) {
        int error=mEgl.eglGetError();
        if (error == EGL10.EGL_BAD_NATIVE_WINDOW) {
          Log.e(LOG_TAG,"createWindowSurface returned EGL_BAD_NATIVE_WINDOW.");
          return;
        }
        throw new RuntimeException("createWindowSurface failed " + GLUtils.getEGLErrorString(error));
      }
      if (!mEgl.eglMakeCurrent(mEglDisplay,mEglSurface,mEglSurface,mEglContext)) {
        throw new RuntimeException("eglMakeCurrent failed " + GLUtils.getEGLErrorString(mEgl.eglGetError()));
      }
    }
    EGLContext createContext(    EGL10 egl,    EGLDisplay eglDisplay,    EGLConfig eglConfig){
      int[] attrib_list={EGL_CONTEXT_CLIENT_VERSION,2,EGL10.EGL_NONE};
      return egl.eglCreateContext(eglDisplay,eglConfig,EGL10.EGL_NO_CONTEXT,attrib_list);
    }
    private EGLConfig chooseEglConfig(){
      int[] configsCount=new int[1];
      EGLConfig[] configs=new EGLConfig[1];
      int[] configSpec=getConfig();
      if (!mEgl.eglChooseConfig(mEglDisplay,configSpec,configs,1,configsCount)) {
        throw new IllegalArgumentException("eglChooseConfig failed " + GLUtils.getEGLErrorString(mEgl.eglGetError()));
      }
 else       if (configsCount[0] > 0) {
        return configs[0];
      }
      return null;
    }
    private int[] getConfig(){
      return new int[]{EGL10.EGL_RENDERABLE_TYPE,EGL_OPENGL_ES2_BIT,EGL10.EGL_RED_SIZE,8,EGL10.EGL_GREEN_SIZE,8,EGL10.EGL_BLUE_SIZE,8,EGL10.EGL_ALPHA_SIZE,8,EGL10.EGL_DEPTH_SIZE,0,EGL10.EGL_STENCIL_SIZE,0,EGL10.EGL_NONE};
    }
  }
;
  mGLThread.start();
}
