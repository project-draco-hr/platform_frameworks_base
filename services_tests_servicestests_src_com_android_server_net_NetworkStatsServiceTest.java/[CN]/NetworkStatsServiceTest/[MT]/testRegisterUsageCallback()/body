{
  expectCurrentTime();
  expectDefaultSettings();
  expectNetworkState(buildWifiState());
  expectNetworkStatsSummary(buildEmptyStats());
  expectNetworkStatsUidDetail(buildEmptyStats());
  expectNetworkStatsPoll();
  expectBandwidthControlCheck();
  replay();
  mService.forceUpdateIfaces();
  assertNetworkTotal(sTemplateWifi,0L,0L,0L,0L,0);
  verifyAndReset();
  String callingPackage="the.calling.package";
  long thresholdInBytes=1L;
  DataUsageRequest inputRequest=new DataUsageRequest(DataUsageRequest.REQUEST_ID_UNSET,sTemplateWifi,thresholdInBytes);
  ConditionVariable cv=new ConditionVariable(false);
  LatchedHandler latchedHandler=new LatchedHandler(Looper.getMainLooper(),cv);
  Messenger messenger=new Messenger(latchedHandler);
  IBinder mockBinder=createMock(IBinder.class);
  mockBinder.linkToDeath((IBinder.DeathRecipient)anyObject(),anyInt());
  EasyMock.replay(mockBinder);
  expectCurrentTime();
  expectDefaultSettings();
  expectNetworkStatsSummary(buildEmptyStats());
  expectNetworkStatsUidDetail(buildEmptyStats());
  expectNetworkStatsPoll();
  replay();
  DataUsageRequest request=mService.registerUsageCallback(callingPackage,inputRequest,messenger,mockBinder);
  assertTrue(request.requestId > 0);
  assertTrue(Objects.equals(sTemplateWifi,request.template));
  long minThresholdInBytes=2 * 1024 * 1024;
  assertEquals(minThresholdInBytes,request.thresholdInBytes);
  mHandler.sendMessage(mHandler.obtainMessage(-1));
  mHandlerThread.waitForIdle(WAIT_TIMEOUT);
  verifyAndReset();
  EasyMock.verify(mockBinder);
  EasyMock.reset(mockBinder);
  incrementCurrentTime(HOUR_IN_MILLIS);
  expectCurrentTime();
  expectDefaultSettings();
  expectNetworkStatsSummary(new NetworkStats(getElapsedRealtime(),1).addIfaceValues(TEST_IFACE,1024L,1L,2048L,2L));
  expectNetworkStatsUidDetail(buildEmptyStats());
  expectNetworkStatsPoll();
  replay();
  forcePollAndWaitForIdle();
  verifyAndReset();
  assertNetworkTotal(sTemplateWifi,1024L,1L,2048L,2L,0);
  assertEquals(INVALID_TYPE,latchedHandler.mLastMessageType);
  incrementCurrentTime(DAY_IN_MILLIS);
  expectCurrentTime();
  expectDefaultSettings();
  expectNetworkStatsSummary(new NetworkStats(getElapsedRealtime(),1).addIfaceValues(TEST_IFACE,4096000L,4L,8192000L,8L));
  expectNetworkStatsUidDetail(buildEmptyStats());
  expectNetworkStatsPoll();
  replay();
  forcePollAndWaitForIdle();
  assertNetworkTotal(sTemplateWifi,4096000L,4L,8192000L,8L,0);
  verifyAndReset();
  assertTrue(cv.block(WAIT_TIMEOUT));
  assertEquals(NetworkStatsManager.CALLBACK_LIMIT_REACHED,latchedHandler.mLastMessageType);
  cv.close();
  expect(mockBinder.unlinkToDeath((IBinder.DeathRecipient)anyObject(),anyInt())).andReturn(true);
  EasyMock.replay(mockBinder);
  mService.unregisterUsageRequest(request);
  assertTrue(cv.block(WAIT_TIMEOUT));
  assertEquals(NetworkStatsManager.CALLBACK_RELEASED,latchedHandler.mLastMessageType);
  EasyMock.verify(mockBinder);
}
