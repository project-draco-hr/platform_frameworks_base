{
  expectCurrentTime();
  expectDefaultSettings();
  expectNetworkState(buildMobile3gState(IMSI_1,true));
  expectNetworkStatsSummary(buildEmptyStats());
  expectNetworkStatsUidDetail(buildEmptyStats());
  expectNetworkStatsPoll();
  expectBandwidthControlCheck();
  replay();
  mService.forceUpdateIfaces();
  verifyAndReset();
  String callingPackage="the.calling.package";
  long thresholdInBytes=10 * 1024 * 1024;
  NetworkTemplate[] templates=new NetworkTemplate[]{sTemplateImsi1,sTemplateImsi2};
  int[] uids=new int[]{UID_RED};
  DataUsageRequest inputRequest=new DataUsageRequest(DataUsageRequest.REQUEST_ID_UNSET,templates,uids,thresholdInBytes);
  ConditionVariable cv=new ConditionVariable(false);
  cv.close();
  LatchedHandler latchedHandler=new LatchedHandler(Looper.getMainLooper(),cv);
  Messenger messenger=new Messenger(latchedHandler);
  IBinder mockBinder=createMock(IBinder.class);
  mockBinder.linkToDeath((IBinder.DeathRecipient)anyObject(),anyInt());
  EasyMock.replay(mockBinder);
  expectCurrentTime();
  expectDefaultSettings();
  expectNetworkStatsSummary(buildEmptyStats());
  expectNetworkStatsUidDetail(buildEmptyStats());
  expectNetworkStatsPoll();
  replay();
  DataUsageRequest request=mService.registerDataUsageCallback(callingPackage,inputRequest,messenger,mockBinder);
  assertTrue(request.requestId > 0);
  assertTrue(Arrays.deepEquals(templates,request.templates));
  assertTrue(Arrays.equals(uids,request.uids));
  assertEquals(thresholdInBytes,request.thresholdInBytes);
  mHandler.sendMessage(mHandler.obtainMessage(-1));
  mHandlerThread.waitForIdle(WAIT_TIMEOUT);
  verifyAndReset();
  EasyMock.verify(mockBinder);
  EasyMock.reset(mockBinder);
  incrementCurrentTime(HOUR_IN_MILLIS);
  expectCurrentTime();
  expectDefaultSettings();
  expectNetworkStatsSummary(buildEmptyStats());
  expectNetworkStatsUidDetail(new NetworkStats(getElapsedRealtime(),1).addValues(TEST_IFACE,UID_RED,SET_DEFAULT,TAG_NONE,ROAMING_NO,128L,2L,128L,2L,0L).addValues(TEST_IFACE,UID_RED,SET_DEFAULT,0xF00D,ROAMING_NO,64L,1L,64L,1L,0L));
  expectNetworkStatsPoll();
  replay();
  forcePollAndWaitForIdle();
  assertUidTotal(sTemplateImsi1,UID_RED,128L,2L,128L,2L,0);
  NetworkStats stats=mSession.getSummaryForAllUid(sTemplateImsi1,Long.MIN_VALUE,Long.MAX_VALUE,true);
  assertEquals(2,stats.size());
  assertValues(stats,IFACE_ALL,UID_RED,SET_DEFAULT,TAG_NONE,ROAMING_YES,128L,2L,128L,2L,0);
  assertValues(stats,IFACE_ALL,UID_RED,SET_DEFAULT,0xF00D,ROAMING_YES,64L,1L,64L,1L,0);
  verifyAndReset();
  assertEquals(INVALID_TYPE,latchedHandler.mLastMessageType);
  incrementCurrentTime(DAY_IN_MILLIS);
  expectCurrentTime();
  expectDefaultSettings();
  expectNetworkStatsSummary(buildEmptyStats());
  expectNetworkStatsUidDetail(new NetworkStats(getElapsedRealtime(),1).addValues(TEST_IFACE,UID_RED,SET_DEFAULT,TAG_NONE,ROAMING_NO,128000000L,2L,128000000L,2L,0L).addValues(TEST_IFACE,UID_RED,SET_DEFAULT,0xF00D,ROAMING_NO,64000000L,1L,64000000L,1L,0L));
  expectNetworkStatsPoll();
  replay();
  forcePollAndWaitForIdle();
  assertUidTotal(sTemplateImsi1,UID_RED,128000000L,2L,128000000L,2L,0);
  stats=mSession.getSummaryForAllUid(sTemplateImsi1,Long.MIN_VALUE,Long.MAX_VALUE,true);
  assertEquals(2,stats.size());
  assertValues(stats,IFACE_ALL,UID_RED,SET_DEFAULT,TAG_NONE,ROAMING_YES,128000000L,2L,128000000L,2L,0);
  assertValues(stats,IFACE_ALL,UID_RED,SET_DEFAULT,0xF00D,ROAMING_YES,64000000L,1L,64000000L,1L,0);
  verifyAndReset();
  assertTrue(cv.block(WAIT_TIMEOUT));
  assertEquals(NetworkStatsManager.CALLBACK_LIMIT_REACHED,latchedHandler.mLastMessageType);
  cv.close();
  expect(mockBinder.unlinkToDeath((IBinder.DeathRecipient)anyObject(),anyInt())).andReturn(true);
  EasyMock.replay(mockBinder);
  mService.unregisterDataUsageRequest(request);
  assertTrue(cv.block(WAIT_TIMEOUT));
  assertEquals(NetworkStatsManager.CALLBACK_RELEASED,latchedHandler.mLastMessageType);
  EasyMock.verify(mockBinder);
}
