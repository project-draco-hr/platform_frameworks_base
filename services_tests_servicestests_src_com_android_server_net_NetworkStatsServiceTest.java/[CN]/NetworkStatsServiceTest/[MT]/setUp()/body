{
  super.setUp();
  mServiceContext=new BroadcastInterceptingContext(getContext());
  mStatsDir=getContext().getFilesDir();
  if (mStatsDir.exists()) {
    IoUtils.deleteContents(mStatsDir);
  }
  mNetManager=createMock(INetworkManagementService.class);
  AlarmManager alarmManager=(AlarmManager)mServiceContext.getSystemService(Context.ALARM_SERVICE);
  mTime=createMock(TrustedTime.class);
  mSettings=createMock(NetworkStatsSettings.class);
  mConnManager=createMock(IConnectivityManager.class);
  PowerManager powerManager=(PowerManager)mServiceContext.getSystemService(Context.POWER_SERVICE);
  PowerManager.WakeLock wakeLock=powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG);
  mService=new NetworkStatsService(mServiceContext,mNetManager,alarmManager,wakeLock,mTime,TelephonyManager.getDefault(),mSettings,new NetworkStatsObservers(),mStatsDir,getBaseDir(mStatsDir));
  mHandlerThread=new IdleableHandlerThread("HandlerThread");
  mHandlerThread.start();
  Handler.Callback callback=new NetworkStatsService.HandlerCallback(mService);
  mHandler=new Handler(mHandlerThread.getLooper(),callback);
  mService.setHandler(mHandler,callback);
  mService.bindConnectivityManager(mConnManager);
  mElapsedRealtime=0L;
  expectCurrentTime();
  expectDefaultSettings();
  expectNetworkStatsUidDetail(buildEmptyStats());
  expectSystemReady();
  final Capture<INetworkManagementEventObserver> networkObserver=new Capture<INetworkManagementEventObserver>();
  mNetManager.registerObserver(capture(networkObserver));
  expectLastCall().atLeastOnce();
  replay();
  mService.systemReady();
  mSession=mService.openSession();
  verifyAndReset();
  mNetworkObserver=networkObserver.getValue();
}
