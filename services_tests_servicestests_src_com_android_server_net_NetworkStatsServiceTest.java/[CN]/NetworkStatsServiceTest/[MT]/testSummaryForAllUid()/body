{
  expectCurrentTime();
  expectDefaultSettings();
  expectNetworkState(buildWifiState());
  expectNetworkStatsSummary(buildEmptyStats());
  expectNetworkStatsUidDetail(buildEmptyStats());
  expectNetworkStatsPoll();
  expectBandwidthControlCheck();
  replay();
  mService.forceUpdateIfaces();
  verifyAndReset();
  incrementCurrentTime(HOUR_IN_MILLIS);
  expectCurrentTime();
  expectDefaultSettings();
  expectNetworkStatsSummary(buildEmptyStats());
  expectNetworkStatsUidDetail(new NetworkStats(getElapsedRealtime(),1).addValues(TEST_IFACE,UID_RED,SET_DEFAULT,TAG_NONE,50L,5L,50L,5L,0L).addValues(TEST_IFACE,UID_RED,SET_DEFAULT,0xF00D,10L,1L,10L,1L,0L).addValues(TEST_IFACE,UID_BLUE,SET_DEFAULT,TAG_NONE,1024L,8L,512L,4L,0L));
  expectNetworkStatsPoll();
  mService.incrementOperationCount(UID_RED,0xF00D,1);
  replay();
  forcePollAndWaitForIdle();
  assertUidTotal(sTemplateWifi,UID_RED,50L,5L,50L,5L,1);
  assertUidTotal(sTemplateWifi,UID_BLUE,1024L,8L,512L,4L,0);
  verifyAndReset();
  incrementCurrentTime(HOUR_IN_MILLIS);
  expectCurrentTime();
  expectDefaultSettings();
  expectNetworkStatsSummary(buildEmptyStats());
  expectNetworkStatsUidDetail(new NetworkStats(getElapsedRealtime(),1).addValues(TEST_IFACE,UID_RED,SET_DEFAULT,TAG_NONE,50L,5L,50L,5L,0L).addValues(TEST_IFACE,UID_RED,SET_DEFAULT,0xF00D,10L,1L,10L,1L,0L).addValues(TEST_IFACE,UID_BLUE,SET_DEFAULT,TAG_NONE,2048L,16L,1024L,8L,0L));
  expectNetworkStatsPoll();
  replay();
  forcePollAndWaitForIdle();
  NetworkStats stats=mSession.getSummaryForAllUid(sTemplateWifi,Long.MIN_VALUE,Long.MAX_VALUE,true);
  assertEquals(3,stats.size());
  assertValues(stats,IFACE_ALL,UID_RED,SET_DEFAULT,TAG_NONE,ROAMING_NO,50L,5L,50L,5L,1);
  assertValues(stats,IFACE_ALL,UID_RED,SET_DEFAULT,0xF00D,ROAMING_NO,10L,1L,10L,1L,1);
  assertValues(stats,IFACE_ALL,UID_BLUE,SET_DEFAULT,TAG_NONE,ROAMING_NO,2048L,16L,1024L,8L,0);
  final long currentTime=currentTimeMillis();
  stats=mSession.getSummaryForAllUid(sTemplateWifi,currentTime - HOUR_IN_MILLIS,currentTime,true);
  assertEquals(1,stats.size());
  assertValues(stats,IFACE_ALL,UID_BLUE,SET_DEFAULT,TAG_NONE,ROAMING_NO,1024L,8L,512L,4L,0);
  verifyAndReset();
}
