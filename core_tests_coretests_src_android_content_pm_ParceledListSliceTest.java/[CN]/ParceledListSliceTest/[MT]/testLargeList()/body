{
  final int thresholdBytes=256 * 1024;
  final int objectCount=thresholdBytes / measureLargeObject();
  List<LargeObject> list=new ArrayList<>();
  for (int i=0; i < objectCount; i++) {
    list.add(new LargeObject(i * 5,(i * 5) + 1,(i * 5) + 2,(i * 5) + 3,(i * 5) + 4));
  }
  ParceledListSlice<LargeObject> slice;
  Parcel parcel=Parcel.obtain();
  try {
    parcel.writeParcelable(new ParceledListSlice<>(list),0);
    parcel.setDataPosition(0);
    slice=parcel.readParcelable(getClass().getClassLoader());
  }
  finally {
    parcel.recycle();
  }
  assertNotNull(slice);
  assertNotNull(slice.getList());
  assertEquals(objectCount,slice.getList().size());
  for (int i=0; i < objectCount; i++) {
    assertEquals(i * 5,slice.getList().get(i).mFieldA);
    assertEquals((i * 5) + 1,slice.getList().get(i).mFieldB);
    assertEquals((i * 5) + 2,slice.getList().get(i).mFieldC);
    assertEquals((i * 5) + 3,slice.getList().get(i).mFieldD);
    assertEquals((i * 5) + 4,slice.getList().get(i).mFieldE);
  }
}
