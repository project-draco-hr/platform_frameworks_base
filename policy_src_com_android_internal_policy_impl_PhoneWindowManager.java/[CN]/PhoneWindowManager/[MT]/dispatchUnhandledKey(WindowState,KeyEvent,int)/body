{
  if (DEBUG_FALLBACK) {
    Slog.d(TAG,"Unhandled key: win=" + win + ", action="+ event.getAction()+ ", flags="+ event.getFlags()+ ", keyCode="+ event.getKeyCode()+ ", scanCode="+ event.getScanCode()+ ", metaState="+ event.getMetaState()+ ", repeatCount="+ event.getRepeatCount()+ ", policyFlags="+ policyFlags);
  }
  if ((event.getFlags() & KeyEvent.FLAG_FALLBACK) == 0) {
    final KeyCharacterMap kcm=event.getKeyCharacterMap();
    final int keyCode=event.getKeyCode();
    final int metaState=event.getMetaState();
    if (getFallbackAction(kcm,keyCode,metaState,mFallbackAction)) {
      if (DEBUG_FALLBACK) {
        Slog.d(TAG,"Fallback: keyCode=" + mFallbackAction.keyCode + " metaState="+ Integer.toHexString(mFallbackAction.metaState));
      }
      int flags=event.getFlags() | KeyEvent.FLAG_FALLBACK;
      KeyEvent fallbackEvent=KeyEvent.obtain(event.getDownTime(),event.getEventTime(),event.getAction(),mFallbackAction.keyCode,event.getRepeatCount(),mFallbackAction.metaState,event.getDeviceId(),event.getScanCode(),flags,event.getSource(),null);
      int actions=interceptKeyBeforeQueueing(fallbackEvent,policyFlags,true);
      if ((actions & ACTION_PASS_TO_USER) != 0) {
        long delayMillis=interceptKeyBeforeDispatching(win,fallbackEvent,policyFlags);
        if (delayMillis == 0) {
          if (DEBUG_FALLBACK) {
            Slog.d(TAG,"Performing fallback.");
          }
          return fallbackEvent;
        }
      }
      fallbackEvent.recycle();
    }
  }
  if (DEBUG_FALLBACK) {
    Slog.d(TAG,"No fallback.");
  }
  return null;
}
