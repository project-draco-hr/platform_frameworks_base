{
  if (!mSystemBooted) {
    return 0;
  }
  final boolean down=event.getAction() == KeyEvent.ACTION_DOWN;
  final boolean canceled=event.isCanceled();
  final int keyCode=event.getKeyCode();
  final boolean isInjected=(policyFlags & WindowManagerPolicy.FLAG_INJECTED) != 0;
  final boolean keyguardActive=(mKeyguardDelegate == null ? false : (isScreenOn ? mKeyguardDelegate.isShowingAndNotHidden() : mKeyguardDelegate.isShowing()));
  if (keyCode == KeyEvent.KEYCODE_POWER) {
    policyFlags|=WindowManagerPolicy.FLAG_WAKE;
  }
  final boolean isWakeKey=(policyFlags & (WindowManagerPolicy.FLAG_WAKE | WindowManagerPolicy.FLAG_WAKE_DROPPED)) != 0;
  if (DEBUG_INPUT) {
    Log.d(TAG,"interceptKeyTq keycode=" + keyCode + " screenIsOn="+ isScreenOn+ " keyguardActive="+ keyguardActive+ " policyFlags="+ Integer.toHexString(policyFlags)+ " isWakeKey="+ isWakeKey);
  }
  if (down && (policyFlags & WindowManagerPolicy.FLAG_VIRTUAL) != 0 && event.getRepeatCount() == 0) {
    performHapticFeedbackLw(null,HapticFeedbackConstants.VIRTUAL_KEY,false);
  }
  int result;
  if ((isScreenOn && !mHeadless) || (isInjected && !isWakeKey)) {
    result=ACTION_PASS_TO_USER;
  }
 else {
    result=0;
    if (down && isWakeKey && isWakeKeyWhenScreenOff(keyCode)) {
      result|=ACTION_WAKE_UP;
    }
  }
  if (mGlobalKeyManager.shouldHandleGlobalKey(keyCode,event)) {
    return result;
  }
switch (keyCode) {
case KeyEvent.KEYCODE_VOLUME_DOWN:
case KeyEvent.KEYCODE_VOLUME_UP:
case KeyEvent.KEYCODE_VOLUME_MUTE:
{
      if (keyCode == KeyEvent.KEYCODE_VOLUME_DOWN) {
        if (down) {
          if (isScreenOn && !mVolumeDownKeyTriggered && (event.getFlags() & KeyEvent.FLAG_FALLBACK) == 0) {
            mVolumeDownKeyTriggered=true;
            mVolumeDownKeyTime=event.getDownTime();
            mVolumeDownKeyConsumedByScreenshotChord=false;
            cancelPendingPowerKeyAction();
            interceptScreenshotChord();
          }
        }
 else {
          mVolumeDownKeyTriggered=false;
          cancelPendingScreenshotChordAction();
        }
      }
 else       if (keyCode == KeyEvent.KEYCODE_VOLUME_UP) {
        if (down) {
          if (isScreenOn && !mVolumeUpKeyTriggered && (event.getFlags() & KeyEvent.FLAG_FALLBACK) == 0) {
            mVolumeUpKeyTriggered=true;
            cancelPendingPowerKeyAction();
            cancelPendingScreenshotChordAction();
          }
        }
 else {
          mVolumeUpKeyTriggered=false;
          cancelPendingScreenshotChordAction();
        }
      }
      if (down) {
        ITelephony telephonyService=getTelephonyService();
        if (telephonyService != null) {
          try {
            if (telephonyService.isRinging()) {
              Log.i(TAG,"interceptKeyBeforeQueueing:" + " VOLUME key-down while ringing: Silence ringer!");
              telephonyService.silenceRinger();
              result&=~ACTION_PASS_TO_USER;
              break;
            }
            if (telephonyService.isOffhook() && (result & ACTION_PASS_TO_USER) == 0) {
              handleVolumeKey(AudioManager.STREAM_VOICE_CALL,keyCode);
              break;
            }
          }
 catch (          RemoteException ex) {
            Log.w(TAG,"ITelephony threw RemoteException",ex);
          }
        }
        if (isMusicActive() && (result & ACTION_PASS_TO_USER) == 0) {
          handleVolumeKey(AudioManager.STREAM_MUSIC,keyCode);
          break;
        }
      }
      break;
    }
case KeyEvent.KEYCODE_ENDCALL:
{
    result&=~ACTION_PASS_TO_USER;
    if (down) {
      ITelephony telephonyService=getTelephonyService();
      boolean hungUp=false;
      if (telephonyService != null) {
        try {
          hungUp=telephonyService.endCall();
        }
 catch (        RemoteException ex) {
          Log.w(TAG,"ITelephony threw RemoteException",ex);
        }
      }
      interceptPowerKeyDown(!isScreenOn || hungUp);
    }
 else {
      if (interceptPowerKeyUp(canceled)) {
        if ((mEndcallBehavior & Settings.System.END_BUTTON_BEHAVIOR_HOME) != 0) {
          if (goHome()) {
            break;
          }
        }
        if ((mEndcallBehavior & Settings.System.END_BUTTON_BEHAVIOR_SLEEP) != 0) {
          result=(result & ~ACTION_WAKE_UP) | ACTION_GO_TO_SLEEP;
        }
      }
    }
    break;
  }
case KeyEvent.KEYCODE_POWER:
{
  result&=~ACTION_PASS_TO_USER;
  if (down) {
    if (isScreenOn && isNavigationBarTransient(mLastSystemUiFlags)) {
      mTransientNavigationConfirmation.unconfirmLastPackage();
    }
    if (isScreenOn && !mPowerKeyTriggered && (event.getFlags() & KeyEvent.FLAG_FALLBACK) == 0) {
      mPowerKeyTriggered=true;
      mPowerKeyTime=event.getDownTime();
      interceptScreenshotChord();
    }
    ITelephony telephonyService=getTelephonyService();
    boolean hungUp=false;
    if (telephonyService != null) {
      try {
        if (telephonyService.isRinging()) {
          telephonyService.silenceRinger();
        }
 else         if ((mIncallPowerBehavior & Settings.Secure.INCALL_POWER_BUTTON_BEHAVIOR_HANGUP) != 0 && telephonyService.isOffhook()) {
          hungUp=telephonyService.endCall();
        }
      }
 catch (      RemoteException ex) {
        Log.w(TAG,"ITelephony threw RemoteException",ex);
      }
    }
    interceptPowerKeyDown(!isScreenOn || hungUp || mVolumeDownKeyTriggered|| mVolumeUpKeyTriggered);
  }
 else {
    mPowerKeyTriggered=false;
    cancelPendingScreenshotChordAction();
    if (interceptPowerKeyUp(canceled || mPendingPowerKeyUpCanceled)) {
      result=(result & ~ACTION_WAKE_UP) | ACTION_GO_TO_SLEEP;
    }
    mPendingPowerKeyUpCanceled=false;
  }
  break;
}
case KeyEvent.KEYCODE_MEDIA_PLAY:
case KeyEvent.KEYCODE_MEDIA_PAUSE:
case KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE:
if (down) {
ITelephony telephonyService=getTelephonyService();
if (telephonyService != null) {
  try {
    if (!telephonyService.isIdle()) {
      break;
    }
  }
 catch (  RemoteException ex) {
    Log.w(TAG,"ITelephony threw RemoteException",ex);
  }
}
}
case KeyEvent.KEYCODE_HEADSETHOOK:
case KeyEvent.KEYCODE_MUTE:
case KeyEvent.KEYCODE_MEDIA_STOP:
case KeyEvent.KEYCODE_MEDIA_NEXT:
case KeyEvent.KEYCODE_MEDIA_PREVIOUS:
case KeyEvent.KEYCODE_MEDIA_REWIND:
case KeyEvent.KEYCODE_MEDIA_RECORD:
case KeyEvent.KEYCODE_MEDIA_FAST_FORWARD:
case KeyEvent.KEYCODE_MEDIA_AUDIO_TRACK:
{
if ((result & ACTION_PASS_TO_USER) == 0) {
mBroadcastWakeLock.acquire();
Message msg=mHandler.obtainMessage(MSG_DISPATCH_MEDIA_KEY_WITH_WAKE_LOCK,new KeyEvent(event));
msg.setAsynchronous(true);
msg.sendToTarget();
}
break;
}
case KeyEvent.KEYCODE_CALL:
{
if (down) {
ITelephony telephonyService=getTelephonyService();
if (telephonyService != null) {
try {
  if (telephonyService.isRinging()) {
    Log.i(TAG,"interceptKeyBeforeQueueing:" + " CALL key-down while ringing: Answer the call!");
    telephonyService.answerRingingCall();
    result&=~ACTION_PASS_TO_USER;
  }
}
 catch (RemoteException ex) {
  Log.w(TAG,"ITelephony threw RemoteException",ex);
}
}
}
break;
}
}
return result;
}
