{
  WindowState win=mFocusedWindow != null ? mFocusedWindow : mTopFullscreenOpaqueWindowState;
  if (win == null) {
    return 0;
  }
  if ((win.getAttrs().privateFlags & PRIVATE_FLAG_KEYGUARD) != 0 && mHideLockScreen == true) {
    return 0;
  }
  int tmpVisibility=PolicyControl.getSystemUiVisibility(win,null) & ~mResettingSystemUiFlags & ~mForceClearedSystemUiFlags;
  if (mForcingShowNavBar && win.getSurfaceLayer() < mForcingShowNavBarLayer) {
    tmpVisibility&=~PolicyControl.adjustClearableFlags(win,View.SYSTEM_UI_CLEARABLE_FLAGS);
  }
  final int visibility=updateSystemBarsLw(win,mLastSystemUiFlags,tmpVisibility);
  final int diff=visibility ^ mLastSystemUiFlags;
  final boolean needsMenu=win.getNeedsMenuLw(mTopFullscreenOpaqueWindowState);
  if (diff == 0 && mLastFocusNeedsMenu == needsMenu && mFocusedApp == win.getAppToken()) {
    return 0;
  }
  mLastSystemUiFlags=visibility;
  mLastFocusNeedsMenu=needsMenu;
  mFocusedApp=win.getAppToken();
  mHandler.post(new Runnable(){
    @Override public void run(){
      try {
        IStatusBarService statusbar=getStatusBarService();
        if (statusbar != null) {
          statusbar.setSystemUiVisibility(visibility,0xffffffff);
          statusbar.topAppWindowChanged(needsMenu);
        }
      }
 catch (      RemoteException e) {
        mStatusBarService=null;
      }
    }
  }
);
  return diff;
}
