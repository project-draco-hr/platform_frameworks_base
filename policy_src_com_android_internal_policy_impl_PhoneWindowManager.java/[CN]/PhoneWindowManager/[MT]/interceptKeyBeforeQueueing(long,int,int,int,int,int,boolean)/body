{
  final boolean down=action == KeyEvent.ACTION_DOWN;
  final boolean canceled=(flags & KeyEvent.FLAG_CANCELED) != 0;
  final boolean isInjected=(policyFlags & WindowManagerPolicy.FLAG_INJECTED) != 0;
  final boolean keyguardActive=(isScreenOn ? mKeyguardMediator.isShowingAndNotHidden() : mKeyguardMediator.isShowing());
  if (false) {
    Log.d(TAG,"interceptKeyTq keycode=" + keyCode + " screenIsOn="+ isScreenOn+ " keyguardActive="+ keyguardActive);
  }
  if (down && (policyFlags & WindowManagerPolicy.FLAG_VIRTUAL) != 0) {
    performHapticFeedbackLw(null,HapticFeedbackConstants.VIRTUAL_KEY,false);
  }
  int result;
  if (isScreenOn || isInjected) {
    result=ACTION_PASS_TO_USER;
  }
 else {
    result=0;
    final boolean isWakeKey=(policyFlags & (WindowManagerPolicy.FLAG_WAKE | WindowManagerPolicy.FLAG_WAKE_DROPPED)) != 0;
    if (down && isWakeKey) {
      if (keyguardActive) {
        mKeyguardMediator.onWakeKeyWhenKeyguardShowingTq(keyCode);
      }
 else {
        result|=ACTION_POKE_USER_ACTIVITY;
      }
    }
  }
switch (keyCode) {
case KeyEvent.KEYCODE_VOLUME_DOWN:
case KeyEvent.KEYCODE_VOLUME_UP:
{
      if (down) {
        ITelephony telephonyService=getTelephonyService();
        if (telephonyService != null) {
          try {
            if (telephonyService.isRinging()) {
              Log.i(TAG,"interceptKeyBeforeQueueing:" + " VOLUME key-down while ringing: Silence ringer!");
              telephonyService.silenceRinger();
              result&=~ACTION_PASS_TO_USER;
              break;
            }
            if (telephonyService.isOffhook() && (result & ACTION_PASS_TO_USER) == 0) {
              handleVolumeKey(AudioManager.STREAM_VOICE_CALL,keyCode);
              break;
            }
          }
 catch (          RemoteException ex) {
            Log.w(TAG,"ITelephony threw RemoteException",ex);
          }
        }
        if (isMusicActive() && (result & ACTION_PASS_TO_USER) == 0) {
          handleVolumeKey(AudioManager.STREAM_MUSIC,keyCode);
          break;
        }
      }
      break;
    }
case KeyEvent.KEYCODE_ENDCALL:
{
    result&=~ACTION_PASS_TO_USER;
    if (down) {
      ITelephony telephonyService=getTelephonyService();
      boolean hungUp=false;
      if (telephonyService != null) {
        try {
          hungUp=telephonyService.endCall();
        }
 catch (        RemoteException ex) {
          Log.w(TAG,"ITelephony threw RemoteException",ex);
        }
      }
      interceptPowerKeyDown(!isScreenOn || hungUp);
    }
 else {
      if (interceptPowerKeyUp(canceled)) {
        if ((mEndcallBehavior & Settings.System.END_BUTTON_BEHAVIOR_HOME) != 0) {
          if (goHome()) {
            break;
          }
        }
        if ((mEndcallBehavior & Settings.System.END_BUTTON_BEHAVIOR_SLEEP) != 0) {
          result=(result & ~ACTION_POKE_USER_ACTIVITY) | ACTION_GO_TO_SLEEP;
        }
      }
    }
    break;
  }
case KeyEvent.KEYCODE_POWER:
{
  result&=~ACTION_PASS_TO_USER;
  if (down) {
    ITelephony telephonyService=getTelephonyService();
    boolean hungUp=false;
    if (telephonyService != null) {
      try {
        if (telephonyService.isRinging()) {
          telephonyService.silenceRinger();
        }
 else         if ((mIncallPowerBehavior & Settings.Secure.INCALL_POWER_BUTTON_BEHAVIOR_HANGUP) != 0 && telephonyService.isOffhook()) {
          hungUp=telephonyService.endCall();
        }
      }
 catch (      RemoteException ex) {
        Log.w(TAG,"ITelephony threw RemoteException",ex);
      }
    }
    interceptPowerKeyDown(!isScreenOn || hungUp);
  }
 else {
    if (interceptPowerKeyUp(canceled)) {
      result=(result & ~ACTION_POKE_USER_ACTIVITY) | ACTION_GO_TO_SLEEP;
    }
  }
  break;
}
case KeyEvent.KEYCODE_HEADSETHOOK:
case KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE:
case KeyEvent.KEYCODE_MEDIA_STOP:
case KeyEvent.KEYCODE_MEDIA_NEXT:
case KeyEvent.KEYCODE_MEDIA_PREVIOUS:
case KeyEvent.KEYCODE_MEDIA_REWIND:
case KeyEvent.KEYCODE_MEDIA_FAST_FORWARD:
{
if ((result & ACTION_PASS_TO_USER) == 0) {
  long when=whenNanos / 1000000;
  KeyEvent keyEvent=new KeyEvent(when,when,action,keyCode,0,0,0,scanCode,flags,InputDevice.SOURCE_KEYBOARD);
  mBroadcastWakeLock.acquire();
  mHandler.post(new PassHeadsetKey(keyEvent));
}
break;
}
case KeyEvent.KEYCODE_CALL:
{
if (down) {
ITelephony telephonyService=getTelephonyService();
if (telephonyService != null) {
  try {
    if (telephonyService.isRinging()) {
      Log.i(TAG,"interceptKeyBeforeQueueing:" + " CALL key-down while ringing: Answer the call!");
      telephonyService.answerRingingCall();
      result&=~ACTION_PASS_TO_USER;
    }
  }
 catch (  RemoteException ex) {
    Log.w(TAG,"ITelephony threw RemoteException",ex);
  }
}
}
break;
}
}
return result;
}
