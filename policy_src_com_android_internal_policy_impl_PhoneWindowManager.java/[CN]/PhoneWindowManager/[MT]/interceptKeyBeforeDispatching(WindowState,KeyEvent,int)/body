{
  final boolean keyguardOn=keyguardOn();
  final int keyCode=event.getKeyCode();
  final int repeatCount=event.getRepeatCount();
  final int metaState=event.getMetaState();
  final boolean down=event.getAction() == KeyEvent.ACTION_DOWN;
  final boolean canceled=event.isCanceled();
  if (false) {
    Log.d(TAG,"interceptKeyTi keyCode=" + keyCode + " down="+ down+ " repeatCount="+ repeatCount+ " keyguardOn="+ keyguardOn+ " mHomePressed="+ mHomePressed);
  }
  if (keyCode == KeyEvent.KEYCODE_HOME) {
    if (mHomePressed && !down) {
      mHomePressed=false;
      if (!canceled) {
        boolean incomingRinging=false;
        try {
          ITelephony telephonyService=getTelephonyService();
          if (telephonyService != null) {
            incomingRinging=telephonyService.isRinging();
          }
        }
 catch (        RemoteException ex) {
          Log.w(TAG,"RemoteException from getPhoneInterface()",ex);
        }
        if (incomingRinging) {
          Log.i(TAG,"Ignoring HOME; there's a ringing incoming call.");
        }
 else {
          launchHomeFromHotKey();
        }
      }
 else {
        Log.i(TAG,"Ignoring HOME; event canceled.");
      }
      return true;
    }
    WindowManager.LayoutParams attrs=win != null ? win.getAttrs() : null;
    if (attrs != null) {
      final int type=attrs.type;
      if (type == WindowManager.LayoutParams.TYPE_KEYGUARD || type == WindowManager.LayoutParams.TYPE_KEYGUARD_DIALOG) {
        return false;
      }
      final int typeCount=WINDOW_TYPES_WHERE_HOME_DOESNT_WORK.length;
      for (int i=0; i < typeCount; i++) {
        if (type == WINDOW_TYPES_WHERE_HOME_DOESNT_WORK[i]) {
          return true;
        }
      }
    }
    if (down) {
      if (repeatCount == 0) {
        mHomePressed=true;
      }
 else       if ((event.getFlags() & KeyEvent.FLAG_LONG_PRESS) != 0) {
        if (!keyguardOn) {
          handleLongPressOnHome();
        }
      }
    }
    return true;
  }
 else   if (keyCode == KeyEvent.KEYCODE_MENU) {
    final int chordBug=KeyEvent.META_SHIFT_ON;
    if (down && repeatCount == 0) {
      if (mEnableShiftMenuBugReports && (metaState & chordBug) == chordBug) {
        Intent intent=new Intent(Intent.ACTION_BUG_REPORT);
        mContext.sendOrderedBroadcast(intent,null);
        return true;
      }
 else       if (SHOW_PROCESSES_ON_ALT_MENU && (metaState & KeyEvent.META_ALT_ON) == KeyEvent.META_ALT_ON) {
        Intent service=new Intent();
        service.setClassName(mContext,"com.android.server.LoadAverageService");
        ContentResolver res=mContext.getContentResolver();
        boolean shown=Settings.System.getInt(res,Settings.System.SHOW_PROCESSES,0) != 0;
        if (!shown) {
          mContext.startService(service);
        }
 else {
          mContext.stopService(service);
        }
        Settings.System.putInt(res,Settings.System.SHOW_PROCESSES,shown ? 0 : 1);
        return true;
      }
    }
  }
 else   if (keyCode == KeyEvent.KEYCODE_SEARCH) {
    if (down) {
      if (repeatCount == 0) {
        mShortcutKeyPressed=keyCode;
        mConsumeShortcutKeyUp=false;
      }
    }
 else     if (keyCode == mShortcutKeyPressed) {
      mShortcutKeyPressed=-1;
      if (mConsumeShortcutKeyUp) {
        mConsumeShortcutKeyUp=false;
        return true;
      }
    }
    return false;
  }
 else   if (keyCode == KeyEvent.KEYCODE_APP_SWITCH) {
    if (down && repeatCount == 0) {
      showOrHideRecentAppsDialog(0,true);
    }
    return true;
  }
  if (mShortcutKeyPressed != -1) {
    final KeyCharacterMap kcm=event.getKeyCharacterMap();
    if (kcm.isPrintingKey(keyCode)) {
      mConsumeShortcutKeyUp=true;
      if (down && repeatCount == 0 && !keyguardOn) {
        Intent shortcutIntent=mShortcutManager.getIntent(kcm,keyCode,metaState);
        if (shortcutIntent != null) {
          shortcutIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
          try {
            mContext.startActivity(shortcutIntent);
          }
 catch (          ActivityNotFoundException ex) {
            Slog.w(TAG,"Dropping shortcut key combination because " + "the activity to which it is registered was not found: " + KeyEvent.keyCodeToString(mShortcutKeyPressed) + "+"+ KeyEvent.keyCodeToString(keyCode),ex);
          }
        }
 else {
          Slog.i(TAG,"Dropping unregistered shortcut key combination: " + KeyEvent.keyCodeToString(mShortcutKeyPressed) + "+"+ KeyEvent.keyCodeToString(keyCode));
        }
      }
      return true;
    }
  }
  return false;
}
