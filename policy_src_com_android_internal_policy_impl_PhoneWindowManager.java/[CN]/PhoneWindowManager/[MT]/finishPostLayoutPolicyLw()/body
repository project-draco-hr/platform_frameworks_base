{
  int changes=0;
  boolean topIsFullscreen=false;
  final WindowManager.LayoutParams lp=(mTopFullscreenOpaqueWindowState != null) ? mTopFullscreenOpaqueWindowState.getAttrs() : null;
  if (mStatusBar != null) {
    if (DEBUG_LAYOUT)     Log.i(TAG,"force=" + mForceStatusBar + " top="+ mTopFullscreenOpaqueWindowState);
    if (mForceStatusBar) {
      if (DEBUG_LAYOUT)       Log.v(TAG,"Showing status bar: forced");
      if (mStatusBar.showLw(true))       changes|=FINISH_LAYOUT_REDO_LAYOUT;
    }
 else     if (mTopFullscreenOpaqueWindowState != null) {
      if (localLOGV) {
        Log.d(TAG,"frame: " + mTopFullscreenOpaqueWindowState.getFrameLw() + " shown frame: "+ mTopFullscreenOpaqueWindowState.getShownFrameLw());
        Log.d(TAG,"attr: " + mTopFullscreenOpaqueWindowState.getAttrs() + " lp.flags=0x"+ Integer.toHexString(lp.flags));
      }
      topIsFullscreen=(lp.flags & WindowManager.LayoutParams.FLAG_FULLSCREEN) != 0 || (mLastSystemUiFlags & View.SYSTEM_UI_FLAG_FULLSCREEN) != 0;
      if (topIsFullscreen) {
        if (DEBUG_LAYOUT)         Log.v(TAG,"** HIDING status bar");
        if (mStatusBar.hideLw(true)) {
          changes|=FINISH_LAYOUT_REDO_LAYOUT;
          mHandler.post(new Runnable(){
            public void run(){
              try {
                IStatusBarService statusbar=getStatusBarService();
                if (statusbar != null) {
                  statusbar.collapse();
                }
              }
 catch (              RemoteException ex) {
                mStatusBarService=null;
              }
            }
          }
);
        }
 else         if (DEBUG_LAYOUT) {
          Log.v(TAG,"Preventing status bar from hiding by policy");
        }
      }
 else {
        if (DEBUG_LAYOUT)         Log.v(TAG,"** SHOWING status bar: top is not fullscreen");
        if (mStatusBar.showLw(true))         changes|=FINISH_LAYOUT_REDO_LAYOUT;
      }
    }
  }
  mTopIsFullscreen=topIsFullscreen;
  if (mKeyguard != null) {
    if (localLOGV)     Log.v(TAG,"finishPostLayoutPolicyLw: mHideKeyguard=" + mHideLockScreen);
    if (mDismissKeyguard && !mKeyguardMediator.isSecure()) {
      if (mKeyguard.hideLw(true)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
      }
      if (mKeyguardMediator.isShowing()) {
        mHandler.post(new Runnable(){
          public void run(){
            mKeyguardMediator.keyguardDone(false,false);
          }
        }
);
      }
    }
 else     if (mHideLockScreen) {
      if (mKeyguard.hideLw(true)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
      }
      mKeyguardMediator.setHidden(true);
    }
 else {
      if (mKeyguard.showLw(true)) {
        changes|=FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG | FINISH_LAYOUT_REDO_WALLPAPER;
      }
      mKeyguardMediator.setHidden(false);
    }
  }
  if ((updateSystemUiVisibilityLw() & SYSTEM_UI_CHANGING_LAYOUT) != 0) {
    changes|=FINISH_LAYOUT_REDO_LAYOUT;
  }
  updateLockScreenTimeout();
  return changes;
}
