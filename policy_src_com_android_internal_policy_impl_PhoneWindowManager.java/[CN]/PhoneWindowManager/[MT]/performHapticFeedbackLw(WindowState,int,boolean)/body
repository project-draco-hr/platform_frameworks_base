{
  if (!mVibrator.hasVibrator()) {
    return false;
  }
  final boolean hapticsDisabled=Settings.System.getIntForUser(mContext.getContentResolver(),Settings.System.HAPTIC_FEEDBACK_ENABLED,0,UserHandle.USER_CURRENT) == 0;
  if (!always && (hapticsDisabled || mKeyguardDelegate.isShowingAndNotHidden())) {
    return false;
  }
  long[] pattern=null;
switch (effectId) {
case HapticFeedbackConstants.LONG_PRESS:
    pattern=mLongPressVibePattern;
  break;
case HapticFeedbackConstants.VIRTUAL_KEY:
pattern=mVirtualKeyVibePattern;
break;
case HapticFeedbackConstants.KEYBOARD_TAP:
pattern=mKeyboardTapVibePattern;
break;
case HapticFeedbackConstants.SAFE_MODE_DISABLED:
pattern=mSafeModeDisabledVibePattern;
break;
case HapticFeedbackConstants.SAFE_MODE_ENABLED:
pattern=mSafeModeEnabledVibePattern;
break;
default :
return false;
}
int owningUid;
String owningPackage;
if (win != null) {
owningUid=win.getOwningUid();
owningPackage=win.getOwningPackage();
}
 else {
owningUid=android.os.Process.myUid();
owningPackage=mContext.getOpPackageName();
}
if (pattern.length == 1) {
mVibrator.vibrate(owningUid,owningPackage,pattern[0]);
}
 else {
mVibrator.vibrate(owningUid,owningPackage,pattern,-1);
}
return true;
}
