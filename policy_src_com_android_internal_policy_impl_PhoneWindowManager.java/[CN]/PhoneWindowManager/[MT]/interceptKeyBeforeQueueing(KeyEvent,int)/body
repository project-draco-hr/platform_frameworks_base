{
  if (!mSystemBooted) {
    return 0;
  }
  final boolean interactive=(policyFlags & FLAG_INTERACTIVE) != 0;
  final boolean down=event.getAction() == KeyEvent.ACTION_DOWN;
  final boolean canceled=event.isCanceled();
  final int keyCode=event.getKeyCode();
  final boolean isInjected=(policyFlags & WindowManagerPolicy.FLAG_INJECTED) != 0;
  final boolean keyguardActive=(mKeyguardDelegate == null ? false : (interactive ? mKeyguardDelegate.isShowingAndNotOccluded() : mKeyguardDelegate.isShowing()));
  if (DEBUG_INPUT) {
    Log.d(TAG,"interceptKeyTq keycode=" + keyCode + " interactive="+ interactive+ " keyguardActive="+ keyguardActive+ " policyFlags="+ Integer.toHexString(policyFlags));
  }
  int result;
  boolean isWakeKey=(policyFlags & WindowManagerPolicy.FLAG_WAKE) != 0 || event.isWakeKey();
  if (interactive || (isInjected && !isWakeKey)) {
    result=ACTION_PASS_TO_USER;
    isWakeKey=false;
  }
 else   if (!interactive && shouldDispatchInputWhenNonInteractive()) {
    result=ACTION_PASS_TO_USER;
  }
 else {
    result=0;
    if (isWakeKey && (!down || !isWakeKeyWhenScreenOff(keyCode))) {
      isWakeKey=false;
    }
  }
  if (mGlobalKeyManager.shouldHandleGlobalKey(keyCode,event)) {
    if (isWakeKey) {
      wakeUp(event.getEventTime(),keyCode == KeyEvent.KEYCODE_POWER ? mAllowTheaterModeWakeFromPowerKey : mAllowTheaterModeWakeFromKey);
    }
    return result;
  }
  boolean useHapticFeedback=down && (policyFlags & WindowManagerPolicy.FLAG_VIRTUAL) != 0 && event.getRepeatCount() == 0;
switch (keyCode) {
case KeyEvent.KEYCODE_VOLUME_DOWN:
case KeyEvent.KEYCODE_VOLUME_UP:
case KeyEvent.KEYCODE_VOLUME_MUTE:
{
      if (keyCode == KeyEvent.KEYCODE_VOLUME_DOWN) {
        if (down) {
          if (interactive && !mVolumeDownKeyTriggered && (event.getFlags() & KeyEvent.FLAG_FALLBACK) == 0) {
            mVolumeDownKeyTriggered=true;
            mVolumeDownKeyTime=event.getDownTime();
            mVolumeDownKeyConsumedByScreenshotChord=false;
            cancelPendingPowerKeyAction();
            interceptScreenshotChord();
          }
        }
 else {
          mVolumeDownKeyTriggered=false;
          cancelPendingScreenshotChordAction();
        }
      }
 else       if (keyCode == KeyEvent.KEYCODE_VOLUME_UP) {
        if (down) {
          if (interactive && !mVolumeUpKeyTriggered && (event.getFlags() & KeyEvent.FLAG_FALLBACK) == 0) {
            mVolumeUpKeyTriggered=true;
            cancelPendingPowerKeyAction();
            cancelPendingScreenshotChordAction();
          }
        }
 else {
          mVolumeUpKeyTriggered=false;
          cancelPendingScreenshotChordAction();
        }
      }
      if (down) {
        TelecomManager telecomManager=getTelecommService();
        if (telecomManager != null) {
          if (telecomManager.isRinging()) {
            Log.i(TAG,"interceptKeyBeforeQueueing:" + " VOLUME key-down while ringing: Silence ringer!");
            telecomManager.silenceRinger();
            result&=~ACTION_PASS_TO_USER;
            break;
          }
          if (telecomManager.isInCall() && (result & ACTION_PASS_TO_USER) == 0) {
            MediaSessionLegacyHelper.getHelper(mContext).sendVolumeKeyEvent(event,false);
            break;
          }
        }
        if ((result & ACTION_PASS_TO_USER) == 0) {
          MediaSessionLegacyHelper.getHelper(mContext).sendVolumeKeyEvent(event,true);
          break;
        }
      }
      break;
    }
case KeyEvent.KEYCODE_ENDCALL:
{
    result&=~ACTION_PASS_TO_USER;
    if (down) {
      TelecomManager telecomManager=getTelecommService();
      boolean hungUp=false;
      if (telecomManager != null) {
        hungUp=telecomManager.endCall();
      }
      interceptPowerKeyDown(!interactive || hungUp);
    }
 else {
      if (interceptPowerKeyUp(canceled)) {
        if ((mEndcallBehavior & Settings.System.END_BUTTON_BEHAVIOR_HOME) != 0) {
          if (goHome()) {
            break;
          }
        }
        if ((mEndcallBehavior & Settings.System.END_BUTTON_BEHAVIOR_SLEEP) != 0) {
          mPowerManager.goToSleep(event.getEventTime(),PowerManager.GO_TO_SLEEP_REASON_POWER_BUTTON,0);
          isWakeKey=false;
        }
      }
    }
    break;
  }
case KeyEvent.KEYCODE_POWER:
{
  result&=~ACTION_PASS_TO_USER;
  if (down) {
    boolean panic=mImmersiveModeConfirmation.onPowerKeyDown(interactive,event.getDownTime(),isImmersiveMode(mLastSystemUiFlags));
    if (panic) {
      mHandler.post(mRequestTransientNav);
    }
    if (interactive && !mPowerKeyTriggered && (event.getFlags() & KeyEvent.FLAG_FALLBACK) == 0) {
      mPowerKeyTriggered=true;
      mPowerKeyTime=event.getDownTime();
      interceptScreenshotChord();
    }
    TelecomManager telecomManager=getTelecommService();
    boolean hungUp=false;
    if (telecomManager != null) {
      if (telecomManager.isRinging()) {
        telecomManager.silenceRinger();
      }
 else       if ((mIncallPowerBehavior & Settings.Secure.INCALL_POWER_BUTTON_BEHAVIOR_HANGUP) != 0 && telecomManager.isInCall() && interactive) {
        hungUp=telecomManager.endCall();
      }
    }
    interceptPowerKeyDown(!interactive || hungUp || mVolumeDownKeyTriggered|| mVolumeUpKeyTriggered);
  }
 else {
    mPowerKeyTriggered=false;
    cancelPendingScreenshotChordAction();
    if (interceptPowerKeyUp(canceled || mPendingPowerKeyUpCanceled)) {
      if (mScreenOnEarly && !mScreenOnFully) {
        Slog.i(TAG,"Suppressed redundant power key press while " + "already in the process of turning the screen on.");
      }
 else {
        powerShortPress(event.getEventTime());
      }
      isWakeKey=false;
    }
    mPendingPowerKeyUpCanceled=false;
  }
  break;
}
case KeyEvent.KEYCODE_SLEEP:
{
result&=~ACTION_PASS_TO_USER;
if (!mPowerManager.isInteractive()) {
  useHapticFeedback=false;
}
mPowerManager.goToSleep(event.getEventTime(),PowerManager.GO_TO_SLEEP_REASON_POWER_BUTTON,0);
isWakeKey=false;
break;
}
case KeyEvent.KEYCODE_WAKEUP:
{
result&=~ACTION_PASS_TO_USER;
isWakeKey=true;
break;
}
case KeyEvent.KEYCODE_MEDIA_PLAY:
case KeyEvent.KEYCODE_MEDIA_PAUSE:
case KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE:
case KeyEvent.KEYCODE_HEADSETHOOK:
case KeyEvent.KEYCODE_MUTE:
case KeyEvent.KEYCODE_MEDIA_STOP:
case KeyEvent.KEYCODE_MEDIA_NEXT:
case KeyEvent.KEYCODE_MEDIA_PREVIOUS:
case KeyEvent.KEYCODE_MEDIA_REWIND:
case KeyEvent.KEYCODE_MEDIA_RECORD:
case KeyEvent.KEYCODE_MEDIA_FAST_FORWARD:
case KeyEvent.KEYCODE_MEDIA_AUDIO_TRACK:
{
if (MediaSessionLegacyHelper.getHelper(mContext).isGlobalPriorityActive()) {
result&=~ACTION_PASS_TO_USER;
}
if ((result & ACTION_PASS_TO_USER) == 0) {
mBroadcastWakeLock.acquire();
Message msg=mHandler.obtainMessage(MSG_DISPATCH_MEDIA_KEY_WITH_WAKE_LOCK,new KeyEvent(event));
msg.setAsynchronous(true);
msg.sendToTarget();
}
break;
}
case KeyEvent.KEYCODE_CALL:
{
if (down) {
TelecomManager telecomManager=getTelecommService();
if (telecomManager != null) {
if (telecomManager.isRinging()) {
Log.i(TAG,"interceptKeyBeforeQueueing:" + " CALL key-down while ringing: Answer the call!");
telecomManager.acceptRingingCall();
result&=~ACTION_PASS_TO_USER;
}
}
}
break;
}
case KeyEvent.KEYCODE_VOICE_ASSIST:
{
if ((result & ACTION_PASS_TO_USER) == 0 && !down) {
mBroadcastWakeLock.acquire();
Message msg=mHandler.obtainMessage(MSG_LAUNCH_VOICE_ASSIST_WITH_WAKE_LOCK,keyguardActive ? 1 : 0,0);
msg.setAsynchronous(true);
msg.sendToTarget();
}
}
}
if (useHapticFeedback) {
performHapticFeedbackLw(null,HapticFeedbackConstants.VIRTUAL_KEY,false);
}
if (isWakeKey) {
wakeUp(event.getEventTime(),keyCode == KeyEvent.KEYCODE_POWER ? mAllowTheaterModeWakeFromPowerKey : mAllowTheaterModeWakeFromKey);
}
return result;
}
