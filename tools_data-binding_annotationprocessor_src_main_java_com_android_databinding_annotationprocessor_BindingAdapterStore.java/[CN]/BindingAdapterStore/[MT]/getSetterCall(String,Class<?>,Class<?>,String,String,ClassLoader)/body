{
  HashMap<AccessorKey,BindingAdapterDescription> adapters=mAdapters.get(attribute);
  BindingAdapterDescription adapter=null;
  System.out.println("adapters for " + attribute + " are "+ adapters);
  if (adapters != null) {
    Class<?> bestViewType=null;
    Class<?> bestValueType=null;
    boolean bestTypeEquals=false;
    boolean bestTypeIsBoxed=false;
    int bestTypeImplicitConversion=Integer.MAX_VALUE;
    for (    AccessorKey key : adapters.keySet()) {
      try {
        Class<?> keyView=loadClass(key.viewType,classLoader);
        Class<?> keyValue=loadClass(key.valueType,classLoader);
        if (!keyView.isAssignableFrom(viewType)) {
          System.out.println("View type is wrong: " + keyView + " is not assignable from "+ viewType);
        }
        if (keyView.isAssignableFrom(viewType)) {
          boolean isBetterView=bestViewType == null || bestValueType.isAssignableFrom(keyView);
          System.out.println("View type is right: " + keyView + " is better? "+ isBetterView);
          boolean isBetterValueType;
          if (!isBetterView && bestTypeEquals) {
            System.out.println("best type is already equal");
            isBetterValueType=false;
          }
 else           if (valueType.equals(keyValue)) {
            isBetterValueType=true;
            bestTypeEquals=true;
            System.out.println("new type equals");
          }
 else           if (!isBetterView && bestTypeIsBoxed) {
            isBetterValueType=false;
          }
 else           if (isBoxingConversion(keyValue,valueType)) {
            isBetterValueType=true;
            bestTypeIsBoxed=true;
          }
 else           if (isImplicitConversion(valueType,keyValue)) {
            int conversionLevel=getConversionLevel(keyValue);
            isBetterValueType=conversionLevel < bestTypeImplicitConversion;
            if (isBetterValueType) {
              bestTypeImplicitConversion=conversionLevel;
            }
          }
 else           if (bestTypeImplicitConversion < Integer.MAX_VALUE) {
            isBetterValueType=false;
          }
 else           if (keyValue.isAssignableFrom(valueType)) {
            if (bestValueType == null) {
              isBetterValueType=true;
            }
 else {
              isBetterValueType=bestValueType.isAssignableFrom(keyValue);
            }
          }
 else {
            isBetterValueType=false;
          }
          if (isBetterValueType) {
            bestViewType=keyView;
            bestValueType=keyValue;
            adapter=adapters.get(key);
          }
        }
      }
 catch (      ClassNotFoundException e) {
        e.printStackTrace();
      }
    }
  }
  if (adapter == null) {
    int colonIndex=attribute.indexOf(':');
    String propertyName;
    if (colonIndex >= 0 && colonIndex + 1 < attribute.length()) {
      propertyName=Character.toUpperCase(attribute.charAt(colonIndex + 1)) + attribute.substring(colonIndex + 2);
    }
 else {
      propertyName="";
    }
    return viewExpression + ".set" + propertyName+ "("+ valueExpression+ ")";
  }
 else {
    return adapter.type + "." + adapter.method+ "("+ viewExpression+ ", "+ valueExpression+ ")";
  }
}
