{
synchronized (mLock) {
    checkIfCameraClosed();
    if (mRepeatingRequestId != REQUEST_ID_NONE) {
      int requestId=mRepeatingRequestId;
      mRepeatingRequestId=REQUEST_ID_NONE;
      if (mCaptureListenerMap.get(requestId) != null) {
        mRepeatingRequestIdDeletedList.add(requestId);
      }
      try {
        LongParcelable lastFrameNumberRef=new LongParcelable();
        mRemoteDevice.cancelRequest(requestId,lastFrameNumberRef);
        long lastFrameNumber=lastFrameNumberRef.getNumber();
        if ((lastFrameNumber < 0) && (requestId > 0)) {
          throw new AssertionError(String.format("returned bad frame number %d",lastFrameNumber));
        }
        mFrameNumberRequestPairs.add(new SimpleEntry<Long,Integer>(lastFrameNumber,requestId));
      }
 catch (      CameraRuntimeException e) {
        throw e.asChecked();
      }
catch (      RemoteException e) {
        return;
      }
    }
  }
}
