{
  int requestId=resultExtras.getRequestId();
  if (DEBUG) {
    Log.d(TAG,"Received result for id " + requestId);
  }
  final CaptureListenerHolder holder;
synchronized (mLock) {
    holder=CameraDevice.this.mCaptureListenerMap.get(requestId);
  }
  Boolean quirkPartial=result.get(CaptureResult.QUIRKS_PARTIAL_RESULT);
  boolean quirkIsPartialResult=(quirkPartial != null && quirkPartial);
  if (holder == null) {
    if (DEBUG) {
      Log.v(TAG,"holder is null, early return");
    }
    return;
  }
  if (isClosed()) {
    if (DEBUG) {
      Log.v(TAG,"camera is closed, early return");
    }
    return;
  }
  final CaptureRequest request=holder.getRequest(resultExtras.getSubsequenceId());
  final CaptureResult resultAsCapture=new CaptureResult(result,request,requestId);
  Runnable resultDispatch=null;
  if (quirkIsPartialResult) {
    resultDispatch=new Runnable(){
      @Override public void run(){
        if (!CameraDevice.this.isClosed()) {
          holder.getListener().onCapturePartial(CameraDevice.this,request,resultAsCapture);
        }
      }
    }
;
  }
 else {
    resultDispatch=new Runnable(){
      @Override public void run(){
        if (!CameraDevice.this.isClosed()) {
          holder.getListener().onCaptureCompleted(CameraDevice.this,request,resultAsCapture);
        }
      }
    }
;
  }
  holder.getHandler().post(resultDispatch);
  if (!quirkIsPartialResult) {
    mFrameNumberTracker.updateTracker(resultExtras.getFrameNumber(),false);
    checkAndFireSequenceComplete();
  }
}
