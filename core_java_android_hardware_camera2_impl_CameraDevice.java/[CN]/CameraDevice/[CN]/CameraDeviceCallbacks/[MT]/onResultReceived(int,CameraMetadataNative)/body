{
  if (DEBUG) {
    Log.d(TAG,"Received result for id " + requestId);
  }
  final CaptureListenerHolder holder;
  Boolean quirkPartial=result.get(CaptureResult.QUIRKS_PARTIAL_RESULT);
  boolean quirkIsPartialResult=(quirkPartial != null && quirkPartial);
synchronized (mLock) {
    holder=CameraDevice.this.mCaptureListenerMap.get(requestId);
    if (holder != null && !holder.isRepeating() && !quirkIsPartialResult) {
      CameraDevice.this.mCaptureListenerMap.remove(requestId);
    }
    if (holder != null && holder.isRepeating() && !quirkIsPartialResult && mRepeatingRequestIdDeletedList.size() > 0) {
      Iterator<Integer> iter=mRepeatingRequestIdDeletedList.iterator();
      while (iter.hasNext()) {
        int deletedRequestId=iter.next();
        if (deletedRequestId < requestId) {
          CameraDevice.this.mCaptureListenerMap.remove(deletedRequestId);
          iter.remove();
        }
      }
    }
  }
  if (holder == null) {
    return;
  }
  if (isClosed())   return;
  final CaptureRequest request=holder.getRequest();
  final CaptureResult resultAsCapture=new CaptureResult(result,request,requestId);
  Runnable resultDispatch=null;
  if (quirkIsPartialResult) {
    resultDispatch=new Runnable(){
      @Override public void run(){
        if (!CameraDevice.this.isClosed()) {
          holder.getListener().onCapturePartial(CameraDevice.this,request,resultAsCapture);
        }
      }
    }
;
  }
 else {
    resultDispatch=new Runnable(){
      @Override public void run(){
        if (!CameraDevice.this.isClosed()) {
          holder.getListener().onCaptureCompleted(CameraDevice.this,request,resultAsCapture);
        }
      }
    }
;
  }
  holder.getHandler().post(resultDispatch);
}
