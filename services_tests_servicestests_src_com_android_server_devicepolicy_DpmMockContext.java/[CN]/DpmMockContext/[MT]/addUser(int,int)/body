{
  final UserInfo uh=new UserInfo(userId,"user" + userId,flags);
  when(userManager.getUserInfo(eq(userId))).thenReturn(uh);
  mUserInfos.add(uh);
  when(userManager.getUsers()).thenReturn(mUserInfos);
  when(userManager.getUserInfo(anyInt())).thenAnswer(new Answer<UserInfo>(){
    @Override public UserInfo answer(    InvocationOnMock invocation) throws Throwable {
      final int userId=(int)invocation.getArguments()[0];
      for (      UserInfo ui : mUserInfos) {
        if (ui.id == userId) {
          return ui;
        }
      }
      return null;
    }
  }
);
  when(userManager.getProfiles(anyInt())).thenAnswer(new Answer<List<UserInfo>>(){
    @Override public List<UserInfo> answer(    InvocationOnMock invocation) throws Throwable {
      final int userId=(int)invocation.getArguments()[0];
      final ArrayList<UserInfo> ret=new ArrayList<UserInfo>();
      UserInfo parent=null;
      for (      UserInfo ui : mUserInfos) {
        if (ui.id == userId) {
          parent=ui;
          break;
        }
      }
      if (parent == null) {
        return ret;
      }
      ret.add(parent);
      for (      UserInfo ui : mUserInfos) {
        if (ui.id == userId) {
          continue;
        }
        if (ui.profileGroupId != UserInfo.NO_PROFILE_GROUP_ID && ui.profileGroupId == parent.profileGroupId) {
          ret.add(ui);
        }
      }
      return ret;
    }
  }
);
  final File dir=new File(dataDir,"user" + userId);
  DpmTestUtils.clearDir(dir);
  when(environment.getUserSystemDirectory(eq(userId))).thenReturn(dir);
  return dir;
}
