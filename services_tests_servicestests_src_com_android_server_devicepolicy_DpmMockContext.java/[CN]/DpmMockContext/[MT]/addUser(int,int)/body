{
  final UserInfo uh=new UserInfo(userId,"user" + userId,flags);
  when(userManager.getUserInfo(eq(userId))).thenReturn(uh);
  mUserInfos.add(uh);
  when(userManager.getUsers()).thenReturn(mUserInfos);
  when(userManager.getUsers(anyBoolean())).thenReturn(mUserInfos);
  when(userManager.isUserRunning(eq(new UserHandle(userId)))).thenReturn(true);
  when(userManager.getUserInfo(anyInt())).thenAnswer(new Answer<UserInfo>(){
    @Override public UserInfo answer(    InvocationOnMock invocation) throws Throwable {
      final int userId=(int)invocation.getArguments()[0];
      for (      UserInfo ui : mUserInfos) {
        if (ui.id == userId) {
          return ui;
        }
      }
      return null;
    }
  }
);
  when(userManager.getProfiles(anyInt())).thenAnswer(new Answer<List<UserInfo>>(){
    @Override public List<UserInfo> answer(    InvocationOnMock invocation) throws Throwable {
      final int userId=(int)invocation.getArguments()[0];
      return getProfiles(userId);
    }
  }
);
  when(userManager.getProfileIdsWithDisabled(anyInt())).thenAnswer(new Answer<int[]>(){
    @Override public int[] answer(    InvocationOnMock invocation) throws Throwable {
      final int userId=(int)invocation.getArguments()[0];
      List<UserInfo> profiles=getProfiles(userId);
      int[] results=new int[profiles.size()];
      for (int i=0; i < results.length; i++) {
        results[i]=profiles.get(i).id;
      }
      return results;
    }
  }
);
  final File dir=new File(dataDir,"user" + userId);
  DpmTestUtils.clearDir(dir);
  when(environment.getUserSystemDirectory(eq(userId))).thenReturn(dir);
  return dir;
}
