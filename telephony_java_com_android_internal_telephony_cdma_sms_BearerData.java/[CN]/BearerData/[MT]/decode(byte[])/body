{
  try {
    BitwiseInputStream inStream=new BitwiseInputStream(smsData);
    BearerData bData=new BearerData();
    int foundSubparamMask=0;
    while (inStream.available() > 0) {
      int subparamId=inStream.read(8);
      int subparamIdBit=1 << subparamId;
      if ((foundSubparamMask & subparamIdBit) != 0) {
        throw new CodingException("illegal duplicate subparameter (" + subparamId + ")");
      }
      foundSubparamMask|=subparamIdBit;
switch (subparamId) {
case SUBPARAM_MESSAGE_IDENTIFIER:
        decodeMessageId(bData,inStream);
      break;
case SUBPARAM_USER_DATA:
    decodeUserData(bData,inStream);
  break;
case SUBPARAM_USER_REPONSE_CODE:
decodeUserResponseCode(bData,inStream);
break;
case SUBPARAM_REPLY_OPTION:
decodeReplyOption(bData,inStream);
break;
case SUBPARAM_NUMBER_OF_MESSAGES:
decodeMsgCount(bData,inStream);
break;
case SUBPARAM_CALLBACK_NUMBER:
decodeCallbackNumber(bData,inStream);
break;
case SUBPARAM_MESSAGE_STATUS:
decodeMsgStatus(bData,inStream);
break;
case SUBPARAM_MESSAGE_CENTER_TIME_STAMP:
decodeMsgCenterTimeStamp(bData,inStream);
break;
case SUBPARAM_VALIDITY_PERIOD_ABSOLUTE:
decodeValidityAbs(bData,inStream);
break;
case SUBPARAM_VALIDITY_PERIOD_RELATIVE:
decodeValidityRel(bData,inStream);
break;
case SUBPARAM_DEFERRED_DELIVERY_TIME_ABSOLUTE:
decodeDeferredDeliveryAbs(bData,inStream);
break;
case SUBPARAM_DEFERRED_DELIVERY_TIME_RELATIVE:
decodeDeferredDeliveryRel(bData,inStream);
break;
case SUBPARAM_PRIVACY_INDICATOR:
decodePrivacyIndicator(bData,inStream);
break;
case SUBPARAM_LANGUAGE_INDICATOR:
decodeLanguageIndicator(bData,inStream);
break;
case SUBPARAM_MESSAGE_DISPLAY_MODE:
decodeDisplayMode(bData,inStream);
break;
case SUBPARAM_PRIORITY_INDICATOR:
decodePriorityIndicator(bData,inStream);
break;
case SUBPARAM_ALERT_ON_MESSAGE_DELIVERY:
decodeMsgDeliveryAlert(bData,inStream);
break;
case SUBPARAM_MESSAGE_DEPOSIT_INDEX:
decodeDepositIndex(bData,inStream);
break;
default :
throw new CodingException("unsupported bearer data subparameter (" + subparamId + ")");
}
}
if ((foundSubparamMask & (1 << SUBPARAM_MESSAGE_IDENTIFIER)) == 0) {
throw new CodingException("missing MESSAGE_IDENTIFIER subparam");
}
if (bData.userData != null) {
if (bData.userData.msgEncoding == UserData.ENCODING_IS91_EXTENDED_PROTOCOL) {
if ((foundSubparamMask ^ (1 << SUBPARAM_MESSAGE_IDENTIFIER) ^ (1 << SUBPARAM_USER_DATA)) != 0) {
Log.e(LOG_TAG,"IS-91 must occur without extra subparams (" + foundSubparamMask + ")");
}
decodeIs91(bData);
}
 else {
decodeUserDataPayload(bData.userData,bData.hasUserDataHeader);
}
}
return bData;
}
 catch (BitwiseInputStream.AccessException ex) {
Log.e(LOG_TAG,"BearerData decode failed: " + ex);
}
catch (CodingException ex) {
Log.e(LOG_TAG,"BearerData decode failed: " + ex);
}
return null;
}
