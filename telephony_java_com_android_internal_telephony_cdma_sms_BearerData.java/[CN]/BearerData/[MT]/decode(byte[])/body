{
  try {
    BitwiseInputStream inStream=new BitwiseInputStream(smsData);
    BearerData bData=new BearerData();
    int foundSubparamMask=0;
    while (inStream.available() > 0) {
      int subparamId=inStream.read(8);
      int subparamIdBit=1 << subparamId;
      if ((foundSubparamMask & subparamIdBit) != 0) {
        throw new CodingException("illegal duplicate subparameter (" + subparamId + ")");
      }
      foundSubparamMask|=subparamIdBit;
switch (subparamId) {
case SUBPARAM_MESSAGE_IDENTIFIER:
        decodeMessageId(bData,inStream);
      break;
case SUBPARAM_USER_DATA:
    decodeUserData(bData,inStream);
  break;
case SUBPARAM_REPLY_OPTION:
decodeReplyOption(bData,inStream);
break;
case SUBPARAM_NUMBER_OF_MESSAGES:
decodeMsgCount(bData,inStream);
break;
case SUBPARAM_CALLBACK_NUMBER:
decodeCallbackNumber(bData,inStream);
break;
case SUBPARAM_MESSAGE_STATUS:
decodeMsgStatus(bData,inStream);
break;
case SUBPARAM_MESSAGE_CENTER_TIME_STAMP:
decodeMsgCenterTimeStamp(bData,inStream);
break;
default :
throw new CodingException("unsupported bearer data subparameter (" + subparamId + ")");
}
}
if ((foundSubparamMask & (1 << SUBPARAM_MESSAGE_IDENTIFIER)) == 0) {
throw new CodingException("missing MESSAGE_IDENTIFIER subparam");
}
if (bData.userData != null) {
decodeUserDataPayload(bData.userData,bData.hasUserDataHeader);
}
return bData;
}
 catch (BitwiseInputStream.AccessException ex) {
Log.e(LOG_TAG,"BearerData decode failed: " + ex);
}
catch (CodingException ex) {
Log.e(LOG_TAG,"BearerData decode failed: " + ex);
}
return null;
}
