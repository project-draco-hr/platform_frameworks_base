{
  BitwiseInputStream inStream=new BitwiseInputStream(bData.userData.payload);
  if (inStream.available() < 8) {
    throw new CodingException("emergency CB with no CMAE_protocol_version");
  }
  int protocolVersion=inStream.read(8);
  if (protocolVersion != 0) {
    throw new CodingException("unsupported CMAE_protocol_version " + protocolVersion);
  }
  int messageClass=serviceCategoryToCmasMessageClass(serviceCategory);
  int category=SmsCbCmasInfo.CMAS_CATEGORY_UNKNOWN;
  int responseType=SmsCbCmasInfo.CMAS_RESPONSE_TYPE_UNKNOWN;
  int severity=SmsCbCmasInfo.CMAS_SEVERITY_UNKNOWN;
  int urgency=SmsCbCmasInfo.CMAS_URGENCY_UNKNOWN;
  int certainty=SmsCbCmasInfo.CMAS_CERTAINTY_UNKNOWN;
  while (inStream.available() >= 16) {
    int recordType=inStream.read(8);
    int recordLen=inStream.read(8);
switch (recordType) {
case 0:
      UserData alertUserData=new UserData();
    alertUserData.msgEncoding=inStream.read(5);
  alertUserData.msgEncodingSet=true;
alertUserData.msgType=0;
int numFields;
switch (alertUserData.msgEncoding) {
case UserData.ENCODING_OCTET:
case UserData.ENCODING_LATIN:
numFields=recordLen - 1;
break;
case UserData.ENCODING_IA5:
case UserData.ENCODING_7BIT_ASCII:
case UserData.ENCODING_GSM_7BIT_ALPHABET:
numFields=((recordLen * 8) - 5) / 7;
break;
case UserData.ENCODING_UNICODE_16:
numFields=(recordLen - 1) / 2;
break;
default :
numFields=0;
}
alertUserData.numFields=numFields;
alertUserData.payload=inStream.readByteArray(recordLen * 8 - 5);
decodeUserDataPayload(alertUserData,false);
bData.userData=alertUserData;
break;
case 1:
category=inStream.read(8);
responseType=inStream.read(8);
severity=inStream.read(4);
urgency=inStream.read(4);
certainty=inStream.read(4);
inStream.skip(recordLen * 8 - 28);
break;
default :
Log.w(LOG_TAG,"skipping unsupported CMAS record type " + recordType);
inStream.skip(recordLen * 8);
break;
}
}
bData.cmasWarningInfo=new SmsCbCmasInfo(messageClass,category,responseType,severity,urgency,certainty);
}
