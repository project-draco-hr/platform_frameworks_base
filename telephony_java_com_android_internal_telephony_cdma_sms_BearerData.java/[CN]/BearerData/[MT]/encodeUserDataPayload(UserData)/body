{
  byte[] headerData=null;
  if (uData.userDataHeader != null)   headerData=SmsHeader.toByteArray(uData.userDataHeader);
  int headerDataLen=(headerData == null) ? 0 : headerData.length + 1;
  byte[] payloadData;
  if (uData.msgEncodingSet) {
    if (uData.msgEncoding == UserData.ENCODING_OCTET) {
      if (uData.payload == null) {
        Log.e(LOG_TAG,"user data with octet encoding but null payload");
        payloadData=new byte[0];
      }
 else {
        payloadData=uData.payload;
      }
    }
 else {
      if (uData.payloadStr == null) {
        Log.e(LOG_TAG,"non-octet user data with null payloadStr");
        uData.payloadStr="";
      }
      if (uData.msgEncoding == UserData.ENCODING_GSM_7BIT_ALPHABET) {
        payloadData=encode7bitGsm(uData.payloadStr);
      }
 else       if (uData.msgEncoding == UserData.ENCODING_7BIT_ASCII) {
        SeptetData septetData=encode7bitAscii(uData.payloadStr,true);
        payloadData=septetData.data;
      }
 else       if (uData.msgEncoding == UserData.ENCODING_UNICODE_16) {
        payloadData=encodeUtf16(uData.payloadStr);
      }
 else {
        throw new CodingException("unsupported user data encoding (" + uData.msgEncoding + ")");
      }
      uData.numFields=uData.payloadStr.length();
    }
  }
 else {
    if (uData.payloadStr == null) {
      Log.e(LOG_TAG,"user data with null payloadStr");
      uData.payloadStr="";
    }
    try {
      SeptetData septetData=encode7bitAscii(uData.payloadStr,false);
      payloadData=septetData.data;
      uData.msgEncoding=UserData.ENCODING_7BIT_ASCII;
    }
 catch (    CodingException ex) {
      payloadData=encodeUtf16(uData.payloadStr);
      uData.msgEncoding=UserData.ENCODING_UNICODE_16;
    }
    uData.msgEncodingSet=true;
    uData.numFields=uData.payloadStr.length();
  }
  int totalLength=payloadData.length + headerDataLen;
  if (totalLength > SmsMessage.MAX_USER_DATA_BYTES) {
    throw new CodingException("encoded user data too large (" + totalLength + " > "+ SmsMessage.MAX_USER_DATA_BYTES+ " bytes)");
  }
  uData.payload=new byte[totalLength];
  if (headerData != null) {
    uData.payload[0]=(byte)headerData.length;
    System.arraycopy(headerData,0,uData.payload,1,headerData.length);
  }
  System.arraycopy(payloadData,0,uData.payload,headerDataLen,payloadData.length);
}
