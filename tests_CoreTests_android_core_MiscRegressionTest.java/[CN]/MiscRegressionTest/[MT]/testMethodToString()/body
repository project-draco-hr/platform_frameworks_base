{
  try {
    Method m1=Object.class.getMethod("notify",new Class[]{});
    Method m2=Object.class.getMethod("toString",new Class[]{});
    Method m3=Object.class.getMethod("wait",new Class[]{long.class,int.class});
    Method m4=Object.class.getMethod("equals",new Class[]{Object.class});
    Method m5=String.class.getMethod("valueOf",new Class[]{char[].class});
    Method m6=Runtime.class.getMethod("exec",new Class[]{String[].class});
    assertEquals("Method.toString() must match expectations","public final native void java.lang.Object.notify()",m1.toString());
    assertEquals("Method.toString() must match expectations","public java.lang.String java.lang.Object.toString()",m2.toString());
    assertEquals("Method.toString() must match expectations","public final native void java.lang.Object.wait(long,int) throws java.lang.InterruptedException",m3.toString());
    assertEquals("Method.toString() must match expectations","public boolean java.lang.Object.equals(java.lang.Object)",m4.toString());
    assertEquals("Method.toString() must match expectations","public static java.lang.String java.lang.String.valueOf(char[])",m5.toString());
    assertEquals("Method.toString() must match expectations","public java.lang.Process java.lang.Runtime.exec(java.lang.String[]) throws java.io.IOException",m6.toString());
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
}
