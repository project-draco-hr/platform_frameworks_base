{
  parser.require(XmlPullParser.START_TAG,null,tagName);
  String name=null;
  String packageName=null;
  List<String> mDNSNames=null;
  while (parser.next() != XmlPullParser.END_TAG) {
    if (parser.getEventType() != XmlPullParser.START_TAG) {
      continue;
    }
    String subTagName=parser.getName();
switch (subTagName) {
case NAME_TAG:
      name=readSimpleTag(context,parser,NAME_TAG,false);
    break;
case PACKAGE_TAG:
  packageName=readSimpleTag(context,parser,PACKAGE_TAG,true);
break;
case MDNSNAMES_TAG:
mDNSNames=readTagList(parser,MDNSNAMES_TAG,MDNSNAME_TAG,new TagReader<String>(){
public String readTag(XmlPullParser parser,String tagName) throws XmlPullParserException, IOException {
  return readSimpleTag(context,parser,tagName,true);
}
}
);
break;
default :
throw new XmlPullParserException("Unexpected subtag of " + tagName + ": "+ subTagName);
}
}
if (name == null) {
throw new XmlPullParserException("name is required");
}
if (packageName == null) {
throw new XmlPullParserException("package is required");
}
if (mDNSNames == null) {
mDNSNames=Collections.emptyList();
}
mDNSNames=Collections.unmodifiableList(mDNSNames);
return new VendorConfig(name,packageName,mDNSNames);
}
