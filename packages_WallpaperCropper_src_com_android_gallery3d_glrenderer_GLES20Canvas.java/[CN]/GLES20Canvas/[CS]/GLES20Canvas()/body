{
  Matrix.setIdentityM(mTempTextureMatrix,0);
  Matrix.setIdentityM(mMatrices,mCurrentMatrixIndex);
  mAlphas[mCurrentAlphaIndex]=1f;
  mTargetTextures.add(null);
  FloatBuffer boxBuffer=createBuffer(BOX_COORDINATES);
  mBoxCoordinates=uploadBuffer(boxBuffer);
  int drawVertexShader=loadShader(GLES20.GL_VERTEX_SHADER,DRAW_VERTEX_SHADER);
  int textureVertexShader=loadShader(GLES20.GL_VERTEX_SHADER,TEXTURE_VERTEX_SHADER);
  int meshVertexShader=loadShader(GLES20.GL_VERTEX_SHADER,MESH_VERTEX_SHADER);
  int drawFragmentShader=loadShader(GLES20.GL_FRAGMENT_SHADER,DRAW_FRAGMENT_SHADER);
  int textureFragmentShader=loadShader(GLES20.GL_FRAGMENT_SHADER,TEXTURE_FRAGMENT_SHADER);
  int oesTextureFragmentShader=loadShader(GLES20.GL_FRAGMENT_SHADER,OES_TEXTURE_FRAGMENT_SHADER);
  mDrawProgram=assembleProgram(drawVertexShader,drawFragmentShader,mDrawParameters);
  mTextureProgram=assembleProgram(textureVertexShader,textureFragmentShader,mTextureParameters);
  mOesTextureProgram=assembleProgram(textureVertexShader,oesTextureFragmentShader,mOesTextureParameters);
  mMeshProgram=assembleProgram(meshVertexShader,textureFragmentShader,mMeshParameters);
  GLES20.glBlendFunc(GLES20.GL_ONE,GLES20.GL_ONE_MINUS_SRC_ALPHA);
  checkError();
}
