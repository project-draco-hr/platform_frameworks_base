{
  assertOpen();
  CharArrayBuffer current=new CharArrayBuffer(64);
  if (inbuffer.readLine(current) == -1) {
    throw new NoHttpResponseException("The target server failed to respond");
  }
  StatusLine statusline=BasicLineParser.DEFAULT.parseStatusLine(current,new ParserCursor(0,current.length()));
  if (HttpLog.LOGV)   HttpLog.v("read: " + statusline);
  int statusCode=statusline.getStatusCode();
  CharArrayBuffer previous=null;
  int headerNumber=0;
  while (true) {
    if (current == null) {
      current=new CharArrayBuffer(64);
    }
 else {
      current.clear();
    }
    int l=inbuffer.readLine(current);
    if (l == -1 || current.length() < 1) {
      break;
    }
    char first=current.charAt(0);
    if ((first == ' ' || first == '\t') && previous != null) {
      int start=0;
      int length=current.length();
      while (start < length) {
        char ch=current.charAt(start);
        if (ch != ' ' && ch != '\t') {
          break;
        }
        start++;
      }
      if (maxLineLength > 0 && previous.length() + 1 + current.length() - start > maxLineLength) {
        throw new IOException("Maximum line length limit exceeded");
      }
      previous.append(' ');
      previous.append(current,start,current.length() - start);
    }
 else {
      if (previous != null) {
        headers.parseHeader(previous);
      }
      headerNumber++;
      previous=current;
      current=null;
    }
    if (maxHeaderCount > 0 && headerNumber >= maxHeaderCount) {
      throw new IOException("Maximum header count exceeded");
    }
  }
  if (previous != null) {
    headers.parseHeader(previous);
  }
  if (statusCode >= 200) {
    this.metrics.incrementResponseCount();
  }
  return statusline;
}
