{
  if (msg.target == null) {
    throw new IllegalArgumentException("Message must have a target.");
  }
  if (msg.isInUse()) {
    throw new IllegalStateException(msg + " This message is already in use.");
  }
synchronized (this) {
    if (mQuitting) {
      IllegalStateException e=new IllegalStateException(msg.target + " sending message to a Handler on a dead thread");
      Log.w("MessageQueue",e.getMessage(),e);
      msg.recycle();
      return false;
    }
    msg.markInUse();
    msg.when=when;
    Message p=mMessages;
    boolean needWake;
    if (p == null || when == 0 || when < p.when) {
      msg.next=p;
      mMessages=msg;
      needWake=mBlocked;
    }
 else {
      needWake=mBlocked && p.target == null && msg.isAsynchronous();
      Message prev;
      for (; ; ) {
        prev=p;
        p=p.next;
        if (p == null || when < p.when) {
          break;
        }
        if (needWake && p.isAsynchronous()) {
          needWake=false;
        }
      }
      msg.next=p;
      prev.next=msg;
    }
    if (needWake) {
      nativeWake(mPtr);
    }
  }
  return true;
}
