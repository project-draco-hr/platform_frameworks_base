{
  if (mFonts.size() > 0) {
    FontInfo mainFont=mFonts.get(0);
    int i=index;
    int lastIndex=index + count;
    float total=0f;
    while (i < lastIndex) {
      int upTo=mainFont.mFont.canDisplayUpTo(text,i,lastIndex);
      if (upTo == -1) {
        return total + mainFont.mMetrics.charsWidth(text,i,lastIndex - i);
      }
 else       if (upTo > 0) {
        total+=mainFont.mMetrics.charsWidth(text,i,upTo - i);
        i=upTo;
      }
      boolean foundFont=false;
      for (int f=1; f < mFonts.size(); f++) {
        FontInfo fontInfo=mFonts.get(f);
        int charCount=Character.isHighSurrogate(text[i]) ? 2 : 1;
        upTo=fontInfo.mFont.canDisplayUpTo(text,i,i + charCount);
        if (upTo == -1) {
          total+=fontInfo.mMetrics.charsWidth(text,i,charCount);
          i+=charCount;
          foundFont=true;
          break;
        }
      }
      if (foundFont == false) {
        int size=Character.isHighSurrogate(text[i]) ? 2 : 1;
        total+=mainFont.mMetrics.charsWidth(text,i,size);
        i+=size;
      }
    }
  }
  return 0;
}
