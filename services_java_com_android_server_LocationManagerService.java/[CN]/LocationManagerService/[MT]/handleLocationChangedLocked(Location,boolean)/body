{
  long now=SystemClock.elapsedRealtime();
  String provider=(passive ? LocationManager.PASSIVE_PROVIDER : location.getProvider());
  ArrayList<UpdateRecord> records=mRecordsByProvider.get(provider);
  if (records == null || records.size() == 0)   return;
  LocationProviderInterface p=mProvidersByName.get(provider);
  if (p == null)   return;
  Location coarse=getCoarseLocationExtra(location);
  if (coarse == null) {
    coarse=addCoarseLocationExtra(location);
  }
  Location lastLocation=mLastLocation.get(provider);
  if (lastLocation == null) {
    lastLocation=new Location(provider);
    mLastLocation.put(provider,lastLocation);
  }
  lastLocation.set(location);
  long newStatusUpdateTime=p.getStatusUpdateTime();
  Bundle extras=new Bundle();
  int status=p.getStatus(extras);
  ArrayList<Receiver> deadReceivers=null;
  ArrayList<UpdateRecord> deadUpdateRecords=null;
  for (  UpdateRecord r : records) {
    Receiver receiver=r.mReceiver;
    boolean receiverDead=false;
    if (ACCESS_FINE_LOCATION.equals(receiver.mPermission)) {
      location=lastLocation;
    }
 else {
      location=coarse;
    }
    Location lastLoc=r.mLastFixBroadcast;
    if ((lastLoc == null) || shouldBroadcastSafe(location,lastLoc,r)) {
      if (lastLoc == null) {
        lastLoc=new Location(location);
        r.mLastFixBroadcast=lastLoc;
      }
 else {
        lastLoc.set(location);
      }
      if (!receiver.callLocationChangedLocked(location)) {
        Slog.w(TAG,"RemoteException calling onLocationChanged on " + receiver);
        receiverDead=true;
      }
    }
    long prevStatusUpdateTime=r.mLastStatusBroadcast;
    if ((newStatusUpdateTime > prevStatusUpdateTime) && (prevStatusUpdateTime != 0 || status != LocationProvider.AVAILABLE)) {
      r.mLastStatusBroadcast=newStatusUpdateTime;
      if (!receiver.callStatusChangedLocked(provider,status,extras)) {
        receiverDead=true;
        Slog.w(TAG,"RemoteException calling onStatusChanged on " + receiver);
      }
    }
    if (r.mRequest.getNumUpdates() == 0 || r.mRequest.getExpireAt() < now) {
      if (deadUpdateRecords == null) {
        deadUpdateRecords=new ArrayList<UpdateRecord>();
      }
      deadUpdateRecords.add(r);
    }
    if (receiverDead) {
      if (deadReceivers == null) {
        deadReceivers=new ArrayList<Receiver>();
      }
      if (!deadReceivers.contains(receiver)) {
        deadReceivers.add(receiver);
      }
    }
  }
  if (deadReceivers != null) {
    for (    Receiver receiver : deadReceivers) {
      removeUpdatesLocked(receiver);
    }
  }
  if (deadUpdateRecords != null) {
    for (    UpdateRecord r : deadUpdateRecords) {
      r.disposeLocked(true);
    }
  }
}
