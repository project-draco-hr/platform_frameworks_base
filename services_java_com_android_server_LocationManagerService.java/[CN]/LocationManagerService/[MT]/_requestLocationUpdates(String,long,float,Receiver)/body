{
  Object key=receiver.getKey();
  if (Config.LOGD) {
    Log.d(TAG,"_requestLocationUpdates: listener = " + key);
  }
  LocationProviderImpl impl=LocationProviderImpl.getProvider(provider);
  if (impl == null) {
    throw new IllegalArgumentException("provider=" + provider);
  }
  checkPermissions(provider);
  String[] packages=getPackageNames();
  mCallingUid=getCallingUid();
  long identity=Binder.clearCallingIdentity();
  try {
    UpdateRecord r=new UpdateRecord(provider,minTime,minDistance,receiver,packages);
synchronized (mLocationListeners) {
      if (mListeners.get(key) == null) {
        try {
          if (receiver.isListener()) {
            receiver.getListener().asBinder().linkToDeath(receiver,0);
          }
          mListeners.put(key,receiver);
        }
 catch (        RemoteException e) {
          return;
        }
      }
      HashMap<String,UpdateRecord> records=mLocationListeners.get(key);
      if (records == null) {
        records=new HashMap<String,UpdateRecord>();
        mLocationListeners.put(key,records);
      }
      UpdateRecord oldRecord=records.put(provider,r);
      if (oldRecord != null) {
        oldRecord.dispose();
      }
      boolean isProviderEnabled=isAllowedBySettings(provider);
      if (isProviderEnabled) {
        if (provider.equals(LocationManager.GPS_PROVIDER)) {
          try {
            mBatteryStats.noteRequestGpsOn(mCallingUid);
          }
 catch (          RemoteException e) {
            Log.w(TAG,"Got RemoteException calling noteRequestGpsOff",e);
          }
        }
        long minTimeForProvider=getMinTime(provider);
        impl.setMinTime(minTimeForProvider);
        impl.enableLocationTracking(true);
        updateWakelockStatus(mScreenOn);
        mLocationHandler.removeMessages(MESSAGE_HEARTBEAT,provider);
        Message m=Message.obtain(mLocationHandler,MESSAGE_HEARTBEAT,provider);
        mLocationHandler.sendMessageAtTime(m,SystemClock.uptimeMillis() + 1000);
      }
 else {
        try {
          if (receiver.isListener()) {
            receiver.getListener().onProviderDisabled(provider);
          }
        }
 catch (        RemoteException e) {
          Log.w(TAG,"RemoteException calling onProviderDisabled on " + receiver.getListener());
        }
      }
    }
  }
  finally {
    Binder.restoreCallingIdentity(identity);
    mCallingUid=-1;
  }
}
