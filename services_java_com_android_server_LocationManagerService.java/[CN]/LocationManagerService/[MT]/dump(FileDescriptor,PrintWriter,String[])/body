{
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println("Permission Denial: can't dump AlarmManager from from pid=" + Binder.getCallingPid() + ", uid="+ Binder.getCallingUid());
    return;
  }
synchronized (mLocationListeners) {
    pw.println("Current Location Manager state:");
    pw.println("  sProvidersLoaded=" + sProvidersLoaded);
    pw.println("  mGpsLocationProvider=" + mGpsLocationProvider);
    pw.println("  mGpsNavigating=" + mGpsNavigating);
    pw.println("  mNetworkLocationProvider=" + mNetworkLocationProvider);
    pw.println("  mNetworkLocationInterface=" + mNetworkLocationInterface);
    pw.println("  mCollector=" + mCollector);
    pw.println("  mSignalStrength=" + mSignalStrength);
    pw.println("  mAlarmInterval=" + mAlarmInterval + " mScreenOn="+ mScreenOn+ " mWakeLockAcquireTime="+ mWakeLockAcquireTime);
    pw.println("  mWakeLockGpsReceived=" + mWakeLockGpsReceived + " mWakeLockNetworkReceived="+ mWakeLockNetworkReceived);
    pw.println("  mWifiWakeLockAcquired=" + mWifiWakeLockAcquired + " mCellWakeLockAcquired="+ mCellWakeLockAcquired);
    pw.println("  Listeners:");
    int N=mListeners.size();
    for (int i=0; i < N; i++) {
      pw.println("    " + mListeners.get(i));
    }
    pw.println("  Location Listeners:");
    for (    Map.Entry<Receiver,HashMap<String,UpdateRecord>> i : mLocationListeners.entrySet()) {
      pw.println("    " + i.getKey() + ":");
      for (      Map.Entry<String,UpdateRecord> j : i.getValue().entrySet()) {
        pw.println("      " + j.getKey() + ":");
        j.getValue().dump(pw,"        ");
      }
    }
    pw.println("  Last Fix Broadcasts:");
    for (    Map.Entry<Receiver,HashMap<String,Location>> i : mLastFixBroadcast.entrySet()) {
      pw.println("    " + i.getKey() + ":");
      for (      Map.Entry<String,Location> j : i.getValue().entrySet()) {
        pw.println("      " + j.getKey() + ":");
        j.getValue().dump(new PrintWriterPrinter(pw),"        ");
      }
    }
    pw.println("  Last Status Broadcasts:");
    for (    Map.Entry<Receiver,HashMap<String,Long>> i : mLastStatusBroadcast.entrySet()) {
      pw.println("    " + i.getKey() + ":");
      for (      Map.Entry<String,Long> j : i.getValue().entrySet()) {
        pw.println("      " + j.getKey() + " -> 0x"+ Long.toHexString(j.getValue()));
      }
    }
    pw.println("  Records by Provider:");
    for (    Map.Entry<String,ArrayList<UpdateRecord>> i : mRecordsByProvider.entrySet()) {
      pw.println("    " + i.getKey() + ":");
      for (      UpdateRecord j : i.getValue()) {
        pw.println("      " + j + ":");
        j.dump(pw,"        ");
      }
    }
    pw.println("  Locations by Provider:");
    for (    Map.Entry<String,Location> i : mLocationsByProvider.entrySet()) {
      pw.println("    " + i.getKey() + ":");
      i.getValue().dump(new PrintWriterPrinter(pw),"      ");
    }
    pw.println("  Last Known Locations:");
    for (    Map.Entry<String,Location> i : mLastKnownLocation.entrySet()) {
      pw.println("    " + i.getKey() + ":");
      i.getValue().dump(new PrintWriterPrinter(pw),"      ");
    }
    if (mProximityAlerts.size() > 0) {
      pw.println("  Proximity Alerts:");
      for (      Map.Entry<PendingIntent,ProximityAlert> i : mProximityAlerts.entrySet()) {
        pw.println("    " + i.getKey() + ":");
        i.getValue().dump(pw,"      ");
      }
    }
    if (mProximitiesEntered.size() > 0) {
      pw.println("  Proximities Entered:");
      for (      ProximityAlert i : mProximitiesEntered) {
        pw.println("    " + i + ":");
        i.dump(pw,"      ");
      }
    }
    pw.println("  mProximityListener=" + mProximityListener);
    if (mEnabledProviders.size() > 0) {
      pw.println("  Enabled Providers:");
      for (      String i : mEnabledProviders) {
        pw.println("    " + i);
      }
    }
    if (mDisabledProviders.size() > 0) {
      pw.println("  Disabled Providers:");
      for (      String i : mDisabledProviders) {
        pw.println("    " + i);
      }
    }
    if (mMockProviders.size() > 0) {
      pw.println("  Mock Providers:");
      for (      Map.Entry<String,MockProvider> i : mMockProviders.entrySet()) {
        pw.println("    " + i.getKey() + " -> "+ i.getValue());
      }
    }
    if (mMockProviderLocation.size() > 0) {
      pw.println("  Mock Provider Location:");
      for (      Map.Entry<String,Location> i : mMockProviderLocation.entrySet()) {
        pw.println("    " + i.getKey() + ":");
        i.getValue().dump(new PrintWriterPrinter(pw),"      ");
      }
    }
    if (mMockProviderStatus.size() > 0) {
      pw.println("  Mock Provider Status:");
      for (      Map.Entry<String,Integer> i : mMockProviderStatus.entrySet()) {
        pw.println("    " + i.getKey() + " -> 0x"+ Integer.toHexString(i.getValue()));
      }
    }
    if (mMockProviderStatusExtras.size() > 0) {
      pw.println("  Mock Provider Status Extras:");
      for (      Map.Entry<String,Bundle> i : mMockProviderStatusExtras.entrySet()) {
        pw.println("    " + i.getKey() + " -> "+ i.getValue());
      }
    }
    if (mMockProviderStatusUpdateTime.size() > 0) {
      pw.println("  Mock Provider Status Update Time:");
      for (      Map.Entry<String,Long> i : mMockProviderStatusUpdateTime.entrySet()) {
        pw.println("    " + i.getKey() + " -> "+ i.getValue());
      }
    }
    pw.println("  Reported GPS UIDs @ seq " + mReportedGpsSeq + ":");
    N=mReportedGpsUids.size();
    for (int i=0; i < N; i++) {
      pw.println("    UID " + mReportedGpsUids.keyAt(i) + " seq="+ mReportedGpsUids.valueAt(i));
    }
  }
}
