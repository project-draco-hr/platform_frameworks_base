{
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println("Permission Denial: can't dump LocationManagerService from from pid=" + Binder.getCallingPid() + ", uid="+ Binder.getCallingUid());
    return;
  }
synchronized (mLock) {
    pw.println("Current Location Manager state:");
    pw.println("  Location Listeners:");
    for (    Receiver receiver : mReceivers.values()) {
      pw.println("    " + receiver);
    }
    pw.println("  Records by Provider:");
    for (    Map.Entry<String,ArrayList<UpdateRecord>> entry : mRecordsByProvider.entrySet()) {
      pw.println("    " + entry.getKey() + ":");
      for (      UpdateRecord record : entry.getValue()) {
        pw.println("      " + record);
      }
    }
    pw.println("  Last Known Locations:");
    for (    Map.Entry<String,Location> entry : mLastLocation.entrySet()) {
      String provider=entry.getKey();
      Location location=entry.getValue();
      pw.println("    " + provider + ": "+ location);
    }
    mGeofenceManager.dump(pw);
    if (mEnabledProviders.size() > 0) {
      pw.println("  Enabled Providers:");
      for (      String i : mEnabledProviders) {
        pw.println("    " + i);
      }
    }
    if (mDisabledProviders.size() > 0) {
      pw.println("  Disabled Providers:");
      for (      String i : mDisabledProviders) {
        pw.println("    " + i);
      }
    }
    if (mMockProviders.size() > 0) {
      pw.println("  Mock Providers:");
      for (      Map.Entry<String,MockProvider> i : mMockProviders.entrySet()) {
        i.getValue().dump(pw,"      ");
      }
    }
    pw.append("  fudger: ");
    mLocationFudger.dump(fd,pw,args);
    if (args.length > 0 && "short".equals(args[0])) {
      return;
    }
    for (    LocationProviderInterface provider : mProviders) {
      pw.print(provider.getName() + " Internal State");
      if (provider instanceof LocationProviderProxy) {
        LocationProviderProxy proxy=(LocationProviderProxy)provider;
        pw.print(" (" + proxy.getConnectedPackageName() + ")");
      }
      pw.println(":");
      provider.dump(fd,pw,args);
    }
  }
}
