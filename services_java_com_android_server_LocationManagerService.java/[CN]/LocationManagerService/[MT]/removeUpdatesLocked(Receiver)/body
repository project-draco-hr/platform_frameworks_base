{
  if (LOCAL_LOGV) {
    Log.v(TAG,"_removeUpdates: listener = " + receiver);
  }
  final int callingUid=Binder.getCallingUid();
  long identity=Binder.clearCallingIdentity();
  try {
    if (mReceivers.remove(receiver.mKey) != null && receiver.isListener()) {
      receiver.getListener().asBinder().unlinkToDeath(receiver,0);
    }
    HashSet<String> providers=new HashSet<String>();
    HashMap<String,UpdateRecord> oldRecords=receiver.mUpdateRecords;
    if (oldRecords != null) {
      for (      UpdateRecord record : oldRecords.values()) {
        if (!providerHasListener(record.mProvider,callingUid,receiver)) {
          LocationProviderImpl impl=LocationProviderImpl.getProvider(record.mProvider);
          if (impl != null) {
            impl.removeListener(callingUid);
          }
        }
        record.disposeLocked();
      }
      providers.addAll(oldRecords.keySet());
    }
    for (    String provider : providers) {
      if (!isAllowedBySettingsLocked(provider)) {
        continue;
      }
      boolean hasOtherListener=false;
      ArrayList<UpdateRecord> recordsForProvider=mRecordsByProvider.get(provider);
      if (recordsForProvider != null && recordsForProvider.size() > 0) {
        hasOtherListener=true;
      }
      LocationProviderImpl p=LocationProviderImpl.getProvider(provider);
      if (p != null) {
        if (hasOtherListener) {
          p.setMinTime(getMinTimeLocked(provider));
        }
 else {
          p.enableLocationTracking(false);
        }
      }
    }
    updateWakelockStatusLocked(mScreenOn);
  }
  finally {
    Binder.restoreCallingIdentity(identity);
  }
}
