{
  if (NOTIFICATION_CLICK_DEBUG) {
    Log.d(TAG,"Clicked on content of " + mNotificationKey);
  }
  final boolean keyguardShowing=mStatusBarKeyguardViewManager.isShowing();
  final boolean afterKeyguardGone=mIntent.isActivity() && PreviewInflater.wouldLaunchResolverActivity(mContext,mIntent.getIntent(),mCurrentUserId);
  dismissKeyguardThenExecute(new OnDismissAction(){
    public boolean onDismiss(){
      if (mHeadsUpManager != null && mHeadsUpManager.isHeadsUp(mNotificationKey)) {
        mHeadsUpManager.releaseImmediately(mNotificationKey);
      }
      new Thread(){
        @Override public void run(){
          try {
            if (keyguardShowing && !afterKeyguardGone) {
              ActivityManagerNative.getDefault().keyguardWaitingForActivityDrawn();
            }
            ActivityManagerNative.getDefault().resumeAppSwitches();
          }
 catch (          RemoteException e) {
          }
          if (mIntent != null) {
            try {
              mIntent.send();
            }
 catch (            PendingIntent.CanceledException e) {
              Log.w(TAG,"Sending contentIntent failed: " + e);
            }
            if (mIntent.isActivity()) {
              overrideActivityPendingAppTransition(keyguardShowing && !afterKeyguardGone);
            }
          }
          try {
            mBarService.onNotificationClick(mNotificationKey);
          }
 catch (          RemoteException ex) {
          }
        }
      }
.start();
      animateCollapsePanels(CommandQueue.FLAG_EXCLUDE_RECENTS_PANEL,true,true);
      visibilityChanged(false);
      return mIntent != null && mIntent.isActivity();
    }
  }
,afterKeyguardGone);
}
