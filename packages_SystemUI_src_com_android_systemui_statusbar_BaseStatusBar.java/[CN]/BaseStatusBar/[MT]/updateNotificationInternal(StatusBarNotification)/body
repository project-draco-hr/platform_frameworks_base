{
  if (DEBUG)   Log.d(TAG,"updateNotification(" + notification + ")");
  final NotificationData.Entry oldEntry=mNotificationData.findByKey(notification.getKey());
  if (oldEntry == null) {
    Log.w(TAG,"updateNotification for unknown key: " + notification.getKey());
    return;
  }
  final StatusBarNotification oldNotification=oldEntry.notification;
  final RemoteViews oldContentView=oldNotification.getNotification().contentView;
  final RemoteViews contentView=notification.getNotification().contentView;
  final RemoteViews oldBigContentView=oldNotification.getNotification().bigContentView;
  final RemoteViews bigContentView=notification.getNotification().bigContentView;
  final RemoteViews oldHeadsUpContentView=oldNotification.getNotification().headsUpContentView;
  final RemoteViews headsUpContentView=notification.getNotification().headsUpContentView;
  final Notification oldPublicNotification=oldNotification.getNotification().publicVersion;
  final RemoteViews oldPublicContentView=oldPublicNotification != null ? oldPublicNotification.contentView : null;
  final Notification publicNotification=notification.getNotification().publicVersion;
  final RemoteViews publicContentView=publicNotification != null ? publicNotification.contentView : null;
  if (DEBUG) {
    Log.d(TAG,"old notification: when=" + oldNotification.getNotification().when + " ongoing="+ oldNotification.isOngoing()+ " expanded="+ oldEntry.expanded+ " contentView="+ oldContentView+ " bigContentView="+ oldBigContentView+ " publicView="+ oldPublicContentView+ " rowParent="+ oldEntry.row.getParent());
    Log.d(TAG,"new notification: when=" + notification.getNotification().when + " ongoing="+ oldNotification.isOngoing()+ " contentView="+ contentView+ " bigContentView="+ bigContentView+ " publicView="+ publicContentView);
  }
  boolean contentsUnchanged=oldEntry.expanded != null && contentView.getPackage() != null && oldContentView.getPackage() != null && oldContentView.getPackage().equals(contentView.getPackage()) && oldContentView.getLayoutId() == contentView.getLayoutId();
  boolean bigContentsUnchanged=(oldEntry.getBigContentView() == null && bigContentView == null) || ((oldEntry.getBigContentView() != null && bigContentView != null) && bigContentView.getPackage() != null && oldBigContentView.getPackage() != null && oldBigContentView.getPackage().equals(bigContentView.getPackage()) && oldBigContentView.getLayoutId() == bigContentView.getLayoutId());
  boolean headsUpContentsUnchanged=(oldHeadsUpContentView == null && headsUpContentView == null) || ((oldHeadsUpContentView != null && headsUpContentView != null) && headsUpContentView.getPackage() != null && oldHeadsUpContentView.getPackage() != null && oldHeadsUpContentView.getPackage().equals(headsUpContentView.getPackage()) && oldHeadsUpContentView.getLayoutId() == headsUpContentView.getLayoutId());
  boolean publicUnchanged=(oldPublicContentView == null && publicContentView == null) || ((oldPublicContentView != null && publicContentView != null) && publicContentView.getPackage() != null && oldPublicContentView.getPackage() != null && oldPublicContentView.getPackage().equals(publicContentView.getPackage()) && oldPublicContentView.getLayoutId() == publicContentView.getLayoutId());
  ViewGroup rowParent=(ViewGroup)oldEntry.row.getParent();
  boolean orderUnchanged=notification.getNotification().when == oldNotification.getNotification().when && notification.getScore() == oldNotification.getScore();
  boolean updateTicker=notification.getNotification().tickerText != null && !TextUtils.equals(notification.getNotification().tickerText,oldEntry.notification.getNotification().tickerText);
  boolean isTopAnyway=isTopNotification(rowParent,oldEntry);
  if (contentsUnchanged && bigContentsUnchanged && headsUpContentsUnchanged&& publicUnchanged&& (orderUnchanged || isTopAnyway)) {
    if (DEBUG)     Log.d(TAG,"reusing notification for key: " + notification.getKey());
    oldEntry.notification=notification;
    try {
      updateNotificationViews(oldEntry,notification);
      if (ENABLE_HEADS_UP && mInterruptingNotificationEntry != null && oldNotification == mInterruptingNotificationEntry.notification) {
        if (!shouldInterrupt(notification)) {
          if (DEBUG)           Log.d(TAG,"no longer interrupts!");
          mHandler.sendEmptyMessage(MSG_HIDE_HEADS_UP);
        }
 else {
          if (DEBUG)           Log.d(TAG,"updating the current heads up:" + notification);
          mInterruptingNotificationEntry.notification=notification;
          updateHeadsUpViews(mInterruptingNotificationEntry,notification);
        }
      }
      final StatusBarIcon ic=new StatusBarIcon(notification.getPackageName(),notification.getUser(),notification.getNotification().icon,notification.getNotification().iconLevel,notification.getNotification().number,notification.getNotification().tickerText);
      if (!oldEntry.icon.set(ic)) {
        handleNotificationError(notification,"Couldn't update icon: " + ic);
        return;
      }
      updateRowStates();
      updateSpeedBump();
    }
 catch (    RuntimeException e) {
      Log.w(TAG,"Couldn't reapply views for package " + contentView.getPackage(),e);
      removeNotificationViews(notification.getKey());
      addNotificationViews(notification);
    }
  }
 else {
    if (DEBUG)     Log.d(TAG,"not reusing notification for key: " + notification.getKey());
    if (DEBUG)     Log.d(TAG,"contents was " + (contentsUnchanged ? "unchanged" : "changed"));
    if (DEBUG)     Log.d(TAG,"order was " + (orderUnchanged ? "unchanged" : "changed"));
    if (DEBUG)     Log.d(TAG,"notification is " + (isTopAnyway ? "top" : "not top"));
    removeNotificationViews(notification.getKey());
    addNotificationViews(notification);
    final NotificationData.Entry newEntry=mNotificationData.findByKey(notification.getKey());
    final boolean userChangedExpansion=oldEntry.row.hasUserChangedExpansion();
    if (userChangedExpansion) {
      boolean userExpanded=oldEntry.row.isUserExpanded();
      newEntry.row.setUserExpanded(userExpanded);
      newEntry.row.notifyHeightChanged();
    }
  }
  updateNotificationVetoButton(oldEntry.row,notification);
  boolean isForCurrentUser=notificationIsForCurrentProfiles(notification);
  if (DEBUG)   Log.d(TAG,"notification is " + (isForCurrentUser ? "" : "not ") + "for you");
  if (updateTicker && isForCurrentUser) {
    haltTicker();
    tick(notification,false);
  }
  setAreThereNotifications();
  updateExpandedViewPos(EXPANDED_LEAVE_ALONE);
}
