{
  mWindowManager=(WindowManager)mContext.getSystemService(Context.WINDOW_SERVICE);
  mWindowManagerService=WindowManagerGlobal.getWindowManagerService();
  mDisplay=mWindowManager.getDefaultDisplay();
  mDevicePolicyManager=(DevicePolicyManager)mContext.getSystemService(Context.DEVICE_POLICY_SERVICE);
  mNotificationData=new NotificationData(this);
  mDreamManager=IDreamManager.Stub.asInterface(ServiceManager.checkService(DreamService.DREAM_SERVICE));
  mPowerManager=(PowerManager)mContext.getSystemService(Context.POWER_SERVICE);
  mSettingsObserver.onChange(false);
  mContext.getContentResolver().registerContentObserver(Settings.Global.getUriFor(Settings.Global.DEVICE_PROVISIONED),true,mSettingsObserver);
  mContext.getContentResolver().registerContentObserver(Settings.Global.getUriFor(Settings.Global.ZEN_MODE),false,mSettingsObserver);
  mContext.getContentResolver().registerContentObserver(Settings.Secure.getUriFor(Settings.Secure.LOCK_SCREEN_SHOW_NOTIFICATIONS),false,mSettingsObserver,UserHandle.USER_ALL);
  mContext.getContentResolver().registerContentObserver(Settings.Secure.getUriFor(Settings.Secure.LOCK_SCREEN_ALLOW_PRIVATE_NOTIFICATIONS),true,mLockscreenSettingsObserver,UserHandle.USER_ALL);
  mBarService=IStatusBarService.Stub.asInterface(ServiceManager.getService(Context.STATUS_BAR_SERVICE));
  mRecents=getComponent(RecentsComponent.class);
  mRecents.setCallback(this);
  final Configuration currentConfig=mContext.getResources().getConfiguration();
  mLocale=currentConfig.locale;
  mLayoutDirection=TextUtils.getLayoutDirectionFromLocale(mLocale);
  mFontScale=currentConfig.fontScale;
  mUserManager=(UserManager)mContext.getSystemService(Context.USER_SERVICE);
  mLinearOutSlowIn=AnimationUtils.loadInterpolator(mContext,android.R.interpolator.linear_out_slow_in);
  mFastOutLinearIn=AnimationUtils.loadInterpolator(mContext,android.R.interpolator.fast_out_linear_in);
  StatusBarIconList iconList=new StatusBarIconList();
  mCommandQueue=new CommandQueue(this,iconList);
  int[] switches=new int[8];
  ArrayList<IBinder> binders=new ArrayList<IBinder>();
  try {
    mBarService.registerStatusBar(mCommandQueue,iconList,switches,binders);
  }
 catch (  RemoteException ex) {
  }
  createAndAddWindows();
  disable(switches[0],false);
  setSystemUiVisibility(switches[1],0xffffffff);
  topAppWindowChanged(switches[2] != 0);
  setImeWindowStatus(binders.get(0),switches[3],switches[4],switches[5] != 0);
  int N=iconList.size();
  int viewIndex=0;
  for (int i=0; i < N; i++) {
    StatusBarIcon icon=iconList.getIcon(i);
    if (icon != null) {
      addIcon(iconList.getSlot(i),i,viewIndex,icon);
      viewIndex++;
    }
  }
  try {
    mNotificationListener.registerAsSystemService(mContext,new ComponentName(mContext.getPackageName(),getClass().getCanonicalName()),UserHandle.USER_ALL);
  }
 catch (  RemoteException e) {
    Log.e(TAG,"Unable to register notification listener",e);
  }
  if (DEBUG) {
    Log.d(TAG,String.format("init: icons=%d disabled=0x%08x lights=0x%08x menu=0x%08x imeButton=0x%08x",iconList.size(),switches[0],switches[1],switches[2],switches[3]));
  }
  mCurrentUserId=ActivityManager.getCurrentUser();
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_USER_SWITCHED);
  filter.addAction(Intent.ACTION_USER_ADDED);
  filter.addAction(DevicePolicyManager.ACTION_DEVICE_POLICY_MANAGER_STATE_CHANGED);
  mContext.registerReceiver(mBroadcastReceiver,filter);
  updateCurrentProfilesCache();
}
