{
  if (DEBUG)   Log.d(TAG,"updateNotification(" + key + " -> "+ notification+ ")");
  final NotificationData.Entry oldEntry=mNotificationData.findByKey(key);
  if (oldEntry == null) {
    Log.w(TAG,"updateNotification for unknown key: " + key);
    return;
  }
  final StatusBarNotification oldNotification=oldEntry.notification;
  final RemoteViews oldContentView=oldNotification.getNotification().contentView;
  final RemoteViews contentView=notification.getNotification().contentView;
  final RemoteViews oldBigContentView=oldNotification.getNotification().bigContentView;
  final RemoteViews bigContentView=notification.getNotification().bigContentView;
  if (DEBUG) {
    Log.d(TAG,"old notification: when=" + oldNotification.getNotification().when + " ongoing="+ oldNotification.isOngoing()+ " expanded="+ oldEntry.expanded+ " contentView="+ oldContentView+ " bigContentView="+ oldBigContentView+ " rowParent="+ oldEntry.row.getParent());
    Log.d(TAG,"new notification: when=" + notification.getNotification().when + " ongoing="+ oldNotification.isOngoing()+ " contentView="+ contentView+ " bigContentView="+ bigContentView);
  }
  boolean contentsUnchanged=oldEntry.expanded != null && contentView.getPackage() != null && oldContentView.getPackage() != null && oldContentView.getPackage().equals(contentView.getPackage()) && oldContentView.getLayoutId() == contentView.getLayoutId();
  boolean bigContentsUnchanged=(oldEntry.getLargeView() == null && bigContentView == null) || ((oldEntry.getLargeView() != null && bigContentView != null) && bigContentView.getPackage() != null && oldBigContentView.getPackage() != null && oldBigContentView.getPackage().equals(bigContentView.getPackage()) && oldBigContentView.getLayoutId() == bigContentView.getLayoutId());
  ViewGroup rowParent=(ViewGroup)oldEntry.row.getParent();
  boolean orderUnchanged=notification.getNotification().when == oldNotification.getNotification().when && notification.getScore() == oldNotification.getScore();
  boolean updateTicker=notification.getNotification().tickerText != null && !TextUtils.equals(notification.getNotification().tickerText,oldEntry.notification.getNotification().tickerText);
  boolean isTopAnyway=isTopNotification(rowParent,oldEntry);
  if (contentsUnchanged && bigContentsUnchanged && (orderUnchanged || isTopAnyway)) {
    if (DEBUG)     Log.d(TAG,"reusing notification for key: " + key);
    oldEntry.notification=notification;
    try {
      contentView.reapply(mContext,oldEntry.expanded,mOnClickHandler);
      if (bigContentView != null && oldEntry.getLargeView() != null) {
        bigContentView.reapply(mContext,oldEntry.getLargeView(),mOnClickHandler);
      }
      final PendingIntent contentIntent=notification.getNotification().contentIntent;
      if (contentIntent != null) {
        final View.OnClickListener listener=makeClicker(contentIntent,notification.getPackageName(),notification.getTag(),notification.getId());
        oldEntry.content.setOnClickListener(listener);
      }
 else {
        oldEntry.content.setOnClickListener(null);
      }
      final StatusBarIcon ic=new StatusBarIcon(notification.getPackageName(),notification.getUser(),notification.getNotification().icon,notification.getNotification().iconLevel,notification.getNotification().number,notification.getNotification().tickerText);
      if (!oldEntry.icon.set(ic)) {
        handleNotificationError(key,notification,"Couldn't update icon: " + ic);
        return;
      }
      updateExpansionStates();
    }
 catch (    RuntimeException e) {
      Log.w(TAG,"Couldn't reapply views for package " + contentView.getPackage(),e);
      removeNotificationViews(key);
      addNotificationViews(key,notification);
    }
  }
 else {
    if (DEBUG)     Log.d(TAG,"not reusing notification for key: " + key);
    if (DEBUG)     Log.d(TAG,"contents was " + (contentsUnchanged ? "unchanged" : "changed"));
    if (DEBUG)     Log.d(TAG,"order was " + (orderUnchanged ? "unchanged" : "changed"));
    if (DEBUG)     Log.d(TAG,"notification is " + (isTopAnyway ? "top" : "not top"));
    final boolean wasExpanded=oldEntry.userExpanded();
    removeNotificationViews(key);
    addNotificationViews(key,notification);
    if (wasExpanded) {
      final NotificationData.Entry newEntry=mNotificationData.findByKey(key);
      expandView(newEntry,true);
      newEntry.setUserExpanded(true);
    }
  }
  updateNotificationVetoButton(oldEntry.row,notification);
  boolean isForCurrentUser=notificationIsForCurrentUser(notification);
  if (DEBUG)   Log.d(TAG,"notification is " + (isForCurrentUser ? "" : "not ") + "for you");
  if (updateTicker && isForCurrentUser) {
    haltTicker();
    tick(key,notification,false);
  }
  setAreThereNotifications();
  updateExpandedViewPos(EXPANDED_LEAVE_ALONE);
  if (ENABLE_HEADS_UP && oldNotification == mCurrentlyInterruptingNotification) {
    if (DEBUG)     Log.d(TAG,"updating the current heads up:" + notification);
    if (!shouldInterrupt(notification)) {
      if (DEBUG)       Log.d(TAG,"no longer interrupts!");
      mHandler.sendEmptyMessage(MSG_HIDE_HEADS_UP);
    }
  }
}
