{
  return new SwipeHelper.LongPressListener(){
    @Override public boolean onLongPress(    View v,    final int x,    final int y){
      if (!(v instanceof ExpandableNotificationRow)) {
        return false;
      }
      if (v.getWindowToken() == null) {
        Log.e(TAG,"Trying to show notification guts, but not attached to window");
        return false;
      }
      final ExpandableNotificationRow row=(ExpandableNotificationRow)v;
      bindGuts(row);
      final NotificationGuts guts=row.getGuts();
      if (guts == null) {
        return false;
      }
      if (guts.getVisibility() == View.VISIBLE) {
        dismissPopups(x,y);
        return false;
      }
      MetricsLogger.action(mContext,MetricsEvent.ACTION_NOTE_CONTROLS);
      guts.setVisibility(View.INVISIBLE);
      guts.post(new Runnable(){
        public void run(){
          dismissPopups(-1,-1,false);
          guts.setVisibility(View.VISIBLE);
          final double horz=Math.max(guts.getWidth() - x,x);
          final double vert=Math.max(guts.getHeight() - y,y);
          final float r=(float)Math.hypot(horz,vert);
          final Animator a=ViewAnimationUtils.createCircularReveal(guts,x,y,0,r);
          a.setDuration(StackStateAnimator.ANIMATION_DURATION_STANDARD);
          a.setInterpolator(Interpolators.LINEAR_OUT_SLOW_IN);
          a.addListener(new AnimatorListenerAdapter(){
            @Override public void onAnimationEnd(            Animator animation){
              super.onAnimationEnd(animation);
              row.resetTranslation();
            }
          }
);
          a.start();
          guts.setExposed(true);
          row.closeRemoteInput();
          mStackScroller.onHeightChanged(null,true);
          mNotificationGutsExposed=guts;
        }
      }
);
      return true;
    }
  }
;
}
