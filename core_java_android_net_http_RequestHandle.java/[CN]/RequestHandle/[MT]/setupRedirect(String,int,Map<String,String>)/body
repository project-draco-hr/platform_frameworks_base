{
  if (HttpLog.LOGV) {
    HttpLog.v("RequestHandle.setupRedirect(): redirectCount " + mRedirectCount);
  }
  mHeaders.remove(AUTHORIZATION_HEADER);
  mHeaders.remove(PROXY_AUTHORIZATION_HEADER);
  if (++mRedirectCount == MAX_REDIRECT_COUNT) {
    if (HttpLog.LOGV)     HttpLog.v("RequestHandle.setupRedirect(): too many redirects " + mRequest);
    mRequest.error(EventHandler.ERROR_REDIRECT_LOOP,com.android.internal.R.string.httpErrorRedirectLoop);
    return false;
  }
  if (mUrl.startsWith("https:") && redirectTo.startsWith("http:")) {
    if (HttpLog.LOGV) {
      HttpLog.v("blowing away the referer on an https -> http redirect");
    }
    mHeaders.remove("Referer");
  }
  mUrl=redirectTo;
  try {
    mUri=new WebAddress(mUrl);
  }
 catch (  ParseException e) {
    e.printStackTrace();
  }
  mHeaders.remove("Cookie");
  String cookie=CookieManager.getInstance().getCookie(mUri);
  if (cookie != null && cookie.length() > 0) {
    mHeaders.put("Cookie",cookie);
  }
  if ((statusCode == 302 || statusCode == 303) && mMethod.equals("POST")) {
    if (HttpLog.LOGV) {
      HttpLog.v("replacing POST with GET on redirect to " + redirectTo);
    }
    mMethod="GET";
  }
  if (statusCode == 307) {
    try {
      if (mBodyProvider != null)       mBodyProvider.reset();
    }
 catch (    java.io.IOException ex) {
      if (HttpLog.LOGV) {
        HttpLog.v("setupAuthResponse() failed to reset body provider");
      }
      return false;
    }
  }
 else {
    mHeaders.remove("Content-Type");
    mBodyProvider=null;
  }
  mHeaders.putAll(cacheHeaders);
  createAndQueueNewRequest();
  return true;
}
