{
  try {
    String packageName=mTransport.nextRestorePackage();
    if (packageName == null) {
      Slog.e(TAG,"Error getting next restore package");
      EventLog.writeEvent(EventLogTags.RESTORE_TRANSPORT_FAILURE);
      executeNextState(RestoreState.FINAL);
      return;
    }
 else     if (packageName.equals("")) {
      if (DEBUG)       Slog.v(TAG,"No next package, finishing restore");
      int millis=(int)(SystemClock.elapsedRealtime() - mStartRealtime);
      EventLog.writeEvent(EventLogTags.RESTORE_SUCCESS,mCount,millis);
      executeNextState(RestoreState.FINAL);
      return;
    }
    if (mObserver != null) {
      try {
        mObserver.onUpdate(mCount,packageName);
      }
 catch (      RemoteException e) {
        Slog.d(TAG,"Restore observer died in onUpdate");
        mObserver=null;
      }
    }
    Metadata metaInfo=mPmAgent.getRestoredMetadata(packageName);
    if (metaInfo == null) {
      Slog.e(TAG,"Missing metadata for " + packageName);
      EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,packageName,"Package metadata missing");
      executeNextState(RestoreState.RUNNING_QUEUE);
      return;
    }
    PackageInfo packageInfo;
    try {
      int flags=PackageManager.GET_SIGNATURES;
      packageInfo=mPackageManager.getPackageInfo(packageName,flags);
    }
 catch (    NameNotFoundException e) {
      Slog.e(TAG,"Invalid package restoring data",e);
      EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,packageName,"Package missing on device");
      executeNextState(RestoreState.RUNNING_QUEUE);
      return;
    }
    if (packageInfo.applicationInfo.backupAgentName == null || "".equals(packageInfo.applicationInfo.backupAgentName)) {
      if (DEBUG) {
        Slog.i(TAG,"Data exists for package " + packageName + " but app has no agent; skipping");
      }
      EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,packageName,"Package has no agent");
      executeNextState(RestoreState.RUNNING_QUEUE);
      return;
    }
    if (metaInfo.versionCode > packageInfo.versionCode) {
      if ((packageInfo.applicationInfo.flags & ApplicationInfo.FLAG_RESTORE_ANY_VERSION) == 0) {
        String message="Version " + metaInfo.versionCode + " > installed version "+ packageInfo.versionCode;
        Slog.w(TAG,"Package " + packageName + ": "+ message);
        EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,packageName,message);
        executeNextState(RestoreState.RUNNING_QUEUE);
        return;
      }
 else {
        if (DEBUG)         Slog.v(TAG,"Version " + metaInfo.versionCode + " > installed "+ packageInfo.versionCode+ " but restoreAnyVersion");
      }
    }
    if (!signaturesMatch(metaInfo.signatures,packageInfo)) {
      Slog.w(TAG,"Signature mismatch restoring " + packageName);
      EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,packageName,"Signature mismatch");
      executeNextState(RestoreState.RUNNING_QUEUE);
      return;
    }
    if (DEBUG)     Slog.v(TAG,"Package " + packageName + " restore version ["+ metaInfo.versionCode+ "] is compatible with installed version ["+ packageInfo.versionCode+ "]");
    IBackupAgent agent=bindToAgentSynchronous(packageInfo.applicationInfo,IApplicationThread.BACKUP_MODE_INCREMENTAL);
    if (agent == null) {
      Slog.w(TAG,"Can't find backup agent for " + packageName);
      EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,packageName,"Restore agent missing");
      executeNextState(RestoreState.RUNNING_QUEUE);
      return;
    }
    try {
      initiateOneRestore(packageInfo,metaInfo.versionCode,agent,mNeedFullBackup);
      ++mCount;
    }
 catch (    Exception e) {
      Slog.e(TAG,"Error when attempting restore: " + e.toString());
      agentErrorCleanup();
      executeNextState(RestoreState.RUNNING_QUEUE);
    }
  }
 catch (  RemoteException e) {
    Slog.e(TAG,"Unable to fetch restore data from transport");
    mStatus=BackupConstants.TRANSPORT_ERROR;
    executeNextState(RestoreState.FINAL);
  }
}
