{
switch (msg.what) {
case MSG_RUN_BACKUP:
{
      mLastBackupPass=System.currentTimeMillis();
      mNextBackupPass=mLastBackupPass + BACKUP_INTERVAL;
      IBackupTransport transport=getTransport(mCurrentTransport);
      if (transport == null) {
        Slog.v(TAG,"Backup requested but no transport available");
synchronized (mQueueLock) {
          mBackupRunning=false;
        }
        mWakelock.release();
        break;
      }
      ArrayList<BackupRequest> queue=new ArrayList<BackupRequest>();
      File oldJournal=mJournal;
synchronized (mQueueLock) {
        if (mPendingBackups.size() > 0) {
          for (          BackupRequest b : mPendingBackups.values()) {
            queue.add(b);
          }
          if (DEBUG)           Slog.v(TAG,"clearing pending backups");
          mPendingBackups.clear();
          mJournal=null;
        }
      }
      if (queue.size() > 0) {
        PerformBackupTask pbt=new PerformBackupTask(transport,queue,oldJournal);
        Message pbtMessage=obtainMessage(MSG_BACKUP_RESTORE_STEP,pbt);
        sendMessage(pbtMessage);
      }
 else {
        Slog.v(TAG,"Backup requested but nothing pending");
synchronized (mQueueLock) {
          mBackupRunning=false;
        }
        mWakelock.release();
      }
      break;
    }
case MSG_BACKUP_RESTORE_STEP:
{
    try {
      BackupRestoreTask task=(BackupRestoreTask)msg.obj;
      if (MORE_DEBUG)       Slog.v(TAG,"Got next step for " + task + ", executing");
      task.execute();
    }
 catch (    ClassCastException e) {
      Slog.e(TAG,"Invalid backup task in flight, obj=" + msg.obj);
    }
    break;
  }
case MSG_OP_COMPLETE:
{
  try {
    BackupRestoreTask task=(BackupRestoreTask)msg.obj;
    task.operationComplete();
  }
 catch (  ClassCastException e) {
    Slog.e(TAG,"Invalid completion in flight, obj=" + msg.obj);
  }
  break;
}
case MSG_RUN_FULL_BACKUP:
{
FullBackupParams params=(FullBackupParams)msg.obj;
PerformFullBackupTask task=new PerformFullBackupTask(params.fd,params.observer,params.includeApks,params.includeObbs,params.includeShared,params.curPassword,params.encryptPassword,params.allApps,params.includeSystem,params.packages,params.latch);
(new Thread(task)).start();
break;
}
case MSG_RUN_RESTORE:
{
RestoreParams params=(RestoreParams)msg.obj;
Slog.d(TAG,"MSG_RUN_RESTORE observer=" + params.observer);
PerformRestoreTask task=new PerformRestoreTask(params.transport,params.observer,params.token,params.pkgInfo,params.pmToken,params.needFullBackup,params.filterSet);
Message restoreMsg=obtainMessage(MSG_BACKUP_RESTORE_STEP,task);
sendMessage(restoreMsg);
break;
}
case MSG_RUN_FULL_RESTORE:
{
FullRestoreParams params=(FullRestoreParams)msg.obj;
PerformFullRestoreTask task=new PerformFullRestoreTask(params.fd,params.curPassword,params.encryptPassword,params.observer,params.latch);
(new Thread(task)).start();
break;
}
case MSG_RUN_CLEAR:
{
ClearParams params=(ClearParams)msg.obj;
(new PerformClearTask(params.transport,params.packageInfo)).run();
break;
}
case MSG_RUN_INITIALIZE:
{
HashSet<String> queue;
synchronized (mQueueLock) {
queue=new HashSet<String>(mPendingInits);
mPendingInits.clear();
}
(new PerformInitializeTask(queue)).run();
break;
}
case MSG_RUN_GET_RESTORE_SETS:
{
RestoreSet[] sets=null;
RestoreGetSetsParams params=(RestoreGetSetsParams)msg.obj;
try {
sets=params.transport.getAvailableRestoreSets();
synchronized (params.session) {
params.session.mRestoreSets=sets;
}
if (sets == null) EventLog.writeEvent(EventLogTags.RESTORE_TRANSPORT_FAILURE);
}
 catch (Exception e) {
Slog.e(TAG,"Error from transport getting set list");
}
 finally {
if (params.observer != null) {
try {
params.observer.restoreSetsAvailable(sets);
}
 catch (RemoteException re) {
Slog.e(TAG,"Unable to report listing to observer");
}
catch (Exception e) {
Slog.e(TAG,"Restore observer threw",e);
}
}
removeMessages(MSG_RESTORE_TIMEOUT);
sendEmptyMessageDelayed(MSG_RESTORE_TIMEOUT,TIMEOUT_RESTORE_INTERVAL);
mWakelock.release();
}
break;
}
case MSG_TIMEOUT:
{
handleTimeout(msg.arg1,msg.obj);
break;
}
case MSG_RESTORE_TIMEOUT:
{
synchronized (BackupManagerService.this) {
if (mActiveRestoreSession != null) {
Slog.w(TAG,"Restore session timed out; aborting");
post(mActiveRestoreSession.new EndRestoreRunnable(BackupManagerService.this,mActiveRestoreSession));
}
}
}
case MSG_FULL_CONFIRMATION_TIMEOUT:
{
synchronized (mFullConfirmations) {
FullParams params=mFullConfirmations.get(msg.arg1);
if (params != null) {
Slog.i(TAG,"Full backup/restore timed out waiting for user confirmation");
signalFullBackupRestoreCompletion(params);
mFullConfirmations.delete(msg.arg1);
if (params.observer != null) {
try {
params.observer.onTimeout();
}
 catch (RemoteException e) {
}
}
}
 else {
Slog.d(TAG,"couldn't find params for token " + msg.arg1);
}
}
break;
}
}
}
