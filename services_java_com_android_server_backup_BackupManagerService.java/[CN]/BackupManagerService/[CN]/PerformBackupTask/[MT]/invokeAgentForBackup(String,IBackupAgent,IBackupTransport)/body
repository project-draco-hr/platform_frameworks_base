{
  if (DEBUG)   Slog.d(TAG,"invokeAgentForBackup on " + packageName);
  addBackupTrace("invoking " + packageName);
  mSavedStateName=new File(mStateDir,packageName);
  mBackupDataName=new File(mDataDir,packageName + ".data");
  mNewStateName=new File(mStateDir,packageName + ".new");
  mSavedState=null;
  mBackupData=null;
  mNewState=null;
  final int token=generateToken();
  try {
    if (packageName.equals(PACKAGE_MANAGER_SENTINEL)) {
      mCurrentPackage=new PackageInfo();
      mCurrentPackage.packageName=packageName;
    }
    mSavedState=ParcelFileDescriptor.open(mSavedStateName,ParcelFileDescriptor.MODE_READ_ONLY | ParcelFileDescriptor.MODE_CREATE);
    mBackupData=ParcelFileDescriptor.open(mBackupDataName,ParcelFileDescriptor.MODE_READ_WRITE | ParcelFileDescriptor.MODE_CREATE | ParcelFileDescriptor.MODE_TRUNCATE);
    if (!SELinux.restorecon(mBackupDataName)) {
      Slog.e(TAG,"SELinux restorecon failed on " + mBackupDataName);
    }
    mNewState=ParcelFileDescriptor.open(mNewStateName,ParcelFileDescriptor.MODE_READ_WRITE | ParcelFileDescriptor.MODE_CREATE | ParcelFileDescriptor.MODE_TRUNCATE);
    addBackupTrace("setting timeout");
    prepareOperationTimeout(token,TIMEOUT_BACKUP_INTERVAL,this);
    addBackupTrace("calling agent doBackup()");
    agent.doBackup(mSavedState,mBackupData,mNewState,token,mBackupManagerBinder);
  }
 catch (  Exception e) {
    Slog.e(TAG,"Error invoking for backup on " + packageName);
    addBackupTrace("exception: " + e);
    EventLog.writeEvent(EventLogTags.BACKUP_AGENT_FAILURE,packageName,e.toString());
    agentErrorCleanup();
    return BackupConstants.AGENT_ERROR;
  }
  addBackupTrace("invoke success");
  return BackupConstants.TRANSPORT_OK;
}
