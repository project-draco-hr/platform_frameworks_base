{
  for (int i=mEntries.size() - 1; i >= 0; i--) {
    ArrayMap<String,PackageEntry> uidMap=mEntries.valueAt(i);
    for (int j=uidMap.size() - 1; j >= 0; j--) {
      PackageEntry pe=uidMap.valueAt(j);
      if (pe.activeCount > 0 || pe.activeTopCount > 0 || pe.pendingCount > 0) {
        PackageEntry nextPe=next.getOrCreateEntry(mEntries.keyAt(i),uidMap.keyAt(j));
        nextPe.activeStartTime=now;
        nextPe.activeCount=pe.activeCount;
        nextPe.activeTopStartTime=now;
        nextPe.activeTopCount=pe.activeTopCount;
        nextPe.pendingStartTime=now;
        nextPe.pendingCount=pe.pendingCount;
        if (pe.activeCount > 0) {
          pe.pastActiveTime+=now - pe.activeStartTime;
          pe.activeCount=0;
        }
        if (pe.activeTopCount > 0) {
          pe.pastActiveTopTime+=now - pe.activeTopStartTime;
          pe.activeTopCount=0;
        }
        if (pe.pendingCount > 0) {
          pe.pastPendingTime+=now - pe.pendingStartTime;
          pe.pendingCount=0;
        }
      }
    }
  }
}
