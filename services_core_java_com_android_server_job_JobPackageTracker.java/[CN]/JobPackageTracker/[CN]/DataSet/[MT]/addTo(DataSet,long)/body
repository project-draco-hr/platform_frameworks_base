{
  out.mSummedTime+=getTotalTime(now);
  for (int i=mEntries.size() - 1; i >= 0; i--) {
    ArrayMap<String,PackageEntry> uidMap=mEntries.valueAt(i);
    for (int j=uidMap.size() - 1; j >= 0; j--) {
      PackageEntry pe=uidMap.valueAt(j);
      PackageEntry outPe=out.getOrCreateEntry(mEntries.keyAt(i),uidMap.keyAt(j));
      outPe.pastActiveTime+=pe.pastActiveTime;
      outPe.activeCount+=pe.activeCount;
      outPe.pastActiveTopTime+=pe.pastActiveTopTime;
      outPe.activeTopCount+=pe.activeTopCount;
      outPe.pastPendingTime+=pe.pastPendingTime;
      outPe.pendingCount+=pe.pendingCount;
      if (pe.activeNesting > 0) {
        outPe.pastActiveTime+=now - pe.activeStartTime;
        outPe.hadActive=true;
      }
      if (pe.activeTopNesting > 0) {
        outPe.pastActiveTopTime+=now - pe.activeTopStartTime;
        outPe.hadActiveTop=true;
      }
      if (pe.pendingNesting > 0) {
        outPe.pastPendingTime+=now - pe.pendingStartTime;
        outPe.hadPending=true;
      }
    }
  }
  if (mMaxTotalActive > out.mMaxTotalActive) {
    out.mMaxTotalActive=mMaxTotalActive;
  }
  if (mMaxFgActive > out.mMaxFgActive) {
    out.mMaxFgActive=mMaxFgActive;
  }
}
