{
  final long period=getTotalTime(now);
  pw.print(prefix);
  pw.print(header);
  pw.print(" at ");
  pw.print(DateFormat.format("yyyy-MM-dd-HH-mm-ss",mStartClockTime).toString());
  pw.print(" (");
  TimeUtils.formatDuration(mStartElapsedTime,nowEllapsed,pw);
  pw.print(") over ");
  TimeUtils.formatDuration(period,pw);
  pw.println(":");
  final int NE=mEntries.size();
  for (int i=0; i < NE; i++) {
    int uid=mEntries.keyAt(i);
    if (filterUid != -1 && filterUid != UserHandle.getAppId(uid)) {
      continue;
    }
    ArrayMap<String,PackageEntry> uidMap=mEntries.valueAt(i);
    final int NP=uidMap.size();
    for (int j=0; j < NP; j++) {
      PackageEntry pe=uidMap.valueAt(j);
      pw.print(prefix);
      pw.print("  ");
      UserHandle.formatUid(pw,uid);
      pw.print(" / ");
      pw.print(uidMap.keyAt(j));
      pw.print(":");
      printDuration(pw,period,pe.getPendingTime(now),pe.pendingCount,"pending");
      printDuration(pw,period,pe.getActiveTime(now),pe.activeCount,"active");
      printDuration(pw,period,pe.getActiveTopTime(now),pe.activeTopCount,"active-top");
      if (pe.pendingNesting > 0 || pe.hadPending) {
        pw.print(" (pending)");
      }
      if (pe.activeNesting > 0 || pe.hadActive) {
        pw.print(" (active)");
      }
      if (pe.activeTopNesting > 0 || pe.hadActiveTop) {
        pw.print(" (active-top)");
      }
      pw.println();
    }
  }
}
