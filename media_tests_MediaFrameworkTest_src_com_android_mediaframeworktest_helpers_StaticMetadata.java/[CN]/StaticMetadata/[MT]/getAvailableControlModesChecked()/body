{
  Key<int[]> modesKey=CameraCharacteristics.CONTROL_AVAILABLE_MODES;
  int[] modes=getValueFromKeyNonNull(modesKey);
  if (modes == null) {
    modes=new int[0];
  }
  List<Integer> modeList=Arrays.asList(CameraTestUtils.toObject(modes));
  checkTrueForKey(modesKey,"value is empty",!modeList.isEmpty());
  checkTrueForKey(modesKey,"values " + modeList.toString() + " must contain AUTO mode",modeList.contains(CameraMetadata.CONTROL_MODE_AUTO));
  boolean isAeOffSupported=Arrays.asList(CameraTestUtils.toObject(getAeAvailableModesChecked())).contains(CameraMetadata.CONTROL_AE_MODE_OFF);
  boolean isAfOffSupported=Arrays.asList(CameraTestUtils.toObject(getAfAvailableModesChecked())).contains(CameraMetadata.CONTROL_AF_MODE_OFF);
  boolean isAwbOffSupported=Arrays.asList(CameraTestUtils.toObject(getAwbAvailableModesChecked())).contains(CameraMetadata.CONTROL_AWB_MODE_OFF);
  if (isAeOffSupported && isAfOffSupported && isAwbOffSupported) {
    checkTrueForKey(modesKey,"values " + modeList.toString() + " must contain OFF mode",modeList.contains(CameraMetadata.CONTROL_MODE_OFF));
  }
  if (isSceneModeSupported()) {
    checkTrueForKey(modesKey,"values " + modeList.toString() + " must contain"+ " USE_SCENE_MODE",modeList.contains(CameraMetadata.CONTROL_MODE_USE_SCENE_MODE));
  }
  return modes;
}
