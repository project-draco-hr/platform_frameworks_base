{
  int action=event.getAction();
  boolean consumeEvent=mIsSecondTapDown;
  if ((action == MotionEvent.ACTION_UP) || (action == MotionEvent.ACTION_CANCEL)) {
    mIsSecondTapDown=false;
  }
  if (mReleaseTouchListenerOnUp) {
    if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_CANCEL) {
      mOwnerView.setOnTouchListener(null);
      setTouchTargetView(null);
      mReleaseTouchListenerOnUp=false;
    }
    return true;
  }
  dismissControlsDelayed(ZOOM_CONTROLS_TIMEOUT);
  View targetView=mTouchTargetView;
switch (action) {
case MotionEvent.ACTION_DOWN:
    targetView=findViewForTouch((int)event.getRawX(),(int)event.getRawY());
  setTouchTargetView(targetView);
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
setTouchTargetView(null);
break;
}
if (targetView != null) {
int targetViewRawX=mContainerRawLocation[0] + mTouchTargetWindowLocation[0];
int targetViewRawY=mContainerRawLocation[1] + mTouchTargetWindowLocation[1];
MotionEvent containerEvent=MotionEvent.obtain(event);
containerEvent.offsetLocation(mOwnerViewRawLocation[0] - targetViewRawX,mOwnerViewRawLocation[1] - targetViewRawY);
if (containerEvent.getX() < 0) {
containerEvent.offsetLocation(-containerEvent.getX(),0);
}
if (containerEvent.getY() < 0) {
containerEvent.offsetLocation(0,-containerEvent.getY());
}
boolean retValue=targetView.dispatchTouchEvent(containerEvent);
containerEvent.recycle();
return retValue || consumeEvent;
}
 else {
return consumeEvent;
}
}
