{
  final String[] enabledLayoutDescriptors=getEnabledKeyboardLayoutsForInputDevice(identifier);
  final ArrayList<KeyboardLayout> enabledLayouts=new ArrayList<KeyboardLayout>(enabledLayoutDescriptors.length);
  final ArrayList<KeyboardLayout> potentialLayouts=new ArrayList<KeyboardLayout>();
  visitAllKeyboardLayouts(new KeyboardLayoutVisitor(){
    boolean mHasSeenDeviceSpecificLayout;
    @Override public void visitKeyboardLayout(    Resources resources,    int keyboardLayoutResId,    KeyboardLayout layout){
      for (      String s : enabledLayoutDescriptors) {
        if (s != null && s.equals(layout.getDescriptor())) {
          enabledLayouts.add(layout);
          return;
        }
      }
      if (layout.getVendorId() == identifier.getVendorId() && layout.getProductId() == identifier.getProductId()) {
        if (!mHasSeenDeviceSpecificLayout) {
          mHasSeenDeviceSpecificLayout=true;
          potentialLayouts.clear();
        }
        potentialLayouts.add(layout);
      }
 else       if (layout.getVendorId() == -1 && layout.getProductId() == -1 && !mHasSeenDeviceSpecificLayout) {
        potentialLayouts.add(layout);
      }
    }
  }
);
  final int enabledLayoutSize=enabledLayouts.size();
  final int potentialLayoutSize=potentialLayouts.size();
  KeyboardLayout[] layouts=new KeyboardLayout[enabledLayoutSize + potentialLayoutSize];
  enabledLayouts.toArray(layouts);
  for (int i=0; i < potentialLayoutSize; i++) {
    layouts[enabledLayoutSize + i]=potentialLayouts.get(i);
  }
  return layouts;
}
