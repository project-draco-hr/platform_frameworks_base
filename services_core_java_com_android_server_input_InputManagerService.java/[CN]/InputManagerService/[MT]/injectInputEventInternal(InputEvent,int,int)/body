{
  if (event == null) {
    throw new IllegalArgumentException("event must not be null");
  }
  if (mode != InputManager.INJECT_INPUT_EVENT_MODE_ASYNC && mode != InputManager.INJECT_INPUT_EVENT_MODE_WAIT_FOR_FINISH && mode != InputManager.INJECT_INPUT_EVENT_MODE_WAIT_FOR_RESULT) {
    throw new IllegalArgumentException("mode is invalid");
  }
  final int pid=Binder.getCallingPid();
  final int uid=Binder.getCallingUid();
  final long ident=Binder.clearCallingIdentity();
  final int result;
  try {
    result=nativeInjectInputEvent(mPtr,event,displayId,pid,uid,mode,INJECTION_TIMEOUT_MILLIS,WindowManagerPolicy.FLAG_DISABLE_KEY_REPEAT);
  }
  finally {
    Binder.restoreCallingIdentity(ident);
  }
switch (result) {
case INPUT_EVENT_INJECTION_PERMISSION_DENIED:
    Slog.w(TAG,"Input event injection from pid " + pid + " permission denied.");
  throw new SecurityException("Injecting to another application requires INJECT_EVENTS permission");
case INPUT_EVENT_INJECTION_SUCCEEDED:
return true;
case INPUT_EVENT_INJECTION_TIMED_OUT:
Slog.w(TAG,"Input event injection from pid " + pid + " timed out.");
return false;
case INPUT_EVENT_INJECTION_FAILED:
default :
Slog.w(TAG,"Input event injection from pid " + pid + " failed.");
return false;
}
}
