{
  final Locale systemLocale=mContext.getResources().getConfiguration().locale;
  if (TextUtils.isEmpty(systemLocale.getLanguage())) {
    return null;
  }
  final List<KeyboardLayout> layouts=new ArrayList<>();
  visitAllKeyboardLayouts(new KeyboardLayoutVisitor(){
    @Override public void visitKeyboardLayout(    Resources resources,    int keyboardLayoutResId,    KeyboardLayout layout){
      if (layout.getVendorId() != d.getVendorId() || layout.getProductId() != d.getProductId()) {
        return;
      }
      for (      Locale l : layout.getLocales()) {
        if (isCompatibleLocale(systemLocale,l)) {
          layouts.add(layout);
          break;
        }
      }
    }
  }
);
  if (layouts.isEmpty()) {
    return null;
  }
  Collections.sort(layouts);
  final int N=layouts.size();
  for (int i=0; i < N; i++) {
    KeyboardLayout layout=layouts.get(i);
    for (    Locale l : layout.getLocales()) {
      if (l.getCountry().equals(systemLocale.getCountry()) && l.getVariant().equals(systemLocale.getVariant())) {
        return layout.getDescriptor();
      }
    }
  }
  for (int i=0; i < N; i++) {
    KeyboardLayout layout=layouts.get(i);
    for (    Locale l : layout.getLocales()) {
      if (l.getCountry().equals(systemLocale.getCountry())) {
        return layout.getDescriptor();
      }
    }
  }
  return layouts.get(0).getDescriptor();
}
