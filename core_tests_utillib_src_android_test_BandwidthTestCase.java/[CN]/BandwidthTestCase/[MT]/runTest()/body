{
  String fName=getName();
  assertNotNull(fName);
  Method method=null;
  Class testClass=null;
  try {
    testClass=getClass();
    method=testClass.getMethod(fName,(Class[])null);
  }
 catch (  NoSuchMethodException e) {
    fail("Method \"" + fName + "\" not found");
  }
  if (!Modifier.isPublic(method.getModifiers())) {
    fail("Method \"" + fName + "\" should be public");
  }
  int runCount=1;
  boolean isRepetitive=false;
  if (method.isAnnotationPresent(FlakyTest.class)) {
    runCount=method.getAnnotation(FlakyTest.class).tolerance();
  }
 else   if (method.isAnnotationPresent(RepetitiveTest.class)) {
    runCount=method.getAnnotation(RepetitiveTest.class).numIterations();
    isRepetitive=true;
  }
  if (method.isAnnotationPresent(UiThreadTest.class)) {
    final int tolerance=runCount;
    final boolean repetitive=isRepetitive;
    final Method testMethod=method;
    final Throwable[] exceptions=new Throwable[1];
    getInstrumentation().runOnMainSync(new Runnable(){
      public void run(){
        try {
          runMethod(testMethod,tolerance,repetitive);
        }
 catch (        Throwable throwable) {
          exceptions[0]=throwable;
        }
      }
    }
);
    if (exceptions[0] != null) {
      throw exceptions[0];
    }
  }
 else   if (method.isAnnotationPresent(BandwidthTest.class) || testClass.isAnnotationPresent(BandwidthTest.class)) {
    try {
      TrafficStats.startDataProfiling(null);
    }
 catch (    IllegalStateException isx) {
      Log.w(TAG,"Failed to start bandwidth profiling");
    }
    runMethod(method,1,false);
    try {
      NetworkStats stats=TrafficStats.stopDataProfiling(null);
      NetworkStats.Entry entry=stats.getTotal(null);
      getInstrumentation().sendStatus(2,getBandwidthStats(entry));
    }
 catch (    IllegalStateException isx) {
      Log.w(TAG,"Failed to collect bandwidth stats");
    }
  }
 else {
    runMethod(method,runCount,isRepetitive);
  }
}
