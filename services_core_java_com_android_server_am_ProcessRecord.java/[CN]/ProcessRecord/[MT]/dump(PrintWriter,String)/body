{
  final long now=SystemClock.uptimeMillis();
  pw.print(prefix);
  pw.print("user #");
  pw.print(userId);
  pw.print(" uid=");
  pw.print(info.uid);
  if (uid != info.uid) {
    pw.print(" ISOLATED uid=");
    pw.print(uid);
  }
  pw.println();
  if (info.className != null) {
    pw.print(prefix);
    pw.print("class=");
    pw.println(info.className);
  }
  if (info.manageSpaceActivityName != null) {
    pw.print(prefix);
    pw.print("manageSpaceActivityName=");
    pw.println(info.manageSpaceActivityName);
  }
  pw.print(prefix);
  pw.print("dir=");
  pw.print(info.sourceDir);
  pw.print(" publicDir=");
  pw.print(info.publicSourceDir);
  pw.print(" data=");
  pw.println(info.dataDir);
  pw.print(prefix);
  pw.print("packageList={");
  for (int i=0; i < pkgList.size(); i++) {
    if (i > 0)     pw.print(", ");
    pw.print(pkgList.keyAt(i));
  }
  pw.println("}");
  pw.print(prefix);
  pw.print("compat=");
  pw.println(compat);
  if (instrumentationClass != null || instrumentationProfileFile != null || instrumentationArguments != null) {
    pw.print(prefix);
    pw.print("instrumentationClass=");
    pw.print(instrumentationClass);
    pw.print(" instrumentationProfileFile=");
    pw.println(instrumentationProfileFile);
    pw.print(prefix);
    pw.print("instrumentationArguments=");
    pw.println(instrumentationArguments);
    pw.print(prefix);
    pw.print("instrumentationInfo=");
    pw.println(instrumentationInfo);
    if (instrumentationInfo != null) {
      instrumentationInfo.dump(new PrintWriterPrinter(pw),prefix + "  ");
    }
  }
  pw.print(prefix);
  pw.print("thread=");
  pw.println(thread);
  pw.print(prefix);
  pw.print("pid=");
  pw.print(pid);
  pw.print(" starting=");
  pw.println(starting);
  pw.print(prefix);
  pw.print("lastActivityTime=");
  TimeUtils.formatDuration(lastActivityTime,now,pw);
  pw.print(" lastPssTime=");
  TimeUtils.formatDuration(lastPssTime,now,pw);
  pw.print(" nextPssTime=");
  TimeUtils.formatDuration(nextPssTime,now,pw);
  pw.println();
  pw.print(prefix);
  pw.print("adjSeq=");
  pw.print(adjSeq);
  pw.print(" lruSeq=");
  pw.print(lruSeq);
  pw.print(" lastPss=");
  pw.print(lastPss);
  pw.print(" lastCachedPss=");
  pw.println(lastCachedPss);
  pw.print(prefix);
  pw.print("keeping=");
  pw.print(keeping);
  pw.print(" cached=");
  pw.print(cached);
  pw.print(" empty=");
  pw.println(empty);
  if (serviceb) {
    pw.print(prefix);
    pw.print("serviceb=");
    pw.print(serviceb);
    pw.print(" serviceHighRam=");
    pw.println(serviceHighRam);
  }
  if (notCachedSinceIdle) {
    pw.print(prefix);
    pw.print("notCachedSinceIdle=");
    pw.print(notCachedSinceIdle);
    pw.print(" initialIdlePss=");
    pw.println(initialIdlePss);
  }
  pw.print(prefix);
  pw.print("oom: max=");
  pw.print(maxAdj);
  pw.print(" curRaw=");
  pw.print(curRawAdj);
  pw.print(" setRaw=");
  pw.print(setRawAdj);
  pw.print(" cur=");
  pw.print(curAdj);
  pw.print(" set=");
  pw.println(setAdj);
  pw.print(prefix);
  pw.print("curSchedGroup=");
  pw.print(curSchedGroup);
  pw.print(" setSchedGroup=");
  pw.print(setSchedGroup);
  pw.print(" systemNoUi=");
  pw.print(systemNoUi);
  pw.print(" trimMemoryLevel=");
  pw.println(trimMemoryLevel);
  pw.print(prefix);
  pw.print("curProcState=");
  pw.print(curProcState);
  pw.print(" repProcState=");
  pw.print(repProcState);
  pw.print(" pssProcState=");
  pw.print(pssProcState);
  pw.print(" setProcState=");
  pw.print(setProcState);
  pw.print(" lastStateTime=");
  TimeUtils.formatDuration(lastStateTime,now,pw);
  pw.println();
  if (hasShownUi || pendingUiClean || hasAboveClient|| treatLikeActivity) {
    pw.print(prefix);
    pw.print("hasShownUi=");
    pw.print(hasShownUi);
    pw.print(" pendingUiClean=");
    pw.print(pendingUiClean);
    pw.print(" hasAboveClient=");
    pw.print(hasAboveClient);
    pw.print(" treatLikeActivity=");
    pw.println(treatLikeActivity);
  }
  if (setIsForeground || foregroundServices || forcingToForeground != null) {
    pw.print(prefix);
    pw.print("setIsForeground=");
    pw.print(setIsForeground);
    pw.print(" foregroundServices=");
    pw.print(foregroundServices);
    pw.print(" forcingToForeground=");
    pw.println(forcingToForeground);
  }
  if (persistent || removed) {
    pw.print(prefix);
    pw.print("persistent=");
    pw.print(persistent);
    pw.print(" removed=");
    pw.println(removed);
  }
  if (hasClientActivities || foregroundActivities || repForegroundActivities) {
    pw.print(prefix);
    pw.print("hasClientActivities=");
    pw.print(hasClientActivities);
    pw.print(" foregroundActivities=");
    pw.print(foregroundActivities);
    pw.print(" (rep=");
    pw.print(repForegroundActivities);
    pw.println(")");
  }
  if (hasStartedServices) {
    pw.print(prefix);
    pw.print("hasStartedServices=");
    pw.println(hasStartedServices);
  }
  if (!keeping) {
    long wtime;
synchronized (mBatteryStats) {
      wtime=mBatteryStats.getProcessWakeTime(info.uid,pid,SystemClock.elapsedRealtime());
    }
    long timeUsed=wtime - lastWakeTime;
    pw.print(prefix);
    pw.print("lastWakeTime=");
    pw.print(lastWakeTime);
    pw.print(" timeUsed=");
    TimeUtils.formatDuration(timeUsed,pw);
    pw.println("");
    pw.print(prefix);
    pw.print("lastCpuTime=");
    pw.print(lastCpuTime);
    pw.print(" timeUsed=");
    TimeUtils.formatDuration(curCpuTime - lastCpuTime,pw);
    pw.println("");
  }
  pw.print(prefix);
  pw.print("lastRequestedGc=");
  TimeUtils.formatDuration(lastRequestedGc,now,pw);
  pw.print(" lastLowMemory=");
  TimeUtils.formatDuration(lastLowMemory,now,pw);
  pw.print(" reportLowMemory=");
  pw.println(reportLowMemory);
  if (killedByAm || waitingToKill != null) {
    pw.print(prefix);
    pw.print("killedByAm=");
    pw.print(killedByAm);
    pw.print(" waitingToKill=");
    pw.println(waitingToKill);
  }
  if (debugging || crashing || crashDialog != null || notResponding || anrDialog != null || bad) {
    pw.print(prefix);
    pw.print("debugging=");
    pw.print(debugging);
    pw.print(" crashing=");
    pw.print(crashing);
    pw.print(" ");
    pw.print(crashDialog);
    pw.print(" notResponding=");
    pw.print(notResponding);
    pw.print(" ");
    pw.print(anrDialog);
    pw.print(" bad=");
    pw.print(bad);
    if (errorReportReceiver != null) {
      pw.print(" errorReportReceiver=");
      pw.print(errorReportReceiver.flattenToShortString());
    }
    pw.println();
  }
  if (activities.size() > 0) {
    pw.print(prefix);
    pw.println("Activities:");
    for (int i=0; i < activities.size(); i++) {
      pw.print(prefix);
      pw.print("  - ");
      pw.println(activities.get(i));
    }
  }
  if (services.size() > 0) {
    pw.print(prefix);
    pw.println("Services:");
    for (int i=0; i < services.size(); i++) {
      pw.print(prefix);
      pw.print("  - ");
      pw.println(services.valueAt(i));
    }
  }
  if (executingServices.size() > 0) {
    pw.print(prefix);
    pw.print("Executing Services (fg=");
    pw.print(execServicesFg);
    pw.println(")");
    for (int i=0; i < executingServices.size(); i++) {
      pw.print(prefix);
      pw.print("  - ");
      pw.println(executingServices.valueAt(i));
    }
  }
  if (connections.size() > 0) {
    pw.print(prefix);
    pw.println("Connections:");
    for (int i=0; i < connections.size(); i++) {
      pw.print(prefix);
      pw.print("  - ");
      pw.println(connections.valueAt(i));
    }
  }
  if (pubProviders.size() > 0) {
    pw.print(prefix);
    pw.println("Published Providers:");
    for (int i=0; i < pubProviders.size(); i++) {
      pw.print(prefix);
      pw.print("  - ");
      pw.println(pubProviders.keyAt(i));
      pw.print(prefix);
      pw.print("    -> ");
      pw.println(pubProviders.valueAt(i));
    }
  }
  if (conProviders.size() > 0) {
    pw.print(prefix);
    pw.println("Connected Providers:");
    for (int i=0; i < conProviders.size(); i++) {
      pw.print(prefix);
      pw.print("  - ");
      pw.println(conProviders.get(i).toShortString());
    }
  }
  if (curReceiver != null) {
    pw.print(prefix);
    pw.print("curReceiver=");
    pw.println(curReceiver);
  }
  if (receivers.size() > 0) {
    pw.print(prefix);
    pw.println("Receivers:");
    for (int i=0; i < receivers.size(); i++) {
      pw.print(prefix);
      pw.print("  - ");
      pw.println(receivers.valueAt(i));
    }
  }
}
