{
  try {
switch (code) {
case QUERY_TRANSACTION:
{
        data.enforceInterface(IContentProvider.descriptor);
        Uri url=Uri.CREATOR.createFromParcel(data);
        int num=data.readInt();
        String[] projection=null;
        if (num > 0) {
          projection=new String[num];
          for (int i=0; i < num; i++) {
            projection[i]=data.readString();
          }
        }
        String selection=data.readString();
        num=data.readInt();
        String[] selectionArgs=null;
        if (num > 0) {
          selectionArgs=new String[num];
          for (int i=0; i < num; i++) {
            selectionArgs[i]=data.readString();
          }
        }
        String sortOrder=data.readString();
        IContentObserver observer=IContentObserver.Stub.asInterface(data.readStrongBinder());
        ICancellationSignal cancellationSignal=ICancellationSignal.Stub.asInterface(data.readStrongBinder());
        Cursor cursor=query(url,projection,selection,selectionArgs,sortOrder,cancellationSignal);
        if (cursor != null) {
          CursorToBulkCursorAdaptor adaptor=new CursorToBulkCursorAdaptor(cursor,observer,getProviderName());
          BulkCursorDescriptor d=adaptor.getBulkCursorDescriptor();
          reply.writeNoException();
          reply.writeInt(1);
          d.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
        }
 else {
          reply.writeNoException();
          reply.writeInt(0);
        }
        return true;
      }
case GET_TYPE_TRANSACTION:
{
      data.enforceInterface(IContentProvider.descriptor);
      Uri url=Uri.CREATOR.createFromParcel(data);
      String type=getType(url);
      reply.writeNoException();
      reply.writeString(type);
      return true;
    }
case INSERT_TRANSACTION:
{
    data.enforceInterface(IContentProvider.descriptor);
    Uri url=Uri.CREATOR.createFromParcel(data);
    ContentValues values=ContentValues.CREATOR.createFromParcel(data);
    Uri out=insert(url,values);
    reply.writeNoException();
    Uri.writeToParcel(reply,out);
    return true;
  }
case BULK_INSERT_TRANSACTION:
{
  data.enforceInterface(IContentProvider.descriptor);
  Uri url=Uri.CREATOR.createFromParcel(data);
  ContentValues[] values=data.createTypedArray(ContentValues.CREATOR);
  int count=bulkInsert(url,values);
  reply.writeNoException();
  reply.writeInt(count);
  return true;
}
case APPLY_BATCH_TRANSACTION:
{
data.enforceInterface(IContentProvider.descriptor);
final int numOperations=data.readInt();
final ArrayList<ContentProviderOperation> operations=new ArrayList<ContentProviderOperation>(numOperations);
for (int i=0; i < numOperations; i++) {
  operations.add(i,ContentProviderOperation.CREATOR.createFromParcel(data));
}
final ContentProviderResult[] results=applyBatch(operations);
reply.writeNoException();
reply.writeTypedArray(results,0);
return true;
}
case DELETE_TRANSACTION:
{
data.enforceInterface(IContentProvider.descriptor);
Uri url=Uri.CREATOR.createFromParcel(data);
String selection=data.readString();
String[] selectionArgs=data.readStringArray();
int count=delete(url,selection,selectionArgs);
reply.writeNoException();
reply.writeInt(count);
return true;
}
case UPDATE_TRANSACTION:
{
data.enforceInterface(IContentProvider.descriptor);
Uri url=Uri.CREATOR.createFromParcel(data);
ContentValues values=ContentValues.CREATOR.createFromParcel(data);
String selection=data.readString();
String[] selectionArgs=data.readStringArray();
int count=update(url,values,selection,selectionArgs);
reply.writeNoException();
reply.writeInt(count);
return true;
}
case OPEN_FILE_TRANSACTION:
{
data.enforceInterface(IContentProvider.descriptor);
Uri url=Uri.CREATOR.createFromParcel(data);
String mode=data.readString();
ParcelFileDescriptor fd;
fd=openFile(url,mode);
reply.writeNoException();
if (fd != null) {
reply.writeInt(1);
fd.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case OPEN_ASSET_FILE_TRANSACTION:
{
data.enforceInterface(IContentProvider.descriptor);
Uri url=Uri.CREATOR.createFromParcel(data);
String mode=data.readString();
AssetFileDescriptor fd;
fd=openAssetFile(url,mode);
reply.writeNoException();
if (fd != null) {
reply.writeInt(1);
fd.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case CALL_TRANSACTION:
{
data.enforceInterface(IContentProvider.descriptor);
String method=data.readString();
String stringArg=data.readString();
Bundle args=data.readBundle();
Bundle responseBundle=call(method,stringArg,args);
reply.writeNoException();
reply.writeBundle(responseBundle);
return true;
}
case GET_STREAM_TYPES_TRANSACTION:
{
data.enforceInterface(IContentProvider.descriptor);
Uri url=Uri.CREATOR.createFromParcel(data);
String mimeTypeFilter=data.readString();
String[] types=getStreamTypes(url,mimeTypeFilter);
reply.writeNoException();
reply.writeStringArray(types);
return true;
}
case OPEN_TYPED_ASSET_FILE_TRANSACTION:
{
data.enforceInterface(IContentProvider.descriptor);
Uri url=Uri.CREATOR.createFromParcel(data);
String mimeType=data.readString();
Bundle opts=data.readBundle();
AssetFileDescriptor fd;
fd=openTypedAssetFile(url,mimeType,opts);
reply.writeNoException();
if (fd != null) {
reply.writeInt(1);
fd.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case CREATE_CANCELATION_SIGNAL_TRANSACTION:
{
data.enforceInterface(IContentProvider.descriptor);
ICancellationSignal cancellationSignal=createCancellationSignal();
reply.writeNoException();
reply.writeStrongBinder(cancellationSignal.asBinder());
return true;
}
}
}
 catch (Exception e) {
DatabaseUtils.writeExceptionToParcel(reply,e);
return true;
}
return super.onTransact(code,data,reply,flags);
}
