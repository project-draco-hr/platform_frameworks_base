{
  final long tapTime=ViewConfiguration.getTapTimeout();
  final long longpressTime=ViewConfiguration.getLongPressTimeout();
  final int touchSlop=ViewConfiguration.getTouchSlop();
  final int action=ev.getAction();
  final float y=ev.getY();
  final float x=ev.getX();
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  boolean handled=false;
switch (action) {
case MotionEvent.ACTION_DOWN:
    mLastMotionX=x;
  mLastMotionY=y;
mCurrentDownEvent=MotionEvent.obtain(ev);
mAlwaysInTapRegion=true;
mInLongPress=false;
if (mIsLongpressEnabled) {
mHandler.removeMessages(LONG_PRESS);
mHandler.sendEmptyMessageAtTime(LONG_PRESS,mCurrentDownEvent.getDownTime() + tapTime + longpressTime);
}
mHandler.sendEmptyMessageAtTime(SHOW_PRESS,mCurrentDownEvent.getDownTime() + tapTime);
handled=mListener.onDown(ev);
break;
case MotionEvent.ACTION_MOVE:
if (mInLongPress) {
break;
}
final float scrollX=mLastMotionX - x;
final float scrollY=mLastMotionY - y;
if (mAlwaysInTapRegion) {
final int deltaX=(int)(x - mCurrentDownEvent.getX());
final int deltaY=(int)(y - mCurrentDownEvent.getY());
int distance=(deltaX * deltaX) + (deltaY * deltaY);
if (distance > TOUCH_SLOP_SQUARE) {
handled=mListener.onScroll(mCurrentDownEvent,ev,scrollX,scrollY);
mLastMotionX=x;
mLastMotionY=y;
mAlwaysInTapRegion=false;
mHandler.removeMessages(SHOW_PRESS);
mHandler.removeMessages(LONG_PRESS);
}
}
 else if ((Math.abs(scrollX) >= 1) || (Math.abs(scrollY) >= 1)) {
handled=mListener.onScroll(mCurrentDownEvent,ev,scrollX,scrollY);
mLastMotionX=x;
mLastMotionY=y;
}
break;
case MotionEvent.ACTION_UP:
mCurrentUpEvent=MotionEvent.obtain(ev);
if (mInLongPress) {
mInLongPress=false;
break;
}
if (mAlwaysInTapRegion) {
handled=mListener.onSingleTapUp(ev);
}
 else {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000);
final float velocityY=velocityTracker.getYVelocity();
final float velocityX=velocityTracker.getXVelocity();
if ((Math.abs(velocityY) > ViewConfiguration.getMinimumFlingVelocity()) || (Math.abs(velocityX) > ViewConfiguration.getMinimumFlingVelocity())) {
handled=mListener.onFling(mCurrentDownEvent,mCurrentUpEvent,velocityX,velocityY);
}
}
mVelocityTracker.recycle();
mVelocityTracker=null;
mHandler.removeMessages(SHOW_PRESS);
mHandler.removeMessages(LONG_PRESS);
break;
case MotionEvent.ACTION_CANCEL:
mHandler.removeMessages(SHOW_PRESS);
mHandler.removeMessages(LONG_PRESS);
mVelocityTracker.recycle();
mVelocityTracker=null;
if (mInLongPress) {
mInLongPress=false;
break;
}
}
return handled;
}
