{
  final float scale=compatInfo.applicationScale;
  ResourcesKey key=new ResourcesKey(resDir,displayId,overrideConfiguration,scale,token);
  Resources r;
synchronized (this) {
    if (false) {
      Slog.w(TAG,"getTopLevelResources: " + resDir + " / "+ scale);
    }
    WeakReference<Resources> wr=mActiveResources.get(key);
    r=wr != null ? wr.get() : null;
    if (r != null && r.getAssets().isUpToDate()) {
      if (false) {
        Slog.w(TAG,"Returning cached resources " + r + " "+ resDir+ ": appScale="+ r.getCompatibilityInfo().applicationScale);
      }
      return r;
    }
  }
  AssetManager assets=new AssetManager();
  if (assets.addAssetPath(resDir) == 0) {
    return null;
  }
  if (overlayDirs != null) {
    for (    String idmapPath : overlayDirs) {
      assets.addOverlayPath(idmapPath);
    }
  }
  if (libDirs != null) {
    for (    String libDir : libDirs) {
      if (assets.addAssetPath(libDir) == 0) {
        Slog.w(TAG,"Asset path '" + libDir + "' does not exist or contains no resources.");
      }
    }
  }
  DisplayMetrics dm=getDisplayMetricsLocked(displayId);
  Configuration config;
  boolean isDefaultDisplay=(displayId == Display.DEFAULT_DISPLAY);
  final boolean hasOverrideConfig=key.hasOverrideConfiguration();
  if (!isDefaultDisplay || hasOverrideConfig) {
    config=new Configuration(getConfiguration());
    if (!isDefaultDisplay) {
      applyNonDefaultDisplayMetricsToConfigurationLocked(dm,config);
    }
    if (hasOverrideConfig) {
      config.updateFrom(key.mOverrideConfiguration);
    }
  }
 else {
    config=getConfiguration();
  }
  r=new Resources(assets,dm,config,compatInfo,token);
  if (false) {
    Slog.i(TAG,"Created app resources " + resDir + " "+ r+ ": "+ r.getConfiguration()+ " appScale="+ r.getCompatibilityInfo().applicationScale);
  }
synchronized (this) {
    WeakReference<Resources> wr=mActiveResources.get(key);
    Resources existing=wr != null ? wr.get() : null;
    if (existing != null && existing.getAssets().isUpToDate()) {
      r.getAssets().close();
      return existing;
    }
    mActiveResources.put(key,new WeakReference<Resources>(r));
    return r;
  }
}
