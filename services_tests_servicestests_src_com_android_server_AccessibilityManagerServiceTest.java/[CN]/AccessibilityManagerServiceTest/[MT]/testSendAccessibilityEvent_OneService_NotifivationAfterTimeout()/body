{
  ensureOnlyMockServicesEnabled(mContext,true,false);
  ensureAccessibilityEnabled(mContext,true);
  MockAccessibilityService service=MyFirstMockAccessibilityService.sInstance;
  AccessibilityServiceInfo info=MockAccessibilityService.createDefaultInfo();
  info.notificationTimeout=TIMEOUT_TEST_NOTIFICATION_TIMEOUT;
  service.setServiceInfo(info);
  Thread.sleep(TIMEOUT_BINDER_CALL);
  AccessibilityEvent firstEvent=AccessibilityEvent.obtain();
  fullyPopulateDefaultAccessibilityEvent(firstEvent);
  AccessibilityEvent secondEvent=AccessibilityEvent.obtain();
  fullyPopulateDefaultAccessibilityEvent(secondEvent);
  service.expectEvent(secondEvent);
  service.replay();
  mManagerService.sendAccessibilityEvent(firstEvent,UserHandle.USER_CURRENT);
  mManagerService.sendAccessibilityEvent(secondEvent,UserHandle.USER_CURRENT);
  Thread.sleep(TIMEOUT_BINDER_CALL);
  try {
    service.verify();
    fail("No events must be dispatched before the expiration of the notification timeout.");
  }
 catch (  IllegalStateException ise) {
  }
  Thread.sleep(TIMEOUT_TEST_NOTIFICATION_TIMEOUT);
  assertMockServiceVerifiedWithinTimeout(service);
}
