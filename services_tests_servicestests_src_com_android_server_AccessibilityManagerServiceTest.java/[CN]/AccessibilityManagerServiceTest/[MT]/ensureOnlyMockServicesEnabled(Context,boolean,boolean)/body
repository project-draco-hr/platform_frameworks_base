{
  String enabledServices=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ENABLED_ACCESSIBILITY_SERVICES);
  StringBuilder servicesToEnable=new StringBuilder();
  if (firstMockServiceEnabled) {
    servicesToEnable.append(MyFirstMockAccessibilityService.sComponentName).append(":");
  }
  if (secondMockServiceEnabled) {
    servicesToEnable.append(MySecondMockAccessibilityService.sComponentName).append(":");
  }
  Settings.Secure.putString(context.getContentResolver(),Settings.Secure.ENABLED_ACCESSIBILITY_SERVICES,servicesToEnable.toString());
  if (servicesToEnable.equals(enabledServices)) {
    return;
  }
  boolean firstMockServiceOK=false;
  boolean secondMockServiceOK=false;
  long start=SystemClock.uptimeMillis();
  long pollingInterval=TIMEOUT_START_MOCK_ACCESSIBILITY_SERVICES / 6;
  while (SystemClock.uptimeMillis() - start < TIMEOUT_START_MOCK_ACCESSIBILITY_SERVICES) {
    firstMockServiceOK=!firstMockServiceEnabled || (MyFirstMockAccessibilityService.sInstance != null && MyFirstMockAccessibilityService.sInstance.isSystemBoundAsClient());
    secondMockServiceOK=!secondMockServiceEnabled || (MySecondMockAccessibilityService.sInstance != null && MySecondMockAccessibilityService.sInstance.isSystemBoundAsClient());
    if (firstMockServiceOK && secondMockServiceOK) {
      return;
    }
    Thread.sleep(pollingInterval);
  }
  StringBuilder message=new StringBuilder();
  message.append("Mock accessibility services not started or system not bound as a client: ");
  if (!firstMockServiceOK) {
    message.append(MyFirstMockAccessibilityService.sComponentName);
    message.append(" ");
  }
  if (!secondMockServiceOK) {
    message.append(MySecondMockAccessibilityService.sComponentName);
  }
  throw new IllegalStateException(message.toString());
}
