{
  try {
    KeyStore keyStore=KeyStore.getInstance(KeyStore.getDefaultType());
    if (ksFile.exists()) {
      try (FileInputStream in=new FileInputStream(ksFile)){
        keyStore.load(in,null);
      }
       boolean mismatch=false;
      int loadCount=0;
      for (int n=0; n < 1000; n++) {
        String alias=String.format("%s%d",CERT_WFA_ALIAS,n);
        Certificate cert=keyStore.getCertificate(alias);
        if (cert == null) {
          break;
        }
        loadCount++;
        boolean matched=false;
        Iterator<X509Certificate> iter=diskCerts.iterator();
        while (iter.hasNext()) {
          X509Certificate diskCert=iter.next();
          if (cert.equals(diskCert)) {
            iter.remove();
            matched=true;
            break;
          }
        }
        if (!matched) {
          mismatch=true;
          break;
        }
      }
      if (mismatch || !diskCerts.isEmpty()) {
        Log.d(TAG,"Re-seeding Passpoint key store with " + diskCerts.size() + " WFA certs");
        for (int n=0; n < 1000; n++) {
          String alias=String.format("%s%d",CERT_WFA_ALIAS,n);
          Certificate cert=keyStore.getCertificate(alias);
          if (cert == null) {
            break;
          }
 else {
            keyStore.deleteEntry(alias);
          }
        }
        int index=0;
        for (        X509Certificate caCert : diskCerts) {
          keyStore.setCertificateEntry(String.format("%s%d",CERT_WFA_ALIAS,index),caCert);
          index++;
        }
        try (FileOutputStream out=new FileOutputStream(ksFile)){
          keyStore.store(out,null);
        }
       }
 else {
        Log.d(TAG,"Loaded Passpoint key store with " + loadCount + " CA certs");
        Enumeration<String> aliases=keyStore.aliases();
        while (aliases.hasMoreElements()) {
          Log.d("ZXC","KS Alias '" + aliases.nextElement() + "'");
        }
      }
    }
 else {
      keyStore.load(null,null);
      int index=0;
      for (      X509Certificate caCert : diskCerts) {
        keyStore.setCertificateEntry(String.format("%s%d",CERT_WFA_ALIAS,index),caCert);
        index++;
      }
      try (FileOutputStream out=new FileOutputStream(ksFile)){
        keyStore.store(out,null);
      }
       Log.d(TAG,"Initialized Passpoint key store with " + diskCerts.size() + " CA certs");
    }
    return keyStore;
  }
 catch (  GeneralSecurityException gse) {
    throw new IOException(gse);
  }
}
