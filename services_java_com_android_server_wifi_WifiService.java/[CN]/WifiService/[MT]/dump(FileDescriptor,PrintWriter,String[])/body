{
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println("Permission Denial: can't dump WifiService from from pid=" + Binder.getCallingPid() + ", uid="+ Binder.getCallingUid());
    return;
  }
  pw.println("Wi-Fi is " + mWifiStateMachine.syncGetWifiStateByName());
  pw.println("Stay-awake conditions: " + Settings.Global.getInt(mContext.getContentResolver(),Settings.Global.STAY_ON_WHILE_PLUGGED_IN,0));
  pw.println("mScreenOff " + mScreenOff);
  pw.println("mDeviceIdle " + mDeviceIdle);
  pw.println("mPluggedType " + mPluggedType);
  pw.println("mEmergencyCallbackMode " + mEmergencyCallbackMode);
  pw.println("mMulticastEnabled " + mMulticastEnabled);
  pw.println("mMulticastDisabled " + mMulticastDisabled);
  mSettingsStore.dump(fd,pw,args);
  mNotificationController.dump(fd,pw,args);
  mTrafficPoller.dump(fd,pw,args);
  pw.println("Latest scan results:");
  List<ScanResult> scanResults=mWifiStateMachine.syncGetScanResultsList();
  if (scanResults != null && scanResults.size() != 0) {
    pw.println("  BSSID              Frequency   RSSI  Flags             SSID");
    for (    ScanResult r : scanResults) {
      pw.printf("  %17s  %9d  %5d  %-16s  %s%n",r.BSSID,r.frequency,r.level,r.capabilities,r.SSID == null ? "" : r.SSID);
    }
  }
  pw.println();
  pw.println("Locks acquired: " + mFullLocksAcquired + " full, "+ mFullHighPerfLocksAcquired+ " full high perf, "+ mScanLocksAcquired+ " scan");
  pw.println("Locks released: " + mFullLocksReleased + " full, "+ mFullHighPerfLocksReleased+ " full high perf, "+ mScanLocksReleased+ " scan");
  pw.println();
  pw.println("Locks held:");
  mLocks.dump(pw);
  mWifiWatchdogStateMachine.dump(fd,pw,args);
  pw.println();
  mWifiStateMachine.dump(fd,pw,args);
  pw.println();
}
