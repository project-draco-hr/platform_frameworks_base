{
  boolean hasMpty=false;
  boolean hasHeld=false;
  boolean hasActive=false;
  boolean hasConnecting=false;
  boolean hasRinging=false;
  boolean mptyIsHeld=false;
  for (int i=0; i < calls.length; i++) {
    CallInfo call=calls[i];
    if (call != null) {
      if (!hasMpty && call.isMpty) {
        mptyIsHeld=call.state == CallInfo.State.HOLDING;
      }
 else       if (call.isMpty && mptyIsHeld && call.state == CallInfo.State.ACTIVE) {
        Log.e("ModelInterpreter","Invalid state");
        throw new InvalidStateEx();
      }
 else       if (!call.isMpty && hasMpty && mptyIsHeld&& call.state == CallInfo.State.HOLDING) {
        Log.e("ModelInterpreter","Invalid state");
        throw new InvalidStateEx();
      }
      hasMpty|=call.isMpty;
      hasHeld|=call.state == CallInfo.State.HOLDING;
      hasActive|=call.state == CallInfo.State.ACTIVE;
      hasConnecting|=call.isConnecting();
      hasRinging|=call.isRinging();
    }
  }
  int ret=0;
  if (hasHeld)   ret++;
  if (hasActive)   ret++;
  if (hasConnecting)   ret++;
  if (hasRinging)   ret++;
  return ret;
}
