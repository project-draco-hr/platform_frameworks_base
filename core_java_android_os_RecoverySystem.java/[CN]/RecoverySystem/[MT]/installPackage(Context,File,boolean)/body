{
synchronized (sRequestLock) {
    LOG_FILE.delete();
    UNCRYPT_PACKAGE_FILE.delete();
    String filename=packageFile.getCanonicalPath();
    Log.w(TAG,"!!! REBOOTING TO INSTALL " + filename + " !!!");
    boolean securityUpdate=filename.endsWith("_s.zip");
    if (filename.startsWith("/data/")) {
      if (processed) {
        if (!BLOCK_MAP_FILE.exists()) {
          Log.e(TAG,"Package claimed to have been processed but failed to find " + "the block map file.");
          throw new IOException("Failed to find block map file");
        }
      }
 else {
        FileWriter uncryptFile=new FileWriter(UNCRYPT_PACKAGE_FILE);
        try {
          uncryptFile.write(filename + "\n");
        }
  finally {
          uncryptFile.close();
        }
        if (!UNCRYPT_PACKAGE_FILE.setReadable(true,false) || !UNCRYPT_PACKAGE_FILE.setWritable(true,false)) {
          Log.e(TAG,"Error setting permission for " + UNCRYPT_PACKAGE_FILE);
        }
        BLOCK_MAP_FILE.delete();
      }
      filename="@/cache/recovery/block.map";
    }
    final String filenameArg="--update_package=" + filename + "\n";
    final String localeArg="--locale=" + Locale.getDefault().toString() + "\n";
    final String securityArg="--security\n";
    String command=filenameArg + localeArg;
    if (securityUpdate) {
      command+=securityArg;
    }
    RecoverySystem rs=(RecoverySystem)context.getSystemService(Context.RECOVERY_SERVICE);
    if (!rs.setupBcb(command)) {
      throw new IOException("Setup BCB failed");
    }
    PowerManager pm=(PowerManager)context.getSystemService(Context.POWER_SERVICE);
    pm.reboot(PowerManager.REBOOT_RECOVERY_UPDATE);
    throw new IOException("Reboot failed (no permissions?)");
  }
}
