{
  final long fileLen=packageFile.length();
  final RandomAccessFile raf=new RandomAccessFile(packageFile,"r");
  try {
    final long startTimeMillis=System.currentTimeMillis();
    if (listener != null) {
      listener.onProgress(0);
    }
    raf.seek(fileLen - 6);
    byte[] footer=new byte[6];
    raf.readFully(footer);
    if (footer[2] != (byte)0xff || footer[3] != (byte)0xff) {
      throw new SignatureException("no signature in file (no footer)");
    }
    final int commentSize=(footer[4] & 0xff) | ((footer[5] & 0xff) << 8);
    final int signatureStart=(footer[0] & 0xff) | ((footer[1] & 0xff) << 8);
    byte[] eocd=new byte[commentSize + 22];
    raf.seek(fileLen - (commentSize + 22));
    raf.readFully(eocd);
    if (eocd[0] != (byte)0x50 || eocd[1] != (byte)0x4b || eocd[2] != (byte)0x05 || eocd[3] != (byte)0x06) {
      throw new SignatureException("no signature in file (bad footer)");
    }
    for (int i=4; i < eocd.length - 3; ++i) {
      if (eocd[i] == (byte)0x50 && eocd[i + 1] == (byte)0x4b && eocd[i + 2] == (byte)0x05 && eocd[i + 3] == (byte)0x06) {
        throw new SignatureException("EOCD marker found after start of EOCD");
      }
    }
    PKCS7 block=new PKCS7(new ByteArrayInputStream(eocd,commentSize + 22 - signatureStart,signatureStart));
    X509Certificate[] certificates=block.getCertificates();
    if (certificates == null || certificates.length == 0) {
      throw new SignatureException("signature contains no certificates");
    }
    X509Certificate cert=certificates[0];
    PublicKey signatureKey=cert.getPublicKey();
    SignerInfo[] signerInfos=block.getSignerInfos();
    if (signerInfos == null || signerInfos.length == 0) {
      throw new SignatureException("signature contains no signedData");
    }
    SignerInfo signerInfo=signerInfos[0];
    boolean verified=false;
    HashSet<X509Certificate> trusted=getTrustedCerts(deviceCertsZipFile == null ? DEFAULT_KEYSTORE : deviceCertsZipFile);
    for (    X509Certificate c : trusted) {
      if (c.getPublicKey().equals(signatureKey)) {
        verified=true;
        break;
      }
    }
    if (!verified) {
      throw new SignatureException("signature doesn't match any trusted key");
    }
    raf.seek(0);
    final ProgressListener listenerForInner=listener;
    SignerInfo verifyResult=block.verify(signerInfo,new InputStream(){
      long toRead=fileLen - commentSize - 2;
      long soFar=0;
      int lastPercent=0;
      long lastPublishTime=startTimeMillis;
      @Override public int read() throws IOException {
        throw new UnsupportedOperationException();
      }
      @Override public int read(      byte[] b,      int off,      int len) throws IOException {
        if (soFar >= toRead) {
          return -1;
        }
        if (Thread.currentThread().isInterrupted()) {
          return -1;
        }
        int size=len;
        if (soFar + size > toRead) {
          size=(int)(toRead - soFar);
        }
        int read=raf.read(b,off,size);
        soFar+=read;
        if (listenerForInner != null) {
          long now=System.currentTimeMillis();
          int p=(int)(soFar * 100 / toRead);
          if (p > lastPercent && now - lastPublishTime > PUBLISH_PROGRESS_INTERVAL_MS) {
            lastPercent=p;
            lastPublishTime=now;
            listenerForInner.onProgress(lastPercent);
          }
        }
        return read;
      }
    }
);
    final boolean interrupted=Thread.interrupted();
    if (listener != null) {
      listener.onProgress(100);
    }
    if (interrupted) {
      throw new SignatureException("verification was interrupted");
    }
    if (verifyResult == null) {
      throw new SignatureException("signature digest verification failed");
    }
  }
  finally {
    raf.close();
  }
}
