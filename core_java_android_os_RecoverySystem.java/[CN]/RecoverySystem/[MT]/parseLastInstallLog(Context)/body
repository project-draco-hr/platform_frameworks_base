{
  try (BufferedReader in=new BufferedReader(new FileReader(LAST_INSTALL_FILE))){
    String line=null;
    int bytesWrittenInMiB=-1, bytesStashedInMiB=-1;
    int timeTotal=-1;
    while ((line=in.readLine()) != null) {
      int numIndex=line.indexOf(':');
      if (numIndex == -1 || numIndex + 1 >= line.length()) {
        continue;
      }
      String numString=line.substring(numIndex + 1).trim();
      long parsedNum;
      try {
        parsedNum=Long.parseLong(numString);
      }
 catch (      NumberFormatException ignored) {
        Log.e(TAG,"Failed to parse numbers in " + line);
        continue;
      }
      final int MiB=1024 * 1024;
      int scaled;
      try {
        if (line.startsWith("bytes")) {
          scaled=Math.toIntExact(parsedNum / MiB);
        }
 else {
          scaled=Math.toIntExact(parsedNum);
        }
      }
 catch (      ArithmeticException ignored) {
        Log.e(TAG,"Number overflows in " + line);
        continue;
      }
      if (line.startsWith("time")) {
        timeTotal=scaled;
      }
 else       if (line.startsWith("bytes_written")) {
        bytesWrittenInMiB=(bytesWrittenInMiB == -1) ? scaled : bytesWrittenInMiB + scaled;
      }
 else       if (line.startsWith("bytes_stashed")) {
        bytesStashedInMiB=(bytesStashedInMiB == -1) ? scaled : bytesStashedInMiB + scaled;
      }
    }
    if (timeTotal != -1) {
      MetricsLogger.histogram(context,"ota_time_total",timeTotal);
    }
    if (bytesWrittenInMiB != -1) {
      MetricsLogger.histogram(context,"ota_written_in_MiBs",bytesWrittenInMiB);
    }
    if (bytesStashedInMiB != -1) {
      MetricsLogger.histogram(context,"ota_stashed_in_MiBs",bytesStashedInMiB);
    }
  }
 catch (  IOException e) {
    Log.e(TAG,"Failed to read lines in last_install",e);
  }
}
