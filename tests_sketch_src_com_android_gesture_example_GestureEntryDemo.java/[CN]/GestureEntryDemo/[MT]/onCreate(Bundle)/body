{
  super.onCreate(savedInstanceState);
  setContentView(R.layout.demo);
  mGestureLibrary=new GestureLibrary("/sdcard/gestureentry/gestures.xml");
  mGestureLibrary.load();
  mRecognitionResult=(Spinner)findViewById(R.id.spinner);
  mRecognitionResult.setOnItemSelectedListener(new OnItemSelectedListener(){
    public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      if (mChangedByRecognizer == false) {
        mGestureLibrary.addGesture(parent.getSelectedItem().toString(),mGesturePad.getCurrentGesture());
      }
 else {
        mChangedByRecognizer=false;
      }
    }
    public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  mGesturePad=(GesturePad)this.findViewById(R.id.drawingpad);
  mGesturePad.setBackgroundColor(Color.BLACK);
  mGesturePad.addGestureListener(new GestureListener(){
    public void onFinishGesture(    GesturePad pad,    MotionEvent event){
      recognize(pad.getCurrentGesture());
    }
    public void onGesture(    GesturePad pad,    MotionEvent event){
    }
    public void onStartGesture(    GesturePad pad,    MotionEvent event){
    }
  }
);
  Button clear=(Button)this.findViewById(R.id.clear);
  clear.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      mGesturePad.clear(false);
      mGesturePad.invalidate();
    }
  }
);
  if (savedInstanceState != null) {
    Gesture g=(Gesture)savedInstanceState.getParcelable("gesture");
    if (g != null) {
      mGesturePad.setCurrentGesture(g);
    }
  }
}
