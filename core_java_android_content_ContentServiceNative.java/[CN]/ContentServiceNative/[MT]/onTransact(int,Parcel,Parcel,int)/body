{
  try {
switch (code) {
case REGISTER_CONTENT_OBSERVER_TRANSACTION:
{
        Uri uri=Uri.CREATOR.createFromParcel(data);
        boolean notifyForDescendents=data.readInt() != 0;
        IContentObserver observer=IContentObserver.Stub.asInterface(data.readStrongBinder());
        registerContentObserver(uri,notifyForDescendents,observer);
        return true;
      }
case UNREGISTER_CHANGE_OBSERVER_TRANSACTION:
{
      IContentObserver observer=IContentObserver.Stub.asInterface(data.readStrongBinder());
      unregisterContentObserver(observer);
      return true;
    }
case NOTIFY_CHANGE_TRANSACTION:
{
    Uri uri=Uri.CREATOR.createFromParcel(data);
    IContentObserver observer=IContentObserver.Stub.asInterface(data.readStrongBinder());
    boolean observerWantsSelfNotifications=data.readInt() != 0;
    boolean syncToNetwork=data.readInt() != 0;
    notifyChange(uri,observer,observerWantsSelfNotifications,syncToNetwork);
    return true;
  }
case START_SYNC_TRANSACTION:
{
  Uri url=null;
  int hasUrl=data.readInt();
  if (hasUrl != 0) {
    url=Uri.CREATOR.createFromParcel(data);
  }
  startSync(url,data.readBundle());
  return true;
}
case CANCEL_SYNC_TRANSACTION:
{
Uri url=null;
int hasUrl=data.readInt();
if (hasUrl != 0) {
  url=Uri.CREATOR.createFromParcel(data);
}
cancelSync(url);
return true;
}
default :
return super.onTransact(code,data,reply,flags);
}
}
 catch (Exception e) {
Log.e("ContentServiceNative","Caught exception in transact",e);
}
return false;
}
