{
synchronized (mLock) {
    Slog.i(TAG,"Dock state changed from " + mPreviousDockState + " to "+ mReportedDockState);
    final int previousDockState=mPreviousDockState;
    mPreviousDockState=mReportedDockState;
    final ContentResolver cr=getContext().getContentResolver();
    if (Settings.Global.getInt(cr,Settings.Global.DEVICE_PROVISIONED,0) == 0) {
      Slog.i(TAG,"Device not provisioned, skipping dock broadcast");
      return;
    }
    Intent intent=new Intent(Intent.ACTION_DOCK_EVENT);
    intent.addFlags(Intent.FLAG_RECEIVER_REPLACE_PENDING);
    intent.putExtra(Intent.EXTRA_DOCK_STATE,mReportedDockState);
    if (Settings.Global.getInt(cr,Settings.Global.DOCK_SOUNDS_ENABLED,1) == 1) {
      String whichSound=null;
      if (mReportedDockState == Intent.EXTRA_DOCK_STATE_UNDOCKED) {
        if ((previousDockState == Intent.EXTRA_DOCK_STATE_DESK) || (previousDockState == Intent.EXTRA_DOCK_STATE_LE_DESK) || (previousDockState == Intent.EXTRA_DOCK_STATE_HE_DESK)) {
          whichSound=Settings.Global.DESK_UNDOCK_SOUND;
        }
 else         if (previousDockState == Intent.EXTRA_DOCK_STATE_CAR) {
          whichSound=Settings.Global.CAR_UNDOCK_SOUND;
        }
      }
 else {
        if ((mReportedDockState == Intent.EXTRA_DOCK_STATE_DESK) || (mReportedDockState == Intent.EXTRA_DOCK_STATE_LE_DESK) || (mReportedDockState == Intent.EXTRA_DOCK_STATE_HE_DESK)) {
          whichSound=Settings.Global.DESK_DOCK_SOUND;
        }
 else         if (mReportedDockState == Intent.EXTRA_DOCK_STATE_CAR) {
          whichSound=Settings.Global.CAR_DOCK_SOUND;
        }
      }
      if (whichSound != null) {
        final String soundPath=Settings.Global.getString(cr,whichSound);
        if (soundPath != null) {
          final Uri soundUri=Uri.parse("file://" + soundPath);
          if (soundUri != null) {
            final Ringtone sfx=RingtoneManager.getRingtone(getContext(),soundUri);
            if (sfx != null) {
              sfx.setStreamType(AudioManager.STREAM_SYSTEM);
              sfx.play();
            }
          }
        }
      }
    }
    getContext().sendStickyBroadcastAsUser(intent,UserHandle.ALL);
    mWakeLock.release();
  }
}
