{
  if (wal) {
    mDatabase.enableWriteAheadLogging();
  }
 else {
    mDatabase.disableWriteAheadLogging();
  }
  SQLiteStatement stmt=mDatabase.compileStatement("insert into t values(?,?);");
  assertEquals(mDatabase.mNativeHandle,stmt.nHandle);
  assertEquals(mDatabase,stmt.mDatabase);
  assertEquals(0,stmt.nStatement);
  assertEquals(0,stmt.getSqlStatementId());
  int colValue=new Random().nextInt();
  stmt.bindLong(1,colValue);
  assertEquals(0,stmt.getSqlStatementId());
  assertEquals(mDatabase.mNativeHandle,stmt.nHandle);
  assertEquals(mDatabase,stmt.mDatabase);
  stmt.bindString(2,"blah" + colValue);
  assertEquals(0,stmt.getSqlStatementId());
  assertEquals(mDatabase.mNativeHandle,stmt.nHandle);
  assertEquals(mDatabase,stmt.mDatabase);
  stmt.executeInsert();
  assertEquals(0,stmt.nStatement);
  assertEquals(0,stmt.getSqlStatementId());
  assertEquals(mDatabase.mNativeHandle,stmt.nHandle);
  assertEquals(mDatabase,stmt.mDatabase);
  stmt.close();
  assertEquals(0,stmt.nStatement);
  assertEquals(0,stmt.getSqlStatementId());
  assertEquals(mDatabase,stmt.mDatabase);
  stmt=mDatabase.compileStatement("select i from t where j=?;");
  assertEquals(0,stmt.nStatement);
  assertEquals(0,stmt.getSqlStatementId());
  assertEquals(mDatabase.mNativeHandle,stmt.nHandle);
  assertEquals(mDatabase,stmt.mDatabase);
  stmt.bindString(1,"blah" + colValue);
  assertEquals(0,stmt.nStatement);
  assertEquals(0,stmt.getSqlStatementId());
  assertEquals(mDatabase.mNativeHandle,stmt.nHandle);
  assertEquals(mDatabase,stmt.mDatabase);
  Long l=stmt.simpleQueryForLong();
  assertEquals(colValue,l.intValue());
  assertEquals(0,stmt.nStatement);
  assertEquals(0,stmt.getSqlStatementId());
  assertEquals(mDatabase.mNativeHandle,stmt.nHandle);
  assertEquals(mDatabase,stmt.mDatabase);
  stmt.close();
  assertEquals(0,stmt.nStatement);
  assertEquals(0,stmt.getSqlStatementId());
  assertEquals(mDatabase.mNativeHandle,stmt.nHandle);
  assertEquals(mDatabase,stmt.mDatabase);
}
