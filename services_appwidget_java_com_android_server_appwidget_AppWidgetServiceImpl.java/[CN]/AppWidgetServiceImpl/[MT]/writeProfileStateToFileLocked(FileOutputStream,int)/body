{
  int N;
  try {
    XmlSerializer out=new FastXmlSerializer();
    out.setOutput(stream,"utf-8");
    out.startDocument(null,true);
    out.startTag(null,"gs");
    out.attribute(null,"version",String.valueOf(CURRENT_VERSION));
    N=mProviders.size();
    for (int i=0; i < N; i++) {
      Provider provider=mProviders.get(i);
      if (provider.getUserId() != userId) {
        continue;
      }
      if (provider.widgets.size() > 0) {
        serializeProvider(out,provider);
      }
    }
    N=mHosts.size();
    for (int i=0; i < N; i++) {
      Host host=mHosts.get(i);
      if (host.getUserId() != userId) {
        continue;
      }
      serializeHost(out,host);
    }
    N=mWidgets.size();
    for (int i=0; i < N; i++) {
      Widget widget=mWidgets.get(i);
      if (widget.host.getUserId() != userId) {
        continue;
      }
      serializeAppWidget(out,widget);
    }
    Iterator<Pair<Integer,String>> it=mPackagesWithBindWidgetPermission.iterator();
    while (it.hasNext()) {
      Pair<Integer,String> binding=it.next();
      if (binding.first != userId) {
        continue;
      }
      out.startTag(null,"b");
      out.attribute(null,"packageName",binding.second);
      out.endTag(null,"b");
    }
    out.endTag(null,"gs");
    out.endDocument();
    return true;
  }
 catch (  IOException e) {
    Slog.w(TAG,"Failed to write state: " + e);
    return false;
  }
}
