{
  if (id != null && id.provider != null && !id.provider.zombie && !id.host.zombie) {
    if (id.host.callbacks != null) {
      try {
        id.host.callbacks.viewDataChanged(id.appWidgetId,viewId,mUserId);
      }
 catch (      RemoteException e) {
        id.host.callbacks=null;
      }
    }
    if (id.host.callbacks == null) {
      Set<FilterComparison> keys=mRemoteViewsServicesAppWidgets.keySet();
      for (      FilterComparison key : keys) {
        if (mRemoteViewsServicesAppWidgets.get(key).contains(id.appWidgetId)) {
          Intent intent=key.getIntent();
          final ServiceConnection conn=new ServiceConnection(){
            @Override public void onServiceConnected(            ComponentName name,            IBinder service){
              IRemoteViewsFactory cb=IRemoteViewsFactory.Stub.asInterface(service);
              try {
                cb.onDataSetChangedAsync();
              }
 catch (              RemoteException e) {
                e.printStackTrace();
              }
catch (              RuntimeException e) {
                e.printStackTrace();
              }
              mContext.unbindService(this);
            }
            @Override public void onServiceDisconnected(            android.content.ComponentName name){
            }
          }
;
          int userId=UserHandle.getUserId(id.provider.uid);
          final long token=Binder.clearCallingIdentity();
          try {
            mContext.bindServiceAsUser(intent,conn,Context.BIND_AUTO_CREATE,new UserHandle(userId));
          }
  finally {
            Binder.restoreCallingIdentity(token);
          }
        }
      }
    }
  }
}
