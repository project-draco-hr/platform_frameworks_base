{
  if (mCircularClipAnimator != null) {
    mCircularClipAnimator.cancel();
  }
  int w=getMeasuredWidth() - o.x;
  int h=getMeasuredHeight() - o.y;
  mMaxClipRadius=(int)Math.ceil(Math.sqrt(o.x * o.x + o.y * o.y));
  mMaxClipRadius=(int)Math.max(mMaxClipRadius,Math.ceil(Math.sqrt(w * w + o.y * o.y)));
  mMaxClipRadius=(int)Math.max(mMaxClipRadius,Math.ceil(Math.sqrt(w * w + h * h)));
  mMaxClipRadius=(int)Math.max(mMaxClipRadius,Math.ceil(Math.sqrt(o.x * o.x + h * h)));
  mClipOrigin.set(o.x,o.y);
  mClipRadius=fromRadius;
  int duration=Utilities.calculateTranslationAnimationDuration((int)mMaxClipRadius);
  mCircularClipAnimator=ObjectAnimator.ofFloat(this,"circularClipRadius",toRadius);
  mCircularClipAnimator.setDuration(duration);
  mCircularClipAnimator.setInterpolator(BakedBezierInterpolator.INSTANCE);
  mCircularClipAnimator.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      mCircularClipEnabled=false;
      if (postRunnable != null) {
        postRunnable.run();
      }
    }
  }
);
  mCircularClipAnimator.start();
  mCircularClipEnabled=true;
  if (animateInContent) {
    animateAppInfoButtonIn(duration);
  }
}
