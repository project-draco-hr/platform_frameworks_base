{
  final Matrix MATRIX1=new Matrix();
  MATRIX1.setTranslate(10.0f,20.0f);
  final Matrix MATRIX2=new Matrix();
  MATRIX2.setTranslate(110.0f,120.0f);
  final Matrix NAN_MATRIX=new Matrix();
  NAN_MATRIX.setValues(new float[]{Float.NaN,Float.NaN,Float.NaN,Float.NaN,Float.NaN,Float.NaN,Float.NaN,Float.NaN,Float.NaN});
  final int SELECTION_START1=2;
  final int SELECTION_END1=7;
  final String COMPOSING_TEXT1="0123456789";
  final int COMPOSING_TEXT_START1=0;
  final float INSERTION_MARKER_HORIZONTAL1=10.5f;
  final float INSERTION_MARKER_TOP1=100.1f;
  final float INSERTION_MARKER_BASELINE1=110.4f;
  final float INSERTION_MARKER_BOTOM1=111.0f;
  final int SELECTION_START2=4;
  final int SELECTION_END2=8;
  final String COMPOSING_TEXT2="9876543210";
  final int COMPOSING_TEXT_START2=3;
  final float INSERTION_MARKER_HORIZONTAL2=14.5f;
  final float INSERTION_MARKER_TOP2=200.1f;
  final float INSERTION_MARKER_BASELINE2=210.4f;
  final float INSERTION_MARKER_BOTOM2=211.0f;
  assertEquals(new Builder().build(),new Builder().build());
  assertEquals(new Builder().setSelectionRange(SELECTION_START1,SELECTION_END1).build(),new Builder().setSelectionRange(SELECTION_START1,SELECTION_END1).build());
  assertNotEquals(new Builder().setSelectionRange(SELECTION_START1,SELECTION_END1).build(),new Builder().setSelectionRange(SELECTION_START1,SELECTION_END2).build());
  assertNotEquals(new Builder().setSelectionRange(SELECTION_START1,SELECTION_END1).build(),new Builder().setSelectionRange(SELECTION_START2,SELECTION_END1).build());
  assertNotEquals(new Builder().setSelectionRange(SELECTION_START1,SELECTION_END1).build(),new Builder().setSelectionRange(SELECTION_START2,SELECTION_END2).build());
  assertEquals(new Builder().setComposingText(COMPOSING_TEXT_START1,COMPOSING_TEXT1).build(),new Builder().setComposingText(COMPOSING_TEXT_START1,COMPOSING_TEXT1).build());
  assertNotEquals(new Builder().setComposingText(COMPOSING_TEXT_START1,COMPOSING_TEXT1).build(),new Builder().setComposingText(COMPOSING_TEXT_START2,COMPOSING_TEXT1).build());
  assertNotEquals(new Builder().setComposingText(COMPOSING_TEXT_START1,COMPOSING_TEXT1).build(),new Builder().setComposingText(COMPOSING_TEXT_START1,COMPOSING_TEXT2).build());
  assertNotEquals(new Builder().setComposingText(COMPOSING_TEXT_START1,COMPOSING_TEXT1).build(),new Builder().setComposingText(COMPOSING_TEXT_START2,COMPOSING_TEXT2).build());
  assertEquals(new Builder().setMatrix(MATRIX1).setInsertionMarkerLocation(Float.NaN,Float.NaN,Float.NaN,Float.NaN).build(),new Builder().setMatrix(MATRIX1).setInsertionMarkerLocation(Float.NaN,Float.NaN,Float.NaN,Float.NaN).build());
  assertEquals(new Builder().setMatrix(MATRIX1).build(),new Builder().setMatrix(MATRIX1).build());
  assertNotEquals(new Builder().setMatrix(MATRIX1).build(),new Builder().setMatrix(MATRIX2).build());
  assertNotEquals(new Builder().setMatrix(MATRIX1).build(),new Builder().setMatrix(NAN_MATRIX).build());
  assertNotEquals(new Builder().setMatrix(NAN_MATRIX).build(),new Builder().setMatrix(NAN_MATRIX).build());
  assertEquals(new Builder().setMatrix(MATRIX1).setInsertionMarkerLocation(INSERTION_MARKER_HORIZONTAL1,INSERTION_MARKER_TOP1,INSERTION_MARKER_BASELINE1,INSERTION_MARKER_BOTOM1).build(),new Builder().setMatrix(MATRIX1).setInsertionMarkerLocation(INSERTION_MARKER_HORIZONTAL1,INSERTION_MARKER_TOP1,INSERTION_MARKER_BASELINE1,INSERTION_MARKER_BOTOM1).build());
  assertNotEquals(new Builder().setMatrix(MATRIX1).setInsertionMarkerLocation(Float.NaN,INSERTION_MARKER_TOP1,INSERTION_MARKER_BASELINE1,INSERTION_MARKER_BOTOM1).build(),new Builder().setMatrix(MATRIX1).setInsertionMarkerLocation(INSERTION_MARKER_HORIZONTAL1,INSERTION_MARKER_TOP1,INSERTION_MARKER_BASELINE1,INSERTION_MARKER_BOTOM1).build());
  assertNotEquals(new Builder().setMatrix(MATRIX1).setInsertionMarkerLocation(INSERTION_MARKER_HORIZONTAL1,INSERTION_MARKER_TOP1,INSERTION_MARKER_BASELINE1,INSERTION_MARKER_BOTOM1).build(),new Builder().setMatrix(MATRIX1).setInsertionMarkerLocation(INSERTION_MARKER_HORIZONTAL2,INSERTION_MARKER_TOP1,INSERTION_MARKER_BASELINE1,INSERTION_MARKER_BOTOM1).build());
  assertNotEquals(new Builder().setMatrix(MATRIX1).setInsertionMarkerLocation(INSERTION_MARKER_HORIZONTAL1,INSERTION_MARKER_TOP1,INSERTION_MARKER_BASELINE1,INSERTION_MARKER_BOTOM1).build(),new Builder().setMatrix(MATRIX1).setInsertionMarkerLocation(INSERTION_MARKER_HORIZONTAL1,INSERTION_MARKER_TOP2,INSERTION_MARKER_BASELINE1,INSERTION_MARKER_BOTOM1).build());
  assertNotEquals(new Builder().setMatrix(MATRIX1).setInsertionMarkerLocation(INSERTION_MARKER_HORIZONTAL1,INSERTION_MARKER_TOP1,INSERTION_MARKER_BASELINE1,INSERTION_MARKER_BOTOM1).build(),new Builder().setMatrix(MATRIX1).setInsertionMarkerLocation(INSERTION_MARKER_HORIZONTAL1,INSERTION_MARKER_TOP1,INSERTION_MARKER_BASELINE2,INSERTION_MARKER_BOTOM1).build());
  assertNotEquals(new Builder().setMatrix(MATRIX1).setInsertionMarkerLocation(INSERTION_MARKER_HORIZONTAL1,INSERTION_MARKER_TOP1,INSERTION_MARKER_BASELINE1,INSERTION_MARKER_BOTOM1).build(),new Builder().setMatrix(MATRIX1).setInsertionMarkerLocation(INSERTION_MARKER_HORIZONTAL2,INSERTION_MARKER_TOP1,INSERTION_MARKER_BASELINE1,INSERTION_MARKER_BOTOM1).build());
  assertNotEquals(new Builder().setMatrix(MATRIX1).setInsertionMarkerLocation(INSERTION_MARKER_HORIZONTAL1,INSERTION_MARKER_TOP1,INSERTION_MARKER_BASELINE1,INSERTION_MARKER_BOTOM1).build(),new Builder().setMatrix(MATRIX1).setInsertionMarkerLocation(INSERTION_MARKER_HORIZONTAL1,INSERTION_MARKER_TOP1,INSERTION_MARKER_BASELINE1,INSERTION_MARKER_BOTOM2).build());
}
