{
  final int SELECTION_START=30;
  final int SELECTION_END=40;
  final int CANDIDATES_START=32;
  final int CANDIDATES_END=33;
  final float INSERTION_MARKER_HORIZONTAL=10.5f;
  final float INSERTION_MARKER_TOP=100.1f;
  final float INSERTION_MARKER_BASELINE=110.4f;
  final float INSERTION_MARKER_BOTOM=111.0f;
  Matrix TRANSFORM_MATRIX=new Matrix(Matrix.IDENTITY_MATRIX);
  TRANSFORM_MATRIX.setScale(10.0f,20.0f);
  final CursorAnchorInfoBuilder builder=new CursorAnchorInfoBuilder();
  builder.setSelectionRange(SELECTION_START,SELECTION_END).setCandidateRange(CANDIDATES_START,CANDIDATES_END).setInsertionMarkerLocation(INSERTION_MARKER_HORIZONTAL,INSERTION_MARKER_TOP,INSERTION_MARKER_BASELINE,INSERTION_MARKER_BOTOM).setMatrix(TRANSFORM_MATRIX);
  for (int i=0; i < MANY_RECTS.length; i++) {
    final RectF rect=MANY_RECTS[i];
    if (rect != null) {
      builder.addCharacterRect(i,rect.left,rect.top,rect.right,rect.bottom);
    }
  }
  final CursorAnchorInfo info=builder.build();
  assertEquals(SELECTION_START,info.getSelectionStart());
  assertEquals(SELECTION_END,info.getSelectionEnd());
  assertEquals(CANDIDATES_START,info.getCandidatesStart());
  assertEquals(CANDIDATES_END,info.getCandidatesEnd());
  assertEquals(INSERTION_MARKER_HORIZONTAL,info.getInsertionMarkerHorizontal());
  assertEquals(INSERTION_MARKER_TOP,info.getInsertionMarkerTop());
  assertEquals(INSERTION_MARKER_BASELINE,info.getInsertionMarkerBaseline());
  assertEquals(INSERTION_MARKER_BOTOM,info.getInsertionMarkerBottom());
  assertEquals(TRANSFORM_MATRIX,info.getMatrix());
  for (int i=0; i < MANY_RECTS.length; i++) {
    final RectF rect=MANY_RECTS[i];
    assertEquals(rect,info.getCharacterRect(i));
  }
  final CursorAnchorInfo info2=builder.build();
  assertEquals(SELECTION_START,info2.getSelectionStart());
  assertEquals(SELECTION_END,info2.getSelectionEnd());
  assertEquals(CANDIDATES_START,info2.getCandidatesStart());
  assertEquals(CANDIDATES_END,info2.getCandidatesEnd());
  assertEquals(INSERTION_MARKER_HORIZONTAL,info2.getInsertionMarkerHorizontal());
  assertEquals(INSERTION_MARKER_TOP,info2.getInsertionMarkerTop());
  assertEquals(INSERTION_MARKER_BASELINE,info2.getInsertionMarkerBaseline());
  assertEquals(INSERTION_MARKER_BOTOM,info2.getInsertionMarkerBottom());
  assertEquals(TRANSFORM_MATRIX,info2.getMatrix());
  for (int i=0; i < MANY_RECTS.length; i++) {
    final RectF rect=MANY_RECTS[i];
    assertEquals(rect,info2.getCharacterRect(i));
  }
  assertEquals(info,info2);
  assertEquals(info.hashCode(),info2.hashCode());
  final CursorAnchorInfo info3=cloneViaParcel(info2);
  assertEquals(SELECTION_START,info3.getSelectionStart());
  assertEquals(SELECTION_END,info3.getSelectionEnd());
  assertEquals(CANDIDATES_START,info3.getCandidatesStart());
  assertEquals(CANDIDATES_END,info3.getCandidatesEnd());
  assertEquals(INSERTION_MARKER_HORIZONTAL,info3.getInsertionMarkerHorizontal());
  assertEquals(INSERTION_MARKER_TOP,info3.getInsertionMarkerTop());
  assertEquals(INSERTION_MARKER_BASELINE,info3.getInsertionMarkerBaseline());
  assertEquals(INSERTION_MARKER_BOTOM,info3.getInsertionMarkerBottom());
  assertEquals(TRANSFORM_MATRIX,info3.getMatrix());
  for (int i=0; i < MANY_RECTS.length; i++) {
    final RectF rect=MANY_RECTS[i];
    assertEquals(rect,info3.getCharacterRect(i));
  }
  assertEquals(info.hashCode(),info3.hashCode());
  builder.reset();
  final CursorAnchorInfo uninitializedInfo=builder.build();
  assertEquals(-1,uninitializedInfo.getSelectionStart());
  assertEquals(-1,uninitializedInfo.getSelectionEnd());
  assertEquals(-1,uninitializedInfo.getCandidatesStart());
  assertEquals(-1,uninitializedInfo.getCandidatesEnd());
  assertEquals(Float.NaN,uninitializedInfo.getInsertionMarkerHorizontal());
  assertEquals(Float.NaN,uninitializedInfo.getInsertionMarkerTop());
  assertEquals(Float.NaN,uninitializedInfo.getInsertionMarkerBaseline());
  assertEquals(Float.NaN,uninitializedInfo.getInsertionMarkerBottom());
  assertEquals(Matrix.IDENTITY_MATRIX,uninitializedInfo.getMatrix());
}
