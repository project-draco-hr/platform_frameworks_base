{
  final int SELECTION_START=30;
  final int SELECTION_END=40;
  final int COMPOSING_TEXT_START=32;
  final String COMPOSING_TEXT="test";
  final int INSERTION_MARKER_FLAGS=FLAG_HAS_VISIBLE_REGION | FLAG_HAS_INVISIBLE_REGION | FLAG_IS_RTL;
  final float INSERTION_MARKER_HORIZONTAL=10.5f;
  final float INSERTION_MARKER_TOP=100.1f;
  final float INSERTION_MARKER_BASELINE=110.4f;
  final float INSERTION_MARKER_BOTOM=111.0f;
  Matrix TRANSFORM_MATRIX=new Matrix(Matrix.IDENTITY_MATRIX);
  TRANSFORM_MATRIX.setScale(10.0f,20.0f);
  final Builder builder=new Builder();
  builder.setSelectionRange(SELECTION_START,SELECTION_END).setComposingText(COMPOSING_TEXT_START,COMPOSING_TEXT).setInsertionMarkerLocation(INSERTION_MARKER_HORIZONTAL,INSERTION_MARKER_TOP,INSERTION_MARKER_BASELINE,INSERTION_MARKER_BOTOM,INSERTION_MARKER_FLAGS).setMatrix(TRANSFORM_MATRIX);
  for (int i=0; i < MANY_BOUNDS.length; i++) {
    final RectF bounds=MANY_BOUNDS[i];
    final int flags=MANY_FLAGS_ARRAY[i];
    builder.addCharacterBounds(i,bounds.left,bounds.top,bounds.right,bounds.bottom,flags);
  }
  final CursorAnchorInfo info=builder.build();
  assertEquals(SELECTION_START,info.getSelectionStart());
  assertEquals(SELECTION_END,info.getSelectionEnd());
  assertEquals(COMPOSING_TEXT_START,info.getComposingTextStart());
  assertTrue(TextUtils.equals(COMPOSING_TEXT,info.getComposingText()));
  assertEquals(INSERTION_MARKER_FLAGS,info.getInsertionMarkerFlags());
  assertEquals(INSERTION_MARKER_HORIZONTAL,info.getInsertionMarkerHorizontal());
  assertEquals(INSERTION_MARKER_TOP,info.getInsertionMarkerTop());
  assertEquals(INSERTION_MARKER_BASELINE,info.getInsertionMarkerBaseline());
  assertEquals(INSERTION_MARKER_BOTOM,info.getInsertionMarkerBottom());
  assertEquals(TRANSFORM_MATRIX,info.getMatrix());
  for (int i=0; i < MANY_BOUNDS.length; i++) {
    final RectF expectedBounds=MANY_BOUNDS[i];
    assertEquals(expectedBounds,info.getCharacterRect(i));
  }
  assertNull(info.getCharacterRect(-1));
  assertNull(info.getCharacterRect(MANY_BOUNDS.length + 1));
  for (int i=0; i < MANY_FLAGS_ARRAY.length; i++) {
    final int expectedFlags=MANY_FLAGS_ARRAY[i];
    assertEquals(expectedFlags,info.getCharacterRectFlags(i));
  }
  assertEquals(0,info.getCharacterRectFlags(-1));
  assertEquals(0,info.getCharacterRectFlags(MANY_BOUNDS.length + 1));
  final CursorAnchorInfo info2=builder.build();
  assertEquals(SELECTION_START,info2.getSelectionStart());
  assertEquals(SELECTION_END,info2.getSelectionEnd());
  assertEquals(COMPOSING_TEXT_START,info2.getComposingTextStart());
  assertTrue(TextUtils.equals(COMPOSING_TEXT,info2.getComposingText()));
  assertEquals(INSERTION_MARKER_FLAGS,info2.getInsertionMarkerFlags());
  assertEquals(INSERTION_MARKER_HORIZONTAL,info2.getInsertionMarkerHorizontal());
  assertEquals(INSERTION_MARKER_TOP,info2.getInsertionMarkerTop());
  assertEquals(INSERTION_MARKER_BASELINE,info2.getInsertionMarkerBaseline());
  assertEquals(INSERTION_MARKER_BOTOM,info2.getInsertionMarkerBottom());
  assertEquals(TRANSFORM_MATRIX,info2.getMatrix());
  for (int i=0; i < MANY_BOUNDS.length; i++) {
    final RectF expectedBounds=MANY_BOUNDS[i];
    assertEquals(expectedBounds,info2.getCharacterRect(i));
  }
  assertNull(info2.getCharacterRect(-1));
  assertNull(info2.getCharacterRect(MANY_BOUNDS.length + 1));
  for (int i=0; i < MANY_FLAGS_ARRAY.length; i++) {
    final int expectedFlags=MANY_FLAGS_ARRAY[i];
    assertEquals(expectedFlags,info2.getCharacterRectFlags(i));
  }
  assertEquals(0,info2.getCharacterRectFlags(-1));
  assertEquals(0,info2.getCharacterRectFlags(MANY_BOUNDS.length + 1));
  assertEquals(info,info2);
  assertEquals(info.hashCode(),info2.hashCode());
  final CursorAnchorInfo info3=cloneViaParcel(info2);
  assertEquals(SELECTION_START,info3.getSelectionStart());
  assertEquals(SELECTION_END,info3.getSelectionEnd());
  assertEquals(COMPOSING_TEXT_START,info3.getComposingTextStart());
  assertTrue(TextUtils.equals(COMPOSING_TEXT,info3.getComposingText()));
  assertEquals(INSERTION_MARKER_FLAGS,info3.getInsertionMarkerFlags());
  assertEquals(INSERTION_MARKER_HORIZONTAL,info3.getInsertionMarkerHorizontal());
  assertEquals(INSERTION_MARKER_TOP,info3.getInsertionMarkerTop());
  assertEquals(INSERTION_MARKER_BASELINE,info3.getInsertionMarkerBaseline());
  assertEquals(INSERTION_MARKER_BOTOM,info3.getInsertionMarkerBottom());
  assertEquals(TRANSFORM_MATRIX,info3.getMatrix());
  for (int i=0; i < MANY_BOUNDS.length; i++) {
    final RectF expectedBounds=MANY_BOUNDS[i];
    assertEquals(expectedBounds,info3.getCharacterRect(i));
  }
  assertNull(info3.getCharacterRect(-1));
  assertNull(info3.getCharacterRect(MANY_BOUNDS.length + 1));
  for (int i=0; i < MANY_FLAGS_ARRAY.length; i++) {
    final int expectedFlags=MANY_FLAGS_ARRAY[i];
    assertEquals(expectedFlags,info3.getCharacterRectFlags(i));
  }
  assertEquals(0,info3.getCharacterRectFlags(-1));
  assertEquals(0,info3.getCharacterRectFlags(MANY_BOUNDS.length + 1));
  assertEquals(info.hashCode(),info3.hashCode());
  builder.reset();
  final CursorAnchorInfo uninitializedInfo=builder.build();
  assertEquals(-1,uninitializedInfo.getSelectionStart());
  assertEquals(-1,uninitializedInfo.getSelectionEnd());
  assertEquals(-1,uninitializedInfo.getComposingTextStart());
  assertNull(uninitializedInfo.getComposingText());
  assertEquals(0,uninitializedInfo.getInsertionMarkerFlags());
  assertEquals(Float.NaN,uninitializedInfo.getInsertionMarkerHorizontal());
  assertEquals(Float.NaN,uninitializedInfo.getInsertionMarkerTop());
  assertEquals(Float.NaN,uninitializedInfo.getInsertionMarkerBaseline());
  assertEquals(Float.NaN,uninitializedInfo.getInsertionMarkerBottom());
  assertEquals(Matrix.IDENTITY_MATRIX,uninitializedInfo.getMatrix());
}
