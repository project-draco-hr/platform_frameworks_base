{
synchronized (WebCoreThreadWatchdog.class) {
    if (mPendingQuit) {
      return false;
    }
    mHandler=new Handler(){
      @Override public void handleMessage(      Message msg){
switch (msg.what) {
case IS_ALIVE:
synchronized (WebCoreThreadWatchdog.class) {
            if (mPaused) {
              return;
            }
            removeMessages(TIMED_OUT);
            sendMessageDelayed(obtainMessage(TIMED_OUT),TIMEOUT_PERIOD);
            mWebCoreThreadHandler.sendMessageDelayed(mWebCoreThreadHandler.obtainMessage(EventHub.HEARTBEAT,mHandler.obtainMessage(IS_ALIVE)),HEARTBEAT_PERIOD);
          }
        break;
case TIMED_OUT:
      new AlertDialog.Builder(mContext).setMessage(com.android.internal.R.string.webpage_unresponsive).setPositiveButton(com.android.internal.R.string.force_close,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          Process.killProcess(Process.myPid());
        }
      }
).setNegativeButton(com.android.internal.R.string.wait,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          sendMessageDelayed(obtainMessage(TIMED_OUT),SUBSEQUENT_TIMEOUT_PERIOD);
        }
      }
).setOnCancelListener(new DialogInterface.OnCancelListener(){
        @Override public void onCancel(        DialogInterface dialog){
          sendMessageDelayed(obtainMessage(TIMED_OUT),SUBSEQUENT_TIMEOUT_PERIOD);
        }
      }
).setIcon(android.R.drawable.ic_dialog_alert).show();
    break;
case QUIT:
  Looper.myLooper().quit();
break;
}
}
}
;
return true;
}
}
