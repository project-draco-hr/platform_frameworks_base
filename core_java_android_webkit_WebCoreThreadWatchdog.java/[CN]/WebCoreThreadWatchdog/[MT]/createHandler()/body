{
synchronized (WebCoreThreadWatchdog.class) {
    mHandler=new Handler(){
      @Override public void handleMessage(      Message msg){
switch (msg.what) {
case IS_ALIVE:
synchronized (WebCoreThreadWatchdog.class) {
            if (mPaused) {
              return;
            }
            removeMessages(TIMED_OUT);
            sendMessageDelayed(obtainMessage(TIMED_OUT),TIMEOUT_PERIOD);
            mWebCoreThreadHandler.sendMessageDelayed(mWebCoreThreadHandler.obtainMessage(EventHub.HEARTBEAT,mHandler.obtainMessage(IS_ALIVE)),HEARTBEAT_PERIOD);
          }
        break;
case TIMED_OUT:
      boolean postedDialog=false;
synchronized (WebCoreThreadWatchdog.class) {
      Iterator<WebViewClassic> it=mWebViews.iterator();
      while (it.hasNext()) {
        WebView activeView=it.next().getWebView();
        if (activeView.getWindowToken() != null && activeView.getViewRootImpl() != null) {
          postedDialog=activeView.post(new PageNotRespondingRunnable(activeView.getContext(),this));
          if (postedDialog) {
            break;
          }
        }
      }
      if (!postedDialog) {
        sendMessageDelayed(obtainMessage(TIMED_OUT),SUBSEQUENT_TIMEOUT_PERIOD);
      }
    }
  break;
}
}
}
;
}
}
