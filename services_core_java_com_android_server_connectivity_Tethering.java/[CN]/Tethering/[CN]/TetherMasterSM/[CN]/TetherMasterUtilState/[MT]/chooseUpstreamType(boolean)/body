{
  int upType=ConnectivityManager.TYPE_NONE;
  String iface=null;
  updateConfiguration();
synchronized (mPublicSync) {
    if (VDBG) {
      Log.d(TAG,"chooseUpstreamType has upstream iface types:");
      for (      Integer netType : mUpstreamIfaceTypes) {
        Log.d(TAG," " + netType);
      }
    }
    for (    Integer netType : mUpstreamIfaceTypes) {
      NetworkInfo info=getConnectivityManager().getNetworkInfo(netType.intValue());
      if ((info != null) && info.isConnected()) {
        upType=netType.intValue();
        break;
      }
    }
  }
  if (DBG) {
    Log.d(TAG,"chooseUpstreamType(" + tryCell + "),"+ " preferredApn="+ ConnectivityManager.getNetworkTypeName(mPreferredUpstreamMobileApn)+ ", got type="+ ConnectivityManager.getNetworkTypeName(upType));
  }
switch (upType) {
case ConnectivityManager.TYPE_MOBILE_DUN:
case ConnectivityManager.TYPE_MOBILE_HIPRI:
    turnOnUpstreamMobileConnection(upType);
  break;
case ConnectivityManager.TYPE_NONE:
if (tryCell && turnOnUpstreamMobileConnection(mPreferredUpstreamMobileApn)) {
}
 else {
  sendMessageDelayed(CMD_RETRY_UPSTREAM,UPSTREAM_SETTLE_TIME_MS);
}
break;
default :
turnOffUpstreamMobileConnection();
break;
}
if (upType != ConnectivityManager.TYPE_NONE) {
LinkProperties linkProperties=getConnectivityManager().getLinkProperties(upType);
if (linkProperties != null) {
Log.i(TAG,"Finding IPv4 upstream interface on: " + linkProperties);
RouteInfo ipv4Default=RouteInfo.selectBestRoute(linkProperties.getAllRoutes(),Inet4Address.ANY);
if (ipv4Default != null) {
iface=ipv4Default.getInterface();
Log.i(TAG,"Found interface " + ipv4Default.getInterface());
}
 else {
Log.i(TAG,"No IPv4 upstream interface, giving up.");
}
}
if (iface != null) {
String[] dnsServers=mDefaultDnsServers;
Collection<InetAddress> dnses=linkProperties.getDnsServers();
if (dnses != null && !dnses.isEmpty()) {
dnsServers=NetworkUtils.makeStrings(dnses);
}
try {
Network network=getConnectivityManager().getNetworkForType(upType);
if (network == null) {
Log.e(TAG,"No Network for upstream type " + upType + "!");
}
if (VDBG) {
Log.d(TAG,"Setting DNS forwarders: Network=" + network + ", dnsServers="+ Arrays.toString(dnsServers));
}
mNMService.setDnsForwarders(network,dnsServers);
}
 catch (Exception e) {
Log.e(TAG,"Setting DNS forwarders failed!");
transitionTo(mSetDnsForwardersErrorState);
}
}
}
notifyTetheredOfNewUpstreamIface(iface);
}
