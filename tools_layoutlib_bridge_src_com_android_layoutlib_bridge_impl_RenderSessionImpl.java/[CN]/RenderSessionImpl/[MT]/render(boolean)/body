{
  checkLock();
  SessionParams params=getParams();
  try {
    if (mViewRoot == null) {
      return ERROR_NOT_INFLATED.createResult();
    }
    RenderingMode renderingMode=params.getRenderingMode();
    HardwareConfig hardwareConfig=params.getHardwareConfig();
    boolean newRenderSize=false;
    if (mMeasuredScreenWidth == -1) {
      newRenderSize=true;
      mMeasuredScreenWidth=hardwareConfig.getScreenWidth();
      mMeasuredScreenHeight=hardwareConfig.getScreenHeight();
      if (renderingMode != RenderingMode.NORMAL) {
        int widthMeasureSpecMode=renderingMode.isHorizExpand() ? MeasureSpec.UNSPECIFIED : MeasureSpec.EXACTLY;
        int heightMeasureSpecMode=renderingMode.isVertExpand() ? MeasureSpec.UNSPECIFIED : MeasureSpec.EXACTLY;
        @SuppressWarnings("deprecation") Pair<Integer,Integer> exactMeasure=measureView(mViewRoot,mContentRoot.getChildAt(0),mMeasuredScreenWidth,MeasureSpec.EXACTLY,mMeasuredScreenHeight,MeasureSpec.EXACTLY);
        @SuppressWarnings("deprecation") Pair<Integer,Integer> result=measureView(mContentRoot,mContentRoot.getChildAt(0),mMeasuredScreenWidth,widthMeasureSpecMode,mMeasuredScreenHeight,heightMeasureSpecMode);
        if (renderingMode.isHorizExpand()) {
          int measuredWidth=exactMeasure.getFirst();
          int neededWidth=result.getFirst();
          if (neededWidth > measuredWidth) {
            mMeasuredScreenWidth+=neededWidth - measuredWidth;
          }
          if (mMeasuredScreenWidth < measuredWidth) {
            mMeasuredScreenWidth=measuredWidth;
          }
        }
        if (renderingMode.isVertExpand()) {
          int measuredHeight=exactMeasure.getSecond();
          int neededHeight=result.getSecond();
          if (neededHeight > measuredHeight) {
            mMeasuredScreenHeight+=neededHeight - measuredHeight;
          }
          if (mMeasuredScreenHeight < measuredHeight) {
            mMeasuredScreenHeight=measuredHeight;
          }
        }
      }
    }
    measureView(mViewRoot,null,mMeasuredScreenWidth,MeasureSpec.EXACTLY,mMeasuredScreenHeight,MeasureSpec.EXACTLY);
    mViewRoot.layout(0,0,mMeasuredScreenWidth,mMeasuredScreenHeight);
    handleScrolling(mViewRoot);
    if (params.isLayoutOnly()) {
      mImage=null;
      mCanvas=null;
    }
 else {
      AttachInfo_Accessor.dispatchOnPreDraw(mViewRoot);
      boolean newImage=false;
      boolean disableBitmapCaching=Boolean.TRUE.equals(params.getFlag(RenderParamsFlags.FLAG_KEY_DISABLE_BITMAP_CACHING));
      if (newRenderSize || mCanvas == null || disableBitmapCaching) {
        if (params.getImageFactory() != null) {
          mImage=params.getImageFactory().getImage(mMeasuredScreenWidth,mMeasuredScreenHeight);
        }
 else {
          mImage=new BufferedImage(mMeasuredScreenWidth,mMeasuredScreenHeight,BufferedImage.TYPE_INT_ARGB);
          newImage=true;
        }
        if (params.isBgColorOverridden()) {
          newImage=true;
          Graphics2D gc=mImage.createGraphics();
          gc.setColor(new Color(params.getOverrideBgColor(),true));
          gc.setComposite(AlphaComposite.Src);
          gc.fillRect(0,0,mMeasuredScreenWidth,mMeasuredScreenHeight);
          gc.dispose();
        }
        Bitmap bitmap=Bitmap_Delegate.createBitmap(mImage,true,hardwareConfig.getDensity());
        if (mCanvas == null) {
          mCanvas=new Canvas(bitmap);
        }
 else {
          mCanvas.setBitmap(bitmap);
        }
        mCanvas.setDensity(hardwareConfig.getDensity().getDpiValue());
      }
      if (freshRender && !newImage) {
        Graphics2D gc=mImage.createGraphics();
        gc.setComposite(AlphaComposite.Src);
        gc.setColor(new Color(0x00000000,true));
        gc.fillRect(0,0,mMeasuredScreenWidth,mMeasuredScreenHeight);
        gc.dispose();
      }
      mViewRoot.draw(mCanvas);
    }
    mSystemViewInfoList=visitAllChildren(mViewRoot,0,params.getExtendedViewInfoMode(),false);
    return SUCCESS.createResult();
  }
 catch (  Throwable e) {
    Throwable t=e;
    while (t.getCause() != null) {
      t=t.getCause();
    }
    return ERROR_UNKNOWN.createResult(t.getMessage(),t);
  }
}
