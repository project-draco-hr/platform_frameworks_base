{
  if (mIsDoCoMo || mNeedsToConvertPhoneticString) {
    Log.w(LOG_TAG,"Invalid flag is used in vCard 4.0 construction. Ignored.");
  }
  if (contentValuesList == null || contentValuesList.isEmpty()) {
    appendLine(VCardConstants.PROPERTY_FN,"");
    return this;
  }
  final ContentValues contentValues=getPrimaryContentValue(contentValuesList);
  String familyName=contentValues.getAsString(StructuredName.FAMILY_NAME);
  final String middleName=contentValues.getAsString(StructuredName.MIDDLE_NAME);
  final String givenName=contentValues.getAsString(StructuredName.GIVEN_NAME);
  final String prefix=contentValues.getAsString(StructuredName.PREFIX);
  final String suffix=contentValues.getAsString(StructuredName.SUFFIX);
  final String formattedName=contentValues.getAsString(StructuredName.DISPLAY_NAME);
  if (TextUtils.isEmpty(familyName) && TextUtils.isEmpty(givenName) && TextUtils.isEmpty(middleName)&& TextUtils.isEmpty(prefix)&& TextUtils.isEmpty(suffix)) {
    if (TextUtils.isEmpty(formattedName)) {
      appendLine(VCardConstants.PROPERTY_FN,"");
      return this;
    }
    familyName=formattedName;
  }
  final String phoneticFamilyName=contentValues.getAsString(StructuredName.PHONETIC_FAMILY_NAME);
  final String phoneticMiddleName=contentValues.getAsString(StructuredName.PHONETIC_MIDDLE_NAME);
  final String phoneticGivenName=contentValues.getAsString(StructuredName.PHONETIC_GIVEN_NAME);
  final String escapedFamily=escapeCharacters(familyName);
  final String escapedGiven=escapeCharacters(givenName);
  final String escapedMiddle=escapeCharacters(middleName);
  final String escapedPrefix=escapeCharacters(prefix);
  final String escapedSuffix=escapeCharacters(suffix);
  mBuilder.append(VCardConstants.PROPERTY_N);
  if (!(TextUtils.isEmpty(phoneticFamilyName) && TextUtils.isEmpty(phoneticMiddleName) && TextUtils.isEmpty(phoneticGivenName))) {
    mBuilder.append(VCARD_PARAM_SEPARATOR);
    final String sortAs=escapeCharacters(phoneticFamilyName) + ';' + escapeCharacters(phoneticGivenName)+ ';'+ escapeCharacters(phoneticMiddleName);
    mBuilder.append("SORT-AS=").append(VCardUtils.toStringAsV40ParamValue(sortAs));
  }
  mBuilder.append(VCARD_DATA_SEPARATOR);
  mBuilder.append(escapedFamily);
  mBuilder.append(VCARD_ITEM_SEPARATOR);
  mBuilder.append(escapedGiven);
  mBuilder.append(VCARD_ITEM_SEPARATOR);
  mBuilder.append(escapedMiddle);
  mBuilder.append(VCARD_ITEM_SEPARATOR);
  mBuilder.append(escapedPrefix);
  mBuilder.append(VCARD_ITEM_SEPARATOR);
  mBuilder.append(escapedSuffix);
  mBuilder.append(VCARD_END_OF_LINE);
  if (TextUtils.isEmpty(formattedName)) {
    Log.w(LOG_TAG,"DISPLAY_NAME is empty.");
    final String escaped=escapeCharacters(VCardUtils.constructNameFromElements(VCardConfig.getNameOrderType(mVCardType),familyName,middleName,givenName,prefix,suffix));
    appendLine(VCardConstants.PROPERTY_FN,escaped);
  }
 else {
    final String escapedFormatted=escapeCharacters(formattedName);
    mBuilder.append(VCardConstants.PROPERTY_FN);
    mBuilder.append(VCARD_DATA_SEPARATOR);
    mBuilder.append(escapedFormatted);
    mBuilder.append(VCARD_END_OF_LINE);
  }
  appendPhoneticNameFields(contentValues);
  return this;
}
