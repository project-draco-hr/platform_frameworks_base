{
  mRS=new RenderScript(mSurfaceView.getHolder().getSurface(),false,false);
  mRS.mMessageCallback=new FilterCallback();
  mParamsType=Type.createFromClass(mRS,Params.class,1,"Parameters");
  mParamsAllocation=Allocation.createTyped(mRS,mParamsType);
  mParamsAllocation.data(mParams);
  final int pixelCount=mParams.inWidth * mParams.inHeight;
  mPixelType=Type.createFromClass(mRS,Pixel.class,1,"Pixel");
  mInPixelsAllocation=Allocation.createSized(mRS,Element.USER_I32(mRS),pixelCount);
  mOutPixelsAllocation=Allocation.createSized(mRS,Element.USER_I32(mRS),pixelCount);
  final int[] data=new int[pixelCount];
  mBitmap.getPixels(data,0,mParams.inWidth,0,0,mParams.inWidth,mParams.inHeight);
  mInPixelsAllocation.data(data);
  mOutData=new int[pixelCount];
  mOutPixelsAllocation.data(mOutData);
  ScriptC.Builder sb=new ScriptC.Builder(mRS);
  sb.setType(mParamsType,"Params",0);
  sb.setType(mPixelType,"InPixel",1);
  sb.setType(mPixelType,"OutPixel",2);
  sb.setType(true,2);
  Script.Invokable invokable=sb.addInvokable("main");
  sb.setScript(getResources(),R.raw.threshold);
  sb.setRoot(true);
  ScriptC script=sb.create();
  script.bindAllocation(mParamsAllocation,0);
  script.bindAllocation(mInPixelsAllocation,1);
  script.bindAllocation(mOutPixelsAllocation,2);
  return invokable;
}
