{
  final int width=mBitmapIn.getWidth();
  final int height=mBitmapIn.getHeight();
  final int count=width * height;
  if (in == null) {
    in=new int[count];
    interm=new int[count];
    out=new int[count];
    gaussian=new float[MAX_RADIUS * 2 + 1];
    mBitmapIn.getPixels(in,0,width,0,0,width,height);
  }
  long t=java.lang.System.currentTimeMillis();
  int w, h, r;
  float fRadius=(float)mRadius;
  int radius=(int)mRadius;
  float e=2.718281828459045f;
  float pi=3.1415926535897932f;
  float sigma=0.4f * fRadius + 0.6f;
  float coeff1=1.0f / (float)(Math.sqrt(2.0f * pi) * sigma);
  float coeff2=-1.0f / (2.0f * sigma * sigma);
  float normalizeFactor=0.0f;
  float floatR=0.0f;
  for (r=-radius; r <= radius; r++) {
    floatR=(float)r;
    gaussian[r + radius]=coeff1 * (float)Math.pow(e,floatR * floatR * coeff2);
    normalizeFactor+=gaussian[r + radius];
  }
  normalizeFactor=1.0f / normalizeFactor;
  for (r=-radius; r <= radius; r++) {
    floatR=(float)r;
    gaussian[r + radius]*=normalizeFactor;
  }
  float blurredPixelR=0.0f;
  float blurredPixelG=0.0f;
  float blurredPixelB=0.0f;
  float blurredPixelA=0.0f;
  for (h=0; h < height; h++) {
    for (w=0; w < width; w++) {
      blurredPixelR=0.0f;
      blurredPixelG=0.0f;
      blurredPixelB=0.0f;
      blurredPixelA=0.0f;
      for (r=-radius; r <= radius; r++) {
        int validW=w + r;
        if (validW < 0) {
          validW=0;
        }
        if (validW > width - 1) {
          validW=width - 1;
        }
        int input=in[h * width + validW];
        int R=((input >> 24) & 0xff);
        int G=((input >> 16) & 0xff);
        int B=((input >> 8) & 0xff);
        int A=(input & 0xff);
        float weight=gaussian[r + radius];
        blurredPixelR+=(float)(R) * weight;
        blurredPixelG+=(float)(G) * weight;
        blurredPixelB+=(float)(B) * weight;
        blurredPixelA+=(float)(A) * weight;
      }
      int R=(int)blurredPixelR;
      int G=(int)blurredPixelG;
      int B=(int)blurredPixelB;
      int A=(int)blurredPixelA;
      interm[h * width + w]=(R << 24) | (G << 16) | (B << 8)| (A);
    }
  }
  for (h=0; h < height; h++) {
    for (w=0; w < width; w++) {
      blurredPixelR=0.0f;
      blurredPixelG=0.0f;
      blurredPixelB=0.0f;
      blurredPixelA=0.0f;
      for (r=-radius; r <= radius; r++) {
        int validH=h + r;
        if (validH < 0) {
          validH=0;
        }
        if (validH > height - 1) {
          validH=height - 1;
        }
        int input=interm[validH * width + w];
        int R=((input >> 24) & 0xff);
        int G=((input >> 16) & 0xff);
        int B=((input >> 8) & 0xff);
        int A=(input & 0xff);
        float weight=gaussian[r + radius];
        blurredPixelR+=(float)(R) * weight;
        blurredPixelG+=(float)(G) * weight;
        blurredPixelB+=(float)(B) * weight;
        blurredPixelA+=(float)(A) * weight;
      }
      int R=(int)blurredPixelR;
      int G=(int)blurredPixelG;
      int B=(int)blurredPixelB;
      int A=(int)blurredPixelA;
      out[h * width + w]=(R << 24) | (G << 16) | (B << 8)| (A);
    }
  }
  t=java.lang.System.currentTimeMillis() - t;
  android.util.Log.v("Img","Java frame time ms " + t);
  mBitmapOut.setPixels(out,0,width,0,0,width,height);
  return t;
}
