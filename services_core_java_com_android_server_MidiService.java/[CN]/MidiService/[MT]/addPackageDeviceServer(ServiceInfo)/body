{
  XmlResourceParser parser=null;
  try {
    parser=serviceInfo.loadXmlMetaData(mPackageManager,MidiDeviceService.SERVICE_INTERFACE);
    if (parser == null)     return;
    Bundle properties=null;
    int numInputPorts=0;
    int numOutputPorts=0;
    boolean isPrivate=false;
    while (true) {
      int eventType=parser.next();
      if (eventType == XmlPullParser.END_DOCUMENT) {
        break;
      }
 else       if (eventType == XmlPullParser.START_TAG) {
        String tagName=parser.getName();
        if ("device".equals(tagName)) {
          if (properties != null) {
            Log.w(TAG,"nested <device> elements in metadata for " + serviceInfo.packageName);
            continue;
          }
          properties=new Bundle();
          properties.putParcelable(MidiDeviceInfo.PROPERTY_SERVICE_INFO,serviceInfo);
          numInputPorts=0;
          numOutputPorts=0;
          isPrivate=false;
          int count=parser.getAttributeCount();
          for (int i=0; i < count; i++) {
            String name=parser.getAttributeName(i);
            String value=parser.getAttributeValue(i);
            if ("private".equals(name)) {
              isPrivate="true".equals(value);
            }
 else {
              properties.putString(name,value);
            }
          }
        }
 else         if ("input-port".equals(tagName)) {
          if (properties == null) {
            Log.w(TAG,"<input-port> outside of <device> in metadata for " + serviceInfo.packageName);
            continue;
          }
          numInputPorts++;
        }
 else         if ("output-port".equals(tagName)) {
          if (properties == null) {
            Log.w(TAG,"<output-port> outside of <device> in metadata for " + serviceInfo.packageName);
            continue;
          }
          numOutputPorts++;
        }
      }
 else       if (eventType == XmlPullParser.END_TAG) {
        String tagName=parser.getName();
        if ("device".equals(tagName)) {
          if (properties != null) {
            if (numInputPorts == 0 && numOutputPorts == 0) {
              Log.w(TAG,"<device> with no ports in metadata for " + serviceInfo.packageName);
              continue;
            }
            int uid=-1;
            if (isPrivate) {
              try {
                ApplicationInfo appInfo=mPackageManager.getApplicationInfo(serviceInfo.packageName,0);
                uid=appInfo.uid;
              }
 catch (              PackageManager.NameNotFoundException e) {
                Log.e(TAG,"could not fetch ApplicationInfo for " + serviceInfo.packageName);
                continue;
              }
            }
synchronized (mDevicesByInfo) {
              addDeviceLocked(MidiDeviceInfo.TYPE_VIRTUAL,numInputPorts,numOutputPorts,properties,null,serviceInfo,isPrivate,uid);
            }
            properties=null;
          }
        }
      }
    }
  }
 catch (  Exception e) {
    Log.w(TAG,"Unable to load component info " + serviceInfo.toString(),e);
  }
 finally {
    if (parser != null)     parser.close();
  }
}
