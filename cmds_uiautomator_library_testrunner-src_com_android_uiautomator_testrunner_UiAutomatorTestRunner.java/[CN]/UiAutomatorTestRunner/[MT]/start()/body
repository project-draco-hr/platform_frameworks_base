{
  TestCaseCollector collector=getTestCaseCollector(this.getClass().getClassLoader());
  try {
    collector.addTestClasses(mTestClasses);
  }
 catch (  ClassNotFoundException e) {
    throw new RuntimeException(e.getMessage(),e);
  }
  if (mDebug) {
    Debug.waitForDebugger();
  }
  mHandlerThread=new HandlerThread(HANDLER_THREAD_NAME);
  mHandlerThread.setDaemon(true);
  mHandlerThread.start();
  UiAutomationShellWrapper automationWrapper=new UiAutomationShellWrapper();
  automationWrapper.connect();
  long startTime=SystemClock.uptimeMillis();
  TestResult testRunResult=new TestResult();
  ResultReporter resultPrinter;
  String outputFormat=mParams.getString("outputFormat");
  List<TestCase> testCases=collector.getTestCases();
  Bundle testRunOutput=new Bundle();
  if ("simple".equals(outputFormat)) {
    resultPrinter=new SimpleResultPrinter(System.out,true);
  }
 else {
    resultPrinter=new WatcherResultPrinter(testCases.size());
  }
  try {
    automationWrapper.setRunAsMonkey(mMonkey);
    mUiDevice=UiDevice.getInstance();
    mUiDevice.initialize(new ShellUiAutomatorBridge(automationWrapper.getUiAutomation()));
    String traceType=mParams.getString("traceOutputMode");
    if (traceType != null) {
      Tracer.Mode mode=Tracer.Mode.valueOf(Tracer.Mode.class,traceType);
      if (mode == Tracer.Mode.FILE || mode == Tracer.Mode.ALL) {
        String filename=mParams.getString("traceLogFilename");
        if (filename == null) {
          throw new RuntimeException("Name of log file not specified. " + "Please specify it using traceLogFilename parameter");
        }
        Tracer.getInstance().setOutputFilename(filename);
      }
      Tracer.getInstance().setOutputMode(mode);
    }
    testRunResult.addListener(resultPrinter);
    for (    TestListener listener : mTestListeners) {
      testRunResult.addListener(listener);
    }
    for (    TestCase testCase : testCases) {
      prepareTestCase(testCase);
      testCase.run(testRunResult);
    }
  }
 catch (  Throwable t) {
    resultPrinter.printUnexpectedError(t);
    testRunOutput.putString("shortMsg",t.getMessage());
  }
 finally {
    long runTime=SystemClock.uptimeMillis() - startTime;
    resultPrinter.print(testRunResult,runTime,testRunOutput);
    automationWrapper.disconnect();
    automationWrapper.setRunAsMonkey(false);
    mHandlerThread.quit();
  }
}
