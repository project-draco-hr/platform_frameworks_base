{
switch (msg.what) {
case MSG_INIT:
{
      init();
      break;
    }
case MSG_ON_BOOT_COMPLETED:
{
    onBootCompletedInternal();
    break;
  }
case MSG_PROCESS_KEYBOARD_STATE:
{
  processKeyboardState();
  break;
}
case MSG_ENABLE_BLUETOOTH:
{
boolean enable=msg.arg1 == 1;
if (enable) {
  mLocalBluetoothAdapter.enable();
}
 else {
  mState=STATE_USER_CANCELLED;
}
break;
}
case MSG_BLE_ABORT_SCAN:
{
int scanAttempt=msg.arg1;
bleAbortScanInternal(scanAttempt);
break;
}
case MSG_ON_BLUETOOTH_STATE_CHANGED:
{
int bluetoothState=msg.arg1;
onBluetoothStateChangedInternal(bluetoothState);
break;
}
case MSG_ON_DEVICE_BOND_STATE_CHANGED:
{
CachedBluetoothDevice d=(CachedBluetoothDevice)msg.obj;
int bondState=msg.arg1;
onDeviceBondStateChangedInternal(d,bondState);
break;
}
case MSG_ON_BLUETOOTH_DEVICE_ADDED:
{
BluetoothDevice d=(BluetoothDevice)msg.obj;
CachedBluetoothDevice cachedDevice=getCachedBluetoothDevice(d);
onDeviceAddedInternal(cachedDevice);
break;
}
case MSG_ON_BLE_SCAN_FAILED:
{
onBleScanFailedInternal();
break;
}
}
}
