{
  uidStats.clear();
  FileInputStream stream=null;
  if (mBackupFile.exists()) {
    try {
      stream=new FileInputStream(mBackupFile);
    }
 catch (    java.io.IOException e) {
    }
  }
  try {
    if (stream == null) {
      if (!mFile.exists()) {
        return;
      }
      stream=new FileInputStream(mFile);
    }
    byte[] raw=readFully(stream);
    Parcel in=Parcel.obtain();
    in.unmarshall(raw,0,raw.length);
    in.setDataPosition(0);
    stream.close();
    final int version=in.readInt();
    if (version != VERSION) {
      return;
    }
    mStartCount=in.readInt();
    mBatteryUptime=in.readLong();
    mBatteryLastUptime=in.readLong();
    mBatteryRealtime=in.readLong();
    mBatteryLastRealtime=in.readLong();
    mUptime=in.readLong();
    mLastUptime=in.readLong();
    mRealtime=in.readLong();
    mLastRealtime=in.readLong();
    mStartCount++;
    final int NU=in.readInt();
    for (int iu=0; iu < NU; iu++) {
      int uid=in.readInt();
      Uid u=new Uid();
      uidStats.put(uid,u);
      int NW=in.readInt();
      for (int iw=0; iw < NW; iw++) {
        String wlName=in.readString();
        if (in.readInt() != 0) {
          u.getWakeTimerLocked(wlName,WAKE_TYPE_FULL).readLocked(in);
        }
        if (in.readInt() != 0) {
          u.getWakeTimerLocked(wlName,WAKE_TYPE_PARTIAL).readLocked(in);
        }
        if (in.readInt() != 0) {
          u.getWakeTimerLocked(wlName,WAKE_TYPE_WINDOW).readLocked(in);
        }
      }
      int NP=in.readInt();
      for (int ip=0; ip < NP; ip++) {
        String procName=in.readString();
        Uid.Proc p=u.getProcessStatsLocked(procName);
        p.userTime=p.loadedUserTime=in.readLong();
        p.lastUserTime=in.readLong();
        p.systemTime=p.loadedSystemTime=in.readLong();
        p.lastSystemTime=in.readLong();
        p.starts=p.loadedStarts=in.readInt();
        p.lastStarts=in.readInt();
      }
      NP=in.readInt();
      for (int ip=0; ip < NP; ip++) {
        String pkgName=in.readString();
        Uid.Pkg p=u.getPackageStatsLocked(pkgName);
        p.wakeups=p.loadedWakeups=in.readInt();
        p.lastWakeups=in.readInt();
        final int NS=in.readInt();
        for (int is=0; is < NS; is++) {
          String servName=in.readString();
          Uid.Pkg.Serv s=u.getServiceStatsLocked(pkgName,servName);
          s.startTime=s.loadedStartTime=in.readLong();
          s.lastStartTime=in.readLong();
          s.starts=s.loadedStarts=in.readInt();
          s.lastStarts=in.readInt();
          s.launches=s.loadedLaunches=in.readInt();
          s.lastLaunches=in.readInt();
        }
      }
    }
  }
 catch (  java.io.IOException e) {
    Log.e("BatteryStats","Error reading battery statistics",e);
  }
}
