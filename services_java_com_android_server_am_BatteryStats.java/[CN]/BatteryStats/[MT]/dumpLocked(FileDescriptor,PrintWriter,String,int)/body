{
  final long NOW=getBatteryUptimeLocked();
  StringBuilder sb=new StringBuilder();
  if (which == STATS_LOADED) {
    pw.println(prefix + "Current and Historic Battery Usage Statistics:");
    pw.println(prefix + "  System starts: " + mStartCount);
  }
 else   if (which == STATS_LAST) {
    pw.println(prefix + "Last Battery Usage Statistics:");
  }
 else {
    pw.println(prefix + "Current Battery Usage Statistics:");
  }
  pw.println(prefix + "  On battery: " + formatTimeMs(computeBatteryUptime(NOW,which))+ " uptime, "+ formatTimeMs(computeBatteryRealtime(getBatteryRealtimeLocked(),which))+ " realtime");
  pw.println(prefix + "  Total: " + formatTimeMs(computeUptime(SystemClock.uptimeMillis(),which))+ " uptime, "+ formatTimeMs(computeRealtime(SystemClock.elapsedRealtime(),which))+ " realtime");
  pw.println(" ");
  final int NU=uidStats.size();
  for (int iu=0; iu < NU; iu++) {
    final int uid=uidStats.keyAt(iu);
    Uid u=uidStats.valueAt(iu);
    pw.println(prefix + "  #" + uid+ ":");
    boolean uidActivity=false;
    if (u.wakelockStats.size() > 0) {
      for (      Map.Entry<String,BatteryStats.Uid.Wakelock> ent : u.wakelockStats.entrySet()) {
        Uid.Wakelock wl=ent.getValue();
        String linePrefix=": ";
        sb.setLength(0);
        sb.append(prefix);
        sb.append("    Wake lock ");
        sb.append(ent.getKey());
        linePrefix=printWakeLock(sb,wl.wakeTimeFull,NOW,"full",which,linePrefix);
        linePrefix=printWakeLock(sb,wl.wakeTimePartial,NOW,"partial",which,linePrefix);
        linePrefix=printWakeLock(sb,wl.wakeTimeWindow,NOW,"window",which,linePrefix);
        if (linePrefix.equals(": ")) {
          sb.append(": (nothing executed)");
        }
        pw.println(sb.toString());
        uidActivity=true;
      }
    }
    if (u.processStats.size() > 0) {
      for (      Map.Entry<String,BatteryStats.Uid.Proc> ent : u.processStats.entrySet()) {
        BatteryStats.Uid.Proc ps=ent.getValue();
        long userTime;
        long systemTime;
        int starts;
        if (which == STATS_LAST) {
          userTime=ps.lastUserTime;
          systemTime=ps.lastSystemTime;
          starts=ps.lastStarts;
        }
 else {
          userTime=ps.userTime;
          systemTime=ps.systemTime;
          starts=ps.starts;
          if (which == STATS_CURRENT) {
            userTime-=ps.loadedUserTime;
            systemTime-=ps.loadedSystemTime;
            starts-=ps.loadedStarts;
          }
        }
        if (userTime != 0 || systemTime != 0 || starts != 0) {
          pw.println(prefix + "    Proc " + ent.getKey()+ ":");
          pw.println(prefix + "      CPU: " + formatTime(userTime)+ " user + "+ formatTime(systemTime)+ " kernel");
          pw.println(prefix + "      " + starts+ " process starts");
          uidActivity=true;
        }
      }
    }
    if (u.packageStats.size() > 0) {
      for (      Map.Entry<String,BatteryStats.Uid.Pkg> ent : u.packageStats.entrySet()) {
        pw.println(prefix + "    Apk " + ent.getKey()+ ":");
        boolean apkActivity=false;
        BatteryStats.Uid.Pkg ps=ent.getValue();
        int wakeups;
        if (which == STATS_LAST) {
          wakeups=ps.lastWakeups;
        }
 else {
          wakeups=ps.wakeups;
          if (which == STATS_CURRENT) {
            wakeups-=ps.loadedWakeups;
          }
        }
        if (wakeups != 0) {
          pw.println(prefix + "      " + wakeups+ " wakeup alarms");
          apkActivity=true;
        }
        if (ps.serviceStats.size() > 0) {
          for (          Map.Entry<String,BatteryStats.Uid.Pkg.Serv> sent : ps.serviceStats.entrySet()) {
            BatteryStats.Uid.Pkg.Serv ss=sent.getValue();
            long time;
            int starts;
            int launches;
            if (which == STATS_LAST) {
              time=ss.lastStartTime;
              starts=ss.lastStarts;
              launches=ss.lastLaunches;
            }
 else {
              time=ss.getStartTimeToNowLocked(NOW);
              starts=ss.starts;
              launches=ss.launches;
              if (which == STATS_CURRENT) {
                time-=ss.loadedStartTime;
                starts-=ss.loadedStarts;
                launches-=ss.loadedLaunches;
              }
            }
            if (time != 0 || starts != 0 || launches != 0) {
              pw.println(prefix + "      Service " + sent.getKey()+ ":");
              pw.println(prefix + "        Time spent started: " + formatTimeMs(time));
              pw.println(prefix + "        Starts: " + starts+ ", launches: "+ launches);
              apkActivity=true;
            }
          }
        }
        if (!apkActivity) {
          pw.println(prefix + "      (nothing executed)");
        }
        uidActivity=true;
      }
    }
    if (!uidActivity) {
      pw.println(prefix + "    (nothing executed)");
    }
  }
}
