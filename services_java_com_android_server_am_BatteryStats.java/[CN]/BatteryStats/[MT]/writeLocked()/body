{
  if (mFile.exists()) {
    if (mBackupFile.exists()) {
      mBackupFile.delete();
    }
    mFile.renameTo(mBackupFile);
  }
  try {
    FileOutputStream stream=new FileOutputStream(mFile);
    final long NOW=getBatteryUptimeLocked();
    final long NOWREAL=getBatteryRealtimeLocked();
    final long NOW_SYS=SystemClock.uptimeMillis();
    final long NOWREAL_SYS=SystemClock.elapsedRealtime();
    Parcel out=Parcel.obtain();
    out.writeInt(VERSION);
    out.writeInt(mStartCount);
    out.writeLong(computeBatteryUptime(NOW,STATS_LOADED));
    out.writeLong(computeBatteryUptime(NOW,STATS_CURRENT));
    out.writeLong(computeBatteryRealtime(NOWREAL,STATS_LOADED));
    out.writeLong(computeBatteryRealtime(NOWREAL,STATS_CURRENT));
    out.writeLong(computeUptime(NOW_SYS,STATS_LOADED));
    out.writeLong(computeUptime(NOW_SYS,STATS_CURRENT));
    out.writeLong(computeRealtime(NOWREAL_SYS,STATS_LOADED));
    out.writeLong(computeRealtime(NOWREAL_SYS,STATS_CURRENT));
    final int NU=uidStats.size();
    out.writeInt(NU);
    for (int iu=0; iu < NU; iu++) {
      out.writeInt(uidStats.keyAt(iu));
      Uid u=uidStats.valueAt(iu);
      int NW=u.wakelockStats.size();
      out.writeInt(NW);
      if (NW > 0) {
        for (        Map.Entry<String,BatteryStats.Uid.Wakelock> ent : u.wakelockStats.entrySet()) {
          out.writeString(ent.getKey());
          Uid.Wakelock wl=ent.getValue();
          if (wl.wakeTimeFull != null) {
            out.writeInt(1);
            wl.wakeTimeFull.writeLocked(out,NOW);
          }
 else {
            out.writeInt(0);
          }
          if (wl.wakeTimePartial != null) {
            out.writeInt(1);
            wl.wakeTimePartial.writeLocked(out,NOW);
          }
 else {
            out.writeInt(0);
          }
          if (wl.wakeTimeWindow != null) {
            out.writeInt(1);
            wl.wakeTimeWindow.writeLocked(out,NOW);
          }
 else {
            out.writeInt(0);
          }
        }
      }
      int NP=u.processStats.size();
      out.writeInt(NP);
      if (NP > 0) {
        for (        Map.Entry<String,BatteryStats.Uid.Proc> ent : u.processStats.entrySet()) {
          out.writeString(ent.getKey());
          BatteryStats.Uid.Proc ps=ent.getValue();
          out.writeLong(ps.userTime);
          out.writeLong(ps.userTime - ps.loadedUserTime);
          out.writeLong(ps.systemTime);
          out.writeLong(ps.systemTime - ps.loadedSystemTime);
          out.writeInt(ps.starts);
          out.writeInt(ps.starts - ps.loadedStarts);
        }
      }
      NP=u.packageStats.size();
      out.writeInt(NP);
      if (NP > 0) {
        for (        Map.Entry<String,BatteryStats.Uid.Pkg> ent : u.packageStats.entrySet()) {
          out.writeString(ent.getKey());
          BatteryStats.Uid.Pkg ps=ent.getValue();
          out.writeInt(ps.wakeups);
          out.writeInt(ps.wakeups - ps.loadedWakeups);
          final int NS=ps.serviceStats.size();
          out.writeInt(NS);
          if (NS > 0) {
            for (            Map.Entry<String,BatteryStats.Uid.Pkg.Serv> sent : ps.serviceStats.entrySet()) {
              out.writeString(sent.getKey());
              BatteryStats.Uid.Pkg.Serv ss=sent.getValue();
              long time=ss.getStartTimeToNowLocked(NOW);
              out.writeLong(time);
              out.writeLong(time - ss.loadedStartTime);
              out.writeInt(ss.starts);
              out.writeInt(ss.starts - ss.loadedStarts);
              out.writeInt(ss.launches);
              out.writeInt(ss.launches - ss.loadedLaunches);
            }
          }
        }
      }
    }
    stream.write(out.marshall());
    out.recycle();
    stream.flush();
    stream.close();
    mBackupFile.delete();
  }
 catch (  java.io.IOException e) {
    Log.e("BatteryStats","Error writing battery statistics",e);
  }
}
