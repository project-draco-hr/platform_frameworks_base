{
  int response;
  Object ret;
  response=p.readInt();
  try {
switch (response) {
case RIL_UNSOL_RESPONSE_RADIO_STATE_CHANGED:
      ret=responseVoid(p);
    break;
case RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED:
  ret=responseVoid(p);
break;
case RIL_UNSOL_RESPONSE_NETWORK_STATE_CHANGED:
ret=responseVoid(p);
break;
case RIL_UNSOL_RESPONSE_NEW_SMS:
ret=responseString(p);
break;
case RIL_UNSOL_RESPONSE_NEW_SMS_STATUS_REPORT:
ret=responseString(p);
break;
case RIL_UNSOL_RESPONSE_NEW_SMS_ON_SIM:
ret=responseInts(p);
break;
case RIL_UNSOL_ON_USSD:
ret=responseStrings(p);
break;
case RIL_UNSOL_NITZ_TIME_RECEIVED:
ret=responseString(p);
break;
case RIL_UNSOL_SIGNAL_STRENGTH:
ret=responseInts(p);
break;
case RIL_UNSOL_PDP_CONTEXT_LIST_CHANGED:
ret=responseContextList(p);
break;
case RIL_UNSOL_SUPP_SVC_NOTIFICATION:
ret=responseSuppServiceNotification(p);
break;
case RIL_UNSOL_STK_SESSION_END:
ret=responseVoid(p);
break;
case RIL_UNSOL_STK_PROACTIVE_COMMAND:
ret=responseString(p);
break;
case RIL_UNSOL_STK_EVENT_NOTIFY:
ret=responseString(p);
break;
case RIL_UNSOL_STK_CALL_SETUP:
ret=responseInts(p);
break;
case RIL_UNSOL_SIM_SMS_STORAGE_FULL:
ret=responseVoid(p);
break;
case RIL_UNSOL_SIM_REFRESH:
ret=responseInts(p);
break;
case RIL_UNSOL_CALL_RING:
ret=responseVoid(p);
break;
default :
throw new RuntimeException("Unrecognized unsol response: " + response);
}
}
 catch (Throwable tr) {
Log.e(LOG_TAG,"Exception processing unsol response: " + response,tr);
return;
}
switch (response) {
case RIL_UNSOL_RESPONSE_RADIO_STATE_CHANGED:
setRadioStateFromRILInt(p.readInt());
if (RILJ_LOG) riljLog("[UNSL]< RADIO_STATE_CHANGED " + mState);
break;
case RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED:
if (RILJ_LOG) riljLog("[UNSL]< CALL_STATE_CHANGED");
mCallStateRegistrants.notifyRegistrants(new AsyncResult(null,null,null));
break;
case RIL_UNSOL_RESPONSE_NETWORK_STATE_CHANGED:
if (RILJ_LOG) riljLog("[UNSL]< NETWORK_STATE_CHANGED");
mNetworkStateRegistrants.notifyRegistrants(new AsyncResult(null,null,null));
break;
case RIL_UNSOL_RESPONSE_NEW_SMS:
{
if (RILJ_LOG) riljLog("[UNSL]< NEW_SMS");
String a[]=new String[2];
a[1]=(String)ret;
SmsMessage sms;
sms=SmsMessage.newFromCMT(a);
if (mSMSRegistrant != null) {
mSMSRegistrant.notifyRegistrant(new AsyncResult(null,sms,null));
}
break;
}
case RIL_UNSOL_RESPONSE_NEW_SMS_STATUS_REPORT:
if (Config.LOGD) {
if (RILJ_LOG) riljLog("[UNSL]< NEW_SMS_STATUS_REPORT " + ret);
}
if (mSmsStatusRegistrant != null) {
mSmsStatusRegistrant.notifyRegistrant(new AsyncResult(null,ret,null));
}
break;
case RIL_UNSOL_RESPONSE_NEW_SMS_ON_SIM:
if (RILJ_LOG) riljLog("[UNSL]< NEW_SMS_ON_SIM" + retToString(response,ret));
int[] smsIndex=(int[])ret;
if (smsIndex.length == 1) {
if (mSmsOnSimRegistrant != null) {
mSmsOnSimRegistrant.notifyRegistrant(new AsyncResult(null,smsIndex,null));
}
}
 else {
if (RILJ_LOG) riljLog(" NEW_SMS_ON_SIM ERROR with wrong length " + smsIndex.length);
}
break;
case RIL_UNSOL_ON_USSD:
String[] resp=(String[])ret;
if (resp.length < 2) {
resp=new String[2];
resp[0]=((String[])ret)[0];
resp[1]=null;
}
if (RILJ_LOG) riljLog("[UNSL]< ON_USSD " + resp[0]);
if (mUSSDRegistrant != null) {
mUSSDRegistrant.notifyRegistrant(new AsyncResult(null,resp,null));
}
break;
case RIL_UNSOL_NITZ_TIME_RECEIVED:
if (RILJ_LOG) riljLog("[UNSL]< NITZ_TIME_RECEIVED " + retToString(response,ret));
int nitzReceiveTime=p.readInt();
Object[] result=new Object[2];
result[0]=ret;
result[1]=Integer.valueOf(nitzReceiveTime);
if (mNITZTimeRegistrant != null) {
mNITZTimeRegistrant.notifyRegistrant(new AsyncResult(null,result,null));
}
 else {
mLastNITZTimeInfo=result;
}
break;
case RIL_UNSOL_SIGNAL_STRENGTH:
if (Config.LOGV) Log.v(LOG_TAG,"[UNSL]< SIGNAL_STRENGTH " + retToString(response,ret));
if (mSignalStrengthRegistrant != null) {
mSignalStrengthRegistrant.notifyRegistrant(new AsyncResult(null,ret,null));
}
break;
case RIL_UNSOL_PDP_CONTEXT_LIST_CHANGED:
if (RILJ_LOG) riljLog("[UNSL]< PDP_CONTEXT_CHANGED " + retToString(response,ret));
mPDPRegistrants.notifyRegistrants(new AsyncResult(null,ret,null));
break;
case RIL_UNSOL_SUPP_SVC_NOTIFICATION:
if (Config.LOGD) {
if (RILJ_LOG) riljLog("[UNSL]< SUPP_SVC_NOTIFICATION " + retToString(response,ret));
}
if (mSsnRegistrant != null) {
mSsnRegistrant.notifyRegistrant(new AsyncResult(null,ret,null));
}
break;
case RIL_UNSOL_STK_SESSION_END:
if (Config.LOGD) {
if (RILJ_LOG) riljLog("[UNSL]< STK_SESSION_END");
}
if (mStkSessionEndRegistrant != null) {
mStkSessionEndRegistrant.notifyRegistrant(new AsyncResult(null,ret,null));
}
break;
case RIL_UNSOL_STK_PROACTIVE_COMMAND:
if (Config.LOGD) {
if (RILJ_LOG) riljLog("[UNSL]< STK_PROACTIVE_COMMAND " + retToString(response,ret));
}
if (mStkProCmdRegistrant != null) {
mStkProCmdRegistrant.notifyRegistrant(new AsyncResult(null,ret,null));
}
break;
case RIL_UNSOL_STK_EVENT_NOTIFY:
if (Config.LOGD) {
if (RILJ_LOG) riljLog("[UNSL]< STK_EVENT_NOTIFY " + retToString(response,ret));
}
if (mStkEventRegistrant != null) {
mStkEventRegistrant.notifyRegistrant(new AsyncResult(null,ret,null));
}
break;
case RIL_UNSOL_STK_CALL_SETUP:
if (Config.LOGD) {
if (RILJ_LOG) riljLog("[UNSL]< STK_CALL_SETUP " + retToString(response,ret));
}
if (mStkCallSetUpRegistrant != null) {
mStkCallSetUpRegistrant.notifyRegistrant(new AsyncResult(null,ret,null));
}
break;
case RIL_UNSOL_SIM_SMS_STORAGE_FULL:
if (Config.LOGD) {
if (RILJ_LOG) riljLog("[UNSL]< SIM_SMS_STORAGE_FULL");
}
if (mSimSmsFullRegistrant != null) {
mSimSmsFullRegistrant.notifyRegistrant();
}
break;
case RIL_UNSOL_SIM_REFRESH:
if (Config.LOGD) {
if (RILJ_LOG) riljLog("[UNSL]< SIM_REFRESH " + retToString(response,ret));
}
if (mSimRefreshRegistrant != null) {
mSimRefreshRegistrant.notifyRegistrant(new AsyncResult(null,ret,null));
}
break;
case RIL_UNSOL_CALL_RING:
if (Config.LOGD) {
if (RILJ_LOG) riljLog("[UNSL]< CALL_RING ");
}
if (mRingRegistrant != null) {
mRingRegistrant.notifyRegistrant();
}
break;
}
}
