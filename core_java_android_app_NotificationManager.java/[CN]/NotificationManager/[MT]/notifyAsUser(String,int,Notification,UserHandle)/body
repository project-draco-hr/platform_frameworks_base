{
  int[] idOut=new int[1];
  INotificationManager service=getService();
  String pkg=mContext.getPackageName();
  Notification.addFieldsFromContext(mContext,notification);
  if (notification.sound != null) {
    notification.sound=notification.sound.getCanonicalUri();
    if (StrictMode.vmFileUriExposureEnabled()) {
      if ("file".equals(notification.sound.getScheme())) {
        Log.w(TAG,"notify: warning: file:// Uri exposed through Notification.sound: " + notification.sound,new Throwable());
      }
    }
  }
  fixLegacySmallIcon(notification,pkg);
  if (mContext.getApplicationInfo().targetSdkVersion > Build.VERSION_CODES.LOLLIPOP_MR1) {
    if (notification.getSmallIcon() == null) {
      throw new IllegalArgumentException("Invalid notification (no valid small icon): " + notification);
    }
  }
  if (localLOGV)   Log.v(TAG,pkg + ": notify(" + id+ ", "+ notification+ ")");
  final Notification copy=notification.clone();
  try {
    service.enqueueNotificationWithTag(pkg,mContext.getOpPackageName(),tag,id,copy,idOut,user.getIdentifier());
    if (id != idOut[0]) {
      Log.w(TAG,"notify: id corrupted: sent " + id + ", got back "+ idOut[0]);
    }
  }
 catch (  RemoteException e) {
  }
}
