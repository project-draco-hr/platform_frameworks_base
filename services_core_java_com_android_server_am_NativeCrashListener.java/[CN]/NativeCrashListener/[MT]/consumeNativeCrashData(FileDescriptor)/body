{
  if (MORE_DEBUG)   Slog.i(TAG,"debuggerd connected");
  final byte[] buf=new byte[4096];
  final ByteArrayOutputStream os=new ByteArrayOutputStream(4096);
  try {
    StructTimeval timeout=StructTimeval.fromMillis(SOCKET_TIMEOUT_MILLIS);
    Libcore.os.setsockoptTimeval(fd,SOL_SOCKET,SO_RCVTIMEO,timeout);
    Libcore.os.setsockoptTimeval(fd,SOL_SOCKET,SO_SNDTIMEO,timeout);
    int headerBytes=readExactly(fd,buf,0,8);
    if (headerBytes != 8) {
      Slog.e(TAG,"Unable to read from debuggerd");
      return;
    }
    int pid=unpackInt(buf,0);
    int signal=unpackInt(buf,4);
    if (DEBUG) {
      Slog.v(TAG,"Read pid=" + pid + " signal="+ signal);
    }
    if (pid > 0) {
      final ProcessRecord pr;
synchronized (mAm.mPidsSelfLocked) {
        pr=mAm.mPidsSelfLocked.get(pid);
      }
      if (pr != null) {
        if (pr.persistent) {
          if (DEBUG) {
            Slog.v(TAG,"Skipping report for persistent app " + pr);
          }
          return;
        }
        int bytes;
        do {
          bytes=Libcore.os.read(fd,buf,0,buf.length);
          if (bytes > 0) {
            if (MORE_DEBUG) {
              String s=new String(buf,0,bytes,"UTF-8");
              Slog.v(TAG,"READ=" + bytes + "> "+ s);
            }
            if (buf[bytes - 1] == 0) {
              os.write(buf,0,bytes - 1);
              break;
            }
            os.write(buf,0,bytes);
          }
        }
 while (bytes > 0);
        if (DEBUG)         Slog.v(TAG,"processing");
synchronized (mAm) {
          pr.crashing=true;
          pr.forceCrashReport=true;
        }
        final String reportString=new String(os.toByteArray(),"UTF-8");
        (new NativeCrashReporter(pr,signal,reportString)).start();
      }
 else {
        Slog.w(TAG,"Couldn't find ProcessRecord for pid " + pid);
      }
    }
 else {
      Slog.e(TAG,"Bogus pid!");
    }
  }
 catch (  Exception e) {
    Slog.e(TAG,"Exception dealing with report",e);
  }
}
