{
  final Object monitor=new Object();
  List<Thread> threads=new ArrayList<>();
  for (int i=0; i < 100; i++) {
    final int threadId=i;
    threads.add(new Thread(){
      @Override public void run(){
synchronized (monitor) {
          try {
            monitor.wait();
          }
 catch (          InterruptedException e) {
            return;
          }
          mStorage.writeKeyValue("key","1 from thread " + threadId,0);
          mStorage.readKeyValue("key","default",0);
          mStorage.writeKeyValue("key","2 from thread " + threadId,0);
          mStorage.readKeyValue("key","default",0);
          mStorage.writeKeyValue("key","3 from thread " + threadId,0);
          mStorage.readKeyValue("key","default",0);
          mStorage.writeKeyValue("key","4 from thread " + threadId,0);
          mStorage.readKeyValue("key","default",0);
          mStorage.writeKeyValue("key","5 from thread " + threadId,0);
          mStorage.readKeyValue("key","default",0);
        }
      }
    }
);
    threads.get(i).start();
  }
  mStorage.writeKeyValue("key","initalValue",0);
synchronized (monitor) {
    monitor.notifyAll();
  }
  for (int i=0; i < threads.size(); i++) {
    try {
      threads.get(i).join();
    }
 catch (    InterruptedException e) {
    }
  }
  assertEquals('5',mStorage.readKeyValue("key","default",0).charAt(0));
  mStorage.clearCache();
  assertEquals('5',mStorage.readKeyValue("key","default",0).charAt(0));
}
