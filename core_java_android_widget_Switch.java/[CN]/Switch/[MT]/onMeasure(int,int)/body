{
  if (mShowText) {
    if (mOnLayout == null) {
      mOnLayout=makeLayout(mTextOn);
    }
    if (mOffLayout == null) {
      mOffLayout=makeLayout(mTextOff);
    }
  }
  final Rect padding=mTempRect;
  final int thumbWidth;
  final int thumbHeight;
  if (mThumbDrawable != null) {
    mThumbDrawable.getPadding(padding);
    thumbWidth=mThumbDrawable.getIntrinsicWidth() - padding.left - padding.right;
    thumbHeight=mThumbDrawable.getIntrinsicHeight();
  }
 else {
    thumbWidth=0;
    thumbHeight=0;
  }
  final int maxTextWidth;
  if (mShowText) {
    maxTextWidth=Math.max(mOnLayout.getWidth(),mOffLayout.getWidth()) + mThumbTextPadding * 2;
  }
 else {
    maxTextWidth=0;
  }
  mThumbWidth=Math.max(maxTextWidth,thumbWidth);
  final int trackHeight;
  if (mTrackDrawable != null) {
    mTrackDrawable.getPadding(padding);
    trackHeight=mTrackDrawable.getIntrinsicHeight();
  }
 else {
    padding.setEmpty();
    trackHeight=0;
  }
  int paddingLeft=padding.left;
  int paddingRight=padding.right;
  if (mThumbDrawable != null) {
    final Insets inset=mThumbDrawable.getOpticalInsets();
    paddingLeft=Math.max(paddingLeft,inset.left);
    paddingRight=Math.max(paddingRight,inset.right);
  }
  final int switchWidth=Math.max(mSwitchMinWidth,2 * mThumbWidth + paddingLeft + paddingRight);
  final int switchHeight=Math.max(trackHeight,thumbHeight);
  mSwitchWidth=switchWidth;
  mSwitchHeight=switchHeight;
  super.onMeasure(widthMeasureSpec,heightMeasureSpec);
  final int measuredHeight=getMeasuredHeight();
  if (measuredHeight < switchHeight) {
    setMeasuredDimension(getMeasuredWidthAndState(),switchHeight);
  }
}
