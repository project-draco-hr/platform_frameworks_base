{
  super.onDraw(canvas);
  final Rect tempRect=mTempRect;
  final Drawable trackDrawable=mTrackDrawable;
  final Drawable thumbDrawable=mThumbDrawable;
  trackDrawable.getPadding(tempRect);
  final int switchTop=mSwitchTop;
  final int switchBottom=mSwitchBottom;
  final int switchInnerLeft=mSwitchLeft + tempRect.left;
  final int switchInnerTop=switchTop + tempRect.top;
  final int switchInnerRight=mSwitchRight - tempRect.right;
  final int switchInnerBottom=switchBottom - tempRect.bottom;
  if (mSplitTrack) {
    final Insets insets=thumbDrawable.getOpticalInsets();
    thumbDrawable.copyBounds(tempRect);
    tempRect.left+=insets.left;
    tempRect.right-=insets.right;
    final int saveCount=canvas.save();
    canvas.clipRect(tempRect,Op.DIFFERENCE);
    trackDrawable.draw(canvas);
    canvas.restoreToCount(saveCount);
  }
 else {
    trackDrawable.draw(canvas);
  }
  final int saveCount=canvas.save();
  canvas.clipRect(switchInnerLeft,switchTop,switchInnerRight,switchBottom);
  thumbDrawable.draw(canvas);
  final Layout switchText=getTargetCheckedState() ? mOnLayout : mOffLayout;
  if (switchText != null) {
    final int drawableState[]=getDrawableState();
    if (mTextColors != null) {
      mTextPaint.setColor(mTextColors.getColorForState(drawableState,0));
    }
    mTextPaint.drawableState=drawableState;
    final Rect thumbBounds=thumbDrawable.getBounds();
    final int left=(thumbBounds.left + thumbBounds.right) / 2 - switchText.getWidth() / 2;
    final int top=(switchInnerTop + switchInnerBottom) / 2 - switchText.getHeight() / 2;
    canvas.translate(left,top);
    switchText.draw(canvas);
  }
  canvas.restoreToCount(saveCount);
}
