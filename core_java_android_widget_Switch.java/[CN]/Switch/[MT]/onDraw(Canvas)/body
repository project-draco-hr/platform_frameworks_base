{
  super.onDraw(canvas);
  final Rect padding=mTempRect;
  final Drawable trackDrawable=mTrackDrawable;
  if (trackDrawable != null) {
    trackDrawable.getPadding(padding);
  }
 else {
    padding.setEmpty();
  }
  final int switchTop=mSwitchTop;
  final int switchBottom=mSwitchBottom;
  final int switchInnerLeft=mSwitchLeft + padding.left;
  final int switchInnerTop=switchTop + padding.top;
  final int switchInnerRight=mSwitchRight - padding.right;
  final int switchInnerBottom=switchBottom - padding.bottom;
  final Drawable thumbDrawable=mThumbDrawable;
  if (trackDrawable != null) {
    if (mSplitTrack && thumbDrawable != null) {
      final Insets insets=thumbDrawable.getOpticalInsets();
      thumbDrawable.copyBounds(padding);
      padding.left+=insets.left;
      padding.right-=insets.right;
      final int saveCount=canvas.save();
      canvas.clipRect(padding,Op.DIFFERENCE);
      trackDrawable.draw(canvas);
      canvas.restoreToCount(saveCount);
    }
 else {
      trackDrawable.draw(canvas);
    }
  }
  final int saveCount=canvas.save();
  if (thumbDrawable != null) {
    canvas.clipRect(switchInnerLeft,switchTop,switchInnerRight,switchBottom);
    thumbDrawable.draw(canvas);
  }
  final Layout switchText=getTargetCheckedState() ? mOnLayout : mOffLayout;
  if (switchText != null) {
    final int drawableState[]=getDrawableState();
    if (mTextColors != null) {
      mTextPaint.setColor(mTextColors.getColorForState(drawableState,0));
    }
    mTextPaint.drawableState=drawableState;
    final int cX;
    if (thumbDrawable != null) {
      final Rect bounds=thumbDrawable.getBounds();
      cX=bounds.left + bounds.right;
    }
 else {
      cX=getWidth() / 2;
    }
    final int left=cX / 2 - switchText.getWidth() / 2;
    final int top=(switchInnerTop + switchInnerBottom) / 2 - switchText.getHeight() / 2;
    canvas.translate(left,top);
    switchText.draw(canvas);
  }
  canvas.restoreToCount(saveCount);
}
