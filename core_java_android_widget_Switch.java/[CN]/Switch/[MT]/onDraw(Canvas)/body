{
  final Rect tempRect=mTempRect;
  final Drawable trackDrawable=mTrackDrawable;
  final Drawable thumbDrawable=mThumbDrawable;
  final int switchLeft=mSwitchLeft;
  final int switchTop=mSwitchTop;
  final int switchRight=mSwitchRight;
  final int switchBottom=mSwitchBottom;
  trackDrawable.setBounds(switchLeft,switchTop,switchRight,switchBottom);
  trackDrawable.getPadding(tempRect);
  final int switchInnerLeft=switchLeft + tempRect.left;
  final int switchInnerTop=switchTop + tempRect.top;
  final int switchInnerRight=switchRight - tempRect.right;
  final int switchInnerBottom=switchBottom - tempRect.bottom;
  final int thumbPos=getThumbOffset();
  thumbDrawable.getPadding(tempRect);
  int thumbLeft=switchInnerLeft - tempRect.left + thumbPos;
  int thumbRight=switchInnerLeft + thumbPos + mThumbWidth+ tempRect.right;
  thumbDrawable.setBounds(thumbLeft,switchTop,thumbRight,switchBottom);
  final Drawable background=getBackground();
  if (background != null && background.supportsHotspots()) {
    background.setHotspotBounds(thumbLeft,switchTop,thumbRight,switchBottom);
  }
  super.onDraw(canvas);
  trackDrawable.draw(canvas);
  final int saveCount=canvas.save();
  canvas.clipRect(switchInnerLeft,switchTop,switchInnerRight,switchBottom);
  thumbDrawable.draw(canvas);
  final int drawableState[]=getDrawableState();
  if (mTextColors != null) {
    mTextPaint.setColor(mTextColors.getColorForState(drawableState,0));
  }
  mTextPaint.drawableState=drawableState;
  final Layout switchText=getTargetCheckedState() ? mOnLayout : mOffLayout;
  if (switchText != null) {
    final int left=(thumbLeft + thumbRight) / 2 - switchText.getWidth() / 2;
    final int top=(switchInnerTop + switchInnerBottom) / 2 - switchText.getHeight() / 2;
    canvas.translate(left,top);
    switchText.draw(canvas);
  }
  canvas.restoreToCount(saveCount);
}
