{
{
    final LocaleList preferredLocales=LocaleList.forLanguageTags("sr-Latn-RS");
    final ArrayList<Locale> availableLocales=new ArrayList<>();
    availableLocales.add(Locale.forLanguageTag("sr-Cyrl-BA"));
    availableLocales.add(Locale.forLanguageTag("sr-Cyrl-CS"));
    availableLocales.add(Locale.forLanguageTag("sr-Cyrl-ME"));
    availableLocales.add(Locale.forLanguageTag("sr-Cyrl-RS"));
    availableLocales.add(Locale.forLanguageTag("sr-Latn-BA"));
    availableLocales.add(Locale.forLanguageTag("sr-Latn-CS"));
    availableLocales.add(Locale.forLanguageTag("sr-Latn-ME"));
    availableLocales.add(Locale.forLanguageTag("sr-Latn-RS"));
    final ArrayList<Locale> dest=new ArrayList<>();
    LocaleUtils.filterByLanguage(availableLocales,sIdentityMapper,preferredLocales,dest);
    assertEquals(1,dest.size());
    assertEquals(availableLocales.get(7),dest.get(0));
  }
{
    final LocaleList preferredLocales=LocaleList.forLanguageTags("sr-Latn-RS-x-android");
    final ArrayList<Locale> availableLocales=new ArrayList<>();
    availableLocales.add(Locale.forLanguageTag("sr-Cyrl-BA"));
    availableLocales.add(Locale.forLanguageTag("sr-Cyrl-CS"));
    availableLocales.add(Locale.forLanguageTag("sr-Cyrl-ME"));
    availableLocales.add(Locale.forLanguageTag("sr-Cyrl-RS"));
    availableLocales.add(Locale.forLanguageTag("sr-Latn-BA"));
    availableLocales.add(Locale.forLanguageTag("sr-Latn-CS"));
    availableLocales.add(Locale.forLanguageTag("sr-Latn-ME"));
    availableLocales.add(Locale.forLanguageTag("sr-Latn-RS"));
    final ArrayList<Locale> dest=new ArrayList<>();
    LocaleUtils.filterByLanguage(availableLocales,sIdentityMapper,preferredLocales,dest);
    assertEquals(1,dest.size());
    assertEquals(availableLocales.get(7),dest.get(0));
  }
{
    final LocaleList preferredLocales=LocaleList.forLanguageTags("sr-Latn-RS");
    final ArrayList<Locale> availableLocales=new ArrayList<>();
    availableLocales.add(Locale.forLanguageTag("sr-Cyrl-BA-x-android"));
    availableLocales.add(Locale.forLanguageTag("sr-Cyrl-CS-x-android"));
    availableLocales.add(Locale.forLanguageTag("sr-Cyrl-ME-x-android"));
    availableLocales.add(Locale.forLanguageTag("sr-Cyrl-RS-x-android"));
    availableLocales.add(Locale.forLanguageTag("sr-Latn-BA-x-android"));
    availableLocales.add(Locale.forLanguageTag("sr-Latn-CS-x-android"));
    availableLocales.add(Locale.forLanguageTag("sr-Latn-ME-x-android"));
    availableLocales.add(Locale.forLanguageTag("sr-Latn-RS-x-android"));
    final ArrayList<Locale> dest=new ArrayList<>();
    LocaleUtils.filterByLanguage(availableLocales,sIdentityMapper,preferredLocales,dest);
    assertEquals(1,dest.size());
    assertEquals(availableLocales.get(7),dest.get(0));
  }
{
    final LocaleList preferredLocales=LocaleList.forLanguageTags("sr-Latn-RS");
    final ArrayList<Locale> availableLocales=new ArrayList<>();
    availableLocales.add(Locale.forLanguageTag("sr"));
    availableLocales.add(Locale.forLanguageTag("sr-Cyrl"));
    availableLocales.add(Locale.forLanguageTag("sr-Latn"));
    final ArrayList<Locale> dest=new ArrayList<>();
    LocaleUtils.filterByLanguage(availableLocales,sIdentityMapper,preferredLocales,dest);
    assertEquals(1,dest.size());
    assertEquals(availableLocales.get(2),dest.get(0));
  }
{
    final LocaleList preferredLocales=LocaleList.forLanguageTags("sr-RS");
    final ArrayList<Locale> availableLocales=new ArrayList<>();
    availableLocales.add(Locale.forLanguageTag("sr"));
    availableLocales.add(Locale.forLanguageTag("sr-RS"));
    availableLocales.add(Locale.forLanguageTag("sr-Latn"));
    final ArrayList<Locale> dest=new ArrayList<>();
    LocaleUtils.filterByLanguage(availableLocales,sIdentityMapper,preferredLocales,dest);
    assertEquals(1,dest.size());
    assertEquals(availableLocales.get(0),dest.get(0));
  }
{
    final LocaleList preferredLocales=LocaleList.forLanguageTags("sr-Latn");
    final ArrayList<Locale> availableLocales=new ArrayList<>();
    availableLocales.add(Locale.forLanguageTag("sr"));
    availableLocales.add(Locale.forLanguageTag("sr-RS"));
    availableLocales.add(Locale.forLanguageTag("sr-Latn"));
    final ArrayList<Locale> dest=new ArrayList<>();
    LocaleUtils.filterByLanguage(availableLocales,sIdentityMapper,preferredLocales,dest);
    assertEquals(1,dest.size());
    assertEquals(availableLocales.get(2),dest.get(0));
  }
{
    final LocaleList preferredLocales=LocaleList.forLanguageTags("sr");
    final ArrayList<Locale> availableLocales=new ArrayList<>();
    availableLocales.add(Locale.forLanguageTag("sr"));
    availableLocales.add(Locale.forLanguageTag("sr-RS"));
    availableLocales.add(Locale.forLanguageTag("sr-Latn"));
    final ArrayList<Locale> dest=new ArrayList<>();
    LocaleUtils.filterByLanguage(availableLocales,sIdentityMapper,preferredLocales,dest);
    assertEquals(1,dest.size());
    assertEquals(availableLocales.get(0),dest.get(0));
  }
{
    final LocaleList preferredLocales=LocaleList.forLanguageTags("sr");
    final ArrayList<Locale> availableLocales=new ArrayList<>();
    availableLocales.add(Locale.forLanguageTag("sr-Latn"));
    availableLocales.add(Locale.forLanguageTag("sr-RS"));
    availableLocales.add(Locale.forLanguageTag("sr"));
    final ArrayList<Locale> dest=new ArrayList<>();
    LocaleUtils.filterByLanguage(availableLocales,sIdentityMapper,preferredLocales,dest);
    assertEquals(1,dest.size());
    assertEquals(availableLocales.get(1),dest.get(0));
  }
{
    final LocaleList preferredLocales=LocaleList.forLanguageTags("sr");
    final ArrayList<Locale> availableLocales=new ArrayList<>();
    availableLocales.add(Locale.forLanguageTag("sr-Cyrl-RS"));
    availableLocales.add(Locale.forLanguageTag("sr-Latn-RS"));
    final ArrayList<Locale> dest=new ArrayList<>();
    LocaleUtils.filterByLanguage(availableLocales,sIdentityMapper,preferredLocales,dest);
    assertEquals(1,dest.size());
    assertEquals(availableLocales.get(0),dest.get(0));
  }
{
    final LocaleList preferredLocales=LocaleList.forLanguageTags("sr-Latn");
    final ArrayList<Locale> availableLocales=new ArrayList<>();
    availableLocales.add(Locale.forLanguageTag("sr-Latn-RS"));
    availableLocales.add(Locale.forLanguageTag("sr-Cyrl-RS"));
    final ArrayList<Locale> dest=new ArrayList<>();
    LocaleUtils.filterByLanguage(availableLocales,sIdentityMapper,preferredLocales,dest);
    assertEquals(1,dest.size());
    assertEquals(availableLocales.get(0),dest.get(0));
  }
}
