{
  for (int i=0; i < mClients.size(); i++) {
    ClientData clientData=mClients.get(i);
switch (msg) {
case FingerprintManager.FINGERPRINT_ERROR:
{
        if (clientData.state != STATE_IDLE) {
          final int error=arg1;
          clientData.state=STATE_IDLE;
          if (clientData.receiver != null) {
            try {
              clientData.receiver.onError(error);
            }
 catch (            RemoteException e) {
              Slog.e(TAG,"can't send message to client. Did it die?",e);
            }
          }
        }
      }
    break;
case FingerprintManager.FINGERPRINT_SCANNED:
{
    final int fingerId=arg1;
    final int confidence=arg2;
    if (clientData.state == STATE_LISTENING && clientData.receiver != null) {
      try {
        clientData.receiver.onScanned(fingerId,confidence);
      }
 catch (      RemoteException e) {
        Slog.e(TAG,"can't send message to client. Did it die?",e);
      }
    }
    break;
  }
case FingerprintManager.FINGERPRINT_TEMPLATE_ENROLLING:
{
  if (clientData.state == STATE_ENROLLING) {
    final int fingerId=arg1;
    final int remaining=arg2;
    if (remaining == 0) {
      FingerprintUtils.addFingerprintIdForUser(fingerId,getContentResolver(),clientData.userId);
      clientData.state=STATE_IDLE;
    }
    if (clientData.receiver != null) {
      try {
        clientData.receiver.onEnrollResult(fingerId,remaining);
      }
 catch (      RemoteException e) {
        Slog.e(TAG,"can't send message to client. Did it die?",e);
      }
    }
  }
  break;
}
case FingerprintManager.FINGERPRINT_TEMPLATE_REMOVED:
{
int fingerId=arg1;
if (fingerId == 0) throw new IllegalStateException("Got illegal id from HAL");
if (clientData.state == STATE_DELETING) {
  FingerprintUtils.removeFingerprintIdForUser(fingerId,getContentResolver(),clientData.userId);
  if (clientData.receiver != null) {
    try {
      clientData.receiver.onRemoved(fingerId);
    }
 catch (    RemoteException e) {
      Slog.e(TAG,"can't send message to client. Did it die?",e);
    }
  }
}
}
break;
}
}
}
