{
  mVelocityTracker.addMovement(event);
  final float x=event.getX();
  final float y=event.getY();
  mPolicyFlags=policyFlags;
switch (event.getActionMasked()) {
case MotionEvent.ACTION_DOWN:
    mDoubleTapDetected=false;
  mSecondFingerDoubleTap=false;
mRecognizingGesture=true;
mGestureConfirmed=false;
mBaseX=x;
mBaseY=y;
mPreviousX=x;
mPreviousY=y;
mStrokeBuffer.clear();
mStrokeBuffer.add(new GesturePoint(x,y,event.getEventTime()));
mVelocityTracker.clear();
mVelocityTracker.addMovement(event);
break;
case MotionEvent.ACTION_MOVE:
if (mRecognizingGesture) {
if (!mGestureConfirmed) {
mVelocityTracker.addMovement(event);
final float deltaX=mBaseX - event.getX(0);
final float deltaY=mBaseY - event.getY(0);
final double moveDelta=Math.hypot(deltaX,deltaY);
if (moveDelta > mDoubleTapSlop) {
mVelocityTracker.computeCurrentVelocity(VELOCITY_UNITS_SECONDS);
final float maxAbsVelocity=Math.max(Math.abs(mVelocityTracker.getXVelocity(0)),Math.abs(mVelocityTracker.getYVelocity(0)));
if (maxAbsVelocity > mScaledGestureDetectionVelocity) {
mGestureConfirmed=true;
mListener.onGestureStarted();
}
 else {
cancelGesture();
mListener.onGestureCancelled(event,policyFlags);
}
}
}
final float dX=Math.abs(x - mPreviousX);
final float dY=Math.abs(y - mPreviousY);
if (dX >= TOUCH_TOLERANCE || dY >= TOUCH_TOLERANCE) {
mPreviousX=x;
mPreviousY=y;
mStrokeBuffer.add(new GesturePoint(x,y,event.getEventTime()));
}
}
break;
case MotionEvent.ACTION_UP:
if (maybeFinishDoubleTap(event,policyFlags)) {
return true;
}
if (mGestureConfirmed) {
mStrokeBuffer.add(new GesturePoint(x,y,event.getEventTime()));
if (!recognizeGesture()) {
mListener.onGestureCancelled(event,policyFlags);
}
return true;
}
break;
case MotionEvent.ACTION_POINTER_DOWN:
cancelGesture();
if (event.getPointerCount() == 2) {
mSecondFingerDoubleTap=true;
mSecondPointerDownTime=event.getEventTime();
}
 else {
mSecondFingerDoubleTap=false;
}
break;
case MotionEvent.ACTION_POINTER_UP:
if (mSecondFingerDoubleTap && maybeFinishDoubleTap(event,policyFlags)) {
return true;
}
break;
case MotionEvent.ACTION_CANCEL:
clear();
break;
}
if (mSecondFingerDoubleTap) {
MotionEvent newEvent=mapSecondPointerToFirstPointer(event);
if (newEvent == null) {
return false;
}
boolean handled=mGestureDetector.onTouchEvent(newEvent);
newEvent.recycle();
return handled;
}
if (!mRecognizingGesture) {
return false;
}
return mGestureDetector.onTouchEvent(event);
}
