{
  if (DEBUG) {
    Log.i(LOG_TAG,"print(" + pages + ")");
  }
  InputStream in=null;
  OutputStream out=null;
  ParcelFileDescriptor source=null;
  ParcelFileDescriptor sink=null;
synchronized (mLock) {
    mWriteThread=Thread.currentThread();
  }
  try {
    ParcelFileDescriptor[] pipe=ParcelFileDescriptor.createPipe();
    source=pipe[0];
    sink=pipe[1];
    in=new FileInputStream(source.getFileDescriptor());
    out=new FileOutputStream(mFile);
    mRemoteInterface.print(pages,sink,mIPrintProgressListener);
    sink.close();
    sink=null;
    final byte[] buffer=new byte[8192];
    while (true) {
      if (Thread.currentThread().isInterrupted()) {
        Thread.currentThread().interrupt();
        break;
      }
      final int readByteCount=in.read(buffer);
      if (readByteCount < 0) {
        break;
      }
      out.write(buffer,0,readByteCount);
    }
  }
 catch (  RemoteException re) {
    throw new IOException("Error reading file",re);
  }
catch (  IOException ioe) {
    throw new IOException("Error reading file",ioe);
  }
 finally {
    IoUtils.closeQuietly(in);
    IoUtils.closeQuietly(out);
    IoUtils.closeQuietly(sink);
    IoUtils.closeQuietly(source);
  }
}
