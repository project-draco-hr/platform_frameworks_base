{
  FrameBuffer2D histogramFrame=getConnectedInputPort("histogram").pullFrame().asFrameBuffer2D();
  ByteBuffer byteBuffer=histogramFrame.lockBytes(Frame.MODE_READ);
  byteBuffer.order(ByteOrder.nativeOrder());
  FloatBuffer histogramBuffer=byteBuffer.asFloatBuffer();
  histogramBuffer.rewind();
  int hueBins=histogramFrame.getWidth();
  int saturationBins=histogramFrame.getHeight() - 1;
  float[] hueHistogram=new float[hueBins];
  float total=0;
  for (int r=0; r < saturationBins; ++r) {
    float weight=(float)Math.pow(2,r);
    for (int c=0; c < hueBins; c++) {
      float value=histogramBuffer.get() * weight;
      hueHistogram[c]+=value;
      total+=value;
    }
  }
  float colorful=0f;
  for (int c=0; c < hueBins; ++c) {
    float value=hueHistogram[c] / total;
    if (value > 0f) {
      colorful-=value * ((float)Math.log(value));
    }
  }
  colorful/=Math.log(2);
  histogramFrame.unlock();
  OutputPort outPort=getConnectedOutputPort("score");
  FrameValue frameValue=outPort.fetchAvailableFrame(null).asFrameValue();
  frameValue.setValue(colorful);
  outPort.pushFrame(frameValue);
}
