{
  int pos=CharArrayBuffers.setLowercaseIndexOf(buffer,':');
  if (pos == -1) {
    return;
  }
  String name=buffer.substringTrimmed(0,pos);
  if (name.length() == 0) {
    return;
  }
  pos++;
  if (HttpLog.LOGV) {
    String val=buffer.substringTrimmed(pos,buffer.length());
    HttpLog.v("hdr " + buffer.length() + " "+ buffer);
  }
switch (name.hashCode()) {
case HASH_TRANSFER_ENCODING:
    if (name.equals(TRANSFER_ENCODING)) {
      HeaderElement[] encodings=BasicHeaderValueParser.DEFAULT.parseElements(buffer,new ParserCursor(pos,buffer.length()));
      int len=encodings.length;
      if (HTTP.IDENTITY_CODING.equalsIgnoreCase(buffer.substringTrimmed(pos,buffer.length()))) {
        transferEncoding=ContentLengthStrategy.IDENTITY;
      }
 else       if ((len > 0) && (HTTP.CHUNK_CODING.equalsIgnoreCase(encodings[len - 1].getName()))) {
        transferEncoding=ContentLengthStrategy.CHUNKED;
      }
 else {
        transferEncoding=ContentLengthStrategy.IDENTITY;
      }
    }
  break;
case HASH_CONTENT_LEN:
if (name.equals(CONTENT_LEN)) {
  try {
    contentLength=Long.parseLong(buffer.substringTrimmed(pos,buffer.length()));
  }
 catch (  NumberFormatException e) {
    if (Config.LOGV) {
      Log.v(LOGTAG,"Headers.headers(): error parsing" + " content length: " + buffer.toString());
    }
  }
}
break;
case HASH_CONTENT_TYPE:
if (name.equals(CONTENT_TYPE)) {
contentType=buffer.substringTrimmed(pos,buffer.length());
}
break;
case HASH_CONTENT_ENCODING:
if (name.equals(CONTENT_ENCODING)) {
contentEncoding=buffer.substringTrimmed(pos,buffer.length());
}
break;
case HASH_CONN_DIRECTIVE:
if (name.equals(CONN_DIRECTIVE)) {
setConnectionType(buffer,pos);
}
break;
case HASH_LOCATION:
if (name.equals(LOCATION)) {
location=buffer.substringTrimmed(pos,buffer.length());
}
break;
case HASH_PROXY_CONNECTION:
if (name.equals(PROXY_CONNECTION)) {
setConnectionType(buffer,pos);
}
break;
case HASH_WWW_AUTHENTICATE:
if (name.equals(WWW_AUTHENTICATE)) {
wwwAuthenticate=buffer.substringTrimmed(pos,buffer.length());
}
break;
case HASH_PROXY_AUTHENTICATE:
if (name.equals(PROXY_AUTHENTICATE)) {
proxyAuthenticate=buffer.substringTrimmed(pos,buffer.length());
}
break;
case HASH_CONTENT_DISPOSITION:
if (name.equals(CONTENT_DISPOSITION)) {
contentDisposition=buffer.substringTrimmed(pos,buffer.length());
}
break;
case HASH_ACCEPT_RANGES:
if (name.equals(ACCEPT_RANGES)) {
acceptRanges=buffer.substringTrimmed(pos,buffer.length());
}
break;
case HASH_EXPIRES:
if (name.equals(EXPIRES)) {
expires=buffer.substringTrimmed(pos,buffer.length());
}
break;
case HASH_CACHE_CONTROL:
if (name.equals(CACHE_CONTROL)) {
cacheControl=buffer.substringTrimmed(pos,buffer.length());
}
break;
case HASH_LAST_MODIFIED:
if (name.equals(LAST_MODIFIED)) {
lastModified=buffer.substringTrimmed(pos,buffer.length());
}
break;
case HASH_ETAG:
if (name.equals(ETAG)) {
etag=buffer.substringTrimmed(pos,buffer.length());
}
break;
case HASH_SET_COOKIE:
if (name.equals(SET_COOKIE)) {
cookies.add(buffer.substringTrimmed(pos,buffer.length()));
}
break;
case HASH_PRAGMA:
if (name.equals(PRAGMA)) {
pragma=buffer.substringTrimmed(pos,buffer.length());
}
break;
case HASH_REFRESH:
if (name.equals(REFRESH)) {
refresh=buffer.substringTrimmed(pos,buffer.length());
}
break;
default :
}
}
