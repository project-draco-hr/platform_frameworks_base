{
  AsyncResult ar;
switch (msg.what) {
case EVENT_POLL_CALLS_RESULT:
{
      Log.d(LOG_TAG,"Event EVENT_POLL_CALLS_RESULT Received");
      ar=(AsyncResult)msg.obj;
      if (msg == lastRelevantPoll) {
        if (DBG_POLL)         log("handle EVENT_POLL_CALL_RESULT: set needsPoll=F");
        needsPoll=false;
        lastRelevantPoll=null;
        handlePollCalls((AsyncResult)msg.obj);
      }
    }
  break;
case EVENT_OPERATION_COMPLETE:
ar=(AsyncResult)msg.obj;
operationComplete();
break;
case EVENT_SWITCH_RESULT:
ar=(AsyncResult)msg.obj;
operationComplete();
break;
case EVENT_GET_LAST_CALL_FAIL_CAUSE:
int causeCode;
ar=(AsyncResult)msg.obj;
operationComplete();
if (ar.exception != null) {
causeCode=CallFailCause.NORMAL_CLEARING;
Log.i(LOG_TAG,"Exception during getLastCallFailCause, assuming normal disconnect");
}
 else {
causeCode=((int[])ar.result)[0];
}
for (int i=0, s=droppedDuringPoll.size(); i < s; i++) {
CdmaConnection conn=droppedDuringPoll.get(i);
conn.onRemoteDisconnect(causeCode);
}
updatePhoneState();
phone.notifyCallStateChanged();
droppedDuringPoll.clear();
break;
case EVENT_CALL_STATE_CHANGE:
pollCallsWhenSafe();
break;
case EVENT_RADIO_AVAILABLE:
handleRadioAvailable();
break;
case EVENT_RADIO_NOT_AVAILABLE:
handleRadioNotAvailable();
break;
case EVENT_EXIT_ECM_RESPONSE_CDMA:
if (pendingCallInECM) {
cm.dial(pendingMO.address,pendingCallClirMode,obtainCompleteMessage());
pendingCallInECM=false;
}
phone.unsetOnEcbModeExitResponse(this);
break;
default :
{
throw new RuntimeException("unexpected event not handled");
}
}
}
