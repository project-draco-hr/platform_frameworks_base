{
  List<ApplicationInfo> restoredApps=new ArrayList<ApplicationInfo>();
  HashMap<String,Metadata> sigMap=new HashMap<String,Metadata>();
  if (DEBUG)   Slog.v(TAG,"onRestore()");
  int storedSystemVersion=-1;
  while (data.readNextHeader()) {
    String key=data.getKey();
    int dataSize=data.getDataSize();
    if (DEBUG)     Slog.v(TAG,"   got key=" + key + " dataSize="+ dataSize);
    byte[] inputBytes=new byte[dataSize];
    data.readEntityData(inputBytes,0,dataSize);
    ByteArrayInputStream inputBuffer=new ByteArrayInputStream(inputBytes);
    DataInputStream inputBufferStream=new DataInputStream(inputBuffer);
    if (key.equals(GLOBAL_METADATA_KEY)) {
      int storedSdkVersion=inputBufferStream.readInt();
      if (DEBUG)       Slog.v(TAG,"   storedSystemVersion = " + storedSystemVersion);
      if (storedSystemVersion > Build.VERSION.SDK_INT) {
        Slog.w(TAG,"Restore set was from a later version of Android; not restoring");
        return;
      }
      mStoredSdkVersion=storedSdkVersion;
      mStoredIncrementalVersion=inputBufferStream.readUTF();
      mHasMetadata=true;
      if (DEBUG) {
        Slog.i(TAG,"Restore set version " + storedSystemVersion + " is compatible with OS version "+ Build.VERSION.SDK_INT+ " ("+ mStoredIncrementalVersion+ " vs "+ Build.VERSION.INCREMENTAL+ ")");
      }
    }
 else     if (key.equals(DEFAULT_HOME_KEY)) {
      String cn=inputBufferStream.readUTF();
      mRestoredHome=ComponentName.unflattenFromString(cn);
      mRestoredHomeVersion=inputBufferStream.readLong();
      mRestoredHomeInstaller=inputBufferStream.readUTF();
      mRestoredHomeSignatures=readSignatureArray(inputBufferStream);
      if (DEBUG) {
        Slog.i(TAG,"   read preferred home app " + mRestoredHome + " version="+ mRestoredHomeVersion+ " installer="+ mRestoredHomeVersion+ " sig="+ mRestoredHomeVersion);
      }
    }
 else {
      int versionCode=inputBufferStream.readInt();
      Signature[] sigs=readSignatureArray(inputBufferStream);
      if (DEBUG) {
        Slog.i(TAG,"   read metadata for " + key + " dataSize="+ dataSize+ " versionCode="+ versionCode+ " sigs="+ sigs);
      }
      if (sigs == null || sigs.length == 0) {
        Slog.w(TAG,"Not restoring package " + key + " since it appears to have no signatures.");
        continue;
      }
      ApplicationInfo app=new ApplicationInfo();
      app.packageName=key;
      restoredApps.add(app);
      sigMap.put(key,new Metadata(versionCode,sigs));
    }
  }
  mRestoredSignatures=sigMap;
}
