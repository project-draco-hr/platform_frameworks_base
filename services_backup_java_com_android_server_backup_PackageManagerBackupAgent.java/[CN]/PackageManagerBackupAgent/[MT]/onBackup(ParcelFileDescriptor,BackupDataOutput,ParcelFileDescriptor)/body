{
  if (DEBUG)   Slog.v(TAG,"onBackup()");
  ByteArrayOutputStream outputBuffer=new ByteArrayOutputStream();
  DataOutputStream outputBufferStream=new DataOutputStream(outputBuffer);
  parseStateFile(oldState);
  if (mStoredIncrementalVersion == null || !mStoredIncrementalVersion.equals(Build.VERSION.INCREMENTAL)) {
    Slog.i(TAG,"Previous metadata " + mStoredIncrementalVersion + " mismatch vs "+ Build.VERSION.INCREMENTAL+ " - rewriting");
    mExisting.clear();
  }
  long homeVersion=0;
  ArrayList<byte[]> homeSigHashes=null;
  PackageInfo homeInfo=null;
  String homeInstaller=null;
  ComponentName home=getPreferredHomeComponent();
  if (home != null) {
    try {
      homeInfo=mPackageManager.getPackageInfo(home.getPackageName(),PackageManager.GET_SIGNATURES);
      homeInstaller=mPackageManager.getInstallerPackageName(home.getPackageName());
      homeVersion=homeInfo.versionCode;
      homeSigHashes=hashSignatureArray(homeInfo.signatures);
    }
 catch (    NameNotFoundException e) {
      Slog.w(TAG,"Can't access preferred home info");
      home=null;
    }
  }
  try {
    final boolean needHomeBackup=(homeVersion != mStoredHomeVersion) || !Objects.equals(home,mStoredHomeComponent) || (home != null && !BackupManagerService.signaturesMatch(mStoredHomeSigHashes,homeInfo));
    if (needHomeBackup) {
      if (DEBUG) {
        Slog.i(TAG,"Home preference changed; backing up new state " + home);
      }
      if (home != null) {
        outputBufferStream.writeUTF(home.flattenToString());
        outputBufferStream.writeLong(homeVersion);
        outputBufferStream.writeUTF(homeInstaller != null ? homeInstaller : "");
        writeSignatureHashArray(outputBufferStream,homeSigHashes);
        writeEntity(data,DEFAULT_HOME_KEY,outputBuffer.toByteArray());
      }
 else {
        data.writeEntityHeader(DEFAULT_HOME_KEY,-1);
      }
    }
    outputBuffer.reset();
    if (!mExisting.contains(GLOBAL_METADATA_KEY)) {
      if (DEBUG)       Slog.v(TAG,"Storing global metadata key");
      outputBufferStream.writeInt(Build.VERSION.SDK_INT);
      outputBufferStream.writeUTF(Build.VERSION.INCREMENTAL);
      writeEntity(data,GLOBAL_METADATA_KEY,outputBuffer.toByteArray());
    }
 else {
      if (DEBUG)       Slog.v(TAG,"Global metadata key already stored");
      mExisting.remove(GLOBAL_METADATA_KEY);
    }
    for (    PackageInfo pkg : mAllPackages) {
      String packName=pkg.packageName;
      if (packName.equals(GLOBAL_METADATA_KEY)) {
        continue;
      }
 else {
        PackageInfo info=null;
        try {
          info=mPackageManager.getPackageInfo(packName,PackageManager.GET_SIGNATURES);
        }
 catch (        NameNotFoundException e) {
          mExisting.add(packName);
          continue;
        }
        if (mExisting.contains(packName)) {
          mExisting.remove(packName);
          if (info.versionCode == mStateVersions.get(packName).versionCode) {
            continue;
          }
        }
        if (info.signatures == null || info.signatures.length == 0) {
          Slog.w(TAG,"Not backing up package " + packName + " since it appears to have no signatures.");
          continue;
        }
        outputBuffer.reset();
        outputBufferStream.writeInt(info.versionCode);
        writeSignatureHashArray(outputBufferStream,hashSignatureArray(info.signatures));
        if (DEBUG) {
          Slog.v(TAG,"+ writing metadata for " + packName + " version="+ info.versionCode+ " entityLen="+ outputBuffer.size());
        }
        writeEntity(data,packName,outputBuffer.toByteArray());
      }
    }
    if (DEBUG) {
      if (mExisting.size() > 0) {
        StringBuilder sb=new StringBuilder(64);
        sb.append("Preserving metadata for deleted packages:");
        for (        String app : mExisting) {
          sb.append(' ');
          sb.append(app);
        }
        Slog.v(TAG,sb.toString());
      }
    }
  }
 catch (  IOException e) {
    Slog.e(TAG,"Unable to write package backup data file!");
    return;
  }
  writeStateFile(mAllPackages,home,homeVersion,homeSigHashes,newState);
}
