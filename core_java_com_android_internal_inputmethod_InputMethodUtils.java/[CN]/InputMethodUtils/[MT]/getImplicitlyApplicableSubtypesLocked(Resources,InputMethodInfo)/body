{
  final List<InputMethodSubtype> subtypes=InputMethodUtils.getSubtypes(imi);
  final LocaleList systemLocales=res.getConfiguration().getLocales();
  final String systemLocale=systemLocales.get(0).toString();
  if (TextUtils.isEmpty(systemLocale))   return new ArrayList<>();
  final int numSubtypes=subtypes.size();
  final String systemLanguage=systemLocales.get(0).getLanguage();
  final HashMap<String,InputMethodSubtype> applicableModeAndSubtypesMap=new HashMap<>();
  for (int i=0; i < numSubtypes; ++i) {
    final InputMethodSubtype subtype=subtypes.get(i);
    if (subtype.overridesImplicitlyEnabledSubtype()) {
      final String mode=subtype.getMode();
      if (!applicableModeAndSubtypesMap.containsKey(mode)) {
        applicableModeAndSubtypesMap.put(mode,subtype);
      }
    }
  }
  if (applicableModeAndSubtypesMap.size() > 0) {
    return new ArrayList<>(applicableModeAndSubtypesMap.values());
  }
  final ArrayList<InputMethodSubtype> keyboardSubtypes=new ArrayList<>();
  for (int i=0; i < numSubtypes; ++i) {
    final InputMethodSubtype subtype=subtypes.get(i);
    if (TextUtils.equals(SUBTYPE_MODE_KEYBOARD,subtype.getMode())) {
      keyboardSubtypes.add(subtype);
    }
 else {
      final Locale locale=subtype.getLocaleObject();
      final String mode=subtype.getMode();
      if (locale != null && locale.equals(systemLanguage)) {
        final InputMethodSubtype applicableSubtype=applicableModeAndSubtypesMap.get(mode);
        if (applicableSubtype != null) {
          if (systemLocale.equals(applicableSubtype.getLocaleObject()))           continue;
          if (!systemLocale.equals(locale))           continue;
        }
        applicableModeAndSubtypesMap.put(mode,subtype);
      }
    }
  }
  final ArrayList<InputMethodSubtype> applicableSubtypes=new ArrayList<>();
  LocaleUtils.filterByLanguage(keyboardSubtypes,sSubtypeToLocale,systemLocales,applicableSubtypes);
  boolean hasAsciiCapableKeyboard=false;
  final int numApplicationSubtypes=applicableSubtypes.size();
  for (int i=0; i < numApplicationSubtypes; ++i) {
    final InputMethodSubtype subtype=applicableSubtypes.get(i);
    if (subtype.containsExtraValueKey(TAG_ASCII_CAPABLE)) {
      hasAsciiCapableKeyboard=true;
      break;
    }
  }
  if (!hasAsciiCapableKeyboard) {
    final int numKeyboardSubtypes=keyboardSubtypes.size();
    for (int i=0; i < numKeyboardSubtypes; ++i) {
      final InputMethodSubtype subtype=keyboardSubtypes.get(i);
      final String mode=subtype.getMode();
      if (SUBTYPE_MODE_KEYBOARD.equals(mode) && subtype.containsExtraValueKey(TAG_ENABLED_WHEN_DEFAULT_IS_NOT_ASCII_CAPABLE)) {
        applicableSubtypes.add(subtype);
      }
    }
  }
  if (applicableSubtypes.isEmpty()) {
    InputMethodSubtype lastResortKeyboardSubtype=findLastResortApplicableSubtypeLocked(res,subtypes,SUBTYPE_MODE_KEYBOARD,systemLocale,true);
    if (lastResortKeyboardSubtype != null) {
      applicableSubtypes.add(lastResortKeyboardSubtype);
    }
  }
  applicableSubtypes.addAll(applicableModeAndSubtypesMap.values());
  return applicableSubtypes;
}
