{
  if (DEBUG) {
    Slog.d(TAG,"setNonSelectedSystemImesDisabledUntilUsed");
  }
  final String[] systemImesDisabledUntilUsed=Resources.getSystem().getStringArray(com.android.internal.R.array.config_disabledUntilUsedPreinstalledImes);
  if (systemImesDisabledUntilUsed == null || systemImesDisabledUntilUsed.length == 0) {
    return;
  }
  final SpellCheckerInfo currentSpellChecker=TextServicesManager.getInstance().getCurrentSpellChecker();
  for (  final String packageName : systemImesDisabledUntilUsed) {
    if (DEBUG) {
      Slog.d(TAG,"check " + packageName);
    }
    boolean enabledIme=false;
    for (int j=0; j < enabledImis.size(); ++j) {
      final InputMethodInfo imi=enabledImis.get(j);
      if (packageName.equals(imi.getPackageName())) {
        enabledIme=true;
        break;
      }
    }
    if (enabledIme) {
      continue;
    }
    if (currentSpellChecker != null && packageName.equals(currentSpellChecker.getPackageName())) {
      if (DEBUG) {
        Slog.d(TAG,packageName + " is the current spell checker. skip");
      }
      continue;
    }
    ApplicationInfo ai=null;
    try {
      ai=packageManager.getApplicationInfo(packageName,PackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS);
    }
 catch (    NameNotFoundException e) {
      Slog.w(TAG,"NameNotFoundException: " + packageName,e);
    }
    if (ai == null) {
      continue;
    }
    final boolean isSystemPackage=(ai.flags & ApplicationInfo.FLAG_SYSTEM) != 0;
    if (!isSystemPackage) {
      continue;
    }
    setDisabledUntilUsed(packageManager,packageName);
  }
}
