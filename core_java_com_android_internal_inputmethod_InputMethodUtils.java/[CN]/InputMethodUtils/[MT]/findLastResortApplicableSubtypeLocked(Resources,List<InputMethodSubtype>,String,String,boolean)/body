{
  if (subtypes == null || subtypes.size() == 0) {
    return null;
  }
  if (TextUtils.isEmpty(locale)) {
    locale=res.getConfiguration().locale.toString();
  }
  final String language=getLanguageFromLocaleString(locale);
  boolean partialMatchFound=false;
  InputMethodSubtype applicableSubtype=null;
  InputMethodSubtype firstMatchedModeSubtype=null;
  final int N=subtypes.size();
  for (int i=0; i < N; ++i) {
    InputMethodSubtype subtype=subtypes.get(i);
    final String subtypeLocale=subtype.getLocale();
    final String subtypeLanguage=getLanguageFromLocaleString(subtypeLocale);
    if (mode == null || subtypes.get(i).getMode().equalsIgnoreCase(mode)) {
      if (firstMatchedModeSubtype == null) {
        firstMatchedModeSubtype=subtype;
      }
      if (locale.equals(subtypeLocale)) {
        applicableSubtype=subtype;
        break;
      }
 else       if (!partialMatchFound && language.equals(subtypeLanguage)) {
        applicableSubtype=subtype;
        partialMatchFound=true;
      }
    }
  }
  if (applicableSubtype == null && canIgnoreLocaleAsLastResort) {
    return firstMatchedModeSubtype;
  }
  if (DEBUG) {
    if (applicableSubtype != null) {
      Slog.d(TAG,"Applicable InputMethodSubtype was found: " + applicableSubtype.getMode() + ","+ applicableSubtype.getLocale());
    }
  }
  return applicableSubtype;
}
