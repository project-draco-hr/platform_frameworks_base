{
  createTableAndClearCache();
  ContentValues values=new ContentValues();
  for (int i=0; i < 5; i++) {
    values.put("i",i);
    values.put("j","i" + System.currentTimeMillis());
    mDatabase.insert(TEST_TABLE,null,values);
switch (stmtType) {
case UPDATE:
      values.put("j","u" + System.currentTimeMillis());
    mDatabase.update(TEST_TABLE,values,"i = " + i,null);
  break;
case DELETE:
mDatabase.delete(TEST_TABLE,"i = 1",null);
break;
}
}
String sql="select count(*) from " + TEST_TABLE;
SQLiteStatement stmt=mDatabase.compileStatement(sql);
final int expectedValue=(stmtType == DELETE) ? 4 : 5;
assertEquals(expectedValue,stmt.simpleQueryForLong());
stmt.close();
Cursor c=mDatabase.rawQuery(sql,null);
assertEquals(1,c.getCount());
c.moveToFirst();
assertEquals(expectedValue,c.getLong(0));
c.close();
mDatabase.beginTransaction();
for (int i=10; i < 15; i++) {
values.put("i",i);
values.put("j","i" + System.currentTimeMillis());
mDatabase.insert(TEST_TABLE,null,values);
switch (stmtType) {
case UPDATE:
values.put("j","u" + System.currentTimeMillis());
mDatabase.update(TEST_TABLE,values,"i = " + i,null);
break;
case DELETE:
mDatabase.delete(TEST_TABLE,"i = 1",null);
break;
}
}
mDatabase.setTransactionSuccessful();
Thread t=new Thread(){
@Override public void run(){
String sql="select count(*) from " + TEST_TABLE;
SQLiteStatement stmt=getDb().compileStatement(sql);
assertEquals(expectedValue,stmt.simpleQueryForLong());
stmt.close();
Cursor c=getDb().rawQuery(sql,null);
assertEquals(1,c.getCount());
c.moveToFirst();
assertEquals(expectedValue,c.getLong(0));
c.close();
}
}
;
t.start();
t.join();
mDatabase.endTransaction();
stmt=mDatabase.compileStatement(sql);
final int expectedValue2=(stmtType == DELETE) ? 9 : 10;
assertEquals(expectedValue2,stmt.simpleQueryForLong());
stmt.close();
c=mDatabase.rawQuery(sql,null);
assertEquals(1,c.getCount());
c.moveToFirst();
assertEquals(expectedValue2,c.getLong(0));
c.close();
}
