{
  super.onCreate(savedInstanceState);
  if (!isVoiceInteraction()) {
    Log.w(TAG,"Not running as a voice interaction!");
    finish();
    return;
  }
  if (!VoiceInteractionService.isActiveService(this,new ComponentName(this,MainInteractionService.class))) {
    Log.w(TAG,"Not current voice interactor!");
    finish();
    return;
  }
  setContentView(R.layout.test_interaction);
  mLog=(TextView)findViewById(R.id.log);
  mAbortButton=(Button)findViewById(R.id.abort);
  mAbortButton.setOnClickListener(this);
  mCompleteButton=(Button)findViewById(R.id.complete);
  mCompleteButton.setOnClickListener(this);
  mPickButton=(Button)findViewById(R.id.pick);
  mPickButton.setOnClickListener(this);
  mJumpOutButton=(Button)findViewById(R.id.jump);
  mJumpOutButton.setOnClickListener(this);
  mCancelButton=(Button)findViewById(R.id.cancel);
  mCancelButton.setOnClickListener(this);
  mInteractor=getVoiceInteractor();
  VoiceInteractor.Request[] active=mInteractor.getActiveRequests();
  for (int i=0; i < active.length; i++) {
    Log.i(TAG,"Active #" + i + " / "+ active[i].getName()+ ": "+ active[i]);
  }
  mCurrentRequest=mInteractor.getActiveRequest(REQUEST_CONFIRM);
  if (mCurrentRequest == null) {
    mCurrentRequest=new VoiceInteractor.ConfirmationRequest(new VoiceInteractor.Prompt("This is a confirmation"),null){
      @Override public void onCancel(){
        Log.i(TAG,"Canceled!");
        getActivity().finish();
      }
      @Override public void onConfirmationResult(      boolean confirmed,      Bundle result){
        Log.i(TAG,"Confirmation result: confirmed=" + confirmed + " result="+ result);
        getActivity().finish();
      }
    }
;
    mInteractor.submitRequest(mCurrentRequest,REQUEST_CONFIRM);
  }
 else {
    Log.i(TAG,"Restarting with active confirmation: " + mCurrentRequest);
  }
}
