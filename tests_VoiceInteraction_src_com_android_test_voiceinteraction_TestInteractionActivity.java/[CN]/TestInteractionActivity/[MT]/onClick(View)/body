{
  if (v == mAbortButton) {
    VoiceInteractor.AbortVoiceRequest req=new VoiceInteractor.AbortVoiceRequest(new VoiceInteractor.Prompt("Dammit, we suck :("),null){
      @Override public void onCancel(){
        Log.i(TAG,"Canceled!");
        mLog.append("Canceled abort\n");
      }
      @Override public void onAbortResult(      Bundle result){
        Log.i(TAG,"Abort result: result=" + result);
        mLog.append("Abort: result=" + result + "\n");
        getActivity().finish();
      }
    }
;
    mInteractor.submitRequest(req,REQUEST_ABORT);
  }
 else   if (v == mCompleteButton) {
    VoiceInteractor.CompleteVoiceRequest req=new VoiceInteractor.CompleteVoiceRequest(new VoiceInteractor.Prompt("Woohoo, completed!"),null){
      @Override public void onCancel(){
        Log.i(TAG,"Canceled!");
        mLog.append("Canceled complete\n");
      }
      @Override public void onCompleteResult(      Bundle result){
        Log.i(TAG,"Complete result: result=" + result);
        mLog.append("Complete: result=" + result + "\n");
        getActivity().finish();
      }
    }
;
    mInteractor.submitRequest(req,REQUEST_COMPLETE);
  }
 else   if (v == mPickButton) {
    VoiceInteractor.PickOptionRequest.Option[] options=new VoiceInteractor.PickOptionRequest.Option[5];
    options[0]=new VoiceInteractor.PickOptionRequest.Option("One");
    options[1]=new VoiceInteractor.PickOptionRequest.Option("Two");
    options[2]=new VoiceInteractor.PickOptionRequest.Option("Three");
    options[3]=new VoiceInteractor.PickOptionRequest.Option("Four");
    options[4]=new VoiceInteractor.PickOptionRequest.Option("Five");
    VoiceInteractor.PickOptionRequest req=new VoiceInteractor.PickOptionRequest(new VoiceInteractor.Prompt("Need to pick something"),options,null){
      @Override public void onCancel(){
        Log.i(TAG,"Canceled!");
        mLog.append("Canceled pick\n");
      }
      @Override public void onPickOptionResult(      boolean finished,      Option[] selections,      Bundle result){
        Log.i(TAG,"Pick result: finished=" + finished + " selections="+ selections+ " result="+ result);
        StringBuilder sb=new StringBuilder();
        if (finished) {
          sb.append("Pick final result: ");
        }
 else {
          sb.append("Pick intermediate result: ");
        }
        for (int i=0; i < selections.length; i++) {
          if (i >= 1) {
            sb.append(", ");
          }
          sb.append(selections[i].getLabel());
        }
        mLog.append(sb.toString());
        if (finished) {
          getActivity().finish();
        }
      }
    }
;
    mInteractor.submitRequest(req,REQUEST_PICK);
  }
 else   if (v == mJumpOutButton) {
    Log.i(TAG,"Jump out");
    Intent intent=new Intent(Intent.ACTION_MAIN);
    intent.addCategory(Intent.CATEGORY_LAUNCHER);
    intent.setComponent(new ComponentName(this,VoiceInteractionMain.class));
    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    startActivity(intent);
  }
 else   if (v == mCancelButton && mCurrentRequest != null) {
    Log.i(TAG,"Cancel request");
    mCurrentRequest.cancel();
  }
}
