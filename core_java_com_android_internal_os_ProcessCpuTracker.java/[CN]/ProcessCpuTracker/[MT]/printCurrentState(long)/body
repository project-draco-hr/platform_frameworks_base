{
  final SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
  buildWorkingProcs();
  StringWriter sw=new StringWriter();
  PrintWriter pw=new FastPrintWriter(sw,false,1024);
  pw.print("CPU usage from ");
  if (now > mLastSampleTime) {
    pw.print(now - mLastSampleTime);
    pw.print("ms to ");
    pw.print(now - mCurrentSampleTime);
    pw.print("ms ago");
  }
 else {
    pw.print(mLastSampleTime - now);
    pw.print("ms to ");
    pw.print(mCurrentSampleTime - now);
    pw.print("ms later");
  }
  pw.print(" (");
  pw.print(sdf.format(new Date(mLastSampleWallTime)));
  pw.print(" to ");
  pw.print(sdf.format(new Date(mCurrentSampleWallTime)));
  pw.print(")");
  long sampleTime=mCurrentSampleTime - mLastSampleTime;
  long sampleRealTime=mCurrentSampleRealTime - mLastSampleRealTime;
  long percAwake=sampleRealTime > 0 ? ((sampleTime * 100) / sampleRealTime) : 0;
  if (percAwake != 100) {
    pw.print(" with ");
    pw.print(percAwake);
    pw.print("% awake");
  }
  pw.println(":");
  final int totalTime=mRelUserTime + mRelSystemTime + mRelIoWaitTime+ mRelIrqTime+ mRelSoftIrqTime+ mRelIdleTime;
  if (DEBUG)   Slog.i(TAG,"totalTime " + totalTime + " over sample time "+ (mCurrentSampleTime - mLastSampleTime));
  int N=mWorkingProcs.size();
  for (int i=0; i < N; i++) {
    Stats st=mWorkingProcs.get(i);
    printProcessCPU(pw,st.added ? " +" : (st.removed ? " -" : "  "),st.pid,st.name,(int)st.rel_uptime,st.rel_utime,st.rel_stime,0,0,0,st.rel_minfaults,st.rel_majfaults);
    if (!st.removed && st.workingThreads != null) {
      int M=st.workingThreads.size();
      for (int j=0; j < M; j++) {
        Stats tst=st.workingThreads.get(j);
        printProcessCPU(pw,tst.added ? "   +" : (tst.removed ? "   -" : "    "),tst.pid,tst.name,(int)st.rel_uptime,tst.rel_utime,tst.rel_stime,0,0,0,0,0);
      }
    }
  }
  printProcessCPU(pw,"",-1,"TOTAL",totalTime,mRelUserTime,mRelSystemTime,mRelIoWaitTime,mRelIrqTime,mRelSoftIrqTime,0,0);
  pw.flush();
  return sw.toString();
}
