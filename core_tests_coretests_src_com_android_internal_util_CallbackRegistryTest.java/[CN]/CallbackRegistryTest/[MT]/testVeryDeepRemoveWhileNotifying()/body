{
  final Integer[] callbacks=new Integer[deepNotifyCount.length];
  for (int i=0; i < callbacks.length; i++) {
    callbacks[i]=i;
  }
  CallbackRegistry.NotifierCallback<Integer,CallbackRegistryTest,Integer> notifier=new CallbackRegistry.NotifierCallback<Integer,CallbackRegistryTest,Integer>(){
    @Override public void onNotifyCallback(    Integer callback,    CallbackRegistryTest sender,    int arg1,    Integer arg){
      addNotifyCount(callback);
      registry.remove(callback);
      registry.remove(callbacks[callbacks.length - callback - 1]);
      registry.notifyCallbacks(CallbackRegistryTest.this,arg1,null);
    }
  }
;
  registry=new CallbackRegistry<Integer,CallbackRegistryTest,Integer>(notifier);
  for (int i=0; i < callbacks.length; i++) {
    registry.add(callbacks[i]);
  }
  registry.notifyCallbacks(this,0,null);
  for (int i=0; i < deepNotifyCount.length; i++) {
    int expectedCount=Math.min(i + 1,deepNotifyCount.length - i);
    assertEquals(expectedCount,deepNotifyCount[i]);
  }
  ArrayList<Integer> callbackList=registry.copyListeners();
  assertEquals(0,callbackList.size());
}
