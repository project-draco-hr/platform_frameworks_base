{
  final long elapsedNowMillis=SystemClock.elapsedRealtime();
  final Task task=failureToReschedule.getTask();
  final long initialBackoffMillis=task.getInitialBackoffMillis();
  final int backoffAttempt=failureToReschedule.getNumFailures() + 1;
  long newEarliestRuntimeElapsed=elapsedNowMillis;
switch (task.getBackoffPolicy()) {
case Task.BackoffPolicy.LINEAR:
    newEarliestRuntimeElapsed+=initialBackoffMillis * backoffAttempt;
  break;
default :
if (DEBUG) {
  Slog.v(TAG,"Unrecognised back-off policy, defaulting to exponential.");
}
case Task.BackoffPolicy.EXPONENTIAL:
newEarliestRuntimeElapsed+=Math.pow(initialBackoffMillis,backoffAttempt);
break;
}
long newLatestRuntimeElapsed=failureToReschedule.hasIdleConstraint() ? Long.MAX_VALUE : newEarliestRuntimeElapsed + RESCHEDULE_WINDOW_SLOP_MILLIS;
return new TaskStatus(failureToReschedule,newEarliestRuntimeElapsed,newLatestRuntimeElapsed,backoffAttempt);
}
