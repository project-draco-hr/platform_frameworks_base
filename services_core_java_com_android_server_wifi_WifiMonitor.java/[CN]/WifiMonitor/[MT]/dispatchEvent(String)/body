{
  if (!eventStr.startsWith(EVENT_PREFIX_STR)) {
    if (eventStr.startsWith(WPA_EVENT_PREFIX_STR) && 0 < eventStr.indexOf(PASSWORD_MAY_BE_INCORRECT_STR)) {
      mStateMachine.sendMessage(AUTHENTICATION_FAILURE_EVENT);
    }
 else     if (eventStr.startsWith(WPS_SUCCESS_STR)) {
      mStateMachine.sendMessage(WPS_SUCCESS_EVENT);
    }
 else     if (eventStr.startsWith(WPS_FAIL_STR)) {
      handleWpsFailEvent(eventStr);
    }
 else     if (eventStr.startsWith(WPS_OVERLAP_STR)) {
      mStateMachine.sendMessage(WPS_OVERLAP_EVENT);
    }
 else     if (eventStr.startsWith(WPS_TIMEOUT_STR)) {
      mStateMachine.sendMessage(WPS_TIMEOUT_EVENT);
    }
 else     if (eventStr.startsWith(P2P_EVENT_PREFIX_STR)) {
      handleP2pEvents(eventStr);
    }
 else     if (eventStr.startsWith(HOST_AP_EVENT_PREFIX_STR)) {
      handleHostApEvents(eventStr);
    }
 else {
      if (DBG)       Log.w(TAG,"couldn't identify event type - " + eventStr);
    }
    return false;
  }
  String eventName=eventStr.substring(EVENT_PREFIX_LEN_STR);
  int nameEnd=eventName.indexOf(' ');
  if (nameEnd != -1)   eventName=eventName.substring(0,nameEnd);
  if (eventName.length() == 0) {
    if (DBG)     Log.i(TAG,"Received wpa_supplicant event with empty event name");
    return false;
  }
  int event;
  if (eventName.equals(CONNECTED_STR))   event=CONNECTED;
 else   if (eventName.equals(DISCONNECTED_STR))   event=DISCONNECTED;
 else   if (eventName.equals(STATE_CHANGE_STR))   event=STATE_CHANGE;
 else   if (eventName.equals(SCAN_RESULTS_STR))   event=SCAN_RESULTS;
 else   if (eventName.equals(LINK_SPEED_STR))   event=LINK_SPEED;
 else   if (eventName.equals(TERMINATING_STR))   event=TERMINATING;
 else   if (eventName.equals(DRIVER_STATE_STR))   event=DRIVER_STATE;
 else   if (eventName.equals(EAP_FAILURE_STR))   event=EAP_FAILURE;
 else   if (eventName.equals(ASSOC_REJECT_STR))   event=ASSOC_REJECT;
 else   event=UNKNOWN;
  String eventData=eventStr;
  if (event == DRIVER_STATE || event == LINK_SPEED)   eventData=eventData.split(" ")[1];
 else   if (event == STATE_CHANGE || event == EAP_FAILURE) {
    int ind=eventStr.indexOf(" ");
    if (ind != -1) {
      eventData=eventStr.substring(ind + 1);
    }
  }
 else {
    int ind=eventStr.indexOf(" - ");
    if (ind != -1) {
      eventData=eventStr.substring(ind + 3);
    }
  }
  if (event == STATE_CHANGE) {
    handleSupplicantStateChange(eventData);
  }
 else   if (event == DRIVER_STATE) {
    handleDriverEvent(eventData);
  }
 else   if (event == TERMINATING) {
    if (eventData.startsWith(WPA_RECV_ERROR_STR)) {
      if (++sRecvErrors > MAX_RECV_ERRORS) {
        if (DBG) {
          Log.d(TAG,"too many recv errors, closing connection");
        }
      }
 else {
        return false;
      }
    }
    mStateMachine.sendMessage(SUP_DISCONNECTION_EVENT);
    return true;
  }
 else   if (event == EAP_FAILURE) {
    if (eventData.startsWith(EAP_AUTH_FAILURE_STR)) {
      mStateMachine.sendMessage(AUTHENTICATION_FAILURE_EVENT);
    }
  }
 else   if (event == ASSOC_REJECT) {
    mStateMachine.sendMessage(ASSOCIATION_REJECTION_EVENT);
  }
 else {
    handleEvent(event,eventData);
  }
  sRecvErrors=0;
  return false;
}
