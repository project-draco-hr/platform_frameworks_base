{
  final boolean selfTransformation=mHasLocalTransformation;
  Transformation attachedTransformation=(mAttachedWindow != null && mAttachedWindow.mWinAnimator.mHasLocalTransformation) ? mAttachedWindow.mWinAnimator.mTransformation : null;
  final AppWindowAnimator appAnimator=mWin.mAppToken == null ? null : mWin.mAppToken.mAppAnimator;
  Transformation appTransformation=(appAnimator != null && appAnimator.hasTransformation) ? appAnimator.transformation : null;
  if (mWin.mAttrs.type == TYPE_WALLPAPER && mService.mLowerWallpaperTarget == null && mService.mWallpaperTarget != null) {
    if (mService.mWallpaperTarget.mWinAnimator.mHasLocalTransformation && mService.mWallpaperTarget.mWinAnimator.mAnimation != null && !mService.mWallpaperTarget.mWinAnimator.mAnimation.getDetachWallpaper()) {
      attachedTransformation=mService.mWallpaperTarget.mWinAnimator.mTransformation;
      if (WindowManagerService.DEBUG_WALLPAPER && attachedTransformation != null) {
        Slog.v(TAG,"WP target attached xform: " + attachedTransformation);
      }
    }
    final AppWindowAnimator wpAppAnimator=mService.mWallpaperTarget.mAppToken == null ? null : mService.mWallpaperTarget.mAppToken.mAppAnimator;
    if (wpAppAnimator != null && wpAppAnimator.hasTransformation && wpAppAnimator.animation != null && !wpAppAnimator.animation.getDetachWallpaper()) {
      appTransformation=wpAppAnimator.transformation;
      if (WindowManagerService.DEBUG_WALLPAPER && appTransformation != null) {
        Slog.v(TAG,"WP target app xform: " + appTransformation);
      }
    }
  }
  final boolean screenAnimation=mService.mAnimator.mScreenRotationAnimation != null && mService.mAnimator.mScreenRotationAnimation.isAnimating();
  if (selfTransformation || attachedTransformation != null || appTransformation != null || screenAnimation) {
    final Rect frame=mWin.mFrame;
    final float tmpFloats[]=mService.mTmpFloats;
    final Matrix tmpMatrix=mWin.mTmpMatrix;
    if (screenAnimation) {
      final float w=frame.width();
      final float h=frame.height();
      if (w >= 1 && h >= 1) {
        tmpMatrix.setScale(1 + 2 / w,1 + 2 / h,w / 2,h / 2);
      }
 else {
        tmpMatrix.reset();
      }
    }
 else {
      tmpMatrix.reset();
    }
    tmpMatrix.postScale(mWin.mGlobalScale,mWin.mGlobalScale);
    if (selfTransformation) {
      tmpMatrix.postConcat(mTransformation.getMatrix());
    }
    tmpMatrix.postTranslate(frame.left + mWin.mXOffset,frame.top + mWin.mYOffset);
    if (attachedTransformation != null) {
      tmpMatrix.postConcat(attachedTransformation.getMatrix());
    }
    if (appTransformation != null) {
      tmpMatrix.postConcat(appTransformation.getMatrix());
    }
    if (mAnimator.mUniverseBackground != null) {
      tmpMatrix.postConcat(mAnimator.mUniverseBackground.mUniverseTransform.getMatrix());
    }
    if (screenAnimation) {
      tmpMatrix.postConcat(mService.mAnimator.mScreenRotationAnimation.getEnterTransformation().getMatrix());
    }
    mHaveMatrix=true;
    tmpMatrix.getValues(tmpFloats);
    mDsDx=tmpFloats[Matrix.MSCALE_X];
    mDtDx=tmpFloats[Matrix.MSKEW_Y];
    mDsDy=tmpFloats[Matrix.MSKEW_X];
    mDtDy=tmpFloats[Matrix.MSCALE_Y];
    float x=tmpFloats[Matrix.MTRANS_X];
    float y=tmpFloats[Matrix.MTRANS_Y];
    int w=frame.width();
    int h=frame.height();
    mWin.mShownFrame.set(x,y,x + w,y + h);
    mShownAlpha=mAlpha;
    if (!mService.mLimitedAlphaCompositing || (!PixelFormat.formatHasAlpha(mWin.mAttrs.format) || (mWin.isIdentityMatrix(mDsDx,mDtDx,mDsDy,mDtDy) && x == frame.left && y == frame.top))) {
      if (selfTransformation) {
        mShownAlpha*=mTransformation.getAlpha();
      }
      if (attachedTransformation != null) {
        mShownAlpha*=attachedTransformation.getAlpha();
      }
      if (appTransformation != null) {
        mShownAlpha*=appTransformation.getAlpha();
      }
      if (mAnimator.mUniverseBackground != null) {
        mShownAlpha*=mAnimator.mUniverseBackground.mUniverseTransform.getAlpha();
      }
      if (screenAnimation) {
        mShownAlpha*=mService.mAnimator.mScreenRotationAnimation.getEnterTransformation().getAlpha();
      }
    }
 else {
    }
    if ((DEBUG_SURFACE_TRACE || WindowManagerService.localLOGV) && (mShownAlpha == 1.0 || mShownAlpha == 0.0))     Slog.v(TAG,"computeShownFrameLocked: Animating " + this + " mAlpha="+ mAlpha+ " self="+ (selfTransformation ? mTransformation.getAlpha() : "null")+ " attached="+ (attachedTransformation == null ? "null" : attachedTransformation.getAlpha())+ " app="+ (appTransformation == null ? "null" : appTransformation.getAlpha())+ " screen="+ (screenAnimation ? mService.mAnimator.mScreenRotationAnimation.getEnterTransformation().getAlpha() : "null"));
    return;
  }
 else   if (mWin.mIsWallpaper && (mAnimator.mPendingActions & WindowAnimator.WALLPAPER_ACTION_PENDING) != 0) {
    return;
  }
  if (WindowManagerService.localLOGV)   Slog.v(TAG,"computeShownFrameLocked: " + this + " not attached, mAlpha="+ mAlpha);
  if (mAnimator.mUniverseBackground != null && mWin.mAttrs.type != WindowManager.LayoutParams.TYPE_UNIVERSE_BACKGROUND && mWin.mBaseLayer < mAnimator.mAboveUniverseLayer) {
    final Rect frame=mWin.mFrame;
    final float tmpFloats[]=mService.mTmpFloats;
    final Matrix tmpMatrix=mWin.mTmpMatrix;
    tmpMatrix.setScale(mWin.mGlobalScale,mWin.mGlobalScale);
    tmpMatrix.postTranslate(frame.left + mWin.mXOffset,frame.top + mWin.mYOffset);
    tmpMatrix.postConcat(mAnimator.mUniverseBackground.mUniverseTransform.getMatrix());
    tmpMatrix.getValues(tmpFloats);
    mHaveMatrix=true;
    mDsDx=tmpFloats[Matrix.MSCALE_X];
    mDtDx=tmpFloats[Matrix.MSKEW_Y];
    mDsDy=tmpFloats[Matrix.MSKEW_X];
    mDtDy=tmpFloats[Matrix.MSCALE_Y];
    float x=tmpFloats[Matrix.MTRANS_X];
    float y=tmpFloats[Matrix.MTRANS_Y];
    int w=frame.width();
    int h=frame.height();
    mWin.mShownFrame.set(x,y,x + w,y + h);
    mShownAlpha=mAlpha * mAnimator.mUniverseBackground.mUniverseTransform.getAlpha();
  }
 else {
    mWin.mShownFrame.set(mWin.mFrame);
    if (mWin.mXOffset != 0 || mWin.mYOffset != 0) {
      mWin.mShownFrame.offset(mWin.mXOffset,mWin.mYOffset);
    }
    mShownAlpha=mAlpha;
    mHaveMatrix=false;
    mDsDx=mWin.mGlobalScale;
    mDtDx=0;
    mDsDy=0;
    mDtDy=mWin.mGlobalScale;
  }
}
