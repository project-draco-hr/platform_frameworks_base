{
  if (mSurface == null) {
    mReportDestroySurface=false;
    mSurfacePendingDestroy=false;
    if (WindowManagerService.DEBUG_ORIENTATION)     Slog.i(TAG,"createSurface " + this + ": DRAW NOW PENDING");
    mDrawPending=true;
    mCommitDrawPending=false;
    mWin.mReadyToShow=false;
    if (mWin.mAppToken != null) {
      mWin.mAppToken.allDrawn=false;
    }
    mService.makeWindowFreezingScreenIfNeededLocked(mWin);
    int flags=0;
    final WindowManager.LayoutParams attrs=mWin.mAttrs;
    if ((attrs.flags & WindowManager.LayoutParams.FLAG_SECURE) != 0) {
      flags|=Surface.SECURE;
    }
    if (WindowState.DEBUG_VISIBILITY)     Slog.v(TAG,"Creating surface in session " + mSession.mSurfaceSession + " window "+ this+ " w="+ mWin.mCompatFrame.width()+ " h="+ mWin.mCompatFrame.height()+ " format="+ attrs.format+ " flags="+ flags);
    int w=mWin.mCompatFrame.width();
    int h=mWin.mCompatFrame.height();
    if ((attrs.flags & LayoutParams.FLAG_SCALED) != 0) {
      w=mWin.mRequestedWidth;
      h=mWin.mRequestedHeight;
    }
    if (w <= 0)     w=1;
    if (h <= 0)     h=1;
    mSurfaceShown=false;
    mSurfaceLayer=0;
    mSurfaceAlpha=1;
    mSurfaceX=0;
    mSurfaceY=0;
    mSurfaceW=w;
    mSurfaceH=h;
    try {
      final boolean isHwAccelerated=(attrs.flags & WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED) != 0;
      final int format=isHwAccelerated ? PixelFormat.TRANSLUCENT : attrs.format;
      if (!PixelFormat.formatHasAlpha(attrs.format)) {
        flags|=Surface.OPAQUE;
      }
      mSurface=new Surface(mSession.mSurfaceSession,mSession.mPid,attrs.getTitle().toString(),0,w,h,format,flags);
      if (SHOW_TRANSACTIONS || SHOW_SURFACE_ALLOC)       Slog.i(TAG,"  CREATE SURFACE " + mSurface + " IN SESSION "+ mSession.mSurfaceSession+ ": pid="+ mSession.mPid+ " format="+ attrs.format+ " flags=0x"+ Integer.toHexString(flags)+ " / "+ this);
    }
 catch (    Surface.OutOfResourcesException e) {
      Slog.w(TAG,"OutOfResourcesException creating surface");
      mService.reclaimSomeSurfaceMemoryLocked(this,"create",true);
      return null;
    }
catch (    Exception e) {
      Slog.e(TAG,"Exception creating surface",e);
      return null;
    }
    if (WindowManagerService.localLOGV)     Slog.v(TAG,"Got surface: " + mSurface + ", set left="+ mWin.mFrame.left+ " top="+ mWin.mFrame.top+ ", animLayer="+ mAnimLayer);
    if (SHOW_LIGHT_TRANSACTIONS) {
      Slog.i(TAG,">>> OPEN TRANSACTION createSurfaceLocked");
      WindowManagerService.logSurface(mWin,"CREATE pos=(" + mWin.mFrame.left + ","+ mWin.mFrame.top+ ") ("+ mWin.mCompatFrame.width()+ "x"+ mWin.mCompatFrame.height()+ "), layer="+ mAnimLayer+ " HIDE",null);
    }
    Surface.openTransaction();
    try {
      try {
        mSurfaceX=mWin.mFrame.left + mWin.mXOffset;
        mSurfaceY=mWin.mFrame.top + mWin.mYOffset;
        mSurface.setPosition(mSurfaceX,mSurfaceY);
        mSurfaceLayer=mAnimLayer;
        mSurface.setLayer(mAnimLayer);
        mSurfaceShown=false;
        mSurface.hide();
        if ((mWin.mAttrs.flags & WindowManager.LayoutParams.FLAG_DITHER) != 0) {
          if (SHOW_TRANSACTIONS)           WindowManagerService.logSurface(mWin,"DITHER",null);
          mSurface.setFlags(Surface.SURFACE_DITHER,Surface.SURFACE_DITHER);
        }
      }
 catch (      RuntimeException e) {
        Slog.w(TAG,"Error creating surface in " + w,e);
        mService.reclaimSomeSurfaceMemoryLocked(this,"create-init",true);
      }
      mWin.mLastHidden=true;
    }
  finally {
      Surface.closeTransaction();
      if (SHOW_LIGHT_TRANSACTIONS)       Slog.i(TAG,"<<< CLOSE TRANSACTION createSurfaceLocked");
    }
    if (WindowManagerService.localLOGV)     Slog.v(TAG,"Created surface " + this);
  }
  return mSurface;
}
