{
  mContext.enforceCallingOrSelfPermission(DUMP,TAG);
  final HashSet<String> argSet=new HashSet<String>();
  for (  String arg : args) {
    argSet.add(arg);
  }
  final boolean fullHistory=argSet.contains("full");
synchronized (mStatsLock) {
    if (argSet.contains("generate")) {
      generateRandomLocked();
      pw.println("Generated stub stats");
      return;
    }
    if (argSet.contains("poll")) {
      performPollLocked(true,true);
      pw.println("Forced poll");
      return;
    }
    pw.println("Active interfaces:");
    for (    String iface : mActiveIfaces.keySet()) {
      final NetworkIdentitySet ident=mActiveIfaces.get(iface);
      pw.print("  iface=");
      pw.print(iface);
      pw.print(" ident=");
      pw.println(ident.toString());
    }
    pw.println("Known historical stats:");
    for (    NetworkIdentitySet ident : mNetworkStats.keySet()) {
      final NetworkStatsHistory history=mNetworkStats.get(ident);
      pw.print("  ident=");
      pw.println(ident.toString());
      history.dump("  ",pw,fullHistory);
    }
    if (argSet.contains("detail")) {
      ensureUidStatsLoadedLocked();
      final ArrayList<UidStatsKey> keys=Lists.newArrayList();
      keys.addAll(mUidStats.keySet());
      Collections.sort(keys);
      pw.println("Detailed UID stats:");
      for (      UidStatsKey key : keys) {
        pw.print("  ident=");
        pw.print(key.ident.toString());
        pw.print(" uid=");
        pw.print(key.uid);
        pw.print(" set=");
        pw.print(NetworkStats.setToString(key.set));
        pw.print(" tag=");
        pw.println(NetworkStats.tagToString(key.tag));
        final NetworkStatsHistory history=mUidStats.get(key);
        history.dump("    ",pw,fullHistory);
      }
    }
  }
}
