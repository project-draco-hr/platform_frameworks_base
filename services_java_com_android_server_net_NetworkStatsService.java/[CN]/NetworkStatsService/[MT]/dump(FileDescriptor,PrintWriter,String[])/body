{
  mContext.enforceCallingOrSelfPermission(DUMP,TAG);
  final HashSet<String> argSet=new HashSet<String>();
  for (  String arg : args) {
    argSet.add(arg);
  }
synchronized (mStatsLock) {
    if (argSet.contains("generate")) {
      generateRandomLocked();
      pw.println("Generated stub stats");
      return;
    }
    if (argSet.contains("poll")) {
      performPollLocked(true);
      pw.println("Forced poll");
      return;
    }
    pw.println("Active interfaces:");
    for (    String iface : mActiveIface.keySet()) {
      final InterfaceIdentity ident=mActiveIface.get(iface);
      pw.print("  iface=");
      pw.print(iface);
      pw.print(" ident=");
      pw.println(ident.toString());
    }
    pw.println("Known historical stats:");
    for (    InterfaceIdentity ident : mNetworkStats.keySet()) {
      final NetworkStatsHistory stats=mNetworkStats.get(ident);
      pw.print("  ident=");
      pw.println(ident.toString());
      stats.dump("    ",pw);
    }
    if (argSet.contains("detail")) {
      ensureUidStatsLoadedLocked();
      pw.println("Known UID stats:");
      for (int i=0; i < mUidStats.size(); i++) {
        final int uid=mUidStats.keyAt(i);
        final NetworkStatsHistory stats=mUidStats.valueAt(i);
        pw.print("  UID=");
        pw.println(uid);
        stats.dump("    ",pw);
      }
    }
  }
}
