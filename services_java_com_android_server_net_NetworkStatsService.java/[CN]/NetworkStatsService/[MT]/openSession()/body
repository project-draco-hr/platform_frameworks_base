{
  mContext.enforceCallingOrSelfPermission(READ_NETWORK_USAGE_HISTORY,TAG);
  assertBandwidthControlEnabled();
  return new INetworkStatsSession.Stub(){
    private NetworkStatsCollection mUidComplete;
    private NetworkStatsCollection mUidTagComplete;
    private NetworkStatsCollection getUidComplete(){
synchronized (mStatsLock) {
        if (mUidComplete == null) {
          mUidComplete=mUidRecorder.getOrLoadCompleteLocked();
        }
        return mUidComplete;
      }
    }
    private NetworkStatsCollection getUidTagComplete(){
synchronized (mStatsLock) {
        if (mUidTagComplete == null) {
          mUidTagComplete=mUidTagRecorder.getOrLoadCompleteLocked();
        }
        return mUidTagComplete;
      }
    }
    @Override public NetworkStats getSummaryForNetwork(    NetworkTemplate template,    long start,    long end){
      return internalGetSummaryForNetwork(template,start,end);
    }
    @Override public NetworkStatsHistory getHistoryForNetwork(    NetworkTemplate template,    int fields){
      return internalGetHistoryForNetwork(template,fields);
    }
    @Override public NetworkStats getSummaryForAllUid(    NetworkTemplate template,    long start,    long end,    boolean includeTags){
      final NetworkStats stats=getUidComplete().getSummary(template,start,end);
      if (includeTags) {
        final NetworkStats tagStats=getUidTagComplete().getSummary(template,start,end);
        stats.combineAllValues(tagStats);
      }
      return stats;
    }
    @Override public NetworkStatsHistory getHistoryForUid(    NetworkTemplate template,    int uid,    int set,    int tag,    int fields){
      if (tag == TAG_NONE) {
        return getUidComplete().getHistory(template,uid,set,tag,fields);
      }
 else {
        return getUidTagComplete().getHistory(template,uid,set,tag,fields);
      }
    }
    @Override public void close(){
      mUidComplete=null;
      mUidTagComplete=null;
    }
  }
;
}
