{
  ensureUidStatsLoadedLocked();
  final NetworkStats delta=computeStatsDelta(mLastUidSnapshot,uidSnapshot);
  final NetworkStats operationsDelta=computeStatsDelta(mLastOperationsSnapshot,mOperations);
  final long timeStart=currentTime - delta.getElapsedRealtime();
  NetworkStats.Entry entry=null;
  NetworkStats.Entry operationsEntry=null;
  for (int i=0; i < delta.size(); i++) {
    entry=delta.getValues(i,entry);
    final NetworkIdentitySet ident=mActiveIfaces.get(entry.iface);
    if (ident == null) {
      continue;
    }
    final int j=operationsDelta.findIndex(IFACE_ALL,entry.uid,entry.tag);
    if (j != -1) {
      operationsEntry=operationsDelta.getValues(j,operationsEntry);
      entry.operations=operationsEntry.operations;
    }
    final NetworkStatsHistory history=findOrCreateUidStatsLocked(ident,entry.uid,entry.tag);
    history.recordData(timeStart,currentTime,entry);
  }
  final long maxUidHistory=mSettings.getUidMaxHistory();
  final long maxTagHistory=mSettings.getTagMaxHistory();
  for (  LongSparseArray<NetworkStatsHistory> uidStats : mUidStats.values()) {
    for (int i=0; i < uidStats.size(); i++) {
      final long packed=uidStats.keyAt(i);
      final NetworkStatsHistory history=uidStats.valueAt(i);
      if (unpackTag(packed) == TAG_NONE) {
        history.removeBucketsBefore(currentTime - maxUidHistory);
      }
 else {
        history.removeBucketsBefore(currentTime - maxTagHistory);
      }
    }
  }
  mLastUidSnapshot=uidSnapshot;
  mLastOperationsSnapshot=mOperations;
  mOperations=new NetworkStats(0L,10);
}
