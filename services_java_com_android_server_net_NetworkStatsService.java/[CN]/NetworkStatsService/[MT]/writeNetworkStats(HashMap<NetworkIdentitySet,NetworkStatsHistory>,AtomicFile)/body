{
  if (mTime.hasCache()) {
    final long systemCurrentTime=System.currentTimeMillis();
    final long trustedCurrentTime=mTime.currentTimeMillis();
    final long currentTime=Math.min(systemCurrentTime,trustedCurrentTime);
    final long maxHistory=mSettings.getNetworkMaxHistory();
    for (    NetworkStatsHistory history : input.values()) {
      final int beforeSize=history.size();
      history.removeBucketsBefore(currentTime - maxHistory);
      final int afterSize=history.size();
      if (beforeSize > 24 && afterSize < beforeSize / 2) {
        final StringBuilder builder=new StringBuilder();
        builder.append("yikes, dropping more than half of history").append('\n');
        builder.append("systemCurrentTime=").append(systemCurrentTime).append('\n');
        builder.append("trustedCurrentTime=").append(trustedCurrentTime).append('\n');
        builder.append("maxHistory=").append(maxHistory).append('\n');
        builder.append("beforeSize=").append(beforeSize).append('\n');
        builder.append("afterSize=").append(afterSize).append('\n');
        mDropBox.addText(TAG_NETSTATS_ERROR,builder.toString());
      }
    }
  }
  FileOutputStream fos=null;
  try {
    fos=outputFile.startWrite();
    final DataOutputStream out=new DataOutputStream(new BufferedOutputStream(fos));
    out.writeInt(FILE_MAGIC);
    out.writeInt(VERSION_NETWORK_INIT);
    out.writeInt(input.size());
    for (    NetworkIdentitySet ident : input.keySet()) {
      final NetworkStatsHistory history=input.get(ident);
      ident.writeToStream(out);
      history.writeToStream(out);
    }
    out.flush();
    outputFile.finishWrite(fos);
  }
 catch (  IOException e) {
    Log.wtf(TAG,"problem writing stats",e);
    if (fos != null) {
      outputFile.failWrite(fos);
    }
  }
}
