{
  if (!mSystemReady)   return;
  if (LOGV)   Slog.v(TAG,"performPollLocked(flags=0x" + Integer.toHexString(flags) + ")");
  final long startRealtime=SystemClock.elapsedRealtime();
  final boolean persistNetwork=(flags & FLAG_PERSIST_NETWORK) != 0;
  final boolean persistUid=(flags & FLAG_PERSIST_UID) != 0;
  final boolean persistForce=(flags & FLAG_PERSIST_FORCE) != 0;
  final long currentTime=mTime.hasCache() ? mTime.currentTimeMillis() : System.currentTimeMillis();
  try {
    final NetworkStats uidSnapshot=getNetworkStatsUidDetail();
    final NetworkStats devSnapshot=getNetworkStatsSummary();
    mDevRecorder.recordSnapshotLocked(devSnapshot,mActiveIfaces,currentTime);
    mUidRecorder.recordSnapshotLocked(uidSnapshot,mActiveIfaces,currentTime);
    mUidTagRecorder.recordSnapshotLocked(uidSnapshot,mActiveIfaces,currentTime);
  }
 catch (  IllegalStateException e) {
    Log.wtf(TAG,"problem reading network stats",e);
    return;
  }
catch (  RemoteException e) {
    return;
  }
  if (persistForce) {
    mDevRecorder.forcePersistLocked(currentTime);
    mUidRecorder.forcePersistLocked(currentTime);
    mUidTagRecorder.forcePersistLocked(currentTime);
  }
 else {
    if (persistNetwork) {
      mDevRecorder.maybePersistLocked(currentTime);
    }
    if (persistUid) {
      mUidRecorder.maybePersistLocked(currentTime);
      mUidTagRecorder.maybePersistLocked(currentTime);
    }
  }
  if (LOGV) {
    final long duration=SystemClock.elapsedRealtime() - startRealtime;
    Slog.v(TAG,"performPollLocked() took " + duration + "ms");
  }
  if (mSettings.getSampleEnabled()) {
    performSampleLocked();
  }
  final Intent updatedIntent=new Intent(ACTION_NETWORK_STATS_UPDATED);
  updatedIntent.setFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
  mContext.sendBroadcast(updatedIntent,READ_NETWORK_USAGE_HISTORY);
}
