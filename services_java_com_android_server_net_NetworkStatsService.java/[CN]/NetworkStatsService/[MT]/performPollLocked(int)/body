{
  if (LOGV)   Slog.v(TAG,"performPollLocked(flags=0x" + Integer.toHexString(flags) + ")");
  final long startRealtime=SystemClock.elapsedRealtime();
  final boolean persistNetwork=(flags & FLAG_PERSIST_NETWORK) != 0;
  final boolean persistUid=(flags & FLAG_PERSIST_UID) != 0;
  final boolean persistForce=(flags & FLAG_PERSIST_FORCE) != 0;
  if (mTime.getCacheAge() > mSettings.getTimeCacheMaxAge()) {
    mTime.forceRefresh();
  }
  final long currentTime=mTime.hasCache() ? mTime.currentTimeMillis() : System.currentTimeMillis();
  final long threshold=mSettings.getPersistThreshold();
  final NetworkStats uidSnapshot;
  final NetworkStats networkXtSnapshot;
  final NetworkStats networkDevSnapshot;
  try {
    final NetworkStats tetherSnapshot=getNetworkStatsTethering();
    uidSnapshot=mNetworkManager.getNetworkStatsUidDetail(UID_ALL);
    uidSnapshot.combineAllValues(tetherSnapshot);
    performUidPollLocked(uidSnapshot,currentTime);
    networkDevSnapshot=mNetworkManager.getNetworkStatsSummary();
    performNetworkDevPollLocked(networkDevSnapshot,currentTime);
    networkXtSnapshot=computeNetworkXtSnapshotFromUid(uidSnapshot);
    performNetworkXtPollLocked(networkXtSnapshot,currentTime);
  }
 catch (  IllegalStateException e) {
    Log.wtf(TAG,"problem reading network stats",e);
    return;
  }
catch (  RemoteException e) {
    return;
  }
  final long persistNetworkDevDelta=computeStatsDelta(mLastPersistNetworkDevSnapshot,networkDevSnapshot,true,"devp").getTotalBytes();
  final long persistNetworkXtDelta=computeStatsDelta(mLastPersistNetworkXtSnapshot,networkXtSnapshot,true,"xtp").getTotalBytes();
  final boolean networkOverThreshold=persistNetworkDevDelta > threshold || persistNetworkXtDelta > threshold;
  if (persistForce || (persistNetwork && networkOverThreshold)) {
    writeNetworkDevStatsLocked();
    writeNetworkXtStatsLocked();
    mLastPersistNetworkDevSnapshot=networkDevSnapshot;
    mLastPersistNetworkXtSnapshot=networkXtSnapshot;
  }
  final long persistUidDelta=computeStatsDelta(mLastPersistUidSnapshot,uidSnapshot,true,"uidp").getTotalBytes();
  if (persistForce || (persistUid && persistUidDelta > threshold)) {
    writeUidStatsLocked();
    mLastPersistUidSnapshot=uidSnapshot;
  }
  if (LOGV) {
    final long duration=SystemClock.elapsedRealtime() - startRealtime;
    Slog.v(TAG,"performPollLocked() took " + duration + "ms");
  }
  if (ENABLE_SAMPLE_AFTER_POLL) {
    performSample();
  }
  final Intent updatedIntent=new Intent(ACTION_NETWORK_STATS_UPDATED);
  updatedIntent.setFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
  mContext.sendBroadcast(updatedIntent,READ_NETWORK_USAGE_HISTORY);
}
