{
  if (LOGV)   Slog.v(TAG,"readUidStatsLocked()");
  mUidStats.clear();
  FileInputStream fis=null;
  try {
    fis=mUidFile.openRead();
    final DataInputStream in=new DataInputStream(fis);
    final int magic=in.readInt();
    if (magic != FILE_MAGIC) {
      throw new ProtocolException("unexpected magic: " + magic);
    }
    final int version=in.readInt();
switch (version) {
case VERSION_UID_INIT:
{
        break;
      }
case VERSION_UID_WITH_IDENT:
{
      final int ifaceSize=in.readInt();
      for (int i=0; i < ifaceSize; i++) {
        final NetworkIdentitySet ident=new NetworkIdentitySet(in);
        final int uidSize=in.readInt();
        final SparseArray<NetworkStatsHistory> uidStats=new SparseArray<NetworkStatsHistory>(uidSize);
        for (int j=0; j < uidSize; j++) {
          final int uid=in.readInt();
          final NetworkStatsHistory history=new NetworkStatsHistory(in);
          uidStats.put(uid,history);
        }
        mUidStats.put(ident,uidStats);
      }
      break;
    }
default :
{
    throw new ProtocolException("unexpected version: " + version);
  }
}
}
 catch (FileNotFoundException e) {
}
catch (IOException e) {
Slog.e(TAG,"problem reading uid stats",e);
}
 finally {
IoUtils.closeQuietly(fis);
}
}
