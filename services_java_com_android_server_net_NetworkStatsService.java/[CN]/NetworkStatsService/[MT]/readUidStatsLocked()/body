{
  if (LOGV)   Slog.v(TAG,"readUidStatsLocked()");
  mUidStats.clear();
  DataInputStream in=null;
  try {
    in=new DataInputStream(new BufferedInputStream(mUidFile.openRead()));
    final int magic=in.readInt();
    if (magic != FILE_MAGIC) {
      throw new ProtocolException("unexpected magic: " + magic);
    }
    final int version=in.readInt();
switch (version) {
case VERSION_UID_INIT:
{
        break;
      }
case VERSION_UID_WITH_IDENT:
{
      break;
    }
case VERSION_UID_WITH_TAG:
{
    final int ifaceSize=in.readInt();
    for (int i=0; i < ifaceSize; i++) {
      final NetworkIdentitySet ident=new NetworkIdentitySet(in);
      final int childSize=in.readInt();
      final LongSparseArray<NetworkStatsHistory> uidStats=new LongSparseArray<NetworkStatsHistory>(childSize);
      for (int j=0; j < childSize; j++) {
        final int uid=in.readInt();
        final int tag=in.readInt();
        final long packed=packUidAndTag(uid,tag);
        final NetworkStatsHistory history=new NetworkStatsHistory(in);
        uidStats.put(packed,history);
      }
      mUidStats.put(ident,uidStats);
    }
    break;
  }
default :
{
  throw new ProtocolException("unexpected version: " + version);
}
}
}
 catch (FileNotFoundException e) {
}
catch (IOException e) {
Slog.e(TAG,"problem reading uid stats",e);
}
 finally {
IoUtils.closeQuietly(in);
}
}
