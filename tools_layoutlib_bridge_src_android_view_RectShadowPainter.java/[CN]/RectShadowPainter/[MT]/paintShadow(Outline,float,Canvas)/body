{
  float shadowSize=elevationToShadow(elevation);
  int saved=modifyCanvas(canvas,shadowSize);
  if (saved == -1) {
    return;
  }
  try {
    Paint cornerPaint=new Paint(Paint.ANTI_ALIAS_FLAG | Paint.DITHER_FLAG);
    cornerPaint.setStyle(Style.FILL);
    Paint edgePaint=new Paint(cornerPaint);
    edgePaint.setAntiAlias(false);
    Rect outline=viewOutline.mRect;
    float radius=viewOutline.mRadius;
    float outerArcRadius=radius + shadowSize;
    int[] colors={START_COLOR,START_COLOR,END_COLOR};
    cornerPaint.setShader(new RadialGradient(0,0,outerArcRadius,colors,new float[]{0f,radius / outerArcRadius,1f},TileMode.CLAMP));
    edgePaint.setShader(new LinearGradient(0,0,-shadowSize,0,START_COLOR,END_COLOR,TileMode.CLAMP));
    Path path=new Path();
    path.setFillType(FillType.EVEN_ODD);
    RectF shadowRect=new RectF(outline);
    shadowRect.inset(-shadowSize,-shadowSize);
    RectF inset=new RectF(outline);
    inset.inset(radius,radius);
    RectF edgeShadowRect=new RectF();
    edgeShadowRect.set(-shadowSize,0f,0f,inset.height());
    sideShadow(canvas,edgePaint,edgeShadowRect,outline.left,inset.top,0);
    sideShadow(canvas,edgePaint,edgeShadowRect,outline.right,inset.bottom,2);
    edgeShadowRect.set(-shadowSize,0,0,inset.width());
    sideShadow(canvas,edgePaint,edgeShadowRect,inset.right,outline.top,1);
    edgeShadowRect.set(-shadowSize,0,shadowSize / 2f,inset.width());
    edgePaint.setShader(new LinearGradient(edgeShadowRect.right,0,edgeShadowRect.left,0,colors,new float[]{0f,1 / 3f,1f},TileMode.CLAMP));
    sideShadow(canvas,edgePaint,edgeShadowRect,inset.left,outline.bottom,3);
    drawCorner(canvas,cornerPaint,path,inset.right,inset.bottom,outerArcRadius,0);
    drawCorner(canvas,cornerPaint,path,inset.left,inset.bottom,outerArcRadius,1);
    drawCorner(canvas,cornerPaint,path,inset.left,inset.top,outerArcRadius,2);
    drawCorner(canvas,cornerPaint,path,inset.right,inset.top,outerArcRadius,3);
  }
  finally {
    canvas.restoreToCount(saved);
  }
}
