{
synchronized (mRCStack) {
    final Iterator<DisplayInfoForServer> displayIterator=mRcDisplays.iterator();
    boolean artworkSizeUpdate=false;
    while (displayIterator.hasNext() && !artworkSizeUpdate) {
      final DisplayInfoForServer di=displayIterator.next();
      if (di.mRcDisplay.asBinder().equals(rcd.asBinder())) {
        if ((di.mArtworkExpectedWidth != w) || (di.mArtworkExpectedHeight != h)) {
          di.mArtworkExpectedWidth=w;
          di.mArtworkExpectedHeight=h;
          artworkSizeUpdate=true;
        }
      }
    }
    if (artworkSizeUpdate) {
      final Iterator<RemoteControlStackEntry> stackIterator=mRCStack.iterator();
      while (stackIterator.hasNext()) {
        final RemoteControlStackEntry rcse=stackIterator.next();
        if (rcse.mRcClient != null) {
          try {
            rcse.mRcClient.setBitmapSizeForDisplay(rcd,w,h);
          }
 catch (          RemoteException e) {
            Log.e(TAG,"Error setting bitmap size for RCD on RCC: ",e);
          }
        }
      }
    }
  }
}
