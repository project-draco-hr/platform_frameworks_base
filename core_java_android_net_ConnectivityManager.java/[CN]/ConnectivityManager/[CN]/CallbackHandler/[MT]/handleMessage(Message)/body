{
  Log.d(TAG,"CM callback handler got msg " + message.what);
switch (message.what) {
case CALLBACK_PRECHECK:
{
      NetworkRequest request=getNetworkRequest(message);
      NetworkCallbackListener callbacks=getCallbacks(request);
      if (callbacks != null) {
        callbacks.onPreCheck(request,getNetwork(message));
      }
 else {
        Log.e(TAG,"callback not found for PRECHECK message");
      }
      break;
    }
case CALLBACK_AVAILABLE:
{
    NetworkRequest request=getNetworkRequest(message);
    NetworkCallbackListener callbacks=getCallbacks(request);
    if (callbacks != null) {
      callbacks.onAvailable(request,getNetwork(message));
    }
 else {
      Log.e(TAG,"callback not found for AVAILABLE message");
    }
    break;
  }
case CALLBACK_LOSING:
{
  NetworkRequest request=getNetworkRequest(message);
  NetworkCallbackListener callbacks=getCallbacks(request);
  if (callbacks != null) {
    callbacks.onLosing(request,getNetwork(message),message.arg1);
  }
 else {
    Log.e(TAG,"callback not found for LOSING message");
  }
  break;
}
case CALLBACK_LOST:
{
NetworkRequest request=getNetworkRequest(message);
NetworkCallbackListener callbacks=getCallbacks(request);
if (callbacks != null) {
  callbacks.onLost(request,getNetwork(message));
}
 else {
  Log.e(TAG,"callback not found for LOST message");
}
break;
}
case CALLBACK_UNAVAIL:
{
NetworkRequest req=(NetworkRequest)message.obj;
NetworkCallbackListener callbacks=null;
synchronized (mCallbackMap) {
callbacks=mCallbackMap.get(req);
}
if (callbacks != null) {
callbacks.onUnavailable(req);
}
 else {
Log.e(TAG,"callback not found for UNAVAIL message");
}
break;
}
case CALLBACK_CAP_CHANGED:
{
NetworkRequest request=getNetworkRequest(message);
NetworkCallbackListener callbacks=getCallbacks(request);
if (callbacks != null) {
Network network=getNetwork(message);
NetworkCapabilities cap=mCm.getNetworkCapabilities(network);
callbacks.onNetworkCapabilitiesChanged(request,network,cap);
}
 else {
Log.e(TAG,"callback not found for CHANGED message");
}
break;
}
case CALLBACK_IP_CHANGED:
{
NetworkRequest request=getNetworkRequest(message);
NetworkCallbackListener callbacks=getCallbacks(request);
if (callbacks != null) {
Network network=getNetwork(message);
LinkProperties lp=mCm.getLinkProperties(network);
callbacks.onLinkPropertiesChanged(request,network,lp);
}
 else {
Log.e(TAG,"callback not found for CHANGED message");
}
break;
}
case CALLBACK_RELEASED:
{
NetworkRequest req=(NetworkRequest)message.obj;
NetworkCallbackListener callbacks=null;
synchronized (mCallbackMap) {
callbacks=mCallbackMap.remove(req);
}
if (callbacks != null) {
callbacks.onReleased(req);
}
 else {
Log.e(TAG,"callback not found for CANCELED message");
}
synchronized (mRefCount) {
if (mRefCount.decrementAndGet() == 0) {
getLooper().quit();
}
}
break;
}
case CALLBACK_EXIT:
{
Log.d(TAG,"Listener quiting");
getLooper().quit();
break;
}
}
}
