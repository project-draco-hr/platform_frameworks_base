{
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
  setContentView(R.layout.overlaydemo);
  setProgressBarIndeterminateVisibility(true);
  mLibrary=new GestureLibrary(GESTURE_FILE_NAME);
  mLibrary.load();
  mContactList=(ListView)this.findViewById(R.id.list);
  registerForContextMenu(mContactList);
  mContactList.setTextFilterEnabled(true);
  mContactList.setVerticalScrollBarEnabled(true);
  mContactList.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View v,    int position,    long id){
      if (!mGestureProcessor.isGesturing()) {
        Intent intent=new Intent(Intent.ACTION_VIEW,ContentUris.withAppendedId(People.CONTENT_URI,id));
        startActivity(intent);
      }
    }
  }
);
  ContentResolver resolver=getContentResolver();
  Cursor cursor=resolver.query(People.CONTENT_URI,CONTACTS_PROJECTION,null,null,SORT_ORDER);
  ArrayList<ContactItem> list=new ArrayList<ContactItem>();
  while (cursor.moveToNext()) {
    list.add(new ContactItem(cursor.getLong(0),cursor.getString(1)));
  }
  mContactAdapter=new ContactAdapter(this,list);
  mContactList.setAdapter(mContactAdapter);
  setProgressBarIndeterminateVisibility(false);
  mOverlay=new GestureOverlay(this);
  mGestureProcessor=new GestureProcessor(mContactList);
  mGestureProcessor.addGestureActionListener(new GestureActionListener(){
    public void onGesturePerformed(    GestureOverlay overlay,    Gesture gesture){
      ArrayList<Prediction> predictions=mLibrary.recognize(gesture);
      if (!predictions.isEmpty()) {
        int index=mContactAdapter.search(predictions.get(0).gestureName);
        if (index != -1) {
          mContactList.setSelection(index);
        }
      }
    }
  }
);
  mOverlay.addGestureListener(mGestureProcessor);
  ViewGroup.LayoutParams params=new ViewGroup.LayoutParams(ViewGroup.LayoutParams.FILL_PARENT,ViewGroup.LayoutParams.FILL_PARENT);
  this.addContentView(mOverlay,params);
}
