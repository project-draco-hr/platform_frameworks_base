{
  View startView=(startValues != null) ? startValues.view : null;
  View endView=(endValues != null) ? endValues.view : null;
  View overlayView=null;
  View viewToKeep=null;
  if (endView == null || endView.getParent() == null) {
    if (endView != null) {
      overlayView=endView;
    }
 else     if (startView != null) {
      if (startView.getParent() == null) {
        overlayView=startView;
      }
 else       if (startView.getParent() instanceof View && startView.getParent().getParent() == null) {
        View startParent=(View)startView.getParent();
        int id=startParent.getId();
        if (id != View.NO_ID && sceneRoot.findViewById(id) != null && mCanRemoveViews) {
          overlayView=startView;
        }
      }
    }
  }
 else {
    if (endVisibility == View.INVISIBLE) {
      viewToKeep=endView;
    }
 else {
      if (startView == endView) {
        viewToKeep=endView;
      }
 else {
        overlayView=startView;
      }
    }
  }
  final int finalVisibility=endVisibility;
  final ViewGroup finalSceneRoot=sceneRoot;
  if (overlayView != null) {
    int[] screenLoc=(int[])startValues.values.get(PROPNAME_SCREEN_LOCATION);
    int screenX=screenLoc[0];
    int screenY=screenLoc[1];
    int[] loc=new int[2];
    sceneRoot.getLocationOnScreen(loc);
    overlayView.offsetLeftAndRight((screenX - loc[0]) - overlayView.getLeft());
    overlayView.offsetTopAndBottom((screenY - loc[1]) - overlayView.getTop());
    sceneRoot.getOverlay().add(overlayView);
    Animator animator=onDisappear(sceneRoot,overlayView,startValues,endValues);
    if (animator == null) {
      sceneRoot.getOverlay().remove(overlayView);
    }
 else {
      final View finalOverlayView=overlayView;
      animator.addListener(new AnimatorListenerAdapter(){
        @Override public void onAnimationEnd(        Animator animation){
          finalSceneRoot.getOverlay().remove(finalOverlayView);
        }
        @Override public void onAnimationPause(        Animator animation){
          finalSceneRoot.getOverlay().remove(finalOverlayView);
        }
        @Override public void onAnimationResume(        Animator animation){
          finalSceneRoot.getOverlay().add(finalOverlayView);
        }
      }
);
    }
    return animator;
  }
  if (viewToKeep != null) {
    viewToKeep.setVisibility(View.VISIBLE);
    Animator animator=onDisappear(sceneRoot,viewToKeep,startValues,endValues);
    if (animator == null) {
      viewToKeep.setVisibility(finalVisibility);
    }
 else {
      final View finalViewToKeep=viewToKeep;
      animator.addListener(new AnimatorListenerAdapter(){
        boolean mCanceled=false;
        @Override public void onAnimationPause(        Animator animation){
          if (!mCanceled) {
            finalViewToKeep.setVisibility(finalVisibility);
          }
        }
        @Override public void onAnimationResume(        Animator animation){
          if (!mCanceled) {
            finalViewToKeep.setVisibility(View.VISIBLE);
          }
        }
        @Override public void onAnimationCancel(        Animator animation){
          mCanceled=true;
        }
        @Override public void onAnimationEnd(        Animator animation){
          if (!mCanceled) {
            finalViewToKeep.setVisibility(finalVisibility);
          }
        }
      }
);
    }
    return animator;
  }
  return null;
}
