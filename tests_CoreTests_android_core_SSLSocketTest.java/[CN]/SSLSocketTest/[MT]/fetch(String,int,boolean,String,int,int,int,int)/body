{
  InetSocketAddress address=new InetSocketAddress(host,port);
  for (int i=0; i < outerLoop; i++) {
    Socket socket=secure ? clientFactory.createSocket() : new Socket();
    if (timeout >= 0) {
      socket.setKeepAlive(true);
      socket.setSoTimeout(timeout * 1000);
    }
    socket.connect(address);
    OutputStream output=socket.getOutputStream();
    PrintWriter writer=new PrintWriter(output);
    try {
      DataInputStream input=new DataInputStream(socket.getInputStream());
      try {
        for (int j=0; j < innerLoop; j++) {
          android.util.Log.d("SSLSocketTest","GET https://" + host + path+ " HTTP/1.1");
          writer.println("GET https://" + host + path+ " HTTP/1.1\r");
          writer.println("Host: " + host + "\r");
          writer.println("Connection: " + (j == innerLoop - 1 ? "Close" : "Keep-Alive") + "\r");
          writer.println("\r");
          writer.flush();
          int length=-1;
          boolean chunked=false;
          String line=input.readLine();
          if (line == null) {
            throw new IOException("No response from server");
          }
          while (line != null && line.length() != 0) {
            int dot=line.indexOf(':');
            if (dot != -1) {
              String key=line.substring(0,dot).trim();
              String value=line.substring(dot + 1).trim();
              if ("Content-Length".equalsIgnoreCase(key)) {
                length=Integer.valueOf(value);
              }
 else               if ("Transfer-Encoding".equalsIgnoreCase(key)) {
                chunked="Chunked".equalsIgnoreCase(value);
              }
            }
            line=input.readLine();
          }
          assertTrue("Need either content length or chunked encoding",length != -1 || chunked);
          if (chunked) {
            length=Integer.parseInt(input.readLine(),16);
            while (length != 0) {
              byte[] buffer=new byte[length];
              input.readFully(buffer);
              input.readLine();
              length=Integer.parseInt(input.readLine(),16);
            }
            input.readLine();
          }
 else {
            byte[] buffer=new byte[length];
            input.readFully(buffer);
          }
          try {
            Thread.sleep(delay * 1000);
          }
 catch (          InterruptedException ex) {
          }
        }
      }
  finally {
        input.close();
      }
    }
  finally {
      writer.close();
    }
    socket.close();
  }
}
