{
  super.onFinishInflate();
  final Context context=getContext();
  mAirplane=new AirplaneModeController(context,(CompoundButton)findViewById(R.id.airplane_checkbox));
  findViewById(R.id.network).setOnClickListener(this);
  mRotationLockContainer=findViewById(R.id.rotate);
  mRotationLockSeparator=findViewById(R.id.rotate_separator);
  mRotationController=new RotationLockController(context);
  mRotationController.addRotationLockControllerCallback(new RotationLockController.RotationLockControllerCallback(){
    @Override public void onRotationLockStateChanged(    boolean locked,    boolean visible){
      mRotationLockContainer.setVisibility(visible ? View.VISIBLE : View.GONE);
      mRotationLockSeparator.setVisibility(visible ? View.VISIBLE : View.GONE);
    }
  }
);
  CompoundButton rotateCheckbox=(CompoundButton)findViewById(R.id.rotate_checkbox);
  rotateCheckbox.setChecked(!mRotationController.isRotationLocked());
  rotateCheckbox.setVisibility(mRotationController.isRotationLockAffordanceVisible() ? View.VISIBLE : View.GONE);
  rotateCheckbox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){
      mRotationController.setRotationLocked(!buttonView.isChecked());
    }
  }
);
  mBrightness=new BrightnessController(context,(ImageView)findViewById(R.id.brightness_icon),(ToggleSlider)findViewById(R.id.brightness));
  mDoNotDisturb=new DoNotDisturbController(context,(CompoundButton)findViewById(R.id.do_not_disturb_checkbox));
  findViewById(R.id.settings).setOnClickListener(this);
}
