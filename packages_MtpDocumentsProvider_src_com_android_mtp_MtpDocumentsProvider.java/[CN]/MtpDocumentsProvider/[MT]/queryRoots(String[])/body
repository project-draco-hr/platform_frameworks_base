{
  if (projection == null) {
    projection=MtpDocumentsProvider.DEFAULT_ROOT_PROJECTION;
  }
  final MatrixCursor cursor=new MatrixCursor(projection);
  for (  final int deviceId : mMtpManager.getOpenedDeviceIds()) {
    try {
      final MtpRoot[] roots=mMtpManager.getRoots(deviceId);
      for (      final MtpRoot root : roots) {
        final Identifier rootIdentifier=new Identifier(deviceId,root.mStorageId);
        final MatrixCursor.RowBuilder builder=cursor.newRow();
        builder.add(Root.COLUMN_ROOT_ID,rootIdentifier.toRootId());
        builder.add(Root.COLUMN_FLAGS,Root.FLAG_SUPPORTS_IS_CHILD);
        builder.add(Root.COLUMN_TITLE,root.mDescription);
        builder.add(Root.COLUMN_DOCUMENT_ID,rootIdentifier.toDocumentId());
        builder.add(Root.COLUMN_AVAILABLE_BYTES,root.mFreeSpace);
      }
    }
 catch (    IOException error) {
      Log.d(TAG,error.getMessage());
    }
  }
  cursor.setNotificationUri(mResolver,DocumentsContract.buildRootsUri(MtpDocumentsProvider.AUTHORITY));
  return cursor;
}
