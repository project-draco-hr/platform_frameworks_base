{
  if (projection == null) {
    projection=MtpDocumentsProvider.DEFAULT_DOCUMENT_PROJECTION;
  }
  final Identifier parentIdentifier=Identifier.createFromDocumentId(parentDocumentId);
  int parentHandle=parentIdentifier.mObjectHandle;
  if (parentHandle == MtpDocument.DUMMY_HANDLE_FOR_ROOT) {
    parentHandle=MtpManager.OBJECT_HANDLE_ROOT_CHILDREN;
  }
  try {
    final MatrixCursor cursor=new MatrixCursor(projection);
    final Identifier rootIdentifier=new Identifier(parentIdentifier.mDeviceId,parentIdentifier.mStorageId);
    final int[] objectHandles=mMtpManager.getObjectHandles(parentIdentifier.mDeviceId,parentIdentifier.mStorageId,parentHandle);
    for (int i=0; i < objectHandles.length; i++) {
      try {
        final MtpDocument document=mMtpManager.getDocument(parentIdentifier.mDeviceId,objectHandles[i]);
        document.addToCursor(rootIdentifier,cursor.newRow());
      }
 catch (      IOException error) {
        cursor.close();
        throw new FileNotFoundException(error.getMessage());
      }
    }
    return cursor;
  }
 catch (  IOException exception) {
    throw new FileNotFoundException(exception.getMessage());
  }
}
