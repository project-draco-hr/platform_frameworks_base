{
  if (value.string == null) {
    throw new UnsupportedOperationException("Can't convert to ComplexColor: type=0x" + value.type);
  }
  final String file=value.string.toString();
  if (TRACE_FOR_MISS_PRELOAD) {
    if ((id >>> 24) == 0x1) {
      final String name=getResourceName(id);
      if (name != null) {
        Log.d(TAG,"Loading framework ComplexColor #" + Integer.toHexString(id) + ": "+ name+ " at "+ file);
      }
    }
  }
  if (DEBUG_LOAD) {
    Log.v(TAG,"Loading ComplexColor for cookie " + value.assetCookie + ": "+ file);
  }
  ComplexColor complexColor=null;
  Trace.traceBegin(Trace.TRACE_TAG_RESOURCES,file);
  if (file.endsWith(".xml")) {
    try {
      final XmlResourceParser parser=loadXmlResourceParser(file,id,value.assetCookie,"ComplexColor");
      final AttributeSet attrs=Xml.asAttributeSet(parser);
      int type;
      while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
      }
      if (type != XmlPullParser.START_TAG) {
        throw new XmlPullParserException("No start tag found");
      }
      final String name=parser.getName();
      if (name.equals("gradient")) {
        complexColor=GradientColor.createFromXmlInner(this,parser,attrs,theme);
      }
 else       if (name.equals("selector")) {
        complexColor=ColorStateList.createFromXmlInner(this,parser,attrs,theme);
      }
      parser.close();
    }
 catch (    Exception e) {
      Trace.traceEnd(Trace.TRACE_TAG_RESOURCES);
      final NotFoundException rnf=new NotFoundException("File " + file + " from ComplexColor resource ID #0x"+ Integer.toHexString(id));
      rnf.initCause(e);
      throw rnf;
    }
  }
 else {
    Trace.traceEnd(Trace.TRACE_TAG_RESOURCES);
    throw new NotFoundException("File " + file + " from drawable resource ID #0x"+ Integer.toHexString(id)+ ": .xml extension required");
  }
  Trace.traceEnd(Trace.TRACE_TAG_RESOURCES);
  return complexColor;
}
