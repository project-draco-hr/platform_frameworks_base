{
synchronized (mTmpValue) {
    int configChanges=0xfffffff;
    if (config != null) {
      configChanges=mConfiguration.updateFrom(config);
    }
    if (mConfiguration.locale == null) {
      mConfiguration.locale=Locale.getDefault();
    }
    if (metrics != null) {
      mMetrics.setTo(metrics);
      mMetrics.updateMetrics(mCompatibilityInfo,mConfiguration.orientation,mConfiguration.screenLayout);
    }
    mMetrics.scaledDensity=mMetrics.density * mConfiguration.fontScale;
    String locale=null;
    if (mConfiguration.locale != null) {
      locale=mConfiguration.locale.getLanguage();
      if (mConfiguration.locale.getCountry() != null) {
        locale+="-" + mConfiguration.locale.getCountry();
      }
    }
    int width, height;
    if (mMetrics.widthPixels >= mMetrics.heightPixels) {
      width=mMetrics.widthPixels;
      height=mMetrics.heightPixels;
    }
 else {
      width=mMetrics.heightPixels;
      height=mMetrics.widthPixels;
    }
    int keyboardHidden=mConfiguration.keyboardHidden;
    if (keyboardHidden == Configuration.HARDKEYBOARDHIDDEN_NO && mConfiguration.hardKeyboardHidden == Configuration.HARDKEYBOARDHIDDEN_YES) {
      keyboardHidden=Configuration.KEYBOARDHIDDEN_SOFT;
    }
    mAssets.setConfiguration(mConfiguration.mcc,mConfiguration.mnc,locale,mConfiguration.orientation,mConfiguration.touchscreen,(int)(mMetrics.density * 160),mConfiguration.keyboard,keyboardHidden,mConfiguration.navigation,width,height,mConfiguration.screenLayout,mConfiguration.uiMode,sSdkVersion);
    drawableCacheClear(mDrawableCache,configChanges);
    drawableCacheClear(mColorDrawableCache,configChanges);
    mColorStateListCache.clear();
    flushLayoutCache();
  }
synchronized (mSync) {
    if (mPluralRule != null) {
      mPluralRule=PluralRules.ruleForLocale(config.locale);
    }
  }
}
