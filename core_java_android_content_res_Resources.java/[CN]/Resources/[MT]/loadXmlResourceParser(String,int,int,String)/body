{
  if (id != 0) {
    try {
      final String[] cachedXmlBlockFiles=mCachedXmlBlockFiles;
      final XmlBlock[] cachedXmlBlocks=mCachedXmlBlocks;
synchronized (cachedXmlBlockFiles) {
        final int num=cachedXmlBlockFiles.length;
        for (int i=0; i < num; i++) {
          if (cachedXmlBlockFiles[i] != null && cachedXmlBlockFiles[i].equals(file)) {
            return cachedXmlBlocks[i].newParser();
          }
        }
        final XmlBlock block=mAssets.openXmlBlockAsset(assetCookie,file);
        if (block != null) {
          final int pos=(mLastCachedXmlBlockIndex + 1) % num;
          mLastCachedXmlBlockIndex=pos;
          final XmlBlock oldBlock=cachedXmlBlocks[pos];
          if (oldBlock != null) {
            oldBlock.close();
          }
          cachedXmlBlockFiles[pos]=file;
          cachedXmlBlocks[pos]=block;
          return block.newParser();
        }
      }
    }
 catch (    Exception e) {
      final NotFoundException rnf=new NotFoundException("File " + file + " from xml type "+ type+ " resource ID #0x"+ Integer.toHexString(id));
      rnf.initCause(e);
      throw rnf;
    }
  }
  throw new NotFoundException("File " + file + " from xml type "+ type+ " resource ID #0x"+ Integer.toHexString(id));
}
