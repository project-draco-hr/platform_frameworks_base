{
  if (TRACE_FOR_PRELOAD) {
    if ((id >>> 24) == 0x1) {
      final String name=getResourceName(id);
      if (name != null)       android.util.Log.d("PreloadDrawable",name);
    }
  }
  boolean isColorDrawable=false;
  if (value.type >= TypedValue.TYPE_FIRST_COLOR_INT && value.type <= TypedValue.TYPE_LAST_COLOR_INT) {
    isColorDrawable=true;
  }
  final long key=isColorDrawable ? value.data : (((long)value.assetCookie) << 32) | value.data;
  Drawable dr=getCachedDrawable(isColorDrawable ? mColorDrawableCache : mDrawableCache,key);
  if (dr != null) {
    return dr;
  }
  Drawable.ConstantState cs=isColorDrawable ? sPreloadedColorDrawables.get(key) : (sPreloadedDensity == mConfiguration.densityDpi ? sPreloadedDrawables.get(key) : null);
  if (cs != null) {
    dr=cs.newDrawable(this);
  }
 else {
    if (isColorDrawable) {
      dr=new ColorDrawable(value.data);
    }
    if (dr == null) {
      if (value.string == null) {
        throw new NotFoundException("Resource is not a Drawable (color or path): " + value);
      }
      String file=value.string.toString();
      if (TRACE_FOR_MISS_PRELOAD) {
        if ((id >>> 24) == 0x1) {
          final String name=getResourceName(id);
          if (name != null)           android.util.Log.d(TAG,"Loading framework drawable #" + Integer.toHexString(id) + ": "+ name+ " at "+ file);
        }
      }
      if (DEBUG_LOAD)       Log.v(TAG,"Loading drawable for cookie " + value.assetCookie + ": "+ file);
      if (file.endsWith(".xml")) {
        Trace.traceBegin(Trace.TRACE_TAG_RESOURCES,file);
        try {
          XmlResourceParser rp=loadXmlResourceParser(file,id,value.assetCookie,"drawable");
          dr=Drawable.createFromXml(this,rp);
          rp.close();
        }
 catch (        Exception e) {
          Trace.traceEnd(Trace.TRACE_TAG_RESOURCES);
          NotFoundException rnf=new NotFoundException("File " + file + " from drawable resource ID #0x"+ Integer.toHexString(id));
          rnf.initCause(e);
          throw rnf;
        }
        Trace.traceEnd(Trace.TRACE_TAG_RESOURCES);
      }
 else {
        Trace.traceBegin(Trace.TRACE_TAG_RESOURCES,file);
        try {
          InputStream is=mAssets.openNonAsset(value.assetCookie,file,AssetManager.ACCESS_STREAMING);
          dr=Drawable.createFromResourceStream(this,value,is,file,null);
          is.close();
        }
 catch (        Exception e) {
          Trace.traceEnd(Trace.TRACE_TAG_RESOURCES);
          NotFoundException rnf=new NotFoundException("File " + file + " from drawable resource ID #0x"+ Integer.toHexString(id));
          rnf.initCause(e);
          throw rnf;
        }
        Trace.traceEnd(Trace.TRACE_TAG_RESOURCES);
      }
    }
  }
  if (dr != null) {
    dr.setChangingConfigurations(value.changingConfigurations);
    cs=dr.getConstantState();
    if (cs != null) {
      if (mPreloading) {
        if (verifyPreloadConfig(cs.getChangingConfigurations(),value.resourceId,"drawable")) {
          if (isColorDrawable) {
            sPreloadedColorDrawables.put(key,cs);
          }
 else {
            sPreloadedDrawables.put(key,cs);
          }
        }
      }
 else {
synchronized (mAccessLock) {
          if (isColorDrawable) {
            mColorDrawableCache.put(key,new WeakReference<Drawable.ConstantState>(cs));
          }
 else {
            mDrawableCache.put(key,new WeakReference<Drawable.ConstantState>(cs));
          }
        }
      }
    }
  }
  return dr;
}
