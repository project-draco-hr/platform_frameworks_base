{
  if (mView == null || !mAdded) {
    finishKeyEvent(event,sendDone,false);
    return;
  }
  if (checkForLeavingTouchModeAndConsume(event)) {
    finishKeyEvent(event,sendDone,true);
    return;
  }
  if (Config.LOGV) {
    captureKeyLog("captureDispatchKeyEvent",event);
  }
  mFallbackEventHandler.preDispatchKeyEvent(event);
  if (mView.dispatchKeyEvent(event)) {
    finishKeyEvent(event,sendDone,true);
    return;
  }
  if (mFallbackEventHandler.dispatchKeyEvent(event)) {
    finishKeyEvent(event,sendDone,true);
    return;
  }
  if (event.getAction() == KeyEvent.ACTION_DOWN) {
    int direction=0;
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_DPAD_LEFT:
      direction=View.FOCUS_LEFT;
    break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
  direction=View.FOCUS_RIGHT;
break;
case KeyEvent.KEYCODE_DPAD_UP:
direction=View.FOCUS_UP;
break;
case KeyEvent.KEYCODE_DPAD_DOWN:
direction=View.FOCUS_DOWN;
break;
}
if (direction != 0) {
View focused=mView != null ? mView.findFocus() : null;
if (focused != null) {
View v=focused.focusSearch(direction);
if (v != null && v != focused) {
focused.getFocusedRect(mTempRect);
if (mView instanceof ViewGroup) {
((ViewGroup)mView).offsetDescendantRectToMyCoords(focused,mTempRect);
((ViewGroup)mView).offsetRectIntoDescendantCoords(v,mTempRect);
}
if (v.requestFocus(direction,mTempRect)) {
playSoundEffect(SoundEffectConstants.getContantForFocusDirection(direction));
finishKeyEvent(event,sendDone,true);
return;
}
}
if (mView.dispatchUnhandledMove(focused,direction)) {
finishKeyEvent(event,sendDone,true);
return;
}
}
}
}
finishKeyEvent(event,sendDone,false);
}
