{
  boolean didFinish;
  if (event == null) {
    try {
      event=sWindowSession.getPendingTrackballMove(mWindow);
    }
 catch (    RemoteException e) {
    }
    didFinish=true;
  }
 else {
    didFinish=false;
  }
  boolean handled=false;
  try {
    if (event == null) {
      handled=true;
    }
 else     if (mView != null && mAdded) {
      handled=mView.dispatchTrackballEvent(event);
      if (!handled) {
      }
    }
  }
  finally {
    if (handled) {
      if (!didFinish) {
        try {
          sWindowSession.finishKey(mWindow);
        }
 catch (        RemoteException e) {
        }
      }
      if (event != null) {
        event.recycle();
      }
      return;
    }
  }
  final TrackballAxis x=mTrackballAxisX;
  final TrackballAxis y=mTrackballAxisY;
  long curTime=SystemClock.uptimeMillis();
  if ((mLastTrackballTime + MAX_TRACKBALL_DELAY) < curTime) {
    x.reset(0);
    y.reset(0);
    mLastTrackballTime=curTime;
  }
  try {
    final int action=event.getAction();
    final int metastate=event.getMetaState();
switch (action) {
case MotionEvent.ACTION_DOWN:
      x.reset(2);
    y.reset(2);
  deliverKeyEvent(new KeyEvent(curTime,curTime,KeyEvent.ACTION_DOWN,KeyEvent.KEYCODE_DPAD_CENTER,0,metastate),false);
break;
case MotionEvent.ACTION_UP:
x.reset(2);
y.reset(2);
deliverKeyEvent(new KeyEvent(curTime,curTime,KeyEvent.ACTION_UP,KeyEvent.KEYCODE_DPAD_CENTER,0,metastate),false);
break;
}
if (DEBUG_TRACKBALL) Log.v(TAG,"TB X=" + x.position + " step="+ x.step+ " dir="+ x.dir+ " acc="+ x.acceleration+ " move="+ event.getX()+ " / Y="+ y.position+ " step="+ y.step+ " dir="+ y.dir+ " acc="+ y.acceleration+ " move="+ event.getY());
final float xOff=x.collect(event.getX(),"X");
final float yOff=y.collect(event.getY(),"Y");
int keycode=0;
int movement=0;
float accel=1;
if (xOff > yOff) {
movement=x.generate((2 / event.getXPrecision()));
if (movement != 0) {
keycode=movement > 0 ? KeyEvent.KEYCODE_DPAD_RIGHT : KeyEvent.KEYCODE_DPAD_LEFT;
accel=x.acceleration;
y.reset(2);
}
}
 else if (yOff > 0) {
movement=y.generate((2 / event.getYPrecision()));
if (movement != 0) {
keycode=movement > 0 ? KeyEvent.KEYCODE_DPAD_DOWN : KeyEvent.KEYCODE_DPAD_UP;
accel=y.acceleration;
x.reset(2);
}
}
if (keycode != 0) {
if (movement < 0) movement=-movement;
int accelMovement=(int)(movement * accel);
if (accelMovement > movement) {
if (DEBUG_TRACKBALL) Log.v("foo","Delivering fake DPAD: " + keycode);
movement--;
deliverKeyEvent(new KeyEvent(curTime,curTime,KeyEvent.ACTION_MULTIPLE,keycode,accelMovement - movement,metastate),false);
}
while (movement > 0) {
if (DEBUG_TRACKBALL) Log.v("foo","Delivering fake DPAD: " + keycode);
movement--;
curTime=SystemClock.uptimeMillis();
deliverKeyEvent(new KeyEvent(curTime,curTime,KeyEvent.ACTION_DOWN,keycode,0,event.getMetaState()),false);
deliverKeyEvent(new KeyEvent(curTime,curTime,KeyEvent.ACTION_UP,keycode,0,metastate),false);
}
mLastTrackballTime=curTime;
}
}
  finally {
if (!didFinish) {
try {
sWindowSession.finishKey(mWindow);
}
 catch (RemoteException e) {
}
if (event != null) {
event.recycle();
}
}
}
}
