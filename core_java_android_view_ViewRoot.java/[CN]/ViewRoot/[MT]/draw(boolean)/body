{
  Surface surface=mSurface;
  if (surface == null || !surface.isValid()) {
    return;
  }
  if (!sFirstDrawComplete) {
synchronized (sFirstDrawHandlers) {
      sFirstDrawComplete=true;
      final int count=sFirstDrawHandlers.size();
      for (int i=0; i < count; i++) {
        post(sFirstDrawHandlers.get(i));
      }
    }
  }
  scrollToRectOrFocus(null,false);
  if (mAttachInfo.mViewScrollChanged) {
    mAttachInfo.mViewScrollChanged=false;
    mAttachInfo.mTreeObserver.dispatchOnScrollChanged();
  }
  int yoff;
  boolean animating=mScroller != null && mScroller.computeScrollOffset();
  if (animating) {
    yoff=mScroller.getCurrY();
  }
 else {
    yoff=mScrollY;
  }
  if (mCurScrollY != yoff) {
    mCurScrollY=yoff;
    fullRedrawNeeded=true;
  }
  float appScale=mAttachInfo.mApplicationScale;
  boolean scalingRequired=mAttachInfo.mScalingRequired;
  int resizeAlpha=0;
  if (mResizeBitmap != null) {
    long deltaTime=SystemClock.uptimeMillis() - mResizeBitmapStartTime;
    if (deltaTime < mResizeBitmapDuration) {
      float amt=deltaTime / (float)mResizeBitmapDuration;
      amt=mResizeInterpolator.getInterpolation(amt);
      animating=true;
      resizeAlpha=255 - (int)(amt * 255);
    }
 else {
      disposeResizeBitmap();
    }
  }
  Rect dirty=mDirty;
  if (mSurfaceHolder != null) {
    dirty.setEmpty();
    if (animating) {
      if (mScroller != null) {
        mScroller.abortAnimation();
      }
      disposeResizeBitmap();
    }
    return;
  }
  if (fullRedrawNeeded) {
    mAttachInfo.mIgnoreDirtyState=true;
    dirty.union(0,0,(int)(mWidth * appScale + 0.5f),(int)(mHeight * appScale + 0.5f));
  }
  if (mAttachInfo.mHardwareRenderer != null && mAttachInfo.mHardwareRenderer.isEnabled()) {
    if (!dirty.isEmpty() || mIsAnimating) {
      mIsAnimating=false;
      mHardwareYOffset=yoff;
      mResizeAlpha=resizeAlpha;
      mCurrentDirty.set(dirty);
      mCurrentDirty.union(mPreviousDirty);
      mPreviousDirty.set(dirty);
      dirty.setEmpty();
      mAttachInfo.mHardwareRenderer.draw(mView,mAttachInfo,this,mCurrentDirty);
    }
    if (animating) {
      mFullRedrawNeeded=true;
      scheduleTraversals();
    }
    return;
  }
  if (DEBUG_ORIENTATION || DEBUG_DRAW) {
    Log.v(TAG,"Draw " + mView + "/"+ mWindowAttributes.getTitle()+ ": dirty={"+ dirty.left+ ","+ dirty.top+ ","+ dirty.right+ ","+ dirty.bottom+ "} surface="+ surface+ " surface.isValid()="+ surface.isValid()+ ", appScale:"+ appScale+ ", width="+ mWidth+ ", height="+ mHeight);
  }
  if (!dirty.isEmpty() || mIsAnimating) {
    Canvas canvas;
    try {
      int left=dirty.left;
      int top=dirty.top;
      int right=dirty.right;
      int bottom=dirty.bottom;
      canvas=surface.lockCanvas(dirty);
      if (left != dirty.left || top != dirty.top || right != dirty.right || bottom != dirty.bottom) {
        mAttachInfo.mIgnoreDirtyState=true;
      }
      canvas.setDensity(mDensity);
    }
 catch (    Surface.OutOfResourcesException e) {
      Log.e(TAG,"OutOfResourcesException locking surface",e);
      return;
    }
catch (    IllegalArgumentException e) {
      Log.e(TAG,"IllegalArgumentException locking surface",e);
      return;
    }
    try {
      if (!dirty.isEmpty() || mIsAnimating) {
        long startTime=0L;
        if (DEBUG_ORIENTATION || DEBUG_DRAW) {
          Log.v(TAG,"Surface " + surface + " drawing to bitmap w="+ canvas.getWidth()+ ", h="+ canvas.getHeight());
        }
        if (ViewDebug.DEBUG_PROFILE_DRAWING) {
          startTime=SystemClock.elapsedRealtime();
        }
        if (!canvas.isOpaque() || yoff != 0) {
          canvas.drawColor(0,PorterDuff.Mode.CLEAR);
        }
        dirty.setEmpty();
        mIsAnimating=false;
        mAttachInfo.mDrawingTime=SystemClock.uptimeMillis();
        mView.mPrivateFlags|=View.DRAWN;
        if (DEBUG_DRAW) {
          Context cxt=mView.getContext();
          Log.i(TAG,"Drawing: package:" + cxt.getPackageName() + ", metrics="+ cxt.getResources().getDisplayMetrics()+ ", compatibilityInfo="+ cxt.getResources().getCompatibilityInfo());
        }
        try {
          canvas.translate(0,-yoff);
          if (mTranslator != null) {
            mTranslator.translateCanvas(canvas);
          }
          canvas.setScreenDensity(scalingRequired ? DisplayMetrics.DENSITY_DEVICE : 0);
          mView.draw(canvas);
        }
  finally {
          mAttachInfo.mIgnoreDirtyState=false;
        }
        if (Config.DEBUG && ViewDebug.consistencyCheckEnabled) {
          mView.dispatchConsistencyCheck(ViewDebug.CONSISTENCY_DRAWING);
        }
        if (SHOW_FPS || ViewDebug.DEBUG_SHOW_FPS) {
          int now=(int)SystemClock.elapsedRealtime();
          if (sDrawTime != 0) {
            nativeShowFPS(canvas,now - sDrawTime);
          }
          sDrawTime=now;
        }
        if (ViewDebug.DEBUG_PROFILE_DRAWING) {
          EventLog.writeEvent(60000,SystemClock.elapsedRealtime() - startTime);
        }
      }
    }
  finally {
      surface.unlockCanvasAndPost(canvas);
    }
  }
  if (LOCAL_LOGV) {
    Log.v(TAG,"Surface " + surface + " unlockCanvasAndPost");
  }
  if (animating) {
    mFullRedrawNeeded=true;
    scheduleTraversals();
  }
}
