{
  if (keySpecClass == null) {
    throw new InvalidKeySpecException("keySpecClass == null");
  }
  if (!(key instanceof KeyStoreSecretKey)) {
    throw new InvalidKeySpecException("Only Android KeyStore secret keys supported: " + ((key != null) ? key.getClass().getName() : "null"));
  }
  if (SecretKeySpec.class.isAssignableFrom(keySpecClass)) {
    throw new InvalidKeySpecException("Key material export of Android KeyStore keys is not supported");
  }
  if (!KeyStoreKeySpec.class.equals(keySpecClass)) {
    throw new InvalidKeySpecException("Unsupported key spec: " + keySpecClass.getName());
  }
  String keyAliasInKeystore=((KeyStoreSecretKey)key).getAlias();
  String entryAlias;
  if (keyAliasInKeystore.startsWith(Credentials.USER_SECRET_KEY)) {
    entryAlias=keyAliasInKeystore.substring(Credentials.USER_SECRET_KEY.length());
  }
 else {
    throw new InvalidKeySpecException("Invalid key alias: " + keyAliasInKeystore);
  }
  KeyCharacteristics keyCharacteristics=new KeyCharacteristics();
  int errorCode=mKeyStore.getKeyCharacteristics(keyAliasInKeystore,null,null,keyCharacteristics);
  if (errorCode != KeyStore.NO_ERROR) {
    throw new InvalidKeySpecException("Failed to obtain information about key." + " Keystore error: " + errorCode);
  }
  @KeyStoreKeyCharacteristics.OriginEnum Integer origin;
  int keySize;
  @KeyStoreKeyConstraints.PurposeEnum int purposes;
  @KeyStoreKeyConstraints.AlgorithmEnum int algorithm;
  @KeyStoreKeyConstraints.PaddingEnum Integer padding;
  @KeyStoreKeyConstraints.DigestEnum Integer digest;
  @KeyStoreKeyConstraints.BlockModeEnum Integer blockMode;
  try {
    origin=KeymasterUtils.getInt(keyCharacteristics,KeymasterDefs.KM_TAG_ORIGIN);
    if (origin == null) {
      throw new InvalidKeySpecException("Key origin not available");
    }
    origin=KeyStoreKeyCharacteristics.Origin.fromKeymaster(origin);
    Integer keySizeInteger=KeymasterUtils.getInt(keyCharacteristics,KeymasterDefs.KM_TAG_KEY_SIZE);
    if (keySizeInteger == null) {
      throw new InvalidKeySpecException("Key size not available");
    }
    keySize=keySizeInteger;
    purposes=KeyStoreKeyConstraints.Purpose.allFromKeymaster(KeymasterUtils.getInts(keyCharacteristics,KeymasterDefs.KM_TAG_PURPOSE));
    Integer alg=KeymasterUtils.getInt(keyCharacteristics,KeymasterDefs.KM_TAG_ALGORITHM);
    if (alg == null) {
      throw new InvalidKeySpecException("Key algorithm not available");
    }
    algorithm=KeyStoreKeyConstraints.Algorithm.fromKeymaster(alg);
    padding=KeymasterUtils.getInt(keyCharacteristics,KeymasterDefs.KM_TAG_PADDING);
    if (padding != null) {
      padding=KeyStoreKeyConstraints.Padding.fromKeymaster(padding);
    }
    digest=KeymasterUtils.getInt(keyCharacteristics,KeymasterDefs.KM_TAG_DIGEST);
    if (digest != null) {
      digest=KeyStoreKeyConstraints.Digest.fromKeymaster(digest);
    }
    blockMode=KeymasterUtils.getInt(keyCharacteristics,KeymasterDefs.KM_TAG_BLOCK_MODE);
    if (blockMode != null) {
      blockMode=KeyStoreKeyConstraints.BlockMode.fromKeymaster(blockMode);
    }
  }
 catch (  IllegalArgumentException e) {
    throw new InvalidKeySpecException("Unsupported key characteristic",e);
  }
  int swEnforcedUserAuthenticatorIds=keyCharacteristics.swEnforced.getInt(KeymasterDefs.KM_TAG_USER_AUTH_TYPE,0);
  int hwEnforcedUserAuthenticatorIds=keyCharacteristics.hwEnforced.getInt(KeymasterDefs.KM_TAG_USER_AUTH_TYPE,0);
  int userAuthenticatorIds=swEnforcedUserAuthenticatorIds | hwEnforcedUserAuthenticatorIds;
  Set<Integer> userAuthenticators=KeyStoreKeyConstraints.UserAuthenticator.allFromKeymaster(userAuthenticatorIds);
  Set<Integer> teeBackedUserAuthenticators=KeyStoreKeyConstraints.UserAuthenticator.allFromKeymaster(hwEnforcedUserAuthenticatorIds);
  return new KeyStoreKeySpec(entryAlias,origin,keySize,KeymasterUtils.getDate(keyCharacteristics,KeymasterDefs.KM_TAG_ACTIVE_DATETIME),KeymasterUtils.getDate(keyCharacteristics,KeymasterDefs.KM_TAG_ORIGINATION_EXPIRE_DATETIME),KeymasterUtils.getDate(keyCharacteristics,KeymasterDefs.KM_TAG_USAGE_EXPIRE_DATETIME),purposes,algorithm,padding,digest,blockMode,KeymasterUtils.getInt(keyCharacteristics,KeymasterDefs.KM_TAG_MIN_SECONDS_BETWEEN_OPS),KeymasterUtils.getInt(keyCharacteristics,KeymasterDefs.KM_TAG_MAX_USES_PER_BOOT),userAuthenticators,teeBackedUserAuthenticators,KeymasterUtils.getInt(keyCharacteristics,KeymasterDefs.KM_TAG_AUTH_TIMEOUT));
}
