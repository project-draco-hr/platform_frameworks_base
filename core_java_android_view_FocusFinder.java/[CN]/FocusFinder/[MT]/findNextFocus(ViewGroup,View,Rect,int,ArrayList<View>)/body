{
  if (focused != null) {
    if (focusedRect == null) {
      focusedRect=mFocusedRect;
    }
    focused.getFocusedRect(focusedRect);
    root.offsetDescendantRectToMyCoords(focused,focusedRect);
  }
 else {
    if (focusedRect == null) {
      focusedRect=mFocusedRect;
switch (direction) {
case View.FOCUS_RIGHT:
case View.FOCUS_DOWN:
        setFocusTopLeft(root,focusedRect);
      break;
case View.FOCUS_FORWARD:
    if (root.isLayoutRtl()) {
      setFocusBottomRight(root,focusedRect);
    }
 else {
      setFocusTopLeft(root,focusedRect);
    }
  break;
case View.FOCUS_LEFT:
case View.FOCUS_UP:
setFocusBottomRight(root,focusedRect);
break;
case View.FOCUS_BACKWARD:
if (root.isLayoutRtl()) {
setFocusTopLeft(root,focusedRect);
}
 else {
setFocusBottomRight(root,focusedRect);
break;
}
}
}
}
switch (direction) {
case View.FOCUS_FORWARD:
case View.FOCUS_BACKWARD:
return findNextFocusInRelativeDirection(focusables,root,focused,focusedRect,direction);
case View.FOCUS_UP:
case View.FOCUS_DOWN:
case View.FOCUS_LEFT:
case View.FOCUS_RIGHT:
return findNextFocusInAbsoluteDirection(focusables,root,focused,focusedRect,direction);
default :
throw new IllegalArgumentException("Unknown direction: " + direction);
}
}
