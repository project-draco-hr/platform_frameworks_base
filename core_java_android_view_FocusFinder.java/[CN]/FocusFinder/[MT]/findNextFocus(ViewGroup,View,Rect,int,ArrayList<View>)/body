{
  final int directionMasked=(direction & ~View.FOCUS_ACCESSIBILITY);
  if (focused != null) {
    focused.getFocusedRect(focusedRect);
    root.offsetDescendantRectToMyCoords(focused,focusedRect);
  }
 else {
switch (directionMasked) {
case View.FOCUS_RIGHT:
case View.FOCUS_DOWN:
      setFocusTopLeft(root,focusedRect);
    break;
case View.FOCUS_FORWARD:
  if (root.isLayoutRtl()) {
    setFocusBottomRight(root,focusedRect);
  }
 else {
    setFocusTopLeft(root,focusedRect);
  }
break;
case View.FOCUS_LEFT:
case View.FOCUS_UP:
setFocusBottomRight(root,focusedRect);
break;
case View.FOCUS_BACKWARD:
if (root.isLayoutRtl()) {
setFocusTopLeft(root,focusedRect);
}
 else {
setFocusBottomRight(root,focusedRect);
break;
}
}
}
switch (directionMasked) {
case View.FOCUS_FORWARD:
case View.FOCUS_BACKWARD:
return findNextInputFocusInRelativeDirection(focusables,root,focused,focusedRect,directionMasked);
case View.FOCUS_UP:
case View.FOCUS_DOWN:
case View.FOCUS_LEFT:
case View.FOCUS_RIGHT:
return findNextInputFocusInAbsoluteDirection(focusables,root,focused,focusedRect,directionMasked);
default :
throw new IllegalArgumentException("Unknown direction: " + directionMasked);
}
}
