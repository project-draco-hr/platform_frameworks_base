{
  if (focused != null) {
    View userSetNextFocus=focused.findUserSetNextFocus(root,direction);
    if (userSetNextFocus != null && userSetNextFocus.isFocusable() && (!userSetNextFocus.isInTouchMode() || userSetNextFocus.isFocusableInTouchMode())) {
      return userSetNextFocus;
    }
    focused.getFocusedRect(mFocusedRect);
    root.offsetDescendantRectToMyCoords(focused,mFocusedRect);
  }
 else {
switch (direction) {
case View.FOCUS_RIGHT:
case View.FOCUS_DOWN:
      setFocusTopLeft(root);
    break;
case View.FOCUS_FORWARD:
  if (root.isLayoutRtl()) {
    setFocusBottomRight(root);
  }
 else {
    setFocusTopLeft(root);
  }
break;
case View.FOCUS_LEFT:
case View.FOCUS_UP:
setFocusBottomRight(root);
break;
case View.FOCUS_BACKWARD:
if (root.isLayoutRtl()) {
setFocusTopLeft(root);
}
 else {
setFocusBottomRight(root);
break;
}
}
}
ArrayList<View> focusables=mTempList;
focusables.clear();
root.addFocusables(focusables,direction);
if (focusables.isEmpty()) {
return null;
}
try {
switch (direction) {
case View.FOCUS_FORWARD:
case View.FOCUS_BACKWARD:
return findNextInputFocusInRelativeDirection(focusables,root,focused,focusedRect,direction);
case View.FOCUS_UP:
case View.FOCUS_DOWN:
case View.FOCUS_LEFT:
case View.FOCUS_RIGHT:
return findNextInputFocusInAbsoluteDirection(focusables,root,focused,focusedRect,direction);
default :
throw new IllegalArgumentException("Unknown direction: " + direction);
}
}
  finally {
focusables.clear();
}
}
