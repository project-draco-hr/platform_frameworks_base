{
  ensureTempRects();
  final Rect tempParentRect=mTempParentRect;
  final int[] tempGlobalRect=mTempGlobalRect;
  final Rect tempScreenRect=mTempScreenRect;
  final AccessibilityNodeInfo node=AccessibilityNodeInfo.obtain();
  node.setEnabled(true);
  node.setClassName(DEFAULT_CLASS_NAME);
  node.setBoundsInParent(INVALID_PARENT_BOUNDS);
  onPopulateNodeForVirtualView(virtualViewId,node);
  if ((node.getText() == null) && (node.getContentDescription() == null)) {
    throw new RuntimeException("Callbacks must add text or a content description in " + "populateNodeForVirtualViewId()");
  }
  node.getBoundsInParent(tempParentRect);
  if (tempParentRect.equals(INVALID_PARENT_BOUNDS)) {
    throw new RuntimeException("Callbacks must set parent bounds in " + "populateNodeForVirtualViewId()");
  }
  final int actions=node.getActions();
  if ((actions & AccessibilityNodeInfo.ACTION_ACCESSIBILITY_FOCUS) != 0) {
    throw new RuntimeException("Callbacks must not add ACTION_ACCESSIBILITY_FOCUS in " + "populateNodeForVirtualViewId()");
  }
  if ((actions & AccessibilityNodeInfo.ACTION_CLEAR_ACCESSIBILITY_FOCUS) != 0) {
    throw new RuntimeException("Callbacks must not add ACTION_CLEAR_ACCESSIBILITY_FOCUS in " + "populateNodeForVirtualViewId()");
  }
  node.setPackageName(mView.getContext().getPackageName());
  node.setSource(mView,virtualViewId);
  node.setParent(mView);
  if (mFocusedVirtualViewId == virtualViewId) {
    node.setAccessibilityFocused(true);
    node.addAction(AccessibilityAction.ACTION_CLEAR_ACCESSIBILITY_FOCUS);
  }
 else {
    node.setAccessibilityFocused(false);
    node.addAction(AccessibilityAction.ACTION_ACCESSIBILITY_FOCUS);
  }
  if (intersectVisibleToUser(tempParentRect)) {
    node.setVisibleToUser(true);
    node.setBoundsInParent(tempParentRect);
  }
  mView.getLocationOnScreen(tempGlobalRect);
  final int offsetX=tempGlobalRect[0];
  final int offsetY=tempGlobalRect[1];
  tempScreenRect.set(tempParentRect);
  tempScreenRect.offset(offsetX,offsetY);
  node.setBoundsInScreen(tempScreenRect);
  return node;
}
