{
  final NetworkCapabilities nc=new NetworkRequest.Builder().addCapability(capability).build().networkCapabilities;
  if (capability == NET_CAPABILITY_CBS || capability == NET_CAPABILITY_DUN || capability == NET_CAPABILITY_EIMS || capability == NET_CAPABILITY_FOTA || capability == NET_CAPABILITY_IA || capability == NET_CAPABILITY_IMS || capability == NET_CAPABILITY_RCS || capability == NET_CAPABILITY_XCAP) {
    assertFalse(nc.hasCapability(NET_CAPABILITY_NOT_RESTRICTED));
  }
 else {
    assertTrue(nc.hasCapability(NET_CAPABILITY_NOT_RESTRICTED));
  }
  NetworkCapabilities filter=new NetworkCapabilities();
  filter.addCapability(capability);
  final HandlerThread handlerThread=new HandlerThread("testNetworkFactoryRequests");
  handlerThread.start();
  final MockNetworkFactory testFactory=new MockNetworkFactory(handlerThread.getLooper(),mServiceContext,"testFactory",filter);
  testFactory.setScoreFilter(40);
  ConditionVariable cv=testFactory.getNetworkStartedCV();
  testFactory.expectAddRequests(1);
  testFactory.register();
  testFactory.waitForNetworkRequests(1);
  int expectedRequestCount=1;
  NetworkCallback networkCallback=null;
  if (capability != NET_CAPABILITY_INTERNET) {
    assertFalse(testFactory.getMyStartRequested());
    NetworkRequest request=new NetworkRequest.Builder().addCapability(capability).build();
    networkCallback=new NetworkCallback();
    testFactory.expectAddRequests(1);
    mCm.requestNetwork(request,networkCallback);
    expectedRequestCount++;
    testFactory.waitForNetworkRequests(expectedRequestCount);
  }
  waitFor(cv);
  assertEquals(expectedRequestCount,testFactory.getMyRequestCount());
  assertTrue(testFactory.getMyStartRequested());
  MockNetworkAgent testAgent=new MockNetworkAgent(TRANSPORT_CELLULAR);
  testAgent.adjustScore(40);
  cv=testFactory.getNetworkStoppedCV();
  testFactory.expectAddRequests(expectedRequestCount);
  testAgent.connect(false);
  testAgent.addCapability(capability);
  waitFor(cv);
  testFactory.waitForNetworkRequests(expectedRequestCount);
  assertFalse(testFactory.getMyStartRequested());
  testFactory.expectAddRequests(10);
  assertEquals(expectedRequestCount,testFactory.getMyRequestCount());
  ConnectivityManager.NetworkCallback[] networkCallbacks=new ConnectivityManager.NetworkCallback[10];
  for (int i=0; i < networkCallbacks.length; i++) {
    networkCallbacks[i]=new ConnectivityManager.NetworkCallback();
    NetworkRequest.Builder builder=new NetworkRequest.Builder();
    builder.addCapability(capability);
    mCm.requestNetwork(builder.build(),networkCallbacks[i]);
  }
  testFactory.waitForNetworkRequests(10 + expectedRequestCount);
  assertFalse(testFactory.getMyStartRequested());
  testFactory.expectRemoveRequests(10);
  for (int i=0; i < networkCallbacks.length; i++) {
    mCm.unregisterNetworkCallback(networkCallbacks[i]);
  }
  testFactory.waitForNetworkRequests(expectedRequestCount);
  assertFalse(testFactory.getMyStartRequested());
  cv=testFactory.getNetworkStartedCV();
  testAgent.disconnect();
  waitFor(cv);
  assertEquals(expectedRequestCount,testFactory.getMyRequestCount());
  assertTrue(testFactory.getMyStartRequested());
  testFactory.unregister();
  if (networkCallback != null)   mCm.unregisterNetworkCallback(networkCallback);
  handlerThread.quit();
}
