{
  InetAddress myIPv4=InetAddress.getByName("192.0.2.129");
  InetAddress notMyIPv4=InetAddress.getByName("192.0.2.35");
  InetAddress myIPv6=InetAddress.getByName("2001:db8::1");
  InetAddress dstIPv4=InetAddress.getByName("8.8.8.8");
  InetAddress dstIPv6=InetAddress.getByName("2001:4860:4860::8888");
  LinkProperties lp=new LinkProperties();
  lp.setInterfaceName("wlan12");
  lp.addLinkAddress(new LinkAddress(myIPv6,64));
  lp.addLinkAddress(new LinkAddress(myIPv4,25));
  lp.addRoute(new RouteInfo(InetAddress.getByName("fe80::1234")));
  lp.addRoute(new RouteInfo(InetAddress.getByName("192.0.2.254")));
  Network notMyNet=new Network(61234);
  Network myNet=connectKeepaliveNetwork(lp);
  TestKeepaliveCallback callback=new TestKeepaliveCallback();
  PacketKeepalive ka;
  ka=mCm.startNattKeepalive(notMyNet,25,callback,myIPv4,1234,dstIPv4);
  callback.expectError(PacketKeepalive.ERROR_INVALID_NETWORK);
  ka=mCm.startNattKeepalive(myNet,19,callback,notMyIPv4,1234,dstIPv4);
  callback.expectError(PacketKeepalive.ERROR_INVALID_INTERVAL);
  ka=mCm.startNattKeepalive(myNet,25,callback,myIPv4,1234,dstIPv6);
  callback.expectError(PacketKeepalive.ERROR_INVALID_IP_ADDRESS);
  ka=mCm.startNattKeepalive(myNet,25,callback,myIPv6,1234,dstIPv4);
  callback.expectError(PacketKeepalive.ERROR_INVALID_IP_ADDRESS);
  ka=mCm.startNattKeepalive(myNet,25,callback,myIPv6,1234,dstIPv6);
  callback.expectError(PacketKeepalive.ERROR_INVALID_IP_ADDRESS);
  ka=mCm.startNattKeepalive(myNet,25,callback,myIPv4,123456,dstIPv4);
  callback.expectError(PacketKeepalive.ERROR_INVALID_PORT);
  ka=mCm.startNattKeepalive(myNet,25,callback,myIPv4,123456,dstIPv4);
  callback.expectError(PacketKeepalive.ERROR_INVALID_PORT);
  ka=mCm.startNattKeepalive(myNet,25,callback,myIPv4,12345,dstIPv4);
  callback.expectError(PacketKeepalive.ERROR_HARDWARE_UNSUPPORTED);
  ka=mCm.startNattKeepalive(myNet,25,callback,myIPv4,12345,dstIPv4);
  callback.expectError(PacketKeepalive.ERROR_HARDWARE_UNSUPPORTED);
  mWiFiNetworkAgent.setStartKeepaliveError(PacketKeepalive.SUCCESS);
  ka=mCm.startNattKeepalive(myNet,25,callback,myIPv4,12345,dstIPv4);
  callback.expectStarted();
  mWiFiNetworkAgent.setStopKeepaliveError(PacketKeepalive.SUCCESS);
  ka.stop();
  callback.expectStopped();
  LinkProperties bogusLp=new LinkProperties(lp);
  ka=mCm.startNattKeepalive(myNet,25,callback,myIPv4,12345,dstIPv4);
  callback.expectStarted();
  bogusLp.removeLinkAddress(new LinkAddress(myIPv4,25));
  bogusLp.addLinkAddress(new LinkAddress(notMyIPv4,25));
  mWiFiNetworkAgent.sendLinkProperties(bogusLp);
  callback.expectError(PacketKeepalive.ERROR_INVALID_IP_ADDRESS);
  mWiFiNetworkAgent.sendLinkProperties(lp);
  ka=mCm.startNattKeepalive(myNet,25,callback,myIPv4,12345,dstIPv4);
  callback.expectStarted();
  mWiFiNetworkAgent.disconnect();
  callback.expectError(PacketKeepalive.ERROR_INVALID_NETWORK);
  assertNull(mCm.getNetworkCapabilities(myNet));
  ka.stop();
  myNet=connectKeepaliveNetwork(lp);
  mWiFiNetworkAgent.setStartKeepaliveError(PacketKeepalive.SUCCESS);
  ka=mCm.startNattKeepalive(myNet,25,callback,myIPv4,12345,dstIPv4);
  callback.expectStarted();
  ka.stop();
  mWiFiNetworkAgent.disconnect();
  mService.waitForIdle();
  callback.expectStopped();
  myNet=connectKeepaliveNetwork(lp);
  mWiFiNetworkAgent.setStartKeepaliveError(PacketKeepalive.SUCCESS);
  mWiFiNetworkAgent.setExpectedKeepaliveSlot(1);
  ka=mCm.startNattKeepalive(myNet,25,callback,myIPv4,12345,dstIPv4);
  callback.expectStarted();
  mWiFiNetworkAgent.setExpectedKeepaliveSlot(2);
  TestKeepaliveCallback callback2=new TestKeepaliveCallback();
  PacketKeepalive ka2=mCm.startNattKeepalive(myNet,25,callback2,myIPv4,6789,dstIPv4);
  callback2.expectStarted();
  ka.stop();
  callback.expectStopped();
  mWiFiNetworkAgent.setExpectedKeepaliveSlot(1);
  TestKeepaliveCallback callback3=new TestKeepaliveCallback();
  PacketKeepalive ka3=mCm.startNattKeepalive(myNet,25,callback3,myIPv4,9876,dstIPv4);
  callback3.expectStarted();
  ka2.stop();
  callback2.expectStopped();
  ka3.stop();
  callback3.expectStopped();
}
