{
  final TestNetworkCallback captivePortalCallback=new TestNetworkCallback();
  final NetworkRequest captivePortalRequest=new NetworkRequest.Builder().addCapability(NET_CAPABILITY_CAPTIVE_PORTAL).build();
  mCm.registerNetworkCallback(captivePortalRequest,captivePortalCallback);
  final TestNetworkCallback validatedCallback=new TestNetworkCallback();
  final NetworkRequest validatedRequest=new NetworkRequest.Builder().addCapability(NET_CAPABILITY_VALIDATED).build();
  mCm.registerNetworkCallback(validatedRequest,validatedCallback);
  mWiFiNetworkAgent=new MockNetworkAgent(TRANSPORT_WIFI);
  String firstRedirectUrl="http://example.com/firstPath";
  mWiFiNetworkAgent.connectWithCaptivePortal(firstRedirectUrl);
  captivePortalCallback.expectCallback(CallbackState.AVAILABLE);
  assertEquals(mWiFiNetworkAgent.waitForRedirectUrl(),firstRedirectUrl);
  mWiFiNetworkAgent.disconnect();
  captivePortalCallback.expectCallback(CallbackState.LOST);
  mWiFiNetworkAgent=new MockNetworkAgent(TRANSPORT_WIFI);
  String secondRedirectUrl="http://example.com/secondPath";
  mWiFiNetworkAgent.connectWithCaptivePortal(secondRedirectUrl);
  captivePortalCallback.expectCallback(CallbackState.AVAILABLE);
  assertEquals(mWiFiNetworkAgent.waitForRedirectUrl(),secondRedirectUrl);
  mWiFiNetworkAgent.getWrappedNetworkMonitor().gen204ProbeResult=204;
  mCm.reportNetworkConnectivity(mWiFiNetworkAgent.getNetwork(),true);
  captivePortalCallback.expectCallback(CallbackState.LOST);
  validatedCallback.expectCallback(CallbackState.AVAILABLE);
  mWiFiNetworkAgent.getWrappedNetworkMonitor().gen204ProbeResult=500;
  mCm.reportNetworkConnectivity(mWiFiNetworkAgent.getNetwork(),false);
  validatedCallback.expectCallback(CallbackState.LOST);
}
