{
  if (mDexoptCommands != null) {
    throw new IllegalStateException("Should not be ota-dexopting when trying to move.");
  }
  Collection<PackageParser.Package> pkgs=mPackageManagerService.getPackages();
  for (  PackageParser.Package pkg : pkgs) {
    if (pkg == null) {
      continue;
    }
    if (!PackageDexOptimizer.canOptimizePackage(pkg)) {
      continue;
    }
    if (pkg.codePath == null) {
      Slog.w(TAG,"Package " + pkg + " can be optimized but has null codePath");
      continue;
    }
    if (pkg.codePath.startsWith("/system") || pkg.codePath.startsWith("/vendor")) {
      continue;
    }
    final String[] instructionSets=getAppDexInstructionSets(pkg.applicationInfo);
    final List<String> paths=pkg.getAllCodePathsExcludingResourceOnly();
    final String[] dexCodeInstructionSets=getDexCodeInstructionSets(instructionSets);
    for (    String dexCodeInstructionSet : dexCodeInstructionSets) {
      for (      String path : paths) {
        String oatDir=PackageDexOptimizer.getOatDir(new File(pkg.codePath)).getAbsolutePath();
        try {
          installer.moveAb(path,dexCodeInstructionSet,oatDir);
        }
 catch (        InstallerException e) {
        }
      }
    }
  }
}
