{
  if (s == null) {
    return null;
  }
  StringBuilder decoded=null;
  ByteArrayOutputStream out=null;
  int oldLength=s.length();
  int current=0;
  while (current < oldLength) {
    int nextEscape=s.indexOf('%',current);
    if (nextEscape == NOT_FOUND) {
      if (decoded == null) {
        return s;
      }
 else {
        decoded.append(s,current,oldLength);
        return decoded.toString();
      }
    }
    if (decoded == null) {
      decoded=new StringBuilder(oldLength);
      out=new ByteArrayOutputStream(4);
    }
 else {
      out.reset();
    }
    if (nextEscape > current) {
      decoded.append(s,current,nextEscape);
      current=nextEscape;
    }
 else {
    }
    try {
      do {
        if (current + 2 >= oldLength) {
          out.write(REPLACEMENT);
        }
 else {
          int a=Character.digit(s.charAt(current + 1),16);
          int b=Character.digit(s.charAt(current + 2),16);
          if (a == -1 || b == -1) {
            out.write(REPLACEMENT);
          }
 else {
            out.write((a << 4) + b);
          }
        }
        current+=3;
      }
 while (current < oldLength && s.charAt(current) == '%');
      decoded.append(out.toString(DEFAULT_ENCODING));
    }
 catch (    UnsupportedEncodingException e) {
      throw new AssertionError(e);
    }
catch (    IOException e) {
      throw new AssertionError(e);
    }
  }
  return decoded == null ? s : decoded.toString();
}
