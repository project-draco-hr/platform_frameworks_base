{
  mNodes=new Node[nodeCount];
  mConnections=new Connection[connectionCount];
  android.util.Log.v("RSR","init" + nodeCount + ", "+ connectionCount);
  Node n=mFirstNode;
  int outputCount=0;
  int inputCount=0;
  int connectionIndex=0;
  int nodeNum=0;
  while (n != null) {
    mNodes[nodeNum++]=n;
    boolean hasInput=false;
    for (int ct=0; ct < n.mInput.length; ct++) {
      if (n.mInput[ct] != null) {
        if (n.mInput[ct].mToName == null) {
          hasInput=true;
        }
      }
    }
    if (!hasInput) {
      if (mInputs == null) {
        mInputs=new IO[1];
      }
      if (mInputs.length <= inputCount) {
        IO t[]=new IO[mInputs.length + 1];
        System.arraycopy(mInputs,0,t,0,mInputs.length);
        mInputs=t;
      }
      mInputs[inputCount++]=new IO(n.mScript);
    }
    boolean hasOutput=false;
    for (int ct=0; ct < n.mOutput.length; ct++) {
      if (n.mOutput[ct] != null) {
        hasOutput=true;
      }
    }
    if (!hasOutput) {
      if (mOutputs == null) {
        mOutputs=new IO[1];
      }
      if (mOutputs.length <= outputCount) {
        IO t[]=new IO[mOutputs.length + 1];
        System.arraycopy(mOutputs,0,t,0,mOutputs.length);
        mOutputs=t;
      }
      mOutputs[outputCount++]=new IO(n.mScript);
    }
    for (int ct=0; ct < n.mOutput.length; ct++) {
      android.util.Log.v("RSR","init out2 " + n.mOutput[ct]);
      if (n.mOutput[ct] != null) {
        Connection t=n.mOutput[ct];
        mConnections[connectionIndex++]=t;
        t.mInternalAllocation=Allocation.createTyped(mRS,t.mAllocationType);
      }
    }
    n=n.mNext;
  }
}
