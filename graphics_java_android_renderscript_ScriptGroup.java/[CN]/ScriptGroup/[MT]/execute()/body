{
  android.util.Log.v("RSR","execute");
  boolean more=true;
  int depth=0;
  while (more) {
    more=false;
    for (int ct=0; ct < mNodes.length; ct++) {
      if (mNodes[ct].mDepth == depth) {
        more=true;
        Allocation kernelIn=null;
        for (int ct2=0; ct2 < mNodes[ct].mInputCount; ct2++) {
          android.util.Log.v("RSR"," kin " + ct2 + ", to "+ mNodes[ct].mInput[ct2].mTo[0]+ ", name "+ mNodes[ct].mInput[ct2].mToName[0]);
          if (mNodes[ct].mInput[ct2].mToName[0] == null) {
            kernelIn=mNodes[ct].mInput[ct2].mInternalAllocation;
            break;
          }
        }
        Allocation kernelOut=null;
        for (int ct2=0; ct2 < mNodes[ct].mOutputCount; ct2++) {
          android.util.Log.v("RSR"," kout " + ct2 + ", from "+ mNodes[ct].mOutput[ct2].mFrom);
          if (mNodes[ct].mOutput[ct2].mFrom != null) {
            kernelOut=mNodes[ct].mOutput[ct2].mInternalAllocation;
            break;
          }
        }
        if (kernelOut == null) {
          for (int ct2=0; ct2 < mOutputs.length; ct2++) {
            if (mOutputs[ct2].mScript == mNodes[ct].mScript) {
              kernelOut=mOutputs[ct2].mAllocation;
              break;
            }
          }
        }
        android.util.Log.v("RSR","execute calling " + mNodes[ct] + ", with "+ kernelIn);
        if (kernelIn != null) {
          try {
            Method m=mNodes[ct].mScript.getClass().getMethod("forEach_root",new Class[]{Allocation.class,Allocation.class});
            m.invoke(mNodes[ct].mScript,new Object[]{kernelIn,kernelOut});
          }
 catch (          Throwable t) {
            android.util.Log.e("RSR","execute error " + t);
          }
        }
 else {
          try {
            Method m=mNodes[ct].mScript.getClass().getMethod("forEach_root",new Class[]{Allocation.class});
            m.invoke(mNodes[ct].mScript,new Object[]{kernelOut});
          }
 catch (          Throwable t) {
            android.util.Log.e("RSR","execute error " + t);
          }
        }
      }
    }
    depth++;
  }
}
