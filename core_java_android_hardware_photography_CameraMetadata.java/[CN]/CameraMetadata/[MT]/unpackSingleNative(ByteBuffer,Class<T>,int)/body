{
  T val;
  if (nativeType == TYPE_BYTE) {
    val=(T)(Byte)buffer.get();
  }
 else   if (nativeType == TYPE_INT32) {
    val=(T)(Integer)buffer.getInt();
  }
 else   if (nativeType == TYPE_FLOAT) {
    val=(T)(Float)buffer.getFloat();
  }
 else   if (nativeType == TYPE_INT64) {
    val=(T)(Long)buffer.getLong();
  }
 else   if (nativeType == TYPE_DOUBLE) {
    val=(T)(Double)buffer.getDouble();
  }
 else   if (nativeType == TYPE_RATIONAL) {
    val=(T)new Rational(buffer.getInt(),buffer.getInt());
  }
 else {
    throw new UnsupportedOperationException("Unknown type, can't unpack a native type " + nativeType);
  }
  if (nativeType == TYPE_BYTE && type == Boolean.TYPE) {
    byte asByte=(Byte)val;
    boolean asBool=asByte != 0;
    val=(T)(Boolean)asBool;
  }
 else   if (nativeType == TYPE_BYTE && type == Integer.TYPE) {
    byte asByte=(Byte)val;
    int asInt=asByte;
    val=(T)(Integer)asInt;
  }
 else   if (type != getExpectedType(nativeType)) {
    throw new UnsupportedOperationException("Tried to unpack a type of " + type + " but we expected the type to be "+ getExpectedType(nativeType));
  }
  return val;
}
