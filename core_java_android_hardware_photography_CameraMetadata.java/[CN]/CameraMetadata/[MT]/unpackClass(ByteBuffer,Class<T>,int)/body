{
  List<Field> instanceFields=findInstanceFields(type);
  if (instanceFields.size() == 0) {
    throw new UnsupportedOperationException("Class has no instance fields: " + type);
  }
  int fieldCount=instanceFields.size();
  Constructor<T> constructor=findApplicableConstructor(type);
  Object[] arguments=new Object[fieldCount];
  for (int i=0; i < fieldCount; ++i) {
    Object o=unpackSingle(buffer,instanceFields.get(i).getType(),nativeType);
    arguments[i]=o;
  }
  T instance;
  try {
    instance=constructor.newInstance(arguments);
  }
 catch (  InstantiationException e) {
    throw new UnsupportedOperationException("Failed to instantiate type " + type,e);
  }
catch (  IllegalAccessException e) {
    throw new UnsupportedOperationException("Failed to access type " + type,e);
  }
catch (  IllegalArgumentException e) {
    throw new UnsupportedOperationException("Illegal arguments for constructor of type " + type,e);
  }
catch (  InvocationTargetException e) {
    throw new UnsupportedOperationException("Underlying constructor threw exception for type " + type,e);
  }
  return instance;
}
