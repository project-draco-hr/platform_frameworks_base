{
  List<Field> instanceFields=findInstanceFields(type);
  if (instanceFields.size() == 0) {
    throw new UnsupportedOperationException("Class has no instance fields: " + type);
  }
  int fieldCount=instanceFields.size();
  int bufferSize=0;
  HashSet<Class<?>> fieldTypes=new HashSet<Class<?>>();
  for (  Field f : instanceFields) {
    fieldTypes.add(f.getType());
  }
  for (int i=0; i < fieldCount; ++i) {
    Object arg;
    Field f=instanceFields.get(i);
    if ((f.getModifiers() & Modifier.PUBLIC) != 0) {
      try {
        arg=f.get(value);
      }
 catch (      IllegalAccessException e) {
        throw new UnsupportedOperationException("Failed to access field " + f + " of type "+ type,e);
      }
catch (      IllegalArgumentException e) {
        throw new UnsupportedOperationException("Illegal arguments when accessing field " + f + " of type "+ type,e);
      }
    }
 else {
      Method accessor=null;
      for (      Method m : type.getMethods()) {
        Log.v(TAG,String.format("Looking for getter in method %s for field %s",m,f));
        if (m.getParameterTypes().length != 0) {
          continue;
        }
        if (m.getReturnType() != f.getType()) {
          continue;
        }
        String fieldName=f.getName();
        char[] nameChars=f.getName().toCharArray();
        if (nameChars.length >= 2 && nameChars[0] == 'm' && Character.isUpperCase(nameChars[1])) {
          fieldName=String.valueOf(nameChars,1,nameChars.length - 1);
        }
        Log.v(TAG,String.format("Normalized field name: %s",fieldName));
        if (m.getName().toLowerCase().equals(fieldName.toLowerCase()) || m.getName().toLowerCase().equals("get" + fieldName.toLowerCase())) {
          accessor=m;
          break;
        }
      }
      if (accessor == null) {
        throw new UnsupportedOperationException("Failed to find getter method for field " + f + " in type "+ type);
      }
      try {
        arg=accessor.invoke(value);
      }
 catch (      IllegalAccessException e) {
        throw new UnsupportedOperationException("Failed to access method + " + accessor + " in type "+ type,e);
      }
catch (      IllegalArgumentException e) {
        throw new UnsupportedOperationException("Bad arguments for method + " + accessor + " in type "+ type,e);
      }
catch (      InvocationTargetException e) {
        throw new UnsupportedOperationException("Failed to invoke method + " + accessor + " in type "+ type,e);
      }
    }
    bufferSize+=packSingle(arg,buffer,(Class<Object>)f.getType(),nativeType,sizeOnly);
  }
  return bufferSize;
}
