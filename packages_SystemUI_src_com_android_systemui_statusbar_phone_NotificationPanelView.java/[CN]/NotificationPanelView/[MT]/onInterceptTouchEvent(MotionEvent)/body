{
  if (mBlockTouches) {
    return false;
  }
  resetDownStates(event);
  int pointerIndex=event.findPointerIndex(mTrackingPointer);
  if (pointerIndex < 0) {
    pointerIndex=0;
    mTrackingPointer=event.getPointerId(pointerIndex);
  }
  final float x=event.getX(pointerIndex);
  final float y=event.getY(pointerIndex);
switch (event.getActionMasked()) {
case MotionEvent.ACTION_DOWN:
    mIntercepting=true;
  mInitialTouchY=y;
mInitialTouchX=x;
initVelocityTracker();
trackMovement(event);
if (shouldQuickSettingsIntercept(mInitialTouchX,mInitialTouchY,0)) {
getParent().requestDisallowInterceptTouchEvent(true);
}
if (mQsExpansionAnimator != null) {
onQsExpansionStarted();
mInitialHeightOnTouch=mQsExpansionHeight;
mQsTracking=true;
mIntercepting=false;
mNotificationStackScroller.removeLongPressCallback();
}
break;
case MotionEvent.ACTION_POINTER_UP:
final int upPointer=event.getPointerId(event.getActionIndex());
if (mTrackingPointer == upPointer) {
final int newIndex=event.getPointerId(0) != upPointer ? 0 : 1;
mTrackingPointer=event.getPointerId(newIndex);
mInitialTouchX=event.getX(newIndex);
mInitialTouchY=event.getY(newIndex);
}
break;
case MotionEvent.ACTION_MOVE:
final float h=y - mInitialTouchY;
trackMovement(event);
if (mQsTracking) {
setQsExpansion(h + mInitialHeightOnTouch);
trackMovement(event);
mIntercepting=false;
return true;
}
if (Math.abs(h) > mTouchSlop && Math.abs(h) > Math.abs(x - mInitialTouchX) && shouldQuickSettingsIntercept(mInitialTouchX,mInitialTouchY,h)) {
onQsExpansionStarted();
mInitialHeightOnTouch=mQsExpansionHeight;
mInitialTouchY=y;
mInitialTouchX=x;
mQsTracking=true;
mIntercepting=false;
mNotificationStackScroller.removeLongPressCallback();
return true;
}
break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
trackMovement(event);
if (mQsTracking) {
flingQsWithCurrentVelocity(event.getActionMasked() == MotionEvent.ACTION_CANCEL);
mQsTracking=false;
}
mIntercepting=false;
break;
}
return super.onInterceptTouchEvent(event);
}
