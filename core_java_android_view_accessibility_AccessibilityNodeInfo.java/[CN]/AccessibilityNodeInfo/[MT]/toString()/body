{
  StringBuilder builder=new StringBuilder();
  builder.append(super.toString());
  if (DEBUG) {
    builder.append("; accessibilityViewId: " + getAccessibilityViewId(mSourceNodeId));
    builder.append("; virtualDescendantId: " + getVirtualDescendantId(mSourceNodeId));
    builder.append("; mParentNodeId: " + mParentNodeId);
    SparseLongArray childIds=mChildIds;
    builder.append("; childAccessibilityIds: [");
    for (int i=0, count=childIds.size(); i < count; i++) {
      builder.append(childIds.valueAt(i));
      if (i < count - 1) {
        builder.append(", ");
      }
    }
    builder.append("]");
  }
  builder.append("; boundsInParent: " + mBoundsInParent);
  builder.append("; boundsInScreen: " + mBoundsInScreen);
  builder.append("; packageName: ").append(mPackageName);
  builder.append("; className: ").append(mClassName);
  builder.append("; text: ").append(mText);
  builder.append("; contentDescription: ").append(mContentDescription);
  builder.append("; checkable: ").append(isCheckable());
  builder.append("; checked: ").append(isChecked());
  builder.append("; focusable: ").append(isFocusable());
  builder.append("; focused: ").append(isFocused());
  builder.append("; selected: ").append(isSelected());
  builder.append("; clickable: ").append(isClickable());
  builder.append("; longClickable: ").append(isLongClickable());
  builder.append("; enabled: ").append(isEnabled());
  builder.append("; password: ").append(isPassword());
  builder.append("; scrollable: " + isScrollable());
  builder.append("; [");
  for (int actionBits=mActions; actionBits != 0; ) {
    final int action=1 << Integer.numberOfTrailingZeros(actionBits);
    actionBits&=~action;
    builder.append(getActionSymbolicName(action));
    if (actionBits != 0) {
      builder.append(", ");
    }
  }
  builder.append("]");
  return builder.toString();
}
