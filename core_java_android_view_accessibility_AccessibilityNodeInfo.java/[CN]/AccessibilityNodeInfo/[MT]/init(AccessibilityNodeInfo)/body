{
  mSealed=other.mSealed;
  mSourceNodeId=other.mSourceNodeId;
  mParentNodeId=other.mParentNodeId;
  mLabelForId=other.mLabelForId;
  mLabeledById=other.mLabeledById;
  mTraversalBefore=other.mTraversalBefore;
  mTraversalAfter=other.mTraversalAfter;
  mWindowId=other.mWindowId;
  mConnectionId=other.mConnectionId;
  mBoundsInParent.set(other.mBoundsInParent);
  mBoundsInScreen.set(other.mBoundsInScreen);
  mPackageName=other.mPackageName;
  mClassName=other.mClassName;
  mText=other.mText;
  mError=other.mError;
  mContentDescription=other.mContentDescription;
  mViewIdResourceName=other.mViewIdResourceName;
  final ArrayList<AccessibilityAction> otherActions=other.mActions;
  if (otherActions != null && otherActions.size() > 0) {
    if (mActions == null) {
      mActions=new ArrayList(otherActions);
    }
 else {
      mActions.clear();
      mActions.addAll(other.mActions);
    }
  }
  mBooleanProperties=other.mBooleanProperties;
  mMaxTextLength=other.mMaxTextLength;
  mMovementGranularities=other.mMovementGranularities;
  final LongArray otherChildNodeIds=other.mChildNodeIds;
  if (otherChildNodeIds != null && otherChildNodeIds.size() > 0) {
    if (mChildNodeIds == null) {
      mChildNodeIds=otherChildNodeIds.clone();
    }
 else {
      mChildNodeIds.clear();
      mChildNodeIds.addAll(otherChildNodeIds);
    }
  }
  mTextSelectionStart=other.mTextSelectionStart;
  mTextSelectionEnd=other.mTextSelectionEnd;
  mInputType=other.mInputType;
  mLiveRegion=other.mLiveRegion;
  if (other.mExtras != null && !other.mExtras.isEmpty()) {
    getExtras().putAll(other.mExtras);
  }
  mRangeInfo=(other.mRangeInfo != null) ? RangeInfo.obtain(other.mRangeInfo) : null;
  mCollectionInfo=(other.mCollectionInfo != null) ? CollectionInfo.obtain(other.mCollectionInfo) : null;
  mCollectionItemInfo=(other.mCollectionItemInfo != null) ? CollectionItemInfo.obtain(other.mCollectionItemInfo) : null;
}
