{
  float[] pointComponents=path.approximate(PRECISION);
  int numPoints=pointComponents.length / 3;
  if (pointComponents[1] != 0 || pointComponents[2] != 0 || pointComponents[pointComponents.length - 2] != 1 || pointComponents[pointComponents.length - 1] != 1) {
    throw new IllegalArgumentException("The Path must start at (0,0) and end at (1,1)");
  }
  mX=new float[numPoints];
  mY=new float[numPoints];
  mDist=new float[numPoints];
  float prevX=0;
  float prevFraction=0;
  int componentIndex=0;
  for (int i=0; i < numPoints; i++) {
    float fraction=pointComponents[componentIndex++];
    float x=pointComponents[componentIndex++];
    float y=pointComponents[componentIndex++];
    if (fraction == prevFraction && x != prevX) {
      throw new IllegalArgumentException("The Path cannot have discontinuity in the X axis.");
    }
    if (x < prevX) {
      throw new IllegalArgumentException("The Path cannot loop back on itself.");
    }
    mX[i]=x;
    mY[i]=y;
    if (i > 0) {
      float dx=mX[i] - mX[i - 1];
      float dy=mY[i] - mY[i - 1];
      float dist=(float)Math.sqrt(dx * dx + dy * dy);
      mDist[i]=mDist[i - 1] + dist;
    }
    prevX=x;
    prevFraction=fraction;
  }
  float max=mDist[mDist.length - 1];
  for (int i=0; i < numPoints; i++) {
    mDist[i]/=max;
  }
}
