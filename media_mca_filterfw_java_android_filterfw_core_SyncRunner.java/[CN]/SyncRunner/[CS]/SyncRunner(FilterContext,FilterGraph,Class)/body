{
  super(context);
  mLogVerbose=Log.isLoggable(TAG,Log.VERBOSE);
  if (mLogVerbose)   Log.v(TAG,"Initializing SyncRunner");
  if (Scheduler.class.isAssignableFrom(schedulerClass)) {
    try {
      Constructor schedulerConstructor=schedulerClass.getConstructor(FilterGraph.class);
      mScheduler=(Scheduler)schedulerConstructor.newInstance(graph);
    }
 catch (    NoSuchMethodException e) {
      throw new RuntimeException("Scheduler does not have constructor <init>(FilterGraph)!",e);
    }
catch (    InstantiationException e) {
      throw new RuntimeException("Could not instantiate the Scheduler instance!",e);
    }
catch (    IllegalAccessException e) {
      throw new RuntimeException("Cannot access Scheduler constructor!",e);
    }
catch (    InvocationTargetException e) {
      throw new RuntimeException("Scheduler constructor threw an exception",e);
    }
catch (    Exception e) {
      throw new RuntimeException("Could not instantiate Scheduler",e);
    }
  }
 else {
    throw new IllegalArgumentException("Class provided is not a Scheduler subclass!");
  }
  mFilterContext=context;
  mFilterContext.addGraph(graph);
  mTimer=new StopWatchMap();
  if (mLogVerbose)   Log.v(TAG,"Setting up filters");
  graph.setupFilters();
}
