{
  if (task == null) {
    transformOut.reset();
    return transformOut;
  }
  int numPeekCards=StackPeekNumCards;
  float overlapHeight=StackOverlapPct * mTaskRect.height();
  float peekHeight=StackPeekHeightPct * mStackRect.height();
  float t=(getStackScrollForTaskIndex(task) - stackScroll) / overlapHeight;
  float boundedT=Math.max(t,-(numPeekCards + 1));
  int numFrontScaledCards=3;
  float minScale=StackPeekMinScale;
  float scaleRange=1f - minScale;
  float scaleInc=scaleRange / (numPeekCards + numFrontScaledCards);
  float scale=Math.max(minScale,Math.min(1f,minScale + ((boundedT + (numPeekCards + 1)) * scaleInc)));
  float scaleYOffset=((1f - scale) * mTaskRect.height()) / 2;
  float scaleBarYOffset=(1f - scale) * mConfig.taskBarHeight;
  transformOut.scale=scale;
  if (boundedT < 0f) {
    transformOut.translationY=(int)((Math.max(-numPeekCards,boundedT) / numPeekCards) * peekHeight - scaleYOffset);
  }
 else {
    transformOut.translationY=(int)(boundedT * overlapHeight - scaleYOffset);
  }
  int minZ=mConfig.taskViewTranslationZMinPx;
  int incZ=mConfig.taskViewTranslationZIncrementPx;
  transformOut.translationZ=(int)Math.max(minZ,minZ + ((boundedT + numPeekCards) * incZ));
  transformOut.dismissAlpha=1f;
  transformOut.rect.set(mTaskRect);
  if (t < -(numPeekCards + 1)) {
    transformOut.visible=false;
  }
 else {
    transformOut.rect.offset(0,transformOut.translationY);
    Utilities.scaleRectAboutCenter(transformOut.rect,transformOut.scale);
    transformOut.visible=Rect.intersects(mViewRect,transformOut.rect);
  }
  transformOut.t=t;
  return transformOut;
}
