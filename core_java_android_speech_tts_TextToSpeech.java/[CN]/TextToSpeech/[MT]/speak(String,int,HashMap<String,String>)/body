{
synchronized (mStartLock) {
    int result=ERROR;
    Log.i("TextToSpeech.java - speak","speak text of length " + text.length());
    if (!mStarted) {
      Log.e("TextToSpeech.java - speak","service isn't started");
      return result;
    }
    try {
      if ((params != null) && (!params.isEmpty())) {
        setCachedParam(params,Engine.KEY_PARAM_STREAM,Engine.PARAM_POSITION_STREAM);
        setCachedParam(params,Engine.KEY_PARAM_UTTERANCE_ID,Engine.PARAM_POSITION_UTTERANCE_ID);
        setCachedParam(params,Engine.KEY_PARAM_ENGINE,Engine.PARAM_POSITION_ENGINE);
        setCachedParam(params,Engine.KEY_PARAM_VOLUME,Engine.PARAM_POSITION_VOLUME);
        setCachedParam(params,Engine.KEY_PARAM_PAN,Engine.PARAM_POSITION_PAN);
      }
      result=mITts.speak(mPackageName,text,queueMode,mCachedParams);
    }
 catch (    RemoteException e) {
      Log.e("TextToSpeech.java - speak","RemoteException");
      e.printStackTrace();
      mStarted=false;
      initTts();
    }
catch (    NullPointerException e) {
      Log.e("TextToSpeech.java - speak","NullPointerException");
      e.printStackTrace();
      mStarted=false;
      initTts();
    }
catch (    IllegalStateException e) {
      Log.e("TextToSpeech.java - speak","IllegalStateException");
      e.printStackTrace();
      mStarted=false;
      initTts();
    }
 finally {
      resetCachedParams();
      return result;
    }
  }
}
