{
synchronized (mStartLock) {
    int result=LANG_NOT_SUPPORTED;
    if (!mStarted) {
      return result;
    }
    try {
      String language=loc.getISO3Language();
      String country=loc.getISO3Country();
      String variant=loc.getVariant();
      result=mITts.isLanguageAvailable(language,country,variant,mCachedParams);
      if (result >= LANG_AVAILABLE) {
        mCachedParams[Engine.PARAM_POSITION_LANGUAGE + 1]=language;
        if (result >= LANG_COUNTRY_AVAILABLE) {
          mCachedParams[Engine.PARAM_POSITION_COUNTRY + 1]=country;
        }
 else {
          mCachedParams[Engine.PARAM_POSITION_COUNTRY + 1]="";
        }
        if (result >= LANG_COUNTRY_VAR_AVAILABLE) {
          mCachedParams[Engine.PARAM_POSITION_VARIANT + 1]=variant;
        }
 else {
          mCachedParams[Engine.PARAM_POSITION_VARIANT + 1]="";
        }
      }
    }
 catch (    RemoteException e) {
      Log.e("TextToSpeech.java - setLanguage","RemoteException");
      e.printStackTrace();
      mStarted=false;
      initTts();
    }
catch (    NullPointerException e) {
      Log.e("TextToSpeech.java - setLanguage","NullPointerException");
      e.printStackTrace();
      mStarted=false;
      initTts();
    }
catch (    IllegalStateException e) {
      Log.e("TextToSpeech.java - setLanguage","IllegalStateException");
      e.printStackTrace();
      mStarted=false;
      initTts();
    }
 finally {
      return result;
    }
  }
}
