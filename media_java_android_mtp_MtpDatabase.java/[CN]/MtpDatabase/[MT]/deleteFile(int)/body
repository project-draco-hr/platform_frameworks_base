{
  mDatabaseModified=true;
  String path=null;
  int format=0;
  Cursor c=null;
  try {
    c=mMediaProvider.query(mObjectsUri,PATH_FORMAT_PROJECTION,ID_WHERE,new String[]{Integer.toString(handle)},null,null);
    if (c != null && c.moveToNext()) {
      path=c.getString(1);
      format=c.getInt(2);
    }
 else {
      return MtpConstants.RESPONSE_INVALID_OBJECT_HANDLE;
    }
    if (path == null || format == 0) {
      return MtpConstants.RESPONSE_GENERAL_ERROR;
    }
    if (isStorageSubDirectory(path)) {
      return MtpConstants.RESPONSE_OBJECT_WRITE_PROTECTED;
    }
    if (format == MtpConstants.FORMAT_ASSOCIATION) {
      Uri uri=Files.getMtpObjectsUri(mVolumeName);
      int count=mMediaProvider.delete(uri,"_data LIKE ?1 AND lower(substr(_data,1,?2))=lower(?3)",new String[]{path + "/%",Integer.toString(path.length() + 1),path + "/"});
    }
    Uri uri=Files.getMtpObjectsUri(mVolumeName,handle);
    if (mMediaProvider.delete(uri,null,null) > 0) {
      if (format != MtpConstants.FORMAT_ASSOCIATION && path.toLowerCase(Locale.US).endsWith("/.nomedia")) {
        try {
          String parentPath=path.substring(0,path.lastIndexOf("/"));
          mMediaProvider.call(MediaStore.UNHIDE_CALL,parentPath,null);
        }
 catch (        RemoteException e) {
          Log.e(TAG,"failed to unhide/rescan for " + path);
        }
      }
      return MtpConstants.RESPONSE_OK;
    }
 else {
      return MtpConstants.RESPONSE_INVALID_OBJECT_HANDLE;
    }
  }
 catch (  RemoteException e) {
    Log.e(TAG,"RemoteException in deleteFile",e);
    return MtpConstants.RESPONSE_GENERAL_ERROR;
  }
 finally {
    if (c != null) {
      c.close();
    }
  }
}
