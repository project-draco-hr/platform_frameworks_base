{
  if (encoding == UserData.ENCODING_7BIT_ASCII || encoding == UserData.ENCODING_IA5) {
    int charCount=body.length();
    int recordBits=(charCount * 7) + 5;
    int recordOctets=(recordBits + 7) / 8;
    int padBits=(recordOctets * 8) - recordBits;
    if (!isCmasRecord) {
      recordOctets++;
    }
    bos.write(8,recordOctets);
    bos.write(5,(encoding & 0x1f));
    if (!isCmasRecord) {
      bos.write(8,charCount);
    }
    for (int i=0; i < charCount; i++) {
      bos.write(7,body.charAt(i));
    }
    bos.write(padBits,0);
  }
 else   if (encoding == UserData.ENCODING_GSM_7BIT_ALPHABET || encoding == UserData.ENCODING_GSM_DCS) {
    byte[] encodedBody=GsmAlphabet.stringToGsm7BitPacked(body);
    int charCount=encodedBody[0];
    int recordBits=(charCount * 7) + 5;
    int recordOctets=(recordBits + 7) / 8;
    int padBits=(recordOctets * 8) - recordBits;
    if (!isCmasRecord) {
      recordOctets++;
      if (encoding == UserData.ENCODING_GSM_DCS) {
        recordOctets++;
      }
    }
    bos.write(8,recordOctets);
    bos.write(5,(encoding & 0x1f));
    if (!isCmasRecord && encoding == UserData.ENCODING_GSM_DCS) {
      bos.write(8,0);
    }
    if (!isCmasRecord) {
      bos.write(8,charCount);
    }
    byte[] bodySeptets=Arrays.copyOfRange(encodedBody,1,encodedBody.length);
    bos.writeByteArray(charCount * 7,bodySeptets);
    bos.write(padBits,0);
  }
 else   if (encoding == UserData.ENCODING_IS91_EXTENDED_PROTOCOL) {
    int charCount=body.length();
    int recordBits=(charCount * 6) + 21;
    int recordOctets=(recordBits + 7) / 8;
    int padBits=(recordOctets * 8) - recordBits;
    bos.write(8,recordOctets);
    bos.write(5,(encoding & 0x1f));
    bos.write(8,UserData.IS91_MSG_TYPE_SHORT_MESSAGE);
    bos.write(8,charCount);
    for (int i=0; i < charCount; i++) {
      bos.write(6,((int)body.charAt(i) - 0x20));
    }
    bos.write(padBits,0);
  }
 else {
    byte[] encodedBody;
switch (encoding) {
case UserData.ENCODING_UNICODE_16:
      encodedBody=body.getBytes("UTF-16BE");
    break;
case UserData.ENCODING_SHIFT_JIS:
  encodedBody=body.getBytes("Shift_JIS");
break;
case UserData.ENCODING_KOREAN:
encodedBody=body.getBytes("KSC5601");
break;
case UserData.ENCODING_LATIN_HEBREW:
encodedBody=body.getBytes("ISO-8859-8");
break;
case UserData.ENCODING_LATIN:
default :
encodedBody=body.getBytes("ISO-8859-1");
break;
}
int charCount=body.length();
int recordOctets=encodedBody.length + 1;
if (!isCmasRecord) {
recordOctets++;
}
bos.write(8,recordOctets);
bos.write(5,(encoding & 0x1f));
if (!isCmasRecord) {
bos.write(8,charCount);
}
bos.writeByteArray(encodedBody.length * 8,encodedBody);
bos.write(3,0);
}
}
