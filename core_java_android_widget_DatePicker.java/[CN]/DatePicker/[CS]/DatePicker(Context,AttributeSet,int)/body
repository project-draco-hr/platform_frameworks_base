{
  super(context,attrs,defStyle);
  setCurrentLocale(Locale.getDefault());
  TypedArray attributesArray=context.obtainStyledAttributes(attrs,R.styleable.DatePicker,defStyle,0);
  boolean spinnersShown=attributesArray.getBoolean(R.styleable.DatePicker_spinnersShown,DEFAULT_SPINNERS_SHOWN);
  boolean calendarViewShown=attributesArray.getBoolean(R.styleable.DatePicker_calendarViewShown,DEFAULT_CALENDAR_VIEW_SHOWN);
  int startYear=attributesArray.getInt(R.styleable.DatePicker_startYear,DEFAULT_START_YEAR);
  int endYear=attributesArray.getInt(R.styleable.DatePicker_endYear,DEFAULT_END_YEAR);
  String minDate=attributesArray.getString(R.styleable.DatePicker_minDate);
  String maxDate=attributesArray.getString(R.styleable.DatePicker_maxDate);
  int layoutResourceId=attributesArray.getResourceId(R.styleable.DatePicker_layout,R.layout.date_picker);
  attributesArray.recycle();
  LayoutInflater inflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  inflater.inflate(layoutResourceId,this,true);
  OnValueChangeListener onChangeListener=new OnValueChangeListener(){
    public void onValueChange(    NumberPicker picker,    int oldVal,    int newVal){
      updateInputState();
      mTempDate.setTimeInMillis(mCurrentDate.getTimeInMillis());
      if (picker == mDaySpinner) {
        int maxDayOfMonth=mTempDate.getActualMaximum(Calendar.DAY_OF_MONTH);
        if (oldVal == maxDayOfMonth && newVal == 1) {
          mTempDate.add(Calendar.DAY_OF_MONTH,1);
        }
 else         if (oldVal == 1 && newVal == maxDayOfMonth) {
          mTempDate.add(Calendar.DAY_OF_MONTH,-1);
        }
 else {
          mTempDate.add(Calendar.DAY_OF_MONTH,newVal - oldVal);
        }
      }
 else       if (picker == mMonthSpinner) {
        if (oldVal == 11 && newVal == 0) {
          mTempDate.add(Calendar.MONTH,1);
        }
 else         if (oldVal == 0 && newVal == 11) {
          mTempDate.add(Calendar.MONTH,-1);
        }
 else {
          mTempDate.add(Calendar.MONTH,newVal - oldVal);
        }
      }
 else       if (picker == mYearSpinner) {
        mTempDate.set(Calendar.YEAR,newVal);
      }
 else {
        throw new IllegalArgumentException();
      }
      setDate(mTempDate.get(Calendar.YEAR),mTempDate.get(Calendar.MONTH),mTempDate.get(Calendar.DAY_OF_MONTH));
      updateSpinners();
      updateCalendarView();
      notifyDateChanged();
    }
  }
;
  mSpinners=(LinearLayout)findViewById(R.id.pickers);
  mCalendarView=(CalendarView)findViewById(R.id.calendar_view);
  mCalendarView.setOnDateChangeListener(new CalendarView.OnDateChangeListener(){
    public void onSelectedDayChange(    CalendarView view,    int year,    int month,    int monthDay){
      setDate(year,month,monthDay);
      updateSpinners();
      notifyDateChanged();
    }
  }
);
  mDaySpinner=(NumberPicker)findViewById(R.id.day);
  mDaySpinner.setFormatter(NumberPicker.TWO_DIGIT_FORMATTER);
  mDaySpinner.setOnLongPressUpdateInterval(100);
  mDaySpinner.setOnValueChangedListener(onChangeListener);
  mDaySpinnerInput=(EditText)mDaySpinner.findViewById(R.id.numberpicker_input);
  mMonthSpinner=(NumberPicker)findViewById(R.id.month);
  mMonthSpinner.setMinValue(0);
  mMonthSpinner.setMaxValue(mNumberOfMonths - 1);
  mMonthSpinner.setDisplayedValues(mShortMonths);
  mMonthSpinner.setOnLongPressUpdateInterval(200);
  mMonthSpinner.setOnValueChangedListener(onChangeListener);
  mMonthSpinnerInput=(EditText)mMonthSpinner.findViewById(R.id.numberpicker_input);
  mYearSpinner=(NumberPicker)findViewById(R.id.year);
  mYearSpinner.setOnLongPressUpdateInterval(100);
  mYearSpinner.setOnValueChangedListener(onChangeListener);
  mYearSpinnerInput=(EditText)mYearSpinner.findViewById(R.id.numberpicker_input);
  if (!spinnersShown && !calendarViewShown) {
    setSpinnersShown(true);
  }
 else {
    setSpinnersShown(spinnersShown);
    setCalendarViewShown(calendarViewShown);
  }
  mTempDate.clear();
  if (!TextUtils.isEmpty(minDate)) {
    if (!parseDate(minDate,mTempDate)) {
      mTempDate.set(startYear,0,1);
    }
  }
 else {
    mTempDate.set(startYear,0,1);
  }
  setMinDate(mTempDate.getTimeInMillis());
  mTempDate.clear();
  if (!TextUtils.isEmpty(maxDate)) {
    if (!parseDate(maxDate,mTempDate)) {
      mTempDate.set(endYear,11,31);
    }
  }
 else {
    mTempDate.set(endYear,11,31);
  }
  setMaxDate(mTempDate.getTimeInMillis());
  mCurrentDate.setTimeInMillis(System.currentTimeMillis());
  init(mCurrentDate.get(Calendar.YEAR),mCurrentDate.get(Calendar.MONTH),mCurrentDate.get(Calendar.DAY_OF_MONTH),null);
  reorderSpinners();
  if (AccessibilityManager.getInstance(mContext).isEnabled()) {
    setContentDescriptions();
  }
}
