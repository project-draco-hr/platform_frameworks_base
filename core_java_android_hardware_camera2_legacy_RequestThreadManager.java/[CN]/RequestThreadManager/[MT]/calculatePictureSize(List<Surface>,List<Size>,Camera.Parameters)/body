{
  if (callbackOutputs.size() != callbackSizes.size()) {
    throw new IllegalStateException("Input collections must be same length");
  }
  List<Size> configuredJpegSizes=new ArrayList<>();
  Iterator<Size> sizeIterator=callbackSizes.iterator();
  for (  Surface callbackSurface : callbackOutputs) {
    Size jpegSize=sizeIterator.next();
    if (!LegacyCameraDevice.containsSurfaceId(callbackSurface,mJpegSurfaceIds)) {
      continue;
    }
    configuredJpegSizes.add(jpegSize);
  }
  if (!configuredJpegSizes.isEmpty()) {
    int maxConfiguredJpegWidth=-1;
    int maxConfiguredJpegHeight=-1;
    for (    Size jpegSize : configuredJpegSizes) {
      maxConfiguredJpegWidth=jpegSize.getWidth() > maxConfiguredJpegWidth ? jpegSize.getWidth() : maxConfiguredJpegWidth;
      maxConfiguredJpegHeight=jpegSize.getHeight() > maxConfiguredJpegHeight ? jpegSize.getHeight() : maxConfiguredJpegHeight;
    }
    Size smallestBoundJpegSize=new Size(maxConfiguredJpegWidth,maxConfiguredJpegHeight);
    List<Size> supportedJpegSizes=ParameterUtils.convertSizeList(params.getSupportedPictureSizes());
    List<Size> candidateSupportedJpegSizes=new ArrayList<>();
    for (    Size supportedJpegSize : supportedJpegSizes) {
      if (supportedJpegSize.getWidth() >= maxConfiguredJpegWidth && supportedJpegSize.getHeight() >= maxConfiguredJpegHeight) {
        candidateSupportedJpegSizes.add(supportedJpegSize);
      }
    }
    if (candidateSupportedJpegSizes.isEmpty()) {
      throw new AssertionError("Could not find any supported JPEG sizes large enough to fit " + smallestBoundJpegSize);
    }
    Size smallestSupportedJpegSize=Collections.min(candidateSupportedJpegSizes,new SizeAreaComparator());
    if (!smallestSupportedJpegSize.equals(smallestBoundJpegSize)) {
      Log.w(TAG,String.format("configureOutputs - Will need to crop picture %s into " + "smallest bound size %s",smallestSupportedJpegSize,smallestBoundJpegSize));
    }
    return smallestSupportedJpegSize;
  }
  return null;
}
