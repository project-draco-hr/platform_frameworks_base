{
  if (mActionMode != null) {
    mActionMode.finish();
  }
  final ActionMode.Callback wrappedCallback=new ActionModeCallbackWrapper(callback);
  ActionMode mode=null;
  if (getCallback() != null && !isDestroyed()) {
    try {
      mode=getCallback().onWindowStartingActionMode(wrappedCallback);
    }
 catch (    AbstractMethodError ame) {
    }
  }
  if (mode != null) {
    mActionMode=mode;
  }
 else {
    if (mActionModeView != null) {
      mActionModeView.killMode();
    }
    ActionModeWrapper wrapperMode=new ActionModeWrapper(mContext,wrappedCallback);
    if (callback.onCreateActionMode(wrapperMode,wrapperMode.getMenu())) {
      if (wrapperMode.getType() == ActionMode.TYPE_PRIMARY) {
        if (mActionModeView == null) {
          if (isFloating()) {
            final TypedValue outValue=new TypedValue();
            final Theme baseTheme=mContext.getTheme();
            baseTheme.resolveAttribute(R.attr.actionBarTheme,outValue,true);
            final Context actionBarContext;
            if (outValue.resourceId != 0) {
              final Theme actionBarTheme=mContext.getResources().newTheme();
              actionBarTheme.setTo(baseTheme);
              actionBarTheme.applyStyle(outValue.resourceId,true);
              actionBarContext=new ContextThemeWrapper(mContext,0);
              actionBarContext.getTheme().setTo(actionBarTheme);
            }
 else {
              actionBarContext=mContext;
            }
            mActionModeView=new ActionBarContextView(actionBarContext);
            mActionModePopup=new PopupWindow(actionBarContext,null,R.attr.actionModePopupWindowStyle);
            mActionModePopup.setWindowLayoutType(WindowManager.LayoutParams.TYPE_APPLICATION);
            mActionModePopup.setContentView(mActionModeView);
            mActionModePopup.setWidth(MATCH_PARENT);
            actionBarContext.getTheme().resolveAttribute(R.attr.actionBarSize,outValue,true);
            final int height=TypedValue.complexToDimensionPixelSize(outValue.data,actionBarContext.getResources().getDisplayMetrics());
            mActionModeView.setContentHeight(height);
            mActionModePopup.setHeight(WRAP_CONTENT);
            mShowActionModePopup=new Runnable(){
              public void run(){
                mActionModePopup.showAtLocation(mActionModeView.getApplicationWindowToken(),Gravity.TOP | Gravity.FILL_HORIZONTAL,0,0);
              }
            }
;
          }
 else {
            ViewStub stub=(ViewStub)findViewById(R.id.action_mode_bar_stub);
            if (stub != null) {
              mActionModeView=(ActionBarContextView)stub.inflate();
            }
          }
        }
        if (mActionModeView != null) {
          wrapperMode.setActionModeView(mActionModeView);
          wrapperMode.setFocusable(mActionModePopup == null);
          wrapperMode.lockType();
          wrapperMode.invalidate();
          mActionModeView.initForMode(wrapperMode);
          mActionModeView.setVisibility(View.VISIBLE);
          mActionMode=wrapperMode;
          if (mActionModePopup != null) {
            post(mShowActionModePopup);
          }
          mActionModeView.sendAccessibilityEvent(AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED);
        }
      }
    }
 else {
      mActionMode=null;
    }
  }
  if (mActionMode != null && getCallback() != null && !isDestroyed()) {
    try {
      getCallback().onActionModeStarted(mActionMode);
    }
 catch (    AbstractMethodError ame) {
    }
  }
  return mActionMode;
}
