{
  final Intent intent=r.intent;
  final int callingUid=r.launchedFromUid;
  final Rect newBounds=getOverrideBounds(r,options,inTask);
  final boolean overrideBounds=newBounds != null;
  if (inTask != null && !inTask.inRecents) {
    Slog.w(TAG,"Starting activity in task not in recents: " + inTask);
    inTask=null;
  }
  final boolean launchSingleTop=r.launchMode == ActivityInfo.LAUNCH_SINGLE_TOP;
  final boolean launchSingleInstance=r.launchMode == ActivityInfo.LAUNCH_SINGLE_INSTANCE;
  final boolean launchSingleTask=r.launchMode == ActivityInfo.LAUNCH_SINGLE_TASK;
  int launchFlags=adjustLaunchFlagsToDocumentMode(r,launchSingleInstance,launchSingleTask,intent.getFlags());
  final boolean launchTaskBehind=r.mLaunchTaskBehind && !launchSingleTask && !launchSingleInstance&& (launchFlags & Intent.FLAG_ACTIVITY_NEW_DOCUMENT) != 0;
  if (r.resultTo != null && (launchFlags & FLAG_ACTIVITY_NEW_TASK) != 0 && r.resultTo.task.stack != null) {
    Slog.w(TAG,"Activity is launching as a new task, so cancelling activity result.");
    r.resultTo.task.stack.sendActivityResultLocked(-1,r.resultTo,r.resultWho,r.requestCode,Activity.RESULT_CANCELED,null);
    r.resultTo=null;
  }
  if ((launchFlags & Intent.FLAG_ACTIVITY_NEW_DOCUMENT) != 0 && r.resultTo == null) {
    launchFlags|=FLAG_ACTIVITY_NEW_TASK;
  }
  if ((launchFlags & FLAG_ACTIVITY_NEW_TASK) != 0) {
    if (launchTaskBehind || r.info.documentLaunchMode == ActivityInfo.DOCUMENT_LAUNCH_ALWAYS) {
      launchFlags|=FLAG_ACTIVITY_MULTIPLE_TASK;
    }
  }
  mSupervisor.mUserLeaving=(launchFlags & Intent.FLAG_ACTIVITY_NO_USER_ACTION) == 0;
  if (DEBUG_USER_LEAVING)   Slog.v(TAG_USER_LEAVING,"startActivity() => mUserLeaving=" + mSupervisor.mUserLeaving);
  if (!doResume || !mSupervisor.okToShowLocked(r)) {
    r.delayedResume=true;
    doResume=false;
  }
  final ActivityRecord notTop=(launchFlags & Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP) != 0 ? r : null;
  if ((startFlags & ActivityManager.START_FLAG_ONLY_IF_NEEDED) != 0) {
    ActivityRecord checkedCaller=sourceRecord;
    if (checkedCaller == null) {
      checkedCaller=mSupervisor.mFocusedStack.topRunningNonDelayedActivityLocked(notTop);
    }
    if (!checkedCaller.realActivity.equals(r.realActivity)) {
      startFlags&=~ActivityManager.START_FLAG_ONLY_IF_NEEDED;
    }
  }
  boolean addingToTask=false;
  TaskRecord reuseTask=null;
  if (sourceRecord == null && inTask != null && inTask.stack != null) {
    final Intent baseIntent=inTask.getBaseIntent();
    final ActivityRecord root=inTask.getRootActivity();
    if (baseIntent == null) {
      ActivityOptions.abort(options);
      throw new IllegalArgumentException("Launching into task without base intent: " + inTask);
    }
    if (launchSingleInstance || launchSingleTask) {
      if (!baseIntent.getComponent().equals(r.intent.getComponent())) {
        ActivityOptions.abort(options);
        throw new IllegalArgumentException("Trying to launch singleInstance/Task " + r + " into different task "+ inTask);
      }
      if (root != null) {
        ActivityOptions.abort(options);
        throw new IllegalArgumentException("Caller with inTask " + inTask + " has root "+ root+ " but target is singleInstance/Task");
      }
    }
    if (root == null) {
      final int flagsOfInterest=FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_MULTIPLE_TASK | Intent.FLAG_ACTIVITY_NEW_DOCUMENT| Intent.FLAG_ACTIVITY_RETAIN_IN_RECENTS;
      launchFlags=(launchFlags & ~flagsOfInterest) | (baseIntent.getFlags() & flagsOfInterest);
      intent.setFlags(launchFlags);
      inTask.setIntent(r);
      addingToTask=true;
    }
 else     if ((launchFlags & FLAG_ACTIVITY_NEW_TASK) != 0) {
      addingToTask=false;
    }
 else {
      addingToTask=true;
    }
    reuseTask=inTask;
  }
 else {
    inTask=null;
    if ((r.isResolverActivity() || r.noDisplay) && sourceRecord != null && sourceRecord.isFreeform()) {
      addingToTask=true;
    }
  }
  if (inTask == null) {
    if (sourceRecord == null) {
      if ((launchFlags & FLAG_ACTIVITY_NEW_TASK) == 0 && inTask == null) {
        Slog.w(TAG,"startActivity called from non-Activity context; forcing " + "Intent.FLAG_ACTIVITY_NEW_TASK for: " + intent);
        launchFlags|=FLAG_ACTIVITY_NEW_TASK;
      }
    }
 else     if (sourceRecord.launchMode == ActivityInfo.LAUNCH_SINGLE_INSTANCE) {
      launchFlags|=FLAG_ACTIVITY_NEW_TASK;
    }
 else     if (launchSingleInstance || launchSingleTask) {
      launchFlags|=FLAG_ACTIVITY_NEW_TASK;
    }
  }
  ActivityInfo newTaskInfo=null;
  Intent newTaskIntent=null;
  final ActivityStack sourceStack;
  if (sourceRecord != null) {
    if (sourceRecord.finishing) {
      if ((launchFlags & FLAG_ACTIVITY_NEW_TASK) == 0) {
        Slog.w(TAG,"startActivity called from finishing " + sourceRecord + "; forcing "+ "Intent.FLAG_ACTIVITY_NEW_TASK for: "+ intent);
        launchFlags|=FLAG_ACTIVITY_NEW_TASK;
        newTaskInfo=sourceRecord.info;
        newTaskIntent=sourceRecord.task.intent;
      }
      sourceRecord=null;
      sourceStack=null;
    }
 else {
      sourceStack=sourceRecord.task.stack;
    }
  }
 else {
    sourceStack=null;
  }
  boolean movedHome=false;
  ActivityStack targetStack;
  intent.setFlags(launchFlags);
  final boolean noAnimation=(launchFlags & Intent.FLAG_ACTIVITY_NO_ANIMATION) != 0;
  ActivityRecord intentActivity=getReusableIntentActivity(r,inTask,intent,launchSingleInstance,launchSingleTask,launchFlags);
  if (intentActivity != null) {
    if (mSupervisor.isLockTaskModeViolation(intentActivity.task,(launchFlags & (FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_CLEAR_TASK)) == (FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_CLEAR_TASK))) {
      mSupervisor.showLockTaskToast();
      Slog.e(TAG,"startActivityUnchecked: Attempt to violate Lock Task Mode");
      return ActivityManager.START_RETURN_LOCK_TASK_MODE_VIOLATION;
    }
    if (r.task == null) {
      r.task=intentActivity.task;
    }
    if (intentActivity.task.intent == null) {
      intentActivity.task.setIntent(r);
    }
    targetStack=intentActivity.task.stack;
    targetStack.mLastPausedActivity=null;
    final ActivityStack focusStack=mSupervisor.getFocusedStack();
    ActivityRecord curTop=(focusStack == null) ? null : focusStack.topRunningNonDelayedActivityLocked(notTop);
    boolean movedToFront=false;
    if (curTop != null && (curTop.task != intentActivity.task || curTop.task != focusStack.topTask())) {
      r.intent.addFlags(Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT);
      if (sourceRecord == null || (sourceStack.topActivity() != null && sourceStack.topActivity().task == sourceRecord.task)) {
        if (launchTaskBehind && sourceRecord != null) {
          intentActivity.setTaskToAffiliateWith(sourceRecord.task);
        }
        movedHome=true;
        final ActivityStack launchStack=getLaunchStack(r,launchFlags,r.task,options,true);
        if (launchStack == null || launchStack == targetStack) {
          targetStack.moveTaskToFrontLocked(intentActivity.task,noAnimation,options,r.appTimeTracker,"bringingFoundTaskToFront");
          movedToFront=true;
        }
        if ((launchFlags & (FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_TASK_ON_HOME)) == (FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_TASK_ON_HOME)) {
          intentActivity.task.setTaskToReturnTo(HOME_ACTIVITY_TYPE);
        }
        options=null;
      }
    }
    if (!movedToFront && doResume) {
      if (DEBUG_TASKS)       Slog.d(TAG_TASKS,"Bring to front target: " + targetStack + " from "+ intentActivity);
      targetStack.moveToFront("intentActivityFound");
    }
    if ((launchFlags & Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED) != 0) {
      intentActivity=targetStack.resetTaskIfNeededLocked(intentActivity,r);
    }
    if ((startFlags & ActivityManager.START_FLAG_ONLY_IF_NEEDED) != 0) {
      if (doResume) {
        mSupervisor.resumeFocusedStackTopActivityLocked(targetStack,null,options);
        if (!movedToFront) {
          mSupervisor.notifyActivityDrawnForKeyguard();
        }
      }
 else {
        ActivityOptions.abort(options);
      }
      mSupervisor.updateUserStackLocked(r.userId,targetStack);
      return ActivityManager.START_RETURN_INTENT_TO_CALLER;
    }
    if ((launchFlags & (FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_CLEAR_TASK)) == (FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_CLEAR_TASK)) {
      reuseTask=intentActivity.task;
      reuseTask.performClearTaskLocked();
      reuseTask.setIntent(r);
    }
 else     if ((launchFlags & FLAG_ACTIVITY_CLEAR_TOP) != 0 || launchSingleInstance || launchSingleTask) {
      ActivityRecord top=intentActivity.task.performClearTaskLocked(r,launchFlags);
      if (top != null) {
        if (top.frontOfTask) {
          top.task.setIntent(r);
        }
        ActivityStack.logStartActivity(EventLogTags.AM_NEW_INTENT,r,top.task);
        top.deliverNewIntentLocked(callingUid,r.intent,r.launchedFromPackage);
      }
 else {
        addingToTask=true;
        sourceRecord=intentActivity;
        TaskRecord task=sourceRecord.task;
        if (task != null && task.stack == null) {
          targetStack=computeStackFocus(sourceRecord,false,null,launchFlags,options);
          targetStack.addTask(task,!launchTaskBehind,"startActivityUnchecked");
        }
      }
    }
 else     if (r.realActivity.equals(intentActivity.task.realActivity)) {
      if (((launchFlags & Intent.FLAG_ACTIVITY_SINGLE_TOP) != 0 || launchSingleTop) && intentActivity.realActivity.equals(r.realActivity)) {
        ActivityStack.logStartActivity(EventLogTags.AM_NEW_INTENT,r,intentActivity.task);
        if (intentActivity.frontOfTask) {
          intentActivity.task.setIntent(r);
        }
        intentActivity.deliverNewIntentLocked(callingUid,r.intent,r.launchedFromPackage);
      }
 else       if (!r.intent.filterEquals(intentActivity.task.intent)) {
        addingToTask=true;
        sourceRecord=intentActivity;
      }
    }
 else     if ((launchFlags & Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED) == 0) {
      addingToTask=true;
      sourceRecord=intentActivity;
    }
 else     if (!intentActivity.task.rootWasReset) {
      intentActivity.task.setIntent(r);
    }
    if (!addingToTask && reuseTask == null) {
      if (doResume) {
        mSupervisor.resumeFocusedStackTopActivityLocked(targetStack,null,options);
        if (!movedToFront) {
          mSupervisor.notifyActivityDrawnForKeyguard();
        }
      }
 else {
        ActivityOptions.abort(options);
      }
      mSupervisor.updateUserStackLocked(r.userId,targetStack);
      return ActivityManager.START_TASK_TO_FRONT;
    }
  }
  if (r.packageName != null) {
    ActivityStack topStack=mSupervisor.mFocusedStack;
    ActivityRecord top=topStack.topRunningNonDelayedActivityLocked(notTop);
    final boolean dontStart=top != null && r.resultTo == null && top.realActivity.equals(r.realActivity) && top.userId == r.userId && top.app != null && top.app.thread != null && ((launchFlags & Intent.FLAG_ACTIVITY_SINGLE_TOP) != 0 || launchSingleTop || launchSingleTask);
    if (dontStart) {
      ActivityStack.logStartActivity(EventLogTags.AM_NEW_INTENT,top,top.task);
      topStack.mLastPausedActivity=null;
      if (doResume) {
        mSupervisor.resumeFocusedStackTopActivityLocked();
      }
      ActivityOptions.abort(options);
      if ((startFlags & ActivityManager.START_FLAG_ONLY_IF_NEEDED) != 0) {
        return ActivityManager.START_RETURN_INTENT_TO_CALLER;
      }
      top.deliverNewIntentLocked(callingUid,r.intent,r.launchedFromPackage);
      return ActivityManager.START_DELIVERED_TO_TOP;
    }
  }
 else {
    if (r.resultTo != null && r.resultTo.task.stack != null) {
      r.resultTo.task.stack.sendActivityResultLocked(-1,r.resultTo,r.resultWho,r.requestCode,Activity.RESULT_CANCELED,null);
    }
    ActivityOptions.abort(options);
    return ActivityManager.START_CLASS_NOT_FOUND;
  }
  boolean newTask=false;
  boolean keepCurTransition=false;
  final TaskRecord taskToAffiliate=launchTaskBehind && sourceRecord != null ? sourceRecord.task : null;
  if (r.resultTo == null && inTask == null && !addingToTask && (launchFlags & FLAG_ACTIVITY_NEW_TASK) != 0) {
    newTask=true;
    targetStack=computeStackFocus(r,newTask,newBounds,launchFlags,options);
    if (doResume) {
      targetStack.moveToFront("startingNewTask");
    }
    if (reuseTask == null) {
      r.setTask(targetStack.createTaskRecord(mSupervisor.getNextTaskId(),newTaskInfo != null ? newTaskInfo : r.info,newTaskIntent != null ? newTaskIntent : intent,voiceSession,voiceInteractor,!launchTaskBehind),taskToAffiliate);
      if (overrideBounds) {
        r.task.updateOverrideConfiguration(newBounds);
      }
      if (DEBUG_TASKS)       Slog.v(TAG_TASKS,"Starting new activity " + r + " in new task "+ r.task);
    }
 else {
      r.setTask(reuseTask,taskToAffiliate);
    }
    if (mSupervisor.isLockTaskModeViolation(r.task)) {
      Slog.e(TAG,"Attempted Lock Task Mode violation r=" + r);
      return ActivityManager.START_RETURN_LOCK_TASK_MODE_VIOLATION;
    }
    if (!movedHome) {
      if ((launchFlags & (FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_TASK_ON_HOME)) == (FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_TASK_ON_HOME)) {
        r.task.setTaskToReturnTo(HOME_ACTIVITY_TYPE);
      }
    }
  }
 else   if (sourceRecord != null) {
    final TaskRecord sourceTask=sourceRecord.task;
    if (mSupervisor.isLockTaskModeViolation(sourceTask)) {
      Slog.e(TAG,"Attempted Lock Task Mode violation r=" + r);
      return ActivityManager.START_RETURN_LOCK_TASK_MODE_VIOLATION;
    }
    final boolean launchToSideAllowed=sourceTask.stack.topTask() != sourceTask;
    targetStack=getLaunchStack(r,launchFlags,r.task,options,launchToSideAllowed);
    if (targetStack == null) {
      targetStack=sourceTask.stack;
    }
 else     if (targetStack != sourceTask.stack) {
      mSupervisor.moveTaskToStackLocked(sourceTask.taskId,targetStack.mStackId,ON_TOP,FORCE_FOCUS,"launchToSide",!ANIMATE);
    }
    if (doResume) {
      targetStack.moveToFront("sourceStackToFront");
    }
    final TaskRecord topTask=targetStack.topTask();
    if (topTask != sourceTask) {
      targetStack.moveTaskToFrontLocked(sourceTask,noAnimation,options,r.appTimeTracker,"sourceTaskToFront");
    }
    if (!addingToTask && (launchFlags & Intent.FLAG_ACTIVITY_CLEAR_TOP) != 0) {
      ActivityRecord top=sourceTask.performClearTaskLocked(r,launchFlags);
      keepCurTransition=true;
      if (top != null) {
        ActivityStack.logStartActivity(EventLogTags.AM_NEW_INTENT,r,top.task);
        top.deliverNewIntentLocked(callingUid,r.intent,r.launchedFromPackage);
        targetStack.mLastPausedActivity=null;
        if (doResume) {
          mSupervisor.resumeFocusedStackTopActivityLocked();
        }
        ActivityOptions.abort(options);
        return ActivityManager.START_DELIVERED_TO_TOP;
      }
    }
 else     if (!addingToTask && (launchFlags & Intent.FLAG_ACTIVITY_REORDER_TO_FRONT) != 0) {
      final ActivityRecord top=sourceTask.findActivityInHistoryLocked(r);
      if (top != null) {
        final TaskRecord task=top.task;
        task.moveActivityToFrontLocked(top);
        ActivityStack.logStartActivity(EventLogTags.AM_NEW_INTENT,r,task);
        top.updateOptionsLocked(options);
        top.deliverNewIntentLocked(callingUid,r.intent,r.launchedFromPackage);
        targetStack.mLastPausedActivity=null;
        if (doResume) {
          mSupervisor.resumeFocusedStackTopActivityLocked();
        }
        return ActivityManager.START_DELIVERED_TO_TOP;
      }
    }
    r.setTask(sourceTask,null);
    if (DEBUG_TASKS)     Slog.v(TAG_TASKS,"Starting new activity " + r + " in existing task "+ r.task+ " from source "+ sourceRecord);
  }
 else   if (inTask != null) {
    if (mSupervisor.isLockTaskModeViolation(inTask)) {
      Slog.e(TAG,"Attempted Lock Task Mode violation r=" + r);
      return ActivityManager.START_RETURN_LOCK_TASK_MODE_VIOLATION;
    }
    if (overrideBounds) {
      inTask.updateOverrideConfiguration(newBounds);
      int stackId=inTask.getLaunchStackId();
      if (stackId != inTask.stack.mStackId) {
        mSupervisor.moveTaskToStackUncheckedLocked(inTask,stackId,ON_TOP,!FORCE_FOCUS,"inTaskToFront");
      }
    }
    targetStack=inTask.stack;
    targetStack.moveTaskToFrontLocked(inTask,noAnimation,options,r.appTimeTracker,"inTaskToFront");
    ActivityRecord top=inTask.getTopActivity();
    if (top != null && top.realActivity.equals(r.realActivity) && top.userId == r.userId) {
      if ((launchFlags & Intent.FLAG_ACTIVITY_SINGLE_TOP) != 0 || launchSingleTop || launchSingleTask) {
        ActivityStack.logStartActivity(EventLogTags.AM_NEW_INTENT,top,top.task);
        if ((startFlags & ActivityManager.START_FLAG_ONLY_IF_NEEDED) != 0) {
          return ActivityManager.START_RETURN_INTENT_TO_CALLER;
        }
        top.deliverNewIntentLocked(callingUid,r.intent,r.launchedFromPackage);
        return ActivityManager.START_DELIVERED_TO_TOP;
      }
    }
    if (!addingToTask) {
      ActivityOptions.abort(options);
      return ActivityManager.START_TASK_TO_FRONT;
    }
    r.setTask(inTask,null);
    if (DEBUG_TASKS)     Slog.v(TAG_TASKS,"Starting new activity " + r + " in explicit task "+ r.task);
  }
 else {
    targetStack=computeStackFocus(r,newTask,null,launchFlags,options);
    if (doResume) {
      targetStack.moveToFront("addingToTopTask");
    }
    ActivityRecord prev=targetStack.topActivity();
    r.setTask(prev != null ? prev.task : targetStack.createTaskRecord(mSupervisor.getNextTaskId(),r.info,intent,null,null,true),null);
    mWindowManager.moveTaskToTop(r.task.taskId);
    if (DEBUG_TASKS)     Slog.v(TAG_TASKS,"Starting new activity " + r + " in new guessed "+ r.task);
  }
  mService.grantUriPermissionFromIntentLocked(callingUid,r.packageName,intent,r.getUriPermissionsLocked(),r.userId);
  if (sourceRecord != null && sourceRecord.isRecentsActivity()) {
    r.task.setTaskToReturnTo(RECENTS_ACTIVITY_TYPE);
  }
  if (newTask) {
    EventLog.writeEvent(EventLogTags.AM_CREATE_TASK,r.userId,r.task.taskId);
  }
  ActivityStack.logStartActivity(EventLogTags.AM_CREATE_ACTIVITY,r,r.task);
  targetStack.mLastPausedActivity=null;
  targetStack.startActivityLocked(r,newTask,keepCurTransition,options);
  if (doResume) {
    if (!launchTaskBehind) {
      mService.setFocusedActivityLocked(r,"startedActivity");
    }
    mSupervisor.resumeFocusedStackTopActivityLocked(targetStack,r,options);
  }
 else {
    targetStack.addRecentActivityLocked(r);
  }
  mSupervisor.updateUserStackLocked(r.userId,targetStack);
  if (!r.task.mResizeable && mSupervisor.isStackDockedInEffect(targetStack.mStackId)) {
    mSupervisor.showNonResizeableDockToast(r.task.taskId);
  }
  return ActivityManager.START_SUCCESS;
}
