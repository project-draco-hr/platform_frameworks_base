{
  if (!mWorkingProcsSorted) {
    Collections.sort(mWorkingProcs,sLoadComparator);
    mWorkingProcsSorted=true;
  }
  StringWriter sw=new StringWriter();
  PrintWriter pw=new PrintWriter(sw);
  pw.print("Load: ");
  pw.print(mLoad1);
  pw.print(" / ");
  pw.print(mLoad5);
  pw.print(" / ");
  pw.println(mLoad15);
  long now=SystemClock.uptimeMillis();
  pw.print("CPU usage from ");
  pw.print(now - mLastSampleTime);
  pw.print("ms to ");
  pw.print(now - mCurrentSampleTime);
  pw.println("ms ago:");
  final int totalTime=mRelUserTime + mRelSystemTime + mRelIoWaitTime+ mRelIrqTime+ mRelSoftIrqTime+ mRelIdleTime;
  int N=mWorkingProcs.size();
  for (int i=0; i < N; i++) {
    Stats st=mWorkingProcs.get(i);
    printProcessCPU(pw,st.added ? " +" : (st.removed ? " -" : "  "),st.name,totalTime,st.rel_utime,st.rel_stime,0,0,0,st.rel_minfaults,st.rel_majfaults);
    if (!st.removed && st.workingThreads != null) {
      int M=st.workingThreads.size();
      for (int j=0; j < M; j++) {
        Stats tst=st.workingThreads.get(j);
        printProcessCPU(pw,tst.added ? "   +" : (tst.removed ? "   -" : "    "),tst.name,totalTime,tst.rel_utime,tst.rel_stime,0,0,0,0,0);
      }
    }
  }
  printProcessCPU(pw,"","TOTAL",totalTime,mRelUserTime,mRelSystemTime,mRelIoWaitTime,mRelIrqTime,mRelSoftIrqTime,0,0);
  return sw.toString();
}
