{
synchronized (mTZCallbacks) {
    boolean writePrefs=false;
    int keyColumn=cursor.getColumnIndexOrThrow(CalendarCache.KEY);
    int valueColumn=cursor.getColumnIndexOrThrow(CalendarCache.VALUE);
    while (cursor.moveToNext()) {
      String key=cursor.getString(keyColumn);
      String value=cursor.getString(valueColumn);
      if (TextUtils.equals(key,CalendarCache.TIMEZONE_KEY_TYPE)) {
        boolean useHomeTZ=!TextUtils.equals(value,CalendarCache.TIMEZONE_TYPE_AUTO);
        if (useHomeTZ != mUseHomeTZ) {
          writePrefs=true;
          mUseHomeTZ=useHomeTZ;
        }
      }
 else       if (TextUtils.equals(key,CalendarCache.TIMEZONE_KEY_INSTANCES_PREVIOUS)) {
        if (!TextUtils.isEmpty(value) && !TextUtils.equals(mHomeTZ,value)) {
          writePrefs=true;
          mHomeTZ=value;
        }
      }
    }
    cursor.close();
    if (writePrefs) {
      SharedPreferences prefs=getSharedPreferences((Context)cookie,mPrefsName);
      setSharedPreference(prefs,KEY_HOME_TZ_ENABLED,mUseHomeTZ);
      setSharedPreference(prefs,KEY_HOME_TZ,mHomeTZ);
    }
    mTZQueryInProgress=false;
    for (    Runnable callback : mTZCallbacks) {
      if (callback != null) {
        callback.run();
      }
    }
    mTZCallbacks.clear();
  }
}
