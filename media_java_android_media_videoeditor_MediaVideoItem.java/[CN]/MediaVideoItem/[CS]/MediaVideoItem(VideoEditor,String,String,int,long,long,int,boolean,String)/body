{
  super(editor,mediaItemId,filename,renderingMode);
  if (editor instanceof VideoEditorImpl) {
    mMANativeHelper=((VideoEditorImpl)editor).getNativeContext();
    mVideoEditor=((VideoEditorImpl)editor);
  }
  Properties properties=null;
  try {
    properties=mMANativeHelper.getMediaProperties(filename);
  }
 catch (  Exception e) {
    throw new IllegalArgumentException("Unsupported file or file not found");
  }
switch (mMANativeHelper.getFileType(properties.fileType)) {
case MediaProperties.FILE_3GP:
    break;
case MediaProperties.FILE_MP4:
  break;
default :
throw new IllegalArgumentException("Unsupported Input File Type");
}
switch (mMANativeHelper.getVideoCodecType(properties.videoFormat)) {
case MediaProperties.VCODEC_H263:
break;
case MediaProperties.VCODEC_H264BP:
break;
case MediaProperties.VCODEC_H264MP:
break;
case MediaProperties.VCODEC_MPEG4:
break;
default :
throw new IllegalArgumentException("Unsupported Video Codec Format in Input File");
}
mWidth=properties.width;
mHeight=properties.height;
mAspectRatio=mMANativeHelper.getAspectRatio(properties.width,properties.height);
mFileType=mMANativeHelper.getFileType(properties.fileType);
mVideoType=mMANativeHelper.getVideoCodecType(properties.videoFormat);
mVideoProfile=0;
mDurationMs=properties.videoDuration;
mVideoBitrate=properties.videoBitrate;
mAudioBitrate=properties.audioBitrate;
mFps=(int)properties.averageFrameRate;
mAudioType=mMANativeHelper.getAudioCodecType(properties.audioFormat);
mAudioChannels=properties.audioChannels;
mAudioSamplingFrequency=properties.audioSamplingFrequency;
mBeginBoundaryTimeMs=beginMs;
mEndBoundaryTimeMs=endMs == END_OF_FILE ? mDurationMs : endMs;
mVolumePercentage=volumePercent;
mMuted=muted;
mAudioWaveformFilename=audioWaveformFilename;
if (audioWaveformFilename != null) {
mWaveformData=new SoftReference<WaveformData>(new WaveformData(audioWaveformFilename));
}
 else {
mWaveformData=null;
}
}
