{
  int frameDuration=0;
  int sampleCount=0;
  final String projectPath=mMANativeHelper.getProjectPath();
  if (mAudioWaveformFilename == null) {
    String mAudioWaveFileName=null;
    mAudioWaveFileName=String.format(projectPath + "/" + "audioWaveformFile-"+ getId()+ ".dat");
    if (mMANativeHelper.getAudioCodecType(mAudioType) == MediaProperties.ACODEC_AMRNB) {
      frameDuration=(MediaProperties.SAMPLES_PER_FRAME_AMRNB * 1000) / MediaProperties.DEFAULT_SAMPLING_FREQUENCY;
      sampleCount=MediaProperties.SAMPLES_PER_FRAME_AMRNB;
    }
 else     if (mMANativeHelper.getAudioCodecType(mAudioType) == MediaProperties.ACODEC_AMRWB) {
      frameDuration=(MediaProperties.SAMPLES_PER_FRAME_AMRWB * 1000) / MediaProperties.DEFAULT_SAMPLING_FREQUENCY;
      sampleCount=MediaProperties.SAMPLES_PER_FRAME_AMRWB;
    }
 else     if (mMANativeHelper.getAudioCodecType(mAudioType) == MediaProperties.ACODEC_AAC_LC) {
      frameDuration=(MediaProperties.SAMPLES_PER_FRAME_AAC * 1000) / MediaProperties.DEFAULT_SAMPLING_FREQUENCY;
      sampleCount=MediaProperties.SAMPLES_PER_FRAME_AAC;
    }
    mMANativeHelper.generateAudioGraph(getId(),mFilename,mAudioWaveFileName,frameDuration,MediaProperties.DEFAULT_CHANNEL_COUNT,sampleCount,listener,true);
    mAudioWaveformFilename=mAudioWaveFileName;
  }
  mWaveformData=new SoftReference<WaveformData>(new WaveformData(mAudioWaveformFilename));
}
