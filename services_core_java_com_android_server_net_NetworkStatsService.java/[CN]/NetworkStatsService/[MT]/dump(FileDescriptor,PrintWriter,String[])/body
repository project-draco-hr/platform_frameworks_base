{
  mContext.enforceCallingOrSelfPermission(DUMP,TAG);
  long duration=DateUtils.DAY_IN_MILLIS;
  final HashSet<String> argSet=new HashSet<String>();
  for (  String arg : args) {
    argSet.add(arg);
    if (arg.startsWith("--duration=")) {
      try {
        duration=Long.parseLong(arg.substring(11));
      }
 catch (      NumberFormatException ignored) {
      }
    }
  }
  final boolean poll=argSet.contains("--poll") || argSet.contains("poll");
  final boolean checkin=argSet.contains("--checkin");
  final boolean fullHistory=argSet.contains("--full") || argSet.contains("full");
  final boolean includeUid=argSet.contains("--uid") || argSet.contains("detail");
  final boolean includeTag=argSet.contains("--tag") || argSet.contains("detail");
  final IndentingPrintWriter pw=new IndentingPrintWriter(rawWriter,"  ");
synchronized (mStatsLock) {
    if (poll) {
      performPollLocked(FLAG_PERSIST_ALL | FLAG_PERSIST_FORCE);
      pw.println("Forced poll");
      return;
    }
    if (checkin) {
      final long end=System.currentTimeMillis();
      final long start=end - duration;
      pw.print("v1,");
      pw.print(start / SECOND_IN_MILLIS);
      pw.print(',');
      pw.print(end / SECOND_IN_MILLIS);
      pw.println();
      pw.println("xt");
      mXtRecorder.dumpCheckin(rawWriter,start,end);
      if (includeUid) {
        pw.println("uid");
        mUidRecorder.dumpCheckin(rawWriter,start,end);
      }
      if (includeTag) {
        pw.println("tag");
        mUidTagRecorder.dumpCheckin(rawWriter,start,end);
      }
      return;
    }
    pw.println("Active interfaces:");
    pw.increaseIndent();
    for (int i=0; i < mActiveIfaces.size(); i++) {
      pw.printPair("iface",mActiveIfaces.keyAt(i));
      pw.printPair("ident",mActiveIfaces.valueAt(i));
      pw.println();
    }
    pw.decreaseIndent();
    pw.println("Active UID interfaces:");
    pw.increaseIndent();
    for (int i=0; i < mActiveUidIfaces.size(); i++) {
      pw.printPair("iface",mActiveUidIfaces.keyAt(i));
      pw.printPair("ident",mActiveUidIfaces.valueAt(i));
      pw.println();
    }
    pw.decreaseIndent();
    pw.println("Dev stats:");
    pw.increaseIndent();
    mDevRecorder.dumpLocked(pw,fullHistory);
    pw.decreaseIndent();
    pw.println("Xt stats:");
    pw.increaseIndent();
    mXtRecorder.dumpLocked(pw,fullHistory);
    pw.decreaseIndent();
    if (includeUid) {
      pw.println("UID stats:");
      pw.increaseIndent();
      mUidRecorder.dumpLocked(pw,fullHistory);
      pw.decreaseIndent();
    }
    if (includeTag) {
      pw.println("UID tag stats:");
      pw.increaseIndent();
      mUidTagRecorder.dumpLocked(pw,fullHistory);
      pw.decreaseIndent();
    }
  }
}
