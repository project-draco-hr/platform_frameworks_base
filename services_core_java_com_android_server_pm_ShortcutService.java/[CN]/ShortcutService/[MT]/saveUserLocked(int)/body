{
  final File path=new File(injectUserDataPath(userId),FILENAME_USER_PACKAGES);
  if (DEBUG) {
    Slog.i(TAG,"Saving to " + path);
  }
  path.mkdirs();
  final AtomicFile file=new AtomicFile(path);
  FileOutputStream outs=null;
  try {
    outs=file.startWrite();
    XmlSerializer out=new FastXmlSerializer();
    out.setOutput(outs,StandardCharsets.UTF_8.name());
    out.startDocument(null,true);
    out.startTag(null,TAG_ROOT);
    final ArrayMap<String,PackageShortcuts> packages=getUserShortcutsLocked(userId);
    for (int i=0; i < packages.size(); i++) {
      final String packageName=packages.keyAt(i);
      final PackageShortcuts packageShortcuts=packages.valueAt(i);
      out.startTag(null,TAG_PACKAGE);
      writeAttr(out,ATTR_NAME,packageName);
      writeAttr(out,ATTR_DYNAMIC_COUNT,packageShortcuts.mDynamicShortcutCount);
      writeAttr(out,ATTR_CALL_COUNT,packageShortcuts.mApiCallCount);
      writeAttr(out,ATTR_LAST_RESET,packageShortcuts.mLastResetTime);
      final ArrayMap<String,ShortcutInfo> shortcuts=packageShortcuts.mShortcuts;
      final int size=shortcuts.size();
      for (int j=0; j < size; j++) {
        saveShortcut(out,shortcuts.valueAt(j));
      }
      out.endTag(null,TAG_PACKAGE);
    }
    out.endTag(null,TAG_ROOT);
    out.endDocument();
    file.finishWrite(outs);
  }
 catch (  IOException|XmlPullParserException e) {
    Slog.e(TAG,"Failed to write to file " + file.getBaseFile(),e);
    file.failWrite(outs);
  }
}
