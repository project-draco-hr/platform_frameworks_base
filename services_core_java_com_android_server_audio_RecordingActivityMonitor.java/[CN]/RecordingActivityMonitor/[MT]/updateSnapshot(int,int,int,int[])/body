{
  final boolean configChanged;
  final AudioRecordConfiguration[] configs;
synchronized (mRecordConfigs) {
switch (event) {
case AudioManager.RECORD_CONFIG_EVENT_STOP:
      configChanged=(mRecordConfigs.remove(new Integer(session)) != null);
    break;
case AudioManager.RECORD_CONFIG_EVENT_START:
  final AudioFormat clientFormat=new AudioFormat.Builder().setEncoding(recordingInfo[0]).setChannelMask(recordingInfo[1]).setSampleRate(recordingInfo[2]).build();
final AudioFormat deviceFormat=new AudioFormat.Builder().setEncoding(recordingInfo[3]).setChannelMask(recordingInfo[4]).setSampleRate(recordingInfo[5]).build();
final int patchHandle=recordingInfo[6];
final Integer sessionKey=new Integer(session);
if (mRecordConfigs.containsKey(sessionKey)) {
final AudioRecordConfiguration updatedConfig=new AudioRecordConfiguration(session,source,clientFormat,deviceFormat,patchHandle);
if (updatedConfig.equals(mRecordConfigs.get(sessionKey))) {
configChanged=false;
}
 else {
mRecordConfigs.remove(sessionKey);
mRecordConfigs.put(sessionKey,updatedConfig);
configChanged=true;
}
}
 else {
mRecordConfigs.put(sessionKey,new AudioRecordConfiguration(session,source,clientFormat,deviceFormat,patchHandle));
configChanged=true;
}
break;
default :
Log.e(TAG,String.format("Unknown event %d for session %d, source %d",event,session,source));
configChanged=false;
}
if (configChanged) {
configs=mRecordConfigs.values().toArray(new AudioRecordConfiguration[0]);
}
 else {
configs=null;
}
}
return configs;
}
