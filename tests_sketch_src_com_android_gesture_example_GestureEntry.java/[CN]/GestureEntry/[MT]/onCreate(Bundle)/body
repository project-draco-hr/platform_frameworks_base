{
  super.onCreate(savedInstanceState);
  setContentView(R.layout.demo);
  mGestureLibrary=new GestureLibrary(GESTURE_FILE_NAME);
  mGestureLibrary.load();
  mRecognitionResult=(Spinner)findViewById(R.id.spinner);
  mRecognitionResult.setOnItemSelectedListener(new OnItemSelectedListener(){
    public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      if (!mChangedByRecognizer) {
        mGestureLibrary.addGesture(parent.getSelectedItem().toString(),mGesturePad.getCurrentGesture());
      }
 else {
        mChangedByRecognizer=false;
      }
    }
    public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  mGesturePad=(GestureOverlay)findViewById(R.id.drawingpad);
  mGesturePad.setBackgroundColor(Color.BLACK);
  mGesturePad.addGestureListener(new GestureListener(){
    public void onFinishGesture(    GestureOverlay overlay,    MotionEvent event){
      recognize(overlay.getCurrentGesture());
    }
    public void onGesture(    GestureOverlay overlay,    MotionEvent event){
    }
    public void onStartGesture(    GestureOverlay overlay,    MotionEvent event){
      overlay.clear(false);
    }
  }
);
  if (savedInstanceState != null) {
    Gesture gesture=(Gesture)savedInstanceState.getParcelable(PARCEL_KEY);
    if (gesture != null) {
      mGesturePad.setCurrentGesture(gesture);
    }
  }
}
