{
  NetworkTemplate[] templates=new NetworkTemplate[]{sTemplateImsi1};
  DataUsageRequest inputRequest=new DataUsageRequest(DataUsageRequest.REQUEST_ID_UNSET,templates,NO_UIDS,THRESHOLD_BYTES);
  DataUsageRequest request=mStatsObservers.register(inputRequest,mMessenger,mockBinder,UID_RED,NetworkStatsAccess.Level.USER);
  assertTrue(request.requestId > 0);
  assertTrue(Arrays.deepEquals(templates,request.templates));
  assertNull(request.uids);
  assertEquals(THRESHOLD_BYTES,request.thresholdInBytes);
  NetworkIdentitySet identSet=new NetworkIdentitySet();
  identSet.add(new NetworkIdentity(TYPE_MOBILE,TelephonyManager.NETWORK_TYPE_UNKNOWN,IMSI_1,null,false,true));
  mActiveUidIfaces.put(TEST_IFACE,identSet);
  NetworkStats xtSnapshot=null;
  NetworkStats uidSnapshot=new NetworkStats(TEST_START,2).addValues(TEST_IFACE,UID_ANOTHER_USER,SET_DEFAULT,TAG_NONE,ROAMING_NO,BASE_BYTES,2L,BASE_BYTES,2L,0L);
  mStatsObservers.updateStats(xtSnapshot,uidSnapshot,mActiveIfaces,mActiveUidIfaces,VPN_INFO,TEST_START);
  uidSnapshot=new NetworkStats(TEST_START + 2 * MINUTE_IN_MILLIS,2).addValues(TEST_IFACE,UID_ANOTHER_USER,SET_DEFAULT,TAG_NONE,ROAMING_NO,BASE_BYTES + THRESHOLD_BYTES,2L,BASE_BYTES + THRESHOLD_BYTES,2L,0L);
  mStatsObservers.updateStats(xtSnapshot,uidSnapshot,mActiveIfaces,mActiveUidIfaces,VPN_INFO,TEST_START);
  waitForObserverToIdle();
  assertTrue(mCv.block(WAIT_TIMEOUT));
  assertEquals(INVALID_TYPE,mHandler.mLastMessageType);
}
