{
  boolean increaseIterations=true;
  int iterations=1;
  long duration=0;
  mIntermediates=null;
  mInternalIterations=1;
  Class clazz=mContext.getClassLoader().loadClass(className);
  Object perftest=clazz.newInstance();
  PerformanceTestCase perftestcase=null;
  if (perftest instanceof PerformanceTestCase) {
    perftestcase=(PerformanceTestCase)perftest;
    if (mMode == REGRESSION && perftestcase.isPerformanceOnly())     return;
  }
  Runtime.getRuntime().runFinalization();
  Runtime.getRuntime().gc();
  if (perftestcase != null) {
    mIntermediates=new ArrayList<IntermediateTime>();
    iterations=perftestcase.startPerformance(this);
    if (iterations > 0) {
      increaseIterations=false;
    }
 else {
      iterations=1;
    }
  }
  Thread.sleep(1000);
  do {
    mEndTime=0;
    if (increaseIterations) {
      mStartTime=SystemClock.currentThreadTimeMillis();
    }
 else {
      mStartTime=0;
    }
    if (junitTest) {
      for (int i=0; i < iterations; i++) {
        junit.textui.TestRunner.run((junit.framework.Test)testCase);
      }
    }
 else {
      Runnable test=(Runnable)testCase;
      for (int i=0; i < iterations; i++) {
        test.run();
      }
    }
    long endTime=mEndTime;
    if (endTime == 0) {
      endTime=SystemClock.currentThreadTimeMillis();
    }
    duration=endTime - mStartTime;
    if (!increaseIterations) {
      break;
    }
    if (duration <= 1) {
      iterations*=1000;
    }
 else     if (duration <= 10) {
      iterations*=100;
    }
 else     if (duration < 100) {
      iterations*=10;
    }
 else     if (duration < 1000) {
      iterations*=(int)((1000 / duration) + 2);
    }
 else {
      break;
    }
  }
 while (true);
  if (duration != 0) {
    iterations*=mInternalIterations;
    performance(testNameInDb,(duration * 1000000) / iterations,iterations,mIntermediates);
  }
}
