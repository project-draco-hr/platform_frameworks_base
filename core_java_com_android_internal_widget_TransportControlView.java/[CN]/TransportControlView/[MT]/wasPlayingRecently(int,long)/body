{
switch (state) {
case RemoteControlClient.PLAYSTATE_PLAYING:
case RemoteControlClient.PLAYSTATE_FAST_FORWARDING:
case RemoteControlClient.PLAYSTATE_REWINDING:
case RemoteControlClient.PLAYSTATE_SKIPPING_FORWARDS:
case RemoteControlClient.PLAYSTATE_SKIPPING_BACKWARDS:
case RemoteControlClient.PLAYSTATE_BUFFERING:
    return true;
case RemoteControlClient.PLAYSTATE_NONE:
  return false;
case RemoteControlClient.PLAYSTATE_STOPPED:
case RemoteControlClient.PLAYSTATE_PAUSED:
case RemoteControlClient.PLAYSTATE_ERROR:
if (DEBUG) {
  if ((SystemClock.elapsedRealtime() - stateChangeTimeMs) < DISPLAY_TIMEOUT_MS) {
    Log.v(TAG,"wasPlayingRecently: time < TIMEOUT was playing recently");
  }
 else {
    Log.v(TAG,"wasPlayingRecently: time > TIMEOUT");
  }
}
return ((SystemClock.elapsedRealtime() - stateChangeTimeMs) < DISPLAY_TIMEOUT_MS);
default :
Log.e(TAG,"Unknown playback state " + state + " in wasPlayingRecently()");
return false;
}
}
