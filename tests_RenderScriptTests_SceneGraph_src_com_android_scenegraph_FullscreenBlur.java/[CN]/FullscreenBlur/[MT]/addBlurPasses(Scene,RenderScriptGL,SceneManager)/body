{
  ArrayList<RenderableBase> allDraw=scene.getRenderables();
  int numDraw=allDraw.size();
  RenderState drawTex=new RenderState(mPV_Blur,mPF_Texture,BLEND_ADD_DEPTH_NONE(rs),ProgramRaster.CULL_NONE(rs));
  RenderState selectCol=new RenderState(mPV_Blur,mPF_SelectColor,ProgramStore.BLEND_NONE_DEPTH_NONE(rs),ProgramRaster.CULL_NONE(rs));
  RenderState hBlur=new RenderState(mPV_Blur,mPF_BlurH,ProgramStore.BLEND_NONE_DEPTH_NONE(rs),ProgramRaster.CULL_NONE(rs));
  RenderState vBlur=new RenderState(mPV_Blur,mPF_BlurV,ProgramStore.BLEND_NONE_DEPTH_NONE(rs),ProgramRaster.CULL_NONE(rs));
  RenderPass blurSourcePass=new RenderPass();
  blurSourcePass.setColorTarget(sRenderTargetBlur0Color);
  blurSourcePass.setDepthTarget(sRenderTargetBlur0Depth);
  blurSourcePass.setClearColor(new Float4(1.0f,1.0f,1.0f,1.0f));
  blurSourcePass.setShouldClearColor(true);
  blurSourcePass.setClearDepth(1.0f);
  blurSourcePass.setShouldClearDepth(true);
  blurSourcePass.setCamera(scene.getCameras().get(1));
  for (int i=0; i < numDraw; i++) {
    blurSourcePass.appendRenderable((Renderable)allDraw.get(i));
  }
  scene.appendRenderPass(blurSourcePass);
  RenderPass selectColorPass=new RenderPass();
  selectColorPass.setColorTarget(sRenderTargetBlur2Color);
  selectColorPass.setDepthTarget(sRenderTargetBlur2Depth);
  selectColorPass.setShouldClearColor(false);
  selectColorPass.setShouldClearDepth(false);
  selectColorPass.setCamera(scene.getCameras().get(1));
  Renderable quad=sceneManager.getRenderableQuad("ScreenAlignedQuadS",selectCol);
  quad.updateTextures(rs,sRenderTargetBlur0Color,0);
  selectColorPass.appendRenderable(quad);
  scene.appendRenderPass(selectColorPass);
  RenderPass horizontalBlurPass=new RenderPass();
  horizontalBlurPass.setColorTarget(sRenderTargetBlur1Color);
  horizontalBlurPass.setDepthTarget(sRenderTargetBlur1Depth);
  horizontalBlurPass.setShouldClearColor(false);
  horizontalBlurPass.setShouldClearDepth(false);
  horizontalBlurPass.setCamera(scene.getCameras().get(1));
  quad=sceneManager.getRenderableQuad("ScreenAlignedQuadH",hBlur);
  quad.updateTextures(rs,sRenderTargetBlur2Color,0);
  float xAdvance=1.0f / (float)sRenderTargetBlur0Color.getType().getX();
  quad.appendSourceParams(new Float4Param("blurOffset0",-xAdvance * 2.5f));
  quad.appendSourceParams(new Float4Param("blurOffset1",-xAdvance * 0.5f));
  quad.appendSourceParams(new Float4Param("blurOffset2",xAdvance * 1.5f));
  quad.appendSourceParams(new Float4Param("blurOffset3",xAdvance * 3.5f));
  horizontalBlurPass.appendRenderable(quad);
  scene.appendRenderPass(horizontalBlurPass);
  RenderPass verticalBlurPass=new RenderPass();
  verticalBlurPass.setColorTarget(sRenderTargetBlur2Color);
  verticalBlurPass.setDepthTarget(sRenderTargetBlur2Depth);
  verticalBlurPass.setShouldClearColor(false);
  verticalBlurPass.setShouldClearDepth(false);
  verticalBlurPass.setCamera(scene.getCameras().get(1));
  quad=sceneManager.getRenderableQuad("ScreenAlignedQuadV",vBlur);
  quad.updateTextures(rs,sRenderTargetBlur1Color,0);
  float yAdvance=1.0f / (float)sRenderTargetBlur0Color.getType().getY();
  quad.appendSourceParams(new Float4Param("blurOffset0",-yAdvance * 2.5f));
  quad.appendSourceParams(new Float4Param("blurOffset1",-yAdvance * 0.5f));
  quad.appendSourceParams(new Float4Param("blurOffset2",yAdvance * 1.5f));
  quad.appendSourceParams(new Float4Param("blurOffset3",yAdvance * 3.5f));
  verticalBlurPass.appendRenderable(quad);
  scene.appendRenderPass(verticalBlurPass);
}
