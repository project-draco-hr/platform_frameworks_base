{
  if (mState == null)   return;
  final StreamState ss=mState.states.get(row.stream);
  if (ss == null)   return;
  row.ss=ss;
  if (ss.level > 0) {
    row.lastAudibleLevel=ss.level;
  }
  if (ss.level == row.requestedLevel) {
    row.requestedLevel=-1;
  }
  final boolean isRingStream=row.stream == AudioManager.STREAM_RING;
  final boolean isSystemStream=row.stream == AudioManager.STREAM_SYSTEM;
  final boolean isAlarmStream=row.stream == AudioManager.STREAM_ALARM;
  final boolean isMusicStream=row.stream == AudioManager.STREAM_MUSIC;
  final boolean isRingVibrate=isRingStream && mState.ringerModeInternal == AudioManager.RINGER_MODE_VIBRATE;
  final boolean isRingSilent=isRingStream && mState.ringerModeInternal == AudioManager.RINGER_MODE_SILENT;
  final boolean isZenAlarms=mState.zenMode == Global.ZEN_MODE_ALARMS;
  final boolean isZenNone=mState.zenMode == Global.ZEN_MODE_NO_INTERRUPTIONS;
  final boolean isZenPriority=mState.zenMode == Global.ZEN_MODE_IMPORTANT_INTERRUPTIONS;
  final boolean isRingZenNone=(isRingStream || isSystemStream) && isZenNone;
  final boolean isRingLimited=isRingStream && isZenPriority;
  final boolean zenMuted=isZenAlarms ? (isRingStream || isSystemStream) : isZenNone ? (isRingStream || isSystemStream || isAlarmStream|| isMusicStream) : false;
  final int max=ss.levelMax * 100;
  if (max != row.slider.getMax()) {
    row.slider.setMax(max);
  }
  if (row.cachedShowHeaders != mShowHeaders) {
    row.cachedShowHeaders=mShowHeaders;
    Util.setVisOrGone(row.header,mShowHeaders);
  }
  final String text;
  if (isRingZenNone) {
    text=mContext.getString(R.string.volume_stream_muted_dnd,ss.name);
  }
 else   if (isRingVibrate && isRingLimited) {
    text=mContext.getString(R.string.volume_stream_vibrate_dnd,ss.name);
  }
 else   if (isRingVibrate) {
    text=mContext.getString(R.string.volume_stream_vibrate,ss.name);
  }
 else   if (ss.muted || mAutomute && ss.level == 0) {
    text=mContext.getString(R.string.volume_stream_muted,ss.name);
  }
 else   if (isRingLimited) {
    text=mContext.getString(R.string.volume_stream_limited_dnd,ss.name);
  }
 else {
    text=ss.name;
  }
  Util.setText(row.header,text);
  final boolean iconEnabled=(mAutomute || ss.muteSupported) && !zenMuted;
  row.icon.setEnabled(iconEnabled);
  row.icon.setAlpha(iconEnabled ? 1 : 0.5f);
  final int iconRes=isRingVibrate ? R.drawable.ic_volume_ringer_vibrate : isRingSilent || zenMuted ? row.cachedIconRes : ss.routedToBluetooth ? (ss.muted ? R.drawable.ic_volume_media_bt_mute : R.drawable.ic_volume_media_bt) : mAutomute && ss.level == 0 ? row.iconMuteRes : (ss.muted ? row.iconMuteRes : row.iconRes);
  if (iconRes != row.cachedIconRes) {
    if (row.cachedIconRes != 0 && isRingVibrate) {
      mController.vibrate();
    }
    row.cachedIconRes=iconRes;
    row.icon.setImageResource(iconRes);
  }
  row.iconState=iconRes == R.drawable.ic_volume_ringer_vibrate ? Events.ICON_STATE_VIBRATE : (iconRes == R.drawable.ic_volume_media_bt_mute || iconRes == row.iconMuteRes) ? Events.ICON_STATE_MUTE : (iconRes == R.drawable.ic_volume_media_bt || iconRes == row.iconRes) ? Events.ICON_STATE_UNMUTE : Events.ICON_STATE_UNKNOWN;
  row.icon.setContentDescription(ss.name);
  final boolean enableSlider=!zenMuted;
  final int vlevel=row.ss.muted && (isRingVibrate || !isRingStream && !zenMuted) ? 0 : row.ss.level;
  updateVolumeRowSliderH(row,enableSlider,vlevel);
}
