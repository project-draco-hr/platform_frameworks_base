{
  row.slider.setEnabled(!zenMuted);
  updateVolumeRowSliderTintH(row,row.stream == mActiveStream);
  if (row.tracking) {
    return;
  }
  final int progress=row.slider.getProgress();
  final int level=getImpliedLevel(row.slider,progress);
  final boolean rowVisible=row.view.getVisibility() == View.VISIBLE;
  final boolean inGracePeriod=(SystemClock.uptimeMillis() - row.userAttempt) < USER_ATTEMPT_GRACE_PERIOD;
  mHandler.removeMessages(H.RECHECK,row);
  if (mShowing && rowVisible && inGracePeriod) {
    if (D.BUG)     Log.d(TAG,"inGracePeriod");
    mHandler.sendMessageAtTime(mHandler.obtainMessage(H.RECHECK,row),row.userAttempt + USER_ATTEMPT_GRACE_PERIOD);
    return;
  }
  final int vlevel=row.ss.muted ? 0 : row.ss.level;
  if (vlevel == level) {
    if (mShowing && rowVisible) {
      return;
    }
  }
  final int newProgress=vlevel * 100;
  if (progress != newProgress) {
    if (mShowing && rowVisible) {
      if (row.anim != null && row.anim.isRunning() && row.animTargetProgress == newProgress) {
        return;
      }
      if (row.anim == null) {
        row.anim=ObjectAnimator.ofInt(row.slider,"progress",progress,newProgress);
        row.anim.setInterpolator(new DecelerateInterpolator());
      }
 else {
        row.anim.cancel();
        row.anim.setIntValues(progress,newProgress);
      }
      row.animTargetProgress=newProgress;
      row.anim.setDuration(UPDATE_ANIMATION_DURATION);
      row.anim.start();
    }
 else {
      if (row.anim != null) {
        row.anim.cancel();
      }
      row.slider.setProgress(newProgress);
    }
    if (mAutomute && mShowing) {
      if (vlevel == 0 && !row.ss.muted && row.stream == AudioManager.STREAM_MUSIC) {
        mController.setStreamMute(row.stream,true);
      }
    }
  }
}
