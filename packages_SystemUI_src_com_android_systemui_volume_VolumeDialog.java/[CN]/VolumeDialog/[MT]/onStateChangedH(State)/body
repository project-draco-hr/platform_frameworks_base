{
  final boolean animating=mMotion.isAnimating();
  if (D.BUG)   Log.d(TAG,"onStateChangedH animating=" + animating);
  mState=state;
  if (animating) {
    mPendingStateChanged=true;
    return;
  }
  mDynamic.clear();
  for (int i=0; i < state.states.size(); i++) {
    final int stream=state.states.keyAt(i);
    final StreamState ss=state.states.valueAt(i);
    if (!ss.dynamic)     continue;
    mDynamic.put(stream,true);
    if (findRow(stream) == null) {
      addRow(stream,R.drawable.ic_volume_remote,R.drawable.ic_volume_remote_mute,true);
    }
  }
  if (mActiveStream != state.activeStream) {
    mActiveStream=state.activeStream;
    updateRowsH();
    rescheduleTimeoutH();
  }
  for (  VolumeRow row : mRows) {
    updateVolumeRowH(row);
  }
  updateFooterH();
}
