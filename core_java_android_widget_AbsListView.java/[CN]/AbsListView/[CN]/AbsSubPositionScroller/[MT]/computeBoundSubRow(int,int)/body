{
  int remainingOffset=mOffset;
  int targetHeight=getHeightForRow(targetRow);
  while (targetRow > 0 && remainingOffset > targetHeight) {
    targetRow--;
    remainingOffset-=targetHeight;
    targetHeight=getHeightForRow(targetRow);
  }
  final float targetOffsetRatio;
  if (targetHeight == 0) {
    targetOffsetRatio=1;
  }
 else {
    targetOffsetRatio=remainingOffset / (float)targetHeight;
  }
  final float targetSubRow=targetRow - targetOffsetRatio;
  mOffset=0;
  if (targetSubRow >= boundRow) {
    return boundRow;
  }
  final int listHeight=getHeight() - getPaddingTop() - getPaddingBottom();
  final int boundHeight=getHeightForRow(boundRow);
  int endRow=boundRow;
  int totalHeight=boundHeight;
  int endHeight;
  do {
    endRow--;
    endHeight=getHeightForRow(endRow);
    totalHeight+=endHeight;
  }
 while (totalHeight < listHeight && endRow > 0);
  final float endOffsetRatio;
  if (endHeight == 0) {
    endOffsetRatio=1;
  }
 else {
    endOffsetRatio=(totalHeight - listHeight) / (float)endHeight;
  }
  final float boundSubRow=endRow + endOffsetRatio;
  return Math.max(boundSubRow,targetSubRow);
}
