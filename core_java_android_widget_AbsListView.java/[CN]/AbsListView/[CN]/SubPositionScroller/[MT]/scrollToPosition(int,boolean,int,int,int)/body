{
  stop();
  if (mDataChanged) {
    mPositionScrollAfterLayout=new Runnable(){
      @Override public void run(){
        scrollToPosition(targetPosition,useOffset,offset,boundPosition,duration);
      }
    }
;
    return;
  }
  final int firstPosition=getFirstVisiblePosition();
  final int lastPosition=firstPosition + getChildCount();
  final int targetRow=getRowForPosition(targetPosition);
  final int firstRow=getRowForPosition(firstPosition);
  final int lastRow=getRowForPosition(lastPosition);
  if (useOffset || targetRow <= firstRow) {
    mOffset=offset;
  }
 else   if (targetRow >= lastRow - 1) {
    final int listHeight=getHeight() - getPaddingTop() - getPaddingBottom();
    mOffset=listHeight - getHeightForPosition(targetPosition);
  }
 else {
    return;
  }
  float endSubRow=targetRow;
  if (boundPosition != INVALID_POSITION) {
    final int boundRow=getRowForPosition(boundPosition);
    if (boundRow >= firstRow && boundRow < lastRow) {
      endSubRow=computeBoundSubRow(targetRow,boundRow);
    }
  }
  final View firstChild=getChildAt(0);
  final float startOffsetRatio=-firstChild.getTop() / (float)firstChild.getHeight();
  final float startSubRow=firstRow + startOffsetRatio;
  if (startSubRow == endSubRow && mOffset == 0) {
    return;
  }
  if (mSubScroller == null) {
    mSubScroller=new SubScroller();
  }
  mSubScroller.startScroll(startSubRow,endSubRow,duration);
  postOnAnimation(mAnimationFrame);
}
