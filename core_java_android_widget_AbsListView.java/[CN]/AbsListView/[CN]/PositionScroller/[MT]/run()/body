{
  final int listHeight=getHeight();
  final int firstPos=mFirstPosition;
switch (mMode) {
case MOVE_DOWN_POS:
{
      final int lastViewIndex=getChildCount() - 1;
      final int lastPos=firstPos + lastViewIndex;
      if (lastViewIndex < 0) {
        return;
      }
      if (lastPos == mLastSeenPos) {
        postOnAnimation(this);
        return;
      }
      final View lastView=getChildAt(lastViewIndex);
      final int lastViewHeight=lastView.getHeight();
      final int lastViewTop=lastView.getTop();
      final int lastViewPixelsShowing=listHeight - lastViewTop;
      final int extraScroll=lastPos < mItemCount - 1 ? Math.max(mListPadding.bottom,mExtraScroll) : mListPadding.bottom;
      final int scrollBy=lastViewHeight - lastViewPixelsShowing + extraScroll;
      smoothScrollBy(scrollBy,mScrollDuration,true);
      mLastSeenPos=lastPos;
      if (lastPos < mTargetPos) {
        postOnAnimation(this);
      }
      break;
    }
case MOVE_DOWN_BOUND:
{
    final int nextViewIndex=1;
    final int childCount=getChildCount();
    if (firstPos == mBoundPos || childCount <= nextViewIndex || firstPos + childCount >= mItemCount) {
      return;
    }
    final int nextPos=firstPos + nextViewIndex;
    if (nextPos == mLastSeenPos) {
      postOnAnimation(this);
      return;
    }
    final View nextView=getChildAt(nextViewIndex);
    final int nextViewHeight=nextView.getHeight();
    final int nextViewTop=nextView.getTop();
    final int extraScroll=Math.max(mListPadding.bottom,mExtraScroll);
    if (nextPos < mBoundPos) {
      smoothScrollBy(Math.max(0,nextViewHeight + nextViewTop - extraScroll),mScrollDuration,true);
      mLastSeenPos=nextPos;
      postOnAnimation(this);
    }
 else {
      if (nextViewTop > extraScroll) {
        smoothScrollBy(nextViewTop - extraScroll,mScrollDuration,true);
      }
    }
    break;
  }
case MOVE_UP_POS:
{
  if (firstPos == mLastSeenPos) {
    postOnAnimation(this);
    return;
  }
  final View firstView=getChildAt(0);
  if (firstView == null) {
    return;
  }
  final int firstViewTop=firstView.getTop();
  final int extraScroll=firstPos > 0 ? Math.max(mExtraScroll,mListPadding.top) : mListPadding.top;
  smoothScrollBy(firstViewTop - extraScroll,mScrollDuration,true);
  mLastSeenPos=firstPos;
  if (firstPos > mTargetPos) {
    postOnAnimation(this);
  }
  break;
}
case MOVE_UP_BOUND:
{
final int lastViewIndex=getChildCount() - 2;
if (lastViewIndex < 0) {
  return;
}
final int lastPos=firstPos + lastViewIndex;
if (lastPos == mLastSeenPos) {
  postOnAnimation(this);
  return;
}
final View lastView=getChildAt(lastViewIndex);
final int lastViewHeight=lastView.getHeight();
final int lastViewTop=lastView.getTop();
final int lastViewPixelsShowing=listHeight - lastViewTop;
final int extraScroll=Math.max(mListPadding.top,mExtraScroll);
mLastSeenPos=lastPos;
if (lastPos > mBoundPos) {
  smoothScrollBy(-(lastViewPixelsShowing - extraScroll),mScrollDuration,true);
  postOnAnimation(this);
}
 else {
  final int bottom=listHeight - extraScroll;
  final int lastViewBottom=lastViewTop + lastViewHeight;
  if (bottom > lastViewBottom) {
    smoothScrollBy(-(bottom - lastViewBottom),mScrollDuration,true);
  }
}
break;
}
case MOVE_OFFSET:
{
if (mLastSeenPos == firstPos) {
postOnAnimation(this);
return;
}
mLastSeenPos=firstPos;
final int childCount=getChildCount();
final int position=mTargetPos;
final int lastPos=firstPos + childCount - 1;
int viewTravelCount=0;
if (position < firstPos) {
viewTravelCount=firstPos - position + 1;
}
 else if (position > lastPos) {
viewTravelCount=position - lastPos;
}
final float screenTravelCount=(float)viewTravelCount / childCount;
final float modifier=Math.min(Math.abs(screenTravelCount),1.f);
if (position < firstPos) {
final int distance=(int)(-getHeight() * modifier);
final int duration=(int)(mScrollDuration * modifier);
smoothScrollBy(distance,duration,true);
postOnAnimation(this);
}
 else if (position > lastPos) {
final int distance=(int)(getHeight() * modifier);
final int duration=(int)(mScrollDuration * modifier);
smoothScrollBy(distance,duration,true);
postOnAnimation(this);
}
 else {
final int targetTop=getChildAt(position - firstPos).getTop();
final int distance=targetTop - mOffsetFromTop;
final int duration=(int)(mScrollDuration * ((float)Math.abs(distance) / getHeight()));
smoothScrollBy(distance,duration,true);
}
break;
}
default :
break;
}
}
