{
  final int firstPos=mFirstPosition;
  final int childCount=getChildCount();
  final int lastPos=firstPos + childCount - 1;
  final int paddedTop=mListPadding.top;
  final int paddedBottom=getHeight() - mListPadding.bottom;
  if (targetPos < firstPos || targetPos > lastPos) {
    Log.w(TAG,"scrollToVisible called with targetPos " + targetPos + " not visible ["+ firstPos+ ", "+ lastPos+ "]");
  }
  if (boundPos < firstPos || boundPos > lastPos) {
    boundPos=INVALID_POSITION;
  }
  final View targetChild=getChildAt(targetPos - firstPos);
  final int targetTop=targetChild.getTop();
  final int targetBottom=targetChild.getBottom();
  int scrollBy=0;
  if (targetBottom > paddedBottom) {
    scrollBy=targetBottom - paddedBottom;
  }
  if (targetTop < paddedTop) {
    scrollBy=targetTop - paddedTop;
  }
  if (scrollBy == 0) {
    return;
  }
  if (boundPos >= 0) {
    final View boundChild=getChildAt(boundPos - firstPos);
    final int boundTop=boundChild.getTop();
    final int boundBottom=boundChild.getBottom();
    final int absScroll=Math.abs(scrollBy);
    if (scrollBy < 0 && boundBottom + absScroll > paddedBottom) {
      scrollBy=Math.max(0,boundBottom - paddedBottom);
    }
 else     if (scrollBy > 0 && boundTop - absScroll < paddedTop) {
      scrollBy=Math.min(0,boundTop - paddedTop);
    }
  }
  smoothScrollBy(scrollBy,duration);
}
