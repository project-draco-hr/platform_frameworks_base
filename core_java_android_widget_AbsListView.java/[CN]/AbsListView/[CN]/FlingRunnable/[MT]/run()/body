{
switch (mTouchMode) {
default :
    endFling();
  return;
case TOUCH_MODE_SCROLL:
if (mScroller.isFinished()) {
  return;
}
case TOUCH_MODE_FLING:
{
if (mDataChanged) {
  layoutChildren();
}
if (mItemCount == 0 || getChildCount() == 0) {
  endFling();
  return;
}
final OverScroller scroller=mScroller;
boolean more=scroller.computeScrollOffset();
final int y=scroller.getCurrY();
int delta=mLastFlingY - y;
if (delta > 0) {
  mMotionPosition=mFirstPosition;
  final View firstView=getChildAt(0);
  mMotionViewOriginalTop=firstView.getTop();
  delta=Math.min(getHeight() - mPaddingBottom - mPaddingTop- 1,delta);
}
 else {
  int offsetToLast=getChildCount() - 1;
  mMotionPosition=mFirstPosition + offsetToLast;
  final View lastView=getChildAt(offsetToLast);
  mMotionViewOriginalTop=lastView.getTop();
  delta=Math.max(-(getHeight() - mPaddingBottom - mPaddingTop- 1),delta);
}
View motionView=getChildAt(mMotionPosition - mFirstPosition);
int oldTop=0;
if (motionView != null) {
  oldTop=motionView.getTop();
}
final boolean atEdge=trackMotionScroll(delta,delta);
final boolean atEnd=atEdge && (delta != 0);
if (atEnd) {
  if (motionView != null) {
    int overshoot=-(delta - (motionView.getTop() - oldTop));
    overScrollBy(0,overshoot,0,mScrollY,0,0,0,mOverflingDistance,false);
  }
  if (more) {
    edgeReached(delta);
  }
  break;
}
if (more && !atEnd) {
  if (atEdge)   invalidate();
  mLastFlingY=y;
  post(this);
}
 else {
  endFling();
  if (PROFILE_FLINGING) {
    if (mFlingProfilingStarted) {
      Debug.stopMethodTracing();
      mFlingProfilingStarted=false;
    }
    if (mFlingStrictSpan != null) {
      mFlingStrictSpan.finish();
      mFlingStrictSpan=null;
    }
  }
}
break;
}
case TOUCH_MODE_OVERFLING:
{
final OverScroller scroller=mScroller;
if (scroller.computeScrollOffset()) {
final int scrollY=mScrollY;
final int currY=scroller.getCurrY();
final int deltaY=currY - scrollY;
if (overScrollBy(0,deltaY,0,scrollY,0,0,0,mOverflingDistance,false)) {
  final boolean crossDown=scrollY <= 0 && currY > 0;
  final boolean crossUp=scrollY >= 0 && currY < 0;
  if (crossDown || crossUp) {
    int velocity=(int)scroller.getCurrVelocity();
    if (crossUp)     velocity=-velocity;
    scroller.abortAnimation();
    start(velocity);
  }
 else {
    startSpringback();
  }
}
 else {
  invalidate();
  post(this);
}
}
 else {
endFling();
}
break;
}
}
}
