{
  mCheckStates.clear();
  boolean checkedCountChanged=false;
  for (int checkedIndex=0; checkedIndex < mCheckedIdStates.size(); checkedIndex++) {
    final long id=mCheckedIdStates.keyAt(checkedIndex);
    final int lastPos=mCheckedIdStates.valueAt(checkedIndex);
    final long lastPosId=mAdapter.getItemId(lastPos);
    if (id != lastPosId) {
      final int start=Math.max(0,lastPos - CHECK_POSITION_SEARCH_DISTANCE);
      final int end=Math.min(lastPos + CHECK_POSITION_SEARCH_DISTANCE,mItemCount);
      boolean found=false;
      for (int searchPos=start; searchPos < end; searchPos++) {
        final long searchId=mAdapter.getItemId(searchPos);
        if (id == searchId) {
          found=true;
          mCheckStates.put(searchPos,true);
          mCheckedIdStates.setValueAt(checkedIndex,searchPos);
          break;
        }
      }
      if (!found) {
        mCheckedIdStates.delete(id);
        checkedIndex--;
        mCheckedItemCount--;
        checkedCountChanged=true;
        if (mChoiceActionMode != null && mMultiChoiceModeCallback != null) {
          mMultiChoiceModeCallback.onItemCheckedStateChanged(mChoiceActionMode,lastPos,id,false);
        }
      }
    }
 else {
      mCheckStates.put(lastPos,true);
    }
  }
  if (checkedCountChanged && mChoiceActionMode != null) {
    mChoiceActionMode.invalidate();
  }
}
