{
  final boolean positionChanged=position != mSelectorPosition;
  if (position != INVALID_POSITION) {
    mSelectorPosition=position;
  }
  final Rect selectorRect=mSelectorRect;
  selectorRect.set(sel.getLeft(),sel.getTop(),sel.getRight(),sel.getBottom());
  if (sel instanceof SelectionBoundsAdjuster) {
    ((SelectionBoundsAdjuster)sel).adjustListItemSelectionBounds(selectorRect);
  }
  selectorRect.left-=mSelectionLeftPadding;
  selectorRect.top-=mSelectionTopPadding;
  selectorRect.right+=mSelectionRightPadding;
  selectorRect.bottom+=mSelectionBottomPadding;
  final Drawable selector=mSelector;
  if (selector != null) {
    if (positionChanged) {
      selector.setVisible(false,false);
      selector.setState(StateSet.NOTHING);
    }
    selector.setBounds(selectorRect);
    if (positionChanged) {
      if (getVisibility() == VISIBLE) {
        selector.setVisible(true,false);
      }
      updateSelectorState();
    }
    if (manageHotspot) {
      selector.setHotspot(x,y);
    }
  }
  final boolean isChildViewEnabled=mIsChildViewEnabled;
  if (sel.isEnabled() != isChildViewEnabled) {
    mIsChildViewEnabled=!isChildViewEnabled;
    if (getSelectedItemPosition() != INVALID_POSITION) {
      refreshDrawableState();
    }
  }
}
