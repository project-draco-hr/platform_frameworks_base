{
  super.draw(canvas);
  if (mEdgeGlowTop != null) {
    final int scrollY=mScrollY;
    final boolean clipToPadding=getClipToPadding();
    final int width;
    final int height;
    final int translateX;
    final int translateY;
    if (clipToPadding) {
      width=getWidth() - mPaddingLeft - mPaddingRight;
      height=getHeight() - mPaddingTop - mPaddingBottom;
      translateX=mPaddingLeft;
      translateY=mPaddingTop;
    }
 else {
      width=getWidth();
      height=getHeight();
      translateX=0;
      translateY=0;
    }
    if (!mEdgeGlowTop.isFinished()) {
      final int restoreCount=canvas.save();
      canvas.clipRect(translateX,translateY,translateX + width,translateY + mEdgeGlowTop.getMaxHeight());
      final int edgeY=Math.min(0,scrollY + mFirstPositionDistanceGuess) + translateY;
      canvas.translate(translateX,edgeY);
      mEdgeGlowTop.setSize(width,height);
      if (mEdgeGlowTop.draw(canvas)) {
        invalidateTopGlow();
      }
      canvas.restoreToCount(restoreCount);
    }
    if (!mEdgeGlowBottom.isFinished()) {
      final int restoreCount=canvas.save();
      canvas.clipRect(translateX,translateY + height - mEdgeGlowBottom.getMaxHeight(),translateX + width,translateY + height);
      final int edgeX=-width + translateX;
      final int edgeY=Math.max(getHeight(),scrollY + mLastPositionDistanceGuess) - (clipToPadding ? mPaddingBottom : 0);
      canvas.translate(edgeX,edgeY);
      canvas.rotate(180,width,0);
      mEdgeGlowBottom.setSize(width,height);
      if (mEdgeGlowBottom.draw(canvas)) {
        invalidateBottomGlow();
      }
      canvas.restoreToCount(restoreCount);
    }
  }
}
