{
  if (!mTextFilterEnabled || !(getAdapter() instanceof Filterable) || ((Filterable)getAdapter()).getFilter() == null) {
    return false;
  }
  boolean handled=false;
  boolean okToSend=true;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
case KeyEvent.KEYCODE_DPAD_DOWN:
case KeyEvent.KEYCODE_DPAD_LEFT:
case KeyEvent.KEYCODE_DPAD_RIGHT:
case KeyEvent.KEYCODE_DPAD_CENTER:
case KeyEvent.KEYCODE_ENTER:
    okToSend=false;
  break;
case KeyEvent.KEYCODE_BACK:
if (mFiltered && mPopup != null && mPopup.isShowing() && event.getAction() == KeyEvent.ACTION_DOWN) {
  handled=true;
  mTextFilter.setText("");
}
okToSend=false;
break;
case KeyEvent.KEYCODE_SPACE:
okToSend=mFiltered=true;
break;
}
if (okToSend && acceptFilter()) {
createTextFilter(true);
KeyEvent forwardEvent=event;
if (forwardEvent.getRepeatCount() > 0) {
forwardEvent=new KeyEvent(event,event.getEventTime(),0);
}
int action=event.getAction();
switch (action) {
case KeyEvent.ACTION_DOWN:
handled=mTextFilter.onKeyDown(keyCode,forwardEvent);
break;
case KeyEvent.ACTION_UP:
handled=mTextFilter.onKeyUp(keyCode,forwardEvent);
break;
case KeyEvent.ACTION_MULTIPLE:
handled=mTextFilter.onKeyMultiple(keyCode,count,event);
break;
}
}
return handled;
}
