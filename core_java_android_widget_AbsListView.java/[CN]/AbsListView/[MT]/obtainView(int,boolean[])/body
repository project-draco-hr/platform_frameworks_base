{
  Trace.traceBegin(Trace.TRACE_TAG_VIEW,"obtainView");
  isScrap[0]=false;
  final View transientView=mRecycler.getTransientStateView(position);
  if (transientView != null) {
    final LayoutParams params=(LayoutParams)transientView.getLayoutParams();
    if (params.viewType == mAdapter.getItemViewType(position)) {
      final View updatedView=mAdapter.getView(position,transientView,this);
      if (updatedView != transientView) {
        setItemViewLayoutParams(updatedView,position);
        mRecycler.addScrapView(updatedView,position);
      }
    }
    isScrap[0]=true;
    transientView.dispatchFinishTemporaryDetach();
    return transientView;
  }
  final View scrapView=mRecycler.getScrapView(position);
  final View child=mAdapter.getView(position,scrapView,this);
  if (scrapView != null) {
    if (child != scrapView) {
      mRecycler.addScrapView(scrapView,position);
    }
 else {
      isScrap[0]=true;
      child.dispatchFinishTemporaryDetach();
    }
  }
  if (mCacheColorHint != 0) {
    child.setDrawingCacheBackgroundColor(mCacheColorHint);
  }
  if (child.getImportantForAccessibility() == IMPORTANT_FOR_ACCESSIBILITY_AUTO) {
    child.setImportantForAccessibility(IMPORTANT_FOR_ACCESSIBILITY_YES);
  }
  setItemViewLayoutParams(child,position);
  if (AccessibilityManager.getInstance(mContext).isEnabled()) {
    if (mAccessibilityDelegate == null) {
      mAccessibilityDelegate=new ListItemAccessibilityDelegate();
    }
    if (child.getAccessibilityDelegate() == null) {
      child.setAccessibilityDelegate(mAccessibilityDelegate);
    }
  }
  Trace.traceEnd(Trace.TRACE_TAG_VIEW);
  return child;
}
