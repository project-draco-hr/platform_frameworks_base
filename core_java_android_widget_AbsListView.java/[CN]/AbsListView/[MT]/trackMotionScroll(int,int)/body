{
  final int childCount=getChildCount();
  if (childCount == 0) {
    return true;
  }
  final int firstTop=getChildAt(0).getTop();
  final int lastBottom=getChildAt(childCount - 1).getBottom();
  final Rect listPadding=mListPadding;
  int effectivePaddingTop=0;
  int effectivePaddingBottom=0;
  if ((mGroupFlags & CLIP_TO_PADDING_MASK) == CLIP_TO_PADDING_MASK) {
    effectivePaddingTop=listPadding.top;
    effectivePaddingBottom=listPadding.bottom;
  }
  final int spaceAbove=effectivePaddingTop - firstTop;
  final int end=getHeight() - effectivePaddingBottom;
  final int spaceBelow=lastBottom - end;
  final int height=getHeight() - mPaddingBottom - mPaddingTop;
  if (deltaY < 0) {
    deltaY=Math.max(-(height - 1),deltaY);
  }
 else {
    deltaY=Math.min(height - 1,deltaY);
  }
  if (incrementalDeltaY < 0) {
    incrementalDeltaY=Math.max(-(height - 1),incrementalDeltaY);
  }
 else {
    incrementalDeltaY=Math.min(height - 1,incrementalDeltaY);
  }
  final int firstPosition=mFirstPosition;
  if (firstPosition == 0) {
    mFirstPositionDistanceGuess=firstTop - listPadding.top;
  }
 else {
    mFirstPositionDistanceGuess+=incrementalDeltaY;
  }
  if (firstPosition + childCount == mItemCount) {
    mLastPositionDistanceGuess=lastBottom + listPadding.bottom;
  }
 else {
    mLastPositionDistanceGuess+=incrementalDeltaY;
  }
  if (firstPosition == 0 && firstTop >= listPadding.top && incrementalDeltaY >= 0) {
    return incrementalDeltaY != 0;
  }
  if (firstPosition + childCount == mItemCount && lastBottom <= end && incrementalDeltaY <= 0) {
    return incrementalDeltaY != 0;
  }
  final boolean down=incrementalDeltaY < 0;
  final boolean inTouchMode=isInTouchMode();
  if (inTouchMode) {
    hideSelector();
  }
  final int headerViewsCount=getHeaderViewsCount();
  final int footerViewsStart=mItemCount - getFooterViewsCount();
  int start=0;
  int count=0;
  if (down) {
    int top=-incrementalDeltaY;
    if ((mGroupFlags & CLIP_TO_PADDING_MASK) == CLIP_TO_PADDING_MASK) {
      top+=listPadding.top;
    }
    for (int i=0; i < childCount; i++) {
      final View child=getChildAt(i);
      if (child.getBottom() >= top) {
        break;
      }
 else {
        count++;
        int position=firstPosition + i;
        if (position >= headerViewsCount && position < footerViewsStart) {
          mRecycler.addScrapView(child,position);
          if (ViewDebug.TRACE_RECYCLER) {
            ViewDebug.trace(child,ViewDebug.RecyclerTraceType.MOVE_TO_SCRAP_HEAP,firstPosition + i,-1);
          }
        }
      }
    }
  }
 else {
    int bottom=getHeight() - incrementalDeltaY;
    if ((mGroupFlags & CLIP_TO_PADDING_MASK) == CLIP_TO_PADDING_MASK) {
      bottom-=listPadding.bottom;
    }
    for (int i=childCount - 1; i >= 0; i--) {
      final View child=getChildAt(i);
      if (child.getTop() <= bottom) {
        break;
      }
 else {
        start=i;
        count++;
        int position=firstPosition + i;
        if (position >= headerViewsCount && position < footerViewsStart) {
          mRecycler.addScrapView(child,position);
          if (ViewDebug.TRACE_RECYCLER) {
            ViewDebug.trace(child,ViewDebug.RecyclerTraceType.MOVE_TO_SCRAP_HEAP,firstPosition + i,-1);
          }
        }
      }
    }
  }
  mMotionViewNewTop=mMotionViewOriginalTop + deltaY;
  mBlockLayoutRequests=true;
  if (count > 0) {
    detachViewsFromParent(start,count);
  }
  offsetChildrenTopAndBottom(incrementalDeltaY);
  if (down) {
    mFirstPosition+=count;
  }
  invalidate();
  final int absIncrementalDeltaY=Math.abs(incrementalDeltaY);
  if (spaceAbove < absIncrementalDeltaY || spaceBelow < absIncrementalDeltaY) {
    fillGap(down);
  }
  if (!inTouchMode && mSelectedPosition != INVALID_POSITION) {
    final int childIndex=mSelectedPosition - mFirstPosition;
    if (childIndex >= 0 && childIndex < getChildCount()) {
      positionSelector(mSelectedPosition,getChildAt(childIndex));
    }
  }
 else   if (mSelectorPosition != INVALID_POSITION) {
    final int childIndex=mSelectorPosition - mFirstPosition;
    if (childIndex >= 0 && childIndex < getChildCount()) {
      positionSelector(INVALID_POSITION,getChildAt(childIndex));
    }
  }
 else {
    mSelectorRect.setEmpty();
  }
  mBlockLayoutRequests=false;
  invokeOnItemScrollListener();
  awakenScrollBars();
  return false;
}
