{
  mInstallGesturesOverlay=false;
  if (mGesturesPopup == null) {
    final Context c=getContext();
    final LayoutInflater layoutInflater=(LayoutInflater)c.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    mGesturesOverlay=(GestureOverlayView)layoutInflater.inflate(R.layout.list_gestures_overlay,null);
    final PopupWindow p=new PopupWindow(c);
    p.setFocusable(false);
    p.setTouchable(false);
    p.setInputMethodMode(PopupWindow.INPUT_METHOD_NOT_NEEDED);
    p.setContentView(mGesturesOverlay);
    p.setWidth(getWidth());
    p.setHeight(getHeight());
    p.setBackgroundDrawable(null);
    if (mGesturesLayoutListener == null) {
      mGesturesLayoutListener=new ViewTreeObserver.OnGlobalLayoutListener(){
        public void onGlobalLayout(){
          if (isShown()) {
            showGesturesPopup();
          }
 else           if (mGesturesPopup.isShowing()) {
            dismissGesturesPopup();
          }
        }
      }
;
    }
    getViewTreeObserver().addOnGlobalLayoutListener(mGesturesLayoutListener);
    mGlobalLayoutListenerAddedGestures=true;
    mGesturesPopup=p;
    mGesturesOverlay.removeAllOnGestureListeners();
    mGesturesListener=new TouchThroughGestureListener(null);
    mGesturesListener.setGestureType(TouchThroughGestureListener.MULTIPLE_STROKE);
    mGesturesListener.addOnGestureActionListener(new GesturesProcessor());
    mGesturesOverlay.addOnGestureListener(mGesturesListener);
    mPreviousGesturing=false;
  }
}
