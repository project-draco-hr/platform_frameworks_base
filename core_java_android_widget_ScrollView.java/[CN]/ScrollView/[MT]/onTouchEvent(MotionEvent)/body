{
  if (ev.getAction() == MotionEvent.ACTION_DOWN && ev.getEdgeFlags() != 0) {
    return false;
  }
  if (!canScroll()) {
    return false;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
  final float y=ev.getY();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (!mScroller.isFinished()) {
      mScroller.abortAnimation();
    }
  mLastMotionY=y;
break;
case MotionEvent.ACTION_MOVE:
final int deltaY=(int)(mLastMotionY - y);
mLastMotionY=y;
if (deltaY < 0) {
if (mScrollY > 0) {
scrollBy(0,deltaY);
}
}
 else if (deltaY > 0) {
final int bottomEdge=getHeight() - mPaddingBottom;
final int availableToScroll=getChildAt(0).getBottom() - mScrollY - bottomEdge;
if (availableToScroll > 0) {
scrollBy(0,Math.min(availableToScroll,deltaY));
}
}
break;
case MotionEvent.ACTION_UP:
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000);
int initialVelocity=(int)velocityTracker.getYVelocity();
if ((Math.abs(initialVelocity) > ViewConfiguration.get(mContext).getScaledMinimumFlingVelocity()) && getChildCount() > 0) {
fling(-initialVelocity);
}
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
}
return true;
}
