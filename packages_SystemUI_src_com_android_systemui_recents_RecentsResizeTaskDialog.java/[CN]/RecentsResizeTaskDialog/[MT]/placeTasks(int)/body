{
  Rect rect=mSsp.getWindowRect();
  for (int i=0; i < mBounds.length; ++i) {
    mBounds[i].set(rect);
    if (i != 0) {
      mTasks[i]=null;
    }
  }
  int additionalTasks=0;
switch (arrangement) {
case PLACE_LEFT:
    mBounds[0].right=mBounds[0].centerX();
  mBounds[1].left=mBounds[0].right;
additionalTasks=1;
break;
case PLACE_RIGHT:
mBounds[1].right=mBounds[1].centerX();
mBounds[0].left=mBounds[1].right;
additionalTasks=1;
break;
case PLACE_TOP:
mBounds[0].bottom=mBounds[0].centerY();
mBounds[1].top=mBounds[0].bottom;
additionalTasks=1;
break;
case PLACE_BOTTOM:
mBounds[1].bottom=mBounds[1].centerY();
mBounds[0].top=mBounds[1].bottom;
additionalTasks=1;
break;
case PLACE_TOP_LEFT:
mBounds[0].right=mBounds[0].centerX();
mBounds[0].bottom=mBounds[0].centerY();
mBounds[1].left=mBounds[0].right;
mBounds[1].bottom=mBounds[0].bottom;
mBounds[2].right=mBounds[0].right;
mBounds[2].top=mBounds[0].bottom;
mBounds[3].left=mBounds[0].right;
mBounds[3].top=mBounds[0].bottom;
additionalTasks=3;
break;
case PLACE_TOP_RIGHT:
mBounds[0].left=mBounds[0].centerX();
mBounds[0].bottom=mBounds[0].centerY();
mBounds[1].right=mBounds[0].left;
mBounds[1].bottom=mBounds[0].bottom;
mBounds[2].left=mBounds[0].left;
mBounds[2].top=mBounds[0].bottom;
mBounds[3].right=mBounds[0].left;
mBounds[3].top=mBounds[0].bottom;
additionalTasks=3;
break;
case PLACE_BOTTOM_LEFT:
mBounds[0].right=mBounds[0].centerX();
mBounds[0].top=mBounds[0].centerY();
mBounds[1].left=mBounds[0].right;
mBounds[1].top=mBounds[0].top;
mBounds[2].right=mBounds[0].right;
mBounds[2].bottom=mBounds[0].top;
mBounds[3].left=mBounds[0].right;
mBounds[3].bottom=mBounds[0].top;
additionalTasks=3;
break;
case PLACE_BOTTOM_RIGHT:
mBounds[0].left=mBounds[0].centerX();
mBounds[0].top=mBounds[0].centerY();
mBounds[1].right=mBounds[0].left;
mBounds[1].top=mBounds[0].top;
mBounds[2].left=mBounds[0].left;
mBounds[2].bottom=mBounds[0].top;
mBounds[3].right=mBounds[0].left;
mBounds[3].bottom=mBounds[0].top;
additionalTasks=3;
break;
case PLACE_FULL:
break;
}
for (int i=1; i <= additionalTasks && mTasks[i - 1] != null; ++i) {
mTasks[i]=mRecentsView.getNextTaskOrTopTask(mTasks[i - 1]);
if (mTasks[i] == mTasks[0]) {
mTasks[i]=null;
}
}
for (int i=additionalTasks; i >= 0; --i) {
if (mTasks[i] != null) {
mSsp.resizeTask(mTasks[i].key.id,mBounds[i]);
}
}
dismiss();
mRecentsActivity.dismissRecentsToHomeRaw(false);
for (int i=additionalTasks; i >= 0; --i) {
if (mTasks[i] != null) {
mRecentsView.launchTask(mTasks[i]);
}
}
}
