{
  final int tunUid=10030;
  final String tunIface="tun0";
  final String underlyingIface="wlan0";
  final int testTag1=8888;
  NetworkStats delta=new NetworkStats(TEST_START,17).addValues(tunIface,10100,SET_DEFAULT,TAG_NONE,39605L,46L,12259L,55L,0L).addValues(tunIface,10100,SET_FOREGROUND,TAG_NONE,0L,0L,0L,0L,0L).addValues(tunIface,10120,SET_DEFAULT,TAG_NONE,72667L,197L,43909L,241L,0L).addValues(tunIface,10120,SET_FOREGROUND,TAG_NONE,9297L,17L,4128L,21L,0L).addValues(tunIface,tunUid,SET_DEFAULT,TAG_NONE,4983L,10L,1801L,12L,0L).addValues(tunIface,tunUid,SET_FOREGROUND,TAG_NONE,0L,0L,0L,0L,0L).addValues(tunIface,10120,SET_DEFAULT,testTag1,21691L,41L,13820L,51L,0L).addValues(tunIface,10120,SET_FOREGROUND,testTag1,1281L,2L,665L,2L,0L).addValues(TEST_IFACE,10100,SET_DEFAULT,TAG_NONE,1685L,5L,2070L,6L,0L).addValues(underlyingIface,10100,SET_DEFAULT,TAG_NONE,5178L,8L,2139L,11L,0L).addValues(underlyingIface,10100,SET_FOREGROUND,TAG_NONE,0L,0L,0L,0L,0L).addValues(underlyingIface,tunUid,SET_DEFAULT,TAG_NONE,149873L,287L,59217L,299L,0L).addValues(underlyingIface,tunUid,SET_FOREGROUND,TAG_NONE,0L,0L,0L,0L,0L);
  assertTrue(delta.migrateTun(tunUid,tunIface,underlyingIface));
  assertEquals(21,delta.size());
  assertValues(delta,0,tunIface,10100,SET_DEFAULT,TAG_NONE,39605L,46L,12259L,55L,0L);
  assertValues(delta,1,tunIface,10100,SET_FOREGROUND,TAG_NONE,0L,0L,0L,0L,0L);
  assertValues(delta,2,tunIface,10120,SET_DEFAULT,TAG_NONE,72667L,197L,43909L,241L,0L);
  assertValues(delta,3,tunIface,10120,SET_FOREGROUND,TAG_NONE,9297L,17L,4128L,21L,0L);
  assertValues(delta,4,tunIface,tunUid,SET_DEFAULT,TAG_NONE,4983L,10L,1801L,12L,0L);
  assertValues(delta,5,tunIface,tunUid,SET_FOREGROUND,TAG_NONE,0L,0L,0L,0L,0L);
  assertValues(delta,6,tunIface,10120,SET_DEFAULT,testTag1,21691L,41L,13820L,51L,0L);
  assertValues(delta,7,tunIface,10120,SET_FOREGROUND,testTag1,1281L,2L,665L,2L,0L);
  assertValues(delta,8,TEST_IFACE,10100,SET_DEFAULT,TAG_NONE,1685L,5L,2070L,6L,0L);
  assertValues(delta,9,underlyingIface,10100,SET_DEFAULT,TAG_NONE,44783L,54L,13829L,60L,0L);
  assertValues(delta,10,underlyingIface,10100,SET_FOREGROUND,TAG_NONE,0L,0L,0L,0L,0L);
  assertValues(delta,11,underlyingIface,tunUid,SET_DEFAULT,TAG_NONE,28304L,27L,1719L,12L,0L);
  assertValues(delta,12,underlyingIface,tunUid,SET_FOREGROUND,TAG_NONE,0L,0L,0L,0L,0L);
  assertContains(delta,underlyingIface,10120,SET_DEFAULT,TAG_NONE,72667L,197L,41872l,219L,0L);
  assertContains(delta,underlyingIface,10120,SET_FOREGROUND,TAG_NONE,9297L,17L,3936,19L,0L);
  assertContains(delta,underlyingIface,10120,SET_DEFAULT,testTag1,21691L,41L,13179L,46L,0L);
  assertContains(delta,underlyingIface,10120,SET_FOREGROUND,testTag1,1281L,2L,634L,1L,0L);
  assertContains(delta,underlyingIface,10100,SET_DBG_VPN_IN,TAG_NONE,39605L,46L,11690,49,0);
  assertContains(delta,underlyingIface,10120,SET_DBG_VPN_IN,TAG_NONE,81964,214,45808,238,0);
  assertContains(delta,underlyingIface,tunUid,SET_DBG_VPN_IN,TAG_NONE,4983,10,1717,10,0);
  assertContains(delta,underlyingIface,tunUid,SET_DBG_VPN_OUT,TAG_NONE,126552,270,59215,297,0);
}
