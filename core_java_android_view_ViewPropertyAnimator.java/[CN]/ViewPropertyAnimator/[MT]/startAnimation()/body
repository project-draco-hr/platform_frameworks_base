{
  if (mRTBackend != null && mRTBackend.startAnimation(this)) {
    return;
  }
  mView.setHasTransientState(true);
  ValueAnimator animator=ValueAnimator.ofFloat(1.0f);
  ArrayList<NameValuesHolder> nameValueList=(ArrayList<NameValuesHolder>)mPendingAnimations.clone();
  mPendingAnimations.clear();
  int propertyMask=0;
  int propertyCount=nameValueList.size();
  for (int i=0; i < propertyCount; ++i) {
    NameValuesHolder nameValuesHolder=nameValueList.get(i);
    propertyMask|=nameValuesHolder.mNameConstant;
  }
  mAnimatorMap.put(animator,new PropertyBundle(propertyMask,nameValueList));
  if (mPendingSetupAction != null) {
    mAnimatorSetupMap.put(animator,mPendingSetupAction);
    mPendingSetupAction=null;
  }
  if (mPendingCleanupAction != null) {
    mAnimatorCleanupMap.put(animator,mPendingCleanupAction);
    mPendingCleanupAction=null;
  }
  if (mPendingOnStartAction != null) {
    mAnimatorOnStartMap.put(animator,mPendingOnStartAction);
    mPendingOnStartAction=null;
  }
  if (mPendingOnEndAction != null) {
    mAnimatorOnEndMap.put(animator,mPendingOnEndAction);
    mPendingOnEndAction=null;
  }
  animator.addUpdateListener(mAnimatorEventListener);
  animator.addListener(mAnimatorEventListener);
  if (mStartDelaySet) {
    animator.setStartDelay(mStartDelay);
  }
  if (mDurationSet) {
    animator.setDuration(mDuration);
  }
  if (mInterpolatorSet) {
    animator.setInterpolator(mInterpolator);
  }
  animator.start();
}
