{
  if (previewSize.getWidth() > activeArray.width()) {
    throw new IllegalArgumentException("previewSize must not be wider than activeArray");
  }
 else   if (previewSize.getHeight() > activeArray.height()) {
    throw new IllegalArgumentException("previewSize must not be taller than activeArray");
  }
  float aspectRatioArray=activeArray.width() * 1.0f / activeArray.height();
  float aspectRatioPreview=previewSize.getWidth() * 1.0f / previewSize.getHeight();
  float cropH, cropW;
  if (aspectRatioPreview < aspectRatioArray) {
    cropH=activeArray.height();
    cropW=cropH * aspectRatioPreview;
  }
 else {
    cropW=activeArray.width();
    cropH=cropW / aspectRatioPreview;
  }
  Matrix translateMatrix=new Matrix();
  RectF cropRect=new RectF(0,0,cropW,cropH);
  translateMatrix.setTranslate(activeArray.exactCenterX(),activeArray.exactCenterY());
  translateMatrix.postTranslate(-cropRect.centerX(),-cropRect.centerY());
  translateMatrix.mapRect(cropRect);
  return ParamsUtils.createRect(cropRect);
}
