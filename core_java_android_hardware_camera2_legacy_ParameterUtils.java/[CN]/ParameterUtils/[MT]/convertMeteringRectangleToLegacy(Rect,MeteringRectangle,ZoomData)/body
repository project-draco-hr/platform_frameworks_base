{
  Rect previewCrop=zoomData.previewCrop;
  float scaleW=(NORMALIZED_RECTANGLE_MAX - NORMALIZED_RECTANGLE_MIN) * 1.0f / previewCrop.width();
  float scaleH=(NORMALIZED_RECTANGLE_MAX - NORMALIZED_RECTANGLE_MIN) * 1.0f / previewCrop.height();
  Matrix transform=new Matrix();
  transform.setTranslate(-previewCrop.left,-previewCrop.top);
  transform.postScale(scaleW,scaleH);
  transform.postTranslate(NORMALIZED_RECTANGLE_MIN,NORMALIZED_RECTANGLE_MIN);
  Rect normalizedRegionUnbounded=ParamsUtils.mapRect(transform,meteringRect.getRect());
  Rect normalizedIntersected=new Rect(normalizedRegionUnbounded);
  Camera.Area meteringArea;
  if (!normalizedIntersected.intersect(NORMALIZED_RECTANGLE_DEFAULT)) {
    Log.w(TAG,"convertMeteringRectangleToLegacy - metering rectangle too small, " + "no metering will be done");
    normalizedIntersected.set(RECTANGLE_EMPTY);
    meteringArea=new Camera.Area(RECTANGLE_EMPTY,MeteringRectangle.METERING_WEIGHT_DONT_CARE);
  }
 else {
    meteringArea=new Camera.Area(normalizedIntersected,meteringRect.getMeteringWeight());
  }
  Rect previewMetering=meteringRect.getRect();
  if (!previewMetering.intersect(previewCrop)) {
    previewMetering.set(RECTANGLE_EMPTY);
  }
  Rect reportedMetering;
{
    Camera.Area normalizedAreaUnbounded=new Camera.Area(normalizedRegionUnbounded,meteringRect.getMeteringWeight());
    WeightedRectangle reportedMeteringRect=convertCameraAreaToActiveArrayRectangle(activeArray,zoomData,normalizedAreaUnbounded,false);
    reportedMetering=reportedMeteringRect.rect;
  }
  if (DEBUG) {
    Log.v(TAG,String.format("convertMeteringRectangleToLegacy - activeArray = %s, meteringRect = %s, " + "previewCrop = %s, meteringArea = %s, previewMetering = %s, " + "reportedMetering = %s, normalizedRegionUnbounded = %s",activeArray,meteringRect,previewCrop,stringFromArea(meteringArea),previewMetering,reportedMetering,normalizedRegionUnbounded));
  }
  return new MeteringData(meteringArea,previewMetering,reportedMetering);
}
