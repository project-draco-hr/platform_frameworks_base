{
  Object array;
  int elementSize=mComponentMarshaler.getNativeSize();
  if (elementSize != Marshaler.NATIVE_SIZE_DYNAMIC) {
    int remaining=buffer.remaining();
    int arraySize=remaining / elementSize;
    if (remaining % elementSize != 0) {
      throw new UnsupportedOperationException("Arrays for " + mTypeReference + " must be packed tighly into a multiple of "+ elementSize+ "; but there are "+ (remaining % elementSize)+ " left over bytes");
    }
    if (VERBOSE) {
      Log.v(TAG,String.format("Attempting to unpack array (count = %d, element size = %d, bytes " + "remaining = %d) for type %s",arraySize,elementSize,remaining,mClass));
    }
    array=Array.newInstance(mComponentClass,arraySize);
    for (int i=0; i < arraySize; ++i) {
      Object elem=mComponentMarshaler.unmarshal(buffer);
      Array.set(array,i,elem);
    }
  }
 else {
    ArrayList<Object> arrayList=new ArrayList<Object>();
    while (buffer.hasRemaining()) {
      Object elem=mComponentMarshaler.unmarshal(buffer);
      arrayList.add(elem);
    }
    int arraySize=arrayList.size();
    array=copyListToArray(arrayList,Array.newInstance(mComponentClass,arraySize));
  }
  if (buffer.remaining() != 0) {
    Log.e(TAG,"Trailing bytes (" + buffer.remaining() + ") left over after unpacking "+ mClass);
  }
  return mClass.cast(array);
}
