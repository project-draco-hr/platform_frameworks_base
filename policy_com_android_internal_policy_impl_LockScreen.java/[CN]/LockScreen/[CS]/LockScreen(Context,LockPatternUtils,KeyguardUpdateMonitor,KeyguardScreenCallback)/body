{
  super(context);
  mLockPatternUtils=lockPatternUtils;
  mUpdateMonitor=updateMonitor;
  mCallback=callback;
  mEnableMenuKeyInLockScreen=shouldEnableMenuKey();
  mCreatedInPortrait=updateMonitor.isInPortrait();
  final LayoutInflater inflater=LayoutInflater.from(context);
  if (mCreatedInPortrait) {
    inflater.inflate(R.layout.keyguard_screen_rotary_unlock,this,true);
  }
 else {
    inflater.inflate(R.layout.keyguard_screen_rotary_unlock_land,this,true);
  }
  mCarrier=(TextView)findViewById(R.id.carrier);
  mTime=(TextView)findViewById(R.id.time);
  mDate=(TextView)findViewById(R.id.date);
  mStatus1=(TextView)findViewById(R.id.status1);
  mStatus2=(TextView)findViewById(R.id.status2);
  mEmergencyCallButton=(Button)findViewById(R.id.emergencyCallButton);
  mEmergencyCallButton.setText(R.string.lockscreen_emergency_call);
  mScreenLocked=(TextView)findViewById(R.id.screenLocked);
  mRotary=(RotarySelector)findViewById(R.id.rotary);
  mEmergencyCallButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      mCallback.takeEmergencyCallAction();
    }
  }
);
  setFocusable(true);
  setFocusableInTouchMode(true);
  setDescendantFocusability(ViewGroup.FOCUS_BLOCK_DESCENDANTS);
  updateMonitor.registerInfoCallback(this);
  updateMonitor.registerSimStateCallback(this);
  updateMonitor.registerConfigurationChangeCallback(this);
  mAudioManager=(AudioManager)getContext().getSystemService(Context.AUDIO_SERVICE);
  mSilentMode=mAudioManager.getRingerMode() == AudioManager.RINGER_MODE_SILENT;
  mRotary.setOnDialTriggerListener(this);
  mRotary.setLeftHandleResource(R.drawable.ic_jog_dial_unlock);
  mRotary.setRightHandleResource(mSilentMode ? R.drawable.ic_jog_dial_sound_off : R.drawable.ic_jog_dial_sound_on);
  resetStatusInfo(updateMonitor);
}
