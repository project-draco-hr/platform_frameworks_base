{
  float[] targetVector=new float[2];
  if (covarianceMatrix[0][1] == 0 || covarianceMatrix[1][0] == 0) {
    targetVector[0]=1;
    targetVector[1]=0;
  }
  float a=-covarianceMatrix[0][0] - covarianceMatrix[1][1];
  float b=covarianceMatrix[0][0] * covarianceMatrix[1][1] - covarianceMatrix[0][1] * covarianceMatrix[1][0];
  float value=a / 2;
  float rightside=(float)Math.sqrt(Math.pow(value,2) - b);
  float lambda1=-value + rightside;
  float lambda2=-value - rightside;
  if (lambda1 == lambda2) {
    targetVector[0]=0;
    targetVector[1]=0;
  }
 else {
    float lambda=lambda1 > lambda2 ? lambda1 : lambda2;
    targetVector[0]=1;
    targetVector[1]=(lambda - covarianceMatrix[0][0]) / covarianceMatrix[0][1];
  }
  return targetVector;
}
