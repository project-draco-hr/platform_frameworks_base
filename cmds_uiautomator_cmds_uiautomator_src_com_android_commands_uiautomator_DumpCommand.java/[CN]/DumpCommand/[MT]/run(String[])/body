{
  File dumpFile=DEFAULT_DUMP_FILE;
  boolean verboseMode=true;
  for (  String arg : args) {
    if (arg.equals("--compressed"))     verboseMode=false;
 else     if (!arg.startsWith("-")) {
      dumpFile=new File(arg);
    }
  }
  UiAutomationShellWrapper automationWrapper=new UiAutomationShellWrapper();
  automationWrapper.connect();
  if (verboseMode) {
    automationWrapper.setCompressedLayoutHierarchy(false);
  }
 else {
    automationWrapper.setCompressedLayoutHierarchy(true);
  }
  try {
    UiAutomation uiAutomation=automationWrapper.getUiAutomation();
    uiAutomation.waitForIdle(1000,1000 * 10);
    AccessibilityNodeInfo info=uiAutomation.getRootInActiveWindow();
    if (info == null) {
      System.err.println("ERROR: null root node returned by UiTestAutomationBridge.");
      return;
    }
    Display display=DisplayManagerGlobal.getInstance().getRealDisplay(Display.DEFAULT_DISPLAY);
    int rotation=display.getRotation();
    Point size=new Point();
    display.getSize(size);
    AccessibilityNodeInfoDumper.dumpWindowToFile(info,dumpFile,rotation,size.x,size.y);
  }
 catch (  TimeoutException re) {
    System.err.println("ERROR: could not get idle state.");
    return;
  }
 finally {
    automationWrapper.disconnect();
  }
  System.out.println(String.format("UI hierchary dumped to: %s",dumpFile.getAbsolutePath()));
}
