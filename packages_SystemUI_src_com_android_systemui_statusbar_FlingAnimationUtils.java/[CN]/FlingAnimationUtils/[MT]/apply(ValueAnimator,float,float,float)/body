{
  float diff=Math.abs(endValue - currValue);
  float velAbs=Math.abs(velocity);
  float durationSeconds=LINEAR_OUT_SLOW_IN_START_GRADIENT * diff / velAbs;
  if (durationSeconds <= MAX_LENGTH_SECONDS) {
    animator.setInterpolator(mLinearOutSlowIn);
  }
 else   if (velAbs >= mMinVelocityPxPerSecond) {
    durationSeconds=MAX_LENGTH_SECONDS;
    VelocityInterpolator velocityInterpolator=new VelocityInterpolator(durationSeconds,velAbs,diff);
    InterpolatorInterpolator superInterpolator=new InterpolatorInterpolator(velocityInterpolator,mLinearOutSlowIn,mLinearOutSlowIn);
    animator.setInterpolator(superInterpolator);
  }
 else {
    durationSeconds=MAX_LENGTH_SECONDS;
    animator.setInterpolator(mFastOutSlowIn);
  }
  animator.setDuration((long)(durationSeconds * 1000));
}
