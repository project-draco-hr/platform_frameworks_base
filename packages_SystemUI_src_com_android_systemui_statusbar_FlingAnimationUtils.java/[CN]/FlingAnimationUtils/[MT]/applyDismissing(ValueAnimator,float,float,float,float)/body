{
  float maxLengthSeconds=(float)(mMaxLengthSeconds * Math.pow(Math.abs(endValue - currValue) / maxDistance,0.5f));
  float diff=Math.abs(endValue - currValue);
  float velAbs=Math.abs(velocity);
  float y2=calculateLinearOutFasterInY2(velAbs);
  float startGradient=y2;
  Interpolator mLinearOutFasterIn=new PathInterpolator(0,0,1,y2);
  float durationSeconds=startGradient * diff / velAbs;
  if (durationSeconds <= maxLengthSeconds) {
    animator.setInterpolator(mLinearOutFasterIn);
  }
 else   if (velAbs >= mMinVelocityPxPerSecond) {
    durationSeconds=maxLengthSeconds;
    VelocityInterpolator velocityInterpolator=new VelocityInterpolator(durationSeconds,velAbs,diff);
    InterpolatorInterpolator superInterpolator=new InterpolatorInterpolator(velocityInterpolator,mLinearOutFasterIn,mLinearOutSlowIn);
    animator.setInterpolator(superInterpolator);
  }
 else {
    durationSeconds=maxLengthSeconds;
    animator.setInterpolator(mFastOutLinearIn);
  }
  animator.setDuration((long)(durationSeconds * 1000));
}
