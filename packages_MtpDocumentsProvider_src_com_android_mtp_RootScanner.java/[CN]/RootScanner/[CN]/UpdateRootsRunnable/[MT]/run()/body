{
  Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
  int pollingCount=0;
  while (!Thread.interrupted()) {
    final int[] deviceIds=mManager.getOpenedDeviceIds();
    final Map<String,MtpRoot[]> rootsMap=new HashMap<>();
    boolean changed=false;
    mDatabase.getMapper().startAddingDocuments(null);
    for (    final int deviceId : deviceIds) {
      try {
        final MtpRoot[] roots=mManager.getRoots(deviceId);
        final String id=mDatabase.getMapper().putDeviceDocument(deviceId,mManager.getDeviceName(deviceId),roots);
        if (id != null) {
          changed=true;
          rootsMap.put(id,roots);
        }
      }
 catch (      IOException exception) {
        Log.e(MtpDocumentsProvider.TAG,exception.getMessage());
      }
    }
    mDatabase.getMapper().stopAddingDocuments(null);
    for (    final String documentId : rootsMap.keySet()) {
      mDatabase.getMapper().startAddingDocuments(documentId);
      if (mDatabase.getMapper().putRootDocuments(documentId,mResources,rootsMap.get(documentId))) {
        changed=true;
      }
      if (mDatabase.getMapper().stopAddingDocuments(documentId)) {
        changed=true;
      }
    }
    if (changed) {
      notifyChange();
    }
    pollingCount++;
    try {
      Thread.sleep(pollingCount > SHORT_POLLING_TIMES ? LONG_POLLING_INTERVAL : SHORT_POLLING_INTERVAL);
    }
 catch (    InterruptedException exp) {
      continue;
    }
  }
}
