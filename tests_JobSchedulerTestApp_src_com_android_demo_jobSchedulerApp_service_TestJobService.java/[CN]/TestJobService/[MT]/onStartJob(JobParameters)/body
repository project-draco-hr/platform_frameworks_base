{
  Log.i(TAG,"on start job: " + params.getJobId());
  currentId++;
  jobParamsMap.put(currentId,params);
  final int currId=this.currentId;
  Log.d(TAG,"putting :" + currId + " for "+ params.toString());
  Log.d(TAG," pulled: " + jobParamsMap.get(currId));
  if (mActivity != null) {
    mActivity.onReceivedStartJob(params);
  }
  new AsyncTask<Void,Void,Void>(){
    @Override protected Void doInBackground(    Void... voids){
      try {
        Log.d(TAG,"Sleeping for 3 seconds.");
        Thread.sleep(3000L);
      }
 catch (      InterruptedException e) {
      }
      final JobParameters params=jobParamsMap.get(currId);
      Log.d(TAG,"Pulled :" + currId + " "+ params);
      jobFinished(params,false);
      Log.d(TAG,"Rescheduling new job: " + params.getJobId());
      scheduleJob(new JobInfo.Builder(params.getJobId(),new ComponentName(getBaseContext(),TestJobService.class)).setMinimumLatency(2000L).setOverrideDeadline(3000L).setRequiresCharging(true).build());
      return null;
    }
  }
.execute();
  return true;
}
