{
  mService=service;
  ServiceInfo si=service.serviceInfo;
  mId=new ComponentName(si.packageName,si.name).flattenToShortString();
  final PackageManager pm=context.getPackageManager();
  int label=0;
  String settingsActivityComponent=null;
  XmlResourceParser parser=null;
  try {
    parser=si.loadXmlMetaData(pm,SpellCheckerSession.SERVICE_META_DATA);
    if (parser == null) {
      throw new XmlPullParserException("No " + SpellCheckerSession.SERVICE_META_DATA + " meta-data");
    }
    final Resources res=pm.getResourcesForApplication(si.applicationInfo);
    final AttributeSet attrs=Xml.asAttributeSet(parser);
    int type;
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && type != XmlPullParser.START_TAG) {
    }
    final String nodeName=parser.getName();
    if (!"spell-checker".equals(nodeName)) {
      throw new XmlPullParserException("Meta-data does not start with spell-checker tag");
    }
    TypedArray sa=res.obtainAttributes(attrs,com.android.internal.R.styleable.SpellChecker);
    label=sa.getResourceId(com.android.internal.R.styleable.SpellChecker_label,0);
    settingsActivityComponent=sa.getString(com.android.internal.R.styleable.SpellChecker_settingsActivity);
    sa.recycle();
    final int depth=parser.getDepth();
    while (((type=parser.next()) != XmlPullParser.END_TAG || parser.getDepth() > depth) && type != XmlPullParser.END_DOCUMENT) {
      if (type == XmlPullParser.START_TAG) {
        final String subtypeNodeName=parser.getName();
        if (!"subtype".equals(subtypeNodeName)) {
          throw new XmlPullParserException("Meta-data in spell-checker does not start with subtype tag");
        }
        final TypedArray a=res.obtainAttributes(attrs,com.android.internal.R.styleable.SpellChecker_Subtype);
        SpellCheckerSubtype subtype=new SpellCheckerSubtype(a.getResourceId(com.android.internal.R.styleable.SpellChecker_Subtype_label,0),a.getString(com.android.internal.R.styleable.SpellChecker_Subtype_subtypeLocale),a.getString(com.android.internal.R.styleable.SpellChecker_Subtype_subtypeExtraValue));
        mSubtypes.add(subtype);
      }
    }
  }
 catch (  Exception e) {
    Slog.e(TAG,"Caught exception: " + e);
    throw new XmlPullParserException("Unable to create context for: " + si.packageName);
  }
 finally {
    if (parser != null)     parser.close();
  }
  mLabel=label;
  mSettingsActivityName=settingsActivityComponent;
}
