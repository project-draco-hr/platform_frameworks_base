{
  final int keyCode=event.getKeyCode();
  if (event.getAction() == KeyEvent.ACTION_DOWN) {
switch (keyCode) {
case KeyEvent.KEYCODE_HEADSETHOOK:
case KeyEvent.KEYCODE_PLAYPAUSE:
case KeyEvent.KEYCODE_STOP:
case KeyEvent.KEYCODE_NEXTSONG:
case KeyEvent.KEYCODE_PREVIOUSSONG:
case KeyEvent.KEYCODE_REWIND:
case KeyEvent.KEYCODE_FORWARD:
{
        Intent intent=new Intent(Intent.ACTION_MEDIA_BUTTON,null);
        intent.putExtra(Intent.EXTRA_KEY_EVENT,event);
        getContext().sendOrderedBroadcast(intent,null);
        return true;
      }
case KeyEvent.KEYCODE_VOLUME_UP:
case KeyEvent.KEYCODE_VOLUME_DOWN:
{
synchronized (this) {
        if (mAudioManager == null) {
          mAudioManager=(AudioManager)getContext().getSystemService(Context.AUDIO_SERVICE);
        }
      }
      if (mAudioManager.isMusicActive()) {
        mAudioManager.adjustStreamVolume(AudioManager.STREAM_MUSIC,keyCode == KeyEvent.KEYCODE_VOLUME_UP ? AudioManager.ADJUST_RAISE : AudioManager.ADJUST_LOWER,0);
      }
      return true;
    }
}
}
 else if (event.getAction() == KeyEvent.ACTION_UP) {
switch (keyCode) {
case KeyEvent.KEYCODE_MUTE:
case KeyEvent.KEYCODE_HEADSETHOOK:
case KeyEvent.KEYCODE_PLAYPAUSE:
case KeyEvent.KEYCODE_STOP:
case KeyEvent.KEYCODE_NEXTSONG:
case KeyEvent.KEYCODE_PREVIOUSSONG:
case KeyEvent.KEYCODE_REWIND:
case KeyEvent.KEYCODE_FORWARD:
{
    Intent intent=new Intent(Intent.ACTION_MEDIA_BUTTON,null);
    intent.putExtra(Intent.EXTRA_KEY_EVENT,event);
    getContext().sendOrderedBroadcast(intent,null);
    return true;
  }
}
}
return false;
}
