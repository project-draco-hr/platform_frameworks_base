{
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println("Permission Denial: can't dump ApOps service from from pid=" + Binder.getCallingPid() + ", uid="+ Binder.getCallingUid());
    return;
  }
synchronized (this) {
    pw.println("Current AppOps Service state:");
    for (int i=0; i < mUidOps.size(); i++) {
      pw.print("  Uid ");
      UserHandle.formatUid(pw,mUidOps.keyAt(i));
      pw.println(":");
      HashMap<String,Ops> pkgOps=mUidOps.valueAt(i);
      for (      Ops ops : pkgOps.values()) {
        pw.print("    Package ");
        pw.print(ops.packageName);
        pw.println(":");
        for (int j=0; j < ops.size(); j++) {
          Op op=ops.valueAt(j);
          pw.print("      ");
          pw.print(AppOpsManager.opToString(op.op));
          pw.print(": time=");
          TimeUtils.formatDuration(System.currentTimeMillis() - op.time,pw);
          pw.print(" ago");
          if (op.duration == -1) {
            pw.println(" (running)");
          }
 else {
            pw.print("; duration=");
            TimeUtils.formatDuration(op.duration,pw);
            pw.println();
          }
        }
      }
    }
  }
}
