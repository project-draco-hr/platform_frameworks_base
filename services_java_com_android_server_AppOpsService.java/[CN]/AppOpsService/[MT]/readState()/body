{
synchronized (mFile) {
synchronized (this) {
      FileInputStream stream;
      try {
        stream=mFile.openRead();
      }
 catch (      FileNotFoundException e) {
        Slog.i(TAG,"No existing app ops " + mFile.getBaseFile() + "; starting empty");
        return;
      }
      boolean success=false;
      try {
        XmlPullParser parser=Xml.newPullParser();
        parser.setInput(stream,null);
        int type;
        while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
          ;
        }
        if (type != XmlPullParser.START_TAG) {
          throw new IllegalStateException("no start tag found");
        }
        String versStr=parser.getAttributeValue(null,"vers");
        int vers=versStr != null ? Integer.parseInt(versStr) : 0;
        int outerDepth=parser.getDepth();
        while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
          if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
            continue;
          }
          String tagName=parser.getName();
          if (tagName.equals("pkg")) {
            readPackage(parser,vers);
          }
 else {
            Slog.w(TAG,"Unknown element under <app-ops>: " + parser.getName());
            XmlUtils.skipCurrentTag(parser);
          }
        }
        success=true;
      }
 catch (      IllegalStateException e) {
        Slog.w(TAG,"Failed parsing " + e);
      }
catch (      NullPointerException e) {
        Slog.w(TAG,"Failed parsing " + e);
      }
catch (      NumberFormatException e) {
        Slog.w(TAG,"Failed parsing " + e);
      }
catch (      XmlPullParserException e) {
        Slog.w(TAG,"Failed parsing " + e);
      }
catch (      IOException e) {
        Slog.w(TAG,"Failed parsing " + e);
      }
catch (      IndexOutOfBoundsException e) {
        Slog.w(TAG,"Failed parsing " + e);
      }
 finally {
        if (!success) {
          mUidOps.clear();
        }
        try {
          stream.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
}
