{
  verifyIncomingUid(uid);
  verifyIncomingOp(code);
  ArrayList<Callback> repCbs=null;
  code=AppOpsManager.opToSwitch(code);
synchronized (this) {
    Op op=getOpLocked(code,uid,packageName,true);
    if (op != null) {
      if (op.mode != mode) {
        op.mode=mode;
        ArrayList<Callback> cbs=mOpModeWatchers.get(code);
        if (cbs != null) {
          if (repCbs == null) {
            repCbs=new ArrayList<Callback>();
          }
          repCbs.addAll(cbs);
        }
        cbs=mPackageModeWatchers.get(packageName);
        if (cbs != null) {
          if (repCbs == null) {
            repCbs=new ArrayList<Callback>();
          }
          repCbs.addAll(cbs);
        }
        if (mode == AppOpsManager.MODE_ALLOWED) {
          if (op.time == 0 && op.rejectTime == 0) {
            Ops ops=getOpsLocked(uid,packageName,false);
            if (ops != null) {
              ops.remove(op.op);
              if (ops.size() <= 0) {
                HashMap<String,Ops> pkgOps=mUidOps.get(uid);
                if (pkgOps != null) {
                  pkgOps.remove(ops.packageName);
                  if (pkgOps.size() <= 0) {
                    mUidOps.remove(uid);
                  }
                }
              }
            }
          }
        }
        scheduleWriteNowLocked();
      }
    }
  }
  if (repCbs != null) {
    for (int i=0; i < repCbs.size(); i++) {
      try {
        repCbs.get(i).mCallback.opChanged(code,packageName);
      }
 catch (      RemoteException e) {
      }
    }
  }
}
