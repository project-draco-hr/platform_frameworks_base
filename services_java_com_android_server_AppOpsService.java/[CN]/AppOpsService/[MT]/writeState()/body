{
synchronized (mFile) {
    List<AppOpsManager.PackageOps> allOps=getPackagesForOps(null);
    FileOutputStream stream;
    try {
      stream=mFile.startWrite();
    }
 catch (    IOException e) {
      Slog.w(TAG,"Failed to write state: " + e);
      return;
    }
    try {
      XmlSerializer out=new FastXmlSerializer();
      out.setOutput(stream,"utf-8");
      out.startDocument(null,true);
      out.startTag(null,"app-ops");
      if (allOps != null) {
        String lastPkg=null;
        for (int i=0; i < allOps.size(); i++) {
          AppOpsManager.PackageOps pkg=allOps.get(i);
          if (!pkg.getPackageName().equals(lastPkg)) {
            if (lastPkg != null) {
              out.endTag(null,"pkg");
            }
            lastPkg=pkg.getPackageName();
            out.startTag(null,"pkg");
            out.attribute(null,"n",lastPkg);
          }
          out.startTag(null,"uid");
          out.attribute(null,"n",Integer.toString(pkg.getUid()));
          List<AppOpsManager.OpEntry> ops=pkg.getOps();
          for (int j=0; j < ops.size(); j++) {
            AppOpsManager.OpEntry op=ops.get(j);
            out.startTag(null,"op");
            out.attribute(null,"n",Integer.toString(op.getOp()));
            out.attribute(null,"t",Long.toString(op.getTime()));
            out.attribute(null,"d",Integer.toString(op.getDuration()));
            out.endTag(null,"op");
          }
          out.endTag(null,"uid");
        }
        if (lastPkg != null) {
          out.endTag(null,"pkg");
        }
      }
      out.endTag(null,"app-ops");
      out.endDocument();
      mFile.finishWrite(stream);
    }
 catch (    IOException e) {
      Slog.w(TAG,"Failed to write state, restoring backup.",e);
      mFile.failWrite(stream);
    }
  }
}
