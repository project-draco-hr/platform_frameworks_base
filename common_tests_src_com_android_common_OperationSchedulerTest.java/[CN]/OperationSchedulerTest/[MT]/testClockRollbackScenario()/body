{
  TimeTravelScheduler scheduler=new TimeTravelScheduler();
  OperationScheduler.Options options=new OperationScheduler.Options();
  options.minTriggerMillis=2000;
  long beforeTrigger=scheduler.timeMillis;
  long triggerTime=beforeTrigger - 10000000;
  scheduler.setTriggerTimeMillis(triggerTime);
  assertEquals(triggerTime,scheduler.getNextTimeMillis(options));
  assertEquals(0,scheduler.getLastAttemptTimeMillis());
  long beforeSuccess=(scheduler.timeMillis+=100);
  scheduler.onSuccess();
  scheduler.setTriggerTimeMillis(triggerTime);
  assertEquals(beforeSuccess,scheduler.getLastAttemptTimeMillis());
  assertEquals(beforeSuccess + 2000,scheduler.getNextTimeMillis(options));
  long beforeError=(scheduler.timeMillis+=100);
  scheduler.onTransientError();
  assertEquals(beforeError,scheduler.getLastAttemptTimeMillis());
  assertEquals(beforeError + 5000,scheduler.getNextTimeMillis(options));
  long beforeMoratorium=(scheduler.timeMillis+=100);
  scheduler.setMoratoriumTimeMillis(beforeTrigger + 1000000);
  assertEquals(beforeTrigger + 1000000,scheduler.getNextTimeMillis(options));
  long beforeRollback=(scheduler.timeMillis=beforeTrigger - 10000);
  assertEquals(beforeTrigger + 1000000,scheduler.getNextTimeMillis(options));
  assertEquals(scheduler.timeMillis,scheduler.getLastAttemptTimeMillis());
  beforeRollback=(scheduler.timeMillis=beforeTrigger - 100000000);
  assertEquals(triggerTime,scheduler.getNextTimeMillis(options));
  assertEquals(beforeRollback,scheduler.getLastAttemptTimeMillis());
  scheduler.timeMillis=triggerTime + 5000000;
  assertEquals(triggerTime,scheduler.getNextTimeMillis(options));
  assertEquals(beforeRollback,scheduler.getLastAttemptTimeMillis());
  assertEquals(beforeRollback,scheduler.getLastSuccessTimeMillis());
}
