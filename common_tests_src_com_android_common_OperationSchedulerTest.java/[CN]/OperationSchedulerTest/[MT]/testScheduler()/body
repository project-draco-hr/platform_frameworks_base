{
  String name="OperationSchedulerTest.testScheduler";
  SharedPreferences storage=getContext().getSharedPreferences(name,0);
  storage.edit().clear().commit();
  OperationScheduler scheduler=new OperationScheduler(storage);
  OperationScheduler.Options options=new OperationScheduler.Options();
  assertEquals(Long.MAX_VALUE,scheduler.getNextTimeMillis(options));
  long beforeTrigger=System.currentTimeMillis();
  scheduler.setTriggerTimeMillis(beforeTrigger + 1000000);
  assertEquals(beforeTrigger + 1000000,scheduler.getNextTimeMillis(options));
  scheduler.setMoratoriumTimeMillis(beforeTrigger + 500000);
  assertEquals(beforeTrigger + 1000000,scheduler.getNextTimeMillis(options));
  scheduler.setMoratoriumTimeMillis(beforeTrigger + 1500000);
  assertEquals(beforeTrigger + 1500000,scheduler.getNextTimeMillis(options));
  scheduler.setEnabledState(false);
  assertEquals(Long.MAX_VALUE,scheduler.getNextTimeMillis(options));
  scheduler.setEnabledState(true);
  assertEquals(beforeTrigger + 1500000,scheduler.getNextTimeMillis(options));
  long beforeError=System.currentTimeMillis();
  scheduler.onTransientError();
  long afterError=System.currentTimeMillis();
  assertEquals(beforeTrigger + 1500000,scheduler.getNextTimeMillis(options));
  options.backoffFixedMillis=1000000;
  options.backoffIncrementalMillis=500000;
  assertTrue(beforeError + 1500000 <= scheduler.getNextTimeMillis(options));
  assertTrue(afterError + 1500000 >= scheduler.getNextTimeMillis(options));
  beforeError=System.currentTimeMillis();
  scheduler.onTransientError();
  afterError=System.currentTimeMillis();
  assertTrue(beforeError + 2000000 <= scheduler.getNextTimeMillis(options));
  assertTrue(afterError + 2000000 >= scheduler.getNextTimeMillis(options));
  scheduler.onPermanentError();
  assertEquals(Long.MAX_VALUE,scheduler.getNextTimeMillis(options));
  scheduler.resetTransientError();
  assertEquals(Long.MAX_VALUE,scheduler.getNextTimeMillis(options));
  scheduler.resetPermanentError();
  assertEquals(beforeTrigger + 1500000,scheduler.getNextTimeMillis(options));
  long beforeSuccess=System.currentTimeMillis();
  scheduler.onSuccess();
  long afterSuccess=System.currentTimeMillis();
  assertEquals(Long.MAX_VALUE,scheduler.getNextTimeMillis(options));
  scheduler.setTriggerTimeMillis(beforeSuccess + 500000);
  assertEquals(beforeTrigger + 1500000,scheduler.getNextTimeMillis(options));
  scheduler.setMoratoriumTimeMillis(0);
  assertEquals(beforeSuccess + 500000,scheduler.getNextTimeMillis(options));
  options.periodicIntervalMillis=250000;
  assertTrue(beforeSuccess + 250000 <= scheduler.getNextTimeMillis(options));
  assertTrue(afterSuccess + 250000 >= scheduler.getNextTimeMillis(options));
  options.minTriggerMillis=1000000;
  assertTrue(beforeSuccess + 1000000 <= scheduler.getNextTimeMillis(options));
  assertTrue(afterSuccess + 1000000 >= scheduler.getNextTimeMillis(options));
}
