{
  if (!mBluetoothService.isEnabled())   return false;
  String address=mBluetoothService.getAddressFromObjectPath(objectPath);
  if (address == null) {
    Log.e(TAG,"Unable to get device address in onAuthAgentAuthorize");
    return false;
  }
  boolean authorized=false;
  ParcelUuid uuid=ParcelUuid.fromString(deviceUuid);
  BluetoothDevice device=mAdapter.getRemoteDevice(address);
  if (mA2dp != null && (BluetoothUuid.isAudioSource(uuid) || BluetoothUuid.isAvrcpTarget(uuid) || BluetoothUuid.isAdvAudioDist(uuid)) && !isOtherSinkInNonDisconnectedState(address)) {
    authorized=mA2dp.getPriority(device) > BluetoothProfile.PRIORITY_OFF;
    if (authorized) {
      Log.i(TAG,"Allowing incoming A2DP / AVRCP connection from " + address);
      if (!BluetoothUuid.isAvrcpTarget(uuid)) {
        mBluetoothService.notifyIncomingA2dpConnection(address);
      }
    }
 else {
      Log.i(TAG,"Rejecting incoming A2DP / AVRCP connection from " + address);
    }
  }
 else   if (BluetoothUuid.isInputDevice(uuid) && !isOtherInputDeviceConnected(address)) {
    BluetoothInputDevice inputDevice=new BluetoothInputDevice(mContext);
    authorized=inputDevice.getInputDevicePriority(device) > BluetoothInputDevice.PRIORITY_OFF;
    if (authorized) {
      Log.i(TAG,"Allowing incoming HID connection from " + address);
    }
 else {
      Log.i(TAG,"Rejecting incoming HID connection from " + address);
    }
  }
 else   if (BluetoothUuid.isBnep(uuid) && mBluetoothService.allowIncomingTethering()) {
    authorized=true;
  }
 else {
    Log.i(TAG,"Rejecting incoming " + deviceUuid + " connection from "+ address);
  }
  log("onAgentAuthorize(" + objectPath + ", "+ deviceUuid+ ") = "+ authorized);
  return authorized;
}
