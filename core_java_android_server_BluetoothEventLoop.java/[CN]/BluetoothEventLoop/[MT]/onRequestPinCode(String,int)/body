{
  String address=mBluetoothService.getAddressFromObjectPath(objectPath);
  if (address == null) {
    Log.e(TAG,"Unable to get device address in onRequestPinCode, returning null");
    return;
  }
  address=address.toUpperCase();
  mPasskeyAgentRequestData.put(address,new Integer(nativeData));
  if (mBluetoothService.getBluetoothState() == BluetoothDevice.BLUETOOTH_STATE_TURNING_OFF) {
    mBluetoothService.cancelPin(address);
    return;
  }
  if (mBluetoothService.getBondState().getBondState(address) == BluetoothDevice.BOND_BONDING) {
    int btClass=mBluetoothService.getRemoteClass(address);
switch (BluetoothClass.Device.getDevice(btClass)) {
case BluetoothClass.Device.AUDIO_VIDEO_WEARABLE_HEADSET:
case BluetoothClass.Device.AUDIO_VIDEO_HANDSFREE:
case BluetoothClass.Device.AUDIO_VIDEO_HEADPHONES:
case BluetoothClass.Device.AUDIO_VIDEO_PORTABLE_AUDIO:
case BluetoothClass.Device.AUDIO_VIDEO_CAR_AUDIO:
case BluetoothClass.Device.AUDIO_VIDEO_HIFI_AUDIO:
      if (!mBluetoothService.getBondState().hasAutoPairingFailed(address) && !mBluetoothService.getBondState().isAutoPairingBlacklisted(address)) {
        mBluetoothService.getBondState().attempt(address);
        mBluetoothService.setPin(address,BluetoothDevice.convertPinToBytes("0000"));
        return;
      }
  }
}
Intent intent=new Intent(BluetoothIntent.PAIRING_REQUEST_ACTION);
intent.putExtra(BluetoothIntent.ADDRESS,address);
mContext.sendBroadcast(intent,BLUETOOTH_ADMIN_PERM);
return;
}
