{
  String address=checkPairingRequestAndGetAddress(objectPath,nativeData);
  if (address == null)   return;
  if (mBluetoothService.getBondState().getBondState(address) == BluetoothDevice.BOND_BONDING) {
    BluetoothClass btClass=new BluetoothClass(mBluetoothService.getRemoteClass(address));
switch (btClass.getDeviceClass()) {
case BluetoothClass.Device.AUDIO_VIDEO_WEARABLE_HEADSET:
case BluetoothClass.Device.AUDIO_VIDEO_HANDSFREE:
case BluetoothClass.Device.AUDIO_VIDEO_HEADPHONES:
case BluetoothClass.Device.AUDIO_VIDEO_PORTABLE_AUDIO:
case BluetoothClass.Device.AUDIO_VIDEO_CAR_AUDIO:
case BluetoothClass.Device.AUDIO_VIDEO_HIFI_AUDIO:
      if (!mBluetoothService.getBondState().hasAutoPairingFailed(address) && !mBluetoothService.getBondState().isAutoPairingBlacklisted(address)) {
        mBluetoothService.getBondState().attempt(address);
        mBluetoothService.setPin(address,BluetoothDevice.convertPinToBytes("0000"));
        return;
      }
  }
}
Intent intent=new Intent(BluetoothDevice.ACTION_PAIRING_REQUEST);
intent.putExtra(BluetoothDevice.EXTRA_DEVICE,mAdapter.getRemoteDevice(address));
intent.putExtra(BluetoothDevice.EXTRA_PAIRING_VARIANT,BluetoothDevice.PAIRING_VARIANT_PIN);
mContext.sendBroadcast(intent,BLUETOOTH_ADMIN_PERM);
return;
}
