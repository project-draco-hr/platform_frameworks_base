{
  String address=checkPairingRequestAndGetAddress(objectPath,nativeData);
  if (address == null)   return;
  String pendingOutgoingAddress=mBluetoothService.getPendingOutgoingBonding();
  BluetoothClass btClass=new BluetoothClass(mBluetoothService.getRemoteClass(address));
  int btDeviceClass=btClass.getDeviceClass();
  if (address.equals(pendingOutgoingAddress)) {
    if (mBluetoothService.isBluetoothDock(address)) {
      String pin=mBluetoothService.getDockPin();
      mBluetoothService.setPin(address,BluetoothDevice.convertPinToBytes(pin));
      return;
    }
switch (btDeviceClass) {
case BluetoothClass.Device.AUDIO_VIDEO_WEARABLE_HEADSET:
case BluetoothClass.Device.AUDIO_VIDEO_HANDSFREE:
case BluetoothClass.Device.AUDIO_VIDEO_HEADPHONES:
case BluetoothClass.Device.AUDIO_VIDEO_PORTABLE_AUDIO:
case BluetoothClass.Device.AUDIO_VIDEO_CAR_AUDIO:
case BluetoothClass.Device.AUDIO_VIDEO_HIFI_AUDIO:
      if (mBluetoothService.attemptAutoPair(address))       return;
  }
}
boolean motKeyboard=false;
String name=mBluetoothService.getRemoteName(address);
if (name == null && address.startsWith("00:0F:F6") || (name != null && name.startsWith("Motorola"))) {
  motKeyboard=true;
}
if (!motKeyboard) {
  if (btDeviceClass == BluetoothClass.Device.PERIPHERAL_KEYBOARD || btDeviceClass == BluetoothClass.Device.PERIPHERAL_KEYBOARD_POINTING) {
    int pin=(int)Math.floor(Math.random() * 10000);
    sendDisplayPinIntent(address,pin);
    return;
  }
}
mWakeLock.acquire();
Intent intent=new Intent(BluetoothDevice.ACTION_PAIRING_REQUEST);
intent.putExtra(BluetoothDevice.EXTRA_DEVICE,mAdapter.getRemoteDevice(address));
intent.putExtra(BluetoothDevice.EXTRA_PAIRING_VARIANT,BluetoothDevice.PAIRING_VARIANT_PIN);
mContext.sendBroadcast(intent,BLUETOOTH_ADMIN_PERM);
mWakeLock.release();
return;
}
