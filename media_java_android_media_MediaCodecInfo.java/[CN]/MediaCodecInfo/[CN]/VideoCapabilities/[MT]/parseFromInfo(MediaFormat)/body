{
  final Map<String,Object> map=info.getMap();
  Size blockSize=new Size(mBlockWidth,mBlockHeight);
  Size alignment=new Size(mWidthAlignment,mHeightAlignment);
  Range<Integer> counts=null, widths=null, heights=null;
  Range<Integer> frameRates=null, bitRates=null;
  Range<Long> blockRates=null;
  Range<Rational> ratios=null, blockRatios=null;
  blockSize=Utils.parseSize(map.get("block-size"),blockSize);
  alignment=Utils.parseSize(map.get("alignment"),alignment);
  counts=Utils.parseIntRange(map.get("block-count-range"),null);
  blockRates=Utils.parseLongRange(map.get("blocks-per-second-range"),null);
  mMeasuredFrameRates=getMeasuredFrameRates(map);
  Pair<Range<Integer>,Range<Integer>> sizeRanges=parseWidthHeightRanges(map.get("size-range"));
  if (sizeRanges != null) {
    widths=sizeRanges.first;
    heights=sizeRanges.second;
  }
  if (map.containsKey("feature-can-swap-width-height")) {
    if (widths != null) {
      mSmallerDimensionUpperLimit=Math.min(widths.getUpper(),heights.getUpper());
      widths=heights=widths.extend(heights);
    }
 else {
      Log.w(TAG,"feature can-swap-width-height is best used with size-range");
      mSmallerDimensionUpperLimit=Math.min(mWidthRange.getUpper(),mHeightRange.getUpper());
      mWidthRange=mHeightRange=mWidthRange.extend(mHeightRange);
    }
  }
  ratios=Utils.parseRationalRange(map.get("block-aspect-ratio-range"),null);
  blockRatios=Utils.parseRationalRange(map.get("pixel-aspect-ratio-range"),null);
  frameRates=Utils.parseIntRange(map.get("frame-rate-range"),null);
  if (frameRates != null) {
    try {
      frameRates=frameRates.intersect(FRAME_RATE_RANGE);
    }
 catch (    IllegalArgumentException e) {
      Log.w(TAG,"frame rate range (" + frameRates + ") is out of limits: "+ FRAME_RATE_RANGE);
      frameRates=null;
    }
  }
  bitRates=Utils.parseIntRange(map.get("bitrate-range"),null);
  if (bitRates != null) {
    try {
      bitRates=bitRates.intersect(BITRATE_RANGE);
    }
 catch (    IllegalArgumentException e) {
      Log.w(TAG,"bitrate range (" + bitRates + ") is out of limits: "+ BITRATE_RANGE);
      bitRates=null;
    }
  }
  checkPowerOfTwo(blockSize.getWidth(),"block-size width must be power of two");
  checkPowerOfTwo(blockSize.getHeight(),"block-size height must be power of two");
  checkPowerOfTwo(alignment.getWidth(),"alignment width must be power of two");
  checkPowerOfTwo(alignment.getHeight(),"alignment height must be power of two");
  applyMacroBlockLimits(Integer.MAX_VALUE,Integer.MAX_VALUE,Integer.MAX_VALUE,Long.MAX_VALUE,blockSize.getWidth(),blockSize.getHeight(),alignment.getWidth(),alignment.getHeight());
  if ((mParent.mError & ERROR_UNSUPPORTED) != 0) {
    if (widths != null) {
      mWidthRange=SIZE_RANGE.intersect(widths);
    }
    if (heights != null) {
      mHeightRange=SIZE_RANGE.intersect(heights);
    }
    if (counts != null) {
      mBlockCountRange=POSITIVE_INTEGERS.intersect(Utils.factorRange(counts,mBlockWidth * mBlockHeight / blockSize.getWidth() / blockSize.getHeight()));
    }
    if (blockRates != null) {
      mBlocksPerSecondRange=POSITIVE_LONGS.intersect(Utils.factorRange(blockRates,mBlockWidth * mBlockHeight / blockSize.getWidth() / blockSize.getHeight()));
    }
    if (blockRatios != null) {
      mBlockAspectRatioRange=POSITIVE_RATIONALS.intersect(Utils.scaleRange(blockRatios,mBlockHeight / blockSize.getHeight(),mBlockWidth / blockSize.getWidth()));
    }
    if (ratios != null) {
      mAspectRatioRange=POSITIVE_RATIONALS.intersect(ratios);
    }
    if (frameRates != null) {
      mFrameRateRange=FRAME_RATE_RANGE.intersect(frameRates);
    }
    if (bitRates != null) {
      mBitrateRange=BITRATE_RANGE.intersect(bitRates);
    }
  }
 else {
    if (widths != null) {
      mWidthRange=mWidthRange.intersect(widths);
    }
    if (heights != null) {
      mHeightRange=mHeightRange.intersect(heights);
    }
    if (counts != null) {
      mBlockCountRange=mBlockCountRange.intersect(Utils.factorRange(counts,mBlockWidth * mBlockHeight / blockSize.getWidth() / blockSize.getHeight()));
    }
    if (blockRates != null) {
      mBlocksPerSecondRange=mBlocksPerSecondRange.intersect(Utils.factorRange(blockRates,mBlockWidth * mBlockHeight / blockSize.getWidth() / blockSize.getHeight()));
    }
    if (blockRatios != null) {
      mBlockAspectRatioRange=mBlockAspectRatioRange.intersect(Utils.scaleRange(blockRatios,mBlockHeight / blockSize.getHeight(),mBlockWidth / blockSize.getWidth()));
    }
    if (ratios != null) {
      mAspectRatioRange=mAspectRatioRange.intersect(ratios);
    }
    if (frameRates != null) {
      mFrameRateRange=mFrameRateRange.intersect(frameRates);
    }
    if (bitRates != null) {
      mBitrateRange=mBitrateRange.intersect(bitRates);
    }
  }
  updateLimits();
}
