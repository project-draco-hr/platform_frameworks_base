{
  int maxBlocksPerSecond=0;
  int maxBlocks=0;
  int maxBps=0;
  int maxDPBBlocks=0;
  int errors=ERROR_NONE_SUPPORTED;
  CodecProfileLevel[] profileLevels=mParent.profileLevels;
  String mime=mParent.getMime();
  if (mime.equalsIgnoreCase(MediaFormat.MIMETYPE_VIDEO_AVC)) {
    maxBlocks=99;
    maxBlocksPerSecond=1485;
    maxBps=64000;
    maxDPBBlocks=396;
    for (    CodecProfileLevel profileLevel : profileLevels) {
      int MBPS=0, FS=0, BR=0, DPB=0;
      boolean supported=true;
switch (profileLevel.level) {
case CodecProfileLevel.AVCLevel1:
        MBPS=1485;
      FS=99;
    BR=64;
  DPB=396;
break;
case CodecProfileLevel.AVCLevel1b:
MBPS=1485;
FS=99;
BR=128;
DPB=396;
break;
case CodecProfileLevel.AVCLevel11:
MBPS=3000;
FS=396;
BR=192;
DPB=900;
break;
case CodecProfileLevel.AVCLevel12:
MBPS=6000;
FS=396;
BR=384;
DPB=2376;
break;
case CodecProfileLevel.AVCLevel13:
MBPS=11880;
FS=396;
BR=768;
DPB=2376;
break;
case CodecProfileLevel.AVCLevel2:
MBPS=11880;
FS=396;
BR=2000;
DPB=2376;
break;
case CodecProfileLevel.AVCLevel21:
MBPS=19800;
FS=792;
BR=4000;
DPB=4752;
break;
case CodecProfileLevel.AVCLevel22:
MBPS=20250;
FS=1620;
BR=4000;
DPB=8100;
break;
case CodecProfileLevel.AVCLevel3:
MBPS=40500;
FS=1620;
BR=10000;
DPB=8100;
break;
case CodecProfileLevel.AVCLevel31:
MBPS=108000;
FS=3600;
BR=14000;
DPB=18000;
break;
case CodecProfileLevel.AVCLevel32:
MBPS=216000;
FS=5120;
BR=20000;
DPB=20480;
break;
case CodecProfileLevel.AVCLevel4:
MBPS=245760;
FS=8192;
BR=20000;
DPB=32768;
break;
case CodecProfileLevel.AVCLevel41:
MBPS=245760;
FS=8192;
BR=50000;
DPB=32768;
break;
case CodecProfileLevel.AVCLevel42:
MBPS=522240;
FS=8704;
BR=50000;
DPB=34816;
break;
case CodecProfileLevel.AVCLevel5:
MBPS=589824;
FS=22080;
BR=135000;
DPB=110400;
break;
case CodecProfileLevel.AVCLevel51:
MBPS=983040;
FS=36864;
BR=240000;
DPB=184320;
break;
case CodecProfileLevel.AVCLevel52:
MBPS=2073600;
FS=36864;
BR=240000;
DPB=184320;
break;
default :
Log.w(TAG,"Unrecognized level " + profileLevel.level + " for "+ mime);
errors|=ERROR_UNRECOGNIZED;
supported=false;
}
switch (profileLevel.profile) {
case CodecProfileLevel.AVCProfileHigh:
BR*=1250;
break;
case CodecProfileLevel.AVCProfileHigh10:
BR*=3000;
break;
case CodecProfileLevel.AVCProfileExtended:
case CodecProfileLevel.AVCProfileHigh422:
case CodecProfileLevel.AVCProfileHigh444:
Log.w(TAG,"Unrecognized profile " + profileLevel.profile + " for "+ mime);
errors|=ERROR_UNSUPPORTED;
supported=false;
case CodecProfileLevel.AVCProfileBaseline:
case CodecProfileLevel.AVCProfileMain:
BR*=1000;
break;
default :
Log.w(TAG,"Unrecognized profile " + profileLevel.profile + " for "+ mime);
errors|=ERROR_UNRECOGNIZED;
BR*=1000;
}
if (supported) {
errors&=~ERROR_NONE_SUPPORTED;
}
maxBlocksPerSecond=Math.max(MBPS,maxBlocksPerSecond);
maxBlocks=Math.max(FS,maxBlocks);
maxBps=Math.max(BR,maxBps);
maxDPBBlocks=Math.max(maxDPBBlocks,DPB);
}
int maxLengthInBlocks=(int)(Math.sqrt(maxBlocks * 8));
applyMacroBlockLimits(maxLengthInBlocks,maxLengthInBlocks,maxBlocks,maxBlocksPerSecond,16,16,1,1);
}
 else if (mime.equalsIgnoreCase(MediaFormat.MIMETYPE_VIDEO_MPEG4)) {
int maxWidth=11, maxHeight=9, maxRate=15;
maxBlocks=99;
maxBlocksPerSecond=1485;
maxBps=64000;
for (CodecProfileLevel profileLevel : profileLevels) {
int MBPS=0, FS=0, BR=0, FR=0, W=0, H=0;
boolean supported=true;
switch (profileLevel.profile) {
case CodecProfileLevel.MPEG4ProfileSimple:
switch (profileLevel.level) {
case CodecProfileLevel.MPEG4Level0:
FR=15;
W=11;
H=9;
MBPS=1485;
FS=99;
BR=64;
break;
case CodecProfileLevel.MPEG4Level1:
FR=30;
W=11;
H=9;
MBPS=1485;
FS=99;
BR=64;
break;
case CodecProfileLevel.MPEG4Level0b:
FR=30;
W=11;
H=9;
MBPS=1485;
FS=99;
BR=128;
break;
case CodecProfileLevel.MPEG4Level2:
FR=30;
W=22;
H=18;
MBPS=5940;
FS=396;
BR=128;
break;
case CodecProfileLevel.MPEG4Level3:
FR=30;
W=22;
H=18;
MBPS=11880;
FS=396;
BR=384;
break;
default :
Log.w(TAG,"Unrecognized profile/level " + profileLevel.profile + "/"+ profileLevel.level+ " for "+ mime);
errors|=ERROR_UNRECOGNIZED;
}
break;
case CodecProfileLevel.MPEG4ProfileAdvancedSimple:
switch (profileLevel.level) {
case CodecProfileLevel.MPEG4Level0:
case CodecProfileLevel.MPEG4Level1:
FR=30;
W=11;
H=9;
MBPS=2970;
FS=99;
BR=128;
break;
case CodecProfileLevel.MPEG4Level2:
FR=30;
W=22;
H=18;
MBPS=5940;
FS=396;
BR=384;
break;
case CodecProfileLevel.MPEG4Level3:
FR=30;
W=22;
H=18;
MBPS=11880;
FS=396;
BR=768;
break;
case CodecProfileLevel.MPEG4Level4:
case CodecProfileLevel.MPEG4Level4a:
FR=30;
W=44;
H=36;
MBPS=23760;
FS=792;
BR=3000;
break;
case CodecProfileLevel.MPEG4Level5:
FR=30;
W=45;
H=36;
MBPS=48600;
FS=1620;
BR=8000;
break;
default :
Log.w(TAG,"Unrecognized profile/level " + profileLevel.profile + "/"+ profileLevel.level+ " for "+ mime);
errors|=ERROR_UNRECOGNIZED;
}
break;
case CodecProfileLevel.MPEG4ProfileMain:
case CodecProfileLevel.MPEG4ProfileNbit:
case CodecProfileLevel.MPEG4ProfileAdvancedRealTime:
case CodecProfileLevel.MPEG4ProfileCoreScalable:
case CodecProfileLevel.MPEG4ProfileAdvancedCoding:
case CodecProfileLevel.MPEG4ProfileCore:
case CodecProfileLevel.MPEG4ProfileAdvancedCore:
case CodecProfileLevel.MPEG4ProfileSimpleScalable:
case CodecProfileLevel.MPEG4ProfileAdvancedScalable:
case CodecProfileLevel.MPEG4ProfileHybrid:
case CodecProfileLevel.MPEG4ProfileBasicAnimated:
case CodecProfileLevel.MPEG4ProfileScalableTexture:
case CodecProfileLevel.MPEG4ProfileSimpleFace:
case CodecProfileLevel.MPEG4ProfileSimpleFBA:
Log.i(TAG,"Unsupported profile " + profileLevel.profile + " for "+ mime);
errors|=ERROR_UNSUPPORTED;
supported=false;
break;
default :
Log.w(TAG,"Unrecognized profile " + profileLevel.profile + " for "+ mime);
errors|=ERROR_UNRECOGNIZED;
}
if (supported) {
errors&=~ERROR_NONE_SUPPORTED;
}
maxBlocksPerSecond=Math.max(MBPS,maxBlocksPerSecond);
maxBlocks=Math.max(FS,maxBlocks);
maxBps=Math.max(BR * 1000,maxBps);
maxWidth=Math.max(W,maxWidth);
maxHeight=Math.max(H,maxHeight);
maxRate=Math.max(FR,maxRate);
}
applyMacroBlockLimits(maxWidth,maxHeight,maxBlocks,maxBlocksPerSecond,16,16,1,1);
mFrameRateRange=mFrameRateRange.intersect(12,maxRate);
}
 else if (mime.equalsIgnoreCase(MediaFormat.MIMETYPE_VIDEO_H263)) {
int maxWidth=11, maxHeight=9, maxRate=15;
maxBlocks=99;
maxBlocksPerSecond=1485;
maxBps=64000;
for (CodecProfileLevel profileLevel : profileLevels) {
int MBPS=0, BR=0, FR=0, W=0, H=0;
switch (profileLevel.level) {
case CodecProfileLevel.H263Level10:
FR=15;
W=11;
H=9;
BR=1;
MBPS=W * H * FR;
break;
case CodecProfileLevel.H263Level20:
FR=30;
W=22;
H=18;
BR=2;
MBPS=W * H * FR;
break;
case CodecProfileLevel.H263Level30:
FR=30;
W=22;
H=18;
BR=6;
MBPS=W * H * FR;
break;
case CodecProfileLevel.H263Level40:
FR=30;
W=22;
H=18;
BR=32;
MBPS=W * H * FR;
break;
case CodecProfileLevel.H263Level45:
FR=30;
W=11;
H=9;
BR=2;
MBPS=W * H * FR;
break;
case CodecProfileLevel.H263Level50:
FR=60;
W=22;
H=18;
BR=64;
MBPS=W * H * 50;
break;
case CodecProfileLevel.H263Level60:
FR=60;
W=45;
H=18;
BR=128;
MBPS=W * H * 50;
break;
case CodecProfileLevel.H263Level70:
FR=60;
W=45;
H=36;
BR=256;
MBPS=W * H * 50;
break;
default :
Log.w(TAG,"Unrecognized profile/level " + profileLevel.profile + "/"+ profileLevel.level+ " for "+ mime);
errors|=ERROR_UNRECOGNIZED;
}
switch (profileLevel.profile) {
case CodecProfileLevel.H263ProfileBackwardCompatible:
case CodecProfileLevel.H263ProfileBaseline:
case CodecProfileLevel.H263ProfileH320Coding:
case CodecProfileLevel.H263ProfileHighCompression:
case CodecProfileLevel.H263ProfileHighLatency:
case CodecProfileLevel.H263ProfileInterlace:
case CodecProfileLevel.H263ProfileInternet:
case CodecProfileLevel.H263ProfileISWV2:
case CodecProfileLevel.H263ProfileISWV3:
break;
default :
Log.w(TAG,"Unrecognized profile " + profileLevel.profile + " for "+ mime);
errors|=ERROR_UNRECOGNIZED;
}
errors&=~ERROR_NONE_SUPPORTED;
maxBlocksPerSecond=Math.max(MBPS,maxBlocksPerSecond);
maxBlocks=Math.max(W * H,maxBlocks);
maxBps=Math.max(BR * 64000,maxBps);
maxWidth=Math.max(W,maxWidth);
maxHeight=Math.max(H,maxHeight);
maxRate=Math.max(FR,maxRate);
}
applyMacroBlockLimits(maxWidth,maxHeight,maxBlocks,maxBlocksPerSecond,16,16,1,1);
mFrameRateRange=Range.create(1,maxRate);
}
 else if (mime.equalsIgnoreCase(MediaFormat.MIMETYPE_VIDEO_VP8) || mime.equalsIgnoreCase(MediaFormat.MIMETYPE_VIDEO_VP9)) {
maxBlocks=maxBlocksPerSecond=maxBps=Integer.MAX_VALUE;
for (CodecProfileLevel profileLevel : profileLevels) {
switch (profileLevel.level) {
case CodecProfileLevel.VP8Level_Version0:
case CodecProfileLevel.VP8Level_Version1:
case CodecProfileLevel.VP8Level_Version2:
case CodecProfileLevel.VP8Level_Version3:
break;
default :
Log.w(TAG,"Unrecognized level " + profileLevel.level + " for "+ mime);
errors|=ERROR_UNRECOGNIZED;
}
switch (profileLevel.profile) {
case CodecProfileLevel.VP8ProfileMain:
break;
default :
Log.w(TAG,"Unrecognized profile " + profileLevel.profile + " for "+ mime);
errors|=ERROR_UNRECOGNIZED;
}
errors&=~ERROR_NONE_SUPPORTED;
}
}
 else if (mime.equalsIgnoreCase(MediaFormat.MIMETYPE_VIDEO_HEVC)) {
maxBlocks=36864;
maxBlocksPerSecond=maxBlocks * 15;
maxBps=128000;
for (CodecProfileLevel profileLevel : profileLevels) {
double FR=0;
int FS=0;
int BR=0;
switch (profileLevel.level) {
case CodecProfileLevel.HEVCMainTierLevel1:
case CodecProfileLevel.HEVCHighTierLevel1:
FR=15;
FS=36864;
BR=128;
break;
case CodecProfileLevel.HEVCMainTierLevel2:
case CodecProfileLevel.HEVCHighTierLevel2:
FR=30;
FS=122880;
BR=1500;
break;
case CodecProfileLevel.HEVCMainTierLevel21:
case CodecProfileLevel.HEVCHighTierLevel21:
FR=30;
FS=245760;
BR=3000;
break;
case CodecProfileLevel.HEVCMainTierLevel3:
case CodecProfileLevel.HEVCHighTierLevel3:
FR=30;
FS=552960;
BR=6000;
break;
case CodecProfileLevel.HEVCMainTierLevel31:
case CodecProfileLevel.HEVCHighTierLevel31:
FR=33.75;
FS=983040;
BR=10000;
break;
case CodecProfileLevel.HEVCMainTierLevel4:
FR=30;
FS=2228224;
BR=12000;
break;
case CodecProfileLevel.HEVCHighTierLevel4:
FR=30;
FS=2228224;
BR=30000;
break;
case CodecProfileLevel.HEVCHighTierLevel41:
FR=60;
FS=2228224;
BR=20000;
break;
case CodecProfileLevel.HEVCMainTierLevel41:
FR=60;
FS=2228224;
BR=50000;
break;
case CodecProfileLevel.HEVCHighTierLevel5:
FR=30;
FS=8912896;
BR=25000;
break;
case CodecProfileLevel.HEVCMainTierLevel5:
FR=30;
FS=8912896;
BR=100000;
break;
case CodecProfileLevel.HEVCHighTierLevel51:
FR=60;
FS=8912896;
BR=40000;
break;
case CodecProfileLevel.HEVCMainTierLevel51:
FR=60;
FS=8912896;
BR=160000;
break;
case CodecProfileLevel.HEVCMainTierLevel52:
FR=120;
FS=8912896;
BR=60000;
break;
case CodecProfileLevel.HEVCHighTierLevel52:
FR=120;
FS=8912896;
BR=240000;
break;
case CodecProfileLevel.HEVCMainTierLevel6:
FR=30;
FS=35651584;
BR=60000;
break;
case CodecProfileLevel.HEVCHighTierLevel6:
FR=30;
FS=35651584;
BR=240000;
break;
case CodecProfileLevel.HEVCHighTierLevel61:
FR=60;
FS=35651584;
BR=120000;
break;
case CodecProfileLevel.HEVCMainTierLevel61:
FR=60;
FS=35651584;
BR=480000;
break;
case CodecProfileLevel.HEVCHighTierLevel62:
FR=120;
FS=35651584;
BR=240000;
break;
case CodecProfileLevel.HEVCMainTierLevel62:
FR=120;
FS=35651584;
BR=800000;
break;
default :
Log.w(TAG,"Unrecognized level " + profileLevel.level + " for "+ mime);
errors|=ERROR_UNRECOGNIZED;
}
switch (profileLevel.profile) {
case CodecProfileLevel.HEVCProfileMain:
case CodecProfileLevel.HEVCProfileMain10:
break;
default :
Log.w(TAG,"Unrecognized profile " + profileLevel.profile + " for "+ mime);
errors|=ERROR_UNRECOGNIZED;
}
errors&=~ERROR_NONE_SUPPORTED;
maxBlocksPerSecond=Math.max((int)(FR * FS),maxBlocksPerSecond);
maxBlocks=Math.max(FS,maxBlocks);
maxBps=Math.max(BR * 1000,maxBps);
}
int maxLengthInBlocks=(int)(Math.sqrt(maxBlocks * 8));
maxBlocks=Utils.divUp(maxBlocks,8 * 8);
maxBlocksPerSecond=Utils.divUp(maxBlocksPerSecond,8 * 8);
maxLengthInBlocks=Utils.divUp(maxLengthInBlocks,8);
applyMacroBlockLimits(maxLengthInBlocks,maxLengthInBlocks,maxBlocks,maxBlocksPerSecond,8,8,1,1);
}
 else {
Log.w(TAG,"Unsupported mime " + mime);
errors|=ERROR_UNSUPPORTED;
}
mBitrateRange=Range.create(1,maxBps);
mParent.mError|=errors;
}
