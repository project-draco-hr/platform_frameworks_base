{
  checkPowerOfTwo(blockWidth,"blockWidth must be a power of two");
  checkPowerOfTwo(blockHeight,"blockHeight must be a power of two");
  final int newBlockWidth=Math.max(blockWidth,mBlockWidth);
  final int newBlockHeight=Math.max(blockHeight,mBlockHeight);
  int factor=newBlockWidth * newBlockHeight / mBlockWidth / mBlockHeight;
  if (factor != 1) {
    mBlockCountRange=Utils.factorRange(mBlockCountRange,factor);
    mBlocksPerSecondRange=Utils.factorRange(mBlocksPerSecondRange,factor);
    mBlockAspectRatioRange=Utils.scaleRange(mBlockAspectRatioRange,newBlockHeight / mBlockHeight,newBlockWidth / mBlockWidth);
    mHorizontalBlockRange=Utils.factorRange(mHorizontalBlockRange,newBlockWidth / mBlockWidth);
    mVerticalBlockRange=Utils.factorRange(mVerticalBlockRange,newBlockHeight / mBlockHeight);
  }
  factor=newBlockWidth * newBlockHeight / blockWidth / blockHeight;
  if (factor != 1) {
    counts=Utils.factorRange(counts,factor);
    rates=Utils.factorRange(rates,factor);
    ratios=Utils.scaleRange(ratios,newBlockHeight / blockHeight,newBlockWidth / blockWidth);
  }
  mBlockCountRange=mBlockCountRange.intersect(counts);
  mBlocksPerSecondRange=mBlocksPerSecondRange.intersect(rates);
  mBlockAspectRatioRange=mBlockAspectRatioRange.intersect(ratios);
  mBlockWidth=newBlockWidth;
  mBlockHeight=newBlockHeight;
}
