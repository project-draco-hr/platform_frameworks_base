{
  Log.i(TAG,"Granting permissions to default platform handlers for user " + userId);
  final PackagesProvider imePackagesProvider;
  final PackagesProvider locationPackagesProvider;
  final PackagesProvider voiceInteractionPackagesProvider;
  final PackagesProvider smsAppPackagesProvider;
  final PackagesProvider dialerAppPackagesProvider;
  final PackagesProvider simCallManagerPackagesProvider;
  final SyncAdapterPackagesProvider syncAdapterPackagesProvider;
synchronized (mService.mPackages) {
    imePackagesProvider=mImePackagesProvider;
    locationPackagesProvider=mLocationPackagesProvider;
    voiceInteractionPackagesProvider=mVoiceInteractionPackagesProvider;
    smsAppPackagesProvider=mSmsAppPackagesProvider;
    dialerAppPackagesProvider=mDialerAppPackagesProvider;
    simCallManagerPackagesProvider=mSimCallManagerPackagesProvider;
    syncAdapterPackagesProvider=mSyncAdapterPackagesProvider;
  }
  String[] imePackageNames=(imePackagesProvider != null) ? imePackagesProvider.getPackages(userId) : null;
  String[] voiceInteractPackageNames=(voiceInteractionPackagesProvider != null) ? voiceInteractionPackagesProvider.getPackages(userId) : null;
  String[] locationPackageNames=(locationPackagesProvider != null) ? locationPackagesProvider.getPackages(userId) : null;
  String[] smsAppPackageNames=(smsAppPackagesProvider != null) ? smsAppPackagesProvider.getPackages(userId) : null;
  String[] dialerAppPackageNames=(dialerAppPackagesProvider != null) ? dialerAppPackagesProvider.getPackages(userId) : null;
  String[] simCallManagerPackageNames=(simCallManagerPackagesProvider != null) ? simCallManagerPackagesProvider.getPackages(userId) : null;
  String[] contactsSyncAdapterPackages=(syncAdapterPackagesProvider != null) ? syncAdapterPackagesProvider.getPackages(ContactsContract.AUTHORITY,userId) : null;
  String[] calendarSyncAdapterPackages=(syncAdapterPackagesProvider != null) ? syncAdapterPackagesProvider.getPackages(CalendarContract.AUTHORITY,userId) : null;
synchronized (mService.mPackages) {
    PackageParser.Package installerPackage=getSystemPackageLPr(mService.mRequiredInstallerPackage);
    if (installerPackage != null && doesPackageSupportRuntimePermissions(installerPackage)) {
      grantRuntimePermissionsLPw(installerPackage,STORAGE_PERMISSIONS,true,userId);
    }
    PackageParser.Package verifierPackage=getSystemPackageLPr(mService.mRequiredVerifierPackage);
    if (verifierPackage != null && doesPackageSupportRuntimePermissions(verifierPackage)) {
      grantRuntimePermissionsLPw(verifierPackage,STORAGE_PERMISSIONS,true,userId);
      grantRuntimePermissionsLPw(verifierPackage,PHONE_PERMISSIONS,false,userId);
      grantRuntimePermissionsLPw(verifierPackage,SMS_PERMISSIONS,false,userId);
    }
    Intent setupIntent=new Intent(Intent.ACTION_MAIN);
    setupIntent.addCategory(Intent.CATEGORY_SETUP_WIZARD);
    PackageParser.Package setupPackage=getDefaultSystemHandlerActivityPackageLPr(setupIntent,userId);
    if (setupPackage != null && doesPackageSupportRuntimePermissions(setupPackage)) {
      grantRuntimePermissionsLPw(setupPackage,PHONE_PERMISSIONS,userId);
      grantRuntimePermissionsLPw(setupPackage,CONTACTS_PERMISSIONS,userId);
      grantRuntimePermissionsLPw(setupPackage,LOCATION_PERMISSIONS,userId);
      grantRuntimePermissionsLPw(setupPackage,CAMERA_PERMISSIONS,userId);
    }
    Intent cameraIntent=new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
    PackageParser.Package cameraPackage=getDefaultSystemHandlerActivityPackageLPr(cameraIntent,userId);
    if (cameraPackage != null && doesPackageSupportRuntimePermissions(cameraPackage)) {
      grantRuntimePermissionsLPw(cameraPackage,CAMERA_PERMISSIONS,userId);
      grantRuntimePermissionsLPw(cameraPackage,MICROPHONE_PERMISSIONS,userId);
      grantRuntimePermissionsLPw(cameraPackage,STORAGE_PERMISSIONS,userId);
    }
    PackageParser.Package mediaStorePackage=getDefaultProviderAuthorityPackageLPr(MediaStore.AUTHORITY,userId);
    if (mediaStorePackage != null) {
      grantRuntimePermissionsLPw(mediaStorePackage,STORAGE_PERMISSIONS,true,userId);
    }
    PackageParser.Package downloadsPackage=getDefaultProviderAuthorityPackageLPr("downloads",userId);
    if (downloadsPackage != null) {
      grantRuntimePermissionsLPw(downloadsPackage,STORAGE_PERMISSIONS,true,userId);
    }
    Intent downloadsUiIntent=new Intent(DownloadManager.ACTION_VIEW_DOWNLOADS);
    PackageParser.Package downloadsUiPackage=getDefaultSystemHandlerActivityPackageLPr(downloadsUiIntent,userId);
    if (downloadsUiPackage != null && doesPackageSupportRuntimePermissions(downloadsUiPackage)) {
      grantRuntimePermissionsLPw(downloadsUiPackage,STORAGE_PERMISSIONS,true,userId);
    }
    PackageParser.Package storagePackage=getDefaultProviderAuthorityPackageLPr("com.android.externalstorage.documents",userId);
    if (storagePackage != null) {
      grantRuntimePermissionsLPw(storagePackage,STORAGE_PERMISSIONS,true,userId);
    }
    Intent certInstallerIntent=new Intent(Credentials.INSTALL_ACTION);
    PackageParser.Package certInstallerPackage=getDefaultSystemHandlerActivityPackageLPr(certInstallerIntent,userId);
    if (certInstallerPackage != null && doesPackageSupportRuntimePermissions(certInstallerPackage)) {
      grantRuntimePermissionsLPw(certInstallerPackage,STORAGE_PERMISSIONS,true,userId);
    }
    if (dialerAppPackageNames == null) {
      Intent dialerIntent=new Intent(Intent.ACTION_DIAL);
      PackageParser.Package dialerPackage=getDefaultSystemHandlerActivityPackageLPr(dialerIntent,userId);
      if (dialerPackage != null) {
        grantDefaultPermissionsToDefaultSystemDialerAppLPr(dialerPackage,userId);
      }
    }
 else {
      for (      String dialerAppPackageName : dialerAppPackageNames) {
        PackageParser.Package dialerPackage=getSystemPackageLPr(dialerAppPackageName);
        if (dialerPackage != null) {
          grantDefaultPermissionsToDefaultSystemDialerAppLPr(dialerPackage,userId);
        }
      }
    }
    if (simCallManagerPackageNames != null) {
      for (      String simCallManagerPackageName : simCallManagerPackageNames) {
        PackageParser.Package simCallManagerPackage=getSystemPackageLPr(simCallManagerPackageName);
        if (simCallManagerPackage != null) {
          grantDefaultPermissionsToDefaultSimCallManagerLPr(simCallManagerPackage,userId);
        }
      }
    }
    if (smsAppPackageNames == null) {
      Intent smsIntent=new Intent(Intent.ACTION_MAIN);
      smsIntent.addCategory(Intent.CATEGORY_APP_MESSAGING);
      PackageParser.Package smsPackage=getDefaultSystemHandlerActivityPackageLPr(smsIntent,userId);
      if (smsPackage != null) {
        grantDefaultPermissionsToDefaultSystemSmsAppLPr(smsPackage,userId);
      }
    }
 else {
      for (      String smsPackageName : smsAppPackageNames) {
        PackageParser.Package smsPackage=getSystemPackageLPr(smsPackageName);
        if (smsPackage != null) {
          grantDefaultPermissionsToDefaultSystemSmsAppLPr(smsPackage,userId);
        }
      }
    }
    Intent cbrIntent=new Intent(Intents.SMS_CB_RECEIVED_ACTION);
    PackageParser.Package cbrPackage=getDefaultSystemHandlerActivityPackageLPr(cbrIntent,userId);
    if (cbrPackage != null && doesPackageSupportRuntimePermissions(cbrPackage)) {
      grantRuntimePermissionsLPw(cbrPackage,SMS_PERMISSIONS,userId);
    }
    Intent carrierProvIntent=new Intent(Intents.SMS_CARRIER_PROVISION_ACTION);
    PackageParser.Package carrierProvPackage=getDefaultSystemHandlerServicePackageLPr(carrierProvIntent,userId);
    if (carrierProvPackage != null && doesPackageSupportRuntimePermissions(carrierProvPackage)) {
      grantRuntimePermissionsLPw(carrierProvPackage,SMS_PERMISSIONS,false,userId);
    }
    Intent calendarIntent=new Intent(Intent.ACTION_MAIN);
    calendarIntent.addCategory(Intent.CATEGORY_APP_CALENDAR);
    PackageParser.Package calendarPackage=getDefaultSystemHandlerActivityPackageLPr(calendarIntent,userId);
    if (calendarPackage != null && doesPackageSupportRuntimePermissions(calendarPackage)) {
      grantRuntimePermissionsLPw(calendarPackage,CALENDAR_PERMISSIONS,userId);
      grantRuntimePermissionsLPw(calendarPackage,CONTACTS_PERMISSIONS,userId);
    }
    PackageParser.Package calendarProviderPackage=getDefaultProviderAuthorityPackageLPr(CalendarContract.AUTHORITY,userId);
    if (calendarProviderPackage != null) {
      grantRuntimePermissionsLPw(calendarProviderPackage,CONTACTS_PERMISSIONS,userId);
      grantRuntimePermissionsLPw(calendarProviderPackage,CALENDAR_PERMISSIONS,true,userId);
      grantRuntimePermissionsLPw(calendarProviderPackage,STORAGE_PERMISSIONS,userId);
    }
    List<PackageParser.Package> calendarSyncAdapters=getHeadlessSyncAdapterPackagesLPr(calendarSyncAdapterPackages,userId);
    final int calendarSyncAdapterCount=calendarSyncAdapters.size();
    for (int i=0; i < calendarSyncAdapterCount; i++) {
      PackageParser.Package calendarSyncAdapter=calendarSyncAdapters.get(i);
      if (doesPackageSupportRuntimePermissions(calendarSyncAdapter)) {
        grantRuntimePermissionsLPw(calendarSyncAdapter,CALENDAR_PERMISSIONS,userId);
      }
    }
    Intent contactsIntent=new Intent(Intent.ACTION_MAIN);
    contactsIntent.addCategory(Intent.CATEGORY_APP_CONTACTS);
    PackageParser.Package contactsPackage=getDefaultSystemHandlerActivityPackageLPr(contactsIntent,userId);
    if (contactsPackage != null && doesPackageSupportRuntimePermissions(contactsPackage)) {
      grantRuntimePermissionsLPw(contactsPackage,CONTACTS_PERMISSIONS,userId);
      grantRuntimePermissionsLPw(contactsPackage,PHONE_PERMISSIONS,userId);
    }
    List<PackageParser.Package> contactsSyncAdapters=getHeadlessSyncAdapterPackagesLPr(contactsSyncAdapterPackages,userId);
    final int contactsSyncAdapterCount=contactsSyncAdapters.size();
    for (int i=0; i < contactsSyncAdapterCount; i++) {
      PackageParser.Package contactsSyncAdapter=contactsSyncAdapters.get(i);
      if (doesPackageSupportRuntimePermissions(contactsSyncAdapter)) {
        grantRuntimePermissionsLPw(contactsSyncAdapter,CONTACTS_PERMISSIONS,userId);
      }
    }
    PackageParser.Package contactsProviderPackage=getDefaultProviderAuthorityPackageLPr(ContactsContract.AUTHORITY,userId);
    if (contactsProviderPackage != null) {
      grantRuntimePermissionsLPw(contactsProviderPackage,CONTACTS_PERMISSIONS,true,userId);
      grantRuntimePermissionsLPw(contactsProviderPackage,PHONE_PERMISSIONS,true,userId);
      grantRuntimePermissionsLPw(contactsProviderPackage,STORAGE_PERMISSIONS,userId);
    }
    Intent deviceProvisionIntent=new Intent(DevicePolicyManager.ACTION_PROVISION_MANAGED_DEVICE);
    PackageParser.Package deviceProvisionPackage=getDefaultSystemHandlerActivityPackageLPr(deviceProvisionIntent,userId);
    if (deviceProvisionPackage != null && doesPackageSupportRuntimePermissions(deviceProvisionPackage)) {
      grantRuntimePermissionsLPw(deviceProvisionPackage,CONTACTS_PERMISSIONS,userId);
    }
    Intent mapsIntent=new Intent(Intent.ACTION_MAIN);
    mapsIntent.addCategory(Intent.CATEGORY_APP_MAPS);
    PackageParser.Package mapsPackage=getDefaultSystemHandlerActivityPackageLPr(mapsIntent,userId);
    if (mapsPackage != null && doesPackageSupportRuntimePermissions(mapsPackage)) {
      grantRuntimePermissionsLPw(mapsPackage,LOCATION_PERMISSIONS,userId);
    }
    Intent galleryIntent=new Intent(Intent.ACTION_MAIN);
    galleryIntent.addCategory(Intent.CATEGORY_APP_GALLERY);
    PackageParser.Package galleryPackage=getDefaultSystemHandlerActivityPackageLPr(galleryIntent,userId);
    if (galleryPackage != null && doesPackageSupportRuntimePermissions(galleryPackage)) {
      grantRuntimePermissionsLPw(galleryPackage,STORAGE_PERMISSIONS,userId);
    }
    Intent emailIntent=new Intent(Intent.ACTION_MAIN);
    emailIntent.addCategory(Intent.CATEGORY_APP_EMAIL);
    PackageParser.Package emailPackage=getDefaultSystemHandlerActivityPackageLPr(emailIntent,userId);
    if (emailPackage != null && doesPackageSupportRuntimePermissions(emailPackage)) {
      grantRuntimePermissionsLPw(emailPackage,CONTACTS_PERMISSIONS,userId);
    }
    PackageParser.Package browserPackage=null;
    String defaultBrowserPackage=mService.getDefaultBrowserPackageName(userId);
    if (defaultBrowserPackage != null) {
      browserPackage=getPackageLPr(defaultBrowserPackage);
    }
    if (browserPackage == null) {
      Intent browserIntent=new Intent(Intent.ACTION_MAIN);
      browserIntent.addCategory(Intent.CATEGORY_APP_BROWSER);
      browserPackage=getDefaultSystemHandlerActivityPackageLPr(browserIntent,userId);
    }
    if (browserPackage != null && doesPackageSupportRuntimePermissions(browserPackage)) {
      grantRuntimePermissionsLPw(browserPackage,LOCATION_PERMISSIONS,userId);
    }
    if (imePackageNames != null) {
      for (      String imePackageName : imePackageNames) {
        PackageParser.Package imePackage=getSystemPackageLPr(imePackageName);
        if (imePackage != null && doesPackageSupportRuntimePermissions(imePackage)) {
          grantRuntimePermissionsLPw(imePackage,CONTACTS_PERMISSIONS,userId);
        }
      }
    }
    if (voiceInteractPackageNames != null) {
      for (      String voiceInteractPackageName : voiceInteractPackageNames) {
        PackageParser.Package voiceInteractPackage=getSystemPackageLPr(voiceInteractPackageName);
        if (voiceInteractPackage != null && doesPackageSupportRuntimePermissions(voiceInteractPackage)) {
          grantRuntimePermissionsLPw(voiceInteractPackage,CONTACTS_PERMISSIONS,userId);
          grantRuntimePermissionsLPw(voiceInteractPackage,CALENDAR_PERMISSIONS,userId);
          grantRuntimePermissionsLPw(voiceInteractPackage,MICROPHONE_PERMISSIONS,userId);
          grantRuntimePermissionsLPw(voiceInteractPackage,PHONE_PERMISSIONS,userId);
          grantRuntimePermissionsLPw(voiceInteractPackage,SMS_PERMISSIONS,userId);
          grantRuntimePermissionsLPw(voiceInteractPackage,LOCATION_PERMISSIONS,userId);
        }
      }
    }
    Intent voiceRecoIntent=new Intent("android.speech.RecognitionService");
    voiceRecoIntent.addCategory(Intent.CATEGORY_DEFAULT);
    PackageParser.Package voiceRecoPackage=getDefaultSystemHandlerServicePackageLPr(voiceRecoIntent,userId);
    if (voiceRecoPackage != null && doesPackageSupportRuntimePermissions(voiceRecoPackage)) {
      grantRuntimePermissionsLPw(voiceRecoPackage,MICROPHONE_PERMISSIONS,userId);
    }
    if (locationPackageNames != null) {
      for (      String packageName : locationPackageNames) {
        PackageParser.Package locationPackage=getSystemPackageLPr(packageName);
        if (locationPackage != null && doesPackageSupportRuntimePermissions(locationPackage)) {
          grantRuntimePermissionsLPw(locationPackage,CONTACTS_PERMISSIONS,userId);
          grantRuntimePermissionsLPw(locationPackage,CALENDAR_PERMISSIONS,userId);
          grantRuntimePermissionsLPw(locationPackage,MICROPHONE_PERMISSIONS,userId);
          grantRuntimePermissionsLPw(locationPackage,PHONE_PERMISSIONS,userId);
          grantRuntimePermissionsLPw(locationPackage,SMS_PERMISSIONS,userId);
          grantRuntimePermissionsLPw(locationPackage,LOCATION_PERMISSIONS,true,userId);
          grantRuntimePermissionsLPw(locationPackage,CAMERA_PERMISSIONS,userId);
          grantRuntimePermissionsLPw(locationPackage,SENSORS_PERMISSIONS,userId);
          grantRuntimePermissionsLPw(locationPackage,STORAGE_PERMISSIONS,userId);
        }
      }
    }
    Intent musicIntent=new Intent(Intent.ACTION_VIEW);
    musicIntent.addCategory(Intent.CATEGORY_DEFAULT);
    musicIntent.setDataAndType(Uri.fromFile(new File("foo.mp3")),AUDIO_MIME_TYPE);
    PackageParser.Package musicPackage=getDefaultSystemHandlerActivityPackageLPr(musicIntent,userId);
    if (musicPackage != null && doesPackageSupportRuntimePermissions(musicPackage)) {
      grantRuntimePermissionsLPw(musicPackage,STORAGE_PERMISSIONS,userId);
    }
    if (mService.hasSystemFeature(PackageManager.FEATURE_WATCH)) {
      Intent homeIntent=new Intent(Intent.ACTION_MAIN);
      homeIntent.addCategory(Intent.CATEGORY_HOME_MAIN);
      PackageParser.Package wearHomePackage=getDefaultSystemHandlerActivityPackageLPr(homeIntent,userId);
      if (wearHomePackage != null && doesPackageSupportRuntimePermissions(wearHomePackage)) {
        grantRuntimePermissionsLPw(wearHomePackage,CONTACTS_PERMISSIONS,false,userId);
        grantRuntimePermissionsLPw(wearHomePackage,PHONE_PERMISSIONS,true,userId);
        grantRuntimePermissionsLPw(wearHomePackage,MICROPHONE_PERMISSIONS,false,userId);
        grantRuntimePermissionsLPw(wearHomePackage,LOCATION_PERMISSIONS,false,userId);
      }
    }
    PackageParser.Package printSpoolerPackage=getSystemPackageLPr("com.android.printspooler");
    if (printSpoolerPackage != null && doesPackageSupportRuntimePermissions(printSpoolerPackage)) {
      grantRuntimePermissionsLPw(printSpoolerPackage,LOCATION_PERMISSIONS,true,userId);
    }
    mService.mSettings.onDefaultRuntimePermissionsGrantedLPr(userId);
  }
}
