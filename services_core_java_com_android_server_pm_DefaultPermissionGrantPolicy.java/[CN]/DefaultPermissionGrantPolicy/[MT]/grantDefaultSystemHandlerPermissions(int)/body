{
  Log.i(TAG,"Granting permissions to default platform handlers");
  final PackagesProvider imePackagesProvider;
  final PackagesProvider locationPackagesProvider;
  final PackagesProvider voiceInteractionPackagesProvider;
  final PackagesProvider carrierAppPackagesProvider;
synchronized (mService.mPackages) {
    imePackagesProvider=mImePackagesProvider;
    locationPackagesProvider=mLocationPackagesProvider;
    voiceInteractionPackagesProvider=mVoiceInteractionPackagesProvider;
    carrierAppPackagesProvider=mCarrierAppPackagesProvider;
  }
  String[] imePackageNames=(imePackagesProvider != null) ? imePackagesProvider.getPackages(userId) : null;
  String[] voiceInteractPackageNames=(voiceInteractionPackagesProvider != null) ? voiceInteractionPackagesProvider.getPackages(userId) : null;
  String[] locationPackageNames=(locationPackagesProvider != null) ? locationPackagesProvider.getPackages(userId) : null;
  String[] carrierAppPackageNames=(carrierAppPackagesProvider != null) ? carrierAppPackagesProvider.getPackages(userId) : null;
synchronized (mService.mPackages) {
    Intent installerIntent=new Intent(Intent.ACTION_INSTALL_PACKAGE);
    installerIntent.addCategory(Intent.CATEGORY_DEFAULT);
    installerIntent.setDataAndType(Uri.fromFile(new File("foo.apk")),PACKAGE_MIME_TYPE);
    List<PackageParser.Package> installerPackages=getPrivilegedHandlerActivityPackagesLPr(installerIntent,userId);
    final int installerCount=installerPackages.size();
    for (int i=0; i < installerCount; i++) {
      PackageParser.Package installPackage=installerPackages.get(i);
      grantInstallPermissionsLPw(installPackage,INSTALLER_PERMISSIONS,userId);
    }
    Intent verifierIntent=new Intent(Intent.ACTION_PACKAGE_NEEDS_VERIFICATION);
    verifierIntent.setType(PACKAGE_MIME_TYPE);
    List<PackageParser.Package> verifierPackages=getPrivilegedHandlerReceiverPackagesLPr(verifierIntent,userId);
    final int verifierCount=verifierPackages.size();
    for (int i=0; i < verifierCount; i++) {
      PackageParser.Package verifierPackage=verifierPackages.get(i);
      grantInstallPermissionsLPw(verifierPackage,VERIFIER_PERMISSIONS,userId);
    }
    Intent setupIntent=new Intent(Intent.ACTION_MAIN);
    setupIntent.addCategory(Intent.CATEGORY_HOME);
    PackageParser.Package setupPackage=getDefaultSystemHandlerActvityPackageLPr(setupIntent,userId);
    if (setupPackage != null && doesPackageSupportRuntimePermissions(setupPackage)) {
      grantRuntimePermissionsLPw(setupPackage,PHONE_PERMISSIONS,userId);
      grantRuntimePermissionsLPw(setupPackage,CONTACTS_PERMISSIONS,userId);
      grantRuntimePermissionsLPw(setupPackage,SETTINGS_PERMISSIONS,userId);
    }
    Intent dialerIntent=new Intent(Intent.ACTION_DIAL);
    PackageParser.Package dialerPackage=getDefaultSystemHandlerActvityPackageLPr(dialerIntent,userId);
    if (dialerPackage != null && doesPackageSupportRuntimePermissions(dialerPackage)) {
      grantRuntimePermissionsLPw(dialerPackage,PHONE_PERMISSIONS,userId);
      grantRuntimePermissionsLPw(dialerPackage,CONTACTS_PERMISSIONS,userId);
      grantRuntimePermissionsLPw(dialerPackage,SMS_PERMISSIONS,userId);
      grantRuntimePermissionsLPw(dialerPackage,MICROPHONE_PERMISSIONS,userId);
    }
    Intent cameraIntent=new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
    PackageParser.Package cameraPackage=getDefaultSystemHandlerActvityPackageLPr(cameraIntent,userId);
    if (cameraPackage != null && doesPackageSupportRuntimePermissions(cameraPackage)) {
      grantRuntimePermissionsLPw(cameraPackage,CAMERA_PERMISSIONS,userId);
      grantRuntimePermissionsLPw(cameraPackage,MICROPHONE_PERMISSIONS,userId);
    }
    Intent messagingIntent=new Intent(Intent.ACTION_MAIN);
    messagingIntent.addCategory(Intent.CATEGORY_APP_MESSAGING);
    PackageParser.Package messagingPackage=getDefaultSystemHandlerActvityPackageLPr(messagingIntent,userId);
    if (messagingPackage != null && doesPackageSupportRuntimePermissions(messagingPackage)) {
      grantRuntimePermissionsLPw(messagingPackage,PHONE_PERMISSIONS,userId);
      grantRuntimePermissionsLPw(messagingPackage,CONTACTS_PERMISSIONS,userId);
      grantRuntimePermissionsLPw(messagingPackage,SMS_PERMISSIONS,userId);
    }
    Intent calendarIntent=new Intent(Intent.ACTION_MAIN);
    calendarIntent.addCategory(Intent.CATEGORY_APP_CALENDAR);
    PackageParser.Package calendarPackage=getDefaultSystemHandlerActvityPackageLPr(calendarIntent,userId);
    if (calendarPackage != null && doesPackageSupportRuntimePermissions(calendarPackage)) {
      grantRuntimePermissionsLPw(calendarPackage,CALENDAR_PERMISSIONS,userId);
      grantRuntimePermissionsLPw(calendarPackage,CONTACTS_PERMISSIONS,userId);
    }
    Intent contactsIntent=new Intent(Intent.ACTION_MAIN);
    contactsIntent.addCategory(Intent.CATEGORY_APP_CONTACTS);
    PackageParser.Package contactsPackage=getDefaultSystemHandlerActvityPackageLPr(contactsIntent,userId);
    if (contactsPackage != null && doesPackageSupportRuntimePermissions(contactsPackage)) {
      grantRuntimePermissionsLPw(contactsPackage,CONTACTS_PERMISSIONS,userId);
      grantRuntimePermissionsLPw(contactsPackage,PHONE_PERMISSIONS,userId);
    }
    Intent mapsIntent=new Intent(Intent.ACTION_MAIN);
    mapsIntent.addCategory(Intent.CATEGORY_APP_MAPS);
    PackageParser.Package mapsPackage=getDefaultSystemHandlerActvityPackageLPr(mapsIntent,userId);
    if (mapsPackage != null && doesPackageSupportRuntimePermissions(mapsPackage)) {
      grantRuntimePermissionsLPw(mapsPackage,LOCATION_PERMISSIONS,userId);
    }
    Intent emailIntent=new Intent(Intent.ACTION_MAIN);
    emailIntent.addCategory(Intent.CATEGORY_APP_EMAIL);
    PackageParser.Package emailPackage=getDefaultSystemHandlerActvityPackageLPr(emailIntent,userId);
    if (emailPackage != null && doesPackageSupportRuntimePermissions(emailPackage)) {
      grantRuntimePermissionsLPw(emailPackage,CONTACTS_PERMISSIONS,userId);
    }
    Intent browserIntent=new Intent(Intent.ACTION_MAIN);
    browserIntent.addCategory(Intent.CATEGORY_APP_BROWSER);
    PackageParser.Package browserPackage=getDefaultSystemHandlerActvityPackageLPr(browserIntent,userId);
    if (browserPackage != null && doesPackageSupportRuntimePermissions(browserPackage)) {
      grantRuntimePermissionsLPw(browserPackage,LOCATION_PERMISSIONS,userId);
    }
    if (imePackageNames != null) {
      for (      String imePackageName : imePackageNames) {
        PackageParser.Package imePackage=getSystemPackageLPr(imePackageName);
        if (imePackage != null && doesPackageSupportRuntimePermissions(imePackage)) {
          grantRuntimePermissionsLPw(imePackage,CONTACTS_PERMISSIONS,userId);
        }
      }
    }
    if (voiceInteractPackageNames != null) {
      for (      String voiceInteractPackageName : voiceInteractPackageNames) {
        PackageParser.Package voiceInteractPackage=getSystemPackageLPr(voiceInteractPackageName);
        if (voiceInteractPackage != null && doesPackageSupportRuntimePermissions(voiceInteractPackage)) {
          grantRuntimePermissionsLPw(voiceInteractPackage,CONTACTS_PERMISSIONS,userId);
          grantRuntimePermissionsLPw(voiceInteractPackage,CALENDAR_PERMISSIONS,userId);
          grantRuntimePermissionsLPw(voiceInteractPackage,MICROPHONE_PERMISSIONS,userId);
          grantRuntimePermissionsLPw(voiceInteractPackage,PHONE_PERMISSIONS,userId);
          grantRuntimePermissionsLPw(voiceInteractPackage,SMS_PERMISSIONS,userId);
          grantRuntimePermissionsLPw(voiceInteractPackage,LOCATION_PERMISSIONS,userId);
        }
      }
    }
    if (locationPackageNames != null) {
      for (      String packageName : locationPackageNames) {
        PackageParser.Package locationPackage=getSystemPackageLPr(packageName);
        if (locationPackage != null && doesPackageSupportRuntimePermissions(locationPackage)) {
          grantRuntimePermissionsLPw(locationPackage,CONTACTS_PERMISSIONS,userId);
          grantRuntimePermissionsLPw(locationPackage,CALENDAR_PERMISSIONS,userId);
          grantRuntimePermissionsLPw(locationPackage,MICROPHONE_PERMISSIONS,userId);
          grantRuntimePermissionsLPw(locationPackage,PHONE_PERMISSIONS,userId);
          grantRuntimePermissionsLPw(locationPackage,SMS_PERMISSIONS,userId);
          grantRuntimePermissionsLPw(locationPackage,LOCATION_PERMISSIONS,userId);
          grantRuntimePermissionsLPw(locationPackage,CAMERA_PERMISSIONS,userId);
          grantRuntimePermissionsLPw(locationPackage,SENSORS_PERMISSIONS,userId);
          grantRuntimePermissionsLPw(locationPackage,STORAGE_PERMISSIONS,userId);
        }
      }
    }
    if (carrierAppPackageNames != null) {
      for (      String packageName : carrierAppPackageNames) {
        PackageParser.Package carrierPackage=getSystemPackageLPr(packageName);
        if (carrierPackage != null && doesPackageSupportRuntimePermissions(carrierPackage)) {
          grantRuntimePermissionsLPw(carrierPackage,PHONE_PERMISSIONS,userId);
          grantRuntimePermissionsLPw(carrierPackage,LOCATION_PERMISSIONS,userId);
        }
      }
    }
  }
}
