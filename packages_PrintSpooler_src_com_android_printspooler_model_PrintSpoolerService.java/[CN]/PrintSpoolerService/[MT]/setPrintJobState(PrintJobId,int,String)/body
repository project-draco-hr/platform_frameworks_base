{
  boolean success=false;
synchronized (mLock) {
    PrintJobInfo printJob=getPrintJobInfo(printJobId,PrintManager.APP_ID_ANY);
    if (printJob != null) {
      final int oldState=printJob.getState();
      if (oldState == state) {
        return false;
      }
      success=true;
      printJob.setState(state);
      printJob.setStatus(error);
      printJob.setCancelling(false);
      if (DEBUG_PRINT_JOB_LIFECYCLE) {
        Slog.i(LOG_TAG,"[STATE CHANGED] " + printJob);
      }
      MetricsLogger.histogram(this,"print_job_state",state);
switch (state) {
case PrintJobInfo.STATE_COMPLETED:
case PrintJobInfo.STATE_CANCELED:
        mPrintJobs.remove(printJob);
      removePrintJobFileLocked(printJob.getId());
case PrintJobInfo.STATE_FAILED:
{
      PrinterId printerId=printJob.getPrinterId();
      if (printerId != null) {
        ComponentName service=printerId.getServiceName();
        if (!hasActivePrintJobsForServiceLocked(service)) {
          sendOnAllPrintJobsForServiceHandled(service);
        }
      }
    }
  break;
case PrintJobInfo.STATE_QUEUED:
{
  sendOnPrintJobQueued(new PrintJobInfo(printJob));
}
break;
}
if (shouldPersistPrintJob(printJob)) {
mPersistanceManager.writeStateLocked();
}
if (!hasActivePrintJobsLocked()) {
notifyOnAllPrintJobsHandled();
}
notifyPrintJobUpdated(printJob);
}
}
return success;
}
