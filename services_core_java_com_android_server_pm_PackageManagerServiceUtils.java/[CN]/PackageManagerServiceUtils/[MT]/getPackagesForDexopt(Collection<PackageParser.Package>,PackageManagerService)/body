{
  ArrayList<PackageParser.Package> remainingPkgs=new ArrayList<>(packages);
  LinkedList<PackageParser.Package> result=new LinkedList<>();
  for (  PackageParser.Package pkg : remainingPkgs) {
    if (pkg.coreApp) {
      if (DEBUG_DEXOPT) {
        Log.i(TAG,"Adding core app " + result.size() + ": "+ pkg.packageName);
      }
      result.add(pkg);
    }
  }
  remainingPkgs.removeAll(result);
  Intent intent=new Intent(Intent.ACTION_PRE_BOOT_COMPLETED);
  ArraySet<String> pkgNames=getPackageNamesForIntent(intent,UserHandle.USER_SYSTEM);
  for (  PackageParser.Package pkg : remainingPkgs) {
    if (pkgNames.contains(pkg.packageName)) {
      if (DEBUG_DEXOPT) {
        Log.i(TAG,"Adding pre boot system app " + result.size() + ": "+ pkg.packageName);
      }
      result.add(pkg);
    }
  }
  remainingPkgs.removeAll(result);
  if (packageManagerService.isHistoricalPackageUsageAvailable()) {
    filterRecentlyUsedApps(remainingPkgs,DEXOPT_LRU_THRESHOLD_IN_MINUTES * 60 * 1000);
  }
  result.addAll(remainingPkgs);
  Set<PackageParser.Package> dependencies=new HashSet<>();
  for (  PackageParser.Package p : result) {
    dependencies.addAll(packageManagerService.findSharedNonSystemLibraries(p));
  }
  if (!dependencies.isEmpty()) {
    dependencies.removeAll(result);
  }
  result.addAll(dependencies);
  if (DEBUG_DEXOPT) {
    StringBuilder sb=new StringBuilder();
    for (    PackageParser.Package pkg : result) {
      if (sb.length() > 0) {
        sb.append(", ");
      }
      sb.append(pkg.packageName);
    }
    Log.i(TAG,"Packages to be optimized: " + sb.toString());
  }
  return result;
}
