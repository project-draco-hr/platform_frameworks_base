{
  TypedArray arrayAnimator=null;
  TypedArray arrayObjectAnimator=null;
  if (theme != null) {
    arrayAnimator=theme.obtainStyledAttributes(attrs,R.styleable.Animator,0,0);
  }
 else {
    arrayAnimator=res.obtainAttributes(attrs,R.styleable.Animator);
  }
  if (anim != null) {
    if (theme != null) {
      arrayObjectAnimator=theme.obtainStyledAttributes(attrs,R.styleable.PropertyAnimator,0,0);
    }
 else {
      arrayObjectAnimator=res.obtainAttributes(attrs,R.styleable.PropertyAnimator);
    }
    anim.appendChangingConfigurations(arrayObjectAnimator.getChangingConfigurations());
  }
  if (anim == null) {
    anim=new ValueAnimator();
  }
  anim.appendChangingConfigurations(arrayAnimator.getChangingConfigurations());
  parseAnimatorFromTypeArray(anim,arrayAnimator,arrayObjectAnimator,pathErrorScale);
  final int resID=arrayAnimator.getResourceId(R.styleable.Animator_interpolator,0);
  if (resID > 0) {
    final Interpolator interpolator=AnimationUtils.loadInterpolator(res,theme,resID);
    if (interpolator instanceof BaseInterpolator) {
      anim.appendChangingConfigurations(((BaseInterpolator)interpolator).getChangingConfiguration());
    }
    anim.setInterpolator(interpolator);
  }
  final int hint=arrayAnimator.getInt(R.styleable.Animator_durationScaleHint,HINT_NO_SCALE);
  anim.setDurationScaleHint(hint,res);
  arrayAnimator.recycle();
  if (arrayObjectAnimator != null) {
    arrayObjectAnimator.recycle();
  }
  return anim;
}
