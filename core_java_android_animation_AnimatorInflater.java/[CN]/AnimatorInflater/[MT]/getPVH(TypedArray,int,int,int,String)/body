{
  boolean getFloats=(valueType == VALUE_TYPE_FLOAT);
  TypedValue tvFrom=styledAttributes.peekValue(valueFromId);
  boolean hasFrom=(tvFrom != null);
  int fromType=hasFrom ? tvFrom.type : 0;
  TypedValue tvTo=styledAttributes.peekValue(valueToId);
  boolean hasTo=(tvTo != null);
  int toType=hasTo ? tvTo.type : 0;
  PropertyValuesHolder returnValue=null;
  if (valueType == VALUE_TYPE_PATH) {
    String fromString=styledAttributes.getString(valueFromId);
    String toString=styledAttributes.getString(valueToId);
    PathParser.PathDataNode[] nodesFrom=PathParser.createNodesFromPathData(fromString);
    PathParser.PathDataNode[] nodesTo=PathParser.createNodesFromPathData(toString);
    if (nodesFrom != null || nodesTo != null) {
      if (nodesFrom != null) {
        TypeEvaluator evaluator=new PathDataEvaluator(PathParser.deepCopyNodes(nodesFrom));
        if (nodesTo != null) {
          if (!PathParser.canMorph(nodesFrom,nodesTo)) {
            throw new InflateException(" Can't morph from " + fromString + " to "+ toString);
          }
          returnValue=PropertyValuesHolder.ofObject(propertyName,evaluator,nodesFrom,nodesTo);
        }
 else {
          returnValue=PropertyValuesHolder.ofObject(propertyName,evaluator,(Object)nodesFrom);
        }
      }
 else       if (nodesTo != null) {
        TypeEvaluator evaluator=new PathDataEvaluator(PathParser.deepCopyNodes(nodesTo));
        returnValue=PropertyValuesHolder.ofObject(propertyName,evaluator,(Object)nodesTo);
      }
    }
  }
 else {
    TypeEvaluator evaluator=null;
    if ((hasFrom && (fromType >= TypedValue.TYPE_FIRST_COLOR_INT) && (fromType <= TypedValue.TYPE_LAST_COLOR_INT)) || (hasTo && (toType >= TypedValue.TYPE_FIRST_COLOR_INT) && (toType <= TypedValue.TYPE_LAST_COLOR_INT))) {
      getFloats=false;
      evaluator=ArgbEvaluator.getInstance();
    }
    if (getFloats) {
      float valueFrom;
      float valueTo;
      if (hasFrom) {
        if (fromType == TypedValue.TYPE_DIMENSION) {
          valueFrom=styledAttributes.getDimension(valueFromId,0f);
        }
 else {
          valueFrom=styledAttributes.getFloat(valueFromId,0f);
        }
        if (hasTo) {
          if (toType == TypedValue.TYPE_DIMENSION) {
            valueTo=styledAttributes.getDimension(valueToId,0f);
          }
 else {
            valueTo=styledAttributes.getFloat(valueToId,0f);
          }
          returnValue=PropertyValuesHolder.ofFloat(propertyName,valueFrom,valueTo);
        }
 else {
          returnValue=PropertyValuesHolder.ofFloat(propertyName,valueFrom);
        }
      }
 else {
        if (toType == TypedValue.TYPE_DIMENSION) {
          valueTo=styledAttributes.getDimension(valueToId,0f);
        }
 else {
          valueTo=styledAttributes.getFloat(valueToId,0f);
        }
        returnValue=PropertyValuesHolder.ofFloat(propertyName,valueTo);
      }
    }
 else {
      int valueFrom;
      int valueTo;
      if (hasFrom) {
        if (fromType == TypedValue.TYPE_DIMENSION) {
          valueFrom=(int)styledAttributes.getDimension(valueFromId,0f);
        }
 else         if ((fromType >= TypedValue.TYPE_FIRST_COLOR_INT) && (fromType <= TypedValue.TYPE_LAST_COLOR_INT)) {
          valueFrom=styledAttributes.getColor(valueFromId,0);
        }
 else {
          valueFrom=styledAttributes.getInt(valueFromId,0);
        }
        if (hasTo) {
          if (toType == TypedValue.TYPE_DIMENSION) {
            valueTo=(int)styledAttributes.getDimension(valueToId,0f);
          }
 else           if ((toType >= TypedValue.TYPE_FIRST_COLOR_INT) && (toType <= TypedValue.TYPE_LAST_COLOR_INT)) {
            valueTo=styledAttributes.getColor(valueToId,0);
          }
 else {
            valueTo=styledAttributes.getInt(valueToId,0);
          }
          returnValue=PropertyValuesHolder.ofInt(propertyName,valueFrom,valueTo);
        }
 else {
          returnValue=PropertyValuesHolder.ofInt(propertyName,valueFrom);
        }
      }
 else {
        if (hasTo) {
          if (toType == TypedValue.TYPE_DIMENSION) {
            valueTo=(int)styledAttributes.getDimension(valueToId,0f);
          }
 else           if ((toType >= TypedValue.TYPE_FIRST_COLOR_INT) && (toType <= TypedValue.TYPE_LAST_COLOR_INT)) {
            valueTo=styledAttributes.getColor(valueToId,0);
          }
 else {
            valueTo=styledAttributes.getInt(valueToId,0);
          }
          returnValue=PropertyValuesHolder.ofInt(propertyName,valueTo);
        }
      }
    }
    if (returnValue != null && evaluator != null) {
      returnValue.setEvaluator(evaluator);
    }
  }
  return returnValue;
}
