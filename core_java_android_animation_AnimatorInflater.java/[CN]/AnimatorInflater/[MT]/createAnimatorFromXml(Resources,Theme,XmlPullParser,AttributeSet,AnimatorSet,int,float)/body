{
  Animator anim=null;
  ArrayList<Animator> childAnims=null;
  int type;
  int depth=parser.getDepth();
  while (((type=parser.next()) != XmlPullParser.END_TAG || parser.getDepth() > depth) && type != XmlPullParser.END_DOCUMENT) {
    if (type != XmlPullParser.START_TAG) {
      continue;
    }
    String name=parser.getName();
    boolean gotValues=false;
    if (name.equals("objectAnimator")) {
      anim=loadObjectAnimator(res,theme,attrs,pixelSize);
    }
 else     if (name.equals("animator")) {
      anim=loadAnimator(res,theme,attrs,null,pixelSize);
    }
 else     if (name.equals("set")) {
      anim=new AnimatorSet();
      TypedArray a;
      if (theme != null) {
        a=theme.obtainStyledAttributes(attrs,R.styleable.AnimatorSet,0,0);
      }
 else {
        a=res.obtainAttributes(attrs,R.styleable.AnimatorSet);
      }
      anim.appendChangingConfigurations(a.getChangingConfigurations());
      int ordering=a.getInt(R.styleable.AnimatorSet_ordering,TOGETHER);
      createAnimatorFromXml(res,theme,parser,attrs,(AnimatorSet)anim,ordering,pixelSize);
      final int hint=a.getInt(R.styleable.AnimatorSet_durationScaleHint,HINT_NO_SCALE);
      anim.setDurationScaleHint(hint,res);
      a.recycle();
    }
 else     if (name.equals("propertyValuesHolder")) {
      PropertyValuesHolder[] values=loadValues(res,theme,parser,Xml.asAttributeSet(parser));
      if (values != null && anim != null && (anim instanceof ValueAnimator)) {
        ((ValueAnimator)anim).setValues(values);
      }
      gotValues=true;
    }
 else {
      throw new RuntimeException("Unknown animator name: " + parser.getName());
    }
    if (parent != null && !gotValues) {
      if (childAnims == null) {
        childAnims=new ArrayList<Animator>();
      }
      childAnims.add(anim);
    }
  }
  if (parent != null && childAnims != null) {
    Animator[] animsArray=new Animator[childAnims.size()];
    int index=0;
    for (    Animator a : childAnims) {
      animsArray[index++]=a;
    }
    if (sequenceOrdering == TOGETHER) {
      parent.playTogether(animsArray);
    }
 else {
      parent.playSequentially(animsArray);
    }
  }
  return anim;
}
