{
  ArrayList<PropertyValuesHolder> values=null;
  int type;
  while ((type=parser.getEventType()) != XmlPullParser.END_TAG && type != XmlPullParser.END_DOCUMENT) {
    if (type != XmlPullParser.START_TAG) {
      parser.next();
      continue;
    }
    String name=parser.getName();
    if (name.equals("propertyValuesHolder")) {
      TypedArray a;
      if (theme != null) {
        a=theme.obtainStyledAttributes(attrs,R.styleable.PropertyValuesHolder,0,0);
      }
 else {
        a=res.obtainAttributes(attrs,R.styleable.PropertyValuesHolder);
      }
      String propertyName=a.getString(R.styleable.PropertyValuesHolder_propertyName);
      int valueType=a.getInt(R.styleable.PropertyValuesHolder_valueType,VALUE_TYPE_FLOAT);
      PropertyValuesHolder pvh=loadPvh(res,theme,parser,propertyName,valueType);
      if (pvh == null) {
        pvh=getPVH(a,valueType,R.styleable.PropertyValuesHolder_valueFrom,R.styleable.PropertyValuesHolder_valueTo,propertyName);
      }
      if (pvh != null) {
        if (values == null) {
          values=new ArrayList<PropertyValuesHolder>();
        }
        values.add(pvh);
      }
      a.recycle();
    }
    parser.next();
  }
  PropertyValuesHolder[] valuesArray=null;
  if (values != null) {
    int count=values.size();
    valuesArray=new PropertyValuesHolder[count];
    for (int i=0; i < count; ++i) {
      valuesArray[i]=values.get(i);
    }
  }
  return valuesArray;
}
