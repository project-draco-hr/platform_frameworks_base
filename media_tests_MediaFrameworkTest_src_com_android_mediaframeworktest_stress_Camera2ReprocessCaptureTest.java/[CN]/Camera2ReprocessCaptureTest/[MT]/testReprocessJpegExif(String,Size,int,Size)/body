{
  if (VERBOSE) {
    Log.v(TAG,"testReprocessJpegExif: cameraId: " + cameraId + " inputSize: "+ inputSize+ " inputFormat: "+ inputFormat+ " reprocessOutputSize: "+ reprocessOutputSize);
  }
  Size[] thumbnailSizes=mStaticInfo.getAvailableThumbnailSizesChecked();
  Size[] testThumbnailSizes=new Size[EXIF_TEST_DATA.length];
  Arrays.fill(testThumbnailSizes,thumbnailSizes[thumbnailSizes.length - 1]);
  testThumbnailSizes[0]=new Size(0,0);
  try {
    setupImageReaders(inputSize,inputFormat,reprocessOutputSize,ImageFormat.JPEG,EXIF_TEST_DATA.length);
    setupReprocessableSession(null,EXIF_TEST_DATA.length);
    ArrayList<CaptureRequest> reprocessRequests=new ArrayList<>(EXIF_TEST_DATA.length);
    for (int i=0; i < EXIF_TEST_DATA.length; i++) {
      TotalCaptureResult result=submitCaptureRequest(mFirstImageReader.getSurface(),null);
      mImageWriter.queueInputImage(mFirstImageReaderListener.getImage(CAPTURE_TIMEOUT_MS));
      CaptureRequest.Builder builder=mCamera.createReprocessCaptureRequest(result);
      builder.addTarget(getReprocessOutputImageReader().getSurface());
      setJpegKeys(builder,EXIF_TEST_DATA[i],testThumbnailSizes[i],mCollector);
      reprocessRequests.add(builder.build());
    }
    SimpleCaptureCallback captureCallback=new SimpleCaptureCallback();
    mSession.captureBurst(reprocessRequests,captureCallback,mHandler);
    TotalCaptureResult[] reprocessResults=captureCallback.getTotalCaptureResultsForRequests(reprocessRequests,CAPTURE_TIMEOUT_FRAMES);
    for (int i=0; i < EXIF_TEST_DATA.length; i++) {
      Image image=getReprocessOutputImageReaderListener().getImage(CAPTURE_TIMEOUT_MS);
      verifyJpegKeys(image,reprocessResults[i],reprocessOutputSize,testThumbnailSizes[i],EXIF_TEST_DATA[i],mStaticInfo,mCollector);
      image.close();
    }
  }
  finally {
    closeReprossibleSession();
    closeImageReaders();
  }
}
