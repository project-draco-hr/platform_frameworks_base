{
  Size maxInputSize=getMaxSize(inputFormat,StaticMetadata.StreamDirection.Input);
  Size maxReprocessOutputSize=getMaxSize(reprocessOutputFormat,StaticMetadata.StreamDirection.Output);
switch (captureTestCase) {
case SINGLE_SHOT:
    testReprocess(cameraId,maxInputSize,inputFormat,maxReprocessOutputSize,reprocessOutputFormat,previewSize,NUM_REPROCESS_CAPTURES);
  break;
case ABORT_CAPTURE:
testReprocessAbort(cameraId,maxInputSize,inputFormat,maxReprocessOutputSize,reprocessOutputFormat);
break;
case TIMESTAMPS:
testReprocessTimestamps(cameraId,maxInputSize,inputFormat,maxReprocessOutputSize,reprocessOutputFormat);
break;
case JPEG_EXIF:
testReprocessJpegExif(cameraId,maxInputSize,inputFormat,maxReprocessOutputSize);
break;
case REQUEST_KEYS:
testReprocessRequestKeys(cameraId,maxInputSize,inputFormat,maxReprocessOutputSize,reprocessOutputFormat);
break;
default :
throw new IllegalArgumentException("Invalid test case");
}
}
