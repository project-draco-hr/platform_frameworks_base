{
  int[] supportedInputFormats=mStaticInfo.getAvailableFormats(StaticMetadata.StreamDirection.Input);
  for (  int inputFormat : supportedInputFormats) {
    Size[] supportedInputSizes=mStaticInfo.getAvailableSizesForFormatChecked(inputFormat,StaticMetadata.StreamDirection.Input);
    for (    Size inputSize : supportedInputSizes) {
      int[] supportedReprocessOutputFormats=mStaticInfo.getValidOutputFormatsForInput(inputFormat);
      for (      int reprocessOutputFormat : supportedReprocessOutputFormats) {
        Size[] supportedReprocessOutputSizes=mStaticInfo.getAvailableSizesForFormatChecked(reprocessOutputFormat,StaticMetadata.StreamDirection.Output);
        for (        Size reprocessOutputSize : supportedReprocessOutputSizes) {
switch (captureTestCase) {
case SINGLE_SHOT:
            testReprocess(cameraId,inputSize,inputFormat,reprocessOutputSize,reprocessOutputFormat,previewSize,NUM_REPROCESS_CAPTURES);
          break;
case BURST:
        testReprocessBurst(cameraId,inputSize,inputFormat,reprocessOutputSize,reprocessOutputFormat,previewSize,NUM_REPROCESS_BURST);
      break;
case MIXED_BURST:
    testReprocessMixedBurst(cameraId,inputSize,inputFormat,reprocessOutputSize,reprocessOutputFormat,previewSize,NUM_REPROCESS_BURST);
  break;
default :
throw new IllegalArgumentException("Invalid test case");
}
}
}
}
}
}
