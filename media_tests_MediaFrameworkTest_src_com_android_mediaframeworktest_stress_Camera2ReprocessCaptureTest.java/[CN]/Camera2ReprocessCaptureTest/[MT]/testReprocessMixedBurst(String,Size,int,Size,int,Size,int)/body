{
  if (VERBOSE) {
    Log.v(TAG,"testReprocessMixedBurst: cameraId: " + cameraId + " inputSize: "+ inputSize+ " inputFormat: "+ inputFormat+ " reprocessOutputSize: "+ reprocessOutputSize+ " reprocessOutputFormat: "+ reprocessOutputFormat+ " previewSize: "+ previewSize+ " numBurst: "+ numBurst);
  }
  boolean enablePreview=(previewSize != null);
  ImageResultHolder[] imageResultHolders=new ImageResultHolder[0];
  try {
    int totalNumBurst=numBurst * 2;
    if (enablePreview) {
      updatePreviewSurface(previewSize);
    }
 else {
      mPreviewSurface=null;
    }
    setupImageReaders(inputSize,inputFormat,reprocessOutputSize,reprocessOutputFormat,totalNumBurst);
    setupReprocessableSession(mPreviewSurface,numBurst);
    if (enablePreview) {
      startPreview(mPreviewSurface);
    }
    boolean[] isReprocessCaptures=new boolean[totalNumBurst];
    for (int i=0; i < totalNumBurst; i++) {
      if ((i & 1) == 0) {
        isReprocessCaptures[i]=true;
      }
 else {
        isReprocessCaptures[i]=false;
      }
    }
    imageResultHolders=doMixedReprocessBurstCapture(isReprocessCaptures);
    for (    ImageResultHolder holder : imageResultHolders) {
      Image reprocessedImage=holder.getImage();
      TotalCaptureResult result=holder.getTotalCaptureResult();
      mCollector.expectImageProperties("testReprocessMixedBurst",reprocessedImage,reprocessOutputFormat,reprocessOutputSize,result.get(CaptureResult.SENSOR_TIMESTAMP));
      if (DEBUG) {
        Log.d(TAG,String.format("camera %s in %dx%d %d out %dx%d %d",cameraId,inputSize.getWidth(),inputSize.getHeight(),inputFormat,reprocessOutputSize.getWidth(),reprocessOutputSize.getHeight(),reprocessOutputFormat));
        dumpImage(reprocessedImage,"/testReprocessMixedBurst_camera" + cameraId + "_"+ mDumpFrameCount);
        mDumpFrameCount++;
      }
    }
  }
  finally {
    for (    ImageResultHolder holder : imageResultHolders) {
      holder.getImage().close();
    }
    closeReprossibleSession();
    closeImageReaders();
  }
}
