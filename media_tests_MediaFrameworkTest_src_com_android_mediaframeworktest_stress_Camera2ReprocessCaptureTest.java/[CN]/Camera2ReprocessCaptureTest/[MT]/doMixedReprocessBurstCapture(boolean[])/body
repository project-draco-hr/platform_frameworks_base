{
  if (isReprocessCaptures == null || isReprocessCaptures.length <= 0) {
    throw new IllegalArgumentException("isReprocessCaptures must have at least 1 capture.");
  }
  boolean hasReprocessRequest=false;
  boolean hasRegularRequest=false;
  TotalCaptureResult[] results=new TotalCaptureResult[isReprocessCaptures.length];
  for (int i=0; i < isReprocessCaptures.length; i++) {
    if (isReprocessCaptures[i]) {
      results[i]=submitCaptureRequest(mFirstImageReader.getSurface(),null);
      mImageWriter.queueInputImage(mFirstImageReaderListener.getImage(CAPTURE_TIMEOUT_MS));
      hasReprocessRequest=true;
    }
 else {
      hasRegularRequest=true;
    }
  }
  Surface[] outputSurfaces=new Surface[isReprocessCaptures.length];
  for (int i=0; i < isReprocessCaptures.length; i++) {
    outputSurfaces[i]=getReprocessOutputImageReader().getSurface();
  }
  TotalCaptureResult[] finalResults=submitMixedCaptureBurstRequest(outputSurfaces,results);
  ImageResultHolder[] holders=new ImageResultHolder[isReprocessCaptures.length];
  for (int i=0; i < isReprocessCaptures.length; i++) {
    Image image=getReprocessOutputImageReaderListener().getImage(CAPTURE_TIMEOUT_MS);
    if (hasReprocessRequest && hasRegularRequest) {
      for (int j=0; j < finalResults.length; j++) {
        if (finalResults[j] != null && finalResults[j].get(CaptureResult.SENSOR_TIMESTAMP) == image.getTimestamp()) {
          holders[i]=new ImageResultHolder(image,finalResults[j]);
          finalResults[j]=null;
          break;
        }
      }
      assertNotNull("Cannot find a result matching output image's timestamp: " + image.getTimestamp(),holders[i]);
    }
 else {
      holders[i]=new ImageResultHolder(image,finalResults[i]);
    }
  }
  return holders;
}
