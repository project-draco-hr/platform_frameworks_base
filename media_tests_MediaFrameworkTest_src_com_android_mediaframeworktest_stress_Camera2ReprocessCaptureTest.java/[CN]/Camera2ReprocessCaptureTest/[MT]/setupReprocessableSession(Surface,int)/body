{
  List<Surface> outSurfaces=new ArrayList<Surface>();
  outSurfaces.add(mFirstImageReader.getSurface());
  if (!mShareOneImageReader) {
    outSurfaces.add(mSecondImageReader.getSurface());
  }
  if (previewSurface != null) {
    outSurfaces.add(previewSurface);
  }
  InputConfiguration inputConfig=new InputConfiguration(mFirstImageReader.getWidth(),mFirstImageReader.getHeight(),mFirstImageReader.getImageFormat());
  String inputConfigString=inputConfig.toString();
  if (VERBOSE) {
    Log.v(TAG,"InputConfiguration: " + inputConfigString);
  }
  assertTrue(String.format("inputConfig is wrong: %dx%d format %d. Expect %dx%d format %d",inputConfig.getWidth(),inputConfig.getHeight(),inputConfig.getFormat(),mFirstImageReader.getWidth(),mFirstImageReader.getHeight(),mFirstImageReader.getImageFormat()),inputConfig.getWidth() == mFirstImageReader.getWidth() && inputConfig.getHeight() == mFirstImageReader.getHeight() && inputConfig.getFormat() == mFirstImageReader.getImageFormat());
  mSessionListener=new BlockingSessionCallback();
  mSession=configureReprocessableCameraSession(mCamera,inputConfig,outSurfaces,mSessionListener,mHandler);
  mInputSurface=mSession.getInputSurface();
  mImageWriter=ImageWriter.newInstance(mInputSurface,numImageWriterImages);
  mImageWriterListener=new SimpleImageWriterListener(mImageWriter);
  mImageWriter.setOnImageReleasedListener(mImageWriterListener,mHandler);
}
