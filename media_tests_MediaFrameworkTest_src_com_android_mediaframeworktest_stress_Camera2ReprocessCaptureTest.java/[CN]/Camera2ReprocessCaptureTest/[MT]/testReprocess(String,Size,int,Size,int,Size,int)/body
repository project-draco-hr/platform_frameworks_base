{
  if (VERBOSE) {
    Log.v(TAG,"testReprocess: cameraId: " + cameraId + " inputSize: "+ inputSize+ " inputFormat: "+ inputFormat+ " reprocessOutputSize: "+ reprocessOutputSize+ " reprocessOutputFormat: "+ reprocessOutputFormat+ " previewSize: "+ previewSize);
  }
  boolean enablePreview=(previewSize != null);
  try {
    if (enablePreview) {
      updatePreviewSurface(previewSize);
    }
 else {
      mPreviewSurface=null;
    }
    setupImageReaders(inputSize,inputFormat,reprocessOutputSize,reprocessOutputFormat,1);
    setupReprocessableSession(mPreviewSurface,1);
    if (enablePreview) {
      startPreview(mPreviewSurface);
    }
    for (int i=0; i < numReprocessCaptures; i++) {
      ImageResultHolder imageResultHolder=null;
      try {
        imageResultHolder=doReprocessCapture();
        Image reprocessedImage=imageResultHolder.getImage();
        TotalCaptureResult result=imageResultHolder.getTotalCaptureResult();
        mCollector.expectImageProperties("testReprocess",reprocessedImage,reprocessOutputFormat,reprocessOutputSize,result.get(CaptureResult.SENSOR_TIMESTAMP));
        if (DEBUG) {
          Log.d(TAG,String.format("camera %s in %dx%d %d out %dx%d %d",cameraId,inputSize.getWidth(),inputSize.getHeight(),inputFormat,reprocessOutputSize.getWidth(),reprocessOutputSize.getHeight(),reprocessOutputFormat));
          dumpImage(reprocessedImage,"/testReprocess_camera" + cameraId + "_"+ mDumpFrameCount);
          mDumpFrameCount++;
        }
      }
  finally {
        if (imageResultHolder != null) {
          imageResultHolder.getImage().close();
        }
      }
    }
  }
  finally {
    closeReprossibleSession();
    closeImageReaders();
  }
}
