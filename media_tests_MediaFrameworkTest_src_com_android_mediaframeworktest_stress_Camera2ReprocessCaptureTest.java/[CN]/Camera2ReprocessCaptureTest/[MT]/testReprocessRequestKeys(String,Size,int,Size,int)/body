{
  if (VERBOSE) {
    Log.v(TAG,"testReprocessRequestKeys: cameraId: " + cameraId + " inputSize: "+ inputSize+ " inputFormat: "+ inputFormat+ " reprocessOutputSize: "+ reprocessOutputSize+ " reprocessOutputFormat: "+ reprocessOutputFormat);
  }
  final Integer[] EDGE_MODES={CaptureRequest.EDGE_MODE_FAST,CaptureRequest.EDGE_MODE_HIGH_QUALITY,CaptureRequest.EDGE_MODE_OFF,CaptureRequest.EDGE_MODE_ZERO_SHUTTER_LAG};
  final Integer[] NR_MODES={CaptureRequest.NOISE_REDUCTION_MODE_HIGH_QUALITY,CaptureRequest.NOISE_REDUCTION_MODE_OFF,CaptureRequest.NOISE_REDUCTION_MODE_ZERO_SHUTTER_LAG,CaptureRequest.NOISE_REDUCTION_MODE_FAST};
  final Float[] EFFECTIVE_EXP_FACTORS={null,1.0f,2.5f,4.0f};
  int numFrames=EDGE_MODES.length;
  try {
    setupImageReaders(inputSize,inputFormat,reprocessOutputSize,reprocessOutputFormat,numFrames);
    setupReprocessableSession(null,numFrames);
    ArrayList<CaptureRequest> reprocessRequests=new ArrayList<>(numFrames);
    for (int i=0; i < numFrames; i++) {
      TotalCaptureResult result=submitCaptureRequest(mFirstImageReader.getSurface(),null);
      mImageWriter.queueInputImage(mFirstImageReaderListener.getImage(CAPTURE_TIMEOUT_MS));
      CaptureRequest.Builder builder=mCamera.createReprocessCaptureRequest(result);
      builder.addTarget(getReprocessOutputImageReader().getSurface());
      builder.set(CaptureRequest.EDGE_MODE,EDGE_MODES[i]);
      builder.set(CaptureRequest.NOISE_REDUCTION_MODE,NR_MODES[i]);
      if (inputFormat == ImageFormat.YUV_420_888) {
        builder.set(CaptureRequest.REPROCESS_EFFECTIVE_EXPOSURE_FACTOR,EFFECTIVE_EXP_FACTORS[i]);
      }
      reprocessRequests.add(builder.build());
    }
    SimpleCaptureCallback captureCallback=new SimpleCaptureCallback();
    mSession.captureBurst(reprocessRequests,captureCallback,mHandler);
    TotalCaptureResult[] reprocessResults=captureCallback.getTotalCaptureResultsForRequests(reprocessRequests,CAPTURE_TIMEOUT_FRAMES);
    for (int i=0; i < numFrames; i++) {
      Integer resultEdgeMode=reprocessResults[i].get(CaptureResult.EDGE_MODE);
      Integer resultNoiseReductionMode=reprocessResults[i].get(CaptureResult.NOISE_REDUCTION_MODE);
      assertEquals("Reprocess result edge mode (" + resultEdgeMode + ") doesn't match requested edge mode ("+ EDGE_MODES[i]+ ")",resultEdgeMode,EDGE_MODES[i]);
      assertEquals("Reprocess result noise reduction mode (" + resultNoiseReductionMode + ") doesn't match requested noise reduction mode ("+ NR_MODES[i]+ ")",resultNoiseReductionMode,NR_MODES[i]);
      if (inputFormat == ImageFormat.YUV_420_888) {
        Float resultEffectiveExposureFactor=reprocessResults[i].get(CaptureResult.REPROCESS_EFFECTIVE_EXPOSURE_FACTOR);
        assertEquals("Reprocess effective exposure factor (" + resultEffectiveExposureFactor + ") doesn't match requested "+ "effective exposure factor ("+ EFFECTIVE_EXP_FACTORS[i]+ ")",resultEffectiveExposureFactor,EFFECTIVE_EXP_FACTORS[i]);
      }
    }
  }
  finally {
    closeReprossibleSession();
    closeImageReaders();
  }
}
