{
  StringBuilder sb=new StringBuilder(512);
  if (isCompactOutput) {
    sb.append("D:");
    sb.append(CHECKIN_VERSION);
    sb.append(',');
  }
 else {
    sb.append("Date: ");
  }
  sb.append(date);
  int vers=in.readInt();
  if (vers != VERSION) {
    sb.append(" (old data version)");
    pw.println(sb.toString());
    return;
  }
  final LocalUsageStats stats=new LocalUsageStats(in,true);
  final long time=SystemClock.elapsedRealtime();
  pw.println(sb.toString());
  int NP=stats.mPackages.size();
  for (int p=0; p < NP; p++) {
    PkgUsageStatsExtended pus=(PkgUsageStatsExtended)stats.mPackages.valueAt(p);
    sb.setLength(0);
    if (packages != null && !packages.contains(pus.getPackageName())) {
    }
 else     if (isCompactOutput) {
      sb.append("P:");
      sb.append(pus.getPackageName());
      sb.append(',');
      sb.append(pus.getLaunchCount());
      sb.append(',');
      sb.append(pus.getUsageTime(time));
      sb.append('\n');
      final int NLT=pus.mLaunchTimes.size();
      for (int i=0; i < NLT; i++) {
        sb.append("L:");
        String activity=pus.mLaunchTimes.keyAt(i);
        sb.append(activity);
        TimeStats times=pus.mLaunchTimes.valueAt(i);
        sb.append(',');
        sb.append(times.mCount);
        for (int j=0; j < NUM_LAUNCH_TIME_BINS; j++) {
          sb.append(",");
          sb.append(times.mTimes[j]);
        }
        sb.append('\n');
      }
      final int NFDT=pus.mFullyDrawnTimes.size();
      for (int i=0; i < NFDT; i++) {
        sb.append("D:");
        String activity=pus.mFullyDrawnTimes.keyAt(i);
        sb.append(activity);
        TimeStats times=pus.mFullyDrawnTimes.valueAt(i);
        for (int j=0; j < NUM_LAUNCH_TIME_BINS; j++) {
          sb.append(",");
          sb.append(times.mTimes[j]);
        }
        sb.append('\n');
      }
      final int NC=pus.componentResumeTimes.size();
      for (int c=0; c < NC; c++) {
        pw.print("R:");
        pw.print(pus.componentResumeTimes.keyAt(c));
        pw.print(",");
        pw.println(pus.componentResumeTimes.valueAt(c));
      }
    }
 else {
      sb.append("  ");
      sb.append(pus.getPackageName());
      if (pus.getLaunchCount() != 0 || pus.getUsageTime(time) != 0) {
        sb.append(": ");
        sb.append(pus.getLaunchCount());
        sb.append(" times, ");
        TimeUtils.formatDuration(pus.getUsageTime(time),sb);
      }
 else {
        sb.append(":");
      }
      sb.append('\n');
      final int NLT=pus.mLaunchTimes.size();
      for (int i=0; i < NLT; i++) {
        sb.append("    ");
        sb.append(pus.mLaunchTimes.keyAt(i));
        TimeStats times=pus.mLaunchTimes.valueAt(i);
        sb.append(": ");
        sb.append(times.mCount);
        sb.append(" starts");
        int lastBin=0;
        for (int j=0; j < NUM_LAUNCH_TIME_BINS - 1; j++) {
          if (times.mTimes[j] != 0) {
            sb.append(", ");
            sb.append(lastBin);
            sb.append('-');
            sb.append(LAUNCH_TIME_BINS[j]);
            sb.append("ms=");
            sb.append(times.mTimes[j]);
          }
          lastBin=LAUNCH_TIME_BINS[j];
        }
        if (times.mTimes[NUM_LAUNCH_TIME_BINS - 1] != 0) {
          sb.append(", ");
          sb.append(">=");
          sb.append(lastBin);
          sb.append("ms=");
          sb.append(times.mTimes[NUM_LAUNCH_TIME_BINS - 1]);
        }
        sb.append('\n');
      }
      final int NFDT=pus.mFullyDrawnTimes.size();
      for (int i=0; i < NFDT; i++) {
        sb.append("    ");
        sb.append(pus.mFullyDrawnTimes.keyAt(i));
        TimeStats times=pus.mFullyDrawnTimes.valueAt(i);
        sb.append(": fully drawn ");
        boolean needComma=false;
        int lastBin=0;
        for (int j=0; j < NUM_LAUNCH_TIME_BINS - 1; j++) {
          if (times.mTimes[j] != 0) {
            if (needComma) {
              sb.append(", ");
            }
 else {
              needComma=true;
            }
            sb.append(lastBin);
            sb.append('-');
            sb.append(LAUNCH_TIME_BINS[j]);
            sb.append("ms=");
            sb.append(times.mTimes[j]);
          }
          lastBin=LAUNCH_TIME_BINS[j];
        }
        if (times.mTimes[NUM_LAUNCH_TIME_BINS - 1] != 0) {
          if (needComma) {
            sb.append(", ");
          }
          sb.append(">=");
          sb.append(lastBin);
          sb.append("ms=");
          sb.append(times.mTimes[NUM_LAUNCH_TIME_BINS - 1]);
        }
        sb.append('\n');
      }
      final int NC=pus.componentResumeTimes.size();
      for (int c=0; c < NC; c++) {
        sb.append("    ");
        sb.append(pus.componentResumeTimes.keyAt(c));
        sb.append(" last resumed ");
        sb.append(DateFormat.format("yyyy-MM-dd-HH-mm-ss",pus.componentResumeTimes.valueAt(c)).toString());
        sb.append('\n');
      }
    }
    pw.write(sb.toString());
  }
  if (packages == null) {
    int NC=stats.mConfigurations.size();
    for (int c=0; c < NC; c++) {
      ConfigUsageStatsExtended cus=(ConfigUsageStatsExtended)stats.mConfigurations.valueAt(c);
      sb.setLength(0);
      if (isCompactOutput) {
        sb.append("C:");
        sb.append(cus.getConfiguration().toString());
        sb.append(",");
        sb.append(cus.getUsageCount());
        sb.append(",");
        sb.append(cus.getUsageTime(time));
      }
 else {
        sb.append("  ");
        sb.append(cus.getConfiguration().toString());
        sb.append(":\n");
        if (cus.getUsageCount() != 0 || cus.getUsageTime(time) != 0) {
          sb.append("    Used ");
          sb.append(cus.getUsageCount());
          sb.append(" times, ");
          TimeUtils.formatDuration(cus.getUsageTime(time),sb);
          sb.append("\n");
        }
        if (cus.getLastUsedTime() > 0) {
          sb.append("    Last used: ");
          sb.append(DateFormat.format("yyyy-MM-dd-HH-mm-ss",cus.getLastUsedTime()).toString());
          sb.append("\n");
        }
      }
      pw.write(sb.toString());
    }
  }
}
