{
  StringBuilder sb=new StringBuilder(512);
  if (isCompactOutput) {
    sb.append("D:");
    sb.append(CHECKIN_VERSION);
    sb.append(',');
  }
 else {
    sb.append("Date: ");
  }
  sb.append(date);
  int vers=in.readInt();
  if (vers != VERSION) {
    sb.append(" (old data version)");
    pw.println(sb.toString());
    return;
  }
  pw.println(sb.toString());
  int N=in.readInt();
  while (N > 0) {
    N--;
    String pkgName=in.readString();
    if (pkgName == null) {
      break;
    }
    sb.setLength(0);
    PkgUsageStatsExtended pus=new PkgUsageStatsExtended(in);
    if (packages != null && !packages.contains(pkgName)) {
    }
 else     if (isCompactOutput) {
      sb.append("P:");
      sb.append(pkgName);
      sb.append(',');
      sb.append(pus.mLaunchCount);
      sb.append(',');
      sb.append(pus.mUsageTime);
      sb.append('\n');
      final int NLT=pus.mLaunchTimes.size();
      for (int i=0; i < NLT; i++) {
        sb.append("A:");
        String activity=pus.mLaunchTimes.keyAt(i);
        sb.append(activity);
        TimeStats times=pus.mLaunchTimes.valueAt(i);
        sb.append(',');
        sb.append(times.count);
        for (int j=0; j < NUM_LAUNCH_TIME_BINS; j++) {
          sb.append(",");
          sb.append(times.times[j]);
        }
        sb.append('\n');
      }
      final int NFDT=pus.mFullyDrawnTimes.size();
      for (int i=0; i < NFDT; i++) {
        sb.append("A:");
        String activity=pus.mFullyDrawnTimes.keyAt(i);
        sb.append(activity);
        TimeStats times=pus.mFullyDrawnTimes.valueAt(i);
        for (int j=0; j < NUM_LAUNCH_TIME_BINS; j++) {
          sb.append(",");
          sb.append(times.times[j]);
        }
        sb.append('\n');
      }
    }
 else {
      sb.append("  ");
      sb.append(pkgName);
      sb.append(": ");
      sb.append(pus.mLaunchCount);
      sb.append(" times, ");
      sb.append(pus.mUsageTime);
      sb.append(" ms");
      sb.append('\n');
      final int NLT=pus.mLaunchTimes.size();
      for (int i=0; i < NLT; i++) {
        sb.append("    ");
        sb.append(pus.mLaunchTimes.keyAt(i));
        TimeStats times=pus.mLaunchTimes.valueAt(i);
        sb.append(": ");
        sb.append(times.count);
        sb.append(" starts");
        int lastBin=0;
        for (int j=0; j < NUM_LAUNCH_TIME_BINS - 1; j++) {
          if (times.times[j] != 0) {
            sb.append(", ");
            sb.append(lastBin);
            sb.append('-');
            sb.append(LAUNCH_TIME_BINS[j]);
            sb.append("ms=");
            sb.append(times.times[j]);
          }
          lastBin=LAUNCH_TIME_BINS[j];
        }
        if (times.times[NUM_LAUNCH_TIME_BINS - 1] != 0) {
          sb.append(", ");
          sb.append(">=");
          sb.append(lastBin);
          sb.append("ms=");
          sb.append(times.times[NUM_LAUNCH_TIME_BINS - 1]);
        }
        sb.append('\n');
      }
      final int NFDT=pus.mFullyDrawnTimes.size();
      for (int i=0; i < NFDT; i++) {
        sb.append("    ");
        sb.append(pus.mFullyDrawnTimes.keyAt(i));
        TimeStats times=pus.mFullyDrawnTimes.valueAt(i);
        sb.append(": fully drawn ");
        boolean needComma=false;
        int lastBin=0;
        for (int j=0; j < NUM_LAUNCH_TIME_BINS - 1; j++) {
          if (times.times[j] != 0) {
            if (needComma) {
              sb.append(", ");
            }
 else {
              needComma=true;
            }
            sb.append(lastBin);
            sb.append('-');
            sb.append(LAUNCH_TIME_BINS[j]);
            sb.append("ms=");
            sb.append(times.times[j]);
          }
          lastBin=LAUNCH_TIME_BINS[j];
        }
        if (times.times[NUM_LAUNCH_TIME_BINS - 1] != 0) {
          if (needComma) {
            sb.append(", ");
          }
          sb.append(">=");
          sb.append(lastBin);
          sb.append("ms=");
          sb.append(times.times[NUM_LAUNCH_TIME_BINS - 1]);
        }
        sb.append('\n');
      }
    }
    pw.write(sb.toString());
  }
}
