{
  cacheDelayedMotionEvent(event,rawEvent,policyFlags);
  final int action=event.getActionMasked();
switch (action) {
case MotionEvent.ACTION_DOWN:
{
      mHandler.removeMessages(MESSAGE_TRANSITION_TO_DELEGATING_STATE);
      if (!mViewport.getBounds().contains((int)event.getX(),(int)event.getY())) {
        transitionToDelegatingStateAndClear();
        return;
      }
      if (mTapCount == ACTION_TAP_COUNT - 1 && mLastDownEvent != null && GestureUtils.isMultiTap(mLastDownEvent,event,mMultiTapTimeSlop,mMultiTapDistanceSlop,0)) {
        Message message=mHandler.obtainMessage(MESSAGE_ON_ACTION_TAP_AND_HOLD,policyFlags,0,event);
        mHandler.sendMessageDelayed(message,ViewConfiguration.getLongPressTimeout());
      }
 else       if (mTapCount < ACTION_TAP_COUNT) {
        Message message=mHandler.obtainMessage(MESSAGE_TRANSITION_TO_DELEGATING_STATE);
        mHandler.sendMessageDelayed(message,mMultiTapTimeSlop);
      }
      clearLastDownEvent();
      mLastDownEvent=MotionEvent.obtain(event);
    }
  break;
case MotionEvent.ACTION_POINTER_DOWN:
{
  if (mMagnificationController.isMagnifying()) {
    transitionToState(STATE_MAGNIFIED_INTERACTION);
    clear();
  }
 else {
    transitionToDelegatingStateAndClear();
  }
}
break;
case MotionEvent.ACTION_MOVE:
{
if (mLastDownEvent != null && mTapCount < ACTION_TAP_COUNT - 1) {
final double distance=GestureUtils.computeDistance(mLastDownEvent,event,0);
if (Math.abs(distance) > mTapDistanceSlop) {
  transitionToDelegatingStateAndClear();
}
}
}
break;
case MotionEvent.ACTION_UP:
{
if (mLastDownEvent == null) {
return;
}
mHandler.removeMessages(MESSAGE_ON_ACTION_TAP_AND_HOLD);
if (!mViewport.getBounds().contains((int)event.getX(),(int)event.getY())) {
transitionToDelegatingStateAndClear();
return;
}
if (!GestureUtils.isTap(mLastDownEvent,event,mTapTimeSlop,mTapDistanceSlop,0)) {
transitionToDelegatingStateAndClear();
return;
}
if (mLastTapUpEvent != null && !GestureUtils.isMultiTap(mLastTapUpEvent,event,mMultiTapTimeSlop,mMultiTapDistanceSlop,0)) {
transitionToDelegatingStateAndClear();
return;
}
mTapCount++;
if (DEBUG_DETECTING) {
Slog.i(LOG_TAG,"Tap count:" + mTapCount);
}
if (mTapCount == ACTION_TAP_COUNT) {
clear();
onActionTap(event,policyFlags);
return;
}
clearLastTapUpEvent();
mLastTapUpEvent=MotionEvent.obtain(event);
}
break;
case MotionEvent.ACTION_POINTER_UP:
{
}
break;
}
}
