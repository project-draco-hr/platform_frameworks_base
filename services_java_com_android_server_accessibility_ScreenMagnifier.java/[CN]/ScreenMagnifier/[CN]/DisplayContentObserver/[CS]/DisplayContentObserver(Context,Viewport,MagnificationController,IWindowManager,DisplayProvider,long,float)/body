{
  mContext=context;
  mViewport=viewport;
  mMagnificationController=magnificationController;
  mWindowManagerService=windowManagerService;
  mDisplayProvider=displayProvider;
  mLongAnimationDuration=longAnimationDuration;
  mWindowAnimationScale=windowAnimationScale;
  mDisplayContentChangeListener=new IDisplayContentChangeListener.Stub(){
    @Override public void onWindowTransition(    int displayId,    int transition,    WindowInfo info){
      mHandler.obtainMessage(MESSAGE_ON_WINDOW_TRANSITION,transition,0,WindowInfo.obtain(info)).sendToTarget();
    }
    @Override public void onRectangleOnScreenRequested(    int dsiplayId,    Rect rectangle,    boolean immediate){
      SomeArgs args=SomeArgs.obtain();
      args.argi1=rectangle.left;
      args.argi2=rectangle.top;
      args.argi3=rectangle.right;
      args.argi4=rectangle.bottom;
      mHandler.obtainMessage(MESSAGE_ON_RECTANGLE_ON_SCREEN_REQUESTED,0,immediate ? 1 : 0,args).sendToTarget();
    }
    @Override public void onRotationChanged(    int rotation) throws RemoteException {
      mHandler.obtainMessage(MESSAGE_ON_ROTATION_CHANGED,rotation,0).sendToTarget();
    }
    @Override public void onWindowLayersChanged(    int displayId) throws RemoteException {
      mHandler.sendEmptyMessage(MESSAGE_ON_WINDOW_LAYERS_CHANGED);
    }
  }
;
  try {
    mWindowManagerService.addDisplayContentChangeListener(mDisplayProvider.getDisplay().getDisplayId(),mDisplayContentChangeListener);
  }
 catch (  RemoteException re) {
  }
}
