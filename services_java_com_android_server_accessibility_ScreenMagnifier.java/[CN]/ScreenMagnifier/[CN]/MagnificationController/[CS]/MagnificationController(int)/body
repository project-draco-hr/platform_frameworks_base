{
  Property<MagnificationController,MagnificationSpec> property=Property.of(MagnificationController.class,MagnificationSpec.class,PROPERTY_NAME_ACCESSIBILITY_TRANSFORMATION);
  TypeEvaluator<MagnificationSpec> evaluator=new TypeEvaluator<MagnificationSpec>(){
    private final MagnificationSpec mTempTransformationSpec=new MagnificationSpec();
    @Override public MagnificationSpec evaluate(    float fraction,    MagnificationSpec fromSpec,    MagnificationSpec toSpec){
      MagnificationSpec result=mTempTransformationSpec;
      result.mScale=fromSpec.mScale + (toSpec.mScale - fromSpec.mScale) * fraction;
      result.mMagnifiedRegionCenterX=fromSpec.mMagnifiedRegionCenterX + (toSpec.mMagnifiedRegionCenterX - fromSpec.mMagnifiedRegionCenterX) * fraction;
      result.mMagnifiedRegionCenterY=fromSpec.mMagnifiedRegionCenterY + (toSpec.mMagnifiedRegionCenterY - fromSpec.mMagnifiedRegionCenterY) * fraction;
      result.mScaledOffsetX=fromSpec.mScaledOffsetX + (toSpec.mScaledOffsetX - fromSpec.mScaledOffsetX) * fraction;
      result.mScaledOffsetY=fromSpec.mScaledOffsetY + (toSpec.mScaledOffsetY - fromSpec.mScaledOffsetY) * fraction;
      return result;
    }
  }
;
  mTransformationAnimator=ObjectAnimator.ofObject(this,property,evaluator,mSentMagnificationSpec,mCurrentMagnificationSpec);
  mTransformationAnimator.setDuration((long)(animationDuration));
  mTransformationAnimator.setInterpolator(mInterpolator);
}
