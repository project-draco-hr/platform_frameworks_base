{
  Rect magnifiedFrame=mTempRect1;
  magnifiedFrame.set(0,0,0,0);
  DisplayInfo displayInfo=mDisplayProvider.getDisplayInfo();
  Rect availableFrame=mTempRect2;
  availableFrame.set(0,0,displayInfo.logicalWidth,displayInfo.logicalHeight);
  ArrayList<WindowInfo> infos=mTempWindowInfoList;
  infos.clear();
  int windowCount=0;
  try {
    mWindowManagerService.getVisibleWindowsForDisplay(mDisplayProvider.getDisplay().getDisplayId(),infos);
    Collections.sort(infos,mWindowInfoInverseComparator);
    windowCount=infos.size();
    for (int i=0; i < windowCount; i++) {
      WindowInfo info=infos.get(i);
      if (info.type == WindowManager.LayoutParams.TYPE_MAGNIFICATION_OVERLAY) {
        continue;
      }
      Rect windowFrame=mTempRect3;
      windowFrame.set(info.touchableRegion);
      if (isWindowMagnified(info.type)) {
        magnifiedFrame.union(windowFrame);
        magnifiedFrame.intersect(availableFrame);
      }
 else {
        subtract(windowFrame,magnifiedFrame);
        subtract(availableFrame,windowFrame);
      }
      if (availableFrame.equals(magnifiedFrame)) {
        break;
      }
    }
  }
 catch (  RemoteException re) {
  }
 finally {
    for (int i=windowCount - 1; i >= 0; i--) {
      infos.remove(i).recycle();
    }
  }
  final int displayWidth=mDisplayProvider.getDisplayInfo().logicalWidth;
  final int displayHeight=mDisplayProvider.getDisplayInfo().logicalHeight;
  magnifiedFrame.intersect(0,0,displayWidth,displayHeight);
  resize(magnifiedFrame,animate);
}
