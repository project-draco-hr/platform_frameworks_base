{
  className=className.trim();
  int numDimensions=0;
  String generic=null;
  while (className.endsWith("[]")) {
    numDimensions++;
    className=className.substring(0,className.length() - 2);
  }
  final int lastCharIndex=className.length() - 1;
  if ('>' == className.charAt(lastCharIndex)) {
    int open=className.indexOf('<');
    if (open == -1) {
      L.e("un-matching generic syntax for %s",className);
      return className;
    }
    generic=applyImports(className.substring(open + 1,lastCharIndex),imports);
    className=className.substring(0,open);
  }
  int dotIndex=className.indexOf('.');
  final String qualifier;
  final String rest;
  if (dotIndex == -1) {
    qualifier=className;
    rest=null;
  }
 else {
    qualifier=className.substring(0,dotIndex);
    rest=className.substring(dotIndex);
  }
  final String expandedQualifier=imports.get(qualifier);
  String result;
  if (expandedQualifier != null) {
    result=rest == null ? expandedQualifier : expandedQualifier + rest;
  }
 else {
    result=className;
  }
  if (generic != null) {
    result=result + "<" + applyImports(generic,imports)+ ">";
  }
  while (numDimensions-- > 0) {
    result=result + "[]";
  }
  return result;
}
