{
  mMetadata.isEmpty();
  assertFalse(mMetadata.isClosed());
  mMetadata.close();
  assertTrue(mMetadata.isClosed());
  mMetadata.close();
  assertTrue(mMetadata.isClosed());
  try {
    mMetadata.isEmpty();
    fail("Unreachable -- isEmpty after close should throw IllegalStateException");
  }
 catch (  IllegalStateException e) {
  }
  try {
    mMetadata.getEntryCount();
    fail("Unreachable -- getEntryCount after close should throw IllegalStateException");
  }
 catch (  IllegalStateException e) {
  }
  try {
    mMetadata.swap(mMetadata);
    fail("Unreachable -- swap after close should throw IllegalStateException");
  }
 catch (  IllegalStateException e) {
  }
  try {
    mMetadata.readFromParcel(mParcel);
    fail("Unreachable -- readFromParcel after close should throw IllegalStateException");
  }
 catch (  IllegalStateException e) {
  }
  try {
    mMetadata.writeToParcel(mParcel,0);
    fail("Unreachable -- writeToParcel after close should throw IllegalStateException");
  }
 catch (  IllegalStateException e) {
  }
  try {
    mMetadata.readValues(0);
    fail("Unreachable -- readValues after close should throw IllegalStateException");
  }
 catch (  IllegalStateException e) {
  }
  try {
    mMetadata.writeValues(0,new byte[]{1,2,3});
    fail("Unreachable -- readValues after close should throw IllegalStateException");
  }
 catch (  IllegalStateException e) {
  }
}
