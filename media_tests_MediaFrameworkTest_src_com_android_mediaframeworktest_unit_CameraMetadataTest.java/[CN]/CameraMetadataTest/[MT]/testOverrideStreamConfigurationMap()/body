{
  final int OUTPUT=0;
  final int INPUT=1;
  int[] rawAvailableStreamConfigs=new int[]{0x20,3280,2464,OUTPUT,0x23,3264,2448,OUTPUT,0x23,3200,2400,OUTPUT,0x21,3264,2448,OUTPUT,0x21,3200,2400,OUTPUT,0x21,2592,1944,OUTPUT,0x21,2048,1536,OUTPUT,0x21,1920,1080,OUTPUT,0x22,640,480,OUTPUT,0x20,320,240,INPUT};
  Key<StreamConfiguration[]> configKey=CameraCharacteristics.SCALER_AVAILABLE_STREAM_CONFIGURATIONS;
  mMetadata.writeValues(configKey.getTag(),toByteArray(rawAvailableStreamConfigs));
  long[] expectedAvailableMinDurations=new long[]{0x20,3280,2464,33333331,0x23,3264,2448,33333332,0x23,3200,2400,33333333,0x100,3264,2448,33333334,0x100,3200,2400,33333335,0x100,2592,1944,33333336,0x100,2048,1536,33333337,0x100,1920,1080,33333338};
  long[] rawAvailableMinDurations=new long[]{0x20,3280,2464,33333331,0x23,3264,2448,33333332,0x23,3200,2400,33333333,0x21,3264,2448,33333334,0x21,3200,2400,33333335,0x21,2592,1944,33333336,0x21,2048,1536,33333337,0x21,1920,1080,33333338};
  Key<StreamConfigurationDuration[]> durationKey=CameraCharacteristics.SCALER_AVAILABLE_MIN_FRAME_DURATIONS;
  mMetadata.writeValues(durationKey.getTag(),toByteArray(rawAvailableMinDurations));
  long[] expectedAvailableStallDurations=new long[]{0x20,3280,2464,0,0x23,3264,2448,0,0x23,3200,2400,0,0x100,3264,2448,33333334,0x100,3200,2400,33333335,0x100,2592,1944,33333336,0x100,2048,1536,33333337,0x100,1920,1080,33333338};
  long[] rawAvailableStallDurations=new long[]{0x21,3264,2448,33333334,0x21,3200,2400,33333335,0x21,2592,1944,33333336,0x21,2048,1536,33333337,0x21,1920,1080,33333338};
  Key<StreamConfigurationDuration[]> stallDurationKey=CameraCharacteristics.SCALER_AVAILABLE_STALL_DURATIONS;
  mMetadata.writeValues(stallDurationKey.getTag(),toByteArray(rawAvailableStallDurations));
  StreamConfigurationMap streamConfigMap=mMetadata.get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);
  checkStreamConfigurationMapByFormatSize(streamConfigMap,ImageFormat.RAW_SENSOR,320,240,false);
  checkStreamConfigurationMapByFormatSize(streamConfigMap,HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED,640,480,true);
  checkStreamConfigurationMapByFormatSize(streamConfigMap,ImageFormat.JPEG,1920,1080,true);
  checkStreamConfigurationMapByFormatSize(streamConfigMap,ImageFormat.JPEG,2048,1536,true);
  checkStreamConfigurationMapByFormatSize(streamConfigMap,ImageFormat.JPEG,2592,1944,true);
  checkStreamConfigurationMapByFormatSize(streamConfigMap,ImageFormat.JPEG,3200,2400,true);
  checkStreamConfigurationMapByFormatSize(streamConfigMap,ImageFormat.YUV_420_888,3200,2400,true);
  checkStreamConfigurationMapByFormatSize(streamConfigMap,ImageFormat.YUV_420_888,3264,2448,true);
  checkStreamConfigurationMapByFormatSize(streamConfigMap,ImageFormat.RAW_SENSOR,3280,2464,true);
  final int DURATION_TUPLE_SIZE=4;
  for (int i=0; i < expectedAvailableMinDurations.length; i+=DURATION_TUPLE_SIZE) {
    checkStreamConfigurationMapDurationByFormatSize(streamConfigMap,(int)expectedAvailableMinDurations[i],(int)expectedAvailableMinDurations[i + 1],(int)expectedAvailableMinDurations[i + 2],Duration.MinFrame,expectedAvailableMinDurations[i + 3]);
  }
  for (int i=0; i < expectedAvailableStallDurations.length; i+=DURATION_TUPLE_SIZE) {
    checkStreamConfigurationMapDurationByFormatSize(streamConfigMap,(int)expectedAvailableStallDurations[i],(int)expectedAvailableStallDurations[i + 1],(int)expectedAvailableStallDurations[i + 2],Duration.Stall,expectedAvailableStallDurations[i + 3]);
  }
}
