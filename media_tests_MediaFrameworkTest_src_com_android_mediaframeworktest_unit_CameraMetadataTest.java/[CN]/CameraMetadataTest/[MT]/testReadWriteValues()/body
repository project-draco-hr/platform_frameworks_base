{
  final byte ANDROID_COLOR_CORRECTION_MODE_HIGH_QUALITY=2;
  byte[] valueResult;
  assertEquals(0,mMetadata.getEntryCount());
  assertEquals(true,mMetadata.isEmpty());
  assertEquals(null,mMetadata.readValues(ANDROID_COLOR_CORRECTION_MODE));
  mMetadata.writeValues(ANDROID_COLOR_CORRECTION_MODE,null);
  assertEquals(null,mMetadata.readValues(ANDROID_COLOR_CORRECTION_MODE));
  mMetadata.writeValues(ANDROID_COLOR_CORRECTION_MODE,new byte[]{});
  valueResult=mMetadata.readValues(ANDROID_COLOR_CORRECTION_MODE);
  assertNotNull(valueResult);
  assertEquals(0,valueResult.length);
  assertEquals(1,mMetadata.getEntryCount());
  assertEquals(false,mMetadata.isEmpty());
  mMetadata.writeValues(ANDROID_COLOR_CORRECTION_MODE,new byte[]{ANDROID_COLOR_CORRECTION_MODE_HIGH_QUALITY});
  valueResult=mMetadata.readValues(ANDROID_COLOR_CORRECTION_MODE);
  assertNotNull(valueResult);
  assertEquals(1,valueResult.length);
  assertEquals(ANDROID_COLOR_CORRECTION_MODE_HIGH_QUALITY,valueResult[0]);
  assertEquals(1,mMetadata.getEntryCount());
  assertEquals(false,mMetadata.isEmpty());
  final float[] transformMatrix=new float[]{1,2,3,4,5,6,7,8,9};
  byte[] transformMatrixAsByteArray=new byte[transformMatrix.length * 4];
  ByteBuffer transformMatrixByteBuffer=ByteBuffer.wrap(transformMatrixAsByteArray).order(ByteOrder.nativeOrder());
  for (  float f : transformMatrix)   transformMatrixByteBuffer.putFloat(f);
  assertNull(mMetadata.readValues(ANDROID_COLOR_CORRECTION_TRANSFORM));
  mMetadata.writeValues(ANDROID_COLOR_CORRECTION_TRANSFORM,transformMatrixAsByteArray);
  assertArrayEquals(transformMatrixAsByteArray,mMetadata.readValues(ANDROID_COLOR_CORRECTION_TRANSFORM));
  assertEquals(2,mMetadata.getEntryCount());
  assertEquals(false,mMetadata.isEmpty());
  mMetadata.writeValues(ANDROID_COLOR_CORRECTION_TRANSFORM,null);
  assertNull(mMetadata.readValues(ANDROID_COLOR_CORRECTION_TRANSFORM));
  assertEquals(1,mMetadata.getEntryCount());
}
