{
  Class<?> type=expectedWriteValues.getClass();
  if (!type.isArray()) {
    throw new IllegalArgumentException("This function expects an key with array type");
  }
 else   if (type != int[].class && type != long[].class) {
    throw new IllegalArgumentException("This function expects long or int array values");
  }
  mMetadata.set(key,expectedWriteValues);
  byte[] readOutValues=mMetadata.readValues(tag);
  ByteBuffer bf=ByteBuffer.wrap(readOutValues).order(ByteOrder.nativeOrder());
  int readValuesLength=Array.getLength(expectedReadValues);
  int readValuesNumBytes=readValuesLength * 4;
  if (type == long[].class) {
    readValuesNumBytes=readValuesLength * 8;
  }
  assertEquals(readValuesNumBytes,readOutValues.length);
  for (int i=0; i < readValuesLength; ++i) {
    if (type == int[].class) {
      assertEquals(Array.getInt(expectedReadValues,i),bf.getInt());
    }
 else     if (type == long[].class) {
      assertEquals(Array.getLong(expectedReadValues,i),bf.getLong());
    }
  }
  byte[] readOutValuesAsByteArray=new byte[readValuesNumBytes];
  ByteBuffer readOutValuesByteBuffer=ByteBuffer.wrap(readOutValuesAsByteArray).order(ByteOrder.nativeOrder());
  for (int i=0; i < readValuesLength; ++i) {
    if (type == int[].class) {
      readOutValuesByteBuffer.putInt(Array.getInt(expectedReadValues,i));
    }
 else     if (type == long[].class) {
      readOutValuesByteBuffer.putLong(Array.getLong(expectedReadValues,i));
    }
  }
  mMetadata.writeValues(tag,readOutValuesAsByteArray);
  T result=mMetadata.get(key);
  assertNotNull(key.getName() + " result shouldn't be null",result);
  assertArrayEquals(expectedWriteValues,result);
}
