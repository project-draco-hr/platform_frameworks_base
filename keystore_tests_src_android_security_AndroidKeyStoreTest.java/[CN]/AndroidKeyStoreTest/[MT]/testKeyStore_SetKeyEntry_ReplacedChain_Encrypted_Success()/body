{
  setupPassword();
  mKeyStore.load(null,null);
{
    final String privateKeyAlias=Credentials.USER_PRIVATE_KEY + TEST_ALIAS_1;
    assertTrue(mAndroidKeyStore.generate(privateKeyAlias,KeyStore.UID_SELF,KeyStore.FLAG_ENCRYPTED));
    Key key=mKeyStore.getKey(TEST_ALIAS_1,null);
    assertTrue(key instanceof PrivateKey);
    PrivateKey expectedKey=(PrivateKey)key;
    X509Certificate expectedCert=generateCertificate(mAndroidKeyStore,TEST_ALIAS_1,TEST_SERIAL_1,TEST_DN_1,NOW,NOW_PLUS_10_YEARS);
    assertTrue(mAndroidKeyStore.put(Credentials.USER_CERTIFICATE + TEST_ALIAS_1,expectedCert.getEncoded(),KeyStore.UID_SELF,KeyStore.FLAG_ENCRYPTED));
    Entry entry=mKeyStore.getEntry(TEST_ALIAS_1,null);
    assertTrue(entry instanceof PrivateKeyEntry);
    PrivateKeyEntry keyEntry=(PrivateKeyEntry)entry;
    assertPrivateKeyEntryEquals(keyEntry,expectedKey,expectedCert,null);
  }
{
    Key key=mKeyStore.getKey(TEST_ALIAS_1,null);
    assertTrue(key instanceof PrivateKey);
    PrivateKey expectedKey=(PrivateKey)key;
    X509Certificate expectedCert=generateCertificate(mAndroidKeyStore,TEST_ALIAS_1,TEST_SERIAL_2,TEST_DN_2,NOW,NOW_PLUS_10_YEARS);
    mKeyStore.setKeyEntry(TEST_ALIAS_1,expectedKey,null,new Certificate[]{expectedCert});
    Entry entry=mKeyStore.getEntry(TEST_ALIAS_1,null);
    assertTrue(entry instanceof PrivateKeyEntry);
    PrivateKeyEntry keyEntry=(PrivateKeyEntry)entry;
    assertPrivateKeyEntryEquals(keyEntry,expectedKey,expectedCert,null);
  }
}
