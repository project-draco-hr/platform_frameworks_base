{
  setupPassword();
  mKeyStore.load(null,null);
  assertTrue(mAndroidKeyStore.put(Credentials.CA_CERTIFICATE + TEST_ALIAS_1,FAKE_RSA_CA_1,KeyStore.UID_SELF,KeyStore.FLAG_ENCRYPTED));
  assertEquals("The keystore size should match expected",1,mKeyStore.size());
  assertAliases(new String[]{TEST_ALIAS_1});
  assertTrue(mAndroidKeyStore.put(Credentials.CA_CERTIFICATE + TEST_ALIAS_2,FAKE_RSA_CA_1,KeyStore.UID_SELF,KeyStore.FLAG_ENCRYPTED));
  assertEquals("The keystore size should match expected",2,mKeyStore.size());
  assertAliases(new String[]{TEST_ALIAS_1,TEST_ALIAS_2});
  assertTrue(mAndroidKeyStore.generate(Credentials.USER_PRIVATE_KEY + TEST_ALIAS_3,KeyStore.UID_SELF,NativeCrypto.EVP_PKEY_RSA,1024,KeyStore.FLAG_ENCRYPTED,null));
  assertEquals("The keystore size should match expected",3,mKeyStore.size());
  assertAliases(new String[]{TEST_ALIAS_1,TEST_ALIAS_2,TEST_ALIAS_3});
  assertTrue(mAndroidKeyStore.delete(Credentials.CA_CERTIFICATE + TEST_ALIAS_1));
  assertEquals("The keystore size should match expected",2,mKeyStore.size());
  assertAliases(new String[]{TEST_ALIAS_2,TEST_ALIAS_3});
  assertTrue(mAndroidKeyStore.delete(Credentials.USER_PRIVATE_KEY + TEST_ALIAS_3));
  assertEquals("The keystore size should match expected",1,mKeyStore.size());
  assertAliases(new String[]{TEST_ALIAS_2});
}
