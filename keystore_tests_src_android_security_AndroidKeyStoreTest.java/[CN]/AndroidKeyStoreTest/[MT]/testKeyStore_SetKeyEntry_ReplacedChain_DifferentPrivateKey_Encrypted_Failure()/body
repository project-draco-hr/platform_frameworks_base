{
  setupPassword();
  mKeyStore.load(null,null);
{
    final String privateKeyAlias=Credentials.USER_PRIVATE_KEY + TEST_ALIAS_1;
    assertTrue(mAndroidKeyStore.generate(privateKeyAlias,KeyStore.UID_SELF,KeyStore.FLAG_ENCRYPTED));
    X509Certificate cert=generateCertificate(mAndroidKeyStore,TEST_ALIAS_1,TEST_SERIAL_1,TEST_DN_1,NOW,NOW_PLUS_10_YEARS);
    assertTrue(mAndroidKeyStore.put(Credentials.USER_CERTIFICATE + TEST_ALIAS_1,cert.getEncoded(),KeyStore.UID_SELF,KeyStore.FLAG_ENCRYPTED));
  }
{
    final String privateKeyAlias=Credentials.USER_PRIVATE_KEY + TEST_ALIAS_2;
    assertTrue(mAndroidKeyStore.generate(privateKeyAlias,KeyStore.UID_SELF,KeyStore.FLAG_ENCRYPTED));
    X509Certificate cert=generateCertificate(mAndroidKeyStore,TEST_ALIAS_2,TEST_SERIAL_2,TEST_DN_2,NOW,NOW_PLUS_10_YEARS);
    assertTrue(mAndroidKeyStore.put(Credentials.USER_CERTIFICATE + TEST_ALIAS_2,cert.getEncoded(),KeyStore.UID_SELF,KeyStore.FLAG_ENCRYPTED));
  }
{
    Key key1=mKeyStore.getKey(TEST_ALIAS_2,null);
    X509Certificate cert=generateCertificate(mAndroidKeyStore,TEST_ALIAS_2,TEST_SERIAL_2,TEST_DN_2,NOW,NOW_PLUS_10_YEARS);
    try {
      mKeyStore.setKeyEntry(TEST_ALIAS_1,key1,null,new Certificate[]{cert});
      fail("Should not allow setting of KeyEntry with wrong PrivaetKey");
    }
 catch (    KeyStoreException success) {
    }
  }
}
