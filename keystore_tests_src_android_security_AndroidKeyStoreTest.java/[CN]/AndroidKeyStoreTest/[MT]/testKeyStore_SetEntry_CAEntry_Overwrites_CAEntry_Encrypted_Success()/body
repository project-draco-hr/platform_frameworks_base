{
  setupPassword();
  mKeyStore.load(null,null);
  final CertificateFactory f=CertificateFactory.getInstance("X.509");
{
    final Certificate caCert=f.generateCertificate(new ByteArrayInputStream(FAKE_RSA_CA_1));
    TrustedCertificateEntry expectedCertEntry=new TrustedCertificateEntry(caCert);
    mKeyStore.setEntry(TEST_ALIAS_1,expectedCertEntry,null);
    Entry actualEntry=mKeyStore.getEntry(TEST_ALIAS_1,null);
    assertNotNull("Retrieved entry should exist",actualEntry);
    assertTrue("Retrieved entry should be of type TrustedCertificateEntry",actualEntry instanceof TrustedCertificateEntry);
    TrustedCertificateEntry actualCertEntry=(TrustedCertificateEntry)actualEntry;
    assertEquals("Stored and retrieved certificates should be the same",expectedCertEntry.getTrustedCertificate(),actualCertEntry.getTrustedCertificate());
  }
{
    final Certificate userCert=f.generateCertificate(new ByteArrayInputStream(FAKE_RSA_USER_1));
    TrustedCertificateEntry expectedUserEntry=new TrustedCertificateEntry(userCert);
    mKeyStore.setEntry(TEST_ALIAS_1,expectedUserEntry,null);
    Entry actualEntry=mKeyStore.getEntry(TEST_ALIAS_1,null);
    assertNotNull("Retrieved entry should exist",actualEntry);
    assertTrue("Retrieved entry should be of type TrustedCertificateEntry",actualEntry instanceof TrustedCertificateEntry);
    TrustedCertificateEntry actualUserEntry=(TrustedCertificateEntry)actualEntry;
    assertEquals("Stored and retrieved certificates should be the same",expectedUserEntry.getTrustedCertificate(),actualUserEntry.getTrustedCertificate());
  }
}
