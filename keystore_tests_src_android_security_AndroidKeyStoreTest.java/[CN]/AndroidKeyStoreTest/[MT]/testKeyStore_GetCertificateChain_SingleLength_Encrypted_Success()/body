{
  setupPassword();
  mKeyStore.load(null,null);
  assertTrue(mAndroidKeyStore.importKey(Credentials.USER_PRIVATE_KEY + TEST_ALIAS_1,FAKE_KEY_1,KeyStore.UID_SELF,KeyStore.FLAG_ENCRYPTED));
  assertTrue(mAndroidKeyStore.put(Credentials.USER_CERTIFICATE + TEST_ALIAS_1,FAKE_USER_1,KeyStore.UID_SELF,KeyStore.FLAG_ENCRYPTED));
  assertTrue(mAndroidKeyStore.put(Credentials.CA_CERTIFICATE + TEST_ALIAS_1,FAKE_CA_1,KeyStore.UID_SELF,KeyStore.FLAG_ENCRYPTED));
  CertificateFactory cf=CertificateFactory.getInstance("X.509");
  Certificate[] expected=new Certificate[2];
  expected[0]=cf.generateCertificate(new ByteArrayInputStream(FAKE_USER_1));
  expected[1]=cf.generateCertificate(new ByteArrayInputStream(FAKE_CA_1));
  Certificate[] actual=mKeyStore.getCertificateChain(TEST_ALIAS_1);
  assertNotNull("Returned certificate chain should not be null",actual);
  assertEquals("Returned certificate chain should be correct size",expected.length,actual.length);
  assertEquals("First certificate should be user certificate",expected[0],actual[0]);
  assertEquals("Second certificate should be CA certificate",expected[1],actual[1]);
  assertNull("Stored certificate alias should not be found",mKeyStore.getCertificateChain(TEST_ALIAS_2));
}
