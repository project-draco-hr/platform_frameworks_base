{
  mKeyStore.load(null,null);
  final CertificateFactory f=CertificateFactory.getInstance("X.509");
  final Certificate caCert=f.generateCertificate(new ByteArrayInputStream(FAKE_CA_1));
{
    KeyFactory keyFact=KeyFactory.getInstance("RSA");
    PrivateKey privKey=keyFact.generatePrivate(new PKCS8EncodedKeySpec(FAKE_KEY_1));
    final Certificate[] chain=new Certificate[2];
    chain[0]=f.generateCertificate(new ByteArrayInputStream(FAKE_USER_1));
    chain[1]=caCert;
    mKeyStore.setKeyEntry(TEST_ALIAS_1,privKey,null,chain);
    Entry actualEntry=mKeyStore.getEntry(TEST_ALIAS_1,null);
    assertNotNull("Retrieved entry should exist",actualEntry);
    assertTrue("Retrieved entry should be of type PrivateKeyEntry",actualEntry instanceof PrivateKeyEntry);
    PrivateKeyEntry actual=(PrivateKeyEntry)actualEntry;
    assertPrivateKeyEntryEquals(actual,FAKE_KEY_1,FAKE_USER_1,FAKE_CA_1);
  }
{
    KeyFactory keyFact=KeyFactory.getInstance("RSA");
    PrivateKey privKey=keyFact.generatePrivate(new PKCS8EncodedKeySpec(FAKE_KEY_1));
    final Certificate[] chain=new Certificate[2];
    chain[0]=f.generateCertificate(new ByteArrayInputStream(FAKE_USER_1));
    chain[1]=caCert;
    mKeyStore.setKeyEntry(TEST_ALIAS_1,privKey,null,chain);
    Entry actualEntry=mKeyStore.getEntry(TEST_ALIAS_1,null);
    assertNotNull("Retrieved entry should exist",actualEntry);
    assertTrue("Retrieved entry should be of type PrivateKeyEntry",actualEntry instanceof PrivateKeyEntry);
    PrivateKeyEntry actual=(PrivateKeyEntry)actualEntry;
    assertPrivateKeyEntryEquals(actual,FAKE_KEY_1,FAKE_USER_1,FAKE_CA_1);
  }
}
