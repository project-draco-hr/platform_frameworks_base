{
  final String privateKeyAlias=Credentials.USER_PRIVATE_KEY + alias;
  final PrivateKey privKey;
  final OpenSSLEngine engine=OpenSSLEngine.getInstance("keystore");
  try {
    privKey=engine.getPrivateKeyById(privateKeyAlias);
  }
 catch (  InvalidKeyException e) {
    throw new RuntimeException("Can't get key",e);
  }
  final byte[] pubKeyBytes=keyStore.getPubkey(privateKeyAlias);
  final PublicKey pubKey;
  try {
    final KeyFactory keyFact=KeyFactory.getInstance("RSA");
    pubKey=keyFact.generatePublic(new X509EncodedKeySpec(pubKeyBytes));
  }
 catch (  NoSuchAlgorithmException e) {
    throw new IllegalStateException("Can't instantiate RSA key generator",e);
  }
catch (  InvalidKeySpecException e) {
    throw new IllegalStateException("keystore returned invalid key encoding",e);
  }
  final X509V3CertificateGenerator certGen=new X509V3CertificateGenerator();
  certGen.setPublicKey(pubKey);
  certGen.setSerialNumber(serialNumber);
  certGen.setSubjectDN(subjectDN);
  certGen.setIssuerDN(subjectDN);
  certGen.setNotBefore(notBefore);
  certGen.setNotAfter(notAfter);
  certGen.setSignatureAlgorithm("sha1WithRSA");
  final X509Certificate cert=certGen.generate(privKey);
  return cert;
}
