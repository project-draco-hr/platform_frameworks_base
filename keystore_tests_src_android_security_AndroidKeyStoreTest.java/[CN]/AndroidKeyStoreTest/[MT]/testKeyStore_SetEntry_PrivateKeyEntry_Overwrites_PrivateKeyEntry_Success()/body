{
  mKeyStore.load(null,null);
  final KeyFactory keyFact=KeyFactory.getInstance("RSA");
  final CertificateFactory f=CertificateFactory.getInstance("X.509");
{
    PrivateKey expectedKey=keyFact.generatePrivate(new PKCS8EncodedKeySpec(FAKE_KEY_1));
    final Certificate[] expectedChain=new Certificate[2];
    expectedChain[0]=f.generateCertificate(new ByteArrayInputStream(FAKE_USER_1));
    expectedChain[1]=f.generateCertificate(new ByteArrayInputStream(FAKE_CA_1));
    PrivateKeyEntry expected=new PrivateKeyEntry(expectedKey,expectedChain);
    mKeyStore.setEntry(TEST_ALIAS_1,expected,null);
    Entry actualEntry=mKeyStore.getEntry(TEST_ALIAS_1,null);
    assertNotNull("Retrieved entry should exist",actualEntry);
    assertTrue("Retrieved entry should be of type PrivateKeyEntry",actualEntry instanceof PrivateKeyEntry);
    PrivateKeyEntry actual=(PrivateKeyEntry)actualEntry;
    assertPrivateKeyEntryEquals(actual,FAKE_KEY_1,FAKE_USER_1,FAKE_CA_1);
  }
{
    PrivateKey expectedKey=keyFact.generatePrivate(new PKCS8EncodedKeySpec(FAKE_KEY_1));
    final Certificate[] expectedChain=new Certificate[2];
    expectedChain[0]=f.generateCertificate(new ByteArrayInputStream(FAKE_USER_1));
    expectedChain[1]=f.generateCertificate(new ByteArrayInputStream(FAKE_CA_1));
    PrivateKeyEntry expected=new PrivateKeyEntry(expectedKey,expectedChain);
    mKeyStore.setEntry(TEST_ALIAS_1,expected,null);
    Entry actualEntry=mKeyStore.getEntry(TEST_ALIAS_1,null);
    assertNotNull("Retrieved entry should exist",actualEntry);
    assertTrue("Retrieved entry should be of type PrivateKeyEntry",actualEntry instanceof PrivateKeyEntry);
    PrivateKeyEntry actual=(PrivateKeyEntry)actualEntry;
    assertPrivateKeyEntryEquals(actual,FAKE_KEY_1,FAKE_USER_1,FAKE_CA_1);
  }
}
