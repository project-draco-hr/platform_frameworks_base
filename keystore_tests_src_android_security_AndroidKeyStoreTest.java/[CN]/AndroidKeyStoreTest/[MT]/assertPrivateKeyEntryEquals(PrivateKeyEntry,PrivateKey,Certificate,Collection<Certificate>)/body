{
  if (expectedKey instanceof DSAPrivateKey) {
    assertEquals("Returned PrivateKey should be what we inserted",((DSAPrivateKey)expectedKey).getParams(),((DSAPublicKey)keyEntry.getCertificate().getPublicKey()).getParams());
  }
 else   if (expectedKey instanceof ECPrivateKey) {
    assertEquals("Returned PrivateKey should be what we inserted",((ECPrivateKey)expectedKey).getParams().getCurve(),((ECPublicKey)keyEntry.getCertificate().getPublicKey()).getParams().getCurve());
  }
 else   if (expectedKey instanceof RSAPrivateKey) {
    assertEquals("Returned PrivateKey should be what we inserted",((RSAPrivateKey)expectedKey).getModulus(),((RSAPrivateKey)keyEntry.getPrivateKey()).getModulus());
  }
  assertEquals("Returned Certificate should be what we inserted",expectedCert,keyEntry.getCertificate());
  Certificate[] actualChain=keyEntry.getCertificateChain();
  assertEquals("First certificate in chain should be user cert",expectedCert,actualChain[0]);
  if (expectedChain == null) {
    assertEquals("Certificate chain should not include CAs",1,actualChain.length);
  }
 else {
    int i=1;
    final Iterator<Certificate> it=expectedChain.iterator();
    while (it.hasNext()) {
      assertEquals("CA chain certificate should equal what we put in",it.next(),actualChain[i++]);
    }
  }
}
