{
  mKeyStore.load(null,null);
  assertTrue(mAndroidKeyStore.importKey(Credentials.USER_PRIVATE_KEY + TEST_ALIAS_1,FAKE_RSA_KEY_1,KeyStore.UID_SELF,KeyStore.FLAG_NONE));
  assertTrue(mAndroidKeyStore.put(Credentials.USER_CERTIFICATE + TEST_ALIAS_1,FAKE_RSA_USER_1,KeyStore.UID_SELF,KeyStore.FLAG_NONE));
  assertTrue(mAndroidKeyStore.put(Credentials.CA_CERTIFICATE + TEST_ALIAS_1,FAKE_RSA_CA_1,KeyStore.UID_SELF,KeyStore.FLAG_NONE));
  Key key=mKeyStore.getKey(TEST_ALIAS_1,null);
  assertNotNull("Key should exist",key);
  assertTrue("Should be a RSAPrivateKey",key instanceof RSAPrivateKey);
  RSAPrivateKey actualKey=(RSAPrivateKey)key;
  KeyFactory keyFact=KeyFactory.getInstance("RSA");
  PrivateKey expectedKey=keyFact.generatePrivate(new PKCS8EncodedKeySpec(FAKE_RSA_KEY_1));
  assertEquals("Inserted key should be same as retrieved key",((RSAPrivateKey)expectedKey).getModulus(),actualKey.getModulus());
}
