{
synchronized (mLock) {
    if (DEBUG) {
      Log.i(LOG_TAG,"add(" + info + ")");
    }
    final int windowId=info.getWindowId();
    LongSparseArray<AccessibilityNodeInfo> nodes=mNodeCache.get(windowId);
    if (nodes == null) {
      nodes=new LongSparseArray<AccessibilityNodeInfo>();
      mNodeCache.put(windowId,nodes);
    }
    final long sourceId=info.getSourceNodeId();
    AccessibilityNodeInfo oldInfo=nodes.get(sourceId);
    if (oldInfo != null) {
      final LongArray newChildrenIds=info.getChildNodeIds();
      if (newChildrenIds != null) {
        LongArray newChildNodeIds=mTempLongArray;
        final int newChildCount=newChildNodeIds.size();
        for (int i=0; i < newChildCount; i++) {
          newChildNodeIds.add(newChildrenIds.get(i));
        }
        final int oldChildCount=oldInfo.getChildCount();
        for (int i=0; i < oldChildCount; i++) {
          final long oldChildId=oldInfo.getChildId(i);
          if (newChildNodeIds.indexOf(oldChildId) < 0) {
            clearSubTreeLocked(windowId,oldChildId);
          }
        }
        newChildNodeIds.clear();
      }
      final long oldParentId=oldInfo.getParentNodeId();
      if (info.getParentNodeId() != oldParentId) {
        clearSubTreeLocked(windowId,oldParentId);
      }
    }
    AccessibilityNodeInfo clone=AccessibilityNodeInfo.obtain(info);
    nodes.put(sourceId,clone);
  }
}
