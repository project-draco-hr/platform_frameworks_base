{
  BufferedReader br=null;
  try {
    br=new BufferedReader(new FileReader(trackFile),8192);
    String s;
    long lastTime=-Long.MAX_VALUE;
    while ((s=br.readLine()) != null) {
      String[] tokens=s.split("\\s+");
      if (tokens.length != 4 && tokens.length != 6) {
        Log.e(LOG_TAG,"Got track \"" + s + "\", wanted <time> <long> <lat> <alt> [<bearing> <speed>]");
        continue;
      }
      long time;
      double longitude, latitude, altitude;
      try {
        time=Long.parseLong(tokens[0]);
        longitude=Double.parseDouble(tokens[1]);
        latitude=Double.parseDouble(tokens[2]);
        altitude=Double.parseDouble(tokens[3]);
      }
 catch (      NumberFormatException e) {
        Log.e(LOG_TAG,"Got track \"" + s + "\", wanted <time> <long> <lat> <alt> "+ "[<bearing> <speed>]",e);
        continue;
      }
      Waypoint w=new Waypoint(getName(),time,latitude,longitude,altitude);
      if (tokens.length >= 6) {
        float bearing, speed;
        try {
          bearing=Float.parseFloat(tokens[4]);
          speed=Float.parseFloat(tokens[5]);
          w.setBearing(bearing);
          w.setSpeed(speed);
        }
 catch (        NumberFormatException e) {
          Log.e(LOG_TAG,"Ignoring bearing and speed \"" + tokens[4] + "\", \""+ tokens[5]+ "\"",e);
        }
      }
      if (mInitialLocation == null) {
        mInitialLocation=w.getLocation();
      }
      if (time < 0) {
        Log.e(LOG_TAG,"Ignoring waypoint at negative time=" + time);
        continue;
      }
      if (time <= lastTime) {
        Log.e(LOG_TAG,"Ignoring waypoint at time=" + time + " (< "+ lastTime+ ")");
        continue;
      }
      mWaypoints.add(w);
      lastTime=time;
    }
    setTimes();
    return;
  }
 catch (  IOException e) {
    Log.e(LOG_TAG,"Exception reading track file",e);
    mWaypoints.clear();
  }
 finally {
    close(br);
  }
}
