{
  WifiConfiguration wfg=new WifiConfiguration();
  if (mBssid != null) {
    Log.d(TAG,"create bssid:" + mBssid);
    wfg.BSSID=mBssid;
  }
  if (mSsid != null) {
    Log.d(TAG,"create ssid:" + mSsid);
    wfg.SSID=mSsid;
  }
  wfg.status=WifiConfiguration.Status.ENABLED;
  wfg.allowedKeyManagement.clear();
  wfg.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.WPA_EAP);
  wfg.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.IEEE8021X);
  wfg.allowedGroupCiphers.clear();
  wfg.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.CCMP);
  wfg.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.TKIP);
  wfg.allowedProtocols.clear();
  wfg.allowedProtocols.set(WifiConfiguration.Protocol.RSN);
  wfg.allowedProtocols.set(WifiConfiguration.Protocol.WPA);
  Class[] enterpriseFieldArray=WifiConfiguration.class.getClasses();
  Class<?> enterpriseFieldClass=null;
  for (  Class<?> myClass : enterpriseFieldArray) {
    if (myClass.getName().equals(INT_ENTERPRISEFIELD_NAME)) {
      enterpriseFieldClass=myClass;
      break;
    }
  }
  Log.d(TAG,"class chosen " + enterpriseFieldClass.getName());
  Field anonymousId=null, caCert=null, clientCert=null, eap=null, identity=null, password=null, phase2=null, privateKey=null;
  Field[] fields=WifiConfiguration.class.getFields();
  for (  Field tempField : fields) {
    if (tempField.getName().trim().equals(INT_ANONYMOUS_IDENTITY)) {
      anonymousId=tempField;
      Log.d(TAG,"field " + anonymousId.getName());
    }
 else     if (tempField.getName().trim().equals(INT_CA_CERT)) {
      caCert=tempField;
    }
 else     if (tempField.getName().trim().equals(INT_CLIENT_CERT)) {
      clientCert=tempField;
      Log.d(TAG,"field " + clientCert.getName());
    }
 else     if (tempField.getName().trim().equals(INT_EAP)) {
      eap=tempField;
      Log.d(TAG,"field " + eap.getName());
    }
 else     if (tempField.getName().trim().equals(INT_IDENTITY)) {
      identity=tempField;
      Log.d(TAG,"field " + identity.getName());
    }
 else     if (tempField.getName().trim().equals(INT_PASSWORD)) {
      password=tempField;
      Log.d(TAG,"field " + password.getName());
    }
 else     if (tempField.getName().trim().equals(INT_PHASE2)) {
      phase2=tempField;
      Log.d(TAG,"field " + phase2.getName());
    }
 else     if (tempField.getName().trim().equals(INT_PRIVATE_KEY)) {
      privateKey=tempField;
    }
  }
  Method setValue=null;
  for (  Method m : enterpriseFieldClass.getMethods()) {
    if (m.getName().trim().equals("setValue")) {
      Log.d(TAG,"method " + m.getName());
      setValue=m;
      break;
    }
  }
  try {
    String eapmethod=mCredential.getType();
    Log.d(TAG,"eapmethod:" + eapmethod);
    setValue.invoke(eap.get(wfg),eapmethod);
    if ("TTLS".equals(eapmethod)) {
      setValue.invoke(phase2.get(wfg),ENTERPRISE_PHASE2_MSCHAPV2);
      setValue.invoke(identity.get(wfg),mCredential.getUserName());
      setValue.invoke(password.get(wfg),mCredential.getPassword());
      setValue.invoke(anonymousId.get(wfg),"anonymous@" + mCredential.getRealm());
    }
    String cacertificate=null;
    String rootCA=mCredential.getCaRootCertPath();
    if (rootCA == null) {
      cacertificate=null;
    }
 else {
      cacertificate="keystore://" + Credentials.WIFI + "HS20"+ Credentials.CA_CERTIFICATE+ rootCA;
    }
    Log.d(TAG,"cacertificate:" + cacertificate);
    setValue.invoke(caCert.get(wfg),cacertificate);
    if ("TLS".equals(eapmethod)) {
      String usercertificate=null;
      String privatekey=null;
      String clientCertPath=mCredential.getClientCertPath();
      if (clientCertPath != null) {
        privatekey="keystore://" + Credentials.WIFI + "HS20"+ Credentials.USER_PRIVATE_KEY+ clientCertPath;
        usercertificate="keystore://" + Credentials.WIFI + "HS20"+ Credentials.USER_CERTIFICATE+ clientCertPath;
      }
      Log.d(TAG,"privatekey:" + privatekey);
      Log.d(TAG,"usercertificate:" + usercertificate);
      if (privatekey != null && usercertificate != null) {
        setValue.invoke(privateKey.get(wfg),privatekey);
        setValue.invoke(clientCert.get(wfg),usercertificate);
      }
    }
  }
 catch (  Exception e) {
    Log.d(TAG,"createWifiConfiguration err:" + e);
  }
  return wfg;
}
