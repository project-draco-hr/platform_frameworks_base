{
  List<String> antiBandingModes=p.getSupportedAntibanding();
  if (antiBandingModes != null && antiBandingModes.size() > 0) {
    int[] modes=new int[antiBandingModes.size()];
    int j=0;
    for (    String mode : antiBandingModes) {
      int convertedMode=convertAntiBandingMode(mode);
      if (DEBUG && convertedMode == -1) {
        Log.v(TAG,"Antibanding mode " + ((mode == null) ? "NULL" : mode) + " not supported, skipping...");
      }
 else {
        modes[j++]=convertedMode;
      }
    }
    m.set(CONTROL_AE_AVAILABLE_ANTIBANDING_MODES,Arrays.copyOf(modes,j));
  }
 else {
    m.set(CONTROL_AE_AVAILABLE_ANTIBANDING_MODES,new int[0]);
  }
{
    List<int[]> fpsRanges=p.getSupportedPreviewFpsRange();
    if (fpsRanges == null) {
      throw new AssertionError("Supported FPS ranges cannot be null.");
    }
    int rangesSize=fpsRanges.size();
    if (rangesSize <= 0) {
      throw new AssertionError("At least one FPS range must be supported.");
    }
    Range<Integer>[] ranges=new Range[rangesSize];
    int i=0;
    for (    int[] r : fpsRanges) {
      ranges[i++]=Range.create(r[Camera.Parameters.PREVIEW_FPS_MIN_INDEX],r[Camera.Parameters.PREVIEW_FPS_MAX_INDEX]);
    }
    m.set(CONTROL_AE_AVAILABLE_TARGET_FPS_RANGES,ranges);
  }
{
    List<String> flashModes=p.getSupportedFlashModes();
    String[] flashModeStrings=new String[]{Camera.Parameters.FLASH_MODE_OFF,Camera.Parameters.FLASH_MODE_AUTO,Camera.Parameters.FLASH_MODE_ON,Camera.Parameters.FLASH_MODE_RED_EYE,Camera.Parameters.FLASH_MODE_TORCH};
    int[] flashModeInts=new int[]{CONTROL_AE_MODE_ON,CONTROL_AE_MODE_ON_AUTO_FLASH,CONTROL_AE_MODE_ON_ALWAYS_FLASH,CONTROL_AE_MODE_ON_AUTO_FLASH_REDEYE};
    int[] aeAvail=ArrayUtils.convertStringListToIntArray(flashModes,flashModeStrings,flashModeInts);
    if (aeAvail == null || aeAvail.length == 0) {
      aeAvail=new int[]{CONTROL_AE_MODE_ON};
    }
    m.set(CONTROL_AE_AVAILABLE_MODES,aeAvail);
  }
{
    int min=p.getMinExposureCompensation();
    int max=p.getMaxExposureCompensation();
    m.set(CONTROL_AE_COMPENSATION_RANGE,Range.create(min,max));
  }
{
    float step=p.getExposureCompensationStep();
    m.set(CONTROL_AE_COMPENSATION_STEP,ParamsUtils.createRational(step));
  }
{
    boolean aeLockAvailable=p.isAutoExposureLockSupported();
    m.set(CONTROL_AE_LOCK_AVAILABLE,aeLockAvailable);
  }
}
