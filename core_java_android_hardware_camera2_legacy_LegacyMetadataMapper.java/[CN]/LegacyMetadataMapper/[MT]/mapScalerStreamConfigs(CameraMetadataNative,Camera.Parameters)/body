{
  ArrayList<StreamConfiguration> availableStreamConfigs=new ArrayList<>();
  List<Camera.Size> previewSizes=p.getSupportedPreviewSizes();
  List<Camera.Size> jpegSizes=p.getSupportedPictureSizes();
{
    SizeAreaComparator areaComparator=new SizeAreaComparator();
    Collections.sort(previewSizes,areaComparator);
    Camera.Size maxJpegSize=SizeAreaComparator.findLargestByArea(jpegSizes);
    float jpegAspectRatio=maxJpegSize.width * 1.0f / maxJpegSize.height;
    if (VERBOSE) {
      Log.v(TAG,String.format("mapScalerStreamConfigs - largest JPEG area %dx%d, AR=%f",maxJpegSize.width,maxJpegSize.height,jpegAspectRatio));
    }
    while (!previewSizes.isEmpty()) {
      int index=previewSizes.size() - 1;
      Camera.Size size=previewSizes.get(index);
      float previewAspectRatio=size.width * 1.0f / size.height;
      if (Math.abs(jpegAspectRatio - previewAspectRatio) >= PREVIEW_ASPECT_RATIO_TOLERANCE) {
        previewSizes.remove(index);
        if (VERBOSE) {
          Log.v(TAG,String.format("mapScalerStreamConfigs - removed preview size %dx%d, AR=%f " + "was not the same",size.width,size.height,previewAspectRatio));
        }
      }
 else {
        break;
      }
    }
    if (previewSizes.isEmpty()) {
      Log.w(TAG,"mapScalerStreamConfigs - failed to find any preview size matching " + "JPEG aspect ratio " + jpegAspectRatio);
      previewSizes=p.getSupportedPreviewSizes();
    }
    Collections.sort(previewSizes,Collections.reverseOrder(areaComparator));
  }
  appendStreamConfig(availableStreamConfigs,HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED,previewSizes);
  appendStreamConfig(availableStreamConfigs,ImageFormat.YUV_420_888,previewSizes);
  for (  int format : p.getSupportedPreviewFormats()) {
    if (ImageFormat.isPublicFormat(format)) {
      appendStreamConfig(availableStreamConfigs,format,previewSizes);
    }
 else {
      Log.w(TAG,String.format("mapStreamConfigs - Skipping non-public format %x",format));
    }
  }
  appendStreamConfig(availableStreamConfigs,HAL_PIXEL_FORMAT_BLOB,p.getSupportedPictureSizes());
  m.set(SCALER_AVAILABLE_STREAM_CONFIGURATIONS,availableStreamConfigs.toArray(new StreamConfiguration[0]));
  m.set(SCALER_AVAILABLE_MIN_FRAME_DURATIONS,new StreamConfigurationDuration[0]);
  StreamConfigurationDuration[] jpegStalls=new StreamConfigurationDuration[jpegSizes.size()];
  int i=0;
  long longestStallDuration=-1;
  for (  Camera.Size s : jpegSizes) {
    long stallDuration=calculateJpegStallDuration(s);
    jpegStalls[i++]=new StreamConfigurationDuration(HAL_PIXEL_FORMAT_BLOB,s.width,s.height,stallDuration);
    if (longestStallDuration < stallDuration) {
      longestStallDuration=stallDuration;
    }
  }
  m.set(SCALER_AVAILABLE_STALL_DURATIONS,jpegStalls);
  m.set(SENSOR_INFO_MAX_FRAME_DURATION,longestStallDuration);
}
