{
  if (DBG)   Log.d(TAG,"FileSynthesisRequest.done()");
  FileChannel fileChannel=null;
  int sampleRateInHz=0;
  int audioFormat=0;
  int channelCount=0;
synchronized (mStateLock) {
    if (mDone) {
      Log.w(TAG,"Duplicate call to done()");
      return TextToSpeech.ERROR;
    }
    if (mStatusCode == TextToSpeech.STOPPED) {
      if (DBG)       Log.d(TAG,"Request has been aborted.");
      return errorCodeOnStop();
    }
    if (mDispatcher != null && mStatusCode != TextToSpeech.SUCCESS && mStatusCode != TextToSpeech.STOPPED) {
      mDispatcher.dispatchOnError(mStatusCode);
      return TextToSpeech.ERROR;
    }
    if (mFileChannel == null) {
      Log.e(TAG,"File not open");
      return TextToSpeech.ERROR;
    }
    mDone=true;
    fileChannel=mFileChannel;
    sampleRateInHz=mSampleRateInHz;
    audioFormat=mAudioFormat;
    channelCount=mChannelCount;
  }
  try {
    fileChannel.position(0);
    int dataLength=(int)(fileChannel.size() - WAV_HEADER_LENGTH);
    fileChannel.write(makeWavHeader(sampleRateInHz,audioFormat,channelCount,dataLength));
synchronized (mStateLock) {
      closeFile();
      if (mDispatcher != null) {
        mDispatcher.dispatchOnSuccess();
      }
      return TextToSpeech.SUCCESS;
    }
  }
 catch (  IOException ex) {
    Log.e(TAG,"Failed to write to output file descriptor",ex);
synchronized (mStateLock) {
      cleanUp();
    }
    return TextToSpeech.ERROR;
  }
}
