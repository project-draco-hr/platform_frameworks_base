{
  mWindowManager.getDefaultDisplay().getRealSize(mTempPoint);
  final int screenWidth=mTempPoint.x;
  final int screenHeight=mTempPoint.y;
  Region magnifiedBounds=mMagnifiedBounds;
  magnifiedBounds.set(0,0,0,0);
  Region availableBounds=mTempRegion1;
  availableBounds.set(0,0,screenWidth,screenHeight);
  Region nonMagnifiedBounds=mTempRegion4;
  nonMagnifiedBounds.set(0,0,0,0);
  SparseArray<WindowState> visibleWindows=mTempWindowStates;
  visibleWindows.clear();
  populateWindowsOnScreenLocked(visibleWindows);
  final int visibleWindowCount=visibleWindows.size();
  for (int i=visibleWindowCount - 1; i >= 0; i--) {
    WindowState windowState=visibleWindows.valueAt(i);
    if (windowState.mAttrs.type == WindowManager.LayoutParams.TYPE_MAGNIFICATION_OVERLAY) {
      continue;
    }
    Region windowBounds=mTempRegion2;
    Matrix matrix=mTempMatrix;
    populateTransformationMatrixLocked(windowState,matrix);
    RectF windowFrame=mTempRectF;
    if (mWindowManagerService.mPolicy.canMagnifyWindow(windowState.mAttrs.type)) {
      windowFrame.set(windowState.mFrame);
      windowFrame.offset(-windowFrame.left,-windowFrame.top);
      matrix.mapRect(windowFrame);
      windowBounds.set((int)windowFrame.left,(int)windowFrame.top,(int)windowFrame.right,(int)windowFrame.bottom);
      magnifiedBounds.op(windowBounds,Region.Op.UNION);
      magnifiedBounds.op(availableBounds,Region.Op.INTERSECT);
    }
 else {
      Region touchableRegion=mTempRegion3;
      windowState.getTouchableRegion(touchableRegion);
      Rect touchableFrame=mTempRect1;
      touchableRegion.getBounds(touchableFrame);
      windowFrame.set(touchableFrame);
      windowFrame.offset(-windowState.mFrame.left,-windowState.mFrame.top);
      matrix.mapRect(windowFrame);
      windowBounds.set((int)windowFrame.left,(int)windowFrame.top,(int)windowFrame.right,(int)windowFrame.bottom);
      nonMagnifiedBounds.op(windowBounds,Region.Op.UNION);
      windowBounds.op(magnifiedBounds,Region.Op.DIFFERENCE);
      availableBounds.op(windowBounds,Region.Op.DIFFERENCE);
    }
    Region accountedBounds=mTempRegion2;
    accountedBounds.set(magnifiedBounds);
    accountedBounds.op(nonMagnifiedBounds,Region.Op.UNION);
    accountedBounds.op(0,0,screenWidth,screenHeight,Region.Op.INTERSECT);
    if (accountedBounds.isRect()) {
      Rect accountedFrame=mTempRect1;
      accountedBounds.getBounds(accountedFrame);
      if (accountedFrame.width() == screenWidth && accountedFrame.height() == screenHeight) {
        break;
      }
    }
  }
  visibleWindows.clear();
  magnifiedBounds.op(mHalfBorderWidth,mHalfBorderWidth,screenWidth - mHalfBorderWidth,screenHeight - mHalfBorderWidth,Region.Op.INTERSECT);
  if (!mOldMagnifiedBounds.equals(magnifiedBounds)) {
    Region bounds=Region.obtain();
    bounds.set(magnifiedBounds);
    mHandler.obtainMessage(MyHandler.MESSAGE_NOTIFY_MAGNIFIED_BOUNDS_CHANGED,bounds).sendToTarget();
    mWindow.setBounds(magnifiedBounds);
    Rect dirtyRect=mTempRect1;
    if (mFullRedrawNeeded) {
      mFullRedrawNeeded=false;
      dirtyRect.set(mHalfBorderWidth,mHalfBorderWidth,screenWidth - mHalfBorderWidth,screenHeight - mHalfBorderWidth);
      mWindow.invalidate(dirtyRect);
    }
 else {
      Region dirtyRegion=mTempRegion3;
      dirtyRegion.set(magnifiedBounds);
      dirtyRegion.op(mOldMagnifiedBounds,Region.Op.UNION);
      dirtyRegion.op(nonMagnifiedBounds,Region.Op.INTERSECT);
      dirtyRegion.getBounds(dirtyRect);
      mWindow.invalidate(dirtyRect);
    }
    mOldMagnifiedBounds.set(magnifiedBounds);
  }
}
