{
  if (DEBUG) {
    Slog.i(LOG_TAG,"computeChangedWindows()");
  }
synchronized (mWindowManagerService.mWindowMap) {
    WindowManager windowManager=(WindowManager)mContext.getSystemService(Context.WINDOW_SERVICE);
    windowManager.getDefaultDisplay().getRealSize(mTempPoint);
    final int screenWidth=mTempPoint.x;
    final int screenHeight=mTempPoint.y;
    Region unaccountedSpace=mTempRegion;
    unaccountedSpace.set(0,0,screenWidth,screenHeight);
    SparseArray<WindowState> visibleWindows=mTempWindowStates;
    populateVisibleWindowsOnScreenLocked(visibleWindows);
    List<WindowInfo> windows=new ArrayList<WindowInfo>();
    Set<IBinder> addedWindows=mTempBinderSet;
    addedWindows.clear();
    final int visibleWindowCount=visibleWindows.size();
    for (int i=visibleWindowCount - 1; i >= 0; i--) {
      WindowState windowState=visibleWindows.valueAt(i);
      Region touchableRegion=mTempRegion1;
      windowState.getTouchableRegion(touchableRegion);
      Rect touchableFrame=mTempRect;
      touchableRegion.getBounds(touchableFrame);
      RectF windowFrame=mTempRectF;
      windowFrame.set(touchableFrame);
      windowFrame.offset(-windowState.mFrame.left,-windowState.mFrame.top);
      Matrix matrix=mTempMatrix;
      populateTransformationMatrixLocked(windowState,matrix);
      matrix.mapRect(windowFrame);
      Rect boundsInScreen=mTempRect;
      boundsInScreen.set((int)windowFrame.left,(int)windowFrame.top,(int)windowFrame.right,(int)windowFrame.bottom);
      final int flags=windowState.mAttrs.flags;
      if ((flags & WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE) == 1) {
        unaccountedSpace.op(boundsInScreen,unaccountedSpace,Region.Op.DIFFERENCE);
        continue;
      }
      if (unaccountedSpace.quickReject(boundsInScreen)) {
        continue;
      }
      if (isReportedWindowType(windowState.mAttrs.type)) {
        WindowInfo window=WindowInfo.obtain();
        window.type=windowState.mAttrs.type;
        window.layer=windowState.mLayer;
        window.token=windowState.mClient.asBinder();
        addedWindows.add(window.token);
        WindowState attachedWindow=windowState.mAttachedWindow;
        if (attachedWindow != null) {
          window.parentToken=attachedWindow.mClient.asBinder();
        }
        window.focused=windowState.isFocused();
        window.boundsInScreen.set(boundsInScreen);
        final int childCount=windowState.mChildWindows.size();
        if (childCount > 0) {
          if (window.childTokens == null) {
            window.childTokens=new ArrayList<IBinder>();
          }
          for (int j=0; j < childCount; j++) {
            WindowState child=windowState.mChildWindows.get(j);
            window.childTokens.add(child.mClient.asBinder());
          }
        }
        windows.add(window);
      }
      unaccountedSpace.op(boundsInScreen,unaccountedSpace,Region.Op.REVERSE_DIFFERENCE);
      if (unaccountedSpace.isEmpty()) {
        break;
      }
      if ((flags & (WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL)) == 0) {
        break;
      }
    }
    final int windowCount=windows.size();
    for (int i=0; i < windowCount; i++) {
      WindowInfo window=windows.get(i);
      if (!addedWindows.contains(window.parentToken)) {
        window.parentToken=null;
      }
      if (window.childTokens != null) {
        final int childTokenCount=window.childTokens.size();
        for (int j=childTokenCount - 1; j >= 0; j--) {
          if (!addedWindows.contains(window.childTokens.get(j))) {
            window.childTokens.remove(j);
          }
        }
      }
    }
    visibleWindows.clear();
    addedWindows.clear();
    boolean windowsChanged=false;
    if (mOldWindows.size() != windows.size()) {
      windowsChanged=true;
    }
 else     if (!mOldWindows.isEmpty() || !windows.isEmpty()) {
      for (int i=0; i < windowCount; i++) {
        WindowInfo oldWindow=mOldWindows.get(i);
        WindowInfo newWindow=windows.get(i);
        if (windowChangedNoLayer(oldWindow,newWindow)) {
          windowsChanged=true;
          break;
        }
      }
    }
    if (windowsChanged) {
      if (DEBUG) {
        Log.i(LOG_TAG,"Windows changed:" + windows);
      }
      cacheWindows(windows);
      mHandler.obtainMessage(MyHandler.MESSAGE_NOTIFY_WINDOWS_CHANGED,windows).sendToTarget();
    }
 else {
      if (DEBUG) {
        Log.i(LOG_TAG,"No windows changed.");
      }
      clearAndRecycleWindows(windows);
    }
  }
}
