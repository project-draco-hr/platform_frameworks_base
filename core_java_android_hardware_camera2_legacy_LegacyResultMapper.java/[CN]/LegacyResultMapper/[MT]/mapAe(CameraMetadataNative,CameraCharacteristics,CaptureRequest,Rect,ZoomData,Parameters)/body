{
{
    int antiBandingMode=LegacyMetadataMapper.convertAntiBandingModeOrDefault(p.getAntibanding());
    m.set(CONTROL_AE_ANTIBANDING_MODE,antiBandingMode);
  }
{
    m.set(CONTROL_AE_EXPOSURE_COMPENSATION,p.getExposureCompensation());
  }
{
    boolean lock=p.isAutoExposureLockSupported() ? p.getAutoExposureLock() : false;
    m.set(CONTROL_AE_LOCK,lock);
    if (VERBOSE) {
      Log.v(TAG,"mapAe - android.control.aeLock = " + lock + ", supported = "+ p.isAutoExposureLockSupported());
    }
    Boolean requestLock=request.get(CaptureRequest.CONTROL_AE_LOCK);
    if (requestLock != null && requestLock != lock) {
      Log.w(TAG,"mapAe - android.control.aeLock was requested to " + requestLock + " but resulted in "+ lock);
    }
  }
  mapAeAndFlashMode(m,characteristics,p);
  if (LegacyMetadataMapper.LIE_ABOUT_AE_STATE) {
    m.set(CONTROL_AE_STATE,CONTROL_AE_STATE_CONVERGED);
  }
{
    if (VERBOSE) {
      String meteringAreas=p.get("metering-areas");
      Log.v(TAG,"mapAe - parameter dump; metering-areas: " + meteringAreas);
    }
    MeteringRectangle[] meteringRectArray=getMeteringRectangles(activeArray,zoomData,p.getMeteringAreas(),"AE");
    m.set(CONTROL_AE_REGIONS,meteringRectArray);
  }
}
