{
  CameraCharacteristics characteristics=legacyRequest.characteristics;
  CaptureRequest request=legacyRequest.captureRequest;
  Size previewSize=legacyRequest.previewSize;
  Camera.Parameters params=legacyRequest.parameters;
  CameraMetadataNative result=new CameraMetadataNative();
  if (LegacyMetadataMapper.LIE_ABOUT_AF) {
    result.set(CaptureResult.CONTROL_AF_MODE,request.get(CaptureRequest.CONTROL_AF_MODE));
  }
  mapAe(result,params);
  result.set(CaptureResult.CONTROL_AWB_LOCK,params.getAutoWhiteBalanceLock());
  if (LegacyMetadataMapper.LIE_ABOUT_AWB) {
    result.set(CaptureResult.CONTROL_AWB_STATE,CameraMetadata.CONTROL_AWB_STATE_CONVERGED);
    result.set(CaptureResult.CONTROL_AWB_MODE,request.get(CaptureRequest.CONTROL_AWB_MODE));
  }
  result.set(CaptureResult.LENS_FOCAL_LENGTH,params.getFocalLength());
  mapScaler(result,characteristics,request,previewSize,params);
  result.set(CaptureResult.SENSOR_TIMESTAMP,timestamp);
  return result;
}
