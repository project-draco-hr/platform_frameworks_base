{
  CameraCharacteristics characteristics=legacyRequest.characteristics;
  CaptureRequest request=legacyRequest.captureRequest;
  Size previewSize=legacyRequest.previewSize;
  Camera.Parameters params=legacyRequest.parameters;
  CameraMetadataNative result=new CameraMetadataNative();
  Rect activeArraySize=characteristics.get(CameraCharacteristics.SENSOR_INFO_ACTIVE_ARRAY_SIZE);
  ZoomData zoomData=ParameterUtils.convertScalerCropRegion(activeArraySize,request.get(CaptureRequest.SCALER_CROP_REGION),previewSize,params);
  mapAe(result,characteristics,request,activeArraySize,zoomData,params);
  mapAf(result,activeArraySize,zoomData,params);
  mapAwb(result,params);
{
    int controlMode=ParamsUtils.getOrDefault(request,CaptureRequest.CONTROL_MODE,CONTROL_MODE_AUTO);
    if (controlMode == CaptureResult.CONTROL_MODE_USE_SCENE_MODE) {
      result.set(CONTROL_MODE,CONTROL_MODE_USE_SCENE_MODE);
    }
 else {
      result.set(CONTROL_MODE,CONTROL_MODE_AUTO);
    }
  }
{
    String legacySceneMode=params.getSceneMode();
    int mode=LegacyMetadataMapper.convertSceneModeFromLegacy(legacySceneMode);
    if (mode != LegacyMetadataMapper.UNKNOWN_MODE) {
      result.set(CaptureResult.CONTROL_SCENE_MODE,mode);
    }
 else {
      Log.w(TAG,"Unknown scene mode " + legacySceneMode + " returned by camera HAL, setting to disabled.");
      result.set(CaptureResult.CONTROL_SCENE_MODE,CONTROL_SCENE_MODE_DISABLED);
    }
  }
{
    String legacyEffectMode=params.getColorEffect();
    int mode=LegacyMetadataMapper.convertEffectModeFromLegacy(legacyEffectMode);
    if (mode != LegacyMetadataMapper.UNKNOWN_MODE) {
      result.set(CaptureResult.CONTROL_EFFECT_MODE,mode);
    }
 else {
      Log.w(TAG,"Unknown effect mode " + legacyEffectMode + " returned by camera HAL, setting to off.");
      result.set(CaptureResult.CONTROL_EFFECT_MODE,CONTROL_EFFECT_MODE_OFF);
    }
  }
{
    int stabMode=(params.isVideoStabilizationSupported() && params.getVideoStabilization()) ? CONTROL_VIDEO_STABILIZATION_MODE_ON : CONTROL_VIDEO_STABILIZATION_MODE_OFF;
    result.set(CONTROL_VIDEO_STABILIZATION_MODE,stabMode);
  }
{
  }
{
    if (Parameters.FOCUS_MODE_INFINITY.equals(params.getFocusMode())) {
      result.set(CaptureResult.LENS_FOCUS_DISTANCE,0.0f);
    }
  }
  result.set(CaptureResult.LENS_FOCAL_LENGTH,params.getFocalLength());
  result.set(REQUEST_PIPELINE_DEPTH,characteristics.get(CameraCharacteristics.REQUEST_PIPELINE_MAX_DEPTH));
  mapScaler(result,zoomData,params);
{
    result.set(SENSOR_TEST_PATTERN_MODE,SENSOR_TEST_PATTERN_MODE_OFF);
  }
  return result;
}
