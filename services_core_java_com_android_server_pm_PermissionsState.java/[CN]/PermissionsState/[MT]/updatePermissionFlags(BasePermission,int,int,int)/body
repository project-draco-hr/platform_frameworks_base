{
  enforceValidUserId(userId);
  final boolean mayChangeFlags=flagValues != 0 || flagMask != 0;
  if (mPermissions == null) {
    if (!mayChangeFlags) {
      return false;
    }
    ensurePermissionData(permission);
  }
  PermissionData permissionData=mPermissions.get(permission.name);
  if (permissionData == null) {
    if (!mayChangeFlags) {
      return false;
    }
    permissionData=ensurePermissionData(permission);
  }
  final int oldFlags=permissionData.getFlags(userId);
  final boolean updated=permissionData.updateFlags(userId,flagMask,flagValues);
  if (updated) {
    final int newFlags=permissionData.getFlags(userId);
    if ((oldFlags & PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED) == 0 && (newFlags & PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED) != 0) {
      if (mPermissionReviewRequired == null) {
        mPermissionReviewRequired=new SparseBooleanArray();
      }
      mPermissionReviewRequired.put(userId,true);
    }
 else     if ((oldFlags & PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED) != 0 && (newFlags & PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED) == 0) {
      if (mPermissionReviewRequired != null) {
        mPermissionReviewRequired.delete(userId);
        if (mPermissionReviewRequired.size() <= 0) {
          mPermissionReviewRequired=null;
        }
      }
    }
  }
  return updated;
}
