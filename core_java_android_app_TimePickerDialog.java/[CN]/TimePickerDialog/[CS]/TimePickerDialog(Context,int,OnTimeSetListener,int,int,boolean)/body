{
  super(context,resolveDialogTheme(context,theme));
  mTimeSetCallback=callBack;
  mInitialHourOfDay=hourOfDay;
  mInitialMinute=minute;
  mIs24HourView=is24HourView;
  final Context themeContext=getContext();
  final int targetSdkVersion=themeContext.getApplicationInfo().targetSdkVersion;
  if (targetSdkVersion < Build.VERSION_CODES.L) {
    setIcon(0);
    setTitle(R.string.time_picker_dialog_title);
  }
  final LayoutInflater inflater=LayoutInflater.from(themeContext);
  final View view=inflater.inflate(R.layout.time_picker_dialog,null);
  setView(view);
  mTimePicker=(TimePicker)view.findViewById(R.id.timePicker);
  mTimePicker.setShowDoneButton(true);
  if (!mTimePicker.isShowDoneButton()) {
    setButton(BUTTON_POSITIVE,themeContext.getText(R.string.date_time_done),this);
  }
  mTimePicker.setDismissCallback(new TimePicker.TimePickerDismissCallback(){
    @Override public void dismiss(    TimePicker view,    boolean isCancel,    int hourOfDay,    int minute){
      mIsCanceled=isCancel;
      if (!isCancel) {
        mTimeSetCallback.onTimeSet(view,hourOfDay,minute);
        TimePickerDialog.this.dismiss();
      }
 else {
        TimePickerDialog.this.cancel();
      }
    }
  }
);
  mTimePicker.setIs24HourView(mIs24HourView);
  mTimePicker.setCurrentHour(mInitialHourOfDay);
  mTimePicker.setCurrentMinute(mInitialMinute);
  mTimePicker.setOnTimeChangedListener(this);
}
