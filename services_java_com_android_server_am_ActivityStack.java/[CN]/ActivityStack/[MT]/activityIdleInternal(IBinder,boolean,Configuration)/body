{
  if (localLOGV)   Slog.v(TAG,"Activity idle: " + token);
  ActivityRecord res=null;
  ArrayList<ActivityRecord> stops=null;
  ArrayList<ActivityRecord> finishes=null;
  ArrayList<ActivityRecord> thumbnails=null;
  ArrayList<UserStartedState> startingUsers=null;
  int NS=0;
  int NF=0;
  int NT=0;
  IApplicationThread sendThumbnail=null;
  boolean booting=false;
  boolean enableScreen=false;
  boolean activityRemoved=false;
synchronized (mService) {
    ActivityRecord r=ActivityRecord.forToken(token);
    if (r != null) {
      mHandler.removeMessages(IDLE_TIMEOUT_MSG,r);
      r.finishLaunchTickingLocked();
    }
    int index=indexOfActivityLocked(r);
    if (index >= 0) {
      res=r;
      if (fromTimeout) {
        reportActivityLaunchedLocked(fromTimeout,r,-1,-1);
      }
      if (config != null) {
        r.configuration=config;
      }
      if (mResumedActivity == r && mLaunchingActivity.isHeld()) {
        mHandler.removeMessages(LAUNCH_TIMEOUT_MSG);
        mLaunchingActivity.release();
      }
      r.idle=true;
      mService.scheduleAppGcsLocked();
      if (r.thumbnailNeeded && r.app != null && r.app.thread != null) {
        sendThumbnail=r.app.thread;
        r.thumbnailNeeded=false;
      }
      if (DEBUG_VISBILITY)       Slog.v(TAG,"Idle activity for " + r);
      ensureActivitiesVisibleLocked(null,0);
      if (mMainStack) {
        if (!mService.mBooted) {
          mService.mBooted=true;
          enableScreen=true;
        }
      }
    }
 else     if (fromTimeout) {
      reportActivityLaunchedLocked(fromTimeout,null,-1,-1);
    }
    stops=processStoppingActivitiesLocked(true);
    NS=stops != null ? stops.size() : 0;
    if ((NF=mFinishingActivities.size()) > 0) {
      finishes=new ArrayList<ActivityRecord>(mFinishingActivities);
      mFinishingActivities.clear();
    }
    if ((NT=mService.mCancelledThumbnails.size()) > 0) {
      thumbnails=new ArrayList<ActivityRecord>(mService.mCancelledThumbnails);
      mService.mCancelledThumbnails.clear();
    }
    if (mMainStack) {
      booting=mService.mBooting;
      mService.mBooting=false;
    }
    if (mStartingUsers.size() > 0) {
      startingUsers=new ArrayList<UserStartedState>(mStartingUsers);
      mStartingUsers.clear();
    }
  }
  int i;
  if (sendThumbnail != null) {
    try {
      sendThumbnail.requestThumbnail(token);
    }
 catch (    Exception e) {
      Slog.w(TAG,"Exception thrown when requesting thumbnail",e);
      mService.sendPendingThumbnail(null,token,null,null,true);
    }
  }
  for (i=0; i < NS; i++) {
    ActivityRecord r=(ActivityRecord)stops.get(i);
synchronized (mService) {
      if (r.finishing) {
        finishCurrentActivityLocked(r,FINISH_IMMEDIATELY);
      }
 else {
        stopActivityLocked(r);
      }
    }
  }
  for (i=0; i < NF; i++) {
    ActivityRecord r=(ActivityRecord)finishes.get(i);
synchronized (mService) {
      activityRemoved=destroyActivityLocked(r,true,false,"finish-idle");
    }
  }
  for (i=0; i < NT; i++) {
    ActivityRecord r=(ActivityRecord)thumbnails.get(i);
    mService.sendPendingThumbnail(r,null,null,null,true);
  }
  if (booting) {
    mService.finishBooting();
  }
 else   if (startingUsers != null) {
    for (i=0; i < startingUsers.size(); i++) {
      mService.finishUserSwitch(startingUsers.get(i));
    }
  }
  mService.trimApplications();
  if (enableScreen) {
    mService.enableScreenAfterBoot();
  }
  if (activityRemoved) {
    resumeTopActivityLocked(null);
  }
  return res;
}
