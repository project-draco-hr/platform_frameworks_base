{
  final int NH=mHistory.size();
  int addPos=-1;
  if (!newTask) {
    boolean startIt=true;
    for (int i=NH - 1; i >= 0; i--) {
      ActivityRecord p=mHistory.get(i);
      if (p.finishing) {
        continue;
      }
      if (p.task == r.task) {
        addPos=i + 1;
        if (!startIt) {
          if (DEBUG_ADD_REMOVE) {
            RuntimeException here=new RuntimeException("here");
            here.fillInStackTrace();
            Slog.i(TAG,"Adding activity " + r + " to stack at "+ addPos,here);
          }
          mHistory.add(addPos,r);
          r.putInHistory();
          mService.mWindowManager.addAppToken(addPos,r.appToken,r.task.taskId,r.info.screenOrientation,r.fullscreen);
          if (VALIDATE_TOKENS) {
            validateAppTokensLocked();
          }
          ActivityOptions.abort(options);
          return;
        }
        break;
      }
      if (p.fullscreen) {
        startIt=false;
      }
    }
  }
  if (addPos < 0) {
    addPos=NH;
  }
  if (addPos < NH) {
    mUserLeaving=false;
    if (DEBUG_USER_LEAVING)     Slog.v(TAG,"startActivity() behind front, mUserLeaving=false");
  }
  if (DEBUG_ADD_REMOVE) {
    RuntimeException here=new RuntimeException("here");
    here.fillInStackTrace();
    Slog.i(TAG,"Adding activity " + r + " to stack at "+ addPos,here);
  }
  mHistory.add(addPos,r);
  r.putInHistory();
  r.frontOfTask=newTask;
  if (NH > 0) {
    boolean showStartingIcon=newTask;
    ProcessRecord proc=r.app;
    if (proc == null) {
      proc=mService.mProcessNames.get(r.processName,r.info.applicationInfo.uid);
    }
    if (proc == null || proc.thread == null) {
      showStartingIcon=true;
    }
    if (DEBUG_TRANSITION)     Slog.v(TAG,"Prepare open transition: starting " + r);
    if ((r.intent.getFlags() & Intent.FLAG_ACTIVITY_NO_ANIMATION) != 0) {
      mService.mWindowManager.prepareAppTransition(WindowManagerPolicy.TRANSIT_NONE,keepCurTransition);
      mNoAnimActivities.add(r);
    }
 else     if ((r.intent.getFlags() & Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET) != 0) {
      mService.mWindowManager.prepareAppTransition(WindowManagerPolicy.TRANSIT_TASK_OPEN,keepCurTransition);
      mNoAnimActivities.remove(r);
    }
 else {
      mService.mWindowManager.prepareAppTransition(newTask ? WindowManagerPolicy.TRANSIT_TASK_OPEN : WindowManagerPolicy.TRANSIT_ACTIVITY_OPEN,keepCurTransition);
      mNoAnimActivities.remove(r);
    }
    r.updateOptionsLocked(options);
    mService.mWindowManager.addAppToken(addPos,r.appToken,r.task.taskId,r.info.screenOrientation,r.fullscreen);
    boolean doShow=true;
    if (newTask) {
      if ((r.intent.getFlags() & Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED) != 0) {
        resetTaskIfNeededLocked(r,r);
        doShow=topRunningNonDelayedActivityLocked(null) == r;
      }
    }
    if (SHOW_APP_STARTING_PREVIEW && doShow) {
      ActivityRecord prev=mResumedActivity;
      if (prev != null) {
        if (prev.task != r.task)         prev=null;
 else         if (prev.nowVisible)         prev=null;
      }
      mService.mWindowManager.setAppStartingWindow(r.appToken,r.packageName,r.theme,mService.compatibilityInfoForPackageLocked(r.info.applicationInfo),r.nonLocalizedLabel,r.labelRes,r.icon,r.windowFlags,prev != null ? prev.appToken : null,showStartingIcon);
    }
  }
 else {
    mService.mWindowManager.addAppToken(addPos,r.appToken,r.task.taskId,r.info.screenOrientation,r.fullscreen);
    ActivityOptions.abort(options);
  }
  if (VALIDATE_TOKENS) {
    validateAppTokensLocked();
  }
  if (doResume) {
    resumeTopActivityLocked(null);
  }
}
