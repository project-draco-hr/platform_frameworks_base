{
switch (msg.what) {
case SLEEP_TIMEOUT_MSG:
{
synchronized (mService) {
        if (mService.isSleepingOrShuttingDown()) {
          Slog.w(TAG,"Sleep timeout!  Sleeping now.");
          mSleepTimeout=true;
          checkReadyForSleepLocked();
        }
      }
    }
  break;
case PAUSE_TIMEOUT_MSG:
{
  ActivityRecord r=(ActivityRecord)msg.obj;
  Slog.w(TAG,"Activity pause timeout for " + r);
synchronized (mService) {
    if (r.app != null) {
      mService.logAppTooSlow(r.app,r.pauseTime,"pausing " + r);
    }
    activityPausedLocked(r != null ? r.appToken : null,true);
  }
}
break;
case IDLE_TIMEOUT_MSG:
{
if (mService.mDidDexOpt) {
mService.mDidDexOpt=false;
Message nmsg=mHandler.obtainMessage(IDLE_TIMEOUT_MSG);
nmsg.obj=msg.obj;
mHandler.sendMessageDelayed(nmsg,IDLE_TIMEOUT);
return;
}
ActivityRecord r=(ActivityRecord)msg.obj;
Slog.w(TAG,"Activity idle timeout for " + r);
synchronized (mService) {
activityIdleInternalLocked(r != null ? r.appToken : null,true,null);
}
}
break;
case LAUNCH_TICK_MSG:
{
ActivityRecord r=(ActivityRecord)msg.obj;
synchronized (mService) {
if (r.continueLaunchTickingLocked()) {
mService.logAppTooSlow(r.app,r.launchTickTime,"launching " + r);
}
}
}
break;
case DESTROY_TIMEOUT_MSG:
{
ActivityRecord r=(ActivityRecord)msg.obj;
Slog.w(TAG,"Activity destroy timeout for " + r);
synchronized (mService) {
activityDestroyedLocked(r != null ? r.appToken : null);
}
}
break;
case IDLE_NOW_MSG:
{
ActivityRecord r=(ActivityRecord)msg.obj;
synchronized (mService) {
activityIdleInternalLocked(r != null ? r.appToken : null,false,null);
}
}
break;
case LAUNCH_TIMEOUT_MSG:
{
if (mService.mDidDexOpt) {
mService.mDidDexOpt=false;
Message nmsg=mHandler.obtainMessage(LAUNCH_TIMEOUT_MSG);
mHandler.sendMessageDelayed(nmsg,LAUNCH_TIMEOUT);
return;
}
synchronized (mService) {
if (mLaunchingActivity.isHeld()) {
Slog.w(TAG,"Launch timeout has expired, giving up wake lock!");
mLaunchingActivity.release();
}
}
}
break;
case RESUME_TOP_ACTIVITY_MSG:
{
synchronized (mService) {
mStackSupervisor.getTopStack().resumeTopActivityLocked(null);
}
}
break;
case STOP_TIMEOUT_MSG:
{
ActivityRecord r=(ActivityRecord)msg.obj;
Slog.w(TAG,"Activity stop timeout for " + r);
synchronized (mService) {
if (r.isInHistory()) {
activityStoppedLocked(r,null,null,null);
}
}
}
break;
case DESTROY_ACTIVITIES_MSG:
{
ScheduleDestroyArgs args=(ScheduleDestroyArgs)msg.obj;
synchronized (mService) {
destroyActivitiesLocked(args.mOwner,args.mOomAdj,args.mReason);
}
}
}
}
