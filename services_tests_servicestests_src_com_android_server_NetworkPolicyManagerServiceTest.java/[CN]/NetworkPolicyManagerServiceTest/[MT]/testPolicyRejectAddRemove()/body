{
  Future<Void> future;
  expectSetUidMeteredNetworkBlacklist(UID_A,false);
  expectSetUidForeground(UID_A,false);
  future=expectRulesChanged(UID_A,RULE_ALLOW_ALL);
  replay();
  mProcessObserver.onForegroundActivitiesChanged(PID_1,UID_A,false);
  mService.setUidPolicy(APP_ID_A,POLICY_NONE);
  future.get();
  verifyAndReset();
  expectSetUidMeteredNetworkBlacklist(UID_A,true);
  expectSetUidForeground(UID_A,false);
  future=expectRulesChanged(UID_A,RULE_REJECT_METERED);
  replay();
  mService.setUidPolicy(APP_ID_A,POLICY_REJECT_METERED_BACKGROUND);
  future.get();
  verifyAndReset();
  expectSetUidMeteredNetworkBlacklist(UID_A,false);
  expectSetUidForeground(UID_A,false);
  future=expectRulesChanged(UID_A,RULE_ALLOW_ALL);
  replay();
  mService.setUidPolicy(APP_ID_A,POLICY_NONE);
  future.get();
  verifyAndReset();
}
