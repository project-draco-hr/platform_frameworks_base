{
  NetworkState[] state=null;
  NetworkStats stats=null;
  Future<Void> future;
  Capture<String> tag;
  final long TIME_FEB_15=1171497600000L;
  final long TIME_MAR_10=1173484800000L;
  final int CYCLE_DAY=15;
  setCurrentTimeMillis(TIME_MAR_10);
  state=new NetworkState[]{};
  stats=new NetworkStats(getElapsedRealtime(),1).addIfaceValues(TEST_IFACE,0L,0L,0L,0L);
{
    expectCurrentTime();
    expect(mConnManager.getAllNetworkState()).andReturn(state).atLeastOnce();
    expect(mStatsService.getSummaryForNetwork(sTemplateWifi,TIME_FEB_15,currentTimeMillis())).andReturn(stats).atLeastOnce();
    expectClearNotifications();
    future=expectMeteredIfacesChanged();
    replay();
    setNetworkPolicies(new NetworkPolicy(sTemplateWifi,CYCLE_DAY,1024L,2048L,SNOOZE_NEVER));
    future.get();
    verifyAndReset();
  }
  incrementCurrentTime(MINUTE_IN_MILLIS);
  state=new NetworkState[]{buildWifi()};
  stats=new NetworkStats(getElapsedRealtime(),1).addIfaceValues(TEST_IFACE,0L,0L,0L,0L);
{
    expectCurrentTime();
    expect(mConnManager.getAllNetworkState()).andReturn(state).atLeastOnce();
    expect(mStatsService.getSummaryForNetwork(sTemplateWifi,TIME_FEB_15,currentTimeMillis())).andReturn(stats).atLeastOnce();
    expectRemoveInterfaceQuota(TEST_IFACE);
    expectSetInterfaceQuota(TEST_IFACE,2048L);
    expectClearNotifications();
    future=expectMeteredIfacesChanged(TEST_IFACE);
    replay();
    mServiceContext.sendBroadcast(new Intent(CONNECTIVITY_ACTION_IMMEDIATE));
    future.get();
    verifyAndReset();
  }
  incrementCurrentTime(MINUTE_IN_MILLIS);
  stats=new NetworkStats(getElapsedRealtime(),1).addIfaceValues(TEST_IFACE,1536L,15L,0L,0L);
{
    expectCurrentTime();
    expect(mStatsService.getSummaryForNetwork(sTemplateWifi,TIME_FEB_15,currentTimeMillis())).andReturn(stats).atLeastOnce();
    expectForceUpdate();
    expectClearNotifications();
    tag=expectEnqueueNotification();
    replay();
    mNetworkObserver.limitReached(null,TEST_IFACE);
    assertNotificationType(TYPE_WARNING,tag.getValue());
    verifyAndReset();
  }
  incrementCurrentTime(MINUTE_IN_MILLIS);
  stats=new NetworkStats(getElapsedRealtime(),1).addIfaceValues(TEST_IFACE,5120L,512L,0L,0L);
{
    expectCurrentTime();
    expect(mStatsService.getSummaryForNetwork(sTemplateWifi,TIME_FEB_15,currentTimeMillis())).andReturn(stats).atLeastOnce();
    expectPolicyDataEnable(TYPE_WIFI,false).atLeastOnce();
    expectForceUpdate();
    expectClearNotifications();
    tag=expectEnqueueNotification();
    replay();
    mNetworkObserver.limitReached(null,TEST_IFACE);
    assertNotificationType(TYPE_LIMIT,tag.getValue());
    verifyAndReset();
  }
  incrementCurrentTime(MINUTE_IN_MILLIS);
{
    expectCurrentTime();
    expect(mConnManager.getAllNetworkState()).andReturn(state).atLeastOnce();
    expect(mStatsService.getSummaryForNetwork(sTemplateWifi,TIME_FEB_15,currentTimeMillis())).andReturn(stats).atLeastOnce();
    expectPolicyDataEnable(TYPE_WIFI,true).atLeastOnce();
    expectRemoveInterfaceQuota(TEST_IFACE);
    expectSetInterfaceQuota(TEST_IFACE,Long.MAX_VALUE);
    expectClearNotifications();
    tag=expectEnqueueNotification();
    future=expectMeteredIfacesChanged(TEST_IFACE);
    replay();
    mService.snoozePolicy(sTemplateWifi);
    future.get();
    assertNotificationType(TYPE_LIMIT_SNOOZED,tag.getValue());
    verifyAndReset();
  }
}
