{
  super.setUp();
  mServiceContext=new BroadcastInterceptingContext(getContext()){
    @Override public PackageManager getPackageManager(){
      return new MockPackageManager(){
        @Override public String[] getPackagesForUid(        int uid){
          return new String[]{"com.example"};
        }
      }
;
    }
  }
;
  mPolicyDir=getContext().getFilesDir();
  mActivityManager=createMock(IActivityManager.class);
  mPowerManager=createMock(IPowerManager.class);
  mStatsService=createMock(INetworkStatsService.class);
  mPolicyListener=createMock(INetworkPolicyListener.class);
  mTime=createMock(TrustedTime.class);
  mConnManager=createMock(IConnectivityManager.class);
  mNotifManager=createMock(INotificationManager.class);
  mService=new NetworkPolicyManagerService(mServiceContext,mActivityManager,mPowerManager,mStatsService,mTime,mPolicyDir);
  mService.bindConnectivityManager(mConnManager);
  mService.bindNotificationManager(mNotifManager);
  expect(mPolicyListener.asBinder()).andReturn(mStubBinder).atLeastOnce();
  replay();
  mService.registerListener(mPolicyListener);
  verifyAndReset();
  final Capture<IProcessObserver> processObserver=new Capture<IProcessObserver>();
  mActivityManager.registerProcessObserver(capture(processObserver));
  expectLastCall().atLeastOnce();
  expect(mPowerManager.isScreenOn()).andReturn(true).atLeastOnce();
  expectTime(System.currentTimeMillis());
  replay();
  mService.systemReady();
  verifyAndReset();
  mProcessObserver=processObserver.getValue();
}
