{
  super.setUp();
  setCurrentTimeMillis(TEST_START);
  mServiceContext=new BroadcastInterceptingContext(getContext()){
    @Override public PackageManager getPackageManager(){
      return new MockPackageManager(){
        @Override public String[] getPackagesForUid(        int uid){
          return new String[]{"com.example"};
        }
        @Override public PackageInfo getPackageInfo(        String packageName,        int flags){
          final PackageInfo info=new PackageInfo();
          final Signature signature;
          if ("android".equals(packageName)) {
            signature=new Signature("F00D");
          }
 else {
            signature=new Signature("DEAD");
          }
          info.signatures=new Signature[]{signature};
          return info;
        }
        @Override public List<UserInfo> getUsers(){
          final ArrayList<UserInfo> users=new ArrayList<UserInfo>();
          users.add(new UserInfo(USER_ID,"Primary",UserInfo.FLAG_PRIMARY));
          users.add(new UserInfo(USER_ID_GUEST,"Guest",0));
          return users;
        }
      }
;
    }
    @Override public void startActivity(    Intent intent){
    }
  }
;
  mPolicyDir=getContext().getFilesDir();
  if (mPolicyDir.exists()) {
    IoUtils.deleteContents(mPolicyDir);
  }
  mActivityManager=createMock(IActivityManager.class);
  mPowerManager=createMock(IPowerManager.class);
  mStatsService=createMock(INetworkStatsService.class);
  mNetworkManager=createMock(INetworkManagementService.class);
  mPolicyListener=createMock(INetworkPolicyListener.class);
  mTime=createMock(TrustedTime.class);
  mConnManager=createMock(IConnectivityManager.class);
  mNotifManager=createMock(INotificationManager.class);
  mService=new NetworkPolicyManagerService(mServiceContext,mActivityManager,mPowerManager,mStatsService,mNetworkManager,mTime,mPolicyDir,true);
  mService.bindConnectivityManager(mConnManager);
  mService.bindNotificationManager(mNotifManager);
  expect(mPolicyListener.asBinder()).andReturn(mStubBinder).atLeastOnce();
  replay();
  mService.registerListener(mPolicyListener);
  verifyAndReset();
  final Capture<IProcessObserver> processObserver=new Capture<IProcessObserver>();
  mActivityManager.registerProcessObserver(capture(processObserver));
  expectLastCall().atLeastOnce();
  final Capture<INetworkManagementEventObserver> networkObserver=new Capture<INetworkManagementEventObserver>();
  mNetworkManager.registerObserver(capture(networkObserver));
  expectLastCall().atLeastOnce();
  expect(mPowerManager.isScreenOn()).andReturn(true).atLeastOnce();
  expectCurrentTime();
  replay();
  mService.systemReady();
  verifyAndReset();
  mProcessObserver=processObserver.getValue();
  mNetworkObserver=networkObserver.getValue();
}
