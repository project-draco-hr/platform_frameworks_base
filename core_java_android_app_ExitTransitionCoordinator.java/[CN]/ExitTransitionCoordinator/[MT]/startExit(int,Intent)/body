{
  mHandler=new Handler(){
    @Override public void handleMessage(    Message msg){
      mIsCanceled=true;
      mActivity.finish();
      mActivity=null;
    }
  }
;
  mHandler.sendEmptyMessageDelayed(MSG_CANCEL,MAX_WAIT_MS);
  if (getDecor().getBackground() == null) {
    ColorDrawable black=new ColorDrawable(0xFF000000);
    black.setAlpha(0);
    getWindow().setBackgroundDrawable(black);
    black.setAlpha(255);
  }
  ActivityOptions options=ActivityOptions.makeSceneTransitionAnimation(mActivity,this,mAllSharedElementNames,resultCode,data);
  mActivity.convertToTranslucent(new Activity.TranslucentConversionListener(){
    @Override public void onTranslucentConversionComplete(    boolean drawComplete){
      if (!mIsCanceled) {
        fadeOutBackground();
      }
    }
  }
,options);
  Transition sharedElementTransition=mSharedElements.isEmpty() ? null : getSharedElementTransition();
  if (sharedElementTransition == null) {
    sharedElementTransitionComplete();
  }
  Transition transition=mergeTransitions(sharedElementTransition,getExitTransition());
  if (transition == null) {
    mExitTransitionStarted=true;
  }
 else {
    TransitionManager.beginDelayedTransition(getDecor(),transition);
    setViewVisibility(mTransitioningViews,View.INVISIBLE);
    getDecor().getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener(){
      @Override public boolean onPreDraw(){
        getDecor().getViewTreeObserver().removeOnPreDrawListener(this);
        mExitTransitionStarted=true;
        if (mExitSharedElementBundle != null) {
          startSharedElementExit();
        }
        notifyComplete();
        return true;
      }
    }
);
  }
}
