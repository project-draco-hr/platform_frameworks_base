{
  Transition transition=getSharedElementExitTransition();
  transition.addListener(new Transition.TransitionListenerAdapter(){
    @Override public void onTransitionEnd(    Transition transition){
      transition.removeListener(this);
      if (mExitComplete) {
        delayCancel();
      }
    }
  }
);
  final ArrayList<View> sharedElementSnapshots=createSnapshots(mExitSharedElementBundle,mSharedElementNames);
  getDecor().getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener(){
    @Override public boolean onPreDraw(){
      getDecor().getViewTreeObserver().removeOnPreDrawListener(this);
      setSharedElementState(mExitSharedElementBundle,sharedElementSnapshots);
      return true;
    }
  }
);
  setGhostVisibility(View.INVISIBLE);
  scheduleGhostVisibilityChange(View.INVISIBLE);
  TransitionManager.beginDelayedTransition(getDecor(),transition);
  scheduleGhostVisibilityChange(View.VISIBLE);
  setGhostVisibility(View.VISIBLE);
  getDecor().invalidate();
}
