{
  final boolean mustNotify;
  boolean mustInitialize=false;
  boolean updateAutoBrightness=mTwilightChanged;
  boolean screenOnWasBlocked=false;
  mTwilightChanged=false;
synchronized (mLock) {
    mPendingUpdatePowerStateLocked=false;
    if (mPendingRequestLocked == null) {
      return;
    }
    if (mPowerRequest == null) {
      mPowerRequest=new DisplayPowerRequest(mPendingRequestLocked);
      mWaitingForNegativeProximity=mPendingWaitForNegativeProximityLocked;
      mPendingWaitForNegativeProximityLocked=false;
      mPendingRequestChangedLocked=false;
      mustInitialize=true;
    }
 else     if (mPendingRequestChangedLocked) {
      if (mPowerRequest.screenAutoBrightnessAdjustment != mPendingRequestLocked.screenAutoBrightnessAdjustment) {
        updateAutoBrightness=true;
      }
      mPowerRequest.copyFrom(mPendingRequestLocked);
      mWaitingForNegativeProximity|=mPendingWaitForNegativeProximityLocked;
      mPendingWaitForNegativeProximityLocked=false;
      mPendingRequestChangedLocked=false;
      mDisplayReadyLocked=false;
    }
    mustNotify=!mDisplayReadyLocked;
  }
  if (mustInitialize) {
    initialize();
  }
  if (mProximitySensor != null) {
    if (mPowerRequest.useProximitySensor && mPowerRequest.screenState != DisplayPowerRequest.SCREEN_STATE_OFF) {
      setProximitySensorEnabled(true);
      if (!mScreenOffBecauseOfProximity && mProximity == PROXIMITY_POSITIVE) {
        mScreenOffBecauseOfProximity=true;
        sendOnProximityPositive();
        setScreenOn(false);
      }
    }
 else     if (mWaitingForNegativeProximity && mScreenOffBecauseOfProximity && mProximity == PROXIMITY_POSITIVE && mPowerRequest.screenState != DisplayPowerRequest.SCREEN_STATE_OFF) {
      setProximitySensorEnabled(true);
    }
 else {
      setProximitySensorEnabled(false);
      mWaitingForNegativeProximity=false;
    }
    if (mScreenOffBecauseOfProximity && mProximity != PROXIMITY_POSITIVE) {
      mScreenOffBecauseOfProximity=false;
      sendOnProximityNegative();
    }
  }
 else {
    mWaitingForNegativeProximity=false;
  }
  if (mLightSensor != null) {
    setLightSensorEnabled(mPowerRequest.useAutoBrightness && wantScreenOn(mPowerRequest.screenState),updateAutoBrightness);
  }
  if (wantScreenOn(mPowerRequest.screenState)) {
    int target;
    boolean slow;
    if (mScreenAutoBrightness >= 0 && mLightSensorEnabled) {
      target=mScreenAutoBrightness;
      slow=mUsingScreenAutoBrightness;
      mUsingScreenAutoBrightness=true;
    }
 else {
      target=mPowerRequest.screenBrightness;
      slow=false;
      mUsingScreenAutoBrightness=false;
    }
    if (mPowerRequest.screenState == DisplayPowerRequest.SCREEN_STATE_DIM) {
      target=Math.min(target - SCREEN_DIM_MINIMUM_REDUCTION,mScreenBrightnessDimConfig);
      slow=false;
    }
    animateScreenBrightness(clampScreenBrightness(target),slow ? BRIGHTNESS_RAMP_RATE_SLOW : BRIGHTNESS_RAMP_RATE_FAST);
  }
 else {
    mUsingScreenAutoBrightness=false;
  }
  if (!mScreenOffBecauseOfProximity) {
    if (wantScreenOn(mPowerRequest.screenState)) {
      if (!mElectronBeamOffAnimator.isStarted()) {
        if (mPowerRequest.blockScreenOn && !mPowerState.isScreenOn()) {
          if (DEBUG) {
            Slog.d(TAG,"Blocked screen on while screen currently off.");
          }
          screenOnWasBlocked=true;
        }
 else {
          setScreenOn(true);
          if (USE_ELECTRON_BEAM_ON_ANIMATION) {
            if (!mElectronBeamOnAnimator.isStarted()) {
              if (mPowerState.getElectronBeamLevel() == 1.0f) {
                mPowerState.dismissElectronBeam();
              }
 else               if (mPowerState.prepareElectronBeam(true)) {
                mElectronBeamOnAnimator.start();
              }
 else {
                mElectronBeamOnAnimator.end();
              }
            }
          }
 else {
            mPowerState.setElectronBeamLevel(1.0f);
            mPowerState.dismissElectronBeam();
          }
        }
      }
 else {
        if (mPowerRequest.blockScreenOn) {
          if (DEBUG) {
            Slog.d(TAG,"Blocked screen on while screen off animation running.");
          }
          screenOnWasBlocked=true;
          setScreenOn(false);
          mElectronBeamOffAnimator.end();
        }
      }
    }
 else {
      if (!mElectronBeamOnAnimator.isStarted()) {
        if (!mElectronBeamOffAnimator.isStarted()) {
          if (mPowerState.getElectronBeamLevel() == 0.0f) {
            setScreenOn(false);
          }
 else           if (mPowerState.prepareElectronBeam(false) && mPowerState.isScreenOn()) {
            mElectronBeamOffAnimator.start();
          }
 else {
            mElectronBeamOffAnimator.end();
          }
        }
      }
    }
  }
  if (mustNotify && !screenOnWasBlocked && !mElectronBeamOnAnimator.isStarted()&& !mElectronBeamOffAnimator.isStarted()&& mPowerState.waitUntilClean(mCleanListener)) {
synchronized (mLock) {
      if (!mPendingRequestChangedLocked) {
        mDisplayReadyLocked=true;
        if (DEBUG) {
          Slog.d(TAG,"Display ready!");
        }
      }
    }
    sendOnStateChanged();
  }
}
