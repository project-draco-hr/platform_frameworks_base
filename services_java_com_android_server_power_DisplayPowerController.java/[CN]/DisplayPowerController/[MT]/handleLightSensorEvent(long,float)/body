{
  if (!mLightMeasurementValid || (time - mLightSensorEnableTime) < mLightSensorWarmUpTimeConfig) {
    mLightMeasurement=lux;
    mLightMeasurementValid=true;
    mRecentLightSamples=0;
    updateAutoBrightness(true);
  }
  if (lux != mLightMeasurement && (mRecentLightSamples == 0 || (lux < mLightMeasurement && mRecentLightBrightening) || (lux > mLightMeasurement && !mRecentLightBrightening))) {
    setRecentLight(time,lux,lux > mLightMeasurement);
    mPendingLightSensorDebounceTime=time + mRecentLightTimeConstant;
  }
 else   if (mRecentLightSamples >= 1) {
    accumulateRecentLight(time,lux);
  }
  if (DEBUG) {
    Slog.d(TAG,"handleLightSensorEvent: lux=" + lux + ", mLightMeasurementValid="+ mLightMeasurementValid+ ", mLightMeasurement="+ mLightMeasurement+ ", mRecentLightSamples="+ mRecentLightSamples+ ", mRecentLightAverage="+ mRecentLightAverage+ ", mRecentLightBrightening="+ mRecentLightBrightening+ ", mRecentLightTimeConstant="+ mRecentLightTimeConstant+ ", mPendingLightSensorDebounceTime="+ TimeUtils.formatUptime(mPendingLightSensorDebounceTime));
  }
  mHandler.removeMessages(MSG_LIGHT_SENSOR_DEBOUNCED);
  debounceLightSensor();
}
