{
  TouchAnimator.Builder firstPageBuilder=new Builder();
  TouchAnimator.Builder translationXBuilder=new Builder();
  TouchAnimator.Builder translationYBuilder=new Builder();
  TouchAnimator.Builder lastRowBuilder=new Builder();
  if (mQsPanel.getHost() == null)   return;
  Collection<QSTile<?>> tiles=mQsPanel.getHost().getTiles();
  int count=0;
  int[] loc1=new int[2];
  int[] loc2=new int[2];
  int lastXDiff=0;
  int lastYDiff=0;
  int lastX=0;
  clearAnimationState();
  mAllViews.clear();
  mTopFiveQs.clear();
  mAllViews.add((View)mQsPanel.getTileLayout());
  for (  QSTile<?> tile : tiles) {
    QSTileBaseView tileView=mQsPanel.getTileView(tile);
    final TextView label=((QSTileView)tileView).getLabel();
    final View tileIcon=tileView.getIcon();
    if (count < mNumQuickTiles && mAllowFancy) {
      QSTileBaseView quickTileView=mQuickQsPanel.getTileView(tile);
      lastX=loc1[0];
      getRelativePosition(loc1,quickTileView.getIcon(),mQsContainer);
      getRelativePosition(loc2,tileIcon,mQsContainer);
      final int xDiff=loc2[0] - loc1[0];
      final int yDiff=loc2[1] - loc1[1];
      lastXDiff=loc1[0] - lastX;
      lastYDiff=yDiff;
      translationXBuilder.addFloat(quickTileView,"translationX",0,xDiff);
      translationYBuilder.addFloat(quickTileView,"translationY",0,yDiff);
      firstPageBuilder.addFloat(tileView,"translationY",mQsPanel.getHeight(),0);
      translationXBuilder.addFloat(label,"translationX",-xDiff,0);
      translationYBuilder.addFloat(label,"translationY",-yDiff,0);
      mTopFiveQs.add(tileIcon);
      mAllViews.add(tileIcon);
      mAllViews.add(quickTileView);
    }
 else     if (mFullRows && isIconInAnimatedRow(count)) {
      loc1[0]+=lastXDiff;
      getRelativePosition(loc2,tileIcon,mQsContainer);
      final int xDiff=loc2[0] - loc1[0];
      final int yDiff=loc2[1] - loc1[1];
      firstPageBuilder.addFloat(tileView,"translationY",mQsPanel.getHeight(),0);
      translationXBuilder.addFloat(tileView,"translationX",-xDiff,0);
      translationYBuilder.addFloat(label,"translationY",-yDiff,0);
      translationYBuilder.addFloat(tileIcon,"translationY",-yDiff,0);
      mAllViews.add(tileIcon);
    }
 else {
      lastRowBuilder.addFloat(tileView,"alpha",0,1);
    }
    mAllViews.add(tileView);
    mAllViews.add(label);
    count++;
  }
  if (mAllowFancy) {
    mFirstPageAnimator=firstPageBuilder.setListener(this).build();
    mFirstPageDelayedAnimator=new TouchAnimator.Builder().setStartDelay(EXPANDED_TILE_DELAY).addFloat(mQsPanel.getTileLayout(),"alpha",0,1).build();
    mLastRowAnimator=lastRowBuilder.setStartDelay(LAST_ROW_EXPANDED_DELAY).build();
    Path path=new Path();
    path.moveTo(0,0);
    path.cubicTo(0,0,0,1,1,1);
    PathInterpolatorBuilder interpolatorBuilder=new PathInterpolatorBuilder(0,0,0,1);
    translationXBuilder.setInterpolator(interpolatorBuilder.getXInterpolator());
    translationYBuilder.setInterpolator(interpolatorBuilder.getYInterpolator());
    mTranslationXAnimator=translationXBuilder.build();
    mTranslationYAnimator=translationYBuilder.build();
  }
  mNonfirstPageAnimator=new TouchAnimator.Builder().addFloat(mQuickQsPanel,"alpha",1,0).setListener(mNonFirstPageListener).setEndDelay(.5f).build();
}
