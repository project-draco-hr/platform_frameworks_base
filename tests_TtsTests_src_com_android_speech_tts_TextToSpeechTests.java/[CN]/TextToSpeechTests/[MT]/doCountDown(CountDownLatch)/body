{
  return new CountDownBehaviour(){
    @Override public <T>T when(    T mock){
      return LittleMock.doAnswer(new Callable<Void>(){
        @Override public Void call() throws Exception {
          latch.countDown();
          return null;
        }
      }
).when(mock);
    }
    @Override public Behaviour andReturn(    final Object result){
      return new Behaviour(){
        @Override public <T>T when(        T mock){
          return LittleMock.doAnswer(new Callable<Object>(){
            @Override public Object call() throws Exception {
              latch.countDown();
              return result;
            }
          }
).when(mock);
        }
      }
;
    }
  }
;
}
