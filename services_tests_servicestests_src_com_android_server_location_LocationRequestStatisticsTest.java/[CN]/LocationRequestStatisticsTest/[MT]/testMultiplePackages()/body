{
  mStatistics.startRequesting(PACKAGE1,PROVIDER1,INTERVAL1);
  mStatistics.startRequesting(PACKAGE1,PROVIDER2,INTERVAL1);
  mStatistics.startRequesting(PACKAGE1,PROVIDER2,INTERVAL2);
  mStatistics.startRequesting(PACKAGE2,PROVIDER1,INTERVAL1);
  assertEquals(3,mStatistics.statistics.size());
  PackageProviderKey key1=new PackageProviderKey(PACKAGE1,PROVIDER1);
  PackageStatistics stats1=mStatistics.statistics.get(key1);
  verifyStatisticsTimes(stats1);
  assertEquals(INTERVAL1,stats1.getSlowestIntervalMs());
  assertEquals(INTERVAL1,stats1.getFastestIntervalMs());
  assertTrue(stats1.isActive());
  PackageProviderKey key2=new PackageProviderKey(PACKAGE1,PROVIDER2);
  PackageStatistics stats2=mStatistics.statistics.get(key2);
  verifyStatisticsTimes(stats2);
  assertEquals(INTERVAL2,stats2.getSlowestIntervalMs());
  assertEquals(INTERVAL1,stats2.getFastestIntervalMs());
  assertTrue(stats2.isActive());
  PackageProviderKey key3=new PackageProviderKey(PACKAGE2,PROVIDER1);
  PackageStatistics stats3=mStatistics.statistics.get(key3);
  verifyStatisticsTimes(stats3);
  assertEquals(INTERVAL1,stats3.getSlowestIntervalMs());
  assertEquals(INTERVAL1,stats3.getFastestIntervalMs());
  assertTrue(stats3.isActive());
  mStatistics.stopRequesting(PACKAGE1,PROVIDER1);
  assertFalse(stats1.isActive());
  assertTrue(stats2.isActive());
  assertTrue(stats3.isActive());
  mStatistics.stopRequesting(PACKAGE1,PROVIDER2);
  assertFalse(stats1.isActive());
  assertTrue(stats2.isActive());
  assertTrue(stats3.isActive());
  mStatistics.stopRequesting(PACKAGE1,PROVIDER2);
  assertFalse(stats2.isActive());
  mStatistics.stopRequesting(PACKAGE2,PROVIDER1);
  assertFalse(stats1.isActive());
  assertFalse(stats2.isActive());
  assertFalse(stats3.isActive());
}
