{
  File outFile=new File(mOutMediaFileName);
  assertTrue("No video is recorded",outFile.exists());
  MediaExtractor extractor=new MediaExtractor();
  try {
    extractor.setDataSource(mOutMediaFileName);
    long durationUs=0;
    int width=-1, height=-1;
    int numTracks=extractor.getTrackCount();
    final String VIDEO_MIME_TYPE="video";
    for (int i=0; i < numTracks; i++) {
      MediaFormat format=extractor.getTrackFormat(i);
      String mime=format.getString(MediaFormat.KEY_MIME);
      if (mime.contains(VIDEO_MIME_TYPE)) {
        Log.i(TAG,"video format is: " + format.toString());
        durationUs=format.getLong(MediaFormat.KEY_DURATION);
        width=format.getInteger(MediaFormat.KEY_WIDTH);
        height=format.getInteger(MediaFormat.KEY_HEIGHT);
        break;
      }
    }
    Size videoSz=new Size(width,height);
    assertTrue("Video size doesn't match, expected " + sz.toString() + " got "+ videoSz.toString(),videoSz.equals(sz));
    int duration=(int)(durationUs / 1000);
    if (VERBOSE) {
      Log.v(TAG,String.format("Video duration: recorded %dms, expected %dms",duration,expectedDurationMs));
    }
    if (!mStaticInfo.isHardwareLevelLegacy()) {
      assertTrue(String.format("Camera %s: Video duration doesn't match: recorded %dms, expected %dms.",mCamera.getId(),duration,expectedDurationMs),Math.abs(duration - expectedDurationMs) < DURATION_MARGIN * expectedDurationMs);
    }
  }
  finally {
    extractor.release();
    if (!DEBUG_DUMP) {
      outFile.delete();
    }
  }
}
