{
  PackageMonitor monitor=new PackageMonitor(){
    private void updateServices(    String packageName){
      if (!mUserManager.isUserUnlocked(getChangingUserId()))       return;
synchronized (mLock) {
        boolean servicesChanged=false;
        UserState userState=getOrCreateUserStateLocked(getChangingUserId());
        List<PrintServiceInfo> installedServices=userState.getInstalledPrintServices();
        final int numInstalledServices=installedServices.size();
        for (int i=0; i < numInstalledServices; i++) {
          if (installedServices.get(i).getResolveInfo().serviceInfo.packageName.equals(packageName)) {
            servicesChanged=true;
            break;
          }
        }
        if (servicesChanged) {
          userState.updateIfNeededLocked();
        }
      }
    }
    @Override public void onPackageModified(    String packageName){
      updateServices(packageName);
      getOrCreateUserStateLocked(getChangingUserId()).prunePrintServices();
    }
    @Override public void onPackageRemoved(    String packageName,    int uid){
      updateServices(packageName);
      getOrCreateUserStateLocked(getChangingUserId()).prunePrintServices();
    }
    @Override public boolean onHandleForceStop(    Intent intent,    String[] stoppedPackages,    int uid,    boolean doit){
      if (!mUserManager.isUserUnlocked(getChangingUserId()))       return false;
synchronized (mLock) {
        UserState userState=getOrCreateUserStateLocked(getChangingUserId());
        boolean stoppedSomePackages=false;
        Iterator<PrintServiceInfo> iterator=userState.getEnabledPrintServices().iterator();
        while (iterator.hasNext()) {
          ComponentName componentName=iterator.next().getComponentName();
          String componentPackage=componentName.getPackageName();
          for (          String stoppedPackage : stoppedPackages) {
            if (componentPackage.equals(stoppedPackage)) {
              if (!doit) {
                return true;
              }
              stoppedSomePackages=true;
              break;
            }
          }
        }
        if (stoppedSomePackages) {
          userState.updateIfNeededLocked();
        }
        return false;
      }
    }
    @Override public void onPackageAdded(    String packageName,    int uid){
      if (!mUserManager.isUserUnlocked(getChangingUserId()))       return;
      Intent intent=new Intent(android.printservice.PrintService.SERVICE_INTERFACE);
      intent.setPackage(packageName);
      List<ResolveInfo> installedServices=mContext.getPackageManager().queryIntentServicesAsUser(intent,PackageManager.GET_SERVICES,getChangingUserId());
      if (installedServices != null) {
        UserState userState=getOrCreateUserStateLocked(getChangingUserId());
        userState.updateIfNeededLocked();
      }
    }
  }
;
  monitor.register(mContext,BackgroundThread.getHandler().getLooper(),UserHandle.ALL,true);
}
