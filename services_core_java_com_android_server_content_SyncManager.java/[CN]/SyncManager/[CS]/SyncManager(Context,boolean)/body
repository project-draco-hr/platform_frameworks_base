{
  mContext=context;
  SyncStorageEngine.init(context);
  mSyncStorageEngine=SyncStorageEngine.getSingleton();
  mSyncStorageEngine.setOnSyncRequestListener(new OnSyncRequestListener(){
    @Override public void onSyncRequest(    SyncStorageEngine.EndPoint info,    int reason,    Bundle extras){
      scheduleSync(info.account,info.userId,reason,info.provider,extras,0,0,false);
    }
  }
);
  mSyncStorageEngine.setPeriodicSyncAddedListener(new SyncStorageEngine.PeriodicSyncAddedListener(){
    @Override public void onPeriodicSyncAdded(    EndPoint target,    Bundle extras,    long pollFrequency,    long flex){
      updateOrAddPeriodicSync(target,pollFrequency,flex,extras);
    }
  }
);
  mSyncStorageEngine.setOnAuthorityRemovedListener(new SyncStorageEngine.OnAuthorityRemovedListener(){
    @Override public void onAuthorityRemoved(    EndPoint removedAuthority){
      removeSyncsForAuthority(removedAuthority);
    }
  }
);
  mSyncAdapters=new SyncAdaptersCache(mContext);
  mSyncHandler=new SyncHandler(BackgroundThread.get().getLooper());
  mSyncAdapters.setListener(new RegisteredServicesCacheListener<SyncAdapterType>(){
    @Override public void onServiceChanged(    SyncAdapterType type,    int userId,    boolean removed){
      if (!removed) {
        scheduleSync(null,UserHandle.USER_ALL,SyncOperation.REASON_SERVICE_CHANGED,type.authority,null,0,0,false);
      }
    }
  }
,mSyncHandler);
  mRand=new Random(System.currentTimeMillis());
  IntentFilter intentFilter=new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION);
  context.registerReceiver(mConnectivityIntentReceiver,intentFilter);
  if (!factoryTest) {
    intentFilter=new IntentFilter(Intent.ACTION_BOOT_COMPLETED);
    intentFilter.setPriority(IntentFilter.SYSTEM_HIGH_PRIORITY);
    context.registerReceiver(mBootCompletedReceiver,intentFilter);
  }
  intentFilter=new IntentFilter(Intent.ACTION_DEVICE_STORAGE_LOW);
  intentFilter.addAction(Intent.ACTION_DEVICE_STORAGE_OK);
  context.registerReceiver(mStorageIntentReceiver,intentFilter);
  intentFilter=new IntentFilter(Intent.ACTION_SHUTDOWN);
  intentFilter.setPriority(100);
  context.registerReceiver(mShutdownIntentReceiver,intentFilter);
  intentFilter=new IntentFilter();
  intentFilter.addAction(Intent.ACTION_USER_REMOVED);
  intentFilter.addAction(Intent.ACTION_USER_UNLOCKED);
  intentFilter.addAction(Intent.ACTION_USER_STOPPED);
  mContext.registerReceiverAsUser(mUserIntentReceiver,UserHandle.ALL,intentFilter,null,null);
  if (!factoryTest) {
    mNotificationMgr=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);
  }
 else {
    mNotificationMgr=null;
  }
  mPowerManager=(PowerManager)context.getSystemService(Context.POWER_SERVICE);
  mUserManager=(UserManager)mContext.getSystemService(Context.USER_SERVICE);
  mBatteryStats=IBatteryStats.Stub.asInterface(ServiceManager.getService(BatteryStats.SERVICE_NAME));
  mHandleAlarmWakeLock=mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,HANDLE_SYNC_ALARM_WAKE_LOCK);
  mHandleAlarmWakeLock.setReferenceCounted(false);
  mSyncManagerWakeLock=mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,SYNC_LOOP_WAKE_LOCK);
  mSyncManagerWakeLock.setReferenceCounted(false);
  mProvisioned=isDeviceProvisioned();
  if (!mProvisioned) {
    final ContentResolver resolver=context.getContentResolver();
    ContentObserver provisionedObserver=new ContentObserver(null){
      public void onChange(      boolean selfChange){
        mProvisioned|=isDeviceProvisioned();
        if (mProvisioned) {
          mSyncHandler.onDeviceProvisioned();
          resolver.unregisterContentObserver(this);
        }
      }
    }
;
synchronized (mSyncHandler) {
      resolver.registerContentObserver(Settings.Global.getUriFor(Settings.Global.DEVICE_PROVISIONED),false,provisionedObserver);
      mProvisioned|=isDeviceProvisioned();
      if (mProvisioned) {
        resolver.unregisterContentObserver(provisionedObserver);
      }
    }
  }
  if (!factoryTest) {
    mContext.registerReceiverAsUser(mAccountsUpdatedReceiver,UserHandle.ALL,new IntentFilter(AccountManager.LOGIN_ACCOUNTS_CHANGED_ACTION),null,null);
  }
  final Intent startServiceIntent=new Intent(mContext,SyncJobService.class);
  startServiceIntent.putExtra(SyncJobService.EXTRA_MESSENGER,new Messenger(mSyncHandler));
  new Handler(mContext.getMainLooper()).post(new Runnable(){
    @Override public void run(){
      mContext.startService(startServiceIntent);
    }
  }
);
}
