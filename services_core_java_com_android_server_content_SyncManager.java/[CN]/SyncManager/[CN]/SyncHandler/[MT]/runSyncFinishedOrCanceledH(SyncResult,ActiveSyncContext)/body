{
  final boolean isLoggable=Log.isLoggable(TAG,Log.VERBOSE);
  final SyncOperation syncOperation=activeSyncContext.mSyncOperation;
  final SyncStorageEngine.EndPoint info=syncOperation.target;
  if (activeSyncContext.mIsLinkedToDeath) {
    activeSyncContext.mSyncAdapter.asBinder().unlinkToDeath(activeSyncContext,0);
    activeSyncContext.mIsLinkedToDeath=false;
  }
  closeActiveSyncContext(activeSyncContext);
  final long elapsedTime=SystemClock.elapsedRealtime() - activeSyncContext.mStartTime;
  String historyMessage;
  int downstreamActivity;
  int upstreamActivity;
  if (!syncOperation.isPeriodic) {
    getJobScheduler().cancel(syncOperation.jobId);
  }
  if (syncResult != null) {
    if (isLoggable) {
      Slog.v(TAG,"runSyncFinishedOrCanceled [finished]: " + syncOperation + ", result "+ syncResult);
    }
    if (!syncResult.hasError()) {
      historyMessage=SyncStorageEngine.MESG_SUCCESS;
      downstreamActivity=0;
      upstreamActivity=0;
      clearBackoffSetting(syncOperation.target);
      if (syncOperation.isDerivedFromFailedPeriodicSync()) {
        reschedulePeriodicSyncH(syncOperation);
      }
    }
 else {
      Log.d(TAG,"failed sync operation " + syncOperation + ", "+ syncResult);
      increaseBackoffSetting(syncOperation.target);
      if (!syncOperation.isPeriodic) {
        maybeRescheduleSync(syncResult,syncOperation);
      }
 else {
        postScheduleSyncMessage(syncOperation.createOneTimeSyncOperation());
      }
      historyMessage=ContentResolver.syncErrorToString(syncResultToErrorNumber(syncResult));
      downstreamActivity=0;
      upstreamActivity=0;
    }
    setDelayUntilTime(syncOperation.target,syncResult.delayUntil);
  }
 else {
    if (isLoggable) {
      Slog.v(TAG,"runSyncFinishedOrCanceled [canceled]: " + syncOperation);
    }
    if (activeSyncContext.mSyncAdapter != null) {
      try {
        activeSyncContext.mSyncAdapter.cancelSync(activeSyncContext);
      }
 catch (      RemoteException e) {
      }
    }
    historyMessage=SyncStorageEngine.MESG_CANCELED;
    downstreamActivity=0;
    upstreamActivity=0;
  }
  stopSyncEvent(activeSyncContext.mHistoryRowId,syncOperation,historyMessage,upstreamActivity,downstreamActivity,elapsedTime);
  if (syncResult != null && syncResult.tooManyDeletions) {
    installHandleTooManyDeletesNotification(info.account,info.provider,syncResult.stats.numDeletes,info.userId);
  }
 else {
    mNotificationMgr.cancelAsUser(null,info.account.hashCode() ^ info.provider.hashCode(),new UserHandle(info.userId));
  }
  if (syncResult != null && syncResult.fullSyncRequested) {
    scheduleSyncOperationH(new SyncOperation(info.account,info.userId,syncOperation.owningUid,syncOperation.owningPackage,syncOperation.reason,syncOperation.syncSource,info.provider,new Bundle(),syncOperation.allowParallelSyncs));
  }
}
