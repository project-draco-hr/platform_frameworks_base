{
  final boolean isLoggable=Log.isLoggable(TAG,Log.VERBOSE);
  verifyJobScheduler();
  final long pollFrequencyMillis=pollFrequency * 1000L;
  final long flexMillis=flex * 1000L;
  if (isLoggable) {
    Slog.v(TAG,"Addition to periodic syncs requested: " + target + " period: "+ pollFrequency+ " flexMillis: "+ flex+ " extras: "+ extras.toString());
  }
  List<SyncOperation> ops=getAllPendingSyncsFromCache();
  for (  SyncOperation op : ops) {
    if (op.isPeriodic && op.target.matchesSpec(target) && syncExtrasEquals(op.extras,extras,true)) {
      maybeUpdateSyncPeriodH(op,pollFrequencyMillis,flexMillis);
      return;
    }
  }
  if (isLoggable) {
    Slog.v(TAG,"Adding new periodic sync: " + target + " period: "+ pollFrequency+ " flexMillis: "+ flex+ " extras: "+ extras.toString());
  }
  final RegisteredServicesCache.ServiceInfo<SyncAdapterType> syncAdapterInfo=mSyncAdapters.getServiceInfo(SyncAdapterType.newKey(target.provider,target.account.type),target.userId);
  if (syncAdapterInfo == null) {
    return;
  }
  SyncOperation op=new SyncOperation(target,syncAdapterInfo.uid,syncAdapterInfo.componentName.getPackageName(),SyncOperation.REASON_PERIODIC,SyncStorageEngine.SOURCE_PERIODIC,extras,syncAdapterInfo.type.allowParallelSyncs(),true,SyncOperation.NO_JOB_ID);
  op.periodMillis=pollFrequencyMillis;
  op.flexMillis=flexMillis;
  scheduleSyncOperationH(op);
  mSyncStorageEngine.reportChange(ContentResolver.SYNC_OBSERVER_TYPE_SETTINGS);
}
