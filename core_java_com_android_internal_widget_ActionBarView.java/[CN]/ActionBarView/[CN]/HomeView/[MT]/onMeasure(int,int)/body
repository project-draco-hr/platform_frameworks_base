{
  measureChildWithMargins(mUpView,widthMeasureSpec,0,heightMeasureSpec,0);
  final LayoutParams upLp=(LayoutParams)mUpView.getLayoutParams();
  final int upMargins=upLp.leftMargin + upLp.rightMargin;
  mUpWidth=mUpView.getMeasuredWidth();
  mStartOffset=mUpWidth + upMargins;
  int width=mUpView.getVisibility() == GONE ? 0 : mStartOffset;
  int height=upLp.topMargin + mUpView.getMeasuredHeight() + upLp.bottomMargin;
  if (mIconView.getVisibility() != GONE) {
    measureChildWithMargins(mIconView,widthMeasureSpec,width,heightMeasureSpec,0);
    final LayoutParams iconLp=(LayoutParams)mIconView.getLayoutParams();
    width+=iconLp.leftMargin + mIconView.getMeasuredWidth() + iconLp.rightMargin;
    height=Math.max(height,iconLp.topMargin + mIconView.getMeasuredHeight() + iconLp.bottomMargin);
  }
 else   if (upMargins < 0) {
    width-=upMargins;
  }
  final int widthMode=MeasureSpec.getMode(widthMeasureSpec);
  final int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  final int widthSize=MeasureSpec.getSize(widthMeasureSpec);
  final int heightSize=MeasureSpec.getSize(heightMeasureSpec);
switch (widthMode) {
case MeasureSpec.AT_MOST:
    width=Math.min(width,widthSize);
  break;
case MeasureSpec.EXACTLY:
width=widthSize;
break;
case MeasureSpec.UNSPECIFIED:
default :
break;
}
switch (heightMode) {
case MeasureSpec.AT_MOST:
height=Math.min(height,heightSize);
break;
case MeasureSpec.EXACTLY:
height=heightSize;
break;
case MeasureSpec.UNSPECIFIED:
default :
break;
}
setMeasuredDimension(width,height);
}
