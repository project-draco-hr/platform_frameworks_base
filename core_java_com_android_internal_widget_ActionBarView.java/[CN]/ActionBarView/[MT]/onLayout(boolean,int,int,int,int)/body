{
  int x=getPaddingLeft();
  final int y=getPaddingTop();
  final int contentHeight=b - t - getPaddingTop()- getPaddingBottom();
  if (mHomeLayout.getVisibility() != GONE) {
    x+=positionChild(mHomeLayout,x,y,contentHeight);
  }
  final boolean showTitle=mTitleLayout != null && (mDisplayOptions & ActionBar.DISPLAY_SHOW_TITLE) != 0;
  if (showTitle) {
    x+=positionChild(mTitleLayout,x,y,contentHeight);
  }
switch (mNavigationMode) {
case ActionBar.NAVIGATION_MODE_STANDARD:
    break;
case ActionBar.NAVIGATION_MODE_LIST:
  if (mListNavLayout != null) {
    if (showTitle)     x+=mItemPadding;
    x+=positionChild(mListNavLayout,x,y,contentHeight) + mItemPadding;
  }
break;
case ActionBar.NAVIGATION_MODE_TABS:
if (mTabScrollView != null) {
if (showTitle) x+=mItemPadding;
x+=positionChild(mTabScrollView,x,y,contentHeight) + mItemPadding;
}
break;
}
int menuLeft=r - l - getPaddingRight();
if (mMenuView != null) {
positionChildInverse(mMenuView,menuLeft,y,contentHeight);
menuLeft-=mMenuView.getMeasuredWidth();
}
if (mIndeterminateProgressView != null && mIndeterminateProgressView.getVisibility() != GONE) {
positionChildInverse(mIndeterminateProgressView,menuLeft,y,contentHeight);
menuLeft-=mIndeterminateProgressView.getMeasuredWidth();
}
if (mCustomNavView != null && (mDisplayOptions & ActionBar.DISPLAY_SHOW_CUSTOM) != 0) {
LayoutParams lp=mCustomNavView.getLayoutParams();
final ActionBar.LayoutParams ablp=lp instanceof ActionBar.LayoutParams ? (ActionBar.LayoutParams)lp : null;
final int gravity=ablp != null ? ablp.gravity : DEFAULT_CUSTOM_GRAVITY;
final int navWidth=mCustomNavView.getMeasuredWidth();
int topMargin=0;
int bottomMargin=0;
if (ablp != null) {
x+=ablp.leftMargin;
menuLeft-=ablp.rightMargin;
topMargin=ablp.topMargin;
bottomMargin=ablp.bottomMargin;
}
int hgravity=gravity & Gravity.HORIZONTAL_GRAVITY_MASK;
if (hgravity == Gravity.CENTER_HORIZONTAL) {
final int centeredLeft=((mRight - mLeft) - navWidth) / 2;
if (centeredLeft < x) {
hgravity=Gravity.LEFT;
}
 else if (centeredLeft + navWidth > menuLeft) {
hgravity=Gravity.RIGHT;
}
}
int xpos=0;
switch (hgravity) {
case Gravity.CENTER_HORIZONTAL:
xpos=((mRight - mLeft) - navWidth) / 2;
break;
case Gravity.LEFT:
xpos=x;
break;
case Gravity.RIGHT:
xpos=menuLeft - navWidth;
break;
}
int ypos=0;
switch (gravity & Gravity.VERTICAL_GRAVITY_MASK) {
case Gravity.CENTER_VERTICAL:
final int paddedTop=mTop + getPaddingTop();
final int paddedBottom=mBottom - getPaddingBottom();
ypos=((paddedBottom - paddedTop) - mCustomNavView.getMeasuredHeight()) / 2;
break;
case Gravity.TOP:
ypos=getPaddingTop() + topMargin;
break;
case Gravity.BOTTOM:
ypos=getHeight() - getPaddingBottom() - mCustomNavView.getMeasuredHeight()- bottomMargin;
break;
}
x+=positionChild(mCustomNavView,xpos,ypos,contentHeight);
}
if (mProgressView != null) {
mProgressView.bringToFront();
final int halfProgressHeight=mProgressView.getMeasuredHeight() / 2;
mProgressView.layout(mProgressBarPadding,-halfProgressHeight,mProgressBarPadding + mProgressView.getMeasuredWidth(),halfProgressHeight);
}
}
