{
  final int contentHeight=b - t - getPaddingTop()- getPaddingBottom();
  if (contentHeight <= 0) {
    return;
  }
  final boolean isLayoutRtl=isLayoutRtl();
  final int direction=isLayoutRtl ? +1 : -1;
  int menuStart=isLayoutRtl ? getPaddingLeft() : r - l - getPaddingRight();
  int x=isLayoutRtl ? r - l - getPaddingRight() : getPaddingLeft();
  final int y=getPaddingTop();
  HomeView homeLayout=mExpandedActionView != null ? mExpandedHomeLayout : mHomeLayout;
  boolean needsTouchDelegate=false;
  int homeSlop=mMaxHomeSlop;
  int homeRight=0;
  if (homeLayout.getVisibility() != GONE) {
    final int startOffset=homeLayout.getStartOffset();
    x+=positionChild(homeLayout,next(x,startOffset,isLayoutRtl),y,contentHeight,isLayoutRtl);
    x=next(x,startOffset,isLayoutRtl);
    needsTouchDelegate=homeLayout == mHomeLayout;
    homeRight=x;
  }
  if (mExpandedActionView == null) {
    final boolean showTitle=mTitleLayout != null && mTitleLayout.getVisibility() != GONE && (mDisplayOptions & ActionBar.DISPLAY_SHOW_TITLE) != 0;
    if (showTitle) {
      x+=positionChild(mTitleLayout,x,y,contentHeight,isLayoutRtl);
      homeSlop=mTitleLayout.getWidth();
    }
switch (mNavigationMode) {
case ActionBar.NAVIGATION_MODE_STANDARD:
      break;
case ActionBar.NAVIGATION_MODE_LIST:
    if (mListNavLayout != null) {
      if (showTitle) {
        x=next(x,mItemPadding,isLayoutRtl);
      }
      homeSlop=Math.min(homeSlop,Math.max(x - homeRight,0));
      x+=positionChild(mListNavLayout,x,y,contentHeight,isLayoutRtl);
      x=next(x,mItemPadding,isLayoutRtl);
    }
  break;
case ActionBar.NAVIGATION_MODE_TABS:
if (mTabScrollView != null) {
  if (showTitle)   x=next(x,mItemPadding,isLayoutRtl);
  homeSlop=Math.min(homeSlop,Math.max(x - homeRight,0));
  x+=positionChild(mTabScrollView,x,y,contentHeight,isLayoutRtl);
  x=next(x,mItemPadding,isLayoutRtl);
}
break;
}
}
if (mMenuView != null && mMenuView.getParent() == this) {
positionChild(mMenuView,menuStart,y,contentHeight,!isLayoutRtl);
menuStart+=direction * mMenuView.getMeasuredWidth();
}
if (mIndeterminateProgressView != null && mIndeterminateProgressView.getVisibility() != GONE) {
positionChild(mIndeterminateProgressView,menuStart,y,contentHeight,!isLayoutRtl);
menuStart+=direction * mIndeterminateProgressView.getMeasuredWidth();
}
View customView=null;
if (mExpandedActionView != null) {
customView=mExpandedActionView;
}
 else if ((mDisplayOptions & ActionBar.DISPLAY_SHOW_CUSTOM) != 0 && mCustomNavView != null) {
customView=mCustomNavView;
}
if (customView != null) {
final int layoutDirection=getLayoutDirection();
ViewGroup.LayoutParams lp=customView.getLayoutParams();
final ActionBar.LayoutParams ablp=lp instanceof ActionBar.LayoutParams ? (ActionBar.LayoutParams)lp : null;
final int gravity=ablp != null ? ablp.gravity : DEFAULT_CUSTOM_GRAVITY;
final int navWidth=customView.getMeasuredWidth();
int topMargin=0;
int bottomMargin=0;
if (ablp != null) {
x=next(x,ablp.getMarginStart(),isLayoutRtl);
menuStart+=direction * ablp.getMarginEnd();
topMargin=ablp.topMargin;
bottomMargin=ablp.bottomMargin;
}
int hgravity=gravity & Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK;
if (hgravity == Gravity.CENTER_HORIZONTAL) {
final int centeredLeft=((mRight - mLeft) - navWidth) / 2;
if (isLayoutRtl) {
final int centeredStart=centeredLeft + navWidth;
final int centeredEnd=centeredLeft;
if (centeredStart > x) {
hgravity=Gravity.RIGHT;
}
 else if (centeredEnd < menuStart) {
hgravity=Gravity.LEFT;
}
}
 else {
final int centeredStart=centeredLeft;
final int centeredEnd=centeredLeft + navWidth;
if (centeredStart < x) {
hgravity=Gravity.LEFT;
}
 else if (centeredEnd > menuStart) {
hgravity=Gravity.RIGHT;
}
}
}
 else if (gravity == Gravity.NO_GRAVITY) {
hgravity=Gravity.START;
}
int xpos=0;
switch (Gravity.getAbsoluteGravity(hgravity,layoutDirection)) {
case Gravity.CENTER_HORIZONTAL:
xpos=((mRight - mLeft) - navWidth) / 2;
break;
case Gravity.LEFT:
xpos=isLayoutRtl ? menuStart : x;
break;
case Gravity.RIGHT:
xpos=isLayoutRtl ? x - navWidth : menuStart - navWidth;
break;
}
int vgravity=gravity & Gravity.VERTICAL_GRAVITY_MASK;
if (gravity == Gravity.NO_GRAVITY) {
vgravity=Gravity.CENTER_VERTICAL;
}
int ypos=0;
switch (vgravity) {
case Gravity.CENTER_VERTICAL:
final int paddedTop=getPaddingTop();
final int paddedBottom=mBottom - mTop - getPaddingBottom();
ypos=((paddedBottom - paddedTop) - customView.getMeasuredHeight()) / 2;
break;
case Gravity.TOP:
ypos=getPaddingTop() + topMargin;
break;
case Gravity.BOTTOM:
ypos=getHeight() - getPaddingBottom() - customView.getMeasuredHeight()- bottomMargin;
break;
}
final int customWidth=customView.getMeasuredWidth();
customView.layout(xpos,ypos,xpos + customWidth,ypos + customView.getMeasuredHeight());
homeSlop=Math.min(homeSlop,Math.max(xpos - homeRight,0));
x=next(x,customWidth,isLayoutRtl);
}
if (mProgressView != null) {
mProgressView.bringToFront();
final int halfProgressHeight=mProgressView.getMeasuredHeight() / 2;
mProgressView.layout(mProgressBarPadding,-halfProgressHeight,mProgressBarPadding + mProgressView.getMeasuredWidth(),halfProgressHeight);
}
if (needsTouchDelegate) {
mTempRect.set(homeLayout.getLeft(),homeLayout.getTop(),homeLayout.getRight() + homeSlop,homeLayout.getBottom());
setTouchDelegate(new TouchDelegate(mTempRect,homeLayout));
}
 else {
setTouchDelegate(null);
}
}
