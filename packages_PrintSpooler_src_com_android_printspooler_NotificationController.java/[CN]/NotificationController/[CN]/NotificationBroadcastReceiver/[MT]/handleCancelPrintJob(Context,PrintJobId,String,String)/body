{
  if (DEBUG) {
    Log.i(LOG_TAG,"handleCancelPrintJob() printJobId:" + printJobId);
  }
  NotificationManager notificationManager=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);
  Notification.Builder builder=new Notification.Builder(context).setSmallIcon(R.drawable.stat_notify_cancelling).setContentTitle(context.getString(R.string.cancelling_notification_title_template,printJobLabel)).setContentText(printerName).setWhen(System.currentTimeMillis()).setOngoing(true).setShowWhen(true);
  notificationManager.notify(printJobId.flattenToString(),0,builder.build());
  PowerManager powerManager=(PowerManager)context.getSystemService(Context.POWER_SERVICE);
  final WakeLock wakeLock=powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,LOG_TAG);
  wakeLock.acquire();
  new AsyncTask<Void,Void,Void>(){
    @Override protected Void doInBackground(    Void... params){
      try {
        IPrintManager printManager=IPrintManager.Stub.asInterface(ServiceManager.getService(Context.PRINT_SERVICE));
        printManager.cancelPrintJob(printJobId,PrintManager.APP_ID_ANY,UserHandle.myUserId());
      }
 catch (      RemoteException re) {
        Log.i(LOG_TAG,"Error requestion print job cancellation",re);
      }
 finally {
        wakeLock.release();
      }
      return null;
    }
  }
.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,(Void[])null);
}
