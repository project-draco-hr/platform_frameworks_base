{
  boolean result=false;
  String msg="test2_1ListenerCapture()";
  AudioEffect vc=null;
  MediaPlayer mp=null;
  AudioManager am=(AudioManager)getActivity().getSystemService(Context.AUDIO_SERVICE);
  int ringerMode=am.getRingerMode();
  am.setRingerMode(AudioManager.RINGER_MODE_NORMAL);
  int volume=am.getStreamMaxVolume(AudioManager.STREAM_MUSIC);
  am.setStreamVolume(AudioManager.STREAM_MUSIC,am.getStreamMaxVolume(AudioManager.STREAM_MUSIC),0);
  try {
    vc=new AudioEffect(AudioEffect.EFFECT_TYPE_NULL,VOLUME_EFFECT_UUID,0,0);
    vc.setEnabled(true);
    mp=new MediaPlayer();
    mp.setDataSource(MediaNames.SINE_200_1000);
    mp.setAudioStreamType(AudioManager.STREAM_MUSIC);
    getVisualizer(mp.getAudioSessionId());
    createListenerLooper();
synchronized (lock) {
      try {
        lock.wait(1000);
      }
 catch (      Exception e) {
        Log.e(TAG,"Looper creation: wait was interrupted.");
      }
    }
    assertTrue(mInitialized);
    mVisualizer.setEnabled(true);
synchronized (lock) {
      try {
        mCaptureWaveform=true;
        lock.wait(1000);
        mCaptureWaveform=false;
      }
 catch (      Exception e) {
        Log.e(TAG,"Capture waveform: wait was interrupted.");
      }
    }
    assertNotNull(msg + ": waveform capture failed",mWaveform);
    int energy=computeEnergy(mWaveform,true);
    assertEquals(msg + ": getWaveForm reports energy for silence",0,energy);
synchronized (lock) {
      try {
        mCaptureFft=true;
        lock.wait(1000);
        mCaptureFft=false;
      }
 catch (      Exception e) {
        Log.e(TAG,"Capture FFT: wait was interrupted.");
      }
    }
    assertNotNull(msg + ": FFT capture failed",mFft);
    energy=computeEnergy(mFft,false);
    assertEquals(msg + ": getFft reports energy for silence",0,energy);
    mp.prepare();
    mp.start();
    Thread.sleep(500);
synchronized (lock) {
      try {
        mCaptureWaveform=true;
        lock.wait(1000);
        mCaptureWaveform=false;
      }
 catch (      Exception e) {
        Log.e(TAG,"Capture waveform: wait was interrupted.");
      }
    }
    assertNotNull(msg + ": waveform capture failed",mWaveform);
    energy=computeEnergy(mWaveform,true);
    assertTrue(msg + ": getWaveForm reads insufficient level",energy > 0);
synchronized (lock) {
      try {
        mCaptureFft=true;
        lock.wait(1000);
        mCaptureFft=false;
      }
 catch (      Exception e) {
        Log.e(TAG,"Capture FFT: wait was interrupted.");
      }
    }
    assertNotNull(msg + ": FFT capture failed",mFft);
    energy=computeEnergy(mFft,false);
    assertTrue(msg + ": getFft reads insufficient level",energy > 0);
    result=true;
  }
 catch (  IllegalArgumentException e) {
    msg=msg.concat(": Bad parameter value");
    loge(msg,"Bad parameter value");
  }
catch (  UnsupportedOperationException e) {
    msg=msg.concat(": get parameter() rejected");
    loge(msg,"get parameter() rejected");
  }
catch (  IllegalStateException e) {
    msg=msg.concat("get parameter() called in wrong state");
    loge(msg,"get parameter() called in wrong state");
  }
catch (  InterruptedException e) {
    loge(msg,"sleep() interrupted");
  }
 finally {
    terminateListenerLooper();
    releaseVisualizer();
    if (mp != null) {
      mp.release();
    }
    if (vc != null) {
      vc.release();
    }
    am.setStreamVolume(AudioManager.STREAM_MUSIC,volume,0);
    am.setRingerMode(ringerMode);
  }
  assertTrue(msg,result);
}
