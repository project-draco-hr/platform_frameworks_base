{
  boolean result=false;
  String msg="test2_2PollingCaptureVolumeScaling()";
  AudioEffect vc=null;
  MediaPlayer mp=null;
  AudioManager am=(AudioManager)getActivity().getSystemService(Context.AUDIO_SERVICE);
  int ringerMode=am.getRingerMode();
  am.setRingerMode(AudioManager.RINGER_MODE_NORMAL);
  final int volMax=am.getStreamMaxVolume(AudioManager.STREAM_MUSIC);
  am.setStreamVolume(AudioManager.STREAM_MUSIC,volMax,0);
  try {
    vc=new AudioEffect(AudioEffect.EFFECT_TYPE_NULL,VOLUME_EFFECT_UUID,0,0);
    vc.setEnabled(true);
    mp=new MediaPlayer();
    mp.setDataSource(MediaNames.SINE_200_1000);
    mp.setAudioStreamType(AudioManager.STREAM_MUSIC);
    getVisualizer(mp.getAudioSessionId());
    mVisualizer.setScalingMode(Visualizer.SCALING_MODE_AS_PLAYED);
    assertTrue(msg + " get volume scaling doesn't return SCALING_MODE_AS_PLAYED",mVisualizer.getScalingMode() == Visualizer.SCALING_MODE_AS_PLAYED);
    mVisualizer.setEnabled(true);
    mp.prepare();
    mp.start();
    Thread.sleep(500);
    byte[] data=new byte[mVisualizer.getCaptureSize()];
    mVisualizer.getWaveForm(data);
    int energyAtVolMax=computeEnergy(data,true);
    assertTrue(msg + ": getWaveForm reads insufficient level",energyAtVolMax > 0);
    log(msg," engergy at max volume = " + energyAtVolMax);
    am.setStreamVolume(AudioManager.STREAM_MUSIC,(volMax * 2) / 3,0);
    Thread.sleep(500);
    mVisualizer.getWaveForm(data);
    int energyAtLowerVol=computeEnergy(data,true);
    assertTrue(msg + ": getWaveForm at lower volume reads insufficient level",energyAtLowerVol > 0);
    log(msg,"energy at lower volume = " + energyAtLowerVol);
    assertTrue(msg + ": getWaveForm didn't report lower energy when volume decreases",energyAtVolMax > energyAtLowerVol);
    result=true;
  }
 catch (  IllegalArgumentException e) {
    msg=msg.concat(": IllegalArgumentException");
    loge(msg," hit exception " + e);
  }
catch (  UnsupportedOperationException e) {
    msg=msg.concat(": UnsupportedOperationException");
    loge(msg," hit exception " + e);
  }
catch (  IllegalStateException e) {
    msg=msg.concat("IllegalStateException");
    loge(msg," hit exception " + e);
  }
catch (  InterruptedException e) {
    loge(msg," sleep() interrupted");
  }
 finally {
    releaseVisualizer();
    if (mp != null) {
      mp.release();
    }
    if (vc != null) {
      vc.release();
    }
    am.setRingerMode(ringerMode);
  }
  assertTrue(msg,result);
}
