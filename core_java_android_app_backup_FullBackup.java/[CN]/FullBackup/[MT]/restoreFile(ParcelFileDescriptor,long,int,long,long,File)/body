{
  if (type == BackupAgent.TYPE_DIRECTORY) {
    if (outFile != null)     outFile.mkdirs();
  }
 else {
    FileOutputStream out=null;
    try {
      if (outFile != null) {
        File parent=outFile.getParentFile();
        if (!parent.exists()) {
          parent.mkdirs();
        }
        out=new FileOutputStream(outFile);
      }
    }
 catch (    IOException e) {
      Log.e(TAG,"Unable to create/open file " + outFile.getPath(),e);
    }
    byte[] buffer=new byte[32 * 1024];
    final long origSize=size;
    FileInputStream in=new FileInputStream(data.getFileDescriptor());
    while (size > 0) {
      int toRead=(size > buffer.length) ? buffer.length : (int)size;
      int got=in.read(buffer,0,toRead);
      if (got <= 0) {
        Log.w(TAG,"Incomplete read: expected " + size + " but got "+ (origSize - size));
        break;
      }
      if (out != null) {
        try {
          out.write(buffer,0,got);
        }
 catch (        IOException e) {
          Log.e(TAG,"Unable to write to file " + outFile.getPath(),e);
          out.close();
          out=null;
          outFile.delete();
        }
      }
      size-=got;
    }
    if (out != null)     out.close();
  }
  if (mode >= 0 && outFile != null) {
    try {
      mode&=0700;
      Libcore.os.chmod(outFile.getPath(),(int)mode);
    }
 catch (    ErrnoException e) {
      e.rethrowAsIOException();
    }
    outFile.setLastModified(mtime);
  }
}
