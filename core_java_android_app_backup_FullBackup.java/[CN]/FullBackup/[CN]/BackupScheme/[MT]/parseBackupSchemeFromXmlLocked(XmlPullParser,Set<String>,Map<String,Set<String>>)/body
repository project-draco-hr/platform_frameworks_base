{
  int event=parser.getEventType();
  while (event != XmlPullParser.START_TAG) {
    event=parser.next();
  }
  if (!"full-backup-content".equals(parser.getName())) {
    throw new XmlPullParserException("Xml file didn't start with correct tag" + " (<full-backup-content>). Found \"" + parser.getName() + "\"");
  }
  if (Log.isLoggable(TAG_XML_PARSER,Log.VERBOSE)) {
    Log.v(TAG_XML_PARSER,"\n");
    Log.v(TAG_XML_PARSER,"====================================================");
    Log.v(TAG_XML_PARSER,"Found valid fullBackupContent; parsing xml resource.");
    Log.v(TAG_XML_PARSER,"====================================================");
    Log.v(TAG_XML_PARSER,"");
  }
  while ((event=parser.next()) != XmlPullParser.END_DOCUMENT) {
switch (event) {
case XmlPullParser.START_TAG:
      validateInnerTagContents(parser);
    final String domainFromXml=parser.getAttributeValue(null,"domain");
  final File domainDirectory=getDirectoryForCriteriaDomain(domainFromXml);
if (domainDirectory == null) {
  if (Log.isLoggable(TAG_XML_PARSER,Log.VERBOSE)) {
    Log.v(TAG_XML_PARSER,"...parsing \"" + parser.getName() + "\": "+ "domain=\""+ domainFromXml+ "\" invalid; skipping");
  }
  break;
}
final File canonicalFile=extractCanonicalFile(domainDirectory,parser.getAttributeValue(null,"path"));
if (canonicalFile == null) {
break;
}
Set<String> activeSet=parseCurrentTagForDomain(parser,excludes,includes,domainFromXml);
activeSet.add(canonicalFile.getCanonicalPath());
if (Log.isLoggable(TAG_XML_PARSER,Log.VERBOSE)) {
Log.v(TAG_XML_PARSER,"...parsed " + canonicalFile.getCanonicalPath() + " for domain \""+ domainFromXml+ "\"");
}
if ("database".equals(domainFromXml) && !canonicalFile.isDirectory()) {
final String canonicalJournalPath=canonicalFile.getCanonicalPath() + "-journal";
activeSet.add(canonicalJournalPath);
if (Log.isLoggable(TAG_XML_PARSER,Log.VERBOSE)) {
Log.v(TAG_XML_PARSER,"...automatically generated " + canonicalJournalPath + ". Ignore if nonexistent.");
}
final String canonicalWalPath=canonicalFile.getCanonicalPath() + "-wal";
activeSet.add(canonicalWalPath);
if (Log.isLoggable(TAG_XML_PARSER,Log.VERBOSE)) {
Log.v(TAG_XML_PARSER,"...automatically generated " + canonicalWalPath + ". Ignore if nonexistent.");
}
}
if ("sharedpref".equals(domainFromXml) && !canonicalFile.isDirectory() && !canonicalFile.getCanonicalPath().endsWith(".xml")) {
final String canonicalXmlPath=canonicalFile.getCanonicalPath() + ".xml";
activeSet.add(canonicalXmlPath);
if (Log.isLoggable(TAG_XML_PARSER,Log.VERBOSE)) {
Log.v(TAG_XML_PARSER,"...automatically generated " + canonicalXmlPath + ". Ignore if nonexistent.");
}
}
}
}
if (Log.isLoggable(TAG_XML_PARSER,Log.VERBOSE)) {
Log.v(TAG_XML_PARSER,"\n");
Log.v(TAG_XML_PARSER,"Xml resource parsing complete.");
Log.v(TAG_XML_PARSER,"Final tally.");
Log.v(TAG_XML_PARSER,"Includes:");
if (includes.isEmpty()) {
Log.v(TAG_XML_PARSER,"  ...nothing specified (This means the entirety of app" + " data minus excludes)");
}
 else {
for (Map.Entry<String,Set<String>> entry : includes.entrySet()) {
Log.v(TAG_XML_PARSER,"  domain=" + entry.getKey());
for (String includeData : entry.getValue()) {
Log.v(TAG_XML_PARSER,"  " + includeData);
}
}
}
Log.v(TAG_XML_PARSER,"Excludes:");
if (excludes.isEmpty()) {
Log.v(TAG_XML_PARSER,"  ...nothing to exclude.");
}
 else {
for (String excludeData : excludes) {
Log.v(TAG_XML_PARSER,"  " + excludeData);
}
}
Log.v(TAG_XML_PARSER,"  ");
Log.v(TAG_XML_PARSER,"====================================================");
Log.v(TAG_XML_PARSER,"\n");
}
}
