{
  String ssid=config.SSID;
  config.SSID=convertToQuotedString(ssid);
  if (!mWifiManager.isWifiEnabled()) {
    log("Wifi is not enabled, enable it");
    mWifiManager.setWifiEnabled(true);
    if (!waitForWifiState(WifiManager.WIFI_STATE_ENABLED,2 * SHORT_TIMEOUT)) {
      log("wait for WIFI_STATE_ENABLED failed");
      return false;
    }
  }
  boolean foundApInScanResults=false;
  for (int retry=0; retry < 5; retry++) {
    List<ScanResult> netList=mWifiManager.getScanResults();
    if (netList != null) {
      log("size of scan result list: " + netList.size());
      for (int i=0; i < netList.size(); i++) {
        ScanResult sr=netList.get(i);
        if (sr.SSID.equals(ssid)) {
          log("found " + ssid + " in the scan result list");
          log("retry: " + retry);
          foundApInScanResults=true;
          mWifiManager.connectNetwork(config);
          break;
        }
      }
    }
    if (foundApInScanResults) {
      return true;
    }
 else {
      mWifiManager.startScanActive();
      mScanResultIsAvailable=false;
      long startTime=System.currentTimeMillis();
      while (!mScanResultIsAvailable) {
        if ((System.currentTimeMillis() - startTime) > WIFI_SCAN_TIMEOUT) {
          log("wait for scan results timeout");
          return false;
        }
synchronized (this) {
          try {
            this.wait(WAIT_FOR_SCAN_RESULT);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          if ((mWifiManager.getScanResults() == null) || (mWifiManager.getScanResults().size() <= 0)) {
            continue;
          }
          mScanResultIsAvailable=true;
        }
      }
    }
  }
  return false;
}
