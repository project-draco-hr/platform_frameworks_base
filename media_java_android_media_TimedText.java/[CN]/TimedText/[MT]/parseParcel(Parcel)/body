{
  parcel.setDataPosition(0);
  if (parcel.dataAvail() == 0) {
    return false;
  }
  int type=parcel.readInt();
  if (type == KEY_LOCAL_SETTING) {
    type=parcel.readInt();
    if (type != KEY_START_TIME) {
      return false;
    }
    int mStartTimeMs=parcel.readInt();
    mKeyObjectMap.put(type,mStartTimeMs);
    type=parcel.readInt();
    if (type != KEY_STRUCT_TEXT) {
      return false;
    }
    int textLen=parcel.readInt();
    byte[] text=parcel.createByteArray();
    if (text == null || text.length == 0) {
      mTextChars=null;
    }
 else {
      mTextChars=new String(text);
    }
  }
 else   if (type != KEY_GLOBAL_SETTING) {
    Log.w(TAG,"Invalid timed text key found: " + type);
    return false;
  }
  while (parcel.dataAvail() > 0) {
    int key=parcel.readInt();
    if (!isValidKey(key)) {
      Log.w(TAG,"Invalid timed text key found: " + key);
      return false;
    }
    Object object=null;
switch (key) {
case KEY_STRUCT_STYLE_LIST:
{
        readStyle(parcel);
        object=mStyleList;
        break;
      }
case KEY_STRUCT_FONT_LIST:
{
      readFont(parcel);
      object=mFontList;
      break;
    }
case KEY_STRUCT_HIGHLIGHT_LIST:
{
    readHighlight(parcel);
    object=mHighlightPosList;
    break;
  }
case KEY_STRUCT_KARAOKE_LIST:
{
  readKaraoke(parcel);
  object=mKaraokeList;
  break;
}
case KEY_STRUCT_HYPER_TEXT_LIST:
{
readHyperText(parcel);
object=mHyperTextList;
break;
}
case KEY_STRUCT_BLINKING_TEXT_LIST:
{
readBlinkingText(parcel);
object=mBlinkingPosList;
break;
}
case KEY_WRAP_TEXT:
{
mWrapText=parcel.readInt();
object=mWrapText;
break;
}
case KEY_HIGHLIGHT_COLOR_RGBA:
{
mHighlightColorRGBA=parcel.readInt();
object=mHighlightColorRGBA;
break;
}
case KEY_DISPLAY_FLAGS:
{
mDisplayFlags=parcel.readInt();
object=mDisplayFlags;
break;
}
case KEY_STRUCT_JUSTIFICATION:
{
int horizontal=parcel.readInt();
int vertical=parcel.readInt();
mJustification=new Justification(horizontal,vertical);
object=mJustification;
break;
}
case KEY_BACKGROUND_COLOR_RGBA:
{
mBackgroundColorRGBA=parcel.readInt();
object=mBackgroundColorRGBA;
break;
}
case KEY_STRUCT_TEXT_POS:
{
int top=parcel.readInt();
int left=parcel.readInt();
int bottom=parcel.readInt();
int right=parcel.readInt();
mTextBounds=new Rect(left,top,right,bottom);
break;
}
case KEY_SCROLL_DELAY:
{
mScrollDelay=parcel.readInt();
object=mScrollDelay;
break;
}
default :
{
break;
}
}
if (object != null) {
if (mKeyObjectMap.containsKey(key)) {
mKeyObjectMap.remove(key);
}
mKeyObjectMap.put(key,object);
}
}
return true;
}
