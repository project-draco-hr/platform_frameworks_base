{
  boolean endOfStyle=false;
  int startChar=-1;
  int endChar=-1;
  int fontId=-1;
  boolean isBold=false;
  boolean isItalic=false;
  boolean isUnderlined=false;
  int fontSize=-1;
  int colorRGBA=-1;
  while (!endOfStyle && (mParcel.dataAvail() > 0)) {
    int key=mParcel.readInt();
switch (key) {
case KEY_START_CHAR:
{
        startChar=mParcel.readInt();
        break;
      }
case KEY_END_CHAR:
{
      endChar=mParcel.readInt();
      break;
    }
case KEY_FONT_ID:
{
    fontId=mParcel.readInt();
    break;
  }
case KEY_STYLE_FLAGS:
{
  int flags=mParcel.readInt();
  isBold=((flags % 2) == 1);
  isItalic=((flags % 4) >= 2);
  isUnderlined=((flags / 4) == 1);
  break;
}
case KEY_FONT_SIZE:
{
fontSize=mParcel.readInt();
break;
}
case KEY_TEXT_COLOR_RGBA:
{
colorRGBA=mParcel.readInt();
break;
}
default :
{
mParcel.setDataPosition(mParcel.dataPosition() - 4);
endOfStyle=true;
break;
}
}
}
Style style=new Style(startChar,endChar,fontId,isBold,isItalic,isUnderlined,fontSize,colorRGBA);
if (mStyleList == null) {
mStyleList=new ArrayList<Style>();
}
mStyleList.add(style);
}
