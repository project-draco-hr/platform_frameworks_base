{
  if (getContext().checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println("Permission Denial: can't dump DeviceIdleController from from pid=" + Binder.getCallingPid() + ", uid="+ Binder.getCallingUid()+ " without permission "+ android.Manifest.permission.DUMP);
    return;
  }
  if (args != null) {
    for (int i=0; i < args.length; i++) {
      String arg=args[i];
      if ("-h".equals(arg)) {
        dumpHelp(pw);
        return;
      }
 else       if ("step".equals(arg)) {
synchronized (this) {
          stepIdleStateLocked();
          pw.print("Stepped to: ");
          pw.println(stateToString(mState));
        }
        return;
      }
 else       if (arg.length() > 0 && arg.charAt(0) == '-') {
        pw.println("Unknown option: " + arg);
        dumpHelp(pw);
        return;
      }
 else {
        pw.println("Unknown command: " + arg);
        dumpHelp(pw);
        return;
      }
    }
  }
synchronized (this) {
    pw.print("  mSigMotionSensor=");
    pw.println(mSigMotionSensor);
    pw.print("  mCurDisplay=");
    pw.println(mCurDisplay);
    pw.print("  mScreenOn=");
    pw.println(mScreenOn);
    pw.print("  mCharging=");
    pw.println(mCharging);
    pw.print("  mSigMotionActive=");
    pw.println(mSigMotionActive);
    pw.print("  mState=");
    pw.println(stateToString(mState));
    pw.print("  mInactiveTimeout=");
    TimeUtils.formatDuration(mInactiveTimeout,pw);
    pw.println();
    if (mNextAlarmTime != 0) {
      pw.print("  mNextAlarmTime=");
      TimeUtils.formatDuration(mNextAlarmTime,SystemClock.elapsedRealtime(),pw);
      pw.println();
    }
    if (mNextIdlePendingDelay != 0) {
      pw.print("  mNextIdlePendingDelay=");
      TimeUtils.formatDuration(mNextIdlePendingDelay,pw);
      pw.println();
    }
    if (mNextIdleDelay != 0) {
      pw.print("  mNextIdleDelay=");
      TimeUtils.formatDuration(mNextIdleDelay,pw);
      pw.println();
    }
  }
}
