{
  final AnimatorSet s1=getSequentialSet();
  final ArrayList<Animator> startedAnimators=new ArrayList<>();
  final ArrayList<Animator> canceledAnimators=new ArrayList<>();
  final ArrayList<Animator> endedAnimators=new ArrayList<>();
  final MyListener l1=new MyListener(){
    @Override public void onAnimationStart(    Animator anim){
      super.onAnimationStart(anim);
      startedAnimators.add(anim);
    }
    @Override public void onAnimationCancel(    Animator anim){
      super.onAnimationCancel(anim);
      canceledAnimators.add(anim);
    }
    @Override public void onAnimationEnd(    Animator anim){
      super.onAnimationEnd(anim);
      endedAnimators.add(anim);
    }
  }
;
  s1.addListener(l1);
  runTestOnUiThread(new Runnable(){
    @Override public void run(){
      assertFalse(l1.startIsCalled);
      assertFalse(l1.endIsCalled);
      s1.start();
    }
  }
);
  assertTrue(s1.isStarted());
  final AnimatorSet s2=s1.clone();
  final MyListener l2=new MyListener();
  s2.addListener(l2);
  Thread.sleep(POLL_INTERVAL);
  runTestOnUiThread(new Runnable(){
    @Override public void run(){
      s1.end();
    }
  }
);
  Thread.sleep(POLL_INTERVAL);
  runTestOnUiThread(new Runnable(){
    @Override public void run(){
      assertTrue(l1.startIsCalled);
      assertTrue(l1.endIsCalled);
    }
  }
);
  Thread.sleep(POLL_INTERVAL);
  final AnimatorSet s3=s1.clone();
  final MyListener l3=new MyListener();
  s3.addListener(l3);
  runTestOnUiThread(new Runnable(){
    @Override public void run(){
      assertFalse(l2.startIsCalled);
      assertFalse(l2.cancelIsCalled);
      assertFalse(l2.endIsCalled);
      assertFalse(l3.startIsCalled);
      assertFalse(l3.cancelIsCalled);
      assertFalse(l3.endIsCalled);
      s2.start();
      s3.start();
    }
  }
);
  Thread.sleep(POLL_INTERVAL);
  runTestOnUiThread(new Runnable(){
    @Override public void run(){
      assertTrue(l2.startIsCalled);
      assertTrue(l3.startIsCalled);
      assertFalse(l2.endIsCalled);
      assertFalse(l3.endIsCalled);
      assertFalse(l2.cancelIsCalled);
      assertFalse(l3.cancelIsCalled);
      s2.end();
      s3.cancel();
    }
  }
);
  Thread.sleep(POLL_INTERVAL);
  runTestOnUiThread(new Runnable(){
    @Override public void run(){
      assertTrue(l2.startIsCalled);
      assertFalse(l2.cancelIsCalled);
      assertTrue(l2.endIsCalled);
      assertTrue(l3.startIsCalled);
      assertTrue(l3.cancelIsCalled);
      assertTrue(l3.endIsCalled);
      assertTrue(onlyContains(startedAnimators,s1,s2,s3));
      assertTrue(onlyContains(canceledAnimators,s3));
      assertTrue(onlyContains(endedAnimators,s1,s2,s3));
    }
  }
);
}
