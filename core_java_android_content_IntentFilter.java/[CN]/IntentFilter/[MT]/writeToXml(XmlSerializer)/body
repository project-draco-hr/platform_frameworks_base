{
  int N=countActions();
  for (int i=0; i < N; i++) {
    serializer.startTag(null,ACTION_STR);
    serializer.attribute(null,NAME_STR,mActions.get(i));
    serializer.endTag(null,ACTION_STR);
  }
  N=countCategories();
  for (int i=0; i < N; i++) {
    serializer.startTag(null,CAT_STR);
    serializer.attribute(null,NAME_STR,mCategories.get(i));
    serializer.endTag(null,CAT_STR);
  }
  N=countDataTypes();
  for (int i=0; i < N; i++) {
    serializer.startTag(null,TYPE_STR);
    String type=mDataTypes.get(i);
    if (type.indexOf('/') < 0)     type=type + "/*";
    serializer.attribute(null,NAME_STR,type);
    serializer.endTag(null,TYPE_STR);
  }
  N=countDataSchemes();
  for (int i=0; i < N; i++) {
    serializer.startTag(null,SCHEME_STR);
    serializer.attribute(null,NAME_STR,mDataSchemes.get(i));
    serializer.endTag(null,SCHEME_STR);
  }
  N=countDataSchemeSpecificParts();
  for (int i=0; i < N; i++) {
    serializer.startTag(null,SSP_STR);
    PatternMatcher pe=mDataSchemeSpecificParts.get(i);
switch (pe.getType()) {
case PatternMatcher.PATTERN_LITERAL:
      serializer.attribute(null,LITERAL_STR,pe.getPath());
    break;
case PatternMatcher.PATTERN_PREFIX:
  serializer.attribute(null,PREFIX_STR,pe.getPath());
break;
case PatternMatcher.PATTERN_SIMPLE_GLOB:
serializer.attribute(null,SGLOB_STR,pe.getPath());
break;
}
serializer.endTag(null,SSP_STR);
}
N=countDataAuthorities();
for (int i=0; i < N; i++) {
serializer.startTag(null,AUTH_STR);
AuthorityEntry ae=mDataAuthorities.get(i);
serializer.attribute(null,HOST_STR,ae.getHost());
if (ae.getPort() >= 0) {
serializer.attribute(null,PORT_STR,Integer.toString(ae.getPort()));
}
serializer.endTag(null,AUTH_STR);
}
N=countDataPaths();
for (int i=0; i < N; i++) {
serializer.startTag(null,PATH_STR);
PatternMatcher pe=mDataPaths.get(i);
switch (pe.getType()) {
case PatternMatcher.PATTERN_LITERAL:
serializer.attribute(null,LITERAL_STR,pe.getPath());
break;
case PatternMatcher.PATTERN_PREFIX:
serializer.attribute(null,PREFIX_STR,pe.getPath());
break;
case PatternMatcher.PATTERN_SIMPLE_GLOB:
serializer.attribute(null,SGLOB_STR,pe.getPath());
break;
}
serializer.endTag(null,PATH_STR);
}
}
