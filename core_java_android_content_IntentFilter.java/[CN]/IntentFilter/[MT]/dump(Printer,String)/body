{
  StringBuilder sb=new StringBuilder(256);
  if (mActions.size() > 0) {
    Iterator<String> it=mActions.iterator();
    while (it.hasNext()) {
      sb.setLength(0);
      sb.append(prefix);
      sb.append("Action: \"");
      sb.append(it.next());
      sb.append("\"");
      du.println(sb.toString());
    }
  }
  if (mCategories != null) {
    Iterator<String> it=mCategories.iterator();
    while (it.hasNext()) {
      sb.setLength(0);
      sb.append(prefix);
      sb.append("Category: \"");
      sb.append(it.next());
      sb.append("\"");
      du.println(sb.toString());
    }
  }
  if (mDataSchemes != null) {
    Iterator<String> it=mDataSchemes.iterator();
    while (it.hasNext()) {
      sb.setLength(0);
      sb.append(prefix);
      sb.append("Scheme: \"");
      sb.append(it.next());
      sb.append("\"");
      du.println(sb.toString());
    }
  }
  if (mDataSchemeSpecificParts != null) {
    Iterator<PatternMatcher> it=mDataSchemeSpecificParts.iterator();
    while (it.hasNext()) {
      PatternMatcher pe=it.next();
      sb.setLength(0);
      sb.append(prefix);
      sb.append("Ssp: \"");
      sb.append(pe);
      sb.append("\"");
      du.println(sb.toString());
    }
  }
  if (mDataAuthorities != null) {
    Iterator<AuthorityEntry> it=mDataAuthorities.iterator();
    while (it.hasNext()) {
      AuthorityEntry ae=it.next();
      sb.setLength(0);
      sb.append(prefix);
      sb.append("Authority: \"");
      sb.append(ae.mHost);
      sb.append("\": ");
      sb.append(ae.mPort);
      if (ae.mWild)       sb.append(" WILD");
      du.println(sb.toString());
    }
  }
  if (mDataPaths != null) {
    Iterator<PatternMatcher> it=mDataPaths.iterator();
    while (it.hasNext()) {
      PatternMatcher pe=it.next();
      sb.setLength(0);
      sb.append(prefix);
      sb.append("Path: \"");
      sb.append(pe);
      sb.append("\"");
      du.println(sb.toString());
    }
  }
  if (mDataTypes != null) {
    Iterator<String> it=mDataTypes.iterator();
    while (it.hasNext()) {
      sb.setLength(0);
      sb.append(prefix);
      sb.append("Type: \"");
      sb.append(it.next());
      sb.append("\"");
      du.println(sb.toString());
    }
  }
  if (mPriority != 0 || mHasPartialTypes) {
    sb.setLength(0);
    sb.append(prefix);
    sb.append("mPriority=");
    sb.append(mPriority);
    sb.append(", mHasPartialTypes=");
    sb.append(mHasPartialTypes);
    du.println(sb.toString());
  }
{
    sb.setLength(0);
    sb.append(prefix);
    sb.append("AutoVerify=");
    sb.append(getAutoVerify());
    du.println(sb.toString());
  }
}
