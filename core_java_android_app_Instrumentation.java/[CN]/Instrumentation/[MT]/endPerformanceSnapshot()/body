{
  if (!isProfiling()) {
    long cpuTime=Process.getElapsedCpuTime();
    long duration=SystemClock.uptimeMillis();
    stopAllocCounting();
    long nativeMax=Debug.getNativeHeapSize() / 1024;
    long nativeAllocated=Debug.getNativeHeapAllocatedSize() / 1024;
    long nativeFree=Debug.getNativeHeapFreeSize() / 1024;
    Debug.MemoryInfo memInfo=new Debug.MemoryInfo();
    Debug.getMemoryInfo(memInfo);
    Runtime runtime=Runtime.getRuntime();
    long dalvikMax=runtime.totalMemory() / 1024;
    long dalvikFree=runtime.freeMemory() / 1024;
    long dalvikAllocated=dalvikMax - dalvikFree;
    Bundle binderCounts=getBinderCounts();
    for (    String key : binderCounts.keySet()) {
      addPerfMetricLong(key,binderCounts.getLong(key));
    }
    Bundle allocCounts=getAllocCounts();
    for (    String key : allocCounts.keySet()) {
      addPerfMetricLong(key,allocCounts.getLong(key));
    }
    addPerfMetricLong("execution_time",duration - mStart);
    addPerfMetricLong("pre_cpu_time",mPreCpuTime);
    addPerfMetricLong("cpu_time",cpuTime - mPreCpuTime);
    addPerfMetricLong("native_size",nativeMax);
    addPerfMetricLong("native_allocated",nativeAllocated);
    addPerfMetricLong("native_free",nativeFree);
    addPerfMetricInt("native_pss",memInfo.nativePss);
    addPerfMetricInt("native_private_dirty",memInfo.nativePrivateDirty);
    addPerfMetricInt("native_shared_dirty",memInfo.nativeSharedDirty);
    addPerfMetricLong("java_size",dalvikMax);
    addPerfMetricLong("java_allocated",dalvikAllocated);
    addPerfMetricLong("java_free",dalvikFree);
    addPerfMetricInt("java_pss",memInfo.dalvikPss);
    addPerfMetricInt("java_private_dirty",memInfo.dalvikPrivateDirty);
    addPerfMetricInt("java_shared_dirty",memInfo.dalvikSharedDirty);
    addPerfMetricInt("other_pss",memInfo.otherPss);
    addPerfMetricInt("other_private_dirty",memInfo.otherPrivateDirty);
    addPerfMetricInt("other_shared_dirty",memInfo.otherSharedDirty);
  }
}
