{
  boolean success=false;
  boolean allPrintJobsHandled=false;
  boolean allPrintJobsForServiceHandled=false;
  IPrintSpoolerClient client=null;
  PrintJobInfo queuedPrintJob=null;
  PrintJobInfo removedPrintJob=null;
synchronized (mLock) {
    if (mClient == null) {
      throw new IllegalStateException("Client cannot be null.");
    }
    client=mClient;
    PrintJobInfo printJob=getPrintJobInfo(printJobId,PrintManager.APP_ID_ANY);
    if (printJob != null && printJob.getState() < state) {
      success=true;
      printJob.setState(state);
switch (state) {
case PrintJobInfo.STATE_COMPLETED:
case PrintJobInfo.STATE_CANCELED:
{
          removedPrintJob=printJob;
          removePrintJobLocked(printJob);
          PrinterId printerId=printJob.getPrinterId();
          if (printerId == null) {
            return true;
          }
          allPrintJobsHandled=!hasActivePrintJobsLocked();
          allPrintJobsForServiceHandled=!hasActivePrintJobsForServiceLocked(printerId.getService());
        }
      break;
case PrintJobInfo.STATE_QUEUED:
{
      queuedPrintJob=new PrintJobInfo(printJob);
    }
  break;
}
if (DEBUG_PRINT_JOB_LIFECYCLE) {
Slog.i(LOG_TAG,"[STATUS CHANGED] " + printJob);
}
mPersistanceManager.writeStateLocked();
}
}
if (queuedPrintJob != null) {
callOnPrintJobQueuedQuietly(client,queuedPrintJob);
}
if (allPrintJobsForServiceHandled) {
callOnAllPrintJobsForServiceHandledQuietly(client,removedPrintJob.getPrinterId().getService());
}
if (allPrintJobsHandled) {
callOnAllPrintJobsHandledQuietly(client);
}
return success;
}
