{
  boolean success=false;
synchronized (mLock) {
    if (mClient == null) {
      throw new IllegalStateException("Client cannot be null.");
    }
    PrintJobInfo printJob=getPrintJobInfo(printJobId,PrintManager.APP_ID_ANY);
    if (printJob != null && printJob.getState() < state) {
      success=true;
      printJob.setState(state);
      if (DEBUG_PRINT_JOB_LIFECYCLE) {
        Slog.i(LOG_TAG,"[STATE CHANGED] " + printJob);
      }
switch (state) {
case PrintJobInfo.STATE_COMPLETED:
case PrintJobInfo.STATE_CANCELED:
{
          removePrintJobLocked(printJob);
          PrinterId printerId=printJob.getPrinterId();
          if (printerId == null) {
            return true;
          }
          ComponentName service=printerId.getService();
          if (!hasActivePrintJobsForServiceLocked(service)) {
            SomeArgs args=SomeArgs.obtain();
            args.arg1=mClient;
            args.arg2=service;
            mHandler.obtainMessage(MyHandler.MSG_ON_ALL_PRINT_JOBS_FOR_SERIVICE_HANDLED,args).sendToTarget();
          }
          if (!hasActivePrintJobsLocked()) {
            mHandler.obtainMessage(MyHandler.MSG_ON_ALL_PRINT_JOBS_HANDLED,mClient).sendToTarget();
          }
        }
      break;
case PrintJobInfo.STATE_QUEUED:
{
      SomeArgs args=SomeArgs.obtain();
      args.arg1=mClient;
      args.arg2=new PrintJobInfo(printJob);
      mHandler.obtainMessage(MyHandler.MSG_ON_PRINT_JOB_QUEUED,args).sendToTarget();
    }
  break;
}
if (shouldPersistPrintJob(printJob)) {
mPersistanceManager.writeStateLocked();
}
}
}
return success;
}
