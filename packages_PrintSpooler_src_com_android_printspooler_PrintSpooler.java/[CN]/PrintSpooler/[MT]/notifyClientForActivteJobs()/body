{
  IPrintSpoolerClient client=null;
  Map<ComponentName,List<PrintJobInfo>> activeJobsPerServiceMap=new HashMap<ComponentName,List<PrintJobInfo>>();
synchronized (mLock) {
    if (mClient == null) {
      throw new IllegalStateException("Client cannot be null.");
    }
    client=mClient;
    final int printJobCount=mPrintJobs.size();
    for (int i=0; i < printJobCount; i++) {
      PrintJobInfo printJob=mPrintJobs.get(i);
switch (printJob.getState()) {
case PrintJobInfo.STATE_CREATED:
{
        }
      break;
case PrintJobInfo.STATE_QUEUED:
case PrintJobInfo.STATE_STARTED:
{
      ComponentName service=printJob.getPrinterId().getService();
      List<PrintJobInfo> jobsPerService=activeJobsPerServiceMap.get(service);
      if (jobsPerService == null) {
        jobsPerService=new ArrayList<PrintJobInfo>();
        activeJobsPerServiceMap.put(service,jobsPerService);
      }
      jobsPerService.add(printJob);
    }
  break;
default :
{
  ComponentName service=printJob.getPrinterId().getService();
  if (!activeJobsPerServiceMap.containsKey(service)) {
    activeJobsPerServiceMap.put(service,null);
  }
}
}
}
}
boolean allPrintJobsHandled=true;
for (Map.Entry<ComponentName,List<PrintJobInfo>> entry : activeJobsPerServiceMap.entrySet()) {
ComponentName service=entry.getKey();
List<PrintJobInfo> printJobs=entry.getValue();
if (printJobs != null) {
allPrintJobsHandled=false;
final int printJobCount=printJobs.size();
for (int i=0; i < printJobCount; i++) {
PrintJobInfo printJob=printJobs.get(i);
if (printJob.getState() == PrintJobInfo.STATE_QUEUED) {
callOnPrintJobQueuedQuietly(client,printJob);
}
}
}
 else {
callOnAllPrintJobsForServiceHandledQuietly(client,service);
}
}
if (allPrintJobsHandled) {
callOnAllPrintJobsHandledQuietly(client);
}
}
