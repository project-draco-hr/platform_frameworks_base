{
switch (message.what) {
case MSG_ON_START_PRINTER_DISCOVERY:
{
      SomeArgs args=(SomeArgs)message.obj;
      IPrintSpoolerClient client=(IPrintSpoolerClient)args.arg1;
      IPrinterDiscoveryObserver observer=(IPrinterDiscoveryObserver)args.arg2;
      args.recycle();
      if (client != null) {
        try {
          client.onStartPrinterDiscovery(observer);
        }
 catch (        RemoteException re) {
          Log.e(LOG_TAG,"Error notifying start printer discovery.",re);
        }
      }
    }
  break;
case MSG_ON_STOP_PRINTER_DISCOVERY:
{
  IPrintSpoolerClient client=(IPrintSpoolerClient)message.obj;
  if (client != null) {
    try {
      client.onStopPrinterDiscovery();
    }
 catch (    RemoteException re) {
      Log.e(LOG_TAG,"Error notifying stop printer discovery.",re);
    }
  }
}
break;
case MSG_ON_PRINT_JOB_QUEUED:
{
SomeArgs args=(SomeArgs)message.obj;
IPrintSpoolerClient client=(IPrintSpoolerClient)args.arg1;
PrintJobInfo printJob=(PrintJobInfo)args.arg2;
args.recycle();
if (client != null) {
try {
  client.onPrintJobQueued(printJob);
}
 catch (RemoteException re) {
  Slog.e(LOG_TAG,"Error notify for a queued print job.",re);
}
}
}
break;
case MSG_ON_ALL_PRINT_JOBS_FOR_SERIVICE_HANDLED:
{
SomeArgs args=(SomeArgs)message.obj;
IPrintSpoolerClient client=(IPrintSpoolerClient)args.arg1;
ComponentName service=(ComponentName)args.arg2;
args.recycle();
if (client != null) {
try {
client.onAllPrintJobsForServiceHandled(service);
}
 catch (RemoteException re) {
Slog.e(LOG_TAG,"Error notify for all print jobs per service handled.",re);
}
}
}
break;
case MSG_ON_ALL_PRINT_JOBS_HANDLED:
{
final IPrintSpoolerClient client=(IPrintSpoolerClient)message.obj;
new AsyncTask<Void,Void,Void>(){
@Override protected Void doInBackground(Void... params){
try {
client.onAllPrintJobsHandled();
}
 catch (RemoteException re) {
Slog.e(LOG_TAG,"Error notify for all print job handled.",re);
}
return null;
}
}
.executeOnExecutor(AsyncTask.SERIAL_EXECUTOR,(Void[])null);
}
break;
}
}
