{
  if (DEBUG_PERSISTENCE) {
    Log.i(LOG_TAG,"[PERSIST START]");
  }
  FileOutputStream out=null;
  try {
    out=mStatePersistFile.startWrite();
    XmlSerializer serializer=new FastXmlSerializer();
    serializer.setOutput(out,"utf-8");
    serializer.startDocument(null,true);
    serializer.startTag(null,TAG_SPOOLER);
    List<PrintJobInfo> printJobs=mPrintJobs;
    final int printJobCount=printJobs.size();
    for (int j=0; j < printJobCount; j++) {
      PrintJobInfo printJob=printJobs.get(j);
      final int state=printJob.getState();
      if (state < PrintJobInfo.STATE_QUEUED || state > PrintJobInfo.STATE_CANCELED) {
        continue;
      }
      serializer.startTag(null,TAG_JOB);
      serializer.attribute(null,ATTR_ID,String.valueOf(printJob.getId()));
      serializer.attribute(null,ATTR_LABEL,printJob.getLabel().toString());
      serializer.attribute(null,ATTR_STATE,String.valueOf(printJob.getState()));
      serializer.attribute(null,ATTR_APP_ID,String.valueOf(printJob.getAppId()));
      serializer.attribute(null,ATTR_USER_ID,String.valueOf(printJob.getUserId()));
      String tag=printJob.getTag();
      if (tag != null) {
        serializer.attribute(null,ATTR_TAG,tag);
      }
      serializer.attribute(null,ATTR_COPIES,String.valueOf(printJob.getCopies()));
      PrinterId printerId=printJob.getPrinterId();
      if (printerId != null) {
        serializer.startTag(null,TAG_PRINTER_ID);
        serializer.attribute(null,ATTR_PRINTER_NAME,printerId.getPrinterName());
        serializer.attribute(null,ATTR_SERVICE_NAME,printerId.getServiceName().flattenToString());
        serializer.endTag(null,TAG_PRINTER_ID);
      }
      PageRange[] pages=printJob.getPages();
      if (pages != null) {
        for (int i=0; i < pages.length; i++) {
          serializer.startTag(null,TAG_PAGE_RANGE);
          serializer.attribute(null,ATTR_START,String.valueOf(pages[i].getStart()));
          serializer.attribute(null,ATTR_END,String.valueOf(pages[i].getEnd()));
          serializer.endTag(null,TAG_PAGE_RANGE);
        }
      }
      PrintAttributes attributes=printJob.getAttributes();
      if (attributes != null) {
        serializer.startTag(null,TAG_ATTRIBUTES);
        final int duplexMode=attributes.getDuplexMode();
        serializer.attribute(null,ATTR_DUPLEX_MODE,String.valueOf(duplexMode));
        final int colorMode=attributes.getColorMode();
        serializer.attribute(null,ATTR_COLOR_MODE,String.valueOf(colorMode));
        final int fittingMode=attributes.getFittingMode();
        serializer.attribute(null,ATTR_FITTING_MODE,String.valueOf(fittingMode));
        final int orientation=attributes.getOrientation();
        serializer.attribute(null,ATTR_ORIENTATION,String.valueOf(orientation));
        MediaSize mediaSize=attributes.getMediaSize();
        if (mediaSize != null) {
          serializer.startTag(null,TAG_MEDIA_SIZE);
          serializer.attribute(null,ATTR_ID,mediaSize.getId());
          serializer.attribute(null,ATTR_LABEL,mediaSize.getLabel().toString());
          serializer.attribute(null,ATTR_WIDTH_MILS,String.valueOf(mediaSize.getWidthMils()));
          serializer.attribute(null,ATTR_HEIGHT_MILS,String.valueOf(mediaSize.getHeightMils()));
          serializer.endTag(null,TAG_MEDIA_SIZE);
        }
        Resolution resolution=attributes.getResolution();
        if (resolution != null) {
          serializer.startTag(null,TAG_RESOLUTION);
          serializer.attribute(null,ATTR_ID,resolution.getId());
          serializer.attribute(null,ATTR_LABEL,resolution.getLabel().toString());
          serializer.attribute(null,ATTR_HORIZONTAL_DPI,String.valueOf(resolution.getHorizontalDpi()));
          serializer.attribute(null,ATTR_VERTICAL_DPI,String.valueOf(resolution.getVerticalDpi()));
          serializer.endTag(null,TAG_RESOLUTION);
        }
        Margins margins=attributes.getMargins();
        if (margins != null) {
          serializer.startTag(null,TAG_MARGINS);
          serializer.attribute(null,ATTR_LEFT_MILS,String.valueOf(margins.getLeftMils()));
          serializer.attribute(null,ATTR_TOP_MILS,String.valueOf(margins.getTopMils()));
          serializer.attribute(null,ATTR_RIGHT_MILS,String.valueOf(margins.getRightMils()));
          serializer.attribute(null,ATTR_BOTTOM_MILS,String.valueOf(margins.getBottomMils()));
          serializer.endTag(null,TAG_MARGINS);
        }
        Tray inputTray=attributes.getInputTray();
        if (inputTray != null) {
          serializer.startTag(null,TAG_INPUT_TRAY);
          serializer.attribute(null,ATTR_ID,inputTray.getId());
          serializer.attribute(null,ATTR_LABEL,inputTray.getLabel().toString());
          serializer.endTag(null,TAG_INPUT_TRAY);
        }
        Tray outputTray=attributes.getOutputTray();
        if (outputTray != null) {
          serializer.startTag(null,TAG_OUTPUT_TRAY);
          serializer.attribute(null,ATTR_ID,outputTray.getId());
          serializer.attribute(null,ATTR_LABEL,outputTray.getLabel().toString());
          serializer.endTag(null,TAG_OUTPUT_TRAY);
        }
        serializer.endTag(null,TAG_ATTRIBUTES);
      }
      PrintDocumentInfo documentInfo=printJob.getDocumentInfo();
      if (documentInfo != null) {
        serializer.startTag(null,TAG_DOCUMENT_INFO);
        serializer.attribute(null,ATTR_CONTENT_TYPE,String.valueOf(documentInfo.getContentType()));
        serializer.attribute(null,ATTR_PAGE_COUNT,String.valueOf(documentInfo.getPageCount()));
        serializer.endTag(null,TAG_DOCUMENT_INFO);
      }
      serializer.endTag(null,TAG_JOB);
      if (DEBUG_PERSISTENCE) {
        Log.i(LOG_TAG,"[PERSISTED] " + printJob);
      }
    }
    serializer.endTag(null,TAG_SPOOLER);
    serializer.endDocument();
    mStatePersistFile.finishWrite(out);
    if (DEBUG_PERSISTENCE) {
      Log.i(LOG_TAG,"[PERSIST END]");
    }
  }
 catch (  IOException e) {
    Slog.w(LOG_TAG,"Failed to write state, restoring backup.",e);
    mStatePersistFile.failWrite(out);
  }
 finally {
    if (out != null) {
      try {
        out.close();
      }
 catch (      IOException ioe) {
      }
    }
  }
}
