{
  skipEmptyTextTags(parser);
  if (!accept(parser,XmlPullParser.START_TAG,TAG_JOB)) {
    return false;
  }
  PrintJobInfo printJob=new PrintJobInfo();
  final int printJobId=Integer.parseInt(parser.getAttributeValue(null,ATTR_ID));
  printJob.setId(printJobId);
  String label=parser.getAttributeValue(null,ATTR_LABEL);
  printJob.setLabel(label);
  final int state=Integer.parseInt(parser.getAttributeValue(null,ATTR_STATE));
  printJob.setState(state);
  final int appId=Integer.parseInt(parser.getAttributeValue(null,ATTR_APP_ID));
  printJob.setAppId(appId);
  final int userId=Integer.parseInt(parser.getAttributeValue(null,ATTR_USER_ID));
  printJob.setUserId(userId);
  String tag=parser.getAttributeValue(null,ATTR_TAG);
  printJob.setTag(tag);
  String copies=parser.getAttributeValue(null,ATTR_TAG);
  printJob.setCopies(Integer.parseInt(copies));
  parser.next();
  skipEmptyTextTags(parser);
  if (accept(parser,XmlPullParser.START_TAG,TAG_PRINTER_ID)) {
    String localId=parser.getAttributeValue(null,ATTR_LOCAL_ID);
    ComponentName service=ComponentName.unflattenFromString(parser.getAttributeValue(null,ATTR_SERVICE));
    printJob.setPrinterId(new PrinterId(service,localId));
    parser.next();
    skipEmptyTextTags(parser);
    expect(parser,XmlPullParser.END_TAG,TAG_PRINTER_ID);
    parser.next();
  }
  skipEmptyTextTags(parser);
  List<PageRange> pageRanges=null;
  while (accept(parser,XmlPullParser.START_TAG,TAG_PAGE_RANGE)) {
    final int start=Integer.parseInt(parser.getAttributeValue(null,ATTR_START));
    final int end=Integer.parseInt(parser.getAttributeValue(null,ATTR_END));
    PageRange pageRange=new PageRange(start,end);
    if (pageRanges == null) {
      pageRanges=new ArrayList<PageRange>();
    }
    pageRanges.add(pageRange);
    parser.next();
    skipEmptyTextTags(parser);
    expect(parser,XmlPullParser.END_TAG,TAG_PAGE_RANGE);
    parser.next();
  }
  if (pageRanges != null) {
    PageRange[] pageRangesArray=new PageRange[pageRanges.size()];
    pageRanges.toArray(pageRangesArray);
    printJob.setPages(pageRangesArray);
  }
  skipEmptyTextTags(parser);
  if (accept(parser,XmlPullParser.START_TAG,TAG_ATTRIBUTES)) {
    PrintAttributes.Builder builder=new PrintAttributes.Builder();
    String duplexMode=parser.getAttributeValue(null,ATTR_DUPLEX_MODE);
    builder.setDuplexMode(Integer.parseInt(duplexMode));
    String colorMode=parser.getAttributeValue(null,ATTR_COLOR_MODE);
    builder.setColorMode(Integer.parseInt(colorMode));
    String fittingMode=parser.getAttributeValue(null,ATTR_FITTING_MODE);
    builder.setFittingMode(Integer.parseInt(fittingMode));
    String orientation=parser.getAttributeValue(null,ATTR_ORIENTATION);
    builder.setOrientation(Integer.parseInt(orientation));
    parser.next();
    skipEmptyTextTags(parser);
    if (accept(parser,XmlPullParser.START_TAG,TAG_MEDIA_SIZE)) {
      String id=parser.getAttributeValue(null,ATTR_ID);
      label=parser.getAttributeValue(null,ATTR_LABEL);
      final int widthMils=Integer.parseInt(parser.getAttributeValue(null,ATTR_WIDTH_MILS));
      final int heightMils=Integer.parseInt(parser.getAttributeValue(null,ATTR_HEIGHT_MILS));
      MediaSize mediaSize=new MediaSize(id,label,widthMils,heightMils);
      builder.setMediaSize(mediaSize);
      parser.next();
      skipEmptyTextTags(parser);
      expect(parser,XmlPullParser.END_TAG,TAG_MEDIA_SIZE);
      parser.next();
    }
    skipEmptyTextTags(parser);
    if (accept(parser,XmlPullParser.START_TAG,TAG_RESOLUTION)) {
      String id=parser.getAttributeValue(null,ATTR_ID);
      label=parser.getAttributeValue(null,ATTR_LABEL);
      final int horizontalDpi=Integer.parseInt(parser.getAttributeValue(null,ATTR_HORIZONTAL_DPI));
      final int verticalDpi=Integer.parseInt(parser.getAttributeValue(null,ATTR_VERTICAL_DPI));
      Resolution resolution=new Resolution(id,label,horizontalDpi,verticalDpi);
      builder.setResolution(resolution);
      parser.next();
      skipEmptyTextTags(parser);
      expect(parser,XmlPullParser.END_TAG,TAG_RESOLUTION);
      parser.next();
    }
    skipEmptyTextTags(parser);
    if (accept(parser,XmlPullParser.START_TAG,TAG_MARGINS)) {
      final int leftMils=Integer.parseInt(parser.getAttributeValue(null,ATTR_LEFT_MILS));
      final int topMils=Integer.parseInt(parser.getAttributeValue(null,ATTR_TOP_MILS));
      final int rightMils=Integer.parseInt(parser.getAttributeValue(null,ATTR_RIGHT_MILS));
      final int bottomMils=Integer.parseInt(parser.getAttributeValue(null,ATTR_BOTTOM_MILS));
      Margins margins=new Margins(leftMils,topMils,rightMils,bottomMils);
      builder.setMargins(margins);
      parser.next();
      skipEmptyTextTags(parser);
      expect(parser,XmlPullParser.END_TAG,TAG_MARGINS);
      parser.next();
    }
    skipEmptyTextTags(parser);
    if (accept(parser,XmlPullParser.START_TAG,TAG_INPUT_TRAY)) {
      String id=parser.getAttributeValue(null,ATTR_ID);
      label=parser.getAttributeValue(null,ATTR_LABEL);
      Tray tray=new Tray(id,label);
      builder.setInputTray(tray);
      parser.next();
      skipEmptyTextTags(parser);
      expect(parser,XmlPullParser.END_TAG,TAG_INPUT_TRAY);
      parser.next();
    }
    skipEmptyTextTags(parser);
    if (accept(parser,XmlPullParser.START_TAG,TAG_OUTPUT_TRAY)) {
      String id=parser.getAttributeValue(null,ATTR_ID);
      label=parser.getAttributeValue(null,ATTR_LABEL);
      Tray tray=new Tray(id,label);
      builder.setOutputTray(tray);
      parser.next();
      skipEmptyTextTags(parser);
      expect(parser,XmlPullParser.END_TAG,TAG_OUTPUT_TRAY);
      parser.next();
    }
    printJob.setAttributes(builder.create());
    skipEmptyTextTags(parser);
    expect(parser,XmlPullParser.END_TAG,TAG_ATTRIBUTES);
    parser.next();
  }
  skipEmptyTextTags(parser);
  if (accept(parser,XmlPullParser.START_TAG,TAG_DOCUMENT_INFO)) {
    final int pageCount=Integer.parseInt(parser.getAttributeValue(null,ATTR_PAGE_COUNT));
    final int contentType=Integer.parseInt(parser.getAttributeValue(null,ATTR_CONTENT_TYPE));
    PrintDocumentInfo info=new PrintDocumentInfo.Builder().setPageCount(pageCount).setContentType(contentType).create();
    printJob.setDocumentInfo(info);
    parser.next();
    skipEmptyTextTags(parser);
    expect(parser,XmlPullParser.END_TAG,TAG_DOCUMENT_INFO);
    parser.next();
  }
  mPrintJobs.add(printJob);
  if (DEBUG_PERSISTENCE) {
    Log.i(LOG_TAG,"[RESTORED] " + printJob);
  }
  skipEmptyTextTags(parser);
  expect(parser,XmlPullParser.END_TAG,TAG_JOB);
  return true;
}
