{
  ContentResolver resolver=null;
  AbstractSyncableContentProvider provider=null;
  if (contentSomething instanceof ContentResolver) {
    resolver=(ContentResolver)contentSomething;
  }
 else   if (contentSomething instanceof AbstractSyncableContentProvider) {
    provider=(AbstractSyncableContentProvider)contentSomething;
  }
 else {
    Log.e(LOG_TAG,"Unsupported object came.");
    return;
  }
  ContentValues contentValues=new ContentValues();
  contentValues.put(People.NAME,name);
  contentValues.put(People.PHONETIC_NAME,phoneticName);
  if (notes.size() > 1) {
    StringBuilder builder=new StringBuilder();
    for (    String note : notes) {
      builder.append(note);
      builder.append("\n");
    }
    contentValues.put(People.NOTES,builder.toString());
  }
 else   if (notes.size() == 1) {
    contentValues.put(People.NOTES,notes.get(0));
  }
  Uri personUri;
  long personId=0;
  if (resolver != null) {
    personUri=Contacts.People.createPersonInMyContactsGroup(resolver,contentValues);
    if (personUri != null) {
      personId=ContentUris.parseId(personUri);
    }
  }
 else {
    personUri=provider.insert(People.CONTENT_URI,contentValues);
    if (personUri != null) {
      personId=ContentUris.parseId(personUri);
      ContentValues values=new ContentValues();
      values.put(GroupMembership.PERSON_ID,personId);
      values.put(GroupMembership.GROUP_ID,myContactsGroupId);
      Uri resultUri=provider.insert(GroupMembership.CONTENT_URI,values);
      if (resultUri == null) {
        Log.e(LOG_TAG,"Faild to insert the person to MyContact.");
        provider.delete(personUri,null,null);
        personUri=null;
      }
    }
  }
  if (personUri == null) {
    Log.e(LOG_TAG,"Failed to create the contact.");
    return;
  }
  if (photoBytes != null) {
    if (resolver != null) {
      People.setPhotoData(resolver,personUri,photoBytes);
    }
 else {
      Uri photoUri=Uri.withAppendedPath(personUri,Contacts.Photos.CONTENT_DIRECTORY);
      ContentValues values=new ContentValues();
      values.put(Photos.DATA,photoBytes);
      provider.update(photoUri,values,null,null);
    }
  }
  long primaryPhoneId=-1;
  if (phoneList != null && phoneList.size() > 0) {
    for (    PhoneData phoneData : phoneList) {
      ContentValues values=new ContentValues();
      values.put(Contacts.PhonesColumns.TYPE,phoneData.type);
      if (phoneData.type == Contacts.PhonesColumns.TYPE_CUSTOM) {
        values.put(Contacts.PhonesColumns.LABEL,phoneData.label);
      }
      values.put(Contacts.PhonesColumns.NUMBER,phoneData.data);
      values.put(Contacts.PhonesColumns.ISPRIMARY,1);
      values.put(Contacts.Phones.PERSON_ID,personId);
      Uri phoneUri;
      if (resolver != null) {
        phoneUri=resolver.insert(Phones.CONTENT_URI,values);
      }
 else {
        phoneUri=provider.insert(Phones.CONTENT_URI,values);
      }
      if (phoneData.isPrimary) {
        primaryPhoneId=Long.parseLong(phoneUri.getLastPathSegment());
      }
    }
  }
  long primaryOrganizationId=-1;
  if (organizationList != null && organizationList.size() > 0) {
    for (    OrganizationData organizationData : organizationList) {
      ContentValues values=new ContentValues();
      values.put(Contacts.OrganizationColumns.TYPE,organizationData.type);
      values.put(Contacts.OrganizationColumns.COMPANY,organizationData.companyName);
      values.put(Contacts.OrganizationColumns.TITLE,organizationData.positionName);
      values.put(Contacts.OrganizationColumns.ISPRIMARY,1);
      values.put(Contacts.OrganizationColumns.PERSON_ID,personId);
      Uri organizationUri;
      if (resolver != null) {
        organizationUri=resolver.insert(Organizations.CONTENT_URI,values);
      }
 else {
        organizationUri=provider.insert(Organizations.CONTENT_URI,values);
      }
      if (organizationData.isPrimary) {
        primaryOrganizationId=Long.parseLong(organizationUri.getLastPathSegment());
      }
    }
  }
  long primaryEmailId=-1;
  if (contactmethodList != null && contactmethodList.size() > 0) {
    for (    ContactMethod contactMethod : contactmethodList) {
      ContentValues values=new ContentValues();
      values.put(Contacts.ContactMethodsColumns.KIND,contactMethod.kind);
      values.put(Contacts.ContactMethodsColumns.TYPE,contactMethod.type);
      if (contactMethod.type == Contacts.ContactMethodsColumns.TYPE_CUSTOM) {
        values.put(Contacts.ContactMethodsColumns.LABEL,contactMethod.label);
      }
      values.put(Contacts.ContactMethodsColumns.DATA,contactMethod.data);
      values.put(Contacts.ContactMethodsColumns.ISPRIMARY,1);
      values.put(Contacts.ContactMethods.PERSON_ID,personId);
      if (contactMethod.kind == Contacts.KIND_EMAIL) {
        Uri emailUri;
        if (resolver != null) {
          emailUri=resolver.insert(ContactMethods.CONTENT_URI,values);
        }
 else {
          emailUri=provider.insert(ContactMethods.CONTENT_URI,values);
        }
        if (contactMethod.isPrimary) {
          primaryEmailId=Long.parseLong(emailUri.getLastPathSegment());
        }
      }
 else {
        if (resolver != null) {
          resolver.insert(ContactMethods.CONTENT_URI,values);
        }
 else {
          provider.insert(ContactMethods.CONTENT_URI,values);
        }
      }
    }
  }
  if (extensionMap != null && extensionMap.size() > 0) {
    ArrayList<ContentValues> contentValuesArray;
    if (resolver != null) {
      contentValuesArray=new ArrayList<ContentValues>();
    }
 else {
      contentValuesArray=null;
    }
    for (    Entry<String,List<String>> entry : extensionMap.entrySet()) {
      String key=entry.getKey();
      List<String> list=entry.getValue();
      for (      String value : list) {
        ContentValues values=new ContentValues();
        values.put(Extensions.NAME,key);
        values.put(Extensions.VALUE,value);
        values.put(Extensions.PERSON_ID,personId);
        if (resolver != null) {
          contentValuesArray.add(values);
        }
 else {
          provider.insert(Extensions.CONTENT_URI,values);
        }
      }
    }
    if (resolver != null) {
      resolver.bulkInsert(Extensions.CONTENT_URI,contentValuesArray.toArray(new ContentValues[0]));
    }
  }
  if (primaryPhoneId >= 0 || primaryOrganizationId >= 0 || primaryEmailId >= 0) {
    ContentValues values=new ContentValues();
    if (primaryPhoneId >= 0) {
      values.put(People.PRIMARY_PHONE_ID,primaryPhoneId);
    }
    if (primaryOrganizationId >= 0) {
      values.put(People.PRIMARY_ORGANIZATION_ID,primaryOrganizationId);
    }
    if (primaryEmailId >= 0) {
      values.put(People.PRIMARY_EMAIL_ID,primaryEmailId);
    }
    if (resolver != null) {
      resolver.update(personUri,values,null,null);
    }
 else {
      provider.update(personUri,values,null,null);
    }
  }
}
