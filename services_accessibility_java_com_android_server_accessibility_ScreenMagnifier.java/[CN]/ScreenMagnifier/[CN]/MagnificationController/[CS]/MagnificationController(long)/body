{
  Property<MagnificationController,MagnificationSpec> property=Property.of(MagnificationController.class,MagnificationSpec.class,PROPERTY_NAME_MAGNIFICATION_SPEC);
  TypeEvaluator<MagnificationSpec> evaluator=new TypeEvaluator<MagnificationSpec>(){
    private final MagnificationSpec mTempTransformationSpec=MagnificationSpec.obtain();
    @Override public MagnificationSpec evaluate(    float fraction,    MagnificationSpec fromSpec,    MagnificationSpec toSpec){
      MagnificationSpec result=mTempTransformationSpec;
      result.scale=fromSpec.scale + (toSpec.scale - fromSpec.scale) * fraction;
      result.offsetX=fromSpec.offsetX + (toSpec.offsetX - fromSpec.offsetX) * fraction;
      result.offsetY=fromSpec.offsetY + (toSpec.offsetY - fromSpec.offsetY) * fraction;
      return result;
    }
  }
;
  mTransformationAnimator=ObjectAnimator.ofObject(this,property,evaluator,mSentMagnificationSpec,mCurrentMagnificationSpec);
  mTransformationAnimator.setDuration((long)(animationDuration));
  mTransformationAnimator.setInterpolator(new DecelerateInterpolator(2.5f));
}
