{
  if (time.length() < 6) {
    return false;
  }
  if (mYear == -1) {
    mLatitude=0.0;
    mLongitude=0.0;
    mHasAltitude=false;
    mHasBearing=false;
    mHasSpeed=false;
    mExtras=null;
    return false;
  }
  int hour, minute;
  float second;
  try {
    hour=Integer.parseInt(time.substring(0,2));
    minute=Integer.parseInt(time.substring(2,4));
    second=Float.parseFloat(time.substring(4,time.length()));
  }
 catch (  NumberFormatException nfe) {
    Log.e(TAG,"Error parsing timestamp " + time);
    return false;
  }
  int isecond=(int)second;
  int millis=(int)((second - isecond) * 1000);
  Calendar c=new GregorianCalendar(sUtcTimeZone);
  c.set(mYear,mMonth,mDay,hour,minute,isecond);
  long newTime=c.getTimeInMillis() + millis;
  if (mTime == -1) {
    mTime=0;
    mBaseTime=newTime;
  }
  newTime-=mBaseTime;
  if (newTime != mTime) {
    mNewWaypoint=true;
    mLocation=new Location(mName);
    mLocation.setTime(mTime);
    mLocation.setLatitude(mLatitude);
    mLocation.setLongitude(mLongitude);
    if (mHasAltitude) {
      mLocation.setAltitude(mAltitude);
    }
    if (mHasBearing) {
      mLocation.setBearing(mBearing);
    }
    if (mHasSpeed) {
      mLocation.setSpeed(mSpeed);
    }
    mLocation.setExtras(mExtras);
    mExtras=null;
    mTime=newTime;
    mHasAltitude=false;
    mHasBearing=false;
    mHasSpeed=false;
  }
  return true;
}
