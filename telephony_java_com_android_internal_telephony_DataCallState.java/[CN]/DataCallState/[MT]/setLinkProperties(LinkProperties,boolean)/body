{
  SetupResult result;
  if (linkProperties == null)   linkProperties=new LinkProperties();
 else   linkProperties.clear();
  if (status == FailCause.NONE.getErrorCode()) {
    String propertyPrefix="net." + ifname + ".";
    try {
      linkProperties.setInterfaceName(ifname);
      if (addresses != null && addresses.length > 0) {
        for (        String addr : addresses) {
          LinkAddress la;
          int addrPrefixLen;
          String[] ap=addr.split("/");
          if (ap.length == 2) {
            addr=ap[0];
            addrPrefixLen=Integer.parseInt(ap[1]);
          }
 else {
            addrPrefixLen=0;
          }
          InetAddress ia;
          try {
            ia=NetworkUtils.numericToInetAddress(addr);
          }
 catch (          IllegalArgumentException e) {
            throw new UnknownHostException("Non-numeric ip addr=" + addr);
          }
          if (addrPrefixLen == 0) {
            addrPrefixLen=(ia instanceof Inet4Address) ? 32 : 128;
          }
          if (DBG)           Log.d(LOG_TAG,"addr/pl=" + addr + "/"+ addrPrefixLen);
          la=new LinkAddress(ia,addrPrefixLen);
          linkProperties.addLinkAddress(la);
        }
      }
 else {
        throw new UnknownHostException("no address for ifname=" + ifname);
      }
      if (dnses != null && dnses.length > 0) {
        for (        String addr : dnses) {
          InetAddress ia;
          try {
            ia=NetworkUtils.numericToInetAddress(addr);
          }
 catch (          IllegalArgumentException e) {
            throw new UnknownHostException("Non-numeric dns addr=" + addr);
          }
          linkProperties.addDns(ia);
        }
      }
 else       if (okToUseSystemPropertyDns) {
        String dnsServers[]=new String[2];
        dnsServers[0]=SystemProperties.get(propertyPrefix + "dns1");
        dnsServers[1]=SystemProperties.get(propertyPrefix + "dns2");
        for (        String dnsAddr : dnsServers) {
          InetAddress ia;
          try {
            ia=NetworkUtils.numericToInetAddress(dnsAddr);
          }
 catch (          IllegalArgumentException e) {
            throw new UnknownHostException("Non-numeric dns addr=" + dnsAddr);
          }
          linkProperties.addDns(ia);
        }
      }
 else {
        throw new UnknownHostException("Empty dns response and no system default dns");
      }
      if ((gateways == null) || (gateways.length == 0)) {
        String sysGateways=SystemProperties.get(propertyPrefix + "gw");
        if (sysGateways != null) {
          gateways=sysGateways.split(" ");
        }
 else {
          gateways=new String[0];
        }
      }
      for (      String addr : gateways) {
        InetAddress ia;
        try {
          ia=NetworkUtils.numericToInetAddress(addr);
        }
 catch (        IllegalArgumentException e) {
          throw new UnknownHostException("Non-numeric gateway addr=" + addr);
        }
        linkProperties.addGateway(ia);
      }
      result=SetupResult.SUCCESS;
    }
 catch (    UnknownHostException e) {
      Log.d(LOG_TAG,"onSetupCompleted: UnknownHostException " + e);
      e.printStackTrace();
      result=SetupResult.ERR_UnacceptableParameter;
    }
  }
 else {
    if (version < 4) {
      result=SetupResult.ERR_GetLastErrorFromRil;
    }
 else {
      result=SetupResult.ERR_RilError;
    }
  }
  if (result != SetupResult.SUCCESS) {
    if (DBG)     Log.d(LOG_TAG,"onSetupConnectionCompleted with an error, clearing LinkProperties");
    linkProperties.clear();
  }
  return result;
}
