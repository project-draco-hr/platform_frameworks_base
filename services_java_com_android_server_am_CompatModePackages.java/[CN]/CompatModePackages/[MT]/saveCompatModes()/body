{
  HashMap<String,Integer> pkgs;
synchronized (mService) {
    pkgs=new HashMap<String,Integer>(mPackages);
  }
  FileOutputStream fos=null;
  try {
    fos=mFile.startWrite();
    XmlSerializer out=new FastXmlSerializer();
    out.setOutput(fos,"utf-8");
    out.startDocument(null,true);
    out.setFeature("http://xmlpull.org/v1/doc/features.html#indent-output",true);
    out.startTag(null,"compat-packages");
    final IPackageManager pm=AppGlobals.getPackageManager();
    final int screenLayout=mService.mConfiguration.screenLayout;
    final int smallestScreenWidthDp=mService.mConfiguration.smallestScreenWidthDp;
    final Iterator<Map.Entry<String,Integer>> it=pkgs.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry<String,Integer> entry=it.next();
      String pkg=entry.getKey();
      int mode=entry.getValue();
      if (mode == 0) {
        continue;
      }
      ApplicationInfo ai=null;
      try {
        ai=pm.getApplicationInfo(pkg,0);
      }
 catch (      RemoteException e) {
      }
      if (ai == null) {
        continue;
      }
      CompatibilityInfo info=new CompatibilityInfo(ai,screenLayout,smallestScreenWidthDp,false);
      if (info.alwaysSupportsScreen()) {
        continue;
      }
      if (info.neverSupportsScreen()) {
        continue;
      }
      out.startTag(null,"pkg");
      out.attribute(null,"name",pkg);
      out.attribute(null,"mode",Integer.toString(mode));
      out.endTag(null,"pkg");
    }
    out.endTag(null,"compat-packages");
    out.endDocument();
    mFile.finishWrite(fos);
  }
 catch (  java.io.IOException e1) {
    Slog.w(TAG,"Error writing compat packages",e1);
    if (fos != null) {
      mFile.failWrite(fos);
    }
  }
}
