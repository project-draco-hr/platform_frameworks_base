{
  for (  String methodName : new String[]{"get" + StringUtils.capitalize(name),name}) {
    try {
      Method method=klass.getMethod(methodName);
      Field backingField=findField(klass,name);
      if (Modifier.isPublic(method.getModifiers())) {
        return new Callable(Callable.Type.METHOD,methodName,method.getReturnType(),true,isBindable(method) || (backingField != null && isBindable(backingField)));
      }
    }
 catch (    Throwable t) {
    }
  }
  try {
    Field field=klass.getField(name);
    if (Modifier.isPublic(field.getModifiers())) {
      return new Callable(Callable.Type.FIELD,name,field.getType(),!Modifier.isFinal(field.getModifiers()),isBindable(field));
    }
  }
 catch (  Throwable t) {
  }
  throw new IllegalArgumentException("cannot find " + name + " in "+ klass.getCanonicalName());
}
