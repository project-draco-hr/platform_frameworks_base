{
  final long timeNow=System.currentTimeMillis();
  Calendar tempCal=mDailyExpiryDate;
  for (int bucketType=0; bucketType < mCurrentStats.length; bucketType++) {
    tempCal.setTimeInMillis(timeNow);
    UsageStatsUtils.truncateDateTo(bucketType,tempCal);
    if (mCurrentStats[bucketType] != null && mCurrentStats[bucketType].beginTime == tempCal.getTimeInMillis()) {
      continue;
    }
    final long lastBeginTime=mDatabase.getLatestUsageStatsBeginTime(bucketType);
    if (lastBeginTime >= tempCal.getTimeInMillis()) {
      if (DEBUG) {
        Slog.d(TAG,mLogPrefix + "Loading existing stats (" + lastBeginTime+ ") for bucket "+ bucketType);
      }
      mCurrentStats[bucketType]=mDatabase.getLatestUsageStats(bucketType);
      if (DEBUG) {
        if (mCurrentStats[bucketType] != null) {
          Slog.d(TAG,mLogPrefix + "Found " + (mCurrentStats[bucketType].events == null ? 0 : mCurrentStats[bucketType].events.size())+ " events");
        }
      }
    }
 else {
      mCurrentStats[bucketType]=null;
    }
    if (mCurrentStats[bucketType] == null) {
      if (DEBUG) {
        Slog.d(TAG,"Creating new stats (" + tempCal.getTimeInMillis() + ") for bucket "+ bucketType);
      }
      mCurrentStats[bucketType]=new IntervalStats();
      mCurrentStats[bucketType].beginTime=tempCal.getTimeInMillis();
      mCurrentStats[bucketType].endTime=timeNow;
    }
  }
  mStatsChanged=false;
  mDailyExpiryDate.setTimeInMillis(timeNow);
  mDailyExpiryDate.add(Calendar.DAY_OF_YEAR,1);
  UsageStatsUtils.truncateDateTo(UsageStatsManager.INTERVAL_DAILY,mDailyExpiryDate);
  Slog.i(TAG,mLogPrefix + "Rollover scheduled for " + sDateFormat.format(mDailyExpiryDate.getTime()));
}
