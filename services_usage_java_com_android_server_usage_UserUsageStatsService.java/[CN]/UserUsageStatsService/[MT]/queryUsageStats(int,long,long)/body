{
  if (bucketType == UsageStatsManager.INTERVAL_BEST) {
    bucketType=mDatabase.findBestFitBucket(beginTime,endTime);
  }
  if (bucketType < 0 || bucketType >= mCurrentStats.length) {
    if (DEBUG) {
      Slog.d(TAG,mLogPrefix + "Bad bucketType used " + bucketType);
    }
    return null;
  }
  if (beginTime >= mCurrentStats[bucketType].endTime) {
    if (DEBUG) {
      Slog.d(TAG,mLogPrefix + "Requesting stats after " + beginTime+ " but latest is "+ mCurrentStats[bucketType].endTime);
    }
    return null;
  }
 else   if (beginTime >= mCurrentStats[bucketType].beginTime) {
    if (DEBUG) {
      Slog.d(TAG,mLogPrefix + "Returning in-memory stats for bucket " + bucketType);
    }
    ArrayList<UsageStats> results=new ArrayList<>();
    final int packageCount=mCurrentStats[bucketType].stats.size();
    for (int i=0; i < packageCount; i++) {
      results.add(new UsageStats(mCurrentStats[bucketType].stats.valueAt(i)));
    }
    return results;
  }
  persistActiveStats();
  if (DEBUG) {
    Slog.d(TAG,mLogPrefix + "SELECT * FROM " + bucketType+ " WHERE beginTime >= "+ beginTime+ " AND endTime < "+ endTime);
  }
  final List<UsageStats> results=mDatabase.queryUsageStats(bucketType,beginTime,endTime);
  if (DEBUG) {
    Slog.d(TAG,mLogPrefix + "Results: " + (results == null ? 0 : results.size()));
  }
  return results;
}
