{
  if (endTime > mCurrentStats[UsageStatsManager.INTERVAL_DAILY].beginTime) {
    if (beginTime > mCurrentStats[UsageStatsManager.INTERVAL_DAILY].endTime) {
      return null;
    }
    TimeSparseArray<UsageEvents.Event> events=mCurrentStats[UsageStatsManager.INTERVAL_DAILY].events;
    if (events == null) {
      return null;
    }
    final int startIndex=events.closestIndexOnOrAfter(beginTime);
    if (startIndex < 0) {
      return null;
    }
    ArraySet<String> names=new ArraySet<>();
    ArrayList<UsageEvents.Event> results=new ArrayList<>();
    final int size=events.size();
    for (int i=startIndex; i < size; i++) {
      if (events.keyAt(i) >= endTime) {
        break;
      }
      final UsageEvents.Event event=events.valueAt(i);
      names.add(event.mPackage);
      if (event.mClass != null) {
        names.add(event.mClass);
      }
      results.add(event);
    }
    String[] table=names.toArray(new String[names.size()]);
    Arrays.sort(table);
    return new UsageEvents(results,table);
  }
  return null;
}
