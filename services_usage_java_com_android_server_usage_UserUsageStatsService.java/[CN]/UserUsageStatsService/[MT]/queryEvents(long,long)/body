{
  final ArraySet<String> names=new ArraySet<>();
  List<UsageEvents.Event> results=queryStats(UsageStatsManager.INTERVAL_DAILY,beginTime,endTime,new StatCombiner<UsageEvents.Event>(){
    @Override public void combine(    IntervalStats stats,    boolean mutable,    List<UsageEvents.Event> accumulatedResult){
      if (stats.events == null) {
        return;
      }
      final int startIndex=stats.events.closestIndexOnOrAfter(beginTime);
      if (startIndex < 0) {
        return;
      }
      final int size=stats.events.size();
      for (int i=startIndex; i < size; i++) {
        if (stats.events.keyAt(i) >= endTime) {
          return;
        }
        final UsageEvents.Event event=stats.events.valueAt(i);
        names.add(event.mPackage);
        if (event.mClass != null) {
          names.add(event.mClass);
        }
        accumulatedResult.add(event);
      }
    }
  }
);
  if (results == null || results.isEmpty()) {
    return null;
  }
  String[] table=names.toArray(new String[names.size()]);
  Arrays.sort(table);
  return new UsageEvents(results,table);
}
