{
  if (intervalType == UsageStatsManager.INTERVAL_BEST) {
    intervalType=mDatabase.findBestFitBucket(beginTime,endTime);
    if (intervalType < 0) {
      intervalType=UsageStatsManager.INTERVAL_DAILY;
    }
  }
  if (intervalType < 0 || intervalType >= mCurrentStats.length) {
    if (DEBUG) {
      Slog.d(TAG,mLogPrefix + "Bad intervalType used " + intervalType);
    }
    return null;
  }
  final IntervalStats currentStats=mCurrentStats[intervalType];
  if (DEBUG) {
    Slog.d(TAG,mLogPrefix + "SELECT * FROM " + intervalType+ " WHERE beginTime >= "+ beginTime+ " AND endTime < "+ endTime);
  }
  if (beginTime >= currentStats.endTime) {
    if (DEBUG) {
      Slog.d(TAG,mLogPrefix + "Requesting stats after " + beginTime+ " but latest is "+ currentStats.endTime);
    }
    return null;
  }
  final long truncatedEndTime=Math.min(currentStats.beginTime,endTime);
  List<T> results=mDatabase.queryUsageStats(intervalType,beginTime,truncatedEndTime,combiner);
  if (DEBUG) {
    Slog.d(TAG,"Got " + (results != null ? results.size() : 0) + " results from disk");
    Slog.d(TAG,"Current stats beginTime=" + currentStats.beginTime + " endTime="+ currentStats.endTime);
  }
  if (beginTime < currentStats.endTime && endTime > currentStats.beginTime) {
    if (DEBUG) {
      Slog.d(TAG,mLogPrefix + "Returning in-memory stats");
    }
    if (results == null) {
      results=new ArrayList<>();
    }
    combiner.combine(currentStats,true,results);
  }
  if (DEBUG) {
    Slog.d(TAG,mLogPrefix + "Results: " + (results != null ? results.size() : 0));
  }
  return results;
}
