{
  super(delegator,context);
  final Locale locale=mCurrentLocale;
  mCurrentDate=Calendar.getInstance(locale);
  mTempDate=Calendar.getInstance(locale);
  mMinDate=Calendar.getInstance(locale);
  mMaxDate=Calendar.getInstance(locale);
  mMinDate.set(DEFAULT_START_YEAR,Calendar.JANUARY,1);
  mMaxDate.set(DEFAULT_END_YEAR,Calendar.DECEMBER,31);
  final Resources res=mDelegator.getResources();
  final TypedArray a=mContext.obtainStyledAttributes(attrs,R.styleable.DatePicker,defStyleAttr,defStyleRes);
  final LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  final int layoutResourceId=a.getResourceId(R.styleable.DatePicker_internalLayout,R.layout.date_picker_material);
  mContainer=(ViewGroup)inflater.inflate(layoutResourceId,mDelegator);
  final ViewGroup header=(ViewGroup)mContainer.findViewById(R.id.date_picker_header);
  mHeaderYear=(TextView)header.findViewById(R.id.date_picker_header_year);
  mHeaderYear.setOnClickListener(mOnHeaderClickListener);
  mHeaderMonthDay=(TextView)header.findViewById(R.id.date_picker_header_date);
  mHeaderMonthDay.setOnClickListener(mOnHeaderClickListener);
  ColorStateList headerTextColor=null;
  @SuppressWarnings("deprecation") final int monthHeaderTextAppearance=a.getResourceId(R.styleable.DatePicker_headerMonthTextAppearance,0);
  if (monthHeaderTextAppearance != 0) {
    final TypedArray textAppearance=mContext.obtainStyledAttributes(null,ATTRS_TEXT_COLOR,0,monthHeaderTextAppearance);
    final ColorStateList legacyHeaderTextColor=textAppearance.getColorStateList(0);
    headerTextColor=applyLegacyColorFixes(legacyHeaderTextColor);
    textAppearance.recycle();
  }
  if (headerTextColor == null) {
    headerTextColor=a.getColorStateList(R.styleable.DatePicker_headerTextColor);
  }
  if (headerTextColor != null) {
    mHeaderYear.setTextColor(headerTextColor);
    mHeaderMonthDay.setTextColor(headerTextColor);
  }
  if (a.hasValueOrEmpty(R.styleable.DatePicker_headerBackground)) {
    header.setBackground(a.getDrawable(R.styleable.DatePicker_headerBackground));
  }
  mAnimator=(ViewAnimator)mContainer.findViewById(R.id.animator);
  mDayPickerView=(DayPickerView)mAnimator.findViewById(R.id.date_picker_day_picker);
  mDayPickerView.setFirstDayOfWeek(mFirstDayOfWeek);
  mDayPickerView.setMinDate(mMinDate.getTimeInMillis());
  mDayPickerView.setMaxDate(mMaxDate.getTimeInMillis());
  mDayPickerView.setDate(mCurrentDate.getTimeInMillis());
  mDayPickerView.setOnDaySelectedListener(mOnDaySelectedListener);
  mYearPickerView=(YearPickerView)mAnimator.findViewById(R.id.date_picker_year_picker);
  mYearPickerView.setRange(mMinDate,mMaxDate);
  mYearPickerView.setDate(mCurrentDate.getTimeInMillis());
  mYearPickerView.setOnYearSelectedListener(mOnYearSelectedListener);
  final int yearTextAppearanceResId=a.getResourceId(R.styleable.DatePicker_yearListItemTextAppearance,0);
  if (yearTextAppearanceResId != 0) {
    mYearPickerView.setYearTextAppearance(yearTextAppearanceResId);
  }
  final int yearActivatedTextAppearanceResId=a.getResourceId(R.styleable.DatePicker_yearListItemActivatedTextAppearance,0);
  if (yearActivatedTextAppearanceResId != 0) {
    mYearPickerView.setYearActivatedTextAppearance(yearActivatedTextAppearanceResId);
  }
  a.recycle();
  mSelectDay=res.getString(R.string.select_day);
  mSelectYear=res.getString(R.string.select_year);
  final Animation inAnim=new AlphaAnimation(0,1);
  inAnim.setDuration(ANIMATION_DURATION);
  mAnimator.setInAnimation(inAnim);
  final Animation outAnim=new AlphaAnimation(1,0);
  outAnim.setDuration(ANIMATION_DURATION);
  mAnimator.setOutAnimation(outAnim);
  onLocaleChanged(mCurrentLocale);
  setCurrentView(VIEW_MONTH_DAY);
}
