{
  checkNotNull(captureRequest,"captureRequest must not be null");
  int afTrigger=ParamsUtils.getOrDefault(captureRequest,CONTROL_AF_TRIGGER,CONTROL_AF_TRIGGER_IDLE);
  final String afMode=parameters.getFocusMode();
  if (!Objects.equals(mAfModePrevious,afMode)) {
    if (VERBOSE) {
      Log.v(TAG,"processRequestTriggers - AF mode switched from " + mAfModePrevious + " to "+ afMode);
    }
synchronized (mLock) {
      ++mAfRun;
      mAfState=CONTROL_AF_STATE_INACTIVE;
    }
    mCamera.cancelAutoFocus();
  }
  mAfModePrevious=afMode;
{
    final int currentAfRun;
synchronized (mLock) {
      currentAfRun=mAfRun;
    }
    Camera.AutoFocusMoveCallback afMoveCallback=new Camera.AutoFocusMoveCallback(){
      @Override public void onAutoFocusMoving(      boolean start,      Camera camera){
synchronized (mLock) {
          int latestAfRun=mAfRun;
          if (VERBOSE) {
            Log.v(TAG,"onAutoFocusMoving - start " + start + " latest AF run "+ latestAfRun+ ", last AF run "+ currentAfRun);
          }
          if (currentAfRun != latestAfRun) {
            Log.d(TAG,"onAutoFocusMoving - ignoring move callbacks from old af run" + currentAfRun);
            return;
          }
          int newAfState=start ? CONTROL_AF_STATE_PASSIVE_SCAN : CONTROL_AF_STATE_PASSIVE_FOCUSED;
switch (afMode) {
case Parameters.FOCUS_MODE_CONTINUOUS_PICTURE:
case Parameters.FOCUS_MODE_CONTINUOUS_VIDEO:
            break;
default :
          Log.w(TAG,"onAutoFocus - got unexpected onAutoFocus in mode " + afMode);
      }
      mAfState=newAfState;
    }
  }
}
;
switch (afMode) {
case Parameters.FOCUS_MODE_AUTO:
case Parameters.FOCUS_MODE_MACRO:
case Parameters.FOCUS_MODE_CONTINUOUS_PICTURE:
case Parameters.FOCUS_MODE_CONTINUOUS_VIDEO:
  mCamera.setAutoFocusMoveCallback(afMoveCallback);
}
}
switch (afTrigger) {
case CONTROL_AF_TRIGGER_START:
int afStateAfterStart;
switch (afMode) {
case Parameters.FOCUS_MODE_AUTO:
case Parameters.FOCUS_MODE_MACRO:
afStateAfterStart=CONTROL_AF_STATE_ACTIVE_SCAN;
break;
case Parameters.FOCUS_MODE_CONTINUOUS_PICTURE:
case Parameters.FOCUS_MODE_CONTINUOUS_VIDEO:
afStateAfterStart=CONTROL_AF_STATE_PASSIVE_SCAN;
break;
default :
afStateAfterStart=CONTROL_AF_STATE_INACTIVE;
}
final int currentAfRun;
synchronized (mLock) {
currentAfRun=++mAfRun;
mAfState=afStateAfterStart;
}
if (VERBOSE) {
Log.v(TAG,"processRequestTriggers - got AF_TRIGGER_START, " + "new AF run is " + currentAfRun);
}
if (afStateAfterStart == CONTROL_AF_STATE_INACTIVE) {
break;
}
mCamera.autoFocus(new Camera.AutoFocusCallback(){
@Override public void onAutoFocus(boolean success,Camera camera){
synchronized (mLock) {
int latestAfRun=mAfRun;
if (VERBOSE) {
Log.v(TAG,"onAutoFocus - success " + success + " latest AF run "+ latestAfRun+ ", last AF run "+ currentAfRun);
}
if (latestAfRun != currentAfRun) {
Log.d(TAG,String.format("onAutoFocus - ignoring AF callback " + "(old run %d, new run %d)",currentAfRun,latestAfRun));
return;
}
int newAfState=success ? CONTROL_AF_STATE_FOCUSED_LOCKED : CONTROL_AF_STATE_NOT_FOCUSED_LOCKED;
switch (afMode) {
case Parameters.FOCUS_MODE_AUTO:
case Parameters.FOCUS_MODE_CONTINUOUS_PICTURE:
case Parameters.FOCUS_MODE_CONTINUOUS_VIDEO:
case Parameters.FOCUS_MODE_MACRO:
break;
default :
Log.w(TAG,"onAutoFocus - got unexpected onAutoFocus in mode " + afMode);
}
mAfState=newAfState;
}
}
}
);
break;
case CONTROL_AF_TRIGGER_CANCEL:
synchronized (mLock) {
int updatedAfRun;
synchronized (mLock) {
updatedAfRun=++mAfRun;
mAfState=CONTROL_AF_STATE_INACTIVE;
}
mCamera.cancelAutoFocus();
if (VERBOSE) {
Log.v(TAG,"processRequestTriggers - got AF_TRIGGER_CANCEL, " + "new AF run is " + updatedAfRun);
}
}
break;
case CONTROL_AF_TRIGGER_IDLE:
break;
default :
Log.w(TAG,"processRequestTriggers - ignoring unknown control.afTrigger = " + afTrigger);
}
}
