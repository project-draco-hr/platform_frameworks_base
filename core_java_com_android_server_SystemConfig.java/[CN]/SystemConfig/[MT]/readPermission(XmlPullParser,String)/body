{
  if (mPermissions.containsKey(name)) {
    throw new IllegalStateException("Duplicate permission definition for " + name);
  }
  final boolean perUser=XmlUtils.readBooleanAttribute(parser,"perUser",false);
  final PermissionEntry perm=new PermissionEntry(name,perUser);
  mPermissions.put(name,perm);
  int outerDepth=parser.getDepth();
  int type;
  while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
    if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
      continue;
    }
    String tagName=parser.getName();
    if ("group".equals(tagName)) {
      String gidStr=parser.getAttributeValue(null,"gid");
      if (gidStr != null) {
        int gid=Process.getGidForName(gidStr);
        perm.gids=appendInt(perm.gids,gid);
      }
 else {
        Slog.w(TAG,"<group> without gid at " + parser.getPositionDescription());
      }
    }
    XmlUtils.skipCurrentTag(parser);
  }
}
