{
  Resources r=Resources.getSystem();
  WpsConfiguration wpsConfig=config.wpsConfig;
  final View textEntryView=LayoutInflater.from(mContext).inflate(R.layout.wifi_p2p_go_negotiation_request_alert,null);
  final EditText pin=(EditText)textEntryView.findViewById(R.id.wifi_p2p_wps_pin);
  AlertDialog dialog=new AlertDialog.Builder(mContext).setTitle(r.getString(R.string.wifi_p2p_dialog_title)).setView(textEntryView).setPositiveButton(r.getString(R.string.ok),new OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
      if (DBG)       Slog.d(TAG,getName() + " connect " + pin.getText());
      mSavedGoNegotiationConfig.wpsConfig.setup=Setup.KEYPAD;
      mSavedGoNegotiationConfig.wpsConfig.pin=pin.getText().toString();
      sendMessage(WifiP2pManager.CONNECT,mSavedGoNegotiationConfig);
      mSavedGoNegotiationConfig=null;
    }
  }
).setNegativeButton(r.getString(R.string.cancel),new OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      if (DBG)       Slog.d(TAG,getName() + " reject");
      sendMessage(WifiP2pManager.REJECT,mSavedGoNegotiationConfig.deviceAddress);
      mSavedGoNegotiationConfig=null;
    }
  }
).create();
  if (wpsConfig.setup == Setup.PBC) {
    pin.setVisibility(View.GONE);
    dialog.setMessage(r.getString(R.string.wifi_p2p_pbc_go_negotiation_request_message,config.deviceAddress));
  }
 else {
    dialog.setMessage(r.getString(R.string.wifi_p2p_pin_go_negotiation_request_message,config.deviceAddress));
  }
  dialog.getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ALERT);
  dialog.show();
}
