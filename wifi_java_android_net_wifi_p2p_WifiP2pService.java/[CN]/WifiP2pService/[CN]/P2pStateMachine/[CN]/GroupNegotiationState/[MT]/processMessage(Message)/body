{
  if (DBG)   logd(getName() + message.toString());
switch (message.what) {
case WifiMonitor.P2P_GO_NEGOTIATION_SUCCESS_EVENT:
case WifiMonitor.P2P_GROUP_FORMATION_SUCCESS_EVENT:
    if (DBG)     logd(getName() + " go success");
  break;
case WifiMonitor.P2P_GO_NEGOTIATION_FAILURE_EVENT:
case WifiMonitor.P2P_GROUP_FORMATION_FAILURE_EVENT:
if (DBG) logd(getName() + " go failure");
updateDeviceStatus(mSavedConnectConfig.deviceAddress,Status.FAILED);
mSavedConnectConfig=null;
sendP2pPeersChangedBroadcast();
transitionTo(mInactiveState);
break;
case WifiMonitor.P2P_GROUP_STARTED_EVENT:
mGroup=(WifiP2pGroup)message.obj;
if (DBG) logd(getName() + " group started");
if (mGroup.isGroupOwner()) {
startDhcpServer(mGroup.getInterface());
}
 else {
mDhcpStateMachine=DhcpStateMachine.makeDhcpStateMachine(mContext,P2pStateMachine.this,mGroup.getInterface());
mDhcpStateMachine.sendMessage(DhcpStateMachine.CMD_START_DHCP);
WifiP2pDevice groupOwner=mGroup.getOwner();
updateDeviceStatus(groupOwner.deviceAddress,Status.CONNECTED);
sendP2pPeersChangedBroadcast();
}
transitionTo(mGroupCreatedState);
break;
case GROUP_NEGOTIATION_TIMED_OUT:
if (mGroupNegotiationTimeoutIndex == message.arg1) {
if (DBG) logd("Group negotiation timed out");
updateDeviceStatus(mSavedConnectConfig.deviceAddress,Status.FAILED);
mSavedConnectConfig=null;
sendP2pPeersChangedBroadcast();
transitionTo(mInactiveState);
}
break;
default :
return NOT_HANDLED;
}
return HANDLED;
}
