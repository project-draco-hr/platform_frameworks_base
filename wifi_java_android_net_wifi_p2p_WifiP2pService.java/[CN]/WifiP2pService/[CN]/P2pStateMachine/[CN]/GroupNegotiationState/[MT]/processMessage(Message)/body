{
  if (DBG)   logd(getName() + message.toString());
switch (message.what) {
case WifiMonitor.P2P_GO_NEGOTIATION_SUCCESS_EVENT:
case WifiMonitor.P2P_GROUP_FORMATION_SUCCESS_EVENT:
    if (DBG)     logd(getName() + " go success");
  break;
case WifiMonitor.P2P_GO_NEGOTIATION_FAILURE_EVENT:
case WifiMonitor.P2P_GROUP_FORMATION_FAILURE_EVENT:
if (DBG) logd(getName() + " go failure");
updateDeviceStatus(mSavedConnectConfig.deviceAddress,WifiP2pDevice.FAILED);
mSavedConnectConfig=null;
sendP2pPeersChangedBroadcast();
transitionTo(mInactiveState);
break;
case GROUP_NEGOTIATION_TIMED_OUT:
if (mGroupNegotiationTimeoutIndex == message.arg1) {
if (DBG) logd("Group negotiation timed out");
updateDeviceStatus(mSavedConnectConfig.deviceAddress,WifiP2pDevice.FAILED);
mSavedConnectConfig=null;
sendP2pPeersChangedBroadcast();
transitionTo(mInactiveState);
}
break;
case WifiP2pManager.DISCOVER_PEERS:
replyToMessage(message,WifiP2pManager.DISCOVER_PEERS_FAILED,WifiP2pManager.BUSY);
break;
case WifiP2pManager.CANCEL_CONNECT:
if (WifiNative.p2pCancelConnect()) {
replyToMessage(message,WifiP2pManager.CANCEL_CONNECT_SUCCEEDED);
}
 else {
replyToMessage(message,WifiP2pManager.CANCEL_CONNECT_FAILED,WifiP2pManager.ERROR);
}
break;
default :
return NOT_HANDLED;
}
return HANDLED;
}
