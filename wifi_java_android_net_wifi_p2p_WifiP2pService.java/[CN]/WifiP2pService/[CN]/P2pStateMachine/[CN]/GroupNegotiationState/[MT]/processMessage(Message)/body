{
  if (DBG)   logd(getName() + message.toString());
switch (message.what) {
case WifiMonitor.P2P_GO_NEGOTIATION_SUCCESS_EVENT:
case WifiMonitor.P2P_GROUP_FORMATION_SUCCESS_EVENT:
    if (DBG)     logd(getName() + " go success");
  break;
case WifiMonitor.P2P_GROUP_STARTED_EVENT:
mGroup=(WifiP2pGroup)message.obj;
if (DBG) logd(getName() + " group started");
if (mGroup.getNetworkId() == WifiP2pGroup.PERSISTENT_NET_ID) {
updatePersistentNetworks(NO_RELOAD);
String devAddr=mGroup.getOwner().deviceAddress;
mGroup.setNetworkId(mGroups.getNetworkId(devAddr,mGroup.getNetworkName()));
}
if (mGroup.isGroupOwner()) {
startDhcpServer(mGroup.getInterface());
}
 else {
mWifiNative.setP2pGroupIdle(mGroup.getInterface(),GROUP_IDLE_TIME_S);
mDhcpStateMachine=DhcpStateMachine.makeDhcpStateMachine(mContext,P2pStateMachine.this,mGroup.getInterface());
mDhcpStateMachine.sendMessage(DhcpStateMachine.CMD_START_DHCP);
WifiP2pDevice groupOwner=mGroup.getOwner();
groupOwner.update(mPeers.get(groupOwner.deviceAddress));
mPeers.updateStatus(groupOwner.deviceAddress,WifiP2pDevice.CONNECTED);
sendP2pPeersChangedBroadcast();
}
mSavedPeerConfig=null;
transitionTo(mGroupCreatedState);
break;
case WifiMonitor.P2P_GO_NEGOTIATION_FAILURE_EVENT:
P2pStatus status=(P2pStatus)message.obj;
if (status == P2pStatus.NO_COMMON_CHANNEL) {
transitionTo(mFrequencyConflictState);
break;
}
case WifiMonitor.P2P_GROUP_REMOVED_EVENT:
if (DBG) logd(getName() + " go failure");
handleGroupCreationFailure();
transitionTo(mInactiveState);
break;
case WifiMonitor.P2P_GROUP_FORMATION_FAILURE_EVENT:
status=(P2pStatus)message.obj;
if (status == P2pStatus.NO_COMMON_CHANNEL) {
transitionTo(mFrequencyConflictState);
break;
}
break;
case WifiMonitor.P2P_INVITATION_RESULT_EVENT:
status=(P2pStatus)message.obj;
if (status == P2pStatus.SUCCESS) {
break;
}
 else if (status == P2pStatus.UNKNOWN_P2P_GROUP) {
int netId=mSavedPeerConfig.netId;
if (netId >= 0) {
if (DBG) logd("Remove unknown client from the list");
removeClientFromList(netId,mSavedPeerConfig.deviceAddress,true);
}
mSavedPeerConfig.netId=WifiP2pGroup.PERSISTENT_NET_ID;
if (connect(mSavedPeerConfig,NO_REINVOCATION) == CONNECT_FAILURE) {
handleGroupCreationFailure();
transitionTo(mInactiveState);
}
}
 else if (status == P2pStatus.INFORMATION_IS_CURRENTLY_UNAVAILABLE) {
mSavedPeerConfig.netId=WifiP2pGroup.PERSISTENT_NET_ID;
if (connect(mSavedPeerConfig,NO_REINVOCATION) == CONNECT_FAILURE) {
handleGroupCreationFailure();
transitionTo(mInactiveState);
}
}
 else if (status == P2pStatus.NO_COMMON_CHANNEL) {
transitionTo(mFrequencyConflictState);
}
 else {
handleGroupCreationFailure();
transitionTo(mInactiveState);
}
break;
default :
return NOT_HANDLED;
}
return HANDLED;
}
