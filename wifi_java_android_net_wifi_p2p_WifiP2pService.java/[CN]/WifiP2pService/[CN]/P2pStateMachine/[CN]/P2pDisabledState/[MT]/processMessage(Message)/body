{
  if (DBG)   Slog.d(TAG,getName() + message.toString());
switch (message.what) {
case WifiP2pManager.ENABLE_P2P:
    mSavedEnableRequestMessage=Message.obtain(message);
  OnClickListener listener=new OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      if (which == DialogInterface.BUTTON_POSITIVE) {
        sendMessage(WIFI_DISABLE_USER_ACCEPT);
      }
 else {
        mReplyChannel.replyToMessage(mSavedEnableRequestMessage,WifiP2pManager.ENABLE_P2P_FAILED);
      }
    }
  }
;
if (mWifiState != WifiManager.WIFI_STATE_DISABLED || mWifiApState != WifiManager.WIFI_AP_STATE_DISABLED) {
  Resources r=Resources.getSystem();
  AlertDialog dialog=new AlertDialog.Builder(mContext).setTitle(r.getString(R.string.wifi_p2p_dialog_title)).setMessage(r.getString(R.string.wifi_p2p_turnon_message)).setPositiveButton(r.getString(R.string.ok),listener).setNegativeButton(r.getString(R.string.cancel),listener).create();
  dialog.getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ALERT);
  dialog.show();
}
 else {
  mWifiChannel.sendMessage(P2P_ENABLE_PENDING);
  transitionTo(mWaitForWifiDisableState);
}
break;
case WIFI_DISABLE_USER_ACCEPT:
mWifiChannel.sendMessage(P2P_ENABLE_PENDING);
transitionTo(mWaitForWifiDisableState);
break;
case WifiStateMachine.WIFI_ENABLE_PENDING:
mReplyChannel.replyToMessage(message,WIFI_ENABLE_PROCEED);
break;
default :
return NOT_HANDLED;
}
return HANDLED;
}
