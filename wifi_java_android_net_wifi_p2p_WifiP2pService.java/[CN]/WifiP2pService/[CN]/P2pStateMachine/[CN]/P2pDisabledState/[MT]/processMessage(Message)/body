{
  if (DBG)   logd(getName() + message.toString());
switch (message.what) {
case WifiP2pManager.ENABLE_P2P:
    OnClickListener listener=new OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        if (which == DialogInterface.BUTTON_POSITIVE) {
          sendMessage(WIFI_DISABLE_USER_ACCEPT);
        }
 else {
          logd("User rejected enabling p2p");
        }
      }
    }
;
  if (mWifiState != WifiManager.WIFI_STATE_DISABLED || mWifiApState != WifiManager.WIFI_AP_STATE_DISABLED) {
    Resources r=Resources.getSystem();
    AlertDialog dialog=new AlertDialog.Builder(mContext).setTitle(r.getString(R.string.wifi_p2p_dialog_title)).setMessage(r.getString(R.string.wifi_p2p_turnon_message)).setPositiveButton(r.getString(R.string.ok),listener).setNegativeButton(r.getString(R.string.cancel),listener).create();
    dialog.getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ALERT);
    dialog.show();
    transitionTo(mWaitForUserActionState);
  }
 else {
    mWifiChannel.sendMessage(P2P_ENABLE_PENDING);
    transitionTo(mWaitForWifiDisableState);
  }
replyToMessage(message,WifiP2pManager.ENABLE_P2P_SUCCEEDED);
break;
case WifiP2pManager.DISABLE_P2P:
replyToMessage(message,WifiP2pManager.DISABLE_P2P_SUCCEEDED);
break;
case WifiStateMachine.WIFI_ENABLE_PENDING:
replyToMessage(message,WIFI_ENABLE_PROCEED);
break;
default :
return NOT_HANDLED;
}
return HANDLED;
}
