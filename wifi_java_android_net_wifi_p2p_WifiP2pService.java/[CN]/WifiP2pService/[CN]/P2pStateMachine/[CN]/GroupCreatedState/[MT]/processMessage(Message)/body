{
  if (DBG)   logd(getName() + message.toString());
switch (message.what) {
case WifiMonitor.AP_STA_CONNECTED_EVENT:
    String interfaceAddress=(String)message.obj;
  String deviceAddress=getDeviceAddress(interfaceAddress);
if (deviceAddress != null) {
  mGroup.addClient(deviceAddress);
  updateDeviceStatus(deviceAddress,WifiP2pDevice.CONNECTED);
  if (DBG)   logd(getName() + " ap sta connected");
  sendP2pPeersChangedBroadcast();
}
 else {
  loge("Connect on unknown device address : " + interfaceAddress);
}
break;
case WifiMonitor.AP_STA_DISCONNECTED_EVENT:
interfaceAddress=(String)message.obj;
deviceAddress=getDeviceAddress(interfaceAddress);
if (deviceAddress != null) {
updateDeviceStatus(deviceAddress,WifiP2pDevice.AVAILABLE);
if (mGroup.removeClient(deviceAddress)) {
if (DBG) logd("Removed client " + deviceAddress);
if (!mPersistGroup && mGroup.isClientListEmpty()) {
Slog.d(TAG,"Client list empty, remove non-persistent p2p group");
WifiNative.p2pGroupRemove(mGroup.getInterface());
}
}
 else {
if (DBG) logd("Failed to remove client " + deviceAddress);
for (WifiP2pDevice c : mGroup.getClientList()) {
if (DBG) logd("client " + c.deviceAddress);
}
}
sendP2pPeersChangedBroadcast();
if (DBG) loge(getName() + " ap sta disconnected");
}
 else {
loge("Disconnect on unknown device address : " + interfaceAddress);
}
break;
case DhcpStateMachine.CMD_POST_DHCP_ACTION:
DhcpInfoInternal dhcpInfo=(DhcpInfoInternal)message.obj;
if (message.arg1 == DhcpStateMachine.DHCP_SUCCESS && dhcpInfo != null) {
if (DBG) logd("DhcpInfo: " + dhcpInfo);
setWifiP2pInfoOnGroupFormation(dhcpInfo.serverAddress);
sendP2pConnectionChangedBroadcast();
}
 else {
WifiNative.p2pGroupRemove(mGroup.getInterface());
}
break;
case WifiP2pManager.REMOVE_GROUP:
if (DBG) loge(getName() + " remove group");
if (WifiNative.p2pGroupRemove(mGroup.getInterface())) {
replyToMessage(message,WifiP2pManager.REMOVE_GROUP_SUCCEEDED);
}
 else {
replyToMessage(message,WifiP2pManager.REMOVE_GROUP_FAILED,WifiP2pManager.ERROR);
}
break;
case WifiMonitor.P2P_GROUP_REMOVED_EVENT:
if (DBG) loge(getName() + " group removed");
Collection<WifiP2pDevice> devices=mGroup.getClientList();
boolean changed=false;
for (WifiP2pDevice d : mPeers.getDeviceList()) {
if (devices.contains(d) || mGroup.getOwner().equals(d)) {
d.status=WifiP2pDevice.AVAILABLE;
changed=true;
}
}
if (mGroup.isGroupOwner()) {
stopDhcpServer();
}
 else {
if (DBG) logd("stop DHCP client");
mDhcpStateMachine.sendMessage(DhcpStateMachine.CMD_STOP_DHCP);
mDhcpStateMachine.quit();
mDhcpStateMachine=null;
}
mGroup=null;
if (changed) sendP2pPeersChangedBroadcast();
transitionTo(mInactiveState);
break;
case WifiMonitor.P2P_DEVICE_LOST_EVENT:
WifiP2pDevice device=(WifiP2pDevice)message.obj;
if (mGroup.contains(device)) {
if (DBG) logd("Lost " + device + " , do nothing");
return HANDLED;
}
return NOT_HANDLED;
case WifiP2pManager.DISABLE_P2P:
sendMessage(WifiP2pManager.REMOVE_GROUP);
deferMessage(message);
break;
case WifiP2pManager.CONNECT:
WifiP2pConfig config=(WifiP2pConfig)message.obj;
logd("Inviting device : " + config.deviceAddress);
if (WifiNative.p2pInvite(mGroup,config.deviceAddress)) {
updateDeviceStatus(config.deviceAddress,WifiP2pDevice.INVITED);
sendP2pPeersChangedBroadcast();
replyToMessage(message,WifiP2pManager.CONNECT_SUCCEEDED);
}
 else {
replyToMessage(message,WifiP2pManager.CONNECT_FAILED,WifiP2pManager.ERROR);
}
break;
case WifiMonitor.P2P_PROV_DISC_PBC_REQ_EVENT:
case WifiMonitor.P2P_PROV_DISC_ENTER_PIN_EVENT:
case WifiMonitor.P2P_PROV_DISC_SHOW_PIN_EVENT:
WifiP2pProvDiscEvent provDisc=(WifiP2pProvDiscEvent)message.obj;
mSavedPeerConfig=new WifiP2pConfig();
mSavedPeerConfig.deviceAddress=provDisc.device.deviceAddress;
if (message.what == WifiMonitor.P2P_PROV_DISC_ENTER_PIN_EVENT) {
mSavedPeerConfig.wps.setup=WpsInfo.KEYPAD;
}
 else if (message.what == WifiMonitor.P2P_PROV_DISC_SHOW_PIN_EVENT) {
mSavedPeerConfig.wps.setup=WpsInfo.DISPLAY;
mSavedPeerConfig.wps.pin=provDisc.pin;
}
 else {
mSavedPeerConfig.wps.setup=WpsInfo.PBC;
}
transitionTo(mUserAuthorizingJoinState);
break;
case WifiMonitor.P2P_GROUP_STARTED_EVENT:
Slog.e(TAG,"Duplicate group creation event notice, ignore");
break;
default :
return NOT_HANDLED;
}
return HANDLED;
}
