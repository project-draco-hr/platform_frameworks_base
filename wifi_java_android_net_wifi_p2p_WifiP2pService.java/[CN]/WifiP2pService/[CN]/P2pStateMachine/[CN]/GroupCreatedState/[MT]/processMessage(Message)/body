{
  if (DBG)   logd(getName() + message.toString());
switch (message.what) {
case WifiMonitor.AP_STA_CONNECTED_EVENT:
    WifiP2pDevice device=(WifiP2pDevice)message.obj;
  String deviceAddress=device.deviceAddress;
if (deviceAddress != null) {
  if (mPeers.get(deviceAddress) != null) {
    mGroup.addClient(mPeers.get(deviceAddress));
  }
 else {
    mGroup.addClient(deviceAddress);
  }
  mPeers.updateStatus(deviceAddress,WifiP2pDevice.CONNECTED);
  if (DBG)   logd(getName() + " ap sta connected");
  sendP2pPeersChangedBroadcast();
}
 else {
  loge("Connect on null device address, ignore");
}
sendP2pConnectionChangedBroadcast();
break;
case WifiMonitor.AP_STA_DISCONNECTED_EVENT:
device=(WifiP2pDevice)message.obj;
deviceAddress=device.deviceAddress;
if (deviceAddress != null) {
mPeers.updateStatus(deviceAddress,WifiP2pDevice.AVAILABLE);
if (mGroup.removeClient(deviceAddress)) {
if (DBG) logd("Removed client " + deviceAddress);
if (!mAutonomousGroup && mGroup.isClientListEmpty()) {
Slog.d(TAG,"Client list empty, remove non-persistent p2p group");
mWifiNative.p2pGroupRemove(mGroup.getInterface());
}
 else {
sendP2pConnectionChangedBroadcast();
}
}
 else {
if (DBG) logd("Failed to remove client " + deviceAddress);
for (WifiP2pDevice c : mGroup.getClientList()) {
if (DBG) logd("client " + c.deviceAddress);
}
}
sendP2pPeersChangedBroadcast();
if (DBG) logd(getName() + " ap sta disconnected");
}
 else {
loge("Disconnect on unknown device: " + device);
}
break;
case DhcpStateMachine.CMD_POST_DHCP_ACTION:
DhcpResults dhcpResults=(DhcpResults)message.obj;
if (message.arg1 == DhcpStateMachine.DHCP_SUCCESS && dhcpResults != null) {
if (DBG) logd("DhcpResults: " + dhcpResults);
setWifiP2pInfoOnGroupFormation(dhcpResults.serverAddress);
sendP2pConnectionChangedBroadcast();
mWifiNative.setP2pPowerSave(mGroup.getInterface(),true);
}
 else {
loge("DHCP failed");
mWifiNative.p2pGroupRemove(mGroup.getInterface());
}
break;
case WifiP2pManager.REMOVE_GROUP:
if (DBG) logd(getName() + " remove group");
if (mWifiNative.p2pGroupRemove(mGroup.getInterface())) {
transitionTo(mOngoingGroupRemovalState);
replyToMessage(message,WifiP2pManager.REMOVE_GROUP_SUCCEEDED);
}
 else {
handleGroupRemoved();
transitionTo(mInactiveState);
replyToMessage(message,WifiP2pManager.REMOVE_GROUP_FAILED,WifiP2pManager.ERROR);
}
break;
case WifiMonitor.P2P_GROUP_REMOVED_EVENT:
if (DBG) logd(getName() + " group removed");
handleGroupRemoved();
transitionTo(mInactiveState);
break;
case WifiMonitor.P2P_DEVICE_LOST_EVENT:
device=(WifiP2pDevice)message.obj;
if (mGroup.contains(device)) {
if (DBG) logd("Add device to lost list " + device);
mPeersLostDuringConnection.update(device);
return HANDLED;
}
return NOT_HANDLED;
case WifiStateMachine.CMD_DISABLE_P2P_REQ:
sendMessage(WifiP2pManager.REMOVE_GROUP);
deferMessage(message);
break;
case WifiP2pManager.CONNECT:
WifiP2pConfig config=(WifiP2pConfig)message.obj;
if (config.deviceAddress == null) {
if (config.wps.setup == WpsInfo.PBC) {
mWifiNative.startWpsPbc(mGroup.getInterface(),null);
}
 else {
if (config.wps.pin == null) {
String pin=mWifiNative.startWpsPinDisplay(mGroup.getInterface());
try {
Integer.parseInt(pin);
notifyInvitationSent(pin,config.deviceAddress != null ? config.deviceAddress : "any");
}
 catch (NumberFormatException ignore) {
}
}
 else {
mWifiNative.startWpsPinKeypad(mGroup.getInterface(),config.wps.pin);
}
}
replyToMessage(message,WifiP2pManager.CONNECT_SUCCEEDED);
}
 else {
logd("Inviting device : " + config.deviceAddress);
mSavedPeerConfig=config;
if (mWifiNative.p2pInvite(mGroup,config.deviceAddress)) {
mPeers.updateStatus(config.deviceAddress,WifiP2pDevice.INVITED);
sendP2pPeersChangedBroadcast();
replyToMessage(message,WifiP2pManager.CONNECT_SUCCEEDED);
}
 else {
replyToMessage(message,WifiP2pManager.CONNECT_FAILED,WifiP2pManager.ERROR);
}
}
break;
case WifiMonitor.P2P_INVITATION_RESULT_EVENT:
P2pStatus status=(P2pStatus)message.obj;
logd("===> INVITATION RESULT EVENT : " + status);
if (status == P2pStatus.SUCCESS) {
break;
}
 else if (status == P2pStatus.UNKNOWN_P2P_GROUP) {
int netId=mGroup.getNetworkId();
if (netId >= 0) {
if (DBG) logd("Remove unknown client from the list");
if (!removeClientFromList(netId,mSavedPeerConfig.deviceAddress,false)) {
Slog.e(TAG,"Already removed the client, ignore");
break;
}
sendMessage(WifiP2pManager.CONNECT,mSavedPeerConfig);
}
}
break;
case WifiMonitor.P2P_PROV_DISC_PBC_REQ_EVENT:
case WifiMonitor.P2P_PROV_DISC_ENTER_PIN_EVENT:
case WifiMonitor.P2P_PROV_DISC_SHOW_PIN_EVENT:
WifiP2pProvDiscEvent provDisc=(WifiP2pProvDiscEvent)message.obj;
mSavedPeerConfig=new WifiP2pConfig();
mSavedPeerConfig.deviceAddress=provDisc.device.deviceAddress;
if (message.what == WifiMonitor.P2P_PROV_DISC_ENTER_PIN_EVENT) {
mSavedPeerConfig.wps.setup=WpsInfo.KEYPAD;
}
 else if (message.what == WifiMonitor.P2P_PROV_DISC_SHOW_PIN_EVENT) {
mSavedPeerConfig.wps.setup=WpsInfo.DISPLAY;
mSavedPeerConfig.wps.pin=provDisc.pin;
}
 else {
mSavedPeerConfig.wps.setup=WpsInfo.PBC;
}
transitionTo(mUserAuthorizingJoinState);
break;
case WifiMonitor.P2P_GROUP_STARTED_EVENT:
Slog.e(TAG,"Duplicate group creation event notice, ignore");
break;
default :
return NOT_HANDLED;
}
return HANDLED;
}
