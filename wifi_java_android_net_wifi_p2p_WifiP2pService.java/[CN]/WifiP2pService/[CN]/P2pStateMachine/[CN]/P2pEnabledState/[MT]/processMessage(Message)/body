{
  if (DBG)   Slog.d(TAG,getName() + message.toString());
switch (message.what) {
case WifiP2pManager.DISABLE_P2P:
    WifiNative.killSupplicant();
  transitionTo(mP2pDisablingState);
break;
case WifiP2pManager.DISCOVER_PEERS:
int timeout=message.arg1;
WifiNative.p2pFlush();
WifiNative.p2pFind(timeout);
break;
case WifiP2pManager.REQUEST_PEERS:
mReplyChannel.replyToMessage(message,WifiP2pManager.RESPONSE_PEERS,mPeers);
break;
case WifiMonitor.P2P_DEVICE_FOUND_EVENT:
WifiP2pDevice device=(WifiP2pDevice)message.obj;
mPeers.add(device);
sendP2pPeersChangedBroadcast();
break;
case WifiMonitor.P2P_DEVICE_LOST_EVENT:
device=(WifiP2pDevice)message.obj;
if (mPeers.remove(device)) sendP2pPeersChangedBroadcast();
break;
case WifiP2pManager.CONNECT:
if (DBG) Slog.d(TAG,getName() + " sending connect");
mSavedConnectConfig=(WifiP2pConfig)message.obj;
String pin=WifiNative.p2pConnect(mSavedConnectConfig);
try {
Integer.parseInt(pin);
notifyWpsPin(pin,mSavedConnectConfig.deviceAddress);
}
 catch (NumberFormatException ignore) {
}
updateDeviceStatus(mSavedConnectConfig.deviceAddress,Status.INVITED);
sendP2pPeersChangedBroadcast();
transitionTo(mGroupNegotiationState);
break;
case WifiP2pManager.REJECT:
if (DBG) Slog.d(TAG,getName() + " sending reject");
WifiNative.p2pReject((String)message.obj);
break;
default :
return NOT_HANDLED;
}
return HANDLED;
}
