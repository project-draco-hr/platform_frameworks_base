{
  if (DBG)   logd(getName() + message.toString());
switch (message.what) {
case WifiP2pManager.ENABLE_P2P:
    replyToMessage(message,WifiP2pManager.ENABLE_P2P_SUCCEEDED);
  break;
case WifiP2pManager.DISABLE_P2P:
if (mPeers.clear()) sendP2pPeersChangedBroadcast();
replyToMessage(message,WifiP2pManager.DISABLE_P2P_SUCCEEDED);
transitionTo(mP2pDisablingState);
break;
case WifiP2pManager.DISCOVER_PEERS:
int timeout=message.arg1;
if (WifiNative.p2pFind(timeout)) {
replyToMessage(message,WifiP2pManager.DISCOVER_PEERS_SUCCEEDED);
}
 else {
replyToMessage(message,WifiP2pManager.DISCOVER_PEERS_FAILED);
}
break;
case WifiMonitor.P2P_DEVICE_FOUND_EVENT:
WifiP2pDevice device=(WifiP2pDevice)message.obj;
mPeers.add(device);
sendP2pPeersChangedBroadcast();
break;
case WifiMonitor.P2P_DEVICE_LOST_EVENT:
device=(WifiP2pDevice)message.obj;
if (mPeers.remove(device)) sendP2pPeersChangedBroadcast();
break;
case WifiP2pManager.CONNECT:
if (DBG) logd(getName() + " sending connect");
mSavedConnectConfig=(WifiP2pConfig)message.obj;
int netId=configuredNetworkId(mSavedConnectConfig.deviceAddress);
if (netId >= 0) {
WifiNative.p2pReinvoke(netId,mSavedConnectConfig.deviceAddress);
}
 else {
String pin=WifiNative.p2pConnect(mSavedConnectConfig,false);
try {
Integer.parseInt(pin);
notifyWpsPin(pin,mSavedConnectConfig.deviceAddress);
}
 catch (NumberFormatException ignore) {
}
}
updateDeviceStatus(mSavedConnectConfig.deviceAddress,Status.INVITED);
sendP2pPeersChangedBroadcast();
replyToMessage(message,WifiP2pManager.CONNECT_SUCCEEDED);
transitionTo(mGroupNegotiationState);
break;
case WifiMonitor.SUP_DISCONNECTION_EVENT:
loge("Connection lost, restart p2p");
WifiNative.killSupplicant();
WifiNative.closeSupplicantConnection();
if (mPeers.clear()) sendP2pPeersChangedBroadcast();
transitionTo(mP2pDisabledState);
sendMessageDelayed(WifiP2pManager.ENABLE_P2P,P2P_RESTART_INTERVAL_MSECS);
default :
return NOT_HANDLED;
}
return HANDLED;
}
