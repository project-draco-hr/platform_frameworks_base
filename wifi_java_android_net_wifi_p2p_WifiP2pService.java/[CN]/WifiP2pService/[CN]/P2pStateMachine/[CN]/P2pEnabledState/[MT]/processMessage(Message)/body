{
  if (DBG)   logd(getName() + message.toString());
switch (message.what) {
case WifiP2pManager.ENABLE_P2P:
    replyToMessage(message,WifiP2pManager.ENABLE_P2P_SUCCEEDED);
  break;
case WifiP2pManager.DISABLE_P2P:
if (mPeers.clear()) sendP2pPeersChangedBroadcast();
replyToMessage(message,WifiP2pManager.DISABLE_P2P_SUCCEEDED);
transitionTo(mP2pDisablingState);
break;
case WifiP2pManager.DISCOVER_PEERS:
int timeout=message.arg1;
if (mWifiNative.p2pFind(timeout)) {
replyToMessage(message,WifiP2pManager.DISCOVER_PEERS_SUCCEEDED);
}
 else {
replyToMessage(message,WifiP2pManager.DISCOVER_PEERS_FAILED,WifiP2pManager.ERROR);
}
break;
case WifiMonitor.P2P_DEVICE_FOUND_EVENT:
WifiP2pDevice device=(WifiP2pDevice)message.obj;
if (mThisDevice.deviceAddress.equals(device.deviceAddress)) break;
mPeers.update(device);
sendP2pPeersChangedBroadcast();
break;
case WifiMonitor.P2P_DEVICE_LOST_EVENT:
device=(WifiP2pDevice)message.obj;
if (mPeers.remove(device)) sendP2pPeersChangedBroadcast();
break;
case WifiMonitor.SUP_DISCONNECTION_EVENT:
loge("Connection lost, restart p2p");
mWifiNative.killSupplicant();
mWifiNative.closeSupplicantConnection();
if (mPeers.clear()) sendP2pPeersChangedBroadcast();
transitionTo(mP2pDisabledState);
sendMessageDelayed(WifiP2pManager.ENABLE_P2P,P2P_RESTART_INTERVAL_MSECS);
break;
default :
return NOT_HANDLED;
}
return HANDLED;
}
