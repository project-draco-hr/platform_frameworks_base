{
  if (DBG)   logd(getName() + message.toString());
switch (message.what) {
case WifiStateMachine.CMD_ENABLE_P2P:
    break;
case WifiStateMachine.CMD_DISABLE_P2P:
  if (mPeers.clear())   sendP2pPeersChangedBroadcast();
if (mGroups.clear()) sendP2pPersistentGroupsChangedBroadcast();
mWifiNative.closeSupplicantConnection();
transitionTo(mP2pDisablingState);
break;
case WifiP2pManager.SET_DEVICE_NAME:
WifiP2pDevice d=(WifiP2pDevice)message.obj;
if (d != null && setAndPersistDeviceName(d.deviceName)) {
if (DBG) logd("set device name " + d.deviceName);
replyToMessage(message,WifiP2pManager.SET_DEVICE_NAME_SUCCEEDED);
}
 else {
replyToMessage(message,WifiP2pManager.SET_DEVICE_NAME_FAILED,WifiP2pManager.ERROR);
}
break;
case WifiP2pManager.DISCOVER_PEERS:
clearSupplicantServiceRequest();
if (mWifiNative.p2pFind(DISCOVER_TIMEOUT_S)) {
replyToMessage(message,WifiP2pManager.DISCOVER_PEERS_SUCCEEDED);
sendP2pDiscoveryChangedBroadcast(true);
}
 else {
replyToMessage(message,WifiP2pManager.DISCOVER_PEERS_FAILED,WifiP2pManager.ERROR);
}
break;
case WifiMonitor.P2P_FIND_STOPPED_EVENT:
sendP2pDiscoveryChangedBroadcast(false);
break;
case WifiP2pManager.STOP_DISCOVERY:
if (mWifiNative.p2pStopFind()) {
replyToMessage(message,WifiP2pManager.STOP_DISCOVERY_SUCCEEDED);
}
 else {
replyToMessage(message,WifiP2pManager.STOP_DISCOVERY_FAILED,WifiP2pManager.ERROR);
}
break;
case WifiP2pManager.DISCOVER_SERVICES:
if (DBG) logd(getName() + " discover services");
if (!updateSupplicantServiceRequest()) {
replyToMessage(message,WifiP2pManager.DISCOVER_SERVICES_FAILED,WifiP2pManager.NO_SERVICE_REQUESTS);
break;
}
if (mWifiNative.p2pFind(DISCOVER_TIMEOUT_S)) {
replyToMessage(message,WifiP2pManager.DISCOVER_SERVICES_SUCCEEDED);
}
 else {
replyToMessage(message,WifiP2pManager.DISCOVER_SERVICES_FAILED,WifiP2pManager.ERROR);
}
break;
case WifiMonitor.P2P_DEVICE_FOUND_EVENT:
WifiP2pDevice device=(WifiP2pDevice)message.obj;
if (mThisDevice.deviceAddress.equals(device.deviceAddress)) break;
mPeers.update(device);
sendP2pPeersChangedBroadcast();
break;
case WifiMonitor.P2P_DEVICE_LOST_EVENT:
device=(WifiP2pDevice)message.obj;
if (mPeers.remove(device)) sendP2pPeersChangedBroadcast();
break;
case WifiP2pManager.ADD_LOCAL_SERVICE:
if (DBG) logd(getName() + " add service");
WifiP2pServiceInfo servInfo=(WifiP2pServiceInfo)message.obj;
if (addLocalService(message.replyTo,servInfo)) {
replyToMessage(message,WifiP2pManager.ADD_LOCAL_SERVICE_SUCCEEDED);
}
 else {
replyToMessage(message,WifiP2pManager.ADD_LOCAL_SERVICE_FAILED);
}
break;
case WifiP2pManager.REMOVE_LOCAL_SERVICE:
if (DBG) logd(getName() + " remove service");
servInfo=(WifiP2pServiceInfo)message.obj;
removeLocalService(message.replyTo,servInfo);
replyToMessage(message,WifiP2pManager.REMOVE_LOCAL_SERVICE_SUCCEEDED);
break;
case WifiP2pManager.CLEAR_LOCAL_SERVICES:
if (DBG) logd(getName() + " clear service");
clearLocalServices(message.replyTo);
replyToMessage(message,WifiP2pManager.CLEAR_LOCAL_SERVICES_SUCCEEDED);
break;
case WifiP2pManager.ADD_SERVICE_REQUEST:
if (DBG) logd(getName() + " add service request");
if (!addServiceRequest(message.replyTo,(WifiP2pServiceRequest)message.obj)) {
replyToMessage(message,WifiP2pManager.ADD_SERVICE_REQUEST_FAILED);
break;
}
replyToMessage(message,WifiP2pManager.ADD_SERVICE_REQUEST_SUCCEEDED);
break;
case WifiP2pManager.REMOVE_SERVICE_REQUEST:
if (DBG) logd(getName() + " remove service request");
removeServiceRequest(message.replyTo,(WifiP2pServiceRequest)message.obj);
replyToMessage(message,WifiP2pManager.REMOVE_SERVICE_REQUEST_SUCCEEDED);
break;
case WifiP2pManager.CLEAR_SERVICE_REQUESTS:
if (DBG) logd(getName() + " clear service request");
clearServiceRequests(message.replyTo);
replyToMessage(message,WifiP2pManager.CLEAR_SERVICE_REQUESTS_SUCCEEDED);
break;
case WifiMonitor.P2P_SERV_DISC_RESP_EVENT:
if (DBG) logd(getName() + " receive service response");
List<WifiP2pServiceResponse> sdRespList=(List<WifiP2pServiceResponse>)message.obj;
for (WifiP2pServiceResponse resp : sdRespList) {
WifiP2pDevice dev=mPeers.get(resp.getSrcDevice().deviceAddress);
resp.setSrcDevice(dev);
sendServiceResponse(resp);
}
break;
case WifiP2pManager.DELETE_PERSISTENT_GROUP:
if (DBG) logd(getName() + " delete persistent group");
mGroups.remove(message.arg1);
replyToMessage(message,WifiP2pManager.DELETE_PERSISTENT_GROUP_SUCCEEDED);
break;
default :
return NOT_HANDLED;
}
return HANDLED;
}
