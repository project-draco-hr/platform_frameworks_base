{
  if (DBG)   logd(getName() + message.toString());
switch (message.what) {
case WifiP2pManager.CONNECT:
    if (DBG)     logd(getName() + " sending connect");
  WifiP2pConfig config=(WifiP2pConfig)message.obj;
mAutonomousGroup=false;
int gc=mWifiNative.getGroupCapability(config.deviceAddress);
mPeers.updateGroupCapability(config.deviceAddress,gc);
if (mSavedPeerConfig != null && config.deviceAddress.equals(mSavedPeerConfig.deviceAddress)) {
mSavedPeerConfig=config;
mWifiNative.p2pStopFind();
if (mPeers.isGroupOwner(mSavedPeerConfig.deviceAddress)) {
p2pConnectWithPinDisplay(mSavedPeerConfig,JOIN_GROUP);
}
 else {
p2pConnectWithPinDisplay(mSavedPeerConfig,FORM_GROUP);
}
transitionTo(mGroupNegotiationState);
}
 else {
mSavedPeerConfig=config;
int netId=configuredNetworkId(mSavedPeerConfig.deviceAddress);
if (netId >= 0) {
mWifiNative.p2pReinvoke(netId,mSavedPeerConfig.deviceAddress);
}
 else {
mWifiNative.p2pStopFind();
if (mPeers.isGroupOwner(mSavedPeerConfig.deviceAddress)) {
if (DBG) logd("Sending join to GO");
p2pConnectWithPinDisplay(mSavedPeerConfig,JOIN_GROUP);
transitionTo(mGroupNegotiationState);
}
 else {
if (DBG) logd("Sending prov disc");
transitionTo(mProvisionDiscoveryState);
}
}
}
mPeers.updateStatus(mSavedPeerConfig.deviceAddress,WifiP2pDevice.INVITED);
sendP2pPeersChangedBroadcast();
replyToMessage(message,WifiP2pManager.CONNECT_SUCCEEDED);
break;
case WifiMonitor.P2P_GO_NEGOTIATION_REQUEST_EVENT:
mSavedPeerConfig=(WifiP2pConfig)message.obj;
mAutonomousGroup=false;
mJoinExistingGroup=false;
if (!sendConnectNoticeToApp(mPeers.get(mSavedPeerConfig.deviceAddress),mSavedPeerConfig)) {
transitionTo(mUserAuthorizingInvitationState);
}
break;
case WifiMonitor.P2P_INVITATION_RECEIVED_EVENT:
WifiP2pGroup group=(WifiP2pGroup)message.obj;
WifiP2pDevice owner=group.getOwner();
if (owner == null) {
if (DBG) loge("Ignored invitation from null owner");
break;
}
mSavedPeerConfig=new WifiP2pConfig();
mSavedPeerConfig.deviceAddress=group.getOwner().deviceAddress;
if ((owner=mPeers.get(owner.deviceAddress)) != null) {
if (owner.wpsPbcSupported()) {
mSavedPeerConfig.wps.setup=WpsInfo.PBC;
}
 else if (owner.wpsKeypadSupported()) {
mSavedPeerConfig.wps.setup=WpsInfo.KEYPAD;
}
 else if (owner.wpsDisplaySupported()) {
mSavedPeerConfig.wps.setup=WpsInfo.DISPLAY;
}
}
mAutonomousGroup=false;
mJoinExistingGroup=true;
if (!sendConnectNoticeToApp(mPeers.get(mSavedPeerConfig.deviceAddress),mSavedPeerConfig)) {
transitionTo(mUserAuthorizingInvitationState);
}
break;
case WifiMonitor.P2P_FIND_STOPPED_EVENT:
mWifiNative.p2pFlush();
mServiceDiscReqId=null;
sendP2pDiscoveryChangedBroadcast(false);
break;
case WifiMonitor.P2P_PROV_DISC_PBC_REQ_EVENT:
case WifiMonitor.P2P_PROV_DISC_ENTER_PIN_EVENT:
case WifiMonitor.P2P_PROV_DISC_SHOW_PIN_EVENT:
break;
case WifiP2pManager.CREATE_GROUP:
mAutonomousGroup=true;
if (mWifiNative.p2pGroupAdd()) {
replyToMessage(message,WifiP2pManager.CREATE_GROUP_SUCCEEDED);
}
 else {
replyToMessage(message,WifiP2pManager.CREATE_GROUP_FAILED,WifiP2pManager.ERROR);
}
transitionTo(mGroupNegotiationState);
break;
default :
return NOT_HANDLED;
}
return HANDLED;
}
