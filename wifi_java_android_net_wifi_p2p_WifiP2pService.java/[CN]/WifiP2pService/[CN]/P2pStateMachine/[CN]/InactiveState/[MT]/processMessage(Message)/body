{
  if (DBG)   logd(getName() + message.toString());
switch (message.what) {
case WifiP2pManager.CONNECT:
    if (DBG)     logd(getName() + " sending connect");
  WifiP2pConfig config=(WifiP2pConfig)message.obj;
if (isConfigInvalid(config)) {
  loge("Dropping connect requeset " + config);
  replyToMessage(message,WifiP2pManager.CONNECT_FAILED);
  break;
}
mAutonomousGroup=false;
mWifiNative.p2pStopFind();
if (reinvokePersistentGroup(config)) {
transitionTo(mGroupNegotiationState);
}
 else {
transitionTo(mProvisionDiscoveryState);
}
mSavedPeerConfig=config;
mPeers.updateStatus(mSavedPeerConfig.deviceAddress,WifiP2pDevice.INVITED);
sendPeersChangedBroadcast();
replyToMessage(message,WifiP2pManager.CONNECT_SUCCEEDED);
break;
case WifiP2pManager.STOP_DISCOVERY:
if (mWifiNative.p2pStopFind()) {
mWifiNative.p2pFlush();
mServiceDiscReqId=null;
replyToMessage(message,WifiP2pManager.STOP_DISCOVERY_SUCCEEDED);
}
 else {
replyToMessage(message,WifiP2pManager.STOP_DISCOVERY_FAILED,WifiP2pManager.ERROR);
}
break;
case WifiMonitor.P2P_GO_NEGOTIATION_REQUEST_EVENT:
config=(WifiP2pConfig)message.obj;
if (isConfigInvalid(config)) {
loge("Dropping GO neg request " + config);
break;
}
mSavedPeerConfig=config;
mAutonomousGroup=false;
mJoinExistingGroup=false;
transitionTo(mUserAuthorizingNegotiationRequestState);
break;
case WifiMonitor.P2P_INVITATION_RECEIVED_EVENT:
WifiP2pGroup group=(WifiP2pGroup)message.obj;
WifiP2pDevice owner=group.getOwner();
if (owner == null) {
loge("Ignored invitation from null owner");
break;
}
config=new WifiP2pConfig();
config.deviceAddress=group.getOwner().deviceAddress;
if (isConfigInvalid(config)) {
loge("Dropping invitation request " + config);
break;
}
mSavedPeerConfig=config;
if ((owner=mPeers.get(owner.deviceAddress)) != null) {
if (owner.wpsPbcSupported()) {
mSavedPeerConfig.wps.setup=WpsInfo.PBC;
}
 else if (owner.wpsKeypadSupported()) {
mSavedPeerConfig.wps.setup=WpsInfo.KEYPAD;
}
 else if (owner.wpsDisplaySupported()) {
mSavedPeerConfig.wps.setup=WpsInfo.DISPLAY;
}
}
mAutonomousGroup=false;
mJoinExistingGroup=true;
transitionTo(mUserAuthorizingInviteRequestState);
break;
case WifiMonitor.P2P_PROV_DISC_PBC_REQ_EVENT:
case WifiMonitor.P2P_PROV_DISC_ENTER_PIN_EVENT:
case WifiMonitor.P2P_PROV_DISC_SHOW_PIN_EVENT:
break;
case WifiP2pManager.CREATE_GROUP:
mAutonomousGroup=true;
int netId=message.arg1;
boolean ret=false;
if (netId == WifiP2pGroup.PERSISTENT_NET_ID) {
netId=mGroups.getNetworkId(mThisDevice.deviceAddress);
if (netId != -1) {
ret=mWifiNative.p2pGroupAdd(netId);
}
 else {
ret=mWifiNative.p2pGroupAdd(true);
}
}
 else {
ret=mWifiNative.p2pGroupAdd(false);
}
if (ret) {
replyToMessage(message,WifiP2pManager.CREATE_GROUP_SUCCEEDED);
transitionTo(mGroupNegotiationState);
}
 else {
replyToMessage(message,WifiP2pManager.CREATE_GROUP_FAILED,WifiP2pManager.ERROR);
}
break;
case WifiMonitor.P2P_GROUP_STARTED_EVENT:
mGroup=(WifiP2pGroup)message.obj;
if (DBG) logd(getName() + " group started");
if (mGroup.getNetworkId() == WifiP2pGroup.PERSISTENT_NET_ID) {
mAutonomousGroup=false;
deferMessage(message);
transitionTo(mGroupNegotiationState);
}
 else {
loge("Unexpected group creation, remove " + mGroup);
mWifiNative.p2pGroupRemove(mGroup.getInterface());
}
break;
default :
return NOT_HANDLED;
}
return HANDLED;
}
