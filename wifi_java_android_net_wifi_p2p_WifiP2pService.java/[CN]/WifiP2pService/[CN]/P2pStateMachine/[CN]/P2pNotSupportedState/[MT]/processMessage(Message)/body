{
switch (message.what) {
case WifiP2pManager.DISCOVER_PEERS:
    replyToMessage(message,WifiP2pManager.DISCOVER_PEERS_FAILED,WifiP2pManager.P2P_UNSUPPORTED);
  break;
case WifiP2pManager.STOP_DISCOVERY:
replyToMessage(message,WifiP2pManager.STOP_DISCOVERY_FAILED,WifiP2pManager.P2P_UNSUPPORTED);
break;
case WifiP2pManager.CONNECT:
replyToMessage(message,WifiP2pManager.CONNECT_FAILED,WifiP2pManager.P2P_UNSUPPORTED);
break;
case WifiP2pManager.CANCEL_CONNECT:
replyToMessage(message,WifiP2pManager.CANCEL_CONNECT_FAILED,WifiP2pManager.P2P_UNSUPPORTED);
break;
case WifiP2pManager.CREATE_GROUP:
replyToMessage(message,WifiP2pManager.CREATE_GROUP_FAILED,WifiP2pManager.P2P_UNSUPPORTED);
break;
case WifiP2pManager.REMOVE_GROUP:
replyToMessage(message,WifiP2pManager.REMOVE_GROUP_FAILED,WifiP2pManager.P2P_UNSUPPORTED);
break;
default :
return NOT_HANDLED;
}
return HANDLED;
}
