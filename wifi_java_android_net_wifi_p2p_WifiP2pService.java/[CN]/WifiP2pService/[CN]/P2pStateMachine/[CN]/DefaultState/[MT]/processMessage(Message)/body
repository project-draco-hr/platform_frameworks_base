{
  if (DBG)   Slog.d(TAG,getName() + message.toString());
switch (message.what) {
case AsyncChannel.CMD_CHANNEL_HALF_CONNECTED:
    if (message.arg1 == AsyncChannel.STATUS_SUCCESSFUL) {
      if (DBG)       Slog.d(TAG,"Full connection with WifiStateMachine established");
      mWifiChannel=(AsyncChannel)message.obj;
    }
 else {
      Slog.e(TAG,"Full connection failure, error = " + message.arg1);
      mWifiChannel=null;
    }
  break;
case AsyncChannel.CMD_CHANNEL_DISCONNECTED:
if (message.arg1 == AsyncChannel.STATUS_SEND_UNSUCCESSFUL) {
  Slog.e(TAG,"Send failed, client connection lost");
}
 else {
  Slog.e(TAG,"Client connection lost with reason: " + message.arg1);
}
mWifiChannel=null;
break;
case AsyncChannel.CMD_CHANNEL_FULL_CONNECTION:
AsyncChannel ac=new AsyncChannel();
ac.connect(mContext,getHandler(),message.replyTo);
break;
case WifiStateMachine.WIFI_ENABLE_PENDING:
sendMessage(WifiP2pManager.DISABLE_P2P);
deferMessage(message);
break;
case WifiP2pManager.ENABLE_P2P:
mReplyChannel.replyToMessage(message,WifiP2pManager.ENABLE_P2P_FAILED);
break;
case WifiP2pManager.DISABLE_P2P:
mReplyChannel.replyToMessage(message,WifiP2pManager.DISABLE_P2P_FAILED);
break;
case WifiP2pManager.START_LISTEN_MODE:
mReplyChannel.replyToMessage(message,WifiP2pManager.START_LISTEN_FAILED);
break;
case WifiP2pManager.DISCOVER_PEERS:
mReplyChannel.replyToMessage(message,WifiP2pManager.DISCOVER_PEERS_FAILED);
break;
case WifiP2pManager.CANCEL_DISCOVER_PEERS:
mReplyChannel.replyToMessage(message,WifiP2pManager.CANCEL_DISCOVER_PEERS_FAILED);
break;
case WifiP2pManager.CONNECT:
mReplyChannel.replyToMessage(message,WifiP2pManager.CONNECT_FAILED);
break;
case WifiP2pManager.CANCEL_CONNECT:
mReplyChannel.replyToMessage(message,WifiP2pManager.CANCEL_CONNECT_FAILED);
break;
case WifiP2pManager.REJECT:
mReplyChannel.replyToMessage(message,WifiP2pManager.REJECT_FAILED);
break;
case WifiP2pManager.CREATE_GROUP:
mReplyChannel.replyToMessage(message,WifiP2pManager.CREATE_GROUP_FAILED);
break;
case WifiP2pManager.REMOVE_GROUP:
mReplyChannel.replyToMessage(message,WifiP2pManager.REMOVE_GROUP_FAILED);
break;
case WifiP2pManager.REQUEST_SETTINGS:
case WifiP2pManager.REQUEST_PEERS:
case WifiP2pManager.REQUEST_CONNECTION_STATUS:
break;
case WIFI_DISABLE_USER_ACCEPT:
break;
default :
Slog.e(TAG,"Unhandled message " + message);
return NOT_HANDLED;
}
return HANDLED;
}
