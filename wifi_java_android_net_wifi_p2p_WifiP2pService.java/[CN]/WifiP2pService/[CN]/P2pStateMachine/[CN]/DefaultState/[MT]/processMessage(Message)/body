{
  if (DBG)   logd(getName() + message.toString());
switch (message.what) {
case AsyncChannel.CMD_CHANNEL_HALF_CONNECTED:
    if (message.arg1 == AsyncChannel.STATUS_SUCCESSFUL) {
      if (DBG)       logd("Full connection with WifiStateMachine established");
      mWifiChannel=(AsyncChannel)message.obj;
    }
 else {
      loge("Full connection failure, error = " + message.arg1);
      mWifiChannel=null;
    }
  break;
case AsyncChannel.CMD_CHANNEL_DISCONNECTED:
if (message.arg1 == AsyncChannel.STATUS_SEND_UNSUCCESSFUL) {
  loge("Send failed, client connection lost");
}
 else {
  loge("Client connection lost with reason: " + message.arg1);
}
mWifiChannel=null;
break;
case AsyncChannel.CMD_CHANNEL_FULL_CONNECTION:
AsyncChannel ac=new AsyncChannel();
ac.connect(mContext,getHandler(),message.replyTo);
break;
case WifiP2pManager.DISCOVER_PEERS:
replyToMessage(message,WifiP2pManager.DISCOVER_PEERS_FAILED,WifiP2pManager.BUSY);
break;
case WifiP2pManager.STOP_DISCOVERY:
replyToMessage(message,WifiP2pManager.STOP_DISCOVERY_FAILED,WifiP2pManager.BUSY);
break;
case WifiP2pManager.DISCOVER_SERVICES:
replyToMessage(message,WifiP2pManager.DISCOVER_SERVICES_FAILED,WifiP2pManager.BUSY);
break;
case WifiP2pManager.CONNECT:
replyToMessage(message,WifiP2pManager.CONNECT_FAILED,WifiP2pManager.BUSY);
break;
case WifiP2pManager.CANCEL_CONNECT:
replyToMessage(message,WifiP2pManager.CANCEL_CONNECT_FAILED,WifiP2pManager.BUSY);
break;
case WifiP2pManager.CREATE_GROUP:
replyToMessage(message,WifiP2pManager.CREATE_GROUP_FAILED,WifiP2pManager.BUSY);
break;
case WifiP2pManager.REMOVE_GROUP:
replyToMessage(message,WifiP2pManager.REMOVE_GROUP_FAILED,WifiP2pManager.BUSY);
break;
case WifiP2pManager.ADD_LOCAL_SERVICE:
replyToMessage(message,WifiP2pManager.ADD_LOCAL_SERVICE_FAILED,WifiP2pManager.BUSY);
break;
case WifiP2pManager.REMOVE_LOCAL_SERVICE:
replyToMessage(message,WifiP2pManager.REMOVE_LOCAL_SERVICE_FAILED,WifiP2pManager.BUSY);
break;
case WifiP2pManager.CLEAR_LOCAL_SERVICES:
replyToMessage(message,WifiP2pManager.CLEAR_LOCAL_SERVICES_FAILED,WifiP2pManager.BUSY);
break;
case WifiP2pManager.ADD_SERVICE_REQUEST:
replyToMessage(message,WifiP2pManager.ADD_SERVICE_REQUEST_FAILED,WifiP2pManager.BUSY);
break;
case WifiP2pManager.REMOVE_SERVICE_REQUEST:
replyToMessage(message,WifiP2pManager.REMOVE_SERVICE_REQUEST_FAILED,WifiP2pManager.BUSY);
break;
case WifiP2pManager.CLEAR_SERVICE_REQUESTS:
replyToMessage(message,WifiP2pManager.CLEAR_SERVICE_REQUESTS_FAILED,WifiP2pManager.BUSY);
break;
case WifiP2pManager.SET_DEVICE_NAME:
replyToMessage(message,WifiP2pManager.SET_DEVICE_NAME_FAILED,WifiP2pManager.BUSY);
break;
case WifiP2pManager.REQUEST_PEERS:
replyToMessage(message,WifiP2pManager.RESPONSE_PEERS,mPeers);
break;
case WifiP2pManager.REQUEST_CONNECTION_INFO:
replyToMessage(message,WifiP2pManager.RESPONSE_CONNECTION_INFO,mWifiP2pInfo);
break;
case WifiP2pManager.REQUEST_GROUP_INFO:
replyToMessage(message,WifiP2pManager.RESPONSE_GROUP_INFO,mGroup);
break;
case WifiP2pManager.SET_DIALOG_LISTENER:
String appPkgName=(String)message.getData().getString(WifiP2pManager.APP_PKG_BUNDLE_KEY);
boolean isReset=message.getData().getBoolean(WifiP2pManager.RESET_DIALOG_LISTENER_BUNDLE_KEY);
if (setDialogListenerApp(message.replyTo,appPkgName,isReset)) {
replyToMessage(message,WifiP2pManager.DIALOG_LISTENER_ATTACHED);
}
 else {
replyToMessage(message,WifiP2pManager.DIALOG_LISTENER_DETACHED,WifiP2pManager.NOT_IN_FOREGROUND);
}
break;
case WifiMonitor.P2P_INVITATION_RESULT_EVENT:
case WifiMonitor.SCAN_RESULTS_EVENT:
case WifiMonitor.SUP_CONNECTION_EVENT:
case WifiMonitor.SUP_DISCONNECTION_EVENT:
case WifiMonitor.NETWORK_CONNECTION_EVENT:
case WifiMonitor.NETWORK_DISCONNECTION_EVENT:
case WifiMonitor.SUPPLICANT_STATE_CHANGE_EVENT:
case WifiMonitor.P2P_GROUP_REMOVED_EVENT:
case PEER_CONNECTION_USER_ACCEPT:
case PEER_CONNECTION_USER_REJECT:
case GROUP_CREATING_TIMED_OUT:
break;
case WifiMonitor.P2P_GROUP_STARTED_EVENT:
mGroup=(WifiP2pGroup)message.obj;
loge("Unexpected group creation, remove " + mGroup);
mWifiNative.p2pGroupRemove(mGroup.getInterface());
break;
case WifiMonitor.P2P_GROUP_FORMATION_FAILURE_EVENT:
loge("Unexpected group failure, flush peers");
mWifiNative.p2pFlush();
break;
default :
loge("Unhandled message " + message);
return NOT_HANDLED;
}
return HANDLED;
}
