{
  if (DBG)   logd(getName() + message.toString());
switch (message.what) {
case AsyncChannel.CMD_CHANNEL_HALF_CONNECTED:
    if (message.arg1 == AsyncChannel.STATUS_SUCCESSFUL) {
      if (DBG)       logd("Full connection with WifiStateMachine established");
      mWifiChannel=(AsyncChannel)message.obj;
    }
 else {
      loge("Full connection failure, error = " + message.arg1);
      mWifiChannel=null;
    }
  break;
case AsyncChannel.CMD_CHANNEL_DISCONNECTED:
if (message.arg1 == AsyncChannel.STATUS_SEND_UNSUCCESSFUL) {
  loge("Send failed, client connection lost");
}
 else {
  loge("Client connection lost with reason: " + message.arg1);
}
mWifiChannel=null;
break;
case AsyncChannel.CMD_CHANNEL_FULL_CONNECTION:
AsyncChannel ac=new AsyncChannel();
ac.connect(mContext,getHandler(),message.replyTo);
break;
case WifiStateMachine.WIFI_ENABLE_PENDING:
sendMessage(WifiP2pManager.DISABLE_P2P);
deferMessage(message);
break;
case WifiP2pManager.ENABLE_P2P:
replyToMessage(message,WifiP2pManager.ENABLE_P2P_FAILED,WifiP2pManager.BUSY);
break;
case WifiP2pManager.DISABLE_P2P:
replyToMessage(message,WifiP2pManager.DISABLE_P2P_FAILED,WifiP2pManager.BUSY);
break;
case WifiP2pManager.DISCOVER_PEERS:
replyToMessage(message,WifiP2pManager.DISCOVER_PEERS_FAILED,WifiP2pManager.BUSY);
break;
case WifiP2pManager.CONNECT:
replyToMessage(message,WifiP2pManager.CONNECT_FAILED,WifiP2pManager.BUSY);
break;
case WifiP2pManager.CREATE_GROUP:
replyToMessage(message,WifiP2pManager.CREATE_GROUP_FAILED,WifiP2pManager.BUSY);
break;
case WifiP2pManager.REMOVE_GROUP:
replyToMessage(message,WifiP2pManager.REMOVE_GROUP_FAILED,WifiP2pManager.BUSY);
break;
case WifiP2pManager.REQUEST_PEERS:
replyToMessage(message,WifiP2pManager.RESPONSE_PEERS,mPeers);
break;
case WifiP2pManager.REQUEST_CONNECTION_INFO:
replyToMessage(message,WifiP2pManager.RESPONSE_CONNECTION_INFO,mWifiP2pInfo);
break;
case WifiP2pManager.REQUEST_GROUP_INFO:
replyToMessage(message,WifiP2pManager.RESPONSE_GROUP_INFO,mGroup);
break;
case WIFI_DISABLE_USER_ACCEPT:
case GROUP_NEGOTIATION_TIMED_OUT:
break;
default :
loge("Unhandled message " + message);
return NOT_HANDLED;
}
return HANDLED;
}
