{
  ByteArrayInputStream bais=new ByteArrayInputStream(pdu);
  DataInputStream dis=new DataInputStream(bais);
  SmsEnvelope env=new SmsEnvelope();
  CdmaSmsAddress addr=new CdmaSmsAddress();
  CdmaSmsSubaddress subAddr=new CdmaSmsSubaddress();
  try {
    env.messageType=dis.readByte();
    while (dis.available() > 0) {
      int parameterId=dis.readByte();
      int parameterLen=dis.readByte();
      byte[] parameterData=new byte[parameterLen];
switch (parameterId) {
case TELESERVICE_IDENTIFIER:
        env.teleService=dis.readUnsignedShort();
      Log.i(LOG_TAG,"teleservice = " + env.teleService);
    break;
case SERVICE_CATEGORY:
  env.serviceCategory=dis.readUnsignedShort();
break;
case ORIGINATING_ADDRESS:
case DESTINATION_ADDRESS:
dis.read(parameterData,0,parameterLen);
BitwiseInputStream addrBis=new BitwiseInputStream(parameterData);
addr.digitMode=addrBis.read(1);
addr.numberMode=addrBis.read(1);
int numberType=0;
if (addr.digitMode == CdmaSmsAddress.DIGIT_MODE_8BIT_CHAR) {
numberType=addrBis.read(3);
addr.ton=numberType;
if (addr.numberMode == CdmaSmsAddress.NUMBER_MODE_NOT_DATA_NETWORK) addr.numberPlan=addrBis.read(4);
}
addr.numberOfDigits=addrBis.read(8);
byte[] data=new byte[addr.numberOfDigits];
byte b=0x00;
if (addr.digitMode == CdmaSmsAddress.DIGIT_MODE_4BIT_DTMF) {
for (int index=0; index < addr.numberOfDigits; index++) {
b=(byte)(0xF & addrBis.read(4));
data[index]=convertDtmfToAscii(b);
}
}
 else if (addr.digitMode == CdmaSmsAddress.DIGIT_MODE_8BIT_CHAR) {
if (addr.numberMode == CdmaSmsAddress.NUMBER_MODE_NOT_DATA_NETWORK) {
for (int index=0; index < addr.numberOfDigits; index++) {
b=(byte)(0xFF & addrBis.read(8));
data[index]=b;
}
}
 else if (addr.numberMode == CdmaSmsAddress.NUMBER_MODE_DATA_NETWORK) {
if (numberType == 2) Log.e(LOG_TAG,"TODO: Originating Addr is email id");
 else Log.e(LOG_TAG,"TODO: Originating Addr is data network address");
}
 else {
Log.e(LOG_TAG,"Originating Addr is of incorrect type");
}
}
 else {
Log.e(LOG_TAG,"Incorrect Digit mode");
}
addr.origBytes=data;
Log.i(LOG_TAG,"Originating Addr=" + addr.toString());
break;
case ORIGINATING_SUB_ADDRESS:
case DESTINATION_SUB_ADDRESS:
dis.read(parameterData,0,parameterLen);
BitwiseInputStream subAddrBis=new BitwiseInputStream(parameterData);
subAddr.type=subAddrBis.read(3);
subAddr.odd=subAddrBis.readByteArray(1)[0];
int subAddrLen=subAddrBis.read(8);
byte[] subdata=new byte[subAddrLen];
for (int index=0; index < subAddrLen; index++) {
b=(byte)(0xFF & subAddrBis.read(4));
subdata[index]=convertDtmfToAscii(b);
}
subAddr.origBytes=subdata;
break;
case BEARER_REPLY_OPTION:
dis.read(parameterData,0,parameterLen);
BitwiseInputStream replyOptBis=new BitwiseInputStream(parameterData);
env.bearerReply=replyOptBis.read(6);
break;
case CAUSE_CODES:
dis.read(parameterData,0,parameterLen);
BitwiseInputStream ccBis=new BitwiseInputStream(parameterData);
env.replySeqNo=ccBis.readByteArray(6)[0];
env.errorClass=ccBis.readByteArray(2)[0];
if (env.errorClass != 0x00) env.causeCode=ccBis.readByteArray(8)[0];
break;
case BEARER_DATA:
dis.read(parameterData,0,parameterLen);
env.bearerData=parameterData;
break;
default :
throw new Exception("unsupported parameterId (" + parameterId + ")");
}
}
bais.close();
dis.close();
}
 catch (Exception ex) {
Log.e(LOG_TAG,"parsePduFromEfRecord: conversion from pdu to SmsMessage failed" + ex);
}
originatingAddress=addr;
env.origAddress=addr;
env.origSubaddress=subAddr;
mEnvelope=env;
mPdu=pdu;
parseSms();
}
