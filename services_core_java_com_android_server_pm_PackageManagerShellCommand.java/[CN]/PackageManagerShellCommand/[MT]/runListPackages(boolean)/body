{
  final PrintWriter pw=getOutPrintWriter();
  int getFlags=0;
  boolean listDisabled=false, listEnabled=false;
  boolean listSystem=false, listThirdParty=false;
  boolean listInstaller=false;
  int userId=UserHandle.USER_SYSTEM;
  try {
    String opt;
    while ((opt=getNextOption()) != null) {
switch (opt) {
case "-d":
        listDisabled=true;
      break;
case "-e":
    listEnabled=true;
  break;
case "-f":
showSourceDir=true;
break;
case "-i":
listInstaller=true;
break;
case "-l":
break;
case "-lf":
showSourceDir=true;
break;
case "-s":
listSystem=true;
break;
case "-u":
getFlags|=PackageManager.GET_UNINSTALLED_PACKAGES;
break;
case "-3":
listThirdParty=true;
break;
case "--user":
userId=Integer.parseInt(getNextArg());
break;
default :
pw.println("Error: Unknown option: " + opt);
return -1;
}
}
}
 catch (RuntimeException ex) {
pw.println("Error: " + ex.toString());
return -1;
}
final String filter=getNextArg();
@SuppressWarnings("unchecked") final ParceledListSlice<PackageInfo> slice=mInterface.getInstalledPackages(getFlags,userId);
final List<PackageInfo> packages=slice.getList();
final int count=packages.size();
for (int p=0; p < count; p++) {
final PackageInfo info=packages.get(p);
if (filter != null && !info.packageName.contains(filter)) {
continue;
}
final boolean isSystem=(info.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0;
if ((!listDisabled || !info.applicationInfo.enabled) && (!listEnabled || info.applicationInfo.enabled) && (!listSystem || isSystem)&& (!listThirdParty || !isSystem)) {
pw.print("package:");
if (showSourceDir) {
pw.print(info.applicationInfo.sourceDir);
pw.print("=");
}
pw.print(info.packageName);
if (listInstaller) {
pw.print("  installer=");
pw.print(mInterface.getInstallerPackageName(info.packageName));
}
pw.println();
}
}
return 0;
}
