{
  final PrintWriter pw=getOutPrintWriter();
  boolean showSourceDir=false;
  String targetPackage=null;
  try {
    String opt;
    while ((opt=getNextArg()) != null) {
switch (opt) {
case "-f":
        showSourceDir=true;
      break;
default :
    if (opt.charAt(0) != '-') {
      targetPackage=opt;
    }
 else {
      pw.println("Error: Unknown option: " + opt);
      return -1;
    }
  break;
}
}
}
 catch (RuntimeException ex) {
pw.println("Error: " + ex.toString());
return -1;
}
final List<InstrumentationInfo> list=mInterface.queryInstrumentation(targetPackage,0);
Collections.sort(list,new Comparator<InstrumentationInfo>(){
public int compare(InstrumentationInfo o1,InstrumentationInfo o2){
return o1.targetPackage.compareTo(o2.targetPackage);
}
}
);
final int count=(list != null) ? list.size() : 0;
for (int p=0; p < count; p++) {
final InstrumentationInfo ii=list.get(p);
pw.print("instrumentation:");
if (showSourceDir) {
pw.print(ii.sourceDir);
pw.print("=");
}
final ComponentName cn=new ComponentName(ii.packageName,ii.name);
pw.print(cn.flattenToShortString());
pw.print(" (target=");
pw.print(ii.targetPackage);
pw.println(")");
}
return 0;
}
