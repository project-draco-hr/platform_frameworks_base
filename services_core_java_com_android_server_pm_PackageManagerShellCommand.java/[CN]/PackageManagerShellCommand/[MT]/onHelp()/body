{
  final PrintWriter pw=getOutPrintWriter();
  pw.println("Package manager (package) commands:");
  pw.println("  help");
  pw.println("    Print this help text.");
  pw.println("");
  pw.println("  compile [-m MODE | -r REASON] [-f] [-c]");
  pw.println("          [--reset] [--check-prof (true | false)] (-a | TARGET-PACKAGE)");
  pw.println("    Trigger compilation of TARGET-PACKAGE or all packages if \"-a\".");
  pw.println("    Options:");
  pw.println("      -a: compile all packages");
  pw.println("      -c: clear profile data before compiling");
  pw.println("      -f: force compilation even if not needed");
  pw.println("      -m: select compilation mode");
  pw.println("          MODE is one of the dex2oat compiler filters:");
  pw.println("            verify-none");
  pw.println("            verify-at-runtime");
  pw.println("            verify-profile");
  pw.println("            interpret-only");
  pw.println("            space-profile");
  pw.println("            space");
  pw.println("            speed-profile");
  pw.println("            speed");
  pw.println("            everything");
  pw.println("      -r: select compilation reason");
  pw.println("          REASON is one of:");
  for (int i=0; i < PackageManagerServiceCompilerMapping.REASON_STRINGS.length; i++) {
    pw.println("            " + PackageManagerServiceCompilerMapping.REASON_STRINGS[i]);
  }
  pw.println("      --reset: restore package to its post-install state");
  pw.println("      --check-prof (true | false): look at profiles when doing dexopt?");
  pw.println("  list features");
  pw.println("    Prints all features of the system.");
  pw.println("  list instrumentation [-f] [TARGET-PACKAGE]");
  pw.println("    Prints all test packages; optionally only those targeting TARGET-PACKAGE");
  pw.println("    Options:");
  pw.println("      -f: dump the name of the .apk file containing the test package");
  pw.println("  list libraries");
  pw.println("    Prints all system libraries.");
  pw.println("  list packages [-f] [-d] [-e] [-s] [-3] [-i] [-u] [--user USER_ID] [FILTER]");
  pw.println("    Prints all packages; optionally only those whose name contains");
  pw.println("    the text in FILTER.");
  pw.println("    Options:");
  pw.println("      -f: see their associated file");
  pw.println("      -d: filter to only show disabled packages");
  pw.println("      -e: filter to only show enabled packages");
  pw.println("      -s: filter to only show system packages");
  pw.println("      -3: filter to only show third party packages");
  pw.println("      -i: see the installer for the packages");
  pw.println("      -u: also include uninstalled packages");
  pw.println("  list permission-groups");
  pw.println("    Prints all known permission groups.");
  pw.println("  list permissions [-g] [-f] [-d] [-u] [GROUP]");
  pw.println("    Prints all known permissions; optionally only those in GROUP.");
  pw.println("    Options:");
  pw.println("      -g: organize by group");
  pw.println("      -f: print all information");
  pw.println("      -s: short summary");
  pw.println("      -d: only list dangerous permissions");
  pw.println("      -u: list only the permissions users will see");
  pw.println("  resolve-activity [--brief] [--components] [--user USER_ID] INTENT");
  pw.println("    Prints the activity that resolves to the given Intent.");
  pw.println("  query-activities [--brief] [--components] [--user USER_ID] INTENT");
  pw.println("    Prints all activities that can handle the given Intent.");
  pw.println("  query-services [--brief] [--components] [--user USER_ID] INTENT");
  pw.println("    Prints all services that can handle the given Intent.");
  pw.println("  query-receivers [--brief] [--components] [--user USER_ID] INTENT");
  pw.println("    Prints all broadcast receivers that can handle the given Intent.");
  pw.println("  suspend [--user USER_ID] TARGET-PACKAGE");
  pw.println("    Suspends the specified package (as user).");
  pw.println("  unsuspend [--user USER_ID] TARGET-PACKAGE");
  pw.println("    Unsuspends the specified package (as user).");
  pw.println("  set-home-activity [--user USER_ID] TARGET-COMPONENT");
  pw.println("    set the default home activity (aka launcher).");
  pw.println();
  Intent.printIntentArgsHelp(pw,"");
}
