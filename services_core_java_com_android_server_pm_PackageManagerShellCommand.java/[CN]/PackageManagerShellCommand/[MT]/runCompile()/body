{
  final PrintWriter pw=getOutPrintWriter();
  boolean useJitProfiles=false;
  boolean extractOnly=false;
  boolean forceCompilation=false;
  boolean allPackages=false;
  boolean clearProfileData=false;
  String compilationMode="default";
  String opt;
  while ((opt=getNextOption()) != null) {
switch (opt) {
case "-a":
      allPackages=true;
    break;
case "-c":
  clearProfileData=true;
break;
case "-f":
forceCompilation=true;
break;
case "-m":
compilationMode=getNextArgRequired();
break;
case "--reset":
forceCompilation=true;
clearProfileData=true;
compilationMode="extract";
break;
default :
pw.println("Error: Unknown option: " + opt);
return 1;
}
}
switch (compilationMode) {
case "default":
useJitProfiles=SystemProperties.getBoolean("dalvik.vm.usejitprofiles",false);
extractOnly=false;
break;
case "all":
useJitProfiles=false;
extractOnly=false;
break;
case "profile":
useJitProfiles=true;
extractOnly=false;
break;
case "extract":
useJitProfiles=false;
extractOnly=true;
break;
default :
pw.println("Error: Unknown compilation mode: " + compilationMode);
return 1;
}
List<String> packageNames=null;
if (allPackages) {
packageNames=mInterface.getAllPackages();
}
 else {
String packageName=getNextArg();
if (packageName == null) {
pw.println("Error: package name not specified");
return 1;
}
packageNames=Collections.singletonList(packageName);
}
List<String> failedPackages=new ArrayList<>();
for (String packageName : packageNames) {
if (clearProfileData) {
mInterface.clearApplicationProfileData(packageName);
}
boolean result=mInterface.performDexOpt(packageName,null,useJitProfiles,extractOnly,forceCompilation);
if (!result) {
failedPackages.add(packageName);
}
}
if (failedPackages.isEmpty()) {
pw.println("Success");
return 0;
}
 else if (failedPackages.size() == 1) {
pw.println("Failure: package " + failedPackages.get(0) + " could not be compiled");
return 1;
}
 else {
pw.print("Failure: the following packages could not be compiled: ");
boolean is_first=true;
for (String packageName : failedPackages) {
if (is_first) {
is_first=false;
}
 else {
pw.print(", ");
}
pw.print(packageName);
}
pw.println();
return 1;
}
}
