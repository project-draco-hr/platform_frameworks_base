{
  final float[] scaled=mReportData;
  final int[] cur=mCurData;
  boolean anyDown=false;
  int firstDownChanged=-1;
  int numPointers=0;
  for (int i=0; i < MAX_POINTERS; i++) {
    boolean d=mDown[i];
    anyDown|=d;
    if (d != mLastDown[i] && firstDownChanged < 0) {
      firstDownChanged=i;
      mLastDown[i]=mDown[i];
      d=true;
    }
    if (d) {
      final int src=i * MotionEvent.NUM_SAMPLE_DATA;
      final int dest=numPointers * MotionEvent.NUM_SAMPLE_DATA;
      numPointers++;
      scaled[dest + MotionEvent.SAMPLE_X]=cur[src + MotionEvent.SAMPLE_X];
      scaled[dest + MotionEvent.SAMPLE_Y]=cur[src + MotionEvent.SAMPLE_Y];
      scaled[dest + MotionEvent.SAMPLE_PRESSURE]=cur[src + MotionEvent.SAMPLE_PRESSURE];
      scaled[dest + MotionEvent.SAMPLE_SIZE]=cur[src + MotionEvent.SAMPLE_SIZE];
    }
  }
  if (numPointers <= 0) {
    return null;
  }
  int action;
  int edgeFlags=0;
  if (anyDown != mLastAnyDown) {
    final AbsoluteInfo absX=device.absX;
    final AbsoluteInfo absY=device.absY;
    if (anyDown && absX != null && absY != null) {
      if (cur[MotionEvent.SAMPLE_X] < absX.minValue || cur[MotionEvent.SAMPLE_X] > absX.maxValue || cur[MotionEvent.SAMPLE_Y] < absY.minValue || cur[MotionEvent.SAMPLE_Y] > absY.maxValue) {
        if (false)         Log.v("InputDevice","Rejecting (" + cur[MotionEvent.SAMPLE_X] + ","+ cur[MotionEvent.SAMPLE_Y]+ "): outside of ("+ absX.minValue+ ","+ absY.minValue+ ")-("+ absX.maxValue+ ","+ absY.maxValue+ ")");
        return null;
      }
    }
    mLastAnyDown=anyDown;
    if (anyDown) {
      action=MotionEvent.ACTION_DOWN;
      mDownTime=curTime;
    }
 else {
      action=MotionEvent.ACTION_UP;
    }
    currentMove=null;
  }
 else   if (firstDownChanged >= 0) {
    if (mDown[firstDownChanged]) {
      action=MotionEvent.ACTION_POINTER_DOWN | (firstDownChanged << MotionEvent.ACTION_POINTER_SHIFT);
    }
 else {
      action=MotionEvent.ACTION_POINTER_UP | (firstDownChanged << MotionEvent.ACTION_POINTER_SHIFT);
    }
    currentMove=null;
  }
 else {
    action=MotionEvent.ACTION_MOVE;
  }
  final int dispW=display.getWidth() - 1;
  final int dispH=display.getHeight() - 1;
  int w=dispW;
  int h=dispH;
  if (orientation == Surface.ROTATION_90 || orientation == Surface.ROTATION_270) {
    int tmp=w;
    w=h;
    h=tmp;
  }
  final AbsoluteInfo absX=device.absX;
  final AbsoluteInfo absY=device.absY;
  final AbsoluteInfo absPressure=device.absPressure;
  final AbsoluteInfo absSize=device.absSize;
  for (int i=0; i < numPointers; i++) {
    final int j=i * MotionEvent.NUM_SAMPLE_DATA;
    if (absX != null) {
      scaled[j + MotionEvent.SAMPLE_X]=((scaled[j + MotionEvent.SAMPLE_X] - absX.minValue) / absX.range) * w;
    }
    if (absY != null) {
      scaled[j + MotionEvent.SAMPLE_Y]=((scaled[j + MotionEvent.SAMPLE_Y] - absY.minValue) / absY.range) * h;
    }
    if (absPressure != null) {
      scaled[j + MotionEvent.SAMPLE_PRESSURE]=((scaled[j + MotionEvent.SAMPLE_PRESSURE] - absPressure.minValue) / (float)absPressure.range);
    }
    if (absSize != null) {
      scaled[j + MotionEvent.SAMPLE_SIZE]=((scaled[j + MotionEvent.SAMPLE_SIZE] - absSize.minValue) / (float)absSize.range);
    }
switch (orientation) {
case Surface.ROTATION_90:
{
        final float temp=scaled[MotionEvent.SAMPLE_X];
        scaled[j + MotionEvent.SAMPLE_X]=scaled[j + MotionEvent.SAMPLE_Y];
        scaled[j + MotionEvent.SAMPLE_Y]=w - temp;
        break;
      }
case Surface.ROTATION_180:
{
      scaled[j + MotionEvent.SAMPLE_X]=w - scaled[j + MotionEvent.SAMPLE_X];
      scaled[j + MotionEvent.SAMPLE_Y]=h - scaled[j + MotionEvent.SAMPLE_Y];
      break;
    }
case Surface.ROTATION_270:
{
    final float temp=scaled[i + MotionEvent.SAMPLE_X];
    scaled[j + MotionEvent.SAMPLE_X]=h - scaled[j + MotionEvent.SAMPLE_Y];
    scaled[j + MotionEvent.SAMPLE_Y]=temp;
    break;
  }
}
}
if (action == MotionEvent.ACTION_DOWN) {
if (scaled[MotionEvent.SAMPLE_X] <= 0) {
edgeFlags|=MotionEvent.EDGE_LEFT;
}
 else if (scaled[MotionEvent.SAMPLE_X] >= dispW) {
edgeFlags|=MotionEvent.EDGE_RIGHT;
}
if (scaled[MotionEvent.SAMPLE_Y] <= 0) {
edgeFlags|=MotionEvent.EDGE_TOP;
}
 else if (scaled[MotionEvent.SAMPLE_Y] >= dispH) {
edgeFlags|=MotionEvent.EDGE_BOTTOM;
}
}
if (currentMove != null) {
if (false) Log.i("InputDevice","Adding batch x=" + scaled[MotionEvent.SAMPLE_X] + " y="+ scaled[MotionEvent.SAMPLE_Y]+ " to "+ currentMove);
currentMove.addBatch(curTime,scaled,metaState);
if (WindowManagerPolicy.WATCH_POINTER) {
Log.i("KeyInputQueue","Updating: " + currentMove);
}
return null;
}
MotionEvent me=MotionEvent.obtainNano(mDownTime,curTime,curTimeNano,action,numPointers,scaled,metaState,xPrecision,yPrecision,device.id,edgeFlags);
if (action == MotionEvent.ACTION_MOVE) {
currentMove=me;
}
return me;
}
