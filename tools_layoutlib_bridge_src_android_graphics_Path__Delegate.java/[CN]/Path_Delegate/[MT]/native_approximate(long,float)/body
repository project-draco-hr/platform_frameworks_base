{
  Path_Delegate pathDelegate=sManager.getDelegate(nPath);
  if (pathDelegate == null) {
    return null;
  }
  PathIterator iterator=pathDelegate.getJavaShape().getPathIterator(null,error);
  float segment[]=new float[6];
  float totalLength=0;
  ArrayList<Point2D.Float> points=new ArrayList<Point2D.Float>();
  Point2D.Float previousPoint=null;
  while (!iterator.isDone()) {
    int type=iterator.currentSegment(segment);
    Point2D.Float currentPoint=new Point2D.Float(segment[0],segment[1]);
    if (previousPoint != null && type != PathIterator.SEG_MOVETO) {
      totalLength+=currentPoint.distance(previousPoint);
    }
    previousPoint=currentPoint;
    points.add(currentPoint);
    iterator.next();
  }
  int nPoints=points.size();
  float[] result=new float[nPoints * 3];
  previousPoint=null;
  for (int i=0; i < nPoints; i++) {
    Point2D.Float point=points.get(i);
    float distance=previousPoint != null ? (float)previousPoint.distance(point) : .0f;
    result[i * 3]=distance / totalLength;
    result[i * 3 + 1]=point.x;
    result[i * 3 + 2]=point.y;
    totalLength+=distance;
    previousPoint=point;
  }
  return result;
}
