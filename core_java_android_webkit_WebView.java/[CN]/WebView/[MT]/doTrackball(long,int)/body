{
  int elapsed=(int)(mTrackballLastTime - mTrackballFirstTime);
  if (elapsed == 0) {
    elapsed=TRACKBALL_TIMEOUT;
  }
  float xRate=mTrackballRemainsX * 1000 / elapsed;
  float yRate=mTrackballRemainsY * 1000 / elapsed;
  int viewWidth=getViewWidth();
  int viewHeight=getViewHeight();
  if (mSelectingText) {
    if (!mDrawSelectionPointer) {
      mSelectX=contentToViewX(nativeSelectionX());
      mSelectY=contentToViewY(nativeSelectionY());
      mDrawSelectionPointer=mExtendSelection=true;
      nativeSetExtendSelection();
    }
    moveSelection(scaleTrackballX(xRate,viewWidth),scaleTrackballY(yRate,viewHeight));
    mTrackballRemainsX=mTrackballRemainsY=0;
    return;
  }
  float ax=Math.abs(xRate);
  float ay=Math.abs(yRate);
  float maxA=Math.max(ax,ay);
  if (DebugFlags.WEB_VIEW) {
    Log.v(LOGTAG,"doTrackball elapsed=" + elapsed + " xRate="+ xRate+ " yRate="+ yRate+ " mTrackballRemainsX="+ mTrackballRemainsX+ " mTrackballRemainsY="+ mTrackballRemainsY);
  }
  int width=mContentWidth - viewWidth;
  int height=mContentHeight - viewHeight;
  if (width < 0)   width=0;
  if (height < 0)   height=0;
  ax=Math.abs(mTrackballRemainsX * TRACKBALL_MULTIPLIER);
  ay=Math.abs(mTrackballRemainsY * TRACKBALL_MULTIPLIER);
  maxA=Math.max(ax,ay);
  int count=Math.max(0,(int)maxA);
  int oldScrollX=mScrollX;
  int oldScrollY=mScrollY;
  if (count > 0) {
    int selectKeyCode=ax < ay ? mTrackballRemainsY < 0 ? KeyEvent.KEYCODE_DPAD_UP : KeyEvent.KEYCODE_DPAD_DOWN : mTrackballRemainsX < 0 ? KeyEvent.KEYCODE_DPAD_LEFT : KeyEvent.KEYCODE_DPAD_RIGHT;
    count=Math.min(count,TRACKBALL_MOVE_COUNT);
    if (DebugFlags.WEB_VIEW) {
      Log.v(LOGTAG,"doTrackball keyCode=" + selectKeyCode + " count="+ count+ " mTrackballRemainsX="+ mTrackballRemainsX+ " mTrackballRemainsY="+ mTrackballRemainsY);
    }
    if (mNativeClass != 0 && nativePageShouldHandleShiftAndArrows()) {
      for (int i=0; i < count; i++) {
        letPageHandleNavKey(selectKeyCode,time,true,metaState);
      }
      letPageHandleNavKey(selectKeyCode,time,false,metaState);
    }
 else     if (navHandledKey(selectKeyCode,count,false,time)) {
      playSoundEffect(keyCodeToSoundsEffect(selectKeyCode));
    }
    mTrackballRemainsX=mTrackballRemainsY=0;
  }
  if (count >= TRACKBALL_SCROLL_COUNT) {
    int xMove=scaleTrackballX(xRate,width);
    int yMove=scaleTrackballY(yRate,height);
    if (DebugFlags.WEB_VIEW) {
      Log.v(LOGTAG,"doTrackball pinScrollBy" + " count=" + count + " xMove="+ xMove+ " yMove="+ yMove+ " mScrollX-oldScrollX="+ (mScrollX - oldScrollX)+ " mScrollY-oldScrollY="+ (mScrollY - oldScrollY));
    }
    if (Math.abs(mScrollX - oldScrollX) > Math.abs(xMove)) {
      xMove=0;
    }
    if (Math.abs(mScrollY - oldScrollY) > Math.abs(yMove)) {
      yMove=0;
    }
    if (xMove != 0 || yMove != 0) {
      pinScrollBy(xMove,yMove,true,0);
    }
    mUserScroll=true;
  }
}
