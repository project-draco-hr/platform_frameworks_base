{
  if (!hasFocus() && (null == mTextEntry || !mTextEntry.hasFocus()) || (mTouchMode >= FIRST_SCROLL_ZOOM && mTouchMode <= LAST_SCROLL_ZOOM)) {
    mNeedsUpdateTextEntry=true;
    return;
  }
  boolean alreadyThere=inEditingMode();
  if (0 == mNativeClass || !nativeUpdateFocusNode()) {
    if (alreadyThere) {
      mTextEntry.remove();
    }
    return;
  }
  FocusNode node=mFocusNode;
  if (!node.mIsTextField && !node.mIsTextArea) {
    if (alreadyThere) {
      mTextEntry.remove();
    }
    return;
  }
  if (mTextEntry == null) {
    mTextEntry=new TextDialog(mContext,WebView.this);
    mTextGeneration=0;
  }
  mTextEntry.setTextSize(contentToView(node.mTextSize));
  Rect visibleRect=sendOurVisibleRect();
  if (!Rect.intersects(node.mBounds,visibleRect)) {
    return;
  }
  int x=node.mBounds.left;
  int y=node.mBounds.top;
  int width=node.mBounds.width();
  int height=node.mBounds.height();
  if (alreadyThere && mTextEntry.isSameTextField(node.mNodePointer)) {
    Spannable spannable=(Spannable)mTextEntry.getText();
    int start=Selection.getSelectionStart(spannable);
    int end=Selection.getSelectionEnd(spannable);
    setTextEntryRect(x,y,width,height);
    if (node.mText != null && !node.mText.equals(spannable.toString()) && node.mRootTextGeneration == mTextGeneration) {
      mTextEntry.setTextAndKeepSelection(node.mText);
    }
 else {
      Selection.setSelection(spannable,start,end);
    }
  }
 else {
    String text=node.mText;
    setTextEntryRect(x,y,width,height);
    mTextEntry.setGravity(node.mIsRtlText ? Gravity.RIGHT : Gravity.NO_GRAVITY);
    mTextEntry.setNodePointer(node.mNodePointer);
    int maxLength=-1;
    if (node.mIsTextField) {
      maxLength=node.mMaxLength;
      if (mWebViewCore.getSettings().getSaveFormData() && node.mName != null) {
        HashMap data=new HashMap();
        data.put("text",node.mText);
        Message update=mPrivateHandler.obtainMessage(UPDATE_TEXT_ENTRY_ADAPTER,node.mNodePointer,0,data);
        UpdateTextEntryAdapter updater=new UpdateTextEntryAdapter(node.mName,getUrl(),update);
        Thread t=new Thread(updater);
        t.start();
      }
    }
    mTextEntry.setMaxLength(maxLength);
    AutoCompleteAdapter adapter=null;
    mTextEntry.setAdapterCustom(adapter);
    mTextEntry.setSingleLine(node.mIsTextField);
    mTextEntry.setInPassword(node.mIsPassword);
    if (null == text) {
      mTextEntry.setText("",0,0);
    }
 else {
      if (false) {
        mTextEntry.setText(text,0,text.length());
      }
 else       if (node.mIsTextField) {
        int length=text.length();
        mTextEntry.setText(text,length,length);
      }
 else {
        mTextEntry.setText(text,0,0);
      }
    }
    mTextEntry.requestFocus();
  }
}
