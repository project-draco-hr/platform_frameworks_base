{
  if (!hasFocus() && (null == mTextEntry || !mTextEntry.hasFocus()) || (mTouchMode >= FIRST_SCROLL_ZOOM && mTouchMode <= LAST_SCROLL_ZOOM)) {
    mNeedsUpdateTextEntry=true;
    return;
  }
  boolean alreadyThere=inEditingMode();
  if (0 == mNativeClass || (!nativeFocusIsTextInput() && !nativeCursorIsTextInput())) {
    if (alreadyThere) {
      mTextEntry.remove();
    }
    return;
  }
  if (mTextEntry == null) {
    mTextEntry=new TextDialog(mContext,WebView.this);
    mTextGeneration=0;
  }
  mTextEntry.setTextSize(contentToView(nativeFocusTextSize()));
  Rect visibleRect=sendOurVisibleRect();
  Rect bounds=nativeFocusNodeBounds();
  if (!Rect.intersects(bounds,visibleRect)) {
    return;
  }
  String text=nativeFocusText();
  int nodePointer=nativeFocusNodePointer();
  if (alreadyThere && mTextEntry.isSameTextField(nodePointer)) {
    Spannable spannable=(Spannable)mTextEntry.getText();
    int start=Selection.getSelectionStart(spannable);
    int end=Selection.getSelectionEnd(spannable);
    if (text != null && !text.equals(spannable.toString()) && nativeTextGeneration() == mTextGeneration) {
      mTextEntry.setTextAndKeepSelection(text);
    }
 else {
      Selection.setSelection(spannable,start,end);
    }
  }
 else {
    Rect vBox=contentToView(bounds);
    mTextEntry.setRect(vBox.left,vBox.top,vBox.width(),vBox.height());
    mTextEntry.setGravity(nativeFocusIsRtlText() ? Gravity.RIGHT : Gravity.NO_GRAVITY);
    mTextEntry.setNodePointer(nodePointer);
    int maxLength=-1;
    boolean isTextField=nativeFocusIsTextField();
    if (isTextField) {
      maxLength=nativeFocusMaxLength();
      String name=nativeFocusName();
      if (mWebViewCore.getSettings().getSaveFormData() && name != null) {
        HashMap data=new HashMap();
        data.put("text",text);
        Message update=mPrivateHandler.obtainMessage(UPDATE_TEXT_ENTRY_ADAPTER,nodePointer,0,data);
        UpdateTextEntryAdapter updater=new UpdateTextEntryAdapter(name,getUrl(),update);
        Thread t=new Thread(updater);
        t.start();
      }
    }
    mTextEntry.setMaxLength(maxLength);
    AutoCompleteAdapter adapter=null;
    mTextEntry.setAdapterCustom(adapter);
    mTextEntry.setSingleLine(isTextField);
    mTextEntry.setInPassword(nativeFocusIsPassword());
    if (null == text) {
      mTextEntry.setText("",0,0);
    }
 else {
      if (false) {
        mTextEntry.setText(text,0,text.length());
      }
 else       if (isTextField) {
        int length=text.length();
        mTextEntry.setText(text,length,length);
      }
 else {
        mTextEntry.setText(text,0,0);
      }
    }
    mTextEntry.requestFocus();
  }
}
