{
  if (mNativeClass == 0 || !isClickable() || !isLongClickable()) {
    return false;
  }
  if (DebugFlags.WEB_VIEW) {
    Log.v(LOGTAG,ev + " at " + ev.getEventTime()+ " mTouchMode="+ mTouchMode);
  }
  int action=ev.getAction();
  float x=ev.getX();
  float y=ev.getY();
  long eventTime=ev.getEventTime();
  if (x > getViewWidth() - 1) {
    x=getViewWidth() - 1;
  }
  if (y > getViewHeight() - 1) {
    y=getViewHeight() - 1;
  }
  if (mForwardTouchEvents && (action != MotionEvent.ACTION_MOVE || eventTime - mLastSentTouchTime > TOUCH_SENT_INTERVAL)) {
    WebViewCore.TouchEventData ted=new WebViewCore.TouchEventData();
    ted.mAction=action;
    ted.mX=viewToContentX((int)x + mScrollX);
    ted.mY=viewToContentY((int)y + mScrollY);
    mWebViewCore.sendMessage(EventHub.TOUCH_EVENT,ted);
    mLastSentTouchTime=eventTime;
  }
  int deltaX=(int)(mLastTouchX - x);
  int deltaY=(int)(mLastTouchY - y);
switch (action) {
case MotionEvent.ACTION_DOWN:
{
      if (!mScroller.isFinished()) {
        mScroller.abortAnimation();
        mTouchMode=TOUCH_DRAG_START_MODE;
        mPrivateHandler.removeMessages(RESUME_WEBCORE_UPDATE);
      }
 else       if (mShiftIsPressed) {
        mSelectX=mScrollX + (int)x;
        mSelectY=mScrollY + (int)y;
        mTouchMode=TOUCH_SELECT_MODE;
        if (DebugFlags.WEB_VIEW) {
          Log.v(LOGTAG,"select=" + mSelectX + ","+ mSelectY);
        }
        nativeMoveSelection(viewToContentX(mSelectX),viewToContentY(mSelectY),false);
        mTouchSelection=mExtendSelection=true;
      }
 else       if (mPrivateHandler.hasMessages(RELEASE_SINGLE_TAP)) {
        mPrivateHandler.removeMessages(RELEASE_SINGLE_TAP);
        if (deltaX * deltaX + deltaY * deltaY < mDoubleTapSlopSquare) {
          mTouchMode=TOUCH_DOUBLE_TAP_MODE;
        }
 else {
          doShortPress();
        }
      }
 else {
        mTouchMode=TOUCH_INIT_MODE;
        mPreventDrag=mForwardTouchEvents;
        mWebViewCore.sendMessage(EventHub.UPDATE_FRAME_CACHE_IF_LOADING);
        if (mLogEvent && eventTime - mLastTouchUpTime < 1000) {
          EventLog.writeEvent(EVENT_LOG_DOUBLE_TAP_DURATION,(eventTime - mLastTouchUpTime),eventTime);
        }
      }
      if (mTouchMode == TOUCH_INIT_MODE || mTouchMode == TOUCH_DOUBLE_TAP_MODE) {
        mPrivateHandler.sendMessageDelayed(mPrivateHandler.obtainMessage(SWITCH_TO_SHORTPRESS),TAP_TIMEOUT);
      }
      mLastTouchX=x;
      mLastTouchY=y;
      mLastTouchTime=eventTime;
      mVelocityTracker=VelocityTracker.obtain();
      mSnapScrollMode=SNAP_NONE;
      break;
    }
case MotionEvent.ACTION_MOVE:
{
    if (mTouchMode == TOUCH_DONE_MODE) {
      break;
    }
    mVelocityTracker.addMovement(ev);
    if (mTouchMode != TOUCH_DRAG_MODE) {
      if (mTouchMode == TOUCH_SELECT_MODE) {
        mSelectX=mScrollX + (int)x;
        mSelectY=mScrollY + (int)y;
        if (DebugFlags.WEB_VIEW) {
          Log.v(LOGTAG,"xtend=" + mSelectX + ","+ mSelectY);
        }
        nativeMoveSelection(viewToContentX(mSelectX),viewToContentY(mSelectY),true);
        invalidate();
        break;
      }
      if (mPreventDrag || (deltaX * deltaX + deltaY * deltaY) < mTouchSlopSquare) {
        break;
      }
      if (mTouchMode == TOUCH_SHORTPRESS_MODE || mTouchMode == TOUCH_SHORTPRESS_START_MODE) {
        mPrivateHandler.removeMessages(SWITCH_TO_LONGPRESS);
      }
 else       if (mTouchMode == TOUCH_INIT_MODE || mTouchMode == TOUCH_DOUBLE_TAP_MODE) {
        mPrivateHandler.removeMessages(SWITCH_TO_SHORTPRESS);
      }
      int ax=Math.abs(deltaX);
      int ay=Math.abs(deltaY);
      if (ax > MAX_SLOPE_FOR_DIAG * ay) {
        mSnapScrollMode=SNAP_X;
        mSnapPositive=deltaX > 0;
      }
 else       if (ay > MAX_SLOPE_FOR_DIAG * ax) {
        mSnapScrollMode=SNAP_Y;
        mSnapPositive=deltaY > 0;
      }
      mTouchMode=TOUCH_DRAG_MODE;
      WebViewCore.pauseUpdate(mWebViewCore);
      if (!mDragFromTextInput) {
        nativeHideCursor();
      }
      WebSettings settings=getSettings();
      if (settings.supportZoom() && settings.getBuiltInZoomControls() && !mZoomButtonsController.isVisible()&& mMinZoomScale < mMaxZoomScale) {
        mZoomButtonsController.setVisible(true);
        int count=settings.getDoubleTapToastCount();
        if (mInZoomOverview && count > 0) {
          settings.setDoubleTapToastCount(count--);
          Toast.makeText(mContext,com.android.internal.R.string.double_tap_toast,Toast.LENGTH_SHORT).show();
        }
      }
    }
    int newScrollX=pinLocX(mScrollX + deltaX);
    deltaX=newScrollX - mScrollX;
    int newScrollY=pinLocY(mScrollY + deltaY);
    deltaY=newScrollY - mScrollY;
    boolean done=false;
    if (deltaX == 0 && deltaY == 0) {
      done=true;
    }
 else {
      if (mSnapScrollMode == SNAP_X || mSnapScrollMode == SNAP_Y) {
        int ax=Math.abs(deltaX);
        int ay=Math.abs(deltaY);
        if (mSnapScrollMode == SNAP_X) {
          if (ay > MAX_SLOPE_FOR_DIAG * ax && ay > MIN_BREAK_SNAP_CROSS_DISTANCE) {
            mSnapScrollMode=SNAP_NONE;
          }
          if ((ax > MAX_SLOPE_FOR_DIAG * ay) && ((mSnapPositive && deltaX < -mMinLockSnapReverseDistance) || (!mSnapPositive && deltaX > mMinLockSnapReverseDistance))) {
            mSnapScrollMode=SNAP_X_LOCK;
          }
        }
 else {
          if ((ax > MAX_SLOPE_FOR_DIAG * ay) && ax > MIN_BREAK_SNAP_CROSS_DISTANCE) {
            mSnapScrollMode=SNAP_NONE;
          }
          if ((ay > MAX_SLOPE_FOR_DIAG * ax) && ((mSnapPositive && deltaY < -mMinLockSnapReverseDistance) || (!mSnapPositive && deltaY > mMinLockSnapReverseDistance))) {
            mSnapScrollMode=SNAP_Y_LOCK;
          }
        }
      }
      if (mSnapScrollMode == SNAP_X || mSnapScrollMode == SNAP_X_LOCK) {
        scrollBy(deltaX,0);
        mLastTouchX=x;
      }
 else       if (mSnapScrollMode == SNAP_Y || mSnapScrollMode == SNAP_Y_LOCK) {
        scrollBy(0,deltaY);
        mLastTouchY=y;
      }
 else {
        scrollBy(deltaX,deltaY);
        mLastTouchX=x;
        mLastTouchY=y;
      }
      mLastTouchTime=eventTime;
      mUserScroll=true;
    }
    if (!getSettings().getBuiltInZoomControls()) {
      boolean showPlusMinus=mMinZoomScale < mMaxZoomScale;
      if (mZoomControls != null && showPlusMinus) {
        if (mZoomControls.getVisibility() == View.VISIBLE) {
          mPrivateHandler.removeCallbacks(mZoomControlRunnable);
        }
 else {
          mZoomControls.show(showPlusMinus,false);
        }
        mPrivateHandler.postDelayed(mZoomControlRunnable,ZOOM_CONTROLS_TIMEOUT);
      }
    }
    if (done) {
      return false;
    }
    break;
  }
case MotionEvent.ACTION_UP:
{
  mLastTouchUpTime=eventTime;
switch (mTouchMode) {
case TOUCH_DOUBLE_TAP_MODE:
    mPrivateHandler.removeMessages(SWITCH_TO_SHORTPRESS);
  mTouchMode=TOUCH_DONE_MODE;
doDoubleTap();
break;
case TOUCH_INIT_MODE:
mPrivateHandler.removeMessages(SWITCH_TO_SHORTPRESS);
if (!mPreventDrag) {
mPrivateHandler.sendMessageDelayed(mPrivateHandler.obtainMessage(RELEASE_SINGLE_TAP),ViewConfiguration.getDoubleTapTimeout());
}
break;
case TOUCH_SHORTPRESS_START_MODE:
case TOUCH_SHORTPRESS_MODE:
mPrivateHandler.removeMessages(SWITCH_TO_SHORTPRESS);
mPrivateHandler.removeMessages(SWITCH_TO_LONGPRESS);
mTouchMode=TOUCH_DONE_MODE;
doShortPress();
break;
case TOUCH_SELECT_MODE:
commitCopy();
mTouchSelection=false;
break;
case TOUCH_DRAG_MODE:
invalidate();
if (eventTime - mLastTouchTime <= MIN_FLING_TIME) {
mVelocityTracker.addMovement(ev);
doFling();
break;
}
mLastVelocity=0;
WebViewCore.resumeUpdate(mWebViewCore);
break;
case TOUCH_DRAG_START_MODE:
case TOUCH_DONE_MODE:
break;
}
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
break;
}
case MotionEvent.ACTION_CANCEL:
{
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
if (mTouchMode == TOUCH_DRAG_MODE) {
WebViewCore.resumeUpdate(mWebViewCore);
}
mPrivateHandler.removeMessages(SWITCH_TO_SHORTPRESS);
mPrivateHandler.removeMessages(SWITCH_TO_LONGPRESS);
mTouchMode=TOUCH_DONE_MODE;
nativeHideCursor();
break;
}
}
return true;
}
