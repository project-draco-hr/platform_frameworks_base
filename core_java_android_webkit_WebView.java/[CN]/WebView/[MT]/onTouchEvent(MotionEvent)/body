{
  if (mNativeClass == 0 || !isClickable() || !isLongClickable()) {
    return false;
  }
  if (DebugFlags.WEB_VIEW) {
    Log.v(LOGTAG,ev + " at " + ev.getEventTime()+ " mTouchMode="+ mTouchMode);
  }
  int action;
  float x, y;
  long eventTime=ev.getEventTime();
  if (mSupportMultiTouch && ev.getPointerCount() > 1) {
    if (mMinZoomScale < mMaxZoomScale) {
      mScaleDetector.onTouchEvent(ev);
      if (mScaleDetector.isInProgress()) {
        mLastTouchTime=eventTime;
        return true;
      }
      x=mScaleDetector.getFocusX();
      y=mScaleDetector.getFocusY();
      action=ev.getAction() & MotionEvent.ACTION_MASK;
      if (action == MotionEvent.ACTION_POINTER_DOWN) {
        cancelTouch();
        action=MotionEvent.ACTION_DOWN;
      }
 else       if (action == MotionEvent.ACTION_POINTER_UP) {
        mLastTouchX=x;
        mLastTouchY=y;
      }
 else       if (action == MotionEvent.ACTION_MOVE) {
        if (x < 0 || y < 0) {
          return true;
        }
      }
    }
 else {
      return true;
    }
  }
 else {
    action=ev.getAction();
    x=ev.getX();
    y=ev.getY();
  }
  if (x > getViewWidth() - 1) {
    x=getViewWidth() - 1;
  }
  if (y > getViewHeightWithTitle() - 1) {
    y=getViewHeightWithTitle() - 1;
  }
  if (mForwardTouchEvents && (action != MotionEvent.ACTION_MOVE || eventTime - mLastSentTouchTime > TOUCH_SENT_INTERVAL)) {
    WebViewCore.TouchEventData ted=new WebViewCore.TouchEventData();
    ted.mAction=action;
    ted.mX=viewToContentX((int)x + mScrollX);
    ted.mY=viewToContentY((int)y + mScrollY);
    ted.mEventTime=eventTime;
    mWebViewCore.sendMessage(EventHub.TOUCH_EVENT,ted);
    mLastSentTouchTime=eventTime;
  }
  float fDeltaX=mLastTouchX - x;
  float fDeltaY=mLastTouchY - y;
  int deltaX=(int)fDeltaX;
  int deltaY=(int)fDeltaY;
switch (action) {
case MotionEvent.ACTION_DOWN:
{
      mPreventDrag=PREVENT_DRAG_NO;
      if (!mScroller.isFinished()) {
        mScroller.abortAnimation();
        mTouchMode=TOUCH_DRAG_START_MODE;
        mPrivateHandler.removeMessages(RESUME_WEBCORE_PRIORITY);
      }
 else       if (mShiftIsPressed) {
        mSelectX=mScrollX + (int)x;
        mSelectY=mScrollY + (int)y;
        mTouchMode=TOUCH_SELECT_MODE;
        if (DebugFlags.WEB_VIEW) {
          Log.v(LOGTAG,"select=" + mSelectX + ","+ mSelectY);
        }
        nativeMoveSelection(viewToContentX(mSelectX),viewToContentY(mSelectY),false);
        mTouchSelection=mExtendSelection=true;
        invalidate();
      }
 else       if (mPrivateHandler.hasMessages(RELEASE_SINGLE_TAP)) {
        mPrivateHandler.removeMessages(RELEASE_SINGLE_TAP);
        if (deltaX * deltaX + deltaY * deltaY < mDoubleTapSlopSquare) {
          mTouchMode=TOUCH_DOUBLE_TAP_MODE;
        }
 else {
          doShortPress();
        }
      }
 else {
        mPreviewZoomOnly=false;
        mTouchMode=TOUCH_INIT_MODE;
        mPreventDrag=mForwardTouchEvents ? PREVENT_DRAG_MAYBE_YES : PREVENT_DRAG_NO;
        mPreventLongPress=false;
        mPreventDoubleTap=false;
        mWebViewCore.sendMessage(EventHub.UPDATE_FRAME_CACHE_IF_LOADING);
        if (mLogEvent && eventTime - mLastTouchUpTime < 1000) {
          EventLog.writeEvent(EVENT_LOG_DOUBLE_TAP_DURATION,(eventTime - mLastTouchUpTime),eventTime);
        }
      }
      if (mTouchMode == TOUCH_INIT_MODE || mTouchMode == TOUCH_DOUBLE_TAP_MODE) {
        mPrivateHandler.sendMessageDelayed(mPrivateHandler.obtainMessage(SWITCH_TO_SHORTPRESS),TAP_TIMEOUT);
      }
      startTouch(x,y,eventTime);
      break;
    }
case MotionEvent.ACTION_MOVE:
{
    if (mTouchMode == TOUCH_DONE_MODE) {
      break;
    }
    mVelocityTracker.addMovement(ev);
    if (mTouchMode != TOUCH_DRAG_MODE) {
      if (mTouchMode == TOUCH_SELECT_MODE) {
        mSelectX=mScrollX + (int)x;
        mSelectY=mScrollY + (int)y;
        if (DebugFlags.WEB_VIEW) {
          Log.v(LOGTAG,"xtend=" + mSelectX + ","+ mSelectY);
        }
        nativeMoveSelection(viewToContentX(mSelectX),viewToContentY(mSelectY),true);
        invalidate();
        break;
      }
      if ((deltaX * deltaX + deltaY * deltaY) < mTouchSlopSquare) {
        break;
      }
      if (mPreventDrag == PREVENT_DRAG_MAYBE_YES) {
        mLastTouchTime=eventTime;
        break;
      }
      if (mTouchMode == TOUCH_SHORTPRESS_MODE || mTouchMode == TOUCH_SHORTPRESS_START_MODE) {
        mPrivateHandler.removeMessages(SWITCH_TO_LONGPRESS);
      }
 else       if (mTouchMode == TOUCH_INIT_MODE || mTouchMode == TOUCH_DOUBLE_TAP_MODE) {
        mPrivateHandler.removeMessages(SWITCH_TO_SHORTPRESS);
      }
      if (mFullScreenHolder != null) {
        mTouchMode=TOUCH_DONE_MODE;
        break;
      }
      int ax=Math.abs(deltaX);
      int ay=Math.abs(deltaY);
      if (ax > MAX_SLOPE_FOR_DIAG * ay) {
        mSnapScrollMode=SNAP_X;
        mSnapPositive=deltaX > 0;
      }
 else       if (ay > MAX_SLOPE_FOR_DIAG * ax) {
        mSnapScrollMode=SNAP_Y;
        mSnapPositive=deltaY > 0;
      }
      mTouchMode=TOUCH_DRAG_MODE;
      mLastTouchX=x;
      mLastTouchY=y;
      fDeltaX=0.0f;
      fDeltaY=0.0f;
      deltaX=0;
      deltaY=0;
      WebViewCore.reducePriority();
      if (!mDragFromTextInput) {
        nativeHideCursor();
      }
      WebSettings settings=getSettings();
      if (settings.supportZoom() && settings.getBuiltInZoomControls() && !mZoomButtonsController.isVisible()&& mMinZoomScale < mMaxZoomScale) {
        mZoomButtonsController.setVisible(true);
        int count=settings.getDoubleTapToastCount();
        if (mInZoomOverview && count > 0) {
          settings.setDoubleTapToastCount(--count);
          Toast.makeText(mContext,com.android.internal.R.string.double_tap_toast,Toast.LENGTH_LONG).show();
        }
      }
    }
    int newScrollX=pinLocX(mScrollX + deltaX);
    int newDeltaX=newScrollX - mScrollX;
    if (deltaX != newDeltaX) {
      deltaX=newDeltaX;
      fDeltaX=(float)newDeltaX;
    }
    int newScrollY=pinLocY(mScrollY + deltaY);
    int newDeltaY=newScrollY - mScrollY;
    if (deltaY != newDeltaY) {
      deltaY=newDeltaY;
      fDeltaY=(float)newDeltaY;
    }
    boolean done=false;
    boolean keepScrollBarsVisible=false;
    if (Math.abs(fDeltaX) < 1.0f && Math.abs(fDeltaY) < 1.0f) {
      keepScrollBarsVisible=done=true;
    }
 else {
      if (mSnapScrollMode == SNAP_X || mSnapScrollMode == SNAP_Y) {
        int ax=Math.abs(deltaX);
        int ay=Math.abs(deltaY);
        if (mSnapScrollMode == SNAP_X) {
          if (ay > MAX_SLOPE_FOR_DIAG * ax && ay > MIN_BREAK_SNAP_CROSS_DISTANCE) {
            mSnapScrollMode=SNAP_NONE;
          }
          if (ax > MAX_SLOPE_FOR_DIAG * ay && (mSnapPositive ? deltaX < -mMinLockSnapReverseDistance : deltaX > mMinLockSnapReverseDistance)) {
            mSnapScrollMode|=SNAP_LOCK;
          }
        }
 else {
          if (ax > MAX_SLOPE_FOR_DIAG * ay && ax > MIN_BREAK_SNAP_CROSS_DISTANCE) {
            mSnapScrollMode=SNAP_NONE;
          }
          if (ay > MAX_SLOPE_FOR_DIAG * ax && (mSnapPositive ? deltaY < -mMinLockSnapReverseDistance : deltaY > mMinLockSnapReverseDistance)) {
            mSnapScrollMode|=SNAP_LOCK;
          }
        }
      }
      if (mSnapScrollMode != SNAP_NONE) {
        if ((mSnapScrollMode & SNAP_X) == SNAP_X) {
          deltaY=0;
        }
 else {
          deltaX=0;
        }
      }
      if ((deltaX | deltaY) != 0) {
        scrollBy(deltaX,deltaY);
        if (deltaX != 0) {
          mLastTouchX=x;
        }
        if (deltaY != 0) {
          mLastTouchY=y;
        }
        mHeldMotionless=MOTIONLESS_FALSE;
      }
 else {
        keepScrollBarsVisible=true;
      }
      mLastTouchTime=eventTime;
      mUserScroll=true;
    }
    if (!getSettings().getBuiltInZoomControls()) {
      boolean showPlusMinus=mMinZoomScale < mMaxZoomScale;
      if (mZoomControls != null && showPlusMinus) {
        if (mZoomControls.getVisibility() == View.VISIBLE) {
          mPrivateHandler.removeCallbacks(mZoomControlRunnable);
        }
 else {
          mZoomControls.show(showPlusMinus,false);
        }
        mPrivateHandler.postDelayed(mZoomControlRunnable,ZOOM_CONTROLS_TIMEOUT);
      }
    }
    if (mDragTrackerHandler != null) {
      mDragTrackerHandler.dragTo(x,y);
    }
    if (keepScrollBarsVisible) {
      if (mHeldMotionless != MOTIONLESS_TRUE) {
        mHeldMotionless=MOTIONLESS_TRUE;
        invalidate();
      }
      awakenScrollBars(ViewConfiguration.getScrollDefaultDelay(),false);
      return !done;
    }
    break;
  }
case MotionEvent.ACTION_UP:
{
  if (mDragTrackerHandler != null) {
    mDragTrackerHandler.stopDrag();
    mDragTrackerHandler=null;
  }
  mLastTouchUpTime=eventTime;
switch (mTouchMode) {
case TOUCH_DOUBLE_TAP_MODE:
    mPrivateHandler.removeMessages(SWITCH_TO_SHORTPRESS);
  mTouchMode=TOUCH_DONE_MODE;
if (mPreventDoubleTap) {
  WebViewCore.TouchEventData ted=new WebViewCore.TouchEventData();
  ted.mAction=WebViewCore.ACTION_DOUBLETAP;
  ted.mX=viewToContentX((int)x + mScrollX);
  ted.mY=viewToContentY((int)y + mScrollY);
  ted.mEventTime=eventTime;
  mWebViewCore.sendMessage(EventHub.TOUCH_EVENT,ted);
}
 else if (mFullScreenHolder == null) {
  doDoubleTap();
}
break;
case TOUCH_SELECT_MODE:
commitCopy();
mTouchSelection=false;
break;
case TOUCH_INIT_MODE:
case TOUCH_SHORTPRESS_START_MODE:
case TOUCH_SHORTPRESS_MODE:
mPrivateHandler.removeMessages(SWITCH_TO_SHORTPRESS);
mPrivateHandler.removeMessages(SWITCH_TO_LONGPRESS);
if ((deltaX * deltaX + deltaY * deltaY) > mTouchSlopSquare) {
Log.w(LOGTAG,"Miss a drag as we are waiting for" + " WebCore's response for touch down.");
if (mFullScreenHolder == null && (computeHorizontalScrollExtent() < computeHorizontalScrollRange() || computeVerticalScrollExtent() < computeVerticalScrollRange())) {
WebViewCore.reducePriority();
}
 else {
break;
}
}
 else {
if (mPreventDrag != PREVENT_DRAG_YES) {
if (mTouchMode == TOUCH_INIT_MODE) {
mPrivateHandler.sendMessageDelayed(mPrivateHandler.obtainMessage(RELEASE_SINGLE_TAP),ViewConfiguration.getDoubleTapTimeout());
}
 else {
mTouchMode=TOUCH_DONE_MODE;
doShortPress();
}
}
break;
}
case TOUCH_DRAG_MODE:
mPrivateHandler.removeMessages(DRAG_HELD_MOTIONLESS);
mPrivateHandler.removeMessages(AWAKEN_SCROLL_BARS);
mHeldMotionless=MOTIONLESS_TRUE;
invalidate();
if (eventTime - mLastTouchTime <= MIN_FLING_TIME) {
mVelocityTracker.addMovement(ev);
doFling();
break;
}
mLastVelocity=0;
WebViewCore.resumePriority();
break;
case TOUCH_DRAG_START_MODE:
case TOUCH_DONE_MODE:
break;
}
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
break;
}
case MotionEvent.ACTION_CANCEL:
{
cancelTouch();
break;
}
}
return true;
}
