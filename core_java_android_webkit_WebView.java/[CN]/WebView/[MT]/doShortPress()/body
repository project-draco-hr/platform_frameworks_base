{
  if (mNativeClass == 0) {
    return;
  }
  if (mPreventDefault == PREVENT_DEFAULT_YES) {
    return;
  }
  mTouchMode=TOUCH_DONE_MODE;
  updateSelection();
  switchOutDrawHistory();
  int contentX=viewToContentX(mLastTouchX + mScrollX);
  int contentY=viewToContentY(mLastTouchY + mScrollY);
  int slop=viewToContentDimension(mNavSlop);
  if (USE_WEBKIT_RINGS && !mTouchHighlightRegion.isEmpty()) {
    mTouchHighlightRequested=0;
    invalidate(mTouchHighlightRegion.getBounds());
    mPrivateHandler.postDelayed(new Runnable(){
      @Override public void run(){
        removeTouchHighlight();
      }
    }
,ViewConfiguration.getPressedStateDuration());
  }
  if (getSettings().supportTouchOnly()) {
    removeTouchHighlight();
    WebViewCore.TouchUpData touchUpData=new WebViewCore.TouchUpData();
    touchUpData.mMoveGeneration=0;
    mWebViewCore.sendMessage(EventHub.TOUCH_UP,touchUpData);
  }
 else   if (nativePointInNavCache(contentX,contentY,slop)) {
    WebViewCore.MotionUpData motionUpData=new WebViewCore.MotionUpData();
    motionUpData.mFrame=nativeCacheHitFramePointer();
    motionUpData.mNode=nativeCacheHitNodePointer();
    motionUpData.mBounds=nativeCacheHitNodeBounds();
    motionUpData.mX=contentX;
    motionUpData.mY=contentY;
    mWebViewCore.sendMessageAtFrontOfQueue(EventHub.VALID_NODE_BOUNDS,motionUpData);
  }
 else {
    doMotionUp(contentX,contentY);
  }
}
