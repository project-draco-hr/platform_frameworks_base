{
  if (DebugFlags.WEB_VIEW) {
    Log.v(LOGTAG,"keyDown at " + System.currentTimeMillis() + ", "+ event+ ", unicode="+ event.getUnicodeChar());
  }
  if (mNativeClass == 0) {
    return false;
  }
  if (AUTO_REDRAW_HACK && (keyCode == KeyEvent.KEYCODE_CALL)) {
    mAutoRedraw=!mAutoRedraw;
    if (mAutoRedraw) {
      invalidate();
    }
    return true;
  }
  if (event.isSystem() || mCallbackProxy.uiOverrideKeyEvent(event) || (mAccessibilityInjector != null && mAccessibilityInjector.onKeyEvent(event))) {
    return false;
  }
  if (keyCode == KeyEvent.KEYCODE_SHIFT_LEFT || keyCode == KeyEvent.KEYCODE_SHIFT_RIGHT) {
    if (pageShouldHandleShiftAndArrows()) {
      mShiftIsPressed=true;
    }
 else     if (!nativeCursorWantsKeyEvents() && !mSelectingText) {
      setUpSelect();
    }
  }
  if (keyCode == KeyEvent.KEYCODE_PAGE_UP) {
    pageUp(false);
    return true;
  }
  if (keyCode == KeyEvent.KEYCODE_PAGE_DOWN) {
    pageDown(false);
    return true;
  }
  if (keyCode >= KeyEvent.KEYCODE_DPAD_UP && keyCode <= KeyEvent.KEYCODE_DPAD_RIGHT) {
    switchOutDrawHistory();
    if (pageShouldHandleShiftAndArrows()) {
      letPageHandleNavKey(keyCode,event.getEventTime(),true);
      return true;
    }
    if (mSelectingText) {
      int xRate=keyCode == KeyEvent.KEYCODE_DPAD_LEFT ? -1 : keyCode == KeyEvent.KEYCODE_DPAD_RIGHT ? 1 : 0;
      int yRate=keyCode == KeyEvent.KEYCODE_DPAD_UP ? -1 : keyCode == KeyEvent.KEYCODE_DPAD_DOWN ? 1 : 0;
      int multiplier=event.getRepeatCount() + 1;
      moveSelection(xRate * multiplier,yRate * multiplier);
      return true;
    }
    if (navHandledKey(keyCode,1,false,event.getEventTime())) {
      playSoundEffect(keyCodeToSoundsEffect(keyCode));
      return true;
    }
    return false;
  }
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER) {
    switchOutDrawHistory();
    if (event.getRepeatCount() == 0) {
      if (mSelectingText) {
        return true;
      }
      mGotCenterDown=true;
      mPrivateHandler.sendMessageDelayed(mPrivateHandler.obtainMessage(LONG_PRESS_CENTER),LONG_PRESS_TIMEOUT);
      nativeRecordButtons(hasFocus() && hasWindowFocus(),true,true);
      return true;
    }
    return false;
  }
  if (keyCode != KeyEvent.KEYCODE_SHIFT_LEFT && keyCode != KeyEvent.KEYCODE_SHIFT_RIGHT) {
    selectionDone();
    mShiftIsPressed=false;
  }
  if (getSettings().getNavDump()) {
switch (keyCode) {
case KeyEvent.KEYCODE_4:
      dumpDisplayTree();
    break;
case KeyEvent.KEYCODE_5:
case KeyEvent.KEYCODE_6:
  dumpDomTree(keyCode == KeyEvent.KEYCODE_5);
break;
case KeyEvent.KEYCODE_7:
case KeyEvent.KEYCODE_8:
dumpRenderTree(keyCode == KeyEvent.KEYCODE_7);
break;
case KeyEvent.KEYCODE_9:
nativeInstrumentReport();
return true;
}
}
if (nativeCursorIsTextInput()) {
mWebViewCore.sendMessage(EventHub.CLICK,nativeCursorFramePointer(),nativeCursorNodePointer());
rebuildWebTextView();
if (inEditingMode()) {
mWebTextView.setDefaultSelection();
return mWebTextView.dispatchKeyEvent(event);
}
}
 else if (nativeHasFocusNode()) {
rebuildWebTextView();
if (inEditingMode()) {
mWebTextView.setDefaultSelection();
return mWebTextView.dispatchKeyEvent(event);
}
}
if (nativeCursorWantsKeyEvents() || true) {
mWebViewCore.sendMessage(EventHub.KEY_DOWN,event);
return true;
}
return false;
}
