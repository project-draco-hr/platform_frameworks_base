{
  final int scrollX=mScrollX;
  final int scrollY=mScrollY;
  final int width=getWidth();
  int height=getHeight();
  boolean invalidateForGlow=false;
  if (!mEdgeGlowTop.isFinished()) {
    final int restoreCount=canvas.save();
    canvas.translate(-width / 2 + scrollX,Math.min(0,scrollY));
    mEdgeGlowTop.setSize(width * 2,height);
    invalidateForGlow|=mEdgeGlowTop.draw(canvas);
    canvas.restoreToCount(restoreCount);
  }
  if (!mEdgeGlowBottom.isFinished()) {
    final int restoreCount=canvas.save();
    canvas.translate(-width / 2 + scrollX,Math.max(computeMaxScrollY(),scrollY) + height);
    canvas.rotate(180,width,0);
    mEdgeGlowBottom.setSize(width * 2,height);
    invalidateForGlow|=mEdgeGlowBottom.draw(canvas);
    canvas.restoreToCount(restoreCount);
  }
  if (!mEdgeGlowLeft.isFinished()) {
    final int restoreCount=canvas.save();
    canvas.rotate(270);
    canvas.translate(-height * 1.5f - scrollY,Math.min(0,scrollX));
    mEdgeGlowLeft.setSize(height * 2,width);
    invalidateForGlow|=mEdgeGlowLeft.draw(canvas);
    canvas.restoreToCount(restoreCount);
  }
  if (!mEdgeGlowRight.isFinished()) {
    final int restoreCount=canvas.save();
    canvas.rotate(90);
    canvas.translate(-height / 2 + scrollY,-(Math.max(computeMaxScrollX(),scrollX) + width));
    mEdgeGlowRight.setSize(height * 2,width);
    invalidateForGlow|=mEdgeGlowRight.draw(canvas);
    canvas.restoreToCount(restoreCount);
  }
  return invalidateForGlow;
}
