{
  if (mDrawHistory) {
    canvas.scale(mActualScale,mActualScale);
    canvas.drawPicture(mHistoryPicture);
    return;
  }
  boolean animateZoom=mZoomScale != 0;
  boolean animateScroll=((!mScroller.isFinished() || mVelocityTracker != null) && (mTouchMode != TOUCH_DRAG_MODE || mHeldMotionless != MOTIONLESS_TRUE)) || mDeferTouchMode == TOUCH_DRAG_MODE;
  if (mTouchMode == TOUCH_DRAG_MODE) {
    if (mHeldMotionless == MOTIONLESS_PENDING) {
      mPrivateHandler.removeMessages(DRAG_HELD_MOTIONLESS);
      mPrivateHandler.removeMessages(AWAKEN_SCROLL_BARS);
      mHeldMotionless=MOTIONLESS_FALSE;
    }
    if (mHeldMotionless == MOTIONLESS_FALSE) {
      mPrivateHandler.sendMessageDelayed(mPrivateHandler.obtainMessage(DRAG_HELD_MOTIONLESS),MOTIONLESS_TIME);
      mHeldMotionless=MOTIONLESS_PENDING;
    }
  }
  if (animateZoom) {
    float zoomScale;
    int interval=(int)(SystemClock.uptimeMillis() - mZoomStart);
    if (interval < ZOOM_ANIMATION_LENGTH) {
      float ratio=(float)interval / ZOOM_ANIMATION_LENGTH;
      zoomScale=1.0f / (mInvInitialZoomScale + (mInvFinalZoomScale - mInvInitialZoomScale) * ratio);
      invalidate();
    }
 else {
      zoomScale=mZoomScale;
      mZoomScale=0;
      WebViewCore.resumeUpdatePicture(mWebViewCore);
      invalidate();
      if (mNeedToAdjustWebTextView) {
        mNeedToAdjustWebTextView=false;
        if (didUpdateTextViewBounds(false) && nativeFocusCandidateIsPassword()) {
          mWebTextView.setInPassword(true);
        }
      }
    }
    float scale=zoomScale * mInvInitialZoomScale;
    int tx=Math.round(scale * (mInitialScrollX + mZoomCenterX) - mZoomCenterX);
    tx=-pinLoc(tx,getViewWidth(),Math.round(mContentWidth * zoomScale)) + mScrollX;
    int titleHeight=getTitleHeight();
    int ty=Math.round(scale * (mInitialScrollY + mZoomCenterY - titleHeight) - (mZoomCenterY - titleHeight));
    ty=-(ty <= titleHeight ? Math.max(ty,0) : pinLoc(ty - titleHeight,getViewHeight(),Math.round(mContentHeight * zoomScale)) + titleHeight) + mScrollY;
    canvas.translate(tx,ty);
    canvas.scale(zoomScale,zoomScale);
    if (inEditingMode() && !mNeedToAdjustWebTextView && mZoomScale != 0) {
      mNeedToAdjustWebTextView=true;
      if (nativeFocusCandidateIsPassword()) {
        mWebTextView.setInPassword(false);
      }
    }
  }
 else {
    canvas.scale(mActualScale,mActualScale);
  }
  mWebViewCore.drawContentPicture(canvas,color,(animateZoom || mPreviewZoomOnly),animateScroll);
  if (mNativeClass == 0)   return;
  int extras=DRAW_EXTRAS_NONE;
  if (mFindIsUp) {
    if (!animateScroll) {
      extras=DRAW_EXTRAS_FIND;
    }
  }
 else   if (mShiftIsPressed && !nativeFocusIsPlugin()) {
    if (!animateZoom && !mPreviewZoomOnly) {
      extras=DRAW_EXTRAS_SELECTION;
      nativeSetSelectionRegion(mTouchSelection || mExtendSelection);
      nativeSetSelectionPointer(!mTouchSelection,mInvActualScale,mSelectX,mSelectY - getTitleHeight(),mExtendSelection);
    }
  }
 else   if (drawCursorRing) {
    extras=DRAW_EXTRAS_CURSOR_RING;
  }
  drawExtras(canvas,extras);
  if (extras == DRAW_EXTRAS_CURSOR_RING) {
    if (mTouchMode == TOUCH_SHORTPRESS_START_MODE) {
      mTouchMode=TOUCH_SHORTPRESS_MODE;
      HitTestResult hitTest=getHitTestResult();
      if (hitTest == null || hitTest.mType == HitTestResult.UNKNOWN_TYPE) {
        mPrivateHandler.removeMessages(SWITCH_TO_LONGPRESS);
      }
    }
  }
  if (mFocusSizeChanged) {
    mFocusSizeChanged=false;
    if (!animateZoom && inEditingMode()) {
      didUpdateTextViewBounds(true);
    }
  }
}
