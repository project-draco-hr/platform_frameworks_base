{
  if (mDrawHistory) {
    canvas.scale(mZoomManager.mActualScale,mZoomManager.mActualScale);
    canvas.drawPicture(mHistoryPicture);
    return;
  }
  boolean animateZoom=mZoomManager.isZoomAnimating();
  boolean animateScroll=((!mScroller.isFinished() || mVelocityTracker != null) && (mTouchMode != TOUCH_DRAG_MODE || mHeldMotionless != MOTIONLESS_TRUE)) || mDeferTouchMode == TOUCH_DRAG_MODE;
  if (mTouchMode == TOUCH_DRAG_MODE) {
    if (mHeldMotionless == MOTIONLESS_PENDING) {
      mPrivateHandler.removeMessages(DRAG_HELD_MOTIONLESS);
      mPrivateHandler.removeMessages(AWAKEN_SCROLL_BARS);
      mHeldMotionless=MOTIONLESS_FALSE;
    }
    if (mHeldMotionless == MOTIONLESS_FALSE) {
      mPrivateHandler.sendMessageDelayed(mPrivateHandler.obtainMessage(DRAG_HELD_MOTIONLESS),MOTIONLESS_TIME);
      mHeldMotionless=MOTIONLESS_PENDING;
    }
  }
  if (animateZoom) {
    final float[] zoomValues=mZoomManager.animateZoom();
    final boolean isStillAnimating=mZoomManager.isZoomAnimating();
    if (isStillAnimating) {
      invalidate();
    }
 else {
      WebViewCore.resumeUpdatePicture(mWebViewCore);
      invalidate();
      if (mNeedToAdjustWebTextView) {
        mNeedToAdjustWebTextView=false;
        if (didUpdateTextViewBounds(false) && nativeFocusCandidateIsPassword()) {
          mWebTextView.setInPassword(true);
        }
      }
    }
    canvas.translate(zoomValues[0],zoomValues[1]);
    canvas.scale(zoomValues[2],zoomValues[2]);
    if (inEditingMode() && !mNeedToAdjustWebTextView && isStillAnimating) {
      mNeedToAdjustWebTextView=true;
      if (nativeFocusCandidateIsPassword()) {
        mWebTextView.setInPassword(false);
      }
    }
  }
 else {
    canvas.scale(mZoomManager.mActualScale,mZoomManager.mActualScale);
  }
  boolean UIAnimationsRunning=false;
  if (mNativeClass != 0 && nativeEvaluateLayersAnimations()) {
    UIAnimationsRunning=true;
    invalidate();
  }
  mWebViewCore.drawContentPicture(canvas,color,(animateZoom || mZoomManager.mPreviewZoomOnly || UIAnimationsRunning),animateScroll);
  if (mNativeClass == 0)   return;
  int extras=DRAW_EXTRAS_NONE;
  if (mFindIsUp) {
    if (!animateScroll) {
      extras=DRAW_EXTRAS_FIND;
    }
  }
 else   if (mShiftIsPressed && !nativePageShouldHandleShiftAndArrows()) {
    if (!animateZoom && !mZoomManager.mPreviewZoomOnly) {
      extras=DRAW_EXTRAS_SELECTION;
      nativeSetSelectionRegion(mTouchSelection || mExtendSelection);
      nativeSetSelectionPointer(!mTouchSelection,mZoomManager.mInvActualScale,mSelectX,mSelectY - getTitleHeight(),mExtendSelection);
    }
  }
 else   if (drawCursorRing) {
    extras=DRAW_EXTRAS_CURSOR_RING;
  }
  drawExtras(canvas,extras,UIAnimationsRunning);
  if (extras == DRAW_EXTRAS_CURSOR_RING) {
    if (mTouchMode == TOUCH_SHORTPRESS_START_MODE) {
      mTouchMode=TOUCH_SHORTPRESS_MODE;
      HitTestResult hitTest=getHitTestResult();
      if (hitTest == null || hitTest.mType == HitTestResult.UNKNOWN_TYPE) {
        mPrivateHandler.removeMessages(SWITCH_TO_LONGPRESS);
      }
    }
  }
  if (mFocusSizeChanged) {
    mFocusSizeChanged=false;
    if (!animateZoom && inEditingMode()) {
      didUpdateTextViewBounds(true);
    }
  }
}
