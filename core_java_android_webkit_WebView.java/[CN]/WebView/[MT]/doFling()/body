{
  if (mVelocityTracker == null) {
    return;
  }
  int maxX=computeMaxScrollX();
  int maxY=computeMaxScrollY();
  mVelocityTracker.computeCurrentVelocity(1000,mMaximumFling);
  int vx=(int)mVelocityTracker.getXVelocity();
  int vy=(int)mVelocityTracker.getYVelocity();
  if (mSnapScrollMode != SNAP_NONE) {
    if ((mSnapScrollMode & SNAP_X) == SNAP_X) {
      vy=0;
    }
 else {
      vx=0;
    }
  }
  if (true) {
    vx=vx * 3 / 4;
    vy=vy * 3 / 4;
  }
  if ((maxX == 0 && vy == 0) || (maxY == 0 && vx == 0)) {
    WebViewCore.resumePriority();
    WebViewCore.resumeUpdatePicture(mWebViewCore);
    if (mScroller.springback(mScrollX,mScrollY,0,computeMaxScrollX(),0,computeMaxScrollY())) {
      invalidate();
    }
    return;
  }
  float currentVelocity=mScroller.getCurrVelocity();
  if (mLastVelocity > 0 && currentVelocity > 0) {
    float deltaR=(float)(Math.abs(Math.atan2(mLastVelY,mLastVelX) - Math.atan2(vy,vx)));
    final float circle=(float)(Math.PI) * 2.0f;
    if (deltaR > circle * 0.9f || deltaR < circle * 0.1f) {
      vx+=currentVelocity * mLastVelX / mLastVelocity;
      vy+=currentVelocity * mLastVelY / mLastVelocity;
      if (DebugFlags.WEB_VIEW) {
        Log.v(LOGTAG,"doFling vx= " + vx + " vy="+ vy);
      }
    }
 else     if (DebugFlags.WEB_VIEW) {
      Log.v(LOGTAG,"doFling missed " + deltaR / circle);
    }
  }
 else   if (DebugFlags.WEB_VIEW) {
    Log.v(LOGTAG,"doFling start last=" + mLastVelocity + " current="+ currentVelocity+ " vx="+ vx+ " vy="+ vy+ " maxX="+ maxX+ " maxY="+ maxY+ " mScrollX="+ mScrollX+ " mScrollY="+ mScrollY);
  }
  mLastVelX=vx;
  mLastVelY=vy;
  mLastVelocity=(float)Math.hypot(vx,vy);
  mScroller.fling(mScrollX,mScrollY,-vx,-vy,0,maxX,0,maxY,maxX == 0 ? 0 : mOverflingDistance,mOverflingDistance);
  final int time=mScroller.getDuration();
  awakenScrollBars(time);
  invalidate();
}
