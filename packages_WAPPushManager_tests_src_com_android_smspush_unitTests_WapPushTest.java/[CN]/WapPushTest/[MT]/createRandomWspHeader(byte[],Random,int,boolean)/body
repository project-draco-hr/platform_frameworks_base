{
  boolean appIdAdded=false;
  Log.d(LOG_TAG,"headerStart = " + headerStart + ", appId = "+ mAppIdValue+ "("+ Integer.toHexString(mAppIdValue)+ ")");
  Log.d(LOG_TAG,"random arr length:" + arr.length);
  String typename[]=new String[]{"short int","long int","string","uint32"};
  while (!appIdAdded) {
    int type;
    int index=headerStart;
    int len=arr.length;
    int i;
    boolean addAppid=false;
    int tmpVal=0;
    int tmpVal2=0;
    while (true) {
      int add;
      type=rd.nextInt(3);
switch (type) {
case 0:
        if (index > 100 && !appIdAdded)         addAppid=true;
      add=1;
    break;
case 1:
  add=1 + rd.nextInt(29);
break;
default :
add=2 + rd.nextInt(10);
break;
}
if (index + add >= len) break;
switch (type) {
case 0:
if (!addAppid) {
do {
arr[index]=(byte)(0x80 | rd.nextInt(128));
}
 while (arr[index] == (byte)0xaf);
}
 else {
Log.d(LOG_TAG,"appId added.");
arr[index]=(byte)0xaf;
if (noAppId) arr[index]++;
}
break;
case 1:
arr[index]=(byte)(add - 1);
tmpVal2=0;
for (i=1; i < add; i++) {
tmpVal=rd.nextInt(255);
tmpVal2=(tmpVal2 << 8) | tmpVal;
arr[index + i]=(byte)tmpVal;
}
if (tmpVal2 == 0x2f) arr[index + 1]++;
break;
default :
for (i=0; i < add - 1; i++) {
tmpVal=rd.nextInt(127);
if (tmpVal < 32) tmpVal=(32 + tmpVal);
arr[index + i]=(byte)tmpVal;
}
arr[index + i]=(byte)0x0;
break;
}
if (LOCAL_LOGV) {
Log.d(LOG_TAG,"field name index:" + index);
Log.d(LOG_TAG,"type:" + typename[type] + ", add:"+ add);
if (type != 2) {
for (i=index; i < index + add; i++) {
System.out.print(Integer.toHexString(0xff & arr[i]));
System.out.print(' ');
}
}
 else {
System.out.print(Integer.toHexString(0xff & arr[index]));
System.out.print(' ');
String str=new String(arr,index + 1,add - 2);
for (i=0; i < str.length(); i++) {
System.out.print(str.charAt(i));
System.out.print(' ');
}
}
System.out.print('\n');
}
index+=add;
if (addAppid) {
type=1;
}
 else {
type=rd.nextInt(4);
}
switch (type) {
case 0:
add=1;
break;
case 1:
if (addAppid) {
int bit=1;
int topBit=0;
for (i=0; i < 31; i++) {
if ((mAppIdValue & bit) > 0) topBit=i;
bit=(bit << 1);
}
add=2 + topBit / 8;
}
 else {
add=1 + rd.nextInt(29);
}
break;
case 2:
add=2 + rd.nextInt(10);
break;
default :
add=6;
}
if (index + add >= len) break;
switch (type) {
case 0:
arr[index]=(byte)(0x80 | rd.nextInt(128));
break;
case 1:
if (addAppid) {
addAppid=false;
appIdAdded=true;
arr[index]=(byte)(add - 1);
tmpVal=mAppIdValue;
for (i=add; i > 1; i--) {
arr[index + i - 1]=(byte)(tmpVal & 0xff);
tmpVal=(tmpVal >> 8);
}
}
 else {
arr[index]=(byte)(add - 1);
for (i=1; i < add; i++) {
arr[index + i]=(byte)rd.nextInt(255);
}
}
break;
case 2:
for (i=0; i < add - 1; i++) {
tmpVal=rd.nextInt(127);
if (tmpVal < 32) tmpVal=(32 + tmpVal);
arr[index + i]=(byte)tmpVal;
}
arr[index + i]=(byte)0x0;
break;
default :
arr[index]=(byte)31;
tmpVal=rd.nextInt(0x0FFFFFFF);
add=1 + encodeUint32(tmpVal,null,index + 1);
encodeUint32(tmpVal,arr,index + 1);
break;
}
if (LOCAL_LOGV) {
Log.d(LOG_TAG,"field value index:" + index);
Log.d(LOG_TAG,"type:" + typename[type] + ", add:"+ add);
if (type != 2) {
for (i=index; i < index + add; i++) {
System.out.print(Integer.toHexString(0xff & arr[i]));
System.out.print(' ');
}
}
 else {
System.out.print(Integer.toHexString(0xff & arr[index]));
System.out.print(' ');
String str=new String(arr,index + 1,add - 2);
for (i=0; i < str.length(); i++) {
System.out.print(str.charAt(i));
System.out.print(' ');
}
}
System.out.print('\n');
}
index+=add;
}
if (noAppId) break;
}
Log.d(LOG_TAG,HexDump.dumpHexString(arr));
}
