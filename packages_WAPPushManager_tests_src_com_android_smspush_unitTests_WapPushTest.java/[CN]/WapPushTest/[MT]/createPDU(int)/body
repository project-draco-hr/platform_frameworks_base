{
  byte[] array=null;
switch (testNum) {
case 1:
    byte[] array1={(byte)0x00,(byte)0x06,(byte)0x00,(byte)0x03,(byte)0x02,(byte)((mContentTypeValue >> 8) & 0xff),(byte)(mContentTypeValue & 0xff),(byte)0xaf,(byte)0x02,(byte)((mAppIdValue >> 8) & 0xff),(byte)(mAppIdValue & 0xff)};
  array1[2]=(byte)(array1.length - 3);
mWspHeader=array1;
mWspHeaderStart=mGsmHeader.length + mUserDataHeader.length + 7;
mWspHeaderLen=array1.length;
break;
case 2:
byte[] array2={(byte)0x00};
mWspHeader=array2;
mWspHeaderStart=mGsmHeader.length + mUserDataHeader.length;
mWspHeaderLen=array2.length;
break;
case 3:
Random rd=new Random();
int arrSize=150 + rd.nextInt(100);
byte[] array3=new byte[arrSize];
int hdrEncodeLen;
array3[0]=(byte)0x0;
array3[1]=(byte)0x6;
hdrEncodeLen=encodeUint32(array3.length,null,2);
hdrEncodeLen=encodeUint32(array3.length - hdrEncodeLen - 2,array3,2);
array3[hdrEncodeLen + 2]=(byte)0x3;
array3[hdrEncodeLen + 3]=(byte)0x2;
array3[hdrEncodeLen + 4]=(byte)((mContentTypeValue >> 8) & 0xff);
array3[hdrEncodeLen + 5]=(byte)(mContentTypeValue & 0xff);
createRandomWspHeader(array3,rd,hdrEncodeLen + 6,false);
mWspHeaderStart=mGsmHeader.length + mUserDataHeader.length + hdrEncodeLen+ 6;
mWspHeaderLen=array3.length;
Log.d(LOG_TAG,"mContentTypeValue = " + mContentTypeValue + "("+ Integer.toHexString(mContentTypeValue)+ ")");
mWspHeader=array3;
break;
case 4:
rd=new Random();
arrSize=150 + rd.nextInt(100);
array3=new byte[arrSize];
array3[0]=(byte)0x0;
array3[1]=(byte)0x6;
hdrEncodeLen=encodeUint32(array3.length,null,2);
hdrEncodeLen=encodeUint32(array3.length - hdrEncodeLen - 2,array3,2);
array3[hdrEncodeLen + 2]=(byte)0x3;
array3[hdrEncodeLen + 3]=(byte)0x2;
array3[hdrEncodeLen + 4]=(byte)((mContentTypeValue >> 8) & 0xff);
array3[hdrEncodeLen + 5]=(byte)(mContentTypeValue & 0xff);
createRandomWspHeader(array3,rd,hdrEncodeLen + 6,true);
mWspHeaderStart=mGsmHeader.length + mUserDataHeader.length + hdrEncodeLen+ 6;
mWspHeaderLen=array3.length;
Log.d(LOG_TAG,"mContentTypeValue = " + mContentTypeValue + "("+ Integer.toHexString(mContentTypeValue)+ ")");
mWspHeader=array3;
break;
case 5:
rd=new Random();
arrSize=150 + rd.nextInt(100);
array3=new byte[arrSize];
array3[0]=(byte)0x0;
array3[1]=(byte)0x6;
hdrEncodeLen=encodeUint32(array3.length,null,2);
hdrEncodeLen=encodeUint32(array3.length - hdrEncodeLen - 2,array3,2);
array3[hdrEncodeLen + 2]=(byte)0x3;
array3[hdrEncodeLen + 3]=(byte)0x2;
array3[hdrEncodeLen + 4]=(byte)((mContentTypeValue >> 8) & 0xff);
array3[hdrEncodeLen + 5]=(byte)(mContentTypeValue & 0xff);
createRandomWspHeaderStrAppId(array3,rd,hdrEncodeLen + 6,true);
mWspHeaderStart=mGsmHeader.length + mUserDataHeader.length + hdrEncodeLen+ 6;
mWspHeaderLen=array3.length;
Log.d(LOG_TAG,"mContentTypeValue = " + mContentTypeValue + "("+ Integer.toHexString(mContentTypeValue)+ ")");
mWspHeader=array3;
break;
case 6:
rd=new Random();
arrSize=150 + rd.nextInt(100);
array3=new byte[arrSize];
array3[0]=(byte)0x0;
array3[1]=(byte)0x6;
hdrEncodeLen=encodeUint32(array3.length,null,2);
hdrEncodeLen=encodeUint32(array3.length - hdrEncodeLen - 2,array3,2);
array3[hdrEncodeLen + 2]=(byte)0x3;
array3[hdrEncodeLen + 3]=(byte)0x2;
array3[hdrEncodeLen + 4]=(byte)((mContentTypeValue >> 8) & 0xff);
array3[hdrEncodeLen + 5]=(byte)(mContentTypeValue & 0xff);
createRandomWspHeaderStrAppId(array3,rd,hdrEncodeLen + 6,false);
mWspHeaderStart=mGsmHeader.length + mUserDataHeader.length + hdrEncodeLen+ 6;
mWspHeaderLen=array3.length;
Log.d(LOG_TAG,"mContentTypeValue = " + mContentTypeValue + "("+ Integer.toHexString(mContentTypeValue)+ ")");
mWspHeader=array3;
break;
case 7:
rd=new Random();
arrSize=150 + rd.nextInt(100);
array3=new byte[arrSize];
array3[0]=(byte)0x0;
array3[1]=(byte)0x6;
hdrEncodeLen=encodeUint32(array3.length,null,2);
hdrEncodeLen=encodeUint32(array3.length - hdrEncodeLen - 2,array3,2);
int contentLen=mContentTypeName.length();
int next=2 + hdrEncodeLen;
mWspContentTypeStart=mGsmHeader.length + mUserDataHeader.length + next;
int i;
Log.d(LOG_TAG,"mContentTypeName = " + mContentTypeName + ", contentLen = "+ contentLen);
for (i=0; i < contentLen; i++) {
array3[next + i]=(byte)mContentTypeName.charAt(i);
}
array3[next + i]=(byte)0x0;
createRandomWspHeader(array3,rd,next + contentLen + 1,false);
mWspHeaderStart=mGsmHeader.length + mUserDataHeader.length + next+ contentLen+ 1;
mWspHeaderLen=array3.length;
mWspHeader=array3;
break;
case 8:
rd=new Random();
arrSize=150 + rd.nextInt(100);
array3=new byte[arrSize];
array3[0]=(byte)0x0;
array3[1]=(byte)0x6;
hdrEncodeLen=encodeUint32(array3.length,null,2);
hdrEncodeLen=encodeUint32(array3.length - hdrEncodeLen - 2,array3,2);
contentLen=mContentTypeName.length();
next=2 + hdrEncodeLen;
mWspContentTypeStart=mGsmHeader.length + mUserDataHeader.length + next;
Log.d(LOG_TAG,"mContentTypeName = " + mContentTypeName + ", contentLen = "+ contentLen);
for (i=0; i < contentLen; i++) {
array3[next + i]=(byte)mContentTypeName.charAt(i);
}
array3[next + i]=(byte)0x0;
createRandomWspHeaderStrAppId(array3,rd,next + contentLen + 1,false);
mWspHeaderStart=mGsmHeader.length + mUserDataHeader.length + next+ contentLen+ 1;
mWspHeaderLen=array3.length;
mWspHeader=array3;
break;
default :
return null;
}
array=new byte[mGsmHeader.length + mUserDataHeader.length + mWspHeader.length+ mMessageBody.length];
System.arraycopy(mGsmHeader,0,array,0,mGsmHeader.length);
System.arraycopy(mUserDataHeader,0,array,mGsmHeader.length,mUserDataHeader.length);
System.arraycopy(mWspHeader,0,array,mGsmHeader.length + mUserDataHeader.length,mWspHeader.length);
System.arraycopy(mMessageBody,0,array,mGsmHeader.length + mUserDataHeader.length + mWspHeader.length,mMessageBody.length);
return array;
}
