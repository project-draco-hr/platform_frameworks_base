{
  SampleModel sm=src.getSampleModel();
  int numBands=src.getNumBands();
  int srcHeight=src.getHeight();
  int srcWidth=src.getWidth();
  int srcMinX=src.getMinX();
  int srcMinY=src.getMinY();
  int dstMinX=dst.getMinX();
  int dstMinY=dst.getMinY();
  int[] maxValues=new int[numBands];
  int[] masks=new int[numBands];
  int[] sampleSizes=sm.getSampleSize();
  for (int i=0; i < numBands; i++) {
    maxValues[i]=(1 << sampleSizes[i]) - 1;
    masks[i]=~(maxValues[i]);
  }
  float[] pixels=null;
  pixels=src.getPixels(srcMinX,srcMinY,srcWidth,srcHeight,pixels);
  if (skipAlpha) {
    if (scaleFactors.length > 1) {
      for (int i=0; i < pixels.length; ) {
        for (int bandIdx=0; bandIdx < numBands - 1; bandIdx++, i++) {
          pixels[i]=pixels[i] * scaleFactors[bandIdx] + offsets[bandIdx];
          if (((int)pixels[i] & masks[bandIdx]) != 0) {
            if (pixels[i] < 0) {
              pixels[i]=0;
            }
 else {
              pixels[i]=maxValues[bandIdx];
            }
          }
        }
        i++;
      }
    }
 else {
      for (int i=0; i < pixels.length; ) {
        for (int bandIdx=0; bandIdx < numBands - 1; bandIdx++, i++) {
          pixels[i]=pixels[i] * scaleFactors[0] + offsets[0];
          if (((int)pixels[i] & masks[bandIdx]) != 0) {
            if (pixels[i] < 0) {
              pixels[i]=0;
            }
 else {
              pixels[i]=maxValues[bandIdx];
            }
          }
        }
        i++;
      }
    }
  }
 else {
    if (scaleFactors.length > 1) {
      for (int i=0; i < pixels.length; ) {
        for (int bandIdx=0; bandIdx < numBands; bandIdx++, i++) {
          pixels[i]=pixels[i] * scaleFactors[bandIdx] + offsets[bandIdx];
          if (((int)pixels[i] & masks[bandIdx]) != 0) {
            if (pixels[i] < 0) {
              pixels[i]=0;
            }
 else {
              pixels[i]=maxValues[bandIdx];
            }
          }
        }
      }
    }
 else {
      for (int i=0; i < pixels.length; ) {
        for (int bandIdx=0; bandIdx < numBands; bandIdx++, i++) {
          pixels[i]=pixels[i] * scaleFactors[0] + offsets[0];
          if (((int)pixels[i] & masks[bandIdx]) != 0) {
            if (pixels[i] < 0) {
              pixels[i]=0;
            }
 else {
              pixels[i]=maxValues[bandIdx];
            }
          }
        }
      }
    }
  }
  dst.setPixels(dstMinX,dstMinY,srcWidth,srcHeight,pixels);
  return 0;
}
