{
  int maxValue=(1 << sm.getSampleSize(0)) - 1;
  float extScaleFactors[]=new float[numBands];
  float extOffsets[]=new float[numBands];
  if (scaleFactors.length != 1) {
    System.arraycopy(scaleFactors,0,extScaleFactors,0,scaleFactors.length);
    System.arraycopy(offsets,0,extOffsets,0,scaleFactors.length);
  }
 else {
    for (int i=0; i < numBands; i++) {
      extScaleFactors[i]=scaleFactors[0];
      extOffsets[i]=offsets[0];
    }
  }
  if (skipAlpha) {
    extScaleFactors[numBands - 1]=1;
    extOffsets[numBands - 1]=0;
  }
  for (int i=0; i < numBands; i++) {
    if (extScaleFactors[i] == 0) {
      levels[i * 4]=0;
      levels[i * 4 + 1]=0;
      levels[i * 4 + 2]=maxValue + 1;
      levels[i * 4 + 3]=maxValue + 1;
    }
    float minLevel=-extOffsets[i] / extScaleFactors[i];
    float maxLevel=(maxValue - extOffsets[i]) / extScaleFactors[i];
    if (minLevel < 0) {
      minLevel=0;
    }
 else     if (minLevel > maxValue) {
      minLevel=maxValue;
    }
    if (maxLevel < 0) {
      maxLevel=0;
    }
 else     if (maxLevel > maxValue) {
      maxLevel=maxValue;
    }
    levels[i * 4]=0;
    if (minLevel > maxLevel) {
      levels[i * 4 + 1]=(int)maxLevel;
      levels[i * 4 + 2]=(int)minLevel;
    }
 else {
      levels[i * 4 + 1]=(int)minLevel;
      levels[i * 4 + 2]=(int)maxLevel;
    }
    levels[i * 4 + 3]=maxValue + 1;
    for (int k=0; k < 4; k++) {
      int idx=i * 4 + k;
      values[idx]=(int)(extScaleFactors[i] * levels[idx] + extOffsets[i]);
      if (values[idx] < 0) {
        values[idx]=0;
      }
 else       if (values[idx] > maxValue) {
        values[idx]=maxValue;
      }
    }
  }
  if (channelsOrder != null) {
    int len=numBands * 4;
    int savedLevels[]=new int[len];
    int savedValues[]=new int[len];
    System.arraycopy(levels,0,savedLevels,0,len);
    System.arraycopy(values,0,savedValues,0,len);
    for (int i=0; i < channelsOrder.length; i++) {
      System.arraycopy(savedLevels,i * 4,levels,channelsOrder[i] * 4,4);
      System.arraycopy(savedValues,i * 4,values,channelsOrder[i] * 4,4);
    }
  }
}
