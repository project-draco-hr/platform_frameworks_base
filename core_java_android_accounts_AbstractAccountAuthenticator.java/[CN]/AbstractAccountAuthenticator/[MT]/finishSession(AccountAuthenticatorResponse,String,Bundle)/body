{
  if (TextUtils.isEmpty(accountType)) {
    Log.e(TAG,"Account type cannot be empty.");
    Bundle result=new Bundle();
    result.putInt(AccountManager.KEY_ERROR_CODE,AccountManager.ERROR_CODE_BAD_ARGUMENTS);
    result.putString(AccountManager.KEY_ERROR_MESSAGE,"accountType cannot be empty.");
    return result;
  }
  if (sessionBundle == null) {
    Log.e(TAG,"Session bundle cannot be null.");
    Bundle result=new Bundle();
    result.putInt(AccountManager.KEY_ERROR_CODE,AccountManager.ERROR_CODE_BAD_ARGUMENTS);
    result.putString(AccountManager.KEY_ERROR_MESSAGE,"sessionBundle cannot be null.");
    return result;
  }
  if (!sessionBundle.containsKey(KEY_AUTH_TOKEN_TYPE)) {
    Bundle result=new Bundle();
    result.putInt(AccountManager.KEY_ERROR_CODE,AccountManager.ERROR_CODE_UNSUPPORTED_OPERATION);
    result.putString(AccountManager.KEY_ERROR_MESSAGE,"Authenticator must override finishSession if startAddAccountSession" + " or startUpdateCredentialsSession is overridden.");
    response.onResult(result);
    return result;
  }
  String authTokenType=sessionBundle.getString(KEY_AUTH_TOKEN_TYPE);
  Bundle options=sessionBundle.getBundle(KEY_OPTIONS);
  String[] requiredFeatures=sessionBundle.getStringArray(KEY_REQUIRED_FEATURES);
  Account account=sessionBundle.getParcelable(KEY_ACCOUNT);
  boolean containsKeyAccount=sessionBundle.containsKey(KEY_ACCOUNT);
  Bundle sessionOptions=new Bundle(sessionBundle);
  sessionOptions.remove(KEY_AUTH_TOKEN_TYPE);
  sessionOptions.remove(KEY_REQUIRED_FEATURES);
  sessionOptions.remove(KEY_OPTIONS);
  sessionOptions.remove(KEY_ACCOUNT);
  if (options != null) {
    options.putAll(sessionOptions);
    sessionOptions=options;
  }
  if (containsKeyAccount) {
    return updateCredentials(response,account,authTokenType,options);
  }
  return addAccount(response,accountType,authTokenType,requiredFeatures,sessionOptions);
}
