{
  int numChildren=mHostView.getChildCount();
  float previousNotificationEnd=0;
  float previousNotificationStart=0;
  boolean previousNotificationIsSwiped=false;
  for (int i=0; i < numChildren; i++) {
    ExpandableView child=(ExpandableView)mHostView.getChildAt(i);
    ViewState state=mStateMap.get(child);
    if (state == null) {
      Log.wtf(CHILD_NOT_FOUND_TAG,"No child state was found when applying this state " + "to the hostView");
      continue;
    }
    if (!state.gone) {
      float alpha=child.getAlpha();
      float yTranslation=child.getTranslationY();
      float zTranslation=child.getTranslationZ();
      float scale=child.getScaleX();
      int height=child.getActualHeight();
      float newAlpha=state.alpha;
      float newYTranslation=state.yTranslation;
      float newZTranslation=state.zTranslation;
      float newScale=state.scale;
      int newHeight=state.height;
      boolean becomesInvisible=newAlpha == 0.0f;
      if (alpha != newAlpha) {
        boolean becomesFullyVisible=newAlpha == 1.0f;
        boolean newLayerTypeIsHardware=!becomesInvisible && !becomesFullyVisible;
        int layerType=child.getLayerType();
        int newLayerType=newLayerTypeIsHardware ? View.LAYER_TYPE_HARDWARE : View.LAYER_TYPE_NONE;
        if (layerType != newLayerType) {
          child.setLayerType(newLayerType,null);
        }
        if (!becomesInvisible) {
          child.setAlpha(newAlpha);
        }
      }
      int oldVisibility=child.getVisibility();
      int newVisibility=becomesInvisible ? View.INVISIBLE : View.VISIBLE;
      if (newVisibility != oldVisibility) {
        child.setVisibility(newVisibility);
      }
      if (yTranslation != newYTranslation) {
        child.setTranslationY(newYTranslation);
      }
      if (zTranslation != newZTranslation) {
        child.setTranslationZ(newZTranslation);
      }
      if (scale != newScale) {
        child.setScaleX(newScale);
        child.setScaleY(newScale);
      }
      if (height != newHeight) {
        child.setActualHeight(newHeight,false);
      }
      child.setDimmed(state.dimmed,false);
      float newNotificationEnd=newYTranslation + newHeight;
      float clippingCorrection=state.dimmed ? 0 : mRoundedRectCornerRadius;
      float clipHeight=previousNotificationIsSwiped ? newHeight : newNotificationEnd - (previousNotificationEnd - clippingCorrection);
      updateChildClippingAndBackground(child,newHeight,clipHeight,(int)(newHeight - (previousNotificationStart - newYTranslation)));
      if (!child.isTransparent()) {
        previousNotificationStart=newYTranslation + child.getClipTopAmount();
        previousNotificationEnd=newNotificationEnd;
        previousNotificationIsSwiped=child.getTranslationX() != 0;
      }
      if (child instanceof SpeedBumpView) {
        performSpeedBumpAnimation(i,(SpeedBumpView)child,newNotificationEnd,newYTranslation);
      }
    }
  }
}
