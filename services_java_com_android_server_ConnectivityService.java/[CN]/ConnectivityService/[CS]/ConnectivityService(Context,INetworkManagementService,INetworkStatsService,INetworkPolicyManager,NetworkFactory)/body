{
  if (DBG)   log("ConnectivityService starting up");
  HandlerThread handlerThread=new HandlerThread("ConnectivityServiceThread");
  handlerThread.start();
  mHandler=new InternalHandler(handlerThread.getLooper());
  mTrackerHandler=new NetworkStateTrackerHandler(handlerThread.getLooper());
  if (netFactory == null) {
    netFactory=new DefaultNetworkFactory(context,mTrackerHandler);
  }
  if (TextUtils.isEmpty(SystemProperties.get("net.hostname"))) {
    String id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID);
    if (id != null && id.length() > 0) {
      String name=new String("android-").concat(id);
      SystemProperties.set("net.hostname",name);
    }
  }
  String dns=Settings.Global.getString(context.getContentResolver(),Settings.Global.DEFAULT_DNS_SERVER);
  if (dns == null || dns.length() == 0) {
    dns=context.getResources().getString(com.android.internal.R.string.config_default_dns_server);
  }
  try {
    mDefaultDns=NetworkUtils.numericToInetAddress(dns);
  }
 catch (  IllegalArgumentException e) {
    loge("Error setting defaultDns using " + dns);
  }
  mContext=checkNotNull(context,"missing Context");
  mNetd=checkNotNull(netManager,"missing INetworkManagementService");
  mPolicyManager=checkNotNull(policyManager,"missing INetworkPolicyManager");
  mKeyStore=KeyStore.getInstance();
  mTelephonyManager=(TelephonyManager)mContext.getSystemService(Context.TELEPHONY_SERVICE);
  try {
    mPolicyManager.registerListener(mPolicyListener);
  }
 catch (  RemoteException e) {
    loge("unable to register INetworkPolicyListener" + e.toString());
  }
  final PowerManager powerManager=(PowerManager)context.getSystemService(Context.POWER_SERVICE);
  mNetTransitionWakeLock=powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG);
  mNetTransitionWakeLockTimeout=mContext.getResources().getInteger(com.android.internal.R.integer.config_networkTransitionTimeout);
  mNetTrackers=new NetworkStateTracker[ConnectivityManager.MAX_NETWORK_TYPE + 1];
  mCurrentLinkProperties=new LinkProperties[ConnectivityManager.MAX_NETWORK_TYPE + 1];
  mRadioAttributes=new RadioAttributes[ConnectivityManager.MAX_RADIO_TYPE + 1];
  mNetConfigs=new NetworkConfig[ConnectivityManager.MAX_NETWORK_TYPE + 1];
  String[] raStrings=context.getResources().getStringArray(com.android.internal.R.array.radioAttributes);
  for (  String raString : raStrings) {
    RadioAttributes r=new RadioAttributes(raString);
    if (r.mType > ConnectivityManager.MAX_RADIO_TYPE) {
      loge("Error in radioAttributes - ignoring attempt to define type " + r.mType);
      continue;
    }
    if (mRadioAttributes[r.mType] != null) {
      loge("Error in radioAttributes - ignoring attempt to redefine type " + r.mType);
      continue;
    }
    mRadioAttributes[r.mType]=r;
  }
  boolean wifiOnly=SystemProperties.getBoolean("ro.radio.noril",false);
  log("wifiOnly=" + wifiOnly);
  String[] naStrings=context.getResources().getStringArray(com.android.internal.R.array.networkAttributes);
  for (  String naString : naStrings) {
    try {
      NetworkConfig n=new NetworkConfig(naString);
      if (n.type > ConnectivityManager.MAX_NETWORK_TYPE) {
        loge("Error in networkAttributes - ignoring attempt to define type " + n.type);
        continue;
      }
      if (wifiOnly && ConnectivityManager.isNetworkTypeMobile(n.type)) {
        log("networkAttributes - ignoring mobile as this dev is wifiOnly " + n.type);
        continue;
      }
      if (mNetConfigs[n.type] != null) {
        loge("Error in networkAttributes - ignoring attempt to redefine type " + n.type);
        continue;
      }
      if (mRadioAttributes[n.radio] == null) {
        loge("Error in networkAttributes - ignoring attempt to use undefined " + "radio " + n.radio + " in network type "+ n.type);
        continue;
      }
      mNetConfigs[n.type]=n;
      mNetworksDefined++;
    }
 catch (    Exception e) {
    }
  }
  mProtectedNetworks=new ArrayList<Integer>();
  int[] protectedNetworks=context.getResources().getIntArray(com.android.internal.R.array.config_protectedNetworks);
  for (  int p : protectedNetworks) {
    if ((mNetConfigs[p] != null) && (mProtectedNetworks.contains(p) == false)) {
      mProtectedNetworks.add(p);
    }
 else {
      if (DBG)       loge("Ignoring protectedNetwork " + p);
    }
  }
  mPriorityList=new int[mNetworksDefined];
{
    int insertionPoint=mNetworksDefined - 1;
    int currentLowest=0;
    int nextLowest=0;
    while (insertionPoint > -1) {
      for (      NetworkConfig na : mNetConfigs) {
        if (na == null)         continue;
        if (na.priority < currentLowest)         continue;
        if (na.priority > currentLowest) {
          if (na.priority < nextLowest || nextLowest == 0) {
            nextLowest=na.priority;
          }
          continue;
        }
        mPriorityList[insertionPoint--]=na.type;
      }
      currentLowest=nextLowest;
      nextLowest=0;
    }
  }
  mNetworkPreference=getPersistedNetworkPreference();
  if (mNetworkPreference == -1) {
    for (    int n : mPriorityList) {
      if (mNetConfigs[n].isDefault() && ConnectivityManager.isNetworkTypeValid(n)) {
        mNetworkPreference=n;
        break;
      }
    }
    if (mNetworkPreference == -1) {
      throw new IllegalStateException("You should set at least one default Network in config.xml!");
    }
  }
  mNetRequestersPids=(List<Integer>[])new ArrayList[ConnectivityManager.MAX_NETWORK_TYPE + 1];
  for (  int i : mPriorityList) {
    mNetRequestersPids[i]=new ArrayList<Integer>();
  }
  mFeatureUsers=new ArrayList<FeatureUser>();
  mTestMode=SystemProperties.get("cm.test.mode").equals("true") && SystemProperties.get("ro.build.type").equals("eng");
  for (  int targetNetworkType : mPriorityList) {
    final NetworkConfig config=mNetConfigs[targetNetworkType];
    final NetworkStateTracker tracker;
    try {
      tracker=netFactory.createTracker(targetNetworkType,config);
      mNetTrackers[targetNetworkType]=tracker;
    }
 catch (    IllegalArgumentException e) {
      Slog.e(TAG,"Problem creating " + getNetworkTypeName(targetNetworkType) + " tracker: "+ e);
      continue;
    }
    tracker.startMonitoring(context,mTrackerHandler);
    if (config.isDefault()) {
      tracker.reconnect();
    }
  }
  mTethering=new Tethering(mContext,mNetd,statsService,this,mHandler.getLooper());
  mTetheringConfigValid=((mTethering.getTetherableUsbRegexs().length != 0 || mTethering.getTetherableWifiRegexs().length != 0 || mTethering.getTetherableBluetoothRegexs().length != 0) && mTethering.getUpstreamIfaceTypes().length != 0);
  mVpn=new Vpn(mContext,mVpnCallback,mNetd,this);
  mVpn.startMonitoring(mContext,mTrackerHandler);
  mClat=new Nat464Xlat(mContext,mNetd,this,mTrackerHandler);
  try {
    mNetd.registerObserver(mTethering);
    mNetd.registerObserver(mDataActivityObserver);
    mNetd.registerObserver(mClat);
  }
 catch (  RemoteException e) {
    loge("Error registering observer :" + e);
  }
  if (DBG) {
    mInetLog=new ArrayList();
  }
  mSettingsObserver=new SettingsObserver(mHandler,EVENT_APPLY_GLOBAL_HTTP_PROXY);
  mSettingsObserver.observe(mContext);
  mCaptivePortalTracker=CaptivePortalTracker.makeCaptivePortalTracker(mContext,this);
  loadGlobalProxy();
  mDataConnectionStats=new DataConnectionStats(mContext);
  mDataConnectionStats.startMonitoring();
}
