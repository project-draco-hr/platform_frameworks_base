{
  if (DBG)   Log.v(TAG,"ConnectivityService starting up");
  String id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID);
  if (id != null && id.length() > 0) {
    String name=new String("android_").concat(id);
    SystemProperties.set("net.hostname",name);
  }
  mContext=context;
  mNetTrackers=new NetworkStateTracker[ConnectivityManager.MAX_NETWORK_TYPE + 1];
  mHandler=new MyHandler();
  mNetworkPreference=getPersistedNetworkPreference();
  mRadioAttributes=new RadioAttributes[ConnectivityManager.MAX_RADIO_TYPE + 1];
  mNetAttributes=new NetworkAttributes[ConnectivityManager.MAX_NETWORK_TYPE + 1];
  String[] raStrings=context.getResources().getStringArray(com.android.internal.R.array.radioAttributes);
  for (  String raString : raStrings) {
    RadioAttributes r=new RadioAttributes(raString);
    if (r.mType > ConnectivityManager.MAX_RADIO_TYPE) {
      Log.e(TAG,"Error in radioAttributes - ignoring attempt to define type " + r.mType);
      continue;
    }
    if (mRadioAttributes[r.mType] != null) {
      Log.e(TAG,"Error in radioAttributes - ignoring attempt to redefine type " + r.mType);
      continue;
    }
    mRadioAttributes[r.mType]=r;
  }
  String[] naStrings=context.getResources().getStringArray(com.android.internal.R.array.networkAttributes);
  for (  String naString : naStrings) {
    try {
      NetworkAttributes n=new NetworkAttributes(naString);
      if (n.mType > ConnectivityManager.MAX_NETWORK_TYPE) {
        Log.e(TAG,"Error in networkAttributes - ignoring attempt to define type " + n.mType);
        continue;
      }
      if (mNetAttributes[n.mType] != null) {
        Log.e(TAG,"Error in networkAttributes - ignoring attempt to redefine type " + n.mType);
        continue;
      }
      if (mRadioAttributes[n.mRadio] == null) {
        Log.e(TAG,"Error in networkAttributes - ignoring attempt to use undefined " + "radio " + n.mRadio + " in network type "+ n.mType);
        continue;
      }
      mNetAttributes[n.mType]=n;
      mNetworksDefined++;
    }
 catch (    Exception e) {
    }
  }
  mPriorityList=new int[mNetworksDefined];
{
    int insertionPoint=mNetworksDefined - 1;
    int currentLowest=0;
    int nextLowest=0;
    while (insertionPoint > -1) {
      for (      NetworkAttributes na : mNetAttributes) {
        if (na == null)         continue;
        if (na.mPriority < currentLowest)         continue;
        if (na.mPriority > currentLowest) {
          if (na.mPriority < nextLowest || nextLowest == 0) {
            nextLowest=na.mPriority;
          }
          continue;
        }
        mPriorityList[insertionPoint--]=na.mType;
      }
      currentLowest=nextLowest;
      nextLowest=0;
    }
  }
  mNetRequestersPids=new ArrayList[ConnectivityManager.MAX_NETWORK_TYPE + 1];
  for (  int i : mPriorityList) {
    mNetRequestersPids[i]=new ArrayList();
  }
  mFeatureUsers=new ArrayList();
  mNumDnsEntries=0;
  mTestMode=SystemProperties.get("cm.test.mode").equals("true") && SystemProperties.get("ro.build.type").equals("eng");
  boolean noMobileData=!getMobileDataEnabled();
  for (  int netType : mPriorityList) {
switch (mNetAttributes[netType].mRadio) {
case ConnectivityManager.TYPE_WIFI:
      if (DBG)       Log.v(TAG,"Starting Wifi Service.");
    WifiStateTracker wst=new WifiStateTracker(context,mHandler);
  WifiService wifiService=new WifiService(context,wst);
ServiceManager.addService(Context.WIFI_SERVICE,wifiService);
mNetTrackers[ConnectivityManager.TYPE_WIFI]=wst;
wst.startMonitoring();
mWifiWatchdogService=new WifiWatchdogService(context,wst);
break;
case ConnectivityManager.TYPE_MOBILE:
mNetTrackers[netType]=new MobileDataStateTracker(context,mHandler,netType,mNetAttributes[netType].mName);
mNetTrackers[netType].startMonitoring();
if (noMobileData) {
if (DBG) Log.d(TAG,"tearing down Mobile networks due to setting");
mNetTrackers[netType].teardown();
}
break;
default :
Log.e(TAG,"Trying to create a DataStateTracker for an unknown radio type " + mNetAttributes[netType].mRadio);
continue;
}
}
mTethering=new Tethering(mContext);
mTetheringConfigValid=(((mNetTrackers[ConnectivityManager.TYPE_MOBILE_DUN] != null) || !mTethering.isDunRequired()) && (mTethering.getTetherableUsbRegexs().length != 0 || mTethering.getTetherableWifiRegexs().length != 0) && mTethering.getUpstreamIfaceRegexs().length != 0);
}
