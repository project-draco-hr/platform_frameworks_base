{
  if (DBG)   log("ConnectivityService starting up");
  HandlerThread handlerThread=new HandlerThread("ConnectivityServiceThread");
  handlerThread.start();
  mHandler=new MyHandler(handlerThread.getLooper());
  mBackgroundDataEnabled.set(Settings.Secure.getInt(context.getContentResolver(),Settings.Secure.BACKGROUND_DATA,1) == 1);
  if (TextUtils.isEmpty(SystemProperties.get("net.hostname"))) {
    String id=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID);
    if (id != null && id.length() > 0) {
      String name=new String("android_").concat(id);
      SystemProperties.set("net.hostname",name);
    }
  }
  String dns=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.DEFAULT_DNS_SERVER);
  if (dns == null || dns.length() == 0) {
    dns=context.getResources().getString(com.android.internal.R.string.config_default_dns_server);
  }
  try {
    mDefaultDns=InetAddress.getByName(dns);
  }
 catch (  UnknownHostException e) {
    loge("Error setting defaultDns using " + dns);
  }
  mContext=context;
  PowerManager powerManager=(PowerManager)mContext.getSystemService(Context.POWER_SERVICE);
  mNetTransitionWakeLock=powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG);
  mNetTransitionWakeLockTimeout=mContext.getResources().getInteger(com.android.internal.R.integer.config_networkTransitionTimeout);
  mNetTrackers=new NetworkStateTracker[ConnectivityManager.MAX_NETWORK_TYPE + 1];
  mNetworkPreference=getPersistedNetworkPreference();
  mRadioAttributes=new RadioAttributes[ConnectivityManager.MAX_RADIO_TYPE + 1];
  mNetAttributes=new NetworkAttributes[ConnectivityManager.MAX_NETWORK_TYPE + 1];
  String[] raStrings=context.getResources().getStringArray(com.android.internal.R.array.radioAttributes);
  for (  String raString : raStrings) {
    RadioAttributes r=new RadioAttributes(raString);
    if (r.mType > ConnectivityManager.MAX_RADIO_TYPE) {
      loge("Error in radioAttributes - ignoring attempt to define type " + r.mType);
      continue;
    }
    if (mRadioAttributes[r.mType] != null) {
      loge("Error in radioAttributes - ignoring attempt to redefine type " + r.mType);
      continue;
    }
    mRadioAttributes[r.mType]=r;
  }
  String[] naStrings=context.getResources().getStringArray(com.android.internal.R.array.networkAttributes);
  for (  String naString : naStrings) {
    try {
      NetworkAttributes n=new NetworkAttributes(naString);
      if (n.mType > ConnectivityManager.MAX_NETWORK_TYPE) {
        loge("Error in networkAttributes - ignoring attempt to define type " + n.mType);
        continue;
      }
      if (mNetAttributes[n.mType] != null) {
        loge("Error in networkAttributes - ignoring attempt to redefine type " + n.mType);
        continue;
      }
      if (mRadioAttributes[n.mRadio] == null) {
        loge("Error in networkAttributes - ignoring attempt to use undefined " + "radio " + n.mRadio + " in network type "+ n.mType);
        continue;
      }
      mNetAttributes[n.mType]=n;
      mNetworksDefined++;
    }
 catch (    Exception e) {
    }
  }
  mPriorityList=new int[mNetworksDefined];
{
    int insertionPoint=mNetworksDefined - 1;
    int currentLowest=0;
    int nextLowest=0;
    while (insertionPoint > -1) {
      for (      NetworkAttributes na : mNetAttributes) {
        if (na == null)         continue;
        if (na.mPriority < currentLowest)         continue;
        if (na.mPriority > currentLowest) {
          if (na.mPriority < nextLowest || nextLowest == 0) {
            nextLowest=na.mPriority;
          }
          continue;
        }
        mPriorityList[insertionPoint--]=na.mType;
      }
      currentLowest=nextLowest;
      nextLowest=0;
    }
  }
  mNetRequestersPids=new ArrayList[ConnectivityManager.MAX_NETWORK_TYPE + 1];
  for (  int i : mPriorityList) {
    mNetRequestersPids[i]=new ArrayList();
  }
  mFeatureUsers=new ArrayList();
  mNumDnsEntries=0;
  mTestMode=SystemProperties.get("cm.test.mode").equals("true") && SystemProperties.get("ro.build.type").equals("eng");
  for (  int netType : mPriorityList) {
switch (mNetAttributes[netType].mRadio) {
case ConnectivityManager.TYPE_WIFI:
      if (DBG)       log("Starting Wifi Service.");
    WifiStateTracker wst=new WifiStateTracker();
  WifiService wifiService=new WifiService(context);
ServiceManager.addService(Context.WIFI_SERVICE,wifiService);
wifiService.checkAndStartWifi();
mNetTrackers[ConnectivityManager.TYPE_WIFI]=wst;
wst.startMonitoring(context,mHandler);
mWifiWatchdogService=new WifiWatchdogService(context);
break;
case ConnectivityManager.TYPE_MOBILE:
mNetTrackers[netType]=new MobileDataStateTracker(netType,mNetAttributes[netType].mName);
mNetTrackers[netType].startMonitoring(context,mHandler);
break;
case ConnectivityManager.TYPE_DUMMY:
mNetTrackers[netType]=new DummyDataStateTracker(netType,mNetAttributes[netType].mName);
mNetTrackers[netType].startMonitoring(context,mHandler);
break;
case ConnectivityManager.TYPE_BLUETOOTH:
mNetTrackers[netType]=BluetoothTetheringDataTracker.getInstance();
mNetTrackers[netType].startMonitoring(context,mHandler);
break;
default :
loge("Trying to create a DataStateTracker for an unknown radio type " + mNetAttributes[netType].mRadio);
continue;
}
}
mTethering=new Tethering(mContext,mHandler.getLooper());
mTetheringConfigValid=(((mNetTrackers[ConnectivityManager.TYPE_MOBILE_DUN] != null) || !mTethering.isDunRequired()) && (mTethering.getTetherableUsbRegexs().length != 0 || mTethering.getTetherableWifiRegexs().length != 0 || mTethering.getTetherableBluetoothRegexs().length != 0) && mTethering.getUpstreamIfaceRegexs().length != 0);
if (DBG) {
mInetLog=new ArrayList();
}
mSettingsObserver=new SettingsObserver(mHandler,EVENT_APPLY_GLOBAL_HTTP_PROXY);
mSettingsObserver.observe(mContext);
loadGlobalProxy();
VpnManager.startVpnService(context);
}
