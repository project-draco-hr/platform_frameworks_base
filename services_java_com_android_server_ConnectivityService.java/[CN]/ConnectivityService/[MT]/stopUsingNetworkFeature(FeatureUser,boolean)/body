{
  int networkType=u.mNetworkType;
  String feature=u.mFeature;
  int pid=u.mPid;
  int uid=u.mUid;
  NetworkStateTracker tracker=null;
  boolean callTeardown=false;
  if (DBG) {
    Log.d(TAG,"stopUsingNetworkFeature for net " + networkType + ": "+ feature);
  }
  if (!ConnectivityManager.isNetworkTypeValid(networkType)) {
    return -1;
  }
synchronized (this) {
    if (!mFeatureUsers.contains(u)) {
      return 1;
    }
    u.unlinkDeathRecipient();
    mFeatureUsers.remove(mFeatureUsers.indexOf(u));
    if (ignoreDups == false) {
      for (int i=0; i < mFeatureUsers.size(); i++) {
        FeatureUser x=(FeatureUser)mFeatureUsers.get(i);
        if (x.mUid == u.mUid && x.mPid == u.mPid && x.mNetworkType == u.mNetworkType && TextUtils.equals(x.mFeature,u.mFeature)) {
          return 1;
        }
      }
    }
    int usedNetworkType=networkType;
    if (networkType == ConnectivityManager.TYPE_MOBILE) {
      if (TextUtils.equals(feature,Phone.FEATURE_ENABLE_MMS)) {
        usedNetworkType=ConnectivityManager.TYPE_MOBILE_MMS;
      }
 else       if (TextUtils.equals(feature,Phone.FEATURE_ENABLE_SUPL)) {
        usedNetworkType=ConnectivityManager.TYPE_MOBILE_SUPL;
      }
 else       if (TextUtils.equals(feature,Phone.FEATURE_ENABLE_DUN)) {
        usedNetworkType=ConnectivityManager.TYPE_MOBILE_DUN;
      }
 else       if (TextUtils.equals(feature,Phone.FEATURE_ENABLE_HIPRI)) {
        usedNetworkType=ConnectivityManager.TYPE_MOBILE_HIPRI;
      }
    }
    tracker=mNetTrackers[usedNetworkType];
    if (usedNetworkType != networkType) {
      Integer currentPid=new Integer(pid);
      mNetRequestersPids[usedNetworkType].remove(currentPid);
      reassessPidDns(pid,true);
      if (mNetRequestersPids[usedNetworkType].size() != 0) {
        if (DBG)         Log.d(TAG,"not tearing down special network - " + "others still using it");
        return 1;
      }
      callTeardown=true;
    }
  }
  if (callTeardown) {
    tracker.teardown();
    return 1;
  }
 else {
    return tracker.stopUsingNetworkFeature(feature,pid,uid);
  }
}
