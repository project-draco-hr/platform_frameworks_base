{
  final int type=info.getType();
  boolean isFailover=info.isFailover();
  final NetworkStateTracker thisNet=mNetTrackers[type];
  final String thisIface=thisNet.getLinkProperties().getInterfaceName();
  if (mNetConfigs[type].isDefault()) {
    if (mActiveDefaultNetwork != -1 && mActiveDefaultNetwork != type) {
      if ((type != mNetworkPreference && mNetConfigs[mActiveDefaultNetwork].priority > mNetConfigs[type].priority) || mNetworkPreference == mActiveDefaultNetwork) {
        if (VDBG) {
          log("Not broadcasting CONNECT_ACTION " + "to torn down network " + info.getTypeName());
        }
        teardown(thisNet);
        return;
      }
 else {
        NetworkStateTracker otherNet=mNetTrackers[mActiveDefaultNetwork];
        if (DBG) {
          log("Policy requires " + otherNet.getNetworkInfo().getTypeName() + " teardown");
        }
        if (!teardown(otherNet)) {
          loge("Network declined teardown request");
          teardown(thisNet);
          return;
        }
      }
    }
synchronized (ConnectivityService.this) {
      if (mNetTransitionWakeLock.isHeld()) {
        mHandler.sendMessageDelayed(mHandler.obtainMessage(EVENT_CLEAR_NET_TRANSITION_WAKELOCK,mNetTransitionWakeLockSerialNumber,0),1000);
      }
    }
    mActiveDefaultNetwork=type;
    mDefaultInetConditionPublished=0;
    mDefaultConnectionSequence++;
    mInetConditionChangeInFlight=false;
  }
  thisNet.setTeardownRequested(false);
  updateNetworkSettings(thisNet);
  handleConnectivityChange(type,false);
  sendConnectedBroadcastDelayed(info,getConnectivityChangeDelay());
  if (thisIface != null) {
    try {
      BatteryStatsService.getService().noteNetworkInterfaceType(thisIface,type);
    }
 catch (    RemoteException e) {
    }
  }
}
