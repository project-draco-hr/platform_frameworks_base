{
  DexClassLoader wimaxClassLoader;
  Class wimaxStateTrackerClass=null;
  Class wimaxServiceClass=null;
  Class wimaxManagerClass;
  String wimaxJarLocation;
  String wimaxLibLocation;
  String wimaxManagerClassName;
  String wimaxServiceClassName;
  String wimaxStateTrackerClassName;
  NetworkStateTracker wimaxStateTracker=null;
  boolean isWimaxEnabled=mContext.getResources().getBoolean(com.android.internal.R.bool.config_wimaxEnabled);
  if (isWimaxEnabled) {
    try {
      wimaxJarLocation=mContext.getResources().getString(com.android.internal.R.string.config_wimaxServiceJarLocation);
      wimaxLibLocation=mContext.getResources().getString(com.android.internal.R.string.config_wimaxNativeLibLocation);
      wimaxManagerClassName=mContext.getResources().getString(com.android.internal.R.string.config_wimaxManagerClassname);
      wimaxServiceClassName=mContext.getResources().getString(com.android.internal.R.string.config_wimaxServiceClassname);
      wimaxStateTrackerClassName=mContext.getResources().getString(com.android.internal.R.string.config_wimaxStateTrackerClassname);
      wimaxClassLoader=new DexClassLoader(wimaxJarLocation,new ContextWrapper(mContext).getCacheDir().getAbsolutePath(),wimaxLibLocation,ClassLoader.getSystemClassLoader());
      try {
        wimaxManagerClass=wimaxClassLoader.loadClass(wimaxManagerClassName);
        wimaxStateTrackerClass=wimaxClassLoader.loadClass(wimaxStateTrackerClassName);
        wimaxServiceClass=wimaxClassLoader.loadClass(wimaxServiceClassName);
      }
 catch (      ClassNotFoundException ex) {
        ex.printStackTrace();
        return null;
      }
    }
 catch (    Resources.NotFoundException ex) {
      Slog.e(TAG,"Wimax Resources does not exist!!! ");
      return null;
    }
    try {
      Slog.v(TAG,"Starting Wimax Service... ");
      Constructor wmxStTrkrConst=wimaxStateTrackerClass.getConstructor(new Class[]{Context.class,Handler.class});
      wimaxStateTracker=(NetworkStateTracker)wmxStTrkrConst.newInstance(mContext,mHandler);
      Constructor wmxSrvConst=wimaxServiceClass.getDeclaredConstructor(new Class[]{Context.class,wimaxStateTrackerClass});
      wmxSrvConst.setAccessible(true);
      IBinder svcInvoker=(IBinder)wmxSrvConst.newInstance(mContext,wimaxStateTracker);
      wmxSrvConst.setAccessible(false);
      ServiceManager.addService(WimaxManagerConstants.WIMAX_SERVICE,svcInvoker);
    }
 catch (    ClassCastException ex) {
      ex.printStackTrace();
      return null;
    }
catch (    NoSuchMethodException ex) {
      ex.printStackTrace();
      return null;
    }
catch (    InstantiationException ex) {
      ex.printStackTrace();
      return null;
    }
catch (    IllegalAccessException ex) {
      ex.printStackTrace();
      return null;
    }
catch (    InvocationTargetException ex) {
      ex.printStackTrace();
      return null;
    }
catch (    Exception ex) {
      ex.printStackTrace();
      return null;
    }
  }
 else {
    Slog.e(TAG,"Wimax is not enabled or not added to the network attributes!!! ");
    return null;
  }
  return wimaxStateTracker;
}
