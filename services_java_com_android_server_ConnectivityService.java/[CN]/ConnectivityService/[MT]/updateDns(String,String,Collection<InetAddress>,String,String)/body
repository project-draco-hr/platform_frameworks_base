{
  boolean changed=false;
  int last=0;
  if (dnses.size() == 0 && mDefaultDns != null) {
    ++last;
    String value=mDefaultDns.getHostAddress();
    if (!value.equals(SystemProperties.get("net.dns1"))) {
      if (DBG) {
        loge("no dns provided for " + network + " - using "+ value);
      }
      changed=true;
      SystemProperties.set("net.dns1",value);
    }
  }
 else {
    for (    InetAddress dns : dnses) {
      ++last;
      String key="net.dns" + last;
      String value=dns.getHostAddress();
      if (!changed && value.equals(SystemProperties.get(key))) {
        continue;
      }
      if (VDBG) {
        log("adding dns " + value + " for "+ network);
      }
      changed=true;
      SystemProperties.set(key,value);
    }
  }
  for (int i=last + 1; i <= mNumDnsEntries; ++i) {
    String key="net.dns" + i;
    if (VDBG)     log("erasing " + key);
    changed=true;
    SystemProperties.set(key,"");
  }
  mNumDnsEntries=last;
  if (changed || !proto.equals(SystemProperties.get("net.dnsproto"))) {
    changed=true;
    SystemProperties.set("net.dnsproto",proto);
  }
  if (changed) {
    try {
      mNetd.setDnsServersForInterface(iface,NetworkUtils.makeStrings(dnses));
      mNetd.setDefaultInterfaceForDns(iface);
    }
 catch (    Exception e) {
      if (VDBG)       loge("exception setting default dns interface: " + e);
    }
  }
  if (!domains.equals(SystemProperties.get("net.dns.search"))) {
    SystemProperties.set("net.dns.search",domains);
    changed=true;
  }
  return changed;
}
