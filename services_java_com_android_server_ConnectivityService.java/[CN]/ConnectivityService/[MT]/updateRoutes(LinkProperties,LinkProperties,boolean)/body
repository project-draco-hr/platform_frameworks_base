{
  Collection<RouteInfo> routesToAdd=null;
  CompareResult<InetAddress> dnsDiff=new CompareResult<InetAddress>();
  CompareResult<RouteInfo> routeDiff=new CompareResult<RouteInfo>();
  if (curLp != null) {
    routeDiff=curLp.compareRoutes(newLp);
    dnsDiff=curLp.compareDnses(newLp);
  }
 else   if (newLp != null) {
    routeDiff.added=newLp.getRoutes();
    dnsDiff.added=newLp.getDnses();
  }
  boolean routesChanged=(routeDiff.removed.size() != 0 || routeDiff.added.size() != 0);
  RouteInfo[] routes=new RouteInfo[0];
  try {
    routes=mNetd.getRoutes(newLp.getInterfaceName());
  }
 catch (  Exception e) {
  }
  for (  RouteInfo route : routes) {
    if (route.isDefaultRoute() && route.getGateway() instanceof Inet4Address && mAddedRoutes.contains(route) == false) {
      throw new IllegalStateException("Unexpected default route found for interface " + newLp.getInterfaceName());
    }
  }
  for (  RouteInfo r : routeDiff.removed) {
    if (isLinkDefault || !r.isDefaultRoute()) {
      removeRoute(curLp,r,TO_DEFAULT_TABLE);
    }
    if (isLinkDefault == false) {
      removeRoute(curLp,r,TO_SECONDARY_TABLE);
    }
  }
  for (  RouteInfo r : routeDiff.added) {
    if (isLinkDefault || !r.isDefaultRoute()) {
      addRoute(newLp,r,TO_DEFAULT_TABLE);
    }
 else {
      addRoute(newLp,r,TO_SECONDARY_TABLE);
      String ifaceName=newLp.getInterfaceName();
      if (TextUtils.isEmpty(ifaceName) == false && mAddedRoutes.contains(r) == false) {
        if (VDBG)         log("Removing " + r + " for interface "+ ifaceName);
        try {
          mNetd.removeRoute(ifaceName,r);
        }
 catch (        Exception e) {
          if (DBG)           loge("Exception trying to remove a route: " + e);
        }
      }
    }
  }
  if (!isLinkDefault) {
    if (routesChanged) {
      if (curLp != null) {
        for (        InetAddress oldDns : curLp.getDnses()) {
          removeRouteToAddress(curLp,oldDns);
        }
      }
      if (newLp != null) {
        for (        InetAddress newDns : newLp.getDnses()) {
          addRouteToAddress(newLp,newDns);
        }
      }
    }
 else {
      for (      InetAddress oldDns : dnsDiff.removed) {
        removeRouteToAddress(curLp,oldDns);
      }
      for (      InetAddress newDns : dnsDiff.added) {
        addRouteToAddress(newLp,newDns);
      }
    }
  }
  return routesChanged;
}
