{
  NetworkInfo info;
switch (msg.what) {
case NetworkStateTracker.EVENT_STATE_CHANGED:
    info=(NetworkInfo)msg.obj;
  int type=info.getType();
NetworkInfo.State state=info.getState();
if (mNetAttributes[type].mLastState == state && mNetAttributes[type].mRadio == ConnectivityManager.TYPE_WIFI) {
if (DBG) {
  Slog.d(TAG,"Dropping ConnectivityChange for " + info.getTypeName() + ": "+ state+ "/"+ info.getDetailedState());
}
return;
}
mNetAttributes[type].mLastState=state;
if (DBG) Slog.d(TAG,"ConnectivityChange for " + info.getTypeName() + ": "+ state+ "/"+ info.getDetailedState());
int eventLogParam=(info.getType() & 0x7) | ((info.getDetailedState().ordinal() & 0x3f) << 3) | (info.getSubtype() << 9);
EventLog.writeEvent(EventLogTags.CONNECTIVITY_STATE_CHANGED,eventLogParam);
if (info.getDetailedState() == NetworkInfo.DetailedState.FAILED) {
handleConnectionFailure(info);
}
 else if (state == NetworkInfo.State.DISCONNECTED) {
handleDisconnect(info);
}
 else if (state == NetworkInfo.State.SUSPENDED) {
handleDisconnect(info);
}
 else if (state == NetworkInfo.State.CONNECTED) {
handleConnect(info);
}
break;
case NetworkStateTracker.EVENT_SCAN_RESULTS_AVAILABLE:
info=(NetworkInfo)msg.obj;
handleScanResultsAvailable(info);
break;
case NetworkStateTracker.EVENT_NOTIFICATION_CHANGED:
handleNotificationChange(msg.arg1 == 1,msg.arg2,(Notification)msg.obj);
break;
case NetworkStateTracker.EVENT_CONFIGURATION_CHANGED:
info=(NetworkInfo)msg.obj;
type=info.getType();
handleDnsConfigurationChange(type);
break;
case NetworkStateTracker.EVENT_ROAMING_CHANGED:
break;
case NetworkStateTracker.EVENT_NETWORK_SUBTYPE_CHANGED:
break;
case NetworkStateTracker.EVENT_RESTORE_DEFAULT_NETWORK:
FeatureUser u=(FeatureUser)msg.obj;
u.expire();
break;
case NetworkStateTracker.EVENT_INET_CONDITION_CHANGE:
if (DBG) {
Slog.d(TAG,"Inet connectivity change, net=" + msg.arg1 + ", condition="+ msg.arg2+ ",mActiveDefaultNetwork="+ mActiveDefaultNetwork);
}
if (mActiveDefaultNetwork == -1) {
if (DBG) Slog.d(TAG,"no active default network - aborting");
break;
}
if (mActiveDefaultNetwork != msg.arg1) {
if (DBG) Slog.d(TAG,"given net not default - aborting");
break;
}
mDefaultInetCondition=msg.arg2;
int delay;
if (mInetConditionChangeInFlight == false) {
if (DBG) Slog.d(TAG,"starting a change hold");
if (mDefaultInetCondition > 50) {
delay=Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.INET_CONDITION_DEBOUNCE_UP_DELAY,500);
}
 else {
delay=Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.INET_CONDITION_DEBOUNCE_DOWN_DELAY,3000);
}
mInetConditionChangeInFlight=true;
sendMessageDelayed(obtainMessage(NetworkStateTracker.EVENT_INET_CONDITION_HOLD_END,mActiveDefaultNetwork,mDefaultConnectionSequence),delay);
}
 else {
if (DBG) Slog.d(TAG,"currently in hold - not setting new end evt");
}
break;
case NetworkStateTracker.EVENT_INET_CONDITION_HOLD_END:
if (DBG) {
Slog.d(TAG,"Inet hold end, net=" + msg.arg1 + ", condition ="+ mDefaultInetCondition+ ", published condition ="+ mDefaultInetConditionPublished);
}
mInetConditionChangeInFlight=false;
if (mActiveDefaultNetwork == -1) {
if (DBG) Slog.d(TAG,"no active default network - aborting");
break;
}
if (mDefaultConnectionSequence != msg.arg2) {
if (DBG) Slog.d(TAG,"event hold for obsolete network - aborting");
break;
}
if (mDefaultInetConditionPublished == mDefaultInetCondition) {
if (DBG) Slog.d(TAG,"no change in condition - aborting");
break;
}
NetworkInfo networkInfo=mNetTrackers[mActiveDefaultNetwork].getNetworkInfo();
if (networkInfo.isConnected() == false) {
if (DBG) Slog.d(TAG,"default network not connected - aborting");
break;
}
mDefaultInetConditionPublished=mDefaultInetCondition;
sendInetConditionBroadcast(networkInfo);
break;
}
}
