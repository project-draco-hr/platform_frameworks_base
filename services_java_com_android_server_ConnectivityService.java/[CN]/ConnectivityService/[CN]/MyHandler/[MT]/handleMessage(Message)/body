{
  NetworkInfo info;
switch (msg.what) {
case NetworkStateTracker.EVENT_STATE_CHANGED:
    info=(NetworkInfo)msg.obj;
  int type=info.getType();
NetworkInfo.State state=info.getState();
if (mNetAttributes[type].mLastState == state && mNetAttributes[type].mRadio == ConnectivityManager.TYPE_WIFI) {
if (DBG) {
  Log.d(TAG,"Dropping ConnectivityChange for " + info.getTypeName() + ": "+ state+ "/"+ info.getDetailedState());
}
return;
}
mNetAttributes[type].mLastState=state;
if (DBG) Log.d(TAG,"ConnectivityChange for " + info.getTypeName() + ": "+ state+ "/"+ info.getDetailedState());
int eventLogParam=(info.getType() & 0x7) | ((info.getDetailedState().ordinal() & 0x3f) << 3) | (info.getSubtype() << 9);
EventLog.writeEvent(EVENTLOG_CONNECTIVITY_STATE_CHANGED,eventLogParam);
if (info.getDetailedState() == NetworkInfo.DetailedState.FAILED) {
handleConnectionFailure(info);
}
 else if (state == NetworkInfo.State.DISCONNECTED) {
handleDisconnect(info);
}
 else if (state == NetworkInfo.State.SUSPENDED) {
handleDisconnect(info);
}
 else if (state == NetworkInfo.State.CONNECTED) {
handleConnect(info);
}
break;
case NetworkStateTracker.EVENT_SCAN_RESULTS_AVAILABLE:
info=(NetworkInfo)msg.obj;
handleScanResultsAvailable(info);
break;
case NetworkStateTracker.EVENT_NOTIFICATION_CHANGED:
handleNotificationChange(msg.arg1 == 1,msg.arg2,(Notification)msg.obj);
case NetworkStateTracker.EVENT_CONFIGURATION_CHANGED:
handleDnsConfigurationChange();
break;
case NetworkStateTracker.EVENT_ROAMING_CHANGED:
break;
case NetworkStateTracker.EVENT_NETWORK_SUBTYPE_CHANGED:
break;
case NetworkStateTracker.EVENT_RESTORE_DEFAULT_NETWORK:
FeatureUser u=(FeatureUser)msg.obj;
u.expire();
break;
}
}
