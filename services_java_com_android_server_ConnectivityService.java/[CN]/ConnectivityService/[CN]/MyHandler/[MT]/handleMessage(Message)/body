{
  NetworkInfo info;
switch (msg.what) {
case NetworkStateTracker.EVENT_STATE_CHANGED:
    info=(NetworkInfo)msg.obj;
  int type=info.getType();
NetworkInfo.State state=info.getState();
if (mNetAttributes[type].mLastState == state && mNetAttributes[type].mRadio == ConnectivityManager.TYPE_WIFI) {
if (DBG) {
  log("Dropping ConnectivityChange for " + info.getTypeName() + ": "+ state+ "/"+ info.getDetailedState());
}
return;
}
mNetAttributes[type].mLastState=state;
if (DBG) log("ConnectivityChange for " + info.getTypeName() + ": "+ state+ "/"+ info.getDetailedState());
int eventLogParam=(info.getType() & 0x7) | ((info.getDetailedState().ordinal() & 0x3f) << 3) | (info.getSubtype() << 9);
EventLog.writeEvent(EventLogTags.CONNECTIVITY_STATE_CHANGED,eventLogParam);
if (info.getDetailedState() == NetworkInfo.DetailedState.FAILED) {
handleConnectionFailure(info);
}
 else if (state == NetworkInfo.State.DISCONNECTED) {
handleDisconnect(info);
}
 else if (state == NetworkInfo.State.SUSPENDED) {
handleDisconnect(info);
}
 else if (state == NetworkInfo.State.CONNECTED) {
handleConnect(info);
}
break;
case NetworkStateTracker.EVENT_CONFIGURATION_CHANGED:
info=(NetworkInfo)msg.obj;
type=info.getType();
handleConnectivityChange(type);
break;
case EVENT_CLEAR_NET_TRANSITION_WAKELOCK:
String causedBy=null;
synchronized (ConnectivityService.this) {
if (msg.arg1 == mNetTransitionWakeLockSerialNumber && mNetTransitionWakeLock.isHeld()) {
mNetTransitionWakeLock.release();
causedBy=mNetTransitionWakeLockCausedBy;
}
}
if (causedBy != null) {
log("NetTransition Wakelock for " + causedBy + " released by timeout");
}
break;
case EVENT_RESTORE_DEFAULT_NETWORK:
FeatureUser u=(FeatureUser)msg.obj;
u.expire();
break;
case EVENT_INET_CONDITION_CHANGE:
{
int netType=msg.arg1;
int condition=msg.arg2;
handleInetConditionChange(netType,condition);
break;
}
case EVENT_INET_CONDITION_HOLD_END:
{
int netType=msg.arg1;
int sequence=msg.arg2;
handleInetConditionHoldEnd(netType,sequence);
break;
}
case EVENT_SET_NETWORK_PREFERENCE:
{
int preference=msg.arg1;
handleSetNetworkPreference(preference);
break;
}
case EVENT_SET_BACKGROUND_DATA:
{
boolean enabled=(msg.arg1 == ENABLED);
handleSetBackgroundData(enabled);
break;
}
case EVENT_SET_MOBILE_DATA:
{
boolean enabled=(msg.arg1 == ENABLED);
handleSetMobileData(enabled);
break;
}
case EVENT_APPLY_GLOBAL_HTTP_PROXY:
{
handleDeprecatedGlobalHttpProxy();
}
}
}
