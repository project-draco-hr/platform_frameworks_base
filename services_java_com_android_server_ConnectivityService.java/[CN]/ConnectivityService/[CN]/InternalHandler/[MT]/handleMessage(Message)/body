{
  NetworkInfo info;
switch (msg.what) {
case EVENT_CLEAR_NET_TRANSITION_WAKELOCK:
{
      String causedBy=null;
synchronized (ConnectivityService.this) {
        if (msg.arg1 == mNetTransitionWakeLockSerialNumber && mNetTransitionWakeLock.isHeld()) {
          mNetTransitionWakeLock.release();
          causedBy=mNetTransitionWakeLockCausedBy;
        }
      }
      if (causedBy != null) {
        log("NetTransition Wakelock for " + causedBy + " released by timeout");
      }
      break;
    }
case EVENT_RESTORE_DEFAULT_NETWORK:
{
    FeatureUser u=(FeatureUser)msg.obj;
    u.expire();
    break;
  }
case EVENT_INET_CONDITION_CHANGE:
{
  int netType=msg.arg1;
  int condition=msg.arg2;
  handleInetConditionChange(netType,condition);
  break;
}
case EVENT_INET_CONDITION_HOLD_END:
{
int netType=msg.arg1;
int sequence=msg.arg2;
handleInetConditionHoldEnd(netType,sequence);
break;
}
case EVENT_SET_NETWORK_PREFERENCE:
{
int preference=msg.arg1;
handleSetNetworkPreference(preference);
break;
}
case EVENT_SET_MOBILE_DATA:
{
boolean enabled=(msg.arg1 == ENABLED);
handleSetMobileData(enabled);
break;
}
case EVENT_APPLY_GLOBAL_HTTP_PROXY:
{
handleDeprecatedGlobalHttpProxy();
break;
}
case EVENT_SET_DEPENDENCY_MET:
{
boolean met=(msg.arg1 == ENABLED);
handleSetDependencyMet(msg.arg2,met);
break;
}
case EVENT_SEND_STICKY_BROADCAST_INTENT:
{
Intent intent=(Intent)msg.obj;
sendStickyBroadcast(intent);
break;
}
case EVENT_SET_POLICY_DATA_ENABLE:
{
final int networkType=msg.arg1;
final boolean enabled=msg.arg2 == ENABLED;
handleSetPolicyDataEnable(networkType,enabled);
break;
}
case EVENT_VPN_STATE_CHANGED:
{
if (mLockdownTracker != null) {
mLockdownTracker.onVpnStateChanged((NetworkInfo)msg.obj);
}
break;
}
case EVENT_ENABLE_FAIL_FAST_MOBILE_DATA:
{
int tag=mEnableFailFastMobileDataTag.get();
if (msg.arg1 == tag) {
MobileDataStateTracker mobileDst=(MobileDataStateTracker)mNetTrackers[ConnectivityManager.TYPE_MOBILE];
if (mobileDst != null) {
mobileDst.setEnableFailFastMobileData(msg.arg2);
}
}
 else {
log("EVENT_ENABLE_FAIL_FAST_MOBILE_DATA: stale arg1:" + msg.arg1 + " != tag:"+ tag);
}
break;
}
case EVENT_SAMPLE_INTERVAL_ELAPSED:
{
handleNetworkSamplingTimeout();
break;
}
}
}
