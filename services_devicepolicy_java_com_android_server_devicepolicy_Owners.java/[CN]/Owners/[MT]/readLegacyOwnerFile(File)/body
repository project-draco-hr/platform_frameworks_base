{
  if (!file.exists()) {
    return false;
  }
  try {
    InputStream input=new AtomicFile(file).openRead();
    XmlPullParser parser=Xml.newPullParser();
    parser.setInput(input,StandardCharsets.UTF_8.name());
    int type;
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT) {
      if (type != XmlPullParser.START_TAG) {
        continue;
      }
      String tag=parser.getName();
      if (tag.equals(TAG_DEVICE_OWNER)) {
        String name=parser.getAttributeValue(null,ATTR_NAME);
        String packageName=parser.getAttributeValue(null,ATTR_PACKAGE);
        mDeviceOwner=new OwnerInfo(name,packageName);
        mDeviceOwnerUserId=UserHandle.USER_SYSTEM;
      }
 else       if (tag.equals(TAG_DEVICE_INITIALIZER)) {
        String packageName=parser.getAttributeValue(null,ATTR_PACKAGE);
        String initializerComponentStr=parser.getAttributeValue(null,ATTR_COMPONENT_NAME);
        ComponentName admin=ComponentName.unflattenFromString(initializerComponentStr);
        if (admin != null) {
          mDeviceInitializer=new OwnerInfo(null,admin);
        }
 else {
          mDeviceInitializer=new OwnerInfo(null,packageName);
          Slog.e(TAG,"Error parsing device-owner file. Bad component name " + initializerComponentStr);
        }
      }
 else       if (tag.equals(TAG_PROFILE_OWNER)) {
        String profileOwnerPackageName=parser.getAttributeValue(null,ATTR_PACKAGE);
        String profileOwnerName=parser.getAttributeValue(null,ATTR_NAME);
        String profileOwnerComponentStr=parser.getAttributeValue(null,ATTR_COMPONENT_NAME);
        int userId=Integer.parseInt(parser.getAttributeValue(null,ATTR_USERID));
        OwnerInfo profileOwnerInfo=null;
        if (profileOwnerComponentStr != null) {
          ComponentName admin=ComponentName.unflattenFromString(profileOwnerComponentStr);
          if (admin != null) {
            profileOwnerInfo=new OwnerInfo(profileOwnerName,admin);
          }
 else {
            Slog.e(TAG,"Error parsing device-owner file. Bad component name " + profileOwnerComponentStr);
          }
        }
        if (profileOwnerInfo == null) {
          profileOwnerInfo=new OwnerInfo(profileOwnerName,profileOwnerPackageName);
        }
        mProfileOwners.put(userId,profileOwnerInfo);
      }
 else       if (TAG_SYSTEM_UPDATE_POLICY.equals(tag)) {
        mSystemUpdatePolicy=SystemUpdatePolicy.restoreFromXml(parser);
      }
 else {
        throw new XmlPullParserException("Unexpected tag in device owner file: " + tag);
      }
    }
    input.close();
  }
 catch (  XmlPullParserException|IOException e) {
    Slog.e(TAG,"Error parsing device-owner file",e);
  }
  return true;
}
