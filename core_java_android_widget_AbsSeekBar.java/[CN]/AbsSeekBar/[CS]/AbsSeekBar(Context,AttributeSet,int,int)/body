{
  super(context,attrs,defStyleAttr,defStyleRes);
  final TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.SeekBar,defStyleAttr,defStyleRes);
  final Drawable thumb=a.getDrawable(R.styleable.SeekBar_thumb);
  setThumb(thumb);
  if (a.hasValue(R.styleable.SeekBar_thumbTintMode)) {
    mThumbTintMode=Drawable.parseTintMode(a.getInt(R.styleable.SeekBar_thumbTintMode,-1),mThumbTintMode);
    mHasThumbTintMode=true;
  }
  if (a.hasValue(R.styleable.SeekBar_thumbTint)) {
    mThumbTintList=a.getColorStateList(R.styleable.SeekBar_thumbTint);
    mHasThumbTint=true;
  }
  mSplitTrack=a.getBoolean(R.styleable.SeekBar_splitTrack,false);
  final int thumbOffset=a.getDimensionPixelOffset(R.styleable.SeekBar_thumbOffset,getThumbOffset());
  setThumbOffset(thumbOffset);
  final boolean useDisabledAlpha=a.getBoolean(R.styleable.SeekBar_useDisabledAlpha,true);
  a.recycle();
  if (useDisabledAlpha) {
    final TypedArray ta=context.obtainStyledAttributes(attrs,R.styleable.Theme,0,0);
    mDisabledAlpha=ta.getFloat(R.styleable.Theme_disabledAlpha,0.5f);
    ta.recycle();
  }
 else {
    mDisabledAlpha=1.0f;
  }
  applyThumbTint();
  mScaledTouchSlop=ViewConfiguration.get(context).getScaledTouchSlop();
}
