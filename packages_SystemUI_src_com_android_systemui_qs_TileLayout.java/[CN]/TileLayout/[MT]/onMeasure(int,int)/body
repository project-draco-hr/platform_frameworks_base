{
  final int width=MeasureSpec.getSize(widthMeasureSpec);
  int r=-1;
  int c=-1;
  int rows=0;
  boolean rowIsDual=false;
  for (  TileRecord record : mRecords) {
    if (record.tileView.getVisibility() == GONE)     continue;
    if (r == -1 || c == (mColumns - 1) || rowIsDual != (mAllowDual && record.tile.supportsDualTargets())) {
      r++;
      c=0;
      rowIsDual=mAllowDual && record.tile.supportsDualTargets();
    }
 else {
      c++;
    }
    record.row=r;
    record.col=c;
    rows=r + 1;
  }
  View previousView=this;
  for (  TileRecord record : mRecords) {
    if (record.tileView.setType(mAllowDual ? record.tile.getTileType() : QSTileView.QS_TYPE_NORMAL)) {
      record.tileView.handleStateChanged(record.tile.getState());
    }
    if (record.tileView.getVisibility() == GONE)     continue;
    final int cw=record.row == 0 ? mLargeCellWidth : mCellWidth;
    final int ch=record.row == 0 ? mLargeCellHeight : mCellHeight;
    record.tileView.measure(exactly(cw),exactly(ch));
    previousView=record.tileView.updateAccessibilityOrder(previousView);
  }
  int h=rows == 0 ? 0 : getRowTop(rows);
  setMeasuredDimension(width,h);
}
