{
  super.onMeasure(widthMeasureSpec,heightMeasureSpec);
  int widthMode=MeasureSpec.getMode(widthMeasureSpec);
  int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  int widthSize=MeasureSpec.getSize(widthMeasureSpec);
  int heightSize=MeasureSpec.getSize(heightMeasureSpec);
  if (widthMode == MeasureSpec.UNSPECIFIED) {
    if (mColumnWidth > 0) {
      widthSize=mColumnWidth + mListPadding.left + mListPadding.right;
    }
 else {
      widthSize=mListPadding.left + mListPadding.right;
    }
    widthSize+=getVerticalScrollbarWidth();
  }
  int childWidth=widthSize - mListPadding.left - mListPadding.right;
  boolean didNotInitiallyFit=determineColumns(childWidth);
  int childHeight=0;
  int childState=0;
  mItemCount=mAdapter == null ? 0 : mAdapter.getCount();
  final int count=mItemCount;
  if (count > 0) {
    final View child=obtainView(0,mIsScrap);
    AbsListView.LayoutParams p=(AbsListView.LayoutParams)child.getLayoutParams();
    if (p == null) {
      p=(AbsListView.LayoutParams)generateDefaultLayoutParams();
      child.setLayoutParams(p);
    }
    p.viewType=mAdapter.getItemViewType(0);
    p.forceAdd=true;
    int childHeightSpec=getChildMeasureSpec(MeasureSpec.makeSafeMeasureSpec(MeasureSpec.getSize(heightMeasureSpec),MeasureSpec.UNSPECIFIED),0,p.height);
    int childWidthSpec=getChildMeasureSpec(MeasureSpec.makeMeasureSpec(mColumnWidth,MeasureSpec.EXACTLY),0,p.width);
    child.measure(childWidthSpec,childHeightSpec);
    childHeight=child.getMeasuredHeight();
    childState=combineMeasuredStates(childState,child.getMeasuredState());
    if (mRecycler.shouldRecycleViewType(p.viewType)) {
      mRecycler.addScrapView(child,-1);
    }
  }
  if (heightMode == MeasureSpec.UNSPECIFIED) {
    heightSize=mListPadding.top + mListPadding.bottom + childHeight+ getVerticalFadingEdgeLength() * 2;
  }
  if (heightMode == MeasureSpec.AT_MOST) {
    int ourSize=mListPadding.top + mListPadding.bottom;
    final int numColumns=mNumColumns;
    for (int i=0; i < count; i+=numColumns) {
      ourSize+=childHeight;
      if (i + numColumns < count) {
        ourSize+=mVerticalSpacing;
      }
      if (ourSize >= heightSize) {
        ourSize=heightSize;
        break;
      }
    }
    heightSize=ourSize;
  }
  if (widthMode == MeasureSpec.AT_MOST && mRequestedNumColumns != AUTO_FIT) {
    int ourSize=(mRequestedNumColumns * mColumnWidth) + ((mRequestedNumColumns - 1) * mHorizontalSpacing) + mListPadding.left+ mListPadding.right;
    if (ourSize > widthSize || didNotInitiallyFit) {
      widthSize|=MEASURED_STATE_TOO_SMALL;
    }
  }
  setMeasuredDimension(widthSize,heightSize);
  mWidthMeasureSpec=widthMeasureSpec;
}
