{
  final int columnWidth=mColumnWidth;
  final int horizontalSpacing=mHorizontalSpacing;
  int last;
  int nextLeft=mListPadding.left + ((mStretchMode == STRETCH_SPACING_UNIFORM) ? horizontalSpacing : 0);
  if (!mStackFromBottom) {
    last=Math.min(startPos + mNumColumns,mItemCount);
  }
 else {
    last=startPos + 1;
    startPos=Math.max(0,startPos - mNumColumns + 1);
    if (last - startPos < mNumColumns) {
      nextLeft+=(mNumColumns - (last - startPos)) * (columnWidth + horizontalSpacing);
    }
  }
  View selectedView=null;
  final boolean hasFocus=shouldShowSelector();
  final boolean inClick=touchModeDrawsInPressedState();
  final int selectedPosition=mSelectedPosition;
  mReferenceView=null;
  for (int pos=startPos; pos < last; pos++) {
    boolean selected=pos == selectedPosition;
    final int where=flow ? -1 : pos - startPos;
    final View child=makeAndAddView(pos,y,flow,nextLeft,selected,where);
    mReferenceView=child;
    nextLeft+=columnWidth;
    if (pos < last - 1) {
      nextLeft+=horizontalSpacing;
    }
    if (selected && (hasFocus || inClick)) {
      selectedView=child;
    }
  }
  if (selectedView != null) {
    mReferenceViewInSelectedRow=mReferenceView;
  }
  return selectedView;
}
