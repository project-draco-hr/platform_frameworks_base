{
  boolean isSelected=selected && shouldShowSelector();
  final boolean updateChildSelected=isSelected != child.isSelected();
  final int mode=mTouchMode;
  final boolean isPressed=mode > TOUCH_MODE_DOWN && mode < TOUCH_MODE_SCROLL && mMotionPosition == position;
  final boolean updateChildPressed=isPressed != child.isPressed();
  boolean needToMeasure=!recycled || updateChildSelected || child.isLayoutRequested();
  AbsListView.LayoutParams p=(AbsListView.LayoutParams)child.getLayoutParams();
  if (p == null) {
    p=new AbsListView.LayoutParams(ViewGroup.LayoutParams.FILL_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT,0);
  }
  p.viewType=mAdapter.getItemViewType(position);
  if (recycled) {
    attachViewToParent(child,where,p);
  }
 else {
    addViewInLayout(child,where,p,true);
  }
  if (updateChildSelected) {
    child.setSelected(isSelected);
    if (isSelected) {
      requestFocus();
    }
  }
  if (updateChildPressed) {
    child.setPressed(isPressed);
  }
  if (needToMeasure) {
    int childHeightSpec=ViewGroup.getChildMeasureSpec(MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED),0,p.height);
    int childWidthSpec=ViewGroup.getChildMeasureSpec(MeasureSpec.makeMeasureSpec(mColumnWidth,MeasureSpec.EXACTLY),0,p.width);
    child.measure(childWidthSpec,childHeightSpec);
  }
 else {
    cleanupLayoutState(child);
  }
  final int w=child.getMeasuredWidth();
  final int h=child.getMeasuredHeight();
  int childLeft;
  final int childTop=flow ? y : y - h;
switch (mGravity & Gravity.HORIZONTAL_GRAVITY_MASK) {
case Gravity.LEFT:
    childLeft=childrenLeft;
  break;
case Gravity.CENTER_HORIZONTAL:
childLeft=childrenLeft + ((mColumnWidth - w) / 2);
break;
case Gravity.RIGHT:
childLeft=childrenLeft + mColumnWidth - w;
break;
default :
childLeft=childrenLeft;
break;
}
if (needToMeasure) {
final int childRight=childLeft + w;
final int childBottom=childTop + h;
child.layout(childLeft,childTop,childRight,childBottom);
}
 else {
child.offsetLeftAndRight(childLeft - child.getLeft());
child.offsetTopAndBottom(childTop - child.getTop());
}
if (mCachingStarted) {
child.setDrawingCacheEnabled(true);
}
}
