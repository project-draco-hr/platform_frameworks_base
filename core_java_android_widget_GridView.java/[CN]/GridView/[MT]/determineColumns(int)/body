{
  final int requestedHorizontalSpacing=mRequestedHorizontalSpacing;
  final int stretchMode=mStretchMode;
  final int requestedColumnWidth=mRequestedColumnWidth;
  if (mRequestedNumColumns == AUTO_FIT) {
    if (requestedColumnWidth > 0) {
      mNumColumns=(availableSpace + requestedHorizontalSpacing) / (requestedColumnWidth + requestedHorizontalSpacing);
    }
 else {
      mNumColumns=2;
    }
  }
 else {
    mNumColumns=mRequestedNumColumns;
  }
  if (mNumColumns <= 0) {
    mNumColumns=1;
  }
switch (stretchMode) {
case NO_STRETCH:
    mColumnWidth=requestedColumnWidth;
  mHorizontalSpacing=requestedHorizontalSpacing;
break;
default :
int spaceLeftOver=availableSpace - (mNumColumns * requestedColumnWidth) - ((mNumColumns - 1) * requestedHorizontalSpacing);
switch (stretchMode) {
case STRETCH_COLUMN_WIDTH:
mColumnWidth=requestedColumnWidth + spaceLeftOver / mNumColumns;
mHorizontalSpacing=requestedHorizontalSpacing;
break;
case STRETCH_SPACING:
mColumnWidth=requestedColumnWidth;
if (mNumColumns > 1) {
mHorizontalSpacing=requestedHorizontalSpacing + spaceLeftOver / (mNumColumns - 1);
}
 else {
mHorizontalSpacing=requestedHorizontalSpacing + spaceLeftOver;
}
break;
case STRETCH_SPACING_UNIFORM:
mColumnWidth=requestedColumnWidth;
if (mNumColumns > 1) {
mHorizontalSpacing=requestedHorizontalSpacing + spaceLeftOver / (mNumColumns + 1);
}
 else {
mHorizontalSpacing=requestedHorizontalSpacing + spaceLeftOver;
}
break;
}
break;
}
}
