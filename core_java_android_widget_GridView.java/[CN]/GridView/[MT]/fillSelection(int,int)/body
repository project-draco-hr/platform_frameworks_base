{
  final int selectedPosition=reconcileSelectedPosition();
  final int numColumns=mNumColumns;
  final int verticalSpacing=mVerticalSpacing;
  int rowStart;
  int rowEnd=-1;
  if (!mStackFromBottom) {
    rowStart=selectedPosition - (selectedPosition % numColumns);
  }
 else {
    final int invertedSelection=mItemCount - 1 - selectedPosition;
    rowEnd=mItemCount - 1 - (invertedSelection - (invertedSelection % numColumns));
    rowStart=Math.max(0,rowEnd - numColumns + 1);
  }
  final int fadingEdgeLength=getVerticalFadingEdgeLength();
  final int topSelectionPixel=getTopSelectionPixel(childrenTop,fadingEdgeLength,rowStart);
  final View sel=makeRow(mStackFromBottom ? rowEnd : rowStart,topSelectionPixel,true);
  mFirstPosition=rowStart;
  final View referenceView=mReferenceView;
  if (!mStackFromBottom) {
    fillDown(rowStart + numColumns,referenceView.getBottom() + verticalSpacing);
    pinToBottom(childrenBottom);
    fillUp(rowStart - numColumns,referenceView.getTop() - verticalSpacing);
    adjustViewsUpOrDown();
  }
 else {
    final int bottomSelectionPixel=getBottomSelectionPixel(childrenBottom,fadingEdgeLength,numColumns,rowStart);
    final int offset=bottomSelectionPixel - referenceView.getBottom();
    offsetChildrenTopAndBottom(offset);
    fillUp(rowStart - 1,referenceView.getTop() - verticalSpacing);
    pinToTop(childrenTop);
    fillDown(rowEnd + numColumns,referenceView.getBottom() + verticalSpacing);
    adjustViewsUpOrDown();
  }
  return sel;
}
