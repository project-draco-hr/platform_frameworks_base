{
  int selectedPosition=mSelectedPosition;
  int numColumns=mNumColumns;
  int count=mItemCount;
  int startOfRow;
  int endOfRow;
  if (!mStackFromBottom) {
    startOfRow=(selectedPosition / numColumns) * numColumns;
    endOfRow=Math.min(startOfRow + numColumns - 1,count - 1);
  }
 else {
    int invertedSelection=count - 1 - selectedPosition;
    endOfRow=count - 1 - (invertedSelection / numColumns) * numColumns;
    startOfRow=Math.max(0,endOfRow - numColumns + 1);
  }
  boolean moved=false;
  boolean showScroll=false;
switch (direction) {
case FOCUS_FORWARD:
    if (selectedPosition < count - 1) {
      mLayoutMode=LAYOUT_MOVE_SELECTION;
      setSelectionInt(selectedPosition + 1);
      moved=true;
      showScroll=selectedPosition == endOfRow;
    }
  break;
case FOCUS_BACKWARD:
if (selectedPosition > 0) {
  mLayoutMode=LAYOUT_MOVE_SELECTION;
  setSelectionInt(selectedPosition - 1);
  moved=true;
  showScroll=selectedPosition == startOfRow;
}
break;
}
if (moved) {
playSoundEffect(SoundEffectConstants.getContantForFocusDirection(direction));
invokeOnItemScrollListener();
}
if (showScroll) {
awakenScrollBars();
}
return moved;
}
