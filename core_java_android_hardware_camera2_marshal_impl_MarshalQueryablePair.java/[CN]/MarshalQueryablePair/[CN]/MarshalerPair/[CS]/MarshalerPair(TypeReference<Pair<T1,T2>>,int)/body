{
  super(MarshalQueryablePair.this,typeReference,nativeType);
  mClass=typeReference.getRawType();
  ParameterizedType paramType;
  try {
    paramType=(ParameterizedType)typeReference.getType();
  }
 catch (  ClassCastException e) {
    throw new AssertionError("Raw use of Pair is not supported",e);
  }
{
    Type actualTypeArgument=paramType.getActualTypeArguments()[0];
    TypeReference<?> actualTypeArgToken=TypeReference.createSpecializedTypeReference(actualTypeArgument);
    mNestedTypeMarshalerFirst=(Marshaler<T1>)MarshalRegistry.getMarshaler(actualTypeArgToken,mNativeType);
  }
{
    Type actualTypeArgument=paramType.getActualTypeArguments()[1];
    TypeReference<?> actualTypeArgToken=TypeReference.createSpecializedTypeReference(actualTypeArgument);
    mNestedTypeMarshalerSecond=(Marshaler<T2>)MarshalRegistry.getMarshaler(actualTypeArgToken,mNativeType);
  }
  try {
    mConstructor=(Constructor<Pair<T1,T2>>)mClass.getConstructor(Object.class,Object.class);
  }
 catch (  NoSuchMethodException e) {
    throw new AssertionError(e);
  }
}
