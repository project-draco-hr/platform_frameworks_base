{
  super(bits,IndexColorModel.createBits(hasalpha || (trans >= 0)),ColorSpace.getInstance(ColorSpace.CS_sRGB),(hasalpha || (trans >= 0)),false,Transparency.OPAQUE,validateTransferType(ColorModel.getTransferType(bits)));
  if (size < 1) {
    throw new IllegalArgumentException(Messages.getString("awt.264"));
  }
  mapSize=size;
  colorMap=new int[mapSize];
  transparentIndex=-1;
  transparency=Transparency.OPAQUE;
  int alpha=0xff000000;
  for (int i=0; i < mapSize; i++) {
    colorMap[i]=(cmap[start++] & 0xff) << 16 | (cmap[start++] & 0xff) << 8 | (cmap[start++] & 0xff);
    if (trans == i) {
      if (transparency == Transparency.OPAQUE) {
        transparency=Transparency.BITMASK;
      }
      if (hasalpha) {
        start++;
      }
      continue;
    }
    if (hasalpha) {
      alpha=cmap[start++] & 0xff;
      if (alpha == 0) {
        if (transparency == Transparency.OPAQUE) {
          transparency=Transparency.BITMASK;
          if (trans < 0) {
            trans=i;
          }
        }
      }
 else {
        if (alpha != 0xff && transparency != Transparency.TRANSLUCENT) {
          transparency=Transparency.TRANSLUCENT;
        }
      }
      alpha<<=24;
    }
    colorMap[i]|=alpha;
  }
  if (trans >= 0 && trans < mapSize) {
    transparentIndex=trans;
  }
  checkPalette();
}
