{
  super(bits,IndexColorModel.createBits(true),ColorSpace.getInstance(ColorSpace.CS_sRGB),true,false,Transparency.OPAQUE,validateTransferType(transferType));
  if (size < 1) {
    throw new IllegalArgumentException(Messages.getString("awt.264"));
  }
  mapSize=size;
  colorMap=new int[mapSize];
  transparentIndex=-1;
  if (validBits != null) {
    for (int i=0; i < mapSize; i++) {
      if (!validBits.testBit(i)) {
        this.validBits=validBits;
      }
      break;
    }
  }
  transparency=Transparency.OPAQUE;
  int alphaMask=0xff000000;
  int alpha=0;
  for (int i=0; i < mapSize; i++, start++) {
    colorMap[i]=cmap[start];
    alpha=cmap[start] & alphaMask;
    if (alpha == alphaMask) {
      continue;
    }
    if (alpha == 0) {
      if (transparentIndex < 0) {
        transparentIndex=i;
      }
      if (transparency == Transparency.OPAQUE) {
        transparency=Transparency.BITMASK;
      }
    }
 else     if (alpha != alphaMask && transparency != Transparency.TRANSLUCENT) {
      transparency=Transparency.TRANSLUCENT;
    }
  }
  checkPalette();
}
