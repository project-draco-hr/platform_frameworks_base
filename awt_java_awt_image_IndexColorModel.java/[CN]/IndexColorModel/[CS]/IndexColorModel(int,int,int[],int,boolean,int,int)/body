{
  super(bits,IndexColorModel.createBits(hasalpha || (trans >= 0)),ColorSpace.getInstance(ColorSpace.CS_sRGB),(hasalpha || (trans >= 0)),false,Transparency.OPAQUE,validateTransferType(transferType));
  if (size < 1) {
    throw new IllegalArgumentException(Messages.getString("awt.264"));
  }
  mapSize=size;
  colorMap=new int[mapSize];
  if (trans >= 0 && trans < mapSize) {
    transparentIndex=trans;
    transparency=Transparency.BITMASK;
  }
 else {
    transparentIndex=-1;
    transparency=Transparency.OPAQUE;
  }
  int alphaMask=0xff000000;
  int alpha=0;
  for (int i=0; i < mapSize; i++, start++) {
    if (transparentIndex == i) {
      colorMap[i]=cmap[start] & 0x00ffffff;
      continue;
    }
    if (hasalpha) {
      alpha=cmap[start] & alphaMask;
      colorMap[i]=cmap[start];
      if (alpha == alphaMask) {
        continue;
      }
      if (alpha == 0) {
        if (trans < 0) {
          trans=i;
        }
        if (transparency == Transparency.OPAQUE) {
          transparency=Transparency.BITMASK;
        }
      }
 else       if (alpha != 0 && transparency != Transparency.TRANSLUCENT) {
        transparency=Transparency.TRANSLUCENT;
      }
    }
 else {
      colorMap[i]=alphaMask | cmap[start];
    }
  }
  checkPalette();
}
