{
switch (code) {
case NetdResponseCode.InterfaceChange:
    if (cooked.length < 4 || !cooked[1].equals("Iface")) {
      throw new IllegalStateException(String.format("Invalid event from daemon (%s)",raw));
    }
  if (cooked[2].equals("added")) {
    notifyInterfaceAdded(cooked[3]);
    return true;
  }
 else   if (cooked[2].equals("removed")) {
    notifyInterfaceRemoved(cooked[3]);
    return true;
  }
 else   if (cooked[2].equals("changed") && cooked.length == 5) {
    notifyInterfaceStatusChanged(cooked[3],cooked[4].equals("up"));
    return true;
  }
 else   if (cooked[2].equals("linkstate") && cooked.length == 5) {
    notifyInterfaceLinkStateChanged(cooked[3],cooked[4].equals("up"));
    return true;
  }
throw new IllegalStateException(String.format("Invalid event from daemon (%s)",raw));
case NetdResponseCode.BandwidthControl:
if (cooked.length < 5 || !cooked[1].equals("limit")) {
throw new IllegalStateException(String.format("Invalid event from daemon (%s)",raw));
}
if (cooked[2].equals("alert")) {
notifyLimitReached(cooked[3],cooked[4]);
return true;
}
throw new IllegalStateException(String.format("Invalid event from daemon (%s)",raw));
case NetdResponseCode.InterfaceClassActivity:
if (cooked.length < 4 || !cooked[1].equals("IfaceClass")) {
throw new IllegalStateException(String.format("Invalid event from daemon (%s)",raw));
}
boolean isActive=cooked[2].equals("active");
notifyInterfaceClassActivity(cooked[3],isActive);
return true;
case NetdResponseCode.InterfaceAddressChange:
String msg=String.format("Invalid event from daemon (%s)",raw);
if (cooked.length < 6 || !cooked[1].equals("Address")) {
throw new IllegalStateException(msg);
}
int flags;
int scope;
try {
flags=Integer.parseInt(cooked[5]);
scope=Integer.parseInt(cooked[6]);
}
 catch (NumberFormatException e) {
throw new IllegalStateException(msg);
}
if (cooked[2].equals("updated")) {
notifyAddressUpdated(cooked[3],cooked[4],flags,scope);
}
 else {
notifyAddressRemoved(cooked[3],cooked[4],flags,scope);
}
return true;
default :
break;
}
return false;
}
