{
  mContext.enforceCallingOrSelfPermission(MANAGE_NETWORK_POLICY,TAG);
synchronized (mUidRejectOnQuota) {
    final boolean oldRejectOnQuota=mUidRejectOnQuota.get(uid,false);
    if (oldRejectOnQuota == rejectOnQuotaInterfaces) {
      return;
    }
    final StringBuilder command=new StringBuilder();
    command.append("bandwidth");
    if (rejectOnQuotaInterfaces) {
      command.append(" addnaughtyapps");
    }
 else {
      command.append(" removenaughtyapps");
    }
    command.append(" ").append(uid);
    try {
      mConnector.doCommand(command.toString());
      if (rejectOnQuotaInterfaces) {
        mUidRejectOnQuota.put(uid,true);
      }
 else {
        mUidRejectOnQuota.delete(uid);
      }
    }
 catch (    NativeDaemonConnectorException e) {
      throw new IllegalStateException("Error communicating to native daemon",e);
    }
  }
}
