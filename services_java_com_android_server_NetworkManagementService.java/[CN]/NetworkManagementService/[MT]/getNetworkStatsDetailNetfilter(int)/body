{
  final NetworkStats stats=new NetworkStats(SystemClock.elapsedRealtime(),24);
  final NetworkStats.Entry entry=new NetworkStats.Entry();
  final HashSet<String> knownLines=Sets.newHashSet();
  final ArrayList<String> keys=Lists.newArrayList();
  final ArrayList<String> values=Lists.newArrayList();
  final HashMap<String,String> parsed=Maps.newHashMap();
  BufferedReader reader=null;
  try {
    reader=new BufferedReader(new FileReader(mStatsXtUid));
    String line=reader.readLine();
    splitLine(line,keys);
    while ((line=reader.readLine()) != null) {
      splitLine(line,values);
      parseLine(keys,values,parsed);
      if (!knownLines.add(line)) {
        throw new IllegalStateException("encountered duplicate proc entry");
      }
      try {
        entry.iface=parsed.get(KEY_IFACE);
        entry.tag=kernelToTag(parsed.get(KEY_TAG_HEX));
        entry.uid=getParsedInt(parsed,KEY_UID);
        entry.rxBytes=getParsedLong(parsed,KEY_RX_BYTES);
        entry.rxPackets=getParsedLong(parsed,KEY_RX_PACKETS);
        entry.txBytes=getParsedLong(parsed,KEY_TX_BYTES);
        entry.txPackets=getParsedLong(parsed,KEY_TX_PACKETS);
        if (limitUid == UID_ALL || limitUid == entry.uid) {
          stats.addValues(entry);
        }
      }
 catch (      NumberFormatException e) {
        Slog.w(TAG,"problem parsing stats row '" + line + "': "+ e);
      }
    }
  }
 catch (  IOException e) {
    Slog.w(TAG,"problem parsing stats: " + e);
  }
 finally {
    IoUtils.closeQuietly(reader);
  }
  return stats;
}
