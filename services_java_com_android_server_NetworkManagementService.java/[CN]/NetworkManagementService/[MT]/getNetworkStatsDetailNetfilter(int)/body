{
  final NetworkStats stats=new NetworkStats(SystemClock.elapsedRealtime(),24);
  final NetworkStats.Entry entry=new NetworkStats.Entry();
  final HashSet<String> knownLines=Sets.newHashSet();
  int lastIdx=0;
  final ArrayList<String> keys=Lists.newArrayList();
  final ArrayList<String> values=Lists.newArrayList();
  final HashMap<String,String> parsed=Maps.newHashMap();
  BufferedReader reader=null;
  String line=null;
  try {
    reader=new BufferedReader(new FileReader(mStatsXtUid));
    line=reader.readLine();
    splitLine(line,keys);
    while ((line=reader.readLine()) != null) {
      splitLine(line,values);
      parseLine(keys,values,parsed);
      if (!knownLines.add(line)) {
        throw new IllegalStateException("duplicate proc entry: " + line);
      }
      final int idx=getParsedInt(parsed,KEY_IDX);
      if (idx > lastIdx + 1) {
        throw new IllegalStateException("inconsistent idx=" + idx + " after lastIdx="+ lastIdx);
      }
      lastIdx=idx;
      entry.iface=parsed.get(KEY_IFACE);
      entry.uid=getParsedInt(parsed,KEY_UID);
      entry.set=getParsedInt(parsed,KEY_COUNTER_SET);
      entry.tag=kernelToTag(parsed.get(KEY_TAG_HEX));
      entry.rxBytes=getParsedLong(parsed,KEY_RX_BYTES);
      entry.rxPackets=getParsedLong(parsed,KEY_RX_PACKETS);
      entry.txBytes=getParsedLong(parsed,KEY_TX_BYTES);
      entry.txPackets=getParsedLong(parsed,KEY_TX_PACKETS);
      if (limitUid == UID_ALL || limitUid == entry.uid) {
        stats.addValues(entry);
      }
    }
  }
 catch (  NullPointerException e) {
    throw new IllegalStateException("problem parsing line: " + line,e);
  }
catch (  NumberFormatException e) {
    throw new IllegalStateException("problem parsing line: " + line,e);
  }
catch (  IOException e) {
    throw new IllegalStateException("problem parsing line: " + line,e);
  }
 finally {
    IoUtils.closeQuietly(reader);
  }
  return stats;
}
