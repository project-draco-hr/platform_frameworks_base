{
  final NetworkStats stats=new NetworkStats(SystemClock.elapsedRealtime(),24);
  final ArrayList<String> keys=Lists.newArrayList();
  final ArrayList<String> values=Lists.newArrayList();
  final HashMap<String,String> parsed=Maps.newHashMap();
  BufferedReader reader=null;
  try {
    reader=new BufferedReader(new FileReader(mProcStatsNetfilter));
    String line=reader.readLine();
    splitLine(line,keys);
    while ((line=reader.readLine()) != null) {
      splitLine(line,values);
      parseLine(keys,values,parsed);
      try {
        final String iface=parsed.get(KEY_IFACE);
        final int tag=NetworkManagementSocketTagger.kernelToTag(parsed.get(KEY_TAG_HEX));
        final int uid=Integer.parseInt(parsed.get(KEY_UID));
        final long rx=Long.parseLong(parsed.get(KEY_RX));
        final long tx=Long.parseLong(parsed.get(KEY_TX));
        if (limitUid == UID_ALL || limitUid == uid) {
          stats.addEntry(iface,uid,tag,rx,tx);
        }
      }
 catch (      NumberFormatException e) {
        Slog.w(TAG,"problem parsing stats row '" + line + "': "+ e);
      }
    }
  }
 catch (  IOException e) {
    Slog.w(TAG,"problem parsing stats: " + e);
  }
 finally {
    IoUtils.closeQuietly(reader);
  }
  return stats;
}
