{
  ColorModel cm=null;
  int bmModel=5;
  cmap=null;
switch (bmModel) {
case 1:
    colorType=PNG_COLOR_TYPE_GRAY;
  bitDepth=1;
break;
case 2:
colorType=PNG_COLOR_TYPE_GRAY_ALPHA;
bitDepth=8;
break;
case 3:
case 4:
case 5:
colorType=bm.hasAlpha() ? PNG_COLOR_TYPE_RGBA : PNG_COLOR_TYPE_RGB;
bitDepth=8;
break;
default :
throw new IllegalArgumentException(Messages.getString("awt.3C"));
}
switch (colorType) {
case PNG_COLOR_TYPE_GRAY:
{
if (bitDepth != 8 && bitDepth != 4 && bitDepth != 2 && bitDepth != 1) {
throw new IllegalArgumentException(Messages.getString("awt.3C"));
}
int numEntries=1 << bitDepth;
int scaleFactor=255 / (numEntries - 1);
byte comps[]=new byte[numEntries];
for (int i=0; i < numEntries; i++) {
comps[i]=(byte)(i * scaleFactor);
}
cm=new IndexColorModel(bitDepth,numEntries,comps,comps,comps);
transferInts=false;
break;
}
case PNG_COLOR_TYPE_RGB:
{
if (bitDepth != 8) {
throw new IllegalArgumentException(Messages.getString("awt.3C"));
}
cm=new DirectColorModel(24,0xff0000,0xFF00,0xFF);
transferInts=true;
break;
}
case PNG_COLOR_TYPE_PLTE:
{
if (bitDepth != 8 && bitDepth != 4 && bitDepth != 2 && bitDepth != 1) {
throw new IllegalArgumentException(Messages.getString("awt.3C"));
}
if (cmap == null) {
throw new IllegalStateException("Palette color type is not supported");
}
cm=new IndexColorModel(bitDepth,cmap.length / 3,cmap,0,false);
transferInts=false;
break;
}
case PNG_COLOR_TYPE_GRAY_ALPHA:
{
if (bitDepth != 8) {
throw new IllegalArgumentException(Messages.getString("awt.3C"));
}
cm=new ComponentColorModel(ColorSpace.getInstance(ColorSpace.CS_GRAY),true,false,Transparency.TRANSLUCENT,DataBuffer.TYPE_BYTE);
transferInts=false;
dataElementsPerPixel=2;
break;
}
case PNG_COLOR_TYPE_RGBA:
{
if (bitDepth != 8) {
throw new IllegalArgumentException(Messages.getString("awt.3C"));
}
cm=ColorModel.getRGBdefault();
transferInts=true;
break;
}
default :
throw new IllegalArgumentException(Messages.getString("awt.3C"));
}
return cm;
}
