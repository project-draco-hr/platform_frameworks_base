{
  if (!UserManager.supportsMultipleUsers()) {
    return;
  }
  UserManager um=(UserManager)mContext.getSystemService(Context.USER_SERVICE);
  if (um == null) {
    Throwable t=new Throwable();
    t.fillInStackTrace();
    Log.e(TAG,"user service is null.",t);
    return;
  }
  List<UserInfo> users=um.getUsers(true);
  if (users == null) {
    Throwable t=new Throwable();
    t.fillInStackTrace();
    Log.e(TAG,"list of users is null.",t);
    return;
  }
  if (users.size() > 1) {
    View multiUserView=findViewById(R.id.keyguard_user_selector);
    if (multiUserView instanceof KeyguardMultiUserSelectorView) {
      KeyguardMultiUserSelectorView multiUser=(KeyguardMultiUserSelectorView)multiUserView;
      multiUser.setVisibility(View.VISIBLE);
      multiUser.addUsers(users);
      UserSwitcherCallback callback=new UserSwitcherCallback(){
        @Override public void hideSecurityView(        int duration){
          mSecurityViewContainer.animate().alpha(0).setDuration(duration);
        }
        @Override public void showSecurityView(){
          mSecurityViewContainer.setAlpha(1.0f);
        }
        @Override public void showUnlockHint(){
          if (mKeyguardSelectorView != null) {
            mKeyguardSelectorView.showUsabilityHint();
          }
        }
        @Override public void userActivity(){
          if (mViewMediatorCallback != null) {
            mViewMediatorCallback.userActivity();
          }
        }
      }
;
      multiUser.setCallback(callback);
    }
 else {
      Throwable t=new Throwable();
      t.fillInStackTrace();
      if (multiUserView == null) {
        Log.e(TAG,"could not find the user_selector.",t);
      }
 else {
        Log.e(TAG,"user_selector is the wrong type.",t);
      }
    }
  }
}
