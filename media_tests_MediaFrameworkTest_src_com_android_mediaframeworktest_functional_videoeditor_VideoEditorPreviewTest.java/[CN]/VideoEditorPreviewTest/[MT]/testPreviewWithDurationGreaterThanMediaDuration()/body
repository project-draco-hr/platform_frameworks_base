{
  final String videoItemFileName=INPUT_FILE_PATH + "H264_BP_640x480_30fps_192kbps_1_5.mp4";
  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;
  boolean flagForException=false;
  final Semaphore blockTillPreviewCompletes=new Semaphore(1);
  final MediaVideoItem mediaVideoItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFileName,renderingMode);
  try {
    mediaVideoItem1.setExtractBoundaries(0,20000);
  }
 catch (  Exception e) {
    assertTrue("Exception during setExtract Boundaries",false);
  }
  mVideoEditor.addMediaItem(mediaVideoItem1);
  final SurfaceHolder surfaceHolder=MediaFrameworkTest.mSurfaceView.getHolder();
  long waitingTime=minWaitingTime + (mVideoEditor.getDuration() - 30000);
  if (waitingTime < 0) {
    waitingTime=minWaitingTime;
  }
  blockTillPreviewCompletes.acquire();
  try {
    mVideoEditor.startPreview(surfaceHolder,30000,-1,true,1,new PreviewProgressListener(){
      public void onProgress(      VideoEditor videoEditor,      long timeMs,      OverlayData overlayData){
      }
      public void onStart(      VideoEditor videoEditor){
        setPreviewStart();
      }
      public void onStop(      VideoEditor videoEditor){
        setPreviewStop();
        blockTillPreviewCompletes.release();
      }
      public void onError(      VideoEditor videoEditor,      int error){
        setPreviewError();
        blockTillPreviewCompletes.release();
      }
    }
);
  }
 catch (  IllegalArgumentException e) {
    blockTillPreviewCompletes.release();
    flagForException=true;
  }
  blockTillPreviewCompletes.tryAcquire(waitingTime,TimeUnit.MILLISECONDS);
  assertTrue("Expected Error in Preview",flagForException);
  mVideoEditor.stopPreview();
  blockTillPreviewCompletes.release();
}
