{
  final String videoItemFileName=INPUT_FILE_PATH + "H264_BP_640x480_30fps_192kbps_1_5.mp4";
  final Semaphore blockTillPreviewCompletes=new Semaphore(1);
  previewStart=false;
  previewStop=false;
  previewError=false;
  final MediaVideoItem mediaVideoItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFileName,MediaItem.RENDERING_MODE_BLACK_BORDER);
  mediaVideoItem1.setExtractBoundaries(0,20000);
  mVideoEditor.addMediaItem(mediaVideoItem1);
  mVideoEditor.generatePreview(new MediaProcessingProgressListener(){
    public void onProgress(    Object item,    int action,    int progress){
    }
  }
);
  long waitingTime=minWaitingTime + mVideoEditor.getDuration();
  blockTillPreviewCompletes.acquire();
  final String fileName=mVideoEditor.getPath() + "\test.3gp";
  final int height=MediaProperties.HEIGHT_480;
  final int bitrate=MediaProperties.BITRATE_512K;
  try {
    mVideoEditor.export(fileName,height,bitrate,new ExportProgressListener(){
      public void onProgress(      VideoEditor ve,      String outFileName,      int progress){
      }
    }
);
  }
 catch (  IOException e) {
    assertTrue("UnExpected Error in Export" + e.toString(),false);
  }
  final SurfaceHolder surfaceHolder=MediaFrameworkTest.mSurfaceView.getHolder();
  try {
    mVideoEditor.startPreview(surfaceHolder,5000,-1,false,1,new PreviewProgressListener(){
      public void onProgress(      VideoEditor videoEditor,      long timeMs,      OverlayData overlayData){
      }
      public void onStart(      VideoEditor videoEditor){
        setPreviewStart();
      }
      public void onStop(      VideoEditor videoEditor){
        setPreviewStop();
        blockTillPreviewCompletes.release();
      }
      public void onError(      VideoEditor videoEditor,      int error){
        setPreviewError();
        blockTillPreviewCompletes.release();
      }
    }
);
  }
 catch (  Exception e) {
    blockTillPreviewCompletes.release();
  }
  blockTillPreviewCompletes.tryAcquire(waitingTime,TimeUnit.MILLISECONDS);
  mVideoEditor.stopPreview();
  assertTrue("Preview Failed to start",previewStart);
  assertTrue("Preview Failed to stop",previewStop);
  assertFalse("Preview Error occurred",previewError);
  blockTillPreviewCompletes.release();
}
