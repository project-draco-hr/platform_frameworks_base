{
  if (logger == null) {
    logger=sDefaultLogger;
  }
synchronized (sDefaultLogger) {
    sLogger=logger;
  }
  Map<IStyleResourceValue,IStyleResourceValue> styleParentMap=new HashMap<IStyleResourceValue,IStyleResourceValue>();
  IStyleResourceValue currentTheme=computeStyleMaps(themeName,isProjectTheme,projectResources.get(BridgeConstants.RES_STYLE),frameworkResources.get(BridgeConstants.RES_STYLE),styleParentMap);
  BridgeContext context=null;
  try {
    DisplayMetrics metrics=new DisplayMetrics();
    metrics.density=density / (float)DisplayMetrics.DENSITY_DEFAULT;
    metrics.scaledDensity=metrics.density;
    metrics.widthPixels=screenWidth;
    metrics.heightPixels=screenHeight;
    metrics.xdpi=xdpi;
    metrics.ydpi=ydpi;
    context=new BridgeContext(projectKey,metrics,currentTheme,projectResources,frameworkResources,styleParentMap,customViewLoader,logger);
    BridgeInflater inflater=new BridgeInflater(context,customViewLoader);
    context.setBridgeInflater(inflater);
    IResourceValue windowBackground=null;
    int screenOffset=0;
    if (currentTheme != null) {
      windowBackground=context.findItemInStyle(currentTheme,"windowBackground");
      windowBackground=context.resolveResValue(windowBackground);
      screenOffset=getScreenOffset(frameworkResources,currentTheme,context);
    }
    if (Looper.myLooper() == null) {
      Looper.prepare();
    }
    BridgeXmlBlockParser parser=new BridgeXmlBlockParser(layoutDescription,context,false);
    ViewGroup root=new FrameLayout(context);
    View view=inflater.inflate(parser,root);
    postInflateProcess(view,customViewLoader);
    AttachInfo info=new AttachInfo(new WindowSession(),new Window(),new Handler(),null);
    info.mHasWindowFocus=true;
    info.mWindowVisibility=View.VISIBLE;
    info.mInTouchMode=false;
    root.dispatchAttachedToWindow(info,0);
    if (windowBackground != null) {
      Drawable d=ResourceHelper.getDrawable(windowBackground.getValue(),context,true);
      root.setBackgroundDrawable(d);
    }
    int w_spec, h_spec;
    if (renderFullSize) {
      w_spec=MeasureSpec.makeMeasureSpec(screenWidth,MeasureSpec.UNSPECIFIED);
      h_spec=MeasureSpec.makeMeasureSpec(screenHeight - screenOffset,MeasureSpec.UNSPECIFIED);
      view.measure(w_spec,h_spec);
      int neededWidth=root.getChildAt(0).getMeasuredWidth();
      if (neededWidth > screenWidth) {
        screenWidth=neededWidth;
      }
      int neededHeight=root.getChildAt(0).getMeasuredHeight();
      if (neededHeight > screenHeight - screenOffset) {
        screenHeight=neededHeight + screenOffset;
      }
    }
    w_spec=MeasureSpec.makeMeasureSpec(screenWidth,MeasureSpec.EXACTLY);
    h_spec=MeasureSpec.makeMeasureSpec(screenHeight - screenOffset,MeasureSpec.EXACTLY);
    view.measure(w_spec,h_spec);
    view.layout(0,screenOffset,screenWidth,screenHeight);
    Canvas canvas=new Canvas(screenWidth,screenHeight - screenOffset,logger);
    root.draw(canvas);
    canvas.dispose();
    return new LayoutResult(visit(((ViewGroup)view).getChildAt(0),context),canvas.getImage());
  }
 catch (  PostInflateException e) {
    return new LayoutResult(ILayoutResult.ERROR,"Error during post inflation process:\n" + e.getMessage());
  }
catch (  Throwable e) {
    Throwable t=e;
    while (t.getCause() != null) {
      t=t.getCause();
    }
    logger.error(t);
    return new LayoutResult(ILayoutResult.ERROR,t.getClass().getSimpleName() + ": " + t.getMessage());
  }
 finally {
    BridgeResources.clearSystem();
    BridgeAssetManager.clearSystem();
synchronized (sDefaultLogger) {
      sLogger=sDefaultLogger;
    }
  }
}
