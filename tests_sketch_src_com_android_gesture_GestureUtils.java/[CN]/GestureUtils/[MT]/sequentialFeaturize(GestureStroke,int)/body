{
  final float increment=stroke.length / (sampleSize - 1);
  int vectorLength=sampleSize * 2;
  float[] vector=new float[vectorLength];
  float distanceSoFar=0;
  float[] xpts=stroke.xPoints;
  float[] ypts=stroke.yPoints;
  float lstPointX=xpts[0];
  float lstPointY=ypts[0];
  int index=0;
  float currentPointX=Float.MIN_VALUE;
  float currentPointY=Float.MIN_VALUE;
  vector[index]=lstPointX;
  index++;
  vector[index]=lstPointY;
  index++;
  int i=0;
  int count=xpts.length;
  while (i < count) {
    if (currentPointX == Float.MIN_VALUE) {
      i++;
      if (i >= count) {
        break;
      }
      currentPointX=xpts[i];
      currentPointY=ypts[i];
    }
    float deltaX=currentPointX - lstPointX;
    float deltaY=currentPointY - lstPointY;
    float distance=(float)Math.sqrt(deltaX * deltaX + deltaY * deltaY);
    if (distanceSoFar + distance >= increment) {
      float ratio=(increment - distanceSoFar) / distance;
      float nx=lstPointX + ratio * deltaX;
      float ny=lstPointY + ratio * deltaY;
      vector[index]=nx;
      index++;
      vector[index]=ny;
      index++;
      lstPointX=nx;
      lstPointY=ny;
      distanceSoFar=0;
    }
 else {
      lstPointX=currentPointX;
      lstPointY=currentPointY;
      currentPointX=Float.MIN_VALUE;
      currentPointY=Float.MIN_VALUE;
      distanceSoFar+=distance;
    }
  }
  for (i=index; i < vectorLength; i+=2) {
    vector[i]=lstPointX;
    vector[i + 1]=lstPointY;
  }
  return vector;
}
