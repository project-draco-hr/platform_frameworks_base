{
  if ((mFadingMode & OUT) != OUT) {
    return null;
  }
  View view;
  View startView=(startValues != null) ? startValues.view : null;
  View endView=(endValues != null) ? endValues.view : null;
  if (DBG) {
    Log.d(LOG_TAG,"Fade.predisappear: startView, startVis, endView, endVis = " + startView + ", "+ startVisibility+ ", "+ endView+ ", "+ endVisibility);
  }
  View overlayView=null;
  View viewToKeep=null;
  if (endView == null || endView.getParent() == null) {
    view=startView;
    overlayView=view;
  }
 else {
    if (endVisibility == View.INVISIBLE) {
      view=endView;
      viewToKeep=view;
    }
 else {
      if (startView == endView) {
        view=endView;
        viewToKeep=view;
      }
 else {
        view=startView;
        overlayView=view;
      }
    }
  }
  final int finalVisibility=endVisibility;
  if (overlayView != null) {
    int screenX=(Integer)startValues.values.get(PROPNAME_SCREEN_X);
    int screenY=(Integer)startValues.values.get(PROPNAME_SCREEN_Y);
    int[] loc=new int[2];
    sceneRoot.getLocationOnScreen(loc);
    overlayView.offsetLeftAndRight((screenX - loc[0]) - overlayView.getLeft());
    overlayView.offsetTopAndBottom((screenY - loc[1]) - overlayView.getTop());
    sceneRoot.getOverlay().add(overlayView);
    final float startAlpha=view.getAlpha();
    float endAlpha=0;
    final View finalView=view;
    final View finalOverlayView=overlayView;
    final View finalViewToKeep=viewToKeep;
    final ViewGroup finalSceneRoot=sceneRoot;
    final AnimatorListenerAdapter endListener=new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        finalView.setAlpha(startAlpha);
        if (finalViewToKeep != null) {
          finalViewToKeep.setVisibility(finalVisibility);
        }
        if (finalOverlayView != null) {
          finalSceneRoot.getOverlay().remove(finalOverlayView);
        }
      }
      @Override public void onAnimationPause(      Animator animation){
        if (finalOverlayView != null) {
          finalSceneRoot.getOverlay().remove(finalOverlayView);
        }
      }
      @Override public void onAnimationResume(      Animator animation){
        if (finalOverlayView != null) {
          finalSceneRoot.getOverlay().add(finalOverlayView);
        }
      }
    }
;
    return createAnimation(view,startAlpha,endAlpha,endListener);
  }
  if (viewToKeep != null) {
    viewToKeep.setVisibility((View.VISIBLE));
    final float startAlpha=view.getAlpha();
    float endAlpha=0;
    final View finalView=view;
    final View finalOverlayView=overlayView;
    final View finalViewToKeep=viewToKeep;
    final ViewGroup finalSceneRoot=sceneRoot;
    final AnimatorListenerAdapter endListener=new AnimatorListenerAdapter(){
      boolean mCanceled=false;
      float mPausedAlpha=-1;
      @Override public void onAnimationPause(      Animator animation){
        if (finalViewToKeep != null && !mCanceled) {
          finalViewToKeep.setVisibility(finalVisibility);
        }
        mPausedAlpha=finalView.getAlpha();
        finalView.setAlpha(startAlpha);
      }
      @Override public void onAnimationResume(      Animator animation){
        if (finalViewToKeep != null && !mCanceled) {
          finalViewToKeep.setVisibility(View.VISIBLE);
        }
        finalView.setAlpha(mPausedAlpha);
      }
      @Override public void onAnimationCancel(      Animator animation){
        mCanceled=true;
        if (mPausedAlpha >= 0) {
          finalView.setAlpha(mPausedAlpha);
        }
      }
      @Override public void onAnimationEnd(      Animator animation){
        if (!mCanceled) {
          finalView.setAlpha(startAlpha);
        }
        if (finalViewToKeep != null && !mCanceled) {
          finalViewToKeep.setVisibility(finalVisibility);
        }
        if (finalOverlayView != null) {
          finalSceneRoot.getOverlay().remove(finalOverlayView);
        }
      }
    }
;
    return createAnimation(view,startAlpha,endAlpha,endListener);
  }
  return null;
}
