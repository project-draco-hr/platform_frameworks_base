{
  PropertyNode propertyNode=new PropertyNode();
  String trimed=encodedString.trim();
  if (trimed.length() == 0) {
    return propertyNode;
  }
  String[] elems=trimed.split("],");
  for (  String elem : elems) {
    int index=elem.indexOf('[');
    String name=elem.substring(0,index - 1);
    Pattern pattern=Pattern.compile("(?<!\\\\),");
    String[] values=pattern.split(elem.substring(index + 1),-1);
    if (name.equals("propName")) {
      propertyNode.propName=values[0];
    }
 else     if (name.equals("propGroupSet")) {
      for (      String value : values) {
        propertyNode.propGroupSet.add(value);
      }
    }
 else     if (name.equals("paramMap")) {
      ContentValues paramMap=propertyNode.paramMap;
      Set<String> paramMap_TYPE=propertyNode.paramMap_TYPE;
      for (      String value : values) {
        String[] tmp=value.split("=",2);
        String mapKey=tmp[0];
        String mapValue=tmp[1].replaceAll("\\\\,",",").replaceAll("\\\\\\\\","\\\\");
        if (mapKey.equalsIgnoreCase("TYPE")) {
          paramMap_TYPE.add(mapValue);
        }
 else {
          paramMap.put(mapKey,mapValue);
        }
      }
    }
 else     if (name.equals("propValue")) {
      StringBuilder builder=new StringBuilder();
      List<String> list=propertyNode.propValue_vector;
      int length=values.length;
      for (int i=0; i < length; i++) {
        String normValue=values[i].replaceAll("\\\\,",",").replaceAll("\\\\\\\\","\\\\");
        list.add(normValue);
        builder.append(normValue);
        if (i < length - 1) {
          builder.append(";");
        }
      }
      propertyNode.propValue=builder.toString();
    }
  }
  String encoding=propertyNode.paramMap.getAsString("ENCODING");
  if (encoding != null && (encoding.equalsIgnoreCase("BASE64") || encoding.equalsIgnoreCase("B"))) {
    propertyNode.propValue_bytes=Base64.decodeBase64(propertyNode.propValue_vector.get(0).getBytes());
  }
  return propertyNode;
}
