{
  super(context,attrs,defStyleAttr,defStyleRes);
  mUiThreadId=Thread.currentThread().getId();
  initProgressBar();
  final TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.ProgressBar,defStyleAttr,defStyleRes);
  mNoInvalidate=true;
  final Drawable progressDrawable=a.getDrawable(R.styleable.ProgressBar_progressDrawable);
  if (progressDrawable != null) {
    setProgressDrawableTiled(progressDrawable);
  }
  mDuration=a.getInt(R.styleable.ProgressBar_indeterminateDuration,mDuration);
  mMinWidth=a.getDimensionPixelSize(R.styleable.ProgressBar_minWidth,mMinWidth);
  mMaxWidth=a.getDimensionPixelSize(R.styleable.ProgressBar_maxWidth,mMaxWidth);
  mMinHeight=a.getDimensionPixelSize(R.styleable.ProgressBar_minHeight,mMinHeight);
  mMaxHeight=a.getDimensionPixelSize(R.styleable.ProgressBar_maxHeight,mMaxHeight);
  mBehavior=a.getInt(R.styleable.ProgressBar_indeterminateBehavior,mBehavior);
  final int resID=a.getResourceId(com.android.internal.R.styleable.ProgressBar_interpolator,android.R.anim.linear_interpolator);
  if (resID > 0) {
    setInterpolator(context,resID);
  }
  setMax(a.getInt(R.styleable.ProgressBar_max,mMax));
  setProgress(a.getInt(R.styleable.ProgressBar_progress,mProgress));
  setSecondaryProgress(a.getInt(R.styleable.ProgressBar_secondaryProgress,mSecondaryProgress));
  final Drawable indeterminateDrawable=a.getDrawable(R.styleable.ProgressBar_indeterminateDrawable);
  if (indeterminateDrawable != null) {
    setIndeterminateDrawableTiled(indeterminateDrawable);
  }
  mOnlyIndeterminate=a.getBoolean(R.styleable.ProgressBar_indeterminateOnly,mOnlyIndeterminate);
  mNoInvalidate=false;
  setIndeterminate(mOnlyIndeterminate || a.getBoolean(R.styleable.ProgressBar_indeterminate,mIndeterminate));
  mMirrorForRtl=a.getBoolean(R.styleable.ProgressBar_mirrorForRtl,mMirrorForRtl);
  mProgressTintMode=Drawable.parseTintMode(a.getInt(R.styleable.ProgressBar_progressBackgroundTintMode,-1),mProgressTintMode);
  if (a.hasValue(R.styleable.ProgressBar_progressTint)) {
    mProgressTintList=a.getColorStateList(R.styleable.ProgressBar_progressTint);
    mHasProgressTint=true;
    applyProgressLayerTint(R.id.progress,mProgressTintList,mProgressTintMode,true);
  }
  mProgressBackgroundTintMode=Drawable.parseTintMode(a.getInt(R.styleable.ProgressBar_progressTintMode,-1),mProgressBackgroundTintMode);
  if (a.hasValue(R.styleable.ProgressBar_progressBackgroundTint)) {
    mProgressBackgroundTintList=a.getColorStateList(R.styleable.ProgressBar_progressBackgroundTint);
    mHasProgressBackgroundTint=true;
    applyProgressLayerTint(R.id.background,mProgressBackgroundTintList,mProgressBackgroundTintMode,false);
  }
  mSecondaryProgressTintMode=Drawable.parseTintMode(a.getInt(R.styleable.ProgressBar_secondaryProgressTintMode,-1),mSecondaryProgressTintMode);
  if (a.hasValue(R.styleable.ProgressBar_secondaryProgressTint)) {
    mSecondaryProgressTintList=a.getColorStateList(R.styleable.ProgressBar_secondaryProgressTint);
    mHasSecondaryProgressTint=true;
    applyProgressLayerTint(R.id.secondaryProgress,mSecondaryProgressTintList,mSecondaryProgressTintMode,false);
  }
  mIndeterminateTintMode=Drawable.parseTintMode(a.getInt(R.styleable.ProgressBar_indeterminateTintMode,-1),mIndeterminateTintMode);
  if (a.hasValue(R.styleable.ProgressBar_indeterminateTint)) {
    mIndeterminateTintList=a.getColorStateList(R.styleable.ProgressBar_indeterminateTint);
    mHasIndeterminateTint=true;
    applyIndeterminateTint();
  }
  a.recycle();
  if (getImportantForAccessibility() == View.IMPORTANT_FOR_ACCESSIBILITY_AUTO) {
    setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_YES);
  }
}
