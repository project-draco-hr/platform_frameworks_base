{
  if (drawable instanceof LayerDrawable) {
    final LayerDrawable orig=(LayerDrawable)drawable;
    final int N=orig.getNumberOfLayers();
    final Drawable[] outDrawables=new Drawable[N];
    for (int i=0; i < N; i++) {
      final int id=orig.getId(i);
      outDrawables[i]=tileify(orig.getDrawable(i),(id == R.id.progress || id == R.id.secondaryProgress));
    }
    final LayerDrawable clone=new LayerDrawable(outDrawables);
    for (int i=0; i < N; i++) {
      clone.setId(i,orig.getId(i));
      clone.setLayerGravity(i,orig.getLayerGravity(i));
      clone.setLayerWidth(i,orig.getLayerWidth(i));
      clone.setLayerHeight(i,orig.getLayerHeight(i));
      clone.setLayerInsetLeft(i,orig.getLayerInsetLeft(i));
      clone.setLayerInsetRight(i,orig.getLayerInsetRight(i));
      clone.setLayerInsetTop(i,orig.getLayerInsetTop(i));
      clone.setLayerInsetBottom(i,orig.getLayerInsetBottom(i));
      clone.setLayerInsetStart(i,orig.getLayerInsetStart(i));
      clone.setLayerInsetEnd(i,orig.getLayerInsetEnd(i));
    }
    return clone;
  }
  if (drawable instanceof StateListDrawable) {
    final StateListDrawable in=(StateListDrawable)drawable;
    final StateListDrawable out=new StateListDrawable();
    final int N=in.getStateCount();
    for (int i=0; i < N; i++) {
      out.addState(in.getStateSet(i),tileify(in.getStateDrawable(i),clip));
    }
    return out;
  }
  if (drawable instanceof BitmapDrawable) {
    final BitmapDrawable bitmap=(BitmapDrawable)drawable;
    final Bitmap tileBitmap=bitmap.getBitmap();
    if (mSampleTile == null) {
      mSampleTile=tileBitmap;
    }
    final ShapeDrawable shapeDrawable=new ShapeDrawable(getDrawableShape());
    final BitmapShader bitmapShader=new BitmapShader(tileBitmap,Shader.TileMode.REPEAT,Shader.TileMode.CLAMP);
    shapeDrawable.getPaint().setShader(bitmapShader);
    shapeDrawable.setTintList(bitmap.getTint());
    shapeDrawable.setTintMode(bitmap.getTintMode());
    shapeDrawable.setColorFilter(bitmap.getColorFilter());
    return clip ? new ClipDrawable(shapeDrawable,Gravity.LEFT,ClipDrawable.HORIZONTAL) : shapeDrawable;
  }
  return drawable;
}
