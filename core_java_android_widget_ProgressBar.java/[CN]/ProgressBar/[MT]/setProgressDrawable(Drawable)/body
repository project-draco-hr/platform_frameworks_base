{
  boolean needUpdate;
  if (mProgressDrawable != null && d != mProgressDrawable) {
    mProgressDrawable.setCallback(null);
    needUpdate=true;
  }
 else {
    needUpdate=false;
  }
  if (d != null) {
    d.setCallback(this);
    if (canResolveLayoutDirection()) {
      d.setLayoutDirection(getLayoutDirection());
    }
    int drawableHeight=d.getMinimumHeight();
    if (mMaxHeight < drawableHeight) {
      mMaxHeight=drawableHeight;
      requestLayout();
    }
  }
  mProgressDrawable=d;
  if (!mIndeterminate) {
    mCurrentDrawable=d;
    postInvalidate();
  }
  if (needUpdate) {
    updateDrawableBounds(getWidth(),getHeight());
    updateDrawableState();
    doRefreshProgress(R.id.progress,mProgress,false,false);
    doRefreshProgress(R.id.secondaryProgress,mSecondaryProgress,false,false);
  }
}
