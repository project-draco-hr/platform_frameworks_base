{
  if (mProgressDrawable != d) {
    if (mProgressDrawable != null) {
      mProgressDrawable.setCallback(null);
      unscheduleDrawable(mProgressDrawable);
    }
    mProgressDrawable=d;
    if (d != null) {
      d.setCallback(this);
      d.setLayoutDirection(getLayoutDirection());
      if (d.isStateful()) {
        d.setState(getDrawableState());
      }
      int drawableHeight=d.getMinimumHeight();
      if (mMaxHeight < drawableHeight) {
        mMaxHeight=drawableHeight;
        requestLayout();
      }
      applyProgressTints();
    }
    if (!mIndeterminate) {
      swapCurrentDrawable(d);
      postInvalidate();
    }
    updateDrawableBounds(getWidth(),getHeight());
    updateDrawableState();
    doRefreshProgress(R.id.progress,mProgress,false,false,false);
    doRefreshProgress(R.id.secondaryProgress,mSecondaryProgress,false,false,false);
  }
}
