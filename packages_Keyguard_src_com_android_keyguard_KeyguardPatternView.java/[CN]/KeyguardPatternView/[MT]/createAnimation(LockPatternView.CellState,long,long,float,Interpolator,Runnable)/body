{
  animatedCell.scale=0.0f;
  animatedCell.translateY=startTranslationY;
  ValueAnimator animator=ValueAnimator.ofFloat(startTranslationY,0.0f);
  animator.setInterpolator(interpolator);
  animator.setDuration(duration);
  animator.setStartDelay(delay);
  animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    ValueAnimator animation){
      float animatedFraction=animation.getAnimatedFraction();
      animatedCell.scale=animatedFraction;
      animatedCell.translateY=(float)animation.getAnimatedValue();
      mLockPatternView.invalidate();
    }
  }
);
  if (finishListener != null) {
    animator.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        finishListener.run();
      }
    }
);
    mAppearAnimationUtils.createAnimation(mEcaView,delay,duration,startTranslationY,interpolator,null);
    if (mForgotPatternButton != null && mForgotPatternButton.getVisibility() == View.VISIBLE) {
      mAppearAnimationUtils.createAnimation(mForgotPatternButton,delay,duration,startTranslationY,interpolator,null);
    }
  }
  animator.start();
  mLockPatternView.invalidate();
}
