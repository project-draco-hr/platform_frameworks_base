{
  try {
switch (msg.what) {
case MSG_NDEF_TAG:
      Log.d(TAG,"Tag detected, notifying applications");
    NativeNfcTag nativeTag=(NativeNfcTag)msg.obj;
  if (nativeTag.doConnect()) {
    if (nativeTag.checkNDEF()) {
      byte[] buff=nativeTag.doRead();
      if (buff != null) {
        NdefMessage[] msgNdef=new NdefMessage[1];
        try {
          msgNdef[0]=new NdefMessage(buff);
          NdefTag tag=new NdefTag(convertType(nativeTag.getType()),nativeTag.getUid(),nativeTag.getHandle(),msgNdef);
          Intent intent=new Intent();
          intent.setAction(NfcAdapter.ACTION_NDEF_TAG_DISCOVERED);
          intent.putExtra(NfcAdapter.EXTRA_TAG,tag);
          intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
          Log.d(TAG,"NDEF tag found, starting corresponding activity");
          try {
            mContext.startActivity(intent);
          }
 catch (          ActivityNotFoundException e) {
            Log.w(TAG,"No activity found, disconnecting");
            nativeTag.doAsyncDisconnect();
          }
        }
 catch (        FormatException e) {
          Log.w(TAG,"Unable to create NDEF message object (tag empty or not well formated)");
          nativeTag.doAsyncDisconnect();
        }
      }
 else {
        Log.w(TAG,"Unable to read NDEF message (tag empty or not well formated)");
        nativeTag.doAsyncDisconnect();
      }
    }
 else {
      Intent intent=new Intent();
      Tag tag=new Tag(convertType(nativeTag.getType()),false,nativeTag.getUid(),nativeTag.getHandle());
      intent.setAction(NfcAdapter.ACTION_TAG_DISCOVERED);
      intent.putExtra(NfcAdapter.EXTRA_TAG,tag);
      intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
      Log.d(TAG,"Non-NDEF tag found, starting corresponding activity");
      try {
        mContext.startActivity(intent);
      }
 catch (      ActivityNotFoundException e) {
        Log.w(TAG,"No activity found, disconnecting");
        nativeTag.doAsyncDisconnect();
      }
    }
  }
 else {
    Log.w(TAG,"Failed to connect to tag");
    nativeTag.doAsyncDisconnect();
  }
break;
case MSG_CARD_EMULATION:
Log.d(TAG,"Card Emulation message");
byte[] aid=(byte[])msg.obj;
Intent TransactionIntent=new Intent();
TransactionIntent.setAction(NfcAdapter.ACTION_TRANSACTION_DETECTED);
TransactionIntent.putExtra(NfcAdapter.EXTRA_AID,aid);
Log.d(TAG,"Broadcasting Card Emulation event");
mContext.sendOrderedBroadcast(TransactionIntent,android.Manifest.permission.NFC_NOTIFY);
break;
case MSG_LLCP_LINK_ACTIVATION:
NativeP2pDevice device=(NativeP2pDevice)msg.obj;
Log.d(TAG,"LLCP Activation message");
if (device.getMode() == NativeP2pDevice.MODE_P2P_TARGET) {
if (device.doConnect()) {
if (doCheckLlcp()) {
if (doActivateLlcp()) {
Log.d(TAG,"Initiator Activate LLCP OK");
Intent LlcpLinkIntent=new Intent();
LlcpLinkIntent.setAction(INTERNAL_LLCP_LINK_STATE_CHANGED_ACTION);
LlcpLinkIntent.putExtra(INTERNAL_LLCP_LINK_STATE_CHANGED_EXTRA,NfcAdapter.LLCP_LINK_STATE_ACTIVATED);
Log.d(TAG,"Broadcasting internal LLCP activation");
mContext.sendBroadcast(LlcpLinkIntent);
}
}
 else {
device.doDisconnect();
}
}
}
 else if (device.getMode() == NativeP2pDevice.MODE_P2P_INITIATOR) {
if (doCheckLlcp()) {
if (doActivateLlcp()) {
Log.d(TAG,"Target Activate LLCP OK");
Intent LlcpLinkIntent=new Intent();
LlcpLinkIntent.setAction(INTERNAL_LLCP_LINK_STATE_CHANGED_ACTION);
LlcpLinkIntent.putExtra(INTERNAL_LLCP_LINK_STATE_CHANGED_EXTRA,NfcAdapter.LLCP_LINK_STATE_ACTIVATED);
Log.d(TAG,"Broadcasting internal LLCP activation");
mContext.sendBroadcast(LlcpLinkIntent);
}
}
}
break;
case MSG_LLCP_LINK_DEACTIVATED:
Log.d(TAG,"LLCP Link Deactivated message");
Intent LlcpLinkIntent=new Intent();
LlcpLinkIntent.setAction(NfcAdapter.ACTION_LLCP_LINK_STATE_CHANGED);
LlcpLinkIntent.putExtra(NfcAdapter.EXTRA_LLCP_LINK_STATE_CHANGED,NfcAdapter.LLCP_LINK_STATE_DEACTIVATED);
Log.d(TAG,"Broadcasting LLCP deactivation");
mContext.sendOrderedBroadcast(LlcpLinkIntent,android.Manifest.permission.NFC_LLCP);
break;
case MSG_TARGET_DESELECTED:
Log.d(TAG,"Target Deselected");
Intent TargetDeselectedIntent=new Intent();
TargetDeselectedIntent.setAction(INTERNAL_TARGET_DESELECTED_ACTION);
Log.d(TAG,"Broadcasting Intent");
mContext.sendOrderedBroadcast(TargetDeselectedIntent,android.Manifest.permission.NFC_LLCP);
break;
default :
Log.e(TAG,"Unknown message received");
break;
}
}
 catch (Exception e) {
Log.e(TAG,"Exception in NfcHandler.handleMessage:",e);
}
}
