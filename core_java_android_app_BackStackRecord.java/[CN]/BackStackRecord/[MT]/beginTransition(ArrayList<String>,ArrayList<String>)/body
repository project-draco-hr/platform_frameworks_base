{
  if (mCustomTransition <= 0 || mSceneRoot <= 0) {
    return null;
  }
  View rootView=mManager.mContainer.findViewById(mSceneRoot);
  if (!(rootView instanceof ViewGroup)) {
    throw new IllegalArgumentException("SceneRoot is not a ViewGroup");
  }
  TransitionState state=new TransitionState();
  state.sceneRoot=(ViewGroup)rootView;
  state.sceneRoot.captureTransitioningViews(state.transitioningViews);
  state.exitTransition=TransitionInflater.from(mManager.mActivity).inflateTransition(mCustomTransition);
  state.sharedElementTransition=TransitionInflater.from(mManager.mActivity).inflateTransition(mCustomTransition);
  state.enterTransition=TransitionInflater.from(mManager.mActivity).inflateTransition(mCustomTransition);
  View nonExistentView=new View(mManager.mActivity);
  state.enterTransition.addTarget(nonExistentView);
  state.exitTransition.addTarget(nonExistentView);
  state.sharedElementTransition.addTarget(nonExistentView);
  setSharedElementEpicenter(state.enterTransition,state);
  state.excludingTransition=new TransitionSet().addTransition(state.exitTransition).addTransition(state.enterTransition);
  if (sourceNames != null) {
    state.sceneRoot.findNamedViews(state.namedViews);
    state.namedViews.retainAll(sourceNames);
    View epicenterView=state.namedViews.get(sourceNames.get(0));
    if (epicenterView != null) {
      setEpicenter(state.exitTransition,epicenterView);
      setEpicenter(state.sharedElementTransition,epicenterView);
    }
    state.transitioningViews.removeAll(state.namedViews.values());
    state.excludingTransition.addTransition(state.sharedElementTransition);
    addTransitioningViews(state.sharedElementTransition,state.namedViews.values());
  }
  addTransitioningViews(state.exitTransition,state.transitioningViews);
  state.excludingTransition.setNameOverrides(new ArrayMap<String,String>());
  setNameOverrides(state,sourceNames,targetNames);
  excludeHiddenFragments(state,true);
  TransitionManager.beginDelayedTransition(state.sceneRoot,state.excludingTransition);
  return state;
}
