{
  if (FragmentManagerImpl.DEBUG) {
    Log.v(TAG,"Run: " + this);
  }
  if (mAddToBackStack) {
    if (mIndex < 0) {
      throw new IllegalStateException("addToBackStack() called after commit()");
    }
  }
  bumpBackStackNesting(1);
  SparseArray<Fragment> firstOutFragments=new SparseArray<Fragment>();
  SparseArray<Fragment> lastInFragments=new SparseArray<Fragment>();
  calculateFragments(firstOutFragments,lastInFragments);
  beginTransition(firstOutFragments,lastInFragments,false);
  Op op=mHead;
  while (op != null) {
switch (op.cmd) {
case OP_ADD:
{
        Fragment f=op.fragment;
        f.mNextAnim=op.enterAnim;
        mManager.addFragment(f,false);
      }
    break;
case OP_REPLACE:
{
    Fragment f=op.fragment;
    if (mManager.mAdded != null) {
      for (int i=0; i < mManager.mAdded.size(); i++) {
        Fragment old=mManager.mAdded.get(i);
        if (FragmentManagerImpl.DEBUG) {
          Log.v(TAG,"OP_REPLACE: adding=" + f + " old="+ old);
        }
        if (f == null || old.mContainerId == f.mContainerId) {
          if (old == f) {
            op.fragment=f=null;
          }
 else {
            if (op.removed == null) {
              op.removed=new ArrayList<Fragment>();
            }
            op.removed.add(old);
            old.mNextAnim=op.exitAnim;
            if (mAddToBackStack) {
              old.mBackStackNesting+=1;
              if (FragmentManagerImpl.DEBUG) {
                Log.v(TAG,"Bump nesting of " + old + " to "+ old.mBackStackNesting);
              }
            }
            mManager.removeFragment(old,mTransition,mTransitionStyle);
          }
        }
      }
    }
    if (f != null) {
      f.mNextAnim=op.enterAnim;
      mManager.addFragment(f,false);
    }
  }
break;
case OP_REMOVE:
{
Fragment f=op.fragment;
f.mNextAnim=op.exitAnim;
mManager.removeFragment(f,mTransition,mTransitionStyle);
}
break;
case OP_HIDE:
{
Fragment f=op.fragment;
f.mNextAnim=op.exitAnim;
mManager.hideFragment(f,mTransition,mTransitionStyle);
}
break;
case OP_SHOW:
{
Fragment f=op.fragment;
f.mNextAnim=op.enterAnim;
mManager.showFragment(f,mTransition,mTransitionStyle);
}
break;
case OP_DETACH:
{
Fragment f=op.fragment;
f.mNextAnim=op.exitAnim;
mManager.detachFragment(f,mTransition,mTransitionStyle);
}
break;
case OP_ATTACH:
{
Fragment f=op.fragment;
f.mNextAnim=op.enterAnim;
mManager.attachFragment(f,mTransition,mTransitionStyle);
}
break;
default :
{
throw new IllegalArgumentException("Unknown cmd: " + op.cmd);
}
}
op=op.next;
}
mManager.moveToState(mManager.mCurState,mTransition,mTransitionStyle,true);
if (mAddToBackStack) {
mManager.addBackStackState(this);
}
}
