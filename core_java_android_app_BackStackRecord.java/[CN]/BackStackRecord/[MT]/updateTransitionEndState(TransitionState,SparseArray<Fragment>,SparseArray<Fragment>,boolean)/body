{
  ArrayMap<String,View> tempViews1=new ArrayMap<String,View>();
  ArrayMap<String,View> tempViews2=new ArrayMap<String,View>();
  ArrayList<String> tempNames=new ArrayList<String>();
  ArrayList<View> tempViews=new ArrayList<View>();
  int numInFragments=inFragments.size();
  for (int i=0; i < numInFragments; i++) {
    Fragment inFragment=inFragments.valueAt(i);
    tempViews1.clear();
    ArrayMap<String,View> namedViews=mapEnteringSharedElements(inFragment,tempViews1,tempViews2,isBack);
    if (isBack) {
      inFragment.mExitTransitionCallback.onMapSharedElements(mSharedElementTargetNames,namedViews);
      setBackNameOverrides(state,namedViews,true);
    }
 else {
      inFragment.mEnterTransitionCallback.onMapSharedElements(mSharedElementTargetNames,namedViews);
      setNameOverrides(state,namedViews,true);
    }
    if (mSharedElementTargetNames != null && !namedViews.isEmpty()) {
      View epicenter=namedViews.get(mSharedElementTargetNames.get(0));
      if (epicenter != null) {
        state.enteringEpicenterView=epicenter;
      }
    }
    int containerId=inFragments.keyAt(i);
    SharedElementCallback sharedElementCallback=isBack ? outFragments.get(containerId).mEnterTransitionCallback : inFragment.mEnterTransitionCallback;
    tempNames.clear();
    tempNames.addAll(namedViews.keySet());
    tempViews.clear();
    tempViews.addAll(namedViews.values());
    sharedElementCallback.onSharedElementEnd(tempNames,tempViews,null);
  }
  excludeHiddenFragments(state);
}
