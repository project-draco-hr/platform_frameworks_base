{
  ViewGroup sceneRoot=(ViewGroup)mManager.mContainer.findViewById(containerId);
  if (sceneRoot != null) {
    Fragment inFragment=lastInFragments.get(containerId);
    Fragment outFragment=firstOutFragments.get(containerId);
    Transition enterTransition=getEnterTransition(inFragment,isBack);
    Transition sharedElementTransition=getSharedElementTransition(inFragment,outFragment,isBack);
    Transition exitTransition=getExitTransition(outFragment,isBack);
    if (enterTransition == null && sharedElementTransition == null && exitTransition == null) {
      return;
    }
    ArrayList<View> exitingViews=captureExitingViews(exitTransition,outFragment);
    if (exitingViews == null || exitingViews.isEmpty()) {
      exitTransition=null;
    }
    ArrayMap<String,View> namedViews=null;
    if (sharedElementTransition != null) {
      namedViews=remapSharedElements(state,outFragment,isBack);
      SharedElementCallback callback=isBack ? outFragment.mEnterTransitionCallback : inFragment.mEnterTransitionCallback;
      ArrayList<String> names=new ArrayList<String>(namedViews.keySet());
      ArrayList<View> views=new ArrayList<View>(namedViews.values());
      callback.onSharedElementStart(names,views,null);
    }
    if (mSharedElementTargetNames != null && exitTransition != null && namedViews != null) {
      View epicenterView=namedViews.get(mSharedElementTargetNames.get(0));
      if (epicenterView != null) {
        setEpicenter(exitTransition,epicenterView);
      }
    }
    Transition transition=mergeTransitions(enterTransition,exitTransition,sharedElementTransition,inFragment,isBack);
    if (transition != null) {
      ArrayList<View> hiddenFragments=new ArrayList<View>();
      ArrayList<View> enteringViews=addTransitionTargets(state,enterTransition,sharedElementTransition,transition,sceneRoot,inFragment,outFragment,hiddenFragments,isBack);
      transition.setNameOverrides(state.nameOverrides);
      transition.excludeTarget(state.nonExistentView,true);
      excludeHiddenFragments(hiddenFragments,containerId,transition);
      TransitionManager.beginDelayedTransition(sceneRoot,transition);
      removeTargetedViewsFromTransitions(sceneRoot,state.nonExistentView,enterTransition,enteringViews,exitTransition,exitingViews,transition,hiddenFragments);
    }
  }
}
