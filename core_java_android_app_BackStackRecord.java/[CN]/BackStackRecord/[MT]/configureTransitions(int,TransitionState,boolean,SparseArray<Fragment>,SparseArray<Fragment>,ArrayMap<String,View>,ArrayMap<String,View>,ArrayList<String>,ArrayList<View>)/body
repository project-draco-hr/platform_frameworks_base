{
  ViewGroup sceneRoot=(ViewGroup)mManager.mContainer.findViewById(containerId);
  if (sceneRoot != null) {
    Fragment inFragment=lastInFragments.get(containerId);
    Fragment outFragment=firstOutFragments.get(containerId);
    Transition enterTransition=getEnterTransition(inFragment,isBack);
    Transition sharedElementTransition=getSharedElementTransition(inFragment,outFragment,isBack);
    Transition exitTransition=getExitTransition(outFragment,isBack);
    exitTransition=captureExitingViews(exitTransition,outFragment,tempViewList);
    ArrayMap<String,View> namedViews=tempViews1;
    namedViews.clear();
    if (sharedElementTransition != null) {
      namedViews=remapSharedElements(state,outFragment,namedViews,tempViews2,isBack);
    }
    SharedElementListener listener=isBack ? outFragment.mEnterTransitionListener : inFragment.mEnterTransitionListener;
    tempNames.clear();
    tempNames.addAll(namedViews.keySet());
    tempViewList.clear();
    tempViewList.addAll(namedViews.values());
    listener.setSharedElementStart(tempNames,tempViewList,null);
    if (mSharedElementTargetNames != null && exitTransition != null) {
      View epicenterView=namedViews.get(mSharedElementTargetNames.get(0));
      if (epicenterView != null) {
        setEpicenter(exitTransition,epicenterView);
      }
    }
    prepareEnterTransition(state,enterTransition,sceneRoot,inFragment);
    Transition transition=mergeTransitions(enterTransition,exitTransition,sharedElementTransition,inFragment,isBack);
    if (transition != null) {
      state.overallTransitions.put(containerId,transition);
      transition.setNameOverrides(state.nameOverrides);
      transition.excludeTarget(state.nonExistentView,true);
      excludeHiddenFragments(state,containerId,transition);
      cleanupHiddenFragments(transition,state);
      TransitionManager.beginDelayedTransition(sceneRoot,transition);
    }
  }
}
