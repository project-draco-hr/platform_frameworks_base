{
  BackStackRecord bse=new BackStackRecord(fm);
  int pos=0;
  int num=0;
  while (pos < mOps.length) {
    BackStackRecord.Op op=new BackStackRecord.Op();
    op.cmd=mOps[pos++];
    if (FragmentManagerImpl.DEBUG) {
      Log.v(FragmentManagerImpl.TAG,"Instantiate " + bse + " op #"+ num+ " base fragment #"+ mOps[pos]);
    }
    int findex=mOps[pos++];
    if (findex >= 0) {
      Fragment f=fm.mActive.get(findex);
      op.fragment=f;
    }
 else {
      op.fragment=null;
    }
    op.enterAnim=mOps[pos++];
    op.exitAnim=mOps[pos++];
    op.popEnterAnim=mOps[pos++];
    op.popExitAnim=mOps[pos++];
    final int N=mOps[pos++];
    if (N > 0) {
      op.removed=new ArrayList<Fragment>(N);
      for (int i=0; i < N; i++) {
        if (FragmentManagerImpl.DEBUG) {
          Log.v(FragmentManagerImpl.TAG,"Instantiate " + bse + " set remove fragment #"+ mOps[pos]);
        }
        Fragment r=fm.mActive.get(mOps[pos++]);
        op.removed.add(r);
      }
    }
    bse.addOp(op);
    num++;
  }
  bse.mTransition=mTransition;
  bse.mTransitionStyle=mTransitionStyle;
  bse.mName=mName;
  bse.mIndex=mIndex;
  bse.mAddToBackStack=true;
  bse.mBreadCrumbTitleRes=mBreadCrumbTitleRes;
  bse.mBreadCrumbTitleText=mBreadCrumbTitleText;
  bse.mBreadCrumbShortTitleRes=mBreadCrumbShortTitleRes;
  bse.mBreadCrumbShortTitleText=mBreadCrumbShortTitleText;
  bse.mSharedElementSourceNames=mSharedElementSourceNames;
  bse.mSharedElementTargetNames=mSharedElementTargetNames;
  bse.bumpBackStackNesting(1);
  return bse;
}
