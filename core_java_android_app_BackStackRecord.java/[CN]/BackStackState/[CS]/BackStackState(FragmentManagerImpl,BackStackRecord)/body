{
  int numRemoved=0;
  BackStackRecord.Op op=bse.mHead;
  while (op != null) {
    if (op.removed != null) {
      numRemoved+=op.removed.size();
    }
    op=op.next;
  }
  mOps=new int[bse.mNumOp * 7 + numRemoved];
  if (!bse.mAddToBackStack) {
    throw new IllegalStateException("Not on back stack");
  }
  op=bse.mHead;
  int pos=0;
  while (op != null) {
    mOps[pos++]=op.cmd;
    mOps[pos++]=op.fragment != null ? op.fragment.mIndex : -1;
    mOps[pos++]=op.enterAnim;
    mOps[pos++]=op.exitAnim;
    mOps[pos++]=op.popEnterAnim;
    mOps[pos++]=op.popExitAnim;
    if (op.removed != null) {
      final int N=op.removed.size();
      mOps[pos++]=N;
      for (int i=0; i < N; i++) {
        mOps[pos++]=op.removed.get(i).mIndex;
      }
    }
 else {
      mOps[pos++]=0;
    }
    op=op.next;
  }
  mTransition=bse.mTransition;
  mTransitionStyle=bse.mTransitionStyle;
  mName=bse.mName;
  mIndex=bse.mIndex;
  mBreadCrumbTitleRes=bse.mBreadCrumbTitleRes;
  mBreadCrumbTitleText=bse.mBreadCrumbTitleText;
  mBreadCrumbShortTitleRes=bse.mBreadCrumbShortTitleRes;
  mBreadCrumbShortTitleText=bse.mBreadCrumbShortTitleText;
  mSharedElementSourceNames=bse.mSharedElementSourceNames;
  mSharedElementTargetNames=bse.mSharedElementTargetNames;
}
