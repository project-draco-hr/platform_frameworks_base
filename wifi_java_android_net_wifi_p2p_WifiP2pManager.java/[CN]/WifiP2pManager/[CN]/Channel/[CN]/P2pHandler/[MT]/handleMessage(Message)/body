{
  Object listener=getListener(message.arg2);
switch (message.what) {
case AsyncChannel.CMD_CHANNEL_DISCONNECTED:
    if (mChannelListener != null) {
      mChannelListener.onChannelDisconnected();
      mChannelListener=null;
    }
  break;
case WifiP2pManager.DISCOVER_PEERS_FAILED:
case WifiP2pManager.STOP_DISCOVERY_FAILED:
case WifiP2pManager.DISCOVER_SERVICES_FAILED:
case WifiP2pManager.CONNECT_FAILED:
case WifiP2pManager.CANCEL_CONNECT_FAILED:
case WifiP2pManager.CREATE_GROUP_FAILED:
case WifiP2pManager.REMOVE_GROUP_FAILED:
case WifiP2pManager.ADD_LOCAL_SERVICE_FAILED:
case WifiP2pManager.REMOVE_LOCAL_SERVICE_FAILED:
case WifiP2pManager.CLEAR_LOCAL_SERVICES_FAILED:
case WifiP2pManager.ADD_SERVICE_REQUEST_FAILED:
case WifiP2pManager.REMOVE_SERVICE_REQUEST_FAILED:
case WifiP2pManager.CLEAR_SERVICE_REQUESTS_FAILED:
case WifiP2pManager.SET_DEVICE_NAME_FAILED:
if (listener != null) {
  ((ActionListener)listener).onFailure(message.arg1);
}
break;
case WifiP2pManager.DISCOVER_PEERS_SUCCEEDED:
case WifiP2pManager.STOP_DISCOVERY_SUCCEEDED:
case WifiP2pManager.DISCOVER_SERVICES_SUCCEEDED:
case WifiP2pManager.CONNECT_SUCCEEDED:
case WifiP2pManager.CANCEL_CONNECT_SUCCEEDED:
case WifiP2pManager.CREATE_GROUP_SUCCEEDED:
case WifiP2pManager.REMOVE_GROUP_SUCCEEDED:
case WifiP2pManager.ADD_LOCAL_SERVICE_SUCCEEDED:
case WifiP2pManager.REMOVE_LOCAL_SERVICE_SUCCEEDED:
case WifiP2pManager.CLEAR_LOCAL_SERVICES_SUCCEEDED:
case WifiP2pManager.ADD_SERVICE_REQUEST_SUCCEEDED:
case WifiP2pManager.REMOVE_SERVICE_REQUEST_SUCCEEDED:
case WifiP2pManager.CLEAR_SERVICE_REQUESTS_SUCCEEDED:
case WifiP2pManager.SET_DEVICE_NAME_SUCCEEDED:
if (listener != null) {
((ActionListener)listener).onSuccess();
}
break;
case WifiP2pManager.RESPONSE_PEERS:
WifiP2pDeviceList peers=(WifiP2pDeviceList)message.obj;
if (listener != null) {
((PeerListListener)listener).onPeersAvailable(peers);
}
break;
case WifiP2pManager.RESPONSE_CONNECTION_INFO:
WifiP2pInfo wifiP2pInfo=(WifiP2pInfo)message.obj;
if (listener != null) {
((ConnectionInfoListener)listener).onConnectionInfoAvailable(wifiP2pInfo);
}
break;
case WifiP2pManager.RESPONSE_GROUP_INFO:
WifiP2pGroup group=(WifiP2pGroup)message.obj;
if (listener != null) {
((GroupInfoListener)listener).onGroupInfoAvailable(group);
}
break;
case WifiP2pManager.RESPONSE_SERVICE:
WifiP2pServiceResponse resp=(WifiP2pServiceResponse)message.obj;
handleServiceResponse(resp);
break;
case WifiP2pManager.CONNECTION_REQUESTED:
if (mDialogListener != null) {
Bundle bundle=message.getData();
mDialogListener.onConnectionRequested((WifiP2pDevice)bundle.getParcelable(P2P_DEV_BUNDLE_KEY),(WifiP2pConfig)bundle.getParcelable(P2P_CONFIG_BUNDLE_KEY));
}
break;
case WifiP2pManager.SHOW_PIN_REQUESTED:
if (mDialogListener != null) {
Bundle bundle=message.getData();
mDialogListener.onShowPinRequested(bundle.getString(WPS_PIN_BUNDLE_KEY));
}
break;
case WifiP2pManager.DIALOG_LISTENER_ATTACHED:
if (mDialogListener != null) {
mDialogListener.onAttached();
}
break;
case WifiP2pManager.DIALOG_LISTENER_DETACHED:
if (mDialogListener != null) {
mDialogListener.onDetached(message.arg1);
mDialogListener=null;
}
break;
default :
Log.d(TAG,"Ignored " + message);
break;
}
}
