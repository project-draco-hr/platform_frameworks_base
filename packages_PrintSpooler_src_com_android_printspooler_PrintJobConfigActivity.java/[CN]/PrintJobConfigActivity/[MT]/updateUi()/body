{
  final int selectedIndex=mDestinationSpinner.getSelectedItemPosition();
  PrinterInfo printer=mDestinationSpinnerAdapter.getItem(selectedIndex).value;
  printer.getDefaults(mPrintAttributes);
  mCopiesEditText.setText(String.valueOf(Math.max(mPrintAttributes.getCopies(),MIN_COPIES)));
  mMediaSizeSpinnerAdapter.clear();
  List<MediaSize> mediaSizes=printer.getMediaSizes();
  final int mediaSizeCount=mediaSizes.size();
  for (int i=0; i < mediaSizeCount; i++) {
    MediaSize mediaSize=mediaSizes.get(i);
    mMediaSizeSpinnerAdapter.add(new SpinnerItem<MediaSize>(mediaSize,mediaSize.getLabel(getPackageManager())));
  }
  final int selectedMediaSizeIndex=mediaSizes.indexOf(mPrintAttributes.getMediaSize());
  mMediaSizeSpinner.setOnItemSelectedListener(null);
  mMediaSizeSpinner.setSelection(selectedMediaSizeIndex);
  mMediaSizeSpinner.setOnItemSelectedListener(mOnItemSelectedListener);
  mResolutionSpinnerAdapter.clear();
  List<Resolution> resolutions=printer.getResolutions();
  final int resolutionCount=resolutions.size();
  for (int i=0; i < resolutionCount; i++) {
    Resolution resolution=resolutions.get(i);
    mResolutionSpinnerAdapter.add(new SpinnerItem<Resolution>(resolution,resolution.getLabel(getPackageManager())));
  }
  final int selectedResolutionIndex=resolutions.indexOf(mPrintAttributes.getResolution());
  mResolutionSpinner.setOnItemSelectedListener(null);
  mResolutionSpinner.setSelection(selectedResolutionIndex);
  mResolutionSpinner.setOnItemSelectedListener(mOnItemSelectedListener);
  mInputTraySpinnerAdapter.clear();
  List<Tray> inputTrays=printer.getInputTrays();
  final int inputTrayCount=inputTrays.size();
  for (int i=0; i < inputTrayCount; i++) {
    Tray inputTray=inputTrays.get(i);
    mInputTraySpinnerAdapter.add(new SpinnerItem<Tray>(inputTray,inputTray.getLabel(getPackageManager())));
  }
  final int selectedInputTrayIndex=inputTrays.indexOf(mPrintAttributes.getInputTray());
  mInputTraySpinner.setSelection(selectedInputTrayIndex);
  mOutputTraySpinnerAdapter.clear();
  List<Tray> outputTrays=printer.getOutputTrays();
  final int outputTrayCount=outputTrays.size();
  for (int i=0; i < outputTrayCount; i++) {
    Tray outputTray=outputTrays.get(i);
    mOutputTraySpinnerAdapter.add(new SpinnerItem<Tray>(outputTray,outputTray.getLabel(getPackageManager())));
  }
  final int selectedOutputTrayIndex=outputTrays.indexOf(mPrintAttributes.getOutputTray());
  mOutputTraySpinner.setSelection(selectedOutputTrayIndex);
  final int duplexModes=printer.getDuplexModes();
  mDuplexModeSpinnerAdapter.clear();
  String[] duplexModeLabels=getResources().getStringArray(R.array.duplex_mode_labels);
  int remainingDuplexModes=duplexModes;
  while (remainingDuplexModes != 0) {
    final int duplexBitOffset=Integer.numberOfTrailingZeros(remainingDuplexModes);
    final int duplexMode=1 << duplexBitOffset;
    remainingDuplexModes&=~duplexMode;
    mDuplexModeSpinnerAdapter.add(new SpinnerItem<Integer>(duplexMode,duplexModeLabels[duplexBitOffset]));
  }
  final int selectedDuplexModeIndex=Integer.numberOfTrailingZeros((duplexModes & mPrintAttributes.getDuplexMode()));
  mDuplexModeSpinner.setSelection(selectedDuplexModeIndex);
  final int colorModes=printer.getColorModes();
  mColorModeSpinnerAdapter.clear();
  String[] colorModeLabels=getResources().getStringArray(R.array.color_mode_labels);
  int remainingColorModes=colorModes;
  while (remainingColorModes != 0) {
    final int colorBitOffset=Integer.numberOfTrailingZeros(remainingColorModes);
    final int colorMode=1 << colorBitOffset;
    remainingColorModes&=~colorMode;
    mColorModeSpinnerAdapter.add(new SpinnerItem<Integer>(colorMode,colorModeLabels[colorBitOffset]));
  }
  final int selectedColorModeIndex=Integer.numberOfTrailingZeros((colorModes & mPrintAttributes.getColorMode()));
  mColorModeSpinner.setSelection(selectedColorModeIndex);
  final int fittingModes=printer.getFittingModes();
  mFittingModeSpinnerAdapter.clear();
  String[] fittingModeLabels=getResources().getStringArray(R.array.fitting_mode_labels);
  int remainingFittingModes=fittingModes;
  while (remainingFittingModes != 0) {
    final int fittingBitOffset=Integer.numberOfTrailingZeros(remainingFittingModes);
    final int fittingMode=1 << fittingBitOffset;
    remainingFittingModes&=~fittingMode;
    mFittingModeSpinnerAdapter.add(new SpinnerItem<Integer>(fittingMode,fittingModeLabels[fittingBitOffset]));
  }
  final int selectedFittingModeIndex=Integer.numberOfTrailingZeros((fittingModes & mPrintAttributes.getFittingMode()));
  mFittingModeSpinner.setSelection(selectedFittingModeIndex);
  final int orientations=printer.getOrientations();
  mOrientationSpinnerAdapter.clear();
  String[] orientationLabels=getResources().getStringArray(R.array.orientation_labels);
  int remainingOrientations=orientations;
  while (remainingOrientations != 0) {
    final int orientationBitOffset=Integer.numberOfTrailingZeros(remainingOrientations);
    final int orientation=1 << orientationBitOffset;
    remainingOrientations&=~orientation;
    mOrientationSpinnerAdapter.add(new SpinnerItem<Integer>(orientation,orientationLabels[orientationBitOffset]));
  }
  final int selectedOrientationIndex=Integer.numberOfTrailingZeros((orientations & mPrintAttributes.getOrientation()));
  mOrientationSpinner.setSelection(selectedOrientationIndex);
}
