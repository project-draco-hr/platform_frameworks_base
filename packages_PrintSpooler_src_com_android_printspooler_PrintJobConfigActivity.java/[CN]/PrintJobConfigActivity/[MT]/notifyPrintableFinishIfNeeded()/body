{
  if (!mPrintStarted) {
    return;
  }
  mPrintStarted=false;
  if (!mPrintConfirmed) {
    final int taskCount=mTaskQueue.size();
    for (int i=taskCount - 1; i >= 0; i--) {
      mTaskQueue.remove(i).cancel();
    }
  }
  new AsyncTask<Void,Void,Void>(){
    @Override protected Void doInBackground(    Void... params){
      try {
        mRemotePrintAdapter.finish();
      }
 catch (      IOException ioe) {
        Log.e(LOG_TAG,"Error reading printed data!",ioe);
      }
      if (!mPrintConfirmed) {
        mPrintSpooler.setPrintJobState(mPrintJobId,PrintJobInfo.STATE_CANCELED);
        return null;
      }
      final int selectedIndex=mDestinationSpinner.getSelectedItemPosition();
      if (selectedIndex < 0) {
        mPrintSpooler.setPrintJobState(mPrintJobId,PrintJobInfo.STATE_CANCELED);
        return null;
      }
      SpinnerItem<PrinterInfo> printerItem=mDestinationSpinnerAdapter.getItem(selectedIndex);
      PrinterId printerId=printerItem.value.getId();
      mPrintSpooler.setPrintJobPrinterId(mPrintJobId,printerId);
      mPrintSpooler.setPrintJobState(mPrintJobId,PrintJobInfo.STATE_QUEUED);
      return null;
    }
  }
.executeOnExecutor(mPrintConfirmed ? AsyncTask.SERIAL_EXECUTOR : AsyncTask.THREAD_POOL_EXECUTOR,(Void[])null);
  if (DEBUG) {
    if (mPrintConfirmed) {
      File file=mRemotePrintAdapter.getFile();
      if (file.exists()) {
        new ViewSpooledFileAsyncTask(file).executeOnExecutor(AsyncTask.SERIAL_EXECUTOR,(Void[])null);
      }
    }
  }
}
