{
  super.onCreate(bundle);
  setTitle(R.string.print_dialog);
  Bundle extras=getIntent().getExtras();
  PrintJobInfo printJob=extras.getParcelable(PrintManager.EXTRA_PRINT_JOB);
  if (printJob == null) {
    throw new IllegalArgumentException("printJob cannot be null");
  }
  mPrintJobId=printJob.getId();
  mIPrintDocumentAdapter=extras.getBinder(PrintManager.EXTRA_PRINT_DOCUMENT_ADAPTER);
  if (mIPrintDocumentAdapter == null) {
    throw new IllegalArgumentException("PrintDocumentAdapter cannot be null");
  }
  try {
    IPrintDocumentAdapter.Stub.asInterface(mIPrintDocumentAdapter).setObserver(new PrintDocumentAdapterObserver(this));
  }
 catch (  RemoteException re) {
    finish();
    return;
  }
  PrintAttributes attributes=printJob.getAttributes();
  if (attributes != null) {
    mCurrPrintAttributes.copyFrom(attributes);
  }
  mCallingPackageName=extras.getString(DocumentsContract.EXTRA_PACKAGE_NAME);
  setContentView(R.layout.print_job_config_activity_container);
  try {
    mIPrintDocumentAdapter.linkToDeath(mDeathRecipient,0);
  }
 catch (  RemoteException re) {
    finish();
    return;
  }
  mDocument=new Document();
  mEditor=new Editor();
  mSpoolerProvider=new PrintSpoolerProvider(this,new Runnable(){
    @Override public void run(){
      mController=new PrintController(new RemotePrintDocumentAdapter(IPrintDocumentAdapter.Stub.asInterface(mIPrintDocumentAdapter),mSpoolerProvider.getSpooler().generateFileForPrintJob(mPrintJobId)));
      mController.initialize();
      mEditor.initialize();
      mEditor.postCreate();
    }
  }
);
}
