{
  mDestinationSpinnerAdapter=new DestinationAdapter();
  mDestinationSpinnerAdapter.registerDataSetObserver(new DataSetObserver(){
    @Override public void onChanged(){
      if (!mFavoritePrinterSelected && mDestinationSpinnerAdapter.getCount() > 2) {
        mFavoritePrinterSelected=true;
        mDestinationSpinner.setSelection(0);
      }
      if (mNextPrinterId != null && selectPrinter(mNextPrinterId)) {
        mNextPrinterId=null;
        return;
      }
      if (mCurrentPrinter != null) {
        final int printerCount=mDestinationSpinnerAdapter.getCount();
        for (int i=0; i < printerCount; i++) {
          Object item=mDestinationSpinnerAdapter.getItem(i);
          if (item instanceof PrinterInfo) {
            PrinterInfo printer=(PrinterInfo)item;
            if (!printer.getId().equals(mCurrentPrinter.getId())) {
              continue;
            }
            if (mCurrentPrinter.getStatus() == PrinterInfo.STATUS_UNAVAILABLE && printer.getStatus() != PrinterInfo.STATUS_UNAVAILABLE && printer.getCapabilities() == null && !mCapabilitiesTimeout.isPosted()) {
              mCapabilitiesTimeout.post();
              refreshCurrentPrinter();
              return;
            }
            if (printer.getCapabilities() != null && mCapabilitiesTimeout.isPosted()) {
              mCapabilitiesTimeout.remove();
              updatePrintAttributes(printer.getCapabilities());
              updateUi();
              mController.update();
            }
            boolean capabilitiesChanged=false;
            if (mCurrentPrinter.getCapabilities() == null) {
              if (printer.getCapabilities() != null) {
                capabilitiesChanged=true;
              }
            }
 else             if (!mCurrentPrinter.getCapabilities().equals(printer.getCapabilities())) {
              capabilitiesChanged=true;
            }
            final boolean statusChanged=mCurrentPrinter.getStatus() != printer.getStatus();
            if (!mCurrentPrinter.equals(printer)) {
              mCurrentPrinter.copyFrom(printer);
            }
            if (capabilitiesChanged || statusChanged) {
              if (updateUi()) {
                mController.update();
              }
            }
            break;
          }
        }
      }
    }
    @Override public void onInvalidated(){
    }
  }
);
  mMediaSizeSpinnerAdapter=new ArrayAdapter<SpinnerItem<MediaSize>>(PrintJobConfigActivity.this,R.layout.spinner_dropdown_item,R.id.title);
  mColorModeSpinnerAdapter=new ArrayAdapter<SpinnerItem<Integer>>(PrintJobConfigActivity.this,R.layout.spinner_dropdown_item,R.id.title);
  mOrientationSpinnerAdapter=new ArrayAdapter<SpinnerItem<Integer>>(PrintJobConfigActivity.this,R.layout.spinner_dropdown_item,R.id.title);
  String[] orientationLabels=getResources().getStringArray(R.array.orientation_labels);
  mOrientationSpinnerAdapter.add(new SpinnerItem<Integer>(ORIENTATION_PORTRAIT,orientationLabels[0]));
  mOrientationSpinnerAdapter.add(new SpinnerItem<Integer>(ORIENTATION_LANDSCAPE,orientationLabels[1]));
  mRangeOptionsSpinnerAdapter=new ArrayAdapter<SpinnerItem<Integer>>(PrintJobConfigActivity.this,R.layout.spinner_dropdown_item,R.id.title);
  final int[] rangeOptionsValues=getResources().getIntArray(R.array.page_options_values);
  String[] rangeOptionsLabels=getResources().getStringArray(R.array.page_options_labels);
  final int rangeOptionsCount=rangeOptionsLabels.length;
  for (int i=0; i < rangeOptionsCount; i++) {
    mRangeOptionsSpinnerAdapter.add(new SpinnerItem<Integer>(rangeOptionsValues[i],rangeOptionsLabels[i]));
  }
  showUi(UI_EDITING_PRINT_JOB,null);
  bindUi();
  mCurrentPrinter=mDestinationSpinnerAdapter.mFakePdfPrinter;
  updatePrintAttributes(mCurrentPrinter.getCapabilities());
  updateUi();
}
