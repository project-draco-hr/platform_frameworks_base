{
  mDestinationSpinnerAdapter=new DestinationAdapter();
  mDestinationSpinnerAdapter.registerDataSetObserver(new DataSetObserver(){
    @Override public void onChanged(){
      final int selectedPosition=mDestinationSpinner.getSelectedItemPosition();
      if (mDestinationSpinnerAdapter.getCount() > 0) {
        if (selectedPosition == AdapterView.INVALID_POSITION) {
          mDestinationSpinner.setSelection(0);
        }
      }
 else {
        mDestinationSpinner.setSelection(AdapterView.INVALID_POSITION);
      }
      if (mWaitingForPrinterCapabilities) {
        mWaitingForPrinterCapabilities=false;
        PrinterInfo printer=(PrinterInfo)mDestinationSpinner.getSelectedItem();
        if (printer != null && printer.getCapabilities() != null) {
          mOnItemSelectedListener.onItemSelected(mDestinationSpinner,null,selectedPosition,selectedPosition);
        }
      }
      updateUi();
    }
    @Override public void onInvalidated(){
      updateUi();
    }
  }
);
  mMediaSizeSpinnerAdapter=new ArrayAdapter<SpinnerItem<MediaSize>>(PrintJobConfigActivity.this,R.layout.spinner_dropdown_item,R.id.title);
  mColorModeSpinnerAdapter=new ArrayAdapter<SpinnerItem<Integer>>(PrintJobConfigActivity.this,R.layout.spinner_dropdown_item,R.id.title);
  mOrientationSpinnerAdapter=new ArrayAdapter<SpinnerItem<Integer>>(PrintJobConfigActivity.this,R.layout.spinner_dropdown_item,R.id.title);
  mRangeOptionsSpinnerAdapter=new ArrayAdapter<SpinnerItem<Integer>>(PrintJobConfigActivity.this,R.layout.spinner_dropdown_item,R.id.title);
  final int[] rangeOptionsValues=getResources().getIntArray(R.array.page_options_values);
  String[] rangeOptionsLabels=getResources().getStringArray(R.array.page_options_labels);
  final int rangeOptionsCount=rangeOptionsLabels.length;
  for (int i=0; i < rangeOptionsCount; i++) {
    mRangeOptionsSpinnerAdapter.add(new SpinnerItem<Integer>(rangeOptionsValues[i],rangeOptionsLabels[i]));
  }
  showUi(UI_EDITING_PRINT_JOB,null);
  bindUi();
  updateUi();
}
