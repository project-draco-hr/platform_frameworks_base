{
  boolean updateContent=false;
  mCopiesEditText.setText(String.valueOf(printJobInfo.getCopies()));
  PrintAttributes attributes=printJobInfo.getAttributes();
  if (!mCurrPrintAttributes.getMediaSize().equals(attributes.getMediaSize())) {
    final int mediaSizeCount=mMediaSizeSpinnerAdapter.getCount();
    for (int i=0; i < mediaSizeCount; i++) {
      MediaSize mediaSize=mMediaSizeSpinnerAdapter.getItem(i).value;
      if (mediaSize.asPortrait().equals(attributes.getMediaSize().asPortrait())) {
        updateContent=true;
        mCurrPrintAttributes.setMediaSize(attributes.getMediaSize());
        mMediaSizeSpinner.setSelection(i);
        mIgnoreNextMediaSizeChange=true;
        if (attributes.getMediaSize().isPortrait()) {
          mOrientationSpinner.setSelection(0);
          mIgnoreNextOrientationChange=true;
        }
 else {
          mOrientationSpinner.setSelection(1);
          mIgnoreNextOrientationChange=true;
        }
        break;
      }
    }
  }
  final int colorMode=attributes.getColorMode();
  if (mCurrPrintAttributes.getColorMode() != colorMode) {
    if (colorMode == PrintAttributes.COLOR_MODE_MONOCHROME) {
      updateContent=true;
      mColorModeSpinner.setSelection(0);
      mIgnoreNextColorChange=true;
      mCurrPrintAttributes.setColorMode(attributes.getColorMode());
    }
 else     if (colorMode == PrintAttributes.COLOR_MODE_COLOR) {
      updateContent=true;
      mColorModeSpinner.setSelection(1);
      mIgnoreNextColorChange=true;
      mCurrPrintAttributes.setColorMode(attributes.getColorMode());
    }
  }
  PageRange[] pageRanges=printJobInfo.getPages();
  if (pageRanges != null && pageRanges.length > 0) {
    pageRanges=PageRangeUtils.normalize(pageRanges);
    final int pageRangeCount=pageRanges.length;
    if (pageRangeCount == 1 && pageRanges[0] == PageRange.ALL_PAGES) {
      mRangeOptionsSpinner.setSelection(0);
    }
 else {
      final int pageCount=mDocument.info.getPageCount();
      if (pageRanges[0].getStart() >= 0 && pageRanges[pageRanges.length - 1].getEnd() < pageCount) {
        mRangeOptionsSpinner.setSelection(1);
        StringBuilder builder=new StringBuilder();
        for (int i=0; i < pageRangeCount; i++) {
          if (builder.length() > 0) {
            builder.append(',');
          }
          PageRange pageRange=pageRanges[i];
          builder.append(pageRange.getStart());
          builder.append('-');
          builder.append(pageRange.getEnd());
        }
        mPageRangeEditText.setText(builder.toString());
      }
    }
  }
  mSpoolerProvider.getSpooler().setPrintJobAdvancedOptionsNoPersistence(mPrintJobId,printJobInfo.getAdvancedOptions());
  if (updateContent) {
    mController.update();
  }
}
