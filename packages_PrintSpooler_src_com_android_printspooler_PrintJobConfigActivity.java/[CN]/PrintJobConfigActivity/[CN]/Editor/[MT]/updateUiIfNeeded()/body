{
  final int selectedIndex=mDestinationSpinner.getSelectedItemPosition();
  if (selectedIndex < 0) {
    mDestinationSpinner.setEnabled(false);
    mCopiesEditText.setText("1");
    mCopiesEditText.setEnabled(false);
    mMediaSizeSpinner.setOnItemSelectedListener(null);
    mMediaSizeSpinner.setSelection(AdapterView.INVALID_POSITION);
    mMediaSizeSpinner.setEnabled(false);
    mColorModeSpinner.setOnItemSelectedListener(null);
    mColorModeSpinner.setSelection(AdapterView.INVALID_POSITION);
    mColorModeSpinner.setEnabled(false);
    mOrientationSpinner.setOnItemSelectedListener(null);
    mOrientationSpinner.setSelection(AdapterView.INVALID_POSITION);
    mOrientationSpinner.setEnabled(false);
    mRangeOptionsSpinner.setOnItemSelectedListener(null);
    mRangeOptionsSpinner.setSelection(0);
    mRangeOptionsSpinner.setEnabled(false);
    mRangeEditText.setText("");
    mRangeEditText.setEnabled(false);
    mRangeEditText.setVisibility(View.INVISIBLE);
    mPrintPreviewButton.setEnabled(false);
    mPrintPreviewButton.setText(getString(R.string.print_preview));
    mPrintButton.setEnabled(false);
  }
 else {
    PrintAttributes defaultAttributes=mTempPrintAttributes;
    PrinterInfo printer=mDestinationSpinnerAdapter.getItem(selectedIndex).value;
    printer.getDefaults(defaultAttributes);
    mDestinationSpinner.setEnabled(true);
    mCopiesEditText.setEnabled(true);
    List<MediaSize> mediaSizes=printer.getMediaSizes();
    boolean mediaSizesChanged=false;
    final int mediaSizeCount=mediaSizes.size();
    if (mediaSizeCount != mMediaSizeSpinnerAdapter.getCount()) {
      mediaSizesChanged=true;
    }
 else {
      for (int i=0; i < mediaSizeCount; i++) {
        if (!mediaSizes.get(i).equals(mMediaSizeSpinnerAdapter.getItem(i).value)) {
          mediaSizesChanged=true;
          break;
        }
      }
    }
    if (mediaSizesChanged) {
      mMediaSizeSpinnerAdapter.clear();
      for (int i=0; i < mediaSizeCount; i++) {
        MediaSize mediaSize=mediaSizes.get(i);
        mMediaSizeSpinnerAdapter.add(new SpinnerItem<MediaSize>(mediaSize,mediaSize.getLabel()));
      }
      if (mediaSizeCount > 0) {
        mMediaSizeSpinner.setEnabled(true);
        final int selectedMediaSizeIndex=Math.max(mediaSizes.indexOf(defaultAttributes.getMediaSize()),0);
        mMediaSizeSpinner.setOnItemSelectedListener(null);
        mMediaSizeSpinner.setSelection(selectedMediaSizeIndex);
      }
    }
    final int colorModes=printer.getColorModes();
    boolean colorModesChanged=false;
    if (Integer.bitCount(colorModes) != mColorModeSpinnerAdapter.getCount()) {
      colorModesChanged=true;
    }
 else {
      int remainingColorModes=colorModes;
      while (remainingColorModes != 0) {
        final int colorBitOffset=Integer.numberOfTrailingZeros(remainingColorModes);
        final int colorMode=1 << colorBitOffset;
        remainingColorModes&=~colorMode;
        if (colorMode != mColorModeSpinnerAdapter.getItem(colorBitOffset).value) {
          colorModesChanged=true;
          break;
        }
      }
    }
    if (colorModesChanged) {
      mColorModeSpinnerAdapter.clear();
      String[] colorModeLabels=getResources().getStringArray(R.array.color_mode_labels);
      int remainingColorModes=colorModes;
      while (remainingColorModes != 0) {
        final int colorBitOffset=Integer.numberOfTrailingZeros(remainingColorModes);
        final int colorMode=1 << colorBitOffset;
        remainingColorModes&=~colorMode;
        mColorModeSpinnerAdapter.add(new SpinnerItem<Integer>(colorMode,colorModeLabels[colorBitOffset]));
      }
      if (colorModes > 0) {
        mColorModeSpinner.setEnabled(true);
        final int selectedColorModeIndex=Integer.numberOfTrailingZeros((colorModes & defaultAttributes.getColorMode()));
        mColorModeSpinner.setOnItemSelectedListener(null);
        mColorModeSpinner.setSelection(selectedColorModeIndex);
      }
    }
    final int orientations=printer.getOrientations();
    boolean orientationsChanged=false;
    if (Integer.bitCount(orientations) != mOrientationSpinnerAdapter.getCount()) {
      orientationsChanged=true;
    }
 else {
      int remainingOrientations=orientations;
      while (remainingOrientations != 0) {
        final int orientationBitOffset=Integer.numberOfTrailingZeros(remainingOrientations);
        final int orientation=1 << orientationBitOffset;
        remainingOrientations&=~orientation;
        if (orientation != mOrientationSpinnerAdapter.getItem(orientationBitOffset).value) {
          orientationsChanged=true;
          break;
        }
      }
    }
    if (orientationsChanged) {
      mOrientationSpinnerAdapter.clear();
      String[] orientationLabels=getResources().getStringArray(R.array.orientation_labels);
      int remainingOrientations=orientations;
      while (remainingOrientations != 0) {
        final int orientationBitOffset=Integer.numberOfTrailingZeros(remainingOrientations);
        final int orientation=1 << orientationBitOffset;
        remainingOrientations&=~orientation;
        mOrientationSpinnerAdapter.add(new SpinnerItem<Integer>(orientation,orientationLabels[orientationBitOffset]));
      }
      if (orientations > 0) {
        mOrientationSpinner.setEnabled(true);
        final int selectedOrientationIndex=Integer.numberOfTrailingZeros((orientations & defaultAttributes.getOrientation()));
        mOrientationSpinner.setOnItemSelectedListener(null);
        mOrientationSpinner.setSelection(selectedOrientationIndex);
      }
    }
    if (mPrintDocumentInfo != null && (mPrintDocumentInfo.getPageCount() > 1 || mPrintDocumentInfo.getPageCount() == PrintDocumentInfo.PAGE_COUNT_UNKNOWN)) {
      mRangeOptionsSpinner.setEnabled(true);
      if (mRangeOptionsSpinner.getSelectedItemPosition() > 0 && !mRangeEditText.isEnabled()) {
        mRangeEditText.setEnabled(true);
        mRangeEditText.setError("");
        mRangeEditText.setVisibility(View.VISIBLE);
        mRangeEditText.requestFocus();
        InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
        imm.showSoftInput(mRangeEditText,0);
      }
    }
 else {
      mRangeOptionsSpinner.setOnItemSelectedListener(null);
      mRangeOptionsSpinner.setSelection(0);
      mRangeOptionsSpinner.setEnabled(false);
      mRangeEditText.setEnabled(false);
      mRangeEditText.setText("");
      mRangeEditText.setVisibility(View.INVISIBLE);
    }
    mPrintPreviewButton.setEnabled(true);
    if (hasPdfViewer()) {
      mPrintPreviewButton.setText(getString(R.string.print_preview));
    }
 else {
      mPrintPreviewButton.setText(getString(R.string.install_for_print_preview));
    }
    mPrintButton.setEnabled(true);
  }
  Choreographer.getInstance().postCallback(Choreographer.CALLBACK_TRAVERSAL,new Runnable(){
    @Override public void run(){
      mMediaSizeSpinner.setOnItemSelectedListener(mOnItemSelectedListener);
      mColorModeSpinner.setOnItemSelectedListener(mOnItemSelectedListener);
      mOrientationSpinner.setOnItemSelectedListener(mOnItemSelectedListener);
      mRangeOptionsSpinner.setOnItemSelectedListener(mOnItemSelectedListener);
    }
  }
,null);
}
