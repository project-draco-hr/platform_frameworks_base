{
  mCopiesEditText=(EditText)findViewById(R.id.copies_edittext);
  mCopiesEditText.setText(String.valueOf(MIN_COPIES));
  mCopiesEditText.addTextChangedListener(mCopiesTextWatcher);
  mCopiesEditText.setText(String.valueOf(Math.max(mCurrPrintAttributes.getCopies(),MIN_COPIES)));
  mCopiesEditText.selectAll();
  mDestinationSpinner=(Spinner)findViewById(R.id.destination_spinner);
  mDestinationSpinnerAdapter=new ArrayAdapter<SpinnerItem<PrinterInfo>>(PrintJobConfigActivity.this,R.layout.spinner_dropdown_item){
    @Override public View getDropDownView(    int position,    View convertView,    ViewGroup parent){
      return getView(position,convertView,parent);
    }
    @Override public View getView(    int position,    View convertView,    ViewGroup parent){
      if (convertView == null) {
        convertView=getLayoutInflater().inflate(R.layout.spinner_dropdown_item,parent,false);
      }
      PrinterInfo printerInfo=getItem(position).value;
      TextView title=(TextView)convertView.findViewById(R.id.title);
      title.setText(printerInfo.getLabel());
      try {
        TextView subtitle=(TextView)convertView.findViewById(R.id.subtitle);
        PackageManager pm=getPackageManager();
        PackageInfo packageInfo=pm.getPackageInfo(printerInfo.getId().getService().getPackageName(),0);
        subtitle.setText(packageInfo.applicationInfo.loadLabel(pm));
        subtitle.setVisibility(View.VISIBLE);
      }
 catch (      NameNotFoundException nnfe) {
      }
      return convertView;
    }
  }
;
  mDestinationSpinner.setAdapter(mDestinationSpinnerAdapter);
  mDestinationSpinner.setOnItemSelectedListener(mOnItemSelectedListener);
  mMediaSizeSpinner=(Spinner)findViewById(R.id.paper_size_spinner);
  mMediaSizeSpinnerAdapter=new ArrayAdapter<SpinnerItem<MediaSize>>(PrintJobConfigActivity.this,R.layout.spinner_dropdown_item,R.id.title);
  mMediaSizeSpinner.setAdapter(mMediaSizeSpinnerAdapter);
  mMediaSizeSpinner.setOnItemSelectedListener(mOnItemSelectedListener);
  mColorModeSpinner=(Spinner)findViewById(R.id.color_spinner);
  mColorModeSpinnerAdapter=new ArrayAdapter<SpinnerItem<Integer>>(PrintJobConfigActivity.this,R.layout.spinner_dropdown_item,R.id.title);
  mColorModeSpinner.setAdapter(mColorModeSpinnerAdapter);
  mColorModeSpinner.setOnItemSelectedListener(mOnItemSelectedListener);
  mOrientationSpinner=(Spinner)findViewById(R.id.orientation_spinner);
  mOrientationSpinnerAdapter=new ArrayAdapter<SpinnerItem<Integer>>(PrintJobConfigActivity.this,R.layout.spinner_dropdown_item,R.id.title);
  mOrientationSpinner.setAdapter(mOrientationSpinnerAdapter);
  mOrientationSpinner.setOnItemSelectedListener(mOnItemSelectedListener);
  mRangeEditText=(EditText)findViewById(R.id.page_range_edittext);
  mRangeEditText.addTextChangedListener(mRangeTextWatcher);
  mRangeOptionsSpinner=(Spinner)findViewById(R.id.range_options_spinner);
  mRangeOptionsSpinnerAdapter=new ArrayAdapter<SpinnerItem<Integer>>(PrintJobConfigActivity.this,R.layout.spinner_dropdown_item,R.id.title);
  mRangeOptionsSpinner.setAdapter(mRangeOptionsSpinnerAdapter);
  mRangeOptionsSpinner.setOnItemSelectedListener(mOnItemSelectedListener);
  final int[] rangeOptionsValues=getResources().getIntArray(R.array.page_options_values);
  String[] rangeOptionsLabels=getResources().getStringArray(R.array.page_options_labels);
  final int rangeOptionsCount=rangeOptionsLabels.length;
  for (int i=0; i < rangeOptionsCount; i++) {
    mRangeOptionsSpinnerAdapter.add(new SpinnerItem<Integer>(rangeOptionsValues[i],rangeOptionsLabels[i]));
  }
  mRangeOptionsSpinner.setSelection(0);
  mPrintPreviewButton=(Button)findViewById(R.id.print_preview_button);
  mPrintPreviewButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
    }
  }
);
  mPrintButton=(Button)findViewById(R.id.print_button);
  mPrintButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      mPrintConfirmed=true;
      finish();
    }
  }
);
}
