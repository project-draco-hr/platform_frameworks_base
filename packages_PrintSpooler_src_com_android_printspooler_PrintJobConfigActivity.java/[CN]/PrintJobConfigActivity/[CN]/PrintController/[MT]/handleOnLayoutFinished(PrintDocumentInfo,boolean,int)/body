{
  if (mRequestCounter.get() != sequence) {
    return;
  }
  if (isCancelled()) {
    mEditor.updateUi();
    if (mEditor.isDone()) {
      PrintJobConfigActivity.this.finish();
    }
    return;
  }
  final int oldControllerState=mControllerState;
  if (mControllerState == CONTROLLER_STATE_LAYOUT_STARTED) {
    mControllerState=CONTROLLER_STATE_LAYOUT_COMPLETED;
  }
  final boolean infoChanged=!equalsIgnoreSize(info,mDocument.info);
  if (infoChanged) {
    mDocument.info=info;
    mSpoolerProvider.getSpooler().setPrintJobPrintDocumentInfoNoPersistence(mPrintJobId,info);
  }
  if (infoChanged || layoutChanged) {
    mDocument.pages=null;
    mSpoolerProvider.getSpooler().setPrintJobPagesNoPersistence(mPrintJobId,null);
  }
  PageRange[] oldRequestedPages=mRequestedPages;
  mRequestedPages=mEditor.getRequestedPages();
  if (mRequestedPages == null || mRequestedPages.length == 0) {
    mEditor.updateUi();
    if (mEditor.isDone()) {
      PrintJobConfigActivity.this.finish();
    }
    return;
  }
 else {
    if (!mEditor.isPrintConfirmed()) {
      if (ALL_PAGES_ARRAY.equals(mRequestedPages)) {
        mRequestedPages=new PageRange[]{new PageRange(0,0)};
      }
 else {
        final int firstPage=mRequestedPages[0].getStart();
        mRequestedPages=new PageRange[]{new PageRange(firstPage,firstPage)};
      }
    }
  }
  if (!infoChanged && !layoutChanged && (PageRangeUtils.contains(mDocument.pages,mRequestedPages)) || (oldControllerState == CONTROLLER_STATE_WRITE_STARTED && oldRequestedPages != null && PageRangeUtils.contains(oldRequestedPages,mRequestedPages))) {
    if (mDocument.pages != null) {
      updatePrintJobPages(mDocument.pages,mRequestedPages);
    }
    mEditor.updateUi();
    if (mEditor.isDone()) {
      requestCreatePdfFileOrFinish();
    }
    return;
  }
  mEditor.updateUi();
  mControllerState=CONTROLLER_STATE_WRITE_STARTED;
  mRemotePrintAdapter.write(mRequestedPages,mWriteResultCallback,mRequestCounter.incrementAndGet());
}
