{
  final int textLegth=mText.length();
  if (textLegth <= 0) {
    return null;
  }
  if (offset <= 0) {
    return null;
  }
  if (!mView.getGlobalVisibleRect(mTempRect)) {
    return null;
  }
  final int currentLine=mLayout.getLineForOffset(offset);
  final int currentLineTop=mLayout.getLineTop(currentLine);
  final int pageHeight=mTempRect.height() - mView.getTotalPaddingTop() - mView.getTotalPaddingBottom();
  final int previousPageStartLine;
  final int previousPageEndLine;
  if (offset > mText.length()) {
    final int prevousPageStartY=mLayout.getHeight() - pageHeight;
    if (prevousPageStartY < 0) {
      return null;
    }
    previousPageStartLine=mLayout.getLineForVertical(prevousPageStartY);
    previousPageEndLine=mLayout.getLineCount() - 1;
  }
 else {
    final int prevousPageStartY;
    if (offset == mText.length()) {
      prevousPageStartY=mLayout.getHeight() - 2 * pageHeight;
    }
 else {
      prevousPageStartY=currentLineTop - 2 * pageHeight;
    }
    if (prevousPageStartY < 0) {
      return null;
    }
    previousPageStartLine=mLayout.getLineForVertical(prevousPageStartY);
    final int previousPageEndY=prevousPageStartY + pageHeight;
    previousPageEndLine=mLayout.getLineForVertical(previousPageEndY) - 1;
  }
  final int start=getLineEdgeIndex(previousPageStartLine,DIRECTION_START);
  final int end=getLineEdgeIndex(previousPageEndLine,DIRECTION_END) + 1;
  return getRange(start,end);
}
