{
  ClassWriter cw=new ClassWriter(0);
  String internalClassName=CLASS_NAME.replace('.','/');
  HashSet<String> delegateMethods=new HashSet<String>();
  delegateMethods.add(DelegateClassAdapter.ALL_NATIVES);
  DelegateClassAdapter cv=new DelegateClassAdapter(mLog,cw,internalClassName,delegateMethods);
  ClassReader cr=new ClassReader(CLASS_NAME);
  cr.accept(cv,0);
  final byte[] bytes=cw.toByteArray();
  try {
    ClassLoader2 cl2=new ClassLoader2(bytes){
      @Override public void testModifiedInstance() throws Exception {
        Class<?> clazz2=loadClass(CLASS_NAME);
        Object i2=clazz2.newInstance();
        assertNotNull(i2);
        assertEquals(42,callAdd(i2,20,22));
        Object[] objResult=new Object[]{null};
        int result=callCallNativeInstance(i2,10,3.1415,objResult);
        assertEquals((int)(10 + 3.1415),result);
        assertSame(i2,objResult[0]);
        Method[] m=clazz2.getDeclaredMethods();
        assertEquals("native_instance",m[2].getName());
        assertFalse(Modifier.isNative(m[2].getModifiers()));
        Annotation[] a=m[2].getAnnotations();
        assertEquals("LayoutlibDelegate",a[0].annotationType().getSimpleName());
      }
    }
;
    cl2.testModifiedInstance();
  }
 catch (  Throwable t) {
    StringWriter sw=new StringWriter();
    PrintWriter pw=new PrintWriter(sw);
    TraceClassVisitor tcv=new TraceClassVisitor(pw);
    ClassReader cr2=new ClassReader(bytes);
    cr2.accept(tcv,0);
    String msg="\n" + t.getClass().getCanonicalName();
    if (t.getMessage() != null) {
      msg+=": " + t.getMessage();
    }
    msg=msg + "\nBytecode dump:\n" + sw.toString();
    RuntimeException ex=new RuntimeException(msg,t);
    throw ex;
  }
}
