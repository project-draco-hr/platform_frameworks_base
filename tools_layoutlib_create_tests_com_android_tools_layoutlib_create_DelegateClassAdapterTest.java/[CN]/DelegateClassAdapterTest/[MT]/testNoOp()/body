{
  ClassLoader cl1=new ClassLoader(this.getClass().getClassLoader()){
  }
;
  Class<ClassWithNative> clazz1=(Class<ClassWithNative>)cl1.loadClass(NATIVE_CLASS_NAME);
  ClassWithNative instance1=clazz1.newInstance();
  assertEquals(42,instance1.add(20,22));
  try {
    instance1.callNativeInstance(10,3.1415,new Object[0]);
    fail("Test should have failed to invoke callTheNativeMethod [1]");
  }
 catch (  UnsatisfiedLinkError e) {
  }
  ClassWriter cw=new ClassWriter(0);
  HashSet<String> delegateMethods=new HashSet<String>();
  String internalClassName=NATIVE_CLASS_NAME.replace('.','/');
  DelegateClassAdapter cv=new DelegateClassAdapter(mLog,cw,internalClassName,delegateMethods);
  ClassReader cr=new ClassReader(NATIVE_CLASS_NAME);
  cr.accept(cv,0);
  ClassLoader2 cl2=null;
  try {
    cl2=new ClassLoader2(){
      @Override public void testModifiedInstance() throws Exception {
        Class<?> clazz2=loadClass(NATIVE_CLASS_NAME);
        Object i2=clazz2.newInstance();
        assertNotNull(i2);
        assertEquals(42,callAdd(i2,20,22));
        try {
          callCallNativeInstance(i2,10,3.1415,new Object[0]);
          fail("Test should have failed to invoke callTheNativeMethod [2]");
        }
 catch (        InvocationTargetException e) {
          assertEquals(UnsatisfiedLinkError.class,e.getCause().getClass());
        }
        Method[] m=clazz2.getDeclaredMethods();
        assertEquals("native_instance",m[2].getName());
        assertTrue(Modifier.isNative(m[2].getModifiers()));
        Annotation[] a=m[2].getAnnotations();
        assertEquals(0,a.length);
      }
    }
;
    cl2.add(NATIVE_CLASS_NAME,cw);
    cl2.testModifiedInstance();
  }
 catch (  Throwable t) {
    throw dumpGeneratedClass(t,cl2);
  }
}
