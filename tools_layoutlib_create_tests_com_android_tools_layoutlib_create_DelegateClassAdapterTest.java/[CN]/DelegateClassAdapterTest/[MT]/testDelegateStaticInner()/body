{
  HashSet<String> delegateMethods=new HashSet<>();
  delegateMethods.add("get");
  ClassWriter cwOuter=new ClassWriter(0);
  String outerClassName=OUTER_CLASS_NAME.replace('.','/');
  DelegateClassAdapter cvOuter=new DelegateClassAdapter(mLog,cwOuter,outerClassName,delegateMethods);
  ClassReader cr=new ClassReader(OUTER_CLASS_NAME);
  cr.accept(cvOuter,0);
  ClassWriter cwInner=new ClassWriter(0);
  String innerClassName=STATIC_INNER_CLASS_NAME.replace('.','/');
  DelegateClassAdapter cvInner=new DelegateClassAdapter(mLog,cwInner,innerClassName,delegateMethods);
  cr=new ClassReader(STATIC_INNER_CLASS_NAME);
  cr.accept(cvInner,0);
  ClassLoader2 cl2=null;
  try {
    cl2=new ClassLoader2(){
      @Override public void testModifiedInstance() throws Exception {
        Class<?> outerClazz2=loadClass(OUTER_CLASS_NAME);
        Object o2=outerClazz2.newInstance();
        assertNotNull(o2);
        Class<?> innerClazz2=loadClass(STATIC_INNER_CLASS_NAME);
        Constructor<?> innerCons=innerClazz2.getConstructor();
        Object i2=innerCons.newInstance();
        assertNotNull(i2);
        assertEquals(6 + 10 + 20,callGet(i2,10,20));
        assertEquals(100 + 10 + 20,callGet_Original(i2,10,20));
      }
    }
;
    cl2.add(OUTER_CLASS_NAME,cwOuter.toByteArray());
    cl2.add(STATIC_INNER_CLASS_NAME,cwInner.toByteArray());
    cl2.testModifiedInstance();
  }
 catch (  Throwable t) {
    throw dumpGeneratedClass(t,cl2);
  }
}
