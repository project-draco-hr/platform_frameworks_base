{
  Paint p=new Paint();
  final int count=end - start;
  final float[][] advanceArrays=new float[4][count];
  final float advance=p.getTextRunAdvances(str,start,end,contextStart,contextEnd,isRtl,advanceArrays[0],0);
  char chars[]=str.toCharArray();
  final float advance_c=p.getTextRunAdvances(chars,start,count,contextStart,contextEnd - contextStart,isRtl,advanceArrays[1],0);
  assertEquals(advance,advance_c,1.0f);
  for (int c=1; c < count; ++c) {
    final float firstPartAdvance=p.getTextRunAdvances(str,start,start + c,contextStart,contextEnd,isRtl,advanceArrays[2],0);
    final float secondPartAdvance=p.getTextRunAdvances(str,start + c,end,contextStart,contextEnd,isRtl,advanceArrays[2],c);
    assertEquals(advance,firstPartAdvance + secondPartAdvance,1.0f);
    final float firstPartAdvance_c=p.getTextRunAdvances(chars,start,c,contextStart,contextEnd - contextStart,isRtl,advanceArrays[3],0);
    final float secondPartAdvance_c=p.getTextRunAdvances(chars,start + c,count - c,contextStart,contextEnd - contextStart,isRtl,advanceArrays[3],c);
    assertEquals(advance,firstPartAdvance_c + secondPartAdvance_c,1.0f);
    assertEquals(firstPartAdvance,firstPartAdvance_c,1.0f);
    assertEquals(secondPartAdvance,secondPartAdvance_c,1.0f);
    for (int i=1; i < advanceArrays.length; i++) {
      for (int j=0; j < count; j++) {
        assertEquals(advanceArrays[0][j],advanceArrays[i][j],1.0f);
      }
    }
    if (compareWithOtherMethods && start == contextStart && end == contextEnd) {
      assertEquals(advance,p.measureText(str,start,end),1.0f);
      assertEquals(advance,p.getRunAdvance(str,start,end,contextStart,contextEnd,isRtl,end),1.0f);
      final float[] widths=new float[count];
      p.getTextWidths(str,start,end,widths);
      for (int i=0; i < count; i++) {
        assertEquals(advanceArrays[0][i],widths[i],1.0f);
      }
    }
  }
}
