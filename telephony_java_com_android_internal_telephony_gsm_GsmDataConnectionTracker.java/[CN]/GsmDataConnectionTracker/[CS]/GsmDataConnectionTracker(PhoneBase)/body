{
  super(p);
  p.mCM.registerForAvailable(this,EVENT_RADIO_AVAILABLE,null);
  p.mCM.registerForOffOrNotAvailable(this,EVENT_RADIO_OFF_OR_NOT_AVAILABLE,null);
  p.mIccRecords.registerForRecordsLoaded(this,EVENT_RECORDS_LOADED,null);
  p.mCM.registerForDataNetworkStateChanged(this,EVENT_DATA_STATE_CHANGED,null);
  p.getCallTracker().registerForVoiceCallEnded(this,EVENT_VOICE_CALL_ENDED,null);
  p.getCallTracker().registerForVoiceCallStarted(this,EVENT_VOICE_CALL_STARTED,null);
  p.getServiceStateTracker().registerForDataConnectionAttached(this,EVENT_DATA_CONNECTION_ATTACHED,null);
  p.getServiceStateTracker().registerForDataConnectionDetached(this,EVENT_DATA_CONNECTION_DETACHED,null);
  p.getServiceStateTracker().registerForRoamingOn(this,EVENT_ROAMING_ON,null);
  p.getServiceStateTracker().registerForRoamingOff(this,EVENT_ROAMING_OFF,null);
  p.getServiceStateTracker().registerForPsRestrictedEnabled(this,EVENT_PS_RESTRICT_ENABLED,null);
  p.getServiceStateTracker().registerForPsRestrictedDisabled(this,EVENT_PS_RESTRICT_DISABLED,null);
  IntentFilter filter=new IntentFilter();
  filter.addAction(INTENT_DATA_STALL_ALARM);
  p.getContext().registerReceiver(mIntentReceiver,filter,null,p);
  mDataConnectionTracker=this;
  mResolver=mPhone.getContext().getContentResolver();
  mApnObserver=new ApnChangeObserver();
  p.getContext().getContentResolver().registerContentObserver(Telephony.Carriers.CONTENT_URI,true,mApnObserver);
  mApnContexts=new ConcurrentHashMap<String,ApnContext>();
  initApnContextsAndDataConnection();
  broadcastMessenger();
}
