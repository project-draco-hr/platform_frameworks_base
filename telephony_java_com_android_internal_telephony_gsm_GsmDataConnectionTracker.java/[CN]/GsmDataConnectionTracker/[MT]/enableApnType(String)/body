{
  if (DBG)   log("calling enableApnType with type:" + apnType);
  if (!isApnTypeAvailable(apnType)) {
    if (DBG)     log("type not available");
    return Phone.APN_TYPE_NOT_AVAILABLE;
  }
  ApnContext apnContext=mApnContexts.get(apnType);
  if (apnContext == null) {
    apnContext=getProxyActiveApnType(apnType);
    if (apnContext != null) {
      notifyApnIdUpToCurrent(Phone.REASON_APN_SWITCHED,apnContext,apnType);
      return Phone.APN_REQUEST_STARTED;
    }
    apnContext=new ApnContext(apnType,LOG_TAG);
    if (DBG)     log("New apn type context for type " + apnType);
    mApnContexts.put(apnType,apnContext);
  }
  log("enableApnType(" + apnType + ")"+ ", mState("+ apnContext.getState()+ ")");
  if (apnContext.getState() == State.INITING) {
    if (DBG)     log("return APN_REQUEST_STARTED");
    return Phone.APN_REQUEST_STARTED;
  }
 else   if (apnContext.getState() == State.CONNECTED) {
    if (DBG)     log("return APN_ALREADY_ACTIVE");
    return Phone.APN_ALREADY_ACTIVE;
  }
 else   if (apnContext.getState() == State.DISCONNECTING) {
    if (DBG)     log("requested APN while disconnecting");
    apnContext.setPendingAction(ApnContext.PENDING_ACTION_RECONNECT);
    return Phone.APN_REQUEST_STARTED;
  }
  if (DBG)   log("new apn request for type " + apnType + " is to be handled");
  sendMessage(obtainMessage(EVENT_ENABLE_NEW_APN,apnContext));
  if (DBG)   log("return APN_REQUEST_STARTED");
  return Phone.APN_REQUEST_STARTED;
}
