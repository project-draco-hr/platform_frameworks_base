{
  if (DBG)   log("GSMDataConnTrack handleMessage " + msg);
  if (!mPhone.mIsTheCurrentActivePhone || mIsDisposed) {
    log("Ignore GSM msgs since GSM phone is inactive");
    return;
  }
switch (msg.what) {
case EVENT_RECORDS_LOADED:
    onRecordsLoaded();
  break;
case EVENT_DATA_CONNECTION_DETACHED:
onDataConnectionDetached();
break;
case EVENT_DATA_CONNECTION_ATTACHED:
onDataConnectionAttached();
break;
case EVENT_DATA_STATE_CHANGED:
onDataStateChanged((AsyncResult)msg.obj);
break;
case EVENT_POLL_PDP:
onPollPdp();
break;
case EVENT_START_NETSTAT_POLL:
startNetStatPoll();
break;
case EVENT_START_RECOVERY:
doRecovery();
break;
case EVENT_APN_CHANGED:
onApnChanged();
break;
case EVENT_PS_RESTRICT_ENABLED:
log("EVENT_PS_RESTRICT_ENABLED " + mIsPsRestricted);
stopNetStatPoll();
mIsPsRestricted=true;
break;
case EVENT_PS_RESTRICT_DISABLED:
log("EVENT_PS_RESTRICT_DISABLED " + mIsPsRestricted);
mIsPsRestricted=false;
if (isConnected()) {
startNetStatPoll();
}
 else {
if (mState == State.FAILED) {
cleanUpAllConnections(false,Phone.REASON_PS_RESTRICT_ENABLED);
resetAllRetryCounts();
mReregisterOnReconnectFailure=false;
}
trySetupData(Phone.REASON_PS_RESTRICT_ENABLED,Phone.APN_TYPE_DEFAULT);
}
break;
case EVENT_TRY_SETUP_DATA:
if (msg.obj instanceof ApnContext) {
onTrySetupData((ApnContext)msg.obj);
}
 else {
if (msg.obj instanceof String) {
onTrySetupData((String)msg.obj);
}
}
break;
case EVENT_CLEAN_UP_CONNECTION:
boolean tearDown=(msg.arg1 == 0) ? false : true;
if (msg.obj instanceof ApnContext) {
cleanUpConnection(tearDown,(ApnContext)msg.obj);
}
 else {
loge("[GsmDataConnectionTracker] connectpion cleanup request w/o apn context");
}
break;
default :
super.handleMessage(msg);
break;
}
}
