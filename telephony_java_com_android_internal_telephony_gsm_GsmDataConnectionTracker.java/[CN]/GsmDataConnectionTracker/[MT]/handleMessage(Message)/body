{
switch (msg.what) {
case EVENT_RECORDS_LOADED:
    onRecordsLoaded();
  break;
case EVENT_ENABLE_NEW_APN:
onEnableNewApn();
break;
case EVENT_RESTORE_DEFAULT_APN:
onRestoreDefaultApn();
break;
case EVENT_GPRS_DETACHED:
onGprsDetached();
break;
case EVENT_GPRS_ATTACHED:
onGprsAttached();
break;
case EVENT_DATA_STATE_CHANGED:
onPdpStateChanged((AsyncResult)msg.obj,false);
break;
case EVENT_GET_PDP_LIST_COMPLETE:
onPdpStateChanged((AsyncResult)msg.obj,true);
break;
case EVENT_POLL_PDP:
onPollPdp();
break;
case EVENT_START_NETSTAT_POLL:
mPingTestActive=false;
startNetStatPoll();
break;
case EVENT_START_RECOVERY:
mPingTestActive=false;
doRecovery();
break;
case EVENT_APN_CHANGED:
onApnChanged();
break;
case EVENT_PS_RESTRICT_ENABLED:
Log.d(LOG_TAG,"[DSAC DEB] " + "EVENT_PS_RESTRICT_ENABLED " + mIsPsRestricted);
stopNetStatPoll();
mIsPsRestricted=true;
break;
case EVENT_PS_RESTRICT_DISABLED:
Log.d(LOG_TAG,"[DSAC DEB] " + "EVENT_PS_RESTRICT_DISABLED " + mIsPsRestricted);
mIsPsRestricted=false;
if (state == State.CONNECTED) {
startNetStatPoll();
}
 else {
if (state == State.FAILED) {
cleanUpConnection(false,Phone.REASON_PS_RESTRICT_ENABLED);
nextReconnectDelay=RECONNECT_DELAY_INITIAL_MILLIS;
mReregisterOnReconnectFailure=false;
}
trySetupData(Phone.REASON_PS_RESTRICT_ENABLED);
}
break;
default :
super.handleMessage(msg);
break;
}
}
