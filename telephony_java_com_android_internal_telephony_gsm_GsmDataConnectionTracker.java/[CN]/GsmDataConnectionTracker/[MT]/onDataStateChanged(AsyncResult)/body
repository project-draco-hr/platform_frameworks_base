{
  ArrayList<DataCallState> dataCallStates;
  if (DBG)   log("onDataStateChanged(ar): E");
  dataCallStates=(ArrayList<DataCallState>)(ar.result);
  if (ar.exception != null) {
    if (DBG)     log("onDataStateChanged(ar): exception; likely radio not available, ignore");
    return;
  }
  if (DBG)   log("onDataStateChanged(ar): DataCallState size=" + dataCallStates.size());
  HashMap<DataCallState,DataConnectionAc> response;
  response=new HashMap<DataCallState,DataConnectionAc>();
  for (  DataCallState dataCallState : dataCallStates) {
    DataConnectionAc dcac=findDataConnectionAcByCid(dataCallState.cid);
    if (dcac != null)     response.put(dataCallState,dcac);
  }
  List<ApnContext> apnsToClear=findApnContextToClean(response.values());
  for (  DataCallState newState : dataCallStates) {
    DataConnectionAc dcac=response.get(newState);
    if (dcac == null)     continue;
    Collection<ApnContext> apns=dcac.getApnListSync();
    ArrayList<ApnContext> connectedApns=new ArrayList<ApnContext>();
    for (    ApnContext apnContext : apns) {
      if (apnContext.getState() == State.CONNECTED || apnContext.getState() == State.CONNECTING || apnContext.getState() == State.INITING) {
        connectedApns.add(apnContext);
      }
    }
    if (connectedApns.isEmpty()) {
      continue;
    }
    if (DBG)     log("onDataStateChanged(ar): Found ConnId=" + newState.cid + " newState="+ newState.toString());
    if (newState.active != 0) {
      boolean resetConnection;
switch (dcac.updateLinkPropertiesDataCallStateSync(newState)) {
case NONE:
        if (DBG)         log("onDataStateChanged(ar): Found but no change, skip");
      resetConnection=false;
    break;
case CHANGED:
  for (  ApnContext apnContext : connectedApns) {
    if (DBG)     log("onDataStateChanged(ar): Found and changed, notify (" + apnContext.toString() + ")");
    mPhone.notifyDataConnection(Phone.REASON_LINK_PROPERTIES_CHANGED,apnContext.getApnType());
  }
if (SystemProperties.getBoolean("telephony.ignore-state-changes",true)) {
  log("onDataStateChanged(ar): STOPSHIP don't reset, continue");
  resetConnection=false;
}
 else {
  log("onDataStateChanged(ar): changed so resetting connection");
  resetConnection=true;
}
break;
case RESET:
default :
if (DBG) log("onDataStateChanged(ar): an error, reset connection");
resetConnection=true;
break;
}
if (resetConnection == false) continue;
}
if (DBG) log("onDataStateChanged(ar): reset connection.");
apnsToClear.addAll(connectedApns);
}
if (!apnsToClear.isEmpty()) {
int cid=getCellLocationId();
EventLog.writeEvent(EventLogTags.PDP_NETWORK_DROP,cid,TelephonyManager.getDefault().getNetworkType());
}
for (ApnContext apnContext : apnsToClear) {
cleanUpConnection(true,apnContext);
}
if (DBG) log("onDataStateChanged(ar): X");
}
