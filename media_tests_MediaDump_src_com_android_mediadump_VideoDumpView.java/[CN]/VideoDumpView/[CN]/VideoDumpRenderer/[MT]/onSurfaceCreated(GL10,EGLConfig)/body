{
  Log.d(TAG,"onSurfaceCreated");
  mProgram=createProgram(mVertexShader,mFragmentShader);
  if (mProgram == 0) {
    return;
  }
  maPositionHandle=GLES20.glGetAttribLocation(mProgram,"aPosition");
  checkGlError("glGetAttribLocation aPosition");
  if (maPositionHandle == -1) {
    throw new RuntimeException("Could not get attrib location for aPosition");
  }
  maTextureHandle=GLES20.glGetAttribLocation(mProgram,"aTextureCoord");
  checkGlError("glGetAttribLocation aTextureCoord");
  if (maTextureHandle == -1) {
    throw new RuntimeException("Could not get attrib location for aTextureCoord");
  }
  muMVPMatrixHandle=GLES20.glGetUniformLocation(mProgram,"uMVPMatrix");
  checkGlError("glGetUniformLocation uMVPMatrix");
  if (muMVPMatrixHandle == -1) {
    throw new RuntimeException("Could not get attrib location for uMVPMatrix");
  }
  muSTMatrixHandle=GLES20.glGetUniformLocation(mProgram,"uSTMatrix");
  checkGlError("glGetUniformLocation uSTMatrix");
  if (muSTMatrixHandle == -1) {
    throw new RuntimeException("Could not get attrib location for uSTMatrix");
  }
  int[] textures=new int[1];
  GLES20.glGenTextures(1,textures,0);
  mTextureID=textures[0];
  GLES20.glBindTexture(GL_TEXTURE_EXTERNAL_OES,mTextureID);
  checkGlError("glBindTexture mTextureID");
  GLES20.glTexParameterf(GL_TEXTURE_EXTERNAL_OES,GLES20.GL_TEXTURE_MIN_FILTER,GLES20.GL_NEAREST);
  GLES20.glTexParameterf(GL_TEXTURE_EXTERNAL_OES,GLES20.GL_TEXTURE_MAG_FILTER,GLES20.GL_LINEAR);
  GLES20.glTexParameteri(GL_TEXTURE_EXTERNAL_OES,GLES20.GL_TEXTURE_WRAP_S,GLES20.GL_CLAMP_TO_EDGE);
  GLES20.glTexParameteri(GL_TEXTURE_EXTERNAL_OES,GLES20.GL_TEXTURE_WRAP_T,GLES20.GL_CLAMP_TO_EDGE);
  checkGlError("glTexParameteri mTextureID");
  mSurface=new SurfaceTexture(mTextureID);
  mSurface.setOnFrameAvailableListener(this);
  mMediaPlayer.setTexture(mSurface);
  try {
    mMediaPlayer.prepare();
  }
 catch (  IOException t) {
    Log.e(TAG,"media player prepare failed");
  }
synchronized (this) {
    updateSurface=false;
  }
}
