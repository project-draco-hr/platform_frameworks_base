{
  if (mSSIDs.containsKey(networkInfo.getSSID())) {
    String hessid=mSSIDs.get(networkInfo.getSSID());
    if (hessid == null || networkInfo.getHESSID().equals(hessid)) {
      return PasspointMatch.HomeProvider;
    }
  }
  List<Long> allOIs=null;
  if (networkInfo.getRoamingConsortiums() != null) {
    allOIs=new ArrayList<Long>();
    for (    long oi : networkInfo.getRoamingConsortiums()) {
      allOIs.add(oi);
    }
  }
  Map<ANQPElementType,ANQPElement> anqpElementMap=null;
  if (anqpElements != null) {
    anqpElementMap=new EnumMap<ANQPElementType,ANQPElement>(ANQPElementType.class);
    for (    ANQPElement element : anqpElements) {
      anqpElementMap.put(element.getID(),element);
      if (element.getID() == ANQPElementType.ANQPRoamingConsortium) {
        RoamingConsortiumElement rcElement=(RoamingConsortiumElement)element;
        if (!rcElement.getOIs().isEmpty()) {
          if (allOIs == null) {
            allOIs=new ArrayList<Long>(rcElement.getOIs());
          }
 else {
            allOIs.addAll(rcElement.getOIs());
          }
        }
      }
    }
  }
  if (allOIs != null) {
    if (!mRoamingConsortiums.isEmpty()) {
      for (      long oi : allOIs) {
        if (mRoamingConsortiums.contains(oi)) {
          return PasspointMatch.HomeProvider;
        }
      }
    }
    if (!mMatchAnyOIs.isEmpty() || !mMatchAllOIs.isEmpty()) {
      for (      long anOI : allOIs) {
        boolean oneMatchesAll=true;
        for (        long spOI : mMatchAllOIs) {
          if (spOI != anOI) {
            oneMatchesAll=false;
            break;
          }
        }
        if (oneMatchesAll) {
          return PasspointMatch.HomeProvider;
        }
        if (mMatchAnyOIs.contains(anOI)) {
          return PasspointMatch.HomeProvider;
        }
      }
    }
  }
  if (anqpElementMap == null) {
    return PasspointMatch.Incomplete;
  }
  DomainNameElement domainNameElement=(DomainNameElement)anqpElementMap.get(ANQPElementType.ANQPDomName);
  NAIRealmElement naiRealmElement=(NAIRealmElement)anqpElementMap.get(ANQPElementType.ANQPNAIRealm);
  ThreeGPPNetworkElement threeGPPNetworkElement=(ThreeGPPNetworkElement)anqpElementMap.get(ANQPElementType.ANQP3GPPNetwork);
  IPAddressTypeAvailabilityElement ipAddressAvailabilityElement=(IPAddressTypeAvailabilityElement)anqpElementMap.get(ANQPElementType.ANQPIPAddrAvailability);
  HSConnectionCapabilityElement hsConnCapElement=(HSConnectionCapabilityElement)anqpElementMap.get(ANQPElementType.HSConnCapability);
  HSWanMetricsElement hsWanMetricsElement=(HSWanMetricsElement)anqpElementMap.get(ANQPElementType.HSWANMetrics);
  if (domainNameElement != null) {
    for (    String domain : domainNameElement.getDomains()) {
      DomainMatcher.Match match=mDomainMatcher.isSubDomain(splitDomain(domain));
      if (match != DomainMatcher.Match.None) {
        return PasspointMatch.HomeProvider;
      }
    }
  }
  if (naiRealmElement != null) {
    for (    NAIRealmData naiRealmData : naiRealmElement.getRealmData()) {
      DomainMatcher.Match match=DomainMatcher.Match.None;
      for (      String anRealm : naiRealmData.getRealms()) {
        match=mDomainMatcher.isSubDomain(splitDomain(anRealm));
        if (match != DomainMatcher.Match.None) {
          break;
        }
      }
      if (match != DomainMatcher.Match.None) {
        if (mCredentials == null) {
          return PasspointMatch.RoamingProvider;
        }
 else {
          for (          EAPMethod anMethod : naiRealmData.getEAPMethods()) {
            EAPMethod spMethod=mCredentials.get(anMethod.getEAPMethodID());
            if (spMethod.matchesAuthParams(anMethod)) {
              return PasspointMatch.RoamingProvider;
            }
          }
        }
      }
    }
  }
  return PasspointMatch.None;
}
