{
switch (message.what) {
case MESSAGE_START:
{
      PrintAdapter adapter=(PrintAdapter)message.obj;
      adapter.onStart();
    }
  break;
case MESSAGE_PRINT_ATTRIBUTES_CHANGED:
{
  SomeArgs args=(SomeArgs)message.obj;
  PrintAdapter adapter=(PrintAdapter)args.arg1;
  PrintAttributes attributes=(PrintAttributes)args.arg2;
  args.recycle();
  adapter.onPrintAttributesChanged(attributes);
}
break;
case MESSAGE_PRINT:
{
SomeArgs args=(SomeArgs)message.obj;
PrintAdapter adapter=(PrintAdapter)args.arg1;
@SuppressWarnings("unchecked") List<PageRange> pages=(List<PageRange>)args.arg2;
final FileDescriptor fd=(FileDescriptor)args.arg3;
IPrintResultCallback callback=(IPrintResultCallback)args.arg4;
args.recycle();
try {
ICancellationSignal remoteSignal=CancellationSignal.createTransport();
callback.onPrintStarted(adapter.getInfo(),remoteSignal);
CancellationSignal localSignal=CancellationSignal.fromTransport(remoteSignal);
adapter.onPrint(pages,fd,localSignal,new PrintResultCallbackWrapper(callback){
  @Override public void onPrintFinished(  List<PageRange> pages){
    IoUtils.closeQuietly(fd);
    super.onPrintFinished(pages);
  }
  @Override public void onPrintFailed(  CharSequence error){
    IoUtils.closeQuietly(fd);
    super.onPrintFailed(error);
  }
}
);
}
 catch (RemoteException re) {
Log.e(LOG_TAG,"Error printing",re);
IoUtils.closeQuietly(fd);
}
}
break;
case MESSAGE_FINIS:
{
PrintAdapter adapter=(PrintAdapter)message.obj;
adapter.onFinish();
synchronized (mLock) {
finishLocked();
}
}
break;
default :
{
throw new IllegalArgumentException("Unknown message: " + message.what);
}
}
}
