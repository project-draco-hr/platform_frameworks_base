{
  mDatabase.execSQL("CREATE TABLE test (num INTEGER);");
  mDatabase.execSQL("INSERT INTO test (num) VALUES (0)");
  setNum(1);
  checkNum(1);
  setNum(0);
  mDatabase.beginTransaction();
  setNum(1);
  mDatabase.setTransactionSuccessful();
  mDatabase.endTransaction();
  checkNum(1);
  Assert.assertFalse(mDatabase.isDbLockedByCurrentThread());
  setNum(0);
  mDatabase.beginTransaction();
  setNum(1);
  mDatabase.endTransaction();
  checkNum(0);
  Assert.assertFalse(mDatabase.isDbLockedByCurrentThread());
  assertThrowsIllegalState(new Runnable(){
    public void run(){
      mDatabase.endTransaction();
    }
  }
);
  assertThrowsIllegalState(new Runnable(){
    public void run(){
      mDatabase.setTransactionSuccessful();
    }
  }
);
  mDatabase.beginTransaction();
  mDatabase.setTransactionSuccessful();
  assertThrowsIllegalState(new Runnable(){
    public void run(){
      mDatabase.setTransactionSuccessful();
    }
  }
);
  assertThrowsIllegalState(new Runnable(){
    public void run(){
      mDatabase.beginTransaction();
    }
  }
);
  mDatabase.endTransaction();
  Assert.assertFalse(mDatabase.isDbLockedByCurrentThread());
  setNum(0);
  mDatabase.beginTransaction();
  mDatabase.beginTransaction();
  setNum(1);
  mDatabase.setTransactionSuccessful();
  mDatabase.endTransaction();
  mDatabase.setTransactionSuccessful();
  mDatabase.endTransaction();
  checkNum(1);
  Assert.assertFalse(mDatabase.isDbLockedByCurrentThread());
  setNum(0);
  mDatabase.beginTransaction();
  mDatabase.beginTransaction();
  setNum(1);
  mDatabase.endTransaction();
  mDatabase.setTransactionSuccessful();
  mDatabase.endTransaction();
  checkNum(0);
  Assert.assertFalse(mDatabase.isDbLockedByCurrentThread());
  setNum(0);
  mDatabase.beginTransaction();
  mDatabase.beginTransaction();
  setNum(1);
  mDatabase.setTransactionSuccessful();
  mDatabase.endTransaction();
  mDatabase.endTransaction();
  checkNum(0);
  Assert.assertFalse(mDatabase.isDbLockedByCurrentThread());
}
