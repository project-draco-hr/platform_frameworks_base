{
  super(context,attrs,defStyleAttr,defStyleRes);
  final TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.Spinner,defStyleAttr,defStyleRes);
  if (popupTheme != null) {
    mPopupContext=new ContextThemeWrapper(context,popupTheme);
  }
 else {
    final int popupThemeResId=a.getResourceId(R.styleable.Spinner_popupTheme,0);
    if (popupThemeResId != 0) {
      mPopupContext=new ContextThemeWrapper(context,popupThemeResId);
    }
 else {
      mPopupContext=context;
    }
  }
  if (mode == MODE_THEME) {
    mode=a.getInt(R.styleable.Spinner_spinnerMode,MODE_DIALOG);
  }
switch (mode) {
case MODE_DIALOG:
{
      mPopup=new DialogPopup();
      mPopup.setPromptText(a.getString(R.styleable.Spinner_prompt));
      break;
    }
case MODE_DROPDOWN:
{
    final DropdownPopup popup=new DropdownPopup(mPopupContext,attrs,defStyleAttr,defStyleRes);
    final TypedArray pa=mPopupContext.obtainStyledAttributes(attrs,R.styleable.Spinner,defStyleAttr,defStyleRes);
    mDropDownWidth=pa.getLayoutDimension(R.styleable.Spinner_dropDownWidth,ViewGroup.LayoutParams.WRAP_CONTENT);
    popup.setBackgroundDrawable(pa.getDrawable(R.styleable.Spinner_popupBackground));
    popup.setPromptText(a.getString(R.styleable.Spinner_prompt));
    pa.recycle();
    mPopup=popup;
    mForwardingListener=new ForwardingListener(this){
      @Override public ListPopupWindow getPopup(){
        return popup;
      }
      @Override public boolean onForwardingStarted(){
        if (!mPopup.isShowing()) {
          mPopup.show(getTextDirection(),getTextAlignment());
        }
        return true;
      }
    }
;
    break;
  }
}
mGravity=a.getInt(R.styleable.Spinner_gravity,Gravity.CENTER);
mDisableChildrenWhenDisabled=a.getBoolean(R.styleable.Spinner_disableChildrenWhenDisabled,false);
a.recycle();
if (mTempAdapter != null) {
setAdapter(mTempAdapter);
mTempAdapter=null;
}
}
