{
  if (finishInflate == false) {
    if (thisInflater instanceof BridgeInflater) {
      ((BridgeInflater)thisInflater).setIsInMerge(true);
    }
  }
  final int depth=parser.getDepth();
  int type;
  while (((type=parser.next()) != XmlPullParser.END_TAG || parser.getDepth() > depth) && type != XmlPullParser.END_DOCUMENT) {
    if (type != XmlPullParser.START_TAG) {
      continue;
    }
    final String name=parser.getName();
    if (LayoutInflater.TAG_REQUEST_FOCUS.equals(name)) {
      thisInflater.parseRequestFocus(parser,parent);
    }
 else     if (LayoutInflater.TAG_INCLUDE.equals(name)) {
      if (parser.getDepth() == 0) {
        throw new InflateException("<include /> cannot be the root element");
      }
      thisInflater.parseInclude(parser,parent,attrs);
    }
 else     if (LayoutInflater.TAG_MERGE.equals(name)) {
      throw new InflateException("<merge /> must be the root element");
    }
 else {
      final View view=thisInflater.createViewFromTag(parent,name,attrs);
      final ViewGroup viewGroup=(ViewGroup)parent;
      final ViewGroup.LayoutParams params=viewGroup.generateLayoutParams(attrs);
      thisInflater.rInflate(parser,view,attrs,true);
      viewGroup.addView(view,params);
    }
  }
  if (finishInflate)   parent.onFinishInflate();
  if (finishInflate == false) {
    if (thisInflater instanceof BridgeInflater) {
      ((BridgeInflater)thisInflater).setIsInMerge(false);
    }
  }
}
