{
  mCurRotation=rotation;
  int delta=mCurRotation - mBaseRotation;
  if (delta < 0)   delta+=4;
  mDeltaRotation=delta;
switch (delta) {
case Surface.ROTATION_0:
    mMatrix.reset();
  break;
case Surface.ROTATION_90:
mMatrix.setRotate(90,0,0);
mMatrix.postTranslate(0,mWidth);
break;
case Surface.ROTATION_180:
mMatrix.setRotate(180,0,0);
mMatrix.postTranslate(mWidth,mHeight);
break;
case Surface.ROTATION_270:
mMatrix.setRotate(270,0,0);
mMatrix.postTranslate(mHeight,0);
break;
}
mMatrix.getValues(mTmpFloats);
mSurface.setPosition((int)mTmpFloats[Matrix.MTRANS_X],(int)mTmpFloats[Matrix.MTRANS_Y]);
mSurface.setMatrix(mTmpFloats[Matrix.MSCALE_X],mTmpFloats[Matrix.MSKEW_X],mTmpFloats[Matrix.MSKEW_Y],mTmpFloats[Matrix.MSCALE_Y]);
if (false) {
float[] srcPnts=new float[]{0,0,mWidth,mHeight};
float[] dstPnts=new float[8];
mMatrix.mapPoints(dstPnts,srcPnts);
Slog.i(TAG,"**** ROTATION: " + delta);
Slog.i(TAG,"Original  : (" + srcPnts[0] + ","+ srcPnts[1]+ ")-("+ srcPnts[2]+ ","+ srcPnts[3]+ ")");
Slog.i(TAG,"Transformed: (" + dstPnts[0] + ","+ dstPnts[1]+ ")-("+ dstPnts[2]+ ","+ dstPnts[3]+ ")");
}
}
