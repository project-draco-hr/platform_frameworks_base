{
  int delta=deltaRotation(mCurRotation,mOriginalRotation);
  if (false && delta == 0) {
    if (mSurface != null) {
      mSurface.destroy();
      mSurface=null;
    }
    return false;
  }
switch (delta) {
case Surface.ROTATION_0:
    mExitAnimation=AnimationUtils.loadAnimation(mContext,com.android.internal.R.anim.screen_rotate_0_exit);
  mEnterAnimation=AnimationUtils.loadAnimation(mContext,com.android.internal.R.anim.screen_rotate_0_enter);
break;
case Surface.ROTATION_90:
mExitAnimation=AnimationUtils.loadAnimation(mContext,com.android.internal.R.anim.screen_rotate_plus_90_exit);
mEnterAnimation=AnimationUtils.loadAnimation(mContext,com.android.internal.R.anim.screen_rotate_plus_90_enter);
break;
case Surface.ROTATION_180:
mExitAnimation=AnimationUtils.loadAnimation(mContext,com.android.internal.R.anim.screen_rotate_180_exit);
mEnterAnimation=AnimationUtils.loadAnimation(mContext,com.android.internal.R.anim.screen_rotate_180_enter);
break;
case Surface.ROTATION_270:
mExitAnimation=AnimationUtils.loadAnimation(mContext,com.android.internal.R.anim.screen_rotate_minus_90_exit);
mEnterAnimation=AnimationUtils.loadAnimation(mContext,com.android.internal.R.anim.screen_rotate_minus_90_enter);
break;
}
mDisplay.getMetrics(mDisplayMetrics);
mEnterAnimation.initialize(mDisplayMetrics.widthPixels,mDisplayMetrics.heightPixels,mOriginalWidth,mOriginalHeight);
mExitAnimation.initialize(mDisplayMetrics.widthPixels,mDisplayMetrics.heightPixels,mOriginalWidth,mOriginalHeight);
mStarted=false;
mExitAnimation.restrictDuration(maxAnimationDuration);
mExitAnimation.scaleCurrentDuration(animationScale);
mEnterAnimation.restrictDuration(maxAnimationDuration);
mEnterAnimation.scaleCurrentDuration(animationScale);
if (WindowManagerService.SHOW_TRANSACTIONS) Slog.i(WindowManagerService.TAG,">>> OPEN TRANSACTION ScreenRotationAnimation.dismiss");
Surface.openTransaction();
mBlackSurfaces=new BlackSurface[4];
try {
final int w=mDisplayMetrics.widthPixels;
final int h=mDisplayMetrics.heightPixels;
mBlackSurfaces[0]=new BlackSurface(session,FREEZE_LAYER,-w,-h,w,h * 2);
mBlackSurfaces[1]=new BlackSurface(session,FREEZE_LAYER,0,-h,w * 2,h);
mBlackSurfaces[2]=new BlackSurface(session,FREEZE_LAYER,w,0,w,h * 2);
mBlackSurfaces[3]=new BlackSurface(session,FREEZE_LAYER,-w,h,w * 2,h);
}
 catch (Surface.OutOfResourcesException e) {
Slog.w(TAG,"Unable to allocate black surface",e);
}
 finally {
Surface.closeTransaction();
if (WindowManagerService.SHOW_TRANSACTIONS) Slog.i(WindowManagerService.TAG,"<<< CLOSE TRANSACTION ScreenRotationAnimation.dismiss");
}
return true;
}
