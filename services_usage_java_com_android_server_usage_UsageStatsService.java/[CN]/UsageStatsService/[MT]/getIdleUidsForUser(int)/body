{
  if (!mAppIdleEnabled) {
    return new int[0];
  }
  final long elapsedRealtime=SystemClock.elapsedRealtime();
  List<ApplicationInfo> apps;
  try {
    ParceledListSlice<ApplicationInfo> slice=AppGlobals.getPackageManager().getInstalledApplications(0,userId);
    if (slice == null) {
      return new int[0];
    }
    apps=slice.getList();
  }
 catch (  RemoteException e) {
    throw e.rethrowFromSystemServer();
  }
  SparseIntArray uidStates=new SparseIntArray();
  for (int i=apps.size() - 1; i >= 0; i--) {
    ApplicationInfo ai=apps.get(i);
    boolean idle=isAppIdleFiltered(ai.packageName,UserHandle.getAppId(ai.uid),userId,elapsedRealtime);
    int index=uidStates.indexOfKey(ai.uid);
    if (index < 0) {
      uidStates.put(ai.uid,1 + (idle ? 1 << 16 : 0));
    }
 else {
      int value=uidStates.valueAt(index);
      uidStates.setValueAt(index,value + 1 + (idle ? 1 << 16 : 0));
    }
  }
  if (DEBUG) {
    Slog.d(TAG,"getIdleUids took " + (SystemClock.elapsedRealtime() - elapsedRealtime));
  }
  int numIdle=0;
  for (int i=uidStates.size() - 1; i >= 0; i--) {
    int value=uidStates.valueAt(i);
    if ((value & 0x7fff) == (value >> 16)) {
      numIdle++;
    }
  }
  int[] res=new int[numIdle];
  numIdle=0;
  for (int i=uidStates.size() - 1; i >= 0; i--) {
    int value=uidStates.valueAt(i);
    if ((value & 0x7fff) == (value >> 16)) {
      res[numIdle]=uidStates.keyAt(i);
      numIdle++;
    }
  }
  return res;
}
