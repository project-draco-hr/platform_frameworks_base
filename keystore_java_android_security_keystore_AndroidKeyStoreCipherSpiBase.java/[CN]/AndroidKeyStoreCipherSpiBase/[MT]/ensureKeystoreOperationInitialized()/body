{
  if (mMainDataStreamer != null) {
    return;
  }
  if (mCachedException != null) {
    return;
  }
  if (mKey == null) {
    throw new IllegalStateException("Not initialized");
  }
  KeymasterArguments keymasterInputArgs=new KeymasterArguments();
  addAlgorithmSpecificParametersToBegin(keymasterInputArgs);
  byte[] additionalEntropy=KeyStoreCryptoOperationUtils.getRandomBytesToMixIntoKeystoreRng(mRng,getAdditionalEntropyAmountForBegin());
  KeymasterArguments keymasterOutputArgs=new KeymasterArguments();
  OperationResult opResult=mKeyStore.begin(mKey.getAlias(),mEncrypting ? KeymasterDefs.KM_PURPOSE_ENCRYPT : KeymasterDefs.KM_PURPOSE_DECRYPT,true,keymasterInputArgs,additionalEntropy);
  if (opResult == null) {
    throw new KeyStoreConnectException();
  }
  mOperationToken=opResult.token;
  mOperationHandle=opResult.operationHandle;
  GeneralSecurityException e=KeyStoreCryptoOperationUtils.getExceptionForCipherInit(mKeyStore,mKey,opResult.resultCode);
  if (e != null) {
    if (e instanceof InvalidKeyException) {
      throw (InvalidKeyException)e;
    }
 else     if (e instanceof InvalidAlgorithmParameterException) {
      throw (InvalidAlgorithmParameterException)e;
    }
 else {
      throw new ProviderException("Unexpected exception type",e);
    }
  }
  if (mOperationToken == null) {
    throw new ProviderException("Keystore returned null operation token");
  }
  if (mOperationHandle == 0) {
    throw new ProviderException("Keystore returned invalid operation handle");
  }
  loadAlgorithmSpecificParametersFromBeginResult(opResult.outParams);
  mMainDataStreamer=new KeyStoreCryptoOperationChunkedStreamer(new KeyStoreCryptoOperationChunkedStreamer.MainDataStream(mKeyStore,opResult.token));
}
