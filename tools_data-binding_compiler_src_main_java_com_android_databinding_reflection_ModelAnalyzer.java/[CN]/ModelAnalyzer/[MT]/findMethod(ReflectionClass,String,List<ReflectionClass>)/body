{
  ModelClass clazz=toModel(reflectionClass);
  for (  String methodName : new String[]{"set" + StringUtils.capitalize(name),name}) {
    for (    ReflectionMethod method : clazz.getMethods(methodName,args.size())) {
      ReflectionClass[] parameters=method.getParameterTypes();
      boolean parametersMatch=true;
      boolean isVarArgs=((ModelMethod)method).mMethod.isVarArgs();
      for (int i=0; i < parameters.length; i++) {
        if (isVarArgs && i == parameters.length - 1) {
          ReflectionClass component=parameters[i].getComponentType();
          for (int j=i; j < args.size(); j++) {
            if (!component.isAssignableFrom(args.get(j))) {
              parametersMatch=false;
              break;
            }
          }
        }
 else         if (!parameters[i].isAssignableFrom(args.get(i))) {
          parametersMatch=false;
          break;
        }
      }
      if (parametersMatch) {
        return new Callable(Callable.Type.METHOD,methodName,method.getReturnType(args),true,false);
      }
    }
  }
  String message="cannot find method " + name + " at class "+ clazz.toJavaCode();
  printMessage(Diagnostic.Kind.ERROR,message);
  throw new IllegalArgumentException(message);
}
