{
  final boolean isLayoutRtl=isLayoutRtl();
  final int paddingTop=mPaddingTop;
  int childTop;
  int childLeft;
  final int height=bottom - top;
  int innerHeight=height - paddingTop - mPaddingBottom;
  final int count=getChildCount();
  final int layoutDirection=getLayoutDirection();
switch (Gravity.getAbsoluteGravity(Gravity.START,layoutDirection)) {
case Gravity.RIGHT:
    childLeft=mPaddingLeft + right - left - mTotalWidth;
  break;
case Gravity.LEFT:
default :
childLeft=mPaddingLeft;
break;
}
int start=0;
int dir=1;
if (isLayoutRtl) {
start=count - 1;
dir=-1;
}
for (int i=0; i < count; i++) {
final int childIndex=start + dir * i;
final View child=getChildAt(childIndex);
if (child.getVisibility() != GONE) {
final int childWidth=child.getMeasuredWidth();
final int childHeight=child.getMeasuredHeight();
final MarginLayoutParams lp=(MarginLayoutParams)child.getLayoutParams();
childTop=paddingTop + ((innerHeight - childHeight) / 2) + lp.topMargin - lp.bottomMargin;
childLeft+=lp.leftMargin;
child.layout(childLeft,childTop,childLeft + childWidth,childTop + childHeight);
childLeft+=childWidth + lp.rightMargin;
}
}
}
