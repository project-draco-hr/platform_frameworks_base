{
  final int N=getChildCount();
  int textViews=0;
  int otherViews=0;
  int notGoneChildren=0;
  View lastNotGoneChild=null;
  for (int i=0; i < N; i++) {
    View c=getChildAt(i);
    if (c instanceof TextView) {
      textViews++;
    }
 else {
      otherViews++;
    }
    if (c.getVisibility() != GONE) {
      notGoneChildren++;
      lastNotGoneChild=c;
    }
  }
  boolean needRebuild=false;
  if (textViews != mMeasureOrderTextViews.size() || otherViews != mMeasureOrderOther.size()) {
    needRebuild=true;
  }
  if (!needRebuild) {
    final int size=mMeasureOrderTextViews.size();
    for (int i=0; i < size; i++) {
      Pair<Integer,TextView> pair=mMeasureOrderTextViews.get(i);
      if (pair.first != pair.second.getText().length()) {
        needRebuild=true;
      }
    }
  }
  if (notGoneChildren > 1 && needRebuild) {
    rebuildMeasureOrder(textViews,otherViews);
  }
  final boolean constrained=MeasureSpec.getMode(widthMeasureSpec) != MeasureSpec.UNSPECIFIED;
  final int innerWidth=MeasureSpec.getSize(widthMeasureSpec) - mPaddingLeft - mPaddingRight;
  final int otherSize=mMeasureOrderOther.size();
  int usedWidth=0;
  int measuredChildren=0;
  for (int i=0; i < N && notGoneChildren > 1; i++) {
    View c;
    if (i < otherSize) {
      c=mMeasureOrderOther.get(i);
    }
 else {
      c=mMeasureOrderTextViews.get(i - otherSize).second;
    }
    if (c.getVisibility() == GONE) {
      continue;
    }
    MarginLayoutParams lp=(MarginLayoutParams)c.getLayoutParams();
    int usedWidthForChild=usedWidth;
    if (constrained) {
      int availableWidth=innerWidth - usedWidth;
      int maxWidthForChild=availableWidth / (notGoneChildren - measuredChildren);
      usedWidthForChild=innerWidth - maxWidthForChild;
    }
    measureChildWithMargins(c,widthMeasureSpec,usedWidthForChild,heightMeasureSpec,0);
    usedWidth+=c.getMeasuredWidth() + lp.rightMargin + lp.leftMargin;
    measuredChildren++;
  }
  if (lastNotGoneChild != null && (constrained && usedWidth < innerWidth || notGoneChildren == 1)) {
    MarginLayoutParams lp=(MarginLayoutParams)lastNotGoneChild.getLayoutParams();
    if (notGoneChildren > 1) {
      usedWidth-=lastNotGoneChild.getMeasuredWidth() + lp.rightMargin + lp.leftMargin;
    }
    int originalWidth=lp.width;
    lp.width=LayoutParams.MATCH_PARENT;
    measureChildWithMargins(lastNotGoneChild,widthMeasureSpec,usedWidth,heightMeasureSpec,0);
    lp.width=originalWidth;
    usedWidth+=lastNotGoneChild.getMeasuredWidth() + lp.rightMargin + lp.leftMargin;
  }
  mTotalWidth=usedWidth + mPaddingRight + mPaddingLeft;
  setMeasuredDimension(resolveSize(getSuggestedMinimumWidth(),widthMeasureSpec),resolveSize(getSuggestedMinimumHeight(),heightMeasureSpec));
}
