{
  out.println("<table border=\"1\" cellpadding=\"5\"" + " class=\"sortable\">");
  out.println("<thead><tr>");
  out.println("<th>Name</th>");
  out.println("<th>Load Time (us)</th>");
  out.println("<th>Loaded By</th>");
  out.println("<th>Heap (B)</th>");
  out.println("<th>Pages</th>");
  out.println("</tr></thead>");
  for (  LoadedClass clazz : classes) {
    out.println("<tr>");
    out.println("<td>" + clazz.name + "</td>");
    out.println("<td>" + clazz.medianTimeMicros() + "</td>");
    out.println("<td>");
    Set<String> procNames=new TreeSet<String>();
    for (    Operation op : clazz.loads)     procNames.add(op.process.name);
    for (    Operation op : clazz.initializations) {
      procNames.add(op.process.name);
    }
    if (procNames.size() <= 3) {
      for (      String name : procNames) {
        out.print(name + "<br/>");
      }
    }
 else {
      Iterator<String> i=procNames.iterator();
      out.print(i.next() + "<br/>");
      out.print(i.next() + "<br/>");
      out.print("...and " + (procNames.size() - 2) + " others.");
    }
    out.println("</td>");
    if (clazz.memoryUsage.isAvailable()) {
      MemoryUsage subtracted=clazz.memoryUsage.subtract(baseline);
      out.println("<td>" + (subtracted.javaHeapSize() + subtracted.nativeHeapSize) + "</td>");
      out.println("<td>" + subtracted.totalPages() + "</td>");
    }
 else {
      for (int i=0; i < 2; i++) {
        out.println("<td>n/a</td>");
      }
    }
    out.println("</tr>");
  }
  out.println("</table>");
}
