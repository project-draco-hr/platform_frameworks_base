{
  try {
    if (getString("migrated",null,0) == null) {
      final ContentResolver cr=mContext.getContentResolver();
      for (      String validSetting : VALID_SETTINGS) {
        String value=Settings.Secure.getString(cr,validSetting);
        if (value != null) {
          setString(validSetting,value,0);
        }
      }
      setString("migrated","true",0);
      Slog.i(TAG,"Migrated lock settings to new location");
    }
    if (getString("migrated_user_specific",null,0) == null) {
      final UserManager um=(UserManager)mContext.getSystemService(USER_SERVICE);
      final ContentResolver cr=mContext.getContentResolver();
      List<UserInfo> users=um.getUsers();
      for (int user=0; user < users.size(); user++) {
        final int userId=users.get(user).id;
        final String OWNER_INFO=Secure.LOCK_SCREEN_OWNER_INFO;
        String ownerInfo=Settings.Secure.getStringForUser(cr,OWNER_INFO,userId);
        if (ownerInfo != null) {
          setString(OWNER_INFO,ownerInfo,userId);
          Settings.Secure.putStringForUser(cr,ownerInfo,"",userId);
        }
        final String OWNER_INFO_ENABLED=Secure.LOCK_SCREEN_OWNER_INFO_ENABLED;
        boolean enabled;
        try {
          int ivalue=Settings.Secure.getIntForUser(cr,OWNER_INFO_ENABLED,userId);
          enabled=ivalue != 0;
          setLong(OWNER_INFO_ENABLED,enabled ? 1 : 0,userId);
        }
 catch (        SettingNotFoundException e) {
          if (!TextUtils.isEmpty(ownerInfo)) {
            setLong(OWNER_INFO_ENABLED,1,userId);
          }
        }
        Settings.Secure.putIntForUser(cr,OWNER_INFO_ENABLED,0,userId);
      }
      setString("migrated_user_specific","true",0);
      Slog.i(TAG,"Migrated per-user lock settings to new location");
    }
  }
 catch (  RemoteException re) {
    Slog.e(TAG,"Unable to migrate old data",re);
  }
}
