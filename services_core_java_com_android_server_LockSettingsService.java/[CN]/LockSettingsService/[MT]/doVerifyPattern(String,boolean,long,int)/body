{
  checkPasswordReadPermission(userId);
  CredentialHash storedHash=mStorage.readPatternHash(userId);
  boolean shouldReEnrollBaseZero=storedHash != null && storedHash.isBaseZeroPattern;
  String patternToVerify;
  if (shouldReEnrollBaseZero) {
    patternToVerify=LockPatternUtils.patternStringToBaseZero(pattern);
  }
 else {
    patternToVerify=pattern;
  }
  VerifyCredentialResponse response=verifyCredential(userId,storedHash,patternToVerify,hasChallenge,challenge,new CredentialUtil(){
    @Override public void setCredential(    String pattern,    String oldPattern,    int userId) throws RemoteException {
      setLockPatternInternal(pattern,oldPattern,userId);
    }
    @Override public byte[] toHash(    String pattern,    int userId){
      return LockPatternUtils.patternToHash(LockPatternUtils.stringToPattern(pattern));
    }
    @Override public String adjustForKeystore(    String pattern){
      return LockPatternUtils.patternStringToBaseZero(pattern);
    }
  }
);
  if (response.getResponseCode() == VerifyCredentialResponse.RESPONSE_OK && shouldReEnrollBaseZero) {
    setLockPatternInternal(pattern,patternToVerify,userId);
  }
  return response;
}
