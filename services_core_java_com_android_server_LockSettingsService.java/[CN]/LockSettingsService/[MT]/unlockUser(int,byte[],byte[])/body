{
  final CountDownLatch latch=new CountDownLatch(1);
  final IProgressListener listener=new IProgressListener.Stub(){
    @Override public void onStarted(    int id,    Bundle extras) throws RemoteException {
      Log.d(TAG,"unlockUser started");
    }
    @Override public void onProgress(    int id,    int progress,    Bundle extras) throws RemoteException {
      Log.d(TAG,"unlockUser progress " + progress);
    }
    @Override public void onFinished(    int id,    Bundle extras) throws RemoteException {
      Log.d(TAG,"unlockUser finished");
      latch.countDown();
    }
  }
;
  if (mUserManager.isQuietModeEnabled(new UserHandle(userId))) {
    mUserManager.setQuietModeEnabled(userId,false);
  }
  try {
    ActivityManagerNative.getDefault().unlockUser(userId,token,secret,listener);
  }
 catch (  RemoteException e) {
    throw e.rethrowAsRuntimeException();
  }
  try {
    latch.await(15,TimeUnit.SECONDS);
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
  }
  try {
    if (!mUserManager.getUserInfo(userId).isManagedProfile()) {
      final List<UserInfo> profiles=mUserManager.getProfiles(userId);
      for (      UserInfo pi : profiles) {
        if (pi.isManagedProfile() && !mLockPatternUtils.isSeparateProfileChallengeEnabled(pi.id) && !pi.isQuietModeEnabled()&& mStorage.hasChildProfileLock(pi.id)) {
          unlockChildProfile(pi.id);
        }
      }
    }
  }
 catch (  RemoteException e) {
    Log.d(TAG,"Failed to unlock child profile",e);
  }
}
