{
  if ((storedHash == null || storedHash.hash.length == 0) && TextUtils.isEmpty(credential)) {
    return VerifyCredentialResponse.OK;
  }
  if (TextUtils.isEmpty(credential)) {
    return VerifyCredentialResponse.ERROR;
  }
  if (storedHash.version == CredentialHash.VERSION_LEGACY) {
    byte[] hash=credentialUtil.toHash(credential,userId);
    if (Arrays.equals(hash,storedHash.hash)) {
      unlockKeystore(credentialUtil.adjustForKeystore(credential),userId);
      final byte[] token=String.valueOf(userId).getBytes();
      unlockUser(userId,token);
      credentialUtil.setCredential(credential,null,userId);
      if (!hasChallenge) {
        return VerifyCredentialResponse.OK;
      }
    }
 else {
      return VerifyCredentialResponse.ERROR;
    }
  }
  VerifyCredentialResponse response;
  boolean shouldReEnroll=false;
  GateKeeperResponse gateKeeperResponse=getGateKeeperService().verifyChallenge(userId,challenge,storedHash.hash,credential.getBytes());
  int responseCode=gateKeeperResponse.getResponseCode();
  if (responseCode == GateKeeperResponse.RESPONSE_RETRY) {
    response=new VerifyCredentialResponse(gateKeeperResponse.getTimeout());
  }
 else   if (responseCode == GateKeeperResponse.RESPONSE_OK) {
    byte[] token=gateKeeperResponse.getPayload();
    if (token == null) {
      Slog.e(TAG,"verifyChallenge response had no associated payload");
      response=VerifyCredentialResponse.ERROR;
    }
 else {
      shouldReEnroll=gateKeeperResponse.getShouldReEnroll();
      response=new VerifyCredentialResponse(token);
    }
  }
 else {
    response=VerifyCredentialResponse.ERROR;
  }
  if (response.getResponseCode() == VerifyCredentialResponse.RESPONSE_OK) {
    unlockKeystore(credential,userId);
    final byte[] token=String.valueOf(userId).getBytes();
    unlockUser(userId,token);
    UserInfo info=UserManager.get(mContext).getUserInfo(userId);
    if (mLockPatternUtils.isSeparateProfileChallengeEnabled(userId)) {
      TrustManager trustManager=(TrustManager)mContext.getSystemService(Context.TRUST_SERVICE);
      trustManager.setDeviceLockedForUser(userId,false);
    }
    if (shouldReEnroll) {
      credentialUtil.setCredential(credential,credential,userId);
    }
  }
 else   if (response.getResponseCode() == VerifyCredentialResponse.RESPONSE_RETRY) {
    if (response.getTimeout() > 0) {
      requireStrongAuth(STRONG_AUTH_REQUIRED_AFTER_LOCKOUT,userId);
    }
  }
  return response;
}
