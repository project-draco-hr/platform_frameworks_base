{
  if (context == null) {
    throw new IllegalArgumentException("context == null");
  }
 else   if (TextUtils.isEmpty(keyStoreAlias)) {
    throw new IllegalArgumentException("keyStoreAlias must not be empty");
  }
 else   if ((userAuthenticationValidityDurationSeconds < 0) && (userAuthenticationValidityDurationSeconds != -1)) {
    throw new IllegalArgumentException("userAuthenticationValidityDurationSeconds must not be negative");
  }
  if (subjectDN == null) {
    subjectDN=DEFAULT_CERT_SUBJECT;
  }
  if (startDate == null) {
    startDate=DEFAULT_CERT_NOT_BEFORE;
  }
  if (endDate == null) {
    endDate=DEFAULT_CERT_NOT_AFTER;
  }
  if (serialNumber == null) {
    serialNumber=DEFAULT_CERT_SERIAL_NUMBER;
  }
  if (endDate.before(startDate)) {
    throw new IllegalArgumentException("endDate < startDate");
  }
  mContext=context;
  mKeystoreAlias=keyStoreAlias;
  mKeyType=keyType;
  mKeySize=keySize;
  mSpec=spec;
  mSubjectDN=subjectDN;
  mSerialNumber=serialNumber;
  mStartDate=startDate;
  mEndDate=endDate;
  mFlags=flags;
  mKeyValidityStart=keyValidityStart;
  mKeyValidityForOriginationEnd=keyValidityForOriginationEnd;
  mKeyValidityForConsumptionEnd=keyValidityForConsumptionEnd;
  mPurposes=purposes;
  mDigests=ArrayUtils.cloneIfNotEmpty(ArrayUtils.nullToEmpty(digests));
  mEncryptionPaddings=ArrayUtils.cloneIfNotEmpty(ArrayUtils.nullToEmpty(encryptionPaddings));
  mSignaturePaddings=ArrayUtils.cloneIfNotEmpty(ArrayUtils.nullToEmpty(signaturePaddings));
  mBlockModes=ArrayUtils.cloneIfNotEmpty(ArrayUtils.nullToEmpty(blockModes));
  mRandomizedEncryptionRequired=randomizedEncryptionRequired;
  mUserAuthenticationRequired=userAuthenticationRequired;
  mUserAuthenticationValidityDurationSeconds=userAuthenticationValidityDurationSeconds;
}
