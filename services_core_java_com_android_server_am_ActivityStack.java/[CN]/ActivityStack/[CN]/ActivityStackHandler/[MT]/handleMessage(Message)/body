{
switch (msg.what) {
case PAUSE_TIMEOUT_MSG:
{
      ActivityRecord r=(ActivityRecord)msg.obj;
      Slog.w(TAG,"Activity pause timeout for " + r);
synchronized (mService) {
        if (r.app != null) {
          mService.logAppTooSlow(r.app,r.pauseTime,"pausing " + r);
        }
        activityPausedLocked(r.appToken,true,r.persistentState);
      }
    }
  break;
case LAUNCH_TICK_MSG:
{
  ActivityRecord r=(ActivityRecord)msg.obj;
synchronized (mService) {
    if (r.continueLaunchTickingLocked()) {
      mService.logAppTooSlow(r.app,r.launchTickTime,"launching " + r);
    }
  }
}
break;
case DESTROY_TIMEOUT_MSG:
{
ActivityRecord r=(ActivityRecord)msg.obj;
Slog.w(TAG,"Activity destroy timeout for " + r);
synchronized (mService) {
activityDestroyedLocked(r != null ? r.appToken : null);
}
}
break;
case STOP_TIMEOUT_MSG:
{
ActivityRecord r=(ActivityRecord)msg.obj;
Slog.w(TAG,"Activity stop timeout for " + r);
synchronized (mService) {
if (r.isInHistory()) {
activityStoppedLocked(r,null,null,null);
}
}
}
break;
case DESTROY_ACTIVITIES_MSG:
{
ScheduleDestroyArgs args=(ScheduleDestroyArgs)msg.obj;
synchronized (mService) {
destroyActivitiesLocked(args.mOwner,args.mReason);
}
}
break;
case TRANSLUCENT_TIMEOUT_MSG:
{
synchronized (mService) {
notifyActivityDrawnLocked(null);
}
}
break;
case STOP_MEDIA_PLAYING_TIMEOUT_MSG:
{
synchronized (mService) {
final ActivityRecord r=getMediaPlayer();
Slog.e(TAG,"Timeout waiting for stopMediaPlaying player=" + r);
if (r != null) {
mService.killAppAtUsersRequest(r.app,null);
}
}
}
break;
}
}
