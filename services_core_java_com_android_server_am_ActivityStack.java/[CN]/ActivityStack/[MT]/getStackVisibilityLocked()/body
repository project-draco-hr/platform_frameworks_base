{
  if (!isAttached()) {
    return STACK_INVISIBLE;
  }
  if (mStackSupervisor.isFrontStack(this) || mStackSupervisor.isFocusedStack(this)) {
    return STACK_VISIBLE;
  }
  final int stackIndex=mStacks.indexOf(this);
  if (stackIndex == mStacks.size() - 1) {
    Slog.wtf(TAG,"Stack=" + this + " isn't front stack but is at the top of the stack list");
    return STACK_INVISIBLE;
  }
  final boolean isLockscreenShown=mService.mLockScreenShown == LOCK_SCREEN_SHOWN;
  if (isLockscreenShown && !StackId.isAllowedOverLockscreen(mStackId)) {
    return STACK_INVISIBLE;
  }
  final ActivityStack focusedStack=mStackSupervisor.getFocusedStack();
  final int focusedStackId=focusedStack.mStackId;
  if (mStackId == FULLSCREEN_WORKSPACE_STACK_ID && hasVisibleBehindActivity() && focusedStackId == HOME_STACK_ID && !focusedStack.topActivity().fullscreen) {
    return STACK_VISIBLE_ACTIVITY_BEHIND;
  }
  if (mStackId == DOCKED_STACK_ID) {
    if (focusedStackId != HOME_STACK_ID) {
      return STACK_VISIBLE;
    }
    ActivityRecord topHomeActivity=focusedStack.topRunningActivityLocked();
    return topHomeActivity == null || !topHomeActivity.isHomeActivity() ? STACK_VISIBLE : STACK_INVISIBLE;
  }
  int belowFocusedIndex=mStacks.indexOf(focusedStack) - 1;
  while (belowFocusedIndex >= 0 && mStacks.get(belowFocusedIndex).topRunningActivityLocked() == null) {
    belowFocusedIndex--;
  }
  if ((focusedStackId == DOCKED_STACK_ID || focusedStackId == PINNED_STACK_ID) && stackIndex == belowFocusedIndex) {
    return STACK_VISIBLE;
  }
  if (focusedStackId == FULLSCREEN_WORKSPACE_STACK_ID && hasTranslucentActivity(focusedStack)) {
    if (stackIndex == belowFocusedIndex) {
      return STACK_VISIBLE;
    }
    if (belowFocusedIndex >= 0) {
      final ActivityStack stack=mStacks.get(belowFocusedIndex);
      if ((stack.mStackId == DOCKED_STACK_ID || stack.mStackId == PINNED_STACK_ID) && stackIndex == (belowFocusedIndex - 1)) {
        return STACK_VISIBLE;
      }
    }
  }
  if (StackId.isStaticStack(mStackId)) {
    return STACK_INVISIBLE;
  }
  for (int i=stackIndex + 1; i < mStacks.size(); i++) {
    final ActivityStack stack=mStacks.get(i);
    if (!stack.mFullscreen && !stack.hasFullscreenTask()) {
      continue;
    }
    if (!StackId.isDynamicStacksVisibleBehindAllowed(stack.mStackId)) {
      return STACK_INVISIBLE;
    }
    if (!hasTranslucentActivity(stack)) {
      return STACK_INVISIBLE;
    }
  }
  return STACK_VISIBLE;
}
