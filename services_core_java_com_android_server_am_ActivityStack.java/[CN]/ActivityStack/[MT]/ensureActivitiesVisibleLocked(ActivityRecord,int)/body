{
  ActivityRecord top=topRunningActivityLocked(null);
  if (top == null) {
    return;
  }
  if (DEBUG_VISIBILITY)   Slog.v(TAG_VISIBILITY,"ensureActivitiesVisible behind " + top + " configChanges=0x"+ Integer.toHexString(configChanges));
  if (mTranslucentActivityWaiting != top) {
    mUndrawnActivitiesBelowTopTranslucent.clear();
    if (mTranslucentActivityWaiting != null) {
      notifyActivityDrawnLocked(null);
      mTranslucentActivityWaiting=null;
    }
    mHandler.removeMessages(TRANSLUCENT_TIMEOUT_MSG);
  }
  boolean aboveTop=true;
  boolean behindFullscreen=!isStackVisibleLocked();
  boolean noStackActivityResumed=(isInStackLocked(starting) == null);
  for (int taskNdx=mTaskHistory.size() - 1; taskNdx >= 0; --taskNdx) {
    final TaskRecord task=mTaskHistory.get(taskNdx);
    final ArrayList<ActivityRecord> activities=task.mActivities;
    for (int activityNdx=activities.size() - 1; activityNdx >= 0; --activityNdx) {
      final ActivityRecord r=activities.get(activityNdx);
      if (r.finishing) {
        continue;
      }
      if (aboveTop && r != top) {
        continue;
      }
      aboveTop=false;
      if (!behindFullscreen || r.mLaunchTaskBehind) {
        if (DEBUG_VISIBILITY)         Slog.v(TAG_VISIBILITY,"Make visible? " + r + " finishing="+ r.finishing+ " state="+ r.state);
        if (r != starting) {
          ensureActivityConfigurationLocked(r,0);
        }
        if (r.app == null || r.app.thread == null) {
          if (DEBUG_VISIBILITY)           Slog.v(TAG_VISIBILITY,"Start and freeze screen for " + r);
          if (r != starting) {
            r.startFreezingScreenLocked(r.app,configChanges);
          }
          if (!r.visible || r.mLaunchTaskBehind) {
            if (DEBUG_VISIBILITY)             Slog.v(TAG_VISIBILITY,"Starting and making visible: " + r);
            setVisible(r,true);
          }
          if (r != starting) {
            mStackSupervisor.startSpecificActivityLocked(r,noStackActivityResumed,false);
            noStackActivityResumed=false;
          }
        }
 else         if (r.visible) {
          if (DEBUG_VISIBILITY)           Slog.v(TAG_VISIBILITY,"Skipping: already visible at " + r);
          r.stopFreezingScreenLocked(false);
          try {
            if (r.returningOptions != null) {
              r.app.thread.scheduleOnNewActivityOptions(r.appToken,r.returningOptions);
            }
          }
 catch (          RemoteException e) {
          }
          if (r.state == ActivityState.RESUMED) {
            noStackActivityResumed=false;
          }
        }
 else {
          r.visible=true;
          if (r.state != ActivityState.RESUMED && r != starting) {
            if (DEBUG_VISIBILITY)             Slog.v(TAG_VISIBILITY,"Making visible and scheduling visibility: " + r);
            try {
              if (mTranslucentActivityWaiting != null) {
                r.updateOptionsLocked(r.returningOptions);
                mUndrawnActivitiesBelowTopTranslucent.add(r);
              }
              setVisible(r,true);
              r.sleeping=false;
              r.app.pendingUiClean=true;
              r.app.thread.scheduleWindowVisibility(r.appToken,true);
              r.stopFreezingScreenLocked(false);
            }
 catch (            Exception e) {
              Slog.w(TAG,"Exception thrown making visibile: " + r.intent.getComponent(),e);
            }
          }
        }
        configChanges|=r.configChangeFlags;
        if (r.fullscreen) {
          if (DEBUG_VISIBILITY)           Slog.v(TAG_VISIBILITY,"Fullscreen: at " + r);
          behindFullscreen=true;
        }
 else         if (!isHomeStack() && r.frontOfTask && task.isOverHomeStack()) {
          if (DEBUG_VISIBILITY)           Slog.v(TAG_VISIBILITY,"Showing home: at " + r);
          behindFullscreen=true;
        }
      }
 else {
        if (DEBUG_VISIBILITY)         Slog.v(TAG_VISIBILITY,"Make invisible? " + r + " finishing="+ r.finishing+ " state="+ r.state+ " behindFullscreen="+ behindFullscreen);
        if (r.visible) {
          if (DEBUG_VISIBILITY)           Slog.v(TAG_VISIBILITY,"Making invisible: " + r);
          try {
            setVisible(r,false);
switch (r.state) {
case STOPPING:
case STOPPED:
              if (r.app != null && r.app.thread != null) {
                if (DEBUG_VISIBILITY)                 Slog.v(TAG_VISIBILITY,"Scheduling invisibility: " + r);
                r.app.thread.scheduleWindowVisibility(r.appToken,false);
              }
            break;
case INITIALIZING:
case RESUMED:
case PAUSING:
case PAUSED:
          if (getVisibleBehindActivity() == r) {
            releaseBackgroundResources(r);
          }
 else {
            if (!mStackSupervisor.mStoppingActivities.contains(r)) {
              mStackSupervisor.mStoppingActivities.add(r);
            }
            mStackSupervisor.scheduleIdleLocked();
          }
        break;
default :
      break;
  }
}
 catch (Exception e) {
  Slog.w(TAG,"Exception thrown making hidden: " + r.intent.getComponent(),e);
}
}
 else {
if (DEBUG_VISIBILITY) Slog.v(TAG_VISIBILITY,"Already invisible: " + r);
}
}
}
}
if (mTranslucentActivityWaiting != null && mUndrawnActivitiesBelowTopTranslucent.isEmpty()) {
notifyActivityDrawnLocked(null);
}
}
