{
  final long startNanos;
synchronized (mLock) {
    if (!mFrameScheduled) {
      return;
    }
    if (DEBUG_JANK && mDebugPrintNextFrameTimeDelta) {
      mDebugPrintNextFrameTimeDelta=false;
      Log.d(TAG,"Frame time delta: " + ((frameTimeNanos - mLastFrameTimeNanos) * 0.000001f) + " ms");
    }
    long intendedFrameTimeNanos=frameTimeNanos;
    startNanos=System.nanoTime();
    final long jitterNanos=startNanos - frameTimeNanos;
    if (jitterNanos >= mFrameIntervalNanos) {
      final long skippedFrames=jitterNanos / mFrameIntervalNanos;
      if (skippedFrames >= SKIPPED_FRAME_WARNING_LIMIT) {
        Log.i(TAG,"Skipped " + skippedFrames + " frames!  "+ "The application may be doing too much work on its main thread.");
      }
      final long lastFrameOffset=jitterNanos % mFrameIntervalNanos;
      if (DEBUG_JANK) {
        Log.d(TAG,"Missed vsync by " + (jitterNanos * 0.000001f) + " ms "+ "which is more than the frame interval of "+ (mFrameIntervalNanos * 0.000001f)+ " ms!  "+ "Skipping "+ skippedFrames+ " frames and setting frame "+ "time to "+ (lastFrameOffset * 0.000001f)+ " ms in the past.");
      }
      frameTimeNanos=startNanos - lastFrameOffset;
    }
    if (frameTimeNanos < mLastFrameTimeNanos) {
      if (DEBUG_JANK) {
        Log.d(TAG,"Frame time appears to be going backwards.  May be due to a " + "previously skipped frame.  Waiting for next vsync.");
      }
      scheduleVsyncLocked();
      return;
    }
    mFrameInfo.setVsync(intendedFrameTimeNanos,frameTimeNanos);
    mFrameScheduled=false;
    mLastFrameTimeNanos=frameTimeNanos;
  }
  mFrameInfo.markInputHandlingStart();
  doCallbacks(Choreographer.CALLBACK_INPUT,frameTimeNanos);
  mFrameInfo.markAnimationsStart();
  doCallbacks(Choreographer.CALLBACK_ANIMATION,frameTimeNanos);
  mFrameInfo.markPerformTraversalsStart();
  doCallbacks(Choreographer.CALLBACK_TRAVERSAL,frameTimeNanos);
  doCallbacks(Choreographer.CALLBACK_COMMIT,frameTimeNanos);
  if (DEBUG_FRAMES) {
    final long endNanos=System.nanoTime();
    Log.d(TAG,"Frame " + frame + ": Finished, took "+ (endNanos - startNanos) * 0.000001f + " ms, latency " + (startNanos - frameTimeNanos) * 0.000001f + " ms.");
  }
}
