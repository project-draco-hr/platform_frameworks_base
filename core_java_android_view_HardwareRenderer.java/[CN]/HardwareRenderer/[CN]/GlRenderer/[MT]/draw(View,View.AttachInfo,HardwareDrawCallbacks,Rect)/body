{
  if (canDraw()) {
    if (!hasDirtyRegions()) {
      dirty=null;
    }
    attachInfo.mIgnoreDirtyState=true;
    attachInfo.mDrawingTime=SystemClock.uptimeMillis();
    view.mPrivateFlags|=View.DRAWN;
    final int surfaceState=checkCurrent();
    if (surfaceState != SURFACE_STATE_ERROR) {
      if (surfaceState == SURFACE_STATE_UPDATED) {
        dirty=null;
      }
      beginFrame();
      onPreDraw(dirty);
      HardwareCanvas canvas=mCanvas;
      attachInfo.mHardwareCanvas=canvas;
      int saveCount=canvas.save();
      callbacks.onHardwarePreDraw(canvas);
      try {
        view.mRecreateDisplayList=(view.mPrivateFlags & View.INVALIDATED) == View.INVALIDATED;
        view.mPrivateFlags&=~View.INVALIDATED;
        long getDisplayListStartTime=0;
        if (mProfileEnabled) {
          mProfileCurrentFrame+=PROFILE_FRAME_DATA_COUNT;
          if (mProfileCurrentFrame >= mProfileData.length) {
            mProfileCurrentFrame=0;
          }
          getDisplayListStartTime=System.nanoTime();
        }
        DisplayList displayList=view.getDisplayList();
        if (mProfileEnabled) {
          long now=System.nanoTime();
          float total=(now - getDisplayListStartTime) * 0.000001f;
          mProfileData[mProfileCurrentFrame]=total;
          if (ViewDebug.DEBUG_LATENCY) {
            Log.d(ViewDebug.DEBUG_LATENCY_TAG,"- getDisplayList() took " + total + "ms");
          }
          if (View.USE_DISPLAY_LIST_PROPERTIES) {
            Log.d("DLProperties","getDisplayList():\t" + mProfileData[mProfileCurrentFrame]);
          }
        }
        if (displayList != null) {
          long drawDisplayListStartTime=0;
          if (mProfileEnabled) {
            drawDisplayListStartTime=System.nanoTime();
          }
          int status=canvas.drawDisplayList(displayList,view.getWidth(),view.getHeight(),mRedrawClip,DisplayList.FLAG_CLIP_CHILDREN);
          if (mProfileEnabled) {
            long now=System.nanoTime();
            float total=(now - drawDisplayListStartTime) * 0.000001f;
            mProfileData[mProfileCurrentFrame + 1]=total;
            if (ViewDebug.DEBUG_LATENCY) {
              Log.d(ViewDebug.DEBUG_LATENCY_TAG,"- drawDisplayList() took " + total + "ms, status="+ status);
            }
          }
          if (status != DisplayList.STATUS_DONE) {
            if (mRedrawClip.isEmpty()) {
              attachInfo.mViewRootImpl.invalidate();
            }
 else {
              attachInfo.mViewRootImpl.invalidateChildInParent(null,mRedrawClip);
              mRedrawClip.setEmpty();
            }
          }
        }
 else {
          view.draw(canvas);
        }
      }
  finally {
        callbacks.onHardwarePostDraw(canvas);
        canvas.restoreToCount(saveCount);
        view.mRecreateDisplayList=false;
        if (mDebugDirtyRegions) {
          if (mDebugPaint == null) {
            mDebugPaint=new Paint();
            mDebugPaint.setColor(0x7fff0000);
          }
          if (dirty != null && (mFrameCount++ & 1) == 0) {
            canvas.drawRect(dirty,mDebugPaint);
          }
        }
      }
      onPostDraw();
      attachInfo.mIgnoreDirtyState=false;
      long eglSwapBuffersStartTime=0;
      if (mProfileEnabled) {
        eglSwapBuffersStartTime=System.nanoTime();
      }
      sEgl.eglSwapBuffers(sEglDisplay,mEglSurface);
      if (mProfileEnabled) {
        long now=System.nanoTime();
        float total=(now - eglSwapBuffersStartTime) * 0.000001f;
        mProfileData[mProfileCurrentFrame + 2]=total;
        if (ViewDebug.DEBUG_LATENCY) {
          Log.d(ViewDebug.DEBUG_LATENCY_TAG,"- eglSwapBuffers() took " + total + "ms");
        }
      }
      checkEglErrors();
      return dirty == null;
    }
  }
  return false;
}
