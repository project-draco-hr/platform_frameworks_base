{
  if (sEgl == null) {
    throw new RuntimeException("egl not initialized");
  }
  if (sEglDisplay == null) {
    throw new RuntimeException("eglDisplay not initialized");
  }
  if (sEglConfig == null) {
    throw new RuntimeException("eglConfig not initialized");
  }
  if (Thread.currentThread() != mEglThread) {
    throw new IllegalStateException("HardwareRenderer cannot be used " + "from multiple threads");
  }
  if (mEglSurface != null && mEglSurface != EGL_NO_SURFACE) {
    sEgl.eglMakeCurrent(sEglDisplay,EGL_NO_SURFACE,EGL_NO_SURFACE,EGL_NO_CONTEXT);
    sEgl.eglDestroySurface(sEglDisplay,mEglSurface);
  }
  mEglSurface=sEgl.eglCreateWindowSurface(sEglDisplay,sEglConfig,holder,null);
  if (mEglSurface == null || mEglSurface == EGL_NO_SURFACE) {
    int error=sEgl.eglGetError();
    if (error == EGL_BAD_NATIVE_WINDOW) {
      Log.e(LOG_TAG,"createWindowSurface returned EGL_BAD_NATIVE_WINDOW.");
      return null;
    }
    throw new RuntimeException("createWindowSurface failed " + getEGLErrorString(error));
  }
  if (!sEgl.eglMakeCurrent(sEglDisplay,mEglSurface,mEglSurface,mEglContext)) {
    throw new Surface.OutOfResourcesException("eglMakeCurrent failed " + getEGLErrorString(sEgl.eglGetError()));
  }
  if (sDirtyRegions) {
    if (!(mDirtyRegionsEnabled=GLES20Canvas.preserveBackBuffer())) {
      Log.w(LOG_TAG,"Backbuffer cannot be preserved");
    }
  }
 else   if (sDirtyRegionsRequested) {
    mDirtyRegionsEnabled=GLES20Canvas.isBackBufferPreserved();
  }
  return mEglContext.getGL();
}
