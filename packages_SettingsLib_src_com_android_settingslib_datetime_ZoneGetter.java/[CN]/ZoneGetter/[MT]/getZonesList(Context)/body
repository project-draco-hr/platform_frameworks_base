{
  final Locale locale=Locale.getDefault();
  final Date now=new Date();
  final TimeZoneNames timeZoneNames=TimeZoneNames.getInstance(locale);
  List<String> olsonIdsToDisplayList=readTimezonesToDisplay(context);
  final int zoneCount=olsonIdsToDisplayList.size();
  final String[] olsonIdsToDisplay=new String[zoneCount];
  final TimeZone[] timeZones=new TimeZone[zoneCount];
  final String[] gmtOffsetStrings=new String[zoneCount];
  for (int i=0; i < zoneCount; i++) {
    String olsonId=olsonIdsToDisplayList.get(i);
    olsonIdsToDisplay[i]=olsonId;
    TimeZone tz=TimeZone.getTimeZone(olsonId);
    timeZones[i]=tz;
    gmtOffsetStrings[i]=getGmtOffsetString(locale,tz,now);
  }
  Set<String> localZoneIds=new HashSet<String>();
  for (  String olsonId : libcore.icu.TimeZoneNames.forLocale(locale)) {
    localZoneIds.add(olsonId);
  }
  Set<String> localZoneNames=new HashSet<String>();
  boolean useExemplarLocationForLocalNames=false;
  for (int i=0; i < zoneCount; i++) {
    String olsonId=olsonIdsToDisplay[i];
    if (localZoneIds.contains(olsonId)) {
      TimeZone tz=timeZones[i];
      String displayName=getZoneLongName(timeZoneNames,tz,now);
      if (displayName == null) {
        displayName=gmtOffsetStrings[i];
      }
      boolean nameIsUnique=localZoneNames.add(displayName);
      if (!nameIsUnique) {
        useExemplarLocationForLocalNames=true;
        break;
      }
    }
  }
  List<Map<String,Object>> zones=new ArrayList<Map<String,Object>>();
  for (int i=0; i < zoneCount; i++) {
    String olsonId=olsonIdsToDisplay[i];
    TimeZone tz=timeZones[i];
    String gmtOffsetString=gmtOffsetStrings[i];
    boolean isLocalZoneId=localZoneIds.contains(olsonId);
    boolean preferLongName=isLocalZoneId && !useExemplarLocationForLocalNames;
    String displayName;
    if (preferLongName) {
      displayName=getZoneLongName(timeZoneNames,tz,now);
    }
 else {
      displayName=timeZoneNames.getExemplarLocationName(tz.getID());
      if (displayName == null || displayName.isEmpty()) {
        displayName=getZoneLongName(timeZoneNames,tz,now);
      }
    }
    if (displayName == null || displayName.isEmpty()) {
      displayName=gmtOffsetString;
    }
    int offsetMillis=tz.getOffset(now.getTime());
    Map<String,Object> displayEntry=createDisplayEntry(tz,gmtOffsetString,displayName,offsetMillis);
    zones.add(displayEntry);
  }
  return zones;
}
