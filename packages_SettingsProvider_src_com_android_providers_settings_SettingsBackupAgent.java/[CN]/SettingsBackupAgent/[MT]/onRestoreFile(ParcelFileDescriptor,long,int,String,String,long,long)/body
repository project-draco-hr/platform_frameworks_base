{
  if (DEBUG_BACKUP)   Log.d(TAG,"onRestoreFile() invoked");
  FileInputStream instream=new FileInputStream(data.getFileDescriptor());
  DataInputStream in=new DataInputStream(instream);
  int version=in.readInt();
  if (DEBUG_BACKUP)   Log.d(TAG,"Flattened data version " + version);
  if (version <= FULL_BACKUP_VERSION) {
    HashSet<String> movedToGlobal=new HashSet<String>();
    Settings.System.getMovedToGlobalSettings(movedToGlobal);
    Settings.Secure.getMovedToGlobalSettings(movedToGlobal);
    int nBytes=in.readInt();
    if (DEBUG_BACKUP)     Log.d(TAG,nBytes + " bytes of settings data");
    byte[] buffer=new byte[nBytes];
    in.readFully(buffer,0,nBytes);
    restoreSettings(buffer,nBytes,Settings.System.CONTENT_URI,movedToGlobal);
    nBytes=in.readInt();
    if (DEBUG_BACKUP)     Log.d(TAG,nBytes + " bytes of secure settings data");
    if (nBytes > buffer.length)     buffer=new byte[nBytes];
    in.readFully(buffer,0,nBytes);
    restoreSettings(buffer,nBytes,Settings.Secure.CONTENT_URI,movedToGlobal);
    if (version >= FULL_BACKUP_ADDED_GLOBAL) {
      nBytes=in.readInt();
      if (DEBUG_BACKUP)       Log.d(TAG,nBytes + " bytes of global settings data");
      if (nBytes > buffer.length)       buffer=new byte[nBytes];
      in.readFully(buffer,0,nBytes);
      movedToGlobal.clear();
      restoreSettings(buffer,nBytes,Settings.Global.CONTENT_URI,movedToGlobal);
    }
    nBytes=in.readInt();
    if (DEBUG_BACKUP)     Log.d(TAG,nBytes + " bytes of locale data");
    if (nBytes > buffer.length)     buffer=new byte[nBytes];
    in.readFully(buffer,0,nBytes);
    mSettingsHelper.setLocaleData(buffer,nBytes);
    if (version < FULL_BACKUP_ADDED_WIFI_NEW) {
      int supplicant_size=in.readInt();
      if (DEBUG_BACKUP)       Log.d(TAG,supplicant_size + " bytes of wifi supplicant data");
      byte[] supplicant_buffer=new byte[supplicant_size];
      in.readFully(supplicant_buffer,0,supplicant_size);
      int ipconfig_size=in.readInt();
      if (DEBUG_BACKUP)       Log.d(TAG,ipconfig_size + " bytes of ip config data");
      byte[] ipconfig_buffer=new byte[ipconfig_size];
      in.readFully(ipconfig_buffer,0,nBytes);
      restoreSupplicantWifiConfigData(supplicant_buffer,ipconfig_buffer);
    }
    if (version >= FULL_BACKUP_ADDED_LOCK_SETTINGS) {
      nBytes=in.readInt();
      if (DEBUG_BACKUP)       Log.d(TAG,nBytes + " bytes of lock settings data");
      if (nBytes > buffer.length)       buffer=new byte[nBytes];
      if (nBytes > 0) {
        in.readFully(buffer,0,nBytes);
        restoreLockSettings(buffer,nBytes);
      }
    }
    if (version >= FULL_BACKUP_ADDED_SOFTAP_CONF) {
      nBytes=in.readInt();
      if (DEBUG_BACKUP)       Log.d(TAG,nBytes + " bytes of softap config data");
      if (nBytes > buffer.length)       buffer=new byte[nBytes];
      if (nBytes > 0) {
        in.readFully(buffer,0,nBytes);
        restoreSoftApConfiguration(buffer);
      }
    }
    if (version >= FULL_BACKUP_ADDED_NETWORK_POLICIES) {
      nBytes=in.readInt();
      if (DEBUG_BACKUP)       Log.d(TAG,nBytes + " bytes of network policies data");
      if (nBytes > buffer.length)       buffer=new byte[nBytes];
      if (nBytes > 0) {
        in.readFully(buffer,0,nBytes);
        restoreNetworkPolicies(buffer);
      }
    }
    if (version >= FULL_BACKUP_ADDED_WIFI_NEW) {
      nBytes=in.readInt();
      if (DEBUG_BACKUP)       Log.d(TAG,nBytes + " bytes of full wifi config data");
      if (nBytes > buffer.length)       buffer=new byte[nBytes];
      in.readFully(buffer,0,nBytes);
      restoreNewWifiConfigData(buffer);
    }
    if (DEBUG_BACKUP)     Log.d(TAG,"Full restore complete.");
  }
 else {
    data.close();
    throw new IOException("Invalid file schema");
  }
}
