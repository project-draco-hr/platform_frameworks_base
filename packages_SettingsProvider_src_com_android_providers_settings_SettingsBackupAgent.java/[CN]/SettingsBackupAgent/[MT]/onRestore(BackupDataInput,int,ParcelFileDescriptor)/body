{
  HashSet<String> movedToGlobal=new HashSet<String>();
  Settings.System.getMovedToGlobalSettings(movedToGlobal);
  Settings.Secure.getMovedToGlobalSettings(movedToGlobal);
  while (data.readNextHeader()) {
    final String key=data.getKey();
    final int size=data.getDataSize();
    if (KEY_SYSTEM.equals(key)) {
      restoreSettings(data,Settings.System.CONTENT_URI,movedToGlobal);
      mSettingsHelper.applyAudioSettings();
    }
 else     if (KEY_SECURE.equals(key)) {
      restoreSettings(data,Settings.Secure.CONTENT_URI,movedToGlobal);
    }
 else     if (KEY_GLOBAL.equals(key)) {
      restoreSettings(data,Settings.Global.CONTENT_URI,null);
    }
 else     if (KEY_WIFI_SUPPLICANT.equals(key)) {
      initWifiRestoreIfNecessary();
      mWifiRestore.incorporateWifiSupplicant(data);
    }
 else     if (KEY_LOCALE.equals(key)) {
      byte[] localeData=new byte[size];
      data.readEntityData(localeData,0,size);
      mSettingsHelper.setLocaleData(localeData,size);
    }
 else     if (KEY_WIFI_CONFIG.equals(key)) {
      initWifiRestoreIfNecessary();
      mWifiRestore.incorporateWifiConfigFile(data);
    }
 else     if (KEY_LOCK_SETTINGS.equals(key)) {
      restoreLockSettings(data);
    }
 else     if (KEY_SOFTAP_CONFIG.equals(key)) {
      byte[] softapData=new byte[size];
      data.readEntityData(softapData,0,size);
      restoreSoftApConfiguration(softapData);
    }
 else {
      data.skipEntityData();
    }
  }
  if (mWifiRestore != null) {
    long wifiBounceDelayMillis=Settings.Global.getLong(getContentResolver(),Settings.Global.WIFI_BOUNCE_DELAY_OVERRIDE_MS,WIFI_BOUNCE_DELAY_MILLIS);
    new Handler(getMainLooper()).postDelayed(mWifiDisable,wifiBounceDelayMillis);
  }
}
