{
  HashSet<String> movedToGlobal=new HashSet<String>();
  Settings.System.getMovedToGlobalSettings(movedToGlobal);
  Settings.Secure.getMovedToGlobalSettings(movedToGlobal);
  while (data.readNextHeader()) {
    final String key=data.getKey();
    final int size=data.getDataSize();
switch (key) {
case KEY_SYSTEM:
      restoreSettings(data,Settings.System.CONTENT_URI,movedToGlobal);
    mSettingsHelper.applyAudioSettings();
  break;
case KEY_SECURE:
restoreSettings(data,Settings.Secure.CONTENT_URI,movedToGlobal);
break;
case KEY_GLOBAL:
restoreSettings(data,Settings.Global.CONTENT_URI,null);
break;
case KEY_WIFI_SUPPLICANT:
initWifiRestoreIfNecessary();
mWifiRestore.incorporateWifiSupplicant(data);
break;
case KEY_LOCALE:
byte[] localeData=new byte[size];
data.readEntityData(localeData,0,size);
mSettingsHelper.setLocaleData(localeData,size);
break;
case KEY_WIFI_CONFIG:
initWifiRestoreIfNecessary();
mWifiRestore.incorporateWifiConfigFile(data);
break;
case KEY_LOCK_SETTINGS:
restoreLockSettings(data);
break;
case KEY_SOFTAP_CONFIG:
byte[] softapData=new byte[size];
data.readEntityData(softapData,0,size);
restoreSoftApConfiguration(softapData);
break;
default :
data.skipEntityData();
}
}
if (mWifiRestore != null) {
long wifiBounceDelayMillis=Settings.Global.getLong(getContentResolver(),Settings.Global.WIFI_BOUNCE_DELAY_OVERRIDE_MS,WIFI_BOUNCE_DELAY_MILLIS);
new Handler(getMainLooper()).postDelayed(mWifiDisable,wifiBounceDelayMillis);
}
}
