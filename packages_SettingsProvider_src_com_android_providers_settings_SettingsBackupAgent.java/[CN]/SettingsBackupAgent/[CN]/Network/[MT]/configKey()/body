{
  if (ssid == null) {
    return null;
  }
  final String bareSsid=ssid.substring(ssid.indexOf('=') + 1);
  final BitSet types=new BitSet();
  if (key_mgmt == null) {
    types.set(KeyMgmt.WPA_PSK);
    types.set(KeyMgmt.WPA_EAP);
  }
 else {
    final String bareKeyMgmt=key_mgmt.substring(key_mgmt.indexOf('=') + 1);
    String[] typeStrings=bareKeyMgmt.split("\\s+");
    for (int i=0; i < typeStrings.length; i++) {
      final String ktype=typeStrings[i];
      if (ktype.equals("WPA-PSK")) {
        Log.v(TAG,"  + setting WPA_PSK bit");
        types.set(KeyMgmt.WPA_PSK);
      }
 else       if (ktype.equals("WPA-EAP")) {
        Log.v(TAG,"  + setting WPA_EAP bit");
        types.set(KeyMgmt.WPA_EAP);
      }
 else       if (ktype.equals("IEEE8021X")) {
        Log.v(TAG,"  + setting IEEE8021X bit");
        types.set(KeyMgmt.IEEE8021X);
      }
    }
  }
  final String key;
  if (types.get(KeyMgmt.WPA_PSK)) {
    key=bareSsid + KeyMgmt.strings[KeyMgmt.WPA_PSK];
  }
 else   if (types.get(KeyMgmt.WPA_EAP) || types.get(KeyMgmt.IEEE8021X)) {
    key=bareSsid + KeyMgmt.strings[KeyMgmt.WPA_EAP];
  }
 else   if (hasWepKey) {
    key=bareSsid + "WEP";
  }
 else {
    key=bareSsid + KeyMgmt.strings[KeyMgmt.NONE];
  }
  return key;
}
