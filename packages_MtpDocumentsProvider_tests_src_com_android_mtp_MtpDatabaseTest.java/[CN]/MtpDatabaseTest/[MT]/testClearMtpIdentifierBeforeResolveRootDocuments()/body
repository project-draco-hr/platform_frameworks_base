{
  final String[] columns=new String[]{DocumentsContract.Document.COLUMN_DOCUMENT_ID,MtpDatabaseConstants.COLUMN_STORAGE_ID,DocumentsContract.Document.COLUMN_DISPLAY_NAME};
  final String[] rootColumns=new String[]{Root.COLUMN_ROOT_ID,Root.COLUMN_AVAILABLE_BYTES};
  mDatabase.getMapper().startAddingRootDocuments(0);
  mDatabase.getMapper().putRootDocuments(0,resources,new MtpRoot[]{new MtpRoot(0,100,"Device","Storage",0,0,"")});
  mDatabase.getMapper().clearMapping();
  mDatabase.getMapper().startAddingRootDocuments(0);
  mDatabase.getMapper().putRootDocuments(0,resources,new MtpRoot[]{new MtpRoot(0,200,"Device","Storage",2000,0,"")});
  mDatabase.getMapper().clearMapping();
  mDatabase.getMapper().startAddingRootDocuments(0);
  mDatabase.getMapper().putRootDocuments(0,resources,new MtpRoot[]{new MtpRoot(0,300,"Device","Storage",3000,0,"")});
  mDatabase.getMapper().stopAddingRootDocuments(0);
{
    final Cursor cursor=mDatabase.queryRootDocuments(columns);
    assertEquals(1,cursor.getCount());
    cursor.moveToNext();
    assertEquals("documentId",1,cursor.getInt(0));
    assertEquals("storageId",300,cursor.getInt(1));
    assertEquals("name","Device Storage",cursor.getString(2));
    cursor.close();
  }
{
    final Cursor cursor=mDatabase.queryRoots(rootColumns);
    assertEquals(1,cursor.getCount());
    cursor.moveToNext();
    assertEquals("rootId",1,cursor.getInt(0));
    assertEquals("availableBytes",3000,cursor.getInt(1));
    cursor.close();
  }
}
