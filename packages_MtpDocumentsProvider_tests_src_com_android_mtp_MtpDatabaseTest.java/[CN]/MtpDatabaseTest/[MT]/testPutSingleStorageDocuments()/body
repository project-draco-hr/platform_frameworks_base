{
  mDatabase.getMapper().startAddingDocuments(null);
  mDatabase.getMapper().putDeviceDocument(new MtpDeviceRecord(0,"Device",true,new MtpRoot[0]));
  mDatabase.getMapper().stopAddingDocuments(null);
  mDatabase.getMapper().startAddingDocuments("1");
  mDatabase.getMapper().putStorageDocuments("1",resources,new MtpRoot[]{new MtpRoot(0,1,"Device","Storage",1000,2000,"")});
  mDatabase.getMapper().stopAddingDocuments("1");
{
    final Cursor cursor=mDatabase.queryRootDocuments(COLUMN_NAMES);
    assertEquals(1,cursor.getCount());
    cursor.moveToNext();
    assertEquals(2,getInt(cursor,COLUMN_DOCUMENT_ID));
    assertEquals(0,getInt(cursor,COLUMN_DEVICE_ID));
    assertEquals(1,getInt(cursor,COLUMN_STORAGE_ID));
    assertTrue(isNull(cursor,COLUMN_OBJECT_HANDLE));
    assertEquals(DocumentsContract.Document.MIME_TYPE_DIR,getString(cursor,COLUMN_MIME_TYPE));
    assertEquals("Device Storage",getString(cursor,COLUMN_DISPLAY_NAME));
    assertTrue(isNull(cursor,COLUMN_SUMMARY));
    assertTrue(isNull(cursor,COLUMN_LAST_MODIFIED));
    assertEquals(R.drawable.ic_root_mtp,getInt(cursor,COLUMN_ICON));
    assertEquals(0,getInt(cursor,COLUMN_FLAGS));
    assertEquals(1000,getInt(cursor,COLUMN_SIZE));
    assertEquals(MtpDatabaseConstants.DOCUMENT_TYPE_STORAGE,getInt(cursor,COLUMN_DOCUMENT_TYPE));
    cursor.close();
  }
{
    final Cursor cursor=mDatabase.queryRoots(new String[]{Root.COLUMN_ROOT_ID,Root.COLUMN_FLAGS,Root.COLUMN_ICON,Root.COLUMN_TITLE,Root.COLUMN_SUMMARY,Root.COLUMN_DOCUMENT_ID,Root.COLUMN_AVAILABLE_BYTES,Root.COLUMN_CAPACITY_BYTES});
    assertEquals(1,cursor.getCount());
    cursor.moveToNext();
    assertEquals(2,getInt(cursor,Root.COLUMN_ROOT_ID));
    assertEquals(Root.FLAG_SUPPORTS_IS_CHILD | Root.FLAG_SUPPORTS_CREATE,getInt(cursor,Root.COLUMN_FLAGS));
    assertEquals(R.drawable.ic_root_mtp,getInt(cursor,Root.COLUMN_ICON));
    assertEquals("Device Storage",getString(cursor,Root.COLUMN_TITLE));
    assertTrue(isNull(cursor,Root.COLUMN_SUMMARY));
    assertEquals(2,getInt(cursor,Root.COLUMN_DOCUMENT_ID));
    assertEquals(1000,getInt(cursor,Root.COLUMN_AVAILABLE_BYTES));
    assertEquals(2000,getInt(cursor,Root.COLUMN_CAPACITY_BYTES));
    cursor.close();
  }
}
