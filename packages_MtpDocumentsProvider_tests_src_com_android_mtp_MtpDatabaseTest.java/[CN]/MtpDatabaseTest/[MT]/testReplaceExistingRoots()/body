{
  mDatabase.getMapper().startAddingDocuments(null);
  mDatabase.getMapper().putRootDocuments(0,resources,new MtpRoot[]{new MtpRoot(0,100,"Device","Storage A",0,0,"")});
  mDatabase.getMapper().stopAddingDocuments(null);
  mDatabase.getMapper().startAddingDocuments(null);
  mDatabase.getMapper().putRootDocuments(0,resources,new MtpRoot[]{new MtpRoot(0,100,"Device","Storage B",1000,1000,"")});
  mDatabase.getMapper().stopAddingDocuments(null);
{
    final String[] columns=new String[]{DocumentsContract.Document.COLUMN_DOCUMENT_ID,MtpDatabaseConstants.COLUMN_STORAGE_ID,DocumentsContract.Document.COLUMN_DISPLAY_NAME};
    final Cursor cursor=mDatabase.queryRootDocuments(columns);
    assertEquals(1,cursor.getCount());
    cursor.moveToNext();
    assertEquals(1,getInt(cursor,COLUMN_DOCUMENT_ID));
    assertEquals(100,getInt(cursor,COLUMN_STORAGE_ID));
    assertEquals("Device Storage B",getString(cursor,COLUMN_DISPLAY_NAME));
    cursor.close();
  }
{
    final String[] columns=new String[]{Root.COLUMN_ROOT_ID,Root.COLUMN_AVAILABLE_BYTES};
    final Cursor cursor=mDatabase.queryRoots(columns);
    assertEquals(1,cursor.getCount());
    cursor.moveToNext();
    assertEquals(1,getInt(cursor,Root.COLUMN_ROOT_ID));
    assertEquals(1000,getInt(cursor,Root.COLUMN_AVAILABLE_BYTES));
    cursor.close();
  }
}
