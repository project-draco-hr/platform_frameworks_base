{
  final MtpDatabase database=new MtpDatabase(getContext());
  final String[] columns=new String[]{DocumentsContract.Document.COLUMN_DOCUMENT_ID,MtpDatabaseConstants.COLUMN_STORAGE_ID,DocumentsContract.Document.COLUMN_DISPLAY_NAME};
  final String[] rootColumns=new String[]{Root.COLUMN_ROOT_ID,Root.COLUMN_AVAILABLE_BYTES};
  database.startAddingRootDocuments(0);
  database.putRootDocuments(0,resources,new MtpRoot[]{new MtpRoot(0,100,"Device","Storage A",1000,0,""),new MtpRoot(0,101,"Device","Storage B",1001,0,"")});
{
    final Cursor cursor=database.queryRootDocuments(columns);
    assertEquals(2,cursor.getCount());
    cursor.moveToNext();
    assertEquals("documentId",1,cursor.getInt(0));
    assertEquals("storageId",100,cursor.getInt(1));
    assertEquals("name","Device Storage A",cursor.getString(2));
    cursor.moveToNext();
    assertEquals("documentId",2,cursor.getInt(0));
    assertEquals("storageId",101,cursor.getInt(1));
    assertEquals("name","Device Storage B",cursor.getString(2));
    cursor.close();
  }
{
    final Cursor cursor=database.queryRoots(rootColumns);
    assertEquals(2,cursor.getCount());
    cursor.moveToNext();
    assertEquals("rootId",1,cursor.getInt(0));
    assertEquals("availableBytes",1000,cursor.getInt(1));
    cursor.moveToNext();
    assertEquals("rootId",2,cursor.getInt(0));
    assertEquals("availableBytes",1001,cursor.getInt(1));
    cursor.close();
  }
  database.clearMapping();
{
    final Cursor cursor=database.queryRootDocuments(columns);
    assertEquals(2,cursor.getCount());
    cursor.moveToNext();
    assertEquals("documentId",1,cursor.getInt(0));
    assertTrue("storageId",cursor.isNull(1));
    assertEquals("name","Device Storage A",cursor.getString(2));
    cursor.moveToNext();
    assertEquals("documentId",2,cursor.getInt(0));
    assertTrue("storageId",cursor.isNull(1));
    assertEquals("name","Device Storage B",cursor.getString(2));
    cursor.close();
  }
{
    final Cursor cursor=database.queryRoots(rootColumns);
    assertEquals(2,cursor.getCount());
    cursor.moveToNext();
    assertEquals("rootId",1,cursor.getInt(0));
    assertEquals("availableBytes",1000,cursor.getInt(1));
    cursor.moveToNext();
    assertEquals("rootId",2,cursor.getInt(0));
    assertEquals("availableBytes",1001,cursor.getInt(1));
    cursor.close();
  }
  database.startAddingRootDocuments(0);
  database.putRootDocuments(0,resources,new MtpRoot[]{new MtpRoot(0,200,"Device","Storage A",2000,0,""),new MtpRoot(0,202,"Device","Storage C",2002,0,"")});
{
    final Cursor cursor=database.queryRootDocuments(columns);
    assertEquals(3,cursor.getCount());
    cursor.moveToNext();
    assertEquals("documentId",1,cursor.getInt(0));
    assertTrue("storageId",cursor.isNull(1));
    assertEquals("name","Device Storage A",cursor.getString(2));
    cursor.moveToNext();
    assertEquals("documentId",2,cursor.getInt(0));
    assertTrue("storageId",cursor.isNull(1));
    assertEquals("name","Device Storage B",cursor.getString(2));
    cursor.moveToNext();
    assertEquals("documentId",4,cursor.getInt(0));
    assertEquals("storageId",202,cursor.getInt(1));
    assertEquals("name","Device Storage C",cursor.getString(2));
    cursor.close();
  }
{
    final Cursor cursor=database.queryRoots(rootColumns);
    assertEquals(3,cursor.getCount());
    cursor.moveToNext();
    assertEquals("rootId",1,cursor.getInt(0));
    assertEquals("availableBytes",1000,cursor.getInt(1));
    cursor.moveToNext();
    assertEquals("rootId",2,cursor.getInt(0));
    assertEquals("availableBytes",1001,cursor.getInt(1));
    cursor.moveToNext();
    assertEquals("rootId",4,cursor.getInt(0));
    assertEquals("availableBytes",2002,cursor.getInt(1));
    cursor.close();
  }
  database.stopAddingRootDocuments(0);
{
    final Cursor cursor=database.queryRootDocuments(columns);
    assertEquals(2,cursor.getCount());
    cursor.moveToNext();
    assertEquals("documentId",1,cursor.getInt(0));
    assertEquals("storageId",200,cursor.getInt(1));
    assertEquals("name","Device Storage A",cursor.getString(2));
    cursor.moveToNext();
    assertEquals("documentId",4,cursor.getInt(0));
    assertEquals("storageId",202,cursor.getInt(1));
    assertEquals("name","Device Storage C",cursor.getString(2));
    cursor.close();
  }
{
    final Cursor cursor=database.queryRoots(rootColumns);
    assertEquals(2,cursor.getCount());
    cursor.moveToNext();
    assertEquals("rootId",1,cursor.getInt(0));
    assertEquals("availableBytes",2000,cursor.getInt(1));
    cursor.moveToNext();
    assertEquals("rootId",4,cursor.getInt(0));
    assertEquals("availableBytes",2002,cursor.getInt(1));
    cursor.close();
  }
}
