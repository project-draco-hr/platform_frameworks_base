{
  final MockVpn vpn=new MockVpn(primaryUser.id);
  final UidRange user=UidRange.createForUser(primaryUser.id);
  vpn.assertUnblocked(user.start + PKG_UIDS[0],user.start + PKG_UIDS[1],user.start + PKG_UIDS[2],user.start + PKG_UIDS[3]);
  assertTrue(vpn.setAlwaysOnPackage(PKGS[1],false));
  vpn.assertUnblocked(user.start + PKG_UIDS[0],user.start + PKG_UIDS[1],user.start + PKG_UIDS[2],user.start + PKG_UIDS[3]);
  assertTrue(vpn.setAlwaysOnPackage(PKGS[1],true));
  verify(mNetService).setAllowOnlyVpnForUids(eq(true),aryEq(new UidRange[]{new UidRange(user.start,user.start + PKG_UIDS[1] - 1),new UidRange(user.start + PKG_UIDS[1] + 1,user.stop)}));
  vpn.assertBlocked(user.start + PKG_UIDS[0],user.start + PKG_UIDS[2],user.start + PKG_UIDS[3]);
  vpn.assertUnblocked(user.start + PKG_UIDS[1]);
  assertTrue(vpn.setAlwaysOnPackage(PKGS[3],true));
  verify(mNetService).setAllowOnlyVpnForUids(eq(false),aryEq(new UidRange[]{new UidRange(user.start,user.start + PKG_UIDS[1] - 1),new UidRange(user.start + PKG_UIDS[1] + 1,user.stop)}));
  verify(mNetService).setAllowOnlyVpnForUids(eq(true),aryEq(new UidRange[]{new UidRange(user.start,user.start + PKG_UIDS[3] - 1),new UidRange(user.start + PKG_UIDS[3] + 1,user.stop)}));
  vpn.assertBlocked(user.start + PKG_UIDS[0],user.start + PKG_UIDS[1],user.start + PKG_UIDS[2]);
  vpn.assertUnblocked(user.start + PKG_UIDS[3]);
}
