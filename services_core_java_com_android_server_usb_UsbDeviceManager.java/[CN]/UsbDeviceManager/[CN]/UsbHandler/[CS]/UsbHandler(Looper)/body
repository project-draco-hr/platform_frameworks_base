{
  super(looper);
  try {
    mDefaultFunctions=SystemProperties.get("persist.sys.usb.config","adb");
    mDefaultFunctions=processOemUsbOverride(mDefaultFunctions);
    String config=SystemProperties.get("sys.usb.config","none");
    if (!config.equals(mDefaultFunctions)) {
      Slog.w(TAG,"resetting config to persistent property: " + mDefaultFunctions);
      SystemProperties.set("sys.usb.config",mDefaultFunctions);
    }
    mCurrentFunctions=mDefaultFunctions;
    String state=FileUtils.readTextFile(new File(STATE_PATH),0,null).trim();
    updateState(state);
    mAdbEnabled=containsFunction(mCurrentFunctions,UsbManager.USB_FUNCTION_ADB);
    String value=SystemProperties.get("persist.service.adb.enable","");
    if (value.length() > 0) {
      char enable=value.charAt(0);
      if (enable == '1') {
        setAdbEnabled(true);
      }
 else       if (enable == '0') {
        setAdbEnabled(false);
      }
      SystemProperties.set("persist.service.adb.enable","");
    }
    mContentResolver.registerContentObserver(Settings.Global.getUriFor(Settings.Global.ADB_ENABLED),false,new AdbSettingsObserver());
    mUEventObserver.startObserving(USB_STATE_MATCH);
    mUEventObserver.startObserving(ACCESSORY_START_MATCH);
    mContext.registerReceiver(mBootCompletedReceiver,new IntentFilter(Intent.ACTION_BOOT_COMPLETED));
    mContext.registerReceiver(mUserSwitchedReceiver,new IntentFilter(Intent.ACTION_USER_SWITCHED));
  }
 catch (  Exception e) {
    Slog.e(TAG,"Error initializing UsbHandler",e);
  }
}
