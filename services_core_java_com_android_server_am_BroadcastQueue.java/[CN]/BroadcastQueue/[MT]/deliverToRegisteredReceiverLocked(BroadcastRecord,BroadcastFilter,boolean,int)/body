{
  boolean skip=false;
  if (filter.requiredPermission != null) {
    int perm=mService.checkComponentPermission(filter.requiredPermission,r.callingPid,r.callingUid,-1,true);
    if (perm != PackageManager.PERMISSION_GRANTED) {
      Slog.w(TAG,"Permission Denial: broadcasting " + r.intent.toString() + " from "+ r.callerPackage+ " (pid="+ r.callingPid+ ", uid="+ r.callingUid+ ")"+ " requires "+ filter.requiredPermission+ " due to registered receiver "+ filter);
      skip=true;
    }
 else {
      final int opCode=AppOpsManager.permissionToOpCode(filter.requiredPermission);
      if (opCode != AppOpsManager.OP_NONE && mService.mAppOpsService.noteOperation(opCode,r.callingUid,r.callerPackage) != AppOpsManager.MODE_ALLOWED) {
        Slog.w(TAG,"Appop Denial: broadcasting " + r.intent.toString() + " from "+ r.callerPackage+ " (pid="+ r.callingPid+ ", uid="+ r.callingUid+ ")"+ " requires appop "+ AppOpsManager.permissionToOp(filter.requiredPermission)+ " due to registered receiver "+ filter);
        skip=true;
      }
    }
  }
  if (!skip && r.requiredPermissions != null && r.requiredPermissions.length > 0) {
    for (int i=0; i < r.requiredPermissions.length; i++) {
      String requiredPermission=r.requiredPermissions[i];
      int perm=mService.checkComponentPermission(requiredPermission,filter.receiverList.pid,filter.receiverList.uid,-1,true);
      if (perm != PackageManager.PERMISSION_GRANTED) {
        Slog.w(TAG,"Permission Denial: receiving " + r.intent.toString() + " to "+ filter.receiverList.app+ " (pid="+ filter.receiverList.pid+ ", uid="+ filter.receiverList.uid+ ")"+ " requires "+ requiredPermission+ " due to sender "+ r.callerPackage+ " (uid "+ r.callingUid+ ")");
        skip=true;
        break;
      }
      int appOp=AppOpsManager.permissionToOpCode(requiredPermission);
      if (appOp != AppOpsManager.OP_NONE && appOp != r.appOp && mService.mAppOpsService.noteOperation(appOp,filter.receiverList.uid,filter.packageName) != AppOpsManager.MODE_ALLOWED) {
        Slog.w(TAG,"Appop Denial: receiving " + r.intent.toString() + " to "+ filter.receiverList.app+ " (pid="+ filter.receiverList.pid+ ", uid="+ filter.receiverList.uid+ ")"+ " requires appop "+ AppOpsManager.permissionToOp(requiredPermission)+ " due to sender "+ r.callerPackage+ " (uid "+ r.callingUid+ ")");
        skip=true;
        break;
      }
    }
  }
  if (!skip && (r.requiredPermissions == null || r.requiredPermissions.length == 0)) {
    int perm=mService.checkComponentPermission(null,filter.receiverList.pid,filter.receiverList.uid,-1,true);
    if (perm != PackageManager.PERMISSION_GRANTED) {
      Slog.w(TAG,"Permission Denial: security check failed when receiving " + r.intent.toString() + " to "+ filter.receiverList.app+ " (pid="+ filter.receiverList.pid+ ", uid="+ filter.receiverList.uid+ ")"+ " due to sender "+ r.callerPackage+ " (uid "+ r.callingUid+ ")");
      skip=true;
    }
  }
  if (!skip && r.appOp != AppOpsManager.OP_NONE && mService.mAppOpsService.noteOperation(r.appOp,filter.receiverList.uid,filter.packageName) != AppOpsManager.MODE_ALLOWED) {
    Slog.w(TAG,"Appop Denial: receiving " + r.intent.toString() + " to "+ filter.receiverList.app+ " (pid="+ filter.receiverList.pid+ ", uid="+ filter.receiverList.uid+ ")"+ " requires appop "+ AppOpsManager.opToName(r.appOp)+ " due to sender "+ r.callerPackage+ " (uid "+ r.callingUid+ ")");
    skip=true;
  }
  if (!skip) {
    final int allowed=mService.checkAllowBackgroundLocked(filter.receiverList.uid,filter.packageName,-1,true);
    if (allowed == ActivityManager.APP_START_MODE_DISABLED) {
      Slog.w(TAG,"Background execution not allowed: receiving " + r.intent + " to "+ filter.receiverList.app+ " (pid="+ filter.receiverList.pid+ ", uid="+ filter.receiverList.uid+ ")");
      skip=true;
    }
  }
  if (!mService.mIntentFirewall.checkBroadcast(r.intent,r.callingUid,r.callingPid,r.resolvedType,filter.receiverList.uid)) {
    skip=true;
  }
  if (!skip && (filter.receiverList.app == null || filter.receiverList.app.crashing)) {
    Slog.w(TAG,"Skipping deliver [" + mQueueName + "] "+ r+ " to "+ filter.receiverList+ ": process crashing");
    skip=true;
  }
  if (skip) {
    r.delivery[index]=BroadcastRecord.DELIVERY_SKIPPED;
    return;
  }
  if (Build.PERMISSIONS_REVIEW_REQUIRED) {
    if (!requestStartTargetPermissionsReviewIfNeededLocked(r,filter.packageName,filter.owningUserId)) {
      r.delivery[index]=BroadcastRecord.DELIVERY_SKIPPED;
      return;
    }
  }
  r.delivery[index]=BroadcastRecord.DELIVERY_DELIVERED;
  if (ordered) {
    r.receiver=filter.receiverList.receiver.asBinder();
    r.curFilter=filter;
    filter.receiverList.curBroadcast=r;
    r.state=BroadcastRecord.CALL_IN_RECEIVE;
    if (filter.receiverList.app != null) {
      r.curApp=filter.receiverList.app;
      filter.receiverList.app.curReceiver=r;
      mService.updateOomAdjLocked(r.curApp);
    }
  }
  try {
    if (DEBUG_BROADCAST_LIGHT)     Slog.i(TAG_BROADCAST,"Delivering to " + filter + " : "+ r);
    if (filter.receiverList.app != null && filter.receiverList.app.inFullBackup) {
      if (ordered) {
        skipReceiverLocked(r);
      }
    }
 else {
      performReceiveLocked(filter.receiverList.app,filter.receiverList.receiver,new Intent(r.intent),r.resultCode,r.resultData,r.resultExtras,r.ordered,r.initialSticky,r.userId);
    }
    if (ordered) {
      r.state=BroadcastRecord.CALL_DONE_RECEIVE;
    }
  }
 catch (  RemoteException e) {
    Slog.w(TAG,"Failure sending broadcast " + r.intent,e);
    if (ordered) {
      r.receiver=null;
      r.curFilter=null;
      filter.receiverList.curBroadcast=null;
      if (filter.receiverList.app != null) {
        filter.receiverList.app.curReceiver=null;
      }
    }
  }
}
