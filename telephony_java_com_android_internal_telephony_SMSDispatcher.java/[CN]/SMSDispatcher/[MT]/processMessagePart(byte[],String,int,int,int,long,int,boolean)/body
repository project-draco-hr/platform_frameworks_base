{
  byte[][] pdus=null;
  Cursor cursor=null;
  try {
    String refNumber=Integer.toString(referenceNumber);
    String seqNumber=Integer.toString(sequenceNumber);
    cursor=mResolver.query(mRawUri,PDU_PROJECTION,"address=? AND reference_number=? AND sequence=?",new String[]{address,refNumber,seqNumber},null);
    if (cursor.moveToNext()) {
      Log.w(TAG,"Discarding duplicate message segment from address=" + address + " refNumber="+ refNumber+ " seqNumber="+ seqNumber);
      String oldPduString=cursor.getString(PDU_COLUMN);
      byte[] oldPdu=HexDump.hexStringToByteArray(oldPduString);
      if (!Arrays.equals(oldPdu,pdu)) {
        Log.e(TAG,"Warning: dup message segment PDU of length " + pdu.length + " is different from existing PDU of length "+ oldPdu.length);
      }
      return Intents.RESULT_SMS_HANDLED;
    }
    cursor.close();
    String where="address=? AND reference_number=?";
    String[] whereArgs=new String[]{address,refNumber};
    cursor=mResolver.query(mRawUri,PDU_SEQUENCE_PORT_PROJECTION,where,whereArgs,null);
    int cursorCount=cursor.getCount();
    if (cursorCount != messageCount - 1) {
      ContentValues values=new ContentValues();
      values.put("date",timestamp);
      values.put("pdu",HexDump.toHexString(pdu));
      values.put("address",address);
      values.put("reference_number",referenceNumber);
      values.put("count",messageCount);
      values.put("sequence",sequenceNumber);
      if (destPort != -1) {
        values.put("destination_port",destPort);
      }
      mResolver.insert(mRawUri,values);
      return Intents.RESULT_SMS_HANDLED;
    }
    pdus=new byte[messageCount][];
    for (int i=0; i < cursorCount; i++) {
      cursor.moveToNext();
      int cursorSequence=cursor.getInt(SEQUENCE_COLUMN);
      if (!isCdmaWapPush) {
        cursorSequence--;
      }
      pdus[cursorSequence]=HexDump.hexStringToByteArray(cursor.getString(PDU_COLUMN));
      if (cursorSequence == 0 && !cursor.isNull(DESTINATION_PORT_COLUMN)) {
        destPort=cursor.getInt(DESTINATION_PORT_COLUMN);
      }
    }
    if (isCdmaWapPush) {
      pdus[sequenceNumber]=pdu;
    }
 else {
      pdus[sequenceNumber - 1]=pdu;
    }
    mResolver.delete(mRawUri,where,whereArgs);
  }
 catch (  SQLException e) {
    Log.e(TAG,"Can't access multipart SMS database",e);
    return Intents.RESULT_SMS_GENERIC_ERROR;
  }
 finally {
    if (cursor != null)     cursor.close();
  }
  if (isCdmaWapPush) {
    ByteArrayOutputStream output=new ByteArrayOutputStream();
    for (int i=0; i < messageCount; i++) {
      output.write(pdus[i],0,pdus[i].length);
    }
    byte[] datagram=output.toByteArray();
    if (destPort == SmsHeader.PORT_WAP_PUSH) {
      return mWapPush.dispatchWapPdu(datagram);
    }
 else {
      pdus=new byte[1][];
      pdus[0]=datagram;
      dispatchPortAddressedPdus(pdus,destPort);
      return Activity.RESULT_OK;
    }
  }
  if (destPort != -1) {
    if (destPort == SmsHeader.PORT_WAP_PUSH) {
      ByteArrayOutputStream output=new ByteArrayOutputStream();
      for (int i=0; i < messageCount; i++) {
        SmsMessage msg=SmsMessage.createFromPdu(pdus[i],getFormat());
        byte[] data=msg.getUserData();
        output.write(data,0,data.length);
      }
      return mWapPush.dispatchWapPdu(output.toByteArray());
    }
 else {
      dispatchPortAddressedPdus(pdus,destPort);
    }
  }
 else {
    dispatchPdus(pdus);
  }
  return Activity.RESULT_OK;
}
