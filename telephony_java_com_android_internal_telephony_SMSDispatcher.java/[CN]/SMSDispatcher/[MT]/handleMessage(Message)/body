{
  AsyncResult ar;
switch (msg.what) {
case EVENT_NEW_SMS:
    if (false) {
      Log.d(TAG,"New SMS Message Received");
    }
  SmsMessage sms;
ar=(AsyncResult)msg.obj;
if (ar.exception != null) {
Log.e(TAG,"Exception processing incoming SMS. Exception:" + ar.exception);
return;
}
sms=(SmsMessage)ar.result;
try {
int result=dispatchMessage(sms.mWrappedSmsMessage);
if (result != Activity.RESULT_OK) {
boolean handled=(result == Intents.RESULT_SMS_HANDLED);
notifyAndAcknowledgeLastIncomingSms(handled,result,null);
}
}
 catch (RuntimeException ex) {
Log.e(TAG,"Exception dispatching message",ex);
notifyAndAcknowledgeLastIncomingSms(false,Intents.RESULT_SMS_GENERIC_ERROR,null);
}
break;
case EVENT_SEND_SMS_COMPLETE:
handleSendComplete((AsyncResult)msg.obj);
break;
case EVENT_SEND_RETRY:
sendSms((SmsTracker)msg.obj);
break;
case EVENT_SEND_LIMIT_REACHED_CONFIRMATION:
handleReachSentLimit((SmsTracker)(msg.obj));
break;
case EVENT_SEND_CONFIRMED_SMS:
{
SmsTracker tracker=(SmsTracker)msg.obj;
if (tracker.isMultipart()) {
sendMultipartSms(tracker);
}
 else {
sendSms(tracker);
}
mPendingTrackerCount--;
break;
}
case EVENT_STOP_SENDING:
{
SmsTracker tracker=(SmsTracker)msg.obj;
if (tracker.mSentIntent != null) {
try {
tracker.mSentIntent.send(RESULT_ERROR_LIMIT_EXCEEDED);
}
 catch (CanceledException ex) {
Log.e(TAG,"failed to send RESULT_ERROR_LIMIT_EXCEEDED");
}
}
mPendingTrackerCount--;
break;
}
}
}
