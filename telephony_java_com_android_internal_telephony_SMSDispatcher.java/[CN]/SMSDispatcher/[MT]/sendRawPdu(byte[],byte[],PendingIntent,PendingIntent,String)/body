{
  if (mSmsSendDisabled) {
    if (sentIntent != null) {
      try {
        sentIntent.send(RESULT_ERROR_NO_SERVICE);
      }
 catch (      CanceledException ex) {
      }
    }
    Log.d(TAG,"Device does not support sending sms.");
    return;
  }
  if (pdu == null) {
    if (sentIntent != null) {
      try {
        sentIntent.send(RESULT_ERROR_NULL_PDU);
      }
 catch (      CanceledException ex) {
      }
    }
    return;
  }
  HashMap<String,Object> map=new HashMap<String,Object>();
  map.put("smsc",smsc);
  map.put("pdu",pdu);
  PackageManager pm=mContext.getPackageManager();
  String[] packageNames=pm.getPackagesForUid(Binder.getCallingUid());
  if (packageNames == null || packageNames.length == 0) {
    Log.e(TAG,"Can't get calling app package name: refusing to send SMS");
    if (sentIntent != null) {
      try {
        sentIntent.send(RESULT_ERROR_GENERIC_FAILURE);
      }
 catch (      CanceledException ex) {
        Log.e(TAG,"failed to send error result");
      }
    }
    return;
  }
  String appPackage=packageNames[0];
  SmsTracker tracker=new SmsTracker(map,sentIntent,deliveryIntent,appPackage,PhoneNumberUtils.extractNetworkPortion(destAddr));
  if (checkDestination(tracker)) {
    if (!mUsageMonitor.check(appPackage,SINGLE_PART_SMS)) {
      sendMessage(obtainMessage(EVENT_SEND_LIMIT_REACHED_CONFIRMATION,tracker));
      return;
    }
    int ss=mPhone.getServiceState().getState();
    if (ss != ServiceState.STATE_IN_SERVICE) {
      handleNotInService(ss,tracker.mSentIntent);
    }
 else {
      sendSms(tracker);
    }
  }
}
