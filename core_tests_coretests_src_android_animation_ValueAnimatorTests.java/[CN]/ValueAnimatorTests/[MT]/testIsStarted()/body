{
  assertFalse(a1.isStarted());
  assertFalse(a2.isStarted());
  assertFalse(a1.isRunning());
  assertFalse(a2.isRunning());
  final long startDelay=150;
  a1.setStartDelay(startDelay);
  final long[] startTime=new long[1];
  runTestOnUiThread(new Runnable(){
    @Override public void run(){
      a1.start();
      a2.start();
      startTime[0]=SystemClock.uptimeMillis();
      assertTrue(a1.isStarted());
      assertTrue(a2.isStarted());
    }
  }
);
  long delayMs=0;
  while (delayMs < startDelay) {
    Thread.sleep(POLL_INTERVAL);
    delayMs+=POLL_INTERVAL;
    runTestOnUiThread(new Runnable(){
      @Override public void run(){
        if (SystemClock.uptimeMillis() - startTime[0] < startDelay) {
          assertFalse(a1.isRunning());
        }
      }
    }
);
  }
  Thread.sleep(startDelay);
  runTestOnUiThread(new Runnable(){
    @Override public void run(){
      assertTrue(a1.isRunning());
      assertTrue(a2.isRunning());
    }
  }
);
  long delay=Math.max(a1.getTotalDuration(),a2.getTotalDuration()) * 2;
  Thread.sleep(delay);
  runTestOnUiThread(new Runnable(){
    @Override public void run(){
      assertFalse(a1.isStarted());
      assertFalse(a1.isRunning());
      assertFalse(a2.isStarted());
      assertFalse(a2.isRunning());
    }
  }
);
}
