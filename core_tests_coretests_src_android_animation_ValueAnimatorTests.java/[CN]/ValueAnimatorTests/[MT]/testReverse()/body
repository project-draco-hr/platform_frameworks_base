{
  final ValueAnimator a3=ValueAnimator.ofInt(0,100);
  a1.setDuration(400);
  a2.setDuration(600);
  a3.setDuration(400);
  final MyListener l1=new MyListener();
  final MyListener l2=new MyListener();
  final MyListener l3=new MyListener();
  a1.addListener(l1);
  a2.addListener(l2);
  a3.addListener(l3);
  runTestOnUiThread(new Runnable(){
    @Override public void run(){
      assertFalse(l1.startCalled);
      assertFalse(l2.startCalled);
      assertFalse(l3.startCalled);
      assertFalse(l1.endCalled);
      assertFalse(l2.endCalled);
      assertFalse(l3.endCalled);
      a1.reverse();
      a2.reverse();
      a3.reverse();
    }
  }
);
  Thread.sleep(POLL_INTERVAL);
  runTestOnUiThread(new Runnable(){
    @Override public void run(){
      assertTrue(l1.startCalled);
      assertTrue(l2.startCalled);
      assertTrue(l3.startCalled);
      a1.setCurrentFraction(0f);
      a2.setCurrentFraction(1f);
      a3.end();
      assertEquals(1f,a1.getAnimatedFraction());
      assertEquals(0f,a2.getAnimatedFraction());
    }
  }
);
  Thread.sleep(POLL_INTERVAL);
  runTestOnUiThread(new Runnable(){
    @Override public void run(){
      assertFalse(l1.endCalled);
      assertTrue(l2.endCalled);
      assertTrue(l3.endCalled);
    }
  }
);
  Thread.sleep(a1.getTotalDuration());
  runTestOnUiThread(new Runnable(){
    @Override public void run(){
      assertTrue(l1.endCalled);
      assertEquals(0f,a1.getAnimatedFraction());
      assertEquals(0f,a2.getAnimatedFraction());
      assertEquals(0f,a3.getAnimatedFraction());
    }
  }
);
}
