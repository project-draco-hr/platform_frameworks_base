{
  final MyListener l1=new MyListener();
  final MyListener l2=new MyListener();
  final MyUpdateListener updateListener1=new MyUpdateListener();
  final MyUpdateListener updateListener2=new MyUpdateListener();
  final float a1StartFraction=0.2f;
  final float a2StartFraction=0.3f;
  a1.setDuration(1000);
  a2.setDuration(1000);
  a1.addListener(l1);
  a2.addListener(l2);
  a1.addUpdateListener(updateListener1);
  a2.addUpdateListener(updateListener2);
  TimeInterpolator interpolator=new LinearInterpolator();
  a1.setInterpolator(interpolator);
  a2.setInterpolator(interpolator);
  runTestOnUiThread(new Runnable(){
    @Override public void run(){
      assertFalse(a1.isStarted());
      assertFalse(a1.isRunning());
      assertFalse(a2.isStarted());
      assertFalse(a2.isRunning());
      a1.setCurrentFraction(a1StartFraction);
      a2.setCurrentFraction(a2StartFraction);
      assertFalse(a1.isStarted());
      assertFalse(a1.isRunning());
      assertFalse(a2.isStarted());
      assertFalse(a2.isRunning());
    }
  }
);
  Thread.sleep(POLL_INTERVAL);
  runTestOnUiThread(new Runnable(){
    @Override public void run(){
      assertFalse(a1.isStarted());
      assertFalse(a1.isRunning());
      assertFalse(a2.isStarted());
      assertFalse(a2.isRunning());
      assertEquals(a1StartFraction,a1.getAnimatedFraction());
      assertEquals(a2StartFraction,a2.getAnimatedFraction());
      a1.start();
      a2.start();
    }
  }
);
  Thread.sleep(POLL_INTERVAL);
  final float halfwayFraction=0.5f;
  runTestOnUiThread(new Runnable(){
    @Override public void run(){
      assertTrue(l1.startCalled);
      assertTrue(l2.startCalled);
      assertFalse(l1.endCalled);
      assertFalse(l2.endCalled);
      assertTrue(updateListener1.startFraction >= a1StartFraction);
      assertTrue(updateListener2.startFraction >= a2StartFraction);
      assertTrue(a1.isStarted());
      assertTrue(a1.isRunning());
      assertTrue(a2.isStarted());
      assertTrue(a2.isRunning());
      a1.setCurrentFraction(halfwayFraction);
      a2.setCurrentFraction(halfwayFraction);
    }
  }
);
  Thread.sleep(POLL_INTERVAL);
  runTestOnUiThread(new Runnable(){
    @Override public void run(){
      assertTrue(l1.startCalled);
      assertTrue(l2.startCalled);
      assertFalse(l1.endCalled);
      assertFalse(l2.endCalled);
      assertTrue(a1.isStarted());
      assertTrue(a1.isRunning());
      assertTrue(a2.isStarted());
      assertTrue(a2.isRunning());
    }
  }
);
  long wait=Math.max(a1.getTotalDuration(),a2.getTotalDuration());
  Thread.sleep(wait);
  runTestOnUiThread(new Runnable(){
    @Override public void run(){
      assertTrue(l1.endCalled);
      assertTrue(l2.endCalled);
      assertFalse(a1.isStarted());
      assertFalse(a2.isStarted());
      assertFalse(a1.isRunning());
      assertFalse(a2.isRunning());
    }
  }
);
  updateListener1.reset();
  runTestOnUiThread(new Runnable(){
    @Override public void run(){
      a1.start();
    }
  }
);
  Thread.sleep(POLL_INTERVAL);
  runTestOnUiThread(new Runnable(){
    @Override public void run(){
      assertTrue(updateListener1.wasRunning);
      assertTrue(updateListener1.startFraction >= 0);
      assertTrue(updateListener1.startFraction < halfwayFraction);
      a1.end();
    }
  }
);
}
