{
  final ValueAnimator a0=ValueAnimator.ofInt(100,200).setDuration(500);
  final ValueAnimator a3=ValueAnimator.ofFloat(0,1).setDuration(500);
  final ValueAnimator a4=ValueAnimator.ofInt(200,300).setDuration(500);
  final MyListener listener=new MyListener(){
    @Override public void onAnimationEnd(    Animator anim){
      super.onAnimationEnd(anim);
      a0.cancel();
      a1.end();
      a3.end();
      a4.cancel();
    }
  }
;
  a2.addListener(listener);
  runTestOnUiThread(new Runnable(){
    @Override public void run(){
      a0.start();
      a1.start();
      a2.start();
      a3.start();
      a4.start();
    }
  }
);
  runTestOnUiThread(new Runnable(){
    @Override public void run(){
      assertTrue(a0.isStarted());
      assertTrue(a1.isStarted());
      assertTrue(a2.isStarted());
      assertTrue(a3.isStarted());
      assertTrue(a4.isStarted());
    }
  }
);
  Thread.sleep(POLL_INTERVAL);
  runTestOnUiThread(new Runnable(){
    @Override public void run(){
      a2.end();
    }
  }
);
  Thread.sleep(POLL_INTERVAL);
  assertTrue(listener.endCalled);
  assertFalse(a0.isStarted());
  assertFalse(a1.isStarted());
  assertFalse(a2.isStarted());
  assertFalse(a3.isStarted());
  assertFalse(a4.isStarted());
}
