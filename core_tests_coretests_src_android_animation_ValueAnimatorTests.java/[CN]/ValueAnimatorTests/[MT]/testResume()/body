{
  final MyUpdateListener l1=new MyUpdateListener();
  final long totalDuration=a1.getTotalDuration();
  a1.addUpdateListener(l1);
  a1.setDuration(1000);
  assertTrue(l1.firstRunningFrameTime < 0);
  assertTrue(l1.lastUpdateTime < 0);
  final long[] lastUpdate=new long[1];
  runTestOnUiThread(new Runnable(){
    @Override public void run(){
      a1.start();
    }
  }
);
  Thread.sleep(totalDuration / 2);
  runTestOnUiThread(new Runnable(){
    @Override public void run(){
      assertTrue(l1.firstRunningFrameTime > 0);
      assertTrue(l1.lastUpdateTime > l1.firstRunningFrameTime);
      lastUpdate[0]=l1.lastUpdateTime;
      a1.pause();
    }
  }
);
  Thread.sleep(totalDuration);
  runTestOnUiThread(new Runnable(){
    @Override public void run(){
      assertEquals(lastUpdate[0],l1.lastUpdateTime);
      a1.resume();
    }
  }
);
  do {
    Thread.sleep(POLL_INTERVAL);
    runTestOnUiThread(new Runnable(){
      @Override public void run(){
        assertTrue(l1.lastUpdateTime > lastUpdate[0]);
        lastUpdate[0]=l1.lastUpdateTime;
      }
    }
);
  }
 while (!a1.isStarted());
  long entireSpan=totalDuration * 2;
  long frameDelta=l1.lastUpdateTime - l1.firstRunningFrameTime;
  assertTrue(Math.abs(entireSpan - frameDelta) < TOLERANCE);
}
