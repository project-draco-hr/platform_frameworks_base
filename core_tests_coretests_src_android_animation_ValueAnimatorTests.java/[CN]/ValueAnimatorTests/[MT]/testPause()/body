{
  runTestOnUiThread(new Runnable(){
    @Override public void run(){
      assertFalse(a1.isPaused());
      assertFalse(a2.isPaused());
      a1.start();
      a2.start();
      assertFalse(a1.isPaused());
      assertFalse(a2.isPaused());
      assertTrue(a1.isStarted());
      assertTrue(a2.isStarted());
    }
  }
);
  Thread.sleep(POLL_INTERVAL);
  runTestOnUiThread(new Runnable(){
    @Override public void run(){
      assertTrue(a1.isRunning());
      assertTrue(a2.isRunning());
      a1.pause();
      assertTrue(a1.isPaused());
      assertFalse(a2.isPaused());
      assertTrue(a1.isRunning());
    }
  }
);
  Thread.sleep(a2.getTotalDuration());
  runTestOnUiThread(new Runnable(){
    @Override public void run(){
      assertFalse(a2.isStarted());
      assertFalse(a2.isRunning());
      assertTrue(a1.isStarted());
      assertTrue(a1.isRunning());
      assertTrue(a1.isPaused());
      a1.resume();
    }
  }
);
  Thread.sleep(POLL_INTERVAL);
  runTestOnUiThread(new Runnable(){
    @Override public void run(){
      assertTrue(a1.isRunning());
      assertTrue(a1.isStarted());
      assertFalse(a1.isPaused());
    }
  }
);
  Thread.sleep(a1.getTotalDuration());
  runTestOnUiThread(new Runnable(){
    @Override public void run(){
      assertFalse(a1.isRunning());
      assertFalse(a1.isStarted());
      assertFalse(a1.isPaused());
    }
  }
);
}
