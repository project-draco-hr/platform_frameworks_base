{
  final MyFrameCallbackProvider provider=new MyFrameCallbackProvider();
  long sleep=0;
  while (provider.mHandler == null) {
    Thread.sleep(POLL_INTERVAL);
    sleep+=POLL_INTERVAL;
    if (sleep > WAIT_TIME_OUT) {
      break;
    }
  }
  assertNotNull(provider.mHandler);
  final MyListener listener=new MyListener();
  final MyUpdateListener l1=new MyUpdateListener(){
    @Override public void onAnimationUpdate(    ValueAnimator animation){
      long currentTime=SystemClock.uptimeMillis();
      long frameDelay=provider.getFrameDelay();
      if (lastUpdateTime > 0) {
        assertTrue((currentTime - lastUpdateTime) < frameDelay * 2);
      }
 else {
        assertTrue(listener.startCalled);
        assertTrue(listener.startTime > 0);
        assertTrue(currentTime - listener.startTime < frameDelay * 2);
      }
      super.onAnimationUpdate(animation);
    }
  }
;
  a1.addUpdateListener(l1);
  a1.addListener(listener);
  a1.setStartDelay(100);
  provider.mHandler.post(new Runnable(){
    @Override public void run(){
      AnimationHandler.getInstance().setProvider(provider);
      a1.start();
    }
  }
);
  Thread.sleep(POLL_INTERVAL);
  assertTrue(a1.isStarted());
  Thread.sleep(a1.getTotalDuration() + TOLERANCE);
  assertFalse(a1.isStarted());
  assertTrue(listener.endTime > 0);
  assertTrue(listener.endTime >= l1.lastUpdateTime);
  assertTrue(listener.endTime - l1.lastUpdateTime < 2 * provider.getFrameDelay());
}
