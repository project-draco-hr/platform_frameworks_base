{
  if (operations == null) {
    fail("There is no operation.");
  }
  final int size=operations.size();
  ContentProviderResult[] fakeResultArray=new ContentProviderResult[size];
  for (int i=0; i < size; i++) {
    Uri uri=Uri.withAppendedPath(RawContacts.CONTENT_URI,String.valueOf(i));
    fakeResultArray[i]=new ContentProviderResult(uri);
  }
  Log.d("@@@","size: " + size);
  for (int i=0; i < size; i++) {
    ContentProviderOperation operation=operations.get(i);
    ContentValues contentValues=operation.resolveValueBackReferences(fakeResultArray,i);
    Log.d("@@@",convertToEasilyReadableString(contentValues));
  }
  for (int i=0; i < size; i++) {
    ContentProviderOperation operation=operations.get(i);
    ContentValues actualContentValues=operation.resolveValueBackReferences(fakeResultArray,i);
    final Uri uri=operation.getUri();
    if (uri.equals(RawContacts.CONTENT_URI)) {
      assertNull(actualContentValues.get(RawContacts.ACCOUNT_NAME));
      assertNull(actualContentValues.get(RawContacts.ACCOUNT_TYPE));
    }
 else     if (uri.equals(Data.CONTENT_URI)) {
      final String mimeType=actualContentValues.getAsString(Data.MIMETYPE);
      if (!sKnownMimeTypeSet.contains(mimeType)) {
        fail(String.format("Unknown MimeType %s. Probably added after developing this test",mimeType));
      }
      Set<String> keyToBeRemoved=new HashSet<String>();
      for (      Entry<String,Object> entry : actualContentValues.valueSet()) {
        Object value=entry.getValue();
        if (value == null || TextUtils.isEmpty(value.toString())) {
          keyToBeRemoved.add(entry.getKey());
        }
      }
      for (      String key : keyToBeRemoved) {
        actualContentValues.remove(key);
      }
      Log.d("@@@",String.format("MimeType: %s, data: %s",mimeType,actualContentValues.toString()));
      if (actualContentValues.containsKey(Data.RAW_CONTACT_ID)) {
        actualContentValues.remove(Data.RAW_CONTACT_ID);
      }
      final Collection<ContentValues> contentValuesCollection=mMimeTypeToExpectedContentValues.get(mimeType);
      if (contentValuesCollection.isEmpty()) {
        fail("ContentValues for MimeType " + mimeType + " is not expected at all ("+ actualContentValues+ ")");
      }
      boolean checked=false;
      for (      ContentValues expectedContentValues : contentValuesCollection) {
        Log.d("@@@","expected: " + convertToEasilyReadableString(expectedContentValues));
        Log.d("@@@","actual  : " + convertToEasilyReadableString(actualContentValues));
        if (equalsForContentValues(expectedContentValues,actualContentValues)) {
          assertTrue(contentValuesCollection.remove(expectedContentValues));
          checked=true;
          break;
        }
      }
      if (!checked) {
        final String failMsg="Unexpected ContentValues for MimeType " + mimeType + ": "+ actualContentValues;
        fail(failMsg);
      }
    }
 else {
      fail("Unexpected Uri has come: " + uri);
    }
  }
  return null;
}
