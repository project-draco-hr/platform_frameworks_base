{
  final String[] lineArray=vcard.split("\\r?\\n");
  final int length=lineArray.length;
  final TestCase testCase=VCardTestsBase.this;
  boolean beginExists=false;
  boolean endExists=false;
  boolean versionExists=false;
  for (int i=0; i < length; i++) {
    final String line=lineArray[i];
    if (TextUtils.isEmpty(line)) {
      continue;
    }
    if ("BEGIN:VCARD".equalsIgnoreCase(line)) {
      if (beginExists) {
        testCase.fail("Multiple \"BEGIN:VCARD\" line found");
      }
 else {
        beginExists=true;
        continue;
      }
    }
 else     if ("END:VCARD".equalsIgnoreCase(line)) {
      if (endExists) {
        testCase.fail("Multiple \"END:VCARD\" line found");
      }
 else {
        endExists=true;
        continue;
      }
    }
 else     if ((mIsV30 ? "VERSION:3.0" : "VERSION:2.1").equalsIgnoreCase(line)) {
      if (versionExists) {
        testCase.fail("Multiple VERSION line + found");
      }
 else {
        versionExists=true;
        continue;
      }
    }
    if (!beginExists) {
      testCase.fail("Property other than BEGIN came before BEGIN property: " + line);
    }
 else     if (endExists) {
      testCase.fail("Property other than END came after END property: " + line);
    }
    final int index=mExpectedLineList.indexOf(line);
    if (index >= 0) {
      mExpectedLineList.remove(index);
    }
 else {
      testCase.fail("Unexpected line: " + line);
    }
  }
  if (!mExpectedLineList.isEmpty()) {
    StringBuffer buffer=new StringBuffer();
    for (    String expectedLine : mExpectedLineList) {
      buffer.append(expectedLine);
      buffer.append("\n");
    }
    testCase.fail("Expected line(s) not found:" + buffer.toString());
  }
}
