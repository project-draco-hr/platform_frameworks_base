{
  final int key=getOrAddKey((byte)state,PSS_COUNT);
  final long count=getValue(key,PSS_SAMPLE_COUNT);
  if (count == 0) {
    setValue(key,PSS_SAMPLE_COUNT,inCount);
    setValue(key,PSS_MINIMUM,minPss);
    setValue(key,PSS_AVERAGE,avgPss);
    setValue(key,PSS_MAXIMUM,maxPss);
    setValue(key,PSS_USS_MINIMUM,minUss);
    setValue(key,PSS_USS_AVERAGE,avgUss);
    setValue(key,PSS_USS_MAXIMUM,maxUss);
  }
 else {
    setValue(key,PSS_SAMPLE_COUNT,count + inCount);
    long val;
    val=getValue(key,PSS_MINIMUM);
    if (val > minPss) {
      setValue(key,PSS_MINIMUM,minPss);
    }
    val=getValue(key,PSS_AVERAGE);
    setValue(key,PSS_AVERAGE,(long)(((val * (double)count) + (avgPss * (double)inCount)) / (count + inCount)));
    val=getValue(key,PSS_MAXIMUM);
    if (val < maxPss) {
      setValue(key,PSS_MAXIMUM,maxPss);
    }
    val=getValue(key,PSS_USS_MINIMUM);
    if (val > minUss) {
      setValue(key,PSS_USS_MINIMUM,minUss);
    }
    val=getValue(key,PSS_USS_AVERAGE);
    setValue(key,PSS_AVERAGE,(long)(((val * (double)count) + (avgUss * (double)inCount)) / (count + inCount)));
    val=getValue(key,PSS_USS_MAXIMUM);
    if (val < maxUss) {
      setValue(key,PSS_USS_MAXIMUM,maxUss);
    }
  }
}
