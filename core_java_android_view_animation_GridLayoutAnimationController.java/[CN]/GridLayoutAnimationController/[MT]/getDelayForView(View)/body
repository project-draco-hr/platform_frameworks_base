{
  ViewGroup.LayoutParams lp=view.getLayoutParams();
  AnimationParameters params=(AnimationParameters)lp.layoutAnimationParameters;
  if (params == null) {
    return 0;
  }
  final int column=getTransformedColumnIndex(params);
  final int row=getTransformedRowIndex(params);
  final int rowsCount=params.rowsCount;
  final int columnsCount=params.columnsCount;
  final long duration=mAnimation.getDuration();
  final float columnDelay=mColumnDelay * duration;
  final float rowDelay=mRowDelay * duration;
  float totalDelay;
  long viewDelay;
  if (mInterpolator == null) {
    mInterpolator=new LinearInterpolator();
  }
switch (mDirectionPriority) {
case PRIORITY_COLUMN:
    viewDelay=(long)(row * rowDelay + column * rowsCount * rowDelay);
  totalDelay=rowsCount * rowDelay + columnsCount * rowsCount * rowDelay;
break;
case PRIORITY_ROW:
viewDelay=(long)(column * columnDelay + row * columnsCount * columnDelay);
totalDelay=columnsCount * columnDelay + rowsCount * columnsCount * columnDelay;
break;
case PRIORITY_NONE:
default :
viewDelay=(long)(column * columnDelay + row * rowDelay);
totalDelay=columnsCount * columnDelay + rowsCount * rowDelay;
break;
}
float normalizedDelay=viewDelay / totalDelay;
normalizedDelay=mInterpolator.getInterpolation(normalizedDelay);
return (long)(normalizedDelay * totalDelay);
}
