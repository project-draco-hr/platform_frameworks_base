{
  if (mTargetMixType == AudioMix.MIX_TYPE_INVALID) {
    if (isPlayerRule(rule)) {
      mTargetMixType=AudioMix.MIX_TYPE_PLAYERS;
    }
 else {
      mTargetMixType=AudioMix.MIX_TYPE_RECORDERS;
    }
  }
 else   if (((mTargetMixType == AudioMix.MIX_TYPE_PLAYERS) && !isPlayerRule(rule)) || ((mTargetMixType == AudioMix.MIX_TYPE_RECORDERS) && isPlayerRule(rule))) {
    throw new IllegalArgumentException("Incompatible rule for mix");
  }
synchronized (mCriteria) {
    Iterator<AttributeMatchCriterion> crIterator=mCriteria.iterator();
    final int match_rule=rule & ~RULE_EXCLUSION_MASK;
    while (crIterator.hasNext()) {
      final AttributeMatchCriterion criterion=crIterator.next();
switch (match_rule) {
case RULE_MATCH_ATTRIBUTE_USAGE:
        if (criterion.mAttr.getUsage() == attrToMatch.getUsage()) {
          if (criterion.mRule == rule) {
            return this;
          }
 else {
            throw new IllegalArgumentException("Contradictory rule exists" + " for " + attrToMatch);
          }
        }
      break;
case RULE_MATCH_ATTRIBUTE_CAPTURE_PRESET:
    if (criterion.mAttr.getCapturePreset() == attrToMatch.getCapturePreset()) {
      if (criterion.mRule == rule) {
        return this;
      }
 else {
        throw new IllegalArgumentException("Contradictory rule exists" + " for " + attrToMatch);
      }
    }
  break;
case RULE_MATCH_UID:
if (criterion.mIntProp.intValue() == intProp.intValue()) {
  if (criterion.mRule == rule) {
    return this;
  }
 else {
    throw new IllegalArgumentException("Contradictory rule exists" + " for UID " + intProp);
  }
}
break;
}
}
mCriteria.add(new AttributeMatchCriterion(attrToMatch,rule));
}
return this;
}
