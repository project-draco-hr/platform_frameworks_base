{
  if (attrToMatch == null) {
    throw new IllegalArgumentException("Illegal null AudioAttributes argument");
  }
  if ((rule != RULE_MATCH_ATTRIBUTE_USAGE) && (rule != RULE_EXCLUDE_ATTRIBUTE_USAGE)) {
    throw new IllegalArgumentException("Illegal rule value " + rule);
  }
synchronized (mCriteria) {
    Iterator<AttributeMatchCriterion> crIterator=mCriteria.iterator();
    while (crIterator.hasNext()) {
      final AttributeMatchCriterion criterion=crIterator.next();
      if ((rule == RULE_MATCH_ATTRIBUTE_USAGE) || (rule == RULE_EXCLUDE_ATTRIBUTE_USAGE)) {
        if (criterion.mAttr.getUsage() == attrToMatch.getUsage()) {
          if (criterion.mRule == rule) {
            return this;
          }
 else {
            throw new IllegalArgumentException("Contradictory rule exists for " + attrToMatch);
          }
        }
      }
    }
    mCriteria.add(new AttributeMatchCriterion(attrToMatch,rule));
  }
  return this;
}
