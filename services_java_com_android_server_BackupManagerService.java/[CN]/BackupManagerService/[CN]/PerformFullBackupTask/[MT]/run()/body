{
  final List<PackageInfo> packagesToBackup;
  Slog.i(TAG,"--- Performing full-dataset backup ---");
  sendStartBackup();
  if (mAllApps) {
    packagesToBackup=mPackageManager.getInstalledPackages(PackageManager.GET_SIGNATURES);
  }
 else {
    packagesToBackup=new ArrayList<PackageInfo>();
    for (    String pkgName : mPackages) {
      try {
        packagesToBackup.add(mPackageManager.getPackageInfo(pkgName,PackageManager.GET_SIGNATURES));
      }
 catch (      NameNotFoundException e) {
        Slog.w(TAG,"Unknown package " + pkgName + ", skipping");
      }
    }
  }
  for (int i=0; i < packagesToBackup.size(); ) {
    PackageInfo info=packagesToBackup.get(i);
    if ((info.applicationInfo.flags & ApplicationInfo.FLAG_ALLOW_BACKUP) == 0) {
      packagesToBackup.remove(i);
    }
 else {
      i++;
    }
  }
  FileOutputStream ofstream=new FileOutputStream(mOutputFile.getFileDescriptor());
  OutputStream out=null;
  PackageInfo pkg=null;
  try {
    boolean encrypting=(mUserPassword != null && mUserPassword.length() > 0);
    boolean compressing=COMPRESS_FULL_BACKUPS;
    OutputStream finalOutput=ofstream;
    StringBuilder headerbuf=new StringBuilder(1024);
    headerbuf.append(BACKUP_FILE_HEADER_MAGIC);
    headerbuf.append(BACKUP_FILE_VERSION);
    headerbuf.append(compressing ? "\n1\n" : "\n0\n");
    try {
      if (encrypting) {
        if (hasBackupPassword()) {
          if (!passwordMatchesSaved(mUserPassword,PBKDF2_HASH_ROUNDS)) {
            if (DEBUG)             Slog.w(TAG,"Backup password mismatch; aborting");
            return;
          }
        }
        finalOutput=emitAesBackupHeader(headerbuf,finalOutput);
      }
 else {
        headerbuf.append("none\n");
      }
      byte[] header=headerbuf.toString().getBytes("UTF-8");
      ofstream.write(header);
      if (compressing) {
        Deflater deflater=new Deflater(Deflater.BEST_COMPRESSION);
        finalOutput=new DeflaterOutputStream(finalOutput,deflater,true);
      }
      out=finalOutput;
    }
 catch (    Exception e) {
      Slog.e(TAG,"Unable to emit archive header",e);
      return;
    }
    int N=packagesToBackup.size();
    for (int i=0; i < N; i++) {
      pkg=packagesToBackup.get(i);
      backupOnePackage(pkg,out);
    }
    if (mIncludeShared) {
      backupSharedStorage();
    }
  }
 catch (  RemoteException e) {
    Slog.e(TAG,"App died during full backup");
  }
 finally {
    tearDown(pkg);
    try {
      if (out != null)       out.close();
      mOutputFile.close();
    }
 catch (    IOException e) {
    }
synchronized (mCurrentOpLock) {
      mCurrentOperations.clear();
    }
synchronized (mLatchObject) {
      mLatchObject.set(true);
      mLatchObject.notifyAll();
    }
    sendEndBackup();
    mWakelock.release();
    if (DEBUG)     Slog.d(TAG,"Full backup pass complete.");
  }
}
