{
  InputStream result=null;
  try {
    if (encryptionName.equals(ENCRYPTION_ALGORITHM_NAME)) {
      String userSaltHex=readHeaderLine(rawInStream);
      byte[] userSalt=hexToByteArray(userSaltHex);
      String ckSaltHex=readHeaderLine(rawInStream);
      byte[] ckSalt=hexToByteArray(ckSaltHex);
      int rounds=Integer.parseInt(readHeaderLine(rawInStream));
      String userIvHex=readHeaderLine(rawInStream);
      String masterKeyBlobHex=readHeaderLine(rawInStream);
      result=attemptMasterKeyDecryption(PBKDF_CURRENT,userSalt,ckSalt,rounds,userIvHex,masterKeyBlobHex,rawInStream,false);
      if (result == null && pbkdf2Fallback) {
        result=attemptMasterKeyDecryption(PBKDF_FALLBACK,userSalt,ckSalt,rounds,userIvHex,masterKeyBlobHex,rawInStream,true);
      }
    }
 else     Slog.w(TAG,"Unsupported encryption method: " + encryptionName);
  }
 catch (  NumberFormatException e) {
    Slog.w(TAG,"Can't parse restore data header");
  }
catch (  IOException e) {
    Slog.w(TAG,"Can't read input header");
  }
  return result;
}
