{
  InputStream result=null;
  try {
    if (encryptionName.equals(ENCRYPTION_ALGORITHM_NAME)) {
      String userSaltHex=readHeaderLine(rawInStream);
      byte[] userSalt=hexToByteArray(userSaltHex);
      String ckSaltHex=readHeaderLine(rawInStream);
      byte[] ckSalt=hexToByteArray(ckSaltHex);
      int rounds=Integer.parseInt(readHeaderLine(rawInStream));
      String userIvHex=readHeaderLine(rawInStream);
      String masterKeyBlobHex=readHeaderLine(rawInStream);
      Cipher c=Cipher.getInstance("AES/CBC/PKCS5Padding");
      SecretKey userKey=buildPasswordKey(mDecryptPassword,userSalt,rounds);
      byte[] IV=hexToByteArray(userIvHex);
      IvParameterSpec ivSpec=new IvParameterSpec(IV);
      c.init(Cipher.DECRYPT_MODE,new SecretKeySpec(userKey.getEncoded(),"AES"),ivSpec);
      byte[] mkCipher=hexToByteArray(masterKeyBlobHex);
      byte[] mkBlob=c.doFinal(mkCipher);
      int offset=0;
      int len=mkBlob[offset++];
      IV=Arrays.copyOfRange(mkBlob,offset,offset + len);
      offset+=len;
      len=mkBlob[offset++];
      byte[] mk=Arrays.copyOfRange(mkBlob,offset,offset + len);
      offset+=len;
      len=mkBlob[offset++];
      byte[] mkChecksum=Arrays.copyOfRange(mkBlob,offset,offset + len);
      byte[] calculatedCk=makeKeyChecksum(mk,ckSalt,rounds);
      if (Arrays.equals(calculatedCk,mkChecksum)) {
        ivSpec=new IvParameterSpec(IV);
        c.init(Cipher.DECRYPT_MODE,new SecretKeySpec(mk,"AES"),ivSpec);
        result=new CipherInputStream(rawInStream,c);
      }
 else       Slog.w(TAG,"Incorrect password");
    }
 else     Slog.w(TAG,"Unsupported encryption method: " + encryptionName);
  }
 catch (  InvalidAlgorithmParameterException e) {
    Slog.e(TAG,"Needed parameter spec unavailable!",e);
  }
catch (  BadPaddingException e) {
    Slog.w(TAG,"Incorrect password");
  }
catch (  IllegalBlockSizeException e) {
    Slog.w(TAG,"Invalid block size in master key");
  }
catch (  NoSuchAlgorithmException e) {
    Slog.e(TAG,"Needed decryption algorithm unavailable!");
  }
catch (  NoSuchPaddingException e) {
    Slog.e(TAG,"Needed padding mechanism unavailable!");
  }
catch (  InvalidKeyException e) {
    Slog.w(TAG,"Illegal password; aborting");
  }
catch (  NumberFormatException e) {
    Slog.w(TAG,"Can't parse restore data header");
  }
catch (  IOException e) {
    Slog.w(TAG,"Can't read input header");
  }
  return result;
}
