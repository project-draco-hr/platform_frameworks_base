{
  boolean okay=true;
  if (DEBUG)   Slog.d(TAG,"Installing from backup: " + info.packageName);
  File apkFile=new File(mDataDir,info.packageName);
  try {
    FileOutputStream apkStream=new FileOutputStream(apkFile);
    byte[] buffer=new byte[32 * 1024];
    long size=info.size;
    while (size > 0) {
      long toRead=(buffer.length < size) ? buffer.length : size;
      int didRead=instream.read(buffer,0,(int)toRead);
      if (didRead >= 0)       mBytes+=didRead;
      apkStream.write(buffer,0,didRead);
      size-=didRead;
    }
    apkStream.close();
    apkFile.setReadable(true,false);
    Uri packageUri=Uri.fromFile(apkFile);
    mInstallObserver.reset();
    mPackageManager.installPackage(packageUri,mInstallObserver,PackageManager.INSTALL_REPLACE_EXISTING | PackageManager.INSTALL_FROM_ADB,installerPackage);
    mInstallObserver.waitForCompletion();
    if (mInstallObserver.getResult() != PackageManager.INSTALL_SUCCEEDED) {
      if (mPackagePolicies.get(info.packageName) != RestorePolicy.ACCEPT) {
        okay=false;
      }
    }
 else {
      boolean uninstall=false;
      if (!mInstallObserver.mPackageName.equals(info.packageName)) {
        Slog.w(TAG,"Restore stream claimed to include apk for " + info.packageName + " but apk was really "+ mInstallObserver.mPackageName);
        okay=false;
        uninstall=true;
      }
 else {
        try {
          PackageInfo pkg=mPackageManager.getPackageInfo(info.packageName,PackageManager.GET_SIGNATURES);
          if ((pkg.applicationInfo.flags & ApplicationInfo.FLAG_ALLOW_BACKUP) == 0) {
            Slog.w(TAG,"Restore stream contains apk of package " + info.packageName + " but it disallows backup/restore");
            okay=false;
          }
 else {
            Signature[] sigs=mManifestSignatures.get(info.packageName);
            if (signaturesMatch(sigs,pkg)) {
              if ((pkg.applicationInfo.uid < Process.FIRST_APPLICATION_UID) && (pkg.applicationInfo.backupAgentName == null)) {
                Slog.w(TAG,"Installed app " + info.packageName + " has restricted uid and no agent");
                okay=false;
              }
            }
 else {
              Slog.w(TAG,"Installed app " + info.packageName + " signatures do not match restore manifest");
              okay=false;
              uninstall=true;
            }
          }
        }
 catch (        NameNotFoundException e) {
          Slog.w(TAG,"Install of package " + info.packageName + " succeeded but now not found");
          okay=false;
        }
      }
      if (uninstall) {
        mDeleteObserver.reset();
        mPackageManager.deletePackage(mInstallObserver.mPackageName,mDeleteObserver,0);
        mDeleteObserver.waitForCompletion();
      }
    }
  }
 catch (  IOException e) {
    Slog.e(TAG,"Unable to transcribe restored apk for install");
    okay=false;
  }
 finally {
    apkFile.delete();
  }
  return okay;
}
