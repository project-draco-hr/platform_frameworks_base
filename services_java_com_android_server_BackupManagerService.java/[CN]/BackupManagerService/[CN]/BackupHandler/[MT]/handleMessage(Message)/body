{
switch (msg.what) {
case MSG_RUN_BACKUP:
{
      HashSet<ServiceInfo> queue;
synchronized (mQueueLock) {
        queue=mPendingBackups;
        mPendingBackups=new HashSet<ServiceInfo>();
      }
      Intent backupIntent=new Intent(BackupService.SERVICE_ACTION);
      for (      ServiceInfo service : queue) {
        mBinding=true;
        mTargetService=null;
        backupIntent.setClassName(service.packageName,service.name);
        Log.d(TAG,"binding to " + backupIntent);
        if (mContext.bindService(backupIntent,this,0)) {
synchronized (mBindSignaller) {
            while (mTargetService == null && mBinding == true) {
              try {
                mBindSignaller.wait();
              }
 catch (              InterruptedException e) {
              }
            }
          }
          if (mTargetService != null) {
            try {
              Log.d(TAG,"invoking doBackup() on " + backupIntent);
              File savedStateName=new File(mStateDir,service.packageName);
              File backupDataName=new File(mDataDir,service.packageName + ".data");
              File newStateName=new File(mStateDir,service.packageName + ".new");
              ParcelFileDescriptor savedState=ParcelFileDescriptor.open(savedStateName,ParcelFileDescriptor.MODE_READ_ONLY | ParcelFileDescriptor.MODE_CREATE);
              backupDataName.delete();
              ParcelFileDescriptor backupData=ParcelFileDescriptor.open(backupDataName,ParcelFileDescriptor.MODE_READ_WRITE | ParcelFileDescriptor.MODE_CREATE);
              newStateName.delete();
              ParcelFileDescriptor newState=ParcelFileDescriptor.open(newStateName,ParcelFileDescriptor.MODE_READ_WRITE | ParcelFileDescriptor.MODE_CREATE);
              try {
                mTargetService.doBackup(savedState,backupData,newState);
              }
  finally {
                savedState.close();
                backupData.close();
                newState.close();
              }
              backupDataName.delete();
              newStateName.renameTo(savedStateName);
            }
 catch (            FileNotFoundException fnf) {
              Log.d(TAG,"File not found on backup: ");
              fnf.printStackTrace();
            }
catch (            RemoteException e) {
              Log.d(TAG,"Remote target " + backupIntent + " threw during backup:");
              e.printStackTrace();
            }
catch (            Exception e) {
              Log.w(TAG,"Final exception guard in backup: ");
              e.printStackTrace();
            }
            mContext.unbindService(this);
          }
        }
 else {
          Log.d(TAG,"Unable to bind to " + backupIntent);
        }
      }
    }
  break;
}
}
