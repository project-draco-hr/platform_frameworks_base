{
  if (DEBUG)   Slog.v(TAG,"restorePackage pkg=" + packageName + " obs="+ observer);
  if (mEnded) {
    throw new IllegalStateException("Restore session already ended");
  }
  if (mPackageName != null) {
    if (!mPackageName.equals(packageName)) {
      Slog.e(TAG,"Ignoring attempt to restore pkg=" + packageName + " on session for package "+ mPackageName);
      return -1;
    }
  }
  PackageInfo app=null;
  try {
    app=mPackageManager.getPackageInfo(packageName,0);
  }
 catch (  NameNotFoundException nnf) {
    Slog.w(TAG,"Asked to restore nonexistent pkg " + packageName);
    return -1;
  }
  int perm=mContext.checkPermission(android.Manifest.permission.BACKUP,Binder.getCallingPid(),Binder.getCallingUid());
  if ((perm == PackageManager.PERMISSION_DENIED) && (app.applicationInfo.uid != Binder.getCallingUid())) {
    Slog.w(TAG,"restorePackage: bad packageName=" + packageName + " or calling uid="+ Binder.getCallingUid());
    throw new SecurityException("No permission to restore other packages");
  }
  if (app.applicationInfo.backupAgentName == null) {
    Slog.w(TAG,"Asked to restore package " + packageName + " with no agent");
    return -1;
  }
  long token=getAvailableRestoreToken(packageName);
  if (token == 0) {
    if (DEBUG)     Slog.w(TAG,"No data available for this package; not restoring");
    return -1;
  }
  String dirName;
  try {
    dirName=mRestoreTransport.transportDirName();
  }
 catch (  RemoteException e) {
    Slog.e(TAG,"Unable to contact transport for restore");
    return -1;
  }
  long oldId=Binder.clearCallingIdentity();
  mWakelock.acquire();
  Message msg=mBackupHandler.obtainMessage(MSG_RUN_RESTORE);
  msg.obj=new RestoreParams(mRestoreTransport,dirName,observer,token,app,0,false);
  mBackupHandler.sendMessage(msg);
  Binder.restoreCallingIdentity(oldId);
  return 0;
}
