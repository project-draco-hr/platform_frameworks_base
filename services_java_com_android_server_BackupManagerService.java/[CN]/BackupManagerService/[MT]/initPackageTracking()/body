{
  if (DEBUG)   Log.v(TAG,"Initializing package tracking");
  mTokenFile=new File(mBaseStateDir,"ancestral");
  try {
    RandomAccessFile tf=new RandomAccessFile(mTokenFile,"r");
    mAncestralToken=tf.readLong();
    mCurrentToken=tf.readLong();
  }
 catch (  IOException e) {
    Log.w(TAG,"Unable to read token file",e);
  }
  mEverStored=new File(mBaseStateDir,"processed");
  File tempProcessedFile=new File(mBaseStateDir,"processed.new");
  if (tempProcessedFile.exists()) {
    tempProcessedFile.delete();
  }
  if (mEverStored.exists()) {
    RandomAccessFile temp=null;
    RandomAccessFile in=null;
    try {
      temp=new RandomAccessFile(tempProcessedFile,"rws");
      in=new RandomAccessFile(mEverStored,"r");
      while (true) {
        PackageInfo info;
        String pkg=in.readUTF();
        try {
          info=mPackageManager.getPackageInfo(pkg,0);
          mEverStoredApps.add(pkg);
          temp.writeUTF(pkg);
          if (DEBUG)           Log.v(TAG,"   + " + pkg);
        }
 catch (        NameNotFoundException e) {
          if (DEBUG)           Log.v(TAG,"   - " + pkg);
        }
      }
    }
 catch (    EOFException e) {
      if (!tempProcessedFile.renameTo(mEverStored)) {
        Log.e(TAG,"Error renaming " + tempProcessedFile + " to "+ mEverStored);
      }
    }
catch (    IOException e) {
      Log.e(TAG,"Error in processed file",e);
    }
 finally {
      try {
        if (temp != null)         temp.close();
      }
 catch (      IOException e) {
      }
      try {
        if (in != null)         in.close();
      }
 catch (      IOException e) {
      }
    }
  }
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_PACKAGE_ADDED);
  filter.addAction(Intent.ACTION_PACKAGE_REMOVED);
  filter.addDataScheme("package");
  mContext.registerReceiver(mBroadcastReceiver,filter);
  IntentFilter sdFilter=new IntentFilter();
  sdFilter.addAction(Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE);
  sdFilter.addAction(Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE);
  mContext.registerReceiver(mBroadcastReceiver,sdFilter);
}
