{
  int[] languagePairs=sLanguagePairIndexesByEnabledIndex[enabledLangsIndex];
  int minNumSeptets=Integer.MAX_VALUE;
  int minNumSeptetsWithHeader=Integer.MAX_VALUE;
  int minNumMissingChars=Integer.MAX_VALUE;
  int langIndex=-1;
  int langShiftIndex=-1;
  for (  int i : languagePairs) {
    LanguagePair pair=mCounters[i];
    int udhLength=0;
    if (i != 0) {
      udhLength=UDH_SEPTET_COST_LENGTH;
      if (i < 4 || i % 4 == 0) {
        udhLength+=UDH_SEPTET_COST_ONE_SHIFT_TABLE;
      }
 else {
        udhLength+=UDH_SEPTET_COST_TWO_SHIFT_TABLES;
      }
    }
    int numSeptetsWithHeader;
    if (pair.length > (MAX_USER_DATA_SEPTETS - udhLength)) {
      if (udhLength == 0) {
        udhLength=UDH_SEPTET_COST_LENGTH;
      }
      udhLength+=UDH_SEPTET_COST_CONCATENATED_MESSAGE;
      int septetsPerPart=MAX_USER_DATA_SEPTETS - udhLength;
      int msgCount=(pair.length + septetsPerPart - 1) / septetsPerPart;
      numSeptetsWithHeader=udhLength * msgCount + pair.length;
    }
 else {
      numSeptetsWithHeader=udhLength + pair.length;
    }
    if (use7bitOnly) {
      if (pair.missingChars7bit < minNumMissingChars || (pair.missingChars7bit == minNumMissingChars && numSeptetsWithHeader < minNumSeptetsWithHeader)) {
        minNumSeptets=pair.length;
        minNumSeptetsWithHeader=numSeptetsWithHeader;
        minNumMissingChars=pair.missingChars7bit;
        langIndex=pair.langTableIndex;
        langShiftIndex=pair.langShiftTableIndex;
      }
    }
 else {
      if (pair.missingChars7bit == 0 && numSeptetsWithHeader < minNumSeptetsWithHeader) {
        minNumSeptets=pair.length;
        minNumSeptetsWithHeader=numSeptetsWithHeader;
        langIndex=pair.langTableIndex;
        langShiftIndex=pair.langShiftTableIndex;
      }
    }
  }
  if (langIndex == -1) {
    int byteCount=length * 2;
    if (byteCount > MAX_USER_DATA_BYTES) {
      values[0]=(byteCount + MAX_USER_DATA_BYTES_WITH_HEADER - 1) / MAX_USER_DATA_BYTES_WITH_HEADER;
      values[2]=((values[0] * MAX_USER_DATA_BYTES_WITH_HEADER) - byteCount) / 2;
    }
 else {
      values[0]=1;
      values[2]=(MAX_USER_DATA_BYTES - byteCount) / 2;
    }
    values[1]=length;
    values[3]=SmsMessage.ENCODING_16BIT;
    values[4]=0;
    values[5]=0;
    mUnicodeCounter++;
  }
 else {
    int udhLength=0;
    if (langIndex != 0 || langShiftIndex != 0) {
      udhLength=UDH_SEPTET_COST_LENGTH;
      if (langIndex == 0 || langShiftIndex == 0) {
        udhLength+=UDH_SEPTET_COST_ONE_SHIFT_TABLE;
      }
 else {
        udhLength+=UDH_SEPTET_COST_TWO_SHIFT_TABLES;
      }
    }
    int msgCount;
    if (minNumSeptets > (MAX_USER_DATA_SEPTETS - udhLength)) {
      if (udhLength == 0) {
        udhLength=UDH_SEPTET_COST_LENGTH;
      }
      udhLength+=UDH_SEPTET_COST_CONCATENATED_MESSAGE;
      int septetsPerPart=MAX_USER_DATA_SEPTETS - udhLength;
      msgCount=(minNumSeptets + septetsPerPart - 1) / septetsPerPart;
    }
 else {
      msgCount=1;
    }
    values[0]=msgCount;
    values[1]=minNumSeptets;
    values[2]=(values[0] * (MAX_USER_DATA_SEPTETS - udhLength)) - minNumSeptets;
    values[3]=SmsMessage.ENCODING_7BIT;
    values[4]=(langIndex == 2 ? 3 : langIndex);
    values[5]=langShiftIndex;
    assertEquals("minNumSeptetsWithHeader",minNumSeptetsWithHeader,udhLength * msgCount + minNumSeptets);
    mStatsCounters[langIndex * 4 + langShiftIndex]++;
  }
}
