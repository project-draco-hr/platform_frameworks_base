{
  final ArrayList<SyncStorageEngine.SyncHistoryItem> items=mSyncStorageEngine.getSyncHistory();
  if (items != null && items.size() > 0) {
    final Map<String,AuthoritySyncStats> authorityMap=Maps.newHashMap();
    long totalElapsedTime=0;
    long totalTimes=0;
    final int N=items.size();
    int maxAuthority=0;
    int maxAccount=0;
    for (    SyncStorageEngine.SyncHistoryItem item : items) {
      SyncStorageEngine.AuthorityInfo authority=mSyncStorageEngine.getAuthority(item.authorityId);
      final String authorityName;
      final String accountKey;
      if (authority != null) {
        authorityName=authority.authority;
        accountKey=authority.account.name + "/" + authority.account.type+ " u"+ authority.userId;
      }
 else {
        authorityName="Unknown";
        accountKey="Unknown";
      }
      int length=authorityName.length();
      if (length > maxAuthority) {
        maxAuthority=length;
      }
      length=accountKey.length();
      if (length > maxAccount) {
        maxAccount=length;
      }
      final long elapsedTime=item.elapsedTime;
      totalElapsedTime+=elapsedTime;
      totalTimes++;
      AuthoritySyncStats authoritySyncStats=authorityMap.get(authorityName);
      if (authoritySyncStats == null) {
        authoritySyncStats=new AuthoritySyncStats(authorityName);
        authorityMap.put(authorityName,authoritySyncStats);
      }
      authoritySyncStats.elapsedTime+=elapsedTime;
      authoritySyncStats.times++;
      final Map<String,AccountSyncStats> accountMap=authoritySyncStats.accountMap;
      AccountSyncStats accountSyncStats=accountMap.get(accountKey);
      if (accountSyncStats == null) {
        accountSyncStats=new AccountSyncStats(accountKey);
        accountMap.put(accountKey,accountSyncStats);
      }
      accountSyncStats.elapsedTime+=elapsedTime;
      accountSyncStats.times++;
    }
    if (totalElapsedTime > 0) {
      pw.println();
      pw.printf("Detailed Statistics (Recent history):  " + "%d (# of times) %ds (sync time)\n",totalTimes,totalElapsedTime / 1000);
      final List<AuthoritySyncStats> sortedAuthorities=new ArrayList<AuthoritySyncStats>(authorityMap.values());
      Collections.sort(sortedAuthorities,new Comparator<AuthoritySyncStats>(){
        @Override public int compare(        AuthoritySyncStats lhs,        AuthoritySyncStats rhs){
          int compare=Integer.compare(rhs.times,lhs.times);
          if (compare == 0) {
            compare=Long.compare(rhs.elapsedTime,lhs.elapsedTime);
          }
          return compare;
        }
      }
);
      final int maxLength=Math.max(maxAuthority,maxAccount + 3);
      final int padLength=2 + 2 + maxLength+ 2+ 10+ 11;
      final char chars[]=new char[padLength];
      Arrays.fill(chars,'-');
      final String separator=new String(chars);
      final String authorityFormat=String.format("  %%-%ds: %%-9s  %%-11s\n",maxLength + 2);
      final String accountFormat=String.format("    %%-%ds:   %%-9s  %%-11s\n",maxLength);
      pw.println(separator);
      for (      AuthoritySyncStats authoritySyncStats : sortedAuthorities) {
        String name=authoritySyncStats.name;
        long elapsedTime;
        int times;
        String timeStr;
        String timesStr;
        elapsedTime=authoritySyncStats.elapsedTime;
        times=authoritySyncStats.times;
        timeStr=String.format("%ds/%d%%",elapsedTime / 1000,elapsedTime * 100 / totalElapsedTime);
        timesStr=String.format("%d/%d%%",times,times * 100 / totalTimes);
        pw.printf(authorityFormat,name,timesStr,timeStr);
        final List<AccountSyncStats> sortedAccounts=new ArrayList<AccountSyncStats>(authoritySyncStats.accountMap.values());
        Collections.sort(sortedAccounts,new Comparator<AccountSyncStats>(){
          @Override public int compare(          AccountSyncStats lhs,          AccountSyncStats rhs){
            int compare=Integer.compare(rhs.times,lhs.times);
            if (compare == 0) {
              compare=Long.compare(rhs.elapsedTime,lhs.elapsedTime);
            }
            return compare;
          }
        }
);
        for (        AccountSyncStats stats : sortedAccounts) {
          elapsedTime=stats.elapsedTime;
          times=stats.times;
          timeStr=String.format("%ds/%d%%",elapsedTime / 1000,elapsedTime * 100 / totalElapsedTime);
          timesStr=String.format("%d/%d%%",times,times * 100 / totalTimes);
          pw.printf(accountFormat,stats.name,timesStr,timeStr);
        }
        pw.println(separator);
      }
    }
    pw.println();
    pw.println("Recent Sync History");
    final String format="  %-" + maxAccount + "s  %s\n";
    final Map<String,Long> lastTimeMap=Maps.newHashMap();
    for (int i=0; i < N; i++) {
      SyncStorageEngine.SyncHistoryItem item=items.get(i);
      SyncStorageEngine.AuthorityInfo authority=mSyncStorageEngine.getAuthority(item.authorityId);
      final String authorityName;
      final String accountKey;
      if (authority != null) {
        authorityName=authority.authority;
        accountKey=authority.account.name + "/" + authority.account.type+ " u"+ authority.userId;
      }
 else {
        authorityName="Unknown";
        accountKey="Unknown";
      }
      final long elapsedTime=item.elapsedTime;
      final Time time=new Time();
      final long eventTime=item.eventTime;
      time.set(eventTime);
      final String key=authorityName + "/" + accountKey;
      final Long lastEventTime=lastTimeMap.get(key);
      final String diffString;
      if (lastEventTime == null) {
        diffString="";
      }
 else {
        final long diff=(lastEventTime - eventTime) / 1000;
        if (diff < 60) {
          diffString=String.valueOf(diff);
        }
 else         if (diff < 3600) {
          diffString=String.format("%02d:%02d",diff / 60,diff % 60);
        }
 else {
          final long sec=diff % 3600;
          diffString=String.format("%02d:%02d:%02d",diff / 3600,sec / 60,sec % 60);
        }
      }
      lastTimeMap.put(key,eventTime);
      pw.printf("  #%-3d: %s %8s  %5.1fs  %8s",i + 1,formatTime(eventTime),SyncStorageEngine.SOURCES[item.source],((float)elapsedTime) / 1000,diffString);
      pw.printf(format,accountKey,authorityName);
      if (item.event != SyncStorageEngine.EVENT_STOP || item.upstreamActivity != 0 || item.downstreamActivity != 0) {
        pw.printf("    event=%d upstreamActivity=%d downstreamActivity=%d\n",item.event,item.upstreamActivity,item.downstreamActivity);
      }
      if (item.mesg != null && !SyncStorageEngine.MESG_SUCCESS.equals(item.mesg)) {
        pw.printf("    mesg=%s\n",item.mesg);
      }
    }
  }
}
