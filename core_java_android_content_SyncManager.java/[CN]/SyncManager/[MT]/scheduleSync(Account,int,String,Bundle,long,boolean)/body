{
  boolean isLoggable=Log.isLoggable(TAG,Log.VERBOSE);
  final boolean backgroundDataUsageAllowed=!mBootCompleted || getConnectivityManager().getBackgroundDataSetting();
  if (extras == null)   extras=new Bundle();
  Boolean expedited=extras.getBoolean(ContentResolver.SYNC_EXTRAS_EXPEDITED,false);
  if (expedited) {
    delay=-1;
  }
  AccountAndUser[] accounts;
  if (requestedAccount != null && userId != UserHandle.USER_ALL) {
    accounts=new AccountAndUser[]{new AccountAndUser(requestedAccount,userId)};
  }
 else {
    accounts=mAccounts;
    if (accounts.length == 0) {
      if (isLoggable) {
        Log.v(TAG,"scheduleSync: no accounts configured, dropping");
      }
      return;
    }
  }
  final boolean uploadOnly=extras.getBoolean(ContentResolver.SYNC_EXTRAS_UPLOAD,false);
  final boolean manualSync=extras.getBoolean(ContentResolver.SYNC_EXTRAS_MANUAL,false);
  if (manualSync) {
    extras.putBoolean(ContentResolver.SYNC_EXTRAS_IGNORE_BACKOFF,true);
    extras.putBoolean(ContentResolver.SYNC_EXTRAS_IGNORE_SETTINGS,true);
  }
  final boolean ignoreSettings=extras.getBoolean(ContentResolver.SYNC_EXTRAS_IGNORE_SETTINGS,false);
  int source;
  if (uploadOnly) {
    source=SyncStorageEngine.SOURCE_LOCAL;
  }
 else   if (manualSync) {
    source=SyncStorageEngine.SOURCE_USER;
  }
 else   if (requestedAuthority == null) {
    source=SyncStorageEngine.SOURCE_POLL;
  }
 else {
    source=SyncStorageEngine.SOURCE_SERVER;
  }
  final HashSet<String> syncableAuthorities=new HashSet<String>();
  for (  RegisteredServicesCache.ServiceInfo<SyncAdapterType> syncAdapter : mSyncAdapters.getAllServices()) {
    syncableAuthorities.add(syncAdapter.type.authority);
  }
  if (requestedAuthority != null) {
    final boolean hasSyncAdapter=syncableAuthorities.contains(requestedAuthority);
    syncableAuthorities.clear();
    if (hasSyncAdapter)     syncableAuthorities.add(requestedAuthority);
  }
  for (  String authority : syncableAuthorities) {
    for (    AccountAndUser account : accounts) {
      int isSyncable=mSyncStorageEngine.getIsSyncable(account.account,account.userId,authority);
      if (isSyncable == 0) {
        continue;
      }
      final RegisteredServicesCache.ServiceInfo<SyncAdapterType> syncAdapterInfo=mSyncAdapters.getServiceInfo(SyncAdapterType.newKey(authority,account.account.type));
      if (syncAdapterInfo == null) {
        continue;
      }
      final boolean allowParallelSyncs=syncAdapterInfo.type.allowParallelSyncs();
      final boolean isAlwaysSyncable=syncAdapterInfo.type.isAlwaysSyncable();
      if (isSyncable < 0 && isAlwaysSyncable) {
        mSyncStorageEngine.setIsSyncable(account.account,account.userId,authority,1);
        isSyncable=1;
      }
      if (onlyThoseWithUnkownSyncableState && isSyncable >= 0) {
        continue;
      }
      if (!syncAdapterInfo.type.supportsUploading() && uploadOnly) {
        continue;
      }
      boolean syncAllowed=(isSyncable < 0) || ignoreSettings || (backgroundDataUsageAllowed && mSyncStorageEngine.getMasterSyncAutomatically(account.userId) && mSyncStorageEngine.getSyncAutomatically(account.account,account.userId,authority));
      if (!syncAllowed) {
        if (isLoggable) {
          Log.d(TAG,"scheduleSync: sync of " + account + ", "+ authority+ " is not allowed, dropping request");
        }
        continue;
      }
      Pair<Long,Long> backoff=mSyncStorageEngine.getBackoff(account.account,account.userId,authority);
      long delayUntil=mSyncStorageEngine.getDelayUntilTime(account.account,account.userId,authority);
      final long backoffTime=backoff != null ? backoff.first : 0;
      if (isSyncable < 0) {
        Bundle newExtras=new Bundle();
        newExtras.putBoolean(ContentResolver.SYNC_EXTRAS_INITIALIZE,true);
        if (isLoggable) {
          Log.v(TAG,"scheduleSync:" + " delay " + delay + ", source "+ source+ ", account "+ account+ ", authority "+ authority+ ", extras "+ newExtras);
        }
        scheduleSyncOperation(new SyncOperation(account.account,account.userId,source,authority,newExtras,0,backoffTime,delayUntil,allowParallelSyncs));
      }
      if (!onlyThoseWithUnkownSyncableState) {
        if (isLoggable) {
          Log.v(TAG,"scheduleSync:" + " delay " + delay + ", source "+ source+ ", account "+ account+ ", authority "+ authority+ ", extras "+ extras);
        }
        scheduleSyncOperation(new SyncOperation(account.account,account.userId,source,authority,extras,delay,backoffTime,delayUntil,allowParallelSyncs));
      }
    }
  }
}
