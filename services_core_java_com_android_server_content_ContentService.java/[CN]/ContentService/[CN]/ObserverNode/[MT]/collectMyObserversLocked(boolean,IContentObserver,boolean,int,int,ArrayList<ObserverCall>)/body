{
  int N=mObservers.size();
  IBinder observerBinder=observer == null ? null : observer.asBinder();
  for (int i=0; i < N; i++) {
    ObserverEntry entry=mObservers.get(i);
    boolean selfChange=(entry.observer.asBinder() == observerBinder);
    if (selfChange && !observerWantsSelfNotifications) {
      continue;
    }
    if (targetUserHandle == UserHandle.USER_ALL || entry.userHandle == UserHandle.USER_ALL || targetUserHandle == entry.userHandle) {
      if (leaf) {
        if ((flags & ContentResolver.NOTIFY_SKIP_NOTIFY_FOR_DESCENDANTS) != 0 && entry.notifyForDescendants) {
          if (DEBUG)           Slog.d(TAG,"Skipping " + entry.observer + ": skip notify for descendants");
          continue;
        }
      }
 else {
        if (!entry.notifyForDescendants) {
          if (DEBUG)           Slog.d(TAG,"Skipping " + entry.observer + ": not monitor descendants");
          continue;
        }
      }
      if (DEBUG)       Slog.d(TAG,"Reporting to " + entry.observer + ": leaf="+ leaf+ " flags="+ Integer.toHexString(flags)+ " desc="+ entry.notifyForDescendants);
      calls.add(new ObserverCall(this,entry.observer,selfChange,UserHandle.getUserId(entry.uid)));
    }
  }
}
