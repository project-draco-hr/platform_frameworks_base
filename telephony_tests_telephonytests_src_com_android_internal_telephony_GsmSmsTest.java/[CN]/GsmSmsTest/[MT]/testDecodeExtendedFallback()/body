{
  for (int language=0; language < 3; language++) {
    int[] tableIndex=sExtendedTableIndexes[language];
    int numChars=128 - tableIndex.length;
    int numSeptets=numChars * 2;
    byte[] septets=new byte[(7 * numSeptets + 7) / 8];
    int tableOffset=0;
    int bitOffset=0;
    StringBuilder defaultTable=new StringBuilder(128);
    StringBuilder turkishTable=new StringBuilder(128);
    StringBuilder portugueseTable=new StringBuilder(128);
    for (char c=0; c < 128; c++) {
      if (tableOffset < tableIndex.length && tableIndex[tableOffset] == c) {
        tableOffset++;
        continue;
      }
      int byteOffset=bitOffset / 8;
      int shift=bitOffset % 8;
      septets[byteOffset]|=GSM_ESCAPE_CHARACTER << shift;
      if (shift > 1) {
        septets[byteOffset + 1]=(byte)(GSM_ESCAPE_CHARACTER >> (8 - shift));
      }
      bitOffset+=7;
      byteOffset=bitOffset / 8;
      shift=bitOffset % 8;
      septets[byteOffset]|=c << shift;
      if (shift > 1) {
        septets[byteOffset + 1]=(byte)(c >> (8 - shift));
      }
      bitOffset+=7;
      if (c == GsmAlphabet.GSM_EXTENDED_ESCAPE) {
        defaultTable.append(' ');
        turkishTable.append(' ');
        portugueseTable.append(' ');
      }
 else {
        defaultTable.append(sBasicTables[0].charAt(c));
        turkishTable.append(sBasicTables[1].charAt(c));
        portugueseTable.append(sBasicTables[3].charAt(c));
      }
    }
    String decoded=GsmAlphabet.gsm7BitPackedToString(septets,0,numSeptets,0,0,language);
    assertEquals(defaultTable.toString(),decoded);
    decoded=GsmAlphabet.gsm7BitPackedToString(septets,0,numSeptets,0,1,language);
    assertEquals(turkishTable.toString(),decoded);
    decoded=GsmAlphabet.gsm7BitPackedToString(septets,0,numSeptets,0,3,language);
    assertEquals(portugueseTable.toString(),decoded);
  }
}
