{
  for (int language=0; language < 3; language++) {
    int[] tableIndex=sExtendedTableIndexes[language];
    int numSeptets=tableIndex.length * 2;
    byte[] septets=new byte[(7 * numSeptets + 7) / 8];
    int bitOffset=0;
    for (    int v : tableIndex) {
      int byteOffset=bitOffset / 8;
      int shift=bitOffset % 8;
      septets[byteOffset]|=GSM_ESCAPE_CHARACTER << shift;
      if (shift > 1) {
        septets[byteOffset + 1]=(byte)(GSM_ESCAPE_CHARACTER >> (8 - shift));
      }
      bitOffset+=7;
      byteOffset=bitOffset / 8;
      shift=bitOffset % 8;
      septets[byteOffset]|=v << shift;
      if (shift > 1) {
        septets[byteOffset + 1]=(byte)(v >> (8 - shift));
      }
      bitOffset+=7;
    }
    String decoded=GsmAlphabet.gsm7BitPackedToString(septets,0,numSeptets,0,0,language);
    byte[] reEncoded=GsmAlphabet.stringToGsm7BitPacked(decoded,0,language);
    assertEquals(sExtendedTables[language],decoded);
    assertEquals(septets.length + 1,reEncoded.length);
    for (int i=0; i < septets.length; i++) {
      assertEquals(septets[i],reEncoded[i + 1]);
    }
  }
}
