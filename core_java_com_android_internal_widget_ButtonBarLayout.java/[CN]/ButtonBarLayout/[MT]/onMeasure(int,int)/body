{
  final int widthSize=MeasureSpec.getSize(widthMeasureSpec);
  if (mAllowStacking) {
    if (widthSize > mLastWidthSize && isStacked()) {
      setStacked(false);
    }
    mLastWidthSize=widthSize;
  }
  boolean needsRemeasure=false;
  final int initialWidthMeasureSpec;
  if (!isStacked() && MeasureSpec.getMode(widthMeasureSpec) == MeasureSpec.EXACTLY) {
    initialWidthMeasureSpec=MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.AT_MOST);
    needsRemeasure=true;
  }
 else {
    initialWidthMeasureSpec=widthMeasureSpec;
  }
  super.onMeasure(initialWidthMeasureSpec,heightMeasureSpec);
  if (mAllowStacking && !isStacked()) {
    final int measuredWidth=getMeasuredWidthAndState();
    final int measuredWidthState=measuredWidth & MEASURED_STATE_MASK;
    if (measuredWidthState == MEASURED_STATE_TOO_SMALL) {
      setStacked(true);
      needsRemeasure=true;
    }
  }
  if (needsRemeasure) {
    super.onMeasure(widthMeasureSpec,heightMeasureSpec);
  }
}
