{
  mEglHelper=new EglHelper();
  mHaveEglContext=false;
  mHaveEglSurface=false;
  try {
    GL10 gl=null;
    boolean createEglContext=false;
    boolean createEglSurface=false;
    boolean lostEglContext=false;
    boolean sizeChanged=false;
    boolean wantRenderNotification=false;
    boolean doRenderNotification=false;
    int w=0;
    int h=0;
    Runnable event=null;
    while (true) {
synchronized (sGLThreadManager) {
        while (true) {
          if (mShouldExit) {
            return;
          }
          if (!mEventQueue.isEmpty()) {
            event=mEventQueue.remove(0);
            break;
          }
          if (lostEglContext) {
            stopEglSurfaceLocked();
            stopEglContextLocked();
            lostEglContext=false;
          }
          if (mHaveEglSurface && mPaused) {
            if (LOG_SURFACE) {
              Log.i("GLThread","releasing EGL surface because paused tid=" + getId());
            }
            stopEglSurfaceLocked();
            if (sGLThreadManager.shouldReleaseEGLContextWhenPausing()) {
              stopEglContextLocked();
              if (LOG_SURFACE) {
                Log.i("GLThread","releasing EGL context because paused tid=" + getId());
              }
            }
          }
          if ((!mHasSurface) && (!mWaitingForSurface)) {
            if (LOG_SURFACE) {
              Log.i("GLThread","noticed surfaceView surface lost tid=" + getId());
            }
            if (mHaveEglSurface) {
              stopEglSurfaceLocked();
            }
            mWaitingForSurface=true;
            sGLThreadManager.notifyAll();
          }
          if (mHasSurface && mWaitingForSurface) {
            if (LOG_SURFACE) {
              Log.i("GLThread","noticed surfaceView surface acquired tid=" + getId());
            }
            mWaitingForSurface=false;
            sGLThreadManager.notifyAll();
          }
          if (doRenderNotification) {
            wantRenderNotification=false;
            doRenderNotification=false;
            mRenderComplete=true;
            sGLThreadManager.notifyAll();
          }
          if ((!mPaused) && mHasSurface && (mWidth > 0)&& (mHeight > 0)&& (mRequestRender || (mRenderMode == RENDERMODE_CONTINUOUSLY))) {
            if ((!mHaveEglContext) && sGLThreadManager.tryAcquireEglContextLocked(this)) {
              mHaveEglContext=true;
              createEglContext=true;
              mEglHelper.start();
              sGLThreadManager.notifyAll();
            }
            if (mHaveEglContext && !mHaveEglSurface) {
              mHaveEglSurface=true;
              createEglSurface=true;
              sizeChanged=true;
            }
            if (mHaveEglSurface) {
              if (mSizeChanged) {
                sizeChanged=true;
                w=mWidth;
                h=mHeight;
                wantRenderNotification=true;
                if (DRAW_TWICE_AFTER_SIZE_CHANGED) {
                }
 else {
                  mRequestRender=false;
                }
                mSizeChanged=false;
              }
 else {
                mRequestRender=false;
              }
              sGLThreadManager.notifyAll();
              break;
            }
          }
          if (LOG_THREADS) {
            Log.i("GLThread","waiting tid=" + getId());
          }
          sGLThreadManager.wait();
        }
      }
      if (event != null) {
        event.run();
        event=null;
        continue;
      }
      if (createEglSurface) {
        if (LOG_SURFACE) {
          Log.w("GLThread","egl createSurface");
        }
        gl=(GL10)mEglHelper.createSurface(getHolder());
        sGLThreadManager.checkGLDriver(gl);
        createEglSurface=false;
      }
      if (createEglContext) {
        if (LOG_RENDERER) {
          Log.w("GLThread","onSurfaceCreated");
        }
        mRenderer.onSurfaceCreated(gl,mEglHelper.mEglConfig);
        createEglContext=false;
      }
      if (sizeChanged) {
        if (LOG_RENDERER) {
          Log.w("GLThread","onSurfaceChanged(" + w + ", "+ h+ ")");
        }
        mRenderer.onSurfaceChanged(gl,w,h);
        sizeChanged=false;
      }
      if (LOG_RENDERER_DRAW_FRAME) {
        Log.w("GLThread","onDrawFrame");
      }
      mRenderer.onDrawFrame(gl);
      if (!mEglHelper.swap()) {
        if (LOG_SURFACE) {
          Log.i("GLThread","egl context lost tid=" + getId());
        }
        lostEglContext=true;
      }
      if (wantRenderNotification) {
        doRenderNotification=true;
      }
    }
  }
  finally {
synchronized (sGLThreadManager) {
      stopEglSurfaceLocked();
      stopEglContextLocked();
    }
  }
}
