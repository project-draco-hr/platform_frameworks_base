{
  SpannableStringBuilder s=new SpannableStringBuilder(inFormat);
  int count;
  LocaleData localeData=LocaleData.get(Locale.getDefault());
  int len=inFormat.length();
  for (int i=0; i < len; i+=count) {
    count=1;
    int c=s.charAt(i);
    if (c == QUOTE) {
      count=appendQuotedText(s,i,len);
      len=s.length();
      continue;
    }
    while ((i + count < len) && (s.charAt(i + count) == c)) {
      count++;
    }
    String replacement;
switch (c) {
case 'A':
case 'a':
      replacement=localeData.amPm[inDate.get(Calendar.AM_PM) - Calendar.AM];
    break;
case 'd':
  replacement=zeroPad(inDate.get(Calendar.DATE),count);
break;
case 'c':
case 'E':
replacement=getDayOfWeekString(localeData,inDate.get(Calendar.DAY_OF_WEEK),count,c);
break;
case 'K':
case 'h':
{
int hour=inDate.get(Calendar.HOUR);
if (c == 'h' && hour == 0) {
hour=12;
}
replacement=zeroPad(hour,count);
}
break;
case 'H':
case 'k':
{
int hour=inDate.get(Calendar.HOUR_OF_DAY);
if (c == 'k' && hour == 0) {
hour=24;
}
replacement=zeroPad(hour,count);
}
break;
case 'L':
case 'M':
replacement=getMonthString(localeData,inDate.get(Calendar.MONTH),count,c);
break;
case 'm':
replacement=zeroPad(inDate.get(Calendar.MINUTE),count);
break;
case 's':
replacement=zeroPad(inDate.get(Calendar.SECOND),count);
break;
case 'y':
replacement=getYearString(inDate.get(Calendar.YEAR),count);
break;
case 'z':
replacement=getTimeZoneString(inDate,count);
break;
default :
replacement=null;
break;
}
if (replacement != null) {
s.replace(i,i + count,replacement);
count=replacement.length();
len=s.length();
}
}
if (inFormat instanceof Spanned) {
return new SpannedString(s);
}
 else {
return s.toString();
}
}
