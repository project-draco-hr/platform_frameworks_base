{
  if (true)   return calcError(ideal,given);
  if (LOG_TIMING) {
    startMillis=System.currentTimeMillis();
  }
  mIdealPixelsAllocation=Allocation.createFromBitmap(mRS,ideal,Allocation.MipmapControl.MIPMAP_NONE,Allocation.USAGE_SCRIPT);
  mGivenPixelsAllocation=Allocation.createFromBitmap(mRS,given,Allocation.MipmapControl.MIPMAP_NONE,Allocation.USAGE_SCRIPT);
  mScript.bind_ideal(mIdealPixelsAllocation);
  mScript.bind_given(mGivenPixelsAllocation);
  mScript.forEach_countInterestingRegions(mInputRowsAllocation,mOutputRegionsAllocation);
  mOutputRegionsAllocation.copyTo(mOutputRowRegions);
  int regionCount=0;
  for (  int region : mOutputRowRegions) {
    regionCount+=region;
  }
  int interestingPixels=Math.max(1,regionCount) * REGION_SIZE * REGION_SIZE;
  if (LOG_TIMING) {
    long startMillis2=System.currentTimeMillis();
  }
  mScript.forEach_accumulateError(mInputRowsAllocation,mOutputRegionsAllocation);
  mOutputRegionsAllocation.copyTo(mOutputRowRegions);
  float totalError=0;
  for (  int row : mOutputRowRegions) {
    totalError+=row;
  }
  totalError/=1024.0f;
  if (LOG_TIMING) {
    long finalMillis=System.currentTimeMillis();
    Log.d(LOG_TAG,"rs: first part took " + (middleMillis - startMillis) + "ms");
    Log.d(LOG_TAG,"rs: last part took " + (finalMillis - middleMillis) + "ms");
  }
  if (LOG_CALC) {
    Log.d(LOG_TAG,"rs: error " + totalError + ", pixels "+ interestingPixels);
  }
  return totalError / interestingPixels;
}
