{
  if (LOG_TIMING) {
    startMillis=System.currentTimeMillis();
  }
  int interestingRegions=0;
  for (int x=0; x < ideal.getWidth(); x+=REGION_SIZE) {
    for (int y=0; y < ideal.getWidth(); y+=REGION_SIZE) {
      if (inspectRegion(ideal,x,y)) {
        interestingRegions++;
      }
    }
  }
  int interestingPixels=Math.max(1,interestingRegions) * REGION_SIZE * REGION_SIZE;
  if (LOG_TIMING) {
    long startMillis2=System.currentTimeMillis();
  }
  float totalError=0;
  for (int x=0; x < ideal.getWidth(); x++) {
    for (int y=0; y < ideal.getHeight(); y++) {
      int idealColor=ideal.getPixel(x,y);
      int givenColor=given.getPixel(x,y);
      if (idealColor == givenColor)       continue;
      totalError+=Math.abs(Color.red(idealColor) - Color.red(givenColor));
      totalError+=Math.abs(Color.green(idealColor) - Color.green(givenColor));
      totalError+=Math.abs(Color.blue(idealColor) - Color.blue(givenColor));
      totalError+=Math.abs(Color.alpha(idealColor) - Color.alpha(givenColor));
    }
  }
  totalError/=1024.0f;
  if (LOG_TIMING) {
    long finalMillis=System.currentTimeMillis();
    Log.d(LOG_TAG,"dvk: first part took " + (middleMillis - startMillis) + "ms");
    Log.d(LOG_TAG,"dvk: last part took " + (finalMillis - middleMillis) + "ms");
  }
  if (LOG_CALC) {
    Log.d(LOG_TAG,"dvk: error " + totalError + ", pixels "+ interestingPixels);
  }
  return totalError / interestingPixels;
}
