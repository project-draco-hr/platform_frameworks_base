{
  if (FragmentManager.DEBUG)   Log.v(TAG,"Run: " + this);
  Op op=mHead;
  while (op != null) {
switch (op.cmd) {
case OP_ADD:
{
        Fragment f=op.fragment;
        if (mAddToBackStack) {
          f.mBackStackNesting++;
        }
        f.mNextAnim=op.enterAnim;
        mManager.addFragment(f,false);
      }
    break;
case OP_REPLACE:
{
    Fragment f=op.fragment;
    if (mManager.mAdded != null) {
      for (int i=0; i < mManager.mAdded.size(); i++) {
        Fragment old=mManager.mAdded.get(i);
        if (FragmentManager.DEBUG)         Log.v(TAG,"OP_REPLACE: adding=" + f + " old="+ old);
        if (old.mContainerId == f.mContainerId) {
          if (op.removed == null) {
            op.removed=new ArrayList<Fragment>();
          }
          op.removed.add(old);
          if (mAddToBackStack) {
            old.mBackStackNesting++;
          }
          old.mNextAnim=op.exitAnim;
          mManager.removeFragment(old,mTransition,mTransitionStyle);
        }
      }
    }
    if (mAddToBackStack) {
      f.mBackStackNesting++;
    }
    f.mNextAnim=op.enterAnim;
    mManager.addFragment(f,false);
  }
break;
case OP_REMOVE:
{
Fragment f=op.fragment;
if (mAddToBackStack) {
  f.mBackStackNesting++;
}
f.mNextAnim=op.exitAnim;
mManager.removeFragment(f,mTransition,mTransitionStyle);
}
break;
case OP_HIDE:
{
Fragment f=op.fragment;
if (mAddToBackStack) {
f.mBackStackNesting++;
}
f.mNextAnim=op.exitAnim;
mManager.hideFragment(f,mTransition,mTransitionStyle);
}
break;
case OP_SHOW:
{
Fragment f=op.fragment;
if (mAddToBackStack) {
f.mBackStackNesting++;
}
f.mNextAnim=op.enterAnim;
mManager.showFragment(f,mTransition,mTransitionStyle);
}
break;
default :
{
throw new IllegalArgumentException("Unknown cmd: " + op.cmd);
}
}
op=op.next;
}
mManager.moveToState(mManager.mCurState,mTransition,mTransitionStyle,true);
if (mManager.mNeedMenuInvalidate && mManager.mActivity != null) {
mManager.mActivity.invalidateOptionsMenu();
mManager.mNeedMenuInvalidate=false;
}
if (mAddToBackStack) {
mManager.addBackStackState(this);
}
}
