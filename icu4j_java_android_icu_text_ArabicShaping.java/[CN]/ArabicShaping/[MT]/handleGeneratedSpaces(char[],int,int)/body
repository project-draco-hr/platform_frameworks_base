{
  int lenOptionsLamAlef=options & LAMALEF_MASK;
  int lenOptionsTashkeel=options & TASHKEEL_MASK;
  boolean lamAlefOn=false;
  boolean tashkeelOn=false;
  if (!isLogical & !spacesRelativeToTextBeginEnd) {
switch (lenOptionsLamAlef) {
case LAMALEF_BEGIN:
      lenOptionsLamAlef=LAMALEF_END;
    break;
case LAMALEF_END:
  lenOptionsLamAlef=LAMALEF_BEGIN;
break;
default :
break;
}
switch (lenOptionsTashkeel) {
case TASHKEEL_BEGIN:
lenOptionsTashkeel=TASHKEEL_END;
break;
case TASHKEEL_END:
lenOptionsTashkeel=TASHKEEL_BEGIN;
break;
default :
break;
}
}
if (lenOptionsLamAlef == LAMALEF_NEAR) {
for (int i=start, e=i + length; i < e; ++i) {
if (dest[i] == LAMALEF_SPACE_SUB) {
dest[i]=SPACE_CHAR_FOR_LAMALEF;
}
}
}
 else {
final int e=start + length;
int wL=countSpaceSub(dest,length,LAMALEF_SPACE_SUB);
int wT=countSpaceSub(dest,length,TASHKEEL_SPACE_SUB);
if (lenOptionsLamAlef == LAMALEF_END) {
lamAlefOn=true;
}
if (lenOptionsTashkeel == TASHKEEL_END) {
tashkeelOn=true;
}
if (lamAlefOn && (lenOptionsLamAlef == LAMALEF_END)) {
shiftArray(dest,start,e,LAMALEF_SPACE_SUB);
while (wL > start) {
dest[--wL]=SPACE_CHAR;
}
}
if (tashkeelOn && (lenOptionsTashkeel == TASHKEEL_END)) {
shiftArray(dest,start,e,TASHKEEL_SPACE_SUB);
while (wT > start) {
dest[--wT]=SPACE_CHAR;
}
}
lamAlefOn=false;
tashkeelOn=false;
if (lenOptionsLamAlef == LAMALEF_RESIZE) {
lamAlefOn=true;
}
if (lenOptionsTashkeel == TASHKEEL_RESIZE) {
tashkeelOn=true;
}
if (lamAlefOn && (lenOptionsLamAlef == LAMALEF_RESIZE)) {
shiftArray(dest,start,e,LAMALEF_SPACE_SUB);
wL=flipArray(dest,start,e,wL);
length=wL - start;
}
if (tashkeelOn && (lenOptionsTashkeel == TASHKEEL_RESIZE)) {
shiftArray(dest,start,e,TASHKEEL_SPACE_SUB);
wT=flipArray(dest,start,e,wT);
length=wT - start;
}
lamAlefOn=false;
tashkeelOn=false;
if ((lenOptionsLamAlef == LAMALEF_BEGIN) || (lenOptionsLamAlef == LAMALEF_AUTO)) {
lamAlefOn=true;
}
if (lenOptionsTashkeel == TASHKEEL_BEGIN) {
tashkeelOn=true;
}
if (lamAlefOn && ((lenOptionsLamAlef == LAMALEF_BEGIN) || (lenOptionsLamAlef == LAMALEF_AUTO))) {
shiftArray(dest,start,e,LAMALEF_SPACE_SUB);
wL=flipArray(dest,start,e,wL);
while (wL < e) {
dest[wL++]=SPACE_CHAR;
}
}
if (tashkeelOn && (lenOptionsTashkeel == TASHKEEL_BEGIN)) {
shiftArray(dest,start,e,TASHKEEL_SPACE_SUB);
wT=flipArray(dest,start,e,wT);
while (wT < e) {
dest[wT++]=SPACE_CHAR;
}
}
}
return length;
}
