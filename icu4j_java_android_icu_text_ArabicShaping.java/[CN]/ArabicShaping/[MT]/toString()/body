{
  StringBuffer buf=new StringBuffer(super.toString());
  buf.append('[');
switch (options & LAMALEF_MASK) {
case LAMALEF_RESIZE:
    buf.append("LamAlef resize");
  break;
case LAMALEF_NEAR:
buf.append("LamAlef spaces at near");
break;
case LAMALEF_BEGIN:
buf.append("LamAlef spaces at begin");
break;
case LAMALEF_END:
buf.append("LamAlef spaces at end");
break;
case LAMALEF_AUTO:
buf.append("lamAlef auto");
break;
}
switch (options & TEXT_DIRECTION_MASK) {
case TEXT_DIRECTION_LOGICAL:
buf.append(", logical");
break;
case TEXT_DIRECTION_VISUAL_LTR:
buf.append(", visual");
break;
}
switch (options & LETTERS_MASK) {
case LETTERS_NOOP:
buf.append(", no letter shaping");
break;
case LETTERS_SHAPE:
buf.append(", shape letters");
break;
case LETTERS_SHAPE_TASHKEEL_ISOLATED:
buf.append(", shape letters tashkeel isolated");
break;
case LETTERS_UNSHAPE:
buf.append(", unshape letters");
break;
}
switch (options & SEEN_MASK) {
case SEEN_TWOCELL_NEAR:
buf.append(", Seen at near");
break;
}
switch (options & YEHHAMZA_MASK) {
case YEHHAMZA_TWOCELL_NEAR:
buf.append(", Yeh Hamza at near");
break;
}
switch (options & TASHKEEL_MASK) {
case TASHKEEL_BEGIN:
buf.append(", Tashkeel at begin");
break;
case TASHKEEL_END:
buf.append(", Tashkeel at end");
break;
case TASHKEEL_REPLACE_BY_TATWEEL:
buf.append(", Tashkeel replace with tatweel");
break;
case TASHKEEL_RESIZE:
buf.append(", Tashkeel resize");
break;
}
switch (options & DIGITS_MASK) {
case DIGITS_NOOP:
buf.append(", no digit shaping");
break;
case DIGITS_EN2AN:
buf.append(", shape digits to AN");
break;
case DIGITS_AN2EN:
buf.append(", shape digits to EN");
break;
case DIGITS_EN2AN_INIT_LR:
buf.append(", shape digits to AN contextually: default EN");
break;
case DIGITS_EN2AN_INIT_AL:
buf.append(", shape digits to AN contextually: default AL");
break;
}
switch (options & DIGIT_TYPE_MASK) {
case DIGIT_TYPE_AN:
buf.append(", standard Arabic-Indic digits");
break;
case DIGIT_TYPE_AN_EXTENDED:
buf.append(", extended Arabic-Indic digits");
break;
}
buf.append("]");
return buf.toString();
}
