{
  final JobParameters params=(JobParameters)msg.obj;
switch (msg.what) {
case MSG_EXECUTE_JOB:
    try {
      boolean workOngoing=JobService.this.onStartJob(params);
      ackStartMessage(params,workOngoing);
    }
 catch (    Exception e) {
      Log.e(TAG,"Error while executing job: " + params.getJobId());
      throw new RuntimeException(e);
    }
  break;
case MSG_STOP_JOB:
try {
  boolean ret=JobService.this.onStopJob(params);
  ackStopMessage(params,ret);
}
 catch (Exception e) {
  Log.e(TAG,"Application unable to handle onStopJob.",e);
  throw new RuntimeException(e);
}
break;
case MSG_JOB_FINISHED:
final boolean needsReschedule=(msg.arg2 == 1);
IJobCallback callback=params.getCallback();
if (callback != null) {
try {
callback.jobFinished(params.getJobId(),needsReschedule);
}
 catch (RemoteException e) {
Log.e(TAG,"Error reporting job finish to system: binder has gone" + "away.");
}
}
 else {
Log.e(TAG,"finishJob() called for a nonexistent job id.");
}
break;
default :
Log.e(TAG,"Unrecognised message received.");
break;
}
}
