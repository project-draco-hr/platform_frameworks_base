{
  mShader="//rs_shader_internal\n";
  mShader+="varying lowp vec4 varColor;\n";
  mShader+="varying vec4 varTex0;\n";
  mShader+="void main() {\n";
  if (mVaryingColorEnable) {
    mShader+="  lowp vec4 col = varColor;\n";
  }
 else {
    mShader+="  lowp vec4 col = UNI_Color;\n";
  }
  if (mNumTextures != 0) {
    if (mPointSpriteEnable) {
      mShader+="  vec2 t0 = gl_PointCoord;\n";
    }
 else {
      mShader+="  vec2 t0 = varTex0.xy;\n";
    }
  }
  for (int i=0; i < mNumTextures; i++) {
switch (mSlots[i].env) {
case REPLACE:
switch (mSlots[i].format) {
case ALPHA:
        mShader+="  col.a = texture2D(UNI_Tex0, t0).a;\n";
      break;
case LUMINANCE_ALPHA:
    mShader+="  col.rgba = texture2D(UNI_Tex0, t0).rgba;\n";
  break;
case RGB:
mShader+="  col.rgb = texture2D(UNI_Tex0, t0).rgb;\n";
break;
case RGBA:
mShader+="  col.rgba = texture2D(UNI_Tex0, t0).rgba;\n";
break;
}
break;
case MODULATE:
switch (mSlots[i].format) {
case ALPHA:
mShader+="  col.a *= texture2D(UNI_Tex0, t0).a;\n";
break;
case LUMINANCE_ALPHA:
mShader+="  col.rgba *= texture2D(UNI_Tex0, t0).rgba;\n";
break;
case RGB:
mShader+="  col.rgb *= texture2D(UNI_Tex0, t0).rgb;\n";
break;
case RGBA:
mShader+="  col.rgba *= texture2D(UNI_Tex0, t0).rgba;\n";
break;
}
break;
case DECAL:
mShader+="  col = texture2D(UNI_Tex0, t0);\n";
break;
}
}
mShader+="  gl_FragColor = col;\n";
mShader+="}\n";
}
