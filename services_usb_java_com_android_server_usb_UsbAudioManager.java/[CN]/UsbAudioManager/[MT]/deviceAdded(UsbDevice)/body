{
  boolean isAudioDevice=false;
  int interfaceCount=usbDevice.getInterfaceCount();
  for (int ntrfaceIndex=0; !isAudioDevice && ntrfaceIndex < interfaceCount; ntrfaceIndex++) {
    UsbInterface ntrface=usbDevice.getInterface(ntrfaceIndex);
    if (ntrface.getInterfaceClass() == UsbConstants.USB_CLASS_AUDIO) {
      isAudioDevice=true;
    }
  }
  if (!isAudioDevice) {
    return;
  }
  AlsaCardsParser cardsParser=new AlsaCardsParser();
  cardsParser.scan();
  AlsaDevicesParser devicesParser=new AlsaDevicesParser();
  devicesParser.scan();
  int card=cardsParser.getNumCardRecords() - 1;
  int device=0;
  boolean hasPlayback=devicesParser.hasPlaybackDevices(card);
  boolean hasCapture=devicesParser.hasCaptureDevices(card);
  boolean hasMidi=devicesParser.hasMIDIDevices(card);
  if (hasPlayback && !waitForAlsaFile(card,device,false)) {
    return;
  }
  if (hasCapture && !waitForAlsaFile(card,device,true)) {
    return;
  }
  if (DEBUG) {
    Slog.d(TAG,"usb: hasPlayback:" + hasPlayback + " hasCapture:"+ hasCapture);
  }
  AudioDevice audioDevice=new AudioDevice(card,device,hasPlayback,hasCapture,hasMidi);
  mAudioDevices.put(usbDevice,audioDevice);
  sendDeviceNotification(audioDevice,true);
}
