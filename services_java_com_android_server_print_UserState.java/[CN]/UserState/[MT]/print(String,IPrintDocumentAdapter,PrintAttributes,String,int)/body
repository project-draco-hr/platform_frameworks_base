{
  final PrintJobInfo printJob=new PrintJobInfo();
  printJob.setId(new PrintJobId());
  printJob.setAppId(appId);
  printJob.setLabel(printJobName);
  printJob.setAttributes(attributes);
  printJob.setState(PrintJobInfo.STATE_CREATED);
  printJob.setCopies(1);
  printJob.setCreationTime(System.currentTimeMillis());
  if (!mPrintJobForAppCache.onPrintJobCreated(adapter.asBinder(),appId,printJob)) {
    return null;
  }
  new AsyncTask<Void,Void,Void>(){
    @Override protected Void doInBackground(    Void... params){
      mSpooler.createPrintJob(printJob);
      return null;
    }
  }
.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,(Void[])null);
  final long identity=Binder.clearCallingIdentity();
  try {
    Intent intent=new Intent(PrintManager.ACTION_PRINT_DIALOG);
    intent.setData(Uri.fromParts("printjob",printJob.getId().flattenToString(),null));
    intent.putExtra(PrintManager.EXTRA_PRINT_DOCUMENT_ADAPTER,adapter.asBinder());
    intent.putExtra(PrintManager.EXTRA_PRINT_JOB,printJob);
    intent.putExtra(DocumentsContract.EXTRA_PACKAGE_NAME,packageName);
    IntentSender intentSender=PendingIntent.getActivity(mContext,0,intent,PendingIntent.FLAG_ONE_SHOT | PendingIntent.FLAG_CANCEL_CURRENT).getIntentSender();
    Bundle result=new Bundle();
    result.putParcelable(PrintManager.EXTRA_PRINT_JOB,printJob);
    result.putParcelable(PrintManager.EXTRA_PRINT_DIALOG_INTENT,intentSender);
    return result;
  }
  finally {
    Binder.restoreCallingIdentity(identity);
  }
}
