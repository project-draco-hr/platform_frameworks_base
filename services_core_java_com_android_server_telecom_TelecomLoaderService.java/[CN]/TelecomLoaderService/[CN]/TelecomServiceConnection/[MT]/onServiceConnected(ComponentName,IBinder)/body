{
  try {
    service.linkToDeath(new IBinder.DeathRecipient(){
      @Override public void binderDied(){
        connectToTelecom();
      }
    }
,0);
    SmsApplication.getDefaultMmsApplication(mContext,false);
    ServiceManager.addService(Context.TELECOM_SERVICE,service);
synchronized (mLock) {
      if (mDefaultSmsAppRequests != null || mDefaultDialerAppRequests != null) {
        final PackageManagerInternal packageManagerInternal=LocalServices.getService(PackageManagerInternal.class);
        if (mDefaultSmsAppRequests != null) {
          ComponentName smsComponent=SmsApplication.getDefaultSmsApplication(mContext,true);
          if (smsComponent != null) {
            final int requestCount=mDefaultSmsAppRequests.size();
            for (int i=requestCount - 1; i >= 0; i--) {
              final int userid=mDefaultSmsAppRequests.get(i);
              mDefaultSmsAppRequests.remove(i);
              packageManagerInternal.grantDefaultPermissionsToDefaultSmsApp(smsComponent.getPackageName(),userid);
            }
          }
        }
        if (mDefaultDialerAppRequests != null) {
          String packageName=DefaultDialerManager.getDefaultDialerApplication(mContext);
          if (packageName != null) {
            final int requestCount=mDefaultDialerAppRequests.size();
            for (int i=requestCount - 1; i >= 0; i--) {
              final int userId=mDefaultDialerAppRequests.get(i);
              mDefaultDialerAppRequests.remove(i);
              packageManagerInternal.grantDefaultPermissionsToDefaultDialerApp(packageName,userId);
            }
          }
        }
      }
    }
  }
 catch (  RemoteException e) {
    Slog.w(TAG,"Failed linking to death.");
  }
}
