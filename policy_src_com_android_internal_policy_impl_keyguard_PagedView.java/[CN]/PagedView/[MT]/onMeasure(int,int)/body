{
  if (!mIsDataReady || getChildCount() == 0) {
    super.onMeasure(widthMeasureSpec,heightMeasureSpec);
    return;
  }
  final int widthMode=MeasureSpec.getMode(widthMeasureSpec);
  final int widthSize=MeasureSpec.getSize(widthMeasureSpec);
  final int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  final int heightSize=MeasureSpec.getSize(heightMeasureSpec);
  if (widthMode == MeasureSpec.UNSPECIFIED || heightMode == MeasureSpec.UNSPECIFIED) {
    super.onMeasure(widthMeasureSpec,heightMeasureSpec);
    return;
  }
  if (widthSize <= 0 || heightSize <= 0) {
    super.onMeasure(widthMeasureSpec,heightMeasureSpec);
    return;
  }
  final int verticalPadding=getPaddingTop() + getPaddingBottom();
  final int horizontalPadding=getPaddingLeft() + getPaddingRight();
  if (DEBUG)   Log.d(TAG,"PagedView.onMeasure(): " + widthSize + ", "+ heightSize);
  final int childCount=getChildCount();
  for (int i=0; i < childCount; i++) {
    final View child=getPageAt(i);
    int childWidthMode=MeasureSpec.EXACTLY;
    int childHeightMode=MeasureSpec.EXACTLY;
    final int childWidthMeasureSpec=MeasureSpec.makeMeasureSpec(widthSize - horizontalPadding,childWidthMode);
    final int childHeightMeasureSpec=MeasureSpec.makeMeasureSpec(heightSize - verticalPadding,childHeightMode);
    child.measure(childWidthMeasureSpec,childHeightMeasureSpec);
  }
  setMeasuredDimension(widthSize,heightSize);
  invalidateCachedOffsets();
  if (childCount > 0) {
    if (DEBUG)     Log.d(TAG,"getRelativeChildOffset(): " + getMeasuredWidth() + ", "+ getChildWidth(0));
    if (mPageSpacing == AUTOMATIC_PAGE_SPACING) {
      int offset=getRelativeChildOffset(0);
      int spacing=Math.max(offset,widthSize - offset - getChildAt(0).getMeasuredWidth());
      setPageSpacing(spacing);
    }
  }
  updateScrollingIndicatorPosition();
  if (childCount > 0) {
    mMaxScrollX=getChildOffset(childCount - 1) - getRelativeChildOffset(childCount - 1);
  }
 else {
    mMaxScrollX=0;
  }
}
