{
  if (!mIsDataReady || getChildCount() == 0) {
    super.onMeasure(widthMeasureSpec,heightMeasureSpec);
    return;
  }
  View parent=(View)getParent();
  int widthMode=MeasureSpec.getMode(widthMeasureSpec);
  int widthSize=MeasureSpec.getSize(widthMeasureSpec);
  int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  int heightSize=MeasureSpec.getSize(heightMeasureSpec);
  int parentWidthSize=(int)(1.5f * parent.getMeasuredWidth());
  int parentHeightSize=parent.getMeasuredHeight();
  int scaledWidthSize=(int)(parentWidthSize / mMinScale);
  int scaledHeightSize=(int)(parentHeightSize / mMinScale);
  mViewport.set(0,0,widthSize,heightSize);
  if (widthMode == MeasureSpec.UNSPECIFIED || heightMode == MeasureSpec.UNSPECIFIED) {
    super.onMeasure(widthMeasureSpec,heightMeasureSpec);
    return;
  }
  if (widthSize <= 0 || heightSize <= 0) {
    super.onMeasure(widthMeasureSpec,heightMeasureSpec);
    return;
  }
  final int verticalPadding=getPaddingTop() + getPaddingBottom();
  final int horizontalPadding=getPaddingLeft() + getPaddingRight();
  if (DEBUG)   Log.d(TAG,"PagedView.onMeasure(): " + widthSize + ", "+ heightSize);
  if (DEBUG)   Log.d(TAG,"PagedView.scaledSize: " + scaledWidthSize + ", "+ scaledHeightSize);
  if (DEBUG)   Log.d(TAG,"PagedView.parentSize: " + parentWidthSize + ", "+ parentHeightSize);
  if (DEBUG)   Log.d(TAG,"PagedView.horizontalPadding: " + horizontalPadding);
  if (DEBUG)   Log.d(TAG,"PagedView.verticalPadding: " + verticalPadding);
  final int childCount=getChildCount();
  for (int i=0; i < childCount; i++) {
    final View child=getPageAt(i);
    final LayoutParams lp=(LayoutParams)child.getLayoutParams();
    int childWidthMode;
    if (lp.width == LayoutParams.WRAP_CONTENT) {
      childWidthMode=MeasureSpec.AT_MOST;
    }
 else {
      childWidthMode=MeasureSpec.EXACTLY;
    }
    int childHeightMode;
    if (lp.height == LayoutParams.WRAP_CONTENT) {
      childHeightMode=MeasureSpec.AT_MOST;
    }
 else {
      childHeightMode=MeasureSpec.EXACTLY;
    }
    final int childWidthMeasureSpec=MeasureSpec.makeMeasureSpec(widthSize - horizontalPadding,childWidthMode);
    final int childHeightMeasureSpec=MeasureSpec.makeMeasureSpec(heightSize - verticalPadding,childHeightMode);
    child.measure(childWidthMeasureSpec,childHeightMeasureSpec);
  }
  setMeasuredDimension(scaledWidthSize,scaledHeightSize);
  invalidateCachedOffsets();
  if (mChildCountOnLastMeasure != getChildCount() && !mDeferringForDelete) {
    setCurrentPage(mCurrentPage);
  }
  mChildCountOnLastMeasure=getChildCount();
  if (childCount > 0) {
    if (DEBUG)     Log.d(TAG,"getRelativeChildOffset(): " + getViewportWidth() + ", "+ getChildWidth(0));
    if (mPageSpacing == AUTOMATIC_PAGE_SPACING) {
      int offset=getRelativeChildOffset(0);
      int spacing=Math.max(offset,widthSize - offset - getChildAt(0).getMeasuredWidth());
      setPageSpacing(spacing);
    }
  }
  updateScrollingIndicatorPosition();
  if (childCount > 0) {
    mMaxScrollX=getChildOffset(childCount - 1) - getRelativeChildOffset(childCount - 1);
  }
 else {
    mMaxScrollX=0;
  }
}
