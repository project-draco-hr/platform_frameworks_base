{
  final ViewConfiguration config=ViewConfiguration.get(getContext());
  final long startTime=AnimationUtils.currentAnimationTimeMillis();
  final TimeInterpolator tInterpolator=new TimeInterpolator(){
    private int mCount=-1;
    private long mStartTime;
    private float mOffset;
{
      mStartTime=startTime;
    }
    @Override public float getInterpolation(    float t){
      if (mCount < 0) {
        mCount++;
      }
 else       if (mCount == 0) {
        mOffset=Math.min(0.5f,(float)(AnimationUtils.currentAnimationTimeMillis() - mStartTime) / FLING_TO_DELETE_FADE_OUT_DURATION);
        mCount++;
      }
      return Math.min(1f,mOffset + t);
    }
  }
;
  final Rect from=new Rect();
  final View dragView=mDragView;
  from.left=(int)dragView.getTranslationX();
  from.top=(int)dragView.getTranslationY();
  AnimatorUpdateListener updateCb=new FlingAlongVectorAnimatorUpdateListener(dragView,vel,from,startTime,FLING_TO_DELETE_FRICTION);
  final Runnable onAnimationEndRunnable=new Runnable(){
    @Override public void run(){
      int dragViewIndex=indexOfChild(dragView);
      snapToPageImmediately(dragViewIndex - 1);
      int lowerIndex=0;
      int upperIndex=dragViewIndex - 1;
      for (int i=lowerIndex; i <= upperIndex; ++i) {
        View v=getChildAt(i);
        int oldX=0;
        if (i == 0) {
          oldX=-(getOffsetX() + getChildOffset(i));
        }
 else {
          oldX=getOffsetX() + getChildOffset(i - 1);
        }
        int newX=getOffsetX() + getChildOffset(i);
        AnimatorSet anim=(AnimatorSet)v.getTag();
        if (anim != null) {
          anim.cancel();
        }
        v.setTranslationX(oldX - newX);
        anim=new AnimatorSet();
        anim.setDuration(FLING_TO_DELETE_SLIDE_IN_SIDE_PAGE_DURATION);
        anim.playTogether(ObjectAnimator.ofFloat(v,"translationX",0f));
        anim.addListener(new AnimatorListenerAdapter(){
          @Override public void onAnimationEnd(          Animator animation){
            mIsFlingingToDelete=false;
          }
        }
);
        anim.start();
        v.setTag(anim);
      }
      removeView(dragView);
    }
  }
;
  ValueAnimator mDropAnim=new ValueAnimator();
  mDropAnim.setInterpolator(tInterpolator);
  mDropAnim.setDuration(FLING_TO_DELETE_FADE_OUT_DURATION);
  mDropAnim.setFloatValues(0f,1f);
  mDropAnim.addUpdateListener(updateCb);
  mDropAnim.addListener(new AnimatorListenerAdapter(){
    public void onAnimationEnd(    Animator animation){
      onAnimationEndRunnable.run();
    }
  }
);
  mDropAnim.start();
  mIsFlingingToDelete=true;
}
