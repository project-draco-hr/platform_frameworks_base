{
  View deleteDropTarget=findViewById(R.id.keyguard_widget_pager_delete_target);
  mAppWidgetContainer=(KeyguardWidgetPager)findViewById(R.id.app_widget_container);
  mAppWidgetContainer.setVisibility(VISIBLE);
  mAppWidgetContainer.setCallbacks(mWidgetCallbacks);
  mAppWidgetContainer.setDeleteDropTarget(deleteDropTarget);
  mAppWidgetContainer.setMinScale(0.5f);
  mSlidingChallengeLayout=(SlidingChallengeLayout)findViewById(R.id.sliding_layout);
  if (mSlidingChallengeLayout != null) {
    mSlidingChallengeLayout.setOnChallengeScrolledListener(mViewStateManager);
  }
  mAppWidgetContainer.setViewStateManager(mViewStateManager);
  mAppWidgetContainer.setLockPatternUtils(mLockPatternUtils);
  mMultiPaneChallengeLayout=(MultiPaneChallengeLayout)findViewById(R.id.multi_pane_challenge);
  ChallengeLayout challenge=mSlidingChallengeLayout != null ? mSlidingChallengeLayout : mMultiPaneChallengeLayout;
  challenge.setOnBouncerStateChangedListener(mViewStateManager);
  mAppWidgetContainer.setBouncerAnimationDuration(challenge.getBouncerAnimationDuration());
  mViewStateManager.setPagedView(mAppWidgetContainer);
  mViewStateManager.setChallengeLayout(challenge);
  mSecurityContainer=(KeyguardSecurityContainer)findViewById(R.id.keyguard_security_container);
  mSecurityContainer.setLockPatternUtils(mLockPatternUtils);
  mSecurityContainer.setSecurityCallback(new SecurityCallback(){
    @Override public void userActivity(    long timeout){
      if (mViewMediatorCallback != null) {
        mViewMediatorCallback.userActivity(timeout);
      }
    }
    @Override public void dismiss(    boolean authenticated){
      KeyguardHostView.this.dismiss(authenticated);
    }
    @Override public void finish(){
      KeyguardUpdateMonitor.getInstance(mContext).setAlternateUnlockEnabled(true);
      boolean deferKeyguardDone=false;
      if (mDismissAction != null) {
        deferKeyguardDone=mDismissAction.onDismiss();
        mDismissAction=null;
      }
      if (mViewMediatorCallback != null) {
        if (deferKeyguardDone) {
          mViewMediatorCallback.keyguardDonePending();
        }
 else {
          mViewMediatorCallback.keyguardDone(true);
        }
      }
    }
  }
);
  mViewStateManager.setSecurityViewContainer(mSecurityContainer);
  setBackButtonEnabled(false);
  if (KeyguardUpdateMonitor.getInstance(mContext).hasBootCompleted()) {
    updateAndAddWidgets();
  }
 else {
    mPostBootCompletedRunnable=new Runnable(){
      @Override public void run(){
        updateAndAddWidgets();
      }
    }
;
  }
  mSecurityContainer.showPrimarySecurityScreen(false);
  mSecurityContainer.updateSecurityViews(mViewStateManager.isBouncing());
  enableUserSelectorIfNecessary();
}
