{
  final int length=outR.length;
  if (inR.length != length)   return false;
  if ((X & 0x7C) != 0 || (Y & 0x7C) != 0)   return false;
  if (((X & 0x3) == 0) || ((Y & 0x3) == 0))   return false;
  if ((X & 0x3) == (Y & 0x3))   return false;
  int Z=X ^ Y;
  final int x=(X & 0x3) - 1;
  final int y=(Y & 0x3) - 1;
  final int z=(Z & 0x3) - 1;
  final int axis_y=(z + 1) % 3;
  final int axis_z=(z + 2) % 3;
  if (((x ^ axis_y) | (y ^ axis_z)) != 0)   Z^=0x80;
  final boolean sx=(X >= 0x80);
  final boolean sy=(Y >= 0x80);
  final boolean sz=(Z >= 0x80);
  final int rowLength=((length == 16) ? 4 : 3);
  for (int j=0; j < 3; j++) {
    final int offset=j * rowLength;
    for (int i=0; i < 3; i++) {
      if (x == i)       outR[offset + i]=sx ? -inR[offset + 0] : inR[offset + 0];
      if (y == i)       outR[offset + i]=sy ? -inR[offset + 1] : inR[offset + 1];
      if (z == i)       outR[offset + i]=sz ? -inR[offset + 2] : inR[offset + 2];
    }
  }
  if (length == 16) {
    outR[3]=outR[7]=outR[11]=outR[12]=outR[13]=outR[14]=0;
    outR[15]=1;
  }
  return true;
}
