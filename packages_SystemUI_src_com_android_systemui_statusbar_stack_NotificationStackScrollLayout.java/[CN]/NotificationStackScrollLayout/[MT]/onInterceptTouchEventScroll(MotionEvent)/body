{
  if (!isScrollingEnabled()) {
    return false;
  }
  final int action=ev.getAction();
  if ((action == MotionEvent.ACTION_MOVE) && (mIsBeingDragged)) {
    return true;
  }
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_MOVE:
{
      final int activePointerId=mActivePointerId;
      if (activePointerId == INVALID_POINTER) {
        break;
      }
      final int pointerIndex=ev.findPointerIndex(activePointerId);
      if (pointerIndex == -1) {
        Log.e(TAG,"Invalid pointerId=" + activePointerId + " in onInterceptTouchEvent");
        break;
      }
      final int y=(int)ev.getY(pointerIndex);
      final int x=(int)ev.getX(pointerIndex);
      final int yDiff=Math.abs(y - mLastMotionY);
      final int xDiff=Math.abs(x - mDownX);
      if (yDiff > mTouchSlop && yDiff > xDiff) {
        setIsBeingDragged(true);
        mLastMotionY=y;
        mDownX=x;
        initVelocityTrackerIfNotExists();
        mVelocityTracker.addMovement(ev);
      }
      break;
    }
case MotionEvent.ACTION_DOWN:
{
    final int y=(int)ev.getY();
    if (getChildAtPosition(ev.getX(),y) == null) {
      setIsBeingDragged(false);
      recycleVelocityTracker();
      break;
    }
    mLastMotionY=y;
    mDownX=(int)ev.getX();
    mActivePointerId=ev.getPointerId(0);
    mScrolledToTopOnFirstDown=isScrolledToTop();
    initOrResetVelocityTracker();
    mVelocityTracker.addMovement(ev);
    boolean isBeingDragged=!mScroller.isFinished();
    setIsBeingDragged(isBeingDragged);
    break;
  }
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
setIsBeingDragged(false);
mActivePointerId=INVALID_POINTER;
recycleVelocityTracker();
if (mScroller.springBack(mScrollX,mOwnScrollY,0,0,0,getScrollRange())) {
postInvalidateOnAnimation();
}
break;
case MotionEvent.ACTION_POINTER_UP:
onSecondaryPointerUp(ev);
break;
}
return mIsBeingDragged;
}
