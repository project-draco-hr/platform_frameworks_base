{
  super.onCreate(savedInstanceState);
  setContentView(R.layout.gestureviewer);
  mView=(GesturePad)this.findViewById(R.id.drawingpad);
  mView.cacheGesture(false);
  mView.setFadingOut(false);
  mView.setEnableInput(false);
  mRecognizer=new GestureLib("/sdcard/gestureentry");
  mRecognizer.load();
  mResult=(Spinner)findViewById(R.id.spinner);
  ArrayList<String> list=new ArrayList<String>();
  list.addAll(mRecognizer.getLabels());
  Collections.sort(list);
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,list);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  mResult.setAdapter(adapter);
  mSamples=mRecognizer.getGestures(list.get(0));
  if (mSamples.isEmpty() == false) {
    mCurrentGestureIndex=0;
    Gesture gesture=mSamples.get(mCurrentGestureIndex);
    mView.setCurrentGesture(gesture);
    mView.clearDebugPath();
    mView.addDebugPath(toPath(mRecognizer.getClassifier().getInstance(gesture.getID())));
  }
  mResult.setOnItemSelectedListener(new OnItemSelectedListener(){
    public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      mSamples=mRecognizer.getGestures((String)mResult.getSelectedItem());
      if (mSamples.isEmpty() == false) {
        mCurrentGestureIndex=0;
        Gesture gesture=mSamples.get(mCurrentGestureIndex);
        mView.setCurrentGesture(gesture);
        mView.clearDebugPath();
        mView.addDebugPath(toPath(mRecognizer.getClassifier().getInstance(gesture.getID())));
      }
      mView.invalidate();
    }
    public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  Button remove=(Button)this.findViewById(R.id.remove);
  remove.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      if (mSamples.isEmpty())       return;
      String name=(String)mResult.getSelectedItem();
      Gesture gesture=mSamples.get(mCurrentGestureIndex);
      mRecognizer.removeGesture(name,gesture);
      mSamples=mRecognizer.getGestures(name);
      if (mSamples == null) {
        mCurrentGestureIndex=0;
        ArrayList<String> list=new ArrayList<String>();
        list.addAll(mRecognizer.getLabels());
        Collections.sort(list);
        ArrayAdapter<String> adapter=new ArrayAdapter<String>(GestureLibViewer.this,android.R.layout.simple_spinner_item,list);
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        mResult.setAdapter(adapter);
      }
 else {
        if (mCurrentGestureIndex > mSamples.size() - 1) {
          mCurrentGestureIndex--;
        }
        gesture=mSamples.get(mCurrentGestureIndex);
        mView.setCurrentGesture(gesture);
        mView.clearDebugPath();
        mView.addDebugPath(toPath(mRecognizer.getClassifier().getInstance(gesture.getID())));
        mView.invalidate();
      }
    }
  }
);
  Button next=(Button)this.findViewById(R.id.next);
  next.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      if (mCurrentGestureIndex >= mSamples.size() - 1)       return;
      mCurrentGestureIndex++;
      Gesture gesture=mSamples.get(mCurrentGestureIndex);
      mView.setCurrentGesture(gesture);
      mView.clearDebugPath();
      mView.addDebugPath(toPath(mRecognizer.getClassifier().getInstance(gesture.getID())));
      mView.invalidate();
    }
  }
);
  Button previous=(Button)this.findViewById(R.id.previous);
  previous.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      if (mCurrentGestureIndex >= 1 && mSamples.isEmpty() == false) {
        mCurrentGestureIndex--;
        Gesture gesture=mSamples.get(mCurrentGestureIndex);
        mView.setCurrentGesture(gesture);
        mView.clearDebugPath();
        mView.addDebugPath(toPath(mRecognizer.getClassifier().getInstance(gesture.getID())));
        mView.invalidate();
      }
    }
  }
);
}
