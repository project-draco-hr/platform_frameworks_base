{
  final int targetWidth=TEXTURE_WIDTH;
  final int targetHeight=TEXTURE_HEIGHT;
  final int border=3;
  final int overlap=1;
  final Resources res=getResources();
  if (mRecentOverlay == null) {
    mRecentOverlay=BitmapFactory.decodeResource(res,R.drawable.recent_overlay);
  }
  final Bitmap result=Bitmap.createBitmap(targetWidth,targetHeight,Bitmap.Config.ARGB_8888);
  final Canvas canvas=new Canvas(result);
  canvas.setDrawFilter(new PaintFlagsDrawFilter(Paint.DITHER_FLAG,Paint.FILTER_BITMAP_FLAG));
  Paint paint=new Paint();
  paint.setFilterBitmap(false);
  paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC));
  canvas.save();
  if (info.thumbnail != null) {
    int sourceWidth=targetWidth - 2 * (border - overlap);
    int sourceHeight=targetHeight - 2 * (border - overlap);
    final float scaleX=(float)sourceWidth / info.thumbnail.getWidth();
    final float scaleY=(float)sourceHeight / info.thumbnail.getHeight();
    canvas.translate(border * 0.5f,border * 0.5f);
    canvas.scale(scaleX,scaleY);
    canvas.drawBitmap(info.thumbnail,0,0,paint);
  }
 else {
    final float scaleX=(float)targetWidth / mLoadingBitmap.getWidth();
    final float scaleY=(float)targetHeight / mLoadingBitmap.getHeight();
    canvas.scale(scaleX,scaleY);
    canvas.drawBitmap(mLoadingBitmap,0,0,paint);
  }
  canvas.restore();
  canvas.save();
  final float scaleOverlayX=(float)targetWidth / mRecentOverlay.getWidth();
  final float scaleOverlayY=(float)targetHeight / mRecentOverlay.getHeight();
  canvas.scale(scaleOverlayX,scaleOverlayY);
  paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.ADD));
  canvas.drawBitmap(mRecentOverlay,0,0,paint);
  canvas.restore();
  if (info.icon != null) {
    canvas.save();
    info.icon.draw(canvas);
    canvas.restore();
  }
  return result;
}
