{
  mXpp.setInput(new StringReader("<full-backup-content>" + "<exclude path=\"exclude1.txt\" domain=\"file\"/>" + "<include path=\"include1.txt\" domain=\"file\"/>"+ "<exclude path=\"exclude2.txt\" domain=\"database\"/>"+ "<include path=\"include2.txt\" domain=\"database\"/>"+ "<exclude path=\"exclude3\" domain=\"sharedpref\"/>"+ "<include path=\"include3\" domain=\"sharedpref\"/>"+ "<exclude path=\"exclude4.xml\" domain=\"sharedpref\"/>"+ "<include path=\"include4.xml\" domain=\"sharedpref\"/>"+ "</full-backup-content>"));
  FullBackup.BackupScheme bs=FullBackup.getBackupSchemeForTest(mContext);
  bs.parseBackupSchemeFromXmlLocked(mXpp,excludesSet,includeMap);
  Set<String> fileDomainIncludes=includeMap.get(FullBackup.FILES_TREE_TOKEN);
  assertEquals("Didn't find expected file domain include.",1,fileDomainIncludes.size());
  assertEquals("Invalid path parsed for <include/>",new File(mContext.getFilesDir(),"include1.txt").getCanonicalPath(),fileDomainIncludes.iterator().next());
  Set<String> databaseDomainIncludes=includeMap.get(FullBackup.DATABASE_TREE_TOKEN);
  assertEquals("Didn't find expected database domain include.",3,databaseDomainIncludes.size());
  assertTrue("Invalid path parsed for <include/>",databaseDomainIncludes.contains(new File(mContext.getDatabasePath("foo").getParentFile(),"include2.txt").getCanonicalPath()));
  assertTrue("Invalid path parsed for <include/>",databaseDomainIncludes.contains(new File(mContext.getDatabasePath("foo").getParentFile(),"include2.txt-journal").getCanonicalPath()));
  assertTrue("Invalid path parsed for <include/>",databaseDomainIncludes.contains(new File(mContext.getDatabasePath("foo").getParentFile(),"include2.txt-wal").getCanonicalPath()));
  List<String> sharedPrefDomainIncludes=new ArrayList<String>(includeMap.get(FullBackup.SHAREDPREFS_TREE_TOKEN));
  Collections.sort(sharedPrefDomainIncludes);
  assertEquals("Didn't find expected sharedpref domain include.",3,sharedPrefDomainIncludes.size());
  assertEquals("Invalid path parsed for <include/>",new File(mContext.getSharedPrefsFile("foo").getParentFile(),"include3").getCanonicalPath(),sharedPrefDomainIncludes.get(0));
  assertEquals("Invalid path parsed for <include/>",new File(mContext.getSharedPrefsFile("foo").getParentFile(),"include3.xml").getCanonicalPath(),sharedPrefDomainIncludes.get(1));
  assertEquals("Invalid path parsed for <include/>",new File(mContext.getSharedPrefsFile("foo").getParentFile(),"include4.xml").getCanonicalPath(),sharedPrefDomainIncludes.get(2));
  assertEquals("Unexpected number of <exclude/>s",7,excludesSet.size());
  List<String> arrayedSet=new ArrayList<String>(excludesSet);
  Collections.sort(arrayedSet);
  assertEquals("Invalid path parsed for <exclude/>",new File(mContext.getDatabasePath("foo").getParentFile(),"exclude2.txt").getCanonicalPath(),arrayedSet.get(0));
  assertEquals("Invalid path parsed for <exclude/>",new File(mContext.getDatabasePath("foo").getParentFile(),"exclude2.txt-journal").getCanonicalPath(),arrayedSet.get(1));
  assertEquals("Invalid path parsed for <exclude/>",new File(mContext.getDatabasePath("foo").getParentFile(),"exclude2.txt-wal").getCanonicalPath(),arrayedSet.get(2));
  assertEquals("Invalid path parsed for <exclude/>",new File(mContext.getFilesDir(),"exclude1.txt").getCanonicalPath(),arrayedSet.get(3));
  assertEquals("Invalid path parsed for <exclude/>",new File(mContext.getSharedPrefsFile("foo").getParentFile(),"exclude3").getCanonicalPath(),arrayedSet.get(4));
  assertEquals("Invalid path parsed for <exclude/>",new File(mContext.getSharedPrefsFile("foo").getParentFile(),"exclude3.xml").getCanonicalPath(),arrayedSet.get(5));
  assertEquals("Invalid path parsed for <exclude/>",new File(mContext.getSharedPrefsFile("foo").getParentFile(),"exclude4.xml").getCanonicalPath(),arrayedSet.get(6));
}
