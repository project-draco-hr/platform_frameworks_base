{
  final float daysSince2000=(float)(time - UTC_2000) / DateUtils.DAY_IN_MILLIS;
  final float meanAnomaly=6.240059968f + daysSince2000 * 0.01720197f;
  final double trueAnomaly=meanAnomaly + C1 * Math.sin(meanAnomaly) + C2 * Math.sin(2 * meanAnomaly) + C3 * Math.sin(3 * meanAnomaly);
  final double solarLng=trueAnomaly + 1.796593063d + Math.PI;
  final double arcLongitude=-longitude / 360;
  float n=Math.round(daysSince2000 - J0 - arcLongitude);
  double solarTransitJ2000=n + J0 + arcLongitude+ 0.0053d * Math.sin(meanAnomaly) + -0.0069d * Math.sin(2 * solarLng);
  double solarDec=Math.asin(Math.sin(solarLng) * Math.sin(OBLIQUITY));
  final double latRad=latiude * DEGREES_TO_RADIANS;
  double cosHourAngle=(Math.sin(ALTIDUTE_CORRECTION_CIVIL_TWILIGHT) - Math.sin(latRad) * Math.sin(solarDec)) / (Math.cos(latRad) * Math.cos(solarDec));
  if (cosHourAngle >= 1) {
    mState=NIGHT;
    mSunset=-1;
    mSunrise=-1;
    return;
  }
 else   if (cosHourAngle <= -1) {
    mState=DAY;
    mSunset=-1;
    mSunrise=-1;
    return;
  }
  float hourAngle=(float)(Math.acos(cosHourAngle) / (2 * Math.PI));
  mSunset=Math.round((solarTransitJ2000 + hourAngle) * DateUtils.DAY_IN_MILLIS) + UTC_2000;
  mSunrise=Math.round((solarTransitJ2000 - hourAngle) * DateUtils.DAY_IN_MILLIS) + UTC_2000;
  if (mSunrise < time && mSunset > time) {
    mState=DAY;
  }
 else {
    mState=NIGHT;
  }
}
