{
  final String system=SystemProperties.get("ro.build.fingerprint");
  final String vendor=SystemProperties.get("ro.vendor.build.fingerprint");
  final String bootimage=SystemProperties.get("ro.bootimage.build.fingerprint");
  final String requiredBootloader=SystemProperties.get("ro.build.expect.bootloader");
  final String currentBootloader=SystemProperties.get("ro.bootloader");
  final String requiredRecovery=SystemProperties.get("ro.expect.recovery_id");
  final String currentRecovery=SystemProperties.get("ro.recovery_id");
  final String requiredRadio=SystemProperties.get("ro.build.expect.baseband");
  final String currentRadio=SystemProperties.get("gsm.version.baseband");
  if (TextUtils.isEmpty(system)) {
    Slog.e(TAG,"Required ro.build.fingerprint is empty!");
    return false;
  }
  if (!TextUtils.isEmpty(vendor)) {
    if (!Objects.equals(system,vendor)) {
      Slog.e(TAG,"Mismatched fingerprints; system reported " + system + " but vendor reported "+ vendor);
      return false;
    }
  }
  if (!TextUtils.isEmpty(bootimage)) {
    if (!Objects.equals(system,bootimage)) {
      Slog.e(TAG,"Mismatched fingerprints; system reported " + system + " but bootimage reported "+ bootimage);
      return false;
    }
  }
  if (!TextUtils.isEmpty(requiredBootloader)) {
    if (!Objects.equals(currentBootloader,requiredBootloader)) {
      Slog.e(TAG,"Mismatched bootloader version: build requires " + requiredBootloader + " but runtime reports "+ currentBootloader);
      return false;
    }
  }
  if (!TextUtils.isEmpty(requiredRecovery)) {
    if (!Objects.equals(currentRecovery,requiredRecovery)) {
      Slog.e(TAG,"Mismatched recovery version: build requires " + requiredRecovery + " but runtime reports "+ currentRecovery);
      return false;
    }
  }
  return true;
}
