{
  when(mMockPrefs.getInt("22|app_count",-1)).thenReturn(3);
  when(mMockPrefs.getString("22|app_0",null)).thenReturn("package0/class0");
  when(mMockPrefs.getLong("22|app_user_0",-1)).thenReturn(-1L);
  when(mMockPrefs.getString("22|app_1",null)).thenReturn("package1/class1");
  when(mMockPrefs.getLong("22|app_user_1",-1)).thenReturn(45L);
  when(mMockPrefs.getString("22|app_2",null)).thenReturn("package2/class2");
  when(mMockPrefs.getLong("22|app_user_2",-1)).thenReturn(239L);
  ActivityInfo mockActivityInfo=new ActivityInfo();
  mockActivityInfo.exported=true;
  try {
    when(mMockIPackageManager.getActivityInfo(new ComponentName("package0","class0"),0,5)).thenReturn(mockActivityInfo);
    when(mMockIPackageManager.getActivityInfo(new ComponentName("package1","class1"),0,4)).thenReturn(mockActivityInfo);
    when(mMockIPackageManager.getActivityInfo(new ComponentName("package2","class2"),0,5)).thenReturn(mockActivityInfo);
  }
 catch (  RemoteException e) {
    fail("RemoteException can't happen in the test, but it happened.");
  }
  ActivityInfo ai0=new ActivityInfo();
  ai0.packageName="package0";
  ai0.name="class0";
  ActivityInfo ai1=new ActivityInfo();
  ai1.packageName="package1";
  ai1.name="class1";
  ActivityInfo ai2=new ActivityInfo();
  ai2.packageName="package2";
  ai2.name="class2";
  ResolveInfo ri0=new ResolveInfo();
  ri0.activityInfo=ai0;
  ResolveInfo ri1=new ResolveInfo();
  ri1.activityInfo=ai1;
  ResolveInfo ri2=new ResolveInfo();
  ri2.activityInfo=ai2;
  when(mMockPackageManager.queryIntentActivitiesAsUser(any(Intent.class),eq(0),any(int.class))).thenReturn(Arrays.asList(ri0,ri1,ri2));
  mModel.setCurrentUser(2);
}
