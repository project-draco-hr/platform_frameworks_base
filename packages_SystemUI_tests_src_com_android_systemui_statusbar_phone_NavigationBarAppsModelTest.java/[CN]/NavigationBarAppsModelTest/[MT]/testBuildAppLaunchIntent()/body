{
  ActivityInfo mockNonExportedActivityInfo=new ActivityInfo();
  mockNonExportedActivityInfo.exported=false;
  ActivityInfo mockExportedActivityInfo=new ActivityInfo();
  mockExportedActivityInfo.exported=true;
  try {
    when(mMockIPackageManager.getActivityInfo(new ComponentName("package1","class1"),0,4)).thenReturn(mockNonExportedActivityInfo);
    when(mMockIPackageManager.getActivityInfo(new ComponentName("package2","class2"),0,5)).thenThrow(new RemoteException());
    when(mMockIPackageManager.getActivityInfo(new ComponentName("package3","class3"),0,6)).thenReturn(mockExportedActivityInfo);
    when(mMockIPackageManager.getActivityInfo(new ComponentName("package4","class4"),0,7)).thenReturn(mockExportedActivityInfo);
  }
 catch (  RemoteException e) {
    fail("RemoteException can't happen in the test, but it happened.");
  }
  ActivityInfo ai0=new ActivityInfo();
  ai0.packageName="package0";
  ai0.name="class0";
  ActivityInfo ai1=new ActivityInfo();
  ai1.packageName="package4";
  ai1.name="class4";
  ResolveInfo ri0=new ResolveInfo();
  ri0.activityInfo=ai0;
  ResolveInfo ri1=new ResolveInfo();
  ri1.activityInfo=ai1;
  when(mMockPackageManager.queryIntentActivitiesAsUser(any(Intent.class),eq(0),any(int.class))).thenReturn(Arrays.asList(ri0,ri1));
  assertEquals(null,mModel.buildAppLaunchIntent(new ComponentName("package0","class0"),new UserHandle(3)));
  assertEquals(null,mModel.buildAppLaunchIntent(new ComponentName("package1","class1"),new UserHandle(4)));
  assertEquals(null,mModel.buildAppLaunchIntent(new ComponentName("package2","class2"),new UserHandle(5)));
  assertEquals(null,mModel.buildAppLaunchIntent(new ComponentName("package3","class3"),new UserHandle(6)));
  Intent intent=mModel.buildAppLaunchIntent(new ComponentName("package4","class4"),new UserHandle(7));
  assertNotNull(intent);
  assertEquals(new ComponentName("package4","class4"),intent.getComponent());
  assertEquals("package4",intent.getPackage());
}
