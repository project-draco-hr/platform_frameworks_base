{
  Integer faceDetectMode=get(CaptureResult.STATISTICS_FACE_DETECT_MODE);
  if (faceDetectMode == null) {
    Log.w(TAG,"Face detect mode metadata is null, assuming the mode is SIMPLE");
    faceDetectMode=CaptureResult.STATISTICS_FACE_DETECT_MODE_SIMPLE;
  }
 else {
    if (faceDetectMode == CaptureResult.STATISTICS_FACE_DETECT_MODE_OFF) {
      return new Face[0];
    }
    if (faceDetectMode != CaptureResult.STATISTICS_FACE_DETECT_MODE_SIMPLE && faceDetectMode != CaptureResult.STATISTICS_FACE_DETECT_MODE_FULL) {
      Log.w(TAG,"Unknown face detect mode: " + faceDetectMode);
      return new Face[0];
    }
  }
  byte[] faceScores=get(CaptureResult.STATISTICS_FACE_SCORES);
  Rect[] faceRectangles=get(CaptureResult.STATISTICS_FACE_RECTANGLES);
  if (faceScores == null || faceRectangles == null) {
    Log.w(TAG,"Expect face scores and rectangles to be non-null");
    return new Face[0];
  }
 else   if (faceScores.length != faceRectangles.length) {
    Log.w(TAG,String.format("Face score size(%d) doesn match face rectangle size(%d)!",faceScores.length,faceRectangles.length));
  }
  int numFaces=Math.min(faceScores.length,faceRectangles.length);
  int[] faceIds=get(CaptureResult.STATISTICS_FACE_IDS);
  int[] faceLandmarks=get(CaptureResult.STATISTICS_FACE_LANDMARKS);
  if (faceDetectMode == CaptureResult.STATISTICS_FACE_DETECT_MODE_FULL) {
    if (faceIds == null || faceLandmarks == null) {
      Log.w(TAG,"Expect face ids and landmarks to be non-null for FULL mode," + "fallback to SIMPLE mode");
      faceDetectMode=CaptureResult.STATISTICS_FACE_DETECT_MODE_SIMPLE;
    }
 else {
      if (faceIds.length != numFaces || faceLandmarks.length != numFaces * FACE_LANDMARK_SIZE) {
        Log.w(TAG,String.format("Face id size(%d), or face landmark size(%d) don't" + "match face number(%d)!",faceIds.length,faceLandmarks.length * FACE_LANDMARK_SIZE,numFaces));
      }
      numFaces=Math.min(numFaces,faceIds.length);
      numFaces=Math.min(numFaces,faceLandmarks.length / FACE_LANDMARK_SIZE);
    }
  }
  ArrayList<Face> faceList=new ArrayList<Face>();
  if (faceDetectMode == CaptureResult.STATISTICS_FACE_DETECT_MODE_SIMPLE) {
    for (int i=0; i < numFaces; i++) {
      if (faceScores[i] <= Face.SCORE_MAX && faceScores[i] >= Face.SCORE_MIN) {
        faceList.add(new Face(faceRectangles[i],faceScores[i]));
      }
    }
  }
 else {
    for (int i=0; i < numFaces; i++) {
      if (faceScores[i] <= Face.SCORE_MAX && faceScores[i] >= Face.SCORE_MIN && faceIds[i] >= 0) {
        Point leftEye=new Point(faceLandmarks[i * FACE_LANDMARK_SIZE],faceLandmarks[i * FACE_LANDMARK_SIZE + 1]);
        Point rightEye=new Point(faceLandmarks[i * FACE_LANDMARK_SIZE + 2],faceLandmarks[i * FACE_LANDMARK_SIZE + 3]);
        Point mouth=new Point(faceLandmarks[i * FACE_LANDMARK_SIZE + 4],faceLandmarks[i * FACE_LANDMARK_SIZE + 5]);
        Face face=new Face(faceRectangles[i],faceScores[i],faceIds[i],leftEye,rightEye,mouth);
        faceList.add(face);
      }
    }
  }
  Face[] faces=new Face[faceList.size()];
  faceList.toArray(faces);
  return faces;
}
