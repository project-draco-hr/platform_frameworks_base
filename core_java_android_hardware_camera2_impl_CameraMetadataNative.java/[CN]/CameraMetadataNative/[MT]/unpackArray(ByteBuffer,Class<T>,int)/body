{
  Class<?> componentType=type.getComponentType();
  Object array;
  int elementSize=getTypeSize(nativeType);
  MetadataMarshalClass<?> marshaler=getMarshaler(componentType,nativeType);
  if (marshaler != null) {
    elementSize=marshaler.getNativeSize(nativeType);
  }
  if (elementSize != MetadataMarshalClass.NATIVE_SIZE_DYNAMIC) {
    int remaining=buffer.remaining();
    int arraySize=remaining / elementSize;
    if (VERBOSE) {
      Log.v(TAG,String.format("Attempting to unpack array (count = %d, element size = %d, bytes " + "remaining = %d) for type %s",arraySize,elementSize,remaining,type));
    }
    array=Array.newInstance(componentType,arraySize);
    for (int i=0; i < arraySize; ++i) {
      Object elem=unpackSingle(buffer,componentType,nativeType);
      Array.set(array,i,elem);
    }
  }
 else {
    ArrayList<Object> arrayList=new ArrayList<Object>();
    int primitiveSize=getTypeSize(nativeType);
    while (buffer.remaining() >= primitiveSize) {
      Object elem=unpackSingle(buffer,componentType,nativeType);
      arrayList.add(elem);
    }
    array=arrayList.toArray((T[])Array.newInstance(componentType,0));
  }
  if (buffer.remaining() != 0) {
    Log.e(TAG,"Trailing bytes (" + buffer.remaining() + ") left over after unpacking "+ type);
  }
  return (T)array;
}
