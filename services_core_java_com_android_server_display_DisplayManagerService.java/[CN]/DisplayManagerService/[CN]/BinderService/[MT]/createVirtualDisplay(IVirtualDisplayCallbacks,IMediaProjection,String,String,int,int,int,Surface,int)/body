{
  final int callingUid=Binder.getCallingUid();
  if (!validatePackageName(callingUid,packageName)) {
    throw new SecurityException("packageName must match the calling uid");
  }
  if (callbacks == null) {
    throw new IllegalArgumentException("appToken must not be null");
  }
  if (TextUtils.isEmpty(name)) {
    throw new IllegalArgumentException("name must be non-null and non-empty");
  }
  if (width <= 0 || height <= 0 || densityDpi <= 0) {
    throw new IllegalArgumentException("width, height, and densityDpi must be " + "greater than 0");
  }
  if (projection != null) {
    try {
      if (!getProjectionService().isValidMediaProjection(projection)) {
        throw new SecurityException("Invalid media projection");
      }
    }
 catch (    RemoteException e) {
      throw new SecurityException("unable to validate media projection");
    }
    flags&=DisplayManager.VIRTUAL_DISPLAY_FLAG_SECURE;
    try {
      flags|=projection.getVirtualDisplayFlags();
    }
 catch (    RemoteException e) {
      throw new RuntimeException("unable to retrieve media projection flags");
    }
  }
  if ((flags & DisplayManager.VIRTUAL_DISPLAY_FLAG_SCREEN_SHARE) != 0) {
    if ((flags & DisplayManager.VIRTUAL_DISPLAY_FLAG_PUBLIC) != 0 || (flags & DisplayManager.VIRTUAL_DISPLAY_FLAG_PRESENTATION) != 0) {
      throw new IllegalArgumentException("screen sharing virtual displays must not " + "be public or presentation displays");
    }
    if (!canProjectVideo(projection)) {
      throw new SecurityException("Requires CAPTURE_VIDEO_OUTPUT or " + "CAPTURE_SECURE_VIDEO_OUTPUT permission, or an appropriate " + "MediaProjection token in order to create a screen sharing virtual "+ "display.");
    }
  }
  if (callingUid != Process.SYSTEM_UID && (flags & DisplayManager.VIRTUAL_DISPLAY_FLAG_PUBLIC) != 0) {
    if (!canProjectVideo(projection)) {
      throw new SecurityException("Requires CAPTURE_VIDEO_OUTPUT or " + "CAPTURE_SECURE_VIDEO_OUTPUT permission, or an appropriate " + "MediaProjection token to create a public virtual display.");
    }
  }
  if ((flags & DisplayManager.VIRTUAL_DISPLAY_FLAG_SECURE) != 0) {
    if (!canProjectSecureVideo(projection)) {
      throw new SecurityException("Requires CAPTURE_SECURE_VIDEO_OUTPUT " + "or an appropriate MediaProjection token to create a " + "secure virtual display.");
    }
  }
  final long token=Binder.clearCallingIdentity();
  try {
    return createVirtualDisplayInternal(callbacks,projection,callingUid,packageName,name,width,height,densityDpi,surface,flags);
  }
  finally {
    Binder.restoreCallingIdentity(token);
  }
}
