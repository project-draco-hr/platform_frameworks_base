{
  ArraySet<Long> deletableKeySets=getOriginalKeySetsByPackageNameLPr(packageName);
  ArraySet<Long> deletableKeys=new ArraySet<Long>();
  final int origDksSize=deletableKeySets.size();
  for (int i=0; i < origDksSize; i++) {
    ArraySet<Long> knownKeys=mKeySetMapping.get(deletableKeySets.valueAt(i));
    if (knownKeys != null) {
      deletableKeys.addAll(knownKeys);
    }
  }
  for (  String pkgName : mPackages.keySet()) {
    if (pkgName.equals(packageName)) {
      continue;
    }
    ArraySet<Long> knownKeySets=getOriginalKeySetsByPackageNameLPr(pkgName);
    deletableKeySets.removeAll(knownKeySets);
    final int kksSize=knownKeySets.size();
    for (int i=0; i < kksSize; i++) {
      ArraySet<Long> knownKeys=mKeySetMapping.get(knownKeySets.valueAt(i));
      if (knownKeys != null) {
        deletableKeys.removeAll(knownKeys);
      }
    }
  }
  final int dksSize=deletableKeySets.size();
  for (int i=0; i < dksSize; i++) {
    Long ks=deletableKeySets.valueAt(i);
    mKeySets.delete(ks);
    mKeySetMapping.delete(ks);
  }
  final int dkSize=deletableKeys.size();
  for (int i=0; i < dkSize; i++) {
    mPublicKeys.delete(deletableKeys.valueAt(i));
  }
  for (  String pkgName : mPackages.keySet()) {
    PackageSetting p=mPackages.get(pkgName);
    for (int i=0; i < dksSize; i++) {
      Long ks=deletableKeySets.valueAt(i);
      p.keySetData.removeSigningKeySet(ks);
    }
  }
  PackageSetting p=mPackages.get(packageName);
  clearPackageKeySetDataLPw(p);
}
