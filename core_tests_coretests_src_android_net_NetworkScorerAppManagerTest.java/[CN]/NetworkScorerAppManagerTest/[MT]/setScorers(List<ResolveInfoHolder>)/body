{
  List<ResolveInfo> receivers=new ArrayList<>();
  for (  final ResolveInfoHolder scorer : scorers) {
    receivers.add(scorer.scorerResolveInfo);
    if (scorer.configActivityResolveInfo != null) {
      Mockito.when(mMockPm.queryIntentActivities(Mockito.argThat(new ArgumentMatcher<Intent>(){
        @Override public boolean matches(        Object object){
          Intent intent=(Intent)object;
          return NetworkScoreManager.ACTION_CUSTOM_ENABLE.equals(intent.getAction()) && scorer.scorerResolveInfo.activityInfo.packageName.equals(intent.getPackage());
        }
      }
),Mockito.eq(0))).thenReturn(Collections.singletonList(scorer.configActivityResolveInfo));
    }
    if (scorer.serviceResolveInfo != null) {
      Mockito.when(mMockPm.resolveService(Mockito.argThat(new ArgumentMatcher<Intent>(){
        @Override public boolean matches(        Object object){
          Intent intent=(Intent)object;
          return NetworkScoreManager.ACTION_SCORE_NETWORKS.equals(intent.getAction()) && scorer.scorerResolveInfo.activityInfo.packageName.equals(intent.getPackage());
        }
      }
),Mockito.eq(0))).thenReturn(scorer.serviceResolveInfo);
    }
  }
  Mockito.when(mMockPm.queryBroadcastReceiversAsUser(Mockito.argThat(new ArgumentMatcher<Intent>(){
    @Override public boolean matches(    Object object){
      Intent intent=(Intent)object;
      return NetworkScoreManager.ACTION_SCORE_NETWORKS.equals(intent.getAction());
    }
  }
),Mockito.eq(0),Mockito.eq(UserHandle.USER_SYSTEM))).thenReturn(receivers);
}
