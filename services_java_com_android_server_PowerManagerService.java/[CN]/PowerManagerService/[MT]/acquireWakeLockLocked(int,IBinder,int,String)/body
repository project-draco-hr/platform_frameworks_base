{
  int acquireUid=-1;
  String acquireName=null;
  int acquireType=-1;
  if (mSpew) {
    Log.d(TAG,"acquireWakeLock flags=0x" + Integer.toHexString(flags) + " tag="+ tag);
  }
  int index=mLocks.getIndex(lock);
  WakeLock wl;
  boolean newlock;
  if (index < 0) {
    wl=new WakeLock(flags,lock,tag,uid);
switch (wl.flags & LOCK_MASK) {
case PowerManager.FULL_WAKE_LOCK:
      wl.minState=SCREEN_BRIGHT;
    break;
case PowerManager.SCREEN_BRIGHT_WAKE_LOCK:
  wl.minState=SCREEN_BRIGHT;
break;
case PowerManager.SCREEN_DIM_WAKE_LOCK:
wl.minState=SCREEN_DIM;
break;
case PowerManager.PARTIAL_WAKE_LOCK:
case PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK:
break;
default :
Log.e(TAG,"bad wakelock type for lock '" + tag + "' "+ " flags="+ flags);
return;
}
mLocks.addLock(wl);
newlock=true;
}
 else {
wl=mLocks.get(index);
newlock=false;
}
if (isScreenLock(flags)) {
if ((wl.flags & PowerManager.ACQUIRE_CAUSES_WAKEUP) != 0) {
int oldWakeLockState=mWakeLockState;
mWakeLockState=mLocks.reactivateScreenLocksLocked();
if (mSpew) {
Log.d(TAG,"wakeup here mUserState=0x" + Integer.toHexString(mUserState) + " mWakeLockState=0x"+ Integer.toHexString(mWakeLockState)+ " previous wakeLockState=0x"+ Integer.toHexString(oldWakeLockState));
}
}
 else {
if (mSpew) {
Log.d(TAG,"here mUserState=0x" + Integer.toHexString(mUserState) + " mLocks.gatherState()=0x"+ Integer.toHexString(mLocks.gatherState())+ " mWakeLockState=0x"+ Integer.toHexString(mWakeLockState));
}
mWakeLockState=(mUserState | mWakeLockState) & mLocks.gatherState();
}
setPowerState(mWakeLockState | mUserState);
}
 else if ((flags & LOCK_MASK) == PowerManager.PARTIAL_WAKE_LOCK) {
if (newlock) {
mPartialCount++;
if (mPartialCount == 1) {
if (LOG_PARTIAL_WL) EventLog.writeEvent(LOG_POWER_PARTIAL_WAKE_STATE,1,tag);
}
}
Power.acquireWakeLock(Power.PARTIAL_WAKE_LOCK,PARTIAL_NAME);
}
 else if ((flags & LOCK_MASK) == PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK) {
mProximityCount++;
if (mProximityCount == 1) {
enableProximityLockLocked();
}
}
if (newlock) {
acquireUid=wl.uid;
acquireName=wl.tag;
acquireType=wl.monitorType;
}
if (acquireType >= 0) {
try {
mBatteryStats.noteStartWakelock(acquireUid,acquireName,acquireType);
}
 catch (RemoteException e) {
}
}
}
