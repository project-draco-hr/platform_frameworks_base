{
  final int oldState=mPowerState;
  if ((oldState & SCREEN_ON_BIT) == 0 || mSkippedScreenOn) {
    if ((mSkippedScreenOn=shouldDeferScreenOnLocked())) {
      newState&=~(SCREEN_ON_BIT | SCREEN_BRIGHT_BIT);
    }
  }
  if ((newState & SCREEN_ON_BIT) != 0) {
    newState=applyButtonState(newState);
    newState=applyKeyboardState(newState);
  }
  final int realDifference=(newState ^ oldState);
  final int difference=realDifference | forceState;
  if (difference == 0) {
    return;
  }
  int offMask=0;
  int dimMask=0;
  int onMask=0;
  int preferredBrightness=getPreferredBrightness();
  if ((difference & KEYBOARD_BRIGHT_BIT) != 0) {
    if ((newState & KEYBOARD_BRIGHT_BIT) == 0) {
      offMask|=KEYBOARD_BRIGHT_BIT;
    }
 else {
      onMask|=KEYBOARD_BRIGHT_BIT;
    }
  }
  if ((difference & BUTTON_BRIGHT_BIT) != 0) {
    if ((newState & BUTTON_BRIGHT_BIT) == 0) {
      offMask|=BUTTON_BRIGHT_BIT;
    }
 else {
      onMask|=BUTTON_BRIGHT_BIT;
    }
  }
  if ((difference & (SCREEN_ON_BIT | SCREEN_BRIGHT_BIT)) != 0) {
    int nominalCurrentValue=-1;
    if ((realDifference & (SCREEN_ON_BIT | SCREEN_BRIGHT_BIT)) != 0) {
switch (oldState & (SCREEN_BRIGHT_BIT | SCREEN_ON_BIT)) {
case SCREEN_BRIGHT_BIT | SCREEN_ON_BIT:
        nominalCurrentValue=preferredBrightness;
      break;
case SCREEN_ON_BIT:
    nominalCurrentValue=mScreenBrightnessDim;
  break;
case 0:
nominalCurrentValue=Power.BRIGHTNESS_OFF;
break;
case SCREEN_BRIGHT_BIT:
default :
nominalCurrentValue=(int)mScreenBrightness.curValue;
break;
}
}
int brightness=preferredBrightness;
int steps=ANIM_STEPS;
if ((newState & SCREEN_BRIGHT_BIT) == 0) {
final float scale=1.5f;
float ratio=(((float)mScreenBrightnessDim) / preferredBrightness);
if (ratio > 1.0f) ratio=1.0f;
if ((newState & SCREEN_ON_BIT) == 0) {
if ((oldState & SCREEN_BRIGHT_BIT) != 0) {
steps=ANIM_STEPS;
}
 else {
steps=(int)(ANIM_STEPS * ratio * scale);
}
brightness=Power.BRIGHTNESS_OFF;
}
 else {
if ((oldState & SCREEN_ON_BIT) != 0) {
steps=(int)(ANIM_STEPS * (1.0f - ratio) * scale);
}
 else {
steps=(int)(ANIM_STEPS * ratio);
}
if (mStayOnConditions != 0 && mBatteryService.isPowered(mStayOnConditions)) {
mScreenOffTime=SystemClock.elapsedRealtime();
}
brightness=mScreenBrightnessDim;
}
}
long identity=Binder.clearCallingIdentity();
try {
mBatteryStats.noteScreenBrightness(brightness);
}
 catch (RemoteException e) {
}
 finally {
Binder.restoreCallingIdentity(identity);
}
mScreenBrightness.setTargetLocked(brightness,steps,INITIAL_SCREEN_BRIGHTNESS,nominalCurrentValue);
if (DEBUG_SCREEN_ON) {
RuntimeException e=new RuntimeException("here");
e.fillInStackTrace();
Slog.i(TAG,"Setting screen brightness: " + brightness,e);
mScreenBrightness.setTargetLocked(brightness,steps,INITIAL_SCREEN_BRIGHTNESS,nominalCurrentValue);
}
}
if (mSpew) {
Slog.d(TAG,"offMask=0x" + Integer.toHexString(offMask) + " dimMask=0x"+ Integer.toHexString(dimMask)+ " onMask=0x"+ Integer.toHexString(onMask)+ " difference=0x"+ Integer.toHexString(difference)+ " realDifference=0x"+ Integer.toHexString(realDifference)+ " forceState=0x"+ Integer.toHexString(forceState));
}
if (offMask != 0) {
if (mSpew) Slog.i(TAG,"Setting brightess off: " + offMask);
setLightBrightness(offMask,Power.BRIGHTNESS_OFF);
}
if (dimMask != 0) {
int brightness=mScreenBrightnessDim;
if ((newState & BATTERY_LOW_BIT) != 0 && brightness > Power.BRIGHTNESS_LOW_BATTERY) {
brightness=Power.BRIGHTNESS_LOW_BATTERY;
}
if (mSpew) Slog.i(TAG,"Setting brightess dim " + brightness + ": "+ dimMask);
setLightBrightness(dimMask,brightness);
}
if (onMask != 0) {
int brightness=getPreferredBrightness();
if ((newState & BATTERY_LOW_BIT) != 0 && brightness > Power.BRIGHTNESS_LOW_BATTERY) {
brightness=Power.BRIGHTNESS_LOW_BATTERY;
}
if (mSpew) Slog.i(TAG,"Setting brightess on " + brightness + ": "+ onMask);
setLightBrightness(onMask,brightness);
}
}
