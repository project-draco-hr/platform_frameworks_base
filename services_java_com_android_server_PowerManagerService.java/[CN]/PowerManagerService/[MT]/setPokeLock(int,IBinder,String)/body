{
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER,null);
  if (token == null) {
    Log.e(TAG,"setPokeLock got null token for tag='" + tag + "'");
    return;
  }
  if ((pokey & POKE_LOCK_TIMEOUT_MASK) == POKE_LOCK_TIMEOUT_MASK) {
    throw new IllegalArgumentException("setPokeLock can't have both POKE_LOCK_SHORT_TIMEOUT" + " and POKE_LOCK_MEDIUM_TIMEOUT");
  }
synchronized (mLocks) {
    if (pokey != 0) {
      PokeLock p=mPokeLocks.get(token);
      int oldPokey=0;
      if (p != null) {
        oldPokey=p.pokey;
        p.pokey=pokey;
      }
 else {
        p=new PokeLock(pokey,token,tag);
        mPokeLocks.put(token,p);
      }
      int oldTimeout=oldPokey & POKE_LOCK_TIMEOUT_MASK;
      int newTimeout=pokey & POKE_LOCK_TIMEOUT_MASK;
      if (((mPowerState & SCREEN_ON_BIT) == 0) && (oldTimeout != newTimeout)) {
        p.awakeOnSet=true;
      }
    }
 else {
      mPokeLocks.remove(token);
    }
    int oldPokey=mPokey;
    int cumulative=0;
    boolean oldAwakeOnSet=mPokeAwakeOnSet;
    boolean awakeOnSet=false;
    for (    PokeLock p : mPokeLocks.values()) {
      cumulative|=p.pokey;
      if (p.awakeOnSet) {
        awakeOnSet=true;
      }
    }
    mPokey=cumulative;
    mPokeAwakeOnSet=awakeOnSet;
    int oldCumulativeTimeout=oldPokey & POKE_LOCK_TIMEOUT_MASK;
    int newCumulativeTimeout=pokey & POKE_LOCK_TIMEOUT_MASK;
    if (oldCumulativeTimeout != newCumulativeTimeout) {
      setScreenOffTimeoutsLocked();
      setTimeoutLocked(SystemClock.uptimeMillis(),mTimeoutTask.nextState);
    }
  }
}
