{
  if (mContext.checkCallingPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println("Permission Denial: can't dump PowerManager from from pid=" + Binder.getCallingPid() + ", uid="+ Binder.getCallingUid());
    return;
  }
  long now=SystemClock.uptimeMillis();
  pw.println("Power Manager State:");
  pw.println("  mIsPowered=" + mIsPowered + " mPowerState="+ mPowerState+ " mScreenOffTime="+ (SystemClock.elapsedRealtime() - mScreenOffTime)+ " ms");
  pw.println("  mPartialCount=" + mPartialCount);
  pw.println("  mWakeLockState=" + dumpPowerState(mWakeLockState));
  pw.println("  mUserState=" + dumpPowerState(mUserState));
  pw.println("  mPowerState=" + dumpPowerState(mPowerState));
  pw.println("  mLocks.gather=" + dumpPowerState(mLocks.gatherState()));
  pw.println("  mNextTimeout=" + mNextTimeout + " now="+ now+ " "+ ((mNextTimeout - now) / 1000)+ "s from now");
  pw.println("  mDimScreen=" + mDimScreen + " mStayOnConditions="+ mStayOnConditions);
  pw.println("  mOffBecauseOfUser=" + mOffBecauseOfUser + " mUserState="+ mUserState);
  pw.println("  mNotificationQueue=" + mNotificationQueue + " mNotificationWhy="+ mNotificationWhy);
  pw.println("  mPokey=" + mPokey + " mPokeAwakeonSet="+ mPokeAwakeOnSet);
  pw.println("  mKeyboardVisible=" + mKeyboardVisible + " mUserActivityAllowed="+ mUserActivityAllowed);
  pw.println("  mKeylightDelay=" + mKeylightDelay + " mDimDelay="+ mDimDelay+ " mScreenOffDelay="+ mScreenOffDelay);
  pw.println("  mTotalDelaySetting=" + mTotalDelaySetting);
  pw.println("  mBroadcastWakeLock=" + mBroadcastWakeLock);
  pw.println("  mStayOnWhilePluggedInScreenDimLock=" + mStayOnWhilePluggedInScreenDimLock);
  pw.println("  mStayOnWhilePluggedInPartialLock=" + mStayOnWhilePluggedInPartialLock);
  pw.println("  mPreventScreenOnPartialLock=" + mPreventScreenOnPartialLock);
  mScreenBrightness.dump(pw,"  mScreenBrightness: ");
  mKeyboardBrightness.dump(pw,"  mKeyboardBrightness: ");
  mButtonBrightness.dump(pw,"  mButtonBrightness: ");
  int N=mLocks.size();
  pw.println();
  pw.println("mLocks.size=" + N + ":");
  for (int i=0; i < N; i++) {
    WakeLock wl=mLocks.get(i);
    String type=lockType(wl.flags & LOCK_MASK);
    String acquireCausesWakeup="";
    if ((wl.flags & PowerManager.ACQUIRE_CAUSES_WAKEUP) != 0) {
      acquireCausesWakeup="ACQUIRE_CAUSES_WAKEUP ";
    }
    String activated="";
    if (wl.activated) {
      activated=" activated";
    }
    pw.println("  " + type + " '"+ wl.tag+ "'"+ acquireCausesWakeup+ activated+ " (minState="+ wl.minState+ ")");
  }
  pw.println();
  pw.println("mPokeLocks.size=" + mPokeLocks.size() + ":");
  for (  PokeLock p : mPokeLocks.values()) {
    pw.println("    poke lock '" + p.tag + "':"+ ((p.pokey & POKE_LOCK_IGNORE_CHEEK_EVENTS) != 0 ? " POKE_LOCK_IGNORE_CHEEK_EVENTS" : "")+ ((p.pokey & POKE_LOCK_SHORT_TIMEOUT) != 0 ? " POKE_LOCK_SHORT_TIMEOUT" : "")+ ((p.pokey & POKE_LOCK_MEDIUM_TIMEOUT) != 0 ? " POKE_LOCK_MEDIUM_TIMEOUT" : ""));
  }
  pw.println();
}
