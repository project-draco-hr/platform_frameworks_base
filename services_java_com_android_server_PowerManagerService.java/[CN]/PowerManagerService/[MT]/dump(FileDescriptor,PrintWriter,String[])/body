{
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println("Permission Denial: can't dump PowerManager from from pid=" + Binder.getCallingPid() + ", uid="+ Binder.getCallingUid());
    return;
  }
  long now=SystemClock.uptimeMillis();
synchronized (mLocks) {
    pw.println("Power Manager State:");
    pw.println("  mIsPowered=" + mIsPowered + " mPowerState="+ mPowerState+ " mScreenOffTime="+ (SystemClock.elapsedRealtime() - mScreenOffTime)+ " ms");
    pw.println("  mPartialCount=" + mPartialCount);
    pw.println("  mWakeLockState=" + dumpPowerState(mWakeLockState));
    pw.println("  mUserState=" + dumpPowerState(mUserState));
    pw.println("  mPowerState=" + dumpPowerState(mPowerState));
    pw.println("  mLocks.gather=" + dumpPowerState(mLocks.gatherState()));
    pw.println("  mNextTimeout=" + mNextTimeout + " now="+ now+ " "+ ((mNextTimeout - now) / 1000)+ "s from now");
    pw.println("  mDimScreen=" + mDimScreen + " mStayOnConditions="+ mStayOnConditions+ " mPreparingForScreenOn="+ mPreparingForScreenOn+ " mSkippedScreenOn="+ mSkippedScreenOn);
    pw.println("  mScreenOffReason=" + mScreenOffReason + " mUserState="+ mUserState);
    pw.println("  mBroadcastQueue={" + mBroadcastQueue[0] + ','+ mBroadcastQueue[1]+ ','+ mBroadcastQueue[2]+ "}");
    pw.println("  mBroadcastWhy={" + mBroadcastWhy[0] + ','+ mBroadcastWhy[1]+ ','+ mBroadcastWhy[2]+ "}");
    pw.println("  mPokey=" + mPokey + " mPokeAwakeonSet="+ mPokeAwakeOnSet);
    pw.println("  mKeyboardVisible=" + mKeyboardVisible + " mUserActivityAllowed="+ mUserActivityAllowed);
    pw.println("  mKeylightDelay=" + mKeylightDelay + " mDimDelay="+ mDimDelay+ " mScreenOffDelay="+ mScreenOffDelay);
    pw.println("  mPreventScreenOn=" + mPreventScreenOn + "  mScreenBrightnessOverride="+ mScreenBrightnessOverride+ "  mButtonBrightnessOverride="+ mButtonBrightnessOverride);
    pw.println("  mScreenOffTimeoutSetting=" + mScreenOffTimeoutSetting + " mMaximumScreenOffTimeout="+ mMaximumScreenOffTimeout);
    pw.println("  mLastScreenOnTime=" + mLastScreenOnTime);
    pw.println("  mBroadcastWakeLock=" + mBroadcastWakeLock);
    pw.println("  mStayOnWhilePluggedInScreenDimLock=" + mStayOnWhilePluggedInScreenDimLock);
    pw.println("  mStayOnWhilePluggedInPartialLock=" + mStayOnWhilePluggedInPartialLock);
    pw.println("  mPreventScreenOnPartialLock=" + mPreventScreenOnPartialLock);
    pw.println("  mProximityPartialLock=" + mProximityPartialLock);
    pw.println("  mProximityWakeLockCount=" + mProximityWakeLockCount);
    pw.println("  mProximitySensorEnabled=" + mProximitySensorEnabled);
    pw.println("  mProximitySensorActive=" + mProximitySensorActive);
    pw.println("  mProximityPendingValue=" + mProximityPendingValue);
    pw.println("  mLastProximityEventTime=" + mLastProximityEventTime);
    pw.println("  mLightSensorEnabled=" + mLightSensorEnabled);
    pw.println("  mLightSensorValue=" + mLightSensorValue + " mLightSensorPendingValue="+ mLightSensorPendingValue);
    pw.println("  mLightSensorPendingDecrease=" + mLightSensorPendingDecrease + " mLightSensorPendingIncrease="+ mLightSensorPendingIncrease);
    pw.println("  mLightSensorScreenBrightness=" + mLightSensorScreenBrightness + " mLightSensorButtonBrightness="+ mLightSensorButtonBrightness+ " mLightSensorKeyboardBrightness="+ mLightSensorKeyboardBrightness);
    pw.println("  mUseSoftwareAutoBrightness=" + mUseSoftwareAutoBrightness);
    pw.println("  mAutoBrightessEnabled=" + mAutoBrightessEnabled);
    mScreenBrightness.dump(pw,"  mScreenBrightness: ");
    int N=mLocks.size();
    pw.println();
    pw.println("mLocks.size=" + N + ":");
    for (int i=0; i < N; i++) {
      WakeLock wl=mLocks.get(i);
      String type=lockType(wl.flags & LOCK_MASK);
      String acquireCausesWakeup="";
      if ((wl.flags & PowerManager.ACQUIRE_CAUSES_WAKEUP) != 0) {
        acquireCausesWakeup="ACQUIRE_CAUSES_WAKEUP ";
      }
      String activated="";
      if (wl.activated) {
        activated=" activated";
      }
      pw.println("  " + type + " '"+ wl.tag+ "'"+ acquireCausesWakeup+ activated+ " (minState="+ wl.minState+ ", uid="+ wl.uid+ ", pid="+ wl.pid+ ")");
    }
    pw.println();
    pw.println("mPokeLocks.size=" + mPokeLocks.size() + ":");
    for (    PokeLock p : mPokeLocks.values()) {
      pw.println("    poke lock '" + p.tag + "':"+ ((p.pokey & POKE_LOCK_IGNORE_TOUCH_EVENTS) != 0 ? " POKE_LOCK_IGNORE_TOUCH_EVENTS" : "")+ ((p.pokey & POKE_LOCK_SHORT_TIMEOUT) != 0 ? " POKE_LOCK_SHORT_TIMEOUT" : "")+ ((p.pokey & POKE_LOCK_MEDIUM_TIMEOUT) != 0 ? " POKE_LOCK_MEDIUM_TIMEOUT" : ""));
    }
    pw.println();
  }
}
