{
  int releaseUid;
  String releaseName;
  int releaseType;
  WakeLock wl=mLocks.removeLock(lock);
  if (wl == null) {
    return;
  }
  if (mSpew) {
    Log.d(TAG,"releaseWakeLock flags=0x" + Integer.toHexString(wl.flags) + " tag="+ wl.tag);
  }
  if (isScreenLock(wl.flags)) {
    mWakeLockState=mLocks.gatherState();
    if ((wl.flags & PowerManager.ON_AFTER_RELEASE) != 0) {
      userActivity(SystemClock.uptimeMillis(),false);
    }
    setPowerState(mWakeLockState | mUserState);
  }
 else   if ((wl.flags & LOCK_MASK) == PowerManager.PARTIAL_WAKE_LOCK) {
    mPartialCount--;
    if (mPartialCount == 0) {
      if (LOG_PARTIAL_WL)       EventLog.writeEvent(LOG_POWER_PARTIAL_WAKE_STATE,0,wl.tag);
      Power.releaseWakeLock(PARTIAL_NAME);
    }
  }
 else   if ((wl.flags & LOCK_MASK) == PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK) {
    mProximityCount--;
    if (mProximityCount == 0) {
      disableProximityLockLocked();
    }
  }
  wl.binder.unlinkToDeath(wl,0);
  releaseUid=wl.uid;
  releaseName=wl.tag;
  releaseType=wl.monitorType;
  if (releaseType >= 0) {
    long origId=Binder.clearCallingIdentity();
    try {
      mBatteryStats.noteStopWakelock(releaseUid,releaseName,releaseType);
    }
 catch (    RemoteException e) {
    }
 finally {
      Binder.restoreCallingIdentity(origId);
    }
  }
}
