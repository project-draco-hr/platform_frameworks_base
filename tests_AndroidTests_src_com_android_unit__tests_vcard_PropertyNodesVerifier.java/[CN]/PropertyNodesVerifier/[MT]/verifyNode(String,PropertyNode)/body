{
  List<PropertyNode> expectedNodeList=mOrderedNodeMap.get(propName);
  final int size=(expectedNodeList != null ? expectedNodeList.size() : 0);
  if (size > 0) {
    for (int i=0; i < size; i++) {
      PropertyNode expectedNode=expectedNodeList.get(i);
      List<PropertyNode> expectedButDifferentValueList=new ArrayList<PropertyNode>();
      if (expectedNode.propName.equals(propName)) {
        if (expectedNode.equals(actualNode)) {
          expectedNodeList.remove(i);
          if (expectedNodeList.size() == 0) {
            mOrderedNodeMap.remove(propName);
          }
          return;
        }
 else {
          expectedButDifferentValueList.add(expectedNode);
        }
      }
      if (tryFoundExpectedNodeFromUnorderedList(actualNode,expectedButDifferentValueList)) {
        return;
      }
      if (!expectedButDifferentValueList.isEmpty()) {
        failWithExpectedNodeList(propName,actualNode,expectedButDifferentValueList);
      }
 else {
        mTestCase.fail("Unexpected property \"" + propName + "\" exists.");
      }
    }
  }
 else {
    List<PropertyNode> expectedButDifferentValueList=new ArrayList<PropertyNode>();
    if (tryFoundExpectedNodeFromUnorderedList(actualNode,expectedButDifferentValueList)) {
      return;
    }
 else {
      if (!expectedButDifferentValueList.isEmpty()) {
        failWithExpectedNodeList(propName,actualNode,expectedButDifferentValueList);
      }
 else {
        mTestCase.fail("Unexpected property \"" + propName + "\" exists.");
      }
    }
  }
}
