{
  super.onDraw(canvas);
  canvas.drawARGB(255,255,255,255);
  canvas.save();
  canvas.translate(400.0f,350.0f);
  mPaint.setTextAlign(Paint.Align.LEFT);
  canvas.drawTextOnPath(mText + mText,mPath,0.0f,0.0f,mPaint);
  canvas.drawPath(mPath,mPathPaint);
  for (int i=0; i < 100; i++) {
    mMeasure.getPosTan(i * mLength / 100.0f,mPos,mTan);
    mLines[i * 4]=mPos[0];
    mLines[i * 4 + 1]=mPos[1];
    mLines[i * 4 + 2]=mPos[0] + mTan[1] * 15;
    mLines[i * 4 + 3]=mPos[1] - mTan[0] * 15;
  }
  canvas.drawLines(mLines,mPathPaint);
  canvas.translate(200.0f,0.0f);
  canvas.drawTextOnPath(mText + mText,mStraightPath,0.0f,0.0f,mPaint);
  canvas.drawPath(mStraightPath,mPathPaint);
  canvas.restore();
  canvas.save();
  canvas.translate(150.0f,60.0f);
  canvas.drawTextOnPath(mText,mPath,0.0f,10.0f,mPaint);
  mMeasure.getPosTan(5.0f,mPos,mTan);
  canvas.drawLine(mPos[0],mPos[1],mPos[0] + mTan[1] * 10,mPos[1] - mTan[0] * 10,mPathPaint);
  canvas.drawPath(mPath,mPathPaint);
  canvas.translate(250.0f,0.0f);
  mPaint.setTextAlign(Paint.Align.CENTER);
  canvas.drawTextOnPath(mText,mPath,0.0f,0.0f,mPaint);
  canvas.drawPath(mPath,mPathPaint);
  canvas.translate(250.0f,0.0f);
  mPaint.setTextAlign(Paint.Align.RIGHT);
  canvas.drawTextOnPath(mText,mPath,0.0f,0.0f,mPaint);
  canvas.drawPath(mPath,mPathPaint);
  canvas.restore();
}
