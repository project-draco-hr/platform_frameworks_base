{
  int headsetState=newState & SUPPORTED_HEADSETS;
  int newOrOld=headsetState | mHeadsetState;
  int delay=0;
  int usb_headset_anlg=headsetState & BIT_USB_HEADSET_ANLG;
  int usb_headset_dgtl=headsetState & BIT_USB_HEADSET_DGTL;
  int h2w_headset=headsetState & (BIT_HEADSET | BIT_HEADSET_NO_MIC);
  boolean h2wStateChange=true;
  boolean usbStateChange=true;
  Log.v(TAG,"newState = " + newState + ", headsetState = "+ headsetState+ ", mHeadsetState = "+ mHeadsetState);
  if (mHeadsetState == headsetState || ((h2w_headset & (h2w_headset - 1)) != 0)) {
    Log.e(TAG,"unsetting h2w flag");
    h2wStateChange=false;
  }
  if ((usb_headset_anlg >> 2) == 1 && (usb_headset_dgtl >> 3) == 1) {
    Log.e(TAG,"unsetting usb flag");
    usbStateChange=false;
  }
  if (!h2wStateChange && !usbStateChange) {
    Log.e(TAG,"invalid transition, returning ...");
    return;
  }
  mHeadsetName=newName;
  mPrevHeadsetState=mHeadsetState;
  mHeadsetState=headsetState;
  if (headsetState == 0) {
    Intent intent=new Intent(AudioManager.ACTION_AUDIO_BECOMING_NOISY);
    mContext.sendBroadcast(intent);
    delay=1000;
  }
 else {
    if (mHandler.hasMessages(0)) {
      delay=1000;
    }
  }
  mWakeLock.acquire();
  mHandler.sendMessageDelayed(mHandler.obtainMessage(0,mHeadsetState,mPrevHeadsetState,mHeadsetName),delay);
}
