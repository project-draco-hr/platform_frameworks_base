{
synchronized (mServiceConnections) {
    if (mServiceConnections.containsKey(authenticatorType)) {
      MyServiceConnection connection=mServiceConnections.get(authenticatorType);
      if (Log.isLoggable(TAG,Log.VERBOSE)) {
        Log.v(TAG,"service connection already exists for " + authenticatorType);
      }
      mServiceUsers.get(authenticatorType).add(callback);
      if (connection.mService != null) {
        if (Log.isLoggable(TAG,Log.VERBOSE)) {
          Log.v(TAG,"the service is connected, scheduling a connected message for " + authenticatorType);
        }
        connection.scheduleCallbackConnectedMessage(callback);
      }
 else {
        if (Log.isLoggable(TAG,Log.VERBOSE)) {
          Log.v(TAG,"the service is *not* connected, waiting for for " + authenticatorType);
        }
      }
      return true;
    }
    if (Log.isLoggable(TAG,Log.VERBOSE)) {
      Log.v(TAG,"there is no service connection for " + authenticatorType);
    }
    AccountAuthenticatorCache.ServiceInfo<AuthenticatorDescription> authenticatorInfo=mAuthenticatorCache.getServiceInfo(AuthenticatorDescription.newKey(authenticatorType));
    if (authenticatorInfo == null) {
      if (Log.isLoggable(TAG,Log.VERBOSE)) {
        Log.v(TAG,"there is no authenticator for " + authenticatorType + ", bailing out");
      }
      return false;
    }
    MyServiceConnection connection=new MyServiceConnection(authenticatorType);
    Intent intent=new Intent();
    intent.setAction("android.accounts.AccountAuthenticator");
    intent.setComponent(authenticatorInfo.componentName);
    if (Log.isLoggable(TAG,Log.VERBOSE)) {
      Log.v(TAG,"performing bindService to " + authenticatorInfo.componentName);
    }
    if (!mContext.bindService(intent,connection,Context.BIND_AUTO_CREATE)) {
      if (Log.isLoggable(TAG,Log.VERBOSE)) {
        Log.v(TAG,"bindService to " + authenticatorInfo.componentName + " failed");
      }
      return false;
    }
    mServiceConnections.put(authenticatorType,connection);
    mServiceUsers.put(authenticatorType,Lists.newArrayList(callback));
    return true;
  }
}
