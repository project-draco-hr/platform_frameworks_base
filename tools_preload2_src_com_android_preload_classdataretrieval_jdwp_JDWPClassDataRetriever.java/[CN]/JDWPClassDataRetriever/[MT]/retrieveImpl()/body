{
  try {
{
      CommandPacket packet=new CommandPacket(JDWPCommands.VirtualMachineCommandSet.CommandSetID,JDWPCommands.VirtualMachineCommandSet.SuspendCommand);
      ReplyPacket reply=debuggeeWrapper.vmMirror.performCommand(packet);
      if (reply.getErrorCode() != JDWPConstants.Error.NONE) {
        return null;
      }
    }
    CommandPacket packet=new CommandPacket(JDWPCommands.VirtualMachineCommandSet.CommandSetID,JDWPCommands.VirtualMachineCommandSet.AllClassesCommand);
    ReplyPacket reply=debuggeeWrapper.vmMirror.performCommand(packet);
    if (reply.getErrorCode() != JDWPConstants.Error.NONE) {
      return null;
    }
    int classCount=reply.getNextValueAsInt();
    System.out.println("Runtime reported " + classCount + " classes.");
    Map<Long,String> classes=new HashMap<Long,String>();
    Map<Long,String> arrayClasses=new HashMap<Long,String>();
    for (int i=0; i < classCount; i++) {
      byte refTypeTag=reply.getNextValueAsByte();
      long typeID=reply.getNextValueAsReferenceTypeID();
      String signature=reply.getNextValueAsString();
      reply.getNextValueAsInt();
switch (refTypeTag) {
case JDWPConstants.TypeTag.CLASS:
case JDWPConstants.TypeTag.INTERFACE:
        classes.put(typeID,signature);
      break;
case JDWPConstants.TypeTag.ARRAY:
    arrayClasses.put(typeID,signature);
  break;
}
}
Map<String,String> result=new HashMap<String,String>();
for (Map.Entry<Long,String> entry : classes.entrySet()) {
long typeID=entry.getKey();
String signature=entry.getValue();
if (!checkClass(typeID,signature,result)) {
System.err.println("Issue investigating " + signature);
}
}
for (Map.Entry<Long,String> entry : arrayClasses.entrySet()) {
long typeID=entry.getKey();
String signature=entry.getValue();
if (!checkArrayClass(typeID,signature,result)) {
System.err.println("Issue investigating " + signature);
}
}
return result;
}
  finally {
{
CommandPacket packet=new CommandPacket(JDWPCommands.VirtualMachineCommandSet.CommandSetID,JDWPCommands.VirtualMachineCommandSet.ResumeCommand);
debuggeeWrapper.vmMirror.performCommand(packet);
}
}
}
