{
  final float[] pastX=mPastX;
  final float[] pastY=mPastY;
  final long[] pastTime=mPastTime;
  final float oldestX=pastX[0];
  final float oldestY=pastY[0];
  final long oldestTime=pastTime[0];
  float accumX=0;
  float accumY=0;
  int N=0;
  while (N < NUM_PAST) {
    if (pastTime[N] == 0) {
      break;
    }
    N++;
  }
  for (int i=1; i < N; i++) {
    final int dur=(int)(pastTime[i] - oldestTime);
    if (dur == 0)     continue;
    float dist=pastX[i] - oldestX;
    float vel=(dist / dur) * units;
    if (accumX == 0)     accumX=vel;
 else     accumX=(accumX + vel) * .5f;
    dist=pastY[i] - oldestY;
    vel=(dist / dur) * units;
    if (accumY == 0)     accumY=vel;
 else     accumY=(accumY + vel) * .5f;
  }
  mXVelocity=accumX < 0.0f ? Math.max(accumX,-maxVelocity) : Math.min(accumX,maxVelocity);
  mYVelocity=accumY < 0.0f ? Math.max(accumY,-maxVelocity) : Math.min(accumY,maxVelocity);
}
