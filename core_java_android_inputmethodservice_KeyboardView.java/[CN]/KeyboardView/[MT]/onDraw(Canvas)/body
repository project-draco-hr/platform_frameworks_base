{
  super.onDraw(canvas);
  if (mKeyboard == null)   return;
  final Paint paint=mPaint;
  final Drawable keyBackground=mKeyBackground;
  final Rect clipRegion=mClipRegion;
  final Rect padding=mPadding;
  final int kbdPaddingLeft=mPaddingLeft;
  final int kbdPaddingTop=mPaddingTop;
  final Key[] keys=mKeys;
  final Key invalidKey=mInvalidatedKey;
  paint.setAlpha(255);
  paint.setColor(mKeyTextColor);
  boolean drawSingleKey=false;
  if (invalidKey != null && canvas.getClipBounds(clipRegion)) {
    if (invalidKey.x + kbdPaddingLeft - 1 <= clipRegion.left && invalidKey.y + kbdPaddingTop - 1 <= clipRegion.top && invalidKey.x + invalidKey.width + kbdPaddingLeft+ 1 >= clipRegion.right && invalidKey.y + invalidKey.height + kbdPaddingTop+ 1 >= clipRegion.bottom) {
      drawSingleKey=true;
    }
  }
  final int keyCount=keys.length;
  for (int i=0; i < keyCount; i++) {
    final Key key=keys[i];
    if (drawSingleKey && invalidKey != key) {
      continue;
    }
    int[] drawableState=key.getCurrentDrawableState();
    keyBackground.setState(drawableState);
    String label=key.label == null ? null : adjustCase(key.label).toString();
    final Rect bounds=keyBackground.getBounds();
    if (key.width != bounds.right || key.height != bounds.bottom) {
      keyBackground.setBounds(0,0,key.width,key.height);
    }
    canvas.translate(key.x + kbdPaddingLeft,key.y + kbdPaddingTop);
    keyBackground.draw(canvas);
    if (label != null) {
      if (label.length() > 1 && key.codes.length < 2) {
        paint.setTextSize(mLabelTextSize);
        paint.setTypeface(Typeface.DEFAULT_BOLD);
      }
 else {
        paint.setTextSize(mKeyTextSize);
        paint.setTypeface(Typeface.DEFAULT);
      }
      paint.setShadowLayer(mShadowRadius,0,0,mShadowColor);
      canvas.drawText(label,(key.width - padding.left - padding.right) / 2 + padding.left,(key.height - padding.top - padding.bottom) / 2 + (paint.getTextSize() - paint.descent()) / 2 + padding.top,paint);
      paint.setShadowLayer(0,0,0,0);
    }
 else     if (key.icon != null) {
      final int drawableX=(key.width - padding.left - padding.right- key.icon.getIntrinsicWidth()) / 2 + padding.left;
      final int drawableY=(key.height - padding.top - padding.bottom- key.icon.getIntrinsicHeight()) / 2 + padding.top;
      canvas.translate(drawableX,drawableY);
      key.icon.setBounds(0,0,key.icon.getIntrinsicWidth(),key.icon.getIntrinsicHeight());
      key.icon.draw(canvas);
      canvas.translate(-drawableX,-drawableY);
    }
    canvas.translate(-key.x - kbdPaddingLeft,-key.y - kbdPaddingTop);
  }
  mInvalidatedKey=null;
  if (mMiniKeyboardOnScreen) {
    paint.setColor((int)(mBackgroundDimAmount * 0xFF) << 24);
    canvas.drawRect(0,0,getWidth(),getHeight(),paint);
  }
  if (DEBUG && mShowTouchPoints) {
    paint.setAlpha(128);
    paint.setColor(0xFFFF0000);
    canvas.drawCircle(mStartX,mStartY,3,paint);
    canvas.drawLine(mStartX,mStartY,mLastX,mLastY,paint);
    paint.setColor(0xFF0000FF);
    canvas.drawCircle(mLastX,mLastY,3,paint);
    paint.setColor(0xFF00FF00);
    canvas.drawCircle((mStartX + mLastX) / 2,(mStartY + mLastY) / 2,2,paint);
  }
}
