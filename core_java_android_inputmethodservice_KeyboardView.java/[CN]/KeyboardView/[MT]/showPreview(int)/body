{
  int oldKeyIndex=mCurrentKeyIndex;
  final PopupWindow previewPopup=mPreviewPopup;
  mCurrentKeyIndex=keyIndex;
  final List<Key> keys=mKeyboard.getKeys();
  if (oldKeyIndex != mCurrentKeyIndex) {
    if (oldKeyIndex != NOT_A_KEY && keys.size() > oldKeyIndex) {
      keys.get(oldKeyIndex).onReleased(mCurrentKeyIndex == NOT_A_KEY);
      invalidateKey(oldKeyIndex);
    }
    if (mCurrentKeyIndex != NOT_A_KEY && keys.size() > mCurrentKeyIndex) {
      keys.get(mCurrentKeyIndex).onPressed();
      invalidateKey(mCurrentKeyIndex);
    }
  }
  if (oldKeyIndex != mCurrentKeyIndex && mShowPreview) {
    mHandler.removeMessages(MSG_SHOW_PREVIEW);
    if (previewPopup.isShowing()) {
      if (keyIndex == NOT_A_KEY) {
        mHandler.sendMessageDelayed(mHandler.obtainMessage(MSG_REMOVE_PREVIEW),60);
      }
    }
    if (keyIndex != NOT_A_KEY) {
      Key key=keys.get(keyIndex);
      if (key.icon != null) {
        mPreviewText.setCompoundDrawables(null,null,null,key.iconPreview != null ? key.iconPreview : key.icon);
        mPreviewText.setText(null);
      }
 else {
        mPreviewText.setCompoundDrawables(null,null,null,null);
        mPreviewText.setText(getPreviewText(key));
        if (key.label.length() > 1 && key.codes.length < 2) {
          mPreviewText.setTextSize(mLabelTextSize);
        }
 else {
          mPreviewText.setTextSize(mPreviewTextSizeLarge);
        }
      }
      mPreviewText.measure(MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));
      int popupWidth=Math.max(mPreviewText.getMeasuredWidth(),key.width + mPreviewText.getPaddingLeft() + mPreviewText.getPaddingRight());
      final int popupHeight=mPreviewHeight;
      LayoutParams lp=mPreviewText.getLayoutParams();
      if (lp != null) {
        lp.width=popupWidth;
        lp.height=popupHeight;
      }
      previewPopup.setWidth(popupWidth);
      previewPopup.setHeight(popupHeight);
      if (!mPreviewCentered) {
        mPopupPreviewX=key.x - mPreviewText.getPaddingLeft() + mPaddingLeft;
        mPopupPreviewY=key.y - popupHeight + mPreviewOffset;
      }
 else {
        mPopupPreviewX=160 - mPreviewText.getMeasuredWidth() / 2;
        mPopupPreviewY=-mPreviewText.getMeasuredHeight();
      }
      mHandler.removeMessages(MSG_REMOVE_PREVIEW);
      if (mOffsetInWindow == null) {
        mOffsetInWindow=new int[2];
        getLocationInWindow(mOffsetInWindow);
        mOffsetInWindow[0]+=mMiniKeyboardOffsetX;
        mOffsetInWindow[1]+=mMiniKeyboardOffsetY;
      }
      mPreviewText.getBackground().setState(key.popupResId != 0 ? LONG_PRESSABLE_STATE_SET : EMPTY_STATE_SET);
      if (previewPopup.isShowing()) {
        previewPopup.update(mPopupParent,mPopupPreviewX + mOffsetInWindow[0],mPopupPreviewY + mOffsetInWindow[1],popupWidth,popupHeight);
      }
 else {
        previewPopup.showAtLocation(mPopupParent,Gravity.NO_GRAVITY,mPopupPreviewX + mOffsetInWindow[0],mPopupPreviewY + mOffsetInWindow[1]);
      }
      mHandler.sendMessageDelayed(mHandler.obtainMessage(MSG_SHOW_PREVIEW,keyIndex,0),ViewConfiguration.getTapTimeout());
    }
  }
}
