{
  float[][] steps=interpolate(startCoordinates,endCoordinates);
  final int delayBetweenMovements=DRAG_DURATION / steps.length;
  MotionEvent downEvent=downMotion.perform(uiController,startCoordinates,precision);
  if (downEvent == null) {
    return Status.FAILURE;
  }
  try {
    for (int i=0; i < steps.length; i++) {
      if (!MotionEvents.sendMovement(uiController,downEvent,steps[i])) {
        String logMessage="Injection of move event as part of the drag failed. " + "Sending cancel event.";
        Log.e(TAG,logMessage);
        MotionEvents.sendCancel(uiController,downEvent);
        return Status.FAILURE;
      }
      long desiredTime=downEvent.getDownTime() + delayBetweenMovements * i;
      long timeUntilDesired=desiredTime - SystemClock.uptimeMillis();
      if (timeUntilDesired > 10) {
        uiController.loopMainThreadForAtLeast(timeUntilDesired);
      }
    }
    if (!MotionEvents.sendUp(uiController,downEvent,endCoordinates)) {
      String logMessage="Injection of up event as part of the drag failed. " + "Sending cancel event.";
      Log.e(TAG,logMessage);
      MotionEvents.sendCancel(uiController,downEvent);
      return Status.FAILURE;
    }
  }
  finally {
    downEvent.recycle();
  }
  return Status.SUCCESS;
}
