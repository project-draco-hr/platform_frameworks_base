{
  final XmlResourceParser parser=resources.getXml(resourceId);
  final int bitmapRes;
  final float hotSpotX;
  final float hotSpotY;
  try {
    XmlUtils.beginDocument(parser,"pointer-icon");
    final TypedArray a=resources.obtainAttributes(parser,com.android.internal.R.styleable.PointerIcon);
    bitmapRes=a.getResourceId(com.android.internal.R.styleable.PointerIcon_bitmap,0);
    hotSpotX=a.getDimension(com.android.internal.R.styleable.PointerIcon_hotSpotX,0);
    hotSpotY=a.getDimension(com.android.internal.R.styleable.PointerIcon_hotSpotY,0);
    a.recycle();
  }
 catch (  Exception ex) {
    throw new IllegalArgumentException("Exception parsing pointer icon resource.",ex);
  }
 finally {
    parser.close();
  }
  if (bitmapRes == 0) {
    throw new IllegalArgumentException("<pointer-icon> is missing bitmap attribute.");
  }
  Drawable drawable;
  if (context == null) {
    drawable=resources.getDrawable(bitmapRes);
  }
 else {
    drawable=context.getDrawable(bitmapRes);
  }
  if (drawable instanceof AnimationDrawable) {
    final AnimationDrawable animationDrawable=(AnimationDrawable)drawable;
    final int frames=animationDrawable.getNumberOfFrames();
    drawable=animationDrawable.getFrame(0);
    if (frames == 1) {
      Log.w(TAG,"Animation icon with single frame -- simply treating the first " + "frame as a normal bitmap icon.");
    }
 else {
      mDurationPerFrame=animationDrawable.getDuration(0);
      mBitmapFrames=new Bitmap[frames - 1];
      final int width=drawable.getIntrinsicWidth();
      final int height=drawable.getIntrinsicHeight();
      for (int i=1; i < frames; ++i) {
        Drawable drawableFrame=animationDrawable.getFrame(i);
        if (!(drawableFrame instanceof BitmapDrawable)) {
          throw new IllegalArgumentException("Frame of an animated pointer icon " + "must refer to a bitmap drawable.");
        }
        if (drawableFrame.getIntrinsicWidth() != width || drawableFrame.getIntrinsicHeight() != height) {
          throw new IllegalArgumentException("The bitmap size of " + i + "-th frame "+ "is different. All frames should have the exact same size and "+ "share the same hotspot.");
        }
        mBitmapFrames[i - 1]=((BitmapDrawable)drawableFrame).getBitmap();
      }
    }
  }
  if (!(drawable instanceof BitmapDrawable)) {
    throw new IllegalArgumentException("<pointer-icon> bitmap attribute must " + "refer to a bitmap drawable.");
  }
  mBitmap=((BitmapDrawable)drawable).getBitmap();
  mHotSpotX=hotSpotX;
  mHotSpotY=hotSpotY;
}
