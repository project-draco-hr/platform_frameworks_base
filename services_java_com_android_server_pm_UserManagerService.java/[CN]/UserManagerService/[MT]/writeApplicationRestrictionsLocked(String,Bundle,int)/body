{
  FileOutputStream fos=null;
  AtomicFile restrictionsFile=new AtomicFile(new File(Environment.getUserSystemDirectory(userId),packageToRestrictionsFileName(packageName)));
  try {
    fos=restrictionsFile.startWrite();
    final BufferedOutputStream bos=new BufferedOutputStream(fos);
    final XmlSerializer serializer=new FastXmlSerializer();
    serializer.setOutput(bos,"utf-8");
    serializer.startDocument(null,true);
    serializer.setFeature("http://xmlpull.org/v1/doc/features.html#indent-output",true);
    serializer.startTag(null,TAG_RESTRICTIONS);
    for (    String key : restrictions.keySet()) {
      Object value=restrictions.get(key);
      serializer.startTag(null,TAG_ENTRY);
      serializer.attribute(null,ATTR_KEY,key);
      if (value instanceof Boolean) {
        serializer.attribute(null,ATTR_VALUE_TYPE,ATTR_TYPE_BOOLEAN);
        serializer.text(value.toString());
      }
 else       if (value == null || value instanceof String) {
        serializer.attribute(null,ATTR_VALUE_TYPE,ATTR_TYPE_STRING);
        serializer.text(value != null ? (String)value : "");
      }
 else {
        serializer.attribute(null,ATTR_VALUE_TYPE,ATTR_TYPE_STRING_ARRAY);
        String[] values=(String[])value;
        serializer.attribute(null,ATTR_MULTIPLE,Integer.toString(values.length));
        for (        String choice : values) {
          serializer.startTag(null,TAG_VALUE);
          serializer.text(choice != null ? choice : "");
          serializer.endTag(null,TAG_VALUE);
        }
      }
      serializer.endTag(null,TAG_ENTRY);
    }
    serializer.endTag(null,TAG_RESTRICTIONS);
    serializer.endDocument();
    restrictionsFile.finishWrite(fos);
  }
 catch (  Exception e) {
    restrictionsFile.failWrite(fos);
    Slog.e(LOG_TAG,"Error writing application restrictions list");
  }
}
