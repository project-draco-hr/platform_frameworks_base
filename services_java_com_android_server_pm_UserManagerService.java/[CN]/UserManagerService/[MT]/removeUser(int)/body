{
  checkManageUsersPermission("Only the system can remove users");
  final UserInfo user;
synchronized (mPackagesLock) {
    user=mUsers.get(userHandle);
    if (userHandle == 0 || user == null) {
      return false;
    }
    mRemovingUserIds.add(userHandle);
    user.partial=true;
    writeUserLocked(user);
  }
  int res;
  try {
    res=ActivityManagerNative.getDefault().stopUser(userHandle,new IStopUserCallback.Stub(){
      @Override public void userStopped(      int userId){
        finishRemoveUser(userId);
      }
      @Override public void userStopAborted(      int userId){
      }
    }
);
  }
 catch (  RemoteException e) {
    return false;
  }
  return res == ActivityManager.USER_OP_SUCCESS;
}
