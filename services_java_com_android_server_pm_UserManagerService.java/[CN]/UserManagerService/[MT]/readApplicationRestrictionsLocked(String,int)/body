{
  final ArrayList<RestrictionEntry> entries=new ArrayList<RestrictionEntry>();
  final ArrayList<String> values=new ArrayList<String>();
  FileInputStream fis=null;
  try {
    AtomicFile restrictionsFile=new AtomicFile(new File(Environment.getUserSystemDirectory(userId),RESTRICTIONS_FILE_PREFIX + packageName + ".xml"));
    fis=restrictionsFile.openRead();
    XmlPullParser parser=Xml.newPullParser();
    parser.setInput(fis,null);
    int type;
    while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
      ;
    }
    if (type != XmlPullParser.START_TAG) {
      Slog.e(LOG_TAG,"Unable to read restrictions file " + restrictionsFile.getBaseFile());
      return entries;
    }
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT) {
      if (type == XmlPullParser.START_TAG && parser.getName().equals(TAG_ENTRY)) {
        String key=parser.getAttributeValue(null,ATTR_KEY);
        String multiple=parser.getAttributeValue(null,ATTR_MULTIPLE);
        if (multiple != null) {
          int count=Integer.parseInt(multiple);
          while (count > 0 && (type=parser.next()) != XmlPullParser.END_DOCUMENT) {
            if (type == XmlPullParser.START_TAG && parser.getName().equals(TAG_VALUE)) {
              values.add(parser.nextText().trim());
              count--;
            }
          }
          String[] valueStrings=new String[values.size()];
          values.toArray(valueStrings);
          Slog.d(LOG_TAG,"Got RestrictionEntry " + key + ","+ valueStrings);
          RestrictionEntry entry=new RestrictionEntry(key,valueStrings);
          entries.add(entry);
        }
 else {
          String value=parser.nextText().trim();
          Slog.d(LOG_TAG,"Got RestrictionEntry " + key + ","+ value);
          RestrictionEntry entry=new RestrictionEntry(key,value);
          entries.add(entry);
        }
      }
    }
  }
 catch (  IOException ioe) {
  }
catch (  XmlPullParserException pe) {
  }
 finally {
    if (fis != null) {
      try {
        fis.close();
      }
 catch (      IOException e) {
      }
    }
  }
  return entries;
}
