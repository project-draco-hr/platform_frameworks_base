{
  int flags=0;
  int serialNumber=id;
  String name=null;
  String iconPath=null;
  long creationTime=0L;
  long lastLoggedInTime=0L;
  FileInputStream fis=null;
  try {
    AtomicFile userFile=new AtomicFile(new File(mUsersDir,Integer.toString(id) + ".xml"));
    fis=userFile.openRead();
    XmlPullParser parser=Xml.newPullParser();
    parser.setInput(fis,null);
    int type;
    while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
      ;
    }
    if (type != XmlPullParser.START_TAG) {
      Slog.e(LOG_TAG,"Unable to read user " + id);
      return null;
    }
    if (type == XmlPullParser.START_TAG && parser.getName().equals(TAG_USER)) {
      int storedId=readIntAttribute(parser,ATTR_ID,-1);
      if (storedId != id) {
        Slog.e(LOG_TAG,"User id does not match the file name");
        return null;
      }
      serialNumber=readIntAttribute(parser,ATTR_SERIAL_NO,id);
      flags=readIntAttribute(parser,ATTR_FLAGS,0);
      iconPath=parser.getAttributeValue(null,ATTR_ICON_PATH);
      creationTime=readLongAttribute(parser,ATTR_CREATION_TIME,0);
      lastLoggedInTime=readLongAttribute(parser,ATTR_LAST_LOGGED_IN_TIME,0);
      while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
      }
      if (type == XmlPullParser.START_TAG && parser.getName().equals(TAG_NAME)) {
        type=parser.next();
        if (type == XmlPullParser.TEXT) {
          name=parser.getText();
        }
      }
    }
    UserInfo userInfo=new UserInfo(id,name,iconPath,flags);
    userInfo.serialNumber=serialNumber;
    userInfo.creationTime=creationTime;
    userInfo.lastLoggedInTime=lastLoggedInTime;
    return userInfo;
  }
 catch (  IOException ioe) {
  }
catch (  XmlPullParserException pe) {
  }
 finally {
    if (fis != null) {
      try {
        fis.close();
      }
 catch (      IOException e) {
      }
    }
  }
  return null;
}
