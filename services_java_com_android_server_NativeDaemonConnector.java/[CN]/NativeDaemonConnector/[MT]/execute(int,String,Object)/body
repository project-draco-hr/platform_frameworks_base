{
  final ArrayList<NativeDaemonEvent> events=Lists.newArrayList();
  final int sequenceNumber=mSequenceNumber.incrementAndGet();
  final StringBuilder cmdBuilder=new StringBuilder(Integer.toString(sequenceNumber)).append(' ');
  makeCommand(cmdBuilder,cmd,args);
  final String logCmd=cmdBuilder.toString();
  log("SND -> {" + logCmd + "}");
  cmdBuilder.append('\0');
  final String sentCmd=cmdBuilder.toString();
synchronized (mDaemonLock) {
    if (mOutputStream == null) {
      throw new NativeDaemonConnectorException("missing output stream");
    }
 else {
      try {
        mOutputStream.write(sentCmd.getBytes(Charsets.UTF_8));
      }
 catch (      IOException e) {
        throw new NativeDaemonConnectorException("problem sending command",e);
      }
    }
  }
  NativeDaemonEvent event=null;
  do {
    event=mResponseQueue.remove(sequenceNumber,timeout,sentCmd);
    if (event == null) {
      loge("timed-out waiting for response to " + logCmd);
      throw new NativeDaemonFailureException(logCmd,event);
    }
    events.add(event);
  }
 while (event.isClassContinue());
  if (event.isClassClientError()) {
    throw new NativeDaemonArgumentException(logCmd,event);
  }
  if (event.isClassServerError()) {
    throw new NativeDaemonFailureException(logCmd,event);
  }
  return events.toArray(new NativeDaemonEvent[events.size()]);
}
