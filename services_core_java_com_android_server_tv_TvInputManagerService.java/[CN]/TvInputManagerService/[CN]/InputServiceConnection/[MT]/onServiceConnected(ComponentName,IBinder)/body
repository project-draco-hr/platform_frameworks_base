{
  if (DEBUG) {
    Slog.d(TAG,"onServiceConnected(component=" + component + ")");
  }
synchronized (mLock) {
    UserState userState=mUserStates.get(mUserId);
    if (userState == null) {
      mContext.unbindService(this);
      return;
    }
    ServiceState serviceState=userState.serviceStateMap.get(mComponent);
    serviceState.service=ITvInputService.Stub.asInterface(service);
    if (serviceState.isHardware && serviceState.callback == null) {
      serviceState.callback=new ServiceCallback(mComponent,mUserId);
      try {
        serviceState.service.registerCallback(serviceState.callback);
      }
 catch (      RemoteException e) {
        Slog.e(TAG,"error in registerCallback",e);
      }
    }
    for (    IBinder sessionToken : serviceState.sessionTokens) {
      createSessionInternalLocked(serviceState.service,sessionToken,mUserId);
    }
    for (    TvInputState inputState : userState.inputMap.values()) {
      if (inputState.info.getComponent().equals(component) && inputState.state != INPUT_STATE_CONNECTED) {
        notifyInputStateChangedLocked(userState,inputState.info.getId(),inputState.state,null);
      }
    }
    if (serviceState.isHardware) {
      List<TvInputHardwareInfo> hardwareInfoList=mTvInputHardwareManager.getHardwareList();
      for (      TvInputHardwareInfo hardwareInfo : hardwareInfoList) {
        try {
          serviceState.service.notifyHardwareAdded(hardwareInfo);
        }
 catch (        RemoteException e) {
          Slog.e(TAG,"error in notifyHardwareAdded",e);
        }
      }
      List<HdmiDeviceInfo> deviceInfoList=mTvInputHardwareManager.getHdmiDeviceList();
      for (      HdmiDeviceInfo deviceInfo : deviceInfoList) {
        try {
          serviceState.service.notifyHdmiDeviceAdded(deviceInfo);
        }
 catch (        RemoteException e) {
          Slog.e(TAG,"error in notifyHdmiDeviceAdded",e);
        }
      }
    }
  }
}
