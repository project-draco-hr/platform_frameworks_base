{
  final IndentingPrintWriter pw=new IndentingPrintWriter(writer,"  ");
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println("Permission Denial: can't dump TvInputManager from pid=" + Binder.getCallingPid() + ", uid="+ Binder.getCallingUid());
    return;
  }
synchronized (mLock) {
    pw.println("User Ids (Current user: " + mCurrentUserId + "):");
    pw.increaseIndent();
    for (int i=0; i < mUserStates.size(); i++) {
      int userId=mUserStates.keyAt(i);
      pw.println(Integer.valueOf(userId));
    }
    pw.decreaseIndent();
    for (int i=0; i < mUserStates.size(); i++) {
      int userId=mUserStates.keyAt(i);
      UserState userState=getOrCreateUserStateLocked(userId);
      pw.println("UserState (" + userId + "):");
      pw.increaseIndent();
      pw.println("inputMap: inputId -> TvInputState");
      pw.increaseIndent();
      for (      Map.Entry<String,TvInputState> entry : userState.inputMap.entrySet()) {
        pw.println(entry.getKey() + ": " + entry.getValue());
      }
      pw.decreaseIndent();
      pw.println("packageSet:");
      pw.increaseIndent();
      for (      String packageName : userState.packageSet) {
        pw.println(packageName);
      }
      pw.decreaseIndent();
      pw.println("clientStateMap: ITvInputClient -> ClientState");
      pw.increaseIndent();
      for (      Map.Entry<IBinder,ClientState> entry : userState.clientStateMap.entrySet()) {
        ClientState client=entry.getValue();
        pw.println(entry.getKey() + ": " + client);
        pw.increaseIndent();
        pw.println("sessionTokens:");
        pw.increaseIndent();
        for (        IBinder token : client.sessionTokens) {
          pw.println("" + token);
        }
        pw.decreaseIndent();
        pw.println("clientTokens: " + client.clientToken);
        pw.println("userId: " + client.userId);
        pw.decreaseIndent();
      }
      pw.decreaseIndent();
      pw.println("serviceStateMap: ComponentName -> ServiceState");
      pw.increaseIndent();
      for (      Map.Entry<ComponentName,ServiceState> entry : userState.serviceStateMap.entrySet()) {
        ServiceState service=entry.getValue();
        pw.println(entry.getKey() + ": " + service);
        pw.increaseIndent();
        pw.println("sessionTokens:");
        pw.increaseIndent();
        for (        IBinder token : service.sessionTokens) {
          pw.println("" + token);
        }
        pw.decreaseIndent();
        pw.println("service: " + service.service);
        pw.println("callback: " + service.callback);
        pw.println("bound: " + service.bound);
        pw.println("reconnecting: " + service.reconnecting);
        pw.decreaseIndent();
      }
      pw.decreaseIndent();
      pw.println("sessionStateMap: ITvInputSession -> SessionState");
      pw.increaseIndent();
      for (      Map.Entry<IBinder,SessionState> entry : userState.sessionStateMap.entrySet()) {
        SessionState session=entry.getValue();
        pw.println(entry.getKey() + ": " + session);
        pw.increaseIndent();
        pw.println("info: " + session.info);
        pw.println("client: " + session.client);
        pw.println("seq: " + session.seq);
        pw.println("callingUid: " + session.callingUid);
        pw.println("userId: " + session.userId);
        pw.println("sessionToken: " + session.sessionToken);
        pw.println("session: " + session.session);
        pw.println("logUri: " + session.logUri);
        pw.println("hardwareSessionToken: " + session.hardwareSessionToken);
        pw.decreaseIndent();
      }
      pw.decreaseIndent();
      pw.println("callbackSet:");
      pw.increaseIndent();
      for (      ITvInputManagerCallback callback : userState.callbackSet) {
        pw.println(callback.toString());
      }
      pw.decreaseIndent();
      pw.println("mainSessionToken: " + userState.mainSessionToken);
      pw.decreaseIndent();
    }
  }
}
