{
  final int resolvedUserId=resolveCallingUserId(Binder.getCallingPid(),Binder.getCallingUid(),userId,"registerCallback");
  final long identity=Binder.clearCallingIdentity();
  try {
synchronized (mLock) {
      UserState userState=getUserStateLocked(resolvedUserId);
      ServiceState serviceState=userState.serviceStateMap.get(inputId);
      if (serviceState == null) {
        serviceState=new ServiceState(userState.inputMap.get(inputId),resolvedUserId);
        userState.serviceStateMap.put(inputId,serviceState);
      }
      IBinder clientToken=client.asBinder();
      if (!serviceState.mClientTokens.contains(clientToken)) {
        serviceState.mClientTokens.add(clientToken);
      }
      ClientState clientState=userState.clientStateMap.get(clientToken);
      if (clientState == null) {
        clientState=createClientStateLocked(clientToken,resolvedUserId);
      }
      if (!clientState.mInputIds.contains(inputId)) {
        clientState.mInputIds.add(inputId);
      }
      if (serviceState.mService != null) {
        if (serviceState.mCallback != null) {
          return;
        }
        serviceState.mCallback=new ServiceCallback(resolvedUserId);
        try {
          serviceState.mService.registerCallback(serviceState.mCallback);
        }
 catch (        RemoteException e) {
          Slog.e(TAG,"error in registerCallback",e);
        }
      }
 else {
        updateServiceConnectionLocked(inputId,resolvedUserId);
      }
    }
  }
  finally {
    Binder.restoreCallingIdentity(identity);
  }
}
