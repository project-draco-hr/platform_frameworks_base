{
synchronized (mLock) {
    if (mCurrentUserId == userId) {
      return;
    }
    UserState userState=mUserStates.get(mCurrentUserId);
    List<SessionState> sessionStatesToRelease=new ArrayList<>();
    for (    SessionState sessionState : userState.sessionStateMap.values()) {
      if (sessionState.session != null && !sessionState.isRecordingSession) {
        sessionStatesToRelease.add(sessionState);
      }
    }
    for (    SessionState sessionState : sessionStatesToRelease) {
      try {
        sessionState.session.release();
      }
 catch (      RemoteException e) {
        Slog.e(TAG,"error in release",e);
      }
      clearSessionAndNotifyClientLocked(sessionState);
    }
    for (Iterator<ComponentName> it=userState.serviceStateMap.keySet().iterator(); it.hasNext(); ) {
      ComponentName component=it.next();
      ServiceState serviceState=userState.serviceStateMap.get(component);
      if (serviceState != null && serviceState.sessionTokens.isEmpty()) {
        if (serviceState.callback != null) {
          try {
            serviceState.service.unregisterCallback(serviceState.callback);
          }
 catch (          RemoteException e) {
            Slog.e(TAG,"error in unregisterCallback",e);
          }
        }
        mContext.unbindService(serviceState.connection);
        it.remove();
      }
    }
    mCurrentUserId=userId;
    getOrCreateUserStateLocked(userId);
    buildTvInputListLocked(userId,null);
    buildTvContentRatingSystemListLocked(userId);
    mWatchLogHandler.obtainMessage(WatchLogHandler.MSG_SWITCH_CONTENT_RESOLVER,getContentResolverForUser(userId)).sendToTarget();
  }
}
