{
  final UserState userState=getUserStateLocked(userId);
  final SessionState sessionState=userState.sessionStateMap.get(sessionToken);
  if (DEBUG) {
    Slog.d(TAG,"createSessionInternalLocked(inputId=" + sessionState.mInputId + ")");
  }
  final InputChannel[] channels=InputChannel.openInputChannelPair(sessionToken.toString());
  ITvInputSessionCallback callback=new ITvInputSessionCallback.Stub(){
    @Override public void onSessionCreated(    ITvInputSession session){
      if (DEBUG) {
        Slog.d(TAG,"onSessionCreated(inputId=" + sessionState.mInputId + ")");
      }
synchronized (mLock) {
        sessionState.mSession=session;
        if (session == null) {
          removeSessionStateLocked(sessionToken,userId);
          sendSessionTokenToClientLocked(sessionState.mClient,sessionState.mInputId,null,null,sessionState.mSeq,userId);
        }
 else {
          try {
            session.asBinder().linkToDeath(sessionState,0);
          }
 catch (          RemoteException e) {
            Slog.e(TAG,"Session is already died.");
          }
          IBinder clientToken=sessionState.mClient.asBinder();
          ClientState clientState=userState.clientStateMap.get(clientToken);
          if (clientState == null) {
            clientState=createClientStateLocked(clientToken,userId);
          }
          clientState.mSessionTokens.add(sessionState.mSessionToken);
          sendSessionTokenToClientLocked(sessionState.mClient,sessionState.mInputId,sessionToken,channels[0],sessionState.mSeq,userId);
        }
        channels[0].dispose();
      }
    }
    @Override public void onVideoStreamChanged(    int width,    int height,    boolean interlaced){
synchronized (mLock) {
        if (DEBUG) {
          Slog.d(TAG,"onVideoStreamChanged(" + width + ", "+ height+ ")");
        }
        if (sessionState.mSession == null || sessionState.mClient == null) {
          return;
        }
        try {
          sessionState.mClient.onVideoStreamChanged(width,height,interlaced,sessionState.mSeq);
        }
 catch (        RemoteException e) {
          Slog.e(TAG,"error in onVideoStreamChanged");
        }
      }
    }
    @Override public void onAudioStreamChanged(    int channelCount){
synchronized (mLock) {
        if (DEBUG) {
          Slog.d(TAG,"onAudioStreamChanged(" + channelCount + ")");
        }
        if (sessionState.mSession == null || sessionState.mClient == null) {
          return;
        }
        try {
          sessionState.mClient.onAudioStreamChanged(channelCount,sessionState.mSeq);
        }
 catch (        RemoteException e) {
          Slog.e(TAG,"error in onAudioStreamChanged");
        }
      }
    }
    @Override public void onClosedCaptionStreamChanged(    boolean hasClosedCaption){
synchronized (mLock) {
        if (DEBUG) {
          Slog.d(TAG,"onClosedCaptionStreamChanged(" + hasClosedCaption + ")");
        }
        if (sessionState.mSession == null || sessionState.mClient == null) {
          return;
        }
        try {
          sessionState.mClient.onClosedCaptionStreamChanged(hasClosedCaption,sessionState.mSeq);
        }
 catch (        RemoteException e) {
          Slog.e(TAG,"error in onClosedCaptionStreamChanged");
        }
      }
    }
    @Override public void onSessionEvent(    String eventType,    Bundle eventArgs){
synchronized (mLock) {
        if (DEBUG) {
          Slog.d(TAG,"onEvent(what=" + eventType + ", data="+ eventArgs+ ")");
        }
        if (sessionState.mSession == null || sessionState.mClient == null) {
          return;
        }
        try {
          sessionState.mClient.onSessionEvent(eventType,eventArgs,sessionState.mSeq);
        }
 catch (        RemoteException e) {
          Slog.e(TAG,"error in onSessionEvent");
        }
      }
    }
  }
;
  try {
    service.createSession(channels[1],callback);
  }
 catch (  RemoteException e) {
    Slog.e(TAG,"error in createSession",e);
    removeSessionStateLocked(sessionToken,userId);
    sendSessionTokenToClientLocked(sessionState.mClient,sessionState.mInputId,null,null,sessionState.mSeq,userId);
  }
  channels[1].dispose();
}
