{
  final UserState userState=getUserStateLocked(userId);
  final SessionState sessionState=userState.sessionStateMap.get(sessionToken);
  if (DEBUG) {
    Slog.d(TAG,"createSessionInternalLocked(inputId=" + sessionState.mInfo.getId() + ")");
  }
  final InputChannel[] channels=InputChannel.openInputChannelPair(sessionToken.toString());
  ITvInputSessionCallback callback=new ITvInputSessionCallback.Stub(){
    @Override public void onSessionCreated(    ITvInputSession session,    IBinder harewareSessionToken){
      if (DEBUG) {
        Slog.d(TAG,"onSessionCreated(inputId=" + sessionState.mInfo.getId() + ")");
      }
synchronized (mLock) {
        sessionState.mSession=session;
        sessionState.mHardwareSessionToken=harewareSessionToken;
        if (session == null) {
          removeSessionStateLocked(sessionToken,userId);
          sendSessionTokenToClientLocked(sessionState.mClient,sessionState.mInfo.getId(),null,null,sessionState.mSeq);
        }
 else {
          try {
            session.asBinder().linkToDeath(sessionState,0);
          }
 catch (          RemoteException e) {
            Slog.e(TAG,"Session is already died.");
          }
          IBinder clientToken=sessionState.mClient.asBinder();
          ClientState clientState=userState.clientStateMap.get(clientToken);
          if (clientState == null) {
            clientState=createClientStateLocked(clientToken,userId);
          }
          clientState.mSessionTokens.add(sessionState.mSessionToken);
          sendSessionTokenToClientLocked(sessionState.mClient,sessionState.mInfo.getId(),sessionToken,channels[0],sessionState.mSeq);
        }
        channels[0].dispose();
      }
    }
    @Override public void onChannelRetuned(    Uri channelUri){
synchronized (mLock) {
        if (DEBUG) {
          Slog.d(TAG,"onChannelRetuned(" + channelUri + ")");
        }
        if (sessionState.mSession == null || sessionState.mClient == null) {
          return;
        }
        try {
          sessionState.mClient.onChannelRetuned(channelUri,sessionState.mSeq);
        }
 catch (        RemoteException e) {
          Slog.e(TAG,"error in onChannelRetuned");
        }
      }
    }
    @Override public void onTracksChanged(    List<TvTrackInfo> tracks){
synchronized (mLock) {
        if (DEBUG) {
          Slog.d(TAG,"onTracksChanged(" + tracks + ")");
        }
        if (sessionState.mSession == null || sessionState.mClient == null) {
          return;
        }
        try {
          sessionState.mClient.onTracksChanged(tracks,sessionState.mSeq);
        }
 catch (        RemoteException e) {
          Slog.e(TAG,"error in onTracksChanged");
        }
      }
    }
    @Override public void onTrackSelected(    int type,    String trackId){
synchronized (mLock) {
        if (DEBUG) {
          Slog.d(TAG,"onTrackSelected(type=" + type + ", trackId="+ trackId+ ")");
        }
        if (sessionState.mSession == null || sessionState.mClient == null) {
          return;
        }
        try {
          sessionState.mClient.onTrackSelected(type,trackId,sessionState.mSeq);
        }
 catch (        RemoteException e) {
          Slog.e(TAG,"error in onTrackSelected");
        }
      }
    }
    @Override public void onVideoAvailable(){
synchronized (mLock) {
        if (DEBUG) {
          Slog.d(TAG,"onVideoAvailable()");
        }
        if (sessionState.mSession == null || sessionState.mClient == null) {
          return;
        }
        try {
          sessionState.mClient.onVideoAvailable(sessionState.mSeq);
        }
 catch (        RemoteException e) {
          Slog.e(TAG,"error in onVideoAvailable");
        }
      }
    }
    @Override public void onVideoUnavailable(    int reason){
synchronized (mLock) {
        if (DEBUG) {
          Slog.d(TAG,"onVideoUnavailable(" + reason + ")");
        }
        if (sessionState.mSession == null || sessionState.mClient == null) {
          return;
        }
        try {
          sessionState.mClient.onVideoUnavailable(reason,sessionState.mSeq);
        }
 catch (        RemoteException e) {
          Slog.e(TAG,"error in onVideoUnavailable");
        }
      }
    }
    @Override public void onContentAllowed(){
synchronized (mLock) {
        if (DEBUG) {
          Slog.d(TAG,"onContentAllowed()");
        }
        if (sessionState.mSession == null || sessionState.mClient == null) {
          return;
        }
        try {
          sessionState.mClient.onContentAllowed(sessionState.mSeq);
        }
 catch (        RemoteException e) {
          Slog.e(TAG,"error in onContentAllowed");
        }
      }
    }
    @Override public void onContentBlocked(    String rating){
synchronized (mLock) {
        if (DEBUG) {
          Slog.d(TAG,"onContentBlocked()");
        }
        if (sessionState.mSession == null || sessionState.mClient == null) {
          return;
        }
        try {
          sessionState.mClient.onContentBlocked(rating,sessionState.mSeq);
        }
 catch (        RemoteException e) {
          Slog.e(TAG,"error in onContentBlocked");
        }
      }
    }
    @Override public void onSessionEvent(    String eventType,    Bundle eventArgs){
synchronized (mLock) {
        if (DEBUG) {
          Slog.d(TAG,"onEvent(what=" + eventType + ", data="+ eventArgs+ ")");
        }
        if (sessionState.mSession == null || sessionState.mClient == null) {
          return;
        }
        try {
          sessionState.mClient.onSessionEvent(eventType,eventArgs,sessionState.mSeq);
        }
 catch (        RemoteException e) {
          Slog.e(TAG,"error in onSessionEvent");
        }
      }
    }
  }
;
  try {
    service.createSession(channels[1],callback,sessionState.mInfo.getId());
  }
 catch (  RemoteException e) {
    Slog.e(TAG,"error in createSession",e);
    removeSessionStateLocked(sessionToken,userId);
    sendSessionTokenToClientLocked(sessionState.mClient,sessionState.mInfo.getId(),null,null,sessionState.mSeq);
  }
  channels[1].dispose();
}
