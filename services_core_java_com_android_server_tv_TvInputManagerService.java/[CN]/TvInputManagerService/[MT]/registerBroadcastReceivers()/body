{
  PackageMonitor monitor=new PackageMonitor(){
    private void buildTvInputList(    String[] packages){
synchronized (mLock) {
        buildTvInputListLocked(getChangingUserId(),packages);
        buildTvContentRatingSystemListLocked(getChangingUserId());
      }
    }
    @Override public void onPackageUpdateFinished(    String packageName,    int uid){
      if (DEBUG)       Slog.d(TAG,"onPackageUpdateFinished(packageName=" + packageName + ")");
      buildTvInputList(new String[]{packageName});
    }
    @Override public void onPackagesAvailable(    String[] packages){
      if (DEBUG) {
        Slog.d(TAG,"onPackagesAvailable(packages=" + Arrays.toString(packages) + ")");
      }
      if (isReplacing()) {
        buildTvInputList(packages);
      }
    }
    @Override public void onPackagesUnavailable(    String[] packages){
      if (DEBUG) {
        Slog.d(TAG,"onPackagesUnavailable(packages=" + Arrays.toString(packages) + ")");
      }
      if (isReplacing()) {
        buildTvInputList(packages);
      }
    }
    @Override public void onSomePackagesChanged(){
      if (DEBUG)       Slog.d(TAG,"onSomePackagesChanged()");
      if (isReplacing()) {
        if (DEBUG)         Slog.d(TAG,"Skipped building TV input list due to replacing");
        return;
      }
      buildTvInputList(null);
    }
    @Override public boolean onPackageChanged(    String packageName,    int uid,    String[] components){
      return true;
    }
    @Override public void onPackageRemoved(    String packageName,    int uid){
synchronized (mLock) {
        UserState userState=getUserStateLocked(getChangingUserId());
        if (!userState.packageSet.contains(packageName)) {
          return;
        }
      }
      ArrayList<ContentProviderOperation> operations=new ArrayList<ContentProviderOperation>();
      String selection=TvContract.BaseTvColumns.COLUMN_PACKAGE_NAME + "=?";
      String[] selectionArgs={packageName};
      operations.add(ContentProviderOperation.newDelete(TvContract.Channels.CONTENT_URI).withSelection(selection,selectionArgs).build());
      operations.add(ContentProviderOperation.newDelete(TvContract.Programs.CONTENT_URI).withSelection(selection,selectionArgs).build());
      operations.add(ContentProviderOperation.newDelete(TvContract.WatchedPrograms.CONTENT_URI).withSelection(selection,selectionArgs).build());
      ContentProviderResult[] results=null;
      try {
        results=mContentResolver.applyBatch(TvContract.AUTHORITY,operations);
      }
 catch (      RemoteException|OperationApplicationException e) {
        Slog.e(TAG,"error in applyBatch",e);
      }
      if (DEBUG) {
        Slog.d(TAG,"onPackageRemoved(packageName=" + packageName + ", uid="+ uid+ ")");
        Slog.d(TAG,"results=" + results);
      }
    }
  }
;
  monitor.register(mContext,null,UserHandle.ALL,true);
  IntentFilter intentFilter=new IntentFilter();
  intentFilter.addAction(Intent.ACTION_USER_SWITCHED);
  intentFilter.addAction(Intent.ACTION_USER_REMOVED);
  mContext.registerReceiverAsUser(new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      String action=intent.getAction();
      if (Intent.ACTION_USER_SWITCHED.equals(action)) {
        switchUser(intent.getIntExtra(Intent.EXTRA_USER_HANDLE,0));
      }
 else       if (Intent.ACTION_USER_REMOVED.equals(action)) {
        removeUser(intent.getIntExtra(Intent.EXTRA_USER_HANDLE,0));
      }
    }
  }
,UserHandle.ALL,intentFilter,null,null);
}
