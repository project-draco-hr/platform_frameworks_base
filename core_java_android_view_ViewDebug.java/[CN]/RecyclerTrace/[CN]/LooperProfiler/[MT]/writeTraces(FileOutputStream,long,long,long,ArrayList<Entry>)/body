{
  FileChannel channel=out.getChannel();
  ByteBuffer buffer=ByteBuffer.allocateDirect(HEADER_SIZE);
  buffer.put(HEADER_MAGIC.getBytes());
  buffer=buffer.order(ByteOrder.LITTLE_ENDIAN);
  buffer.putShort((short)TRACE_VERSION_NUMBER);
  buffer.putShort((short)HEADER_SIZE);
  buffer.putLong(wallStart);
  buffer.putShort(HEADER_RECORD_SIZE);
  for (int i=0; i < HEADER_SIZE - 18; i++) {
    buffer.put((byte)0);
  }
  buffer.flip();
  channel.position(offset).write(buffer);
  buffer=ByteBuffer.allocateDirect(14).order(ByteOrder.LITTLE_ENDIAN);
  for (  Entry entry : entries) {
    buffer.putShort((short)1);
    buffer.putInt(entry.traceId);
    buffer.putInt((int)(entry.threadStart - threadStart));
    buffer.putInt((int)(entry.wallStart - wallStart));
    buffer.flip();
    channel.write(buffer);
    buffer.clear();
    buffer.putShort((short)1);
    buffer.putInt(entry.traceId | ACTION_EXIT_METHOD);
    buffer.putInt((int)(entry.threadStart + entry.threadTime - threadStart));
    buffer.putInt((int)(entry.wallStart + entry.wallTime - wallStart));
    buffer.flip();
    channel.write(buffer);
    buffer.clear();
  }
  channel.close();
}
