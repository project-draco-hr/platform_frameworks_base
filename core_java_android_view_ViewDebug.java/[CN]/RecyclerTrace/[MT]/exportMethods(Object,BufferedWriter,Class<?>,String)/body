{
  final Method[] methods=getExportedPropertyMethods(klass);
  int count=methods.length;
  for (int i=0; i < count; i++) {
    final Method method=methods[i];
    try {
      Object methodValue=method.invoke(view,(Object[])null);
      final Class<?> returnType=method.getReturnType();
      if (returnType == int.class) {
        ExportedProperty property=method.getAnnotation(ExportedProperty.class);
        if (property.resolveId() && view instanceof View) {
          final Resources resources=((View)view).getContext().getResources();
          final int id=(Integer)methodValue;
          if (id >= 0) {
            methodValue=resources.getResourceTypeName(id) + '/' + resources.getResourceEntryName(id);
          }
 else {
            methodValue="NO_ID";
          }
        }
 else {
          final IntToString[] mapping=property.mapping();
          if (mapping.length > 0) {
            final int intValue=(Integer)methodValue;
            boolean mapped=false;
            int mappingCount=mapping.length;
            for (int j=0; j < mappingCount; j++) {
              final IntToString mapper=mapping[j];
              if (mapper.from() == intValue) {
                methodValue=mapper.to();
                mapped=true;
                break;
              }
            }
            if (!mapped) {
              methodValue=intValue;
            }
          }
        }
      }
 else       if (!returnType.isPrimitive()) {
        ExportedProperty property=method.getAnnotation(ExportedProperty.class);
        if (property.deepExport()) {
          dumpViewProperties(methodValue,out,prefix + property.prefix());
          continue;
        }
      }
      out.write(prefix);
      out.write(method.getName());
      out.write("()=");
      if (methodValue != null) {
        final String value=methodValue.toString().replace("\n","\\n");
        out.write(String.valueOf(value.length()));
        out.write(",");
        out.write(value);
      }
 else {
        out.write("4,null");
      }
      out.write(' ');
    }
 catch (    IllegalAccessException e) {
    }
catch (    InvocationTargetException e) {
    }
  }
}
