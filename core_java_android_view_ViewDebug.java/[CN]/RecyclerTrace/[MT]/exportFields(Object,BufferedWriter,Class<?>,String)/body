{
  final Field[] fields=getExportedPropertyFields(klass);
  int count=fields.length;
  for (int i=0; i < count; i++) {
    final Field field=fields[i];
    try {
      Object fieldValue=null;
      final Class<?> type=field.getType();
      if (type == int.class) {
        ExportedProperty property=field.getAnnotation(ExportedProperty.class);
        if (property.resolveId() && view instanceof View) {
          final Resources resources=((View)view).getContext().getResources();
          final int id=field.getInt(view);
          if (id >= 0) {
            fieldValue=resources.getResourceTypeName(id) + '/' + resources.getResourceEntryName(id);
          }
 else {
            fieldValue="NO_ID";
          }
        }
 else {
          final IntToString[] mapping=property.mapping();
          if (mapping.length > 0) {
            final int intValue=field.getInt(view);
            int mappingCount=mapping.length;
            for (int j=0; j < mappingCount; j++) {
              final IntToString mapped=mapping[j];
              if (mapped.from() == intValue) {
                fieldValue=mapped.to();
                break;
              }
            }
            if (fieldValue == null) {
              fieldValue=intValue;
            }
          }
        }
      }
 else       if (!type.isPrimitive()) {
        ExportedProperty property=field.getAnnotation(ExportedProperty.class);
        if (property.deepExport()) {
          dumpViewProperties(field.get(view),out,prefix + property.prefix());
          continue;
        }
      }
      if (fieldValue == null) {
        fieldValue=field.get(view);
      }
      out.write(prefix);
      out.write(field.getName());
      out.write('=');
      if (fieldValue != null) {
        final String value=fieldValue.toString().replace("\n","\\n");
        out.write(String.valueOf(value.length()));
        out.write(",");
        out.write(value);
      }
 else {
        out.write("4,null");
      }
      out.write(' ');
    }
 catch (    IllegalAccessException e) {
    }
  }
}
