{
  if (sMethodsForClasses == null) {
    sMethodsForClasses=new HashMap<Class<?>,Method[]>(100);
  }
  if (sAnnotations == null) {
    sAnnotations=new HashMap<AccessibleObject,ExportedProperty>(512);
  }
  final HashMap<Class<?>,Method[]> map=sMethodsForClasses;
  final HashMap<AccessibleObject,ExportedProperty> annotations=sAnnotations;
  Method[] methods=map.get(klass);
  if (methods != null) {
    return methods;
  }
  final ArrayList<Method> foundMethods=new ArrayList<Method>();
  methods=klass.getDeclaredMethods();
  int count=methods.length;
  for (int i=0; i < count; i++) {
    final Method method=methods[i];
    if (method.getParameterTypes().length == 0 && method.isAnnotationPresent(ExportedProperty.class) && method.getReturnType() != Void.class) {
      method.setAccessible(true);
      foundMethods.add(method);
      annotations.put(method,method.getAnnotation(ExportedProperty.class));
    }
  }
  methods=foundMethods.toArray(new Method[foundMethods.size()]);
  map.put(klass,methods);
  return methods;
}
