{
  if (!TRACE_RECYCLER) {
    return;
  }
  if (sRecyclerOwnerView == null || sRecyclerViews == null) {
    throw new IllegalStateException("You must call startRecyclerTracing() before" + " stopRecyclerTracing()!");
  }
  File recyclerDump=new File(Environment.getExternalStorageDirectory(),"view-recycler/");
  recyclerDump.mkdirs();
  recyclerDump=new File(recyclerDump,sRecyclerTracePrefix + ".recycler");
  try {
    final BufferedWriter out=new BufferedWriter(new FileWriter(recyclerDump),8 * 1024);
    for (    View view : sRecyclerViews) {
      final String name=view.getClass().getName();
      out.write(name);
      out.newLine();
    }
    out.close();
  }
 catch (  IOException e) {
    Log.e("View","Could not dump recycler content");
    return;
  }
  recyclerDump=new File(Environment.getExternalStorageDirectory(),"view-recycler/");
  recyclerDump=new File(recyclerDump,sRecyclerTracePrefix + ".traces");
  try {
    final FileOutputStream file=new FileOutputStream(recyclerDump);
    final DataOutputStream out=new DataOutputStream(file);
    for (    RecyclerTrace trace : sRecyclerTraces) {
      out.writeInt(trace.view);
      out.writeInt(trace.type.ordinal());
      out.writeInt(trace.position);
      out.writeInt(trace.indexOnScreen);
      out.flush();
    }
    out.close();
  }
 catch (  IOException e) {
    Log.e("View","Could not dump recycler traces");
    return;
  }
  sRecyclerViews.clear();
  sRecyclerViews=null;
  sRecyclerTraces.clear();
  sRecyclerTraces=null;
  sRecyclerOwnerView=null;
}
