{
  if (r == null)   return;
  AnimatorListener listener=null;
  if (show) {
    if (mDetailRecord != null)     return;
    r.detailAdapter=r.tile.getDetailAdapter();
    if (r.detailAdapter == null)     return;
    mDetailRecord=r;
    r.detailView=r.detailAdapter.createDetailView(mContext,r.detailView,mDetailContent);
    if (r.detailView == null)     throw new IllegalStateException("Must return detail view");
    mDetailDoneButton.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        showDetail(false,mDetailRecord);
      }
    }
);
    final Intent settingsIntent=r.detailAdapter.getSettingsIntent();
    mDetailSettingsButton.setVisibility(settingsIntent != null ? VISIBLE : GONE);
    mDetailSettingsButton.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        mDetailRecord.tile.mHost.startSettingsActivity(settingsIntent);
      }
    }
);
    mDetailContent.removeAllViews();
    mDetail.bringToFront();
    mDetailContent.addView(r.detailView);
  }
 else {
    if (mDetailRecord == null)     return;
    listener=mTeardownDetailWhenDone;
  }
  fireShowingDetail(show ? r.detailAdapter : null);
  int x=r.tileView.getLeft() + r.tileView.getWidth() / 2;
  int y=r.tileView.getTop() + r.tileView.getHeight() / 2;
  mClipper.animateCircularClip(x,y,show,listener);
}
