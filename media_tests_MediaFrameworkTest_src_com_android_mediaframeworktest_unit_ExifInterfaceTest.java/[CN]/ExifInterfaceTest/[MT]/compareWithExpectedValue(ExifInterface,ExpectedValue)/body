{
  assertEquals(expectedValue.hasThumbnail,exifInterface.hasThumbnail());
  if (expectedValue.hasThumbnail) {
    byte[] thumbnailBytes=exifInterface.getThumbnail();
    assertNotNull(thumbnailBytes);
    Bitmap thumbnailBitmap=BitmapFactory.decodeByteArray(thumbnailBytes,0,thumbnailBytes.length);
    assertNotNull(thumbnailBitmap);
    assertEquals(expectedValue.thumbnailWidth,thumbnailBitmap.getWidth());
    assertEquals(expectedValue.thumbnailHeight,thumbnailBitmap.getHeight());
  }
 else {
    assertNull(exifInterface.getThumbnail());
  }
  float[] latLong=new float[2];
  assertEquals(expectedValue.hasLatLong,exifInterface.getLatLong(latLong));
  if (expectedValue.hasLatLong) {
    assertEquals(expectedValue.latitude,latLong[0],DIFFERENCE_TOLERANCE);
    assertEquals(expectedValue.longitude,latLong[1],DIFFERENCE_TOLERANCE);
  }
  assertEquals(expectedValue.altitude,exifInterface.getAltitude(.0),DIFFERENCE_TOLERANCE);
  compareStringTag(exifInterface,ExifInterface.TAG_MAKE,expectedValue.make);
  compareStringTag(exifInterface,ExifInterface.TAG_MODEL,expectedValue.model);
  compareFloatTag(exifInterface,ExifInterface.TAG_APERTURE,expectedValue.aperture);
  compareStringTag(exifInterface,ExifInterface.TAG_DATETIME,expectedValue.datetime);
  compareFloatTag(exifInterface,ExifInterface.TAG_EXPOSURE_TIME,expectedValue.exposureTime);
  compareFloatTag(exifInterface,ExifInterface.TAG_FLASH,expectedValue.flash);
  compareStringTag(exifInterface,ExifInterface.TAG_FOCAL_LENGTH,expectedValue.focalLength);
  compareStringTag(exifInterface,ExifInterface.TAG_GPS_ALTITUDE,expectedValue.gpsAltitude);
  compareStringTag(exifInterface,ExifInterface.TAG_GPS_ALTITUDE_REF,expectedValue.gpsAltitudeRef);
  compareStringTag(exifInterface,ExifInterface.TAG_GPS_DATESTAMP,expectedValue.gpsDatestamp);
  compareStringTag(exifInterface,ExifInterface.TAG_GPS_LATITUDE,expectedValue.gpsLatitude);
  compareStringTag(exifInterface,ExifInterface.TAG_GPS_LATITUDE_REF,expectedValue.gpsLatitudeRef);
  compareStringTag(exifInterface,ExifInterface.TAG_GPS_LONGITUDE,expectedValue.gpsLongitude);
  compareStringTag(exifInterface,ExifInterface.TAG_GPS_LONGITUDE_REF,expectedValue.gpsLongitudeRef);
  compareStringTag(exifInterface,ExifInterface.TAG_GPS_PROCESSING_METHOD,expectedValue.gpsProcessingMethod);
  compareStringTag(exifInterface,ExifInterface.TAG_GPS_TIMESTAMP,expectedValue.gpsTimestamp);
  compareStringTag(exifInterface,ExifInterface.TAG_IMAGE_LENGTH,expectedValue.imageLength);
  compareStringTag(exifInterface,ExifInterface.TAG_IMAGE_WIDTH,expectedValue.imageWidth);
  compareStringTag(exifInterface,ExifInterface.TAG_ISO,expectedValue.iso);
  compareStringTag(exifInterface,ExifInterface.TAG_ORIENTATION,expectedValue.orientation);
  compareStringTag(exifInterface,ExifInterface.TAG_WHITE_BALANCE,expectedValue.whiteBalance);
}
