{
  if (mPowerCharged) {
    return mContext.getResources().getString(R.string.keyguard_charged);
  }
  long chargingTimeRemaining=0;
  try {
    chargingTimeRemaining=mBatteryInfo.computeChargeTimeRemaining();
  }
 catch (  RemoteException e) {
    Log.e(TAG,"Error calling IBatteryStats: ",e);
  }
  final boolean hasChargingTime=chargingTimeRemaining > 0;
  int chargingId;
switch (mChargingSpeed) {
case KeyguardUpdateMonitor.BatteryStatus.CHARGING_FAST:
    chargingId=hasChargingTime ? R.string.keyguard_indication_charging_time_fast_if_translated : R.string.keyguard_plugged_in_charging_fast;
  break;
case KeyguardUpdateMonitor.BatteryStatus.CHARGING_SLOWLY:
chargingId=hasChargingTime ? R.string.keyguard_indication_charging_time_slowly_if_translated : R.string.keyguard_plugged_in_charging_slowly;
break;
default :
chargingId=hasChargingTime ? R.string.keyguard_indication_charging_time : R.string.keyguard_plugged_in;
break;
}
if (hasChargingTime) {
String chargingTimeFormatted=Formatter.formatShortElapsedTimeRoundingUpToMinutes(mContext,chargingTimeRemaining);
return mContext.getResources().getString(chargingId,chargingTimeFormatted);
}
 else {
return mContext.getResources().getString(chargingId);
}
}
