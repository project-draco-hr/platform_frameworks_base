{
  KeyGeneratorSpec spec=mSpec;
  if (spec == null) {
    throw new IllegalStateException("Not initialized");
  }
  if ((spec.isEncryptionRequired()) && (mKeyStore.state() != KeyStore.State.UNLOCKED)) {
    throw new IllegalStateException("Android KeyStore must be in initialized and unlocked state if encryption is" + " required");
  }
  KeymasterArguments args=new KeymasterArguments();
  args.addInt(KeymasterDefs.KM_TAG_KEY_SIZE,mKeySizeBits);
  args.addInt(KeymasterDefs.KM_TAG_ALGORITHM,mKeymasterAlgorithm);
  if (mKeymasterDigest != -1) {
    args.addInt(KeymasterDefs.KM_TAG_DIGEST,mKeymasterDigest);
  }
  args.addInts(KeymasterDefs.KM_TAG_PURPOSE,mKeymasterPurposes);
  args.addInts(KeymasterDefs.KM_TAG_BLOCK_MODE,mKeymasterBlockModes);
  args.addInts(KeymasterDefs.KM_TAG_PADDING,mKeymasterPaddings);
  KeymasterUtils.addUserAuthArgs(args,spec.getContext(),spec.isUserAuthenticationRequired(),spec.getUserAuthenticationValidityDurationSeconds());
  args.addDate(KeymasterDefs.KM_TAG_ACTIVE_DATETIME,(spec.getKeyValidityStart() != null) ? spec.getKeyValidityStart() : new Date(0));
  args.addDate(KeymasterDefs.KM_TAG_ORIGINATION_EXPIRE_DATETIME,(spec.getKeyValidityForOriginationEnd() != null) ? spec.getKeyValidityForOriginationEnd() : new Date(Long.MAX_VALUE));
  args.addDate(KeymasterDefs.KM_TAG_USAGE_EXPIRE_DATETIME,(spec.getKeyValidityForConsumptionEnd() != null) ? spec.getKeyValidityForConsumptionEnd() : new Date(Long.MAX_VALUE));
  if (((spec.getPurposes() & KeyStoreKeyProperties.PURPOSE_ENCRYPT) != 0) && (!spec.isRandomizedEncryptionRequired())) {
    args.addBoolean(KeymasterDefs.KM_TAG_CALLER_NONCE);
  }
  byte[] additionalEntropy=KeyStoreCryptoOperationUtils.getRandomBytesToMixIntoKeystoreRng(mRng,(mKeySizeBits + 7) / 8);
  int flags=spec.getFlags();
  String keyAliasInKeystore=Credentials.USER_SECRET_KEY + spec.getKeystoreAlias();
  KeyCharacteristics resultingKeyCharacteristics=new KeyCharacteristics();
  int errorCode=mKeyStore.generateKey(keyAliasInKeystore,args,additionalEntropy,flags,resultingKeyCharacteristics);
  if (errorCode != KeyStore.NO_ERROR) {
    throw new ProviderException("Keystore operation failed",KeyStore.getKeyStoreException(errorCode));
  }
  @KeyStoreKeyProperties.KeyAlgorithmEnum String keyAlgorithmJCA;
  try {
    keyAlgorithmJCA=KeyStoreKeyProperties.KeyAlgorithm.fromKeymasterSecretKeyAlgorithm(mKeymasterAlgorithm,mKeymasterDigest);
  }
 catch (  IllegalArgumentException e) {
    throw new ProviderException("Failed to obtain JCA secret key algorithm name",e);
  }
  return new KeyStoreSecretKey(keyAliasInKeystore,keyAlgorithmJCA);
}
