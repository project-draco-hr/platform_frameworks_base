{
  KeyGeneratorSpec spec=mSpec;
  if (spec == null) {
    throw new IllegalStateException("Not initialized");
  }
  if ((spec.isEncryptionRequired()) && (mKeyStore.state() != KeyStore.State.UNLOCKED)) {
    throw new IllegalStateException("Android KeyStore must be in initialized and unlocked state if encryption is" + " required");
  }
  KeymasterArguments args=new KeymasterArguments();
  args.addInt(KeymasterDefs.KM_TAG_ALGORITHM,mKeymasterAlgorithm);
  if (mKeymasterDigest != -1) {
    args.addInt(KeymasterDefs.KM_TAG_DIGEST,mKeymasterDigest);
  }
  if (mKeymasterAlgorithm == KeymasterDefs.KM_ALGORITHM_HMAC) {
    if (mKeymasterDigest == -1) {
      throw new IllegalStateException("Digest algorithm must be specified for HMAC key");
    }
  }
  int keySizeBits=(spec.getKeySize() != -1) ? spec.getKeySize() : mDefaultKeySizeBits;
  args.addInt(KeymasterDefs.KM_TAG_KEY_SIZE,keySizeBits);
  @KeyStoreKeyProperties.PurposeEnum int purposes=spec.getPurposes();
  int[] keymasterBlockModes=KeyStoreKeyProperties.BlockMode.allToKeymaster(spec.getBlockModes());
  if (((purposes & KeyStoreKeyProperties.Purpose.ENCRYPT) != 0) && (spec.isRandomizedEncryptionRequired())) {
    for (    int keymasterBlockMode : keymasterBlockModes) {
      if (!KeymasterUtils.isKeymasterBlockModeIndCpaCompatible(keymasterBlockMode)) {
        throw new IllegalStateException("Randomized encryption (IND-CPA) required but may be violated by block" + " mode: " + KeyStoreKeyProperties.BlockMode.fromKeymaster(keymasterBlockMode) + ". See KeyGeneratorSpec documentation.");
      }
    }
  }
  for (  int keymasterPurpose : KeyStoreKeyProperties.Purpose.allToKeymaster(purposes)) {
    args.addInt(KeymasterDefs.KM_TAG_PURPOSE,keymasterPurpose);
  }
  args.addInts(KeymasterDefs.KM_TAG_BLOCK_MODE,keymasterBlockModes);
  args.addInts(KeymasterDefs.KM_TAG_PADDING,KeyStoreKeyProperties.EncryptionPadding.allToKeymaster(spec.getEncryptionPaddings()));
  KeymasterUtils.addUserAuthArgs(args,spec.getContext(),spec.isUserAuthenticationRequired(),spec.getUserAuthenticationValidityDurationSeconds());
  args.addDate(KeymasterDefs.KM_TAG_ACTIVE_DATETIME,(spec.getKeyValidityStart() != null) ? spec.getKeyValidityStart() : new Date(0));
  args.addDate(KeymasterDefs.KM_TAG_ORIGINATION_EXPIRE_DATETIME,(spec.getKeyValidityForOriginationEnd() != null) ? spec.getKeyValidityForOriginationEnd() : new Date(Long.MAX_VALUE));
  args.addDate(KeymasterDefs.KM_TAG_USAGE_EXPIRE_DATETIME,(spec.getKeyValidityForConsumptionEnd() != null) ? spec.getKeyValidityForConsumptionEnd() : new Date(Long.MAX_VALUE));
  if (((purposes & KeyStoreKeyProperties.Purpose.ENCRYPT) != 0) && (!spec.isRandomizedEncryptionRequired())) {
    args.addBoolean(KeymasterDefs.KM_TAG_CALLER_NONCE);
  }
  byte[] additionalEntropy=KeyStoreCryptoOperationUtils.getRandomBytesToMixIntoKeystoreRng(mRng,(keySizeBits + 7) / 8);
  int flags=spec.getFlags();
  String keyAliasInKeystore=Credentials.USER_SECRET_KEY + spec.getKeystoreAlias();
  int errorCode=mKeyStore.generateKey(keyAliasInKeystore,args,additionalEntropy,flags,new KeyCharacteristics());
  if (errorCode != KeyStore.NO_ERROR) {
    throw new IllegalStateException("Keystore operation failed",KeyStore.getKeyStoreException(errorCode));
  }
  @KeyStoreKeyProperties.AlgorithmEnum String keyAlgorithmJCA=KeyStoreKeyProperties.Algorithm.fromKeymasterSecretKeyAlgorithm(mKeymasterAlgorithm,mKeymasterDigest);
  return new KeyStoreSecretKey(keyAliasInKeystore,keyAlgorithmJCA);
}
