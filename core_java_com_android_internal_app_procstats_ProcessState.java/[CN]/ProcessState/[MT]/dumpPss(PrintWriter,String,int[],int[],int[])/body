{
  boolean printedHeader=false;
  int printedScreen=-1;
  for (int is=0; is < screenStates.length; is++) {
    int printedMem=-1;
    for (int im=0; im < memStates.length; im++) {
      for (int ip=0; ip < procStates.length; ip++) {
        final int iscreen=screenStates[is];
        final int imem=memStates[im];
        final int bucket=((iscreen + imem) * STATE_COUNT) + procStates[ip];
        long count=getPssSampleCount(bucket);
        if (count > 0) {
          if (!printedHeader) {
            pw.print(prefix);
            pw.print("PSS/USS (");
            pw.print(mPssTable.getKeyCount());
            pw.println(" entries):");
            printedHeader=true;
          }
          pw.print(prefix);
          pw.print("  ");
          if (screenStates.length > 1) {
            DumpUtils.printScreenLabel(pw,printedScreen != iscreen ? iscreen : STATE_NOTHING);
            printedScreen=iscreen;
          }
          if (memStates.length > 1) {
            DumpUtils.printMemLabel(pw,printedMem != imem ? imem : STATE_NOTHING,'/');
            printedMem=imem;
          }
          pw.print(DumpUtils.STATE_NAMES[procStates[ip]]);
          pw.print(": ");
          pw.print(count);
          pw.print(" samples ");
          DebugUtils.printSizeValue(pw,getPssMinimum(bucket) * 1024);
          pw.print(" ");
          DebugUtils.printSizeValue(pw,getPssAverage(bucket) * 1024);
          pw.print(" ");
          DebugUtils.printSizeValue(pw,getPssMaximum(bucket) * 1024);
          pw.print(" / ");
          DebugUtils.printSizeValue(pw,getPssUssMinimum(bucket) * 1024);
          pw.print(" ");
          DebugUtils.printSizeValue(pw,getPssUssAverage(bucket) * 1024);
          pw.print(" ");
          DebugUtils.printSizeValue(pw,getPssUssMaximum(bucket) * 1024);
          pw.println();
        }
      }
    }
  }
  if (mNumExcessiveWake != 0) {
    pw.print(prefix);
    pw.print("Killed for excessive wake locks: ");
    pw.print(mNumExcessiveWake);
    pw.println(" times");
  }
  if (mNumExcessiveCpu != 0) {
    pw.print(prefix);
    pw.print("Killed for excessive CPU use: ");
    pw.print(mNumExcessiveCpu);
    pw.println(" times");
  }
  if (mNumCachedKill != 0) {
    pw.print(prefix);
    pw.print("Killed from cached state: ");
    pw.print(mNumCachedKill);
    pw.print(" times from pss ");
    DebugUtils.printSizeValue(pw,mMinCachedKillPss * 1024);
    pw.print("-");
    DebugUtils.printSizeValue(pw,mAvgCachedKillPss * 1024);
    pw.print("-");
    DebugUtils.printSizeValue(pw,mMaxCachedKillPss * 1024);
    pw.println();
  }
}
