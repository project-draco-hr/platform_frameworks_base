{
  byte[] bcdNumber;
  byte[] byteTag;
  byte[] adnString=null;
  int footerOffset=recordSize - FOOTER_SIZE_BYTES;
  if (number == null || number.equals("") || alphaTag == null || alphaTag.equals("")) {
    Log.w(LOG_TAG,"[buildAdnString] Empty alpha tag or number");
    adnString=new byte[recordSize];
    for (int i=0; i < recordSize; i++) {
      adnString[i]=(byte)0xFF;
    }
  }
 else   if (number.length() > (ADN_DAILING_NUMBER_END - ADN_DAILING_NUMBER_START + 1) * 2) {
    Log.w(LOG_TAG,"[buildAdnString] Max length of dailing number is 20");
  }
 else   if (alphaTag.length() > footerOffset) {
    Log.w(LOG_TAG,"[buildAdnString] Max length of tag is " + footerOffset);
  }
 else {
    adnString=new byte[recordSize];
    for (int i=0; i < recordSize; i++) {
      adnString[i]=(byte)0xFF;
    }
    bcdNumber=PhoneNumberUtils.numberToCalledPartyBCD(number);
    System.arraycopy(bcdNumber,0,adnString,footerOffset + ADN_TON_AND_NPI,bcdNumber.length);
    adnString[footerOffset + ADN_BCD_NUMBER_LENGTH]=(byte)(bcdNumber.length);
    adnString[footerOffset + ADN_CAPABILITY_ID]=(byte)0xFF;
    adnString[footerOffset + ADN_EXTENSION_ID]=(byte)0xFF;
    byteTag=GsmAlphabet.stringToGsm8BitPacked(alphaTag);
    System.arraycopy(byteTag,0,adnString,0,byteTag.length);
  }
  return adnString;
}
