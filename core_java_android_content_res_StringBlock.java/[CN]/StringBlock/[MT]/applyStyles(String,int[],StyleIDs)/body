{
  if (style.length == 0)   return str;
  SpannableString buffer=new SpannableString(str);
  int i=0;
  while (i < style.length) {
    int type=style[i];
    if (localLOGV)     Log.v(TAG,"Applying style span id=" + type + ", start="+ style[i + 1]+ ", end="+ style[i + 2]);
    if (type == ids.boldId) {
      buffer.setSpan(new StyleSpan(Typeface.BOLD),style[i + 1],style[i + 2] + 1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
    }
 else     if (type == ids.italicId) {
      buffer.setSpan(new StyleSpan(Typeface.ITALIC),style[i + 1],style[i + 2] + 1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
    }
 else     if (type == ids.underlineId) {
      buffer.setSpan(new UnderlineSpan(),style[i + 1],style[i + 2] + 1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
    }
 else     if (type == ids.ttId) {
      buffer.setSpan(new TypefaceSpan("monospace"),style[i + 1],style[i + 2] + 1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
    }
 else     if (type == ids.bigId) {
      buffer.setSpan(new RelativeSizeSpan(1.25f),style[i + 1],style[i + 2] + 1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
    }
 else     if (type == ids.smallId) {
      buffer.setSpan(new RelativeSizeSpan(0.8f),style[i + 1],style[i + 2] + 1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
    }
 else     if (type == ids.subId) {
      buffer.setSpan(new SubscriptSpan(),style[i + 1],style[i + 2] + 1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
    }
 else     if (type == ids.supId) {
      buffer.setSpan(new SuperscriptSpan(),style[i + 1],style[i + 2] + 1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
    }
 else     if (type == ids.strikeId) {
      buffer.setSpan(new StrikethroughSpan(),style[i + 1],style[i + 2] + 1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
    }
 else     if (type == ids.listItemId) {
      addParagraphSpan(buffer,new BulletSpan(10),style[i + 1],style[i + 2] + 1);
    }
 else     if (type == ids.marqueeId) {
      buffer.setSpan(TextUtils.TruncateAt.MARQUEE,style[i + 1],style[i + 2] + 1,Spannable.SPAN_INCLUSIVE_INCLUSIVE);
    }
 else {
      String tag=nativeGetString(mNative,type);
      if (tag.startsWith("font;")) {
        String sub;
        sub=subtag(tag,";height=");
        if (sub != null) {
          int size=Integer.parseInt(sub);
          addParagraphSpan(buffer,new Height(size),style[i + 1],style[i + 2] + 1);
        }
        sub=subtag(tag,";size=");
        if (sub != null) {
          int size=Integer.parseInt(sub);
          buffer.setSpan(new AbsoluteSizeSpan(size,true),style[i + 1],style[i + 2] + 1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
        }
        sub=subtag(tag,";fgcolor=");
        if (sub != null) {
          buffer.setSpan(getColor(sub,true),style[i + 1],style[i + 2] + 1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
        }
        sub=subtag(tag,";color=");
        if (sub != null) {
          buffer.setSpan(getColor(sub,true),style[i + 1],style[i + 2] + 1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
        }
        sub=subtag(tag,";bgcolor=");
        if (sub != null) {
          buffer.setSpan(getColor(sub,false),style[i + 1],style[i + 2] + 1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
        }
        sub=subtag(tag,";face=");
        if (sub != null) {
          buffer.setSpan(new TypefaceSpan(sub),style[i + 1],style[i + 2] + 1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
        }
      }
 else       if (tag.startsWith("a;")) {
        String sub;
        sub=subtag(tag,";href=");
        if (sub != null) {
          buffer.setSpan(new URLSpan(sub),style[i + 1],style[i + 2] + 1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
        }
      }
 else       if (tag.startsWith("annotation;")) {
        int len=tag.length();
        int next;
        for (int t=tag.indexOf(';'); t < len; t=next) {
          int eq=tag.indexOf('=',t);
          if (eq < 0) {
            break;
          }
          next=tag.indexOf(';',eq);
          if (next < 0) {
            next=len;
          }
          String key=tag.substring(t + 1,eq);
          String value=tag.substring(eq + 1,next);
          buffer.setSpan(new Annotation(key,value),style[i + 1],style[i + 2] + 1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
        }
      }
    }
    i+=3;
  }
  return new SpannedString(buffer);
}
