{
  ResourceBundle.LayoutFileBundle bundle=new ResourceBundle.LayoutFileBundle(ParserHelper.INSTANCE$.stripExtension(xml.getName()));
  L.d("parsing file %s",xml.getAbsolutePath());
  bundle.setTransientFile(xml);
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  final DocumentBuilder builder=factory.newDocumentBuilder();
  final Document doc=builder.parse(xml);
  final XPathFactory xPathFactory=XPathFactory.newInstance();
  final XPath xPath=xPathFactory.newXPath();
  List<Node> variableNodes=getVariableNodes(doc,xPath);
  L.d("number of variable nodes %d",variableNodes.size());
  for (  Node item : variableNodes) {
    L.d("reading variable node %s",item);
    NamedNodeMap attributes=item.getAttributes();
    String variableName=attributes.getNamedItem("name").getNodeValue();
    String variableType=attributes.getNamedItem("type").getNodeValue();
    L.d("name: %s, type:%s",variableName,variableType);
    bundle.addVariable(variableName,variableType);
  }
  final List<Node> imports=getImportNodes(doc,xPath);
  L.d("import node count %d",imports.size());
  for (  Node item : imports) {
    NamedNodeMap attributes=item.getAttributes();
    String type=attributes.getNamedItem("type").getNodeValue();
    final Node aliasNode=attributes.getNamedItem("alias");
    final String alias;
    if (aliasNode == null) {
      final String[] split=StringUtils.split(type,'.');
      alias=split[split.length - 1];
    }
 else {
      alias=aliasNode.getNodeValue();
    }
    bundle.addImport(alias,type);
  }
  final List<Node> bindingNodes=getBindingNodes(doc,xPath);
  L.d("number of binding nodes %d",bindingNodes.size());
  for (  Node parent : bindingNodes) {
    NamedNodeMap attributes=parent.getAttributes();
    Node id=attributes.getNamedItem("android:id");
    if (id != null) {
      String nodeName=parent.getNodeName();
      String layoutName=null;
      final String fullClassName;
      if ("include".equals(nodeName)) {
        final Node includedLayout=attributes.getNamedItem("layout");
        Preconditions.checkNotNull(includedLayout,"must include a layout");
        final String includeValue=includedLayout.getNodeValue();
        Preconditions.checkArgument(includeValue.startsWith(LAYOUT_PREFIX));
        layoutName=includeValue.substring(LAYOUT_PREFIX.length());
        L.d("replaced node name to " + nodeName);
        fullClassName=pkg + ".generated." + ParserHelper.INSTANCE$.toClassName(layoutName)+ "Binder";
      }
 else {
        fullClassName=getFullViewClassName(nodeName);
      }
      final ResourceBundle.BindingTargetBundle bindingTargetBundle=bundle.createBindingTarget(id.getNodeValue(),fullClassName,true);
      bindingTargetBundle.setIncludedLayout(layoutName);
      int attrCount=attributes.getLength();
      for (int i=0; i < attrCount; i++) {
        final Node attr=attributes.item(i);
        String value=attr.getNodeValue();
        if (value.charAt(0) == '@' && value.charAt(1) == '{' && value.charAt(value.length() - 1) == '}') {
          final String strippedValue=value.substring(2,value.length() - 1);
          bindingTargetBundle.addBinding(attr.getNodeName(),strippedValue);
        }
      }
    }
 else {
      throw new RuntimeException("data binding requires id for now.");
    }
  }
  return bundle;
}
