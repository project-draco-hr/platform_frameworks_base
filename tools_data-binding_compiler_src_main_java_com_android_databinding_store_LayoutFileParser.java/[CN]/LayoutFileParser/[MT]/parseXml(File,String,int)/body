{
  File original=stripFileAndGetOriginal(xml,"" + layoutId);
  if (original == null) {
    L.d("assuming the file is the original for %s",xml.getAbsoluteFile());
    original=xml;
  }
  L.d("parsing file %s",xml.getAbsolutePath());
  ResourceBundle.LayoutFileBundle bundle=new ResourceBundle.LayoutFileBundle(ParserHelper.INSTANCE$.stripExtension(xml.getName()),layoutId,xml.getParentFile().getName());
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  final DocumentBuilder builder=factory.newDocumentBuilder();
  final Document doc=builder.parse(original);
  final XPathFactory xPathFactory=XPathFactory.newInstance();
  final XPath xPath=xPathFactory.newXPath();
  List<Node> variableNodes=getVariableNodes(doc,xPath);
  L.d("number of variable nodes %d",variableNodes.size());
  for (  Node item : variableNodes) {
    L.d("reading variable node %s",item);
    NamedNodeMap attributes=item.getAttributes();
    String variableName=attributes.getNamedItem("name").getNodeValue();
    String variableType=attributes.getNamedItem("type").getNodeValue();
    L.d("name: %s, type:%s",variableName,variableType);
    bundle.addVariable(variableName,variableType);
  }
  final List<Node> imports=getImportNodes(doc,xPath);
  L.d("import node count %d",imports.size());
  for (  Node item : imports) {
    NamedNodeMap attributes=item.getAttributes();
    String type=attributes.getNamedItem("type").getNodeValue();
    final Node aliasNode=attributes.getNamedItem("alias");
    final String alias;
    if (aliasNode == null) {
      final String[] split=StringUtils.split(type,'.');
      alias=split[split.length - 1];
    }
 else {
      alias=aliasNode.getNodeValue();
    }
    bundle.addImport(alias,type);
  }
  final List<Node> bindingNodes=getBindingNodes(doc,xPath);
  L.d("number of binding nodes %d",bindingNodes.size());
  int tagNumber=0;
  for (  Node parent : bindingNodes) {
    NamedNodeMap attributes=parent.getAttributes();
    String nodeName=parent.getNodeName();
    String className;
    String includedLayoutName=null;
    final Node id=attributes.getNamedItem("android:id");
    if ("include".equals(nodeName)) {
      if (id == null) {
        L.e("<include> must have android:id attribute with binding expressions.");
        throw new RuntimeException("<include> must have android:id attribute " + "with binding expressions.");
      }
      final Node includedLayout=attributes.getNamedItem("layout");
      Preconditions.checkNotNull(includedLayout,"must include a layout");
      final String includeValue=includedLayout.getNodeValue();
      Preconditions.checkArgument(includeValue.startsWith(LAYOUT_PREFIX));
      String layoutName=includeValue.substring(LAYOUT_PREFIX.length());
      className=pkg + ".generated." + ParserHelper.INSTANCE$.toClassName(layoutName)+ "Binder";
      includedLayoutName=layoutName;
    }
 else {
      className=getFullViewClassName(nodeName);
    }
    final Node originalTag=attributes.getNamedItem("android:tag");
    final String tag;
    if (doc.getDocumentElement() == parent) {
      tag=null;
    }
 else {
      tag=String.valueOf(tagNumber++);
    }
    final ResourceBundle.BindingTargetBundle bindingTargetBundle=bundle.createBindingTarget(id == null ? null : id.getNodeValue(),className,true,tag,originalTag == null ? null : originalTag.getNodeValue());
    bindingTargetBundle.setIncludedLayout(includedLayoutName);
    final int attrCount=attributes.getLength();
    for (int i=0; i < attrCount; i++) {
      final Node attr=attributes.item(i);
      String value=attr.getNodeValue();
      if (value.charAt(0) == '@' && value.charAt(1) == '{' && value.charAt(value.length() - 1) == '}') {
        final String strippedValue=value.substring(2,value.length() - 1);
        bindingTargetBundle.addBinding(attr.getNodeName(),strippedValue);
      }
    }
  }
  return bundle;
}
