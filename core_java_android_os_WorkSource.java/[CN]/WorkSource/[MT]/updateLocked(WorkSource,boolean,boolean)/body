{
  int N1=mNum;
  int[] uids1=mUids;
  final int N2=other.mNum;
  final int[] uids2=other.mUids;
  boolean changed=false;
  int i1=0;
  for (int i2=0; i2 < N2; i2++) {
    if (i1 >= N1 || uids2[i2] < uids1[i1]) {
      changed=true;
      if (uids1 == null) {
        uids1=new int[4];
        uids1[0]=uids2[i2];
      }
 else       if (i1 >= uids1.length) {
        int[] newuids=new int[(uids1.length * 3) / 2];
        if (i1 > 0)         System.arraycopy(uids1,0,newuids,0,i1);
        if (i1 < N1)         System.arraycopy(uids1,i1,newuids,i1 + 1,N1 - i1);
        uids1=newuids;
        uids1[i1]=uids2[i2];
      }
 else {
        if (i1 < N1)         System.arraycopy(uids1,i1,uids1,i1 + 1,N1 - i1);
        uids1[i1]=uids2[i2];
      }
      if (returnNewbs) {
        if (sNewbWork == null) {
          sNewbWork=new WorkSource(uids2[i2]);
        }
 else {
          sNewbWork.addLocked(uids2[i2]);
        }
      }
      N1++;
      i1++;
    }
 else {
      if (!set) {
        do {
          i1++;
        }
 while (i1 < N1 && uids2[i2] >= uids1[i1]);
      }
 else {
        int start=i1;
        while (i1 < N1 && uids2[i2] > uids1[i1]) {
          if (sGoneWork == null) {
            sGoneWork=new WorkSource(uids1[i1]);
          }
 else {
            sGoneWork.addLocked(uids1[i1]);
          }
          i1++;
        }
        if (start < i1) {
          System.arraycopy(uids1,i1,uids1,start,i1 - start);
          N1-=i1 - start;
          i1=start;
        }
        if (i1 < N1 && uids2[i1] == uids1[i1]) {
          i1++;
        }
      }
    }
  }
  mNum=N1;
  mUids=uids1;
  return changed;
}
