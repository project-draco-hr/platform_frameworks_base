{
  if (Log.isLoggable(TAG_FILE,Log.VERBOSE)) {
    Slog.v(TAG_FILE,"Writing new " + mAccountInfoFile.getBaseFile());
  }
  FileOutputStream fos=null;
  try {
    fos=mAccountInfoFile.startWrite();
    XmlSerializer out=new FastXmlSerializer();
    out.setOutput(fos,StandardCharsets.UTF_8.name());
    out.startDocument(null,true);
    out.setFeature("http://xmlpull.org/v1/doc/features.html#indent-output",true);
    out.startTag(null,"accounts");
    out.attribute(null,"version",Integer.toString(ACCOUNTS_VERSION));
    out.attribute(null,XML_ATTR_NEXT_AUTHORITY_ID,Integer.toString(mNextAuthorityId));
    out.attribute(null,XML_ATTR_SYNC_RANDOM_OFFSET,Integer.toString(mSyncRandomOffset));
    final int M=mMasterSyncAutomatically.size();
    for (int m=0; m < M; m++) {
      int userId=mMasterSyncAutomatically.keyAt(m);
      Boolean listen=mMasterSyncAutomatically.valueAt(m);
      out.startTag(null,XML_TAG_LISTEN_FOR_TICKLES);
      out.attribute(null,XML_ATTR_USER,Integer.toString(userId));
      out.attribute(null,XML_ATTR_ENABLED,Boolean.toString(listen));
      out.endTag(null,XML_TAG_LISTEN_FOR_TICKLES);
    }
    final int N=mAuthorities.size();
    for (int i=0; i < N; i++) {
      AuthorityInfo authority=mAuthorities.valueAt(i);
      EndPoint info=authority.target;
      out.startTag(null,"authority");
      out.attribute(null,"id",Integer.toString(authority.ident));
      out.attribute(null,XML_ATTR_USER,Integer.toString(info.userId));
      out.attribute(null,XML_ATTR_ENABLED,Boolean.toString(authority.enabled));
      out.attribute(null,"account",info.account.name);
      out.attribute(null,"type",info.account.type);
      out.attribute(null,"authority",info.provider);
      out.attribute(null,"syncable",Integer.toString(authority.syncable));
      out.endTag(null,"authority");
    }
    out.endTag(null,"accounts");
    out.endDocument();
    mAccountInfoFile.finishWrite(fos);
  }
 catch (  java.io.IOException e1) {
    Slog.w(TAG,"Error writing accounts",e1);
    if (fos != null) {
      mAccountInfoFile.failWrite(fos);
    }
  }
}
