{
  BearerData bearerData=new BearerData();
  bearerData.messageType=BearerData.MESSAGE_TYPE_DELIVER;
  bearerData.messageId=0;
  bearerData.hasUserDataHeader=false;
  UserData userData=new UserData();
  userData.payloadStr="test reply option";
  bearerData.userData=userData;
  bearerData.userAckReq=true;
  byte[] encodedSms=BearerData.encode(bearerData);
  BearerData revBearerData=BearerData.decode(encodedSms);
  assertEquals(true,revBearerData.userAckReq);
  assertEquals(false,revBearerData.deliveryAckReq);
  assertEquals(false,revBearerData.readAckReq);
  assertEquals(false,revBearerData.reportReq);
  bearerData.userAckReq=false;
  bearerData.deliveryAckReq=true;
  encodedSms=BearerData.encode(bearerData);
  revBearerData=BearerData.decode(encodedSms);
  assertEquals(false,revBearerData.userAckReq);
  assertEquals(true,revBearerData.deliveryAckReq);
  assertEquals(false,revBearerData.readAckReq);
  assertEquals(false,revBearerData.reportReq);
  bearerData.deliveryAckReq=false;
  bearerData.readAckReq=true;
  encodedSms=BearerData.encode(bearerData);
  revBearerData=BearerData.decode(encodedSms);
  assertEquals(false,revBearerData.userAckReq);
  assertEquals(false,revBearerData.deliveryAckReq);
  assertEquals(true,revBearerData.readAckReq);
  assertEquals(false,revBearerData.reportReq);
  bearerData.readAckReq=false;
  bearerData.reportReq=true;
  encodedSms=BearerData.encode(bearerData);
  revBearerData=BearerData.decode(encodedSms);
  assertEquals(false,revBearerData.userAckReq);
  assertEquals(false,revBearerData.deliveryAckReq);
  assertEquals(false,revBearerData.readAckReq);
  assertEquals(true,revBearerData.reportReq);
}
