{
  if (!isUidValidForRules(uid))   return;
  final IPackageManager ipm=AppGlobals.getPackageManager();
  try {
    if (ipm.checkUidPermission(Manifest.permission.INTERNET,uid) != PackageManager.PERMISSION_GRANTED) {
      return;
    }
  }
 catch (  RemoteException e) {
  }
  final int uidPolicy=mUidPolicy.get(uid,POLICY_NONE);
  final boolean uidForeground=isUidForegroundLocked(uid);
  final boolean uidIdle=isUidIdle(uid);
  int appId=UserHandle.getAppId(uid);
  int uidRules=RULE_ALLOW_ALL;
  if (uidIdle && !mPowerSaveWhitelistAppIds.get(appId) && !mPowerSaveTempWhitelistAppIds.get(appId)) {
    uidRules=RULE_REJECT_ALL;
  }
 else   if (!uidForeground && (uidPolicy & POLICY_REJECT_METERED_BACKGROUND) != 0) {
    uidRules=RULE_REJECT_METERED;
  }
 else   if (mRestrictBackground) {
    if (!uidForeground) {
      uidRules=RULE_REJECT_METERED;
    }
  }
 else   if (mRestrictPower) {
    final boolean whitelisted=mPowerSaveWhitelistAppIds.get(appId) || mPowerSaveTempWhitelistAppIds.get(appId);
    if (!whitelisted && !uidForeground && (uidPolicy & POLICY_ALLOW_BACKGROUND_BATTERY_SAVE) == 0) {
      uidRules=RULE_REJECT_METERED;
    }
  }
  final int oldRules=mUidRules.get(uid);
  if (uidRules == RULE_ALLOW_ALL) {
    mUidRules.delete(uid);
  }
 else {
    mUidRules.put(uid,uidRules);
  }
  final boolean oldRejectMetered=(oldRules & RULE_REJECT_METERED) != 0;
  final boolean rejectMetered=(uidRules & RULE_REJECT_METERED) != 0;
  if (oldRejectMetered != rejectMetered) {
    setUidNetworkRules(uid,rejectMetered);
  }
  final boolean oldFirewallReject=(oldRules & RULE_REJECT_ALL) != 0;
  final boolean firewallReject=(uidRules & RULE_REJECT_ALL) != 0;
  if (oldFirewallReject != firewallReject) {
    setUidFirewallRule(FIREWALL_CHAIN_STANDBY,uid,firewallReject);
    if (mFirewallChainStates.get(FIREWALL_CHAIN_DOZABLE) && !firewallReject) {
      setUidFirewallRule(FIREWALL_CHAIN_DOZABLE,uid,false);
    }
  }
  if (oldRules != uidRules) {
    mHandler.obtainMessage(MSG_RULES_CHANGED,uid,uidRules).sendToTarget();
  }
  try {
    mNetworkStats.setUidForeground(uid,uidForeground);
  }
 catch (  RemoteException e) {
  }
}
