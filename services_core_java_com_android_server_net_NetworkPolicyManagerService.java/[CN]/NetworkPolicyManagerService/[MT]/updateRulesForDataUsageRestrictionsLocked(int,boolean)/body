{
  if (!uidDeleted && !isUidValidForWhitelistRules(uid)) {
    if (LOGD)     Slog.d(TAG,"no need to update restrict data rules for uid " + uid);
    return;
  }
  final int uidPolicy=mUidPolicy.get(uid,POLICY_NONE);
  final int oldUidRules=mUidRules.get(uid,RULE_NONE);
  final boolean isForeground=isUidForegroundOnRestrictBackgroundLocked(uid);
  final boolean isBlacklisted=(uidPolicy & POLICY_REJECT_METERED_BACKGROUND) != 0;
  final boolean isWhitelisted=mRestrictBackgroundWhitelistUids.get(uid);
  final int oldRule=oldUidRules & MASK_METERED_NETWORKS;
  int newRule=RULE_NONE;
  if (isForeground) {
    if (isBlacklisted || (mRestrictBackground && !isWhitelisted)) {
      newRule=RULE_TEMPORARY_ALLOW_METERED;
    }
 else     if (isWhitelisted) {
      newRule=RULE_ALLOW_METERED;
    }
  }
 else {
    if (isBlacklisted) {
      newRule=RULE_REJECT_METERED;
    }
 else     if (mRestrictBackground && isWhitelisted) {
      newRule=RULE_ALLOW_METERED;
    }
  }
  final int newUidRules=newRule | (oldUidRules & MASK_ALL_NETWORKS);
  if (LOGV) {
    Log.v(TAG,"updateRuleForRestrictBackgroundLocked(" + uid + ")"+ ": isForeground="+ isForeground+ ", isBlacklisted="+ isBlacklisted+ ", isWhitelisted="+ isWhitelisted+ ", oldRule="+ uidRulesToString(oldRule)+ ", newRule="+ uidRulesToString(newRule)+ ", newUidRules="+ uidRulesToString(newUidRules)+ ", oldUidRules="+ uidRulesToString(oldUidRules));
  }
  if (newUidRules == RULE_NONE) {
    mUidRules.delete(uid);
  }
 else {
    mUidRules.put(uid,newUidRules);
  }
  boolean changed=false;
  if (newRule != oldRule) {
    changed=true;
    if ((newRule & RULE_TEMPORARY_ALLOW_METERED) != 0) {
      setMeteredNetworkWhitelist(uid,true);
      if (isBlacklisted) {
        setMeteredNetworkBlacklist(uid,false);
      }
    }
 else     if ((oldRule & RULE_TEMPORARY_ALLOW_METERED) != 0) {
      if (!isWhitelisted) {
        setMeteredNetworkWhitelist(uid,false);
      }
      if (isBlacklisted) {
        setMeteredNetworkBlacklist(uid,true);
      }
    }
 else     if ((newRule & RULE_REJECT_METERED) != 0 || (oldRule & RULE_REJECT_METERED) != 0) {
      setMeteredNetworkBlacklist(uid,isBlacklisted);
      if ((oldRule & RULE_REJECT_METERED) != 0 && isWhitelisted) {
        setMeteredNetworkWhitelist(uid,isWhitelisted);
      }
    }
 else     if ((newRule & RULE_ALLOW_METERED) != 0 || (oldRule & RULE_ALLOW_METERED) != 0) {
      setMeteredNetworkWhitelist(uid,isWhitelisted);
    }
 else {
      Log.wtf(TAG,"Unexpected change of metered UID state for " + uid + ": foreground="+ isForeground+ ", whitelisted="+ isWhitelisted+ ", blacklisted="+ isBlacklisted+ ", newRule="+ uidRulesToString(newUidRules)+ ", oldRule="+ uidRulesToString(oldUidRules));
    }
    mHandler.obtainMessage(MSG_RULES_CHANGED,uid,newUidRules).sendToTarget();
  }
}
