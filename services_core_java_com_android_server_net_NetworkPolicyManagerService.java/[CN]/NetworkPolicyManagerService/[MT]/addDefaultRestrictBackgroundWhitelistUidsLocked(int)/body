{
  final SystemConfig sysConfig=SystemConfig.getInstance();
  final PackageManager pm=mContext.getPackageManager();
  final ArraySet<String> allowDataUsage=sysConfig.getAllowInDataUsageSave();
  boolean changed=false;
  for (int i=0; i < allowDataUsage.size(); i++) {
    final String pkg=allowDataUsage.valueAt(i);
    if (LOGD)     Slog.d(TAG,"checking restricted background whitelisting for package " + pkg + " and user "+ userId);
    final ApplicationInfo app;
    try {
      app=pm.getApplicationInfoAsUser(pkg,PackageManager.MATCH_SYSTEM_ONLY,userId);
    }
 catch (    PackageManager.NameNotFoundException e) {
      Slog.wtf(TAG,"No ApplicationInfo for package " + pkg);
      continue;
    }
    if (!app.isPrivilegedApp()) {
      Slog.wtf(TAG,"pm.getApplicationInfoAsUser() returned non-privileged app: " + pkg);
      continue;
    }
    final int uid=UserHandle.getUid(userId,app.uid);
    mDefaultRestrictBackgroundWhitelistUids.append(uid,true);
    if (LOGD)     Slog.d(TAG,"Adding uid " + uid + " (user "+ userId+ ") to default restricted "+ "background whitelist. Revoked status: "+ mRestrictBackgroundWhitelistRevokedUids.get(uid));
    if (!mRestrictBackgroundWhitelistRevokedUids.get(uid)) {
      Slog.i(TAG,"adding default package " + pkg + " (uid "+ uid+ " for user "+ userId+ ") to restrict background whitelist");
      mRestrictBackgroundWhitelistUids.append(uid,true);
      changed=true;
    }
  }
  return changed;
}
