{
  final SystemConfig sysConfig=SystemConfig.getInstance();
  final PackageManager pm=mContext.getPackageManager();
  final List<UserInfo> users=mUserManager.getUsers();
  final int numberUsers=users.size();
  final ArraySet<String> allowDataUsage=sysConfig.getAllowInDataUsageSave();
  boolean changed=false;
  for (int i=0; i < allowDataUsage.size(); i++) {
    final String pkg=allowDataUsage.valueAt(i);
    if (LOGD)     Slog.d(TAG,"checking restricted background whitelisting for package " + pkg);
    final ApplicationInfo app;
    try {
      app=pm.getApplicationInfo(pkg,PackageManager.MATCH_SYSTEM_ONLY);
    }
 catch (    PackageManager.NameNotFoundException e) {
      Slog.wtf(TAG,"No ApplicationInfo for package " + pkg);
      continue;
    }
    if (!app.isPrivilegedApp()) {
      Slog.w(TAG,"getAllowInDataUsageSave() returned non-privileged app: " + pkg);
      continue;
    }
    for (int j=0; j < numberUsers; j++) {
      final UserInfo user=users.get(i);
      final int uid=UserHandle.getUid(user.id,app.uid);
      mDefaultRestrictBackgroundWhitelistUids.append(uid,true);
      if (LOGD)       Slog.d(TAG,"revoked whistelist status for uid " + uid + ": "+ mRestrictBackgroundWhitelistRevokedUids.get(uid));
      if (!mRestrictBackgroundWhitelistRevokedUids.get(uid)) {
        Slog.i(TAG,"adding default package " + pkg + " (uid "+ uid+ " for user "+ user.id+ ") to restrict background whitelist");
        mRestrictBackgroundWhitelistUids.append(uid,true);
        changed=true;
      }
    }
  }
  return changed;
}
