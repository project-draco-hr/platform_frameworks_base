{
  mContext.enforceCallingOrSelfPermission(DUMP,TAG);
  final IndentingPrintWriter fout=new IndentingPrintWriter(writer,"  ");
  final HashSet<String> argSet=new HashSet<String>();
  for (  String arg : args) {
    argSet.add(arg);
  }
synchronized (mRulesLock) {
    if (argSet.contains("--unsnooze")) {
      for (int i=mNetworkPolicy.size() - 1; i >= 0; i--) {
        mNetworkPolicy.valueAt(i).clearSnooze();
      }
      updateNetworkEnabledLocked();
      updateNetworkRulesLocked();
      updateNotificationsLocked();
      writePolicyLocked();
      fout.println("Cleared snooze timestamps");
      return;
    }
    fout.print("Restrict background: ");
    fout.println(mRestrictBackground);
    fout.print("Restrict power: ");
    fout.println(mRestrictPower);
    fout.println("Network policies:");
    fout.increaseIndent();
    for (int i=0; i < mNetworkPolicy.size(); i++) {
      fout.println(mNetworkPolicy.valueAt(i).toString());
    }
    fout.decreaseIndent();
    fout.println("Policy for UIDs:");
    fout.increaseIndent();
    int size=mUidPolicy.size();
    for (int i=0; i < size; i++) {
      final int uid=mUidPolicy.keyAt(i);
      final int policy=mUidPolicy.valueAt(i);
      fout.print("UID=");
      fout.print(uid);
      fout.print(" policy=");
      dumpPolicy(fout,policy);
      fout.println();
    }
    fout.decreaseIndent();
    size=mPowerSaveWhitelistAppIds.size();
    if (size > 0) {
      fout.println("Power save whitelist app ids:");
      fout.increaseIndent();
      for (int i=0; i < size; i++) {
        fout.print("UID=");
        fout.print(mPowerSaveWhitelistAppIds.keyAt(i));
        fout.print(": ");
        fout.print(mPowerSaveWhitelistAppIds.valueAt(i));
        fout.println();
      }
      fout.decreaseIndent();
    }
    final SparseBooleanArray knownUids=new SparseBooleanArray();
    collectKeys(mUidForeground,knownUids);
    collectKeys(mUidRules,knownUids);
    fout.println("Status for known UIDs:");
    fout.increaseIndent();
    size=knownUids.size();
    for (int i=0; i < size; i++) {
      final int uid=knownUids.keyAt(i);
      fout.print("UID=");
      fout.print(uid);
      fout.print(" foreground=");
      final int foregroundIndex=mUidPidForeground.indexOfKey(uid);
      if (foregroundIndex < 0) {
        fout.print("UNKNOWN");
      }
 else {
        dumpSparseBooleanArray(fout,mUidPidForeground.valueAt(foregroundIndex));
      }
      fout.print(" rules=");
      final int rulesIndex=mUidRules.indexOfKey(uid);
      if (rulesIndex < 0) {
        fout.print("UNKNOWN");
      }
 else {
        dumpRules(fout,mUidRules.valueAt(rulesIndex));
      }
      fout.println();
    }
    fout.decreaseIndent();
  }
}
