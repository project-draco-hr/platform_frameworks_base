{
  Map<String,ClassReader> zipClasses=mAa.parseZip(mOsJarPath);
  TreeMap<String,ClassReader> keep=new TreeMap<String,ClassReader>();
  TreeMap<String,ClassReader> new_keep=new TreeMap<String,ClassReader>();
  TreeMap<String,ClassReader> in_deps=new TreeMap<String,ClassReader>();
  TreeMap<String,ClassReader> out_deps=new TreeMap<String,ClassReader>();
  ClassReader cr=mAa.findClass("mock_android.widget.TableLayout",zipClasses,keep);
  DependencyVisitor visitor=mAa.getVisitor(zipClasses,keep,new_keep,in_deps,out_deps);
  cr.accept(visitor,0);
  assertArrayEquals(new String[]{"mock_android.view.ViewGroup","mock_android.widget.TableLayout$LayoutParams"},out_deps.keySet().toArray());
  in_deps.putAll(out_deps);
  out_deps.clear();
  for (  ClassReader cr2 : in_deps.values()) {
    cr2.accept(visitor,0);
  }
  assertArrayEquals(new String[]{"mock_android.view.View","mock_android.view.ViewGroup$LayoutParams","mock_android.view.ViewGroup$MarginLayoutParams"},out_deps.keySet().toArray());
  in_deps.putAll(out_deps);
  out_deps.clear();
  for (  ClassReader cr2 : in_deps.values()) {
    cr2.accept(visitor,0);
  }
  keep.putAll(new_keep);
  assertArrayEquals(new String[]{},out_deps.keySet().toArray());
  assertArrayEquals(new String[]{"mock_android.widget.TableLayout"},keep.keySet().toArray());
}
