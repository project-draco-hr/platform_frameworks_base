{
  Intent intent=null;
  Intent affinityIntent=null;
  ArrayList<ActivityRecord> activities=new ArrayList<ActivityRecord>();
  ComponentName realActivity=null;
  ComponentName origActivity=null;
  String affinity=null;
  boolean rootHasReset=false;
  boolean askedCompatMode=false;
  int taskType=ActivityRecord.APPLICATION_ACTIVITY_TYPE;
  int userId=0;
  String lastDescription=null;
  long firstActiveTime=-1;
  long lastActiveTime=-1;
  long lastTimeOnTop=0;
  boolean neverRelinquishIdentity=true;
  int taskId=-1;
  final int outerDepth=in.getDepth();
  ActivityManager.TaskDescription taskDescription=new ActivityManager.TaskDescription();
  for (int attrNdx=in.getAttributeCount() - 1; attrNdx >= 0; --attrNdx) {
    final String attrName=in.getAttributeName(attrNdx);
    final String attrValue=in.getAttributeValue(attrNdx);
    if (TaskPersister.DEBUG)     Slog.d(TaskPersister.TAG,"TaskRecord: attribute name=" + attrName + " value="+ attrValue);
    if (ATTR_TASKID.equals(attrName)) {
      taskId=Integer.valueOf(attrValue);
    }
 else     if (ATTR_REALACTIVITY.equals(attrName)) {
      realActivity=ComponentName.unflattenFromString(attrValue);
    }
 else     if (ATTR_ORIGACTIVITY.equals(attrName)) {
      origActivity=ComponentName.unflattenFromString(attrValue);
    }
 else     if (ATTR_AFFINITY.equals(attrName)) {
      affinity=attrValue;
    }
 else     if (ATTR_ROOTHASRESET.equals(attrName)) {
      rootHasReset=Boolean.valueOf(attrValue);
    }
 else     if (ATTR_ASKEDCOMPATMODE.equals(attrName)) {
      askedCompatMode=Boolean.valueOf(attrValue);
    }
 else     if (ATTR_USERID.equals(attrName)) {
      userId=Integer.valueOf(attrValue);
    }
 else     if (ATTR_TASKTYPE.equals(attrName)) {
      taskType=Integer.valueOf(attrValue);
    }
 else     if (ATTR_FIRSTACTIVETIME.equals(attrName)) {
      firstActiveTime=Long.valueOf(attrValue);
    }
 else     if (ATTR_LASTACTIVETIME.equals(attrName)) {
      lastActiveTime=Long.valueOf(attrValue);
    }
 else     if (ATTR_LASTDESCRIPTION.equals(attrName)) {
      lastDescription=attrValue;
    }
 else     if (ATTR_LASTTIMEMOVED.equals(attrName)) {
      lastTimeOnTop=Long.valueOf(attrValue);
    }
 else     if (ATTR_NEVERRELINQUISH.equals(attrName)) {
      neverRelinquishIdentity=Boolean.valueOf(attrValue);
    }
 else     if (readTaskDescriptionAttribute(taskDescription,attrName,attrValue)) {
    }
 else {
      Slog.w(TAG,"TaskRecord: Unknown attribute=" + attrName);
    }
  }
  int event;
  while (((event=in.next()) != XmlPullParser.END_DOCUMENT) && (event != XmlPullParser.END_TAG || in.getDepth() < outerDepth)) {
    if (event == XmlPullParser.START_TAG) {
      final String name=in.getName();
      if (TaskPersister.DEBUG)       Slog.d(TaskPersister.TAG,"TaskRecord: START_TAG name=" + name);
      if (TAG_AFFINITYINTENT.equals(name)) {
        affinityIntent=Intent.restoreFromXml(in);
      }
 else       if (TAG_INTENT.equals(name)) {
        intent=Intent.restoreFromXml(in);
      }
 else       if (TAG_ACTIVITY.equals(name)) {
        ActivityRecord activity=ActivityRecord.restoreFromXml(in,taskId,stackSupervisor);
        if (TaskPersister.DEBUG)         Slog.d(TaskPersister.TAG,"TaskRecord: activity=" + activity);
        if (activity != null) {
          activities.add(activity);
        }
      }
 else {
        Slog.e(TAG,"restoreTask: Unexpected name=" + name);
        XmlUtils.skipCurrentTag(in);
      }
    }
  }
  if (lastActiveTime >= 0) {
    taskDescription.setIcon(TaskPersister.restoreImage(String.valueOf(taskId) + LAST_ACTIVITY_ICON_SUFFIX + lastActiveTime+ TaskPersister.IMAGE_EXTENSION));
  }
  final TaskRecord task=new TaskRecord(stackSupervisor.mService,taskId,intent,affinityIntent,affinity,realActivity,origActivity,rootHasReset,askedCompatMode,taskType,userId,lastDescription,activities,firstActiveTime,lastActiveTime,lastTimeOnTop,neverRelinquishIdentity,taskDescription);
  for (int activityNdx=activities.size() - 1; activityNdx >= 0; --activityNdx) {
    activities.get(activityNdx).task=task;
  }
  Slog.i(TAG,"Restored task=" + task);
  return task;
}
