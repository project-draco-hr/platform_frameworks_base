{
  mTmpNonDecorBounds.set(bounds);
  mTmpStableBounds.set(bounds);
  subtractNonDecorInsets(mTmpNonDecorBounds,insetBounds != null ? insetBounds : bounds,overrideWidth,overrideHeight);
  subtractStableInsets(mTmpStableBounds,insetBounds != null ? insetBounds : bounds,overrideWidth,overrideHeight);
  final Configuration serviceConfig=mService.mConfiguration;
  final Configuration config=new Configuration(Configuration.EMPTY);
  final float density=serviceConfig.densityDpi * DisplayMetrics.DENSITY_DEFAULT_SCALE;
  config.screenWidthDp=Math.min((int)(mTmpStableBounds.width() / density),serviceConfig.screenWidthDp);
  config.screenHeightDp=Math.min((int)(mTmpStableBounds.height() / density),serviceConfig.screenHeightDp);
  config.orientation=(config.screenWidthDp <= config.screenHeightDp) ? Configuration.ORIENTATION_PORTRAIT : Configuration.ORIENTATION_LANDSCAPE;
  final int compatScreenWidthDp=(int)(mTmpNonDecorBounds.width() / density);
  final int compatScreenHeightDp=(int)(mTmpNonDecorBounds.height() / density);
  final int sl=Configuration.resetScreenLayout(serviceConfig.screenLayout);
  final int longSize=Math.max(compatScreenHeightDp,compatScreenWidthDp);
  config.smallestScreenWidthDp=Math.min(compatScreenHeightDp,compatScreenWidthDp);
  config.screenLayout=Configuration.reduceScreenLayout(sl,longSize,config.smallestScreenWidthDp);
  return config;
}
