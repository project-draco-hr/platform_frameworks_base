{
  final NetworkLocationProvider.Callback finalCallback=callback;
  boolean foundInCache=mLocationCache.lookup(cellState,cellHistory,scanResults,mLocation);
  if (foundInCache) {
    if (SystemClock.elapsedRealtime() - mLastCollectionUploadTime > MIN_COLLECTION_INTERVAL) {
      uploadCollectionReport(true);
    }
    Bundle extras=mLocation.getExtras() == null ? new Bundle() : mLocation.getExtras();
    extras.putString(EXTRA_KEY_LOCATION_SOURCE,EXTRA_VALUE_LOCATION_SOURCE_CACHED);
    mLocation.setExtras(extras);
    Log.d(TAG,"getNetworkLocation(): Returning cache location with accuracy " + mLocation.getAccuracy());
    finalCallback.locationReceived(mLocation,true);
    return;
  }
  Log.d(TAG,"getNetworkLocation(): Location not found in cache, making network request");
  mWifiScanResults.clear();
  if (scanResults != null) {
    mWifiScanResults.addAll(scanResults);
  }
  mCellState=cellState;
  mCellHistory=cellHistory;
  ProtoBuf requestElement=new ProtoBuf(LocserverMessageTypes.GLOC_REQUEST_ELEMENT);
  if (trigger != -1) {
    ProtoBuf debugProfile=new ProtoBuf(GdebugprofileMessageTypes.GDEBUG_PROFILE);
    debugProfile.setInt(GDebugProfile.TRIGGER,trigger);
    requestElement.setProtoBuf(GLocRequestElement.DEBUG_PROFILE,debugProfile);
  }
  if (mCellState != null && mCellState.isValid()) {
    ProtoBuf cellularProfile=new ProtoBuf(GcellularMessageTypes.GCELLULAR_PROFILE);
    cellularProfile.setLong(GCellularProfile.TIMESTAMP,mCellState.getTime());
    cellularProfile.setInt(GCellularProfile.PREFETCH_MODE,GPrefetchMode.PREFETCH_MODE_MORE_NEIGHBORS);
    ProtoBuf primaryCell=new ProtoBuf(GcellularMessageTypes.GCELL);
    primaryCell.setInt(GCell.LAC,mCellState.getLac());
    primaryCell.setInt(GCell.CELLID,mCellState.getCid());
    if ((mCellState.getMcc() != -1) && (mCellState.getMnc() != -1)) {
      primaryCell.setInt(GCell.MCC,mCellState.getMcc());
      primaryCell.setInt(GCell.MNC,mCellState.getMnc());
    }
    cellularProfile.setProtoBuf(GCellularProfile.PRIMARY_CELL,primaryCell);
    for (    CellState c : cellHistory) {
      ProtoBuf pastCell=new ProtoBuf(GcellularMessageTypes.GCELL);
      pastCell.setInt(GCell.LAC,c.getLac());
      pastCell.setInt(GCell.CELLID,c.getCid());
      if ((c.getMcc() != -1) && (c.getMnc() != -1)) {
        pastCell.setInt(GCell.MCC,c.getMcc());
        pastCell.setInt(GCell.MNC,c.getMnc());
      }
      pastCell.setInt(GCell.AGE,(int)(mCellState.getTime() - c.getTime()));
      cellularProfile.addProtoBuf(GCellularProfile.HISTORICAL_CELLS,pastCell);
    }
    requestElement.setProtoBuf(GLocRequestElement.CELLULAR_PROFILE,cellularProfile);
  }
  if (mWifiScanResults != null && mWifiScanResults.size() > 0) {
    ProtoBuf wifiProfile=new ProtoBuf(GwifiMessageTypes.GWIFI_PROFILE);
    wifiProfile.setLong(GWifiProfile.TIMESTAMP,scanTime);
    wifiProfile.setInt(GWifiProfile.PREFETCH_MODE,GPrefetchMode.PREFETCH_MODE_MORE_NEIGHBORS);
    int count=0;
    for (    ScanResult s : mWifiScanResults) {
      ProtoBuf wifiDevice=new ProtoBuf(GwifiMessageTypes.GWIFI_DEVICE);
      wifiDevice.setString(GWifiDevice.MAC,s.BSSID);
      wifiProfile.addProtoBuf(GWifiProfile.WIFI_DEVICES,wifiDevice);
      count++;
      if (count >= MAX_WIFI_TO_INCLUDE) {
        break;
      }
    }
    requestElement.setProtoBuf(GLocRequestElement.WIFI_PROFILE,wifiProfile);
  }
  ProtoBuf request=new ProtoBuf(LocserverMessageTypes.GLOC_REQUEST);
  request.addProtoBuf(GLocRequest.REQUEST_ELEMENTS,requestElement);
  ProtoBuf platformProfile=createPlatformProfile();
  if (mCellState != null && mCellState.isValid()) {
    ProtoBuf cellularPlatform=createCellularPlatformProfile(mCellState);
    platformProfile.setProtoBuf(GPlatformProfile.CELLULAR_PLATFORM_PROFILE,cellularPlatform);
  }
  request.setProtoBuf(GLocRequest.PLATFORM_PROFILE,platformProfile);
  if (apps != null) {
    for (    String app : apps) {
      ProtoBuf appProfile=new ProtoBuf(GlocationMessageTypes.GAPP_PROFILE);
      appProfile.setString(GAppProfile.APP_NAME,app);
      request.addProtoBuf(GLocRequest.APP_PROFILES,appProfile);
    }
  }
  uploadCollectionReport(false);
  ByteArrayOutputStream payload=new ByteArrayOutputStream();
  try {
    request.outputTo(payload);
  }
 catch (  IOException e) {
    Log.e(TAG,"getNetworkLocation(): unable to write request to payload",e);
    return;
  }
  ProtoBuf reply=new ProtoBuf(LocserverMessageTypes.GLOC_REPLY);
  Request plainRequest=new PlainRequest(REQUEST_QUERY_LOC,(short)0,payload.toByteArray());
  ProtoRequestListener listener=new ProtoRequestListener(reply,new ServiceCallback(){
    public void onRequestComplete(    Object result){
      ProtoBuf response=(ProtoBuf)result;
      boolean successful=parseNetworkLocationReply(response);
      finalCallback.locationReceived(mLocation,successful);
    }
  }
);
  plainRequest.setListener(listener);
  MobileServiceMux serviceMux=MobileServiceMux.getSingleton();
  serviceMux.submitRequest(plainRequest,true);
}
