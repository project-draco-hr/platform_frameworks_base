{
  ProtoBuf requestElement=new ProtoBuf(LocserverMessageTypes.GLOC_REQUEST_ELEMENT);
  ProtoBuf latlngElement=new ProtoBuf(GlatlngMessageTypes.GLAT_LNG);
  latlngElement.setInt(GLatLng.LAT_E7,(int)(lat * E7));
  latlngElement.setInt(GLatLng.LNG_E7,(int)(lng * E7));
  ProtoBuf locationElement=new ProtoBuf(GlocationMessageTypes.GLOCATION);
  locationElement.setProtoBuf(GLocation.LAT_LNG,latlngElement);
  locationElement.setLong(GLocation.TIMESTAMP,System.currentTimeMillis());
  requestElement.setProtoBuf(GLocRequestElement.LOCATION,locationElement);
  ProtoBuf geocodeElement=new ProtoBuf(LocserverMessageTypes.GGEOCODE_REQUEST);
  geocodeElement.setInt(GGeocodeRequest.NUM_FEATURE_LIMIT,maxResults);
  requestElement.setProtoBuf(GLocRequestElement.GEOCODE,geocodeElement);
  ProtoBuf request=new ProtoBuf(LocserverMessageTypes.GLOC_REQUEST);
  request.addProtoBuf(GLocRequest.REQUEST_ELEMENTS,requestElement);
  ProtoBuf platformProfile=createPlatformProfile(locale);
  request.setProtoBuf(GLocRequest.PLATFORM_PROFILE,platformProfile);
  if (appPackageName != null) {
    ProtoBuf appProfile=new ProtoBuf(GlocationMessageTypes.GAPP_PROFILE);
    appProfile.setString(GAppProfile.APP_NAME,appPackageName);
    request.setProtoBuf(GLocRequest.APP_PROFILES,appProfile);
  }
  uploadCollectionReport(false);
  ByteArrayOutputStream payload=new ByteArrayOutputStream();
  try {
    request.outputTo(payload);
  }
 catch (  IOException e) {
    Log.e(TAG,"reverseGeocode(): unable to write request to payload");
    throw e;
  }
  ProtoBuf reply=new ProtoBuf(LocserverMessageTypes.GLOC_REPLY);
  Request plainRequest=new PlainRequest(REQUEST_QUERY_LOC,(short)0,payload.toByteArray());
  ProtoRequestListener listener=new ProtoRequestListener(reply,null);
  plainRequest.setListener(listener);
  MobileServiceMux serviceMux=MobileServiceMux.getSingleton();
  serviceMux.submitRequest(plainRequest,true);
  ProtoBuf response;
  try {
    response=(ProtoBuf)listener.getAsyncResult().get(REQUEST_TIMEOUT);
  }
 catch (  InterruptedException e) {
    Log.e(TAG,"reverseGeocode(): response timeout");
    throw new IOException("response time-out");
  }
  if (response == null) {
    throw new IOException("Unable to parse response from server");
  }
  int status1=response.getInt(GLocReply.STATUS);
  if (status1 != ResponseCodes.STATUS_STATUS_SUCCESS) {
    Log.e(TAG,"reverseGeocode(): RPC failed with status " + status1);
    throw new IOException("RPC failed with status " + status1);
  }
  if (response.has(GLocReply.PLATFORM_KEY)) {
    String platformKey=response.getString(GLocReply.PLATFORM_KEY);
    if (!TextUtils.isEmpty(platformKey)) {
      setPlatformKey(platformKey);
    }
  }
  if (!response.has(GLocReply.REPLY_ELEMENTS)) {
    Log.e(TAG,"reverseGeocode(): no ReplyElement");
    return;
  }
  ProtoBuf replyElement=response.getProtoBuf(GLocReply.REPLY_ELEMENTS);
  int status2=replyElement.getInt(GLocReplyElement.STATUS);
  if (status2 != ResponseCodes.STATUS_STATUS_SUCCESS) {
    Log.e(TAG,"reverseGeocode(): GLS failed with status " + status2);
    return;
  }
  if (!replyElement.has(GLocReplyElement.LOCATION)) {
    Log.e(TAG,"reverseGeocode(): no location in ReplyElement");
    return;
  }
  ProtoBuf location=replyElement.getProtoBuf(GLocReplyElement.LOCATION);
  if (!location.has(GLocation.FEATURE)) {
    Log.e(TAG,"reverseGeocode(): no feature in GLocation");
    return;
  }
  getAddressFromProtoBuf(location,locale,addrs);
}
