{
  double lat=-1;
  double lng=-1;
  if (location.has(GLocation.LAT_LNG)) {
    ProtoBuf latlng=location.getProtoBuf(GLocation.LAT_LNG);
    lat=latlng.getInt(GLatLng.LAT_E7) / E7;
    lng=latlng.getInt(GLatLng.LNG_E7) / E7;
  }
  for (int a=0; a < location.getCount(GLocation.FEATURE); a++) {
    Address output=new Address(locale);
    ProtoBuf feature=location.getProtoBuf(GLocation.FEATURE,a);
    output.setFeatureName(feature.getString(GFeature.NAME));
    if (feature.has(GFeature.CENTER)) {
      ProtoBuf center=feature.getProtoBuf(GFeature.CENTER);
      output.setLatitude(center.getInt(GLatLng.LAT_E7) / E7);
      output.setLongitude(center.getInt(GLatLng.LNG_E7) / E7);
    }
 else     if (location.has(GLocation.LAT_LNG)) {
      output.setLatitude(lat);
      output.setLongitude(lng);
    }
    ProtoBuf address=feature.getProtoBuf(GFeature.ADDRESS);
    for (int i=0; i < address.getCount(GAddress.FORMATTED_ADDRESS_LINE); i++) {
      String line=address.getString(GAddress.FORMATTED_ADDRESS_LINE,i);
      output.setAddressLine(i,line);
    }
    for (int i=0; i < address.getCount(GAddress.COMPONENT); i++) {
      ProtoBuf component=address.getProtoBuf(GAddress.COMPONENT,i);
      int type=component.getInt(GAddressComponent.FEATURE_TYPE);
      String name=component.getString(GAddressComponent.NAME);
switch (type) {
case GFeature.FEATURE_TYPE_ADMINISTRATIVE_AREA:
        output.setAdminArea(name);
      break;
case GFeature.FEATURE_TYPE_SUB_ADMINISTRATIVE_AREA:
    output.setSubAdminArea(name);
  break;
case GFeature.FEATURE_TYPE_LOCALITY:
output.setLocality(name);
break;
case GFeature.FEATURE_TYPE_THOROUGHFARE:
output.setThoroughfare(name);
break;
case GFeature.FEATURE_TYPE_POST_CODE:
output.setPostalCode(name);
break;
case GFeature.FEATURE_TYPE_COUNTRY:
output.setCountryName(name);
break;
case GFeature.FEATURE_TYPE_COUNTRY_CODE:
output.setCountryCode(name);
break;
default :
if (android.util.Config.LOGD) {
Log.d(TAG,"getAddressFromProtoBuf(): Ignore feature " + type + ","+ name);
}
break;
}
}
addrs.add(output);
}
}
