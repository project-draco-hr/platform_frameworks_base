{
  assertRunOnServiceThread();
  HdmiDeviceInfo targetDevice=mDeviceInfos.get(id);
  if (targetDevice == null) {
    invokeCallback(callback,HdmiControlManager.RESULT_TARGET_NOT_AVAILABLE);
    return;
  }
  int targetAddress=targetDevice.getLogicalAddress();
  ActiveSource active=getActiveSource();
  if (targetDevice.getDevicePowerStatus() == HdmiControlManager.POWER_STATUS_ON && active.isValid() && targetAddress == active.logicalAddress) {
    invokeCallback(callback,HdmiControlManager.RESULT_SUCCESS);
    return;
  }
  if (targetAddress == Constants.ADDR_INTERNAL) {
    handleSelectInternalSource();
    setActiveSource(targetAddress,mService.getPhysicalAddress());
    setActivePath(mService.getPhysicalAddress());
    invokeCallback(callback,HdmiControlManager.RESULT_SUCCESS);
    return;
  }
  if (!mService.isControlEnabled()) {
    setActiveSource(targetDevice);
    invokeCallback(callback,HdmiControlManager.RESULT_INCORRECT_MODE);
    return;
  }
  removeAction(DeviceSelectAction.class);
  addAndStartAction(new DeviceSelectAction(this,targetDevice,callback));
}
