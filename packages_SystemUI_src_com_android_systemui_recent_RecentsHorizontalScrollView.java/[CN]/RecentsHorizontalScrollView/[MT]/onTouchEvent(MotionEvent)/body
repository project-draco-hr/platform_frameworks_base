{
  if (!mDragging) {
    return super.onTouchEvent(ev);
  }
  mVelocityTracker.addMovement(ev);
  final View animView=mCurrentView;
  final View thumb=animView.findViewById(R.id.app_thumbnail);
switch (ev.getAction()) {
case MotionEvent.ACTION_MOVE:
    if (animView != null) {
      final float delta=ev.getY() - mLastY;
      animView.setY(animView.getY() + delta);
      animView.setAlpha(getAlphaForOffset(animView,thumb.getHeight()));
      invalidateGlobalRegion(animView);
    }
  mLastY=ev.getY();
break;
case MotionEvent.ACTION_UP:
final ObjectAnimator anim;
if (animView != null) {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,10000);
final float velocityX=velocityTracker.getXVelocity();
final float velocityY=velocityTracker.getYVelocity();
final float curY=animView.getY();
final float newY=(velocityY >= 0.0f ? 1 : -1) * animView.getHeight();
if (Math.abs(velocityY) > Math.abs(velocityX) && Math.abs(velocityY) > ESCAPE_VELOCITY && (velocityY >= 0.0f) == (animView.getY() >= 0)) {
final long duration=(long)(Math.abs(newY - curY) * 1000.0f / Math.abs(velocityY));
anim=ObjectAnimator.ofFloat(animView,"y",curY,newY);
anim.setInterpolator(new LinearInterpolator());
final int swipeDirection=animView.getY() >= 0.0f ? RecentsCallback.SWIPE_RIGHT : RecentsCallback.SWIPE_LEFT;
anim.addListener(new AnimatorListener(){
  public void onAnimationStart(  Animator animation){
  }
  public void onAnimationRepeat(  Animator animation){
  }
  public void onAnimationEnd(  Animator animation){
    mLinearLayout.removeView(mCurrentView);
    mCallback.handleSwipe(animView,swipeDirection);
  }
  public void onAnimationCancel(  Animator animation){
    mLinearLayout.removeView(mCurrentView);
    mCallback.handleSwipe(animView,swipeDirection);
  }
}
);
anim.setDuration(duration);
}
 else {
final long duration=Math.abs(velocityY) > 0.0f ? (long)(Math.abs(newY - curY) * 1000.0f / Math.abs(velocityY)) : SNAP_BACK_DURATION;
anim=ObjectAnimator.ofFloat(animView,"y",animView.getY(),0.0f);
anim.setInterpolator(new DecelerateInterpolator(2.0f));
anim.setDuration(duration);
}
anim.addUpdateListener(new AnimatorUpdateListener(){
public void onAnimationUpdate(ValueAnimator animation){
  animView.setAlpha(getAlphaForOffset(animView,thumb.getHeight()));
  invalidateGlobalRegion(animView);
}
}
);
anim.start();
}
mVelocityTracker.recycle();
mVelocityTracker=null;
break;
}
return true;
}
