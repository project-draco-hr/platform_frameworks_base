{
  if (errorCount >= MAXIMUM_ERRORS) {
    return NOT_AVAILABLE;
  }
  MeasureWithTimeout measurer=new MeasureWithTimeout(className);
  new Thread(measurer).start();
synchronized (measurer) {
    if (measurer.memoryUsage == null) {
      try {
        measurer.wait(30000);
      }
 catch (      InterruptedException e) {
        System.err.println("Interrupted waiting for measurement.");
        e.printStackTrace();
        return NOT_AVAILABLE;
      }
      if (measurer.memoryUsage == null) {
        System.err.println("Timed out while measuring " + className + ".");
        return NOT_AVAILABLE;
      }
    }
    System.err.println("Got memory usage for " + className + ".");
    return measurer.memoryUsage;
  }
}
