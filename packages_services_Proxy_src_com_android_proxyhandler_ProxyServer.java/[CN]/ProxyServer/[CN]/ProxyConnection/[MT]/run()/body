{
  try {
    android.net.Proxy.setHttpProxySystemProperty(mProxy);
    String requestLine=getLine(connection.getInputStream());
    if (requestLine == null) {
      connection.close();
      return;
    }
    String[] splitLine=requestLine.split(" ");
    if (splitLine.length < 3) {
      connection.close();
      return;
    }
    String requestType=splitLine[0];
    String urlString=splitLine[1];
    String host="";
    int port=80;
    if (requestType.equals(CONNECT)) {
      String[] hostPortSplit=urlString.split(":");
      host=hostPortSplit[0];
      try {
        port=Integer.parseInt(hostPortSplit[1]);
      }
 catch (      NumberFormatException nfe) {
        port=443;
      }
      urlString="Https://" + host + ":"+ port;
    }
 else {
      try {
        URI url=new URI(urlString);
        host=url.getHost();
        port=url.getPort();
        if (port < 0) {
          port=80;
        }
      }
 catch (      URISyntaxException e) {
        connection.close();
        return;
      }
    }
    List<Proxy> list=Lists.newArrayList();
    try {
      list=ProxySelector.getDefault().select(new URI(urlString));
    }
 catch (    URISyntaxException e) {
      e.printStackTrace();
    }
    Socket server=null;
    for (    Proxy proxy : list) {
      try {
        if (!proxy.equals(Proxy.NO_PROXY)) {
          InetSocketAddress inetSocketAddress=(InetSocketAddress)list.get(0).address();
          server=new Socket(inetSocketAddress.getAddress(),inetSocketAddress.getPort());
          sendLine(server,requestLine);
        }
 else {
          server=new Socket(host,port);
          if (requestType.equals(CONNECT)) {
            while (getLine(connection.getInputStream()).length() != 0)             ;
            sendLine(connection,HTTP_OK);
          }
 else {
            sendLine(server,requestLine);
          }
        }
      }
 catch (      IOException ioe) {
      }
      if (server != null) {
        break;
      }
    }
    if (server == null) {
      server=new Socket(host,port);
      if (requestType.equals(CONNECT)) {
        while (getLine(connection.getInputStream()).length() != 0)         ;
        sendLine(connection,HTTP_OK);
      }
 else {
        sendLine(server,requestLine);
      }
    }
    SocketConnect.connect(connection,server);
  }
 catch (  IOException e) {
    Log.d(TAG,"Problem Proxying",e);
  }
  try {
    connection.close();
  }
 catch (  IOException ioe) {
  }
}
