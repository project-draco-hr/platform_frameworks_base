{
  try {
    if (mType == TYPE_ASSET) {
      try {
        mDataStream=mContext.getAssets().open(mPath);
      }
 catch (      java.io.FileNotFoundException ex) {
        mDataStream=mContext.getAssets().openNonAsset(mPath);
      }
    }
 else     if (mType == TYPE_RES) {
      if (mPath == null || mPath.length() == 0) {
        Log.e(LOGTAG,"Need a path to resolve the res file");
        mHandler.error(EventHandler.FILE_ERROR,mContext.getString(R.string.httpErrorFileNotFound));
        return false;
      }
      int slash=mPath.indexOf('/');
      int dot=mPath.indexOf('.',slash);
      if (slash == -1 || dot == -1) {
        Log.e(LOGTAG,"Incorrect res path: " + mPath);
        mHandler.error(EventHandler.FILE_ERROR,mContext.getString(R.string.httpErrorFileNotFound));
        return false;
      }
      String subClassName=mPath.substring(0,slash);
      String fieldName=mPath.substring(slash + 1,dot);
      String errorMsg=null;
      try {
        final Class<?> d=mContext.getApplicationContext().getClassLoader().loadClass(mContext.getPackageName() + ".R$" + subClassName);
        final Field field=d.getField(fieldName);
        final int id=field.getInt(null);
        TypedValue value=new TypedValue();
        mContext.getResources().getValue(id,value,true);
        if (value.type == TypedValue.TYPE_STRING) {
          mDataStream=mContext.getAssets().openNonAsset(value.assetCookie,value.string.toString(),AssetManager.ACCESS_STREAMING);
        }
 else {
          errorMsg="Only support TYPE_STRING for the res files";
        }
      }
 catch (      ClassNotFoundException e) {
        errorMsg="Can't find class:  " + mContext.getPackageName() + ".R$"+ subClassName;
      }
catch (      SecurityException e) {
        errorMsg="Caught SecurityException: " + e;
      }
catch (      NoSuchFieldException e) {
        errorMsg="Can't find field:  " + fieldName + " in "+ mContext.getPackageName()+ ".R$"+ subClassName;
      }
catch (      IllegalArgumentException e) {
        errorMsg="Caught IllegalArgumentException: " + e;
      }
catch (      IllegalAccessException e) {
        errorMsg="Caught IllegalAccessException: " + e;
      }
      if (errorMsg != null) {
        mHandler.error(EventHandler.FILE_ERROR,mContext.getString(R.string.httpErrorFileNotFound));
        return false;
      }
    }
 else {
      if (!mAllowFileAccess) {
        mHandler.error(EventHandler.FILE_ERROR,mContext.getString(R.string.httpErrorFileNotFound));
        return false;
      }
      mDataStream=new FileInputStream(mPath);
      mContentLength=(new File(mPath)).length();
    }
    mHandler.status(1,1,200,"OK");
  }
 catch (  java.io.FileNotFoundException ex) {
    mHandler.error(EventHandler.FILE_NOT_FOUND_ERROR,errString(ex));
    return false;
  }
catch (  java.io.IOException ex) {
    mHandler.error(EventHandler.FILE_ERROR,errString(ex));
    return false;
  }
  return true;
}
