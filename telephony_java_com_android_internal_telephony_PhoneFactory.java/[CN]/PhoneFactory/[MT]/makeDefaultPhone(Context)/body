{
synchronized (Phone.class) {
    if (!sMadeDefaults) {
      sLooper=Looper.myLooper();
      sContext=context;
      if (sLooper == null) {
        throw new RuntimeException("PhoneFactory.makeDefaultPhone must be called from Looper thread");
      }
      int retryCount=0;
      for (; ; ) {
        boolean hasException=false;
        retryCount++;
        try {
          new LocalServerSocket("com.android.internal.telephony");
        }
 catch (        java.io.IOException ex) {
          hasException=true;
        }
        if (!hasException) {
          break;
        }
 else         if (retryCount > SOCKET_OPEN_MAX_RETRY) {
          throw new RuntimeException("PhoneFactory probably already running");
        }
 else {
          try {
            Thread.sleep(SOCKET_OPEN_RETRY_MILLIS);
          }
 catch (          InterruptedException er) {
          }
        }
      }
      sPhoneNotifier=new DefaultPhoneNotifier();
      int networkMode=Settings.Secure.getInt(context.getContentResolver(),Settings.Secure.PREFERRED_NETWORK_MODE,preferredNetworkMode);
      Log.i(LOG_TAG,"Network Mode set to " + Integer.toString(networkMode));
      int cdmaSubscription;
      int lteOnCdma=BaseCommands.getLteOnCdmaModeStatic();
switch (lteOnCdma) {
case Phone.LTE_ON_CDMA_FALSE:
        cdmaSubscription=RILConstants.SUBSCRIPTION_FROM_NV;
      Log.i(LOG_TAG,"lteOnCdma is 0 use SUBSCRIPTION_FROM_NV");
    break;
case Phone.LTE_ON_CDMA_TRUE:
  cdmaSubscription=RILConstants.SUBSCRIPTION_FROM_RUIM;
Log.i(LOG_TAG,"lteOnCdma is 1 use SUBSCRIPTION_FROM_RUIM");
break;
case Phone.LTE_ON_CDMA_UNKNOWN:
default :
cdmaSubscription=Settings.Secure.getInt(context.getContentResolver(),Settings.Secure.PREFERRED_CDMA_SUBSCRIPTION,preferredCdmaSubscription);
Log.i(LOG_TAG,"lteOnCdma not set, using PREFERRED_CDMA_SUBSCRIPTION");
break;
}
Log.i(LOG_TAG,"Cdma Subscription set to " + cdmaSubscription);
sCommandsInterface=new RIL(context,networkMode,cdmaSubscription);
int phoneType=getPhoneType(networkMode);
if (phoneType == Phone.PHONE_TYPE_GSM) {
Log.i(LOG_TAG,"Creating GSMPhone");
sProxyPhone=new PhoneProxy(new GSMPhone(context,sCommandsInterface,sPhoneNotifier));
}
 else if (phoneType == Phone.PHONE_TYPE_CDMA) {
switch (BaseCommands.getLteOnCdmaModeStatic()) {
case Phone.LTE_ON_CDMA_TRUE:
Log.i(LOG_TAG,"Creating CDMALTEPhone");
sProxyPhone=new PhoneProxy(new CDMALTEPhone(context,sCommandsInterface,sPhoneNotifier));
break;
case Phone.LTE_ON_CDMA_FALSE:
default :
Log.i(LOG_TAG,"Creating CDMAPhone");
sProxyPhone=new PhoneProxy(new CDMAPhone(context,sCommandsInterface,sPhoneNotifier));
break;
}
}
sMadeDefaults=true;
}
}
}
