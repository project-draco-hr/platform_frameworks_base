{
  if (!mFormatItems) {
    super.onLayout(changed,left,top,right,bottom);
    return;
  }
  final int childCount=getChildCount();
  final int midVertical=(top + bottom) / 2;
  final int dividerWidth=getDividerWidth();
  int overflowWidth=0;
  int nonOverflowWidth=0;
  int nonOverflowCount=0;
  int widthRemaining=right - left - getPaddingRight()- getPaddingLeft();
  for (int i=0; i < childCount; i++) {
    final View v=getChildAt(i);
    if (v.getVisibility() == GONE) {
      continue;
    }
    LayoutParams p=(LayoutParams)v.getLayoutParams();
    if (p.isOverflowButton) {
      overflowWidth=v.getMeasuredWidth();
      if (hasDividerBeforeChildAt(i)) {
        overflowWidth+=dividerWidth;
      }
      int height=v.getMeasuredHeight();
      int r=getPaddingRight();
      int l=r - overflowWidth;
      int t=midVertical - (height / 2);
      int b=t + height;
      v.layout(l,t,r,b);
      widthRemaining-=overflowWidth;
    }
 else {
      nonOverflowWidth+=v.getMeasuredWidth() + p.leftMargin + p.rightMargin;
      if (hasDividerBeforeChildAt(i)) {
        nonOverflowWidth+=dividerWidth;
      }
      nonOverflowCount++;
    }
  }
  if (nonOverflowWidth <= widthRemaining - overflowWidth) {
    widthRemaining-=overflowWidth;
  }
  int startLeft=getPaddingLeft();
  for (int i=0; i < childCount; i++) {
    final View v=getChildAt(i);
    final LayoutParams lp=(LayoutParams)v.getLayoutParams();
    if (v.getVisibility() == GONE || lp.isOverflowButton) {
      continue;
    }
    startLeft+=lp.leftMargin;
    int width=v.getMeasuredWidth();
    int height=v.getMeasuredHeight();
    int t=midVertical - (height / 2);
    v.layout(startLeft,t,startLeft + width,t + height);
    startLeft+=width + lp.rightMargin;
  }
}
