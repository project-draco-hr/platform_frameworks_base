{
  final int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  int widthSize=MeasureSpec.getSize(widthMeasureSpec);
  int heightSize=MeasureSpec.getSize(heightMeasureSpec);
  final int widthPadding=getPaddingLeft() + getPaddingRight();
  final int heightPadding=getPaddingTop() + getPaddingBottom();
  widthSize-=widthPadding;
  final int cellCount=widthSize / mMinCellSize;
  final int cellSizeRemaining=widthSize % mMinCellSize;
  final int cellSize=mMinCellSize + cellSizeRemaining / cellCount;
  int cellsRemaining=cellCount;
  int maxChildHeight=0;
  int maxCellsUsed=0;
  int expandableItemCount=0;
  if (mReserveOverflow)   cellsRemaining--;
  final int childCount=getChildCount();
  for (int i=0; i < childCount; i++) {
    final View child=getChildAt(i);
    final LayoutParams lp=(LayoutParams)child.getLayoutParams();
    lp.expanded=false;
    lp.extraPixels=0;
    lp.cellsUsed=0;
    lp.expandable=false;
    final int cellsAvailable=lp.isOverflowButton ? 1 : cellsRemaining;
    final int cellsUsed=measureChildForCells(child,cellSize,cellsAvailable,heightMeasureSpec,heightPadding);
    maxCellsUsed=Math.max(maxCellsUsed,cellsUsed);
    if (lp.expandable)     expandableItemCount++;
    cellsRemaining-=cellsUsed;
    maxChildHeight=Math.max(maxChildHeight,child.getMeasuredHeight());
  }
  boolean needsExpansion=false;
  long smallestExpandableItemsAt=0;
  while (expandableItemCount > 0 && cellsRemaining > 0) {
    int minCells=Integer.MAX_VALUE;
    long minCellsAt=0;
    int minCellsItemCount=0;
    for (int i=0; i < childCount; i++) {
      final View child=getChildAt(i);
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      if (!lp.expandable)       continue;
      if (lp.cellsUsed < minCells) {
        minCells=lp.cellsUsed;
        minCellsAt=1 << i;
        minCellsItemCount=1;
      }
 else       if (lp.cellsUsed == minCells) {
        minCellsAt|=1 << i;
        minCellsItemCount++;
      }
    }
    if (minCellsItemCount > cellsRemaining)     break;
    smallestExpandableItemsAt|=minCellsAt;
    for (int i=0; i < childCount; i++) {
      if ((minCellsAt & (1 << i)) == 0)       continue;
      final View child=getChildAt(i);
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      lp.cellsUsed++;
      lp.expanded=true;
      cellsRemaining--;
    }
    needsExpansion=true;
  }
  if (cellsRemaining > 0 && smallestExpandableItemsAt != 0) {
    final int expandCount=Long.bitCount(smallestExpandableItemsAt);
    final int extraPixels=cellsRemaining * cellSize / expandCount;
    for (int i=0; i < childCount; i++) {
      if ((smallestExpandableItemsAt & (1 << i)) == 0)       continue;
      final View child=getChildAt(i);
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      lp.extraPixels=extraPixels;
      lp.expanded=true;
    }
    needsExpansion=true;
    cellsRemaining=0;
  }
  if (needsExpansion) {
    int heightSpec=MeasureSpec.makeMeasureSpec(heightSize - heightPadding,heightMode);
    for (int i=0; i < childCount; i++) {
      final View child=getChildAt(i);
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      if (!lp.expanded)       continue;
      final int width=lp.cellsUsed * cellSize + lp.extraPixels;
      child.measure(MeasureSpec.makeMeasureSpec(width,MeasureSpec.EXACTLY),heightSpec);
    }
  }
  if (heightMode != MeasureSpec.EXACTLY) {
    heightSize=maxChildHeight;
  }
  setMeasuredDimension(widthSize,heightSize);
  mMeasuredExtraWidth=cellsRemaining * cellSize;
}
