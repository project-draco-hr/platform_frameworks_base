{
  if (mInputEventConsistencyVerifier != null) {
    mInputEventConsistencyVerifier.onTouchEvent(event,0);
  }
  mCurrTime=event.getEventTime();
  final int action=event.getActionMasked();
  if (mQuickScaleEnabled) {
    mGestureDetector.onTouchEvent(event);
  }
  final int count=event.getPointerCount();
  final boolean isStylusButtonDown=(event.getButtonState() & MotionEvent.BUTTON_STYLUS_PRIMARY) != 0;
  final boolean anchoredScaleCancelled=mAnchoredScaleMode == ANCHORED_SCALE_MODE_STYLUS && !isStylusButtonDown;
  final boolean streamComplete=action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_CANCEL || anchoredScaleCancelled;
  if (action == MotionEvent.ACTION_DOWN || streamComplete) {
    if (mInProgress) {
      mListener.onScaleEnd(this);
      mInProgress=false;
      mInitialSpan=0;
      mAnchoredScaleMode=ANCHORED_SCALE_MODE_NONE;
    }
 else     if (inAnchoredScaleMode() && streamComplete) {
      mInProgress=false;
      mInitialSpan=0;
      mAnchoredScaleMode=ANCHORED_SCALE_MODE_NONE;
    }
    if (streamComplete) {
      clearTouchHistory();
      return true;
    }
  }
  if (!mInProgress && mStylusScaleEnabled && !inAnchoredScaleMode()&& !streamComplete&& isStylusButtonDown) {
    mAnchoredScaleStartX=event.getX();
    mAnchoredScaleStartY=event.getY();
    mAnchoredScaleMode=ANCHORED_SCALE_MODE_STYLUS;
    mInitialSpan=0;
  }
  final boolean configChanged=action == MotionEvent.ACTION_DOWN || action == MotionEvent.ACTION_POINTER_UP || action == MotionEvent.ACTION_POINTER_DOWN || anchoredScaleCancelled;
  final boolean pointerUp=action == MotionEvent.ACTION_POINTER_UP;
  final int skipIndex=pointerUp ? event.getActionIndex() : -1;
  float sumX=0, sumY=0;
  final int div=pointerUp ? count - 1 : count;
  final float focusX;
  final float focusY;
  if (inAnchoredScaleMode()) {
    focusX=mAnchoredScaleStartX;
    focusY=mAnchoredScaleStartY;
    if (event.getY() < focusY) {
      mEventBeforeOrAboveStartingGestureEvent=true;
    }
 else {
      mEventBeforeOrAboveStartingGestureEvent=false;
    }
  }
 else {
    for (int i=0; i < count; i++) {
      if (skipIndex == i)       continue;
      sumX+=event.getX(i);
      sumY+=event.getY(i);
    }
    focusX=sumX / div;
    focusY=sumY / div;
  }
  addTouchHistory(event);
  float devSumX=0, devSumY=0;
  for (int i=0; i < count; i++) {
    if (skipIndex == i)     continue;
    final float touchSize=mTouchHistoryLastAccepted / 2;
    devSumX+=Math.abs(event.getX(i) - focusX) + touchSize;
    devSumY+=Math.abs(event.getY(i) - focusY) + touchSize;
  }
  final float devX=devSumX / div;
  final float devY=devSumY / div;
  final float spanX=devX * 2;
  final float spanY=devY * 2;
  final float span;
  if (inAnchoredScaleMode()) {
    span=spanY;
  }
 else {
    span=(float)Math.hypot(spanX,spanY);
  }
  final boolean wasInProgress=mInProgress;
  mFocusX=focusX;
  mFocusY=focusY;
  if (!inAnchoredScaleMode() && mInProgress && (span < mMinSpan || configChanged)) {
    mListener.onScaleEnd(this);
    mInProgress=false;
    mInitialSpan=span;
  }
  if (configChanged) {
    mPrevSpanX=mCurrSpanX=spanX;
    mPrevSpanY=mCurrSpanY=spanY;
    mInitialSpan=mPrevSpan=mCurrSpan=span;
  }
  final int minSpan=inAnchoredScaleMode() ? mSpanSlop : mMinSpan;
  if (!mInProgress && span >= minSpan && (wasInProgress || Math.abs(span - mInitialSpan) > mSpanSlop)) {
    mPrevSpanX=mCurrSpanX=spanX;
    mPrevSpanY=mCurrSpanY=spanY;
    mPrevSpan=mCurrSpan=span;
    mPrevTime=mCurrTime;
    mInProgress=mListener.onScaleBegin(this);
  }
  if (action == MotionEvent.ACTION_MOVE) {
    mCurrSpanX=spanX;
    mCurrSpanY=spanY;
    mCurrSpan=span;
    boolean updatePrev=true;
    if (mInProgress) {
      updatePrev=mListener.onScale(this);
    }
    if (updatePrev) {
      mPrevSpanX=mCurrSpanX;
      mPrevSpanY=mCurrSpanY;
      mPrevSpan=mCurrSpan;
      mPrevTime=mCurrTime;
    }
  }
  return true;
}
