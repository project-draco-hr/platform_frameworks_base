{
  if (mInputEventConsistencyVerifier != null) {
    mInputEventConsistencyVerifier.onTouchEvent(event,0);
  }
  final int action=event.getActionMasked();
  boolean handled=true;
  if (action == MotionEvent.ACTION_DOWN) {
    reset();
  }
  if (mInvalidGesture)   return false;
  if (!mGestureInProgress) {
switch (action) {
case MotionEvent.ACTION_DOWN:
{
        mActiveId0=event.getPointerId(0);
        mActive0MostRecent=true;
      }
    break;
case MotionEvent.ACTION_UP:
  reset();
break;
case MotionEvent.ACTION_POINTER_DOWN:
{
DisplayMetrics metrics=mContext.getResources().getDisplayMetrics();
mRightSlopEdge=metrics.widthPixels - mEdgeSlop;
mBottomSlopEdge=metrics.heightPixels - mEdgeSlop;
if (mPrevEvent != null) mPrevEvent.recycle();
mPrevEvent=MotionEvent.obtain(event);
mTimeDelta=0;
int index1=event.getActionIndex();
int index0=event.findPointerIndex(mActiveId0);
mActiveId1=event.getPointerId(index1);
if (index0 < 0 || index0 == index1) {
  index0=findNewActiveIndex(event,index0 == index1 ? -1 : mActiveId1,index0);
  mActiveId0=event.getPointerId(index0);
}
mActive0MostRecent=false;
setContext(event);
final float edgeSlop=mEdgeSlop;
final float rightSlop=mRightSlopEdge;
final float bottomSlop=mBottomSlopEdge;
float x0=getRawX(event,index0);
float y0=getRawY(event,index0);
float x1=getRawX(event,index1);
float y1=getRawY(event,index1);
boolean p0sloppy=x0 < edgeSlop || y0 < edgeSlop || x0 > rightSlop || y0 > bottomSlop;
boolean p1sloppy=x1 < edgeSlop || y1 < edgeSlop || x1 > rightSlop || y1 > bottomSlop;
if (p0sloppy && p1sloppy) {
  mFocusX=-1;
  mFocusY=-1;
  mSloppyGesture=true;
}
 else if (p0sloppy) {
  mFocusX=event.getX(index1);
  mFocusY=event.getY(index1);
  mSloppyGesture=true;
}
 else if (p1sloppy) {
  mFocusX=event.getX(index0);
  mFocusY=event.getY(index0);
  mSloppyGesture=true;
}
 else {
  mSloppyGesture=false;
  mGestureInProgress=mListener.onScaleBegin(this);
}
}
break;
case MotionEvent.ACTION_MOVE:
if (mSloppyGesture) {
final float edgeSlop=mEdgeSlop;
final float rightSlop=mRightSlopEdge;
final float bottomSlop=mBottomSlopEdge;
int index0=event.findPointerIndex(mActiveId0);
int index1=event.findPointerIndex(mActiveId1);
float x0=getRawX(event,index0);
float y0=getRawY(event,index0);
float x1=getRawX(event,index1);
float y1=getRawY(event,index1);
boolean p0sloppy=x0 < edgeSlop || y0 < edgeSlop || x0 > rightSlop || y0 > bottomSlop;
boolean p1sloppy=x1 < edgeSlop || y1 < edgeSlop || x1 > rightSlop || y1 > bottomSlop;
if (p0sloppy) {
int index=findNewActiveIndex(event,mActiveId1,index0);
if (index >= 0) {
index0=index;
mActiveId0=event.getPointerId(index);
x0=getRawX(event,index);
y0=getRawY(event,index);
p0sloppy=false;
}
}
if (p1sloppy) {
int index=findNewActiveIndex(event,mActiveId0,index1);
if (index >= 0) {
index1=index;
mActiveId1=event.getPointerId(index);
x1=getRawX(event,index);
y1=getRawY(event,index);
p1sloppy=false;
}
}
if (p0sloppy && p1sloppy) {
mFocusX=-1;
mFocusY=-1;
}
 else if (p0sloppy) {
mFocusX=event.getX(index1);
mFocusY=event.getY(index1);
}
 else if (p1sloppy) {
mFocusX=event.getX(index0);
mFocusY=event.getY(index0);
}
 else {
mSloppyGesture=false;
mGestureInProgress=mListener.onScaleBegin(this);
}
}
break;
case MotionEvent.ACTION_POINTER_UP:
if (mSloppyGesture) {
final int pointerCount=event.getPointerCount();
final int actionIndex=event.getActionIndex();
final int actionId=event.getPointerId(actionIndex);
if (pointerCount > 2) {
if (actionId == mActiveId0) {
final int newIndex=findNewActiveIndex(event,mActiveId1,actionIndex);
if (newIndex >= 0) mActiveId0=event.getPointerId(newIndex);
}
 else if (actionId == mActiveId1) {
final int newIndex=findNewActiveIndex(event,mActiveId0,actionIndex);
if (newIndex >= 0) mActiveId1=event.getPointerId(newIndex);
}
}
 else {
final int index=event.findPointerIndex(actionId == mActiveId0 ? mActiveId1 : mActiveId0);
mActiveId0=event.getPointerId(index);
mActive0MostRecent=true;
mActiveId1=-1;
mFocusX=event.getX(index);
mFocusY=event.getY(index);
}
}
break;
}
}
 else {
switch (action) {
case MotionEvent.ACTION_POINTER_DOWN:
{
mListener.onScaleEnd(this);
final int oldActive0=mActiveId0;
final int oldActive1=mActiveId1;
reset();
mPrevEvent=MotionEvent.obtain(event);
mActiveId0=mActive0MostRecent ? oldActive0 : oldActive1;
mActiveId1=event.getPointerId(event.getActionIndex());
mActive0MostRecent=false;
int index0=event.findPointerIndex(mActiveId0);
if (index0 < 0 || mActiveId0 == mActiveId1) {
Log.e(TAG,"Got " + MotionEvent.actionToString(action) + " with bad state while a gesture was in progress. "+ "Did you forget to pass an event to "+ "ScaleGestureDetector#onTouchEvent?");
index0=findNewActiveIndex(event,mActiveId0 == mActiveId1 ? -1 : mActiveId1,index0);
mActiveId0=event.getPointerId(index0);
}
setContext(event);
mGestureInProgress=mListener.onScaleBegin(this);
}
break;
case MotionEvent.ACTION_POINTER_UP:
{
final int pointerCount=event.getPointerCount();
final int actionIndex=event.getActionIndex();
final int actionId=event.getPointerId(actionIndex);
boolean gestureEnded=false;
if (pointerCount > 2) {
if (actionId == mActiveId0) {
final int newIndex=findNewActiveIndex(event,mActiveId1,actionIndex);
if (newIndex >= 0) {
mListener.onScaleEnd(this);
mActiveId0=event.getPointerId(newIndex);
mActive0MostRecent=true;
mPrevEvent=MotionEvent.obtain(event);
setContext(event);
mGestureInProgress=mListener.onScaleBegin(this);
}
 else {
gestureEnded=true;
}
}
 else if (actionId == mActiveId1) {
final int newIndex=findNewActiveIndex(event,mActiveId0,actionIndex);
if (newIndex >= 0) {
mListener.onScaleEnd(this);
mActiveId1=event.getPointerId(newIndex);
mActive0MostRecent=false;
mPrevEvent=MotionEvent.obtain(event);
setContext(event);
mGestureInProgress=mListener.onScaleBegin(this);
}
 else {
gestureEnded=true;
}
}
mPrevEvent.recycle();
mPrevEvent=MotionEvent.obtain(event);
setContext(event);
}
 else {
gestureEnded=true;
}
if (gestureEnded) {
setContext(event);
final int activeId=actionId == mActiveId0 ? mActiveId1 : mActiveId0;
final int index=event.findPointerIndex(activeId);
mFocusX=event.getX(index);
mFocusY=event.getY(index);
mListener.onScaleEnd(this);
reset();
mActiveId0=activeId;
mActive0MostRecent=true;
}
}
break;
case MotionEvent.ACTION_CANCEL:
mListener.onScaleEnd(this);
reset();
break;
case MotionEvent.ACTION_UP:
reset();
break;
case MotionEvent.ACTION_MOVE:
{
setContext(event);
if (mCurrPressure / mPrevPressure > PRESSURE_THRESHOLD) {
final boolean updatePrevious=mListener.onScale(this);
if (updatePrevious) {
mPrevEvent.recycle();
mPrevEvent=MotionEvent.obtain(event);
}
}
}
break;
}
}
return handled;
}
