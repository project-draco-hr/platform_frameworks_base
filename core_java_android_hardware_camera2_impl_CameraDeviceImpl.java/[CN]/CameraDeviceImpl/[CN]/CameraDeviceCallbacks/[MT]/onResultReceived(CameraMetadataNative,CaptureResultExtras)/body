{
  int requestId=resultExtras.getRequestId();
  long frameNumber=resultExtras.getFrameNumber();
  if (DEBUG) {
    Log.v(TAG,"Received result frame " + frameNumber + " for id "+ requestId);
  }
synchronized (mInterfaceLock) {
    if (mRemoteDevice == null)     return;
    result.set(CameraCharacteristics.LENS_INFO_SHADING_MAP_SIZE,getCharacteristics().get(CameraCharacteristics.LENS_INFO_SHADING_MAP_SIZE));
    final CaptureListenerHolder holder=CameraDeviceImpl.this.mCaptureListenerMap.get(requestId);
    boolean isPartialResult=(resultExtras.getPartialResultCount() < mTotalPartialCount);
    if (!isPartialResult) {
      mFrameNumberTracker.updateTracker(frameNumber,false);
    }
    if (holder == null) {
      if (DEBUG) {
        Log.d(TAG,"holder is null, early return at frame " + frameNumber);
      }
      return;
    }
    if (isClosed()) {
      if (DEBUG) {
        Log.d(TAG,"camera is closed, early return at frame " + frameNumber);
      }
      return;
    }
    final CaptureRequest request=holder.getRequest(resultExtras.getSubsequenceId());
    Runnable resultDispatch=null;
    if (isPartialResult) {
      final CaptureResult resultAsCapture=new CaptureResult(result,request,resultExtras);
      resultDispatch=new Runnable(){
        @Override public void run(){
          if (!CameraDeviceImpl.this.isClosed()) {
            holder.getListener().onCaptureProgressed(CameraDeviceImpl.this,request,resultAsCapture);
          }
        }
      }
;
    }
 else {
      final TotalCaptureResult resultAsCapture=new TotalCaptureResult(result,request,resultExtras);
      resultDispatch=new Runnable(){
        @Override public void run(){
          if (!CameraDeviceImpl.this.isClosed()) {
            holder.getListener().onCaptureCompleted(CameraDeviceImpl.this,request,resultAsCapture);
          }
        }
      }
;
    }
    holder.getHandler().post(resultDispatch);
    if (!isPartialResult) {
      checkAndFireSequenceComplete();
    }
  }
}
