{
  handler=checkHandler(handler,callback);
  for (  CaptureRequest request : requestList) {
    if (request.getTargets().isEmpty()) {
      throw new IllegalArgumentException("Each request must have at least one Surface target");
    }
    for (    Surface surface : request.getTargets()) {
      if (surface == null) {
        throw new IllegalArgumentException("Null Surface targets are not allowed");
      }
    }
  }
synchronized (mInterfaceLock) {
    checkIfCameraClosedOrInError();
    if (repeating) {
      stopRepeating();
    }
    SubmitInfo requestInfo;
    CaptureRequest[] requestArray=requestList.toArray(new CaptureRequest[requestList.size()]);
    requestInfo=mRemoteDevice.submitRequestList(requestArray,repeating);
    if (DEBUG) {
      Log.v(TAG,"last frame number " + requestInfo.getLastFrameNumber());
    }
    if (callback != null) {
      mCaptureCallbackMap.put(requestInfo.getRequestId(),new CaptureCallbackHolder(callback,requestList,handler,repeating,mNextSessionId - 1));
    }
 else {
      if (DEBUG) {
        Log.d(TAG,"Listen for request " + requestInfo.getRequestId() + " is null");
      }
    }
    if (repeating) {
      if (mRepeatingRequestId != REQUEST_ID_NONE) {
        checkEarlyTriggerSequenceComplete(mRepeatingRequestId,requestInfo.getLastFrameNumber());
      }
      mRepeatingRequestId=requestInfo.getRequestId();
    }
 else {
      mRequestLastFrameNumbersList.add(new RequestLastFrameNumbersHolder(requestList,requestInfo));
    }
    if (mIdle) {
      mDeviceHandler.post(mCallOnActive);
    }
    mIdle=false;
    return requestInfo.getRequestId();
  }
}
