{
  if (lastFrameNumber == CaptureCallback.NO_FRAMES_CAPTURED) {
    final CaptureCallbackHolder holder;
    int index=mCaptureCallbackMap.indexOfKey(requestId);
    holder=(index >= 0) ? mCaptureCallbackMap.valueAt(index) : null;
    if (holder != null) {
      mCaptureCallbackMap.removeAt(index);
      if (DEBUG) {
        Log.v(TAG,String.format("remove holder for requestId %d, " + "because lastFrame is %d.",requestId,lastFrameNumber));
      }
    }
    if (holder != null) {
      if (DEBUG) {
        Log.v(TAG,"immediately trigger onCaptureSequenceAborted because" + " request did not reach HAL");
      }
      Runnable resultDispatch=new Runnable(){
        @Override public void run(){
          if (!CameraDeviceImpl.this.isClosed()) {
            if (DEBUG) {
              Log.d(TAG,String.format("early trigger sequence complete for request %d",requestId));
            }
            if (lastFrameNumber < Integer.MIN_VALUE || lastFrameNumber > Integer.MAX_VALUE) {
              throw new AssertionError(lastFrameNumber + " cannot be cast to int");
            }
            holder.getCallback().onCaptureSequenceAborted(CameraDeviceImpl.this,requestId);
          }
        }
      }
;
      holder.getHandler().post(resultDispatch);
    }
 else {
      Log.w(TAG,String.format("did not register callback to request %d",requestId));
    }
  }
 else {
    mFrameNumberRequestPairs.add(new SimpleEntry<Long,Integer>(lastFrameNumber,requestId));
  }
}
