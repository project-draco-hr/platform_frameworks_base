{
  int type=parser.getEventType();
  if (type != XmlPullParser.START_TAG)   return;
  String tag=parser.getName();
  if (!TAG_RANKING.equals(tag))   return;
  mPackagePriorities.clear();
  final int version=safeInt(parser,ATT_VERSION,XML_VERSION);
  while ((type=parser.next()) != XmlPullParser.END_DOCUMENT) {
    tag=parser.getName();
    if (type == XmlPullParser.END_TAG && TAG_RANKING.equals(tag)) {
      return;
    }
    if (type == XmlPullParser.START_TAG) {
      if (TAG_PACKAGE.equals(tag)) {
        int uid=safeInt(parser,ATT_UID,UserHandle.USER_ALL);
        int priority=safeInt(parser,ATT_PRIORITY,Notification.PRIORITY_DEFAULT);
        int vis=safeInt(parser,ATT_VISIBILITY,NotificationListenerService.Ranking.VISIBILITY_NO_OVERRIDE);
        String name=parser.getAttributeValue(null,ATT_NAME);
        if (!TextUtils.isEmpty(name)) {
          if (priority != Notification.PRIORITY_DEFAULT) {
            SparseIntArray priorityByUid=mPackagePriorities.get(name);
            if (priorityByUid == null) {
              priorityByUid=new SparseIntArray();
              mPackagePriorities.put(name,priorityByUid);
            }
            priorityByUid.put(uid,priority);
          }
          if (vis != NotificationListenerService.Ranking.VISIBILITY_NO_OVERRIDE) {
            SparseIntArray visibilityByUid=mPackageVisibilities.get(name);
            if (visibilityByUid == null) {
              visibilityByUid=new SparseIntArray();
              mPackageVisibilities.put(name,visibilityByUid);
            }
            visibilityByUid.put(uid,vis);
          }
        }
      }
    }
  }
  throw new IllegalStateException("Failed to reach END_DOCUMENT");
}
