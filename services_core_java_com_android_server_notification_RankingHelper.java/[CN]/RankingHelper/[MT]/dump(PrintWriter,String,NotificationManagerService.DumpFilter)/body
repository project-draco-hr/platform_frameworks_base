{
  if (filter == null) {
    final int N=mSignalExtractors.length;
    pw.print(prefix);
    pw.print("mSignalExtractors.length = ");
    pw.println(N);
    for (int i=0; i < N; i++) {
      pw.print(prefix);
      pw.print("  ");
      pw.println(mSignalExtractors[i]);
    }
  }
  final int N=mPackagePriorities.size();
  if (filter == null) {
    pw.print(prefix);
    pw.println("package priorities:");
  }
  for (int i=0; i < N; i++) {
    String name=mPackagePriorities.keyAt(i);
    if (filter == null || filter.matches(name)) {
      SparseIntArray priorityByUid=mPackagePriorities.get(name);
      final int M=priorityByUid.size();
      for (int j=0; j < M; j++) {
        int uid=priorityByUid.keyAt(j);
        int priority=priorityByUid.get(uid);
        pw.print(prefix);
        pw.print("  ");
        pw.print(name);
        pw.print(" (");
        pw.print(uid);
        pw.print(") has priority: ");
        pw.println(priority);
      }
    }
  }
}
