{
  final PackageManager pm=mContext.getPackageManager();
  int type=parser.getEventType();
  if (type != XmlPullParser.START_TAG)   return;
  String tag=parser.getName();
  if (!TAG_RANKING.equals(tag))   return;
  mRecords.clear();
  mRestoredWithoutUids.clear();
  while ((type=parser.next()) != XmlPullParser.END_DOCUMENT) {
    tag=parser.getName();
    if (type == XmlPullParser.END_TAG && TAG_RANKING.equals(tag)) {
      return;
    }
    if (type == XmlPullParser.START_TAG) {
      if (TAG_PACKAGE.equals(tag)) {
        int uid=safeInt(parser,ATT_UID,Record.UNKNOWN_UID);
        String name=parser.getAttributeValue(null,ATT_NAME);
        if (!TextUtils.isEmpty(name)) {
          if (forRestore) {
            try {
              uid=pm.getPackageUidAsUser(name,UserHandle.USER_SYSTEM);
            }
 catch (            NameNotFoundException e) {
            }
          }
          Record r=null;
          if (uid == Record.UNKNOWN_UID) {
            r=mRestoredWithoutUids.get(name);
            if (r == null) {
              r=new Record();
              mRestoredWithoutUids.put(name,r);
            }
          }
 else {
            r=getOrCreateRecord(name,uid);
          }
          r.importance=safeInt(parser,ATT_IMPORTANCE,DEFAULT_IMPORTANCE);
          r.priority=safeInt(parser,ATT_PRIORITY,DEFAULT_PRIORITY);
          r.visibility=safeInt(parser,ATT_VISIBILITY,DEFAULT_VISIBILITY);
        }
      }
    }
  }
  throw new IllegalStateException("Failed to reach END_DOCUMENT");
}
