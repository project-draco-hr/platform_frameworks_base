{
  out.startTag(null,TAG_RANKING);
  out.attribute(null,ATT_VERSION,Integer.toString(XML_VERSION));
  final Set<String> packageNames=new ArraySet<>(mPackagePriorities.size() + mPackageVisibilities.size());
  packageNames.addAll(mPackagePriorities.keySet());
  packageNames.addAll(mPackageVisibilities.keySet());
  final Set<Integer> packageUids=new ArraySet<>();
  for (  String packageName : packageNames) {
    packageUids.clear();
    SparseIntArray priorityByUid=mPackagePriorities.get(packageName);
    SparseIntArray visibilityByUid=mPackageVisibilities.get(packageName);
    if (priorityByUid != null) {
      final int M=priorityByUid.size();
      for (int j=0; j < M; j++) {
        packageUids.add(priorityByUid.keyAt(j));
      }
    }
    if (visibilityByUid != null) {
      final int M=visibilityByUid.size();
      for (int j=0; j < M; j++) {
        packageUids.add(visibilityByUid.keyAt(j));
      }
    }
    for (    Integer uid : packageUids) {
      out.startTag(null,TAG_PACKAGE);
      out.attribute(null,ATT_NAME,packageName);
      if (priorityByUid != null) {
        final int priority=priorityByUid.get(uid);
        if (priority != Notification.PRIORITY_DEFAULT) {
          out.attribute(null,ATT_PRIORITY,Integer.toString(priority));
        }
      }
      if (visibilityByUid != null) {
        final int visibility=visibilityByUid.get(uid);
        if (visibility != NotificationListenerService.Ranking.VISIBILITY_NO_OVERRIDE) {
          out.attribute(null,ATT_VISIBILITY,Integer.toString(visibility));
        }
      }
      out.attribute(null,ATT_UID,Integer.toString(uid));
      out.endTag(null,TAG_PACKAGE);
    }
  }
  out.endTag(null,TAG_RANKING);
}
