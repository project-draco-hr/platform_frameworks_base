{
  if (messagesBlocked())   return;
switch (msg.what) {
case PAGE_STARTED:
    String startedUrl=msg.getData().getString("url");
  mWebView.onPageStarted(startedUrl);
if (mWebViewClient != null) {
  mWebViewClient.onPageStarted(mWebView.getWebView(),startedUrl,(Bitmap)msg.obj);
}
break;
case PAGE_FINISHED:
String finishedUrl=(String)msg.obj;
mWebView.onPageFinished(finishedUrl);
if (mWebViewClient != null) {
mWebViewClient.onPageFinished(mWebView.getWebView(),finishedUrl);
}
break;
case RECEIVED_ICON:
if (mWebChromeClient != null) {
mWebChromeClient.onReceivedIcon(mWebView.getWebView(),(Bitmap)msg.obj);
}
break;
case RECEIVED_TOUCH_ICON_URL:
if (mWebChromeClient != null) {
mWebChromeClient.onReceivedTouchIconUrl(mWebView.getWebView(),(String)msg.obj,msg.arg1 == 1);
}
break;
case RECEIVED_TITLE:
if (mWebChromeClient != null) {
mWebChromeClient.onReceivedTitle(mWebView.getWebView(),(String)msg.obj);
}
break;
case REPORT_ERROR:
if (mWebViewClient != null) {
int reasonCode=msg.arg1;
final String description=msg.getData().getString("description");
final String failUrl=msg.getData().getString("failingUrl");
mWebViewClient.onReceivedError(mWebView.getWebView(),reasonCode,description,failUrl);
}
break;
case RESEND_POST_DATA:
Message resend=(Message)msg.getData().getParcelable("resend");
Message dontResend=(Message)msg.getData().getParcelable("dontResend");
if (mWebViewClient != null) {
mWebViewClient.onFormResubmission(mWebView.getWebView(),dontResend,resend);
}
 else {
dontResend.sendToTarget();
}
break;
case OVERRIDE_URL:
String overrideUrl=msg.getData().getString("url");
boolean override=uiOverrideUrlLoading(overrideUrl);
ResultTransport<Boolean> result=(ResultTransport<Boolean>)msg.obj;
synchronized (this) {
result.setResult(override);
notify();
}
break;
case AUTH_REQUEST:
if (mWebViewClient != null) {
HttpAuthHandler handler=(HttpAuthHandler)msg.obj;
String host=msg.getData().getString("host");
String realm=msg.getData().getString("realm");
mWebViewClient.onReceivedHttpAuthRequest(mWebView.getWebView(),handler,host,realm);
}
break;
case SSL_ERROR:
if (mWebViewClient != null) {
HashMap<String,Object> map=(HashMap<String,Object>)msg.obj;
mWebViewClient.onReceivedSslError(mWebView.getWebView(),(SslErrorHandler)map.get("handler"),(SslError)map.get("error"));
}
break;
case PROCEEDED_AFTER_SSL_ERROR:
if (mWebViewClient != null && mWebViewClient instanceof WebViewClientClassicExt) {
((WebViewClientClassicExt)mWebViewClient).onProceededAfterSslError(mWebView.getWebView(),(SslError)msg.obj);
}
break;
case CLIENT_CERT_REQUEST:
if (mWebViewClient != null && mWebViewClient instanceof WebViewClientClassicExt) {
HashMap<String,Object> map=(HashMap<String,Object>)msg.obj;
((WebViewClientClassicExt)mWebViewClient).onReceivedClientCertRequest(mWebView.getWebView(),(ClientCertRequestHandler)map.get("handler"),(String)map.get("host_and_port"));
}
break;
case PROGRESS:
synchronized (this) {
if (mWebChromeClient != null) {
mWebChromeClient.onProgressChanged(mWebView.getWebView(),mLatestProgress);
}
mProgressUpdatePending=false;
}
break;
case UPDATE_VISITED:
if (mWebViewClient != null) {
mWebViewClient.doUpdateVisitedHistory(mWebView.getWebView(),(String)msg.obj,msg.arg1 != 0);
}
break;
case LOAD_RESOURCE:
if (mWebViewClient != null) {
mWebViewClient.onLoadResource(mWebView.getWebView(),(String)msg.obj);
}
break;
case DOWNLOAD_FILE:
if (mDownloadListener != null) {
String url=msg.getData().getString("url");
String userAgent=msg.getData().getString("userAgent");
String contentDisposition=msg.getData().getString("contentDisposition");
String mimetype=msg.getData().getString("mimetype");
String referer=msg.getData().getString("referer");
Long contentLength=msg.getData().getLong("contentLength");
if (mDownloadListener instanceof BrowserDownloadListener) {
((BrowserDownloadListener)mDownloadListener).onDownloadStart(url,userAgent,contentDisposition,mimetype,referer,contentLength);
}
 else {
mDownloadListener.onDownloadStart(url,userAgent,contentDisposition,mimetype,contentLength);
}
}
break;
case CREATE_WINDOW:
if (mWebChromeClient != null) {
if (!mWebChromeClient.onCreateWindow(mWebView.getWebView(),msg.arg1 == 1,msg.arg2 == 1,(Message)msg.obj)) {
synchronized (this) {
notify();
}
}
mWebView.dismissZoomControl();
}
break;
case REQUEST_FOCUS:
if (mWebChromeClient != null) {
mWebChromeClient.onRequestFocus(mWebView.getWebView());
}
break;
case CLOSE_WINDOW:
if (mWebChromeClient != null) {
mWebChromeClient.onCloseWindow(((WebViewClassic)msg.obj).getWebView());
}
break;
case SAVE_PASSWORD:
Bundle bundle=msg.getData();
String schemePlusHost=bundle.getString("host");
String username=bundle.getString("username");
String password=bundle.getString("password");
if (!mWebView.onSavePassword(schemePlusHost,username,password,(Message)msg.obj)) {
synchronized (this) {
notify();
}
}
break;
case ASYNC_KEYEVENTS:
if (mWebViewClient != null) {
mWebViewClient.onUnhandledKeyEvent(mWebView.getWebView(),(KeyEvent)msg.obj);
}
break;
case EXCEEDED_DATABASE_QUOTA:
if (mWebChromeClient != null) {
HashMap<String,Object> map=(HashMap<String,Object>)msg.obj;
String databaseIdentifier=(String)map.get("databaseIdentifier");
String url=(String)map.get("url");
long quota=((Long)map.get("quota")).longValue();
long totalQuota=((Long)map.get("totalQuota")).longValue();
long estimatedDatabaseSize=((Long)map.get("estimatedDatabaseSize")).longValue();
WebStorage.QuotaUpdater quotaUpdater=(WebStorage.QuotaUpdater)map.get("quotaUpdater");
mWebChromeClient.onExceededDatabaseQuota(url,databaseIdentifier,quota,estimatedDatabaseSize,totalQuota,quotaUpdater);
}
break;
case REACHED_APPCACHE_MAXSIZE:
if (mWebChromeClient != null) {
HashMap<String,Object> map=(HashMap<String,Object>)msg.obj;
long requiredStorage=((Long)map.get("requiredStorage")).longValue();
long quota=((Long)map.get("quota")).longValue();
WebStorage.QuotaUpdater quotaUpdater=(WebStorage.QuotaUpdater)map.get("quotaUpdater");
mWebChromeClient.onReachedMaxAppCacheSize(requiredStorage,quota,quotaUpdater);
}
break;
case GEOLOCATION_PERMISSIONS_SHOW_PROMPT:
if (mWebChromeClient != null) {
HashMap<String,Object> map=(HashMap<String,Object>)msg.obj;
String origin=(String)map.get("origin");
GeolocationPermissions.Callback callback=(GeolocationPermissions.Callback)map.get("callback");
mWebChromeClient.onGeolocationPermissionsShowPrompt(origin,callback);
}
break;
case GEOLOCATION_PERMISSIONS_HIDE_PROMPT:
if (mWebChromeClient != null) {
mWebChromeClient.onGeolocationPermissionsHidePrompt();
}
break;
case JS_DIALOG:
if (mWebChromeClient != null) {
final JsResultReceiver receiver=(JsResultReceiver)msg.obj;
JsDialogHelper helper=new JsDialogHelper(receiver.mJsResult,msg);
if (!helper.invokeCallback(mWebChromeClient,mWebView.getWebView())) {
helper.showDialog(mContext);
}
receiver.setReady();
}
break;
case JS_TIMEOUT:
if (mWebChromeClient != null) {
final JsResultReceiver receiver=(JsResultReceiver)msg.obj;
final JsResult res=receiver.mJsResult;
if (mWebChromeClient.onJsTimeout()) {
res.confirm();
}
 else {
res.cancel();
}
receiver.setReady();
}
break;
case RECEIVED_CERTIFICATE:
mWebView.setCertificate((SslCertificate)msg.obj);
break;
case NOTIFY:
synchronized (this) {
notify();
}
break;
case SCALE_CHANGED:
if (mWebViewClient != null) {
mWebViewClient.onScaleChanged(mWebView.getWebView(),msg.getData().getFloat("old"),msg.getData().getFloat("new"));
}
break;
case SWITCH_OUT_HISTORY:
mWebView.switchOutDrawHistory();
break;
case ADD_MESSAGE_TO_CONSOLE:
if (mWebChromeClient == null) {
break;
}
String message=msg.getData().getString("message");
String sourceID=msg.getData().getString("sourceID");
int lineNumber=msg.getData().getInt("lineNumber");
int msgLevel=msg.getData().getInt("msgLevel");
int numberOfMessageLevels=ConsoleMessage.MessageLevel.values().length;
if (msgLevel < 0 || msgLevel >= numberOfMessageLevels) {
msgLevel=0;
}
ConsoleMessage.MessageLevel messageLevel=ConsoleMessage.MessageLevel.values()[msgLevel];
if (!mWebChromeClient.onConsoleMessage(new ConsoleMessage(message,sourceID,lineNumber,messageLevel))) {
String logTag="Web Console";
String logMessage=message + " at " + sourceID+ ":"+ lineNumber;
switch (messageLevel) {
case TIP:
Log.v(logTag,logMessage);
break;
case LOG:
Log.i(logTag,logMessage);
break;
case WARNING:
Log.w(logTag,logMessage);
break;
case ERROR:
Log.e(logTag,logMessage);
break;
case DEBUG:
Log.d(logTag,logMessage);
break;
}
}
break;
case GET_VISITED_HISTORY:
if (mWebChromeClient != null) {
mWebChromeClient.getVisitedHistory((ValueCallback<String[]>)msg.obj);
}
break;
case OPEN_FILE_CHOOSER:
if (mWebChromeClient != null) {
UploadFileMessageData data=(UploadFileMessageData)msg.obj;
mWebChromeClient.openFileChooser(data.getUploadFile(),data.getAcceptType(),data.getCapture());
}
break;
case ADD_HISTORY_ITEM:
if (mWebBackForwardListClient != null) {
mWebBackForwardListClient.onNewHistoryItem((WebHistoryItem)msg.obj);
}
break;
case HISTORY_INDEX_CHANGED:
if (mWebBackForwardListClient != null) {
mWebBackForwardListClient.onIndexChanged((WebHistoryItem)msg.obj,msg.arg1);
}
break;
case AUTH_CREDENTIALS:
{
String host=msg.getData().getString("host");
String realm=msg.getData().getString("realm");
username=msg.getData().getString("username");
password=msg.getData().getString("password");
mWebView.setHttpAuthUsernamePassword(host,realm,username,password);
break;
}
case AUTO_LOGIN:
{
if (mWebViewClient != null) {
String realm=msg.getData().getString("realm");
String account=msg.getData().getString("account");
String args=msg.getData().getString("args");
mWebViewClient.onReceivedLoginRequest(mWebView.getWebView(),realm,account,args);
}
break;
}
}
}
