{
  if (mStackScroller == null)   return;
  int speedbumpIndex=-1;
  int maxKeyguardNotifications=getMaxKeyguardNotifications();
  mKeyguardIconOverflowContainer.getIconsView().removeAllViews();
  int visibleNotifications=0;
  boolean onKeyguard=mState == StatusBarState.KEYGUARD;
  mOldOverflowNotifications.clear();
  mOldOverflowNotifications.addAll(mOverflowNotifications);
  ArrayList<Entry> activeNotifications=mNotificationData.getActiveNotifications();
  ArrayList<View> toShow=new ArrayList<>(activeNotifications.size());
  final int N=activeNotifications.size();
  for (int i=0; i < N; i++) {
    Entry ent=activeNotifications.get(i);
    int vis=ent.notification.getNotification().visibility;
    boolean showOnKeyguard=mShowLockscreenNotifications && !mNotificationData.isAmbient(ent.key);
    if (onKeyguard && (visibleNotifications >= maxKeyguardNotifications || !showOnKeyguard)) {
      if (showOnKeyguard) {
        mKeyguardIconOverflowContainer.getIconsView().addNotification(ent);
        mOverflowNotifications.add(ent.row);
      }
      continue;
    }
    final boolean hideSensitive=!userAllowsPrivateNotificationsInPublic(ent.notification.getUserId());
    boolean sensitive=vis == Notification.VISIBILITY_PRIVATE;
    boolean showingPublic=sensitive && hideSensitive && isLockscreenPublicMode();
    ent.row.setSensitive(sensitive && hideSensitive);
    if (ent.autoRedacted && ent.legacy) {
      if (showingPublic) {
        ent.row.setShowingLegacyBackground(false);
      }
 else {
        ent.row.setShowingLegacyBackground(true);
      }
    }
    toShow.add(ent.row);
    visibleNotifications++;
    if (speedbumpIndex == -1 && mNotificationData.isAmbient(ent.key)) {
      speedbumpIndex=visibleNotifications - 1;
    }
  }
  if (onKeyguard && mKeyguardIconOverflowContainer.getIconsView().getChildCount() > 0) {
    toShow.add(mKeyguardIconOverflowContainer);
  }
  ArrayList<View> toRemove=new ArrayList<View>();
  for (int i=0; i < mStackScroller.getChildCount(); i++) {
    View child=mStackScroller.getChildAt(i);
    if ((child instanceof ExpandableNotificationRow || child == mKeyguardIconOverflowContainer) && !toShow.contains(child)) {
      toRemove.add(child);
    }
  }
  for (  View remove : toRemove) {
    mStackScroller.removeView(remove);
  }
  for (int i=0; i < toShow.size(); i++) {
    View v=toShow.get(i);
    if (v.getParent() == null) {
      mStackScroller.addView(v);
      if (mOldOverflowNotifications.contains(v)) {
        mStackScroller.notifyAddFromMoreCard(v);
      }
    }
  }
  int j=0;
  for (int i=0; i < mStackScroller.getChildCount(); i++) {
    View child=mStackScroller.getChildAt(i);
    if (!(child instanceof ExpandableNotificationRow)) {
      continue;
    }
    if (child == toShow.get(j)) {
      j++;
      continue;
    }
    mStackScroller.changeViewPosition(toShow.get(j),i);
    j++;
  }
  updateRowStates();
  mStackScroller.changeViewPosition(mEmptyShadeView,mStackScroller.getChildCount() - 1);
  mStackScroller.changeViewPosition(mDismissView,mStackScroller.getChildCount() - 2);
  mStackScroller.changeViewPosition(mKeyguardIconOverflowContainer,mStackScroller.getChildCount() - 3);
  mStackScroller.updateSpeedBumpIndex(speedbumpIndex);
  updateClearAll();
  updateEmptyShadeView();
  mNotificationPanel.setQsExpansionEnabled(isDeviceProvisioned() && mUserSetup);
  mShadeUpdates.check();
}
