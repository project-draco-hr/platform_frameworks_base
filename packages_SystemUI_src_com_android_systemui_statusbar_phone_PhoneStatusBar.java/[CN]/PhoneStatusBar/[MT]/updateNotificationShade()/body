{
  if (mStackScroller == null)   return;
  int N=mNotificationData.size();
  ArrayList<View> toShow=new ArrayList<View>();
  final boolean provisioned=isDeviceProvisioned();
  for (int i=0; i < N; i++) {
    Entry ent=mNotificationData.get(i);
    if (!(provisioned || showNotificationEvenIfUnprovisioned(ent.notification)))     continue;
    if (!notificationIsForCurrentProfiles(ent.notification))     continue;
    final int vis=ent.notification.getNotification().visibility;
    if (vis != Notification.VISIBILITY_SECRET) {
      boolean showingPublic=isLockscreenPublicMode() && vis == Notification.VISIBILITY_PRIVATE && !userAllowsPrivateNotificationsInPublic(ent.notification.getUserId());
      ent.row.setShowingPublic(showingPublic);
      if (ent.autoRedacted && ent.legacy) {
        if (showingPublic) {
          ent.row.setShowingLegacyBackground(false);
        }
 else {
          ent.row.setShowingLegacyBackground(true);
        }
      }
      toShow.add(ent.row);
    }
  }
  ArrayList<View> toRemove=new ArrayList<View>();
  for (int i=0; i < mStackScroller.getChildCount(); i++) {
    View child=mStackScroller.getChildAt(i);
    if (!toShow.contains(child) && child instanceof ExpandableNotificationRow) {
      toRemove.add(child);
    }
  }
  for (  View remove : toRemove) {
    mStackScroller.removeView(remove);
  }
  for (int i=0; i < toShow.size(); i++) {
    View v=toShow.get(i);
    if (v.getParent() == null) {
      mStackScroller.addView(v);
    }
  }
  int j=0;
  for (int i=0; i < mStackScroller.getChildCount(); i++) {
    View child=mStackScroller.getChildAt(i);
    if (!(child instanceof ExpandableNotificationRow)) {
      continue;
    }
    if (child == toShow.get(j)) {
      j++;
      continue;
    }
    mStackScroller.changeViewPosition(toShow.get(j),i);
    j++;
  }
  updateRowStates();
  updateSpeedbump();
  mNotificationPanel.setQsExpansionEnabled(provisioned && mUserSetup);
  mShadeUpdates.check();
}
