{
  final Context context=mContext;
  Resources res=context.getResources();
  updateDisplaySize();
  loadDimens();
  mIconSize=res.getDimensionPixelSize(com.android.internal.R.dimen.status_bar_icon_size);
  mStatusBarWindow=(StatusBarWindowView)View.inflate(context,R.layout.super_status_bar,null);
  mStatusBarWindow.mService=this;
  mStatusBarWindow.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      checkUserAutohide(v,event);
      if (event.getAction() == MotionEvent.ACTION_DOWN) {
        if (mExpandedVisible) {
          animateCollapsePanels();
        }
      }
      return mStatusBarWindow.onTouchEvent(event);
    }
  }
);
  mStatusBarView=(PhoneStatusBarView)mStatusBarWindow.findViewById(R.id.status_bar);
  mStatusBarView.setBar(this);
  PanelHolder holder=(PanelHolder)mStatusBarWindow.findViewById(R.id.panel_holder);
  mStatusBarView.setPanelHolder(holder);
  mNotificationPanel=(NotificationPanelView)mStatusBarWindow.findViewById(R.id.notification_panel);
  mNotificationPanel.setStatusBar(this);
  mNotificationPanelIsFullScreenWidth=(mNotificationPanel.getLayoutParams().width == ViewGroup.LayoutParams.MATCH_PARENT);
  mNotificationPanel.findViewById(R.id.header).setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      return true;
    }
  }
);
  if (!ActivityManager.isHighEndGfx()) {
    mStatusBarWindow.setBackground(null);
    mNotificationPanel.setBackground(new FastColorDrawable(context.getResources().getColor(R.color.notification_panel_solid_background)));
  }
  if (ENABLE_HEADS_UP) {
    mHeadsUpNotificationView=(HeadsUpNotificationView)View.inflate(context,R.layout.heads_up,null);
    mHeadsUpNotificationView.setVisibility(View.GONE);
    mHeadsUpNotificationView.setBar(this);
  }
  if (MULTIUSER_DEBUG) {
    mNotificationPanelDebugText=(TextView)mNotificationPanel.findViewById(R.id.header_debug_info);
    mNotificationPanelDebugText.setVisibility(View.VISIBLE);
  }
  updateShowSearchHoldoff();
  try {
    boolean showNav=mWindowManagerService.hasNavigationBar();
    if (DEBUG)     Log.v(TAG,"hasNavigationBar=" + showNav);
    if (showNav) {
      mNavigationBarView=(NavigationBarView)View.inflate(context,R.layout.navigation_bar,null);
      mNavigationBarView.setDisabledFlags(mDisabled);
      mNavigationBarView.setBar(this);
      mNavigationBarView.setOnTouchListener(new View.OnTouchListener(){
        @Override public boolean onTouch(        View v,        MotionEvent event){
          checkUserAutohide(v,event);
          return false;
        }
      }
);
    }
  }
 catch (  RemoteException ex) {
  }
  mPixelFormat=PixelFormat.OPAQUE;
  mSystemIconArea=(LinearLayout)mStatusBarView.findViewById(R.id.system_icon_area);
  mStatusIcons=(LinearLayout)mStatusBarView.findViewById(R.id.statusIcons);
  mNotificationIcons=(IconMerger)mStatusBarView.findViewById(R.id.notificationIcons);
  mMoreIcon=mStatusBarView.findViewById(R.id.moreIcon);
  mNotificationIcons.setOverflowIndicator(mMoreIcon);
  mStatusBarContents=(LinearLayout)mStatusBarView.findViewById(R.id.status_bar_contents);
  mTickerView=mStatusBarView.findViewById(R.id.ticker);
  mPile=(NotificationRowLayout)mStatusBarWindow.findViewById(R.id.latestItems);
  mPile.setLayoutTransitionsEnabled(false);
  mPile.setLongPressListener(getNotificationLongClicker());
  mExpandedContents=mPile;
  mNotificationPanelHeader=mStatusBarWindow.findViewById(R.id.header);
  mClearButton=mStatusBarWindow.findViewById(R.id.clear_all_button);
  mClearButton.setOnClickListener(mClearButtonListener);
  mClearButton.setAlpha(0f);
  mClearButton.setVisibility(View.INVISIBLE);
  mClearButton.setEnabled(false);
  mDateView=(DateView)mStatusBarWindow.findViewById(R.id.date);
  mHasSettingsPanel=res.getBoolean(R.bool.config_hasSettingsPanel);
  mHasFlipSettings=res.getBoolean(R.bool.config_hasFlipSettingsPanel);
  mDateTimeView=mNotificationPanelHeader.findViewById(R.id.datetime);
  if (mDateTimeView != null) {
    mDateTimeView.setOnClickListener(mClockClickListener);
    mDateTimeView.setEnabled(true);
  }
  mSettingsButton=(ImageView)mStatusBarWindow.findViewById(R.id.settings_button);
  if (mSettingsButton != null) {
    mSettingsButton.setOnClickListener(mSettingsButtonListener);
    if (mHasSettingsPanel) {
      if (mStatusBarView.hasFullWidthNotifications()) {
        mSettingsButton.setImageResource(R.drawable.ic_notify_quicksettings);
        mSettingsButton.setVisibility(View.VISIBLE);
      }
 else {
        final View buttonHolder=mStatusBarWindow.findViewById(R.id.settings_button_holder);
        if (buttonHolder != null) {
          buttonHolder.setVisibility(View.GONE);
        }
      }
    }
 else {
      mSettingsButton.setVisibility(View.VISIBLE);
      mSettingsButton.setImageResource(R.drawable.ic_notify_settings);
    }
  }
  if (mHasFlipSettings) {
    mNotificationButton=(ImageView)mStatusBarWindow.findViewById(R.id.notification_button);
    if (mNotificationButton != null) {
      mNotificationButton.setOnClickListener(mNotificationButtonListener);
    }
  }
  mScrollView=(ScrollView)mStatusBarWindow.findViewById(R.id.scroll);
  mScrollView.setVerticalScrollBarEnabled(false);
  if (!mNotificationPanelIsFullScreenWidth) {
    mScrollView.setSystemUiVisibility(View.STATUS_BAR_DISABLE_NOTIFICATION_TICKER | View.STATUS_BAR_DISABLE_NOTIFICATION_ICONS | View.STATUS_BAR_DISABLE_CLOCK);
  }
  mTicker=new MyTicker(context,mStatusBarView);
  TickerView tickerView=(TickerView)mStatusBarView.findViewById(R.id.tickerText);
  tickerView.mTicker=mTicker;
  mEdgeBorder=res.getDimensionPixelSize(R.dimen.status_bar_edge_ignore);
  setAreThereNotifications();
  mLocationController=new LocationController(mContext);
  mBatteryController=new BatteryController(mContext);
  mNetworkController=new NetworkController(mContext);
  mBluetoothController=new BluetoothController(mContext);
  mRotationLockController=new RotationLockController(mContext);
  final SignalClusterView signalCluster=(SignalClusterView)mStatusBarView.findViewById(R.id.signal_cluster);
  mNetworkController.addSignalCluster(signalCluster);
  signalCluster.setNetworkController(mNetworkController);
  final boolean isAPhone=mNetworkController.hasVoiceCallingFeature();
  if (isAPhone) {
    mEmergencyCallLabel=(TextView)mStatusBarWindow.findViewById(R.id.emergency_calls_only);
    if (mEmergencyCallLabel != null) {
      mNetworkController.addEmergencyLabelView(mEmergencyCallLabel);
      mEmergencyCallLabel.setOnClickListener(new View.OnClickListener(){
        public void onClick(        View v){
        }
      }
);
      mEmergencyCallLabel.addOnLayoutChangeListener(new View.OnLayoutChangeListener(){
        @Override public void onLayoutChange(        View v,        int left,        int top,        int right,        int bottom,        int oldLeft,        int oldTop,        int oldRight,        int oldBottom){
          updateCarrierLabelVisibility(false);
        }
      }
);
    }
  }
  mCarrierLabel=(TextView)mStatusBarWindow.findViewById(R.id.carrier_label);
  mShowCarrierInPanel=(mCarrierLabel != null);
  if (DEBUG)   Log.v(TAG,"carrierlabel=" + mCarrierLabel + " show="+ mShowCarrierInPanel);
  if (mShowCarrierInPanel) {
    mCarrierLabel.setVisibility(mCarrierLabelVisible ? View.VISIBLE : View.INVISIBLE);
    if (mNetworkController.hasMobileDataFeature()) {
      mNetworkController.addMobileLabelView(mCarrierLabel);
    }
 else {
      mNetworkController.addCombinedLabelView(mCarrierLabel);
    }
    mPile.setOnSizeChangedListener(new OnSizeChangedListener(){
      @Override public void onSizeChanged(      View view,      int w,      int h,      int oldw,      int oldh){
        updateCarrierLabelVisibility(false);
      }
    }
);
  }
  if (mHasSettingsPanel) {
    final View settings_stub;
    if (mHasFlipSettings) {
      settings_stub=mStatusBarWindow.findViewById(R.id.flip_settings_stub);
      if (settings_stub != null) {
        mFlipSettingsView=((ViewStub)settings_stub).inflate();
        mFlipSettingsView.setVisibility(View.GONE);
        mFlipSettingsView.setVerticalScrollBarEnabled(false);
      }
    }
 else {
      settings_stub=mStatusBarWindow.findViewById(R.id.quick_settings_stub);
      if (settings_stub != null) {
        mSettingsPanel=(SettingsPanelView)((ViewStub)settings_stub).inflate();
      }
 else {
        mSettingsPanel=(SettingsPanelView)mStatusBarWindow.findViewById(R.id.settings_panel);
      }
      if (mSettingsPanel != null) {
        if (!ActivityManager.isHighEndGfx()) {
          mSettingsPanel.setBackground(new FastColorDrawable(context.getResources().getColor(R.color.notification_panel_solid_background)));
        }
      }
    }
    mSettingsContainer=(QuickSettingsContainerView)mStatusBarWindow.findViewById(R.id.quick_settings_container);
    if (mSettingsContainer != null) {
      mQS=new QuickSettings(mContext,mSettingsContainer);
      if (!mNotificationPanelIsFullScreenWidth) {
        mSettingsContainer.setSystemUiVisibility(View.STATUS_BAR_DISABLE_NOTIFICATION_TICKER | View.STATUS_BAR_DISABLE_SYSTEM_INFO);
      }
      if (mSettingsPanel != null) {
        mSettingsPanel.setQuickSettings(mQS);
      }
      mQS.setService(this);
      mQS.setBar(mStatusBarView);
      mQS.setup(mNetworkController,mBluetoothController,mBatteryController,mLocationController,mRotationLockController);
    }
 else {
      mQS=null;
    }
  }
  mClingShown=!(DEBUG_CLINGS || !Prefs.read(mContext).getBoolean(Prefs.SHOWN_QUICK_SETTINGS_HELP,false));
  if (!ENABLE_NOTIFICATION_PANEL_CLING || ActivityManager.isRunningInTestHarness()) {
    mClingShown=true;
  }
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_CONFIGURATION_CHANGED);
  filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  filter.addAction(Intent.ACTION_SCREEN_OFF);
  filter.addAction(Intent.ACTION_SCREEN_ON);
  context.registerReceiver(mBroadcastReceiver,filter);
  resetUserSetupObserver();
  return mStatusBarView;
}
