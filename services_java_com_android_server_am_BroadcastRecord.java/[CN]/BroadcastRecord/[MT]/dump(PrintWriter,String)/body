{
  pw.println(prefix + this);
  pw.println(prefix + intent);
  pw.println(prefix + "proc=" + callerApp);
  pw.println(prefix + "caller=" + callerPackage+ " callingPid="+ callingPid+ " callingUid="+ callingUid);
  pw.println(prefix + "requiredPermission=" + requiredPermission);
  pw.println(prefix + "dispatchTime=" + dispatchTime+ " ("+ (SystemClock.uptimeMillis() - dispatchTime)+ " since now)");
  pw.println(prefix + "startTime=" + startTime+ " ("+ (SystemClock.uptimeMillis() - startTime)+ " since now)");
  pw.println(prefix + "anrCount=" + anrCount);
  pw.println(prefix + "resultTo=" + resultTo+ " resultCode="+ resultCode+ " resultData="+ resultData);
  pw.println(prefix + "resultExtras=" + resultExtras);
  pw.println(prefix + "resultAbort=" + resultAbort+ " ordered="+ ordered+ " sticky="+ sticky);
  pw.println(prefix + "nextReceiver=" + nextReceiver+ " receiver="+ receiver);
  pw.println(prefix + "curFilter=" + curFilter);
  pw.println(prefix + "curReceiver=" + ((curReceiver != null) ? curReceiver : "(null)"));
  pw.println(prefix + "curApp=" + curApp);
  if (curApp != null) {
    pw.println(prefix + "curComponent=" + (curComponent != null ? curComponent.toShortString() : "--"));
    pw.println(prefix + "curSourceDir=" + curReceiver.applicationInfo.sourceDir);
  }
  String stateStr=" (?)";
switch (state) {
case IDLE:
    stateStr=" (IDLE)";
  break;
case APP_RECEIVE:
stateStr=" (APP_RECEIVE)";
break;
case CALL_IN_RECEIVE:
stateStr=" (CALL_IN_RECEIVE)";
break;
case CALL_DONE_RECEIVE:
stateStr=" (CALL_DONE_RECEIVE)";
break;
}
pw.println(prefix + "state=" + state+ stateStr);
final int N=receivers != null ? receivers.size() : 0;
String p2=prefix + "  ";
PrintWriterPrinter printer=new PrintWriterPrinter(pw);
for (int i=0; i < N; i++) {
Object o=receivers.get(i);
pw.println(prefix + "Receiver #" + i+ ": "+ o);
if (o instanceof BroadcastFilter) ((BroadcastFilter)o).dump(pw,p2);
 else if (o instanceof ResolveInfo) ((ResolveInfo)o).dump(printer,p2);
}
}
