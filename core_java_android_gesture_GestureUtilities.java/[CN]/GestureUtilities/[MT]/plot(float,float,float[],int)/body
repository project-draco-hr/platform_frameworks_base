{
  x=x < 0 ? 0 : x;
  y=y < 0 ? 0 : y;
  int xFloor=(int)Math.floor(x);
  int xCeiling=(int)Math.ceil(x);
  int yFloor=(int)Math.floor(y);
  int yCeiling=(int)Math.ceil(y);
  if (x == xFloor && y == yFloor) {
    int index=yCeiling * sampleSize + xCeiling;
    if (sample[index] < 1) {
      sample[index]=1;
    }
  }
 else {
    final double xFloorSq=Math.pow(xFloor - x,2);
    final double yFloorSq=Math.pow(yFloor - y,2);
    final double xCeilingSq=Math.pow(xCeiling - x,2);
    final double yCeilingSq=Math.pow(yCeiling - y,2);
    float topLeft=(float)Math.sqrt(xFloorSq + yFloorSq);
    float topRight=(float)Math.sqrt(xCeilingSq + yFloorSq);
    float btmLeft=(float)Math.sqrt(xFloorSq + yCeilingSq);
    float btmRight=(float)Math.sqrt(xCeilingSq + yCeilingSq);
    float sum=topLeft + topRight + btmLeft+ btmRight;
    float value=topLeft / sum;
    int index=yFloor * sampleSize + xFloor;
    if (value > sample[index]) {
      sample[index]=value;
    }
    value=topRight / sum;
    index=yFloor * sampleSize + xCeiling;
    if (value > sample[index]) {
      sample[index]=value;
    }
    value=btmLeft / sum;
    index=yCeiling * sampleSize + xFloor;
    if (value > sample[index]) {
      sample[index]=value;
    }
    value=btmRight / sum;
    index=yCeiling * sampleSize + xCeiling;
    if (value > sample[index]) {
      sample[index]=value;
    }
  }
}
