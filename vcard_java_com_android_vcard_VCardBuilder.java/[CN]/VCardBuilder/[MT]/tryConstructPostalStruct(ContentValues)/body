{
  final String rawPoBox=contentValues.getAsString(StructuredPostal.POBOX);
  final String rawNeighborhood=contentValues.getAsString(StructuredPostal.NEIGHBORHOOD);
  final String rawStreet=contentValues.getAsString(StructuredPostal.STREET);
  final String rawLocality=contentValues.getAsString(StructuredPostal.CITY);
  final String rawRegion=contentValues.getAsString(StructuredPostal.REGION);
  final String rawPostalCode=contentValues.getAsString(StructuredPostal.POSTCODE);
  final String rawCountry=contentValues.getAsString(StructuredPostal.COUNTRY);
  final String[] rawAddressArray=new String[]{rawPoBox,rawNeighborhood,rawStreet,rawLocality,rawRegion,rawPostalCode,rawCountry};
  if (!VCardUtils.areAllEmpty(rawAddressArray)) {
    final boolean reallyUseQuotedPrintable=(mShouldUseQuotedPrintable && !VCardUtils.containsOnlyNonCrLfPrintableAscii(rawAddressArray));
    final boolean appendCharset=!VCardUtils.containsOnlyPrintableAscii(rawAddressArray);
    final String encodedPoBox;
    final String encodedStreet;
    final String encodedLocality;
    final String encodedRegion;
    final String encodedPostalCode;
    final String encodedCountry;
    final String encodedNeighborhood;
    final String rawLocality2;
    if (TextUtils.isEmpty(rawLocality)) {
      if (TextUtils.isEmpty(rawNeighborhood)) {
        rawLocality2="";
      }
 else {
        rawLocality2=rawNeighborhood;
      }
    }
 else {
      if (TextUtils.isEmpty(rawNeighborhood)) {
        rawLocality2=rawLocality;
      }
 else {
        rawLocality2=rawLocality + " " + rawNeighborhood;
      }
    }
    if (reallyUseQuotedPrintable) {
      encodedPoBox=encodeQuotedPrintable(rawPoBox);
      encodedStreet=encodeQuotedPrintable(rawStreet);
      encodedLocality=encodeQuotedPrintable(rawLocality2);
      encodedRegion=encodeQuotedPrintable(rawRegion);
      encodedPostalCode=encodeQuotedPrintable(rawPostalCode);
      encodedCountry=encodeQuotedPrintable(rawCountry);
    }
 else {
      encodedPoBox=escapeCharacters(rawPoBox);
      encodedStreet=escapeCharacters(rawStreet);
      encodedLocality=escapeCharacters(rawLocality2);
      encodedRegion=escapeCharacters(rawRegion);
      encodedPostalCode=escapeCharacters(rawPostalCode);
      encodedCountry=escapeCharacters(rawCountry);
      encodedNeighborhood=escapeCharacters(rawNeighborhood);
    }
    final StringBuilder addressBuilder=new StringBuilder();
    addressBuilder.append(encodedPoBox);
    addressBuilder.append(VCARD_ITEM_SEPARATOR);
    addressBuilder.append(VCARD_ITEM_SEPARATOR);
    addressBuilder.append(encodedStreet);
    addressBuilder.append(VCARD_ITEM_SEPARATOR);
    addressBuilder.append(encodedLocality);
    addressBuilder.append(VCARD_ITEM_SEPARATOR);
    addressBuilder.append(encodedRegion);
    addressBuilder.append(VCARD_ITEM_SEPARATOR);
    addressBuilder.append(encodedPostalCode);
    addressBuilder.append(VCARD_ITEM_SEPARATOR);
    addressBuilder.append(encodedCountry);
    return new PostalStruct(reallyUseQuotedPrintable,appendCharset,addressBuilder.toString());
  }
 else {
    final String rawFormattedAddress=contentValues.getAsString(StructuredPostal.FORMATTED_ADDRESS);
    if (TextUtils.isEmpty(rawFormattedAddress)) {
      return null;
    }
    final boolean reallyUseQuotedPrintable=(mShouldUseQuotedPrintable && !VCardUtils.containsOnlyNonCrLfPrintableAscii(rawFormattedAddress));
    final boolean appendCharset=!VCardUtils.containsOnlyPrintableAscii(rawFormattedAddress);
    final String encodedFormattedAddress;
    if (reallyUseQuotedPrintable) {
      encodedFormattedAddress=encodeQuotedPrintable(rawFormattedAddress);
    }
 else {
      encodedFormattedAddress=escapeCharacters(rawFormattedAddress);
    }
    final StringBuilder addressBuilder=new StringBuilder();
    addressBuilder.append(VCARD_ITEM_SEPARATOR);
    addressBuilder.append(encodedFormattedAddress);
    addressBuilder.append(VCARD_ITEM_SEPARATOR);
    addressBuilder.append(VCARD_ITEM_SEPARATOR);
    addressBuilder.append(VCARD_ITEM_SEPARATOR);
    addressBuilder.append(VCARD_ITEM_SEPARATOR);
    addressBuilder.append(VCARD_ITEM_SEPARATOR);
    return new PostalStruct(reallyUseQuotedPrintable,appendCharset,addressBuilder.toString());
  }
}
