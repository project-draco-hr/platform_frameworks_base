{
  ContentValues map=new ContentValues();
  map.put(MediaStore.MediaColumns.DATA,mPath);
  map.put(MediaStore.MediaColumns.TITLE,mTitle);
  map.put(MediaStore.MediaColumns.DATE_MODIFIED,mLastModified);
  map.put(MediaStore.MediaColumns.SIZE,mFileSize);
  map.put(MediaStore.MediaColumns.MIME_TYPE,mMimeType);
  map.put(MediaStore.MediaColumns.IS_DRM,mIsDrm);
  String resolution=null;
  if (mWidth > 0 && mHeight > 0) {
    map.put(MediaStore.MediaColumns.WIDTH,mWidth);
    map.put(MediaStore.MediaColumns.HEIGHT,mHeight);
    resolution=mWidth + "x" + mHeight;
  }
  if (!mNoMedia) {
    if (MediaFile.isVideoFileType(mFileType)) {
      map.put(Video.Media.ARTIST,(mArtist != null && mArtist.length() > 0 ? mArtist : MediaStore.UNKNOWN_STRING));
      map.put(Video.Media.ALBUM,(mAlbum != null && mAlbum.length() > 0 ? mAlbum : MediaStore.UNKNOWN_STRING));
      map.put(Video.Media.DURATION,mDuration);
      if (resolution != null) {
        map.put(Video.Media.RESOLUTION,resolution);
      }
    }
 else     if (MediaFile.isImageFileType(mFileType)) {
    }
 else     if (MediaFile.isAudioFileType(mFileType)) {
      map.put(Audio.Media.ARTIST,(mArtist != null && mArtist.length() > 0) ? mArtist : MediaStore.UNKNOWN_STRING);
      map.put(Audio.Media.ALBUM_ARTIST,(mAlbumArtist != null && mAlbumArtist.length() > 0) ? mAlbumArtist : null);
      map.put(Audio.Media.ALBUM,(mAlbum != null && mAlbum.length() > 0) ? mAlbum : MediaStore.UNKNOWN_STRING);
      map.put(Audio.Media.COMPOSER,mComposer);
      map.put(Audio.Media.GENRE,mGenre);
      if (mYear != 0) {
        map.put(Audio.Media.YEAR,mYear);
      }
      map.put(Audio.Media.TRACK,mTrack);
      map.put(Audio.Media.DURATION,mDuration);
      map.put(Audio.Media.COMPILATION,mCompilation);
    }
  }
  return map;
}
