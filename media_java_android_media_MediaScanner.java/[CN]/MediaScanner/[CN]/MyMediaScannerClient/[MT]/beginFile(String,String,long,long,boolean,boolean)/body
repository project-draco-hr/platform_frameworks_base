{
  mMimeType=mimeType;
  mFileType=0;
  mFileSize=fileSize;
  if (!isDirectory) {
    if (!noMedia && isNoMediaFile(path)) {
      noMedia=true;
    }
    mNoMedia=noMedia;
    if (mimeType != null) {
      mFileType=MediaFile.getFileTypeForMimeType(mimeType);
    }
    if (mFileType == 0) {
      MediaFile.MediaFileType mediaFileType=MediaFile.getFileType(path);
      if (mediaFileType != null) {
        mFileType=mediaFileType.fileType;
        if (mMimeType == null) {
          mMimeType=mediaFileType.mimeType;
        }
      }
    }
    if (isDrmEnabled() && MediaFile.isDrmFileType(mFileType)) {
      mFileType=getFileTypeFromDrm(path);
    }
  }
  String key=path;
  if (mCaseInsensitivePaths) {
    key=path.toLowerCase();
  }
  FileCacheEntry entry=mFileCache.get(key);
  long delta=(entry != null) ? (lastModified - entry.mLastModified) : 0;
  boolean wasModified=delta > 1 || delta < -1;
  if (entry == null || wasModified) {
    if (wasModified) {
      entry.mLastModified=lastModified;
    }
 else {
      entry=new FileCacheEntry(0,path,lastModified,(isDirectory ? MtpConstants.FORMAT_ASSOCIATION : 0));
      mFileCache.put(key,entry);
    }
    entry.mLastModifiedChanged=true;
  }
  entry.mSeenInFileSystem=true;
  if (mProcessPlaylists && MediaFile.isPlayListFileType(mFileType)) {
    mPlayLists.add(entry);
    return null;
  }
  mArtist=null;
  mAlbumArtist=null;
  mAlbum=null;
  mTitle=null;
  mComposer=null;
  mGenre=null;
  mTrack=0;
  mYear=0;
  mDuration=0;
  mPath=path;
  mLastModified=lastModified;
  mWriter=null;
  mCompilation=0;
  return entry;
}
