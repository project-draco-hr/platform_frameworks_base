{
  mMimeType=mimeType;
  mFileType=0;
  mFileSize=fileSize;
  if (!isDirectory) {
    int lastSlash=path.lastIndexOf('/');
    if (lastSlash >= 0 && lastSlash + 2 < path.length()) {
      if (path.regionMatches(lastSlash + 1,"._",0,2)) {
        return null;
      }
      if (path.regionMatches(true,path.length() - 4,".jpg",0,4)) {
        if (path.regionMatches(true,lastSlash + 1,"AlbumArt_{",0,10) || path.regionMatches(true,lastSlash + 1,"AlbumArt.",0,9)) {
          return null;
        }
        int length=path.length() - lastSlash - 1;
        if ((length == 17 && path.regionMatches(true,lastSlash + 1,"AlbumArtSmall",0,13)) || (length == 10 && path.regionMatches(true,lastSlash + 1,"Folder",0,6))) {
          return null;
        }
      }
    }
    if (mimeType != null) {
      mFileType=MediaFile.getFileTypeForMimeType(mimeType);
    }
    if (mFileType == 0) {
      MediaFile.MediaFileType mediaFileType=MediaFile.getFileType(path);
      if (mediaFileType != null) {
        mFileType=mediaFileType.fileType;
        if (mMimeType == null) {
          mMimeType=mediaFileType.mimeType;
        }
      }
    }
    if (isDrmEnabled() && MediaFile.isDrmFileType(mFileType)) {
      mFileType=getFileTypeFromDrm(path);
    }
  }
  String key=path;
  if (mCaseInsensitivePaths) {
    key=path.toLowerCase();
  }
  FileCacheEntry entry=mFileCache.get(key);
  long delta=(entry != null) ? (lastModified - entry.mLastModified) : 0;
  boolean wasModified=delta > 1 || delta < -1;
  if (entry == null || wasModified) {
    Uri tableUri;
    if (isDirectory) {
      tableUri=mFilesUri;
    }
 else     if (MediaFile.isVideoFileType(mFileType)) {
      tableUri=mVideoUri;
    }
 else     if (MediaFile.isImageFileType(mFileType)) {
      tableUri=mImagesUri;
    }
 else     if (MediaFile.isAudioFileType(mFileType)) {
      tableUri=mAudioUri;
    }
 else {
      tableUri=mFilesUri;
    }
    if (wasModified) {
      entry.mLastModified=lastModified;
      entry.mTableUri=tableUri;
    }
 else {
      entry=new FileCacheEntry(tableUri,0,path,lastModified,(isDirectory ? MtpConstants.FORMAT_ASSOCIATION : 0));
      mFileCache.put(key,entry);
    }
    entry.mLastModifiedChanged=true;
  }
  entry.mSeenInFileSystem=true;
  if (mProcessPlaylists && MediaFile.isPlayListFileType(mFileType)) {
    mPlayLists.add(entry);
    return null;
  }
  mArtist=null;
  mAlbumArtist=null;
  mAlbum=null;
  mTitle=null;
  mComposer=null;
  mGenre=null;
  mTrack=0;
  mYear=0;
  mDuration=0;
  mPath=path;
  mLastModified=lastModified;
  mWriter=null;
  mCompilation=0;
  return entry;
}
