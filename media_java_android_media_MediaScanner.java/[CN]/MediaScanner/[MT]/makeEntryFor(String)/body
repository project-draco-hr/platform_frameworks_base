{
  String where;
  String[] selectionArgs;
  Cursor c=null;
  try {
    boolean hasWildCards=path.contains("_") || path.contains("%");
    if (hasWildCards || !mCaseInsensitivePaths) {
      where=Files.FileColumns.DATA + "=?";
      selectionArgs=new String[]{path};
    }
 else {
      where="_data LIKE ?1 AND lower(_data)=lower(?1)";
      selectionArgs=new String[]{path};
    }
    c=mMediaProvider.query(mFilesUri,FILES_PRESCAN_PROJECTION,where,selectionArgs,null,null);
    if (!c.moveToFirst() && hasWildCards && mCaseInsensitivePaths) {
      where="_data LIKE ?1 AND lower(_data)=lower(?1)";
      selectionArgs=new String[]{path};
      c.close();
      c=mMediaProvider.query(mFilesUri,FILES_PRESCAN_PROJECTION,where,selectionArgs,null,null);
    }
    if (c.moveToFirst()) {
      long rowId=c.getLong(FILES_PRESCAN_ID_COLUMN_INDEX);
      int format=c.getInt(FILES_PRESCAN_FORMAT_COLUMN_INDEX);
      long lastModified=c.getLong(FILES_PRESCAN_DATE_MODIFIED_COLUMN_INDEX);
      return new FileEntry(rowId,path,lastModified,format);
    }
  }
 catch (  RemoteException e) {
  }
 finally {
    if (c != null) {
      c.close();
    }
  }
  return null;
}
