{
  int entryLength=entry.length();
  while (entryLength > 0 && Character.isWhitespace(entry.charAt(entryLength - 1)))   entryLength--;
  if (entryLength < 3)   return false;
  if (entryLength < entry.length())   entry=entry.substring(0,entryLength);
  char ch1=entry.charAt(0);
  boolean fullPath=(ch1 == '/' || (Character.isLetter(ch1) && entry.charAt(1) == ':' && entry.charAt(2) == '\\'));
  if (!fullPath)   entry=playListDirectory + entry;
  FileCacheEntry bestMatch=null;
  int bestMatchLength=0;
  Iterator<FileCacheEntry> iterator=mFileCache.values().iterator();
  while (iterator.hasNext()) {
    FileCacheEntry cacheEntry=iterator.next();
    String path=cacheEntry.mPath;
    if (path.equalsIgnoreCase(entry)) {
      bestMatch=cacheEntry;
      break;
    }
    int matchLength=matchPaths(path,entry);
    if (matchLength > bestMatchLength) {
      bestMatch=cacheEntry;
      bestMatchLength=matchLength;
    }
  }
  if (bestMatch == null) {
    return false;
  }
  try {
    if (bestMatch.mRowId == 0) {
      Cursor c=mMediaProvider.query(mAudioUri,ID_PROJECTION,MediaStore.Files.FileColumns.DATA + "=?",new String[]{bestMatch.mPath},null);
      if (c != null) {
        if (c.moveToNext()) {
          bestMatch.mRowId=c.getLong(0);
        }
        c.close();
      }
      if (bestMatch.mRowId == 0) {
        return false;
      }
    }
    values.clear();
    values.put(MediaStore.Audio.Playlists.Members.PLAY_ORDER,Integer.valueOf(index));
    values.put(MediaStore.Audio.Playlists.Members.AUDIO_ID,Long.valueOf(bestMatch.mRowId));
    mMediaProvider.insert(uri,values);
  }
 catch (  RemoteException e) {
    Log.e(TAG,"RemoteException in MediaScanner.addPlayListEntry()",e);
    return false;
  }
  return true;
}
