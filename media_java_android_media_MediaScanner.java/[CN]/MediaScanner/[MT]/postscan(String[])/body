{
  Iterator<FileCacheEntry> iterator=mFileCache.values().iterator();
  while (iterator.hasNext()) {
    FileCacheEntry entry=iterator.next();
    String path=entry.mPath;
    boolean fileMissing=false;
    if (!entry.mSeenInFileSystem && !MtpConstants.isAbstractObject(entry.mFormat)) {
      if (entry.mFormat != MtpConstants.FORMAT_ASSOCIATION && inScanDirectory(path,directories)) {
        fileMissing=true;
      }
 else {
        File testFile=new File(path);
        if (!testFile.exists()) {
          fileMissing=true;
        }
      }
    }
    if (fileMissing) {
      MediaFile.MediaFileType mediaFileType=MediaFile.getFileType(path);
      int fileType=(mediaFileType == null ? 0 : mediaFileType.fileType);
      if (MediaFile.isPlayListFileType(fileType)) {
        ContentValues values=new ContentValues();
        values.put(MediaStore.Audio.Playlists.DATA,"");
        values.put(MediaStore.Audio.Playlists.DATE_MODIFIED,0);
        mMediaProvider.update(ContentUris.withAppendedId(mPlaylistsUri,entry.mRowId),values,null,null);
      }
 else {
        mMediaProvider.delete(ContentUris.withAppendedId(mFilesUri,entry.mRowId),null,null);
        iterator.remove();
      }
    }
  }
  if (mProcessPlaylists) {
    processPlayLists();
  }
  if (mOriginalCount == 0 && mImagesUri.equals(Images.Media.getContentUri("external")))   pruneDeadThumbnailFiles();
  mGenreCache=null;
  mPlayLists=null;
  mFileCache=null;
  mMediaProvider=null;
}
