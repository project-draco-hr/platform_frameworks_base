{
  fileList.moveToPosition(-1);
  while (fileList.moveToNext()) {
    long rowId=fileList.getLong(FILES_PRESCAN_ID_COLUMN_INDEX);
    String data=fileList.getString(FILES_PRESCAN_PATH_COLUMN_INDEX);
    if (matchEntries(rowId,data)) {
      break;
    }
  }
  int len=mPlaylistEntries.size();
  int index=0;
  for (int i=0; i < len; i++) {
    PlaylistEntry entry=mPlaylistEntries.get(i);
    if (entry.bestmatchlevel > 0) {
      try {
        values.clear();
        values.put(MediaStore.Audio.Playlists.Members.PLAY_ORDER,Integer.valueOf(index));
        values.put(MediaStore.Audio.Playlists.Members.AUDIO_ID,Long.valueOf(entry.bestmatchid));
        mMediaProvider.insert(mPackageName,playlistUri,values);
        index++;
      }
 catch (      RemoteException e) {
        Log.e(TAG,"RemoteException in MediaScanner.processCachedPlaylist()",e);
        return;
      }
    }
  }
  mPlaylistEntries.clear();
}
