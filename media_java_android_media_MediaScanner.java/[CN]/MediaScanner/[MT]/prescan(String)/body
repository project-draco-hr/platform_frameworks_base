{
  Cursor c=null;
  String where=null;
  String[] selectionArgs=null;
  if (mFileCache == null) {
    mFileCache=new HashMap<String,FileCacheEntry>();
  }
 else {
    mFileCache.clear();
  }
  if (mPlayLists == null) {
    mPlayLists=new ArrayList<FileCacheEntry>();
  }
 else {
    mPlayLists.clear();
  }
  try {
    if (filePath != null) {
      where=MediaStore.Audio.Media.DATA + "=?";
      selectionArgs=new String[]{filePath};
    }
    c=mMediaProvider.query(mAudioUri,AUDIO_PROJECTION,where,selectionArgs,null);
    if (c != null) {
      try {
        while (c.moveToNext()) {
          long rowId=c.getLong(ID_AUDIO_COLUMN_INDEX);
          String path=c.getString(PATH_AUDIO_COLUMN_INDEX);
          long lastModified=c.getLong(DATE_MODIFIED_AUDIO_COLUMN_INDEX);
          String key=path;
          if (mCaseInsensitivePaths) {
            key=path.toLowerCase();
          }
          mFileCache.put(key,new FileCacheEntry(mAudioUri,rowId,path,lastModified));
        }
      }
  finally {
        c.close();
        c=null;
      }
    }
    if (filePath != null) {
      where=MediaStore.Video.Media.DATA + "=?";
    }
 else {
      where=null;
    }
    c=mMediaProvider.query(mVideoUri,VIDEO_PROJECTION,where,selectionArgs,null);
    if (c != null) {
      try {
        while (c.moveToNext()) {
          long rowId=c.getLong(ID_VIDEO_COLUMN_INDEX);
          String path=c.getString(PATH_VIDEO_COLUMN_INDEX);
          long lastModified=c.getLong(DATE_MODIFIED_VIDEO_COLUMN_INDEX);
          String key=path;
          if (mCaseInsensitivePaths) {
            key=path.toLowerCase();
          }
          mFileCache.put(key,new FileCacheEntry(mVideoUri,rowId,path,lastModified));
        }
      }
  finally {
        c.close();
        c=null;
      }
    }
    if (filePath != null) {
      where=MediaStore.Images.Media.DATA + "=?";
    }
 else {
      where=null;
    }
    mOriginalCount=0;
    c=mMediaProvider.query(mImagesUri,IMAGES_PROJECTION,where,selectionArgs,null);
    if (c != null) {
      try {
        mOriginalCount=c.getCount();
        while (c.moveToNext()) {
          long rowId=c.getLong(ID_IMAGES_COLUMN_INDEX);
          String path=c.getString(PATH_IMAGES_COLUMN_INDEX);
          long lastModified=c.getLong(DATE_MODIFIED_IMAGES_COLUMN_INDEX);
          String key=path;
          if (mCaseInsensitivePaths) {
            key=path.toLowerCase();
          }
          mFileCache.put(key,new FileCacheEntry(mImagesUri,rowId,path,lastModified));
        }
      }
  finally {
        c.close();
        c=null;
      }
    }
    if (mProcessPlaylists) {
      if (filePath != null) {
        where=MediaStore.Audio.Playlists.DATA + "=?";
      }
 else {
        where=null;
      }
      c=mMediaProvider.query(mPlaylistsUri,PLAYLISTS_PROJECTION,where,selectionArgs,null);
      if (c != null) {
        try {
          while (c.moveToNext()) {
            String path=c.getString(PATH_IMAGES_COLUMN_INDEX);
            if (path != null && path.length() > 0) {
              long rowId=c.getLong(ID_PLAYLISTS_COLUMN_INDEX);
              long lastModified=c.getLong(DATE_MODIFIED_PLAYLISTS_COLUMN_INDEX);
              String key=path;
              if (mCaseInsensitivePaths) {
                key=path.toLowerCase();
              }
              mFileCache.put(key,new FileCacheEntry(mPlaylistsUri,rowId,path,lastModified));
            }
          }
        }
  finally {
          c.close();
          c=null;
        }
      }
    }
  }
  finally {
    if (c != null) {
      c.close();
    }
  }
}
