{
  MediaFile.MediaFileType mediaFileType=MediaFile.getFileType(path);
  int fileType=(mediaFileType == null ? 0 : mediaFileType.fileType);
  File file=new File(path);
  long lastModifiedSeconds=file.lastModified() / 1000;
  if (!MediaFile.isAudioFileType(fileType) && !MediaFile.isVideoFileType(fileType) && !MediaFile.isImageFileType(fileType)&& !MediaFile.isPlayListFileType(fileType)&& !MediaFile.isDrmFileType(fileType)) {
    ContentValues values=new ContentValues();
    values.put(Files.FileColumns.SIZE,file.length());
    values.put(Files.FileColumns.DATE_MODIFIED,lastModifiedSeconds);
    try {
      String[] whereArgs=new String[]{Integer.toString(objectHandle)};
      mMediaProvider.update(Files.getMtpObjectsUri(mVolumeName),values,"_id=?",whereArgs);
    }
 catch (    RemoteException e) {
      Log.e(TAG,"RemoteException in scanMtpFile",e);
    }
    return;
  }
  mMtpObjectHandle=objectHandle;
  Cursor fileList=null;
  try {
    if (MediaFile.isPlayListFileType(fileType)) {
      prescan(null,true);
      FileEntry entry=makeEntryFor(path);
      if (entry != null) {
        fileList=mMediaProvider.query(mFilesUri,FILES_PRESCAN_PROJECTION,null,null,null,null);
        processPlayList(entry,fileList);
      }
    }
 else {
      prescan(path,false);
      mClient.doScanFile(path,mediaFileType.mimeType,lastModifiedSeconds,file.length(),(format == MtpConstants.FORMAT_ASSOCIATION),true,isNoMediaPath(path));
    }
  }
 catch (  RemoteException e) {
    Log.e(TAG,"RemoteException in MediaScanner.scanFile()",e);
  }
 finally {
    mMtpObjectHandle=0;
    if (fileList != null) {
      fileList.close();
    }
    releaseResources();
  }
}
