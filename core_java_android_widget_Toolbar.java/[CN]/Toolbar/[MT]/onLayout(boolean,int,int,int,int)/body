{
  final boolean isRtl=getLayoutDirection() == LAYOUT_DIRECTION_RTL;
  final int width=getWidth();
  final int height=getHeight();
  final int paddingLeft=getPaddingLeft();
  final int paddingRight=getPaddingRight();
  final int paddingTop=getPaddingTop();
  final int paddingBottom=getPaddingBottom();
  int left=paddingLeft;
  int right=width - paddingRight;
  if (shouldLayout(mNavButtonView)) {
    if (isRtl) {
      right=layoutChildRight(mNavButtonView,right);
    }
 else {
      left=layoutChildLeft(mNavButtonView,left);
    }
  }
  if (shouldLayout(mMenuView)) {
    if (isRtl) {
      left=layoutChildLeft(mMenuView,left);
    }
 else {
      right=layoutChildRight(mMenuView,right);
    }
  }
  if (shouldLayout(mLogoView)) {
    if (isRtl) {
      right=layoutChildRight(mLogoView,right);
    }
 else {
      left=layoutChildLeft(mLogoView,left);
    }
  }
  final boolean layoutTitle=shouldLayout(mTitleTextView);
  final boolean layoutSubtitle=shouldLayout(mSubtitleTextView);
  int titleHeight=0;
  if (layoutTitle) {
    final LayoutParams lp=(LayoutParams)mTitleTextView.getLayoutParams();
    titleHeight+=lp.topMargin + mTitleTextView.getMeasuredHeight() + lp.bottomMargin;
  }
  if (layoutSubtitle) {
    final LayoutParams lp=(LayoutParams)mSubtitleTextView.getLayoutParams();
    titleHeight+=lp.bottomMargin + mTitleTextView.getMeasuredHeight() + lp.bottomMargin;
  }
  if (layoutTitle || layoutSubtitle) {
    int titleTop;
switch (mGravity & Gravity.VERTICAL_GRAVITY_MASK) {
case Gravity.TOP:
      titleTop=getPaddingTop();
    break;
default :
case Gravity.CENTER_VERTICAL:
  final View child=layoutTitle ? mTitleTextView : mSubtitleTextView;
final LayoutParams lp=(LayoutParams)child.getLayoutParams();
final int space=height - paddingTop - paddingBottom;
int spaceAbove=(space - titleHeight) / 2;
if (spaceAbove < lp.topMargin + mTitleMarginTop) {
spaceAbove=lp.topMargin + mTitleMarginTop;
}
 else {
final int spaceBelow=height - paddingBottom - titleHeight- spaceAbove- paddingTop;
if (spaceBelow < lp.bottomMargin + mTitleMarginBottom) {
spaceAbove=Math.max(0,spaceAbove - (lp.bottomMargin + mTitleMarginBottom - spaceBelow));
}
}
titleTop=paddingTop + spaceAbove;
break;
case Gravity.BOTTOM:
titleTop=height - paddingBottom - titleHeight;
break;
}
if (isRtl) {
int titleRight=right;
int subtitleRight=right;
titleTop+=mTitleMarginTop;
if (layoutTitle) {
final LayoutParams lp=(LayoutParams)mTitleTextView.getLayoutParams();
titleRight-=lp.rightMargin + mTitleMarginStart;
titleTop+=lp.topMargin;
final int titleLeft=titleRight - mTitleTextView.getMeasuredWidth();
final int titleBottom=titleTop + mTitleTextView.getMeasuredHeight();
mTitleTextView.layout(titleLeft,titleTop,titleRight,titleBottom);
titleRight=titleLeft - lp.leftMargin - mTitleMarginEnd;
titleTop=titleBottom + lp.bottomMargin;
}
if (layoutSubtitle) {
final LayoutParams lp=(LayoutParams)mSubtitleTextView.getLayoutParams();
subtitleRight-=lp.rightMargin + mTitleMarginStart;
titleTop+=lp.topMargin;
final int subtitleLeft=subtitleRight - mSubtitleTextView.getMeasuredWidth();
final int subtitleBottom=titleTop + mSubtitleTextView.getMeasuredHeight();
mSubtitleTextView.layout(subtitleLeft,titleTop,subtitleRight,subtitleBottom);
subtitleRight=subtitleRight - lp.leftMargin - mTitleMarginEnd;
titleTop=subtitleBottom + lp.bottomMargin;
}
right=Math.max(titleRight,subtitleRight);
}
 else {
int titleLeft=left;
int subtitleLeft=left;
titleTop+=mTitleMarginTop;
if (layoutTitle) {
final LayoutParams lp=(LayoutParams)mTitleTextView.getLayoutParams();
titleLeft+=lp.leftMargin + mTitleMarginStart;
titleTop+=lp.topMargin;
final int titleRight=titleLeft + mTitleTextView.getMeasuredWidth();
final int titleBottom=titleTop + mTitleTextView.getMeasuredHeight();
mTitleTextView.layout(titleLeft,titleTop,titleRight,titleBottom);
titleLeft=titleRight + lp.rightMargin + mTitleMarginEnd;
titleTop=titleBottom + lp.bottomMargin;
}
if (layoutSubtitle) {
final LayoutParams lp=(LayoutParams)mSubtitleTextView.getLayoutParams();
subtitleLeft+=lp.leftMargin + mTitleMarginStart;
titleTop+=lp.topMargin;
final int subtitleRight=subtitleLeft + mSubtitleTextView.getMeasuredWidth();
final int subtitleBottom=titleTop + mSubtitleTextView.getMeasuredHeight();
mSubtitleTextView.layout(subtitleLeft,titleTop,subtitleRight,subtitleBottom);
subtitleLeft=subtitleRight + lp.rightMargin + mTitleMarginEnd;
titleTop=subtitleBottom + lp.bottomMargin;
}
left=Math.max(titleLeft,subtitleLeft);
}
}
addCustomViewsWithGravity(mTempViews,Gravity.LEFT);
final int leftViewsCount=mTempViews.size();
for (int i=0; i < leftViewsCount; i++) {
left=layoutChildLeft(mTempViews.get(i),left);
}
addCustomViewsWithGravity(mTempViews,Gravity.RIGHT);
final int rightViewsCount=mTempViews.size();
for (int i=0; i < rightViewsCount; i++) {
right=layoutChildRight(mTempViews.get(i),right);
}
addCustomViewsWithGravity(mTempViews,Gravity.CENTER);
final int centerViewsWidth=getViewListMeasuredWidth(mTempViews);
final int parentCenter=paddingLeft + (width - paddingLeft - paddingRight) / 2;
final int halfCenterViewsWidth=centerViewsWidth / 2;
int centerLeft=parentCenter - halfCenterViewsWidth;
final int centerRight=centerLeft + centerViewsWidth;
if (centerLeft < left) {
centerLeft=left;
}
 else if (centerRight > right) {
centerLeft-=centerRight - right;
}
final int centerViewsCount=mTempViews.size();
for (int i=0; i < centerViewsCount; i++) {
centerLeft=layoutChildLeft(mTempViews.get(i),centerLeft);
}
mTempViews.clear();
}
