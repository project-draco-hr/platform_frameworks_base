{
  int width=0;
  int height=0;
  int childState=0;
  final int[] collapsingMargins=mTempMargins;
  final int marginStartIndex;
  final int marginEndIndex;
  if (isLayoutRtl()) {
    marginStartIndex=1;
    marginEndIndex=0;
  }
 else {
    marginStartIndex=0;
    marginEndIndex=1;
  }
  int navWidth=0;
  if (shouldLayout(mNavButtonView)) {
    measureChildConstrained(mNavButtonView,widthMeasureSpec,width,heightMeasureSpec,0,mMaxButtonHeight);
    navWidth=mNavButtonView.getMeasuredWidth() + getHorizontalMargins(mNavButtonView);
    height=Math.max(height,mNavButtonView.getMeasuredHeight() + getVerticalMargins(mNavButtonView));
    childState=combineMeasuredStates(childState,mNavButtonView.getMeasuredState());
  }
  if (shouldLayout(mCollapseButtonView)) {
    measureChildConstrained(mCollapseButtonView,widthMeasureSpec,width,heightMeasureSpec,0,mMaxButtonHeight);
    navWidth=mCollapseButtonView.getMeasuredWidth() + getHorizontalMargins(mCollapseButtonView);
    height=Math.max(height,mCollapseButtonView.getMeasuredHeight() + getVerticalMargins(mCollapseButtonView));
    childState=combineMeasuredStates(childState,mCollapseButtonView.getMeasuredState());
  }
  final int contentInsetStart=getContentInsetStart();
  width+=Math.max(contentInsetStart,navWidth);
  collapsingMargins[marginStartIndex]=Math.max(0,contentInsetStart - navWidth);
  int menuWidth=0;
  if (shouldLayout(mMenuView)) {
    measureChildConstrained(mMenuView,widthMeasureSpec,width,heightMeasureSpec,0,mMaxButtonHeight);
    menuWidth=mMenuView.getMeasuredWidth() + getHorizontalMargins(mMenuView);
    height=Math.max(height,mMenuView.getMeasuredHeight() + getVerticalMargins(mMenuView));
    childState=combineMeasuredStates(childState,mMenuView.getMeasuredState());
  }
  final int contentInsetEnd=getContentInsetEnd();
  width+=Math.max(contentInsetEnd,menuWidth);
  collapsingMargins[marginEndIndex]=Math.max(0,contentInsetEnd - menuWidth);
  if (shouldLayout(mExpandedActionView)) {
    width+=measureChildCollapseMargins(mExpandedActionView,widthMeasureSpec,width,heightMeasureSpec,0,collapsingMargins);
    height=Math.max(height,mExpandedActionView.getMeasuredHeight() + getVerticalMargins(mExpandedActionView));
    childState=combineMeasuredStates(childState,mExpandedActionView.getMeasuredState());
  }
  if (shouldLayout(mLogoView)) {
    width+=measureChildCollapseMargins(mLogoView,widthMeasureSpec,width,heightMeasureSpec,0,collapsingMargins);
    height=Math.max(height,mLogoView.getMeasuredHeight() + getVerticalMargins(mLogoView));
    childState=combineMeasuredStates(childState,mLogoView.getMeasuredState());
  }
  int titleWidth=0;
  int titleHeight=0;
  final int titleVertMargins=mTitleMarginTop + mTitleMarginBottom;
  final int titleHorizMargins=mTitleMarginStart + mTitleMarginEnd;
  if (shouldLayout(mTitleTextView)) {
    titleWidth=measureChildCollapseMargins(mTitleTextView,widthMeasureSpec,width + titleHorizMargins,heightMeasureSpec,titleVertMargins,collapsingMargins);
    titleWidth=mTitleTextView.getMeasuredWidth() + getHorizontalMargins(mTitleTextView);
    titleHeight=mTitleTextView.getMeasuredHeight() + getVerticalMargins(mTitleTextView);
    childState=combineMeasuredStates(childState,mTitleTextView.getMeasuredState());
  }
  if (shouldLayout(mSubtitleTextView)) {
    titleWidth=Math.max(titleWidth,measureChildCollapseMargins(mSubtitleTextView,widthMeasureSpec,width + titleHorizMargins,heightMeasureSpec,titleHeight + titleVertMargins,collapsingMargins));
    titleHeight+=mSubtitleTextView.getMeasuredHeight() + getVerticalMargins(mSubtitleTextView);
    childState=combineMeasuredStates(childState,mSubtitleTextView.getMeasuredState());
  }
  width+=titleWidth;
  height=Math.max(height,titleHeight);
  final int childCount=getChildCount();
  for (int i=0; i < childCount; i++) {
    final View child=getChildAt(i);
    final LayoutParams lp=(LayoutParams)child.getLayoutParams();
    if (lp.mViewType != LayoutParams.CUSTOM || !shouldLayout(child)) {
      continue;
    }
    width+=measureChildCollapseMargins(child,widthMeasureSpec,width,heightMeasureSpec,0,collapsingMargins);
    height=Math.max(height,child.getMeasuredHeight() + getVerticalMargins(child));
    childState=combineMeasuredStates(childState,child.getMeasuredState());
  }
  width+=getPaddingLeft() + getPaddingRight();
  height+=getPaddingTop() + getPaddingBottom();
  final int measuredWidth=resolveSizeAndState(Math.max(width,getSuggestedMinimumWidth()),widthMeasureSpec,childState & MEASURED_STATE_MASK);
  final int measuredHeight=resolveSizeAndState(Math.max(height,getSuggestedMinimumHeight()),heightMeasureSpec,childState << MEASURED_HEIGHT_STATE_SHIFT);
  setMeasuredDimension(measuredWidth,measuredHeight);
}
