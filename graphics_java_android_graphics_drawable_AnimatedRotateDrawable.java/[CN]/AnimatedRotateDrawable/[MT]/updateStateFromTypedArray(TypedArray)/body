{
  final AnimatedRotateState state=mState;
  if (state == null) {
    return;
  }
  state.mChangingConfigurations|=a.getChangingConfigurations();
  state.mThemeAttrs=a.extractThemeAttrs();
  if (a.hasValue(R.styleable.AnimatedRotateDrawable_pivotX)) {
    final TypedValue tv=a.peekValue(R.styleable.AnimatedRotateDrawable_pivotX);
    state.mPivotXRel=tv.type == TypedValue.TYPE_FRACTION;
    state.mPivotX=state.mPivotXRel ? tv.getFraction(1.0f,1.0f) : tv.getFloat();
  }
  if (a.hasValue(R.styleable.AnimatedRotateDrawable_pivotY)) {
    final TypedValue tv=a.peekValue(R.styleable.AnimatedRotateDrawable_pivotY);
    state.mPivotYRel=tv.type == TypedValue.TYPE_FRACTION;
    state.mPivotY=state.mPivotYRel ? tv.getFraction(1.0f,1.0f) : tv.getFloat();
  }
  setFramesCount(a.getInt(R.styleable.AnimatedRotateDrawable_framesCount,state.mFramesCount));
  setFramesDuration(a.getInt(R.styleable.AnimatedRotateDrawable_frameDuration,state.mFrameDuration));
}
