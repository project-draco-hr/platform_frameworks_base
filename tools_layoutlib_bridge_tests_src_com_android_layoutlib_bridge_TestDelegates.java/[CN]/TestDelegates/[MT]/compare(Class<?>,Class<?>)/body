{
  List<Method> checkedDelegateMethods=new ArrayList<Method>();
  Method[] originalMethods=originalClass.getDeclaredMethods();
  for (  Method originalMethod : originalMethods) {
    if (originalMethod.getAnnotation(LayoutlibDelegate.class) == null) {
      continue;
    }
    Class<?>[] parameters=originalMethod.getParameterTypes();
    if ((originalMethod.getModifiers() & Modifier.STATIC) == 0) {
      Class<?>[] newParameters=new Class<?>[parameters.length + 1];
      newParameters[0]=originalClass;
      System.arraycopy(parameters,0,newParameters,1,parameters.length);
      parameters=newParameters;
    }
    if (originalClass.getEnclosingClass() != null && (originalClass.getModifiers() & Modifier.STATIC) == 0) {
      Class<?>[] newParameters=new Class<?>[parameters.length + 1];
      newParameters[0]=originalClass.getEnclosingClass();
      System.arraycopy(parameters,0,newParameters,1,parameters.length);
      parameters=newParameters;
    }
    try {
      Method delegateMethod=delegateClass.getDeclaredMethod(originalMethod.getName(),parameters);
      assertTrue(String.format("Delegate method %1$s.%2$s does not match the corresponding " + "framework method which returns %3$s",delegateClass.getName(),getMethodName(delegateMethod),originalMethod.getReturnType().getName()),delegateMethod.getReturnType() == originalMethod.getReturnType());
      assertNotNull(String.format("Delegate method %1$s for class %2$s does not have the @LayoutlibDelegate annotation",delegateMethod.getName(),originalClass.getName()),delegateMethod.getAnnotation(LayoutlibDelegate.class));
      assertTrue(String.format("Delegate method %1$s for class %2$s is not static",delegateMethod.getName(),originalClass.getName()),(delegateMethod.getModifiers() & Modifier.STATIC) == Modifier.STATIC);
      checkedDelegateMethods.add(delegateMethod);
    }
 catch (    NoSuchMethodException e) {
      String name=getMethodName(originalMethod,parameters);
      fail(String.format("Missing %1$s.%2$s",delegateClass.getName(),name));
    }
  }
  Method[] delegateMethods=delegateClass.getDeclaredMethods();
  for (  Method delegateMethod : delegateMethods) {
    if (delegateMethod.getAnnotation(LayoutlibDelegate.class) == null) {
      continue;
    }
    assertTrue(String.format("Delegate method %1$s.%2$s is not used anymore and must be removed",delegateClass.getName(),getMethodName(delegateMethod)),checkedDelegateMethods.contains(delegateMethod));
  }
}
