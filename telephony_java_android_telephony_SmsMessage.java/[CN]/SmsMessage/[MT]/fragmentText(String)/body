{
  int activePhone=TelephonyManager.getDefault().getCurrentPhoneType();
  TextEncodingDetails ted=(PHONE_TYPE_CDMA == activePhone) ? com.android.internal.telephony.cdma.SmsMessage.calculateLength(text,false) : com.android.internal.telephony.gsm.SmsMessage.calculateLength(text,false);
  int limit;
  if (ted.codeUnitSize == ENCODING_7BIT) {
    int udhLength;
    if (ted.languageTable != 0 && ted.languageShiftTable != 0) {
      udhLength=GsmAlphabet.UDH_SEPTET_COST_TWO_SHIFT_TABLES;
    }
 else     if (ted.languageTable != 0 || ted.languageShiftTable != 0) {
      udhLength=GsmAlphabet.UDH_SEPTET_COST_ONE_SHIFT_TABLE;
    }
 else {
      udhLength=0;
    }
    if (ted.msgCount > 1) {
      udhLength+=GsmAlphabet.UDH_SEPTET_COST_CONCATENATED_MESSAGE;
    }
    if (udhLength != 0) {
      udhLength+=GsmAlphabet.UDH_SEPTET_COST_LENGTH;
    }
    limit=MAX_USER_DATA_SEPTETS - udhLength;
  }
 else {
    if (ted.msgCount > 1) {
      limit=MAX_USER_DATA_BYTES_WITH_HEADER;
    }
 else {
      limit=MAX_USER_DATA_BYTES;
    }
  }
  int pos=0;
  int textLen=text.length();
  ArrayList<String> result=new ArrayList<String>(ted.msgCount);
  while (pos < textLen) {
    int nextPos=0;
    if (ted.codeUnitSize == ENCODING_7BIT) {
      if (activePhone == PHONE_TYPE_CDMA && ted.msgCount == 1) {
        nextPos=pos + Math.min(limit,textLen - pos);
      }
 else {
        nextPos=GsmAlphabet.findGsmSeptetLimitIndex(text,pos,limit,ted.languageTable,ted.languageShiftTable);
      }
    }
 else {
      nextPos=pos + Math.min(limit / 2,textLen - pos);
    }
    if ((nextPos <= pos) || (nextPos > textLen)) {
      Log.e(LOG_TAG,"fragmentText failed (" + pos + " >= "+ nextPos+ " or "+ nextPos+ " >= "+ textLen+ ")");
      break;
    }
    result.add(text.substring(pos,nextPos));
    pos=nextPos;
  }
  return result;
}
