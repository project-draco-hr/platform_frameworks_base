{
  final int numStacks=mStacks.size();
  for (int stackNdx=0; stackNdx < numStacks; ++stackNdx) {
    final ActivityStack stack=mStacks.get(stackNdx);
    pw.print("  Stack #");
    pw.print(mStacks.indexOf(stack));
    pw.println(":");
    stack.dumpActivitiesLocked(fd,pw,dumpAll,dumpClient,dumpPackage);
    pw.println(" ");
    pw.println("  Running activities (most recent first):");
    dumpHistoryList(fd,pw,stack.mLRUActivities,"  ","Run",false,!dumpAll,false,dumpPackage);
    if (stack.mWaitingVisibleActivities.size() > 0) {
      pw.println(" ");
      pw.println("  Activities waiting for another to become visible:");
      dumpHistoryList(fd,pw,stack.mWaitingVisibleActivities,"  ","Wait",false,!dumpAll,false,dumpPackage);
    }
    if (stack.mStoppingActivities.size() > 0) {
      pw.println(" ");
      pw.println("  Activities waiting to stop:");
      dumpHistoryList(fd,pw,stack.mStoppingActivities,"  ","Stop",false,!dumpAll,false,dumpPackage);
    }
    if (stack.mGoingToSleepActivities.size() > 0) {
      pw.println(" ");
      pw.println("  Activities waiting to sleep:");
      dumpHistoryList(fd,pw,stack.mGoingToSleepActivities,"  ","Sleep",false,!dumpAll,false,dumpPackage);
    }
    if (stack.mFinishingActivities.size() > 0) {
      pw.println(" ");
      pw.println("  Activities waiting to finish:");
      dumpHistoryList(fd,pw,stack.mFinishingActivities,"  ","Fin",false,!dumpAll,false,dumpPackage);
    }
  }
  for (int stackNdx=0; stackNdx < numStacks; ++stackNdx) {
    final ActivityStack stack=mStacks.get(stackNdx);
    pw.print("  Stack #");
    pw.println(mStacks.indexOf(stack));
    if (stack.mPausingActivity != null) {
      pw.println("  mPausingActivity: " + stack.mPausingActivity);
    }
    pw.println("  mResumedActivity: " + stack.mResumedActivity);
    if (dumpAll) {
      pw.println("  mLastPausedActivity: " + stack.mLastPausedActivity);
      pw.println("  mSleepTimeout: " + stack.mSleepTimeout);
    }
  }
  if (dumpAll) {
    pw.println(" ");
    pw.println("  mCurTaskId: " + mCurTaskId);
  }
  return true;
}
