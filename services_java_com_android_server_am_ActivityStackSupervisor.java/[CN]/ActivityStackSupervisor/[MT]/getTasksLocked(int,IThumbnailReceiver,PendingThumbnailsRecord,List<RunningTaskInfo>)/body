{
  ActivityRecord r=null;
  final int numStacks=mStacks.size();
  ArrayList<RunningTaskInfo>[] runningTaskLists=new ArrayList[numStacks];
  for (int stackNdx=numStacks - 1; stackNdx >= 0; --stackNdx) {
    final ActivityStack stack=mStacks.get(stackNdx);
    ArrayList<RunningTaskInfo> stackTaskList=new ArrayList<RunningTaskInfo>();
    runningTaskLists[stackNdx]=stackTaskList;
    final ActivityRecord ar=stack.getTasksLocked(receiver,pending,stackTaskList);
    if (isFrontStack(stack)) {
      r=ar;
    }
  }
  while (maxNum > 0) {
    long mostRecentActiveTime=Long.MIN_VALUE;
    ArrayList<RunningTaskInfo> selectedStackList=null;
    for (int stackNdx=0; stackNdx < numStacks; ++stackNdx) {
      ArrayList<RunningTaskInfo> stackTaskList=runningTaskLists[stackNdx];
      if (!stackTaskList.isEmpty()) {
        final long lastActiveTime=stackTaskList.get(0).lastActiveTime;
        if (lastActiveTime > mostRecentActiveTime) {
          mostRecentActiveTime=lastActiveTime;
          selectedStackList=stackTaskList;
        }
      }
    }
    if (selectedStackList != null) {
      list.add(selectedStackList.remove(0));
      --maxNum;
    }
 else {
      break;
    }
  }
  return r;
}
