{
  if (mNextIndex >= mTypes.length) {
    isIteratorDone=true;
    return;
  }
  if (mNextIndex >= 1) {
    getShapeEndPoint(mCurrentType,mCurrentCoords,mLastPoint);
  }
 else {
    mLastPoint[0]=mLastPoint[1]=0f;
  }
  mCurrentType=mTypes[mNextIndex];
  mCurrentSegmentLength=mSegmentsLength[mNextIndex] - mOffsetLength;
  if (mOffsetLength > 0f && (mCurrentType == SEG_CUBICTO || mCurrentType == SEG_QUADTO)) {
    float[] points=new float[8];
    if (mNextIndex < 1) {
      points[0]=points[1]=0f;
    }
 else {
      getShapeEndPoint(mTypes[mNextIndex - 1],mCoordinates[mNextIndex - 1],points);
    }
    System.arraycopy(mCoordinates[mNextIndex],0,points,2,mCoordinates[mNextIndex].length);
    float t0=(mSegmentsLength[mNextIndex] - mCurrentSegmentLength) / mSegmentsLength[mNextIndex];
    if (mCurrentType == SEG_CUBICTO) {
      cubicCurveSegment(points,t0,1f);
    }
 else {
      quadCurveSegment(points,t0,1f);
    }
    System.arraycopy(points,2,mCurrentCoords,0,mCoordinates[mNextIndex].length);
  }
 else {
    System.arraycopy(mCoordinates[mNextIndex],0,mCurrentCoords,0,mCoordinates[mNextIndex].length);
  }
  mOffsetLength=0f;
  mNextIndex++;
}
