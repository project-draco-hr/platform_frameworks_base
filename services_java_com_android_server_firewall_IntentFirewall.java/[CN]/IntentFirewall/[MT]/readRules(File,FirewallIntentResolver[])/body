{
  List<List<Rule>> rulesByType=new ArrayList<List<Rule>>(3);
  for (int i=0; i < 3; i++) {
    rulesByType.add(new ArrayList<Rule>());
  }
  FileInputStream fis;
  try {
    fis=new FileInputStream(rulesFile);
  }
 catch (  FileNotFoundException ex) {
    return;
  }
  try {
    XmlPullParser parser=Xml.newPullParser();
    parser.setInput(fis,null);
    XmlUtils.beginDocument(parser,TAG_RULES);
    int outerDepth=parser.getDepth();
    while (XmlUtils.nextElementWithin(parser,outerDepth)) {
      int ruleType=-1;
      String tagName=parser.getName();
      if (tagName.equals(TAG_ACTIVITY)) {
        ruleType=TYPE_ACTIVITY;
      }
 else       if (tagName.equals(TAG_BROADCAST)) {
        ruleType=TYPE_BROADCAST;
      }
 else       if (tagName.equals(TAG_SERVICE)) {
        ruleType=TYPE_SERVICE;
      }
      if (ruleType != -1) {
        Rule rule=new Rule();
        List<Rule> rules=rulesByType.get(ruleType);
        try {
          rule.readFromXml(parser);
        }
 catch (        XmlPullParserException ex) {
          Slog.e(TAG,"Error reading an intent firewall rule from " + rulesFile,ex);
          continue;
        }
        rules.add(rule);
      }
    }
  }
 catch (  XmlPullParserException ex) {
    Slog.e(TAG,"Error reading intent firewall rules from " + rulesFile,ex);
    return;
  }
catch (  IOException ex) {
    Slog.e(TAG,"Error reading intent firewall rules from " + rulesFile,ex);
    return;
  }
 finally {
    try {
      fis.close();
    }
 catch (    IOException ex) {
      Slog.e(TAG,"Error while closing " + rulesFile,ex);
    }
  }
  for (int ruleType=0; ruleType < rulesByType.size(); ruleType++) {
    List<Rule> rules=rulesByType.get(ruleType);
    FirewallIntentResolver resolver=resolvers[ruleType];
    for (int ruleIndex=0; ruleIndex < rules.size(); ruleIndex++) {
      Rule rule=rules.get(ruleIndex);
      for (int i=0; i < rule.getIntentFilterCount(); i++) {
        resolver.addFilter(rule.getIntentFilter(i));
      }
      for (int i=0; i < rule.getComponentFilterCount(); i++) {
        resolver.addComponentFilter(rule.getComponentFilter(i),rule);
      }
    }
  }
}
