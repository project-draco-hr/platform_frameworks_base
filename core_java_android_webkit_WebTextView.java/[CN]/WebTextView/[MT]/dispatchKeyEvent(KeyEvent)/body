{
  if (event.isSystem()) {
    return super.dispatchKeyEvent(event);
  }
  boolean down=event.getAction() != KeyEvent.ACTION_UP;
  int keyCode=event.getKeyCode();
  boolean isArrowKey=false;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_LEFT:
case KeyEvent.KEYCODE_DPAD_RIGHT:
case KeyEvent.KEYCODE_DPAD_UP:
case KeyEvent.KEYCODE_DPAD_DOWN:
    if (!mWebView.nativeCursorMatchesFocus()) {
      return down ? mWebView.onKeyDown(keyCode,event) : mWebView.onKeyUp(keyCode,event);
    }
  isArrowKey=true;
break;
}
if (KeyEvent.KEYCODE_TAB == keyCode) {
if (down) {
onEditorAction(EditorInfo.IME_ACTION_NEXT);
}
return true;
}
Spannable text=(Spannable)getText();
int oldStart=Selection.getSelectionStart(text);
int oldEnd=Selection.getSelectionEnd(text);
if (KeyEvent.KEYCODE_DEL == keyCode) {
if (oldStart == 0 && oldEnd == 0) {
sendDomEvent(event);
return true;
}
if (down) {
mGotDelete=true;
mDelSelStart=oldStart;
mDelSelEnd=oldEnd;
}
}
if (mSingle && (KeyEvent.KEYCODE_ENTER == keyCode || KeyEvent.KEYCODE_NUMPAD_ENTER == keyCode)) {
if (isPopupShowing()) {
return super.dispatchKeyEvent(event);
}
if (!down) {
InputMethodManager.getInstance(mContext).hideSoftInputFromWindow(getWindowToken(),0);
sendDomEvent(new KeyEvent(KeyEvent.ACTION_DOWN,keyCode));
sendDomEvent(event);
}
return super.dispatchKeyEvent(event);
}
 else if (KeyEvent.KEYCODE_DPAD_CENTER == keyCode) {
if (isPopupShowing()) {
return super.dispatchKeyEvent(event);
}
if (!mWebView.nativeCursorMatchesFocus()) {
return down ? mWebView.onKeyDown(keyCode,event) : mWebView.onKeyUp(keyCode,event);
}
if (!down) {
mWebView.centerKeyPressOnTextField();
}
return super.dispatchKeyEvent(event);
}
if (getLayout() == null) {
measure(mWidthSpec,mHeightSpec);
}
int oldLength=text.length();
boolean maxedOut=mMaxLength != -1 && oldLength == mMaxLength;
String oldText;
if (maxedOut && oldEnd != oldStart) {
oldText=text.toString();
}
 else {
oldText="";
}
if (super.dispatchKeyEvent(event)) {
if (KeyEvent.KEYCODE_ENTER == keyCode || KeyEvent.KEYCODE_NUMPAD_ENTER == keyCode) {
mGotEnterDown=true;
}
if (maxedOut && !isArrowKey && keyCode != KeyEvent.KEYCODE_DEL) {
if (oldEnd == oldStart) {
  return true;
}
 else if (!oldText.equals(getText().toString())) {
  Spannable span=(Spannable)getText();
  int newStart=Selection.getSelectionStart(span);
  int newEnd=Selection.getSelectionEnd(span);
  mWebView.replaceTextfieldText(0,oldLength,span.toString(),newStart,newEnd);
  return true;
}
}
return true;
}
if (mGotEnterDown && !down) {
return true;
}
if (isArrowKey) {
mWebView.resetTrackballTime();
return down ? mWebView.onKeyDown(keyCode,event) : mWebView.onKeyUp(keyCode,event);
}
return false;
}
