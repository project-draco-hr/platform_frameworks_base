{
  boolean needsResponse=false;
  mCmdParams=mNextCmdParams;
synchronized (mCmdListenerLock) {
switch (cmdType) {
case SET_UP_IDLE_MODE_TEXT:
      if (mNm == null) {
        break;
      }
    CommonUIParams i=(CommonUIParams)mCmdParams;
  if (i.mText == null) {
    mNm.cancel(STK_NOTIFICATION_ID);
  }
 else {
    Notification notification=new Notification();
    RemoteViews contentView=new RemoteViews(mContext.getPackageName(),com.android.internal.R.layout.status_bar_latest_event_content);
    notification.icon=com.android.internal.R.drawable.stat_notify_sim_toolkit;
    notification.tickerText=i.mText;
    notification.flags|=Notification.FLAG_NO_CLEAR;
    if (!i.mIconSelfExplanatory) {
      contentView.setTextViewText(com.android.internal.R.id.text,i.mText);
    }
    if (i.mIcon != null) {
      contentView.setImageViewBitmap(com.android.internal.R.id.icon,i.mIcon);
    }
 else {
      contentView.setImageViewResource(com.android.internal.R.id.icon,com.android.internal.R.drawable.stat_notify_sim_toolkit);
    }
    notification.contentView=contentView;
    mNm.notify(STK_NOTIFICATION_ID,notification);
  }
case SET_UP_MENU:
needsResponse=true;
break;
case SELECT_ITEM:
mState=State.SELECT_ITEM;
SelectItemParams s=(SelectItemParams)mCmdParams;
mCmdListener.onSelectItem(s.mMenu,s.mPresentationType);
needsResponse=false;
break;
case DISPLAY_TEXT:
mState=State.DISPLAY_TEXT;
DisplayTextParams d=(DisplayTextParams)mCmdParams;
mCmdListener.onDisplayText(d.text,d.textAttrs,d.isHighPriority,d.userClear,!d.immediateResponse,d.icon);
needsResponse=d.immediateResponse;
break;
default :
throw new AssertionError("Add case statements for the newly added " + "command types!");
}
}
if (needsResponse) {
sendTerminalResponse(mCmdParams.cmdDet,ResultCode.OK,false,0,null);
}
}
