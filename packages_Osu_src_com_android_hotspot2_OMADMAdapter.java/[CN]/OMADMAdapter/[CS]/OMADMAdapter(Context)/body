{
  mContext=context;
  TelephonyManager tm=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);
  String simOperator=tm.getSimOperator();
  mImsi=tm.getSubscriberId();
  mImei=tm.getImei();
  String strDevId;
  if ("310120".equals(simOperator) || (mImsi != null && mImsi.startsWith("310120"))) {
    strDevId=tm.getDeviceId().toUpperCase(Locale.US);
    if (strDevId != null && strDevId.length() >= IMEI_Length) {
      strDevId=strDevId.substring(0,IMEI_Length);
    }
 else {
      Log.w(OSUManager.TAG,"MEID cannot be extracted from DeviceId " + strDevId);
    }
  }
 else {
    if (isPhoneTypeLTE()) {
      strDevId=mImei;
    }
 else {
      strDevId=tm.getDeviceId();
    }
    if (strDevId == null) {
      strDevId="unknown";
    }
    strDevId=strDevId.toUpperCase(Locale.US);
    if (!isPhoneTypeLTE()) {
      strDevId=strDevId.substring(0,IMEI_Length);
    }
  }
  mDevID=strDevId;
  mDevInfo=new ArrayList<>();
  mDevInfo.add(new ConstPathAccessor<>(strDevId,"DevInfo","DevID"));
  mDevInfo.add(new ConstPathAccessor<>(getProperty(context,"Man","ro.product.manufacturer","unknown"),"DevInfo","Man"));
  mDevInfo.add(new ConstPathAccessor<>(getProperty(context,"Mod","ro.product.model","generic"),"DevInfo","Mod"));
  mDevInfo.add(new ConstPathAccessor<>(getLocale(context),"DevInfo","Lang"));
  mDevInfo.add(new ConstPathAccessor<>("1.2","DevInfo","DmV"));
  mDevDetail=new ArrayList<>();
  mDevDetail.add(new ConstPathAccessor<>(getDeviceType(),"DevDetail","DevType"));
  mDevDetail.add(new ConstPathAccessor<>(SystemProperties.get("ro.product.brand"),"DevDetail","OEM"));
  mDevDetail.add(new ConstPathAccessor<>(getVersion(context,false),"DevDetail","FwV"));
  mDevDetail.add(new ConstPathAccessor<>(getVersion(context,true),"DevDetail","SwV"));
  mDevDetail.add(new ConstPathAccessor<>(getHwV(),"DevDetail","HwV"));
  mDevDetail.add(new ConstPathAccessor<>("TRUE","DevDetail","LrgObj"));
  mDevDetail.add(new ConstPathAccessor<>(32,"DevDetail","URI","MaxDepth"));
  mDevDetail.add(new ConstPathAccessor<>(2048,"DevDetail","URI","MaxTotLen"));
  mDevDetail.add(new ConstPathAccessor<>(64,"DevDetail","URI","MaxSegLen"));
  AtomicInteger index=new AtomicInteger(1);
  mDevDetail.add(new ConstPathAccessor<>(EAP.EAP_TTLS,ExtWiFiPath,"EAPMethodList",index,"EAPType"));
  mDevDetail.add(new ConstPathAccessor<>(mapInnerType(NonEAPType.MSCHAPv2),ExtWiFiPath,"EAPMethodList",index,"InnerMethod"));
  index.incrementAndGet();
  mDevDetail.add(new ConstPathAccessor<>(EAP.EAP_TTLS,ExtWiFiPath,"EAPMethodList",index,"EAPType"));
  mDevDetail.add(new ConstPathAccessor<>(mapInnerType(NonEAPType.PAP),ExtWiFiPath,"EAPMethodList",index,"InnerMethod"));
  index.incrementAndGet();
  mDevDetail.add(new ConstPathAccessor<>(EAP.EAP_TTLS,ExtWiFiPath,"EAPMethodList",index,"EAPType"));
  mDevDetail.add(new ConstPathAccessor<>(mapInnerType(NonEAPType.MSCHAP),ExtWiFiPath,"EAPMethodList",index,"InnerMethod"));
  index.incrementAndGet();
  mDevDetail.add(new ConstPathAccessor<>(EAP.EAP_TLS,ExtWiFiPath,"EAPMethodList",index,"EAPType"));
  index.incrementAndGet();
  mDevDetail.add(new ConstPathAccessor<>(EAP.EAP_AKA,ExtWiFiPath,"EAPMethodList",index,"EAPType"));
  index.incrementAndGet();
  mDevDetail.add(new ConstPathAccessor<>(EAP.EAP_AKAPrim,ExtWiFiPath,"EAPMethodList",index,"EAPType"));
  index.incrementAndGet();
  mDevDetail.add(new ConstPathAccessor<>(EAP.EAP_SIM,ExtWiFiPath,"EAPMethodList",index,"EAPType"));
  mDevDetail.add(new ConstPathAccessor<>("FALSE",ExtWiFiPath,"ManufacturingCertificate"));
  mDevDetail.add(new ConstPathAccessor<>(mImsi,ExtWiFiPath,"IMSI"));
  mDevDetail.add(new ConstPathAccessor<>(mImei,ExtWiFiPath,"IMEI_MEID"));
  mDevDetail.add(new PathAccessor(ExtWiFiPath,"Wi-FiMACAddress"){
    @Override protected String getValue(){
      return getMAC();
    }
  }
);
}
