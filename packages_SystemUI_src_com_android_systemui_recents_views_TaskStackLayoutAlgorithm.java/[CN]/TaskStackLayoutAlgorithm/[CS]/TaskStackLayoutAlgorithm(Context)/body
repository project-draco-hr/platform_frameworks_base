{
  Resources res=context.getResources();
  mMinTranslationZ=res.getDimensionPixelSize(R.dimen.recents_task_view_z_min);
  mMaxTranslationZ=res.getDimensionPixelSize(R.dimen.recents_task_view_z_max);
  mContext=context;
  mFreeformLayoutAlgorithm=new FreeformWorkspaceLayoutAlgorithm();
  if (sCurve == null) {
    sCurve=new ParametricCurve(new ParametricCurve.CurveFunction(){
      private static final float XScale=1.75f;
      private static final float LogBase=3000;
      float reverse(      float x){
        return (-x * XScale) + 1;
      }
      @Override public float f(      float x){
        return 1f - (float)(Math.pow(LogBase,reverse(x))) / (LogBase);
      }
      @Override public float invF(      float y){
        return (float)(Math.log(1f - reverse(y)) / (-Math.log(LogBase) * XScale));
      }
    }
,new ParametricCurve.ParametricCurveFunction(){
      @Override public float f(      float p){
        SystemServicesProxy ssp=Recents.getSystemServices();
        if (ssp.hasFreeformWorkspaceSupport()) {
          return 1f;
        }
        if (p < 0)         return STACK_PEEK_MIN_SCALE;
        if (p > 1)         return 1f;
        float scaleRange=(1f - STACK_PEEK_MIN_SCALE);
        float scale=STACK_PEEK_MIN_SCALE + (p * scaleRange);
        return scale;
      }
    }
);
  }
}
