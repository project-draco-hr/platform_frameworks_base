{
  if (tasks.size() <= 1) {
    return new VisibilityReport(1,1);
  }
  if (mNumStackTasks == 0) {
    return new VisibilityReport(Math.max(mNumFreeformTasks,1),Math.max(mNumFreeformTasks,1));
  }
  int taskHeight=mTaskRect.height();
  int taskBarHeight=mContext.getResources().getDimensionPixelSize(R.dimen.recents_task_bar_height);
  int numVisibleTasks=Math.max(mNumFreeformTasks,1);
  int numVisibleThumbnails=Math.max(mNumFreeformTasks,1);
  Task firstNonFreeformTask=tasks.get(tasks.size() - mNumFreeformTasks - 1);
  float progress=mTaskProgressMap.get(firstNonFreeformTask.key) - mInitialScrollP;
  int prevScreenY=sCurve.pToX(progress,mCurrentStackRect);
  for (int i=tasks.size() - 2; i >= 0; i--) {
    Task task=tasks.get(i);
    if (task.isFreeformTask()) {
      continue;
    }
    progress=mTaskProgressMap.get(task.key) - mInitialScrollP;
    if (progress < 0) {
      break;
    }
    boolean isFrontMostTaskInGroup=task.group.isFrontMostTask(task);
    if (isFrontMostTaskInGroup) {
      float scaleAtP=sCurve.pToScale(progress);
      int scaleYOffsetAtP=(int)(((1f - scaleAtP) * taskHeight) / 2);
      int screenY=sCurve.pToX(progress,mCurrentStackRect) + scaleYOffsetAtP;
      boolean hasVisibleThumbnail=(prevScreenY - screenY) > taskBarHeight;
      if (hasVisibleThumbnail) {
        numVisibleThumbnails++;
        numVisibleTasks++;
        prevScreenY=screenY;
      }
 else {
        for (int j=i; j >= 0; j--) {
          numVisibleTasks++;
          progress=mTaskProgressMap.get(tasks.get(j).key) - mInitialScrollP;
          if (progress < 0) {
            break;
          }
        }
        break;
      }
    }
 else     if (!isFrontMostTaskInGroup) {
      numVisibleTasks++;
    }
  }
  return new VisibilityReport(numVisibleTasks,numVisibleThumbnails);
}
