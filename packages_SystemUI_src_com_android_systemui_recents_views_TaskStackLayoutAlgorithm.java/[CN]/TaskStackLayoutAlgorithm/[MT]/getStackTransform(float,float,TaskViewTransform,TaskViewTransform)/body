{
  SystemServicesProxy ssp=Recents.getSystemServices();
  mUnfocusedRange.offset(stackScroll);
  float p=mUnfocusedRange.getNormalizedX(taskProgress);
  float yp=mUnfocusedCurveInterpolator.getInterpolation(p);
  float unfocusedP=p;
  int unFocusedY=(int)(Math.max(0f,(1f - yp)) * mStackRect.height());
  boolean unfocusedVisible=mUnfocusedRange.isInRange(taskProgress);
  int focusedY=0;
  boolean focusedVisible=true;
  if (mFocusState > 0f) {
    mFocusedRange.offset(stackScroll);
    p=mFocusedRange.getNormalizedX(taskProgress);
    yp=mFocusedCurveInterpolator.getInterpolation(p);
    focusedY=(int)(Math.max(0f,(1f - yp)) * mStackRect.height());
    focusedVisible=mFocusedRange.isInRange(taskProgress);
  }
  if (!unfocusedVisible && !focusedVisible) {
    transformOut.reset();
    return transformOut;
  }
  int y;
  float z;
  float relP;
  if (!ssp.hasFreeformWorkspaceSupport() && mNumStackTasks == 1) {
    p=(mMinScrollP - stackScroll) / mNumStackTasks;
    int centerYOffset=(mStackRect.top - mTaskRect.top) + (mStackRect.height() - mTaskRect.height()) / 2;
    y=centerYOffset + getYForDeltaP(p,0);
    z=mMaxTranslationZ;
    relP=1f;
  }
 else {
    y=unFocusedY + (int)(mFocusState * (focusedY - unFocusedY));
    y+=(mStackRect.top - mTaskRect.top);
    z=Math.max(mMinTranslationZ,Math.min(mMaxTranslationZ,mMinTranslationZ + (p * (mMaxTranslationZ - mMinTranslationZ))));
    relP=unfocusedP;
  }
  transformOut.scale=1f;
  transformOut.translationX=(mStackRect.width() - mTaskRect.width()) / 2;
  transformOut.translationY=y;
  transformOut.translationZ=z;
  transformOut.rect.set(mTaskRect);
  transformOut.rect.offset(transformOut.translationX,transformOut.translationY);
  Utilities.scaleRectAboutCenter(transformOut.rect,transformOut.scale);
  transformOut.visible=true;
  transformOut.p=relP;
  return transformOut;
}
