{
  SystemServicesProxy ssp=Recents.getSystemServices();
  if (!ssp.hasFreeformWorkspaceSupport() && mNumStackTasks == 1) {
    float pTaskRelative=mMinScrollP - stackScroll;
    float scale=ssp.hasFreeformWorkspaceSupport() ? 1f : SINGLE_TASK_SCALE;
    int topOffset=(mCurrentStackRect.top - mTaskRect.top) + (mCurrentStackRect.height() - mTaskRect.height()) / 2;
    transformOut.scale=scale;
    transformOut.translationX=(mStackRect.width() - mTaskRect.width()) / 2;
    transformOut.translationY=(int)(topOffset + (pTaskRelative * mCurrentStackRect.height()));
    transformOut.translationZ=mMaxTranslationZ;
    transformOut.rect.set(mTaskRect);
    transformOut.rect.offset(transformOut.translationX,transformOut.translationY);
    Utilities.scaleRectAboutCenter(transformOut.rect,transformOut.scale);
    transformOut.visible=true;
    transformOut.p=pTaskRelative;
    return transformOut;
  }
 else {
    float pTaskRelative=taskProgress - stackScroll;
    float pBounded=Math.max(0,Math.min(pTaskRelative,1f));
    if (DEBUG) {
      Log.d(TAG,"getStackTransform (normal): " + taskProgress + ", "+ stackScroll);
    }
    if (pTaskRelative > 1f) {
      transformOut.reset();
      transformOut.rect.set(mTaskRect);
      return transformOut;
    }
    if (pTaskRelative < 0f) {
      if (prevTransform != null && Float.compare(prevTransform.p,0f) <= 0) {
        transformOut.reset();
        transformOut.rect.set(mTaskRect);
        return transformOut;
      }
    }
    float scale=sCurve.pToScale(pBounded);
    int scaleYOffset=(int)(((1f - scale) * mTaskRect.height()) / 2);
    transformOut.scale=scale;
    transformOut.translationX=(mStackRect.width() - mTaskRect.width()) / 2;
    transformOut.translationY=(mCurrentStackRect.top - mTaskRect.top) + (sCurve.pToX(pBounded,mCurrentStackRect) - mCurrentStackRect.top) - scaleYOffset;
    transformOut.translationZ=Math.max(mMinTranslationZ,mMinTranslationZ + (pBounded * (mMaxTranslationZ - mMinTranslationZ)));
    transformOut.rect.set(mTaskRect);
    transformOut.rect.offset(transformOut.translationX,transformOut.translationY);
    Utilities.scaleRectAboutCenter(transformOut.rect,transformOut.scale);
    transformOut.visible=true;
    transformOut.p=pTaskRelative;
    if (DEBUG) {
      Log.d(TAG,"\t" + transformOut);
    }
    return transformOut;
  }
}
