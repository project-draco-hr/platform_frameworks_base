{
  SystemServicesProxy ssp=Recents.getSystemServices();
  mUnfocusedRange.offset(stackScroll);
  mFocusedRange.offset(stackScroll);
  boolean unfocusedVisible=mUnfocusedRange.isInRange(taskProgress);
  boolean focusedVisible=mFocusedRange.isInRange(taskProgress);
  if (!forceUpdate && !unfocusedVisible && !focusedVisible) {
    transformOut.reset();
    return;
  }
  mUnfocusedRange.offset(stackScroll);
  mFocusedRange.offset(stackScroll);
  float unfocusedRangeX=mUnfocusedRange.getNormalizedX(taskProgress);
  float focusedRangeX=mFocusedRange.getNormalizedX(taskProgress);
  float boundedStackScroll=Utilities.clamp(stackScroll,mMinScrollP,mMaxScrollP);
  mUnfocusedRange.offset(boundedStackScroll);
  mFocusedRange.offset(boundedStackScroll);
  float boundedScrollUnfocusedRangeX=mUnfocusedRange.getNormalizedX(taskProgress);
  float boundedScrollUnfocusedNonOverrideRangeX=mUnfocusedRange.getNormalizedX(nonOverrideTaskProgress);
  float lowerBoundedStackScroll=Utilities.clamp(stackScroll,-Float.MAX_VALUE,mMaxScrollP);
  mUnfocusedRange.offset(lowerBoundedStackScroll);
  mFocusedRange.offset(lowerBoundedStackScroll);
  float lowerBoundedUnfocusedRangeX=mUnfocusedRange.getNormalizedX(taskProgress);
  float lowerBoundedFocusedRangeX=mFocusedRange.getNormalizedX(taskProgress);
  int x=(mStackRect.width() - mTaskRect.width()) / 2;
  int y;
  float z;
  float dimAlpha;
  float viewOutlineAlpha;
  if (!ssp.hasFreeformWorkspaceSupport() && mNumStackTasks == 1 && !ignoreSingleTaskCase) {
    float tmpP=(mMinScrollP - stackScroll) / mNumStackTasks;
    int centerYOffset=(mStackRect.top - mTaskRect.top) + (mStackRect.height() - mSystemInsets.bottom - mTaskRect.height()) / 2;
    y=centerYOffset + getYForDeltaP(tmpP,0);
    z=mMaxTranslationZ;
    dimAlpha=0f;
    viewOutlineAlpha=OUTLINE_ALPHA_MIN_VALUE + (OUTLINE_ALPHA_MAX_VALUE - OUTLINE_ALPHA_MIN_VALUE) / 2f;
  }
 else {
    int unfocusedY=(int)((1f - mUnfocusedCurveInterpolator.getInterpolation(unfocusedRangeX)) * mStackRect.height());
    int focusedY=(int)((1f - mFocusedCurveInterpolator.getInterpolation(focusedRangeX)) * mStackRect.height());
    float unfocusedDim=mUnfocusedDimCurveInterpolator.getInterpolation(lowerBoundedUnfocusedRangeX);
    float focusedDim=mFocusedDimCurveInterpolator.getInterpolation(lowerBoundedFocusedRangeX);
    if (mNumStackTasks <= 2 && nonOverrideTaskProgress == 0f) {
      if (boundedScrollUnfocusedRangeX >= 0.5f) {
        unfocusedDim=0f;
      }
 else {
        float offset=mUnfocusedDimCurveInterpolator.getInterpolation(0.5f);
        unfocusedDim-=offset;
        unfocusedDim*=MAX_DIM / (MAX_DIM - offset);
      }
    }
    y=(mStackRect.top - mTaskRect.top) + (int)Utilities.mapRange(focusState,unfocusedY,focusedY);
    z=Utilities.mapRange(Utilities.clamp01(boundedScrollUnfocusedNonOverrideRangeX),mMinTranslationZ,mMaxTranslationZ);
    dimAlpha=Utilities.mapRange(focusState,unfocusedDim,focusedDim);
    viewOutlineAlpha=Utilities.mapRange(Utilities.clamp01(boundedScrollUnfocusedRangeX),OUTLINE_ALPHA_MIN_VALUE,OUTLINE_ALPHA_MAX_VALUE);
  }
  transformOut.scale=1f;
  transformOut.alpha=1f;
  transformOut.translationZ=z;
  transformOut.dimAlpha=dimAlpha;
  transformOut.viewOutlineAlpha=viewOutlineAlpha;
  transformOut.rect.set(mTaskRect);
  transformOut.rect.offset(x,y);
  Utilities.scaleRectAboutCenter(transformOut.rect,transformOut.scale);
  transformOut.visible=(transformOut.rect.top < mStackRect.bottom) && (frontTransform == null || transformOut.rect.top != frontTransform.rect.top);
}
