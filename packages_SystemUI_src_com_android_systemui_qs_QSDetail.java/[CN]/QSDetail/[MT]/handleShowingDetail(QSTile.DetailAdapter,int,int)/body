{
  final boolean showingDetail=adapter != null;
  setClickable(showingDetail);
  if (showingDetail) {
    mQsDetailHeaderTitle.setText(adapter.getTitle());
    final Boolean toggleState=adapter.getToggleState();
    if (toggleState == null) {
      mQsDetailHeaderSwitch.setVisibility(INVISIBLE);
      mQsDetailHeader.setClickable(false);
    }
 else {
      mQsDetailHeaderSwitch.setVisibility(VISIBLE);
      mQsDetailHeaderSwitch.setChecked(toggleState);
      mQsDetailHeader.setClickable(true);
      mQsDetailHeader.setOnClickListener(new OnClickListener(){
        @Override public void onClick(        View v){
          boolean checked=!mQsDetailHeaderSwitch.isChecked();
          mQsDetailHeaderSwitch.setChecked(checked);
          adapter.setToggleState(checked);
        }
      }
);
    }
  }
  boolean visibleDiff=(mDetailAdapter != null) != (adapter != null);
  if (!visibleDiff && mDetailAdapter == adapter)   return;
  AnimatorListener listener=null;
  if (adapter != null) {
    int viewCacheIndex=adapter.getMetricsCategory();
    View detailView=adapter.createDetailView(mContext,mDetailViews.get(viewCacheIndex),mDetailContent);
    if (detailView == null)     throw new IllegalStateException("Must return detail view");
    final Intent settingsIntent=adapter.getSettingsIntent();
    mDetailSettingsButton.setVisibility(settingsIntent != null ? VISIBLE : GONE);
    mDetailSettingsButton.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        mHost.startActivityDismissingKeyguard(settingsIntent);
      }
    }
);
    mDetailContent.removeAllViews();
    mDetailContent.addView(detailView);
    mDetailViews.put(viewCacheIndex,detailView);
    MetricsLogger.visible(mContext,adapter.getMetricsCategory());
    announceForAccessibility(mContext.getString(R.string.accessibility_quick_settings_detail,adapter.getTitle()));
    mDetailAdapter=adapter;
    listener=mHideGridContentWhenDone;
    setVisibility(View.VISIBLE);
  }
 else {
    if (mDetailAdapter != null) {
      MetricsLogger.hidden(mContext,mDetailAdapter.getMetricsCategory());
    }
    mClosingDetail=true;
    mDetailAdapter=null;
    listener=mTeardownDetailWhenDone;
    mQsPanel.setGridContentVisibility(true);
    mQsPanelCallback.onScanStateChanged(false);
  }
  sendAccessibilityEvent(AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED);
  if (visibleDiff) {
    if (mFullyExpanded || mDetailAdapter != null) {
      setAlpha(1);
      mClipper.animateCircularClip(x,y,mDetailAdapter != null,listener);
    }
 else {
      animate().alpha(0).setDuration(FADE_DURATION).setListener(listener).start();
    }
  }
}
