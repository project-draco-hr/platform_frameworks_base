{
  Collections.reverse(freeformTasks);
  mTaskRectMap.clear();
  int numFreeformTasks=stackLayout.mNumFreeformTasks;
  if (!freeformTasks.isEmpty()) {
    int workspaceWidth=stackLayout.mFreeformRect.width();
    int workspaceHeight=stackLayout.mFreeformRect.height();
    float normalizedWorkspaceWidth=(float)workspaceWidth / workspaceHeight;
    float normalizedWorkspaceHeight=1f;
    float[] normalizedTaskWidths=new float[numFreeformTasks];
    for (int i=0; i < numFreeformTasks; i++) {
      Task task=freeformTasks.get(i);
      float rowTaskWidth;
      if (task.bounds != null) {
        rowTaskWidth=(float)task.bounds.width() / task.bounds.height();
      }
 else {
        rowTaskWidth=normalizedWorkspaceWidth;
      }
      normalizedTaskWidths[i]=Math.min(rowTaskWidth,normalizedWorkspaceWidth);
    }
    float rowScale=0.85f;
    float rowWidth=0f;
    float maxRowWidth=0f;
    int rowCount=1;
    for (int i=0; i < numFreeformTasks; ) {
      float width=normalizedTaskWidths[i] * rowScale;
      if (rowWidth + width > normalizedWorkspaceWidth) {
        if ((rowCount + 1) * rowScale > normalizedWorkspaceHeight) {
          rowScale=Math.min(normalizedWorkspaceWidth / (rowWidth + width),normalizedWorkspaceHeight / (rowCount + 1));
          rowCount=1;
          rowWidth=0;
          i=0;
        }
 else {
          rowWidth=width;
          rowCount++;
          i++;
        }
      }
 else {
        rowWidth+=width;
        i++;
      }
      maxRowWidth=Math.max(rowWidth,maxRowWidth);
    }
    float defaultRowLeft=((1f - (maxRowWidth / normalizedWorkspaceWidth)) * workspaceWidth) / 2f;
    float rowLeft=defaultRowLeft;
    float rowTop=((1f - (rowScale * rowCount)) * workspaceHeight) / 2f;
    float rowHeight=rowScale * workspaceHeight;
    for (int i=0; i < numFreeformTasks; i++) {
      Task task=freeformTasks.get(i);
      float width=rowHeight * normalizedTaskWidths[i];
      if (rowLeft + width > workspaceWidth) {
        rowTop+=rowHeight;
        rowLeft=defaultRowLeft;
      }
      RectF rect=new RectF(rowLeft,rowTop,rowLeft + width,rowTop + rowHeight);
      rect.inset(mTaskPadding,mTaskPadding);
      rowLeft+=width;
      mTaskRectMap.put(task.key,rect);
    }
  }
}
