{
switch (msg.what) {
case EVENT_RSSI_CHANGE:
    mCurrentSignalLevel=calculateSignalLevel(msg.arg1);
  if (mCurrentSignalLevel <= LINK_MONITOR_LEVEL_THRESHOLD) {
  }
 else {
    transitionTo(mOnlineWatchState);
  }
break;
case EVENT_BSSID_CHANGE:
transitionTo(mLinkMonitoringState);
break;
case CMD_RSSI_FETCH:
if (!mIsScreenOn) {
transitionTo(mOnlineState);
}
 else if (msg.arg1 == mRssiFetchToken) {
mWsmChannel.sendMessage(WifiManager.RSSI_PKTCNT_FETCH);
sendMessageDelayed(obtainMessage(CMD_RSSI_FETCH,++mRssiFetchToken,0),LINK_SAMPLING_INTERVAL_MS);
}
break;
case WifiManager.RSSI_PKTCNT_FETCH_SUCCEEDED:
RssiPacketCountInfo info=(RssiPacketCountInfo)msg.obj;
int rssi=info.rssi;
int mrssi=(mLastRssi + rssi) / 2;
int txbad=info.txbad;
int txgood=info.txgood;
if (DBG) logd("Fetch RSSI succeed, rssi=" + rssi + " mrssi="+ mrssi+ " txbad="+ txbad+ " txgood="+ txgood);
long now=SystemClock.elapsedRealtime();
if (now - mCurrentBssid.mLastTimeSample < LINK_SAMPLING_INTERVAL_MS * 2) {
int dbad=txbad - mLastTxBad;
int dgood=txgood - mLastTxGood;
int dtotal=dbad + dgood;
if (dtotal > 0) {
double loss=((double)dbad) / ((double)dtotal);
mCurrentLoss.update(loss,dtotal);
if (DBG) {
DecimalFormat df=new DecimalFormat("#.##");
logd("Incremental loss=" + dbad + "/"+ dtotal+ " Current loss="+ df.format(mCurrentLoss.mValue * 100)+ "% volume="+ df.format(mCurrentLoss.mVolume));
}
mCurrentBssid.updateLoss(mrssi,loss,dtotal);
if (mCurrentLoss.mValue > POOR_LINK_LOSS_THRESHOLD && mCurrentLoss.mVolume > POOR_LINK_MIN_VOLUME) {
if (++mSampleCount >= POOR_LINK_SAMPLE_COUNT) if (mCurrentBssid.poorLinkDetected(rssi)) {
sendLinkStatusNotification(false);
++mRssiFetchToken;
}
}
 else {
mSampleCount=0;
}
}
}
mCurrentBssid.mLastTimeSample=now;
mLastTxBad=txbad;
mLastTxGood=txgood;
mLastRssi=rssi;
break;
case WifiManager.RSSI_PKTCNT_FETCH_FAILED:
if (DBG) logd("RSSI_FETCH_FAILED");
break;
default :
return NOT_HANDLED;
}
return HANDLED;
}
