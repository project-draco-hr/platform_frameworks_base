{
switch (msg.what) {
case MSG_START:
{
      boolean result=false;
      IIdleCallback callbackBinder=(IIdleCallback)msg.obj;
      mCallbackBinder=callbackBinder;
      final int token=mToken=msg.arg1;
      try {
        result=IdleService.this.onIdleStart();
      }
 catch (      Exception e) {
        Log.e(TAG,"Unable to start idle workload",e);
        throw new RuntimeException(e);
      }
 finally {
        if (mCallbackBinder != null) {
          try {
            callbackBinder.acknowledgeStart(token,result);
          }
 catch (          RemoteException re) {
            Log.e(TAG,"System unreachable to start idle workload");
          }
        }
      }
      break;
    }
case MSG_STOP:
{
    IIdleCallback callbackBinder=(IIdleCallback)msg.obj;
    final int token=msg.arg1;
    try {
      IdleService.this.onIdleStop();
    }
 catch (    Exception e) {
      Log.e(TAG,"Unable to stop idle workload",e);
      throw new RuntimeException(e);
    }
 finally {
      if (mCallbackBinder != null) {
        try {
          callbackBinder.acknowledgeStop(token);
        }
 catch (        RemoteException re) {
          Log.e(TAG,"System unreachable to stop idle workload");
        }
      }
    }
    break;
  }
case MSG_FINISH:
{
  if (mCallbackBinder != null) {
    try {
      mCallbackBinder.idleFinished(mToken);
    }
 catch (    RemoteException e) {
      Log.e(TAG,"System unreachable to finish idling");
    }
 finally {
      mCallbackBinder=null;
    }
  }
 else {
    Log.e(TAG,"finishIdle() called but the idle service is not started");
  }
  break;
}
default :
{
Slog.w(TAG,"Unknown message " + msg.what);
}
}
}
