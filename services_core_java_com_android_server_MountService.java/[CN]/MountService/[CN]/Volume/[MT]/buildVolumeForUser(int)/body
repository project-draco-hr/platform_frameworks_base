{
  final File userPath;
  final boolean removable;
  final boolean emulated;
  final boolean allowMassStorage=false;
  final int mtpStorageId=MtpStorage.getStorageIdForIndex(mtpIndex);
  final String envState=sStateToEnvironment.get(state);
  int descriptionId=com.android.internal.R.string.unknownName;
  long mtpReserveSize=0;
  long maxFileSize=0;
  if (type == TYPE_EMULATED) {
    userPath=new File(path,Integer.toString(userId));
    emulated=true;
    mtpReserveSize=StorageManager.from(mContext).getStorageLowBytes(userPath);
    descriptionId=com.android.internal.R.string.storage_internal;
    if (ID_EMULATED_INTERNAL.equals(id)) {
      removable=false;
    }
 else {
      removable=true;
    }
  }
 else   if (type == TYPE_PUBLIC) {
    userPath=new File(path);
    emulated=false;
    removable=true;
    if (disk != null) {
      if ((disk.flags & Disk.FLAG_SD) != 0) {
        descriptionId=com.android.internal.R.string.storage_sd_card;
      }
 else       if ((disk.flags & Disk.FLAG_USB) != 0) {
        descriptionId=com.android.internal.R.string.storage_usb;
      }
    }
    if ("vfat".equals(fsType)) {
      maxFileSize=4294967295L;
    }
  }
 else {
    throw new IllegalStateException("Unexpected volume type " + type);
  }
  return new StorageVolume(id,mtpStorageId,userPath,descriptionId,isPrimary(),removable,emulated,mtpReserveSize,allowMassStorage,maxFileSize,new UserHandle(userId),fsUuid,fsLabel,envState);
}
