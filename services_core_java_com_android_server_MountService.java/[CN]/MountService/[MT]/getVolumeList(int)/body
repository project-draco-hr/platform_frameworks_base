{
  if (UserHandle.getCallingUserId() != userId) {
    mContext.enforceCallingOrSelfPermission(android.Manifest.permission.ACCESS_ALL_EXTERNAL_STORAGE,"getVolumeList");
  }
  final ArrayList<StorageVolume> res=Lists.newArrayList();
  boolean foundPrimary=false;
synchronized (mLock) {
    for (    Volume vol : mVolumes.values()) {
      if (vol.isVisibleToUser(userId)) {
        final StorageVolume userVol=vol.buildVolumeForUser(userId);
        if (vol.isPrimary()) {
          res.add(0,userVol);
          foundPrimary=true;
        }
 else {
          res.add(userVol);
        }
      }
    }
  }
  if (!foundPrimary) {
    Slog.w(TAG,"No primary storage defined yet; hacking together a stub");
    final boolean primaryPhysical=SystemProperties.getBoolean(PROP_PRIMARY_PHYSICAL,false);
    final String id="stub_primary";
    final File path=Environment.getLegacyExternalStorageDirectory();
    final int descriptionId=android.R.string.unknownName;
    final boolean primary=true;
    final boolean removable=primaryPhysical;
    final boolean emulated=!primaryPhysical;
    final long mtpReserveSize=0L;
    final boolean allowMassStorage=false;
    final long maxFileSize=0L;
    final UserHandle owner=new UserHandle(userId);
    final String uuid=null;
    final String userLabel=null;
    final String state=Environment.MEDIA_REMOVED;
    res.add(0,new StorageVolume(id,MtpStorage.getStorageIdForIndex(0),path,descriptionId,primary,removable,emulated,mtpReserveSize,allowMassStorage,maxFileSize,owner,uuid,userLabel,state));
  }
  return res.toArray(new StorageVolume[res.size()]);
}
