{
  int rc=StorageResultCode.OperationSucceeded;
  final StorageVolume volume;
synchronized (mVolumesLock) {
    volume=mVolumesByPath.get(path);
  }
  if (!volume.isEmulated() && hasUserRestriction(UserManager.DISALLOW_MOUNT_PHYSICAL_MEDIA)) {
    Slog.w(TAG,"User has restriction DISALLOW_MOUNT_PHYSICAL_MEDIA; cannot mount volume.");
    return StorageResultCode.OperationFailedInternalError;
  }
  if (DEBUG_EVENTS)   Slog.i(TAG,"doMountVolume: Mouting " + path);
  try {
    mConnector.execute("volume","mount",path);
  }
 catch (  NativeDaemonConnectorException e) {
    String action=null;
    int code=e.getCode();
    if (code == VoldResponseCode.OpFailedNoMedia) {
      rc=StorageResultCode.OperationFailedNoMedia;
    }
 else     if (code == VoldResponseCode.OpFailedMediaBlank) {
      if (DEBUG_EVENTS)       Slog.i(TAG," updating volume state :: media nofs");
      updatePublicVolumeState(volume,Environment.MEDIA_NOFS);
      action=Intent.ACTION_MEDIA_NOFS;
      rc=StorageResultCode.OperationFailedMediaBlank;
    }
 else     if (code == VoldResponseCode.OpFailedMediaCorrupt) {
      if (DEBUG_EVENTS)       Slog.i(TAG,"updating volume state media corrupt");
      updatePublicVolumeState(volume,Environment.MEDIA_UNMOUNTABLE);
      action=Intent.ACTION_MEDIA_UNMOUNTABLE;
      rc=StorageResultCode.OperationFailedMediaCorrupt;
    }
 else {
      rc=StorageResultCode.OperationFailedInternalError;
    }
    if (action != null) {
      sendStorageIntent(action,volume,UserHandle.ALL);
    }
  }
  return rc;
}
