{
  enforcePermission(android.Manifest.permission.MOUNT_UNMOUNT_FILESYSTEMS);
  waitForReady();
  final VolumeInfo from;
  final VolumeInfo to;
synchronized (mLock) {
    if (Objects.equals(mPrimaryStorageUuid,volumeUuid)) {
      throw new IllegalArgumentException("Primary storage already at " + volumeUuid);
    }
    if (mMoveCallback != null) {
      throw new IllegalStateException("Move already in progress");
    }
    mMoveCallback=callback;
    mMoveTargetUuid=volumeUuid;
    if (Objects.equals(StorageManager.UUID_PRIMARY_PHYSICAL,mPrimaryStorageUuid) || Objects.equals(StorageManager.UUID_PRIMARY_PHYSICAL,volumeUuid)) {
      Slog.d(TAG,"Skipping move to/from primary physical");
      onMoveStatusLocked(MOVE_STATUS_COPY_FINISHED);
      onMoveStatusLocked(PackageManager.MOVE_SUCCEEDED);
      mHandler.obtainMessage(H_RESET).sendToTarget();
      return;
    }
 else {
      from=findStorageForUuid(mPrimaryStorageUuid);
      to=findStorageForUuid(volumeUuid);
      if (from == null) {
        Slog.w(TAG,"Failing move due to missing from volume " + mPrimaryStorageUuid);
        onMoveStatusLocked(PackageManager.MOVE_FAILED_INTERNAL_ERROR);
        return;
      }
 else       if (to == null) {
        Slog.w(TAG,"Failing move due to missing to volume " + volumeUuid);
        onMoveStatusLocked(PackageManager.MOVE_FAILED_INTERNAL_ERROR);
        return;
      }
    }
  }
  try {
    mConnector.execute("volume","move_storage",from.id,to.id);
  }
 catch (  NativeDaemonConnectorException e) {
    throw e.rethrowAsParcelableException();
  }
}
