{
  final int userId=UserHandle.getUserId(uid);
  final boolean forWrite=(flags & StorageManager.FLAG_FOR_WRITE) != 0;
  boolean reportUnmounted=false;
  boolean foundPrimary=false;
  final long identity=Binder.clearCallingIdentity();
  try {
    if (!mMountServiceInternal.hasExternalStorage(uid,packageName)) {
      reportUnmounted=true;
    }
    if (!isUserKeyUnlocked(userId)) {
      reportUnmounted=true;
    }
  }
  finally {
    Binder.restoreCallingIdentity(identity);
  }
  final ArrayList<StorageVolume> res=new ArrayList<>();
synchronized (mLock) {
    for (int i=0; i < mVolumes.size(); i++) {
      final VolumeInfo vol=mVolumes.valueAt(i);
      if (forWrite ? vol.isVisibleForWrite(userId) : vol.isVisibleForRead(userId)) {
        final StorageVolume userVol=vol.buildStorageVolume(mContext,userId,reportUnmounted);
        if (vol.isPrimary()) {
          res.add(0,userVol);
          foundPrimary=true;
        }
 else {
          res.add(userVol);
        }
      }
    }
  }
  if (!foundPrimary) {
    Log.w(TAG,"No primary storage defined yet; hacking together a stub");
    final boolean primaryPhysical=SystemProperties.getBoolean(StorageManager.PROP_PRIMARY_PHYSICAL,false);
    final String id="stub_primary";
    final File path=Environment.getLegacyExternalStorageDirectory();
    final String description=mContext.getString(android.R.string.unknownName);
    final boolean primary=true;
    final boolean removable=primaryPhysical;
    final boolean emulated=!primaryPhysical;
    final long mtpReserveSize=0L;
    final boolean allowMassStorage=false;
    final long maxFileSize=0L;
    final UserHandle owner=new UserHandle(userId);
    final String uuid=null;
    final String state=Environment.MEDIA_REMOVED;
    res.add(0,new StorageVolume(id,StorageVolume.STORAGE_ID_INVALID,path,description,primary,removable,emulated,mtpReserveSize,allowMassStorage,maxFileSize,owner,uuid,state));
  }
  return res.toArray(new StorageVolume[res.size()]);
}
