{
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.DUMP,TAG);
  for (  String arg : args) {
    if ("--clear".equals(arg)) {
synchronized (mLock) {
        mRecords.clear();
        writeSettingsLocked();
      }
    }
  }
  final IndentingPrintWriter pw=new IndentingPrintWriter(writer,"  ",160);
synchronized (mLock) {
    pw.println("Disks:");
    pw.increaseIndent();
    for (int i=0; i < mDisks.size(); i++) {
      final DiskInfo disk=mDisks.valueAt(i);
      disk.dump(pw);
    }
    pw.decreaseIndent();
    pw.println();
    pw.println("Volumes:");
    pw.increaseIndent();
    for (int i=0; i < mVolumes.size(); i++) {
      final VolumeInfo vol=mVolumes.valueAt(i);
      if (VolumeInfo.ID_PRIVATE_INTERNAL.equals(vol.id))       continue;
      vol.dump(pw);
    }
    pw.decreaseIndent();
    pw.println();
    pw.println("Records:");
    pw.increaseIndent();
    for (int i=0; i < mRecords.size(); i++) {
      final VolumeRecord note=mRecords.valueAt(i);
      note.dump(pw);
    }
    pw.decreaseIndent();
    pw.println();
    pw.println("Primary storage UUID: " + mPrimaryStorageUuid);
  }
synchronized (mObbMounts) {
    pw.println();
    pw.println("mObbMounts:");
    pw.increaseIndent();
    final Iterator<Entry<IBinder,List<ObbState>>> binders=mObbMounts.entrySet().iterator();
    while (binders.hasNext()) {
      Entry<IBinder,List<ObbState>> e=binders.next();
      pw.println(e.getKey() + ":");
      pw.increaseIndent();
      final List<ObbState> obbStates=e.getValue();
      for (      final ObbState obbState : obbStates) {
        pw.println(obbState);
      }
      pw.decreaseIndent();
    }
    pw.decreaseIndent();
    pw.println();
    pw.println("mObbPathToStateMap:");
    pw.increaseIndent();
    final Iterator<Entry<String,ObbState>> maps=mObbPathToStateMap.entrySet().iterator();
    while (maps.hasNext()) {
      final Entry<String,ObbState> e=maps.next();
      pw.print(e.getKey());
      pw.print(" -> ");
      pw.println(e.getValue());
    }
    pw.decreaseIndent();
  }
  pw.println();
  pw.println("mConnection:");
  pw.increaseIndent();
  mConnector.dump(fd,pw,args);
  pw.decreaseIndent();
  SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
  pw.println();
  pw.print("Last maintenance: ");
  pw.println(sdf.format(new Date(mLastMaintenance)));
}
