{
  sSelf=this;
  mContext=context;
  mCallbacks=new Callbacks(FgThread.get().getLooper());
  mLockPatternUtils=new LockPatternUtils(mContext);
  mPms=(PackageManagerService)ServiceManager.getService("package");
  HandlerThread hthread=new HandlerThread(TAG);
  hthread.start();
  mHandler=new MountServiceHandler(hthread.getLooper());
  mObbActionHandler=new ObbActionHandler(IoThread.get().getLooper());
  File dataDir=Environment.getDataDirectory();
  File systemDir=new File(dataDir,"system");
  mLastMaintenanceFile=new File(systemDir,LAST_FSTRIM_FILE);
  if (!mLastMaintenanceFile.exists()) {
    try {
      (new FileOutputStream(mLastMaintenanceFile)).close();
    }
 catch (    IOException e) {
      Slog.e(TAG,"Unable to create fstrim record " + mLastMaintenanceFile.getPath());
    }
  }
 else {
    mLastMaintenance=mLastMaintenanceFile.lastModified();
  }
  mSettingsFile=new AtomicFile(new File(Environment.getDataSystemDirectory(),"storage.xml"));
synchronized (mLock) {
    readSettingsLocked();
  }
  LocalServices.addService(MountServiceInternal.class,mMountServiceInternal);
  mConnector=new NativeDaemonConnector(this,"vold",MAX_CONTAINERS * 2,VOLD_TAG,25,null);
  mConnector.setDebug(true);
  mConnector.setWarnIfHeld(mLock);
  mConnectorThread=new Thread(mConnector,VOLD_TAG);
  mCryptConnector=new NativeDaemonConnector(this,"cryptd",MAX_CONTAINERS * 2,CRYPTD_TAG,25,null);
  mCryptConnector.setDebug(true);
  mCryptConnectorThread=new Thread(mCryptConnector,CRYPTD_TAG);
  final IntentFilter userFilter=new IntentFilter();
  userFilter.addAction(Intent.ACTION_USER_ADDED);
  userFilter.addAction(Intent.ACTION_USER_REMOVED);
  mContext.registerReceiver(mUserReceiver,userFilter,null,mHandler);
synchronized (mLock) {
    addInternalVolumeLocked();
  }
  if (WATCHDOG_ENABLE) {
    Watchdog.getInstance().addMonitor(this);
  }
}
