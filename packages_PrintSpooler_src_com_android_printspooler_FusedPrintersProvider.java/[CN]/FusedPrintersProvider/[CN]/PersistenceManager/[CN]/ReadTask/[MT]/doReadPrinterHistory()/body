{
  FileInputStream in=null;
  try {
    in=mStatePersistFile.openRead();
  }
 catch (  FileNotFoundException fnfe) {
    if (DEBUG) {
      Log.i(LOG_TAG,"No existing printer history " + FusedPrintersProvider.this.hashCode());
    }
    return new ArrayList<PrinterInfo>();
  }
  try {
    List<PrinterInfo> printers=new ArrayList<PrinterInfo>();
    XmlPullParser parser=Xml.newPullParser();
    parser.setInput(in,null);
    parseState(parser,printers);
    mLastReadHistoryTimestamp=mStatePersistFile.getBaseFile().lastModified();
    return printers;
  }
 catch (  IllegalStateException ise) {
    Slog.w(LOG_TAG,"Failed parsing ",ise);
  }
catch (  NullPointerException npe) {
    Slog.w(LOG_TAG,"Failed parsing ",npe);
  }
catch (  NumberFormatException nfe) {
    Slog.w(LOG_TAG,"Failed parsing ",nfe);
  }
catch (  XmlPullParserException xppe) {
    Slog.w(LOG_TAG,"Failed parsing ",xppe);
  }
catch (  IOException ioe) {
    Slog.w(LOG_TAG,"Failed parsing ",ioe);
  }
catch (  IndexOutOfBoundsException iobe) {
    Slog.w(LOG_TAG,"Failed parsing ",iobe);
  }
 finally {
    IoUtils.closeQuietly(in);
  }
  return Collections.emptyList();
}
