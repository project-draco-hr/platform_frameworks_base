{
  int type;
  if (parent instanceof ViewGroup) {
    final TypedArray ta=context.obtainStyledAttributes(attrs,ATTRS_THEME);
    final int themeResId=ta.getResourceId(0,0);
    final boolean hasThemeOverride=themeResId != 0;
    if (hasThemeOverride) {
      context=new ContextThemeWrapper(context,themeResId);
    }
    ta.recycle();
    int layout=attrs.getAttributeResourceValue(null,ATTR_LAYOUT,0);
    if (layout == 0) {
      final String value=attrs.getAttributeValue(null,ATTR_LAYOUT);
      if (value == null || value.length() <= 0) {
        throw new InflateException("You must specify a layout in the" + " include tag: <include layout=\"@layout/layoutID\" />");
      }
      layout=context.getResources().getIdentifier(value.substring(1),null,null);
    }
    if (mTempValue == null) {
      mTempValue=new TypedValue();
    }
    if (layout != 0 && context.getTheme().resolveAttribute(layout,mTempValue,true)) {
      layout=mTempValue.resourceId;
    }
    if (layout == 0) {
      final String value=attrs.getAttributeValue(null,ATTR_LAYOUT);
      throw new InflateException("You must specify a valid layout " + "reference. The layout ID " + value + " is not valid.");
    }
 else {
      final XmlResourceParser childParser=context.getResources().getLayout(layout);
      try {
        final AttributeSet childAttrs=Xml.asAttributeSet(childParser);
        while ((type=childParser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
        }
        if (type != XmlPullParser.START_TAG) {
          throw new InflateException(childParser.getPositionDescription() + ": No start tag found!");
        }
        final String childName=childParser.getName();
        if (TAG_MERGE.equals(childName)) {
          rInflate(childParser,parent,context,childAttrs,false);
        }
 else {
          final View view=createViewFromTag(parent,childName,context,childAttrs,hasThemeOverride);
          final ViewGroup group=(ViewGroup)parent;
          final TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.Include);
          final int id=a.getResourceId(R.styleable.Include_id,View.NO_ID);
          final int visibility=a.getInt(R.styleable.Include_visibility,-1);
          final boolean hasWidth=a.hasValue(R.styleable.Include_layout_width);
          final boolean hasHeight=a.hasValue(R.styleable.Include_layout_height);
          a.recycle();
          ViewGroup.LayoutParams params=null;
          if (hasWidth && hasHeight) {
            try {
              params=group.generateLayoutParams(attrs);
            }
 catch (            RuntimeException e) {
            }
          }
          if (params == null) {
            params=group.generateLayoutParams(childAttrs);
          }
          view.setLayoutParams(params);
          rInflateChildren(childParser,view,childAttrs,true);
          if (id != View.NO_ID) {
            view.setId(id);
          }
switch (visibility) {
case 0:
            view.setVisibility(View.VISIBLE);
          break;
case 1:
        view.setVisibility(View.INVISIBLE);
      break;
case 2:
    view.setVisibility(View.GONE);
  break;
}
group.addView(view);
}
}
  finally {
childParser.close();
}
}
}
 else {
throw new InflateException("<include /> can only be used inside of a ViewGroup");
}
LayoutInflater.consumeChildElements(parser);
}
