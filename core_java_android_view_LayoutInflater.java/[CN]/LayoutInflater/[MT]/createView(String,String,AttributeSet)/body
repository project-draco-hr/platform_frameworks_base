{
  Constructor<? extends View> constructor=sConstructorMap.get(name);
  if (constructor != null && !verifyClassLoader(constructor)) {
    constructor=null;
    sConstructorMap.remove(name);
  }
  Class<? extends View> clazz=null;
  try {
    Trace.traceBegin(Trace.TRACE_TAG_VIEW,name);
    if (constructor == null) {
      clazz=mContext.getClassLoader().loadClass(prefix != null ? (prefix + name) : name).asSubclass(View.class);
      if (mFilter != null && clazz != null) {
        boolean allowed=mFilter.onLoadClass(clazz);
        if (!allowed) {
          failNotAllowed(name,prefix,attrs);
        }
      }
      constructor=clazz.getConstructor(mConstructorSignature);
      constructor.setAccessible(true);
      sConstructorMap.put(name,constructor);
    }
 else {
      if (mFilter != null) {
        Boolean allowedState=mFilterMap.get(name);
        if (allowedState == null) {
          clazz=mContext.getClassLoader().loadClass(prefix != null ? (prefix + name) : name).asSubclass(View.class);
          boolean allowed=clazz != null && mFilter.onLoadClass(clazz);
          mFilterMap.put(name,allowed);
          if (!allowed) {
            failNotAllowed(name,prefix,attrs);
          }
        }
 else         if (allowedState.equals(Boolean.FALSE)) {
          failNotAllowed(name,prefix,attrs);
        }
      }
    }
    Object[] args=mConstructorArgs;
    args[1]=attrs;
    final View view=constructor.newInstance(args);
    if (view instanceof ViewStub) {
      final ViewStub viewStub=(ViewStub)view;
      viewStub.setLayoutInflater(cloneInContext((Context)args[0]));
    }
    return view;
  }
 catch (  NoSuchMethodException e) {
    final InflateException ie=new InflateException(attrs.getPositionDescription() + ": Error inflating class " + (prefix != null ? (prefix + name) : name),e);
    ie.setStackTrace(EMPTY_STACK_TRACE);
    throw ie;
  }
catch (  ClassCastException e) {
    final InflateException ie=new InflateException(attrs.getPositionDescription() + ": Class is not a View " + (prefix != null ? (prefix + name) : name),e);
    ie.setStackTrace(EMPTY_STACK_TRACE);
    throw ie;
  }
catch (  ClassNotFoundException e) {
    throw e;
  }
catch (  Exception e) {
    final InflateException ie=new InflateException(attrs.getPositionDescription() + ": Error inflating class " + (clazz == null ? "<unknown>" : clazz.getName()),e);
    ie.setStackTrace(EMPTY_STACK_TRACE);
    throw ie;
  }
 finally {
    Trace.traceEnd(Trace.TRACE_TAG_VIEW);
  }
}
