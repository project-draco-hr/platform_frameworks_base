{
  int type;
  if (parent instanceof ViewGroup) {
    final int layout=attrs.getAttributeResourceValue(null,"layout",0);
    if (layout == 0) {
      final String value=attrs.getAttributeValue(null,"layout");
      if (value == null) {
        throw new InflateException("You must specifiy a layout in the" + " include tag: <include layout=\"@layout/layoutID\" />");
      }
 else {
        throw new InflateException("You must specifiy a valid layout " + "reference. The layout ID " + value + " is not valid.");
      }
    }
 else {
      final XmlResourceParser childParser=getContext().getResources().getLayout(layout);
      try {
        final AttributeSet childAttrs=Xml.asAttributeSet(childParser);
        while ((type=childParser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
        }
        if (type != XmlPullParser.START_TAG) {
          throw new InflateException(childParser.getPositionDescription() + ": No start tag found!");
        }
        final String childName=childParser.getName();
        if (TAG_MERGE.equals(childName)) {
          rInflate(childParser,parent,childAttrs,false);
        }
 else {
          final View view=createViewFromTag(parent,childName,childAttrs);
          final ViewGroup group=(ViewGroup)parent;
          TypedArray ta=getContext().obtainStyledAttributes(attrs,R.styleable.ViewGroup_Layout);
          boolean definesBothWidthAndHeight=ta.hasValue(R.styleable.ViewGroup_Layout_layout_width) && ta.hasValue(R.styleable.ViewGroup_Layout_layout_height);
          AttributeSet attributes=definesBothWidthAndHeight ? attrs : childAttrs;
          view.setLayoutParams(group.generateLayoutParams(attributes));
          ta.recycle();
          rInflate(childParser,view,childAttrs,true);
          TypedArray a=mContext.obtainStyledAttributes(attrs,com.android.internal.R.styleable.View,0,0);
          int id=a.getResourceId(com.android.internal.R.styleable.View_id,View.NO_ID);
          int visibility=a.getInt(com.android.internal.R.styleable.View_visibility,-1);
          a.recycle();
          if (id != View.NO_ID) {
            view.setId(id);
          }
switch (visibility) {
case 0:
            view.setVisibility(View.VISIBLE);
          break;
case 1:
        view.setVisibility(View.INVISIBLE);
      break;
case 2:
    view.setVisibility(View.GONE);
  break;
}
group.addView(view);
}
}
  finally {
childParser.close();
}
}
}
 else {
throw new InflateException("<include /> can only be used inside of a ViewGroup");
}
final int currentDepth=parser.getDepth();
while (((type=parser.next()) != XmlPullParser.END_TAG || parser.getDepth() > currentDepth) && type != XmlPullParser.END_DOCUMENT) {
}
}
