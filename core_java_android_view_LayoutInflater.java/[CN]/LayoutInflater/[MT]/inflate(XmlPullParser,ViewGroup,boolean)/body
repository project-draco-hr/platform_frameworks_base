{
synchronized (mConstructorArgs) {
    final AttributeSet attrs=Xml.asAttributeSet(parser);
    Context lastContext=(Context)mConstructorArgs[0];
    mConstructorArgs[0]=mContext;
    View result=root;
    try {
      int type;
      while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
      }
      if (type != XmlPullParser.START_TAG) {
        throw new InflateException(parser.getPositionDescription() + ": No start tag found!");
      }
      final String name=parser.getName();
      if (DEBUG) {
        System.out.println("**************************");
        System.out.println("Creating root view: " + name);
        System.out.println("**************************");
      }
      if (TAG_MERGE.equals(name)) {
        if (root == null || !attachToRoot) {
          throw new InflateException("<merge /> can be used only with a valid " + "ViewGroup root and attachToRoot=true");
        }
        rInflate(parser,root,attrs,false);
      }
 else {
        View temp=createViewFromTag(root,name,attrs);
        ViewGroup.LayoutParams params=null;
        if (root != null) {
          if (DEBUG) {
            System.out.println("Creating params from root: " + root);
          }
          params=root.generateLayoutParams(attrs);
          if (!attachToRoot) {
            temp.setLayoutParams(params);
          }
        }
        if (DEBUG) {
          System.out.println("-----> start inflating children");
        }
        rInflate(parser,temp,attrs,true);
        if (DEBUG) {
          System.out.println("-----> done inflating children");
        }
        if (root != null && attachToRoot) {
          root.addView(temp,params);
        }
        if (root == null || !attachToRoot) {
          result=temp;
        }
      }
    }
 catch (    XmlPullParserException e) {
      InflateException ex=new InflateException(e.getMessage());
      ex.initCause(e);
      throw ex;
    }
catch (    IOException e) {
      InflateException ex=new InflateException(parser.getPositionDescription() + ": " + e.getMessage());
      ex.initCause(e);
      throw ex;
    }
 finally {
      mConstructorArgs[0]=lastContext;
      mConstructorArgs[1]=null;
    }
    return result;
  }
}
