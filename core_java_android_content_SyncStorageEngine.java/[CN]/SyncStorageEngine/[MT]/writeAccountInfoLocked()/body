{
  if (DEBUG_FILE)   Log.v(TAG,"Writing new " + mAccountInfoFile.getBaseFile());
  FileOutputStream fos=null;
  try {
    fos=mAccountInfoFile.startWrite();
    XmlSerializer out=new FastXmlSerializer();
    out.setOutput(fos,"utf-8");
    out.startDocument(null,true);
    out.setFeature("http://xmlpull.org/v1/doc/features.html#indent-output",true);
    out.startTag(null,"accounts");
    out.attribute(null,"version",Integer.toString(ACCOUNTS_VERSION));
    out.attribute(null,"nextAuthorityId",Integer.toString(mNextAuthorityId));
    if (!mMasterSyncAutomatically) {
      out.attribute(null,"listen-for-tickles","false");
    }
    final int N=mAuthorities.size();
    for (int i=0; i < N; i++) {
      AuthorityInfo authority=mAuthorities.valueAt(i);
      out.startTag(null,"authority");
      out.attribute(null,"id",Integer.toString(authority.ident));
      out.attribute(null,"account",authority.account.name);
      out.attribute(null,"type",authority.account.type);
      out.attribute(null,"authority",authority.authority);
      out.attribute(null,"enabled",Boolean.toString(authority.enabled));
      if (authority.syncable < 0) {
        out.attribute(null,"syncable","unknown");
      }
 else {
        out.attribute(null,"syncable",Boolean.toString(authority.syncable != 0));
      }
      for (      Pair<Bundle,Long> periodicSync : authority.periodicSyncs) {
        out.startTag(null,"periodicSync");
        out.attribute(null,"period",Long.toString(periodicSync.second));
        final Bundle extras=periodicSync.first;
        for (        String key : extras.keySet()) {
          out.startTag(null,"extra");
          out.attribute(null,"name",key);
          final Object value=extras.get(key);
          if (value instanceof Long) {
            out.attribute(null,"type","long");
            out.attribute(null,"value1",value.toString());
          }
 else           if (value instanceof Integer) {
            out.attribute(null,"type","integer");
            out.attribute(null,"value1",value.toString());
          }
 else           if (value instanceof Boolean) {
            out.attribute(null,"type","boolean");
            out.attribute(null,"value1",value.toString());
          }
 else           if (value instanceof Float) {
            out.attribute(null,"type","float");
            out.attribute(null,"value1",value.toString());
          }
 else           if (value instanceof Double) {
            out.attribute(null,"type","double");
            out.attribute(null,"value1",value.toString());
          }
 else           if (value instanceof String) {
            out.attribute(null,"type","string");
            out.attribute(null,"value1",value.toString());
          }
 else           if (value instanceof Account) {
            out.attribute(null,"type","account");
            out.attribute(null,"value1",((Account)value).name);
            out.attribute(null,"value2",((Account)value).type);
          }
          out.endTag(null,"extra");
        }
        out.endTag(null,"periodicSync");
      }
      out.endTag(null,"authority");
    }
    out.endTag(null,"accounts");
    out.endDocument();
    mAccountInfoFile.finishWrite(fos);
  }
 catch (  java.io.IOException e1) {
    Log.w(TAG,"Error writing accounts",e1);
    if (fos != null) {
      mAccountInfoFile.failWrite(fos);
    }
  }
}
