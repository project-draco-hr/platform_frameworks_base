{
  SQLiteQueryBuilder qb=new SQLiteQueryBuilder();
  int match=sURLMatcher.match(url);
  String groupBy=null;
switch (match) {
case STATS:
    qb.setTables("stats");
  break;
case STATS_ID:
qb.setTables("stats");
qb.appendWhere("_id=");
qb.appendWhere(url.getPathSegments().get(1));
break;
case HISTORY:
qb.setTables("stats, history");
qb.setProjectionMap(HISTORY_PROJECTION_MAP);
qb.appendWhere("stats._id = history.stats_id");
break;
case ACTIVE:
qb.setTables("active");
qb.setProjectionMap(ACTIVE_PROJECTION_MAP);
qb.appendWhere("account is not null");
break;
case PENDING:
qb.setTables("pending");
qb.setProjectionMap(PENDING_PROJECTION_MAP);
groupBy="account, authority";
break;
case STATUS:
qb.setTables("stats, status");
qb.setProjectionMap(STATUS_PROJECTION_MAP);
qb.appendWhere("stats._id = status.stats_id");
break;
case HISTORY_ID:
qb.setTables("stats, history");
qb.setProjectionMap(HISTORY_PROJECTION_MAP);
qb.appendWhere("stats._id = history.stats_id");
qb.appendWhere("AND history._id=");
qb.appendWhere(url.getPathSegments().get(1));
break;
case SETTINGS:
qb.setTables("settings");
break;
default :
throw new IllegalArgumentException("Unknown URL " + url);
}
if (match == SETTINGS) {
mContext.enforceCallingOrSelfPermission(Manifest.permission.READ_SYNC_SETTINGS,"no permission to read the sync settings");
}
 else {
mContext.enforceCallingOrSelfPermission(Manifest.permission.READ_SYNC_STATS,"no permission to read the sync stats");
}
SQLiteDatabase db=mOpenHelper.getReadableDatabase();
Cursor c=qb.query(db,projectionIn,selection,selectionArgs,groupBy,null,sort);
c.setNotificationUri(mContext.getContentResolver(),url);
return c;
}
