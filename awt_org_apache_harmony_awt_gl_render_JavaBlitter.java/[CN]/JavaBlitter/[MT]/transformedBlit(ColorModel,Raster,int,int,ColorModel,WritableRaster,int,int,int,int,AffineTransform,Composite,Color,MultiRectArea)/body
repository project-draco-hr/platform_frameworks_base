{
  Rectangle srcBounds=new Rectangle(width,height);
  Rectangle dstBlitBounds=new Rectangle(dstX,dstY,srcR.getWidth(),srcR.getHeight());
  Rectangle transSrcBounds=getBounds2D(at,srcBounds).getBounds();
  Rectangle transDstBlitBounds=getBounds2D(at,dstBlitBounds).getBounds();
  int translateX=transDstBlitBounds.x - transSrcBounds.x;
  int translateY=transDstBlitBounds.y - transSrcBounds.y;
  AffineTransform inv=null;
  try {
    inv=at.createInverse();
  }
 catch (  NoninvertibleTransformException e) {
    return;
  }
  double[] m=new double[6];
  inv.getMatrix(m);
  int clipRects[];
  if (clip != null) {
    clipRects=clip.rect;
  }
 else {
    clipRects=new int[]{5,0,0,dstR.getWidth(),dstR.getHeight()};
  }
  int compType=0;
  int srcConstAlpha=0;
  int rule=0;
  int bgRGB=bgcolor == null ? 0 : bgcolor.getRGB();
  int srcRGB=0, dstRGB=0;
  Object srcVal=null, dstVal=null;
  if (comp instanceof AlphaComposite) {
    compType=AlphaCompositeMode;
    AlphaComposite ac=(AlphaComposite)comp;
    rule=ac.getRule();
    srcConstAlpha=(int)(ac.getAlpha() * 255 + 0.5f);
  }
 else   if (comp instanceof XORComposite) {
    compType=XORMode;
    XORComposite xor=(XORComposite)comp;
    bgRGB=xor.getXORColor().getRGB();
  }
  for (int i=1; i < clipRects[0]; i+=4) {
    Rectangle dstBounds=new Rectangle(clipRects[i],clipRects[i + 1],0,0);
    dstBounds.add(clipRects[i + 2] + 1,clipRects[i + 1]);
    dstBounds.add(clipRects[i + 2] + 1,clipRects[i + 3] + 1);
    dstBounds.add(clipRects[i],clipRects[i + 3] + 1);
    Rectangle bounds=dstBounds.intersection(transDstBlitBounds);
    int minSrcX=srcBounds.x;
    int minSrcY=srcBounds.y;
    int maxSrcX=minSrcX + srcBounds.width;
    int maxSrcY=minSrcY + srcBounds.height;
    int minX=bounds.x;
    int minY=bounds.y;
    int maxX=minX + bounds.width;
    int maxY=minY + bounds.height;
    int hx=(int)((m[0] * 256) + 0.5);
    int hy=(int)((m[1] * 256) + 0.5);
    int vx=(int)((m[2] * 256) + 0.5);
    int vy=(int)((m[3] * 256) + 0.5);
    int sx=(int)((m[4] + m[0] * (bounds.x - translateX) + m[2] * (bounds.y - translateY)) * 256 + 0.5);
    int sy=(int)((m[5] + m[1] * (bounds.x - translateX) + m[3] * (bounds.y - translateY)) * 256 + 0.5);
    vx-=hx * bounds.width;
    vy-=hy * bounds.width;
    for (int y=minY; y < maxY; y++) {
      for (int x=minX; x < maxX; x++) {
        int px=sx >> 8;
        int py=sy >> 8;
        if (px >= minSrcX && py >= minSrcY && px < maxSrcX && py < maxSrcY) {
switch (compType) {
case AlphaCompositeMode:
            srcVal=srcR.getDataElements(px,py,null);
          srcRGB=srcCM.getRGB(srcVal);
        if (bgcolor != null) {
          dstRGB=bgRGB;
        }
 else {
          dstVal=dstR.getDataElements(x,y,null);
          dstRGB=dstCM.getRGB(dstVal);
        }
      dstRGB=compose(srcRGB,srcCM.isAlphaPremultiplied(),dstRGB,dstCM.hasAlpha(),dstCM.isAlphaPremultiplied(),rule,srcConstAlpha);
    dstVal=dstCM.getDataElements(dstRGB,null);
  dstR.setDataElements(x,y,dstVal);
break;
case XORMode:
srcVal=srcR.getDataElements(px,py,null);
srcRGB=srcCM.getRGB(srcVal);
dstVal=dstR.getDataElements(x,y,null);
dstRGB=dstCM.getRGB(dstVal);
dstRGB=srcRGB ^ bgRGB;
dstRGB=0xff000000 | dstRGB;
dstVal=dstCM.getDataElements(dstRGB,null);
dstR.setDataElements(x,y,dstVal);
break;
default :
throw new IllegalArgumentException(Messages.getString("awt.37",comp.getClass()));
}
}
sx+=hx;
sy+=hy;
}
sx+=vx;
sy+=vy;
}
}
}
