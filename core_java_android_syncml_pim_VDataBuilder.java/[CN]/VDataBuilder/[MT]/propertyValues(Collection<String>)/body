{
  curPropNode.propValue_vector=values;
  curPropNode.propValue=listToString(values);
  if (curPropNode.paraMap.containsKey("ENCODING")) {
    if (curPropNode.paraMap.getAsString("ENCODING").equalsIgnoreCase("BASE64")) {
      curPropNode.propValue_byts=Base64.decodeBase64(curPropNode.propValue.replaceAll(" ","").replaceAll("\t","").replaceAll("\r\n","").getBytes());
    }
    if (curPropNode.paraMap.getAsString("ENCODING").equalsIgnoreCase("QUOTED-PRINTABLE")) {
      try {
        curPropNode.propValue_byts=QuotedPrintableCodec.decodeQuotedPrintable(curPropNode.propValue.replaceAll("= "," ").replaceAll("=\t","\t").getBytes());
        curPropNode.propValue=new String(curPropNode.propValue_byts);
      }
 catch (      Exception e) {
        System.out.println("=Decode quoted-printable exception.");
        e.printStackTrace();
      }
    }
  }
  curVNode.propList.add(curPropNode);
}
