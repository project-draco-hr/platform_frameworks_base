{
switch (msg.what) {
case MSG_SET_DEVICE_VOLUME:
    setDeviceVolume((VolumeStreamState)msg.obj,msg.arg1);
  break;
case MSG_SET_ALL_VOLUMES:
setAllVolumes((VolumeStreamState)msg.obj);
break;
case MSG_PERSIST_VOLUME:
persistVolume((VolumeStreamState)msg.obj,msg.arg1);
break;
case MSG_PERSIST_MASTER_VOLUME_MUTE:
if (mUseFixedVolume) {
return;
}
Settings.System.putIntForUser(mContentResolver,Settings.System.VOLUME_MASTER_MUTE,msg.arg1,msg.arg2);
break;
case MSG_PERSIST_RINGER_MODE:
persistRingerMode(getRingerModeInternal());
break;
case MSG_AUDIO_SERVER_DIED:
onAudioServerDied();
break;
case MSG_UNLOAD_SOUND_EFFECTS:
onUnloadSoundEffects();
break;
case MSG_LOAD_SOUND_EFFECTS:
boolean loaded=onLoadSoundEffects();
if (msg.obj != null) {
LoadSoundEffectReply reply=(LoadSoundEffectReply)msg.obj;
synchronized (reply) {
reply.mStatus=loaded ? 0 : -1;
reply.notify();
}
}
break;
case MSG_PLAY_SOUND_EFFECT:
onPlaySoundEffect(msg.arg1,msg.arg2);
break;
case MSG_BTA2DP_DOCK_TIMEOUT:
synchronized (mConnectedDevices) {
makeA2dpDeviceUnavailableNow((String)msg.obj);
}
break;
case MSG_SET_FORCE_USE:
case MSG_SET_FORCE_BT_A2DP_USE:
setForceUse(msg.arg1,msg.arg2);
break;
case MSG_BT_HEADSET_CNCT_FAILED:
resetBluetoothSco();
break;
case MSG_SET_WIRED_DEVICE_CONNECTION_STATE:
{
WiredDeviceConnectionState connectState=(WiredDeviceConnectionState)msg.obj;
onSetWiredDeviceConnectionState(connectState.mType,connectState.mState,connectState.mAddress,connectState.mName,connectState.mCaller);
mAudioEventWakeLock.release();
}
break;
case MSG_SET_A2DP_SRC_CONNECTION_STATE:
onSetA2dpSourceConnectionState((BluetoothDevice)msg.obj,msg.arg1);
mAudioEventWakeLock.release();
break;
case MSG_SET_A2DP_SINK_CONNECTION_STATE:
onSetA2dpSinkConnectionState((BluetoothDevice)msg.obj,msg.arg1);
mAudioEventWakeLock.release();
break;
case MSG_REPORT_NEW_ROUTES:
{
int N=mRoutesObservers.beginBroadcast();
if (N > 0) {
AudioRoutesInfo routes;
synchronized (mCurAudioRoutes) {
routes=new AudioRoutesInfo(mCurAudioRoutes);
}
while (N > 0) {
N--;
IAudioRoutesObserver obs=mRoutesObservers.getBroadcastItem(N);
try {
obs.dispatchAudioRoutesChanged(routes);
}
 catch (RemoteException e) {
}
}
}
mRoutesObservers.finishBroadcast();
observeDevicesForStreams(-1);
break;
}
case MSG_CHECK_MUSIC_ACTIVE:
onCheckMusicActive((String)msg.obj);
break;
case MSG_BROADCAST_AUDIO_BECOMING_NOISY:
onSendBecomingNoisyIntent();
break;
case MSG_CONFIGURE_SAFE_MEDIA_VOLUME_FORCED:
case MSG_CONFIGURE_SAFE_MEDIA_VOLUME:
onConfigureSafeVolume((msg.what == MSG_CONFIGURE_SAFE_MEDIA_VOLUME_FORCED),(String)msg.obj);
break;
case MSG_PERSIST_SAFE_VOLUME_STATE:
onPersistSafeVolumeState(msg.arg1);
break;
case MSG_BROADCAST_BT_CONNECTION_STATE:
onBroadcastScoConnectionState(msg.arg1);
break;
case MSG_SYSTEM_READY:
onSystemReady();
break;
case MSG_INDICATE_SYSTEM_READY:
onIndicateSystemReady();
break;
case MSG_PERSIST_MUSIC_ACTIVE_MS:
final int musicActiveMs=msg.arg1;
Settings.Secure.putIntForUser(mContentResolver,Settings.Secure.UNSAFE_VOLUME_MUSIC_ACTIVE_MS,musicActiveMs,UserHandle.USER_CURRENT);
break;
case MSG_PERSIST_MICROPHONE_MUTE:
Settings.System.putIntForUser(mContentResolver,Settings.System.MICROPHONE_MUTE,msg.arg1,msg.arg2);
break;
case MSG_UNMUTE_STREAM:
onUnmuteStream(msg.arg1,msg.arg2);
break;
case MSG_DYN_POLICY_MIX_STATE_UPDATE:
onDynPolicyMixStateUpdate((String)msg.obj,msg.arg1);
break;
case MSG_PERSIST_MASTER_MONO:
Settings.System.putIntForUser(mContentResolver,Settings.System.MASTER_MONO,msg.arg1,msg.arg2);
break;
}
}
