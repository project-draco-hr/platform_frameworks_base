{
  mContext=context;
  mContentResolver=context.getContentResolver();
  mAppOps=(AppOpsManager)context.getSystemService(Context.APP_OPS_SERVICE);
  mPlatformType=AudioSystem.getPlatformType(context);
  mUserManagerInternal=LocalServices.getService(UserManagerInternal.class);
  PowerManager pm=(PowerManager)context.getSystemService(Context.POWER_SERVICE);
  mAudioEventWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,"handleAudioEvent");
  Vibrator vibrator=(Vibrator)context.getSystemService(Context.VIBRATOR_SERVICE);
  mHasVibrator=vibrator == null ? false : vibrator.hasVibrator();
  int maxVolume=SystemProperties.getInt("ro.config.vc_call_vol_steps",MAX_STREAM_VOLUME[AudioSystem.STREAM_VOICE_CALL]);
  if (maxVolume != MAX_STREAM_VOLUME[AudioSystem.STREAM_VOICE_CALL]) {
    MAX_STREAM_VOLUME[AudioSystem.STREAM_VOICE_CALL]=maxVolume;
    AudioSystem.DEFAULT_STREAM_VOLUME[AudioSystem.STREAM_VOICE_CALL]=(maxVolume * 3) / 4;
  }
  maxVolume=SystemProperties.getInt("ro.config.media_vol_steps",MAX_STREAM_VOLUME[AudioSystem.STREAM_MUSIC]);
  if (maxVolume != MAX_STREAM_VOLUME[AudioSystem.STREAM_MUSIC]) {
    MAX_STREAM_VOLUME[AudioSystem.STREAM_MUSIC]=maxVolume;
    AudioSystem.DEFAULT_STREAM_VOLUME[AudioSystem.STREAM_MUSIC]=(maxVolume * 3) / 4;
  }
  sSoundEffectVolumeDb=context.getResources().getInteger(com.android.internal.R.integer.config_soundEffectVolumeDb);
  mForcedUseForComm=AudioSystem.FORCE_NONE;
  createAudioSystemThread();
  AudioSystem.setErrorCallback(mAudioSystemCallback);
  boolean cameraSoundForced=readCameraSoundForced();
  mCameraSoundForced=new Boolean(cameraSoundForced);
  sendMsg(mAudioHandler,MSG_SET_FORCE_USE,SENDMSG_QUEUE,AudioSystem.FOR_SYSTEM,cameraSoundForced ? AudioSystem.FORCE_SYSTEM_ENFORCED : AudioSystem.FORCE_NONE,null,0);
  mSafeMediaVolumeState=new Integer(Settings.Global.getInt(mContentResolver,Settings.Global.AUDIO_SAFE_VOLUME_STATE,SAFE_MEDIA_VOLUME_NOT_CONFIGURED));
  mSafeMediaVolumeIndex=mContext.getResources().getInteger(com.android.internal.R.integer.config_safe_media_volume_index) * 10;
  mUseFixedVolume=mContext.getResources().getBoolean(com.android.internal.R.bool.config_useFixedVolume);
  updateStreamVolumeAlias(false,TAG);
  readPersistedSettings();
  mSettingsObserver=new SettingsObserver();
  createStreamStates();
  mMediaFocusControl=new MediaFocusControl(mAudioHandler.getLooper(),mContext,mVolumeController,this);
  readAndSetLowRamDevice();
  mRingerModeMutedStreams=0;
  setRingerModeInt(getRingerModeInternal(),false);
  IntentFilter intentFilter=new IntentFilter(BluetoothHeadset.ACTION_AUDIO_STATE_CHANGED);
  intentFilter.addAction(BluetoothHeadset.ACTION_CONNECTION_STATE_CHANGED);
  intentFilter.addAction(Intent.ACTION_DOCK_EVENT);
  intentFilter.addAction(Intent.ACTION_SCREEN_ON);
  intentFilter.addAction(Intent.ACTION_SCREEN_OFF);
  intentFilter.addAction(Intent.ACTION_USER_SWITCHED);
  intentFilter.addAction(Intent.ACTION_USER_BACKGROUND);
  intentFilter.addAction(Intent.ACTION_USER_FOREGROUND);
  intentFilter.addAction(UsbManager.ACTION_USB_DEVICE_ATTACHED);
  intentFilter.addAction(Intent.ACTION_CONFIGURATION_CHANGED);
  mMonitorOrientation=SystemProperties.getBoolean("ro.audio.monitorOrientation",false);
  if (mMonitorOrientation) {
    Log.v(TAG,"monitoring device orientation");
    setOrientationForAudioSystem();
  }
  mMonitorRotation=SystemProperties.getBoolean("ro.audio.monitorRotation",false);
  if (mMonitorRotation) {
    RotationHelper.init(mContext,mAudioHandler);
  }
  context.registerReceiverAsUser(mReceiver,UserHandle.ALL,intentFilter,null,null);
  LocalServices.addService(AudioManagerInternal.class,new AudioServiceInternal());
  mUserManagerInternal.addUserRestrictionsListener(mUserRestrictionsListener);
}
