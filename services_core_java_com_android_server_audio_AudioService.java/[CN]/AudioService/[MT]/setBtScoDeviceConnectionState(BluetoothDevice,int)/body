{
  if (btDevice == null) {
    return;
  }
  String address=btDevice.getAddress();
  BluetoothClass btClass=btDevice.getBluetoothClass();
  int outDevice=AudioSystem.DEVICE_OUT_BLUETOOTH_SCO;
  int inDevice=AudioSystem.DEVICE_IN_BLUETOOTH_SCO_HEADSET;
  if (btClass != null) {
switch (btClass.getDeviceClass()) {
case BluetoothClass.Device.AUDIO_VIDEO_WEARABLE_HEADSET:
case BluetoothClass.Device.AUDIO_VIDEO_HANDSFREE:
      outDevice=AudioSystem.DEVICE_OUT_BLUETOOTH_SCO_HEADSET;
    break;
case BluetoothClass.Device.AUDIO_VIDEO_CAR_AUDIO:
  outDevice=AudioSystem.DEVICE_OUT_BLUETOOTH_SCO_CARKIT;
break;
}
}
if (!BluetoothAdapter.checkBluetoothAddress(address)) {
address="";
}
boolean connected=(state == BluetoothProfile.STATE_CONNECTED);
String btDeviceName=btDevice.getName();
boolean success=handleDeviceConnection(connected,outDevice,address,btDeviceName) && handleDeviceConnection(connected,inDevice,address,btDeviceName);
if (!success) {
return;
}
if ((state == BluetoothProfile.STATE_DISCONNECTED || state == BluetoothProfile.STATE_DISCONNECTING) && mBluetoothHeadset != null && mBluetoothHeadset.getAudioState(btDevice) == BluetoothHeadset.STATE_AUDIO_CONNECTED) {
Log.w(TAG,"SCO connected through another device, returning");
return;
}
synchronized (mScoClients) {
if (connected) {
mBluetoothHeadsetDevice=btDevice;
}
 else {
mBluetoothHeadsetDevice=null;
resetBluetoothSco();
}
}
}
