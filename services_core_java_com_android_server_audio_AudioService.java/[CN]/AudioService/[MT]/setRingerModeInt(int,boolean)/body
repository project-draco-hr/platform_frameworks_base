{
  final boolean change;
synchronized (mSettingsLock) {
    change=mRingerMode != ringerMode;
    mRingerMode=ringerMode;
  }
  int numStreamTypes=AudioSystem.getNumStreamTypes();
  final boolean ringerModeMute=ringerMode == AudioManager.RINGER_MODE_VIBRATE || ringerMode == AudioManager.RINGER_MODE_SILENT;
  for (int streamType=numStreamTypes - 1; streamType >= 0; streamType--) {
    final boolean isMuted=isStreamMutedByRingerMode(streamType);
    final boolean shouldMute=ringerModeMute && isStreamAffectedByRingerMode(streamType);
    if (isMuted == shouldMute)     continue;
    if (!shouldMute) {
      if ((isPlatformVoice() || mHasVibrator) && mStreamVolumeAlias[streamType] == AudioSystem.STREAM_RING) {
synchronized (VolumeStreamState.class) {
          SparseIntArray indexMap=mStreamStates[streamType].mIndexMap;
          for (int i=0; i < indexMap.size(); i++) {
            int device=indexMap.keyAt(i);
            int value=indexMap.valueAt(i);
            if (value == 0) {
              indexMap.put(device,10);
            }
          }
          final int device=getDeviceForStream(streamType);
          sendMsg(mAudioHandler,MSG_PERSIST_VOLUME,SENDMSG_QUEUE,device,0,mStreamStates[streamType],PERSIST_DELAY);
        }
      }
      mStreamStates[streamType].mute(false);
      mRingerModeMutedStreams&=~(1 << streamType);
    }
 else {
      mStreamStates[streamType].mute(true);
      mRingerModeMutedStreams|=(1 << streamType);
    }
  }
  if (persist) {
    sendMsg(mAudioHandler,MSG_PERSIST_RINGER_MODE,SENDMSG_REPLACE,0,0,null,PERSIST_DELAY);
  }
  if (change) {
    broadcastRingerMode(AudioManager.INTERNAL_RINGER_MODE_CHANGED_ACTION,ringerMode);
  }
}
