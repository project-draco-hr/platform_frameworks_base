{
  if (!mSystemReady || (AudioSystem.checkAudioFlinger() != AudioSystem.AUDIO_STATUS_OK)) {
    Log.e(TAG,"Audioserver died.");
    sendMsg(mAudioHandler,MSG_AUDIO_SERVER_DIED,SENDMSG_NOOP,0,0,null,500);
    return;
  }
  Log.e(TAG,"Audioserver started.");
  AudioSystem.setParameters("restarting=true");
  readAndSetLowRamDevice();
synchronized (mConnectedDevices) {
    for (int i=0; i < mConnectedDevices.size(); i++) {
      DeviceListSpec spec=mConnectedDevices.valueAt(i);
      AudioSystem.setDeviceConnectionState(spec.mDeviceType,AudioSystem.DEVICE_STATE_AVAILABLE,spec.mDeviceAddress,spec.mDeviceName);
    }
  }
  AudioSystem.setPhoneState(mMode);
  AudioSystem.setForceUse(AudioSystem.FOR_COMMUNICATION,mForcedUseForComm);
  AudioSystem.setForceUse(AudioSystem.FOR_RECORD,mForcedUseForComm);
  AudioSystem.setForceUse(AudioSystem.FOR_SYSTEM,mCameraSoundForced ? AudioSystem.FORCE_SYSTEM_ENFORCED : AudioSystem.FORCE_NONE);
  int numStreamTypes=AudioSystem.getNumStreamTypes();
  for (int streamType=numStreamTypes - 1; streamType >= 0; streamType--) {
    VolumeStreamState streamState=mStreamStates[streamType];
    AudioSystem.initStreamVolume(streamType,streamState.mIndexMin / 10,streamState.mIndexMax / 10);
    streamState.applyAllVolumes();
  }
  updateMasterMono(mContentResolver);
  setRingerModeInt(getRingerModeInternal(),false);
  if (mMonitorOrientation) {
    setOrientationForAudioSystem();
  }
  if (mMonitorRotation) {
    RotationHelper.updateOrientation();
  }
synchronized (mBluetoothA2dpEnabledLock) {
    AudioSystem.setForceUse(AudioSystem.FOR_MEDIA,mBluetoothA2dpEnabled ? AudioSystem.FORCE_NONE : AudioSystem.FORCE_NO_BT_A2DP);
  }
synchronized (mSettingsLock) {
    AudioSystem.setForceUse(AudioSystem.FOR_DOCK,mDockAudioMediaEnabled ? AudioSystem.FORCE_ANALOG_DOCK : AudioSystem.FORCE_NONE);
  }
  if (mHdmiManager != null) {
synchronized (mHdmiManager) {
      if (mHdmiTvClient != null) {
        setHdmiSystemAudioSupported(mHdmiSystemAudioSupported);
      }
    }
  }
synchronized (mAudioPolicies) {
    for (    AudioPolicyProxy policy : mAudioPolicies.values()) {
      policy.connectMixes();
    }
  }
  onIndicateSystemReady();
  AudioSystem.setParameters("restarting=false");
}
