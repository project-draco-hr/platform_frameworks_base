{
  AsyncResult ar;
  AdnRecord adn;
  byte data[];
  boolean isRecordLoadResponse=false;
  try {
switch (msg.what) {
case EVENT_SIM_READY:
      onSimReady();
    break;
case EVENT_RADIO_OFF_OR_NOT_AVAILABLE:
  onRadioOffOrNotAvailable();
break;
case EVENT_GET_IMSI_DONE:
isRecordLoadResponse=true;
ar=(AsyncResult)msg.obj;
if (ar.exception != null) {
Log.e(LOG_TAG,"Exception querying IMSI, Exception:" + ar.exception);
break;
}
imsi=(String)ar.result;
if (imsi != null && (imsi.length() < 6 || imsi.length() > 15)) {
Log.e(LOG_TAG,"invalid IMSI " + imsi);
imsi=null;
}
Log.d(LOG_TAG,"IMSI: " + imsi.substring(0,6) + "xxxxxxx");
if (((mncLength == UNKNOWN) || (mncLength == 2)) && ((imsi != null) && (imsi.length() >= 6))) {
String mccmncCode=imsi.substring(0,6);
for (String mccmnc : MCCMNC_CODES_HAVING_3DIGITS_MNC) {
if (mccmnc.equals(mccmncCode)) {
mncLength=3;
break;
}
}
}
if (mncLength == UNKNOWN) {
try {
int mcc=Integer.parseInt(imsi.substring(0,3));
mncLength=MccTable.smallestDigitsMccForMnc(mcc);
}
 catch (NumberFormatException e) {
mncLength=UNKNOWN;
Log.e(LOG_TAG,"SIMRecords: Corrupt IMSI!");
}
}
if (mncLength != UNKNOWN && mncLength != UNINITIALIZED) {
MccTable.updateMccMncConfiguration(phone,imsi.substring(0,3 + mncLength));
}
((GSMPhone)phone).mSimCard.broadcastIccStateChangedIntent(SimCard.INTENT_VALUE_ICC_IMSI,null);
break;
case EVENT_GET_MBI_DONE:
boolean isValidMbdn;
isRecordLoadResponse=true;
ar=(AsyncResult)msg.obj;
data=(byte[])ar.result;
isValidMbdn=false;
if (ar.exception == null) {
Log.d(LOG_TAG,"EF_MBI: " + IccUtils.bytesToHexString(data));
mailboxIndex=(int)data[0] & 0xff;
if (mailboxIndex != 0 && mailboxIndex != 0xff) {
Log.d(LOG_TAG,"Got valid mailbox number for MBDN");
isValidMbdn=true;
}
}
recordsToLoad+=1;
if (isValidMbdn) {
new AdnRecordLoader(phone).loadFromEF(EF_MBDN,EF_EXT6,mailboxIndex,obtainMessage(EVENT_GET_MBDN_DONE));
}
 else {
new AdnRecordLoader(phone).loadFromEF(EF_MAILBOX_CPHS,EF_EXT1,1,obtainMessage(EVENT_GET_CPHS_MAILBOX_DONE));
}
break;
case EVENT_GET_CPHS_MAILBOX_DONE:
case EVENT_GET_MBDN_DONE:
voiceMailNum=null;
voiceMailTag=null;
isRecordLoadResponse=true;
ar=(AsyncResult)msg.obj;
if (ar.exception != null) {
Log.d(LOG_TAG,"Invalid or missing EF" + ((msg.what == EVENT_GET_CPHS_MAILBOX_DONE) ? "[MAILBOX]" : "[MBDN]"));
if (msg.what == EVENT_GET_MBDN_DONE) {
recordsToLoad+=1;
new AdnRecordLoader(phone).loadFromEF(EF_MAILBOX_CPHS,EF_EXT1,1,obtainMessage(EVENT_GET_CPHS_MAILBOX_DONE));
}
break;
}
adn=(AdnRecord)ar.result;
Log.d(LOG_TAG,"VM: " + adn + ((msg.what == EVENT_GET_CPHS_MAILBOX_DONE) ? " EF[MAILBOX]" : " EF[MBDN]"));
if (adn.isEmpty() && msg.what == EVENT_GET_MBDN_DONE) {
recordsToLoad+=1;
new AdnRecordLoader(phone).loadFromEF(EF_MAILBOX_CPHS,EF_EXT1,1,obtainMessage(EVENT_GET_CPHS_MAILBOX_DONE));
break;
}
voiceMailNum=adn.getNumber();
voiceMailTag=adn.getAlphaTag();
break;
case EVENT_GET_MSISDN_DONE:
isRecordLoadResponse=true;
ar=(AsyncResult)msg.obj;
if (ar.exception != null) {
Log.d(LOG_TAG,"Invalid or missing EF[MSISDN]");
break;
}
adn=(AdnRecord)ar.result;
msisdn=adn.getNumber();
msisdnTag=adn.getAlphaTag();
Log.d(LOG_TAG,"MSISDN: " + "xxxxxxx");
break;
case EVENT_SET_MSISDN_DONE:
isRecordLoadResponse=false;
ar=(AsyncResult)msg.obj;
if (ar.userObj != null) {
AsyncResult.forMessage(((Message)ar.userObj)).exception=ar.exception;
((Message)ar.userObj).sendToTarget();
}
break;
case EVENT_GET_MWIS_DONE:
isRecordLoadResponse=true;
ar=(AsyncResult)msg.obj;
data=(byte[])ar.result;
if (ar.exception != null) {
break;
}
Log.d(LOG_TAG,"EF_MWIS: " + IccUtils.bytesToHexString(data));
efMWIS=data;
if ((data[0] & 0xff) == 0xff) {
Log.d(LOG_TAG,"SIMRecords: Uninitialized record MWIS");
break;
}
boolean voiceMailWaiting=((data[0] & 0x01) != 0);
countVoiceMessages=data[1] & 0xff;
if (voiceMailWaiting && countVoiceMessages == 0) {
countVoiceMessages=-1;
}
((GSMPhone)phone).notifyMessageWaitingIndicator();
break;
case EVENT_GET_VOICE_MAIL_INDICATOR_CPHS_DONE:
isRecordLoadResponse=true;
ar=(AsyncResult)msg.obj;
data=(byte[])ar.result;
if (ar.exception != null) {
break;
}
efCPHS_MWI=data;
if (efMWIS == null) {
int indicator=(int)(data[0] & 0xf);
if (indicator == 0xA) {
countVoiceMessages=-1;
}
 else if (indicator == 0x5) {
countVoiceMessages=0;
}
((GSMPhone)phone).notifyMessageWaitingIndicator();
}
break;
case EVENT_GET_ICCID_DONE:
isRecordLoadResponse=true;
ar=(AsyncResult)msg.obj;
data=(byte[])ar.result;
if (ar.exception != null) {
break;
}
iccid=IccUtils.bcdToString(data,0,data.length);
Log.d(LOG_TAG,"iccid: " + iccid);
break;
case EVENT_GET_AD_DONE:
try {
isRecordLoadResponse=true;
ar=(AsyncResult)msg.obj;
data=(byte[])ar.result;
if (ar.exception != null) {
break;
}
Log.d(LOG_TAG,"EF_AD: " + IccUtils.bytesToHexString(data));
if (data.length < 3) {
Log.d(LOG_TAG,"SIMRecords: Corrupt AD data on SIM");
break;
}
if (data.length == 3) {
Log.d(LOG_TAG,"SIMRecords: MNC length not present in EF_AD");
break;
}
mncLength=(int)data[3] & 0xf;
if (mncLength == 0xf) {
mncLength=UNKNOWN;
}
}
  finally {
if (((mncLength == UNINITIALIZED) || (mncLength == UNKNOWN) || (mncLength == 2)) && ((imsi != null) && (imsi.length() >= 6))) {
String mccmncCode=imsi.substring(0,6);
for (String mccmnc : MCCMNC_CODES_HAVING_3DIGITS_MNC) {
if (mccmnc.equals(mccmncCode)) {
mncLength=3;
break;
}
}
}
if (mncLength == UNKNOWN || mncLength == UNINITIALIZED) {
if (imsi != null) {
try {
int mcc=Integer.parseInt(imsi.substring(0,3));
mncLength=MccTable.smallestDigitsMccForMnc(mcc);
}
 catch (NumberFormatException e) {
mncLength=UNKNOWN;
Log.e(LOG_TAG,"SIMRecords: Corrupt IMSI!");
}
}
 else {
mncLength=UNKNOWN;
Log.d(LOG_TAG,"SIMRecords: MNC length not present in EF_AD");
}
}
if (imsi != null && mncLength != UNKNOWN) {
MccTable.updateMccMncConfiguration(phone,imsi.substring(0,3 + mncLength));
}
}
break;
case EVENT_GET_SPN_DONE:
isRecordLoadResponse=true;
ar=(AsyncResult)msg.obj;
getSpnFsm(false,ar);
break;
case EVENT_GET_CFF_DONE:
isRecordLoadResponse=true;
ar=(AsyncResult)msg.obj;
data=(byte[])ar.result;
if (ar.exception != null) {
break;
}
Log.d(LOG_TAG,"EF_CFF_CPHS: " + IccUtils.bytesToHexString(data));
mEfCff=data;
if (mEfCfis == null) {
callForwardingEnabled=((data[0] & CFF_LINE1_MASK) == CFF_UNCONDITIONAL_ACTIVE);
((GSMPhone)phone).notifyCallForwardingIndicator();
}
break;
case EVENT_GET_SPDI_DONE:
isRecordLoadResponse=true;
ar=(AsyncResult)msg.obj;
data=(byte[])ar.result;
if (ar.exception != null) {
break;
}
parseEfSpdi(data);
break;
case EVENT_UPDATE_DONE:
ar=(AsyncResult)msg.obj;
if (ar.exception != null) {
Log.i(LOG_TAG,"SIMRecords update failed",ar.exception);
}
break;
case EVENT_GET_PNN_DONE:
isRecordLoadResponse=true;
ar=(AsyncResult)msg.obj;
data=(byte[])ar.result;
if (ar.exception != null) {
break;
}
SimTlv tlv=new SimTlv(data,0,data.length);
for (; tlv.isValidObject(); tlv.nextObject()) {
if (tlv.getTag() == TAG_FULL_NETWORK_NAME) {
pnnHomeName=IccUtils.networkNameToString(tlv.getData(),0,tlv.getData().length);
break;
}
}
break;
case EVENT_GET_ALL_SMS_DONE:
isRecordLoadResponse=true;
ar=(AsyncResult)msg.obj;
if (ar.exception != null) break;
handleSmses((ArrayList)ar.result);
break;
case EVENT_MARK_SMS_READ_DONE:
Log.i("ENF","marked read: sms " + msg.arg1);
break;
case EVENT_SMS_ON_SIM:
isRecordLoadResponse=false;
ar=(AsyncResult)msg.obj;
int[] index=(int[])ar.result;
if (ar.exception != null || index.length != 1) {
Log.e(LOG_TAG,"[SIMRecords] Error on SMS_ON_SIM with exp " + ar.exception + " length "+ index.length);
}
 else {
Log.d(LOG_TAG,"READ EF_SMS RECORD index=" + index[0]);
phone.getIccFileHandler().loadEFLinearFixed(EF_SMS,index[0],obtainMessage(EVENT_GET_SMS_DONE));
}
break;
case EVENT_GET_SMS_DONE:
isRecordLoadResponse=false;
ar=(AsyncResult)msg.obj;
if (ar.exception == null) {
handleSms((byte[])ar.result);
}
 else {
Log.e(LOG_TAG,"[SIMRecords] Error on GET_SMS with exp " + ar.exception);
}
break;
case EVENT_GET_SST_DONE:
isRecordLoadResponse=true;
ar=(AsyncResult)msg.obj;
data=(byte[])ar.result;
if (ar.exception != null) {
break;
}
break;
case EVENT_GET_INFO_CPHS_DONE:
isRecordLoadResponse=true;
ar=(AsyncResult)msg.obj;
if (ar.exception != null) {
break;
}
mCphsInfo=(byte[])ar.result;
if (DBG) log("iCPHS: " + IccUtils.bytesToHexString(mCphsInfo));
break;
case EVENT_SET_MBDN_DONE:
isRecordLoadResponse=false;
ar=(AsyncResult)msg.obj;
if (ar.exception == null) {
voiceMailNum=newVoiceMailNum;
voiceMailTag=newVoiceMailTag;
}
if (isCphsMailboxEnabled()) {
adn=new AdnRecord(voiceMailTag,voiceMailNum);
Message onCphsCompleted=(Message)ar.userObj;
if (ar.exception == null && ar.userObj != null) {
AsyncResult.forMessage(((Message)ar.userObj)).exception=null;
((Message)ar.userObj).sendToTarget();
if (DBG) log("Callback with MBDN successful.");
onCphsCompleted=null;
}
new AdnRecordLoader(phone).updateEF(adn,EF_MAILBOX_CPHS,EF_EXT1,1,null,obtainMessage(EVENT_SET_CPHS_MAILBOX_DONE,onCphsCompleted));
}
 else {
if (ar.userObj != null) {
AsyncResult.forMessage(((Message)ar.userObj)).exception=ar.exception;
((Message)ar.userObj).sendToTarget();
}
}
break;
case EVENT_SET_CPHS_MAILBOX_DONE:
isRecordLoadResponse=false;
ar=(AsyncResult)msg.obj;
if (ar.exception == null) {
voiceMailNum=newVoiceMailNum;
voiceMailTag=newVoiceMailTag;
}
 else {
if (DBG) log("Set CPHS MailBox with exception: " + ar.exception);
}
if (ar.userObj != null) {
if (DBG) log("Callback with CPHS MB successful.");
AsyncResult.forMessage(((Message)ar.userObj)).exception=ar.exception;
((Message)ar.userObj).sendToTarget();
}
break;
case EVENT_SIM_REFRESH:
isRecordLoadResponse=false;
ar=(AsyncResult)msg.obj;
if (DBG) log("Sim REFRESH with exception: " + ar.exception);
if (ar.exception == null) {
handleSimRefresh((int[])(ar.result));
}
break;
case EVENT_GET_CFIS_DONE:
isRecordLoadResponse=true;
ar=(AsyncResult)msg.obj;
data=(byte[])ar.result;
if (ar.exception != null) {
break;
}
Log.d(LOG_TAG,"EF_CFIS: " + IccUtils.bytesToHexString(data));
mEfCfis=data;
callForwardingEnabled=((data[1] & 0x01) != 0);
((GSMPhone)phone).notifyCallForwardingIndicator();
break;
case EVENT_GET_CSP_CPHS_DONE:
isRecordLoadResponse=true;
ar=(AsyncResult)msg.obj;
if (ar.exception != null) {
Log.e(LOG_TAG,"Exception in fetching EF_CSP data " + ar.exception);
break;
}
data=(byte[])ar.result;
Log.i(LOG_TAG,"EF_CSP: " + IccUtils.bytesToHexString(data));
handleEfCspData(data);
break;
}
}
 catch (RuntimeException exc) {
Log.w(LOG_TAG,"Exception parsing SIM record",exc);
}
 finally {
if (isRecordLoadResponse) {
onRecordLoaded();
}
}
}
