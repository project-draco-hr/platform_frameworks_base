{
  if (!mSystemInterface.isFallbackLogicEnabled())   return;
  WebViewProviderInfo[] webviewProviders=mSystemInterface.getWebViewPackages();
  if (intent != null && (intent.getAction().equals(Intent.ACTION_PACKAGE_ADDED) || intent.getAction().equals(Intent.ACTION_PACKAGE_CHANGED))) {
    String changedPackage=null;
    for (    WebViewProviderInfo provider : webviewProviders) {
      String webviewPackage="package:" + provider.packageName;
      if (webviewPackage.equals(intent.getDataString())) {
        if (provider.availableByDefault) {
          changedPackage=provider.packageName;
        }
        break;
      }
    }
    if (changedPackage == null)     return;
  }
  WebViewProviderInfo fallbackProvider=getFallbackProvider(webviewProviders);
  if (fallbackProvider == null)   return;
  boolean existsValidNonFallbackProvider=existsValidNonFallbackProvider(webviewProviders);
  boolean isFallbackEnabled=false;
  try {
    isFallbackEnabled=isEnabledPackage(mSystemInterface.getPackageInfoForProvider(fallbackProvider));
  }
 catch (  NameNotFoundException e) {
  }
  if (existsValidNonFallbackProvider && (isFallbackEnabled || intent == null)) {
    mSystemInterface.uninstallAndDisablePackageForAllUsers(context,fallbackProvider.packageName);
  }
 else   if (!existsValidNonFallbackProvider && (!isFallbackEnabled || intent == null)) {
    mSystemInterface.enablePackageForAllUsers(context,fallbackProvider.packageName,true);
  }
}
