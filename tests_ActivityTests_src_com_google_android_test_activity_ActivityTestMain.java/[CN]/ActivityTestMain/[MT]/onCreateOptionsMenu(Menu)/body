{
  menu.add("Animate!").setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      AlertDialog.Builder builder=new AlertDialog.Builder(ActivityTestMain.this,R.style.SlowDialog);
      builder.setTitle("This is a title");
      builder.show();
      return true;
    }
  }
);
  menu.add("Bind!").setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      Intent intent=new Intent(ActivityTestMain.this,SingleUserService.class);
      ServiceConnection conn=new ServiceConnection(){
        @Override public void onServiceConnected(        ComponentName name,        IBinder service){
          Log.i(TAG,"Service connected " + name + " "+ service);
        }
        @Override public void onServiceDisconnected(        ComponentName name){
          Log.i(TAG,"Service disconnected " + name);
        }
      }
;
      if (bindService(intent,conn,Context.BIND_AUTO_CREATE)) {
        mConnections.add(conn);
      }
 else {
        Toast.makeText(ActivityTestMain.this,"Failed to bind",Toast.LENGTH_LONG).show();
      }
      return true;
    }
  }
);
  menu.add("Start!").setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      Intent intent=new Intent(ActivityTestMain.this,SingleUserService.class);
      startService(intent);
      return true;
    }
  }
);
  menu.add("Rebind Isolated!").setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      Intent intent=new Intent(ActivityTestMain.this,IsolatedService.class);
      ServiceConnection conn=new ServiceConnection(){
        @Override public void onServiceConnected(        ComponentName name,        IBinder service){
          Log.i(TAG,"Isolated service connected " + name + " "+ service);
        }
        @Override public void onServiceDisconnected(        ComponentName name){
          Log.i(TAG,"Isolated service disconnected " + name);
        }
      }
;
      if (mIsolatedConnection != null) {
        Log.i(TAG,"Unbinding existing service: " + mIsolatedConnection);
        unbindService(mIsolatedConnection);
        mIsolatedConnection=null;
      }
      Log.i(TAG,"Binding new service: " + conn);
      if (bindService(intent,conn,Context.BIND_AUTO_CREATE)) {
        mIsolatedConnection=conn;
      }
 else {
        Toast.makeText(ActivityTestMain.this,"Failed to bind",Toast.LENGTH_LONG).show();
      }
      return true;
    }
  }
);
  menu.add("Send!").setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      Intent intent=new Intent(ActivityTestMain.this,SingleUserReceiver.class);
      sendOrderedBroadcast(intent,null,new BroadcastResultReceiver(),null,Activity.RESULT_OK,null,null);
      return true;
    }
  }
);
  menu.add("Call!").setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      ContentProviderClient cpl=getContentResolver().acquireContentProviderClient(SingleUserProvider.AUTHORITY);
      Bundle res=null;
      try {
        res=cpl.call("getuser",null,null);
      }
 catch (      RemoteException e) {
      }
      int user=res != null ? res.getInt("user",-1) : -1;
      Toast.makeText(ActivityTestMain.this,"Provider executed as user " + (user >= 0 ? Integer.toString(user) : "unknown"),Toast.LENGTH_LONG).show();
      cpl.release();
      return true;
    }
  }
);
  menu.add("Send to user 0!").setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      Intent intent=new Intent(ActivityTestMain.this,UserTarget.class);
      sendOrderedBroadcastAsUser(intent,new UserHandle(0),null,new BroadcastResultReceiver(),null,Activity.RESULT_OK,null,null);
      return true;
    }
  }
);
  menu.add("Send to user " + mSecondUser + "!").setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      Intent intent=new Intent(ActivityTestMain.this,UserTarget.class);
      sendOrderedBroadcastAsUser(intent,new UserHandle(mSecondUser),null,new BroadcastResultReceiver(),null,Activity.RESULT_OK,null,null);
      return true;
    }
  }
);
  menu.add("Bind to user 0!").setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      Intent intent=new Intent(ActivityTestMain.this,ServiceUserTarget.class);
      ServiceConnection conn=new ServiceConnection(){
        @Override public void onServiceConnected(        ComponentName name,        IBinder service){
          Log.i(TAG,"Service connected " + name + " "+ service);
        }
        @Override public void onServiceDisconnected(        ComponentName name){
          Log.i(TAG,"Service disconnected " + name);
        }
      }
;
      if (bindServiceAsUser(intent,conn,Context.BIND_AUTO_CREATE,UserHandle.OWNER)) {
        mConnections.add(conn);
      }
 else {
        Toast.makeText(ActivityTestMain.this,"Failed to bind",Toast.LENGTH_LONG).show();
      }
      return true;
    }
  }
);
  menu.add("Bind to user " + mSecondUser + "!").setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      Intent intent=new Intent(ActivityTestMain.this,ServiceUserTarget.class);
      ServiceConnection conn=new ServiceConnection(){
        @Override public void onServiceConnected(        ComponentName name,        IBinder service){
          Log.i(TAG,"Service connected " + name + " "+ service);
        }
        @Override public void onServiceDisconnected(        ComponentName name){
          Log.i(TAG,"Service disconnected " + name);
        }
      }
;
      if (bindServiceAsUser(intent,conn,Context.BIND_AUTO_CREATE,new UserHandle(mSecondUser))) {
        mConnections.add(conn);
      }
 else {
        Toast.makeText(ActivityTestMain.this,"Failed to bind",Toast.LENGTH_LONG).show();
      }
      return true;
    }
  }
);
  menu.add("Density!").setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      if (mOverrideConfig == null) {
        mOverrideConfig=new Configuration();
      }
      if (mOverrideConfig.densityDpi == Configuration.DENSITY_DPI_UNDEFINED) {
        mOverrideConfig.densityDpi=(getApplicationContext().getResources().getConfiguration().densityDpi * 2) / 3;
      }
 else {
        mOverrideConfig.densityDpi=Configuration.DENSITY_DPI_UNDEFINED;
      }
      recreate();
      return true;
    }
  }
);
  menu.add("HashArray").setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      ArrayMapTests.run();
      return true;
    }
  }
);
  menu.add("Add App Recent").setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      addAppRecents(1);
      return true;
    }
  }
);
  menu.add("Add App 10x Recent").setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      addAppRecents(10);
      return true;
    }
  }
);
  menu.add("Exclude!").setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      setExclude(true);
      return true;
    }
  }
);
  menu.add("Include!").setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      setExclude(false);
      return true;
    }
  }
);
  menu.add("Open Doc").setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      ActivityManager.AppTask task=findDocTask();
      if (task == null) {
        Intent intent=new Intent(ActivityTestMain.this,DocActivity.class);
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_DOCUMENT | Intent.FLAG_ACTIVITY_MULTIPLE_TASK | Intent.FLAG_ACTIVITY_RETAIN_IN_RECENTS);
        startActivity(intent);
      }
 else {
        task.moveToFront();
      }
      return true;
    }
  }
);
  menu.add("Stack Doc").setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      ActivityManager.AppTask task=findDocTask();
      if (task != null) {
        ActivityManager.RecentTaskInfo recent=task.getTaskInfo();
        Intent intent=new Intent(ActivityTestMain.this,DocActivity.class);
        if (recent.id >= 0) {
          intent.putExtra(DocActivity.LABEL,"Stacked");
        }
 else {
          intent.putExtra(DocActivity.LABEL,"New Root");
        }
        task.startActivity(ActivityTestMain.this,intent,null);
      }
      return true;
    }
  }
);
  menu.add("Spam!").setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      scheduleSpam(false);
      return true;
    }
  }
);
  menu.add("Track time").setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      Intent intent=new Intent(Intent.ACTION_SEND);
      intent.setType("text/plain");
      intent.putExtra(Intent.EXTRA_TEXT,"We are sharing this with you!");
      ActivityOptions options=ActivityOptions.makeBasic();
      Intent receiveIntent=new Intent(ActivityTestMain.this,TrackTimeReceiver.class);
      receiveIntent.putExtra("something","yeah, this is us!");
      options.requestUsageTimeReport(PendingIntent.getBroadcast(ActivityTestMain.this,0,receiveIntent,PendingIntent.FLAG_CANCEL_CURRENT));
      startActivity(Intent.createChooser(intent,"Who do you love?"),options.toBundle());
      return true;
    }
  }
);
  return true;
}
