{
  mTotalLength=0;
  int maxHeight=0;
  int childState=0;
  int alternativeMaxHeight=0;
  int weightedMaxHeight=0;
  boolean allFillParent=true;
  float totalWeight=0;
  final int count=getVirtualChildCount();
  final int widthMode=MeasureSpec.getMode(widthMeasureSpec);
  final int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  boolean matchHeight=false;
  boolean skippedMeasure=false;
  if (mMaxAscent == null || mMaxDescent == null) {
    mMaxAscent=new int[VERTICAL_GRAVITY_COUNT];
    mMaxDescent=new int[VERTICAL_GRAVITY_COUNT];
  }
  final int[] maxAscent=mMaxAscent;
  final int[] maxDescent=mMaxDescent;
  maxAscent[0]=maxAscent[1]=maxAscent[2]=maxAscent[3]=-1;
  maxDescent[0]=maxDescent[1]=maxDescent[2]=maxDescent[3]=-1;
  final boolean baselineAligned=mBaselineAligned;
  final boolean useLargestChild=mUseLargestChild;
  final boolean isExactly=widthMode == MeasureSpec.EXACTLY;
  int largestChildWidth=Integer.MIN_VALUE;
  for (int i=0; i < count; ++i) {
    final View child=getVirtualChildAt(i);
    if (child == null) {
      mTotalLength+=measureNullChild(i);
      continue;
    }
    if (child.getVisibility() == GONE) {
      i+=getChildrenSkipCount(child,i);
      continue;
    }
    if (hasDividerBeforeChildAt(i)) {
      mTotalLength+=mDividerWidth;
    }
    final LinearLayout.LayoutParams lp=(LinearLayout.LayoutParams)child.getLayoutParams();
    totalWeight+=lp.weight;
    if (widthMode == MeasureSpec.EXACTLY && lp.width == 0 && lp.weight > 0) {
      if (isExactly) {
        mTotalLength+=lp.leftMargin + lp.rightMargin;
      }
 else {
        final int totalLength=mTotalLength;
        mTotalLength=Math.max(totalLength,totalLength + lp.leftMargin + lp.rightMargin);
      }
      if (baselineAligned) {
        final int freeWidthSpec=MeasureSpec.makeSafeMeasureSpec(MeasureSpec.getSize(widthMeasureSpec),MeasureSpec.UNSPECIFIED);
        final int freeHeightSpec=MeasureSpec.makeSafeMeasureSpec(MeasureSpec.getSize(heightMeasureSpec),MeasureSpec.UNSPECIFIED);
        child.measure(freeWidthSpec,freeHeightSpec);
      }
 else {
        skippedMeasure=true;
      }
    }
 else {
      int oldWidth=Integer.MIN_VALUE;
      if (lp.width == 0 && lp.weight > 0) {
        oldWidth=0;
        lp.width=LayoutParams.WRAP_CONTENT;
      }
      measureChildBeforeLayout(child,i,widthMeasureSpec,totalWeight == 0 ? mTotalLength : 0,heightMeasureSpec,0);
      if (oldWidth != Integer.MIN_VALUE) {
        lp.width=oldWidth;
      }
      final int childWidth=child.getMeasuredWidth();
      if (isExactly) {
        mTotalLength+=childWidth + lp.leftMargin + lp.rightMargin+ getNextLocationOffset(child);
      }
 else {
        final int totalLength=mTotalLength;
        mTotalLength=Math.max(totalLength,totalLength + childWidth + lp.leftMargin+ lp.rightMargin+ getNextLocationOffset(child));
      }
      if (useLargestChild) {
        largestChildWidth=Math.max(childWidth,largestChildWidth);
      }
    }
    boolean matchHeightLocally=false;
    if (heightMode != MeasureSpec.EXACTLY && lp.height == LayoutParams.MATCH_PARENT) {
      matchHeight=true;
      matchHeightLocally=true;
    }
    final int margin=lp.topMargin + lp.bottomMargin;
    final int childHeight=child.getMeasuredHeight() + margin;
    childState=combineMeasuredStates(childState,child.getMeasuredState());
    if (baselineAligned) {
      final int childBaseline=child.getBaseline();
      if (childBaseline != -1) {
        final int gravity=(lp.gravity < 0 ? mGravity : lp.gravity) & Gravity.VERTICAL_GRAVITY_MASK;
        final int index=((gravity >> Gravity.AXIS_Y_SHIFT) & ~Gravity.AXIS_SPECIFIED) >> 1;
        maxAscent[index]=Math.max(maxAscent[index],childBaseline);
        maxDescent[index]=Math.max(maxDescent[index],childHeight - childBaseline);
      }
    }
    maxHeight=Math.max(maxHeight,childHeight);
    allFillParent=allFillParent && lp.height == LayoutParams.MATCH_PARENT;
    if (lp.weight > 0) {
      weightedMaxHeight=Math.max(weightedMaxHeight,matchHeightLocally ? margin : childHeight);
    }
 else {
      alternativeMaxHeight=Math.max(alternativeMaxHeight,matchHeightLocally ? margin : childHeight);
    }
    i+=getChildrenSkipCount(child,i);
  }
  if (mTotalLength > 0 && hasDividerBeforeChildAt(count)) {
    mTotalLength+=mDividerWidth;
  }
  if (maxAscent[INDEX_TOP] != -1 || maxAscent[INDEX_CENTER_VERTICAL] != -1 || maxAscent[INDEX_BOTTOM] != -1 || maxAscent[INDEX_FILL] != -1) {
    final int ascent=Math.max(maxAscent[INDEX_FILL],Math.max(maxAscent[INDEX_CENTER_VERTICAL],Math.max(maxAscent[INDEX_TOP],maxAscent[INDEX_BOTTOM])));
    final int descent=Math.max(maxDescent[INDEX_FILL],Math.max(maxDescent[INDEX_CENTER_VERTICAL],Math.max(maxDescent[INDEX_TOP],maxDescent[INDEX_BOTTOM])));
    maxHeight=Math.max(maxHeight,ascent + descent);
  }
  if (useLargestChild && (widthMode == MeasureSpec.AT_MOST || widthMode == MeasureSpec.UNSPECIFIED)) {
    mTotalLength=0;
    for (int i=0; i < count; ++i) {
      final View child=getVirtualChildAt(i);
      if (child == null) {
        mTotalLength+=measureNullChild(i);
        continue;
      }
      if (child.getVisibility() == GONE) {
        i+=getChildrenSkipCount(child,i);
        continue;
      }
      final LinearLayout.LayoutParams lp=(LinearLayout.LayoutParams)child.getLayoutParams();
      if (isExactly) {
        mTotalLength+=largestChildWidth + lp.leftMargin + lp.rightMargin+ getNextLocationOffset(child);
      }
 else {
        final int totalLength=mTotalLength;
        mTotalLength=Math.max(totalLength,totalLength + largestChildWidth + lp.leftMargin+ lp.rightMargin+ getNextLocationOffset(child));
      }
    }
  }
  mTotalLength+=mPaddingLeft + mPaddingRight;
  int widthSize=mTotalLength;
  widthSize=Math.max(widthSize,getSuggestedMinimumWidth());
  int widthSizeAndState=resolveSizeAndState(widthSize,widthMeasureSpec,0);
  widthSize=widthSizeAndState & MEASURED_SIZE_MASK;
  int delta=widthSize - mTotalLength;
  if (skippedMeasure || delta != 0 && totalWeight > 0.0f) {
    float weightSum=mWeightSum > 0.0f ? mWeightSum : totalWeight;
    maxAscent[0]=maxAscent[1]=maxAscent[2]=maxAscent[3]=-1;
    maxDescent[0]=maxDescent[1]=maxDescent[2]=maxDescent[3]=-1;
    maxHeight=-1;
    mTotalLength=0;
    for (int i=0; i < count; ++i) {
      final View child=getVirtualChildAt(i);
      if (child == null || child.getVisibility() == View.GONE) {
        continue;
      }
      final LinearLayout.LayoutParams lp=(LinearLayout.LayoutParams)child.getLayoutParams();
      float childExtra=lp.weight;
      if (childExtra > 0) {
        int share=(int)(childExtra * delta / weightSum);
        weightSum-=childExtra;
        delta-=share;
        final int childHeightMeasureSpec=getChildMeasureSpec(heightMeasureSpec,mPaddingTop + mPaddingBottom + lp.topMargin+ lp.bottomMargin,lp.height);
        if ((lp.width != 0) || (widthMode != MeasureSpec.EXACTLY)) {
          int childWidth=child.getMeasuredWidth() + share;
          if (childWidth < 0) {
            childWidth=0;
          }
          child.measure(MeasureSpec.makeMeasureSpec(childWidth,MeasureSpec.EXACTLY),childHeightMeasureSpec);
        }
 else {
          child.measure(MeasureSpec.makeMeasureSpec(share > 0 ? share : 0,MeasureSpec.EXACTLY),childHeightMeasureSpec);
        }
        childState=combineMeasuredStates(childState,child.getMeasuredState() & MEASURED_STATE_MASK);
      }
      if (isExactly) {
        mTotalLength+=child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin+ getNextLocationOffset(child);
      }
 else {
        final int totalLength=mTotalLength;
        mTotalLength=Math.max(totalLength,totalLength + child.getMeasuredWidth() + lp.leftMargin+ lp.rightMargin+ getNextLocationOffset(child));
      }
      boolean matchHeightLocally=heightMode != MeasureSpec.EXACTLY && lp.height == LayoutParams.MATCH_PARENT;
      final int margin=lp.topMargin + lp.bottomMargin;
      int childHeight=child.getMeasuredHeight() + margin;
      maxHeight=Math.max(maxHeight,childHeight);
      alternativeMaxHeight=Math.max(alternativeMaxHeight,matchHeightLocally ? margin : childHeight);
      allFillParent=allFillParent && lp.height == LayoutParams.MATCH_PARENT;
      if (baselineAligned) {
        final int childBaseline=child.getBaseline();
        if (childBaseline != -1) {
          final int gravity=(lp.gravity < 0 ? mGravity : lp.gravity) & Gravity.VERTICAL_GRAVITY_MASK;
          final int index=((gravity >> Gravity.AXIS_Y_SHIFT) & ~Gravity.AXIS_SPECIFIED) >> 1;
          maxAscent[index]=Math.max(maxAscent[index],childBaseline);
          maxDescent[index]=Math.max(maxDescent[index],childHeight - childBaseline);
        }
      }
    }
    mTotalLength+=mPaddingLeft + mPaddingRight;
    if (maxAscent[INDEX_TOP] != -1 || maxAscent[INDEX_CENTER_VERTICAL] != -1 || maxAscent[INDEX_BOTTOM] != -1 || maxAscent[INDEX_FILL] != -1) {
      final int ascent=Math.max(maxAscent[INDEX_FILL],Math.max(maxAscent[INDEX_CENTER_VERTICAL],Math.max(maxAscent[INDEX_TOP],maxAscent[INDEX_BOTTOM])));
      final int descent=Math.max(maxDescent[INDEX_FILL],Math.max(maxDescent[INDEX_CENTER_VERTICAL],Math.max(maxDescent[INDEX_TOP],maxDescent[INDEX_BOTTOM])));
      maxHeight=Math.max(maxHeight,ascent + descent);
    }
  }
 else {
    alternativeMaxHeight=Math.max(alternativeMaxHeight,weightedMaxHeight);
    if (useLargestChild && widthMode != MeasureSpec.EXACTLY) {
      for (int i=0; i < count; i++) {
        final View child=getVirtualChildAt(i);
        if (child == null || child.getVisibility() == View.GONE) {
          continue;
        }
        final LinearLayout.LayoutParams lp=(LinearLayout.LayoutParams)child.getLayoutParams();
        float childExtra=lp.weight;
        if (childExtra > 0) {
          child.measure(MeasureSpec.makeMeasureSpec(largestChildWidth,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(child.getMeasuredHeight(),MeasureSpec.EXACTLY));
        }
      }
    }
  }
  if (!allFillParent && heightMode != MeasureSpec.EXACTLY) {
    maxHeight=alternativeMaxHeight;
  }
  maxHeight+=mPaddingTop + mPaddingBottom;
  maxHeight=Math.max(maxHeight,getSuggestedMinimumHeight());
  setMeasuredDimension(widthSizeAndState | (childState & MEASURED_STATE_MASK),resolveSizeAndState(maxHeight,heightMeasureSpec,(childState << MEASURED_HEIGHT_STATE_SHIFT)));
  if (matchHeight) {
    forceUniformHeight(count,widthMeasureSpec);
  }
}
