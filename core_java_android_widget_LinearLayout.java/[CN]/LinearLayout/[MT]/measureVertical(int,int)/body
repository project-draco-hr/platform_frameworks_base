{
  mTotalLength=0;
  int maxWidth=0;
  int alternativeMaxWidth=0;
  int weightedMaxWidth=0;
  boolean allFillParent=true;
  float totalWeight=0;
  final int count=getVirtualChildCount();
  final int widthMode=MeasureSpec.getMode(widthMeasureSpec);
  final int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  boolean matchWidth=false;
  final int baselineChildIndex=mBaselineAlignedChildIndex;
  for (int i=0; i < count; ++i) {
    final View child=getVirtualChildAt(i);
    if (child == null) {
      mTotalLength+=measureNullChild(i);
      continue;
    }
    if (child.getVisibility() == View.GONE) {
      i+=getChildrenSkipCount(child,i);
      continue;
    }
    LinearLayout.LayoutParams lp=(LinearLayout.LayoutParams)child.getLayoutParams();
    totalWeight+=lp.weight;
    if (heightMode == MeasureSpec.EXACTLY && lp.height == 0 && lp.weight > 0) {
      mTotalLength+=lp.topMargin + lp.bottomMargin;
    }
 else {
      int oldHeight=Integer.MIN_VALUE;
      if (lp.height == 0 && lp.weight > 0) {
        oldHeight=0;
        lp.height=LayoutParams.WRAP_CONTENT;
      }
      measureChildBeforeLayout(child,i,widthMeasureSpec,0,heightMeasureSpec,totalWeight == 0 ? mTotalLength : 0);
      if (oldHeight != Integer.MIN_VALUE) {
        lp.height=oldHeight;
      }
      mTotalLength+=child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin+ getNextLocationOffset(child);
    }
    if ((baselineChildIndex >= 0) && (baselineChildIndex == i + 1)) {
      mBaselineChildTop=mTotalLength;
    }
    if (i < baselineChildIndex && lp.weight > 0) {
      throw new RuntimeException("A child of LinearLayout with index " + "less than mBaselineAlignedChildIndex has weight > 0, which " + "won't work.  Either remove the weight, or don't set "+ "mBaselineAlignedChildIndex.");
    }
    boolean matchWidthLocally=false;
    if (widthMode != MeasureSpec.EXACTLY && lp.width == LayoutParams.FILL_PARENT) {
      matchWidth=true;
      matchWidthLocally=true;
    }
    final int margin=lp.leftMargin + lp.rightMargin;
    final int measuredWidth=child.getMeasuredWidth() + margin;
    maxWidth=Math.max(maxWidth,measuredWidth);
    allFillParent=allFillParent && lp.width == LayoutParams.FILL_PARENT;
    if (lp.weight > 0) {
      weightedMaxWidth=Math.max(weightedMaxWidth,matchWidthLocally ? margin : measuredWidth);
    }
 else {
      alternativeMaxWidth=Math.max(alternativeMaxWidth,matchWidthLocally ? margin : measuredWidth);
    }
    i+=getChildrenSkipCount(child,i);
  }
  mTotalLength+=mPaddingTop + mPaddingBottom;
  int heightSize=mTotalLength;
  heightSize=Math.max(heightSize,getSuggestedMinimumHeight());
  heightSize=resolveSize(heightSize,heightMeasureSpec);
  int delta=heightSize - mTotalLength;
  if (delta != 0 && totalWeight > 0.0f) {
    float weightSum=mWeightSum > 0.0f ? mWeightSum : totalWeight;
    mTotalLength=0;
    for (int i=0; i < count; ++i) {
      final View child=getVirtualChildAt(i);
      if (child.getVisibility() == View.GONE) {
        continue;
      }
      LinearLayout.LayoutParams lp=(LinearLayout.LayoutParams)child.getLayoutParams();
      float childExtra=lp.weight;
      if (childExtra > 0) {
        int share=(int)(childExtra * delta / weightSum);
        weightSum-=childExtra;
        delta-=share;
        final int childWidthMeasureSpec=getChildMeasureSpec(widthMeasureSpec,mPaddingLeft + mPaddingRight + lp.leftMargin+ lp.rightMargin,lp.width);
        if ((lp.height != 0) || (heightMode != MeasureSpec.EXACTLY)) {
          int childHeight=child.getMeasuredHeight() + share;
          if (childHeight < 0) {
            childHeight=0;
          }
          child.measure(childWidthMeasureSpec,MeasureSpec.makeMeasureSpec(childHeight,MeasureSpec.EXACTLY));
        }
 else {
          child.measure(childWidthMeasureSpec,MeasureSpec.makeMeasureSpec(share > 0 ? share : 0,MeasureSpec.EXACTLY));
        }
      }
      final int margin=lp.leftMargin + lp.rightMargin;
      final int measuredWidth=child.getMeasuredWidth() + margin;
      maxWidth=Math.max(maxWidth,measuredWidth);
      boolean matchWidthLocally=widthMode != MeasureSpec.EXACTLY && lp.width == LayoutParams.FILL_PARENT;
      alternativeMaxWidth=Math.max(alternativeMaxWidth,matchWidthLocally ? margin : measuredWidth);
      allFillParent=allFillParent && lp.width == LayoutParams.FILL_PARENT;
      mTotalLength+=child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin+ getNextLocationOffset(child);
    }
    mTotalLength+=mPaddingTop + mPaddingBottom;
  }
 else {
    alternativeMaxWidth=Math.max(alternativeMaxWidth,weightedMaxWidth);
  }
  if (!allFillParent && widthMode != MeasureSpec.EXACTLY) {
    maxWidth=alternativeMaxWidth;
  }
  maxWidth+=mPaddingLeft + mPaddingRight;
  maxWidth=Math.max(maxWidth,getSuggestedMinimumWidth());
  setMeasuredDimension(resolveSize(maxWidth,widthMeasureSpec),heightSize);
  if (matchWidth) {
    forceUniformWidth(count,heightMeasureSpec);
  }
}
