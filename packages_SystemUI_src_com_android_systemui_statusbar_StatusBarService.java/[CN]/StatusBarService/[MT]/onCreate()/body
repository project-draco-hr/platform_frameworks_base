{
  View sb=makeStatusBarView();
  StatusBarIconList iconList=new StatusBarIconList();
  ArrayList<IBinder> notificationKeys=new ArrayList<IBinder>();
  ArrayList<StatusBarNotification> notifications=new ArrayList<StatusBarNotification>();
  mCommandQueue=new CommandQueue(this,iconList);
  mBarService=IStatusBarService.Stub.asInterface(ServiceManager.getService(Context.STATUS_BAR_SERVICE));
  boolean[] switches=new boolean[2];
  try {
    mBarService.registerStatusBar(mCommandQueue,iconList,notificationKeys,notifications,switches);
  }
 catch (  RemoteException ex) {
  }
  setLightsOn(switches[0]);
  setMenuKeyVisible(switches[1]);
  int N=iconList.size();
  int viewIndex=0;
  for (int i=0; i < N; i++) {
    StatusBarIcon icon=iconList.getIcon(i);
    if (icon != null) {
      addIcon(iconList.getSlot(i),i,viewIndex,icon);
      viewIndex++;
    }
  }
  N=notificationKeys.size();
  if (N == notifications.size()) {
    for (int i=0; i < N; i++) {
      addNotification(notificationKeys.get(i),notifications.get(i));
    }
  }
 else {
    Log.wtf(TAG,"Notification list length mismatch: keys=" + N + " notifications="+ notifications.size());
  }
  final Resources res=getResources();
  final int height=res.getDimensionPixelSize(com.android.internal.R.dimen.status_bar_height);
  final WindowManager.LayoutParams lp=new WindowManager.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,height,WindowManager.LayoutParams.TYPE_STATUS_BAR,WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_TOUCHABLE_WHEN_WAKING,PixelFormat.RGBX_8888);
  lp.gravity=getStatusBarGravity();
  lp.setTitle("StatusBar");
  WindowManagerImpl.getDefault().addView(sb,lp);
  if (SPEW) {
    Slog.d(TAG,"Added status bar view: gravity=0x" + Integer.toHexString(lp.gravity) + " icons="+ iconList.size()+ " lights="+ (switches[0] ? "on" : "off")+ " menu="+ (switches[1] ? "visible" : "invisible"));
  }
}
