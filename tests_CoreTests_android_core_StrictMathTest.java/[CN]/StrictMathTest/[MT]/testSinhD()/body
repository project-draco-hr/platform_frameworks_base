{
  assertTrue(Double.isNaN(StrictMath.sinh(Double.NaN)));
  assertEquals("Should return POSITIVE_INFINITY",Double.POSITIVE_INFINITY,StrictMath.sinh(Double.POSITIVE_INFINITY),0D);
  assertEquals("Should return NEGATIVE_INFINITY",Double.NEGATIVE_INFINITY,StrictMath.sinh(Double.NEGATIVE_INFINITY),0D);
  assertEquals(Double.doubleToLongBits(0.0),Double.doubleToLongBits(StrictMath.sinh(0.0)));
  assertEquals(Double.doubleToLongBits(+0.0),Double.doubleToLongBits(StrictMath.sinh(+0.0)));
  assertEquals(Double.doubleToLongBits(-0.0),Double.doubleToLongBits(StrictMath.sinh(-0.0)));
  assertEquals("Should return POSITIVE_INFINITY",Double.POSITIVE_INFINITY,StrictMath.sinh(1234.56),0D);
  assertEquals("Should return NEGATIVE_INFINITY",Double.NEGATIVE_INFINITY,StrictMath.sinh(-1234.56),0D);
  assertEquals("Should return 1.0000000000001666E-6",1.0000000000001666E-6,StrictMath.sinh(0.000001),0D);
  assertEquals("Should return -1.0000000000001666E-6",-1.0000000000001666E-6,StrictMath.sinh(-0.000001),0D);
  assertEquals("Should return 5.115386441963859",5.115386441963859,StrictMath.sinh(2.33482),0D);
  assertEquals("Should return POSITIVE_INFINITY",Double.POSITIVE_INFINITY,StrictMath.sinh(Double.MAX_VALUE),0D);
  assertEquals("Should return 4.9E-324",4.9E-324,StrictMath.sinh(Double.MIN_VALUE),0D);
}
