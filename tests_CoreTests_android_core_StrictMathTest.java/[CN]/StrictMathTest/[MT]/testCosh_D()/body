{
  assertTrue("Should return NaN",Double.isNaN(StrictMath.cosh(Double.NaN)));
  assertEquals("Should return POSITIVE_INFINITY",Double.POSITIVE_INFINITY,StrictMath.cosh(Double.POSITIVE_INFINITY));
  assertEquals("Should return POSITIVE_INFINITY",Double.POSITIVE_INFINITY,StrictMath.cosh(Double.NEGATIVE_INFINITY));
  assertEquals("Should return 1.0",1.0,StrictMath.cosh(+0.0));
  assertEquals("Should return 1.0",1.0,StrictMath.cosh(-0.0));
  assertEquals("Should return POSITIVE_INFINITY",Double.POSITIVE_INFINITY,StrictMath.cosh(1234.56));
  assertEquals("Should return POSITIVE_INFINITY",Double.POSITIVE_INFINITY,StrictMath.cosh(-1234.56));
  assertEquals("Should return 1.0000000000005",1.0000000000005,StrictMath.cosh(0.000001));
  assertEquals("Should return 1.0000000000005",1.0000000000005,StrictMath.cosh(-0.000001));
  assertEquals("Should return 5.212214351945598",5.212214351945598,StrictMath.cosh(2.33482));
  assertEquals("Should return POSITIVE_INFINITY",Double.POSITIVE_INFINITY,StrictMath.cosh(Double.MAX_VALUE));
  assertEquals("Should return 1.0",1.0,StrictMath.cosh(Double.MIN_VALUE));
}
