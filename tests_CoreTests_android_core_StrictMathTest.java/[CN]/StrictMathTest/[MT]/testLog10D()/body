{
  assertTrue("Should return NaN",Double.isNaN(StrictMath.log10(Double.NaN)));
  assertTrue("Should return NaN",Double.isNaN(StrictMath.log10(-2541.05745687234187532)));
  assertEquals("Should return POSITIVE_INFINITY",Double.POSITIVE_INFINITY,StrictMath.log10(Double.POSITIVE_INFINITY));
  assertEquals("Should return NEGATIVE_INFINITY",Double.NEGATIVE_INFINITY,StrictMath.log10(0.0));
  assertEquals("Should return NEGATIVE_INFINITY",Double.NEGATIVE_INFINITY,StrictMath.log10(+0.0));
  assertEquals("Should return NEGATIVE_INFINITY",Double.NEGATIVE_INFINITY,StrictMath.log10(-0.0));
  assertEquals("Should return 14.0",14.0,StrictMath.log10(StrictMath.pow(10,14)));
  assertEquals("Should return 3.7389561269540406",3.7389561269540406,StrictMath.log10(5482.2158));
  assertEquals("Should return 14.661551142893833",14.661551142893833,StrictMath.log10(458723662312872.125782332587));
  assertEquals("Should return -0.9083828622192334",-0.9083828622192334,StrictMath.log10(0.12348583358871));
  assertEquals("Should return 308.25471555991675",308.25471555991675,StrictMath.log10(Double.MAX_VALUE));
  assertEquals("Should return -323.3062153431158",-323.3062153431158,StrictMath.log10(Double.MIN_VALUE));
}
