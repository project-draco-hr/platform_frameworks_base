{
  final int densityDpi;
  if (res != null) {
    densityDpi=res.getDisplayMetrics().densityDpi;
  }
 else   if (orig != null) {
    densityDpi=orig.mDensity;
  }
 else {
    densityDpi=0;
  }
  mDensity=densityDpi == 0 ? DisplayMetrics.DENSITY_DEFAULT : densityDpi;
  if (orig != null) {
    final ChildDrawable[] origChildDrawable=orig.mChildren;
    final int N=orig.mNum;
    mNum=N;
    mChildren=new ChildDrawable[N];
    mChangingConfigurations=orig.mChangingConfigurations;
    mChildrenChangingConfigurations=orig.mChildrenChangingConfigurations;
    for (int i=0; i < N; i++) {
      final ChildDrawable or=origChildDrawable[i];
      mChildren[i]=new ChildDrawable(or,owner,res);
    }
    mHaveOpacity=orig.mHaveOpacity;
    mOpacity=orig.mOpacity;
    mHaveIsStateful=orig.mHaveIsStateful;
    mIsStateful=orig.mIsStateful;
    mAutoMirrored=orig.mAutoMirrored;
    mPaddingMode=orig.mPaddingMode;
    mThemeAttrs=orig.mThemeAttrs;
    mPaddingTop=orig.mPaddingTop;
    mPaddingBottom=orig.mPaddingBottom;
    mPaddingLeft=orig.mPaddingLeft;
    mPaddingRight=orig.mPaddingRight;
    mPaddingStart=orig.mPaddingStart;
    mPaddingEnd=orig.mPaddingEnd;
    mOpacityOverride=orig.mOpacityOverride;
    if (orig.mDensity != mDensity) {
      applyDensityScaling(orig.mDensity,mDensity);
    }
  }
 else {
    mNum=0;
    mChildren=null;
  }
}
