{
  super.inflate(r,parser,attrs);
  int type;
  TypedArray a=r.obtainAttributes(attrs,com.android.internal.R.styleable.LayerDrawable);
  mOpacityOverride=a.getInt(com.android.internal.R.styleable.LayerDrawable_opacity,PixelFormat.UNKNOWN);
  a.recycle();
  final int innerDepth=parser.getDepth() + 1;
  int depth;
  while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && ((depth=parser.getDepth()) >= innerDepth || type != XmlPullParser.END_TAG)) {
    if (type != XmlPullParser.START_TAG) {
      continue;
    }
    if (depth > innerDepth || !parser.getName().equals("item")) {
      continue;
    }
    a=r.obtainAttributes(attrs,com.android.internal.R.styleable.LayerDrawableItem);
    int left=a.getDimensionPixelOffset(com.android.internal.R.styleable.LayerDrawableItem_left,0);
    int top=a.getDimensionPixelOffset(com.android.internal.R.styleable.LayerDrawableItem_top,0);
    int right=a.getDimensionPixelOffset(com.android.internal.R.styleable.LayerDrawableItem_right,0);
    int bottom=a.getDimensionPixelOffset(com.android.internal.R.styleable.LayerDrawableItem_bottom,0);
    int drawableRes=a.getResourceId(com.android.internal.R.styleable.LayerDrawableItem_drawable,0);
    int id=a.getResourceId(com.android.internal.R.styleable.LayerDrawableItem_id,View.NO_ID);
    a.recycle();
    Drawable dr;
    if (drawableRes != 0) {
      dr=r.getDrawable(drawableRes);
    }
 else {
      while ((type=parser.next()) == XmlPullParser.TEXT) {
      }
      if (type != XmlPullParser.START_TAG) {
        throw new XmlPullParserException(parser.getPositionDescription() + ": <item> tag requires a 'drawable' attribute or " + "child tag defining a drawable");
      }
      dr=Drawable.createFromXmlInner(r,parser,attrs);
    }
    addLayer(dr,id,left,top,right,bottom);
  }
  ensurePadding();
  onStateChange(getState());
}
