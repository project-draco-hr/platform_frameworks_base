{
  final LayerState layerState=mLayerState;
  if (layerState.mPaddingMode == PADDING_MODE_NEST) {
    computeNestedPadding(padding);
  }
 else {
    computeStackedPadding(padding);
  }
  if (layerState.mPaddingTop >= 0) {
    padding.top=layerState.mPaddingTop;
  }
  if (layerState.mPaddingBottom >= 0) {
    padding.bottom=layerState.mPaddingBottom;
  }
  final int paddingRtlLeft;
  final int paddingRtlRight;
  if (getLayoutDirection() == LayoutDirection.RTL) {
    paddingRtlLeft=layerState.mPaddingEnd;
    paddingRtlRight=layerState.mPaddingStart;
  }
 else {
    paddingRtlLeft=layerState.mPaddingStart;
    paddingRtlRight=layerState.mPaddingEnd;
  }
  final int paddingLeft=paddingRtlLeft >= 0 ? paddingRtlLeft : layerState.mPaddingLeft;
  if (paddingLeft >= 0) {
    padding.left=paddingLeft;
  }
  final int paddingRight=paddingRtlRight >= 0 ? paddingRtlRight : layerState.mPaddingRight;
  if (paddingRight >= 0) {
    padding.right=paddingRight;
  }
  return padding.left != 0 || padding.top != 0 || padding.right != 0 || padding.bottom != 0;
}
