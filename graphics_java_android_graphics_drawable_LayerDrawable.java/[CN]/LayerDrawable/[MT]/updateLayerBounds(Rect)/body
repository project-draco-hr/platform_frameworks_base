{
  int paddingL=0;
  int paddingT=0;
  int paddingR=0;
  int paddingB=0;
  final Rect outRect=mTmpOutRect;
  final int layoutDirection=getLayoutDirection();
  final boolean isLayoutRtl=layoutDirection == LayoutDirection.RTL;
  final boolean isPaddingNested=mLayerState.mPaddingMode == PADDING_MODE_NEST;
  final ChildDrawable[] array=mLayerState.mChildren;
  for (int i=0, count=mLayerState.mNum; i < count; i++) {
    final ChildDrawable r=array[i];
    final Drawable d=r.mDrawable;
    if (d == null) {
      continue;
    }
    final int insetT=r.mInsetT;
    final int insetB=r.mInsetB;
    final int insetRtlL=isLayoutRtl ? r.mInsetE : r.mInsetS;
    final int insetRtlR=isLayoutRtl ? r.mInsetS : r.mInsetE;
    final int insetL=insetRtlL == UNDEFINED_INSET ? r.mInsetL : insetRtlL;
    final int insetR=insetRtlR == UNDEFINED_INSET ? r.mInsetR : insetRtlR;
    final Rect container=mTmpContainer;
    container.set(bounds.left + insetL + paddingL,bounds.top + insetT + paddingT,bounds.right - insetR - paddingR,bounds.bottom - insetB - paddingB);
    final int intrinsicW=d.getIntrinsicWidth();
    final int intrinsicH=d.getIntrinsicHeight();
    final int layerW=r.mWidth;
    final int layerH=r.mHeight;
    final int gravity=resolveGravity(r.mGravity,layerW,layerH,intrinsicW,intrinsicH);
    final int resolvedW=layerW < 0 ? intrinsicW : layerW;
    final int resolvedH=layerH < 0 ? intrinsicH : layerH;
    Gravity.apply(gravity,resolvedW,resolvedH,container,outRect,layoutDirection);
    d.setBounds(outRect);
    if (isPaddingNested) {
      paddingL+=mPaddingL[i];
      paddingR+=mPaddingR[i];
      paddingT+=mPaddingT[i];
      paddingB+=mPaddingB[i];
    }
  }
}
