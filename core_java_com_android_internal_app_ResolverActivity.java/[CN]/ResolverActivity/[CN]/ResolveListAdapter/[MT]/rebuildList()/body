{
  if (mBaseResolveList != null) {
    mCurrentResolveList=mBaseResolveList;
  }
 else {
    mCurrentResolveList=mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid));
    if (mCurrentResolveList != null) {
      for (int i=mCurrentResolveList.size() - 1; i >= 0; i--) {
        ActivityInfo ai=mCurrentResolveList.get(i).activityInfo;
        int granted=ActivityManager.checkComponentPermission(ai.permission,mLaunchedFromUid,ai.applicationInfo.uid,ai.exported);
        if (granted != PackageManager.PERMISSION_GRANTED) {
          mCurrentResolveList.remove(i);
        }
      }
    }
  }
  int N;
  if ((mCurrentResolveList != null) && ((N=mCurrentResolveList.size()) > 0)) {
    ResolveInfo r0=mCurrentResolveList.get(0);
    for (int i=1; i < N; i++) {
      ResolveInfo ri=mCurrentResolveList.get(i);
      if (false)       Log.v("ResolveListActivity",r0.activityInfo.name + "=" + r0.priority+ "/"+ r0.isDefault+ " vs "+ ri.activityInfo.name+ "="+ ri.priority+ "/"+ ri.isDefault);
      if (r0.priority != ri.priority || r0.isDefault != ri.isDefault) {
        while (i < N) {
          mCurrentResolveList.remove(i);
          N--;
        }
      }
    }
    if (N > 1) {
      ResolveInfo.DisplayNameComparator rComparator=new ResolveInfo.DisplayNameComparator(mPm);
      Collections.sort(mCurrentResolveList,rComparator);
    }
    mList=new ArrayList<DisplayResolveInfo>();
    if (mInitialIntents != null) {
      for (int i=0; i < mInitialIntents.length; i++) {
        Intent ii=mInitialIntents[i];
        if (ii == null) {
          continue;
        }
        ActivityInfo ai=ii.resolveActivityInfo(getPackageManager(),0);
        if (ai == null) {
          Log.w("ResolverActivity","No activity found for " + ii);
          continue;
        }
        ResolveInfo ri=new ResolveInfo();
        ri.activityInfo=ai;
        if (ii instanceof LabeledIntent) {
          LabeledIntent li=(LabeledIntent)ii;
          ri.resolvePackageName=li.getSourcePackage();
          ri.labelRes=li.getLabelResource();
          ri.nonLocalizedLabel=li.getNonLocalizedLabel();
          ri.icon=li.getIconResource();
        }
        mList.add(new DisplayResolveInfo(ri,ri.loadLabel(getPackageManager()),null,ii));
      }
    }
    r0=mCurrentResolveList.get(0);
    int start=0;
    CharSequence r0Label=r0.loadLabel(mPm);
    mShowExtended=false;
    for (int i=1; i < N; i++) {
      if (r0Label == null) {
        r0Label=r0.activityInfo.packageName;
      }
      ResolveInfo ri=mCurrentResolveList.get(i);
      CharSequence riLabel=ri.loadLabel(mPm);
      if (riLabel == null) {
        riLabel=ri.activityInfo.packageName;
      }
      if (riLabel.equals(r0Label)) {
        continue;
      }
      processGroup(mCurrentResolveList,start,(i - 1),r0,r0Label);
      r0=ri;
      r0Label=riLabel;
      start=i;
    }
    processGroup(mCurrentResolveList,start,(N - 1),r0,r0Label);
  }
}
