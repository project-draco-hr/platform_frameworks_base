{
  FileOutputStream fos=null;
  AtomicFile userFile=new AtomicFile(new File(mUsersDir,userInfo.id + XML_SUFFIX));
  try {
    fos=userFile.startWrite();
    final BufferedOutputStream bos=new BufferedOutputStream(fos);
    final XmlSerializer serializer=new FastXmlSerializer();
    serializer.setOutput(bos,"utf-8");
    serializer.startDocument(null,true);
    serializer.setFeature("http://xmlpull.org/v1/doc/features.html#indent-output",true);
    serializer.startTag(null,TAG_USER);
    serializer.attribute(null,ATTR_ID,Integer.toString(userInfo.id));
    serializer.attribute(null,ATTR_SERIAL_NO,Integer.toString(userInfo.serialNumber));
    serializer.attribute(null,ATTR_FLAGS,Integer.toString(userInfo.flags));
    serializer.attribute(null,ATTR_CREATION_TIME,Long.toString(userInfo.creationTime));
    serializer.attribute(null,ATTR_LAST_LOGGED_IN_TIME,Long.toString(userInfo.lastLoggedInTime));
    RestrictionsPinState pinState=mRestrictionsPinStates.get(userInfo.id);
    if (pinState != null) {
      if (pinState.salt != 0) {
        serializer.attribute(null,ATTR_SALT,Long.toString(pinState.salt));
      }
      if (pinState.pinHash != null) {
        serializer.attribute(null,ATTR_PIN_HASH,pinState.pinHash);
      }
      if (pinState.failedAttempts != 0) {
        serializer.attribute(null,ATTR_FAILED_ATTEMPTS,Integer.toString(pinState.failedAttempts));
        serializer.attribute(null,ATTR_LAST_RETRY_MS,Long.toString(pinState.lastAttemptTime));
      }
    }
    if (userInfo.iconPath != null) {
      serializer.attribute(null,ATTR_ICON_PATH,userInfo.iconPath);
    }
    if (userInfo.partial) {
      serializer.attribute(null,ATTR_PARTIAL,"true");
    }
    if (userInfo.profileGroupId != UserInfo.NO_PROFILE_GROUP_ID) {
      serializer.attribute(null,ATTR_PROFILE_GROUP_ID,Integer.toString(userInfo.profileGroupId));
    }
    serializer.startTag(null,TAG_NAME);
    serializer.text(userInfo.name);
    serializer.endTag(null,TAG_NAME);
    Bundle restrictions=mUserRestrictions.get(userInfo.id);
    if (restrictions != null) {
      serializer.startTag(null,TAG_RESTRICTIONS);
      writeBoolean(serializer,restrictions,UserManager.DISALLOW_CONFIG_WIFI);
      writeBoolean(serializer,restrictions,UserManager.DISALLOW_MODIFY_ACCOUNTS);
      writeBoolean(serializer,restrictions,UserManager.DISALLOW_INSTALL_APPS);
      writeBoolean(serializer,restrictions,UserManager.DISALLOW_UNINSTALL_APPS);
      writeBoolean(serializer,restrictions,UserManager.DISALLOW_SHARE_LOCATION);
      writeBoolean(serializer,restrictions,UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES);
      writeBoolean(serializer,restrictions,UserManager.DISALLOW_CONFIG_BLUETOOTH);
      writeBoolean(serializer,restrictions,UserManager.DISALLOW_USB_FILE_TRANSFER);
      writeBoolean(serializer,restrictions,UserManager.DISALLOW_CONFIG_CREDENTIALS);
      writeBoolean(serializer,restrictions,UserManager.DISALLOW_REMOVE_USER);
      writeBoolean(serializer,restrictions,UserManager.DISALLOW_DEBUGGING_FEATURES);
      writeBoolean(serializer,restrictions,UserManager.DISALLOW_CONFIG_VPN);
      writeBoolean(serializer,restrictions,UserManager.DISALLOW_CONFIG_TETHERING);
      writeBoolean(serializer,restrictions,UserManager.DISALLOW_FACTORY_RESET);
      writeBoolean(serializer,restrictions,UserManager.DISALLOW_ADD_USER);
      writeBoolean(serializer,restrictions,UserManager.ENSURE_VERIFY_APPS);
      writeBoolean(serializer,restrictions,UserManager.DISALLOW_CONFIG_CELL_BROADCASTS);
      writeBoolean(serializer,restrictions,UserManager.DISALLOW_CONFIG_MOBILE_NETWORKS);
      writeBoolean(serializer,restrictions,UserManager.DISALLOW_APPS_CONTROL);
      writeBoolean(serializer,restrictions,UserManager.DISALLOW_MOUNT_PHYSICAL_MEDIA);
      writeBoolean(serializer,restrictions,UserManager.DISALLOW_UNMUTE_MICROPHONE);
      writeBoolean(serializer,restrictions,UserManager.DISALLOW_ADJUST_VOLUME);
      writeBoolean(serializer,restrictions,UserManager.DISALLOW_TELEPHONY);
      serializer.endTag(null,TAG_RESTRICTIONS);
    }
    serializer.endTag(null,TAG_USER);
    serializer.endDocument();
    userFile.finishWrite(fos);
  }
 catch (  Exception ioe) {
    Slog.e(LOG_TAG,"Error writing user info " + userInfo.id + "\n"+ ioe);
    userFile.failWrite(fos);
  }
}
