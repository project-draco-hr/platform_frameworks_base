{
  for (  String key : restrictions.keySet()) {
    Object value=restrictions.get(key);
    serializer.startTag(null,TAG_ENTRY);
    serializer.attribute(null,ATTR_KEY,key);
    if (value instanceof Boolean) {
      serializer.attribute(null,ATTR_VALUE_TYPE,ATTR_TYPE_BOOLEAN);
      serializer.text(value.toString());
    }
 else     if (value instanceof Integer) {
      serializer.attribute(null,ATTR_VALUE_TYPE,ATTR_TYPE_INTEGER);
      serializer.text(value.toString());
    }
 else     if (value == null || value instanceof String) {
      serializer.attribute(null,ATTR_VALUE_TYPE,ATTR_TYPE_STRING);
      serializer.text(value != null ? (String)value : "");
    }
 else     if (value instanceof Bundle) {
      serializer.attribute(null,ATTR_VALUE_TYPE,ATTR_TYPE_BUNDLE);
      writeBundle((Bundle)value,serializer);
    }
 else     if (value instanceof Parcelable[]) {
      serializer.attribute(null,ATTR_VALUE_TYPE,ATTR_TYPE_BUNDLE_ARRAY);
      Parcelable[] array=(Parcelable[])value;
      for (      Parcelable parcelable : array) {
        if (!(parcelable instanceof Bundle)) {
          throw new IllegalArgumentException("bundle-array can only hold Bundles");
        }
        serializer.startTag(null,TAG_ENTRY);
        serializer.attribute(null,ATTR_VALUE_TYPE,ATTR_TYPE_BUNDLE);
        writeBundle((Bundle)parcelable,serializer);
        serializer.endTag(null,TAG_ENTRY);
      }
    }
 else {
      serializer.attribute(null,ATTR_VALUE_TYPE,ATTR_TYPE_STRING_ARRAY);
      String[] values=(String[])value;
      serializer.attribute(null,ATTR_MULTIPLE,Integer.toString(values.length));
      for (      String choice : values) {
        serializer.startTag(null,TAG_VALUE);
        serializer.text(choice != null ? choice : "");
        serializer.endTag(null,TAG_VALUE);
      }
    }
    serializer.endTag(null,TAG_ENTRY);
  }
}
