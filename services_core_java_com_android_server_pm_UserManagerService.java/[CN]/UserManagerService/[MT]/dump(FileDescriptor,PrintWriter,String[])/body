{
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println("Permission Denial: can't dump UserManager from from pid=" + Binder.getCallingPid() + ", uid="+ Binder.getCallingUid()+ " without permission "+ android.Manifest.permission.DUMP);
    return;
  }
  long now=System.currentTimeMillis();
  StringBuilder sb=new StringBuilder();
synchronized (mPackagesLock) {
synchronized (mUsersLock) {
      pw.println("Users:");
      for (int i=0; i < mUsers.size(); i++) {
        UserData userData=mUsers.valueAt(i);
        if (userData == null) {
          continue;
        }
        UserInfo userInfo=userData.info;
        final int userId=userInfo.id;
        pw.print("  ");
        pw.print(userInfo);
        pw.print(" serialNo=");
        pw.print(userInfo.serialNumber);
        if (mRemovingUserIds.get(userId)) {
          pw.print(" <removing> ");
        }
        if (userInfo.partial) {
          pw.print(" <partial>");
        }
        pw.println();
        pw.print("    Created: ");
        if (userInfo.creationTime == 0) {
          pw.println("<unknown>");
        }
 else {
          sb.setLength(0);
          TimeUtils.formatDuration(now - userInfo.creationTime,sb);
          sb.append(" ago");
          pw.println(sb);
        }
        pw.print("    Last logged in: ");
        if (userInfo.lastLoggedInTime == 0) {
          pw.println("<unknown>");
        }
 else {
          sb.setLength(0);
          TimeUtils.formatDuration(now - userInfo.lastLoggedInTime,sb);
          sb.append(" ago");
          pw.println(sb);
        }
        pw.print("    Last logged in fingerprint: ");
        pw.println(userInfo.lastLoggedInFingerprint);
        pw.print("    Has profile owner: ");
        pw.println(mIsUserManaged.get(userId));
        pw.println("    Restrictions:");
synchronized (mRestrictionsLock) {
          UserRestrictionsUtils.dumpRestrictions(pw,"      ",mBaseUserRestrictions.get(userInfo.id));
          pw.println("    Device policy local restrictions:");
          UserRestrictionsUtils.dumpRestrictions(pw,"      ",mDevicePolicyLocalUserRestrictions.get(userInfo.id));
          pw.println("    Effective restrictions:");
          UserRestrictionsUtils.dumpRestrictions(pw,"      ",mCachedEffectiveUserRestrictions.get(userInfo.id));
        }
        if (userData.account != null) {
          pw.print("    Account name: " + userData.account);
          pw.println();
        }
        if (userData.seedAccountName != null) {
          pw.print("    Seed account name: " + userData.seedAccountName);
          pw.println();
          if (userData.seedAccountType != null) {
            pw.print("         account type: " + userData.seedAccountType);
            pw.println();
          }
          if (userData.seedAccountOptions != null) {
            pw.print("         account options exist");
            pw.println();
          }
        }
      }
    }
    pw.println();
    pw.println("  Device policy global restrictions:");
synchronized (mRestrictionsLock) {
      UserRestrictionsUtils.dumpRestrictions(pw,"    ",mDevicePolicyGlobalUserRestrictions);
    }
    pw.println();
    pw.println("  Global restrictions owner id:" + mGlobalRestrictionOwnerUserId);
    pw.println();
    pw.println("  Guest restrictions:");
synchronized (mGuestRestrictions) {
      UserRestrictionsUtils.dumpRestrictions(pw,"    ",mGuestRestrictions);
    }
synchronized (mUsersLock) {
      pw.println();
      pw.println("  Device managed: " + mIsDeviceManaged);
    }
synchronized (mUserStates) {
      pw.println("  Started users state: " + mUserStates);
    }
    pw.println();
    pw.println("  Max users: " + UserManager.getMaxSupportedUsers());
    pw.println("  Supports switchable users: " + UserManager.supportsMultipleUsers());
    pw.println("  All guests ephemeral: " + Resources.getSystem().getBoolean(com.android.internal.R.bool.config_guestUserEphemeral));
  }
}
