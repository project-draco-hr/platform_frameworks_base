{
  checkManageUsersPermission("Only the system can remove users");
  if (getUserRestrictions(UserHandle.getCallingUserId()).getBoolean(UserManager.DISALLOW_REMOVE_USER,false)) {
    Log.w(LOG_TAG,"Cannot remove user. DISALLOW_REMOVE_USER is enabled.");
    return false;
  }
  long ident=Binder.clearCallingIdentity();
  try {
    final UserData userData;
    int currentUser=ActivityManager.getCurrentUser();
    if (currentUser == userHandle) {
      Log.w(LOG_TAG,"Current user cannot be removed");
      return false;
    }
synchronized (mPackagesLock) {
synchronized (mUsersLock) {
        userData=mUsers.get(userHandle);
        if (userHandle == 0 || userData == null || mRemovingUserIds.get(userHandle)) {
          return false;
        }
        mRemovingUserIds.put(userHandle,true);
      }
      try {
        mAppOpsService.removeUser(userHandle);
      }
 catch (      RemoteException e) {
        Log.w(LOG_TAG,"Unable to notify AppOpsService of removing user",e);
      }
      userData.info.partial=true;
      userData.info.flags|=UserInfo.FLAG_DISABLED;
      writeUserLP(userData);
    }
    if (userData.info.profileGroupId != UserInfo.NO_PROFILE_GROUP_ID && userData.info.isManagedProfile()) {
      sendProfileRemovedBroadcast(userData.info.profileGroupId,userData.info.id);
    }
    if (DBG)     Slog.i(LOG_TAG,"Stopping user " + userHandle);
    int res;
    try {
      res=ActivityManagerNative.getDefault().stopUser(userHandle,true,new IStopUserCallback.Stub(){
        @Override public void userStopped(        int userId){
          finishRemoveUser(userId);
        }
        @Override public void userStopAborted(        int userId){
        }
      }
);
    }
 catch (    RemoteException e) {
      return false;
    }
    return res == ActivityManager.USER_OP_SUCCESS;
  }
  finally {
    Binder.restoreCallingIdentity(ident);
  }
}
