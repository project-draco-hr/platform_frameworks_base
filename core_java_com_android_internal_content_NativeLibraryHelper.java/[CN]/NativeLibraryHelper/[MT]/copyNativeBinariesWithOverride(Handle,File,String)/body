{
  try {
    if (handle.multiArch) {
      if (abiOverride != null && !CLEAR_ABI_OVERRIDE.equals(abiOverride)) {
        Slog.w(TAG,"Ignoring abiOverride for multi arch application.");
      }
      int copyRet=PackageManager.NO_NATIVE_LIBRARIES;
      if (Build.SUPPORTED_32_BIT_ABIS.length > 0) {
        copyRet=copyNativeBinariesForSupportedAbi(handle,libraryRoot,Build.SUPPORTED_32_BIT_ABIS,true);
        if (copyRet < 0 && copyRet != PackageManager.NO_NATIVE_LIBRARIES && copyRet != PackageManager.INSTALL_FAILED_NO_MATCHING_ABIS) {
          Slog.w(TAG,"Failure copying 32 bit native libraries; copyRet=" + copyRet);
          return copyRet;
        }
      }
      if (Build.SUPPORTED_64_BIT_ABIS.length > 0) {
        copyRet=copyNativeBinariesForSupportedAbi(handle,libraryRoot,Build.SUPPORTED_64_BIT_ABIS,true);
        if (copyRet < 0 && copyRet != PackageManager.NO_NATIVE_LIBRARIES && copyRet != PackageManager.INSTALL_FAILED_NO_MATCHING_ABIS) {
          Slog.w(TAG,"Failure copying 64 bit native libraries; copyRet=" + copyRet);
          return copyRet;
        }
      }
    }
 else {
      String cpuAbiOverride=null;
      if (CLEAR_ABI_OVERRIDE.equals(abiOverride)) {
        cpuAbiOverride=null;
      }
 else       if (abiOverride != null) {
        cpuAbiOverride=abiOverride;
      }
      String[] abiList=(cpuAbiOverride != null) ? new String[]{cpuAbiOverride} : Build.SUPPORTED_ABIS;
      if (Build.SUPPORTED_64_BIT_ABIS.length > 0 && cpuAbiOverride == null && hasRenderscriptBitcode(handle)) {
        abiList=Build.SUPPORTED_32_BIT_ABIS;
      }
      int copyRet=copyNativeBinariesForSupportedAbi(handle,libraryRoot,abiList,true);
      if (copyRet < 0 && copyRet != PackageManager.NO_NATIVE_LIBRARIES) {
        Slog.w(TAG,"Failure copying native libraries [errorCode=" + copyRet + "]");
        return copyRet;
      }
    }
    return PackageManager.INSTALL_SUCCEEDED;
  }
 catch (  IOException e) {
    Slog.e(TAG,"Copying native libraries failed",e);
    return PackageManager.INSTALL_FAILED_INTERNAL_ERROR;
  }
}
