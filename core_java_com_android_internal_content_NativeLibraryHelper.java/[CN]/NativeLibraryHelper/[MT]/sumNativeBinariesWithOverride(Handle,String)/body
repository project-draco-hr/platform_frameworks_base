{
  long sum=0;
  if (handle.multiArch) {
    if (abiOverride != null && !CLEAR_ABI_OVERRIDE.equals(abiOverride)) {
      Slog.w(TAG,"Ignoring abiOverride for multi arch application.");
    }
    if (Build.SUPPORTED_32_BIT_ABIS.length > 0) {
      sum+=sumNativeBinariesForSupportedAbi(handle,Build.SUPPORTED_32_BIT_ABIS);
    }
    if (Build.SUPPORTED_64_BIT_ABIS.length > 0) {
      sum+=sumNativeBinariesForSupportedAbi(handle,Build.SUPPORTED_64_BIT_ABIS);
    }
  }
 else {
    String cpuAbiOverride=null;
    if (CLEAR_ABI_OVERRIDE.equals(abiOverride)) {
      cpuAbiOverride=null;
    }
 else     if (abiOverride != null) {
      cpuAbiOverride=abiOverride;
    }
    String[] abiList=(cpuAbiOverride != null) ? new String[]{cpuAbiOverride} : Build.SUPPORTED_ABIS;
    if (Build.SUPPORTED_64_BIT_ABIS.length > 0 && cpuAbiOverride == null && hasRenderscriptBitcode(handle)) {
      abiList=Build.SUPPORTED_32_BIT_ABIS;
    }
    sum+=sumNativeBinariesForSupportedAbi(handle,abiList);
  }
  return sum;
}
