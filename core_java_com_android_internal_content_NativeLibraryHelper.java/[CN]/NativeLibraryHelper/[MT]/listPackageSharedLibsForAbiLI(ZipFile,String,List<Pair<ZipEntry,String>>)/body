{
  final int cpuAbiLen=cpuAbi.length();
  boolean hasNativeLibraries=false;
  boolean installedNativeLibraries=false;
  if (DEBUG_NATIVE) {
    Slog.d(TAG,"Checking " + zipFile.getName() + " for shared libraries of CPU ABI type "+ cpuAbi);
  }
  Enumeration<? extends ZipEntry> entries=zipFile.entries();
  while (entries.hasMoreElements()) {
    ZipEntry entry=entries.nextElement();
    if (entry.isDirectory()) {
      continue;
    }
    String entryName=entry.getName();
    if (entryName.length() < MIN_ENTRY_LENGTH || !entryName.endsWith(LIB_SUFFIX) || !entryName.startsWith(APK_LIB)) {
      continue;
    }
    int lastSlash=entryName.lastIndexOf('/');
    if (lastSlash < 0 || !entryName.regionMatches(lastSlash + 1,LIB_PREFIX,0,LIB_PREFIX_LENGTH)) {
      continue;
    }
    hasNativeLibraries=true;
    if (lastSlash != APK_LIB_LENGTH + cpuAbiLen || !entryName.regionMatches(APK_LIB_LENGTH,cpuAbi,0,cpuAbiLen))     continue;
    String libFileName=entryName.substring(lastSlash + 1);
    if (!FileUtils.isFilenameSafe(new File(libFileName))) {
      continue;
    }
    installedNativeLibraries=true;
    if (DEBUG_NATIVE) {
      Log.d(TAG,"Caching shared lib " + entry.getName());
    }
    libEntries.add(Pair.create(entry,libFileName));
  }
  if (!hasNativeLibraries)   return PACKAGE_INSTALL_NATIVE_NO_LIBRARIES;
  if (!installedNativeLibraries)   return PACKAGE_INSTALL_NATIVE_ABI_MISMATCH;
  return PACKAGE_INSTALL_NATIVE_FOUND_LIBRARIES;
}
