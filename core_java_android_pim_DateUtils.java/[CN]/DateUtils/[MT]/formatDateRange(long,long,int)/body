{
  Resources res=Resources.getSystem();
  boolean showTime=(flags & FORMAT_SHOW_TIME) != 0;
  boolean showWeekDay=(flags & FORMAT_SHOW_WEEKDAY) != 0;
  boolean showYear=(flags & FORMAT_SHOW_YEAR) != 0;
  boolean noYear=(flags & FORMAT_NO_YEAR) != 0;
  boolean useUTC=(flags & FORMAT_UTC) != 0;
  boolean abbrevWeekDay=(flags & FORMAT_ABBREV_WEEKDAY) != 0;
  boolean abbrevMonth=(flags & FORMAT_ABBREV_MONTH) != 0;
  boolean use24Hour=(flags & FORMAT_24HOUR) != 0;
  boolean noMonthDay=(flags & FORMAT_NO_MONTH_DAY) != 0;
  boolean numericDate=(flags & FORMAT_NUMERIC_DATE) != 0;
  Time startDate;
  Time endDate;
  if (useUTC) {
    startDate=new Time(Time.TIMEZONE_UTC);
    endDate=new Time(Time.TIMEZONE_UTC);
  }
 else {
    startDate=new Time();
    endDate=new Time();
  }
  startDate.set(startMillis);
  endDate.set(endMillis);
  int startJulianDay=Time.getJulianDay(startMillis,startDate.gmtoff);
  int endJulianDay=Time.getJulianDay(endMillis,endDate.gmtoff);
  int dayDistance=endJulianDay - startJulianDay;
  if ((endDate.hour | endDate.minute | endDate.second) == 0 && (!showTime || dayDistance <= 1) && (startMillis != endMillis)) {
    endDate.monthDay-=1;
    endDate.normalize(true);
  }
  int startDay=startDate.monthDay;
  int startMonthNum=startDate.month;
  int startYear=startDate.year;
  int endDay=endDate.monthDay;
  int endMonthNum=endDate.month;
  int endYear=endDate.year;
  String startWeekDayString="";
  String endWeekDayString="";
  if (showWeekDay) {
    String weekDayFormat="";
    if (abbrevWeekDay) {
      weekDayFormat=ABBREV_WEEKDAY_FORMAT;
    }
 else {
      weekDayFormat=WEEKDAY_FORMAT;
    }
    startWeekDayString=startDate.format(weekDayFormat);
    endWeekDayString=endDate.format(weekDayFormat);
  }
  String startTimeString="";
  String endTimeString="";
  if (showTime) {
    String startTimeFormat="";
    String endTimeFormat="";
    if (use24Hour) {
      startTimeFormat=HOUR_MINUTE_24;
      endTimeFormat=HOUR_MINUTE_24;
    }
 else {
      boolean abbrevTime=(flags & FORMAT_ABBREV_TIME) != 0;
      boolean capAMPM=(flags & FORMAT_CAP_AMPM) != 0;
      boolean noNoon=(flags & FORMAT_NO_NOON) != 0;
      boolean capNoon=(flags & FORMAT_CAP_NOON) != 0;
      boolean noMidnight=(flags & FORMAT_NO_MIDNIGHT) != 0;
      boolean capMidnight=(flags & FORMAT_CAP_MIDNIGHT) != 0;
      boolean startOnTheHour=startDate.minute == 0 && startDate.second == 0;
      boolean endOnTheHour=endDate.minute == 0 && endDate.second == 0;
      if (abbrevTime && startOnTheHour) {
        if (capAMPM) {
          startTimeFormat=HOUR_CAP_AMPM;
        }
 else {
          startTimeFormat=HOUR_AMPM;
        }
      }
 else {
        if (capAMPM) {
          startTimeFormat=HOUR_MINUTE_CAP_AMPM;
        }
 else {
          startTimeFormat=HOUR_MINUTE_AMPM;
        }
      }
      if (abbrevTime && endOnTheHour) {
        if (capAMPM) {
          endTimeFormat=HOUR_CAP_AMPM;
        }
 else {
          endTimeFormat=HOUR_AMPM;
        }
      }
 else {
        if (capAMPM) {
          endTimeFormat=HOUR_MINUTE_CAP_AMPM;
        }
 else {
          endTimeFormat=HOUR_MINUTE_AMPM;
        }
      }
      if (startDate.hour == 12 && startOnTheHour && !noNoon) {
        if (capNoon) {
          startTimeFormat=res.getString(com.android.internal.R.string.Noon);
        }
 else {
          startTimeFormat=res.getString(com.android.internal.R.string.noon);
        }
      }
      if (endDate.hour == 12 && endOnTheHour && !noNoon) {
        if (capNoon) {
          endTimeFormat=res.getString(com.android.internal.R.string.Noon);
        }
 else {
          endTimeFormat=res.getString(com.android.internal.R.string.noon);
        }
      }
 else       if (endDate.hour == 0 && endOnTheHour && !noMidnight) {
        if (capMidnight) {
          endTimeFormat=res.getString(com.android.internal.R.string.Midnight);
        }
 else {
          endTimeFormat=res.getString(com.android.internal.R.string.midnight);
        }
      }
    }
    startTimeString=startDate.format(startTimeFormat);
    endTimeString=endDate.format(endTimeFormat);
  }
  long millis=System.currentTimeMillis();
  Time time=new Time();
  time.set(millis);
  int currentYear=time.year;
  showYear=showYear || (!noYear && (startYear != endYear || startYear != currentYear));
  String defaultDateFormat, fullFormat, dateRange;
  if (numericDate) {
    defaultDateFormat=res.getString(com.android.internal.R.string.numeric_date);
  }
 else   if (showYear) {
    if (abbrevMonth) {
      if (noMonthDay) {
        defaultDateFormat=res.getString(com.android.internal.R.string.abbrev_month_year);
      }
 else {
        defaultDateFormat=res.getString(com.android.internal.R.string.abbrev_month_day_year);
      }
    }
 else {
      if (noMonthDay) {
        defaultDateFormat=res.getString(com.android.internal.R.string.month_year);
      }
 else {
        defaultDateFormat=res.getString(com.android.internal.R.string.month_day_year);
      }
    }
  }
 else {
    if (abbrevMonth) {
      if (noMonthDay) {
        defaultDateFormat=res.getString(com.android.internal.R.string.abbrev_month);
      }
 else {
        defaultDateFormat=res.getString(com.android.internal.R.string.abbrev_month_day);
      }
    }
 else {
      if (noMonthDay) {
        defaultDateFormat=res.getString(com.android.internal.R.string.month);
      }
 else {
        defaultDateFormat=res.getString(com.android.internal.R.string.month_day);
      }
    }
  }
  if (showWeekDay) {
    if (showTime) {
      fullFormat=res.getString(com.android.internal.R.string.wday1_date1_time1_wday2_date2_time2);
    }
 else {
      fullFormat=res.getString(com.android.internal.R.string.wday1_date1_wday2_date2);
    }
  }
 else {
    if (showTime) {
      fullFormat=res.getString(com.android.internal.R.string.date1_time1_date2_time2);
    }
 else {
      fullFormat=res.getString(com.android.internal.R.string.date1_date2);
    }
  }
  if (noMonthDay && startMonthNum == endMonthNum) {
    String startDateString=startDate.format(defaultDateFormat);
    return startDateString;
  }
  if (startYear != endYear || noMonthDay) {
    String startDateString=startDate.format(defaultDateFormat);
    String endDateString=endDate.format(defaultDateFormat);
    dateRange=String.format(fullFormat,startWeekDayString,startDateString,startTimeString,endWeekDayString,endDateString,endTimeString);
    return dateRange;
  }
  String monthFormat;
  if (numericDate) {
    monthFormat=NUMERIC_MONTH_FORMAT;
  }
 else   if (abbrevMonth) {
    monthFormat=ABBREV_MONTH_FORMAT;
  }
 else {
    monthFormat=MONTH_FORMAT;
  }
  String startMonthString=startDate.format(monthFormat);
  String startMonthDayString=startDate.format(MONTH_DAY_FORMAT);
  String startYearString=startDate.format(YEAR_FORMAT);
  String endMonthString=endDate.format(monthFormat);
  String endMonthDayString=endDate.format(MONTH_DAY_FORMAT);
  String endYearString=endDate.format(YEAR_FORMAT);
  if (startMonthNum != endMonthNum) {
    int index=0;
    if (showWeekDay)     index=1;
    if (showYear)     index+=2;
    if (showTime)     index+=4;
    if (numericDate)     index+=8;
    int resId=sameYearTable[index];
    fullFormat=res.getString(resId);
    dateRange=String.format(fullFormat,startWeekDayString,startMonthString,startMonthDayString,startYearString,startTimeString,endWeekDayString,endMonthString,endMonthDayString,endYearString,endTimeString);
    return dateRange;
  }
  if (startDay != endDay) {
    int index=0;
    if (showWeekDay)     index=1;
    if (showYear)     index+=2;
    if (showTime)     index+=4;
    if (numericDate)     index+=8;
    int resId=sameMonthTable[index];
    fullFormat=res.getString(resId);
    dateRange=String.format(fullFormat,startWeekDayString,startMonthString,startMonthDayString,startYearString,startTimeString,endWeekDayString,endMonthString,endMonthDayString,endYearString,endTimeString);
    return dateRange;
  }
  boolean showDate=(flags & FORMAT_SHOW_DATE) != 0;
  if (!showTime && !showDate && !showWeekDay)   showDate=true;
  String timeString="";
  if (showTime) {
    if (startMillis == endMillis) {
      timeString=startTimeString;
    }
 else {
      String timeFormat=res.getString(com.android.internal.R.string.time1_time2);
      timeString=String.format(timeFormat,startTimeString,endTimeString);
    }
  }
  fullFormat="";
  String dateString="";
  if (showDate) {
    dateString=startDate.format(defaultDateFormat);
    if (showWeekDay) {
      if (showTime) {
        fullFormat=res.getString(com.android.internal.R.string.time_wday_date);
      }
 else {
        fullFormat=res.getString(com.android.internal.R.string.wday_date);
      }
    }
 else {
      if (showTime) {
        fullFormat=res.getString(com.android.internal.R.string.time_date);
      }
 else {
        return dateString;
      }
    }
  }
 else   if (showWeekDay) {
    if (showTime) {
      fullFormat=res.getString(com.android.internal.R.string.time_wday);
    }
 else {
      return startWeekDayString;
    }
  }
 else   if (showTime) {
    return timeString;
  }
  dateRange=String.format(fullFormat,timeString,startWeekDayString,dateString);
  return dateRange;
}
