{
  out.writeInt(TAG);
  out.writeInt(this.viewId);
  out.writeString(this.methodName);
  out.writeInt(this.type);
  if (false) {
    Log.d(LOG_TAG,"write viewId=0x" + Integer.toHexString(this.viewId) + " methodName="+ this.methodName+ " type="+ this.type);
  }
switch (this.type) {
case BOOLEAN:
    out.writeInt((Boolean)this.value ? 1 : 0);
  break;
case BYTE:
out.writeByte((Byte)this.value);
break;
case SHORT:
out.writeInt((Short)this.value);
break;
case INT:
out.writeInt((Integer)this.value);
break;
case LONG:
out.writeLong((Long)this.value);
break;
case FLOAT:
out.writeFloat((Float)this.value);
break;
case DOUBLE:
out.writeDouble((Double)this.value);
break;
case CHAR:
out.writeInt((int)((Character)this.value).charValue());
break;
case STRING:
out.writeString((String)this.value);
break;
case CHAR_SEQUENCE:
TextUtils.writeToParcel((CharSequence)this.value,out,flags);
break;
case URI:
out.writeInt(this.value != null ? 1 : 0);
if (this.value != null) {
((Uri)this.value).writeToParcel(out,flags);
}
break;
case BITMAP:
out.writeInt(this.value != null ? 1 : 0);
if (this.value != null) {
((Bitmap)this.value).writeToParcel(out,flags);
}
break;
case BUNDLE:
out.writeBundle((Bundle)this.value);
break;
case INTENT:
out.writeInt(this.value != null ? 1 : 0);
if (this.value != null) {
((Intent)this.value).writeToParcel(out,flags);
}
break;
case COLOR_STATE_LIST:
out.writeInt(this.value != null ? 1 : 0);
if (this.value != null) {
((ColorStateList)this.value).writeToParcel(out,flags);
}
default :
break;
}
}
