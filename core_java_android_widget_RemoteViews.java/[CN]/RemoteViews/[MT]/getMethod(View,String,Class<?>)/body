{
  Method method;
  Class<? extends View> klass=view.getClass();
synchronized (sMethodsLock) {
    ArrayMap<MutablePair<String,Class<?>>,Method> methods=sMethods.get(klass);
    if (methods == null) {
      methods=new ArrayMap<MutablePair<String,Class<?>>,Method>();
      sMethods.put(klass,methods);
    }
    mPair.first=methodName;
    mPair.second=paramType;
    method=methods.get(mPair);
    if (method == null) {
      try {
        method=klass.getMethod(methodName,paramType);
      }
 catch (      NoSuchMethodException ex) {
        throw new ActionException("view: " + klass.getName() + " doesn't have method: "+ methodName+ getParameters(paramType));
      }
      if (!method.isAnnotationPresent(RemotableViewMethod.class)) {
        throw new ActionException("view: " + klass.getName() + " can't use method with RemoteViews: "+ methodName+ getParameters(paramType));
      }
      methods.put(new MutablePair<String,Class<?>>(methodName,paramType),method);
    }
  }
  return method;
}
