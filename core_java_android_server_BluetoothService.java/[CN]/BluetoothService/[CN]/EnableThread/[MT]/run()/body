{
  boolean res=(enableNative() == 0);
  if (res) {
    int retryCount=2;
    boolean running=false;
    while ((retryCount-- > 0) && !running) {
      mEventLoop.start();
      int pollCount=5;
      while ((pollCount-- > 0) && !running) {
        if (mEventLoop.isEventLoopRunning()) {
          running=true;
          break;
        }
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
        }
      }
    }
    if (!running) {
      log("bt EnableThread giving up");
      res=false;
      disableNative();
    }
  }
  if (res) {
    if (!setupNativeDataNative()) {
      return;
    }
    if (mSaveSetting) {
      persistBluetoothOnSetting(true);
    }
    if (mContext.getResources().getBoolean(com.android.internal.R.bool.config_voice_capable)) {
      int[] uuids={BluetoothUuid.getServiceIdentifierFromParcelUuid(BluetoothUuid.Handsfree_AG),BluetoothUuid.getServiceIdentifierFromParcelUuid(BluetoothUuid.HSP_AG),BluetoothUuid.getServiceIdentifierFromParcelUuid(BluetoothUuid.PBAP_PSE),BluetoothUuid.getServiceIdentifierFromParcelUuid(BluetoothUuid.ObexObjectPush)};
      mAdapterSdpUuids=uuids;
    }
 else {
      int[] uuids={BluetoothUuid.getServiceIdentifierFromParcelUuid(BluetoothUuid.HSP_AG),BluetoothUuid.getServiceIdentifierFromParcelUuid(BluetoothUuid.ObexObjectPush)};
      mAdapterSdpUuids=uuids;
    }
    mAdapterSdpHandles=addReservedServiceRecordsNative(mAdapterSdpUuids);
    setBluetoothTetheringNative(true,BluetoothPan.NAP_ROLE,BluetoothPan.NAP_BRIDGE);
    mIsDiscovering=false;
    mBondState.readAutoPairingData();
    mBondState.loadBondState();
    initProfileState();
    long ident=Binder.clearCallingIdentity();
    try {
      mBatteryStats.noteBluetoothOn();
    }
 catch (    RemoteException e) {
    }
 finally {
      Binder.restoreCallingIdentity(ident);
    }
  }
  mEnableThread=null;
  setBluetoothState(res ? BluetoothAdapter.STATE_ON : BluetoothAdapter.STATE_OFF);
  if (res) {
    String[] propVal={"Pairable",getProperty("Pairable")};
    mEventLoop.onPropertyChanged(propVal);
  }
  if (mIsAirplaneSensitive && isAirplaneModeOn() && !mIsAirplaneToggleable) {
    disable(false);
  }
}
