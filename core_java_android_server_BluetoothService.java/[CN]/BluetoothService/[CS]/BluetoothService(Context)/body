{
  mContext=context;
  mBatteryStats=IBatteryStats.Stub.asInterface(ServiceManager.getService("batteryinfo"));
  initializeNativeDataNative();
  if (isEnabledNative() == 1) {
    Log.w(TAG,"Bluetooth daemons already running - runtime restart? ");
    disableNative();
  }
  mBluetoothState=BluetoothAdapter.STATE_OFF;
  mIsDiscovering=false;
  mBondState=new BluetoothBondState(context,this);
  mAdapterProperties=new BluetoothAdapterProperties(context,this);
  mDeviceProperties=new BluetoothDeviceProperties(this);
  mDeviceServiceChannelCache=new HashMap<String,Map<ParcelUuid,Integer>>();
  mDeviceOobData=new HashMap<String,Pair<byte[],byte[]>>();
  mUuidIntentTracker=new ArrayList<String>();
  mUuidCallbackTracker=new HashMap<RemoteService,IBluetoothCallback>();
  mServiceRecordToPid=new HashMap<Integer,Integer>();
  mDeviceProfileState=new HashMap<String,BluetoothDeviceProfileState>();
  mA2dpProfileState=new BluetoothProfileState(mContext,BluetoothProfileState.A2DP);
  mHfpProfileState=new BluetoothProfileState(mContext,BluetoothProfileState.HFP);
  mHfpProfileState.start();
  mA2dpProfileState.start();
  IntentFilter filter=new IntentFilter();
  registerForAirplaneMode(filter);
  filter.addAction(Intent.ACTION_DOCK_EVENT);
  mContext.registerReceiver(mReceiver,filter);
  mBluetoothInputProfileHandler=BluetoothInputProfileHandler.getInstance(mContext,this);
  mBluetoothPanProfileHandler=BluetoothPanProfileHandler.getInstance(mContext,this);
  mBluetoothHealthProfileHandler=BluetoothHealthProfileHandler.getInstance(mContext,this);
  mIncomingConnections=new HashMap<String,Pair<Integer,String>>();
}
