{
  mContext.enforceCallingOrSelfPermission(BLUETOOTH_PERM,"Need BLUETOOTH permission");
  if (!isEnabledInternal())   return false;
  if (!BluetoothAdapter.checkBluetoothAddress(address)) {
    return false;
  }
  RemoteService service=new RemoteService(address,uuid);
  if (uuid != null && mUuidCallbackTracker.get(service) != null) {
    return false;
  }
  if (mUuidIntentTracker.contains(address)) {
    if (uuid != null) {
      mUuidCallbackTracker.put(new RemoteService(address,uuid),callback);
    }
    return true;
  }
  boolean ret;
  if (getBondState(address) == BluetoothDevice.BOND_BONDED) {
    String path=getObjectPathFromAddress(address);
    if (path == null)     return false;
    ret=discoverServicesNative(path,"");
  }
 else {
    ret=createDeviceNative(address);
  }
  mUuidIntentTracker.add(address);
  if (uuid != null) {
    mUuidCallbackTracker.put(new RemoteService(address,uuid),callback);
  }
  Message message=mHandler.obtainMessage(MESSAGE_UUID_INTENT);
  message.obj=address;
  mHandler.sendMessageDelayed(message,UUID_INTENT_DELAY);
  return ret;
}
