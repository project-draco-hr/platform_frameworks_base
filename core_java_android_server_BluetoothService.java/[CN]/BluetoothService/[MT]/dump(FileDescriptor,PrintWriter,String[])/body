{
  pw.println("\nmIsAirplaneSensitive = " + mIsAirplaneSensitive + "\n");
switch (mBluetoothState) {
case BluetoothAdapter.STATE_OFF:
    pw.println("\nBluetooth OFF\n");
  return;
case BluetoothAdapter.STATE_TURNING_ON:
pw.println("\nBluetooth TURNING ON\n");
return;
case BluetoothAdapter.STATE_TURNING_OFF:
pw.println("\nBluetooth TURNING OFF\n");
return;
case BluetoothAdapter.STATE_ON:
pw.println("\nBluetooth ON\n");
}
pw.println("\nLocal address = " + getAddress());
pw.println("\nLocal name = " + getName());
pw.println("\nisDiscovering() = " + isDiscovering());
BluetoothHeadset headset=new BluetoothHeadset(mContext,null);
pw.println("\n--Known devices--");
for (String address : mDeviceProperties.keySet()) {
int bondState=mBondState.getBondState(address);
pw.printf("%s %10s (%d) %s\n",address,toBondStateString(bondState),mBondState.getAttempt(address),getRemoteName(address));
if (bondState == BluetoothDevice.BOND_BONDED) {
ParcelUuid[] uuids=getRemoteUuids(address);
if (uuids == null) {
pw.printf("\tuuids = null\n");
}
 else {
for (ParcelUuid uuid : uuids) {
pw.printf("\t" + uuid + "\n");
}
}
}
}
String value=getProperty("Devices");
String[] devicesObjectPath=null;
if (value != null) {
devicesObjectPath=value.split(",");
}
pw.println("\n--ACL connected devices--");
for (String device : devicesObjectPath) {
pw.println(getAddressFromObjectPath(device));
}
pw.println("\n--Headset Service--");
switch (headset.getState()) {
case BluetoothHeadset.STATE_DISCONNECTED:
pw.println("getState() = STATE_DISCONNECTED");
break;
case BluetoothHeadset.STATE_CONNECTING:
pw.println("getState() = STATE_CONNECTING");
break;
case BluetoothHeadset.STATE_CONNECTED:
pw.println("getState() = STATE_CONNECTED");
break;
case BluetoothHeadset.STATE_ERROR:
pw.println("getState() = STATE_ERROR");
break;
}
pw.println("getCurrentHeadset() = " + headset.getCurrentHeadset());
pw.println("getBatteryUsageHint() = " + headset.getBatteryUsageHint());
headset.close();
}
