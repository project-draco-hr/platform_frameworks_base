{
switch (mBluetoothState) {
case BluetoothAdapter.STATE_OFF:
    pw.println("Bluetooth OFF\n");
  return;
case BluetoothAdapter.STATE_TURNING_ON:
pw.println("Bluetooth TURNING ON\n");
return;
case BluetoothAdapter.STATE_TURNING_OFF:
pw.println("Bluetooth TURNING OFF\n");
return;
case BluetoothAdapter.STATE_ON:
pw.println("Bluetooth ON\n");
}
pw.println("mIsAirplaneSensitive = " + mIsAirplaneSensitive);
pw.println("mIsAirplaneToggleable = " + mIsAirplaneToggleable);
pw.println("Local address = " + getAddress());
pw.println("Local name = " + getName());
pw.println("isDiscovering() = " + isDiscovering());
BluetoothHeadset headset=new BluetoothHeadset(mContext,null);
pw.println("\n--Known devices--");
for (String address : mDeviceProperties.keySet()) {
int bondState=mBondState.getBondState(address);
pw.printf("%s %10s (%d) %s\n",address,toBondStateString(bondState),mBondState.getAttempt(address),getRemoteName(address));
Map<ParcelUuid,Integer> uuidChannels=mDeviceServiceChannelCache.get(address);
if (uuidChannels == null) {
pw.println("\tuuids = null");
}
 else {
for (ParcelUuid uuid : uuidChannels.keySet()) {
Integer channel=uuidChannels.get(uuid);
if (channel == null) {
pw.println("\t" + uuid);
}
 else {
pw.println("\t" + uuid + " RFCOMM channel = "+ channel);
}
}
}
for (RemoteService service : mUuidCallbackTracker.keySet()) {
if (service.address.equals(address)) {
pw.println("\tPENDING CALLBACK: " + service.uuid);
}
}
}
String value=getProperty("Devices");
String[] devicesObjectPath=null;
if (value != null) {
devicesObjectPath=value.split(",");
}
pw.println("\n--ACL connected devices--");
if (devicesObjectPath != null) {
for (String device : devicesObjectPath) {
pw.println(getAddressFromObjectPath(device));
}
}
pw.println("\n--Headset Service--");
switch (headset.getState()) {
case BluetoothHeadset.STATE_DISCONNECTED:
pw.println("getState() = STATE_DISCONNECTED");
break;
case BluetoothHeadset.STATE_CONNECTING:
pw.println("getState() = STATE_CONNECTING");
break;
case BluetoothHeadset.STATE_CONNECTED:
pw.println("getState() = STATE_CONNECTED");
break;
case BluetoothHeadset.STATE_ERROR:
pw.println("getState() = STATE_ERROR");
break;
}
pw.println("\ngetCurrentHeadset() = " + headset.getCurrentHeadset());
pw.println("getBatteryUsageHint() = " + headset.getBatteryUsageHint());
headset.close();
pw.println("\n--Application Service Records--");
for (Integer handle : mServiceRecordToPid.keySet()) {
Integer pid=mServiceRecordToPid.get(handle);
pw.println("\tpid " + pid + " handle "+ Integer.toHexString(handle));
}
}
