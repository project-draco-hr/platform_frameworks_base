{
  if (DBG)   Log.d(TAG,"updateDeviceServiceChannelCache(" + address + ")");
  ParcelUuid[] deviceUuids=getRemoteUuids(address);
  ArrayList<ParcelUuid> applicationUuids=new ArrayList<ParcelUuid>();
synchronized (this) {
    for (    RemoteService service : mUuidCallbackTracker.keySet()) {
      if (service.address.equals(address)) {
        applicationUuids.add(service.uuid);
      }
    }
  }
  Map<ParcelUuid,Integer> uuidToChannelMap=new HashMap<ParcelUuid,Integer>();
  for (  ParcelUuid uuid : RFCOMM_UUIDS) {
    if (BluetoothUuid.isUuidPresent(deviceUuids,uuid)) {
      int channel=getDeviceServiceChannelForUuid(address,uuid);
      uuidToChannelMap.put(uuid,channel);
      if (DBG)       Log.d(TAG,"\tuuid(system): " + uuid + " "+ channel);
    }
  }
  for (  ParcelUuid uuid : applicationUuids) {
    if (BluetoothUuid.isUuidPresent(deviceUuids,uuid)) {
      int channel=getDeviceServiceChannelForUuid(address,uuid);
      uuidToChannelMap.put(uuid,channel);
      if (DBG)       Log.d(TAG,"\tuuid(application): " + uuid + " "+ channel);
    }
  }
synchronized (this) {
    for (Iterator<RemoteService> iter=mUuidCallbackTracker.keySet().iterator(); iter.hasNext(); ) {
      RemoteService service=iter.next();
      if (service.address.equals(address)) {
        if (uuidToChannelMap.containsKey(service.uuid)) {
          int channel=uuidToChannelMap.get(service.uuid);
          if (DBG)           Log.d(TAG,"Making callback for " + service.uuid + " with result "+ channel);
          IBluetoothCallback callback=mUuidCallbackTracker.get(service);
          if (callback != null) {
            try {
              callback.onRfcommChannelFound(channel);
            }
 catch (            RemoteException e) {
              Log.e(TAG,"",e);
            }
          }
          iter.remove();
        }
      }
    }
    mDeviceServiceChannelCache.put(address,uuidToChannelMap);
  }
}
