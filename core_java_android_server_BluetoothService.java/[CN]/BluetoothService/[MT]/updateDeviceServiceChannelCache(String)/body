{
  ParcelUuid[] deviceUuids=getRemoteUuids(address);
  int channel;
  if (DBG)   log("updateDeviceServiceChannelCache(" + address + ")");
  ArrayList<ParcelUuid> applicationUuids=new ArrayList();
synchronized (this) {
    for (    RemoteService service : mUuidCallbackTracker.keySet()) {
      if (service.address.equals(address)) {
        applicationUuids.add(service.uuid);
      }
    }
  }
  Map<ParcelUuid,Integer> value=new HashMap<ParcelUuid,Integer>();
  for (  ParcelUuid uuid : RFCOMM_UUIDS) {
    if (BluetoothUuid.isUuidPresent(deviceUuids,uuid)) {
      channel=getDeviceServiceChannelNative(getObjectPathFromAddress(address),uuid.toString(),0x0004);
      if (DBG)       log("\tuuid(system): " + uuid + " "+ channel);
      value.put(uuid,channel);
    }
  }
  for (  ParcelUuid uuid : applicationUuids) {
    if (BluetoothUuid.isUuidPresent(deviceUuids,uuid)) {
      channel=getDeviceServiceChannelNative(getObjectPathFromAddress(address),uuid.toString(),0x0004);
      if (DBG)       log("\tuuid(application): " + uuid + " "+ channel);
      value.put(uuid,channel);
    }
  }
synchronized (this) {
    for (Iterator<RemoteService> iter=mUuidCallbackTracker.keySet().iterator(); iter.hasNext(); ) {
      RemoteService service=iter.next();
      if (service.address.equals(address)) {
        channel=-1;
        if (value.get(service.uuid) != null) {
          channel=value.get(service.uuid);
        }
        if (channel != -1) {
          if (DBG)           log("Making callback for " + service.uuid + " with result "+ channel);
          IBluetoothCallback callback=mUuidCallbackTracker.get(service);
          if (callback != null) {
            try {
              callback.onRfcommChannelFound(channel);
            }
 catch (            RemoteException e) {
              Log.e(TAG,"",e);
            }
          }
          iter.remove();
        }
      }
    }
    mDeviceServiceChannelCache.put(address,value);
  }
}
