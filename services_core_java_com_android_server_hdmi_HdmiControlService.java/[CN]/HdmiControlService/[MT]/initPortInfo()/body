{
  assertRunOnServiceThread();
  HdmiPortInfo[] cecPortInfo=null;
  if (mCecController != null) {
    cecPortInfo=mCecController.getPortInfos();
  }
  if (cecPortInfo == null) {
    return;
  }
  SparseArray<HdmiPortInfo> portInfoMap=new SparseArray<>();
  SparseIntArray portIdMap=new SparseIntArray();
  SparseArray<HdmiDeviceInfo> portDeviceMap=new SparseArray<>();
  for (  HdmiPortInfo info : cecPortInfo) {
    portIdMap.put(info.getAddress(),info.getId());
    portInfoMap.put(info.getId(),info);
    portDeviceMap.put(info.getId(),new HdmiDeviceInfo(info.getAddress(),info.getId()));
  }
  mPortIdMap=new UnmodifiableSparseIntArray(portIdMap);
  mPortInfoMap=new UnmodifiableSparseArray<>(portInfoMap);
  mPortDeviceMap=new UnmodifiableSparseArray<>(portDeviceMap);
  HdmiPortInfo[] mhlPortInfo=mMhlController.getPortInfos();
  ArraySet<Integer> mhlSupportedPorts=new ArraySet<Integer>(mhlPortInfo.length);
  for (  HdmiPortInfo info : mhlPortInfo) {
    if (info.isMhlSupported()) {
      mhlSupportedPorts.add(info.getId());
    }
  }
  if (mhlSupportedPorts.isEmpty()) {
    mPortInfo=Collections.unmodifiableList(Arrays.asList(cecPortInfo));
    return;
  }
  ArrayList<HdmiPortInfo> result=new ArrayList<>(cecPortInfo.length);
  for (  HdmiPortInfo info : cecPortInfo) {
    if (mhlSupportedPorts.contains(info.getId())) {
      result.add(new HdmiPortInfo(info.getId(),info.getType(),info.getAddress(),info.isCecSupported(),true,info.isArcSupported()));
    }
 else {
      result.add(info);
    }
  }
  mPortInfo=Collections.unmodifiableList(result);
}
