{
  assertRunOnServiceThread();
  final SparseArray<HdmiCecLocalDevice> devices=new SparseArray<>();
  final SparseIntArray finished=new SparseIntArray();
  mCecController.clearLogicalAddress();
  for (  int type : deviceTypes) {
    final HdmiCecLocalDevice localDevice=HdmiCecLocalDevice.create(this,type);
    localDevice.init();
    mCecController.allocateLogicalAddress(type,localDevice.getPreferredAddress(),new AllocateAddressCallback(){
      @Override public void onAllocated(      int deviceType,      int logicalAddress){
        if (logicalAddress == Constants.ADDR_UNREGISTERED) {
          Slog.e(TAG,"Failed to allocate address:[device_type:" + deviceType + "]");
        }
 else {
          HdmiCecDeviceInfo deviceInfo=createDeviceInfo(logicalAddress,deviceType);
          localDevice.setDeviceInfo(deviceInfo);
          mCecController.addLocalDevice(deviceType,localDevice);
          mCecController.addLogicalAddress(logicalAddress);
          devices.append(logicalAddress,localDevice);
        }
        finished.append(deviceType,logicalAddress);
        if (deviceTypes.size() == finished.size()) {
          if (mPowerStatus == HdmiControlManager.POWER_STATUS_TRANSIENT_TO_ON) {
            mPowerStatus=HdmiControlManager.POWER_STATUS_ON;
          }
          notifyAddressAllocated(devices);
        }
      }
    }
);
  }
}
