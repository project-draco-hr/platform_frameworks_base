{
  HistoryItem rec=getHistory();
  if (rec != null) {
    pw.println("Battery History:");
    int oldState=0;
    int oldStatus=-1;
    int oldHealth=-1;
    int oldPlug=-1;
    int oldTemp=-1;
    int oldVolt=-1;
    while (rec != null) {
      pw.print("  ");
      pw.print(rec.time);
      pw.print(" ");
      if (rec.cmd == HistoryItem.CMD_START) {
        pw.println(" START");
      }
 else {
        if (rec.batteryLevel < 10)         pw.print("00");
 else         if (rec.batteryLevel < 100)         pw.print("0");
        pw.print(rec.batteryLevel);
        pw.print(" ");
        if (rec.states < 0x10)         pw.print("0000000");
 else         if (rec.states < 0x100)         pw.print("000000");
 else         if (rec.states < 0x1000)         pw.print("00000");
 else         if (rec.states < 0x10000)         pw.print("0000");
 else         if (rec.states < 0x100000)         pw.print("000");
 else         if (rec.states < 0x1000000)         pw.print("00");
 else         if (rec.states < 0x10000000)         pw.print("0");
        pw.print(Integer.toHexString(rec.states));
        if (oldStatus != rec.batteryStatus) {
          oldStatus=rec.batteryStatus;
          pw.print(" status=");
switch (oldStatus) {
case BatteryManager.BATTERY_STATUS_UNKNOWN:
            pw.print("unknown");
          break;
case BatteryManager.BATTERY_STATUS_CHARGING:
        pw.print("charging");
      break;
case BatteryManager.BATTERY_STATUS_DISCHARGING:
    pw.print("discharging");
  break;
case BatteryManager.BATTERY_STATUS_NOT_CHARGING:
pw.print("not-charging");
break;
case BatteryManager.BATTERY_STATUS_FULL:
pw.print("full");
break;
default :
pw.print(oldStatus);
break;
}
}
if (oldHealth != rec.batteryHealth) {
oldHealth=rec.batteryHealth;
pw.print(" health=");
switch (oldHealth) {
case BatteryManager.BATTERY_HEALTH_UNKNOWN:
pw.print("unknown");
break;
case BatteryManager.BATTERY_HEALTH_GOOD:
pw.print("good");
break;
case BatteryManager.BATTERY_HEALTH_OVERHEAT:
pw.print("overheat");
break;
case BatteryManager.BATTERY_HEALTH_DEAD:
pw.print("dead");
break;
case BatteryManager.BATTERY_HEALTH_OVER_VOLTAGE:
pw.print("over-voltage");
break;
case BatteryManager.BATTERY_HEALTH_UNSPECIFIED_FAILURE:
pw.print("failure");
break;
default :
pw.print(oldHealth);
break;
}
}
if (oldPlug != rec.batteryPlugType) {
oldPlug=rec.batteryPlugType;
pw.print(" plug=");
switch (oldPlug) {
case 0:
pw.print("none");
break;
case BatteryManager.BATTERY_PLUGGED_AC:
pw.print("ac");
break;
case BatteryManager.BATTERY_PLUGGED_USB:
pw.print("usb");
break;
default :
pw.print(oldPlug);
break;
}
}
if (oldTemp != rec.batteryTemperature) {
oldTemp=rec.batteryTemperature;
pw.print(" temp=");
pw.print(oldTemp);
}
if (oldVolt != rec.batteryVoltage) {
oldVolt=rec.batteryVoltage;
pw.print(" volt=");
pw.print(oldVolt);
}
printBitDescriptions(pw,oldState,rec.states,HISTORY_STATE_DESCRIPTIONS);
pw.println();
}
oldState=rec.states;
rec=rec.next;
}
}
pw.println("Statistics since last charge:");
pw.println("  System starts: " + getStartCount() + ", currently on battery: "+ getIsOnBattery());
dumpLocked(pw,"",STATS_SINCE_CHARGED,-1);
pw.println("");
pw.println("Statistics since last unplugged:");
dumpLocked(pw,"",STATS_SINCE_UNPLUGGED,-1);
}
