{
  final long rawUptime=SystemClock.uptimeMillis() * 1000;
  final long rawRealtime=SystemClock.elapsedRealtime() * 1000;
  final long batteryUptime=getBatteryUptime(rawUptime);
  final long batteryRealtime=getBatteryRealtime(rawRealtime);
  final long whichBatteryUptime=computeBatteryUptime(rawUptime,which);
  final long whichBatteryRealtime=computeBatteryRealtime(rawRealtime,which);
  final long totalRealtime=computeRealtime(rawRealtime,which);
  final long totalUptime=computeUptime(rawUptime,which);
  StringBuilder sb=new StringBuilder(128);
  SparseArray<? extends Uid> uidStats=getUidStats();
  final int NU=uidStats.size();
  sb.setLength(0);
  sb.append(prefix);
  sb.append("  Time on battery: ");
  formatTimeMs(sb,whichBatteryRealtime / 1000);
  sb.append("(");
  sb.append(formatRatioLocked(whichBatteryRealtime,totalRealtime));
  sb.append(") realtime, ");
  formatTimeMs(sb,whichBatteryUptime / 1000);
  sb.append("(");
  sb.append(formatRatioLocked(whichBatteryUptime,totalRealtime));
  sb.append(") uptime");
  pw.println(sb.toString());
  sb.setLength(0);
  sb.append(prefix);
  sb.append("  Total run time: ");
  formatTimeMs(sb,totalRealtime / 1000);
  sb.append("realtime, ");
  formatTimeMs(sb,totalUptime / 1000);
  sb.append("uptime, ");
  pw.println(sb.toString());
  final long screenOnTime=getScreenOnTime(batteryRealtime,which);
  final long phoneOnTime=getPhoneOnTime(batteryRealtime,which);
  final long wifiRunningTime=getWifiRunningTime(batteryRealtime,which);
  final long wifiOnTime=getWifiOnTime(batteryRealtime,which);
  final long bluetoothOnTime=getBluetoothOnTime(batteryRealtime,which);
  sb.setLength(0);
  sb.append(prefix);
  sb.append("  Screen on: ");
  formatTimeMs(sb,screenOnTime / 1000);
  sb.append("(");
  sb.append(formatRatioLocked(screenOnTime,whichBatteryRealtime));
  sb.append("), Input events: ");
  sb.append(getInputEventCount(which));
  sb.append(", Active phone call: ");
  formatTimeMs(sb,phoneOnTime / 1000);
  sb.append("(");
  sb.append(formatRatioLocked(phoneOnTime,whichBatteryRealtime));
  sb.append(")");
  pw.println(sb.toString());
  sb.setLength(0);
  sb.append(prefix);
  sb.append("  Screen brightnesses: ");
  boolean didOne=false;
  for (int i=0; i < NUM_SCREEN_BRIGHTNESS_BINS; i++) {
    final long time=getScreenBrightnessTime(i,batteryRealtime,which);
    if (time == 0) {
      continue;
    }
    if (didOne)     sb.append(", ");
    didOne=true;
    sb.append(SCREEN_BRIGHTNESS_NAMES[i]);
    sb.append(" ");
    formatTimeMs(sb,time / 1000);
    sb.append("(");
    sb.append(formatRatioLocked(time,screenOnTime));
    sb.append(")");
  }
  if (!didOne)   sb.append("No activity");
  pw.println(sb.toString());
  long rxTotal=0;
  long txTotal=0;
  long fullWakeLockTimeTotalMicros=0;
  long partialWakeLockTimeTotalMicros=0;
  Map<String,? extends BatteryStats.Timer> kernelWakelocks=getKernelWakelockStats();
  if (kernelWakelocks.size() > 0) {
    for (    Map.Entry<String,? extends BatteryStats.Timer> ent : kernelWakelocks.entrySet()) {
      String linePrefix=": ";
      sb.setLength(0);
      sb.append(prefix);
      sb.append("  Kernel Wake lock ");
      sb.append(ent.getKey());
      linePrefix=printWakeLock(sb,ent.getValue(),batteryRealtime,null,which,linePrefix);
      if (!linePrefix.equals(": ")) {
        sb.append(" realtime");
      }
 else {
        sb.append(": (nothing executed)");
      }
      pw.println(sb.toString());
    }
  }
  for (int iu=0; iu < NU; iu++) {
    Uid u=uidStats.valueAt(iu);
    rxTotal+=u.getTcpBytesReceived(which);
    txTotal+=u.getTcpBytesSent(which);
    Map<String,? extends BatteryStats.Uid.Wakelock> wakelocks=u.getWakelockStats();
    if (wakelocks.size() > 0) {
      for (      Map.Entry<String,? extends BatteryStats.Uid.Wakelock> ent : wakelocks.entrySet()) {
        Uid.Wakelock wl=ent.getValue();
        Timer fullWakeTimer=wl.getWakeTime(WAKE_TYPE_FULL);
        if (fullWakeTimer != null) {
          fullWakeLockTimeTotalMicros+=fullWakeTimer.getTotalTimeLocked(batteryRealtime,which);
        }
        Timer partialWakeTimer=wl.getWakeTime(WAKE_TYPE_PARTIAL);
        if (partialWakeTimer != null) {
          partialWakeLockTimeTotalMicros+=partialWakeTimer.getTotalTimeLocked(batteryRealtime,which);
        }
      }
    }
  }
  pw.print(prefix);
  pw.print("  Total received: ");
  pw.print(formatBytesLocked(rxTotal));
  pw.print(", Total sent: ");
  pw.println(formatBytesLocked(txTotal));
  sb.setLength(0);
  sb.append(prefix);
  sb.append("  Total full wakelock time: ");
  formatTimeMs(sb,(fullWakeLockTimeTotalMicros + 500) / 1000);
  sb.append(", Total partial waklock time: ");
  formatTimeMs(sb,(partialWakeLockTimeTotalMicros + 500) / 1000);
  pw.println(sb.toString());
  sb.setLength(0);
  sb.append(prefix);
  sb.append("  Signal levels: ");
  didOne=false;
  for (int i=0; i < NUM_SIGNAL_STRENGTH_BINS; i++) {
    final long time=getPhoneSignalStrengthTime(i,batteryRealtime,which);
    if (time == 0) {
      continue;
    }
    if (didOne)     sb.append(", ");
    didOne=true;
    sb.append(SIGNAL_STRENGTH_NAMES[i]);
    sb.append(" ");
    formatTimeMs(sb,time / 1000);
    sb.append("(");
    sb.append(formatRatioLocked(time,whichBatteryRealtime));
    sb.append(") ");
    sb.append(getPhoneSignalStrengthCount(i,which));
    sb.append("x");
  }
  if (!didOne)   sb.append("No activity");
  pw.println(sb.toString());
  sb.setLength(0);
  sb.append(prefix);
  sb.append("  Radio types: ");
  didOne=false;
  for (int i=0; i < NUM_DATA_CONNECTION_TYPES; i++) {
    final long time=getPhoneDataConnectionTime(i,batteryRealtime,which);
    if (time == 0) {
      continue;
    }
    if (didOne)     sb.append(", ");
    didOne=true;
    sb.append(DATA_CONNECTION_NAMES[i]);
    sb.append(" ");
    formatTimeMs(sb,time / 1000);
    sb.append("(");
    sb.append(formatRatioLocked(time,whichBatteryRealtime));
    sb.append(") ");
    sb.append(getPhoneDataConnectionCount(i,which));
    sb.append("x");
  }
  if (!didOne)   sb.append("No activity");
  pw.println(sb.toString());
  sb.setLength(0);
  sb.append(prefix);
  sb.append("  Wifi on: ");
  formatTimeMs(sb,wifiOnTime / 1000);
  sb.append("(");
  sb.append(formatRatioLocked(wifiOnTime,whichBatteryRealtime));
  sb.append("), Wifi running: ");
  formatTimeMs(sb,wifiRunningTime / 1000);
  sb.append("(");
  sb.append(formatRatioLocked(wifiRunningTime,whichBatteryRealtime));
  sb.append("), Bluetooth on: ");
  formatTimeMs(sb,bluetoothOnTime / 1000);
  sb.append("(");
  sb.append(formatRatioLocked(bluetoothOnTime,whichBatteryRealtime));
  sb.append(")");
  pw.println(sb.toString());
  pw.println(" ");
  if (which == STATS_UNPLUGGED) {
    if (getIsOnBattery()) {
      pw.print(prefix);
      pw.println("  Device is currently unplugged");
      pw.print(prefix);
      pw.print("    Discharge cycle start level: ");
      pw.println(getDischargeStartLevel());
      pw.print(prefix);
      pw.print("    Discharge cycle current level: ");
      pw.println(getDischargeCurrentLevel());
    }
 else {
      pw.print(prefix);
      pw.println("  Device is currently plugged into power");
      pw.print(prefix);
      pw.print("    Last discharge cycle start level: ");
      pw.println(getDischargeStartLevel());
      pw.print(prefix);
      pw.print("    Last discharge cycle end level: ");
      pw.println(getDischargeCurrentLevel());
    }
    pw.println(" ");
  }
  for (int iu=0; iu < NU; iu++) {
    final int uid=uidStats.keyAt(iu);
    Uid u=uidStats.valueAt(iu);
    pw.println(prefix + "  #" + uid+ ":");
    boolean uidActivity=false;
    long tcpReceived=u.getTcpBytesReceived(which);
    long tcpSent=u.getTcpBytesSent(which);
    long fullWifiLockOnTime=u.getFullWifiLockTime(batteryRealtime,which);
    long scanWifiLockOnTime=u.getScanWifiLockTime(batteryRealtime,which);
    long wifiTurnedOnTime=u.getWifiTurnedOnTime(batteryRealtime,which);
    if (tcpReceived != 0 || tcpSent != 0) {
      pw.print(prefix);
      pw.print("    Network: ");
      pw.print(formatBytesLocked(tcpReceived));
      pw.print(" received, ");
      pw.print(formatBytesLocked(tcpSent));
      pw.println(" sent");
    }
    if (u.hasUserActivity()) {
      boolean hasData=false;
      for (int i=0; i < NUM_SCREEN_BRIGHTNESS_BINS; i++) {
        int val=u.getUserActivityCount(i,which);
        if (val != 0) {
          if (!hasData) {
            sb.setLength(0);
            sb.append("    User activity: ");
            hasData=true;
          }
 else {
            sb.append(", ");
          }
          sb.append(val);
          sb.append(" ");
          sb.append(Uid.USER_ACTIVITY_TYPES[i]);
        }
      }
      if (hasData) {
        pw.println(sb.toString());
      }
    }
    if (fullWifiLockOnTime != 0 || scanWifiLockOnTime != 0 || wifiTurnedOnTime != 0) {
      sb.setLength(0);
      sb.append(prefix);
      sb.append("    Turned Wifi On: ");
      formatTimeMs(sb,wifiTurnedOnTime / 1000);
      sb.append("(");
      sb.append(formatRatioLocked(wifiTurnedOnTime,whichBatteryRealtime));
      sb.append(")\n");
      sb.append(prefix);
      sb.append("    Full Wifi Lock: ");
      formatTimeMs(sb,fullWifiLockOnTime / 1000);
      sb.append("(");
      sb.append(formatRatioLocked(fullWifiLockOnTime,whichBatteryRealtime));
      sb.append(")\n");
      sb.append(prefix);
      sb.append("    Scan Wifi Lock: ");
      formatTimeMs(sb,scanWifiLockOnTime / 1000);
      sb.append("(");
      sb.append(formatRatioLocked(scanWifiLockOnTime,whichBatteryRealtime));
      sb.append(")");
      pw.println(sb.toString());
    }
    Map<String,? extends BatteryStats.Uid.Wakelock> wakelocks=u.getWakelockStats();
    if (wakelocks.size() > 0) {
      for (      Map.Entry<String,? extends BatteryStats.Uid.Wakelock> ent : wakelocks.entrySet()) {
        Uid.Wakelock wl=ent.getValue();
        String linePrefix=": ";
        sb.setLength(0);
        sb.append(prefix);
        sb.append("    Wake lock ");
        sb.append(ent.getKey());
        linePrefix=printWakeLock(sb,wl.getWakeTime(WAKE_TYPE_FULL),batteryRealtime,"full",which,linePrefix);
        linePrefix=printWakeLock(sb,wl.getWakeTime(WAKE_TYPE_PARTIAL),batteryRealtime,"partial",which,linePrefix);
        linePrefix=printWakeLock(sb,wl.getWakeTime(WAKE_TYPE_WINDOW),batteryRealtime,"window",which,linePrefix);
        if (!linePrefix.equals(": ")) {
          sb.append(" realtime");
        }
 else {
          sb.append(": (nothing executed)");
        }
        pw.println(sb.toString());
        uidActivity=true;
      }
    }
    Map<Integer,? extends BatteryStats.Uid.Sensor> sensors=u.getSensorStats();
    if (sensors.size() > 0) {
      for (      Map.Entry<Integer,? extends BatteryStats.Uid.Sensor> ent : sensors.entrySet()) {
        Uid.Sensor se=ent.getValue();
        int sensorNumber=ent.getKey();
        sb.setLength(0);
        sb.append(prefix);
        sb.append("    Sensor ");
        int handle=se.getHandle();
        if (handle == Uid.Sensor.GPS) {
          sb.append("GPS");
        }
 else {
          sb.append(handle);
        }
        sb.append(": ");
        Timer timer=se.getSensorTime();
        if (timer != null) {
          long totalTime=(timer.getTotalTimeLocked(batteryRealtime,which) + 500) / 1000;
          int count=timer.getCountLocked(which);
          if (totalTime != 0) {
            formatTimeMs(sb,totalTime);
            sb.append("realtime (");
            sb.append(count);
            sb.append(" times)");
          }
 else {
            sb.append("(not used)");
          }
        }
 else {
          sb.append("(not used)");
        }
        pw.println(sb.toString());
        uidActivity=true;
      }
    }
    Map<String,? extends BatteryStats.Uid.Proc> processStats=u.getProcessStats();
    if (processStats.size() > 0) {
      for (      Map.Entry<String,? extends BatteryStats.Uid.Proc> ent : processStats.entrySet()) {
        Uid.Proc ps=ent.getValue();
        long userTime;
        long systemTime;
        int starts;
        userTime=ps.getUserTime(which);
        systemTime=ps.getSystemTime(which);
        starts=ps.getStarts(which);
        if (userTime != 0 || systemTime != 0 || starts != 0) {
          sb.setLength(0);
          sb.append(prefix);
          sb.append("    Proc ");
          sb.append(ent.getKey());
          sb.append(":\n");
          sb.append(prefix);
          sb.append("      CPU: ");
          formatTime(sb,userTime);
          sb.append("usr + ");
          formatTime(sb,systemTime);
          sb.append("krn\n");
          sb.append(prefix);
          sb.append("      ");
          sb.append(starts);
          sb.append(" proc starts");
          pw.println(sb.toString());
          uidActivity=true;
        }
      }
    }
    Map<String,? extends BatteryStats.Uid.Pkg> packageStats=u.getPackageStats();
    if (packageStats.size() > 0) {
      for (      Map.Entry<String,? extends BatteryStats.Uid.Pkg> ent : packageStats.entrySet()) {
        pw.print(prefix);
        pw.print("    Apk ");
        pw.print(ent.getKey());
        pw.println(":");
        boolean apkActivity=false;
        Uid.Pkg ps=ent.getValue();
        int wakeups=ps.getWakeups(which);
        if (wakeups != 0) {
          pw.print(prefix);
          pw.print("      ");
          pw.print(wakeups);
          pw.println(" wakeup alarms");
          apkActivity=true;
        }
        Map<String,? extends Uid.Pkg.Serv> serviceStats=ps.getServiceStats();
        if (serviceStats.size() > 0) {
          for (          Map.Entry<String,? extends BatteryStats.Uid.Pkg.Serv> sent : serviceStats.entrySet()) {
            BatteryStats.Uid.Pkg.Serv ss=sent.getValue();
            long startTime=ss.getStartTime(batteryUptime,which);
            int starts=ss.getStarts(which);
            int launches=ss.getLaunches(which);
            if (startTime != 0 || starts != 0 || launches != 0) {
              sb.setLength(0);
              sb.append(prefix);
              sb.append("      Service ");
              sb.append(sent.getKey());
              sb.append(":\n");
              sb.append(prefix);
              sb.append("        Created for: ");
              formatTimeMs(sb,startTime / 1000);
              sb.append(" uptime\n");
              sb.append(prefix);
              sb.append("        Starts: ");
              sb.append(starts);
              sb.append(", launches: ");
              sb.append(launches);
              pw.println(sb.toString());
              apkActivity=true;
            }
          }
        }
        if (!apkActivity) {
          pw.print(prefix);
          pw.println("      (nothing executed)");
        }
        uidActivity=true;
      }
    }
    if (!uidActivity) {
      pw.print(prefix);
      pw.println("    (nothing executed)");
    }
  }
}
