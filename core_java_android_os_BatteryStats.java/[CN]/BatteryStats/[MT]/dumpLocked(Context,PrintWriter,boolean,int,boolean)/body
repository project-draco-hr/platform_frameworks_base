{
  prepareForDumpLocked();
  long now=getHistoryBaseTime() + SystemClock.elapsedRealtime();
  final HistoryItem rec=new HistoryItem();
  if (startIteratingHistoryLocked()) {
    pw.println("Battery History:");
    HistoryPrinter hprinter=new HistoryPrinter();
    while (getNextHistoryLocked(rec)) {
      hprinter.printNextItem(pw,rec,now,false);
    }
    finishIteratingHistoryLocked();
    pw.println("");
  }
  if (startIteratingOldHistoryLocked()) {
    pw.println("Old battery History:");
    HistoryPrinter hprinter=new HistoryPrinter();
    while (getNextOldHistoryLocked(rec)) {
      hprinter.printNextItem(pw,rec,now,false);
    }
    finishIteratingOldHistoryLocked();
    pw.println("");
  }
  if (historyOnly) {
    return;
  }
  SparseArray<? extends Uid> uidStats=getUidStats();
  final int NU=uidStats.size();
  boolean didPid=false;
  long nowRealtime=SystemClock.elapsedRealtime();
  for (int i=0; i < NU; i++) {
    Uid uid=uidStats.valueAt(i);
    SparseArray<? extends Uid.Pid> pids=uid.getPidStats();
    if (pids != null) {
      for (int j=0; j < pids.size(); j++) {
        Uid.Pid pid=pids.valueAt(j);
        if (!didPid) {
          pw.println("Per-PID Stats:");
          didPid=true;
        }
        long time=pid.mWakeSum + (pid.mWakeStart != 0 ? (nowRealtime - pid.mWakeStart) : 0);
        pw.print("  PID ");
        pw.print(pids.keyAt(j));
        pw.print(" wake time: ");
        TimeUtils.formatDuration(time,pw);
        pw.println("");
      }
    }
  }
  if (didPid) {
    pw.println("");
  }
  if (!isUnpluggedOnly) {
    pw.println("Statistics since last charge:");
    pw.println("  System starts: " + getStartCount() + ", currently on battery: "+ getIsOnBattery());
    dumpLocked(context,pw,"",STATS_SINCE_CHARGED,reqUid);
    pw.println("");
  }
  pw.println("Statistics since last unplugged:");
  dumpLocked(context,pw,"",STATS_SINCE_UNPLUGGED,reqUid);
}
