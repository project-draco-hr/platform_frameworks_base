{
  final long rawUptime=SystemClock.uptimeMillis() * 1000;
  final long rawRealtime=SystemClock.elapsedRealtime() * 1000;
  final long batteryUptime=getBatteryUptime(rawUptime);
  final long batteryRealtime=getBatteryRealtime(rawRealtime);
  final long whichBatteryUptime=computeBatteryUptime(rawUptime,which);
  final long whichBatteryRealtime=computeBatteryRealtime(rawRealtime,which);
  final long totalRealtime=computeRealtime(rawRealtime,which);
  final long totalUptime=computeUptime(rawUptime,which);
  StringBuilder sb=new StringBuilder(128);
  SparseArray<? extends Uid> uidStats=getUidStats();
  final int NU=uidStats.size();
  sb.setLength(0);
  sb.append(prefix);
  sb.append("  Time on battery: ");
  formatTimeMs(sb,whichBatteryRealtime / 1000);
  sb.append("(");
  sb.append(formatRatioLocked(whichBatteryRealtime,totalRealtime));
  sb.append(") realtime, ");
  formatTimeMs(sb,whichBatteryUptime / 1000);
  sb.append("(");
  sb.append(formatRatioLocked(whichBatteryUptime,totalRealtime));
  sb.append(") uptime");
  pw.println(sb.toString());
  sb.setLength(0);
  sb.append(prefix);
  sb.append("  Total run time: ");
  formatTimeMs(sb,totalRealtime / 1000);
  sb.append("realtime, ");
  formatTimeMs(sb,totalUptime / 1000);
  sb.append("uptime, ");
  pw.println(sb.toString());
  final long screenOnTime=getScreenOnTime(batteryRealtime,which);
  final long phoneOnTime=getPhoneOnTime(batteryRealtime,which);
  final long wifiRunningTime=getGlobalWifiRunningTime(batteryRealtime,which);
  final long wifiOnTime=getWifiOnTime(batteryRealtime,which);
  final long bluetoothOnTime=getBluetoothOnTime(batteryRealtime,which);
  sb.setLength(0);
  sb.append(prefix);
  sb.append("  Screen on: ");
  formatTimeMs(sb,screenOnTime / 1000);
  sb.append("(");
  sb.append(formatRatioLocked(screenOnTime,whichBatteryRealtime));
  sb.append("), Input events: ");
  sb.append(getInputEventCount(which));
  sb.append(", Active phone call: ");
  formatTimeMs(sb,phoneOnTime / 1000);
  sb.append("(");
  sb.append(formatRatioLocked(phoneOnTime,whichBatteryRealtime));
  sb.append(")");
  pw.println(sb.toString());
  sb.setLength(0);
  sb.append(prefix);
  sb.append("  Screen brightnesses: ");
  boolean didOne=false;
  for (int i=0; i < NUM_SCREEN_BRIGHTNESS_BINS; i++) {
    final long time=getScreenBrightnessTime(i,batteryRealtime,which);
    if (time == 0) {
      continue;
    }
    if (didOne)     sb.append(", ");
    didOne=true;
    sb.append(SCREEN_BRIGHTNESS_NAMES[i]);
    sb.append(" ");
    formatTimeMs(sb,time / 1000);
    sb.append("(");
    sb.append(formatRatioLocked(time,screenOnTime));
    sb.append(")");
  }
  if (!didOne)   sb.append("No activity");
  pw.println(sb.toString());
  long rxTotal=0;
  long txTotal=0;
  long fullWakeLockTimeTotalMicros=0;
  long partialWakeLockTimeTotalMicros=0;
  final Comparator<TimerEntry> timerComparator=new Comparator<TimerEntry>(){
    @Override public int compare(    TimerEntry lhs,    TimerEntry rhs){
      long lhsTime=lhs.mTime;
      long rhsTime=rhs.mTime;
      if (lhsTime < rhsTime) {
        return 1;
      }
      if (lhsTime > rhsTime) {
        return -1;
      }
      return 0;
    }
  }
;
  if (reqUid < 0) {
    Map<String,? extends BatteryStats.Timer> kernelWakelocks=getKernelWakelockStats();
    if (kernelWakelocks.size() > 0) {
      final ArrayList<TimerEntry> timers=new ArrayList<TimerEntry>();
      for (      Map.Entry<String,? extends BatteryStats.Timer> ent : kernelWakelocks.entrySet()) {
        BatteryStats.Timer timer=ent.getValue();
        long totalTimeMillis=computeWakeLock(timer,batteryRealtime,which);
        if (totalTimeMillis > 0) {
          timers.add(new TimerEntry(ent.getKey(),0,timer,totalTimeMillis));
        }
      }
      Collections.sort(timers,timerComparator);
      for (int i=0; i < timers.size(); i++) {
        TimerEntry timer=timers.get(i);
        String linePrefix=": ";
        sb.setLength(0);
        sb.append(prefix);
        sb.append("  Kernel Wake lock ");
        sb.append(timer.mName);
        linePrefix=printWakeLock(sb,timer.mTimer,batteryRealtime,null,which,linePrefix);
        if (!linePrefix.equals(": ")) {
          sb.append(" realtime");
          pw.println(sb.toString());
        }
      }
    }
  }
  final ArrayList<TimerEntry> timers=new ArrayList<TimerEntry>();
  for (int iu=0; iu < NU; iu++) {
    Uid u=uidStats.valueAt(iu);
    rxTotal+=u.getTcpBytesReceived(which);
    txTotal+=u.getTcpBytesSent(which);
    Map<String,? extends BatteryStats.Uid.Wakelock> wakelocks=u.getWakelockStats();
    if (wakelocks.size() > 0) {
      for (      Map.Entry<String,? extends BatteryStats.Uid.Wakelock> ent : wakelocks.entrySet()) {
        Uid.Wakelock wl=ent.getValue();
        Timer fullWakeTimer=wl.getWakeTime(WAKE_TYPE_FULL);
        if (fullWakeTimer != null) {
          fullWakeLockTimeTotalMicros+=fullWakeTimer.getTotalTimeLocked(batteryRealtime,which);
        }
        Timer partialWakeTimer=wl.getWakeTime(WAKE_TYPE_PARTIAL);
        if (partialWakeTimer != null) {
          long totalTimeMicros=partialWakeTimer.getTotalTimeLocked(batteryRealtime,which);
          if (totalTimeMicros > 0) {
            if (reqUid < 0) {
              timers.add(new TimerEntry(ent.getKey(),u.getUid(),partialWakeTimer,totalTimeMicros));
            }
            partialWakeLockTimeTotalMicros+=totalTimeMicros;
          }
        }
      }
    }
  }
  pw.print(prefix);
  pw.print("  Total received: ");
  pw.print(formatBytesLocked(rxTotal));
  pw.print(", Total sent: ");
  pw.println(formatBytesLocked(txTotal));
  sb.setLength(0);
  sb.append(prefix);
  sb.append("  Total full wakelock time: ");
  formatTimeMs(sb,(fullWakeLockTimeTotalMicros + 500) / 1000);
  sb.append(", Total partial wakelock time: ");
  formatTimeMs(sb,(partialWakeLockTimeTotalMicros + 500) / 1000);
  pw.println(sb.toString());
  sb.setLength(0);
  sb.append(prefix);
  sb.append("  Signal levels: ");
  didOne=false;
  for (int i=0; i < SignalStrength.NUM_SIGNAL_STRENGTH_BINS; i++) {
    final long time=getPhoneSignalStrengthTime(i,batteryRealtime,which);
    if (time == 0) {
      continue;
    }
    if (didOne)     sb.append(", ");
    didOne=true;
    sb.append(SignalStrength.SIGNAL_STRENGTH_NAMES[i]);
    sb.append(" ");
    formatTimeMs(sb,time / 1000);
    sb.append("(");
    sb.append(formatRatioLocked(time,whichBatteryRealtime));
    sb.append(") ");
    sb.append(getPhoneSignalStrengthCount(i,which));
    sb.append("x");
  }
  if (!didOne)   sb.append("No activity");
  pw.println(sb.toString());
  sb.setLength(0);
  sb.append(prefix);
  sb.append("  Signal scanning time: ");
  formatTimeMs(sb,getPhoneSignalScanningTime(batteryRealtime,which) / 1000);
  pw.println(sb.toString());
  sb.setLength(0);
  sb.append(prefix);
  sb.append("  Radio types: ");
  didOne=false;
  for (int i=0; i < NUM_DATA_CONNECTION_TYPES; i++) {
    final long time=getPhoneDataConnectionTime(i,batteryRealtime,which);
    if (time == 0) {
      continue;
    }
    if (didOne)     sb.append(", ");
    didOne=true;
    sb.append(DATA_CONNECTION_NAMES[i]);
    sb.append(" ");
    formatTimeMs(sb,time / 1000);
    sb.append("(");
    sb.append(formatRatioLocked(time,whichBatteryRealtime));
    sb.append(") ");
    sb.append(getPhoneDataConnectionCount(i,which));
    sb.append("x");
  }
  if (!didOne)   sb.append("No activity");
  pw.println(sb.toString());
  sb.setLength(0);
  sb.append(prefix);
  sb.append("  Radio data uptime when unplugged: ");
  sb.append(getRadioDataUptime() / 1000);
  sb.append(" ms");
  pw.println(sb.toString());
  sb.setLength(0);
  sb.append(prefix);
  sb.append("  Wifi on: ");
  formatTimeMs(sb,wifiOnTime / 1000);
  sb.append("(");
  sb.append(formatRatioLocked(wifiOnTime,whichBatteryRealtime));
  sb.append("), Wifi running: ");
  formatTimeMs(sb,wifiRunningTime / 1000);
  sb.append("(");
  sb.append(formatRatioLocked(wifiRunningTime,whichBatteryRealtime));
  sb.append("), Bluetooth on: ");
  formatTimeMs(sb,bluetoothOnTime / 1000);
  sb.append("(");
  sb.append(formatRatioLocked(bluetoothOnTime,whichBatteryRealtime));
  sb.append(")");
  pw.println(sb.toString());
  pw.println(" ");
  if (which == STATS_SINCE_UNPLUGGED) {
    if (getIsOnBattery()) {
      pw.print(prefix);
      pw.println("  Device is currently unplugged");
      pw.print(prefix);
      pw.print("    Discharge cycle start level: ");
      pw.println(getDischargeStartLevel());
      pw.print(prefix);
      pw.print("    Discharge cycle current level: ");
      pw.println(getDischargeCurrentLevel());
    }
 else {
      pw.print(prefix);
      pw.println("  Device is currently plugged into power");
      pw.print(prefix);
      pw.print("    Last discharge cycle start level: ");
      pw.println(getDischargeStartLevel());
      pw.print(prefix);
      pw.print("    Last discharge cycle end level: ");
      pw.println(getDischargeCurrentLevel());
    }
    pw.print(prefix);
    pw.print("    Amount discharged while screen on: ");
    pw.println(getDischargeAmountScreenOn());
    pw.print(prefix);
    pw.print("    Amount discharged while screen off: ");
    pw.println(getDischargeAmountScreenOff());
    pw.println(" ");
  }
 else {
    pw.print(prefix);
    pw.println("  Device battery use since last full charge");
    pw.print(prefix);
    pw.print("    Amount discharged (lower bound): ");
    pw.println(getLowDischargeAmountSinceCharge());
    pw.print(prefix);
    pw.print("    Amount discharged (upper bound): ");
    pw.println(getHighDischargeAmountSinceCharge());
    pw.print(prefix);
    pw.print("    Amount discharged while screen on: ");
    pw.println(getDischargeAmountScreenOnSinceCharge());
    pw.print(prefix);
    pw.print("    Amount discharged while screen off: ");
    pw.println(getDischargeAmountScreenOffSinceCharge());
    pw.println();
  }
  if (timers.size() > 0) {
    Collections.sort(timers,timerComparator);
    pw.print(prefix);
    pw.println("  All partial wake locks:");
    for (int i=0; i < timers.size(); i++) {
      TimerEntry timer=timers.get(i);
      sb.setLength(0);
      sb.append("  Wake lock #");
      sb.append(timer.mId);
      sb.append(" ");
      sb.append(timer.mName);
      printWakeLock(sb,timer.mTimer,batteryRealtime,null,which,": ");
      sb.append(" realtime");
      pw.println(sb.toString());
    }
    timers.clear();
    pw.println();
  }
  for (int iu=0; iu < NU; iu++) {
    final int uid=uidStats.keyAt(iu);
    if (reqUid >= 0 && uid != reqUid && uid != Process.SYSTEM_UID) {
      continue;
    }
    Uid u=uidStats.valueAt(iu);
    pw.println(prefix + "  #" + uid+ ":");
    boolean uidActivity=false;
    long tcpReceived=u.getTcpBytesReceived(which);
    long tcpSent=u.getTcpBytesSent(which);
    long fullWifiLockOnTime=u.getFullWifiLockTime(batteryRealtime,which);
    long wifiScanTime=u.getWifiScanTime(batteryRealtime,which);
    long uidWifiRunningTime=u.getWifiRunningTime(batteryRealtime,which);
    if (tcpReceived != 0 || tcpSent != 0) {
      pw.print(prefix);
      pw.print("    Network: ");
      pw.print(formatBytesLocked(tcpReceived));
      pw.print(" received, ");
      pw.print(formatBytesLocked(tcpSent));
      pw.println(" sent");
    }
    if (u.hasUserActivity()) {
      boolean hasData=false;
      for (int i=0; i < Uid.NUM_USER_ACTIVITY_TYPES; i++) {
        int val=u.getUserActivityCount(i,which);
        if (val != 0) {
          if (!hasData) {
            sb.setLength(0);
            sb.append("    User activity: ");
            hasData=true;
          }
 else {
            sb.append(", ");
          }
          sb.append(val);
          sb.append(" ");
          sb.append(Uid.USER_ACTIVITY_TYPES[i]);
        }
      }
      if (hasData) {
        pw.println(sb.toString());
      }
    }
    if (fullWifiLockOnTime != 0 || wifiScanTime != 0 || uidWifiRunningTime != 0) {
      sb.setLength(0);
      sb.append(prefix);
      sb.append("    Wifi Running: ");
      formatTimeMs(sb,uidWifiRunningTime / 1000);
      sb.append("(");
      sb.append(formatRatioLocked(uidWifiRunningTime,whichBatteryRealtime));
      sb.append(")\n");
      sb.append(prefix);
      sb.append("    Full Wifi Lock: ");
      formatTimeMs(sb,fullWifiLockOnTime / 1000);
      sb.append("(");
      sb.append(formatRatioLocked(fullWifiLockOnTime,whichBatteryRealtime));
      sb.append(")\n");
      sb.append(prefix);
      sb.append("    Wifi Scan: ");
      formatTimeMs(sb,wifiScanTime / 1000);
      sb.append("(");
      sb.append(formatRatioLocked(wifiScanTime,whichBatteryRealtime));
      sb.append(")");
      pw.println(sb.toString());
    }
    Map<String,? extends BatteryStats.Uid.Wakelock> wakelocks=u.getWakelockStats();
    if (wakelocks.size() > 0) {
      long totalFull=0, totalPartial=0, totalWindow=0;
      int count=0;
      for (      Map.Entry<String,? extends BatteryStats.Uid.Wakelock> ent : wakelocks.entrySet()) {
        Uid.Wakelock wl=ent.getValue();
        String linePrefix=": ";
        sb.setLength(0);
        sb.append(prefix);
        sb.append("    Wake lock ");
        sb.append(ent.getKey());
        linePrefix=printWakeLock(sb,wl.getWakeTime(WAKE_TYPE_FULL),batteryRealtime,"full",which,linePrefix);
        linePrefix=printWakeLock(sb,wl.getWakeTime(WAKE_TYPE_PARTIAL),batteryRealtime,"partial",which,linePrefix);
        linePrefix=printWakeLock(sb,wl.getWakeTime(WAKE_TYPE_WINDOW),batteryRealtime,"window",which,linePrefix);
        if (!linePrefix.equals(": ")) {
          sb.append(" realtime");
          pw.println(sb.toString());
          uidActivity=true;
          count++;
        }
        totalFull+=computeWakeLock(wl.getWakeTime(WAKE_TYPE_FULL),batteryRealtime,which);
        totalPartial+=computeWakeLock(wl.getWakeTime(WAKE_TYPE_PARTIAL),batteryRealtime,which);
        totalWindow+=computeWakeLock(wl.getWakeTime(WAKE_TYPE_WINDOW),batteryRealtime,which);
      }
      if (count > 1) {
        if (totalFull != 0 || totalPartial != 0 || totalWindow != 0) {
          sb.setLength(0);
          sb.append(prefix);
          sb.append("    TOTAL wake: ");
          boolean needComma=false;
          if (totalFull != 0) {
            needComma=true;
            formatTimeMs(sb,totalFull);
            sb.append("full");
          }
          if (totalPartial != 0) {
            if (needComma) {
              sb.append(", ");
            }
            needComma=true;
            formatTimeMs(sb,totalPartial);
            sb.append("partial");
          }
          if (totalWindow != 0) {
            if (needComma) {
              sb.append(", ");
            }
            needComma=true;
            formatTimeMs(sb,totalWindow);
            sb.append("window");
          }
          sb.append(" realtime");
          pw.println(sb.toString());
        }
      }
    }
    Map<Integer,? extends BatteryStats.Uid.Sensor> sensors=u.getSensorStats();
    if (sensors.size() > 0) {
      for (      Map.Entry<Integer,? extends BatteryStats.Uid.Sensor> ent : sensors.entrySet()) {
        Uid.Sensor se=ent.getValue();
        int sensorNumber=ent.getKey();
        sb.setLength(0);
        sb.append(prefix);
        sb.append("    Sensor ");
        int handle=se.getHandle();
        if (handle == Uid.Sensor.GPS) {
          sb.append("GPS");
        }
 else {
          sb.append(handle);
        }
        sb.append(": ");
        Timer timer=se.getSensorTime();
        if (timer != null) {
          long totalTime=(timer.getTotalTimeLocked(batteryRealtime,which) + 500) / 1000;
          int count=timer.getCountLocked(which);
          if (totalTime != 0) {
            formatTimeMs(sb,totalTime);
            sb.append("realtime (");
            sb.append(count);
            sb.append(" times)");
          }
 else {
            sb.append("(not used)");
          }
        }
 else {
          sb.append("(not used)");
        }
        pw.println(sb.toString());
        uidActivity=true;
      }
    }
    Timer vibTimer=u.getVibratorOnTimer();
    if (vibTimer != null) {
      long totalTime=(vibTimer.getTotalTimeLocked(batteryRealtime,which) + 500) / 1000;
      int count=vibTimer.getCountLocked(which);
      if (totalTime != 0) {
        sb.setLength(0);
        sb.append(prefix);
        sb.append("    Vibrator: ");
        formatTimeMs(sb,totalTime);
        sb.append("realtime (");
        sb.append(count);
        sb.append(" times)");
        pw.println(sb.toString());
        uidActivity=true;
      }
    }
    Map<String,? extends BatteryStats.Uid.Proc> processStats=u.getProcessStats();
    if (processStats.size() > 0) {
      for (      Map.Entry<String,? extends BatteryStats.Uid.Proc> ent : processStats.entrySet()) {
        Uid.Proc ps=ent.getValue();
        long userTime;
        long systemTime;
        int starts;
        int numExcessive;
        userTime=ps.getUserTime(which);
        systemTime=ps.getSystemTime(which);
        starts=ps.getStarts(which);
        numExcessive=which == STATS_SINCE_CHARGED ? ps.countExcessivePowers() : 0;
        if (userTime != 0 || systemTime != 0 || starts != 0 || numExcessive != 0) {
          sb.setLength(0);
          sb.append(prefix);
          sb.append("    Proc ");
          sb.append(ent.getKey());
          sb.append(":\n");
          sb.append(prefix);
          sb.append("      CPU: ");
          formatTime(sb,userTime);
          sb.append("usr + ");
          formatTime(sb,systemTime);
          sb.append("krn");
          if (starts != 0) {
            sb.append("\n");
            sb.append(prefix);
            sb.append("      ");
            sb.append(starts);
            sb.append(" proc starts");
          }
          pw.println(sb.toString());
          for (int e=0; e < numExcessive; e++) {
            Uid.Proc.ExcessivePower ew=ps.getExcessivePower(e);
            if (ew != null) {
              pw.print(prefix);
              pw.print("      * Killed for ");
              if (ew.type == Uid.Proc.ExcessivePower.TYPE_WAKE) {
                pw.print("wake lock");
              }
 else               if (ew.type == Uid.Proc.ExcessivePower.TYPE_CPU) {
                pw.print("cpu");
              }
 else {
                pw.print("unknown");
              }
              pw.print(" use: ");
              TimeUtils.formatDuration(ew.usedTime,pw);
              pw.print(" over ");
              TimeUtils.formatDuration(ew.overTime,pw);
              pw.print(" (");
              pw.print((ew.usedTime * 100) / ew.overTime);
              pw.println("%)");
            }
          }
          uidActivity=true;
        }
      }
    }
    Map<String,? extends BatteryStats.Uid.Pkg> packageStats=u.getPackageStats();
    if (packageStats.size() > 0) {
      for (      Map.Entry<String,? extends BatteryStats.Uid.Pkg> ent : packageStats.entrySet()) {
        pw.print(prefix);
        pw.print("    Apk ");
        pw.print(ent.getKey());
        pw.println(":");
        boolean apkActivity=false;
        Uid.Pkg ps=ent.getValue();
        int wakeups=ps.getWakeups(which);
        if (wakeups != 0) {
          pw.print(prefix);
          pw.print("      ");
          pw.print(wakeups);
          pw.println(" wakeup alarms");
          apkActivity=true;
        }
        Map<String,? extends Uid.Pkg.Serv> serviceStats=ps.getServiceStats();
        if (serviceStats.size() > 0) {
          for (          Map.Entry<String,? extends BatteryStats.Uid.Pkg.Serv> sent : serviceStats.entrySet()) {
            BatteryStats.Uid.Pkg.Serv ss=sent.getValue();
            long startTime=ss.getStartTime(batteryUptime,which);
            int starts=ss.getStarts(which);
            int launches=ss.getLaunches(which);
            if (startTime != 0 || starts != 0 || launches != 0) {
              sb.setLength(0);
              sb.append(prefix);
              sb.append("      Service ");
              sb.append(sent.getKey());
              sb.append(":\n");
              sb.append(prefix);
              sb.append("        Created for: ");
              formatTimeMs(sb,startTime / 1000);
              sb.append(" uptime\n");
              sb.append(prefix);
              sb.append("        Starts: ");
              sb.append(starts);
              sb.append(", launches: ");
              sb.append(launches);
              pw.println(sb.toString());
              apkActivity=true;
            }
          }
        }
        if (!apkActivity) {
          pw.print(prefix);
          pw.println("      (nothing executed)");
        }
        uidActivity=true;
      }
    }
    if (!uidActivity) {
      pw.print(prefix);
      pw.println("    (nothing executed)");
    }
  }
}
