{
  final long idleTimeMs=counter.getIdleTimeCounter().getCountLocked(which);
  final long rxTimeMs=counter.getRxTimeCounter().getCountLocked(which);
  final long powerDrainMaMs=counter.getPowerCounter().getCountLocked(which);
  long totalTxTimeMs=0;
  for (  LongCounter txState : counter.getTxTimeCounters()) {
    totalTxTimeMs+=txState.getCountLocked(which);
  }
  final long totalTimeMs=idleTimeMs + rxTimeMs + totalTxTimeMs;
  sb.setLength(0);
  sb.append(prefix);
  sb.append("  ");
  sb.append(controllerName);
  sb.append(" Idle time:   ");
  formatTimeMs(sb,idleTimeMs);
  sb.append("(");
  sb.append(formatRatioLocked(idleTimeMs,totalTimeMs));
  sb.append(")");
  pw.println(sb.toString());
  sb.setLength(0);
  sb.append(prefix);
  sb.append("  ");
  sb.append(controllerName);
  sb.append(" Rx time:     ");
  formatTimeMs(sb,rxTimeMs);
  sb.append("(");
  sb.append(formatRatioLocked(rxTimeMs,totalTimeMs));
  sb.append(")");
  pw.println(sb.toString());
  sb.setLength(0);
  sb.append(prefix);
  sb.append("  ");
  sb.append(controllerName);
  sb.append(" Tx time:     ");
  formatTimeMs(sb,totalTxTimeMs);
  sb.append("(");
  sb.append(formatRatioLocked(totalTxTimeMs,totalTimeMs));
  sb.append(")");
  pw.println(sb.toString());
  final int numTxLvls=counter.getTxTimeCounters().length;
  if (numTxLvls > 1) {
    for (int lvl=0; lvl < numTxLvls; lvl++) {
      final long txLvlTimeMs=counter.getTxTimeCounters()[lvl].getCountLocked(which);
      sb.setLength(0);
      sb.append(prefix);
      sb.append("    [");
      sb.append(lvl);
      sb.append("] ");
      formatTimeMs(sb,txLvlTimeMs);
      sb.append("(");
      sb.append(formatRatioLocked(txLvlTimeMs,totalTxTimeMs));
      sb.append(")");
      pw.println(sb.toString());
    }
  }
  sb.setLength(0);
  sb.append(prefix);
  sb.append("  ");
  sb.append(controllerName);
  sb.append(" Power drain: ").append(BatteryStatsHelper.makemAh(powerDrainMaMs / (double)(1000 * 60 * 60)));
  sb.append("mAh");
  pw.println(sb.toString());
}
