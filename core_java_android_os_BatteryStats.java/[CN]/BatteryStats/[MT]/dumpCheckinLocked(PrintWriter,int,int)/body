{
  final long rawUptime=SystemClock.uptimeMillis() * 1000;
  final long rawRealtime=SystemClock.elapsedRealtime() * 1000;
  final long batteryUptime=getBatteryUptime(rawUptime);
  final long batteryRealtime=getBatteryRealtime(rawRealtime);
  final long whichBatteryUptime=computeBatteryUptime(rawUptime,which);
  final long whichBatteryRealtime=computeBatteryRealtime(rawRealtime,which);
  final long totalRealtime=computeRealtime(rawRealtime,which);
  final long totalUptime=computeUptime(rawUptime,which);
  final long screenOnTime=getScreenOnTime(batteryRealtime,which);
  final long phoneOnTime=getPhoneOnTime(batteryRealtime,which);
  final long wifiOnTime=getWifiOnTime(batteryRealtime,which);
  final long wifiRunningTime=getGlobalWifiRunningTime(batteryRealtime,which);
  final long bluetoothOnTime=getBluetoothOnTime(batteryRealtime,which);
  StringBuilder sb=new StringBuilder(128);
  SparseArray<? extends Uid> uidStats=getUidStats();
  final int NU=uidStats.size();
  String category=STAT_NAMES[which];
  dumpLine(pw,0,category,BATTERY_DATA,which == STATS_SINCE_CHARGED ? getStartCount() : "N/A",whichBatteryRealtime / 1000,whichBatteryUptime / 1000,totalRealtime / 1000,totalUptime / 1000);
  long fullWakeLockTimeTotal=0;
  long partialWakeLockTimeTotal=0;
  for (int iu=0; iu < NU; iu++) {
    Uid u=uidStats.valueAt(iu);
    Map<String,? extends BatteryStats.Uid.Wakelock> wakelocks=u.getWakelockStats();
    if (wakelocks.size() > 0) {
      for (      Map.Entry<String,? extends BatteryStats.Uid.Wakelock> ent : wakelocks.entrySet()) {
        Uid.Wakelock wl=ent.getValue();
        Timer fullWakeTimer=wl.getWakeTime(WAKE_TYPE_FULL);
        if (fullWakeTimer != null) {
          fullWakeLockTimeTotal+=fullWakeTimer.getTotalTimeLocked(batteryRealtime,which);
        }
        Timer partialWakeTimer=wl.getWakeTime(WAKE_TYPE_PARTIAL);
        if (partialWakeTimer != null) {
          partialWakeLockTimeTotal+=partialWakeTimer.getTotalTimeLocked(batteryRealtime,which);
        }
      }
    }
  }
  long mobileRxTotalBytes=getNetworkActivityBytes(NETWORK_MOBILE_RX_DATA,which);
  long mobileTxTotalBytes=getNetworkActivityBytes(NETWORK_MOBILE_TX_DATA,which);
  long wifiRxTotalBytes=getNetworkActivityBytes(NETWORK_WIFI_RX_DATA,which);
  long wifiTxTotalBytes=getNetworkActivityBytes(NETWORK_WIFI_TX_DATA,which);
  long mobileRxTotalPackets=getNetworkActivityPackets(NETWORK_MOBILE_RX_DATA,which);
  long mobileTxTotalPackets=getNetworkActivityPackets(NETWORK_MOBILE_TX_DATA,which);
  long wifiRxTotalPackets=getNetworkActivityPackets(NETWORK_WIFI_RX_DATA,which);
  long wifiTxTotalPackets=getNetworkActivityPackets(NETWORK_WIFI_TX_DATA,which);
  dumpLine(pw,0,category,GLOBAL_NETWORK_DATA,mobileRxTotalBytes,mobileTxTotalBytes,wifiRxTotalBytes,wifiTxTotalBytes,mobileRxTotalPackets,mobileTxTotalPackets,wifiRxTotalPackets,wifiTxTotalPackets);
  dumpLine(pw,0,category,MISC_DATA,screenOnTime / 1000,phoneOnTime / 1000,wifiOnTime / 1000,wifiRunningTime / 1000,bluetoothOnTime / 1000,mobileRxTotalBytes,mobileTxTotalBytes,wifiRxTotalBytes,wifiTxTotalBytes,fullWakeLockTimeTotal,partialWakeLockTimeTotal,getInputEventCount(which));
  Object[] args=new Object[NUM_SCREEN_BRIGHTNESS_BINS];
  for (int i=0; i < NUM_SCREEN_BRIGHTNESS_BINS; i++) {
    args[i]=getScreenBrightnessTime(i,batteryRealtime,which) / 1000;
  }
  dumpLine(pw,0,category,SCREEN_BRIGHTNESS_DATA,args);
  args=new Object[SignalStrength.NUM_SIGNAL_STRENGTH_BINS];
  for (int i=0; i < SignalStrength.NUM_SIGNAL_STRENGTH_BINS; i++) {
    args[i]=getPhoneSignalStrengthTime(i,batteryRealtime,which) / 1000;
  }
  dumpLine(pw,0,category,SIGNAL_STRENGTH_TIME_DATA,args);
  dumpLine(pw,0,category,SIGNAL_SCANNING_TIME_DATA,getPhoneSignalScanningTime(batteryRealtime,which) / 1000);
  for (int i=0; i < SignalStrength.NUM_SIGNAL_STRENGTH_BINS; i++) {
    args[i]=getPhoneSignalStrengthCount(i,which);
  }
  dumpLine(pw,0,category,SIGNAL_STRENGTH_COUNT_DATA,args);
  args=new Object[NUM_DATA_CONNECTION_TYPES];
  for (int i=0; i < NUM_DATA_CONNECTION_TYPES; i++) {
    args[i]=getPhoneDataConnectionTime(i,batteryRealtime,which) / 1000;
  }
  dumpLine(pw,0,category,DATA_CONNECTION_TIME_DATA,args);
  for (int i=0; i < NUM_DATA_CONNECTION_TYPES; i++) {
    args[i]=getPhoneDataConnectionCount(i,which);
  }
  dumpLine(pw,0,category,DATA_CONNECTION_COUNT_DATA,args);
  if (which == STATS_SINCE_UNPLUGGED) {
    dumpLine(pw,0,category,BATTERY_LEVEL_DATA,getDischargeStartLevel(),getDischargeCurrentLevel());
  }
  if (which == STATS_SINCE_UNPLUGGED) {
    dumpLine(pw,0,category,BATTERY_DISCHARGE_DATA,getDischargeStartLevel() - getDischargeCurrentLevel(),getDischargeStartLevel() - getDischargeCurrentLevel(),getDischargeAmountScreenOn(),getDischargeAmountScreenOff());
  }
 else {
    dumpLine(pw,0,category,BATTERY_DISCHARGE_DATA,getLowDischargeAmountSinceCharge(),getHighDischargeAmountSinceCharge(),getDischargeAmountScreenOn(),getDischargeAmountScreenOff());
  }
  if (reqUid < 0) {
    Map<String,? extends BatteryStats.Timer> kernelWakelocks=getKernelWakelockStats();
    if (kernelWakelocks.size() > 0) {
      for (      Map.Entry<String,? extends BatteryStats.Timer> ent : kernelWakelocks.entrySet()) {
        sb.setLength(0);
        printWakeLockCheckin(sb,ent.getValue(),batteryRealtime,null,which,"");
        dumpLine(pw,0,category,KERNEL_WAKELOCK_DATA,ent.getKey(),sb.toString());
      }
    }
  }
  for (int iu=0; iu < NU; iu++) {
    final int uid=uidStats.keyAt(iu);
    if (reqUid >= 0 && uid != reqUid) {
      continue;
    }
    Uid u=uidStats.valueAt(iu);
    long mobileBytesRx=u.getNetworkActivityBytes(NETWORK_MOBILE_RX_DATA,which);
    long mobileBytesTx=u.getNetworkActivityBytes(NETWORK_MOBILE_TX_DATA,which);
    long wifiBytesRx=u.getNetworkActivityBytes(NETWORK_WIFI_RX_DATA,which);
    long wifiBytesTx=u.getNetworkActivityBytes(NETWORK_WIFI_TX_DATA,which);
    long mobilePacketsRx=u.getNetworkActivityPackets(NETWORK_MOBILE_RX_DATA,which);
    long mobilePacketsTx=u.getNetworkActivityPackets(NETWORK_MOBILE_TX_DATA,which);
    long wifiPacketsRx=u.getNetworkActivityPackets(NETWORK_WIFI_RX_DATA,which);
    long wifiPacketsTx=u.getNetworkActivityPackets(NETWORK_WIFI_TX_DATA,which);
    long fullWifiLockOnTime=u.getFullWifiLockTime(batteryRealtime,which);
    long wifiScanTime=u.getWifiScanTime(batteryRealtime,which);
    long uidWifiRunningTime=u.getWifiRunningTime(batteryRealtime,which);
    if (mobileBytesRx > 0 || mobileBytesTx > 0 || wifiBytesRx > 0 || wifiBytesTx > 0 || mobilePacketsRx > 0 || mobilePacketsTx > 0 || wifiPacketsRx > 0 || wifiPacketsTx > 0) {
      dumpLine(pw,uid,category,NETWORK_DATA,mobileBytesRx,mobileBytesTx,wifiBytesRx,wifiBytesTx,mobilePacketsRx,mobilePacketsTx,wifiPacketsRx,wifiPacketsTx);
    }
    if (fullWifiLockOnTime != 0 || wifiScanTime != 0 || uidWifiRunningTime != 0) {
      dumpLine(pw,uid,category,WIFI_DATA,fullWifiLockOnTime,wifiScanTime,uidWifiRunningTime);
    }
    if (u.hasUserActivity()) {
      args=new Object[Uid.NUM_USER_ACTIVITY_TYPES];
      boolean hasData=false;
      for (int i=0; i < Uid.NUM_USER_ACTIVITY_TYPES; i++) {
        int val=u.getUserActivityCount(i,which);
        args[i]=val;
        if (val != 0)         hasData=true;
      }
      if (hasData) {
        dumpLine(pw,0,category,USER_ACTIVITY_DATA,args);
      }
    }
    Map<String,? extends BatteryStats.Uid.Wakelock> wakelocks=u.getWakelockStats();
    if (wakelocks.size() > 0) {
      for (      Map.Entry<String,? extends BatteryStats.Uid.Wakelock> ent : wakelocks.entrySet()) {
        Uid.Wakelock wl=ent.getValue();
        String linePrefix="";
        sb.setLength(0);
        linePrefix=printWakeLockCheckin(sb,wl.getWakeTime(WAKE_TYPE_FULL),batteryRealtime,"f",which,linePrefix);
        linePrefix=printWakeLockCheckin(sb,wl.getWakeTime(WAKE_TYPE_PARTIAL),batteryRealtime,"p",which,linePrefix);
        linePrefix=printWakeLockCheckin(sb,wl.getWakeTime(WAKE_TYPE_WINDOW),batteryRealtime,"w",which,linePrefix);
        if (sb.length() > 0) {
          String name=ent.getKey();
          if (name.indexOf(',') >= 0) {
            name=name.replace(',','_');
          }
          dumpLine(pw,uid,category,WAKELOCK_DATA,name,sb.toString());
        }
      }
    }
    Map<Integer,? extends BatteryStats.Uid.Sensor> sensors=u.getSensorStats();
    if (sensors.size() > 0) {
      for (      Map.Entry<Integer,? extends BatteryStats.Uid.Sensor> ent : sensors.entrySet()) {
        Uid.Sensor se=ent.getValue();
        int sensorNumber=ent.getKey();
        Timer timer=se.getSensorTime();
        if (timer != null) {
          long totalTime=(timer.getTotalTimeLocked(batteryRealtime,which) + 500) / 1000;
          int count=timer.getCountLocked(which);
          if (totalTime != 0) {
            dumpLine(pw,uid,category,SENSOR_DATA,sensorNumber,totalTime,count);
          }
        }
      }
    }
    Timer vibTimer=u.getVibratorOnTimer();
    if (vibTimer != null) {
      long totalTime=(vibTimer.getTotalTimeLocked(batteryRealtime,which) + 500) / 1000;
      int count=vibTimer.getCountLocked(which);
      if (totalTime != 0) {
        dumpLine(pw,uid,category,VIBRATOR_DATA,totalTime,count);
      }
    }
    Timer fgTimer=u.getForegroundActivityTimer();
    if (fgTimer != null) {
      long totalTime=(fgTimer.getTotalTimeLocked(batteryRealtime,which) + 500) / 1000;
      int count=fgTimer.getCountLocked(which);
      if (totalTime != 0) {
        dumpLine(pw,uid,category,FOREGROUND_DATA,totalTime,count);
      }
    }
    Map<String,? extends BatteryStats.Uid.Proc> processStats=u.getProcessStats();
    if (processStats.size() > 0) {
      for (      Map.Entry<String,? extends BatteryStats.Uid.Proc> ent : processStats.entrySet()) {
        Uid.Proc ps=ent.getValue();
        final long userMillis=ps.getUserTime(which) * 10;
        final long systemMillis=ps.getSystemTime(which) * 10;
        final long foregroundMillis=ps.getForegroundTime(which) * 10;
        final long starts=ps.getStarts(which);
        if (userMillis != 0 || systemMillis != 0 || foregroundMillis != 0 || starts != 0) {
          dumpLine(pw,uid,category,PROCESS_DATA,ent.getKey(),userMillis,systemMillis,foregroundMillis,starts);
        }
      }
    }
    Map<String,? extends BatteryStats.Uid.Pkg> packageStats=u.getPackageStats();
    if (packageStats.size() > 0) {
      for (      Map.Entry<String,? extends BatteryStats.Uid.Pkg> ent : packageStats.entrySet()) {
        Uid.Pkg ps=ent.getValue();
        int wakeups=ps.getWakeups(which);
        Map<String,? extends Uid.Pkg.Serv> serviceStats=ps.getServiceStats();
        for (        Map.Entry<String,? extends BatteryStats.Uid.Pkg.Serv> sent : serviceStats.entrySet()) {
          BatteryStats.Uid.Pkg.Serv ss=sent.getValue();
          long startTime=ss.getStartTime(batteryUptime,which);
          int starts=ss.getStarts(which);
          int launches=ss.getLaunches(which);
          if (startTime != 0 || starts != 0 || launches != 0) {
            dumpLine(pw,uid,category,APK_DATA,wakeups,ent.getKey(),sent.getKey(),startTime / 1000,starts,launches);
          }
        }
      }
    }
  }
}
