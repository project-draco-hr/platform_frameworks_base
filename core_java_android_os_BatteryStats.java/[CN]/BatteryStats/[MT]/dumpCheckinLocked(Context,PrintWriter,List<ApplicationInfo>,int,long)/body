{
  prepareForDumpLocked();
  long now=getHistoryBaseTime() + SystemClock.elapsedRealtime();
  final boolean filtering=(flags & (DUMP_HISTORY_ONLY | DUMP_UNPLUGGED_ONLY | DUMP_CHARGED_ONLY)) != 0;
  if ((flags & DUMP_INCLUDE_HISTORY) != 0 || (flags & DUMP_HISTORY_ONLY) != 0) {
    final HistoryItem rec=new HistoryItem();
    if (startIteratingHistoryLocked()) {
      try {
        for (int i=0; i < getHistoryStringPoolSize(); i++) {
          pw.print(BATTERY_STATS_CHECKIN_VERSION);
          pw.print(',');
          pw.print(HISTORY_STRING_POOL);
          pw.print(',');
          pw.print(i);
          pw.print(',');
          pw.print(getHistoryTagPoolString(i));
          pw.print(',');
          pw.print(getHistoryTagPoolUid(i));
          pw.println();
        }
        HistoryPrinter hprinter=new HistoryPrinter();
        long lastTime=-1;
        while (getNextHistoryLocked(rec)) {
          lastTime=rec.time;
          if (rec.time >= histStart) {
            pw.print(BATTERY_STATS_CHECKIN_VERSION);
            pw.print(',');
            pw.print(HISTORY_DATA);
            pw.print(',');
            hprinter.printNextItem(pw,rec,histStart >= 0 ? -1 : now,true,false);
          }
        }
        if (histStart >= 0) {
          pw.print("NEXT: ");
          pw.println(lastTime + 1);
        }
      }
  finally {
        finishIteratingHistoryLocked();
      }
    }
  }
  if (filtering && (flags & (DUMP_UNPLUGGED_ONLY | DUMP_CHARGED_ONLY)) == 0) {
    return;
  }
  if (apps != null) {
    SparseArray<ArrayList<String>> uids=new SparseArray<ArrayList<String>>();
    for (int i=0; i < apps.size(); i++) {
      ApplicationInfo ai=apps.get(i);
      ArrayList<String> pkgs=uids.get(ai.uid);
      if (pkgs == null) {
        pkgs=new ArrayList<String>();
        uids.put(ai.uid,pkgs);
      }
      pkgs.add(ai.packageName);
    }
    SparseArray<? extends Uid> uidStats=getUidStats();
    final int NU=uidStats.size();
    String[] lineArgs=new String[2];
    for (int i=0; i < NU; i++) {
      int uid=uidStats.keyAt(i);
      ArrayList<String> pkgs=uids.get(uid);
      if (pkgs != null) {
        for (int j=0; j < pkgs.size(); j++) {
          lineArgs[0]=Integer.toString(uid);
          lineArgs[1]=pkgs.get(j);
          dumpLine(pw,0,"i",UID_DATA,(Object[])lineArgs);
        }
      }
    }
  }
  if (!filtering || (flags & DUMP_CHARGED_ONLY) != 0) {
    dumpCheckinLocked(context,pw,STATS_SINCE_CHARGED,-1);
  }
  if (!filtering || (flags & DUMP_UNPLUGGED_ONLY) != 0) {
    dumpCheckinLocked(context,pw,STATS_SINCE_UNPLUGGED,-1);
  }
}
