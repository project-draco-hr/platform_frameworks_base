{
  long uSecTime=SystemClock.elapsedRealtime() * 1000;
  final long uSecNow=getBatteryUptime(uSecTime);
  StringBuilder sb=new StringBuilder(128);
  if (which == STATS_TOTAL) {
    pw.println(prefix + "Current and Historic Battery Usage Statistics:");
    pw.println(prefix + "  System starts: " + getStartCount());
  }
 else   if (which == STATS_LAST) {
    pw.println(prefix + "Last Battery Usage Statistics:");
  }
 else {
    pw.println(prefix + "Current Battery Usage Statistics:");
  }
  long batteryUptime=computeBatteryUptime(uSecNow,which);
  long batteryRealtime=computeBatteryRealtime(getBatteryRealtime(uSecTime),which);
  long elapsedRealtime=computeRealtime(uSecTime,which);
  long uptime=computeUptime(SystemClock.uptimeMillis() * 1000,which);
  pw.println(prefix + "  On battery: " + formatTimeMs(batteryUptime / 1000)+ "("+ formatRatioLocked(batteryUptime,batteryRealtime)+ ") uptime, "+ formatTimeMs(batteryRealtime / 1000)+ "("+ formatRatioLocked(batteryRealtime,elapsedRealtime)+ ") realtime");
  pw.println(prefix + "  Total: " + formatTimeMs(uptime / 1000)+ "uptime, "+ formatTimeMs(elapsedRealtime / 1000)+ "realtime");
  pw.println(" ");
  SparseArray<? extends Uid> uidStats=getUidStats();
  final int NU=uidStats.size();
  for (int iu=0; iu < NU; iu++) {
    final int uid=uidStats.keyAt(iu);
    Uid u=uidStats.valueAt(iu);
    pw.println(prefix + "  #" + uid+ ":");
    boolean uidActivity=false;
    Map<String,? extends BatteryStats.Uid.Wakelock> wakelocks=u.getWakelockStats();
    if (wakelocks.size() > 0) {
      for (      Map.Entry<String,? extends BatteryStats.Uid.Wakelock> ent : wakelocks.entrySet()) {
        Uid.Wakelock wl=ent.getValue();
        String linePrefix=": ";
        sb.setLength(0);
        sb.append(prefix);
        sb.append("    Wake lock ");
        sb.append(ent.getKey());
        linePrefix=printWakeLock(sb,wl.getWakeTime(WAKE_TYPE_FULL),uSecNow,"full",which,linePrefix);
        linePrefix=printWakeLock(sb,wl.getWakeTime(WAKE_TYPE_PARTIAL),uSecNow,"partial",which,linePrefix);
        linePrefix=printWakeLock(sb,wl.getWakeTime(WAKE_TYPE_WINDOW),uSecNow,"window",which,linePrefix);
        if (linePrefix.equals(": ")) {
          sb.append(": (nothing executed)");
        }
        pw.println(sb.toString());
        uidActivity=true;
      }
    }
    Map<Integer,? extends BatteryStats.Uid.Sensor> sensors=u.getSensorStats();
    if (sensors.size() > 0) {
      for (      Map.Entry<Integer,? extends BatteryStats.Uid.Sensor> ent : sensors.entrySet()) {
        Uid.Sensor se=ent.getValue();
        int sensorNumber=ent.getKey();
        sb.setLength(0);
        sb.append(prefix);
        sb.append("    Sensor ");
        sb.append(sensorNumber);
        Timer timer=se.getSensorTime();
        if (timer != null) {
          long totalTime=(timer.getTotalTime(uSecNow,which) + 500) / 1000;
          int count=timer.getCount(which);
          if (totalTime != 0) {
            sb.append(": ");
            sb.append(formatTimeMs(totalTime));
            sb.append(' ');
            sb.append('(');
            sb.append(count);
            sb.append(" times)");
          }
        }
 else {
          sb.append(": (none used)");
        }
        pw.println(sb.toString());
        uidActivity=true;
      }
    }
    Map<String,? extends BatteryStats.Uid.Proc> processStats=u.getProcessStats();
    if (processStats.size() > 0) {
      for (      Map.Entry<String,? extends BatteryStats.Uid.Proc> ent : processStats.entrySet()) {
        Uid.Proc ps=ent.getValue();
        long userTime;
        long systemTime;
        int starts;
        userTime=ps.getUserTime(which);
        systemTime=ps.getSystemTime(which);
        starts=ps.getStarts(which);
        if (userTime != 0 || systemTime != 0 || starts != 0) {
          pw.println(prefix + "    Proc " + ent.getKey()+ ":");
          pw.println(prefix + "      CPU: " + formatTime(userTime)+ "user + "+ formatTime(systemTime)+ "kernel");
          pw.println(prefix + "      " + starts+ " process starts");
          uidActivity=true;
        }
      }
    }
    Map<String,? extends BatteryStats.Uid.Pkg> packageStats=u.getPackageStats();
    if (packageStats.size() > 0) {
      for (      Map.Entry<String,? extends BatteryStats.Uid.Pkg> ent : packageStats.entrySet()) {
        pw.println(prefix + "    Apk " + ent.getKey()+ ":");
        boolean apkActivity=false;
        Uid.Pkg ps=ent.getValue();
        int wakeups=ps.getWakeups(which);
        if (wakeups != 0) {
          pw.println(prefix + "      " + wakeups+ " wakeup alarms");
          apkActivity=true;
        }
        Map<String,? extends Uid.Pkg.Serv> serviceStats=ps.getServiceStats();
        if (serviceStats.size() > 0) {
          for (          Map.Entry<String,? extends BatteryStats.Uid.Pkg.Serv> sent : serviceStats.entrySet()) {
            BatteryStats.Uid.Pkg.Serv ss=sent.getValue();
            long startTime=ss.getStartTime(uSecNow,which);
            int starts=ss.getStarts(which);
            int launches=ss.getLaunches(which);
            if (startTime != 0 || starts != 0 || launches != 0) {
              pw.println(prefix + "      Service " + sent.getKey()+ ":");
              pw.println(prefix + "        Time spent started: " + formatTimeMs(startTime / 1000));
              pw.println(prefix + "        Starts: " + starts+ ", launches: "+ launches);
              apkActivity=true;
            }
          }
        }
        if (!apkActivity) {
          pw.println(prefix + "      (nothing executed)");
        }
        uidActivity=true;
      }
    }
    if (!uidActivity) {
      pw.println(prefix + "    (nothing executed)");
    }
  }
}
