{
  final long rawUptime=SystemClock.uptimeMillis() * 1000;
  final long rawRealtime=SystemClock.elapsedRealtime() * 1000;
  final long batteryUptime=getBatteryUptime(rawUptime);
  final long batteryRealtime=getBatteryRealtime(rawRealtime);
  final long whichBatteryUptime=computeBatteryUptime(rawUptime,which);
  final long whichBatteryRealtime=computeBatteryRealtime(rawRealtime,which);
  final long totalRealtime=computeRealtime(rawRealtime,which);
  final long totalUptime=computeUptime(rawUptime,which);
  final long screenOnTime=getScreenOnTime(batteryRealtime,which);
  final long phoneOnTime=getPhoneOnTime(batteryRealtime,which);
  final long wifiOnTime=getWifiOnTime(batteryRealtime,which);
  final long wifiRunningTime=getWifiRunningTime(batteryRealtime,which);
  final long bluetoothOnTime=getBluetoothOnTime(batteryRealtime,which);
  StringBuilder sb=new StringBuilder(128);
  SparseArray<? extends Uid> uidStats=getUidStats();
  final int NU=uidStats.size();
  String category=STAT_NAMES[which];
  dumpLine(pw,0,category,BATTERY_DATA,which == STATS_TOTAL ? getStartCount() : "N/A",whichBatteryRealtime / 1000,whichBatteryUptime / 1000,totalRealtime / 1000,totalUptime / 1000);
  long rxTotal=0;
  long txTotal=0;
  long fullWakeLockTimeTotal=0;
  long partialWakeLockTimeTotal=0;
  for (int iu=0; iu < NU; iu++) {
    Uid u=uidStats.valueAt(iu);
    rxTotal+=u.getTcpBytesReceived(which);
    txTotal+=u.getTcpBytesSent(which);
    Map<String,? extends BatteryStats.Uid.Wakelock> wakelocks=u.getWakelockStats();
    if (wakelocks.size() > 0) {
      for (      Map.Entry<String,? extends BatteryStats.Uid.Wakelock> ent : wakelocks.entrySet()) {
        Uid.Wakelock wl=ent.getValue();
        Timer fullWakeTimer=wl.getWakeTime(WAKE_TYPE_FULL);
        if (fullWakeTimer != null) {
          fullWakeLockTimeTotal+=fullWakeTimer.getTotalTime(batteryRealtime,which);
        }
        Timer partialWakeTimer=wl.getWakeTime(WAKE_TYPE_PARTIAL);
        if (partialWakeTimer != null) {
          partialWakeLockTimeTotal+=partialWakeTimer.getTotalTime(batteryRealtime,which);
        }
      }
    }
  }
  dumpLine(pw,0,category,MISC_DATA,screenOnTime / 1000,phoneOnTime / 1000,wifiOnTime / 1000,wifiRunningTime / 1000,bluetoothOnTime / 1000,rxTotal,txTotal,fullWakeLockTimeTotal,partialWakeLockTimeTotal,getInputEventCount(which));
  Object[] args=new Object[NUM_SCREEN_BRIGHTNESS_BINS];
  for (int i=0; i < NUM_SCREEN_BRIGHTNESS_BINS; i++) {
    args[i]=getScreenBrightnessTime(i,batteryRealtime,which) / 1000;
  }
  dumpLine(pw,0,category,SCREEN_BRIGHTNESS_DATA,args);
  args=new Object[NUM_SIGNAL_STRENGTH_BINS];
  for (int i=0; i < NUM_SIGNAL_STRENGTH_BINS; i++) {
    args[i]=getPhoneSignalStrengthTime(i,batteryRealtime,which) / 1000;
  }
  dumpLine(pw,0,category,SIGNAL_STRENGTH_TIME_DATA,args);
  for (int i=0; i < NUM_SIGNAL_STRENGTH_BINS; i++) {
    args[i]=getPhoneSignalStrengthCount(i,which);
  }
  dumpLine(pw,0,category,SIGNAL_STRENGTH_COUNT_DATA,args);
  args=new Object[NUM_DATA_CONNECTION_TYPES];
  for (int i=0; i < NUM_DATA_CONNECTION_TYPES; i++) {
    args[i]=getPhoneDataConnectionTime(i,batteryRealtime,which) / 1000;
  }
  dumpLine(pw,0,category,DATA_CONNECTION_TIME_DATA,args);
  for (int i=0; i < NUM_DATA_CONNECTION_TYPES; i++) {
    args[i]=getPhoneDataConnectionCount(i,which);
  }
  dumpLine(pw,0,category,DATA_CONNECTION_COUNT_DATA,args);
  if (which == STATS_UNPLUGGED) {
    dumpLine(pw,0,category,BATTERY_DATA,getUnpluggedStartLevel(),getPluggedStartLevel());
  }
  for (int iu=0; iu < NU; iu++) {
    final int uid=uidStats.keyAt(iu);
    Uid u=uidStats.valueAt(iu);
    long rx=u.getTcpBytesReceived(which);
    long tx=u.getTcpBytesSent(which);
    long fullWifiLockOnTime=u.getFullWifiLockTime(batteryRealtime,which);
    long scanWifiLockOnTime=u.getScanWifiLockTime(batteryRealtime,which);
    long wifiTurnedOnTime=u.getWifiTurnedOnTime(batteryRealtime,which);
    if (rx > 0 || tx > 0)     dumpLine(pw,uid,category,NETWORK_DATA,rx,tx);
    if (fullWifiLockOnTime != 0 || scanWifiLockOnTime != 0 || wifiTurnedOnTime != 0) {
      dumpLine(pw,uid,category,WIFI_LOCK_DATA,fullWifiLockOnTime,scanWifiLockOnTime,wifiTurnedOnTime);
    }
    if (u.hasUserActivity()) {
      args=new Object[Uid.NUM_USER_ACTIVITY_TYPES];
      boolean hasData=false;
      for (int i=0; i < Uid.NUM_USER_ACTIVITY_TYPES; i++) {
        int val=u.getUserActivityCount(i,which);
        args[i]=val;
        if (val != 0)         hasData=true;
      }
      if (hasData) {
        dumpLine(pw,0,category,USER_ACTIVITY_DATA,args);
      }
    }
    Map<String,? extends BatteryStats.Uid.Wakelock> wakelocks=u.getWakelockStats();
    if (wakelocks.size() > 0) {
      for (      Map.Entry<String,? extends BatteryStats.Uid.Wakelock> ent : wakelocks.entrySet()) {
        Uid.Wakelock wl=ent.getValue();
        String linePrefix="";
        sb.setLength(0);
        linePrefix=printWakeLockCheckin(sb,wl.getWakeTime(WAKE_TYPE_FULL),batteryRealtime,"full",which,linePrefix);
        linePrefix=printWakeLockCheckin(sb,wl.getWakeTime(WAKE_TYPE_PARTIAL),batteryRealtime,"partial",which,linePrefix);
        linePrefix=printWakeLockCheckin(sb,wl.getWakeTime(WAKE_TYPE_WINDOW),batteryRealtime,"window",which,linePrefix);
        if (sb.length() > 0) {
          dumpLine(pw,uid,category,WAKELOCK_DATA,ent.getKey(),sb.toString());
        }
      }
    }
    Map<Integer,? extends BatteryStats.Uid.Sensor> sensors=u.getSensorStats();
    if (sensors.size() > 0) {
      for (      Map.Entry<Integer,? extends BatteryStats.Uid.Sensor> ent : sensors.entrySet()) {
        Uid.Sensor se=ent.getValue();
        int sensorNumber=ent.getKey();
        Timer timer=se.getSensorTime();
        if (timer != null) {
          long totalTime=(timer.getTotalTime(batteryRealtime,which) + 500) / 1000;
          int count=timer.getCount(which);
          if (totalTime != 0) {
            dumpLine(pw,uid,category,SENSOR_DATA,sensorNumber,totalTime,count);
          }
        }
      }
    }
    Map<String,? extends BatteryStats.Uid.Proc> processStats=u.getProcessStats();
    if (processStats.size() > 0) {
      for (      Map.Entry<String,? extends BatteryStats.Uid.Proc> ent : processStats.entrySet()) {
        Uid.Proc ps=ent.getValue();
        long userTime=ps.getUserTime(which);
        long systemTime=ps.getSystemTime(which);
        int starts=ps.getStarts(which);
        if (userTime != 0 || systemTime != 0 || starts != 0) {
          dumpLine(pw,uid,category,PROCESS_DATA,ent.getKey(),userTime * 10,systemTime * 10,starts);
        }
      }
    }
    Map<String,? extends BatteryStats.Uid.Pkg> packageStats=u.getPackageStats();
    if (packageStats.size() > 0) {
      for (      Map.Entry<String,? extends BatteryStats.Uid.Pkg> ent : packageStats.entrySet()) {
        Uid.Pkg ps=ent.getValue();
        int wakeups=ps.getWakeups(which);
        Map<String,? extends Uid.Pkg.Serv> serviceStats=ps.getServiceStats();
        for (        Map.Entry<String,? extends BatteryStats.Uid.Pkg.Serv> sent : serviceStats.entrySet()) {
          BatteryStats.Uid.Pkg.Serv ss=sent.getValue();
          long startTime=ss.getStartTime(batteryUptime,which);
          int starts=ss.getStarts(which);
          int launches=ss.getLaunches(which);
          if (startTime != 0 || starts != 0 || launches != 0) {
            dumpLine(pw,uid,category,APK_DATA,wakeups,ent.getKey(),sent.getKey(),startTime / 1000,starts,launches);
          }
        }
      }
    }
  }
}
