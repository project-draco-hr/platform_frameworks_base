{
  prepareForDumpLocked();
  final boolean filtering=(flags & (DUMP_HISTORY_ONLY | DUMP_UNPLUGGED_ONLY | DUMP_CHARGED_ONLY| DUMP_DAILY_ONLY)) != 0;
  if ((flags & DUMP_HISTORY_ONLY) != 0 || !filtering) {
    final long historyTotalSize=getHistoryTotalSize();
    final long historyUsedSize=getHistoryUsedSize();
    if (startIteratingHistoryLocked()) {
      try {
        pw.print("Battery History (");
        pw.print((100 * historyUsedSize) / historyTotalSize);
        pw.print("% used, ");
        printSizeValue(pw,historyUsedSize);
        pw.print(" used of ");
        printSizeValue(pw,historyTotalSize);
        pw.print(", ");
        pw.print(getHistoryStringPoolSize());
        pw.print(" strings using ");
        printSizeValue(pw,getHistoryStringPoolBytes());
        pw.println("):");
        dumpHistoryLocked(pw,flags,histStart,false);
        pw.println();
      }
  finally {
        finishIteratingHistoryLocked();
      }
    }
    if (startIteratingOldHistoryLocked()) {
      try {
        final HistoryItem rec=new HistoryItem();
        pw.println("Old battery History:");
        HistoryPrinter hprinter=new HistoryPrinter();
        long baseTime=-1;
        while (getNextOldHistoryLocked(rec)) {
          if (baseTime < 0) {
            baseTime=rec.time;
          }
          hprinter.printNextItem(pw,rec,baseTime,false,(flags & DUMP_VERBOSE) != 0);
        }
        pw.println();
      }
  finally {
        finishIteratingOldHistoryLocked();
      }
    }
  }
  if (filtering && (flags & (DUMP_UNPLUGGED_ONLY | DUMP_CHARGED_ONLY | DUMP_DAILY_ONLY)) == 0) {
    return;
  }
  if (!filtering) {
    SparseArray<? extends Uid> uidStats=getUidStats();
    final int NU=uidStats.size();
    boolean didPid=false;
    long nowRealtime=SystemClock.elapsedRealtime();
    for (int i=0; i < NU; i++) {
      Uid uid=uidStats.valueAt(i);
      SparseArray<? extends Uid.Pid> pids=uid.getPidStats();
      if (pids != null) {
        for (int j=0; j < pids.size(); j++) {
          Uid.Pid pid=pids.valueAt(j);
          if (!didPid) {
            pw.println("Per-PID Stats:");
            didPid=true;
          }
          long time=pid.mWakeSumMs + (pid.mWakeNesting > 0 ? (nowRealtime - pid.mWakeStartMs) : 0);
          pw.print("  PID ");
          pw.print(pids.keyAt(j));
          pw.print(" wake time: ");
          TimeUtils.formatDuration(time,pw);
          pw.println("");
        }
      }
    }
    if (didPid) {
      pw.println();
    }
  }
  if (!filtering || (flags & DUMP_CHARGED_ONLY) != 0) {
    if (dumpDurationSteps(pw,"  ","Discharge step durations:",getDischargeLevelStepTracker(),false)) {
      long timeRemaining=computeBatteryTimeRemaining(SystemClock.elapsedRealtime());
      if (timeRemaining >= 0) {
        pw.print("  Estimated discharge time remaining: ");
        TimeUtils.formatDuration(timeRemaining / 1000,pw);
        pw.println();
      }
      final LevelStepTracker steps=getDischargeLevelStepTracker();
      for (int i=0; i < STEP_LEVEL_MODES_OF_INTEREST.length; i++) {
        dumpTimeEstimate(pw,"  Estimated ",STEP_LEVEL_MODE_LABELS[i]," time: ",steps.computeTimeEstimate(STEP_LEVEL_MODES_OF_INTEREST[i],STEP_LEVEL_MODE_VALUES[i],null));
      }
      pw.println();
    }
    if (dumpDurationSteps(pw,"  ","Charge step durations:",getChargeLevelStepTracker(),false)) {
      long timeRemaining=computeChargeTimeRemaining(SystemClock.elapsedRealtime());
      if (timeRemaining >= 0) {
        pw.print("  Estimated charge time remaining: ");
        TimeUtils.formatDuration(timeRemaining / 1000,pw);
        pw.println();
      }
      pw.println();
    }
  }
  if (!filtering || (flags & (DUMP_CHARGED_ONLY | DUMP_DAILY_ONLY)) != 0) {
    pw.println("Daily stats:");
    pw.print("  Current start time: ");
    pw.println(DateFormat.format("yyyy-MM-dd-HH-mm-ss",getCurrentDailyStartTime()).toString());
    pw.print("  Next min deadline: ");
    pw.println(DateFormat.format("yyyy-MM-dd-HH-mm-ss",getNextMinDailyDeadline()).toString());
    pw.print("  Next max deadline: ");
    pw.println(DateFormat.format("yyyy-MM-dd-HH-mm-ss",getNextMaxDailyDeadline()).toString());
    StringBuilder sb=new StringBuilder(64);
    int[] outInt=new int[1];
    LevelStepTracker dsteps=getDailyDischargeLevelStepTracker();
    LevelStepTracker csteps=getDailyChargeLevelStepTracker();
    if (dsteps.mNumStepDurations > 0 || csteps.mNumStepDurations > 0) {
      if ((flags & DUMP_DAILY_ONLY) != 0) {
        if (dumpDurationSteps(pw,"    ","  Current daily discharge step durations:",dsteps,false)) {
          dumpDailyLevelStepSummary(pw,"      ","Discharge",dsteps,sb,outInt);
        }
        if (dumpDurationSteps(pw,"    ","  Current daily charge step durations:",csteps,false)) {
          dumpDailyLevelStepSummary(pw,"      ","Charge",csteps,sb,outInt);
        }
      }
 else {
        pw.println("  Current daily steps:");
        dumpDailyLevelStepSummary(pw,"    ","Discharge",dsteps,sb,outInt);
        dumpDailyLevelStepSummary(pw,"    ","Charge",csteps,sb,outInt);
      }
    }
    DailyItem dit;
    int curIndex=0;
    while ((dit=getDailyItemLocked(curIndex)) != null) {
      curIndex++;
      if ((flags & DUMP_DAILY_ONLY) != 0) {
        pw.println();
      }
      pw.print("  Daily from ");
      pw.print(DateFormat.format("yyyy-MM-dd-HH-mm-ss",dit.mStartTime).toString());
      pw.print(" to ");
      pw.print(DateFormat.format("yyyy-MM-dd-HH-mm-ss",dit.mEndTime).toString());
      pw.println(":");
      if ((flags & DUMP_DAILY_ONLY) != 0) {
        if (dumpDurationSteps(pw,"      ","    Discharge step durations:",dit.mDischargeSteps,false)) {
          dumpDailyLevelStepSummary(pw,"        ","Discharge",dit.mDischargeSteps,sb,outInt);
        }
        if (dumpDurationSteps(pw,"      ","    Charge step durations:",dit.mChargeSteps,false)) {
          dumpDailyLevelStepSummary(pw,"        ","Charge",dit.mChargeSteps,sb,outInt);
        }
      }
 else {
        dumpDailyLevelStepSummary(pw,"    ","Discharge",dit.mDischargeSteps,sb,outInt);
        dumpDailyLevelStepSummary(pw,"    ","Charge",dit.mChargeSteps,sb,outInt);
      }
    }
    pw.println();
  }
  if (!filtering || (flags & DUMP_CHARGED_ONLY) != 0) {
    pw.println("Statistics since last charge:");
    pw.println("  System starts: " + getStartCount() + ", currently on battery: "+ getIsOnBattery());
    dumpLocked(context,pw,"",STATS_SINCE_CHARGED,reqUid,(flags & DUMP_DEVICE_WIFI_ONLY) != 0);
    pw.println();
  }
  if (!filtering || (flags & DUMP_UNPLUGGED_ONLY) != 0) {
    pw.println("Statistics since last unplugged:");
    dumpLocked(context,pw,"",STATS_SINCE_UNPLUGGED,reqUid,(flags & DUMP_DEVICE_WIFI_ONLY) != 0);
  }
}
