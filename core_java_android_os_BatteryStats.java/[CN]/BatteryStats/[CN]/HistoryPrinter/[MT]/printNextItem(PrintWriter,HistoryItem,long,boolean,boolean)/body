{
  if (!checkin) {
    pw.print("  ");
    TimeUtils.formatDuration(rec.time - baseTime,pw,TimeUtils.HUNDRED_DAY_FIELD_LEN);
    pw.print(" (");
    pw.print(rec.numReadInts);
    pw.print(") ");
  }
 else {
    if (lastTime < 0) {
      pw.print(rec.time - baseTime);
    }
 else {
      pw.print(rec.time - lastTime);
    }
    lastTime=rec.time;
  }
  if (rec.cmd == HistoryItem.CMD_START) {
    if (checkin) {
      pw.print(":");
    }
    pw.println("START");
  }
 else   if (rec.cmd == HistoryItem.CMD_CURRENT_TIME) {
    if (checkin) {
      pw.print(":");
    }
    pw.print("TIME:");
    if (checkin) {
      pw.println(rec.currentTime);
    }
 else {
      pw.print(" ");
      pw.println(DateFormat.format("yyyy-MM-dd-HH-mm-ss",rec.currentTime).toString());
    }
  }
 else   if (rec.cmd == HistoryItem.CMD_OVERFLOW) {
    if (checkin) {
      pw.print(":");
    }
    pw.println("*OVERFLOW*");
  }
 else {
    if (!checkin) {
      if (rec.batteryLevel < 10)       pw.print("00");
 else       if (rec.batteryLevel < 100)       pw.print("0");
      pw.print(rec.batteryLevel);
      if (verbose) {
        pw.print(" ");
        if (rec.states < 0)         ;
 else         if (rec.states < 0x10)         pw.print("0000000");
 else         if (rec.states < 0x100)         pw.print("000000");
 else         if (rec.states < 0x1000)         pw.print("00000");
 else         if (rec.states < 0x10000)         pw.print("0000");
 else         if (rec.states < 0x100000)         pw.print("000");
 else         if (rec.states < 0x1000000)         pw.print("00");
 else         if (rec.states < 0x10000000)         pw.print("0");
        pw.print(Integer.toHexString(rec.states));
      }
    }
 else {
      if (oldLevel != rec.batteryLevel) {
        oldLevel=rec.batteryLevel;
        pw.print(",Bl=");
        pw.print(rec.batteryLevel);
      }
    }
    if (oldStatus != rec.batteryStatus) {
      oldStatus=rec.batteryStatus;
      pw.print(checkin ? ",Bs=" : " status=");
switch (oldStatus) {
case BatteryManager.BATTERY_STATUS_UNKNOWN:
        pw.print(checkin ? "?" : "unknown");
      break;
case BatteryManager.BATTERY_STATUS_CHARGING:
    pw.print(checkin ? "c" : "charging");
  break;
case BatteryManager.BATTERY_STATUS_DISCHARGING:
pw.print(checkin ? "d" : "discharging");
break;
case BatteryManager.BATTERY_STATUS_NOT_CHARGING:
pw.print(checkin ? "n" : "not-charging");
break;
case BatteryManager.BATTERY_STATUS_FULL:
pw.print(checkin ? "f" : "full");
break;
default :
pw.print(oldStatus);
break;
}
}
if (oldHealth != rec.batteryHealth) {
oldHealth=rec.batteryHealth;
pw.print(checkin ? ",Bh=" : " health=");
switch (oldHealth) {
case BatteryManager.BATTERY_HEALTH_UNKNOWN:
pw.print(checkin ? "?" : "unknown");
break;
case BatteryManager.BATTERY_HEALTH_GOOD:
pw.print(checkin ? "g" : "good");
break;
case BatteryManager.BATTERY_HEALTH_OVERHEAT:
pw.print(checkin ? "h" : "overheat");
break;
case BatteryManager.BATTERY_HEALTH_DEAD:
pw.print(checkin ? "d" : "dead");
break;
case BatteryManager.BATTERY_HEALTH_OVER_VOLTAGE:
pw.print(checkin ? "v" : "over-voltage");
break;
case BatteryManager.BATTERY_HEALTH_UNSPECIFIED_FAILURE:
pw.print(checkin ? "f" : "failure");
break;
case BatteryManager.BATTERY_HEALTH_COLD:
pw.print(checkin ? "c" : "cold");
break;
default :
pw.print(oldHealth);
break;
}
}
if (oldPlug != rec.batteryPlugType) {
oldPlug=rec.batteryPlugType;
pw.print(checkin ? ",Bp=" : " plug=");
switch (oldPlug) {
case 0:
pw.print(checkin ? "n" : "none");
break;
case BatteryManager.BATTERY_PLUGGED_AC:
pw.print(checkin ? "a" : "ac");
break;
case BatteryManager.BATTERY_PLUGGED_USB:
pw.print(checkin ? "u" : "usb");
break;
case BatteryManager.BATTERY_PLUGGED_WIRELESS:
pw.print(checkin ? "w" : "wireless");
break;
default :
pw.print(oldPlug);
break;
}
}
if (oldTemp != rec.batteryTemperature) {
oldTemp=rec.batteryTemperature;
pw.print(checkin ? ",Bt=" : " temp=");
pw.print(oldTemp);
}
if (oldVolt != rec.batteryVoltage) {
oldVolt=rec.batteryVoltage;
pw.print(checkin ? ",Bv=" : " volt=");
pw.print(oldVolt);
}
printBitDescriptions(pw,oldState,rec.states,rec.wakelockTag,HISTORY_STATE_DESCRIPTIONS,!checkin);
printBitDescriptions(pw,oldState2,rec.states2,null,HISTORY_STATE2_DESCRIPTIONS,!checkin);
if (rec.wakeReasonTag != null) {
if (checkin) {
pw.print(",wr=");
pw.print(rec.wakeReasonTag.poolIdx);
}
 else {
pw.print(" wake_reason=");
pw.print(rec.wakeReasonTag.uid);
pw.print(":\"");
pw.print(rec.wakeReasonTag.string);
pw.print("\"");
}
}
if (rec.eventCode != HistoryItem.EVENT_NONE) {
pw.print(checkin ? "," : " ");
if ((rec.eventCode & HistoryItem.EVENT_FLAG_START) != 0) {
pw.print("+");
}
 else if ((rec.eventCode & HistoryItem.EVENT_FLAG_FINISH) != 0) {
pw.print("-");
}
String[] eventNames=checkin ? HISTORY_EVENT_CHECKIN_NAMES : HISTORY_EVENT_NAMES;
int idx=rec.eventCode & ~(HistoryItem.EVENT_FLAG_START | HistoryItem.EVENT_FLAG_FINISH);
if (idx >= 0 && idx < eventNames.length) {
pw.print(eventNames[idx]);
}
 else {
pw.print(checkin ? "Ev" : "event");
pw.print(idx);
}
pw.print("=");
if (checkin) {
pw.print(rec.eventTag.poolIdx);
}
 else {
UserHandle.formatUid(pw,rec.eventTag.uid);
pw.print(":\"");
pw.print(rec.eventTag.string);
pw.print("\"");
}
}
pw.println();
oldState=rec.states;
}
}
