{
  try {
    OutputStream outputStream=startWrite();
    XmlSerializer out=new FastXmlSerializer();
    out.setOutput(outputStream,"utf-8");
    out.startDocument(null,true);
    if (mDeviceOwner != null) {
      out.startTag(null,TAG_DEVICE_OWNER);
      out.attribute(null,ATTR_PACKAGE,mDeviceOwner.packageName);
      if (mDeviceOwner.name != null) {
        out.attribute(null,ATTR_NAME,mDeviceOwner.name);
      }
      out.endTag(null,TAG_DEVICE_OWNER);
    }
    if (mDeviceInitializer != null) {
      out.startTag(null,TAG_DEVICE_INITIALIZER);
      out.attribute(null,ATTR_PACKAGE,mDeviceInitializer.packageName);
      if (mDeviceInitializer.name != null) {
        out.attribute(null,ATTR_NAME,mDeviceInitializer.name);
      }
      if (mDeviceInitializer.admin != null) {
        out.attribute(null,ATTR_COMPONENT_NAME,mDeviceInitializer.admin.flattenToString());
      }
      out.endTag(null,TAG_DEVICE_INITIALIZER);
    }
    if (mProfileOwners.size() > 0) {
      for (      HashMap.Entry<Integer,OwnerInfo> owner : mProfileOwners.entrySet()) {
        out.startTag(null,TAG_PROFILE_OWNER);
        OwnerInfo ownerInfo=owner.getValue();
        out.attribute(null,ATTR_PACKAGE,ownerInfo.packageName);
        out.attribute(null,ATTR_NAME,ownerInfo.name);
        out.attribute(null,ATTR_USERID,Integer.toString(owner.getKey()));
        if (ownerInfo.admin != null) {
          out.attribute(null,ATTR_COMPONENT_NAME,ownerInfo.admin.flattenToString());
        }
        out.endTag(null,TAG_PROFILE_OWNER);
      }
    }
    if (mSystemUpdatePolicy != null) {
      out.startTag(null,TAG_SYSTEM_UPDATE_POLICY);
      mSystemUpdatePolicy.saveToXml(out);
      out.endTag(null,TAG_SYSTEM_UPDATE_POLICY);
    }
    out.endDocument();
    out.flush();
    finishWrite(outputStream);
  }
 catch (  IOException ioe) {
    Slog.e(TAG,"IO Exception when writing device-owner file\n" + ioe);
  }
}
