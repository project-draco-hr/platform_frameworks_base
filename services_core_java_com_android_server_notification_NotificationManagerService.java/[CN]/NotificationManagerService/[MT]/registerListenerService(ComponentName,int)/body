{
  checkCallerIsSystem();
  if (DBG)   Slog.v(TAG,"registerListenerService: " + name + " u="+ userid);
synchronized (mNotificationList) {
    final String servicesBindingTag=name.toString() + "/" + userid;
    if (mServicesBinding.contains(servicesBindingTag)) {
      return;
    }
    mServicesBinding.add(servicesBindingTag);
    final int N=mListeners.size();
    for (int i=N - 1; i >= 0; i--) {
      final NotificationListenerInfo info=mListeners.get(i);
      if (name.equals(info.component) && info.userid == userid) {
        if (DBG)         Slog.v(TAG,"    disconnecting old listener: " + info.listener);
        mListeners.remove(i);
        if (info.connection != null) {
          getContext().unbindService(info.connection);
        }
      }
    }
    Intent intent=new Intent(NotificationListenerService.SERVICE_INTERFACE);
    intent.setComponent(name);
    intent.putExtra(Intent.EXTRA_CLIENT_LABEL,R.string.notification_listener_binding_label);
    final PendingIntent pendingIntent=PendingIntent.getActivity(getContext(),0,new Intent(Settings.ACTION_NOTIFICATION_LISTENER_SETTINGS),0);
    intent.putExtra(Intent.EXTRA_CLIENT_INTENT,pendingIntent);
    try {
      if (DBG)       Slog.v(TAG,"binding: " + intent);
      if (!getContext().bindServiceAsUser(intent,new ServiceConnection(){
        INotificationListener mListener;
        @Override public void onServiceConnected(        ComponentName name,        IBinder service){
          boolean added=false;
synchronized (mNotificationList) {
            mServicesBinding.remove(servicesBindingTag);
            try {
              mListener=INotificationListener.Stub.asInterface(service);
              NotificationListenerInfo info=new NotificationListenerInfo(mListener,name,userid,this);
              service.linkToDeath(info,0);
              added=mListeners.add(info);
            }
 catch (            RemoteException e) {
            }
          }
          if (added) {
            final String[] keys=getActiveNotificationKeysFromListener(mListener);
            try {
              mListener.onListenerConnected(keys);
            }
 catch (            RemoteException e) {
            }
          }
        }
        @Override public void onServiceDisconnected(        ComponentName name){
          Slog.v(TAG,"notification listener connection lost: " + name);
        }
      }
,Context.BIND_AUTO_CREATE,new UserHandle(userid))) {
        mServicesBinding.remove(servicesBindingTag);
        Slog.w(TAG,"Unable to bind listener service: " + intent);
        return;
      }
    }
 catch (    SecurityException ex) {
      Slog.e(TAG,"Unable to bind listener service: " + intent,ex);
      return;
    }
  }
}
