{
  pw.print("Current Notification Manager state");
  if (filter.filtered) {
    pw.print(" (filtered to ");
    pw.print(filter);
    pw.print(")");
  }
  pw.println(':');
  int N;
  final boolean zenOnly=filter != null && filter.zen;
  if (!zenOnly) {
synchronized (mToastQueue) {
      N=mToastQueue.size();
      if (N > 0) {
        pw.println("  Toast Queue:");
        for (int i=0; i < N; i++) {
          mToastQueue.get(i).dump(pw,"    ",filter);
        }
        pw.println("  ");
      }
    }
  }
synchronized (mNotificationList) {
    if (!zenOnly) {
      N=mNotificationList.size();
      if (N > 0) {
        pw.println("  Notification List:");
        for (int i=0; i < N; i++) {
          final NotificationRecord nr=mNotificationList.get(i);
          if (filter != null && !filter.matches(nr.sbn))           continue;
          nr.dump(pw,"    ",getContext(),filter.redact);
        }
        pw.println("  ");
      }
      if (filter == null) {
        N=mLights.size();
        if (N > 0) {
          pw.println("  Lights List:");
          for (int i=0; i < N; i++) {
            if (i == N - 1) {
              pw.print("  > ");
            }
 else {
              pw.print("    ");
            }
            pw.println(mLights.get(i));
          }
          pw.println("  ");
        }
        pw.println("  mUseAttentionLight=" + mUseAttentionLight);
        pw.println("  mNotificationPulseEnabled=" + mNotificationPulseEnabled);
        pw.println("  mSoundNotificationKey=" + mSoundNotificationKey);
        pw.println("  mVibrateNotificationKey=" + mVibrateNotificationKey);
        pw.println("  mDisableNotificationEffects=" + mDisableNotificationEffects);
        pw.println("  mCallState=" + callStateToString(mCallState));
        pw.println("  mSystemReady=" + mSystemReady);
      }
      pw.println("  mArchive=" + mArchive.toString());
      Iterator<StatusBarNotification> iter=mArchive.descendingIterator();
      int i=0;
      while (iter.hasNext()) {
        final StatusBarNotification sbn=iter.next();
        if (filter != null && !filter.matches(sbn))         continue;
        pw.println("    " + sbn);
        if (++i >= 5) {
          if (iter.hasNext())           pw.println("    ...");
          break;
        }
      }
    }
    if (!zenOnly) {
      pw.println("\n  Usage Stats:");
      mUsageStats.dump(pw,"    ",filter);
    }
    if (filter == null || zenOnly) {
      pw.println("\n  Zen Mode:");
      pw.print("    mInterruptionFilter=");
      pw.println(mInterruptionFilter);
      mZenModeHelper.dump(pw,"    ");
      pw.println("\n  Zen Log:");
      ZenLog.dump(pw,"    ");
    }
    if (!zenOnly) {
      pw.println("\n  Ranking Config:");
      mRankingHelper.dump(pw,"    ",filter);
      pw.println("\n  Notification listeners:");
      mListeners.dump(pw,filter);
      pw.print("    mListenerHints: ");
      pw.println(mListenerHints);
      pw.print("    mListenersDisablingEffects: (");
      N=mListenersDisablingEffects.size();
      for (int i=0; i < N; i++) {
        final ManagedServiceInfo listener=mListenersDisablingEffects.valueAt(i);
        if (i > 0)         pw.print(',');
        pw.print(listener.component);
      }
      pw.println(')');
    }
    pw.println("\n  Policy access:");
    pw.print("    mPolicyAccess: ");
    pw.println(mPolicyAccess);
    pw.println("\n  Condition providers:");
    mConditionProviders.dump(pw,filter);
    pw.println("\n  Group summaries:");
    for (    Entry<String,NotificationRecord> entry : mSummaryByGroupKey.entrySet()) {
      NotificationRecord r=entry.getValue();
      pw.println("    " + entry.getKey() + " -> "+ r.getKey());
      if (mNotificationsByKey.get(r.getKey()) != r) {
        pw.println("!!!!!!LEAK: Record not found in mNotificationsByKey.");
        r.dump(pw,"      ",getContext(),filter.redact);
      }
    }
    try {
      pw.println("\n  Banned Packages:");
      ArrayMap<Integer,ArrayList<String>> packageBans=getPackageBans(filter);
      for (      Integer userId : packageBans.keySet()) {
        for (        String packageName : packageBans.get(userId)) {
          pw.println("    " + userId + ": "+ packageName);
        }
      }
    }
 catch (    NameNotFoundException e) {
    }
  }
}
