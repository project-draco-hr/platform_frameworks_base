{
  boolean buzz=false;
  boolean beep=false;
  boolean blink=false;
  final Notification notification=record.sbn.getNotification();
  final boolean aboveThreshold=record.score >= SCORE_INTERRUPTION_THRESHOLD;
  final boolean canInterrupt=aboveThreshold && !record.isIntercepted();
  if (DBG || record.isIntercepted())   Slog.v(TAG,"pkg=" + record.sbn.getPackageName() + " canInterrupt="+ canInterrupt+ " intercept="+ record.isIntercepted());
  final int currentUser;
  final long token=Binder.clearCallingIdentity();
  try {
    currentUser=ActivityManager.getCurrentUser();
  }
  finally {
    Binder.restoreCallingIdentity(token);
  }
  final String disableEffects=disableNotificationEffects(record);
  if (disableEffects != null) {
    ZenLog.traceDisableEffects(record,disableEffects);
  }
  if (disableEffects == null && (!(record.isUpdate && (notification.flags & Notification.FLAG_ONLY_ALERT_ONCE) != 0)) && (record.getUserId() == UserHandle.USER_ALL || record.getUserId() == currentUser || mUserProfiles.isCurrentProfile(record.getUserId())) && canInterrupt && mSystemReady && mAudioManager != null) {
    if (DBG)     Slog.v(TAG,"Interrupting!");
    sendAccessibilityEvent(notification,record.sbn.getPackageName());
    final boolean useDefaultSound=(notification.defaults & Notification.DEFAULT_SOUND) != 0 || Settings.System.DEFAULT_NOTIFICATION_URI.equals(notification.sound);
    Uri soundUri=null;
    boolean hasValidSound=false;
    if (useDefaultSound) {
      soundUri=Settings.System.DEFAULT_NOTIFICATION_URI;
      ContentResolver resolver=getContext().getContentResolver();
      hasValidSound=Settings.System.getString(resolver,Settings.System.NOTIFICATION_SOUND) != null;
    }
 else     if (notification.sound != null) {
      soundUri=notification.sound;
      hasValidSound=(soundUri != null);
    }
    if (hasValidSound) {
      boolean looping=(notification.flags & Notification.FLAG_INSISTENT) != 0;
      AudioAttributes audioAttributes=audioAttributesForNotification(notification);
      mSoundNotificationKey=record.getKey();
      if ((mAudioManager.getStreamVolume(AudioAttributes.toLegacyStreamType(audioAttributes)) != 0) && !mAudioManager.isAudioFocusExclusive()) {
        final long identity=Binder.clearCallingIdentity();
        try {
          final IRingtonePlayer player=mAudioManager.getRingtonePlayer();
          if (player != null) {
            if (DBG)             Slog.v(TAG,"Playing sound " + soundUri + " with attributes "+ audioAttributes);
            player.playAsync(soundUri,record.sbn.getUser(),looping,audioAttributes);
            beep=true;
          }
        }
 catch (        RemoteException e) {
        }
 finally {
          Binder.restoreCallingIdentity(identity);
        }
      }
    }
    final boolean hasCustomVibrate=notification.vibrate != null;
    final boolean convertSoundToVibration=!hasCustomVibrate && hasValidSound && (mAudioManager.getRingerModeInternal() == AudioManager.RINGER_MODE_VIBRATE);
    final boolean useDefaultVibrate=(notification.defaults & Notification.DEFAULT_VIBRATE) != 0;
    if ((useDefaultVibrate || convertSoundToVibration || hasCustomVibrate) && !(mAudioManager.getRingerModeInternal() == AudioManager.RINGER_MODE_SILENT)) {
      mVibrateNotificationKey=record.getKey();
      if (useDefaultVibrate || convertSoundToVibration) {
        long identity=Binder.clearCallingIdentity();
        try {
          mVibrator.vibrate(record.sbn.getUid(),record.sbn.getOpPkg(),useDefaultVibrate ? mDefaultVibrationPattern : mFallbackVibrationPattern,((notification.flags & Notification.FLAG_INSISTENT) != 0) ? 0 : -1,audioAttributesForNotification(notification));
          buzz=true;
        }
  finally {
          Binder.restoreCallingIdentity(identity);
        }
      }
 else       if (notification.vibrate.length > 1) {
        mVibrator.vibrate(record.sbn.getUid(),record.sbn.getOpPkg(),notification.vibrate,((notification.flags & Notification.FLAG_INSISTENT) != 0) ? 0 : -1,audioAttributesForNotification(notification));
        buzz=true;
      }
    }
  }
  boolean wasShowLights=mLights.remove(record.getKey());
  if ((notification.flags & Notification.FLAG_SHOW_LIGHTS) != 0 && aboveThreshold) {
    mLights.add(record.getKey());
    updateLightsLocked();
    if (mUseAttentionLight) {
      mAttentionLight.pulse();
    }
    blink=true;
  }
 else   if (wasShowLights) {
    updateLightsLocked();
  }
  if (buzz || beep || blink) {
    EventLogTags.writeNotificationAlert(record.getKey(),buzz ? 1 : 0,beep ? 1 : 0,blink ? 1 : 0);
    mHandler.post(mBuzzBeepBlinked);
  }
}
