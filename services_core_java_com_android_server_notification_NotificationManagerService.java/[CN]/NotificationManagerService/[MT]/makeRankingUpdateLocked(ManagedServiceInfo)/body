{
  int speedBumpIndex=-1;
  final int N=mNotificationList.size();
  ArrayList<String> keys=new ArrayList<String>(N);
  ArrayList<String> interceptedKeys=new ArrayList<String>(N);
  Bundle visibilityOverrides=new Bundle();
  for (int i=0; i < N; i++) {
    NotificationRecord record=mNotificationList.get(i);
    if (!isVisibleToListener(record.sbn,info)) {
      continue;
    }
    keys.add(record.sbn.getKey());
    if (record.isIntercepted()) {
      interceptedKeys.add(record.sbn.getKey());
    }
    if (record.getPackageVisibilityOverride() != NotificationListenerService.Ranking.VISIBILITY_NO_OVERRIDE) {
      visibilityOverrides.putInt(record.sbn.getKey(),record.getPackageVisibilityOverride());
    }
    if (speedBumpIndex == -1 && !record.isRecentlyIntrusive() && record.getPackagePriority() <= Notification.PRIORITY_DEFAULT && record.sbn.getNotification().priority == Notification.PRIORITY_MIN) {
      speedBumpIndex=keys.size() - 1;
    }
  }
  String[] keysAr=keys.toArray(new String[keys.size()]);
  String[] interceptedKeysAr=interceptedKeys.toArray(new String[interceptedKeys.size()]);
  return new NotificationRankingUpdate(keysAr,interceptedKeysAr,visibilityOverrides,speedBumpIndex);
}
