{
  final int N=mNotificationList.size();
  ArrayList<String> keys=new ArrayList<String>(N);
  ArrayList<String> interceptedKeys=new ArrayList<String>(N);
  ArrayList<Integer> importance=new ArrayList<>(N);
  Bundle visibilityOverrides=new Bundle();
  Bundle suppressedVisualEffects=new Bundle();
  Bundle explanation=new Bundle();
  for (int i=0; i < N; i++) {
    NotificationRecord record=mNotificationList.get(i);
    if (!isVisibleToListener(record.sbn,info)) {
      continue;
    }
    final String key=record.sbn.getKey();
    keys.add(key);
    importance.add(record.getImportance());
    if (record.getImportanceExplanation() != null) {
      explanation.putCharSequence(key,record.getImportanceExplanation());
    }
    if (record.isIntercepted()) {
      interceptedKeys.add(key);
    }
    suppressedVisualEffects.putInt(key,record.getSuppressedVisualEffects());
    if (record.getPackageVisibilityOverride() != NotificationListenerService.Ranking.VISIBILITY_NO_OVERRIDE) {
      visibilityOverrides.putInt(key,record.getPackageVisibilityOverride());
    }
  }
  final int M=keys.size();
  String[] keysAr=keys.toArray(new String[M]);
  String[] interceptedKeysAr=interceptedKeys.toArray(new String[interceptedKeys.size()]);
  int[] importanceAr=new int[M];
  for (int i=0; i < M; i++) {
    importanceAr[i]=importance.get(i);
  }
  return new NotificationRankingUpdate(keysAr,interceptedKeysAr,visibilityOverrides,suppressedVisualEffects,importanceAr,explanation);
}
