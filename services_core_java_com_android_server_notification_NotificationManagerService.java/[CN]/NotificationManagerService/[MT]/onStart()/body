{
  Resources resources=getContext().getResources();
  mAm=ActivityManagerNative.getDefault();
  mAppOps=(AppOpsManager)getContext().getSystemService(Context.APP_OPS_SERVICE);
  mVibrator=(Vibrator)getContext().getSystemService(Context.VIBRATOR_SERVICE);
  mAppUsageStats=LocalServices.getService(UsageStatsManagerInternal.class);
  mHandler=new WorkerHandler();
  mRankingThread.start();
  mAssistantThread.start();
  String[] extractorNames;
  try {
    extractorNames=resources.getStringArray(R.array.config_notificationSignalExtractors);
  }
 catch (  Resources.NotFoundException e) {
    extractorNames=new String[0];
  }
  mUsageStats=new NotificationUsageStats(getContext());
  mRankingHandler=new RankingHandlerWorker(mRankingThread.getLooper());
  mAssistantHandler=new Handler(mAssistantThread.getLooper());
  mRankingHelper=new RankingHelper(getContext(),mRankingHandler,mUsageStats,extractorNames);
  mConditionProviders=new ConditionProviders(getContext(),mHandler,mUserProfiles);
  mZenModeHelper=new ZenModeHelper(getContext(),mHandler.getLooper(),mConditionProviders);
  mZenModeHelper.addCallback(new ZenModeHelper.Callback(){
    @Override public void onConfigChanged(){
      savePolicyFile();
    }
    @Override void onZenModeChanged(){
      sendRegisteredOnlyBroadcast(NotificationManager.ACTION_INTERRUPTION_FILTER_CHANGED);
      getContext().sendBroadcastAsUser(new Intent(NotificationManager.ACTION_INTERRUPTION_FILTER_CHANGED_INTERNAL).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT),UserHandle.ALL,android.Manifest.permission.MANAGE_NOTIFICATIONS);
synchronized (mNotificationList) {
        updateInterruptionFilterLocked();
      }
    }
    @Override void onPolicyChanged(){
      sendRegisteredOnlyBroadcast(NotificationManager.ACTION_NOTIFICATION_POLICY_CHANGED);
    }
  }
);
  final File systemDir=new File(Environment.getDataDirectory(),"system");
  mPolicyFile=new AtomicFile(new File(systemDir,"notification_policy.xml"));
  importOldBlockDb();
  mListeners=new NotificationListeners();
  mAssistant=new NotificationAssistant();
  mStatusBar=getLocalService(StatusBarManagerInternal.class);
  mStatusBar.setNotificationDelegate(mNotificationDelegate);
  final LightsManager lights=getLocalService(LightsManager.class);
  mNotificationLight=lights.getLight(LightsManager.LIGHT_ID_NOTIFICATIONS);
  mAttentionLight=lights.getLight(LightsManager.LIGHT_ID_ATTENTION);
  mDefaultNotificationColor=resources.getColor(R.color.config_defaultNotificationColor);
  mDefaultNotificationLedOn=resources.getInteger(R.integer.config_defaultNotificationLedOn);
  mDefaultNotificationLedOff=resources.getInteger(R.integer.config_defaultNotificationLedOff);
  mDefaultVibrationPattern=getLongArray(resources,R.array.config_defaultNotificationVibePattern,VIBRATE_PATTERN_MAXLEN,DEFAULT_VIBRATE_PATTERN);
  mFallbackVibrationPattern=getLongArray(resources,R.array.config_notificationFallbackVibePattern,VIBRATE_PATTERN_MAXLEN,DEFAULT_VIBRATE_PATTERN);
  mUseAttentionLight=resources.getBoolean(R.bool.config_useAttentionLight);
  if (0 == Settings.Global.getInt(getContext().getContentResolver(),Settings.Global.DEVICE_PROVISIONED,0)) {
    mDisableNotificationEffects=true;
  }
  mZenModeHelper.initZenMode();
  mInterruptionFilter=mZenModeHelper.getZenModeListenerInterruptionFilter();
  mUserProfiles.updateCache(getContext());
  listenForCallState();
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_SCREEN_ON);
  filter.addAction(Intent.ACTION_SCREEN_OFF);
  filter.addAction(TelephonyManager.ACTION_PHONE_STATE_CHANGED);
  filter.addAction(Intent.ACTION_USER_PRESENT);
  filter.addAction(Intent.ACTION_USER_STOPPED);
  filter.addAction(Intent.ACTION_USER_SWITCHED);
  filter.addAction(Intent.ACTION_USER_ADDED);
  filter.addAction(Intent.ACTION_USER_REMOVED);
  filter.addAction(Intent.ACTION_MANAGED_PROFILE_AVAILABILITY_CHANGED);
  getContext().registerReceiver(mIntentReceiver,filter);
  IntentFilter pkgFilter=new IntentFilter();
  pkgFilter.addAction(Intent.ACTION_PACKAGE_ADDED);
  pkgFilter.addAction(Intent.ACTION_PACKAGE_REMOVED);
  pkgFilter.addAction(Intent.ACTION_PACKAGE_CHANGED);
  pkgFilter.addAction(Intent.ACTION_PACKAGE_RESTARTED);
  pkgFilter.addAction(Intent.ACTION_QUERY_PACKAGE_RESTART);
  pkgFilter.addDataScheme("package");
  getContext().registerReceiverAsUser(mPackageIntentReceiver,UserHandle.ALL,pkgFilter,null,null);
  IntentFilter suspendedPkgFilter=new IntentFilter();
  suspendedPkgFilter.addAction(Intent.ACTION_PACKAGES_SUSPENDED);
  getContext().registerReceiverAsUser(mPackageIntentReceiver,UserHandle.ALL,suspendedPkgFilter,null,null);
  IntentFilter sdFilter=new IntentFilter(Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE);
  getContext().registerReceiverAsUser(mPackageIntentReceiver,UserHandle.ALL,sdFilter,null,null);
  mSettingsObserver=new SettingsObserver(mHandler);
  mArchive=new Archive(resources.getInteger(R.integer.config_notificationServiceArchiveSize));
  publishBinderService(Context.NOTIFICATION_SERVICE,mService);
  publishLocalService(NotificationManagerInternal.class,mInternalService);
}
