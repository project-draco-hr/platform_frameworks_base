{
  if (DBG)   Slog.d(TAG,"loadPolicyFile");
synchronized (mPolicyFile) {
    mBlockedPackages.clear();
    FileInputStream infile=null;
    try {
      infile=mPolicyFile.openRead();
      final XmlPullParser parser=Xml.newPullParser();
      parser.setInput(infile,StandardCharsets.UTF_8.name());
      int type;
      String tag;
      int version=DB_VERSION;
      while ((type=parser.next()) != END_DOCUMENT) {
        tag=parser.getName();
        if (type == START_TAG) {
          if (TAG_NOTIFICATION_POLICY.equals(tag)) {
            version=Integer.parseInt(parser.getAttributeValue(null,ATTR_VERSION));
          }
 else           if (TAG_BLOCKED_PKGS.equals(tag)) {
            while ((type=parser.next()) != END_DOCUMENT) {
              tag=parser.getName();
              if (TAG_PACKAGE.equals(tag)) {
                mBlockedPackages.add(parser.getAttributeValue(null,ATTR_NAME));
              }
 else               if (TAG_BLOCKED_PKGS.equals(tag) && type == END_TAG) {
                break;
              }
            }
          }
        }
        mZenModeHelper.readXml(parser);
        mRankingHelper.readXml(parser);
      }
    }
 catch (    FileNotFoundException e) {
    }
catch (    IOException e) {
      Log.wtf(TAG,"Unable to read notification policy",e);
    }
catch (    NumberFormatException e) {
      Log.wtf(TAG,"Unable to parse notification policy",e);
    }
catch (    XmlPullParserException e) {
      Log.wtf(TAG,"Unable to parse notification policy",e);
    }
 finally {
      IoUtils.closeQuietly(infile);
    }
  }
}
