{
  String listenerName=listener == null ? null : listener.component.toShortString();
  EventLogTags.writeNotificationCancelAll(callingUid,callingPid,pkg,userId,mustHaveFlags,mustNotHaveFlags,reason,listenerName);
synchronized (mNotificationList) {
    final int N=mNotificationList.size();
    ArrayList<NotificationRecord> canceledNotifications=null;
    for (int i=N - 1; i >= 0; --i) {
      NotificationRecord r=mNotificationList.get(i);
      if (!notificationMatchesUserId(r,userId)) {
        continue;
      }
      if (r.getUserId() == UserHandle.USER_ALL && pkg == null) {
        continue;
      }
      if ((r.getFlags() & mustHaveFlags) != mustHaveFlags) {
        continue;
      }
      if ((r.getFlags() & mustNotHaveFlags) != 0) {
        continue;
      }
      if (pkg != null && !r.sbn.getPackageName().equals(pkg)) {
        continue;
      }
      if (canceledNotifications == null) {
        canceledNotifications=new ArrayList<>();
      }
      canceledNotifications.add(r);
      if (!doit) {
        return true;
      }
      mNotificationList.remove(i);
      cancelNotificationLocked(r,false,reason);
    }
    if (doit && canceledNotifications != null) {
      final int M=canceledNotifications.size();
      for (int i=0; i < M; i++) {
        cancelGroupChildrenLocked(canceledNotifications.get(i),callingUid,callingPid,listenerName,REASON_GROUP_SUMMARY_CANCELED,false);
      }
    }
    if (canceledNotifications != null) {
      updateLightsLocked();
    }
    return canceledNotifications != null;
  }
}
