{
synchronized (mNotificationList) {
    final StatusBarNotification n=r.sbn;
    Slog.d(TAG,"EnqueueNotificationRunnable.run for: " + n.getKey());
    NotificationRecord old=mNotificationsByKey.get(n.getKey());
    if (old != null) {
      r.copyRankingInformation(old);
    }
    final int callingUid=n.getUid();
    final int callingPid=n.getInitialPid();
    final Notification notification=n.getNotification();
    final String pkg=n.getPackageName();
    final int id=n.getId();
    final String tag=n.getTag();
    final boolean isSystemNotification=isUidSystem(callingUid) || ("android".equals(pkg));
    handleGroupedNotificationLocked(r,old,callingUid,callingPid);
    boolean ignoreNotification=removeUnusedGroupedNotificationLocked(r,old,callingUid,callingPid);
    Slog.d(TAG,"ignoreNotification is " + ignoreNotification);
    if (!pkg.equals("com.android.providers.downloads") || Log.isLoggable("DownloadManager",Log.VERBOSE)) {
      int enqueueStatus=EVENTLOG_ENQUEUE_STATUS_NEW;
      if (ignoreNotification) {
        enqueueStatus=EVENTLOG_ENQUEUE_STATUS_IGNORED;
      }
 else       if (old != null) {
        enqueueStatus=EVENTLOG_ENQUEUE_STATUS_UPDATE;
      }
      EventLogTags.writeNotificationEnqueue(callingUid,callingPid,pkg,id,tag,userId,notification.toString(),enqueueStatus);
    }
    if (ignoreNotification) {
      return;
    }
    mRankingHelper.extractSignals(r);
    savePolicyFile();
    final boolean isApplicationSuspended=isApplicationSuspended(pkg,callingUid);
    if (r.getImportance() == NotificationListenerService.Ranking.IMPORTANCE_NONE || !noteNotificationOp(pkg,callingUid) || isApplicationSuspended) {
      if (!isSystemNotification) {
        if (isApplicationSuspended) {
          Slog.e(TAG,"Suppressing notification from package due to package " + "suspended by administrator.");
          mUsageStats.registerSuspendedByAdmin(r);
        }
 else {
          Slog.e(TAG,"Suppressing notification from package by user request.");
          mUsageStats.registerBlocked(r);
        }
        return;
      }
    }
    if (mAssistant.isEnabled()) {
      mAssistant.onNotificationEnqueued(r);
    }
    int index=indexOfNotificationLocked(n.getKey());
    if (index < 0) {
      mNotificationList.add(r);
      mUsageStats.registerPostedByApp(r);
    }
 else {
      old=mNotificationList.get(index);
      mNotificationList.set(index,r);
      mUsageStats.registerUpdatedByApp(r,old);
      notification.flags|=old.getNotification().flags & Notification.FLAG_FOREGROUND_SERVICE;
      r.isUpdate=true;
    }
    mNotificationsByKey.put(n.getKey(),r);
    if ((notification.flags & Notification.FLAG_FOREGROUND_SERVICE) != 0) {
      notification.flags|=Notification.FLAG_ONGOING_EVENT | Notification.FLAG_NO_CLEAR;
    }
    applyZenModeLocked(r);
    mRankingHelper.sort(mNotificationList);
    if (notification.getSmallIcon() != null) {
      StatusBarNotification oldSbn=(old != null) ? old.sbn : null;
      mListeners.notifyPostedLocked(n,oldSbn);
    }
 else {
      Slog.e(TAG,"Not posting notification without small icon: " + notification);
      if (old != null && !old.isCanceled) {
        mListeners.notifyRemovedLocked(n);
      }
      Slog.e(TAG,"WARNING: In a future release this will crash the app: " + n.getPackageName());
    }
    buzzBeepBlinkLocked(r);
  }
}
