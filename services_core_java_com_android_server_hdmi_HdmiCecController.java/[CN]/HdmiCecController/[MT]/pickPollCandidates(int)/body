{
  int strategy=pickStrategy & HdmiConstants.POLL_STRATEGY_MASK;
  Predicate<Integer> pickPredicate=null;
switch (strategy) {
case HdmiConstants.POLL_STRATEGY_SYSTEM_AUDIO:
    pickPredicate=mSystemAudioAddressPredicate;
  break;
case HdmiConstants.POLL_STRATEGY_REMOTES_DEVICES:
default :
pickPredicate=mRemoteDeviceAddressPredicate;
break;
}
int iterationStrategy=pickStrategy & HdmiConstants.POLL_ITERATION_STRATEGY_MASK;
ArrayList<Integer> pollingCandidates=new ArrayList<>();
switch (iterationStrategy) {
case HdmiConstants.POLL_ITERATION_IN_ORDER:
for (int i=HdmiCec.ADDR_TV; i <= HdmiCec.ADDR_SPECIFIC_USE; ++i) {
if (pickPredicate.apply(i)) {
pollingCandidates.add(i);
}
}
break;
case HdmiConstants.POLL_ITERATION_REVERSE_ORDER:
default :
for (int i=HdmiCec.ADDR_SPECIFIC_USE; i >= HdmiCec.ADDR_TV; --i) {
if (pickPredicate.apply(i)) {
pollingCandidates.add(i);
}
}
break;
}
return pollingCandidates;
}
