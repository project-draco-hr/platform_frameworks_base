{
  if (MeasureSpec.getMode(widthSpec) != MeasureSpec.EXACTLY || MeasureSpec.getMode(heightSpec) != MeasureSpec.EXACTLY) {
    throw new IllegalArgumentException("SlidingChallengeLayout must be measured with an exact size");
  }
  final int width=MeasureSpec.getSize(widthSpec);
  final int height=MeasureSpec.getSize(heightSpec);
  setMeasuredDimension(width,height);
  final int insetHeight=height - mInsets.top - mInsets.bottom;
  final int insetHeightSpec=MeasureSpec.makeMeasureSpec(insetHeight,MeasureSpec.EXACTLY);
  final View oldChallengeView=mChallengeView;
  final View oldExpandChallengeView=mChallengeView;
  mChallengeView=null;
  mExpandChallengeView=null;
  final int count=getChildCount();
  for (int i=0; i < count; i++) {
    final View child=getChildAt(i);
    final LayoutParams lp=(LayoutParams)child.getLayoutParams();
    if (lp.childType == LayoutParams.CHILD_TYPE_CHALLENGE) {
      if (mChallengeView != null) {
        throw new IllegalStateException("There may only be one child with layout_isChallenge=\"true\"");
      }
      if (!(child instanceof KeyguardSecurityContainer)) {
        throw new IllegalArgumentException("Challenge must be a KeyguardSecurityContainer");
      }
      mChallengeView=(KeyguardSecurityContainer)child;
      if (mChallengeView != oldChallengeView) {
        mChallengeView.setVisibility(mChallengeShowing ? VISIBLE : INVISIBLE);
      }
      if (!mHasLayout) {
        mHasGlowpad=child.findViewById(R.id.keyguard_selector_view) != null;
        lp.leftMargin=lp.rightMargin=getChallengeMargin(true);
      }
    }
 else     if (lp.childType == LayoutParams.CHILD_TYPE_EXPAND_CHALLENGE_HANDLE) {
      if (mExpandChallengeView != null) {
        throw new IllegalStateException("There may only be one child with layout_childType" + "=\"expandChallengeHandle\"");
      }
      mExpandChallengeView=child;
      if (mExpandChallengeView != oldExpandChallengeView) {
        mExpandChallengeView.setVisibility(mChallengeShowing ? INVISIBLE : VISIBLE);
        mExpandChallengeView.setOnClickListener(mExpandChallengeClickListener);
      }
    }
 else     if (lp.childType == LayoutParams.CHILD_TYPE_SCRIM) {
      setScrimView(child);
    }
 else     if (lp.childType == LayoutParams.CHILD_TYPE_WIDGETS) {
      mWidgetsView=child;
    }
  }
  if (mChallengeView != null && mChallengeView.getVisibility() != View.GONE) {
    int challengeHeightSpec=insetHeightSpec;
    final View root=getRootView();
    if (root != null) {
      final LayoutParams lp=(LayoutParams)mChallengeView.getLayoutParams();
      final int windowHeight=mDisplayMetrics.heightPixels - root.getPaddingTop() - mInsets.top;
      final int diff=windowHeight - insetHeight;
      final int maxChallengeHeight=lp.maxHeight - diff;
      if (maxChallengeHeight > 0) {
        challengeHeightSpec=makeChildMeasureSpec(maxChallengeHeight,lp.height);
      }
    }
    measureChildWithMargins(mChallengeView,widthSpec,0,challengeHeightSpec,0);
  }
  for (int i=0; i < count; i++) {
    final View child=getChildAt(i);
    if (child.getVisibility() == GONE) {
      continue;
    }
    if (child == mChallengeView)     continue;
    int parentWidthSpec=widthSpec, parentHeightSpec=insetHeightSpec;
    final LayoutParams lp=(LayoutParams)child.getLayoutParams();
    if (lp.childType == LayoutParams.CHILD_TYPE_WIDGETS) {
      final View root=getRootView();
      if (root != null) {
        final int windowWidth=mDisplayMetrics.widthPixels;
        final int windowHeight=mDisplayMetrics.heightPixels - root.getPaddingTop() - mInsets.top;
        parentWidthSpec=MeasureSpec.makeMeasureSpec(windowWidth,MeasureSpec.EXACTLY);
        parentHeightSpec=MeasureSpec.makeMeasureSpec(windowHeight,MeasureSpec.EXACTLY);
      }
    }
 else     if (lp.childType == LayoutParams.CHILD_TYPE_SCRIM) {
      parentWidthSpec=widthSpec;
      parentHeightSpec=heightSpec;
    }
    measureChildWithMargins(child,parentWidthSpec,0,parentHeightSpec,0);
  }
}
