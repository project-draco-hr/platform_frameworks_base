{
  mQuietEnable=quietMode;
synchronized (mConnection) {
    if ((mBluetooth == null) && (!mBinding)) {
      Message timeoutMsg=mHandler.obtainMessage(MESSAGE_TIMEOUT_BIND);
      mHandler.sendMessageDelayed(timeoutMsg,TIMEOUT_BIND_MS);
      mConnection.setGetNameAddressOnly(false);
      Intent i=new Intent(IBluetooth.class.getName());
      if (!mContext.bindServiceAsUser(i,mConnection,Context.BIND_AUTO_CREATE,UserHandle.CURRENT)) {
        mHandler.removeMessages(MESSAGE_TIMEOUT_BIND);
        Log.e(TAG,"Fail to bind to: " + IBluetooth.class.getName());
      }
 else {
        mBinding=true;
      }
    }
 else     if (mBluetooth != null) {
      if (mConnection.isGetNameAddressOnly()) {
        mConnection.setGetNameAddressOnly(false);
        try {
          mBluetooth.registerCallback(mBluetoothCallback);
        }
 catch (        RemoteException re) {
          Log.e(TAG,"Unable to register BluetoothCallback",re);
        }
        sendBluetoothServiceUpCallback();
      }
      try {
        if (!mQuietEnable) {
          if (!mBluetooth.enable()) {
            Log.e(TAG,"IBluetooth.enable() returned false");
          }
        }
 else {
          if (!mBluetooth.enableNoAutoConnect()) {
            Log.e(TAG,"IBluetooth.enableNoAutoConnect() returned false");
          }
        }
      }
 catch (      RemoteException e) {
        Log.e(TAG,"Unable to call enable()",e);
      }
    }
  }
}
