{
  LayoutBinder lb=new MockLayoutBinder();
  mExprModel=lb.getModel();
  IdentifierExpr u1=lb.addVariable("u1",User.class.getCanonicalName());
  IdentifierExpr u2=lb.addVariable("u2",User.class.getCanonicalName());
  IdentifierExpr a=lb.addVariable("a",int.class.getCanonicalName());
  IdentifierExpr b=lb.addVariable("b",int.class.getCanonicalName());
  IdentifierExpr c=lb.addVariable("c",int.class.getCanonicalName());
  IdentifierExpr d=lb.addVariable("d",int.class.getCanonicalName());
  IdentifierExpr e=lb.addVariable("e",int.class.getCanonicalName());
  TernaryExpr abTernary=parse(lb,"a > b ? u1.name : u2.name",TernaryExpr.class);
  TernaryExpr bcTernary=parse(lb,"b > c ? u1.getCond(d) ? u1.lastName : u2.lastName : `xx` + u2.getCond(e) ",TernaryExpr.class);
  Expr abCmp=abTernary.getPred();
  Expr bcCmp=bcTernary.getPred();
  Expr u1GetCondD=((TernaryExpr)bcTernary.getIfTrue()).getPred();
  final MathExpr xxPlusU2getCondE=(MathExpr)bcTernary.getIfFalse();
  Expr u2GetCondE=xxPlusU2getCondE.getRight();
  Expr u1Name=abTernary.getIfTrue();
  Expr u2Name=abTernary.getIfFalse();
  Expr u1LastName=((TernaryExpr)bcTernary.getIfTrue()).getIfTrue();
  Expr u2LastName=((TernaryExpr)bcTernary.getIfTrue()).getIfFalse();
  mExprModel.seal();
  Iterable<Expr> shouldRead=getShouldRead();
  assertExactMatch(shouldRead,a,b,c,abCmp,bcCmp);
  Iterable<Expr> firstRead=getReadFirst(shouldRead);
  assertExactMatch(firstRead,a,b,c);
  assertFlags(a,a,b,u1,u2,u1Name,u2Name);
  assertFlags(b,a,b,u1,u2,u1Name,u2Name,c,d,u1LastName,u2LastName,e);
  assertFlags(c,b,c,u1,d,u1LastName,u2LastName,e);
  assertFlags(abCmp,a,b,u1,u2,u1Name,u2Name);
  assertFlags(bcCmp,b,c,u1,d,u1LastName,u2LastName,e);
  assertTrue(mExprModel.markBitsRead());
  shouldRead=getShouldRead();
  Expr[] batch={d,e,u1,u2,u1GetCondD,u2GetCondE,xxPlusU2getCondE,abTernary,abTernary.getIfTrue(),abTernary.getIfFalse()};
  assertExactMatch(shouldRead,batch);
  firstRead=getReadFirst(shouldRead);
  assertExactMatch(firstRead,d,e,u1,u2);
  assertFlags(d,bcTernary.getRequirementFlagIndex(true));
  assertFlags(e,bcTernary.getRequirementFlagIndex(false));
  assertFlags(u1,bcTernary.getRequirementFlagIndex(true),abTernary.getRequirementFlagIndex(true));
  assertFlags(u2,bcTernary.getRequirementFlagIndex(false),abTernary.getRequirementFlagIndex(false));
  assertFlags(u1GetCondD,bcTernary.getRequirementFlagIndex(true));
  assertFlags(u2GetCondE,bcTernary.getRequirementFlagIndex(false));
  assertFlags(xxPlusU2getCondE,bcTernary.getRequirementFlagIndex(false));
  assertFlags(abTernary,a,b,u1,u2,u1Name,u2Name);
  assertFlags(abTernary.getIfTrue(),abTernary.getRequirementFlagIndex(true));
  assertFlags(abTernary.getIfFalse(),abTernary.getRequirementFlagIndex(false));
  assertTrue(mExprModel.markBitsRead());
  shouldRead=getShouldRead();
  assertExactMatch(shouldRead,u2,u1LastName,u2LastName,bcTernary.getIfTrue(),bcTernary);
  firstRead=getReadFirst(shouldRead);
  assertExactMatch(firstRead,u1LastName,u2);
  assertFlags(u1LastName,bcTernary.getIfTrue().getRequirementFlagIndex(true));
  assertFlags(u2LastName,bcTernary.getIfTrue().getRequirementFlagIndex(false));
  assertFlags(u2,bcTernary.getIfTrue().getRequirementFlagIndex(false));
  assertFlags(bcTernary.getIfTrue(),bcTernary.getRequirementFlagIndex(true));
  assertFlags(bcTernary,b,c,u1,u2,d,u1LastName,u2LastName,e);
}
