{
  String textDump=new String("android.media.audiopolicy.AudioPolicyConfig:\n");
  textDump+=mMixes.size() + " AudioMix: " + mRegistrationId+ "\n";
  for (  AudioMix mix : mMixes) {
    textDump+="* route flags=0x" + Integer.toHexString(mix.getRouteFlags()) + "\n";
    textDump+="  rate=" + mix.getFormat().getSampleRate() + "Hz\n";
    textDump+="  encoding=" + mix.getFormat().getEncoding() + "\n";
    textDump+="  channels=0x";
    textDump+=Integer.toHexString(mix.getFormat().getChannelMask()).toUpperCase() + "\n";
    final ArrayList<AttributeMatchCriterion> criteria=mix.getRule().getCriteria();
    for (    AttributeMatchCriterion criterion : criteria) {
switch (criterion.mRule) {
case AudioMixingRule.RULE_EXCLUDE_ATTRIBUTE_USAGE:
        textDump+="  exclude usage ";
      textDump+=criterion.mAttr.usageToString();
    break;
case AudioMixingRule.RULE_MATCH_ATTRIBUTE_USAGE:
  textDump+="  match usage ";
textDump+=criterion.mAttr.usageToString();
break;
case AudioMixingRule.RULE_EXCLUDE_ATTRIBUTE_CAPTURE_PRESET:
textDump+="  exclude capture preset ";
textDump+=criterion.mAttr.getCapturePreset();
break;
case AudioMixingRule.RULE_MATCH_ATTRIBUTE_CAPTURE_PRESET:
textDump+="  match capture preset ";
textDump+=criterion.mAttr.getCapturePreset();
break;
case AudioMixingRule.RULE_MATCH_UID:
textDump+="  match UID ";
textDump+=criterion.mIntProp.toString();
break;
case AudioMixingRule.RULE_EXCLUDE_UID:
textDump+="  exclude UID ";
textDump+=criterion.mIntProp.toString();
break;
default :
textDump+="invalid rule!";
}
textDump+="\n";
}
}
return textDump;
}
