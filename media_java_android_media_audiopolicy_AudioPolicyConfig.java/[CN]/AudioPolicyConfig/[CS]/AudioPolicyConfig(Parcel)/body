{
  mMixes=new ArrayList<AudioMix>();
  int nbMixes=in.readInt();
  for (int i=0; i < nbMixes; i++) {
    final AudioMix.Builder mixBuilder=new AudioMix.Builder();
    int routeFlags=in.readInt();
    mixBuilder.setRouteFlags(routeFlags);
    int sampleRate=in.readInt();
    int encoding=in.readInt();
    int channelMask=in.readInt();
    final AudioFormat format=new AudioFormat.Builder().setSampleRate(sampleRate).setChannelMask(channelMask).setEncoding(encoding).build();
    mixBuilder.setFormat(format);
    int nbRules=in.readInt();
    AudioMixingRule.Builder ruleBuilder=new AudioMixingRule.Builder();
    for (int j=0; j < nbRules; j++) {
      int matchRule=in.readInt();
      if ((matchRule == AudioMixingRule.RULE_EXCLUDE_ATTRIBUTE_USAGE) || (matchRule == AudioMixingRule.RULE_MATCH_ATTRIBUTE_USAGE)) {
        int usage=in.readInt();
        final AudioAttributes attr=new AudioAttributes.Builder().setUsage(usage).build();
        ruleBuilder.addRule(attr,matchRule);
      }
 else {
        Log.w(TAG,"Encountered unsupported rule, skipping");
        in.readInt();
      }
    }
    mixBuilder.setMixingRule(ruleBuilder.build());
    mMixes.add(mixBuilder.build());
  }
}
