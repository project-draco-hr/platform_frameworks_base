{
  setDimensions(imageWidth,imageHeight);
switch (colorType) {
case PNG_COLOR_TYPE_GRAY:
{
      if (bitDepth != 8 && bitDepth != 4 && bitDepth != 2 && bitDepth != 1) {
        throw new IllegalArgumentException(Messages.getString("awt.3C"));
      }
      int numEntries=1 << bitDepth;
      int scaleFactor=255 / (numEntries - 1);
      byte comps[]=new byte[numEntries];
      for (int i=0; i < numEntries; i++) {
        comps[i]=(byte)(i * scaleFactor);
      }
      cm=new IndexColorModel(8,numEntries,comps,comps,comps);
      transferInts=false;
      break;
    }
case PNG_COLOR_TYPE_RGB:
{
    if (bitDepth != 8) {
      throw new IllegalArgumentException(Messages.getString("awt.3C"));
    }
    cm=new DirectColorModel(24,0xFF0000,0xFF00,0xFF);
    transferInts=true;
    break;
  }
case PNG_COLOR_TYPE_PLTE:
{
  if (bitDepth != 8 && bitDepth != 4 && bitDepth != 2 && bitDepth != 1) {
    throw new IllegalArgumentException(Messages.getString("awt.3C"));
  }
  cm=new IndexColorModel(8,cmap.length / 3,cmap,0,false);
  transferInts=false;
  break;
}
case PNG_COLOR_TYPE_GRAY_ALPHA:
{
if (bitDepth != 8) {
  throw new IllegalArgumentException(Messages.getString("awt.3C"));
}
cm=new ComponentColorModel(ColorSpace.getInstance(ColorSpace.CS_GRAY),true,false,Transparency.TRANSLUCENT,DataBuffer.TYPE_BYTE);
transferInts=false;
dataElementsPerPixel=2;
break;
}
case PNG_COLOR_TYPE_RGBA:
{
if (bitDepth != 8) {
throw new IllegalArgumentException(Messages.getString("awt.3C"));
}
cm=ColorModel.getRGBdefault();
transferInts=true;
break;
}
default :
throw new IllegalArgumentException(Messages.getString("awt.3C"));
}
if (transferInts) {
intOut=new int[imageWidth * imageHeight];
}
 else {
byteOut=new byte[imageWidth * imageHeight * dataElementsPerPixel];
}
setColorModel(cm);
setHints(hintflags);
setProperties(new Hashtable<Object,Object>());
}
