{
  if (TextUtils.isEmpty(parentId)) {
    throw new IllegalArgumentException("parentId is empty.");
  }
  Subscription sub=mSubscriptions.get(parentId);
  if (mState == CONNECT_STATE_CONNECTED && sub != null) {
    try {
      if (callback == null) {
        mServiceBinder.removeSubscription(parentId,mServiceCallbacks);
      }
 else {
        final List<SubscriptionCallback> callbacks=sub.getCallbacks();
        final List<Bundle> optionsList=sub.getOptionsList();
        for (int i=callbacks.size() - 1; i >= 0; --i) {
          if (callbacks.get(i) == callback) {
            mServiceBinder.removeSubscriptionWithOptions(parentId,optionsList.get(i),mServiceCallbacks);
            callbacks.remove(i);
            optionsList.remove(i);
          }
        }
      }
    }
 catch (    RemoteException ex) {
      Log.d(TAG,"removeSubscription failed with RemoteException parentId=" + parentId);
    }
  }
  if (sub != null && (sub.isEmpty() || callback == null)) {
    mSubscriptions.remove(parentId);
  }
}
