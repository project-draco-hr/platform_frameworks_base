{
  if (TextUtils.isEmpty(parentId)) {
    throw new IllegalArgumentException("parentId is empty.");
  }
  Subscription sub=mSubscriptions.get(parentId);
  if (sub == null) {
    return;
  }
  try {
    if (callback == null) {
      if (mState == CONNECT_STATE_CONNECTED) {
        mServiceBinder.removeSubscriptionDeprecated(parentId,mServiceCallbacks);
        mServiceBinder.removeSubscription(parentId,null,mServiceCallbacks);
      }
    }
 else {
      final List<SubscriptionCallback> callbacks=sub.getCallbacks();
      final List<Bundle> optionsList=sub.getOptionsList();
      for (int i=callbacks.size() - 1; i >= 0; --i) {
        if (callbacks.get(i) == callback) {
          if (mState == CONNECT_STATE_CONNECTED) {
            mServiceBinder.removeSubscription(parentId,callback.mToken,mServiceCallbacks);
          }
          callbacks.remove(i);
          optionsList.remove(i);
        }
      }
    }
  }
 catch (  RemoteException ex) {
    Log.d(TAG,"removeSubscription failed with RemoteException parentId=" + parentId);
  }
  if (sub.isEmpty() || callback == null) {
    mSubscriptions.remove(parentId);
  }
}
