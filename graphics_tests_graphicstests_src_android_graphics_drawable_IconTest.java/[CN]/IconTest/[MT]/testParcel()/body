{
  final Bitmap originalbits=((BitmapDrawable)getContext().getDrawable(R.drawable.landscape)).getBitmap();
  final ByteArrayOutputStream ostream=new ByteArrayOutputStream(originalbits.getWidth() * originalbits.getHeight() * 2);
  originalbits.compress(Bitmap.CompressFormat.PNG,100,ostream);
  final byte[] pngdata=ostream.toByteArray();
  L("starting testParcel; bitmap: %d bytes, PNG: %d bytes",originalbits.getByteCount(),pngdata.length);
  final File dir=getContext().getExternalFilesDir(null);
  final File originalfile=new File(dir,"parcel-original.png");
  new FileOutputStream(originalfile).write(pngdata);
  ArrayList<Icon> imgs=new ArrayList<>();
  final Icon file1=Icon.createWithFilePath(originalfile.getAbsolutePath());
  imgs.add(file1);
  final Icon bit1=Icon.createWithBitmap(originalbits);
  imgs.add(bit1);
  final Icon data1=Icon.createWithData(pngdata,0,pngdata.length);
  imgs.add(data1);
  final Icon res1=Icon.createWithResource(getContext().getResources(),R.drawable.landscape);
  imgs.add(res1);
  ArrayList<Icon> test=new ArrayList<>();
  final Parcel parcel=Parcel.obtain();
  int pos=0;
  parcel.writeInt(imgs.size());
  for (  Icon img : imgs) {
    img.writeToParcel(parcel,0);
    L("used %d bytes parceling: %s",parcel.dataPosition() - pos,img);
    pos=parcel.dataPosition();
  }
  parcel.setDataPosition(0);
  final int N=parcel.readInt();
  for (int i=0; i < N; i++) {
    Icon img=Icon.CREATOR.createFromParcel(parcel);
    L("test %d: read from parcel: %s",i,img);
    final File testfile=new File(dir,String.format("parcel-test%02d.png",i));
    final Drawable draw1=img.loadDrawable(mContext);
    if (draw1 == null) {
      fail("null drawable from img: " + img);
    }
    final Bitmap test1=Bitmap.createBitmap(draw1.getIntrinsicWidth(),draw1.getIntrinsicHeight(),Bitmap.Config.ARGB_8888);
    draw1.setBounds(0,0,test1.getWidth(),test1.getHeight());
    draw1.draw(new Canvas(test1));
    try {
      test1.compress(Bitmap.CompressFormat.PNG,100,new FileOutputStream(testfile));
    }
 catch (    java.io.FileNotFoundException ex) {
      fail("couldn't create test file " + testfile + ": "+ ex);
    }
    if (!equalBitmaps(originalbits,test1)) {
      findBitmapDifferences(originalbits,test1);
      fail(testfile + " differs from original: " + originalfile);
    }
  }
}
