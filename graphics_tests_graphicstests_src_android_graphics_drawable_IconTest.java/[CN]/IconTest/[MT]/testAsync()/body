{
  final Bitmap bit1=((BitmapDrawable)getContext().getDrawable(R.drawable.landscape)).getBitmap();
  final File dir=getContext().getExternalFilesDir(null);
  final File file1=new File(dir,"async-original.png");
  bit1.compress(Bitmap.CompressFormat.PNG,100,new FileOutputStream(file1));
  final Icon im1=Icon.createWithFilePath(file1.toString());
  final HandlerThread thd=new HandlerThread("testAsync");
  thd.start();
  final Handler h=new Handler(thd.getLooper());
  L(TAG,"asyncTest: dispatching load to thread: " + thd);
  im1.loadDrawableAsync(mContext,h,new Icon.OnDrawableLoadedListener(){
    @Override public void onDrawableLoaded(    Drawable draw1){
      L(TAG,"asyncTest: thread: loading drawable");
      L(TAG,"asyncTest: thread: loaded: %dx%d",draw1.getIntrinsicWidth(),draw1.getIntrinsicHeight());
      final Bitmap test1=Bitmap.createBitmap(draw1.getIntrinsicWidth(),draw1.getIntrinsicHeight(),Bitmap.Config.ARGB_8888);
      draw1.setBounds(0,0,test1.getWidth(),test1.getHeight());
      draw1.draw(new Canvas(test1));
      try {
        test1.compress(Bitmap.CompressFormat.PNG,100,new FileOutputStream(new File(dir,"async-test.png")));
      }
 catch (      java.io.FileNotFoundException ex) {
        fail("couldn't create test file: " + ex);
      }
      if (!equalBitmaps(bit1,test1)) {
        findBitmapDifferences(bit1,test1);
        fail("testAsync: file1 differs, check " + dir);
      }
    }
  }
);
  L(TAG,"asyncTest: awaiting result");
  Thread.sleep(500);
  assertTrue("async-test.png does not exist!",new File(dir,"async-test.png").exists());
  L(TAG,"asyncTest: done");
}
