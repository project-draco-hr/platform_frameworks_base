{
  final String action=intent.getAction();
  final Uri data=intent.getData();
  final boolean excludingStopped=intent.isExcludingStopped();
  final int N=src != null ? src.size() : 0;
  boolean hasNonDefaults=false;
  int i;
  for (i=0; i < N; i++) {
    F filter=src.get(i);
    int match;
    if (debug)     Slog.v(TAG,"Matching against filter " + filter);
    if (excludingStopped && isFilterStopped(filter)) {
      if (debug) {
        Slog.v(TAG,"  Filter's target is stopped; skipping");
      }
      continue;
    }
    if (!allowFilterResult(filter,dest)) {
      if (debug) {
        Slog.v(TAG,"  Filter's target already added");
      }
      continue;
    }
    match=filter.match(action,resolvedType,scheme,data,categories,TAG);
    if (match >= 0) {
      if (debug)       Slog.v(TAG,"  Filter matched!  match=0x" + Integer.toHexString(match));
      if (!defaultOnly || filter.hasCategory(Intent.CATEGORY_DEFAULT)) {
        final R oneResult=newResult(filter,match);
        if (oneResult != null) {
          dest.add(oneResult);
        }
      }
 else {
        hasNonDefaults=true;
      }
    }
 else {
      if (debug) {
        String reason;
switch (match) {
case IntentFilter.NO_MATCH_ACTION:
          reason="action";
        break;
case IntentFilter.NO_MATCH_CATEGORY:
      reason="category";
    break;
case IntentFilter.NO_MATCH_DATA:
  reason="data";
break;
case IntentFilter.NO_MATCH_TYPE:
reason="type";
break;
default :
reason="unknown reason";
break;
}
Slog.v(TAG,"  Filter did not match: " + reason);
}
}
}
if (dest.size() == 0 && hasNonDefaults) {
Slog.w(TAG,"resolveIntent failed: found match, but none with Intent.CATEGORY_DEFAULT");
}
}
