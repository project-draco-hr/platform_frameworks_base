{
switch (msg.what) {
case EVENT_RADIO_TECHNOLOGY_CHANGED:
    mOutgoingPhone=((PhoneBase)mActivePhone).getPhoneName();
  logd("Switching phone from " + mOutgoingPhone + "Phone to "+ (mOutgoingPhone.equals("GSM") ? "CDMAPhone" : "GSMPhone"));
boolean oldPowerState=false;
if (mCommandsInterface.getRadioState().isOn()) {
oldPowerState=true;
logd("Setting Radio Power to Off");
mCommandsInterface.setRadioPower(false,null);
}
if (mOutgoingPhone.equals("GSM")) {
logd("Make a new CDMAPhone and destroy the old GSMPhone.");
((GSMPhone)mActivePhone).dispose();
Phone oldPhone=mActivePhone;
mActivePhone=PhoneFactory.getCdmaPhone();
logd("Resetting Radio");
mCommandsInterface.setRadioPower(oldPowerState,null);
((GSMPhone)oldPhone).removeReferences();
oldPhone=null;
}
 else {
logd("Make a new GSMPhone and destroy the old CDMAPhone.");
((CDMAPhone)mActivePhone).dispose();
Phone oldPhone=mActivePhone;
mActivePhone=PhoneFactory.getGsmPhone();
logd("Resetting Radio:");
mCommandsInterface.setRadioPower(oldPowerState,null);
((CDMAPhone)oldPhone).removeReferences();
oldPhone=null;
}
mIccSmsInterfaceManagerProxy.setmIccSmsInterfaceManager(mActivePhone.getIccSmsInterfaceManager());
mIccPhoneBookInterfaceManagerProxy.setmIccPhoneBookInterfaceManager(mActivePhone.getIccPhoneBookInterfaceManager());
mPhoneSubInfoProxy.setmPhoneSubInfo(this.mActivePhone.getPhoneSubInfo());
mCommandsInterface=((PhoneBase)mActivePhone).mCM;
Intent intent=new Intent(TelephonyIntents.ACTION_RADIO_TECHNOLOGY_CHANGED);
intent.putExtra(Phone.PHONE_NAME_KEY,mActivePhone.getPhoneName());
ActivityManagerNative.broadcastStickyIntent(intent,null);
break;
default :
Log.e(LOG_TAG,"Error! This handler was not registered for this message type. Message: " + msg.what);
break;
}
super.handleMessage(msg);
}
