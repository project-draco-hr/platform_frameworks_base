{
  AsyncResult ar=(AsyncResult)msg.obj;
switch (msg.what) {
case EVENT_RADIO_ON:
    mCommandsInterface.getVoiceRadioTechnology(this.obtainMessage(EVENT_REQUEST_VOICE_RADIO_TECH_DONE));
  break;
case EVENT_RIL_CONNECTED:
if (ar.exception == null && ar.result != null) {
  mRilVersion=(Integer)ar.result;
}
 else {
  logd("Unexpected exception on EVENT_RIL_CONNECTED");
  mRilVersion=-1;
}
break;
case EVENT_VOICE_RADIO_TECH_CHANGED:
case EVENT_REQUEST_VOICE_RADIO_TECH_DONE:
if (ar.exception == null) {
if ((ar.result != null) && (((int[])ar.result).length != 0)) {
int newVoiceTech=((int[])ar.result)[0];
updatePhoneObject(newVoiceTech);
}
 else {
loge("Voice Radio Technology event " + msg.what + " has no tech!");
}
}
 else {
loge("Voice Radio Technology event " + msg.what + " exception!"+ ar.exception);
}
break;
default :
loge("Error! This handler was not registered for this message type. Message: " + msg.what);
break;
}
super.handleMessage(msg);
}
