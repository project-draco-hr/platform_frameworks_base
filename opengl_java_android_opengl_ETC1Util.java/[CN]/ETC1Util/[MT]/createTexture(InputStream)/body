{
  int width=0;
  int height=0;
  byte[] ioBuffer=new byte[4096];
{
    if (input.read(ioBuffer,0,ETC1.ETC_PKM_HEADER_SIZE) != ETC1.ETC_PKM_HEADER_SIZE) {
      throw new IOException("Unable to read PKM file header.");
    }
    ByteBuffer headerBuffer=ByteBuffer.allocateDirect(ETC1.ETC_PKM_HEADER_SIZE).order(ByteOrder.nativeOrder());
    headerBuffer.put(ioBuffer,0,ETC1.ETC_PKM_HEADER_SIZE).position(0);
    if (!ETC1.isValid(headerBuffer)) {
      throw new IOException("Not a PKM file.");
    }
    width=ETC1.getWidth(headerBuffer);
    height=ETC1.getHeight(headerBuffer);
  }
  int encodedSize=ETC1.getEncodedDataSize(width,height);
  ByteBuffer dataBuffer=ByteBuffer.allocateDirect(encodedSize).order(ByteOrder.nativeOrder());
  for (int i=0; i < encodedSize; ) {
    int chunkSize=Math.min(ioBuffer.length,encodedSize - i);
    if (input.read(ioBuffer,0,chunkSize) != chunkSize) {
      throw new IOException("Unable to read PKM file data.");
    }
    dataBuffer.put(ioBuffer,0,chunkSize);
    i+=chunkSize;
  }
  dataBuffer.position(0);
  return new ETC1Texture(width,height,dataBuffer);
}
