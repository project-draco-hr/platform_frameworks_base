{
  final Context context=getContext();
  if (!method.startsWith("android:")) {
    return super.call(method,arg,extras);
  }
  final String documentId=extras.getString(Document.COLUMN_DOCUMENT_ID);
  final Uri documentUri=DocumentsContract.buildDocumentUri(mAuthority,documentId);
  final boolean callerHasManage=context.checkCallingOrSelfPermission(android.Manifest.permission.MANAGE_DOCUMENTS) == PackageManager.PERMISSION_GRANTED;
  if (!callerHasManage) {
    getContext().enforceCallingOrSelfUriPermission(documentUri,Intent.FLAG_GRANT_WRITE_URI_PERMISSION,method);
  }
  final Bundle out=new Bundle();
  try {
    if (METHOD_CREATE_DOCUMENT.equals(method)) {
      final String mimeType=extras.getString(Document.COLUMN_MIME_TYPE);
      final String displayName=extras.getString(Document.COLUMN_DISPLAY_NAME);
      final String newDocumentId=createDocument(documentId,mimeType,displayName);
      out.putString(Document.COLUMN_DOCUMENT_ID,newDocumentId);
      if (!callerHasManage) {
        final Uri newDocumentUri=DocumentsContract.buildDocumentUri(mAuthority,newDocumentId);
        context.grantUriPermission(getCallingPackage(),newDocumentUri,Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION | Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION);
      }
    }
 else     if (METHOD_DELETE_DOCUMENT.equals(method)) {
      deleteDocument(documentId);
      context.revokeUriPermission(documentUri,Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION | Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION);
    }
 else {
      throw new UnsupportedOperationException("Method not supported " + method);
    }
  }
 catch (  FileNotFoundException e) {
    throw new IllegalStateException("Failed call " + method,e);
  }
  return out;
}
