{
  int action=ev.getAction();
  boolean handled=false;
switch (action) {
case MotionEvent.ACTION_DOWN:
{
      View v=getCurrentView();
      if (v != null) {
        if (isTransformedTouchPointInView(ev.getX(),ev.getY(),v,null)) {
          if (mPendingCheckForTap == null) {
            mPendingCheckForTap=new CheckForTap();
          }
          mTouchMode=TOUCH_MODE_DOWN_IN_CURRENT_VIEW;
          postDelayed(mPendingCheckForTap,ViewConfiguration.getTapTimeout());
        }
      }
      break;
    }
case MotionEvent.ACTION_MOVE:
  break;
case MotionEvent.ACTION_POINTER_UP:
break;
case MotionEvent.ACTION_UP:
{
if (mTouchMode == TOUCH_MODE_DOWN_IN_CURRENT_VIEW) {
  final View v=getCurrentView();
  if (v != null) {
    if (isTransformedTouchPointInView(ev.getX(),ev.getY(),v,null)) {
      final Handler handler=getHandler();
      if (handler != null) {
        handler.removeCallbacks(mPendingCheckForTap);
      }
      showTapFeedback(v);
      postDelayed(new Runnable(){
        public void run(){
          hideTapFeedback(v);
          post(new Runnable(){
            public void run(){
              performItemClick(v,0,0);
            }
          }
);
        }
      }
,ViewConfiguration.getPressedStateDuration());
      handled=true;
    }
  }
}
mTouchMode=TOUCH_MODE_NONE;
break;
}
case MotionEvent.ACTION_CANCEL:
{
View v=getCurrentView();
if (v != null) {
hideTapFeedback(v);
}
mTouchMode=TOUCH_MODE_NONE;
}
}
return handled;
}
