{
  StringBuilder sb=new StringBuilder(512);
  if (isCompactOutput) {
    sb.append("D:");
    sb.append(CHECKIN_VERSION);
    sb.append(',');
  }
 else {
    sb.append("Date: ");
  }
  sb.append(date);
  int vers=in.readInt();
  if (vers != VERSION) {
    sb.append(" (old data version)");
    pw.println(sb.toString());
    return;
  }
  pw.println(sb.toString());
  int N=in.readInt();
  while (N > 0) {
    N--;
    String pkgName=in.readString();
    if (pkgName == null) {
      break;
    }
    sb.setLength(0);
    PkgUsageStatsExtended pus=new PkgUsageStatsExtended(in);
    if (isCompactOutput) {
      sb.append("P:");
      sb.append(pkgName);
      sb.append(",");
      sb.append(pus.mLaunchCount);
      sb.append(",");
      sb.append(pus.mUsageTime);
      sb.append('\n');
      final int NC=pus.mLaunchTimes.size();
      if (NC > 0) {
        for (        Map.Entry<String,TimeStats> ent : pus.mLaunchTimes.entrySet()) {
          sb.append("A:");
          sb.append(ent.getKey());
          sb.append(",");
          TimeStats times=ent.getValue();
          times.computeStats();
          sb.append(times.count);
          sb.append(",");
          sb.append(times.samples);
          sb.append(",");
          sb.append(times.minimum);
          sb.append(",");
          sb.append(times.maximum);
          sb.append(",");
          sb.append(times.average);
          sb.append(",");
          sb.append(times.median);
          sb.append('\n');
        }
      }
    }
 else {
      sb.append("  ");
      sb.append(pkgName);
      sb.append(": ");
      sb.append(pus.mLaunchCount);
      sb.append(" times, ");
      sb.append(pus.mUsageTime);
      sb.append(" ms");
      sb.append('\n');
      final int NC=pus.mLaunchTimes.size();
      if (NC > 0) {
        for (        Map.Entry<String,TimeStats> ent : pus.mLaunchTimes.entrySet()) {
          sb.append("    ");
          sb.append(ent.getKey());
          TimeStats times=ent.getValue();
          times.computeStats();
          sb.append(": count=");
          sb.append(times.count);
          sb.append(", samples=");
          sb.append(times.samples);
          sb.append(", min=");
          sb.append(times.minimum);
          sb.append(", max=");
          sb.append(times.maximum);
          sb.append(", avg=");
          sb.append(times.average);
          sb.append(", med=");
          sb.append(times.median);
          sb.append('\n');
        }
      }
    }
    pw.write(sb.toString());
  }
}
