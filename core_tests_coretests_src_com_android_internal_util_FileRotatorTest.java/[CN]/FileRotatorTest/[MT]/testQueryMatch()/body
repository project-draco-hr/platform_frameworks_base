{
  final FileRotator rotate=new FileRotator(mBasePath,PREFIX,HOUR_IN_MILLIS,YEAR_IN_MILLIS);
  final RecordingReader reader=new RecordingReader();
  long currentTime=TEST_TIME;
  rotate.maybeRotate(currentTime);
  rotate.combineActive(reader,writer(RED),currentTime);
  currentTime+=DAY_IN_MILLIS;
  rotate.maybeRotate(currentTime);
  rotate.combineActive(reader,writer(GREEN),currentTime);
  currentTime+=DAY_IN_MILLIS;
  rotate.maybeRotate(currentTime);
  rotate.combineActive(reader,writer(BLUE),currentTime);
  currentTime+=DAY_IN_MILLIS;
  rotate.maybeRotate(currentTime);
  rotate.combineActive(reader,writer(YELLOW),currentTime);
  final String[] FULL_SET={RED,GREEN,BLUE,YELLOW};
  assertReadAll(rotate,FULL_SET);
  assertReadMatching(rotate,Long.MIN_VALUE,Long.MAX_VALUE,FULL_SET);
  assertReadMatching(rotate,Long.MIN_VALUE,currentTime,FULL_SET);
  assertReadMatching(rotate,TEST_TIME + SECOND_IN_MILLIS,currentTime,FULL_SET);
  assertReadMatching(rotate,TEST_TIME + SECOND_IN_MILLIS,currentTime - SECOND_IN_MILLIS,RED,GREEN,BLUE);
  assertReadMatching(rotate,TEST_TIME + DAY_IN_MILLIS,Long.MAX_VALUE,FULL_SET);
  assertReadMatching(rotate,TEST_TIME + DAY_IN_MILLIS + SECOND_IN_MILLIS,Long.MAX_VALUE,GREEN,BLUE,YELLOW);
  final long blueStart=TEST_TIME + (DAY_IN_MILLIS * 2);
  final long blueEnd=TEST_TIME + (DAY_IN_MILLIS * 3);
  assertReadMatching(rotate,blueStart + SECOND_IN_MILLIS,blueEnd - SECOND_IN_MILLIS,BLUE);
  assertReadMatching(rotate,Long.MIN_VALUE,TEST_TIME - DAY_IN_MILLIS);
}
