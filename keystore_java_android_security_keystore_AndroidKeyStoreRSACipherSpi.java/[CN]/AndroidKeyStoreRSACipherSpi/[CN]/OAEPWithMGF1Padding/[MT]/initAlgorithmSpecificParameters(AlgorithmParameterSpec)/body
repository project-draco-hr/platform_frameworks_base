{
  if (params == null) {
    return;
  }
  if (!(params instanceof OAEPParameterSpec)) {
    throw new InvalidAlgorithmParameterException("Unsupported parameter spec: " + params + ". Only OAEPParameterSpec supported");
  }
  OAEPParameterSpec spec=(OAEPParameterSpec)params;
  if (!MGF_ALGORITGM_MGF1.equalsIgnoreCase(spec.getMGFAlgorithm())) {
    throw new InvalidAlgorithmParameterException("Unsupported MGF: " + spec.getMGFAlgorithm() + ". Only "+ MGF_ALGORITGM_MGF1+ " supported");
  }
  String jcaDigest=spec.getDigestAlgorithm();
  int keymasterDigest;
  try {
    keymasterDigest=KeyProperties.Digest.toKeymaster(jcaDigest);
  }
 catch (  IllegalArgumentException e) {
    throw new InvalidAlgorithmParameterException("Unsupported digest: " + jcaDigest,e);
  }
switch (keymasterDigest) {
case KeymasterDefs.KM_DIGEST_SHA1:
case KeymasterDefs.KM_DIGEST_SHA_2_224:
case KeymasterDefs.KM_DIGEST_SHA_2_256:
case KeymasterDefs.KM_DIGEST_SHA_2_384:
case KeymasterDefs.KM_DIGEST_SHA_2_512:
    break;
default :
  throw new InvalidAlgorithmParameterException("Unsupported digest: " + jcaDigest);
}
AlgorithmParameterSpec mgfParams=spec.getMGFParameters();
if (mgfParams == null) {
throw new InvalidAlgorithmParameterException("MGF parameters must be provided");
}
if (!(mgfParams instanceof MGF1ParameterSpec)) {
throw new InvalidAlgorithmParameterException("Unsupported MGF parameters" + ": " + mgfParams + ". Only MGF1ParameterSpec supported");
}
MGF1ParameterSpec mgfSpec=(MGF1ParameterSpec)mgfParams;
String mgf1JcaDigest=mgfSpec.getDigestAlgorithm();
if (!KeyProperties.DIGEST_SHA1.equalsIgnoreCase(mgf1JcaDigest)) {
throw new InvalidAlgorithmParameterException("Unsupported MGF1 digest: " + mgf1JcaDigest + ". Only "+ KeyProperties.DIGEST_SHA1+ " supported");
}
PSource pSource=spec.getPSource();
if (!(pSource instanceof PSource.PSpecified)) {
throw new InvalidAlgorithmParameterException("Unsupported source of encoding input P: " + pSource + ". Only pSpecifiedEmpty (PSource.PSpecified.DEFAULT) supported");
}
PSource.PSpecified pSourceSpecified=(PSource.PSpecified)pSource;
byte[] pSourceValue=pSourceSpecified.getValue();
if ((pSourceValue != null) && (pSourceValue.length > 0)) {
throw new InvalidAlgorithmParameterException("Unsupported source of encoding input P: " + pSource + ". Only pSpecifiedEmpty (PSource.PSpecified.DEFAULT) supported");
}
mKeymasterDigest=keymasterDigest;
mDigestOutputSizeBytes=(KeymasterUtils.getDigestOutputSizeBits(keymasterDigest) + 7) / 8;
}
