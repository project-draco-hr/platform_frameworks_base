{
  Slog.d(TAG,"up " + keyCode);
  final KeyEvent.DispatcherState dispatcher=mView.getKeyDispatcherState();
  if (dispatcher != null) {
    dispatcher.handleUpEvent(event);
  }
switch (keyCode) {
case KeyEvent.KEYCODE_VOLUME_UP:
case KeyEvent.KEYCODE_VOLUME_DOWN:
case KeyEvent.KEYCODE_VOLUME_MUTE:
{
      if (!event.isCanceled()) {
        AudioManager audioManager=(AudioManager)mContext.getSystemService(Context.AUDIO_SERVICE);
        if (audioManager != null) {
          getAudioManager().handleKeyUp(keyCode,AudioManager.USE_DEFAULT_STREAM_TYPE);
        }
      }
      return true;
    }
case KeyEvent.KEYCODE_HEADSETHOOK:
case KeyEvent.KEYCODE_MUTE:
case KeyEvent.KEYCODE_MEDIA_PLAY:
case KeyEvent.KEYCODE_MEDIA_PAUSE:
case KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE:
case KeyEvent.KEYCODE_MEDIA_STOP:
case KeyEvent.KEYCODE_MEDIA_NEXT:
case KeyEvent.KEYCODE_MEDIA_PREVIOUS:
case KeyEvent.KEYCODE_MEDIA_REWIND:
case KeyEvent.KEYCODE_MEDIA_RECORD:
case KeyEvent.KEYCODE_MEDIA_FAST_FORWARD:
{
    Intent intent=new Intent(Intent.ACTION_MEDIA_BUTTON,null);
    intent.putExtra(Intent.EXTRA_KEY_EVENT,event);
    mContext.sendOrderedBroadcast(intent,null);
    return true;
  }
case KeyEvent.KEYCODE_CAMERA:
{
  if (getKeyguardManager().inKeyguardRestrictedInputMode()) {
    break;
  }
  if (event.isTracking() && !event.isCanceled()) {
  }
  return true;
}
case KeyEvent.KEYCODE_CALL:
{
if (getKeyguardManager().inKeyguardRestrictedInputMode()) {
  break;
}
if (event.isTracking() && !event.isCanceled()) {
  startCallActivity();
}
return true;
}
}
return false;
}
