{
  final long startTimeMillis=SystemClock.uptimeMillis();
  try {
    List<String> classNameAndTextList=new ArrayList<String>();
    classNameAndTextList.add("android.widget.LinearLayout");
    classNameAndTextList.add("android.widget.LinearLayout");
    classNameAndTextList.add("android.widget.LinearLayout");
    classNameAndTextList.add("android.widget.LinearLayout");
    classNameAndTextList.add("android.widget.ButtonButton1");
    classNameAndTextList.add("android.widget.ButtonButton2");
    classNameAndTextList.add("android.widget.ButtonButton3");
    classNameAndTextList.add("android.widget.ButtonButton4");
    classNameAndTextList.add("android.widget.ButtonButton5");
    classNameAndTextList.add("android.widget.ButtonButton6");
    classNameAndTextList.add("android.widget.ButtonButton7");
    classNameAndTextList.add("android.widget.ButtonButton8");
    classNameAndTextList.add("android.widget.ButtonButton9");
    AccessibilityNodeInfo root=AccessibilityInteractionClient.getInstance().findAccessibilityNodeInfoByViewIdInActiveWindow(sConnectionId,R.id.root);
    assertNotNull("We must find the existing root.",root);
    Queue<AccessibilityNodeInfo> fringe=new LinkedList<AccessibilityNodeInfo>();
    fringe.add(root);
    while (!fringe.isEmpty()) {
      AccessibilityNodeInfo current=fringe.poll();
      CharSequence className=current.getClassName();
      CharSequence text=current.getText();
      String receivedClassNameAndText=className.toString() + ((text != null) ? text.toString() : "");
      String expectedClassNameAndText=classNameAndTextList.remove(0);
      assertEquals("Did not get the expected node info",expectedClassNameAndText,receivedClassNameAndText);
      final int childCount=current.getChildCount();
      for (int i=0; i < childCount; i++) {
        AccessibilityNodeInfo child=current.getChild(i);
        fringe.add(child);
      }
    }
  }
  finally {
    if (DEBUG) {
      final long elapsedTimeMillis=SystemClock.uptimeMillis() - startTimeMillis;
      Log.i(LOG_TAG,"testTraverseAllViews: " + elapsedTimeMillis + "ms");
    }
  }
}
