{
  if (payload.remaining() < 3) {
    throw new ProtocolException("Runt EAP Method: " + payload.remaining());
  }
  int length=payload.get() & Constants.BYTE_MASK;
  int methodID=payload.get() & Constants.BYTE_MASK;
  int count=payload.get() & Constants.BYTE_MASK;
  mEAPMethodID=EAP.mapEAPMethod(methodID);
  mAuthParams=new EnumMap<>(EAP.AuthInfoID.class);
  int realCount=0;
  ByteBuffer paramPayload=payload.duplicate().order(ByteOrder.LITTLE_ENDIAN);
  paramPayload.limit(paramPayload.position() + length - 2);
  payload.position(payload.position() + length - 2);
  while (paramPayload.hasRemaining()) {
    int id=paramPayload.get() & Constants.BYTE_MASK;
    EAP.AuthInfoID authInfoID=EAP.mapAuthMethod(id);
    if (authInfoID == null) {
      throw new ProtocolException("Unknown auth parameter ID: " + id);
    }
    int len=paramPayload.get() & Constants.BYTE_MASK;
    if (len == 0 || len > paramPayload.remaining()) {
      throw new ProtocolException("Bad auth method length: " + len);
    }
switch (authInfoID) {
case ExpandedEAPMethod:
      addAuthParam(new ExpandedEAPMethod(authInfoID,len,paramPayload));
    break;
case NonEAPInnerAuthType:
  addAuthParam(new NonEAPInnerAuth(len,paramPayload));
break;
case InnerAuthEAPMethodType:
addAuthParam(new InnerAuthEAP(len,paramPayload));
break;
case ExpandedInnerEAPMethod:
addAuthParam(new ExpandedEAPMethod(authInfoID,len,paramPayload));
break;
case CredentialType:
addAuthParam(new Credential(authInfoID,len,paramPayload));
break;
case TunneledEAPMethodCredType:
addAuthParam(new Credential(authInfoID,len,paramPayload));
break;
case VendorSpecific:
addAuthParam(new VendorSpecificAuth(len,paramPayload));
break;
}
realCount++;
}
if (realCount != count) throw new ProtocolException("Invalid parameter count: " + realCount + ", expected "+ count);
}
