{
  isAborted=false;
  mParent=p;
  mInput=in;
  mMaxPacketLength=maxSize;
  mClosed=false;
  requestHeader=new HeaderSet();
  replyHeader=new HeaderSet();
  mPrivateInput=new PrivateInputStream(this);
  mResponseSize=3;
  mListener=listen;
  mRequestFinished=false;
  mPrivateOutputOpen=false;
  mHasBody=false;
  ObexPacket packet;
  mTransport=p.getTransport();
  if ((request == ObexHelper.OBEX_OPCODE_PUT) || (request == ObexHelper.OBEX_OPCODE_PUT_FINAL)) {
    mGetOperation=false;
    if ((request & ObexHelper.OBEX_OPCODE_FINAL_BIT_MASK) == 0) {
      finalBitSet=false;
    }
 else {
      finalBitSet=true;
      mRequestFinished=true;
    }
  }
 else   if ((request == ObexHelper.OBEX_OPCODE_GET) || (request == ObexHelper.OBEX_OPCODE_GET_FINAL)) {
    mGetOperation=true;
    finalBitSet=false;
    if (request == ObexHelper.OBEX_OPCODE_GET_FINAL) {
      mRequestFinished=true;
    }
  }
 else {
    throw new IOException("ServerOperation can not handle such request");
  }
  packet=ObexPacket.read(request,mInput);
  if (packet.mLength > ObexHelper.getMaxRxPacketSize(mTransport)) {
    mParent.sendResponse(ResponseCodes.OBEX_HTTP_REQ_TOO_LARGE,null);
    throw new IOException("Packet received was too large. Length: " + packet.mLength + " maxLength: "+ ObexHelper.getMaxRxPacketSize(mTransport));
  }
  if (packet.mLength > 3) {
    if (!handleObexPacket(packet)) {
      return;
    }
    if (!mHasBody) {
      while ((!mGetOperation) && (!finalBitSet)) {
        sendReply(ResponseCodes.OBEX_HTTP_CONTINUE);
        if (mPrivateInput.available() > 0) {
          break;
        }
      }
    }
  }
  while ((!mGetOperation) && (!finalBitSet) && (mPrivateInput.available() == 0)) {
    sendReply(ResponseCodes.OBEX_HTTP_CONTINUE);
    if (mPrivateInput.available() > 0) {
      break;
    }
  }
  while (mGetOperation && !mRequestFinished) {
    sendReply(ResponseCodes.OBEX_HTTP_CONTINUE);
  }
}
