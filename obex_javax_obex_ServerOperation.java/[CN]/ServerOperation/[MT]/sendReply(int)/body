{
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  boolean skipSend=false;
  boolean skipReceive=false;
  boolean srmRespSendPending=false;
  long id=mListener.getConnectionId();
  if (id == -1) {
    replyHeader.mConnectionID=null;
  }
 else {
    replyHeader.mConnectionID=ObexHelper.convertToByteArray(id);
  }
  if (mSrmEnabled && !mSrmResponseSent) {
    if (V)     Log.v(TAG,"mSrmEnabled==true, sending SRM enable response.");
    replyHeader.setHeader(HeaderSet.SINGLE_RESPONSE_MODE,(byte)ObexHelper.OBEX_SRM_ENABLE);
    srmRespSendPending=true;
  }
  if (mSrmEnabled && !mGetOperation && mSrmLocalWait) {
    replyHeader.setHeader(HeaderSet.SINGLE_RESPONSE_MODE,(byte)ObexHelper.OBEX_SRMP_WAIT);
  }
  byte[] headerArray=ObexHelper.createHeader(replyHeader,true);
  int bodyLength=-1;
  int orginalBodyLength=-1;
  if (mPrivateOutput != null) {
    bodyLength=mPrivateOutput.size();
    orginalBodyLength=bodyLength;
  }
  if ((ObexHelper.BASE_PACKET_LENGTH + headerArray.length) > mMaxPacketLength) {
    int end=0;
    int start=0;
    while (end != headerArray.length) {
      end=ObexHelper.findHeaderEnd(headerArray,start,mMaxPacketLength - ObexHelper.BASE_PACKET_LENGTH);
      if (end == -1) {
        mClosed=true;
        if (mPrivateInput != null) {
          mPrivateInput.close();
        }
        if (mPrivateOutput != null) {
          mPrivateOutput.close();
        }
        mParent.sendResponse(ResponseCodes.OBEX_HTTP_INTERNAL_ERROR,null);
        throw new IOException("OBEX Packet exceeds max packet size");
      }
      byte[] sendHeader=new byte[end - start];
      System.arraycopy(headerArray,start,sendHeader,0,sendHeader.length);
      mParent.sendResponse(type,sendHeader);
      start=end;
    }
    if (bodyLength > 0) {
      return true;
    }
 else {
      return false;
    }
  }
 else {
    out.write(headerArray);
  }
  if (mGetOperation && type == ResponseCodes.OBEX_HTTP_OK) {
    finalBitSet=true;
  }
  if (mSrmActive) {
    if (!mGetOperation && type == ResponseCodes.OBEX_HTTP_CONTINUE && mSrmResponseSent == true) {
      skipSend=true;
    }
 else     if (mGetOperation && mRequestFinished == false && mSrmResponseSent == true) {
      skipSend=true;
    }
 else     if (mGetOperation && mRequestFinished == true) {
      skipReceive=true;
    }
    if (V)     Log.v(TAG,"type==" + type + " skipSend=="+ skipSend+ " skipReceive=="+ skipReceive);
  }
  if (srmRespSendPending) {
    if (V)     Log.v(TAG,"SRM Enabled (srmRespSendPending == true)- sending SRM Enable response");
    mSrmResponseSent=true;
  }
  if ((finalBitSet) || (headerArray.length < (mMaxPacketLength - 20))) {
    if (bodyLength > 0) {
      if (bodyLength > (mMaxPacketLength - headerArray.length - 6)) {
        bodyLength=mMaxPacketLength - headerArray.length - 6;
      }
      byte[] body=mPrivateOutput.readBytes(bodyLength);
      if ((finalBitSet) || (mPrivateOutput.isClosed())) {
        if (mSendBodyHeader == true) {
          out.write(0x49);
          bodyLength+=3;
          out.write((byte)(bodyLength >> 8));
          out.write((byte)bodyLength);
          out.write(body);
        }
      }
 else {
        if (mSendBodyHeader == true) {
          out.write(0x48);
          bodyLength+=3;
          out.write((byte)(bodyLength >> 8));
          out.write((byte)bodyLength);
          out.write(body);
        }
      }
    }
  }
  if ((finalBitSet) && (type == ResponseCodes.OBEX_HTTP_OK) && (orginalBodyLength <= 0)) {
    if (mSendBodyHeader) {
      out.write(0x49);
      orginalBodyLength=3;
      out.write((byte)(orginalBodyLength >> 8));
      out.write((byte)orginalBodyLength);
    }
  }
  if (skipSend == false) {
    mResponseSize=3;
    mParent.sendResponse(type,out.toByteArray());
  }
  if (type == ResponseCodes.OBEX_HTTP_CONTINUE) {
    if (mGetOperation && skipReceive) {
      checkSrmRemoteAbort();
    }
 else {
      ObexPacket packet=ObexPacket.read(mInput);
      int headerId=packet.mHeaderId;
      if ((headerId != ObexHelper.OBEX_OPCODE_PUT) && (headerId != ObexHelper.OBEX_OPCODE_PUT_FINAL) && (headerId != ObexHelper.OBEX_OPCODE_GET)&& (headerId != ObexHelper.OBEX_OPCODE_GET_FINAL)) {
        if (headerId == ObexHelper.OBEX_OPCODE_ABORT) {
          handleRemoteAbort();
        }
 else {
          mParent.sendResponse(ResponseCodes.OBEX_HTTP_BAD_REQUEST,null);
          mClosed=true;
          mExceptionString="Bad Request Received";
          throw new IOException("Bad Request Received");
        }
      }
 else {
        if ((headerId == ObexHelper.OBEX_OPCODE_PUT_FINAL)) {
          finalBitSet=true;
        }
 else         if (headerId == ObexHelper.OBEX_OPCODE_GET_FINAL) {
          mRequestFinished=true;
        }
        if (packet.mLength > ObexHelper.getMaxRxPacketSize(mTransport)) {
          mParent.sendResponse(ResponseCodes.OBEX_HTTP_REQ_TOO_LARGE,null);
          throw new IOException("Packet received was too large");
        }
        if (packet.mLength > 3 || (mSrmEnabled && packet.mLength == 3)) {
          if (handleObexPacket(packet) == false) {
            return false;
          }
        }
      }
    }
    return true;
  }
 else {
    return false;
  }
}
