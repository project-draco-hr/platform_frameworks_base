{
  if ((compatibilityFlags & CompatibilityInfo.SCALING_EXPANDABLE_MASK) == CompatibilityInfo.EXPANDABLE) {
    if (DBG)     Log.d(TAG,"no translation required");
    return null;
  }
  if ((compatibilityFlags & CompatibilityInfo.EXPANDABLE) == 0) {
    if ((params.flags & WindowManager.LayoutParams.FLAG_NO_COMPATIBILITY_SCALING) != 0) {
      if (DBG)       Log.d(TAG,"translation for surface view selected");
      return new Translator(X_SHIFT_WINDOW,false,1.0f,1.0f);
    }
 else {
      int shiftMode;
      if (params.gravity == Gravity.NO_GRAVITY) {
        shiftMode=X_SHIFT_AND_CLIP_CONTENT;
        if (DBG)         Log.d(TAG,"shift and clip translator");
      }
 else       if (params.width == WindowManager.LayoutParams.FILL_PARENT) {
        shiftMode=X_SHIFT_CONTENT;
        if (DBG)         Log.d(TAG,"shift content translator");
      }
 else       if ((params.gravity & Gravity.LEFT) != 0 && params.x > 0) {
        shiftMode=X_SHIFT_WINDOW;
        if (DBG)         Log.d(TAG,"shift window translator");
      }
 else {
        shiftMode=X_SHIFT_NONE;
        if (DBG)         Log.d(TAG,"no content/window translator");
      }
      return new Translator(shiftMode);
    }
  }
 else   if (isScalingRequired()) {
    return new Translator();
  }
 else {
    return null;
  }
}
