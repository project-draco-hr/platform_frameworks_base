{
  final int width=dm.unscaledWidthPixels;
  final int height=dm.unscaledHeightPixels;
  int shortSize, longSize;
  if (width < height) {
    shortSize=width;
    longSize=height;
  }
 else {
    shortSize=height;
    longSize=width;
  }
  int newShortSize=(int)(DEFAULT_NORMAL_SHORT_DIMENSION * dm.density + 0.5f);
  float aspect=((float)longSize) / shortSize;
  if (aspect > MAXIMUM_ASPECT_RATIO) {
    aspect=MAXIMUM_ASPECT_RATIO;
  }
  int newLongSize=(int)(newShortSize * aspect + 0.5f);
  int newWidth, newHeight;
  if (width < height) {
    newWidth=newShortSize;
    newHeight=newLongSize;
  }
 else {
    newWidth=newLongSize;
    newHeight=newShortSize;
  }
  float sw=width / (float)newWidth;
  float sh=height / (float)newHeight;
  float scale=sw < sh ? sw : sh;
  if (scale < 1) {
    scale=1;
  }
  if (outRect != null) {
    final int left=(int)((width - (newWidth * scale)) / 2);
    final int top=(int)((height - (newHeight * scale)) / 2);
    outRect.set(left,top,left + newWidth,top + newHeight);
  }
  if (outDm != null) {
    outDm.widthPixels=newWidth;
    outDm.heightPixels=newHeight;
  }
  return scale;
}
