{
  getStats();
  mMaxPower=0;
  mComputedPower=0;
  mTotalPower=0;
  mWifiPower=0;
  mBluetoothPower=0;
  mAppMobileActive=0;
  mAppWifiRunning=0;
  mUsageList.clear();
  mWifiSippers.clear();
  mBluetoothSippers.clear();
  mUserSippers.clear();
  mUserPower.clear();
  mMobilemsppList.clear();
  if (mStats == null) {
    return;
  }
  mStatsType=statsType;
  mAsUser=asUser;
  mRawUptime=rawUptimeUs;
  mRawRealtime=rawRealtimeUs;
  mBatteryUptime=mStats.getBatteryUptime(rawUptimeUs);
  mBatteryRealtime=mStats.getBatteryRealtime(rawRealtimeUs);
  mTypeBatteryUptime=mStats.computeBatteryUptime(rawUptimeUs,mStatsType);
  mTypeBatteryRealtime=mStats.computeBatteryRealtime(rawRealtimeUs,mStatsType);
  if (DEBUG) {
    Log.d(TAG,"Raw time: realtime=" + (rawRealtimeUs / 1000) + " uptime="+ (rawUptimeUs / 1000));
    Log.d(TAG,"Battery time: realtime=" + (mBatteryRealtime / 1000) + " uptime="+ (mBatteryUptime / 1000));
    Log.d(TAG,"Battery type time: realtime=" + (mTypeBatteryRealtime / 1000) + " uptime="+ (mTypeBatteryUptime / 1000));
  }
  mMinDrainedPower=(mStats.getLowDischargeAmountSinceCharge() * mPowerProfile.getBatteryCapacity()) / 100;
  mMaxDrainedPower=(mStats.getHighDischargeAmountSinceCharge() * mPowerProfile.getBatteryCapacity()) / 100;
  processAppUsage();
  for (int i=0; i < mUsageList.size(); i++) {
    BatterySipper bs=mUsageList.get(i);
    bs.computeMobilemspp();
    if (bs.mobilemspp != 0) {
      mMobilemsppList.add(bs);
    }
  }
  for (int i=0; i < mUserSippers.size(); i++) {
    List<BatterySipper> user=mUserSippers.valueAt(i);
    for (int j=0; j < user.size(); j++) {
      BatterySipper bs=user.get(j);
      bs.computeMobilemspp();
      if (bs.mobilemspp != 0) {
        mMobilemsppList.add(bs);
      }
    }
  }
  Collections.sort(mMobilemsppList,new Comparator<BatterySipper>(){
    @Override public int compare(    BatterySipper lhs,    BatterySipper rhs){
      if (lhs.mobilemspp < rhs.mobilemspp) {
        return 1;
      }
 else       if (lhs.mobilemspp > rhs.mobilemspp) {
        return -1;
      }
      return 0;
    }
  }
);
  processMiscUsage();
  if (DEBUG) {
    Log.d(TAG,"Accuracy: total computed=" + makemAh(mComputedPower) + ", min discharge="+ makemAh(mMinDrainedPower)+ ", max discharge="+ makemAh(mMaxDrainedPower));
  }
  mTotalPower=mComputedPower;
  if (mStats.getLowDischargeAmountSinceCharge() > 1) {
    if (mMinDrainedPower > mComputedPower) {
      double amount=mMinDrainedPower - mComputedPower;
      mTotalPower=mMinDrainedPower;
      addEntryNoTotal(BatterySipper.DrainType.UNACCOUNTED,0,amount);
    }
 else     if (mMaxDrainedPower < mComputedPower) {
      double amount=mComputedPower - mMaxDrainedPower;
      addEntryNoTotal(BatterySipper.DrainType.OVERCOUNTED,0,amount);
    }
  }
  Collections.sort(mUsageList);
}
