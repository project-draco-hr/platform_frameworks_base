{
  getStats();
  mMaxPower=0;
  mComputedPower=0;
  mTotalPower=0;
  mWifiPower=0;
  mBluetoothPower=0;
  mAppWifiRunning=0;
  mUsageList.clear();
  mWifiSippers.clear();
  mBluetoothSippers.clear();
  mUserSippers.clear();
  mUserPower.clear();
  if (mStats == null) {
    return;
  }
  mStatsType=statsType;
  mAsUser=asUser;
  mBatteryUptime=mStats.getBatteryUptime(rawUptimeNano);
  mBatteryRealtime=mStats.getBatteryRealtime(rawRealtimeNano);
  mTypeBatteryUptime=mStats.computeBatteryUptime(rawUptimeNano,mStatsType);
  mTypeBatteryRealtime=mStats.computeBatteryRealtime(rawRealtimeNano,mStatsType);
  if (DEBUG) {
    Log.d(TAG,"Raw time: realtime=" + (rawRealtimeNano / 1000) + " uptime="+ (rawUptimeNano / 1000));
    Log.d(TAG,"Battery time: realtime=" + (mBatteryRealtime / 1000) + " uptime="+ (mBatteryUptime / 1000));
    Log.d(TAG,"Battery type time: realtime=" + (mTypeBatteryRealtime / 1000) + " uptime="+ (mTypeBatteryUptime / 1000));
  }
  mMinDrainedPower=(mStats.getLowDischargeAmountSinceCharge() * mPowerProfile.getBatteryCapacity()) / 100;
  mMaxDrainedPower=(mStats.getHighDischargeAmountSinceCharge() * mPowerProfile.getBatteryCapacity()) / 100;
  processAppUsage();
  processMiscUsage();
  if (DEBUG) {
    Log.d(TAG,"Accuracy: total computed=" + makemAh(mComputedPower) + ", min discharge="+ makemAh(mMinDrainedPower)+ ", max discharge="+ makemAh(mMaxDrainedPower));
  }
  mTotalPower=mComputedPower;
  if (mStats.getLowDischargeAmountSinceCharge() > 1) {
    if (mMinDrainedPower > mComputedPower) {
      double amount=mMinDrainedPower - mComputedPower;
      mTotalPower=mMinDrainedPower;
      addEntryNoTotal(BatterySipper.DrainType.UNACCOUNTED,0,amount);
    }
 else     if (mMaxDrainedPower < mComputedPower) {
      double amount=mComputedPower - mMaxDrainedPower;
      addEntryNoTotal(BatterySipper.DrainType.OVERCOUNTED,0,amount);
    }
  }
  Collections.sort(mUsageList);
}
