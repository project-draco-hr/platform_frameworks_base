{
  final boolean forAllUsers=(asUsers.get(UserHandle.USER_ALL) != null);
  mStatsPeriod=mTypeBatteryRealtime;
  final SparseArray<? extends Uid> uidStats=mStats.getUidStats();
  final int NU=uidStats.size();
  for (int iu=0; iu < NU; iu++) {
    final Uid u=uidStats.valueAt(iu);
    final BatterySipper app=new BatterySipper(BatterySipper.DrainType.APP,u,0);
    mCpuPowerCalculator.calculateApp(app,u,mRawRealtime,mRawUptime,mStatsType);
    mWakelockPowerCalculator.calculateApp(app,u,mRawRealtime,mRawUptime,mStatsType);
    mMobileRadioPowerCalculator.calculateApp(app,u,mRawRealtime,mRawUptime,mStatsType);
    mWifiPowerCalculator.calculateApp(app,u,mRawRealtime,mRawUptime,mStatsType);
    mBluetoothPowerCalculator.calculateApp(app,u,mRawRealtime,mRawUptime,mStatsType);
    mSensorPowerCalculator.calculateApp(app,u,mRawRealtime,mRawUptime,mStatsType);
    mCameraPowerCalculator.calculateApp(app,u,mRawRealtime,mRawUptime,mStatsType);
    mFlashlightPowerCalculator.calculateApp(app,u,mRawRealtime,mRawUptime,mStatsType);
    final double totalPower=app.sumPower();
    if (DEBUG && totalPower != 0) {
      Log.d(TAG,String.format("UID %d: total power=%s",u.getUid(),makemAh(totalPower)));
    }
    if (totalPower != 0 || u.getUid() == 0) {
      final int uid=app.getUid();
      final int userId=UserHandle.getUserId(uid);
      if (uid == Process.WIFI_UID) {
        mWifiSippers.add(app);
      }
 else       if (uid == Process.BLUETOOTH_UID) {
        mBluetoothSippers.add(app);
      }
 else       if (!forAllUsers && asUsers.get(userId) == null && UserHandle.getAppId(uid) >= Process.FIRST_APPLICATION_UID) {
        List<BatterySipper> list=mUserSippers.get(userId);
        if (list == null) {
          list=new ArrayList<>();
          mUserSippers.put(userId,list);
        }
        list.add(app);
      }
 else {
        mUsageList.add(app);
      }
      if (uid == 0) {
        mWakelockPowerCalculator.calculateRemaining(app,mStats,mRawRealtime,mRawUptime,mStatsType);
        app.sumPower();
      }
    }
  }
}
