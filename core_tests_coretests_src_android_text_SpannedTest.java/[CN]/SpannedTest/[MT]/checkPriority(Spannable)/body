{
  s.setSpan(new Object(),0,1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE | (5 << Spannable.SPAN_PRIORITY_SHIFT));
  s.setSpan(new Object(),0,1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE | (10 << Spannable.SPAN_PRIORITY_SHIFT));
  s.setSpan(new Object(),0,1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE | (0 << Spannable.SPAN_PRIORITY_SHIFT));
  s.setSpan(new Object(),0,1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE | (15 << Spannable.SPAN_PRIORITY_SHIFT));
  s.setSpan(new Object(),0,1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE | (3 << Spannable.SPAN_PRIORITY_SHIFT));
  s.setSpan(new Object(),0,1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE | (6 << Spannable.SPAN_PRIORITY_SHIFT));
  s.setSpan(new Object(),0,1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE | (0 << Spannable.SPAN_PRIORITY_SHIFT));
  Object[] spans=s.getSpans(0,s.length(),Object.class);
  for (int i=0; i < spans.length - 1; i++) {
    assertEquals((s.getSpanFlags(spans[i]) & Spanned.SPAN_PRIORITY) >= (s.getSpanFlags(spans[i + 1]) & Spanned.SPAN_PRIORITY),true);
  }
  mExpect=0;
  s.setSpan(new Watcher(2),0,s.length(),Spannable.SPAN_INCLUSIVE_INCLUSIVE | (2 << Spannable.SPAN_PRIORITY_SHIFT));
  s.setSpan(new Watcher(4),0,s.length(),Spannable.SPAN_INCLUSIVE_INCLUSIVE | (4 << Spannable.SPAN_PRIORITY_SHIFT));
  s.setSpan(new Watcher(1),0,s.length(),Spannable.SPAN_INCLUSIVE_INCLUSIVE | (1 << Spannable.SPAN_PRIORITY_SHIFT));
  s.setSpan(new Watcher(3),0,s.length(),Spannable.SPAN_INCLUSIVE_INCLUSIVE | (3 << Spannable.SPAN_PRIORITY_SHIFT));
  mExpect=4;
  s.setSpan(new Object(),0,1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
  assertEquals(mExpect,0);
}
