{
  if (name.equals("backgroundFitMode")) {
    mBackgroundFitModeChanged=true;
  }
 else   if (name.equals("acceptStddev")) {
    mBgMaskProgram.setHostValue("accept_variance",mAcceptStddev * mAcceptStddev);
  }
 else   if (name.equals("hierLrgScale")) {
    mBgMaskProgram.setHostValue("scale_lrg",mHierarchyLrgScale);
  }
 else   if (name.equals("hierMidScale")) {
    mBgMaskProgram.setHostValue("scale_mid",mHierarchyMidScale);
  }
 else   if (name.equals("hierSmlScale")) {
    mBgMaskProgram.setHostValue("scale_sml",mHierarchySmlScale);
  }
 else   if (name.equals("hierLrgExp")) {
    mBgMaskProgram.setHostValue("exp_lrg",(float)(mSubsampleLevel + mHierarchyLrgExp));
  }
 else   if (name.equals("hierMidExp")) {
    mBgMaskProgram.setHostValue("exp_mid",(float)(mSubsampleLevel + mHierarchyMidExp));
  }
 else   if (name.equals("hierSmlExp")) {
    mBgMaskProgram.setHostValue("exp_sml",(float)(mSubsampleLevel + mHierarchySmlExp));
  }
 else   if (name.equals("lumScale") || name.equals("chromaScale")) {
    float[] yuvWeights={mLumScale,mChromaScale};
    mBgMaskProgram.setHostValue("yuv_weights",yuvWeights);
  }
 else   if (name.equals("maskBg")) {
    mBgSubtractProgram.setHostValue("mask_blend_bg",mMaskBg);
  }
 else   if (name.equals("maskFg")) {
    mBgSubtractProgram.setHostValue("mask_blend_fg",mMaskFg);
  }
 else   if (name.equals("exposureChange")) {
    mBgSubtractProgram.setHostValue("exposure_change",mExposureChange);
  }
 else   if (name.equals("whitebalanceredChange")) {
    mBgSubtractProgram.setHostValue("whitebalancered_change",mWhiteBalanceRedChange);
  }
 else   if (name.equals("whitebalanceblueChange")) {
    mBgSubtractProgram.setHostValue("whitebalanceblue_change",mWhiteBalanceBlueChange);
  }
 else   if (name.equals("autowbToggle")) {
    mAutomaticWhiteBalanceProgram.setHostValue("autowb_toggle",mAutoWBToggle);
  }
}
