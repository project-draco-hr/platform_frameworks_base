{
  float foregroundAspect=(float)video.getFormat().getWidth() / video.getFormat().getHeight();
  float backgroundAspect=(float)background.getFormat().getWidth() / background.getFormat().getHeight();
  float currentRelativeAspect=foregroundAspect / backgroundAspect;
  if (currentRelativeAspect != mRelativeAspect || fitModeChanged) {
    mRelativeAspect=currentRelativeAspect;
    float xMin=0.f, xWidth=1.f, yMin=0.f, yWidth=1.f;
switch (mBackgroundFitMode) {
case BACKGROUND_STRETCH:
      break;
case BACKGROUND_FIT:
    if (mRelativeAspect > 1.0f) {
      xMin=0.5f - 0.5f * mRelativeAspect;
      xWidth=1.f * mRelativeAspect;
    }
 else {
      yMin=0.5f - 0.5f / mRelativeAspect;
      yWidth=1 / mRelativeAspect;
    }
  break;
case BACKGROUND_FILL_CROP:
if (mRelativeAspect > 1.0f) {
  yMin=0.5f - 0.5f / mRelativeAspect;
  yWidth=1.f / mRelativeAspect;
}
 else {
  xMin=0.5f - 0.5f * mRelativeAspect;
  xWidth=mRelativeAspect;
}
break;
}
if (mMirrorBg) {
if (mLogVerbose) Log.v(TAG,"Mirroring the background!");
if (mOrientation == 0 || mOrientation == 180) {
xWidth=-xWidth;
xMin=1.0f - xMin;
}
 else {
yWidth=-yWidth;
yMin=1.0f - yMin;
}
}
if (mLogVerbose) Log.v(TAG,"bgTransform: xMin, yMin, xWidth, yWidth : " + xMin + ", "+ yMin+ ", "+ xWidth+ ", "+ yWidth+ ", mRelAspRatio = "+ mRelativeAspect);
float[] bgTransform={xWidth,0.f,0.f,0.f,yWidth,0.f,xMin,yMin,1.f};
mBgSubtractProgram.setHostValue("bg_fit_transform",bgTransform);
}
}
