{
  int numPoints=getTouchPoints().size();
  int[] pointerIds=new int[numPoints];
  MotionEvent.PointerCoords[] pointerCoords=new MotionEvent.PointerCoords[numPoints];
  for (int i=0; i < numPoints; ++i) {
    boolean isNeeded=false;
switch (action) {
case MotionEvent.ACTION_DOWN:
case MotionEvent.ACTION_UP:
      isNeeded=true;
    break;
case MotionEvent.ACTION_MOVE:
  isNeeded=getTouchPoints().get(i).hasMoved();
break;
case MotionEvent.ACTION_CANCEL:
isNeeded=getTouchPoints().get(i).isCancelled();
break;
default :
Log.w(LOG_TAG + "::executeTouchEvent(),","action not supported:" + action);
break;
}
numPoints=0;
if (isNeeded) {
pointerIds[numPoints]=getTouchPoints().get(i).getId();
pointerCoords[numPoints]=new MotionEvent.PointerCoords();
pointerCoords[numPoints].x=getTouchPoints().get(i).getX();
pointerCoords[numPoints].y=getTouchPoints().get(i).getY();
++numPoints;
}
}
if (numPoints == 0) {
return;
}
MotionEvent event=MotionEvent.obtain(mTouchPoints.get(0).getDownTime(),SystemClock.uptimeMillis(),action,numPoints,pointerIds,pointerCoords,mTouchMetaState,1.0f,1.0f,0,0,0,0);
mWebView.onTouchEvent(event);
}
