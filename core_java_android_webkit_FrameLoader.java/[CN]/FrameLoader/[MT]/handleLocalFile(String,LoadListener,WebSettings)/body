{
  try {
    url=new String(URLUtil.decode(url.getBytes()));
  }
 catch (  IllegalArgumentException e) {
    loadListener.error(EventHandler.ERROR_BAD_URL,loadListener.getContext().getString(com.android.internal.R.string.httpErrorBadUrl));
    return true;
  }
  if (URLUtil.isAssetUrl(url)) {
    if (loadListener.isSynchronous()) {
      new FileLoader(url,loadListener,FileLoader.TYPE_ASSET,true).load();
    }
 else {
      WebViewWorker.getHandler().obtainMessage(WebViewWorker.MSG_ADD_STREAMLOADER,new FileLoader(url,loadListener,FileLoader.TYPE_ASSET,true)).sendToTarget();
    }
    return true;
  }
 else   if (URLUtil.isResourceUrl(url)) {
    if (loadListener.isSynchronous()) {
      new FileLoader(url,loadListener,FileLoader.TYPE_RES,true).load();
    }
 else {
      WebViewWorker.getHandler().obtainMessage(WebViewWorker.MSG_ADD_STREAMLOADER,new FileLoader(url,loadListener,FileLoader.TYPE_RES,true)).sendToTarget();
    }
    return true;
  }
 else   if (URLUtil.isFileUrl(url)) {
    if (loadListener.isSynchronous()) {
      new FileLoader(url,loadListener,FileLoader.TYPE_FILE,settings.getAllowFileAccess()).load();
    }
 else {
      WebViewWorker.getHandler().obtainMessage(WebViewWorker.MSG_ADD_STREAMLOADER,new FileLoader(url,loadListener,FileLoader.TYPE_FILE,settings.getAllowFileAccess())).sendToTarget();
    }
    return true;
  }
 else   if (settings.getAllowContentAccess() && URLUtil.isContentUrl(url)) {
    if (loadListener.isSynchronous()) {
      new ContentLoader(loadListener.url(),loadListener).load();
    }
 else {
      WebViewWorker.getHandler().obtainMessage(WebViewWorker.MSG_ADD_STREAMLOADER,new ContentLoader(loadListener.url(),loadListener)).sendToTarget();
    }
    return true;
  }
 else   if (URLUtil.isDataUrl(url)) {
    new DataLoader(url,loadListener).load();
    return true;
  }
 else   if (URLUtil.isAboutUrl(url)) {
    loadListener.data(mAboutBlank.getBytes(),mAboutBlank.length());
    loadListener.endData();
    return true;
  }
  return false;
}
