{
  long identityToken=clearCallingIdentity();
  try {
    String authToken=getCachedAuthToken(account,authTokenType);
    if (authToken != null) {
      try {
        Bundle result=new Bundle();
        result.putString(Constants.AUTHTOKEN_KEY,authToken);
        result.putString(Constants.ACCOUNT_NAME_KEY,account.mName);
        result.putString(Constants.ACCOUNT_TYPE_KEY,account.mType);
        response.onResult(result);
      }
 catch (      RemoteException e) {
        if (Log.isLoggable(TAG,Log.VERBOSE)) {
          Log.v(TAG,"failure while notifying response",e);
        }
      }
      return;
    }
    new Session(response,account.mType,expectActivityLaunch){
      protected String toDebugString(      long now){
        if (loginOptions != null)         loginOptions.keySet();
        return super.toDebugString(now) + ", getAuthToken" + ", "+ account+ ", authTokenType "+ authTokenType+ ", loginOptions "+ loginOptions+ ", notifyOnAuthFailure "+ notifyOnAuthFailure;
      }
      public void run() throws RemoteException {
        mAuthenticator.getAuthToken(this,account,authTokenType,loginOptions);
      }
      public void onResult(      Bundle result){
        if (result != null) {
          String authToken=result.getString(Constants.AUTHTOKEN_KEY);
          if (authToken != null) {
            String name=result.getString(Constants.ACCOUNT_NAME_KEY);
            String type=result.getString(Constants.ACCOUNT_TYPE_KEY);
            if (TextUtils.isEmpty(type) || TextUtils.isEmpty(name)) {
              onError(Constants.ERROR_CODE_INVALID_RESPONSE,"the type and name should not be empty");
              return;
            }
            cacheAuthToken(new Account(name,type),authTokenType,authToken);
          }
          Intent intent=result.getParcelable(Constants.INTENT_KEY);
          if (intent != null && notifyOnAuthFailure) {
            doNotification(result.getString(Constants.AUTH_FAILED_MESSAGE_KEY),intent);
          }
        }
        super.onResult(result);
      }
    }
.bind();
  }
  finally {
    restoreCallingIdentity(identityToken);
  }
}
