{
  try {
    if (response.length() == 0) {
      Log.d(TAG,"Domain response is empty!");
      handleError(vs,host);
      return;
    }
    JSONObject firstRelation=(JSONObject)response.get(0);
    if (firstRelation == null) {
      Log.d(TAG,"Domain response is should have a relation!");
      handleError(vs,host);
      return;
    }
    JSONObject target=(JSONObject)firstRelation.get(JSON_KEY_TARGET);
    if (target == null) {
      Log.d(TAG,"Domain response target is empty!");
      handleError(vs,host);
      return;
    }
    String nameSpace=target.getString(JSON_KEY_NAMESPACE);
    if (TextUtils.isEmpty(nameSpace) || !nameSpace.equals(JSON_VAL_ANDROID_APP)) {
      Log.d(TAG,"Domain response target name space is not valid: " + nameSpace);
      handleError(vs,host);
      return;
    }
    String packageName=target.getString(JSON_KEY_PACKAGE_NAME);
    JSONArray certFingerprints=target.getJSONArray(JSON_KEY_CERT_FINGERPRINTS);
    if (TextUtils.isEmpty(packageName)) {
      Log.d(TAG,"Domain response has empty package name!");
      handleError(vs,host);
      return;
    }
    if (certFingerprints.length() == 0) {
      Log.d(TAG,"Domain response has empty cert signature!");
      handleError(vs,host);
      return;
    }
    if (!packageName.equalsIgnoreCase(vs.packageName)) {
      Log.d(TAG,"Domain response has package name mismatch!" + packageName + " vs "+ vs.packageName);
      handleError(vs,host);
      return;
    }
    final int count=certFingerprints.length();
    for (int i=0; i < count; i++) {
      String fingerprint=certFingerprints.getString(i);
      if (!vs.fingerprints.contains(fingerprint)) {
        Log.d(TAG,"Domain response has cert fingerprint mismatch! " + "The domain fingerprint '" + fingerprint + "' is not from the App");
        handleError(vs,host);
        return;
      }
    }
    sendSuccessResponseIfNeeded(vs);
  }
 catch (  JSONException e) {
    Log.d(TAG,"Domain response is not well formed",e);
    handleError(vs,host);
  }
}
