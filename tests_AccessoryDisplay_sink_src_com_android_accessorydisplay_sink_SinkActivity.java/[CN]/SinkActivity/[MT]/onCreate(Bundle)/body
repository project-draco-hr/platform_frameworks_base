{
  super.onCreate(savedInstanceState);
  mUsbManager=(UsbManager)getSystemService(Context.USB_SERVICE);
  setContentView(R.layout.sink_activity);
  mLogTextView=(TextView)findViewById(R.id.logTextView);
  mLogTextView.setMovementMethod(ScrollingMovementMethod.getInstance());
  mLogger=new TextLogger();
  mFpsTextView=(TextView)findViewById(R.id.fpsTextView);
  mSurfaceView=(SurfaceView)findViewById(R.id.surfaceView);
  mSurfaceView.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      sendHidTouch(event);
      return true;
    }
  }
);
  mLogger.log("Waiting for accessory display source to be attached to USB...");
  IntentFilter filter=new IntentFilter();
  filter.addAction(UsbManager.ACTION_USB_DEVICE_ATTACHED);
  filter.addAction(UsbManager.ACTION_USB_DEVICE_DETACHED);
  filter.addAction(ACTION_USB_DEVICE_PERMISSION);
  mReceiver=new DeviceReceiver();
  registerReceiver(mReceiver,filter);
  Intent intent=getIntent();
  if (intent.getAction().equals(UsbManager.ACTION_USB_DEVICE_ATTACHED)) {
    UsbDevice device=intent.<UsbDevice>getParcelableExtra(UsbManager.EXTRA_DEVICE);
    if (device != null) {
      onDeviceAttached(device);
    }
  }
 else {
    Map<String,UsbDevice> devices=mUsbManager.getDeviceList();
    if (devices != null) {
      for (      UsbDevice device : devices.values()) {
        onDeviceAttached(device);
      }
    }
  }
}
