{
  if (mConnected) {
    disconnect();
  }
  if (!mUsbManager.hasPermission(device)) {
    mLogger.log("Prompting the user for access to the device.");
    Intent intent=new Intent(ACTION_USB_DEVICE_PERMISSION);
    intent.setPackage(getPackageName());
    PendingIntent pendingIntent=PendingIntent.getBroadcast(this,0,intent,PendingIntent.FLAG_ONE_SHOT);
    mUsbManager.requestPermission(device,pendingIntent);
    return;
  }
  UsbDeviceConnection conn=mUsbManager.openDevice(device);
  if (conn == null) {
    mLogger.logError("Could not obtain device connection.");
    return;
  }
  UsbInterface iface=device.getInterface(0);
  UsbEndpoint controlEndpoint=iface.getEndpoint(0);
  if (!conn.claimInterface(iface,true)) {
    mLogger.logError("Could not claim interface.");
    return;
  }
  try {
    if (isAccessory(device)) {
      mLogger.log("Connecting to accessory...");
      int protocolVersion=getProtocol(conn);
      if (protocolVersion < 1) {
        mLogger.logError("Device does not support accessory protocol.");
        return;
      }
      mLogger.log("Protocol version: " + protocolVersion);
      UsbEndpoint bulkIn=null;
      UsbEndpoint bulkOut=null;
      for (int i=0; i < iface.getEndpointCount(); i++) {
        UsbEndpoint ep=iface.getEndpoint(i);
        if (ep.getDirection() == UsbConstants.USB_DIR_IN) {
          if (bulkIn == null) {
            mLogger.log(String.format("Bulk IN endpoint: %d",i));
            bulkIn=ep;
          }
        }
 else {
          if (bulkOut == null) {
            mLogger.log(String.format("Bulk OUT endpoint: %d",i));
            bulkOut=ep;
          }
        }
      }
      if (bulkIn == null || bulkOut == null) {
        mLogger.logError("Unable to find bulk endpoints");
        return;
      }
      mLogger.log("Connected");
      mConnected=true;
      mDevice=device;
      mProtocolVersion=protocolVersion;
      mAccessoryInterface=iface;
      mAccessoryConnection=conn;
      mControlEndpoint=controlEndpoint;
      mTransport=new UsbAccessoryBulkTransport(mLogger,conn,bulkIn,bulkOut);
      if (mProtocolVersion >= 2) {
        registerHid();
      }
      startServices();
      mTransport.startReading();
      return;
    }
    mLogger.log("Attempting to switch device to accessory mode...");
    int protocolVersion=getProtocol(conn);
    if (protocolVersion < 1) {
      mLogger.logError("Device does not support accessory protocol.");
      return;
    }
    mLogger.log("Protocol version: " + protocolVersion);
    sendString(conn,UsbAccessoryConstants.ACCESSORY_STRING_MANUFACTURER,MANUFACTURER);
    sendString(conn,UsbAccessoryConstants.ACCESSORY_STRING_MODEL,MODEL);
    sendString(conn,UsbAccessoryConstants.ACCESSORY_STRING_DESCRIPTION,DESCRIPTION);
    sendString(conn,UsbAccessoryConstants.ACCESSORY_STRING_VERSION,VERSION);
    sendString(conn,UsbAccessoryConstants.ACCESSORY_STRING_URI,URI);
    sendString(conn,UsbAccessoryConstants.ACCESSORY_STRING_SERIAL,SERIAL);
    mLogger.log("Sending accessory start request.");
    int len=conn.controlTransfer(UsbConstants.USB_DIR_OUT | UsbConstants.USB_TYPE_VENDOR,UsbAccessoryConstants.ACCESSORY_START,0,0,null,0,10000);
    if (len != 0) {
      mLogger.logError("Device refused to switch to accessory mode.");
    }
 else {
      mLogger.log("Waiting for device to re-enumerate...");
    }
  }
  finally {
    if (!mConnected) {
      conn.releaseInterface(iface);
    }
  }
}
