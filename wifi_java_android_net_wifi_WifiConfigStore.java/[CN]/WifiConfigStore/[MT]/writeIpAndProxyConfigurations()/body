{
  DataOutputStream out=null;
  try {
    out=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(ipConfigFile)));
    out.writeInt(IPCONFIG_FILE_VERSION);
synchronized (sConfiguredNetworks) {
      for (      WifiConfiguration config : sConfiguredNetworks.values()) {
        boolean writeToFile=false;
        try {
          LinkProperties linkProperties=config.linkProperties;
switch (config.ipAssignment) {
case STATIC:
            out.writeUTF(IP_ASSIGNMENT_KEY);
          out.writeUTF(config.ipAssignment.toString());
        for (        LinkAddress linkAddr : linkProperties.getLinkAddresses()) {
          out.writeUTF(LINK_ADDRESS_KEY);
          out.writeUTF(linkAddr.getAddress().getHostAddress());
          out.writeInt(linkAddr.getNetworkPrefixLength());
        }
      InetAddress gateway=linkProperties.getGateway();
    if (gateway != null) {
      out.writeUTF(GATEWAY_KEY);
      out.writeUTF(gateway.getHostAddress());
    }
  for (  InetAddress inetAddr : linkProperties.getDnses()) {
    out.writeUTF(DNS_KEY);
    out.writeUTF(inetAddr.getHostAddress());
  }
writeToFile=true;
break;
case DHCP:
out.writeUTF(IP_ASSIGNMENT_KEY);
out.writeUTF(config.ipAssignment.toString());
writeToFile=true;
break;
case UNASSIGNED:
break;
default :
Log.e(TAG,"Ignore invalid ip assignment while writing");
break;
}
switch (config.proxySettings) {
case STATIC:
ProxyProperties proxyProperties=linkProperties.getHttpProxy();
String exclusionList=proxyProperties.getExclusionList();
out.writeUTF(PROXY_SETTINGS_KEY);
out.writeUTF(config.proxySettings.toString());
out.writeUTF(PROXY_HOST_KEY);
out.writeUTF(proxyProperties.getSocketAddress().getHostName());
out.writeUTF(PROXY_PORT_KEY);
out.writeInt(proxyProperties.getSocketAddress().getPort());
out.writeUTF(EXCLUSION_LIST_KEY);
out.writeUTF(exclusionList);
writeToFile=true;
break;
case NONE:
out.writeUTF(PROXY_SETTINGS_KEY);
out.writeUTF(config.proxySettings.toString());
writeToFile=true;
break;
case UNASSIGNED:
break;
default :
Log.e(TAG,"Ignore invalid proxy settings while writing");
break;
}
if (writeToFile) {
out.writeUTF(ID_KEY);
out.writeInt(configKey(config));
}
}
 catch (NullPointerException e) {
Log.e(TAG,"Failure in writing " + config.linkProperties + e);
}
out.writeUTF(EOS);
}
}
}
 catch (IOException e) {
Log.e(TAG,"Error writing data file");
}
 finally {
if (out != null) {
try {
out.close();
}
 catch (Exception e) {
}
}
}
}
