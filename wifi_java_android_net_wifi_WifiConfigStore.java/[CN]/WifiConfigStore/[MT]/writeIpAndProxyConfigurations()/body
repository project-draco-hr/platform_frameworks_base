{
  DataOutputStream out=null;
  try {
    out=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(ipConfigFile)));
    out.writeInt(IPCONFIG_FILE_VERSION);
synchronized (sConfiguredNetworks) {
      for (      WifiConfiguration config : sConfiguredNetworks.values()) {
        boolean writeToFile=false;
switch (config.ipAssignment) {
case STATIC:
          out.writeUTF("ipAssignment");
        out.writeUTF(config.ipAssignment.toString());
      out.writeUTF("ipAddress");
    out.writeInt(config.ipConfig.ipAddress);
  out.writeUTF("gateway");
out.writeInt(config.ipConfig.gateway);
out.writeUTF("netmask");
out.writeInt(config.ipConfig.netmask);
out.writeUTF("dns1");
out.writeInt(config.ipConfig.dns1);
out.writeUTF("dns2");
out.writeInt(config.ipConfig.dns2);
writeToFile=true;
break;
case DHCP:
out.writeUTF("ipAssignment");
out.writeUTF(config.ipAssignment.toString());
writeToFile=true;
break;
case UNASSIGNED:
break;
default :
Log.e(TAG,"Ignore invalid ip assignment while writing");
break;
}
switch (config.proxySettings) {
case STATIC:
out.writeUTF("proxySettings");
out.writeUTF(config.proxySettings.toString());
InetSocketAddress proxy=config.proxyProperties.getSocketAddress();
if (proxy != null) {
out.writeUTF("proxyHost");
out.writeUTF(proxy.getHostName());
out.writeUTF("proxyPort");
out.writeInt(proxy.getPort());
String exclusionList=config.proxyProperties.getExclusionList();
if (exclusionList != null && exclusionList.length() > 0) {
out.writeUTF("exclusionList");
out.writeUTF(exclusionList);
}
}
writeToFile=true;
break;
case NONE:
out.writeUTF("proxySettings");
out.writeUTF(config.proxySettings.toString());
writeToFile=true;
break;
case UNASSIGNED:
break;
default :
Log.e(TAG,"Ignore invalid proxy settings while writing");
break;
}
if (writeToFile) {
out.writeUTF("id");
out.writeInt(configKey(config));
out.writeUTF("EOS");
}
}
}
}
 catch (IOException e) {
Log.e(TAG,"Error writing data file");
}
 finally {
if (out != null) {
try {
out.close();
}
 catch (Exception e) {
}
}
}
}
