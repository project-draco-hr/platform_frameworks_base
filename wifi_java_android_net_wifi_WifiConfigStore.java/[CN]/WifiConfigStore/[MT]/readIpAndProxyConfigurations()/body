{
  DataInputStream in=null;
  try {
    in=new DataInputStream(new BufferedInputStream(new FileInputStream(ipConfigFile)));
    if (in.readInt() != IPCONFIG_FILE_VERSION) {
      Log.e(TAG,"Bad version on IP configuration file, ignore read");
      return;
    }
    while (true) {
      int id=-1;
      IpAssignment ipAssignment=IpAssignment.UNASSIGNED;
      DhcpInfo ipConfig=new DhcpInfo();
      ProxySettings proxySettings=ProxySettings.UNASSIGNED;
      String proxyHost=null;
      int proxyPort=-1;
      String exclusionList=null;
      String key;
      do {
        key=in.readUTF();
        if (key.equals("id")) {
          id=in.readInt();
        }
 else         if (key.equals("ipAssignment")) {
          ipAssignment=IpAssignment.valueOf(in.readUTF());
        }
 else         if (key.equals("ipAddress")) {
          ipConfig.ipAddress=in.readInt();
        }
 else         if (key.equals("gateway")) {
          ipConfig.gateway=in.readInt();
        }
 else         if (key.equals("netmask")) {
          ipConfig.netmask=in.readInt();
        }
 else         if (key.equals("dns1")) {
          ipConfig.dns1=in.readInt();
        }
 else         if (key.equals("dns2")) {
          ipConfig.dns2=in.readInt();
        }
 else         if (key.equals("proxySettings")) {
          proxySettings=ProxySettings.valueOf(in.readUTF());
        }
 else         if (key.equals("proxyHost")) {
          proxyHost=in.readUTF();
        }
 else         if (key.equals("proxyPort")) {
          proxyPort=in.readInt();
        }
 else         if (key.equals("exclusionList")) {
          exclusionList=in.readUTF();
        }
 else         if (key.equals("EOS")) {
          break;
        }
 else {
          Log.e(TAG,"Ignore unknown key " + key + "while reading");
        }
      }
 while (true);
      if (id != -1) {
synchronized (sConfiguredNetworks) {
          WifiConfiguration config=sConfiguredNetworks.get(sNetworkIds.get(id));
          if (config == null) {
            Log.e(TAG,"configuration found for missing network, ignored");
          }
 else {
switch (ipAssignment) {
case STATIC:
              config.ipAssignment=ipAssignment;
            config.ipConfig=ipConfig;
          break;
case DHCP:
        config.ipAssignment=ipAssignment;
      break;
case UNASSIGNED:
    break;
default :
  Log.e(TAG,"Ignore invalid ip assignment while reading");
break;
}
switch (proxySettings) {
case STATIC:
config.proxySettings=proxySettings;
ProxyProperties proxyProperties=new ProxyProperties();
proxyProperties.setSocketAddress(new InetSocketAddress(proxyHost,proxyPort));
proxyProperties.setExclusionList(exclusionList);
config.proxyProperties=proxyProperties;
break;
case NONE:
config.proxySettings=proxySettings;
break;
case UNASSIGNED:
break;
default :
Log.e(TAG,"Ignore invalid proxy settings while reading");
break;
}
}
}
}
 else {
Log.e(TAG,"Missing id while parsing configuration");
}
}
}
 catch (IOException e) {
Log.e(TAG,"Error parsing configuration");
}
 finally {
if (in != null) {
try {
in.close();
}
 catch (Exception e) {
}
}
}
}
