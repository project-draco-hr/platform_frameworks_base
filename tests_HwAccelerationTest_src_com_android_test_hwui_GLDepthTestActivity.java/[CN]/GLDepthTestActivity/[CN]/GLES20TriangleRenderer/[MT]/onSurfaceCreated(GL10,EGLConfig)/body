{
  mProgram=createProgram(mVertexShader,mFragmentShader);
  if (mProgram == 0) {
    return;
  }
  maPositionHandle=GLES20.glGetAttribLocation(mProgram,"aPosition");
  checkGlError("glGetAttribLocation aPosition");
  if (maPositionHandle == -1) {
    throw new RuntimeException("Could not get attrib location for aPosition");
  }
  maTextureHandle=GLES20.glGetAttribLocation(mProgram,"aTextureCoord");
  checkGlError("glGetAttribLocation aTextureCoord");
  if (maTextureHandle == -1) {
    throw new RuntimeException("Could not get attrib location for aTextureCoord");
  }
  muMVPMatrixHandle=GLES20.glGetUniformLocation(mProgram,"uMVPMatrix");
  checkGlError("glGetUniformLocation uMVPMatrix");
  if (muMVPMatrixHandle == -1) {
    throw new RuntimeException("Could not get attrib location for uMVPMatrix");
  }
  int[] textures=new int[1];
  GLES20.glGenTextures(1,textures,0);
  mTextureID=textures[0];
  GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,mTextureID);
  GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MIN_FILTER,GLES20.GL_NEAREST);
  GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MAG_FILTER,GLES20.GL_LINEAR);
  GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_WRAP_S,GLES20.GL_REPEAT);
  GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_WRAP_T,GLES20.GL_REPEAT);
  InputStream is=mContext.getResources().openRawResource(R.drawable.robot);
  Bitmap bitmap;
  try {
    bitmap=BitmapFactory.decodeStream(is);
  }
  finally {
    try {
      is.close();
    }
 catch (    IOException e) {
    }
  }
  GLUtils.texImage2D(GLES20.GL_TEXTURE_2D,0,bitmap,0);
  bitmap.recycle();
  Matrix.setLookAtM(mVMatrix,0,0,0,-5,0f,0f,0f,0f,1.0f,0.0f);
}
