{
  for (int j=0; j < FRAME_REPEAT_TIMES; j++) {
    GLES20.glClearColor(0.0f,0.0f,1.0f,1.0f);
    if (mDepthTestEnabled) {
      GLES20.glClear(GLES20.GL_DEPTH_BUFFER_BIT | GLES20.GL_COLOR_BUFFER_BIT);
    }
 else {
      GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);
    }
    GLES20.glUseProgram(mProgram);
    if (mDepthTestEnabled) {
      GLES20.glEnable(GLES20.GL_DEPTH_TEST);
    }
 else {
      GLES20.glDisable(GLES20.GL_DEPTH_TEST);
    }
    checkGlError("glUseProgram");
    GLES20.glActiveTexture(GLES20.GL_TEXTURE0);
    GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,mTextureID);
    mTriangleVertices.position(TRIANGLE_VERTICES_DATA_POS_OFFSET);
    GLES20.glVertexAttribPointer(maPositionHandle,3,GLES20.GL_FLOAT,false,TRIANGLE_VERTICES_DATA_STRIDE_BYTES,mTriangleVertices);
    checkGlError("glVertexAttribPointer maPosition");
    mTriangleVertices.position(TRIANGLE_VERTICES_DATA_UV_OFFSET);
    GLES20.glEnableVertexAttribArray(maPositionHandle);
    checkGlError("glEnableVertexAttribArray maPositionHandle");
    GLES20.glVertexAttribPointer(maTextureHandle,2,GLES20.GL_FLOAT,false,TRIANGLE_VERTICES_DATA_STRIDE_BYTES,mTriangleVertices);
    checkGlError("glVertexAttribPointer maTextureHandle");
    GLES20.glEnableVertexAttribArray(maTextureHandle);
    checkGlError("glEnableVertexAttribArray maTextureHandle");
    for (int i=0; i < REPEAT_RECTANGLES; i++) {
      float step=((float)i) / REPEAT_RECTANGLES;
      Matrix.setIdentityM(mMMatrix,0);
      Matrix.translateM(mMMatrix,0,0,step,step / 2);
      Matrix.scaleM(mMMatrix,0,2.0f,1.0f,1.0f);
      Matrix.multiplyMM(mMVPMatrix,0,mVMatrix,0,mMMatrix,0);
      Matrix.multiplyMM(mMVPMatrix,0,mProjMatrix,0,mMVPMatrix,0);
      GLES20.glUniformMatrix4fv(muMVPMatrixHandle,1,false,mMVPMatrix,0);
      GLES20.glUniform4f(muOverlayHandle,step,step,step,step);
      GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP,0,4);
      checkGlError("glDrawArrays");
    }
  }
}
