{
  if (event.isSystem()) {
    return super.dispatchKeyEvent(event);
  }
  boolean down=event.getAction() != KeyEvent.ACTION_UP;
  int keyCode=event.getKeyCode();
  Spannable text=(Spannable)getText();
  int oldLength=text.length();
  if (KeyEvent.KEYCODE_DEL == keyCode && 0 == oldLength) {
    sendDomEvent(event);
    return true;
  }
  if ((mSingle && KeyEvent.KEYCODE_ENTER == keyCode) || KeyEvent.KEYCODE_DPAD_CENTER == keyCode) {
    if (isPopupShowing()) {
      super.dispatchKeyEvent(event);
      return true;
    }
    if (down) {
      if (event.getRepeatCount() == 0) {
        mGotEnterDown=true;
        mDownTime=event.getEventTime();
      }
 else       if (mGotEnterDown && event.getEventTime() - mDownTime > ViewConfiguration.getLongPressTimeout()) {
        performLongClick();
        mGotEnterDown=false;
      }
    }
 else     if (mGotEnterDown) {
      mGotEnterDown=false;
      if (KeyEvent.KEYCODE_DPAD_CENTER == keyCode) {
        mWebView.shortPressOnTextField();
        return true;
      }
      sendDomEvent(new KeyEvent(KeyEvent.ACTION_DOWN,keyCode));
      sendDomEvent(event);
    }
    return true;
  }
  if (getLayout() == null) {
    measure(mWidthSpec,mHeightSpec);
  }
  int oldStart=Selection.getSelectionStart(text);
  int oldEnd=Selection.getSelectionEnd(text);
  boolean maxedOut=mMaxLength != -1 && oldLength == mMaxLength;
  String oldText;
  if (maxedOut && oldEnd != oldStart) {
    oldText=text.toString();
  }
 else {
    oldText="";
  }
  if (super.dispatchKeyEvent(event)) {
    boolean isArrowKey;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_LEFT:
case KeyEvent.KEYCODE_DPAD_RIGHT:
case KeyEvent.KEYCODE_DPAD_UP:
case KeyEvent.KEYCODE_DPAD_DOWN:
      isArrowKey=true;
    break;
case KeyEvent.KEYCODE_DPAD_CENTER:
case KeyEvent.KEYCODE_ENTER:
  mGotEnterDown=true;
default :
isArrowKey=false;
break;
}
if (maxedOut && !isArrowKey && keyCode != KeyEvent.KEYCODE_DEL) {
if (oldEnd == oldStart) {
mScrollToAccommodateCursor=true;
return true;
}
 else if (!oldText.equals(getText().toString())) {
Spannable span=(Spannable)getText();
int newStart=Selection.getSelectionStart(span);
int newEnd=Selection.getSelectionEnd(span);
mWebView.replaceTextfieldText(0,oldLength,span.toString(),newStart,newEnd);
mScrollToAccommodateCursor=true;
return true;
}
}
if (isArrowKey) {
sendDomEvent(event);
}
mScrollToAccommodateCursor=true;
return true;
}
Selection.setSelection(text,oldStart,oldEnd);
if (mGotEnterDown && !down) {
return true;
}
mWebView.resetTrackballTime();
return down ? mWebView.onKeyDown(keyCode,event) : mWebView.onKeyUp(keyCode,event);
}
