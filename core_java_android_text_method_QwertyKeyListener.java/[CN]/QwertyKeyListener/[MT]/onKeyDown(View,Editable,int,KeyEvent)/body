{
  int selStart, selEnd;
  int pref=0;
  if (view != null) {
    pref=TextKeyListener.getInstance().getPrefs(view.getContext());
  }
{
    int a=Selection.getSelectionStart(content);
    int b=Selection.getSelectionEnd(content);
    selStart=Math.min(a,b);
    selEnd=Math.max(a,b);
    if (selStart < 0 || selEnd < 0) {
      selStart=selEnd=0;
      Selection.setSelection(content,0,0);
    }
  }
  int activeStart=content.getSpanStart(TextKeyListener.ACTIVE);
  int activeEnd=content.getSpanEnd(TextKeyListener.ACTIVE);
  int i=event.getUnicodeChar(getMetaState(content,event));
  if (!mFullKeyboard) {
    int count=event.getRepeatCount();
    if (count > 0 && selStart == selEnd && selStart > 0) {
      char c=content.charAt(selStart - 1);
      if ((c == i || c == Character.toUpperCase(i)) && view != null) {
        if (showCharacterPicker(view,content,c,false,count)) {
          resetMetaState(content);
          return true;
        }
      }
    }
  }
  if (i == KeyCharacterMap.PICKER_DIALOG_INPUT) {
    if (view != null) {
      showCharacterPicker(view,content,KeyCharacterMap.PICKER_DIALOG_INPUT,true,1);
    }
    resetMetaState(content);
    return true;
  }
  if (i == KeyCharacterMap.HEX_INPUT) {
    int start;
    if (selStart == selEnd) {
      start=selEnd;
      while (start > 0 && selEnd - start < 4 && Character.digit(content.charAt(start - 1),16) >= 0) {
        start--;
      }
    }
 else {
      start=selStart;
    }
    int ch=-1;
    try {
      String hex=TextUtils.substring(content,start,selEnd);
      ch=Integer.parseInt(hex,16);
    }
 catch (    NumberFormatException nfe) {
    }
    if (ch >= 0) {
      selStart=start;
      Selection.setSelection(content,selStart,selEnd);
      i=ch;
    }
 else {
      i=0;
    }
  }
  if (i != 0) {
    boolean dead=false;
    if ((i & KeyCharacterMap.COMBINING_ACCENT) != 0) {
      dead=true;
      i=i & KeyCharacterMap.COMBINING_ACCENT_MASK;
    }
    if (activeStart == selStart && activeEnd == selEnd) {
      boolean replace=false;
      if (selEnd - selStart - 1 == 0) {
        char accent=content.charAt(selStart);
        int composed=event.getDeadChar(accent,i);
        if (composed != 0) {
          i=composed;
          replace=true;
          dead=false;
        }
      }
      if (!replace) {
        Selection.setSelection(content,selEnd);
        content.removeSpan(TextKeyListener.ACTIVE);
        selStart=selEnd;
      }
    }
    if ((pref & TextKeyListener.AUTO_CAP) != 0 && Character.isLowerCase(i) && TextKeyListener.shouldCap(mAutoCap,content,selStart)) {
      int where=content.getSpanEnd(TextKeyListener.CAPPED);
      int flags=content.getSpanFlags(TextKeyListener.CAPPED);
      if (where == selStart && (((flags >> 16) & 0xFFFF) == i)) {
        content.removeSpan(TextKeyListener.CAPPED);
      }
 else {
        flags=i << 16;
        i=Character.toUpperCase(i);
        if (selStart == 0)         content.setSpan(TextKeyListener.CAPPED,0,0,Spannable.SPAN_MARK_MARK | flags);
 else         content.setSpan(TextKeyListener.CAPPED,selStart - 1,selStart,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE | flags);
      }
    }
    if (selStart != selEnd) {
      Selection.setSelection(content,selEnd);
    }
    content.setSpan(OLD_SEL_START,selStart,selStart,Spannable.SPAN_MARK_MARK);
    content.replace(selStart,selEnd,String.valueOf((char)i));
    int oldStart=content.getSpanStart(OLD_SEL_START);
    selEnd=Selection.getSelectionEnd(content);
    if (oldStart < selEnd) {
      content.setSpan(TextKeyListener.LAST_TYPED,oldStart,selEnd,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
      if (dead) {
        Selection.setSelection(content,oldStart,selEnd);
        content.setSpan(TextKeyListener.ACTIVE,oldStart,selEnd,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
      }
    }
    adjustMetaAfterKeypress(content);
    if ((pref & TextKeyListener.AUTO_TEXT) != 0 && mAutoText && (i == ' ' || i == '\t' || i == '\n' || i == ',' || i == '.' || i == '!' || i == '?' || i == '"' || Character.getType(i) == Character.END_PUNCTUATION) && content.getSpanEnd(TextKeyListener.INHIBIT_REPLACEMENT) != oldStart) {
      int x;
      for (x=oldStart; x > 0; x--) {
        char c=content.charAt(x - 1);
        if (c != '\'' && !Character.isLetter(c)) {
          break;
        }
      }
      String rep=getReplacement(content,x,oldStart,view);
      if (rep != null) {
        Replaced[] repl=content.getSpans(0,content.length(),Replaced.class);
        for (int a=0; a < repl.length; a++)         content.removeSpan(repl[a]);
        char[] orig=new char[oldStart - x];
        TextUtils.getChars(content,x,oldStart,orig,0);
        content.setSpan(new Replaced(orig),x,oldStart,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
        content.replace(x,oldStart,rep);
      }
    }
    if ((pref & TextKeyListener.AUTO_PERIOD) != 0 && mAutoText) {
      selEnd=Selection.getSelectionEnd(content);
      if (selEnd - 3 >= 0) {
        if (content.charAt(selEnd - 1) == ' ' && content.charAt(selEnd - 2) == ' ') {
          char c=content.charAt(selEnd - 3);
          for (int j=selEnd - 3; j > 0; j--) {
            if (c == '"' || Character.getType(c) == Character.END_PUNCTUATION) {
              c=content.charAt(j - 1);
            }
 else {
              break;
            }
          }
          if (Character.isLetter(c) || Character.isDigit(c)) {
            content.replace(selEnd - 2,selEnd - 1,".");
          }
        }
      }
    }
    return true;
  }
 else   if (keyCode == KeyEvent.KEYCODE_DEL && (event.hasNoModifiers() || event.hasModifiers(KeyEvent.META_ALT_ON)) && selStart == selEnd) {
    int consider=1;
    if (content.getSpanEnd(TextKeyListener.LAST_TYPED) == selStart) {
      if (content.charAt(selStart - 1) != '\n')       consider=2;
    }
    Replaced[] repl=content.getSpans(selStart - consider,selStart,Replaced.class);
    if (repl.length > 0) {
      int st=content.getSpanStart(repl[0]);
      int en=content.getSpanEnd(repl[0]);
      String old=new String(repl[0].mText);
      content.removeSpan(repl[0]);
      if (selStart >= en) {
        content.setSpan(TextKeyListener.INHIBIT_REPLACEMENT,en,en,Spannable.SPAN_POINT_POINT);
        content.replace(st,en,old);
        en=content.getSpanStart(TextKeyListener.INHIBIT_REPLACEMENT);
        if (en - 1 >= 0) {
          content.setSpan(TextKeyListener.INHIBIT_REPLACEMENT,en - 1,en,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
        }
 else {
          content.removeSpan(TextKeyListener.INHIBIT_REPLACEMENT);
        }
        adjustMetaAfterKeypress(content);
      }
 else {
        adjustMetaAfterKeypress(content);
        return super.onKeyDown(view,content,keyCode,event);
      }
      return true;
    }
  }
  return super.onKeyDown(view,content,keyCode,event);
}
