{
  assertEquals("YQ==\n",encodeToString("a",0));
  assertEquals("YQ==",encodeToString("a",Base64.NO_WRAP));
  assertEquals("YQ\n",encodeToString("a",Base64.NO_PADDING));
  assertEquals("YQ",encodeToString("a",Base64.NO_PADDING | Base64.NO_WRAP));
  assertEquals("YQ==\r\n",encodeToString("a",Base64.CRLF));
  assertEquals("YQ\r\n",encodeToString("a",Base64.CRLF | Base64.NO_PADDING));
  assertEquals("YWI=\n",encodeToString("ab",0));
  assertEquals("YWI=",encodeToString("ab",Base64.NO_WRAP));
  assertEquals("YWI\n",encodeToString("ab",Base64.NO_PADDING));
  assertEquals("YWI",encodeToString("ab",Base64.NO_PADDING | Base64.NO_WRAP));
  assertEquals("YWI=\r\n",encodeToString("ab",Base64.CRLF));
  assertEquals("YWI\r\n",encodeToString("ab",Base64.CRLF | Base64.NO_PADDING));
  assertEquals("YWJj\n",encodeToString("abc",0));
  assertEquals("YWJj",encodeToString("abc",Base64.NO_WRAP));
  assertEquals("YWJj\n",encodeToString("abc",Base64.NO_PADDING));
  assertEquals("YWJj",encodeToString("abc",Base64.NO_PADDING | Base64.NO_WRAP));
  assertEquals("YWJj\r\n",encodeToString("abc",Base64.CRLF));
  assertEquals("YWJj\r\n",encodeToString("abc",Base64.CRLF | Base64.NO_PADDING));
  assertEquals("YWJjZA==\n",encodeToString("abcd",0));
  assertEquals("YWJjZA==",encodeToString("abcd",Base64.NO_WRAP));
  assertEquals("YWJjZA\n",encodeToString("abcd",Base64.NO_PADDING));
  assertEquals("YWJjZA",encodeToString("abcd",Base64.NO_PADDING | Base64.NO_WRAP));
  assertEquals("YWJjZA==\r\n",encodeToString("abcd",Base64.CRLF));
  assertEquals("YWJjZA\r\n",encodeToString("abcd",Base64.CRLF | Base64.NO_PADDING));
}
