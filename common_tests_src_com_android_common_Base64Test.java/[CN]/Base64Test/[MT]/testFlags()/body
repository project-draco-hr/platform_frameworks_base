{
  assertEquals("YQ==\n",encodeString("a",0));
  assertEquals("YQ==",encodeString("a",Base64.NO_WRAP));
  assertEquals("YQ\n",encodeString("a",Base64.NO_PADDING));
  assertEquals("YQ",encodeString("a",Base64.NO_PADDING | Base64.NO_WRAP));
  assertEquals("YQ==\r\n",encodeString("a",Base64.CRLF));
  assertEquals("YQ\r\n",encodeString("a",Base64.CRLF | Base64.NO_PADDING));
  assertEquals("YWI=\n",encodeString("ab",0));
  assertEquals("YWI=",encodeString("ab",Base64.NO_WRAP));
  assertEquals("YWI\n",encodeString("ab",Base64.NO_PADDING));
  assertEquals("YWI",encodeString("ab",Base64.NO_PADDING | Base64.NO_WRAP));
  assertEquals("YWI=\r\n",encodeString("ab",Base64.CRLF));
  assertEquals("YWI\r\n",encodeString("ab",Base64.CRLF | Base64.NO_PADDING));
  assertEquals("YWJj\n",encodeString("abc",0));
  assertEquals("YWJj",encodeString("abc",Base64.NO_WRAP));
  assertEquals("YWJj\n",encodeString("abc",Base64.NO_PADDING));
  assertEquals("YWJj",encodeString("abc",Base64.NO_PADDING | Base64.NO_WRAP));
  assertEquals("YWJj\r\n",encodeString("abc",Base64.CRLF));
  assertEquals("YWJj\r\n",encodeString("abc",Base64.CRLF | Base64.NO_PADDING));
  assertEquals("YWJjZA==\n",encodeString("abcd",0));
  assertEquals("YWJjZA==",encodeString("abcd",Base64.NO_WRAP));
  assertEquals("YWJjZA\n",encodeString("abcd",Base64.NO_PADDING));
  assertEquals("YWJjZA",encodeString("abcd",Base64.NO_PADDING | Base64.NO_WRAP));
  assertEquals("YWJjZA==\r\n",encodeString("abcd",Base64.CRLF));
  assertEquals("YWJjZA\r\n",encodeString("abcd",Base64.CRLF | Base64.NO_PADDING));
}
