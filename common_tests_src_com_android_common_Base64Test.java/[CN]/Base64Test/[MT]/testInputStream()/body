{
  int[] flagses={Base64.DEFAULT,Base64.NO_PADDING,Base64.NO_WRAP,Base64.NO_PADDING | Base64.NO_WRAP,Base64.CRLF,Base64.WEB_SAFE};
  int[] writeLengths={-10,-5,-1,0,1,1,2,2,3,10,100};
  Random rng=new Random(32176L);
  byte[] plain=(lipsum + lipsum + lipsum+ lipsum+ lipsum).getBytes();
  for (  int flags : flagses) {
    byte[] encoded=Base64.encode(plain,flags);
    ByteArrayInputStream bais;
    Base64InputStream b64is;
    byte[] actual=new byte[plain.length * 2];
    int ap;
    int b;
    bais=new ByteArrayInputStream(encoded);
    b64is=new Base64InputStream(bais,flags);
    ap=0;
    while ((b=b64is.read(actual,ap,actual.length - ap)) != -1) {
      ap+=b;
    }
    assertEquals(actual,ap,plain);
    bais=new ByteArrayInputStream(encoded);
    b64is=new Base64InputStream(bais,flags);
    ap=0;
    while ((b=b64is.read()) != -1) {
      actual[ap++]=(byte)b;
    }
    assertEquals(actual,ap,plain);
    bais=new ByteArrayInputStream(encoded);
    b64is=new Base64InputStream(bais,flags);
    ap=0;
    readloop:     while (true) {
      int l=writeLengths[rng.nextInt(writeLengths.length)];
      if (l >= 0) {
        b=b64is.read(actual,ap,l);
        if (b == -1)         break readloop;
        ap+=b;
      }
 else {
        for (int i=0; i < -l; ++i) {
          if ((b=b64is.read()) == -1)           break readloop;
          actual[ap++]=(byte)b;
        }
      }
    }
    assertEquals(actual,ap,plain);
    bais=new ByteArrayInputStream(plain);
    b64is=new Base64InputStream(bais,flags,true);
    ap=0;
    while ((b=b64is.read(actual,ap,actual.length - ap)) != -1) {
      ap+=b;
    }
    assertEquals(actual,ap,encoded);
    bais=new ByteArrayInputStream(plain);
    b64is=new Base64InputStream(bais,flags,true);
    ap=0;
    while ((b=b64is.read()) != -1) {
      actual[ap++]=(byte)b;
    }
    assertEquals(actual,ap,encoded);
    bais=new ByteArrayInputStream(plain);
    b64is=new Base64InputStream(bais,flags,true);
    ap=0;
    readloop:     while (true) {
      int l=writeLengths[rng.nextInt(writeLengths.length)];
      if (l >= 0) {
        b=b64is.read(actual,ap,l);
        if (b == -1)         break readloop;
        ap+=b;
      }
 else {
        for (int i=0; i < -l; ++i) {
          if ((b=b64is.read()) == -1)           break readloop;
          actual[ap++]=(byte)b;
        }
      }
    }
    assertEquals(actual,ap,encoded);
  }
}
