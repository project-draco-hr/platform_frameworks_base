{
  waitForActivityResumed();
  AllocationScore score=new AllocationScore();
  for (int i=0; i < MEASURE_ALLOCATION_CYCLES + WARM_UP_ALLOCATION_CYCLES; ++i) {
    long time1=System.currentTimeMillis();
    configureSurfacesAndWait(MIN_NUMBER_OF_SURFACES,pixelFormat,false);
    acquireSurfacesCanvas();
    long time2=System.currentTimeMillis();
    releaseSurfacesCanvas();
    configureSurfacesAndWait(0,pixelFormat,false);
    try {
      Thread.sleep(500);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
    if (i < WARM_UP_ALLOCATION_CYCLES) {
      continue;
    }
    double speed=MIN_NUMBER_OF_SURFACES * 1000.0 / (time2 - time1);
    score.mMedian+=speed / MEASURE_ALLOCATION_CYCLES;
    if (i == WARM_UP_ALLOCATION_CYCLES) {
      score.mMin=speed;
      score.mMax=speed;
    }
 else {
      score.mMin=Math.min(score.mMin,speed);
      score.mMax=Math.max(score.mMax,speed);
    }
  }
  return score;
}
