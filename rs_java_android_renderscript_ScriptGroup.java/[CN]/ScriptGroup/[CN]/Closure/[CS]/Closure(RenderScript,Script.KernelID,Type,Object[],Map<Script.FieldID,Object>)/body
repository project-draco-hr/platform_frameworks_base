{
  super(0,rs);
  mArgs=args;
  mReturnValue=Allocation.createTyped(rs,returnType);
  mBindings=globals;
  mGlobalFuture=new HashMap<Script.FieldID,Future>();
  int numValues=args.length + globals.size();
  long[] fieldIDs=new long[numValues];
  long[] values=new long[numValues];
  int[] sizes=new int[numValues];
  long[] depClosures=new long[numValues];
  long[] depFieldIDs=new long[numValues];
  int i;
  for (i=0; i < args.length; i++) {
    Object obj=args[i];
    fieldIDs[i]=0;
    if (obj instanceof Input) {
      Input unbound=(Input)obj;
      unbound.addReference(this,i);
    }
 else {
      retrieveValueAndDependenceInfo(rs,i,args[i],values,sizes,depClosures,depFieldIDs);
    }
  }
  for (  Map.Entry<Script.FieldID,Object> entry : globals.entrySet()) {
    Object obj=entry.getValue();
    Script.FieldID fieldID=entry.getKey();
    fieldIDs[i]=fieldID.getID(rs);
    if (obj instanceof Input) {
      Input unbound=(Input)obj;
      unbound.addReference(this,fieldID);
    }
 else {
      retrieveValueAndDependenceInfo(rs,i,obj,values,sizes,depClosures,depFieldIDs);
    }
    i++;
  }
  long id=rs.nClosureCreate(kernelID.getID(rs),mReturnValue.getID(rs),fieldIDs,values,sizes,depClosures,depFieldIDs);
  setID(id);
}
