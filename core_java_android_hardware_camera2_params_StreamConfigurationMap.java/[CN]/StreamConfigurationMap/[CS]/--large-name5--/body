{
  mConfigurations=checkArrayElementsNotNull(configurations,"configurations");
  mMinFrameDurations=checkArrayElementsNotNull(minFrameDurations,"minFrameDurations");
  mStallDurations=checkArrayElementsNotNull(stallDurations,"stallDurations");
  mListHighResolution=listHighResolution;
  if (depthConfigurations == null) {
    mDepthConfigurations=new StreamConfiguration[0];
    mDepthMinFrameDurations=new StreamConfigurationDuration[0];
    mDepthStallDurations=new StreamConfigurationDuration[0];
  }
 else {
    mDepthConfigurations=checkArrayElementsNotNull(depthConfigurations,"depthConfigurations");
    mDepthMinFrameDurations=checkArrayElementsNotNull(depthMinFrameDurations,"depthMinFrameDurations");
    mDepthStallDurations=checkArrayElementsNotNull(depthStallDurations,"depthStallDurations");
  }
  if (highSpeedVideoConfigurations == null) {
    mHighSpeedVideoConfigurations=new HighSpeedVideoConfiguration[0];
  }
 else {
    mHighSpeedVideoConfigurations=checkArrayElementsNotNull(highSpeedVideoConfigurations,"highSpeedVideoConfigurations");
  }
  for (  StreamConfiguration config : configurations) {
    int fmt=config.getFormat();
    SparseIntArray map=null;
    if (config.isOutput()) {
      mAllOutputFormats.put(fmt,mAllOutputFormats.get(fmt) + 1);
      long duration=0;
      if (mListHighResolution) {
        for (        StreamConfigurationDuration configurationDuration : mMinFrameDurations) {
          if (configurationDuration.getFormat() == fmt && configurationDuration.getWidth() == config.getSize().getWidth() && configurationDuration.getHeight() == config.getSize().getHeight()) {
            duration=configurationDuration.getDuration();
            break;
          }
        }
      }
      map=duration <= DURATION_20FPS_NS ? mOutputFormats : mHighResOutputFormats;
    }
 else {
      map=mInputFormats;
    }
    map.put(fmt,map.get(fmt) + 1);
  }
  for (  StreamConfiguration config : mDepthConfigurations) {
    if (!config.isOutput()) {
      continue;
    }
    mDepthOutputFormats.put(config.getFormat(),mDepthOutputFormats.get(config.getFormat()) + 1);
  }
  if (mOutputFormats.indexOfKey(HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED) < 0) {
    throw new AssertionError("At least one stream configuration for IMPLEMENTATION_DEFINED must exist");
  }
  for (  HighSpeedVideoConfiguration config : mHighSpeedVideoConfigurations) {
    Size size=config.getSize();
    Range<Integer> fpsRange=config.getFpsRange();
    Integer fpsRangeCount=mHighSpeedVideoSizeMap.get(size);
    if (fpsRangeCount == null) {
      fpsRangeCount=0;
    }
    mHighSpeedVideoSizeMap.put(size,fpsRangeCount + 1);
    Integer sizeCount=mHighSpeedVideoFpsRangeMap.get(fpsRange);
    if (sizeCount == null) {
      sizeCount=0;
    }
    mHighSpeedVideoFpsRangeMap.put(fpsRange,sizeCount + 1);
  }
  mInputOutputFormatsMap=inputOutputFormatsMap;
}
