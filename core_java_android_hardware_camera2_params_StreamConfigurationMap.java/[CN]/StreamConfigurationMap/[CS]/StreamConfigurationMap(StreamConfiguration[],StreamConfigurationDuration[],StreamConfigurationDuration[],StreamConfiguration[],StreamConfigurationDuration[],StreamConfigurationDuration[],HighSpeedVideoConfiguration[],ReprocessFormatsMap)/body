{
  mConfigurations=checkArrayElementsNotNull(configurations,"configurations");
  mMinFrameDurations=checkArrayElementsNotNull(minFrameDurations,"minFrameDurations");
  mStallDurations=checkArrayElementsNotNull(stallDurations,"stallDurations");
  if (depthConfigurations == null) {
    mDepthConfigurations=new StreamConfiguration[0];
    mDepthMinFrameDurations=new StreamConfigurationDuration[0];
    mDepthStallDurations=new StreamConfigurationDuration[0];
  }
 else {
    mDepthConfigurations=checkArrayElementsNotNull(depthConfigurations,"depthConfigurations");
    mDepthMinFrameDurations=checkArrayElementsNotNull(depthMinFrameDurations,"depthMinFrameDurations");
    mDepthStallDurations=checkArrayElementsNotNull(depthStallDurations,"depthStallDurations");
  }
  if (highSpeedVideoConfigurations == null) {
    mHighSpeedVideoConfigurations=new HighSpeedVideoConfiguration[0];
  }
 else {
    mHighSpeedVideoConfigurations=checkArrayElementsNotNull(highSpeedVideoConfigurations,"highSpeedVideoConfigurations");
  }
  for (  StreamConfiguration config : configurations) {
    HashMap<Integer,Integer> map=config.isOutput() ? mOutputFormats : mInputFormats;
    Integer count=map.get(config.getFormat());
    if (count == null) {
      count=0;
    }
    map.put(config.getFormat(),count + 1);
  }
  for (  StreamConfiguration config : mDepthConfigurations) {
    if (!config.isOutput()) {
      continue;
    }
    Integer count=mDepthOutputFormats.get(config.getFormat());
    if (count == null) {
      count=0;
    }
    mDepthOutputFormats.put(config.getFormat(),count + 1);
  }
  if (!mOutputFormats.containsKey(HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED)) {
    throw new AssertionError("At least one stream configuration for IMPLEMENTATION_DEFINED must exist");
  }
  for (  HighSpeedVideoConfiguration config : mHighSpeedVideoConfigurations) {
    Size size=config.getSize();
    Range<Integer> fpsRange=config.getFpsRange();
    Integer fpsRangeCount=mHighSpeedVideoSizeMap.get(size);
    if (fpsRangeCount == null) {
      fpsRangeCount=0;
    }
    mHighSpeedVideoSizeMap.put(size,fpsRangeCount + 1);
    Integer sizeCount=mHighSpeedVideoFpsRangeMap.get(fpsRange);
    if (sizeCount == null) {
      sizeCount=0;
    }
    mHighSpeedVideoFpsRangeMap.put(fpsRange,sizeCount + 1);
  }
  mInputOutputFormatsMap=inputOutputFormatsMap;
}
