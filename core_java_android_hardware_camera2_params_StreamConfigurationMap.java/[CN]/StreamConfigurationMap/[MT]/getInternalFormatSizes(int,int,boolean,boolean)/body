{
  if (dataspace == HAL_DATASPACE_DEPTH && highRes) {
    return new Size[0];
  }
  SparseIntArray formatsMap=!output ? mInputFormats : dataspace == HAL_DATASPACE_DEPTH ? mDepthOutputFormats : highRes ? mHighResOutputFormats : mOutputFormats;
  int sizesCount=formatsMap.get(format);
  if (((!output || dataspace == HAL_DATASPACE_DEPTH) && sizesCount == 0) || (output && dataspace != HAL_DATASPACE_DEPTH && mAllOutputFormats.get(format) == 0)) {
    throw new IllegalArgumentException("format not available");
  }
  Size[] sizes=new Size[sizesCount];
  int sizeIndex=0;
  StreamConfiguration[] configurations=(dataspace == HAL_DATASPACE_DEPTH) ? mDepthConfigurations : mConfigurations;
  StreamConfigurationDuration[] minFrameDurations=(dataspace == HAL_DATASPACE_DEPTH) ? mDepthMinFrameDurations : mMinFrameDurations;
  for (  StreamConfiguration config : configurations) {
    int fmt=config.getFormat();
    if (fmt == format && config.isOutput() == output) {
      if (output && mListHighResolution) {
        long duration=0;
        for (int i=0; i < minFrameDurations.length; i++) {
          StreamConfigurationDuration d=minFrameDurations[i];
          if (d.getFormat() == fmt && d.getWidth() == config.getSize().getWidth() && d.getHeight() == config.getSize().getHeight()) {
            duration=d.getDuration();
            break;
          }
        }
        if (dataspace != HAL_DATASPACE_DEPTH && highRes != (duration > DURATION_20FPS_NS)) {
          continue;
        }
      }
      sizes[sizeIndex++]=config.getSize();
    }
  }
  if (sizeIndex != sizesCount) {
    throw new AssertionError("Too few sizes (expected " + sizesCount + ", actual "+ sizeIndex+ ")");
  }
  return sizes;
}
