{
  mLockPatternUtils=new LockPatternUtils(mContext);
  final int quality=mLockPatternUtils.getKeyguardStoredPasswordQuality();
  mIsAlpha=DevicePolicyManager.PASSWORD_QUALITY_ALPHABETIC == quality || DevicePolicyManager.PASSWORD_QUALITY_ALPHANUMERIC == quality || DevicePolicyManager.PASSWORD_QUALITY_COMPLEX == quality;
  mKeyboardView=(PasswordEntryKeyboardView)findViewById(R.id.keyboard);
  mPasswordEntry=(EditText)findViewById(R.id.passwordEntry);
  mPasswordEntry.setOnEditorActionListener(this);
  mPasswordEntry.addTextChangedListener(this);
  mKeyboardHelper=new PasswordEntryKeyboardHelper(mContext,mKeyboardView,this,false,new int[]{R.xml.kg_password_kbd_numeric,com.android.internal.R.xml.password_kbd_qwerty,com.android.internal.R.xml.password_kbd_qwerty_shifted,com.android.internal.R.xml.password_kbd_symbols,com.android.internal.R.xml.password_kbd_symbols_shift});
  mKeyboardHelper.setEnableHaptics(mLockPatternUtils.isTactileFeedbackEnabled());
  boolean imeOrDeleteButtonVisible=false;
  if (mIsAlpha) {
    mKeyboardHelper.setKeyboardMode(PasswordEntryKeyboardHelper.KEYBOARD_MODE_ALPHA);
    mKeyboardView.setVisibility(View.GONE);
  }
 else {
    mKeyboardHelper.setKeyboardMode(PasswordEntryKeyboardHelper.KEYBOARD_MODE_NUMERIC);
    boolean hardKeyboardVisible=getResources().getConfiguration().hardKeyboardHidden == Configuration.HARDKEYBOARDHIDDEN_NO;
    mKeyboardView.setVisibility((ENABLE_HIDE_KEYBOARD && hardKeyboardVisible) ? View.INVISIBLE : View.VISIBLE);
    View pinDelete=findViewById(R.id.delete_button);
    if (pinDelete != null) {
      pinDelete.setVisibility(View.VISIBLE);
      imeOrDeleteButtonVisible=true;
      pinDelete.setOnClickListener(new OnClickListener(){
        public void onClick(        View v){
          mKeyboardHelper.handleBackspace();
        }
      }
);
    }
  }
  mPasswordEntry.requestFocus();
  if (mIsAlpha) {
    mPasswordEntry.setKeyListener(TextKeyListener.getInstance());
    mPasswordEntry.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);
  }
 else {
    mPasswordEntry.setKeyListener(DigitsKeyListener.getInstance());
    mPasswordEntry.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_VARIATION_PASSWORD);
  }
  mPasswordEntry.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      mCallback.userActivity(0);
    }
  }
);
  mPasswordEntry.addTextChangedListener(new TextWatcher(){
    public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    public void afterTextChanged(    Editable s){
      mCallback.userActivity(0);
    }
  }
);
  View switchImeButton=findViewById(R.id.switch_ime_button);
  final InputMethodManager imm=(InputMethodManager)getContext().getSystemService(Context.INPUT_METHOD_SERVICE);
  if (mIsAlpha && switchImeButton != null && hasMultipleEnabledIMEsOrSubtypes(imm,false)) {
    switchImeButton.setVisibility(View.VISIBLE);
    imeOrDeleteButtonVisible=true;
    switchImeButton.setOnClickListener(new OnClickListener(){
      public void onClick(      View v){
        mCallback.userActivity(0);
        imm.showInputMethodPicker();
      }
    }
);
  }
  if (!imeOrDeleteButtonVisible) {
    android.view.ViewGroup.LayoutParams params=mPasswordEntry.getLayoutParams();
    if (params instanceof MarginLayoutParams) {
      final MarginLayoutParams mlp=(MarginLayoutParams)params;
      mlp.setMarginStart(0);
      mPasswordEntry.setLayoutParams(params);
    }
  }
}
