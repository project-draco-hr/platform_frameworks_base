{
  if (!isUserSetup()) {
    return false;
  }
  Point realSize=new Point();
  if (initialBounds == null) {
    mContext.getSystemService(DisplayManager.class).getDisplay(Display.DEFAULT_DISPLAY).getRealSize(realSize);
    initialBounds=new Rect(0,0,realSize.x,realSize.y);
  }
  int currentUser=sSystemServicesProxy.getCurrentUser();
  SystemServicesProxy ssp=Recents.getSystemServices();
  ActivityManager.RunningTaskInfo topTask=ssp.getTopMostTask();
  boolean screenPinningActive=ssp.isScreenPinningActive();
  boolean isTopTaskHome=topTask != null && SystemServicesProxy.isHomeStack(topTask.stackId);
  if (topTask != null && !isTopTaskHome && !screenPinningActive) {
    if (topTask.isDockable) {
      if (sSystemServicesProxy.isSystemUser(currentUser)) {
        mImpl.dockTopTask(topTask.id,dragMode,stackCreateMode,initialBounds);
      }
 else {
        if (mSystemToUserCallbacks != null) {
          IRecentsNonSystemUserCallbacks callbacks=mSystemToUserCallbacks.getNonSystemUserRecentsForUser(currentUser);
          if (callbacks != null) {
            try {
              callbacks.dockTopTask(topTask.id,dragMode,stackCreateMode,initialBounds);
            }
 catch (            RemoteException e) {
              Log.e(TAG,"Callback failed",e);
            }
          }
 else {
            Log.e(TAG,"No SystemUI callbacks found for user: " + currentUser);
          }
        }
      }
      mDraggingInRecentsCurrentUser=currentUser;
      return true;
    }
 else {
      Toast.makeText(mContext,R.string.recents_incompatible_app_message,Toast.LENGTH_SHORT).show();
      return false;
    }
  }
 else {
    return false;
  }
}
