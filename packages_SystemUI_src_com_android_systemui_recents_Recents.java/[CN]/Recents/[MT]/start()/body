{
  if (sInstance == null) {
    sInstance=this;
  }
  RecentsTaskLoader.initialize(mContext);
  mInflater=LayoutInflater.from(mContext);
  mSystemServicesProxy=new SystemServicesProxy(mContext);
  mHandler=new Handler();
  mTaskStackBounds=new Rect();
  mAppWidgetHost=new RecentsAppWidgetHost(mContext,Constants.Values.App.AppWidgetHostId);
  mTaskStackListener=new TaskStackListenerImpl(mHandler);
  mSystemServicesProxy.registerTaskStackListener(mTaskStackListener);
  if (mSystemServicesProxy.isForegroundUserOwner()) {
    mProxyBroadcastReceiver=new RecentsOwnerEventProxyReceiver();
    IntentFilter filter=new IntentFilter();
    filter.addAction(Recents.ACTION_PROXY_NOTIFY_RECENTS_VISIBLITY_TO_OWNER);
    filter.addAction(Recents.ACTION_PROXY_SCREEN_PINNING_REQUEST_TO_OWNER);
    mContext.registerReceiverAsUser(mProxyBroadcastReceiver,UserHandle.CURRENT,filter,null,mHandler);
  }
  TaskStackViewLayoutAlgorithm.initializeCurve();
  reloadHeaderBarLayout();
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  RecentsTaskLoadPlan plan=loader.createLoadPlan(mContext);
  loader.preloadTasks(plan,true);
  RecentsTaskLoadPlan.Options launchOpts=new RecentsTaskLoadPlan.Options();
  launchOpts.numVisibleTasks=loader.getApplicationIconCacheSize();
  launchOpts.numVisibleTaskThumbnails=loader.getThumbnailCacheSize();
  launchOpts.onlyLoadForCache=true;
  loader.loadTasks(mContext,plan,launchOpts);
  putComponent(Recents.class,this);
}
