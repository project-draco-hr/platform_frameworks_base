{
  final String[] instructionSets=targetInstructionSets != null ? targetInstructionSets : getAppDexInstructionSets(pkg.applicationInfo);
  if (done != null) {
    done.add(pkg.packageName);
    if (pkg.usesLibraries != null) {
      performDexOptLibsLI(pkg.usesLibraries,instructionSets,forceDex,defer,bootComplete,useJit,done);
    }
    if (pkg.usesOptionalLibraries != null) {
      performDexOptLibsLI(pkg.usesOptionalLibraries,instructionSets,forceDex,defer,bootComplete,useJit,done);
    }
  }
  if ((pkg.applicationInfo.flags & ApplicationInfo.FLAG_HAS_CODE) == 0) {
    return DEX_OPT_SKIPPED;
  }
  final boolean vmSafeMode=(pkg.applicationInfo.flags & ApplicationInfo.FLAG_VM_SAFE_MODE) != 0;
  final boolean debuggable=(pkg.applicationInfo.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0;
  final List<String> paths=pkg.getAllCodePathsExcludingResourceOnly();
  boolean performedDexOpt=false;
  final String[] dexCodeInstructionSets=getDexCodeInstructionSets(instructionSets);
  for (  String dexCodeInstructionSet : dexCodeInstructionSets) {
    if (!forceDex && pkg.mDexOptPerformed.contains(dexCodeInstructionSet)) {
      continue;
    }
    for (    String path : paths) {
      try {
        final int dexoptNeeded;
        if (forceDex) {
          dexoptNeeded=DexFile.DEX2OAT_NEEDED;
        }
 else {
          dexoptNeeded=DexFile.getDexOptNeeded(path,pkg.packageName,dexCodeInstructionSet,defer);
        }
        if (!forceDex && defer && dexoptNeeded != DexFile.NO_DEXOPT_NEEDED) {
          addPackageForDeferredDexopt(pkg);
          return DEX_OPT_DEFERRED;
        }
        if (dexoptNeeded != DexFile.NO_DEXOPT_NEEDED) {
          final String dexoptType;
          String oatDir=null;
          if (dexoptNeeded == DexFile.DEX2OAT_NEEDED) {
            dexoptType="dex2oat";
            oatDir=createOatDirIfSupported(pkg,dexCodeInstructionSet);
          }
 else           if (dexoptNeeded == DexFile.PATCHOAT_NEEDED) {
            dexoptType="patchoat";
          }
 else           if (dexoptNeeded == DexFile.SELF_PATCHOAT_NEEDED) {
            dexoptType="self patchoat";
          }
 else {
            throw new IllegalStateException("Invalid dexopt needed: " + dexoptNeeded);
          }
          Log.i(TAG,"Running dexopt (" + dexoptType + ") on: "+ path+ " pkg="+ pkg.applicationInfo.packageName+ " isa="+ dexCodeInstructionSet+ " vmSafeMode="+ vmSafeMode+ " debuggable="+ debuggable+ " oatDir = "+ oatDir+ " bootComplete="+ bootComplete+ " useJit="+ useJit);
          final int sharedGid=UserHandle.getSharedAppGid(pkg.applicationInfo.uid);
          final int dexFlags=(!pkg.isForwardLocked() ? DEXOPT_PUBLIC : 0) | (vmSafeMode ? DEXOPT_SAFEMODE : 0) | (debuggable ? DEXOPT_DEBUGGABLE : 0)| (bootComplete ? DEXOPT_BOOTCOMPLETE : 0)| (useJit ? DEXOPT_USEJIT : 0);
          final int ret=mPackageManagerService.mInstaller.dexopt(path,sharedGid,pkg.packageName,dexCodeInstructionSet,dexoptNeeded,oatDir,dexFlags);
          if (ret < 0) {
            return DEX_OPT_FAILED;
          }
          performedDexOpt=true;
        }
      }
 catch (      FileNotFoundException e) {
        Slog.w(TAG,"Apk not found for dexopt: " + path);
        return DEX_OPT_FAILED;
      }
catch (      IOException e) {
        Slog.w(TAG,"IOException reading apk: " + path,e);
        return DEX_OPT_FAILED;
      }
catch (      StaleDexCacheError e) {
        Slog.w(TAG,"StaleDexCacheError when reading apk: " + path,e);
        return DEX_OPT_FAILED;
      }
catch (      Exception e) {
        Slog.w(TAG,"Exception when doing dexopt : ",e);
        return DEX_OPT_FAILED;
      }
    }
    pkg.mDexOptPerformed.add(dexCodeInstructionSet);
  }
  return performedDexOpt ? DEX_OPT_PERFORMED : DEX_OPT_SKIPPED;
}
