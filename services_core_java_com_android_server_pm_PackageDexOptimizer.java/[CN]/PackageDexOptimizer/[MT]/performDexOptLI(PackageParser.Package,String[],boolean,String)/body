{
  final String[] instructionSets=targetInstructionSets != null ? targetInstructionSets : getAppDexInstructionSets(pkg.applicationInfo);
  if (!canOptimizePackage(pkg)) {
    return DEX_OPT_SKIPPED;
  }
  final List<String> paths=pkg.getAllCodePathsExcludingResourceOnly();
  final int sharedGid=UserHandle.getSharedAppGid(pkg.applicationInfo.uid);
  boolean isProfileGuidedFilter=DexFile.isProfileGuidedCompilerFilter(targetCompilerFilter);
  if (isProfileGuidedFilter && !pkg.isForwardLocked()) {
    for (    String path : paths) {
      if (isUsedByOtherApps(path)) {
        checkProfiles=false;
        targetCompilerFilter=getNonProfileGuidedCompilerFilter(targetCompilerFilter);
        if (DexFile.isProfileGuidedCompilerFilter(targetCompilerFilter)) {
          throw new IllegalStateException(targetCompilerFilter);
        }
        isProfileGuidedFilter=false;
        break;
      }
    }
  }
  boolean newProfile=false;
  if (checkProfiles && isProfileGuidedFilter) {
    try {
      newProfile=mInstaller.mergeProfiles(sharedGid,pkg.packageName);
    }
 catch (    InstallerException e) {
      Slog.w(TAG,"Failed to merge profiles",e);
    }
  }
  final boolean vmSafeMode=(pkg.applicationInfo.flags & ApplicationInfo.FLAG_VM_SAFE_MODE) != 0;
  final boolean debuggable=(pkg.applicationInfo.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0;
  boolean performedDexOpt=false;
  final String[] dexCodeInstructionSets=getDexCodeInstructionSets(instructionSets);
  for (  String dexCodeInstructionSet : dexCodeInstructionSets) {
    for (    String path : paths) {
      int dexoptNeeded;
      try {
        dexoptNeeded=DexFile.getDexOptNeeded(path,dexCodeInstructionSet,targetCompilerFilter,newProfile);
      }
 catch (      IOException ioe) {
        Slog.w(TAG,"IOException reading apk: " + path,ioe);
        return DEX_OPT_FAILED;
      }
      dexoptNeeded=adjustDexoptNeeded(dexoptNeeded);
      if (PackageManagerService.DEBUG_DEXOPT) {
        Log.i(TAG,"DexoptNeeded for " + path + "@"+ targetCompilerFilter+ " is "+ dexoptNeeded);
      }
      final String dexoptType;
      String oatDir=null;
switch (dexoptNeeded) {
case DexFile.NO_DEXOPT_NEEDED:
        continue;
case DexFile.DEX2OAT_NEEDED:
      dexoptType="dex2oat";
    oatDir=createOatDirIfSupported(pkg,dexCodeInstructionSet);
  break;
case DexFile.PATCHOAT_NEEDED:
dexoptType="patchoat";
break;
case DexFile.SELF_PATCHOAT_NEEDED:
dexoptType="self patchoat";
break;
default :
throw new IllegalStateException("Invalid dexopt:" + dexoptNeeded);
}
Log.i(TAG,"Running dexopt (" + dexoptType + ") on: "+ path+ " pkg="+ pkg.applicationInfo.packageName+ " isa="+ dexCodeInstructionSet+ " vmSafeMode="+ vmSafeMode+ " debuggable="+ debuggable+ " target-filter="+ targetCompilerFilter+ " oatDir = "+ oatDir);
final boolean isPublic=!pkg.isForwardLocked() && !isProfileGuidedFilter;
final int profileFlag=isProfileGuidedFilter ? DEXOPT_PROFILE_GUIDED : 0;
final int dexFlags=adjustDexoptFlags((isPublic ? DEXOPT_PUBLIC : 0) | (vmSafeMode ? DEXOPT_SAFEMODE : 0) | (debuggable ? DEXOPT_DEBUGGABLE : 0)| profileFlag| DEXOPT_BOOTCOMPLETE);
try {
mInstaller.dexopt(path,sharedGid,pkg.packageName,dexCodeInstructionSet,dexoptNeeded,oatDir,dexFlags,targetCompilerFilter,pkg.volumeUuid);
performedDexOpt=true;
}
 catch (InstallerException e) {
Slog.w(TAG,"Failed to dexopt",e);
}
}
}
return performedDexOpt ? DEX_OPT_PERFORMED : DEX_OPT_SKIPPED;
}
