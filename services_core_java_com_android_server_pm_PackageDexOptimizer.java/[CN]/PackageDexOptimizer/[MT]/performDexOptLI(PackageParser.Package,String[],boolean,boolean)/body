{
  final String[] instructionSets=targetInstructionSets != null ? targetInstructionSets : getAppDexInstructionSets(pkg.applicationInfo);
  if (!canOptimizePackage(pkg)) {
    return DEX_OPT_SKIPPED;
  }
  final boolean vmSafeMode=(pkg.applicationInfo.flags & ApplicationInfo.FLAG_VM_SAFE_MODE) != 0;
  final boolean debuggable=(pkg.applicationInfo.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0;
  final List<String> paths=pkg.getAllCodePathsExcludingResourceOnly();
  boolean performedDexOpt=false;
  final String[] dexCodeInstructionSets=getDexCodeInstructionSets(instructionSets);
  for (  String dexCodeInstructionSet : dexCodeInstructionSets) {
    for (    String path : paths) {
      if (useProfiles && isUsedByOtherApps(path)) {
        useProfiles=false;
      }
      int dexoptNeeded;
      try {
        int compilationTypeMask=0;
        if (extractOnly) {
          compilationTypeMask=DexFile.COMPILATION_TYPE_FULL | DexFile.COMPILATION_TYPE_PROFILE_GUIDE | DexFile.COMPILATION_TYPE_EXTRACT_ONLY;
        }
 else {
          compilationTypeMask=DexFile.COMPILATION_TYPE_FULL;
        }
        dexoptNeeded=DexFile.getDexOptNeeded(path,dexCodeInstructionSet,compilationTypeMask);
      }
 catch (      IOException ioe) {
        Slog.w(TAG,"IOException reading apk: " + path,ioe);
        return DEX_OPT_FAILED;
      }
      dexoptNeeded=adjustDexoptNeeded(dexoptNeeded);
      final String dexoptType;
      String oatDir=null;
switch (dexoptNeeded) {
case DexFile.NO_DEXOPT_NEEDED:
        continue;
case DexFile.DEX2OAT_NEEDED:
      dexoptType="dex2oat";
    oatDir=createOatDirIfSupported(pkg,dexCodeInstructionSet);
  break;
case DexFile.PATCHOAT_NEEDED:
dexoptType="patchoat";
break;
case DexFile.SELF_PATCHOAT_NEEDED:
dexoptType="self patchoat";
break;
default :
throw new IllegalStateException("Invalid dexopt:" + dexoptNeeded);
}
Log.i(TAG,"Running dexopt (" + dexoptType + ") on: "+ path+ " pkg="+ pkg.applicationInfo.packageName+ " isa="+ dexCodeInstructionSet+ " vmSafeMode="+ vmSafeMode+ " debuggable="+ debuggable+ " extractOnly="+ extractOnly+ " oatDir = "+ oatDir);
final int sharedGid=UserHandle.getSharedAppGid(pkg.applicationInfo.uid);
final boolean isPublic=!pkg.isForwardLocked() && !useProfiles;
final int dexFlags=adjustDexoptFlags((isPublic ? DEXOPT_PUBLIC : 0) | (vmSafeMode ? DEXOPT_SAFEMODE : 0) | (debuggable ? DEXOPT_DEBUGGABLE : 0)| (extractOnly ? DEXOPT_EXTRACTONLY : 0)| DEXOPT_BOOTCOMPLETE);
try {
mInstaller.dexopt(path,sharedGid,pkg.packageName,dexCodeInstructionSet,dexoptNeeded,oatDir,dexFlags,pkg.volumeUuid,useProfiles);
performedDexOpt=true;
}
 catch (InstallerException e) {
Slog.w(TAG,"Failed to dexopt",e);
}
}
}
return performedDexOpt ? DEX_OPT_PERFORMED : DEX_OPT_SKIPPED;
}
