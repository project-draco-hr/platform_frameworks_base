{
  if ((behavior != FOCUS_POLICY_DUCKING_IN_APP) && (behavior != FOCUS_POLICY_DUCKING_IN_POLICY)) {
    throw new IllegalArgumentException("Invalid ducking behavior " + behavior);
  }
synchronized (mLock) {
    if (mStatus != POLICY_STATUS_REGISTERED) {
      throw new IllegalStateException("Cannot change ducking behavior for unregistered policy");
    }
    if ((behavior == FOCUS_POLICY_DUCKING_IN_POLICY) && (mFocusListener == null)) {
      throw new IllegalStateException("Cannot handle ducking without an audio focus listener");
    }
    IAudioService service=getService();
    try {
      final int status=service.setFocusPropertiesForPolicy(behavior,this.cb());
      if (status == AudioManager.SUCCESS) {
        mConfig.mDuckingPolicy=behavior;
      }
      return status;
    }
 catch (    RemoteException e) {
      Log.e(TAG,"Dead object in setFocusPropertiesForPolicy for behavior",e);
      return AudioManager.ERROR;
    }
  }
}
