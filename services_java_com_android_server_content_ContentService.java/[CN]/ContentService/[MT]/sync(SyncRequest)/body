{
  Bundle extras=request.getBundle();
  ContentResolver.validateSyncExtrasBundle(extras);
  long flextime=request.getSyncFlexTime();
  long runAtTime=request.getSyncRunTime();
  int userId=UserHandle.getCallingUserId();
  int uId=Binder.getCallingUid();
  long identityToken=clearCallingIdentity();
  try {
    SyncManager syncManager=getSyncManager();
    if (syncManager != null) {
      if (request.hasAuthority()) {
        final Account account=request.getProviderInfo().first;
        final String provider=request.getProviderInfo().second;
        if (request.isPeriodic()) {
          mContext.enforceCallingOrSelfPermission(Manifest.permission.WRITE_SYNC_SETTINGS,"no permission to write the sync settings");
          if (runAtTime < 60) {
            Slog.w(TAG,"Requested poll frequency of " + runAtTime + " seconds being rounded up to 60 seconds.");
            runAtTime=60;
          }
          PeriodicSync syncToAdd=new PeriodicSync(account,provider,extras,runAtTime,flextime);
          getSyncManager().getSyncStorageEngine().addPeriodicSync(syncToAdd,userId);
        }
 else {
          long beforeRuntimeMillis=(flextime) * 1000;
          long runtimeMillis=runAtTime * 1000;
          syncManager.scheduleSync(account,userId,uId,provider,extras,beforeRuntimeMillis,runtimeMillis,false);
        }
      }
 else {
        final ComponentName syncService=request.getService();
        if (request.isPeriodic()) {
          throw new RuntimeException("Periodic anonymous syncs not implemented yet.");
        }
 else {
          long beforeRuntimeMillis=(flextime) * 1000;
          long runtimeMillis=runAtTime * 1000;
          syncManager.scheduleSync(syncService,userId,uId,extras,beforeRuntimeMillis,runtimeMillis,false);
          throw new RuntimeException("One-off anonymous syncs not implemented yet.");
        }
      }
    }
  }
  finally {
    restoreCallingIdentity(identityToken);
  }
}
