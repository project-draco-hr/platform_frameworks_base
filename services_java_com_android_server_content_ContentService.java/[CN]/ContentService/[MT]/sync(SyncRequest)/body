{
  Bundle extras=request.getBundle();
  ContentResolver.validateSyncExtrasBundle(extras);
  int userId=UserHandle.getCallingUserId();
  int callerUid=Binder.getCallingUid();
  long identityToken=clearCallingIdentity();
  try {
    SyncManager syncManager=getSyncManager();
    if (syncManager == null)     return;
    long flextime=request.getSyncFlexTime();
    long runAtTime=request.getSyncRunTime();
    if (request.isPeriodic()) {
      mContext.enforceCallingOrSelfPermission(Manifest.permission.WRITE_SYNC_SETTINGS,"no permission to write the sync settings");
      SyncStorageEngine.EndPoint info;
      if (!request.hasAuthority()) {
        verifySignatureForPackage(callerUid,request.getService().getPackageName(),"sync");
        info=new SyncStorageEngine.EndPoint(request.getService(),userId);
      }
 else {
        info=new SyncStorageEngine.EndPoint(request.getAccount(),request.getProvider(),userId);
      }
      if (runAtTime < 60) {
        Slog.w(TAG,"Requested poll frequency of " + runAtTime + " seconds being rounded up to 60 seconds.");
        runAtTime=60;
      }
      getSyncManager().getSyncStorageEngine().updateOrAddPeriodicSync(info,runAtTime,flextime,extras);
    }
 else {
      long beforeRuntimeMillis=(flextime) * 1000;
      long runtimeMillis=runAtTime * 1000;
      if (request.hasAuthority()) {
        syncManager.scheduleSync(request.getAccount(),userId,callerUid,request.getProvider(),extras,beforeRuntimeMillis,runtimeMillis,false);
      }
 else {
        syncManager.scheduleSync(request.getService(),userId,callerUid,extras,beforeRuntimeMillis,runtimeMillis);
      }
    }
  }
  finally {
    restoreCallingIdentity(identityToken);
  }
}
