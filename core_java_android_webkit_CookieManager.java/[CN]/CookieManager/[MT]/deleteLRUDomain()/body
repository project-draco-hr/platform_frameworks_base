{
  int count=0;
  int byteCount=0;
  int mapSize=mCookieMap.size();
  if (mapSize < MAX_RAM_DOMAIN_COUNT) {
    Collection<ArrayList<Cookie>> cookieLists=mCookieMap.values();
    Iterator<ArrayList<Cookie>> listIter=cookieLists.iterator();
    while (listIter.hasNext() && count < MAX_RAM_COOKIES_COUNT) {
      ArrayList<Cookie> list=listIter.next();
      if (DebugFlags.COOKIE_MANAGER) {
        Iterator<Cookie> iter=list.iterator();
        while (iter.hasNext() && count < MAX_RAM_COOKIES_COUNT) {
          Cookie cookie=iter.next();
          byteCount+=cookie.domain.length() + cookie.path.length() + cookie.name.length()+ (cookie.value != null ? cookie.value.length() : 0)+ 14;
          count++;
        }
      }
 else {
        count+=list.size();
      }
    }
  }
  ArrayList<Cookie> retlist=new ArrayList<Cookie>();
  if (mapSize >= MAX_RAM_DOMAIN_COUNT || count >= MAX_RAM_COOKIES_COUNT) {
    if (DebugFlags.COOKIE_MANAGER) {
      Log.v(LOGTAG,count + " cookies used " + byteCount+ " bytes with "+ mapSize+ " domains");
    }
    Object[] domains=mCookieMap.keySet().toArray();
    int toGo=mapSize / 10 + 1;
    while (toGo-- > 0) {
      String domain=domains[toGo].toString();
      if (DebugFlags.COOKIE_MANAGER) {
        Log.v(LOGTAG,"delete domain: " + domain + " from RAM cache");
      }
      retlist.addAll(mCookieMap.get(domain));
      mCookieMap.remove(domain);
    }
  }
  return retlist;
}
