{
  s=s.trim();
  int len=s.length();
  if (len <= 0) {
    return false;
  }
  char[] buf=s.toCharArray();
  for (int i=0; i < len; i++) {
    if (buf[i] > 255) {
      return false;
    }
  }
  if (buf[0] < '0' && buf[0] > '9' && buf[0] != '.') {
    return false;
  }
  Matcher m=sFloatPattern.matcher(s);
  if (m.matches()) {
    String f_str=m.group(1);
    String end=m.group(2);
    float f;
    try {
      f=Float.parseFloat(f_str);
    }
 catch (    NumberFormatException e) {
      return false;
    }
    if (end.length() > 0 && end.charAt(0) != ' ') {
      if (parseUnit(end,outValue,sFloatOut)) {
        f*=sFloatOut[0];
        boolean neg=f < 0;
        if (neg) {
          f=-f;
        }
        long bits=(long)(f * (1 << 23) + .5f);
        int radix;
        int shift;
        if ((bits & 0x7fffff) == 0) {
          radix=TypedValue.COMPLEX_RADIX_23p0;
          shift=23;
        }
 else         if ((bits & 0xffffffffff800000L) == 0) {
          radix=TypedValue.COMPLEX_RADIX_0p23;
          shift=0;
        }
 else         if ((bits & 0xffffffff80000000L) == 0) {
          radix=TypedValue.COMPLEX_RADIX_8p15;
          shift=8;
        }
 else         if ((bits & 0xffffff8000000000L) == 0) {
          radix=TypedValue.COMPLEX_RADIX_16p7;
          shift=16;
        }
 else {
          radix=TypedValue.COMPLEX_RADIX_23p0;
          shift=23;
        }
        int mantissa=(int)((bits >> shift) & TypedValue.COMPLEX_MANTISSA_MASK);
        if (neg) {
          mantissa=(-mantissa) & TypedValue.COMPLEX_MANTISSA_MASK;
        }
        outValue.data|=(radix << TypedValue.COMPLEX_RADIX_SHIFT) | (mantissa << TypedValue.COMPLEX_MANTISSA_SHIFT);
        return true;
      }
      return false;
    }
    end=end.trim();
    if (end.length() == 0) {
      if (outValue != null) {
        outValue.type=TypedValue.TYPE_FLOAT;
        outValue.data=Float.floatToIntBits(f);
        return true;
      }
    }
  }
  return false;
}
