{
  Drawable d=null;
  String stringValue=value.getValue();
  String lowerCaseValue=stringValue.toLowerCase();
  if (lowerCaseValue.endsWith(NinePatch.EXTENSION_9PATCH)) {
    File file=new File(stringValue);
    if (file.isFile()) {
      NinePatchChunk chunk=Bridge.getCached9Patch(stringValue,isFramework ? null : context.getProjectKey());
      Bitmap bitmap=Bridge.getCachedBitmap(stringValue,isFramework ? null : context.getProjectKey());
      if (chunk == null || bitmap == null) {
        try {
          NinePatch ninePatch=NinePatch.load(file.toURI().toURL(),false);
          if (ninePatch != null) {
            if (chunk == null) {
              chunk=ninePatch.getChunk();
              Bridge.setCached9Patch(stringValue,chunk,isFramework ? null : context.getProjectKey());
            }
            if (bitmap == null) {
              ResourceDensity density=ResourceDensity.MEDIUM;
              if (value instanceof DensityBasedResourceValue) {
                density=((DensityBasedResourceValue)value).getResourceDensity();
              }
              bitmap=Bitmap_Delegate.createBitmap(ninePatch.getImage(),false,density);
              Bridge.setCachedBitmap(stringValue,bitmap,isFramework ? null : context.getProjectKey());
            }
          }
        }
 catch (        MalformedURLException e) {
        }
catch (        IOException e) {
          Bridge.getLog().error(LayoutLog.TAG_RESOURCES_READ,"Failed lot load " + file.getAbsolutePath(),e);
        }
      }
      if (chunk != null && bitmap != null) {
        int[] padding=chunk.getPadding();
        Rect paddingRect=new Rect(padding[0],padding[1],padding[2],padding[3]);
        return new NinePatchDrawable(context.getResources(),bitmap,NinePatch_Delegate.serialize(chunk),paddingRect,null);
      }
    }
    return null;
  }
 else   if (lowerCaseValue.endsWith(".xml")) {
    File f=new File(stringValue);
    if (f.isFile()) {
      try {
        KXmlParser parser=new KXmlParser();
        parser.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES,true);
        parser.setInput(new FileReader(f));
        d=Drawable.createFromXml(context.getResources(),new BridgeXmlBlockParser(parser,context,isFramework));
        return d;
      }
 catch (      Exception e) {
        Bridge.getLog().error(null,"Failed to parse file " + value,e);
      }
    }
 else {
      Bridge.getLog().error(LayoutLog.TAG_BROKEN,String.format("File %s does not exist (or is not a file)",stringValue));
    }
    return null;
  }
 else {
    File bmpFile=new File(stringValue);
    if (bmpFile.isFile()) {
      try {
        Bitmap bitmap=Bridge.getCachedBitmap(stringValue,isFramework ? null : context.getProjectKey());
        if (bitmap == null) {
          ResourceDensity density=ResourceDensity.MEDIUM;
          if (value instanceof DensityBasedResourceValue) {
            density=((DensityBasedResourceValue)value).getResourceDensity();
          }
          bitmap=Bitmap_Delegate.createBitmap(bmpFile,false,density);
          Bridge.setCachedBitmap(stringValue,bitmap,isFramework ? null : context.getProjectKey());
        }
        return new BitmapDrawable(context.getResources(),bitmap);
      }
 catch (      IOException e) {
        Bridge.getLog().error(LayoutLog.TAG_RESOURCES_READ,"Failed lot load " + bmpFile.getAbsolutePath(),e);
      }
    }
 else {
      try {
        int color=getColor(stringValue);
        return new ColorDrawable(color);
      }
 catch (      NumberFormatException e) {
        Bridge.getLog().error(LayoutLog.TAG_RESOURCES_FORMAT,"Failed to convert " + stringValue + " into a drawable",e);
      }
    }
  }
  return null;
}
