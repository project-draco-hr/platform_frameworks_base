{
  byte[] newUserSalt=randomBytes(PBKDF2_SALT_SIZE);
  SecretKey userKey=buildPasswordKey(mEncryptPassword,newUserSalt,PBKDF2_HASH_ROUNDS);
  byte[] masterPw=new byte[256 / 8];
  mRng.nextBytes(masterPw);
  byte[] checksumSalt=randomBytes(PBKDF2_SALT_SIZE);
  Cipher c=Cipher.getInstance("AES/CBC/PKCS5Padding");
  SecretKeySpec masterKeySpec=new SecretKeySpec(masterPw,"AES");
  c.init(Cipher.ENCRYPT_MODE,masterKeySpec);
  OutputStream finalOutput=new CipherOutputStream(ofstream,c);
  headerbuf.append(ENCRYPTION_ALGORITHM_NAME);
  headerbuf.append('\n');
  headerbuf.append(byteArrayToHex(newUserSalt));
  headerbuf.append('\n');
  headerbuf.append(byteArrayToHex(checksumSalt));
  headerbuf.append('\n');
  headerbuf.append(PBKDF2_HASH_ROUNDS);
  headerbuf.append('\n');
  Cipher mkC=Cipher.getInstance("AES/CBC/PKCS5Padding");
  mkC.init(Cipher.ENCRYPT_MODE,userKey);
  byte[] IV=mkC.getIV();
  headerbuf.append(byteArrayToHex(IV));
  headerbuf.append('\n');
  IV=c.getIV();
  byte[] mk=masterKeySpec.getEncoded();
  byte[] checksum=makeKeyChecksum(masterKeySpec.getEncoded(),checksumSalt,PBKDF2_HASH_ROUNDS);
  ByteArrayOutputStream blob=new ByteArrayOutputStream(IV.length + mk.length + checksum.length+ 3);
  DataOutputStream mkOut=new DataOutputStream(blob);
  mkOut.writeByte(IV.length);
  mkOut.write(IV);
  mkOut.writeByte(mk.length);
  mkOut.write(mk);
  mkOut.writeByte(checksum.length);
  mkOut.write(checksum);
  mkOut.flush();
  byte[] encryptedMk=mkC.doFinal(blob.toByteArray());
  headerbuf.append(byteArrayToHex(encryptedMk));
  headerbuf.append('\n');
  return finalOutput;
}
