{
  super(observer);
  mUpdateSchedule=updateSchedule;
  mLatch=latch;
  mKeepRunning=new AtomicBoolean(true);
  mJob=runningJob;
  mPackages=new ArrayList<PackageInfo>(whichPackages.length);
  mBackupObserver=backupObserver;
  mUserInitiated=userInitiated;
  for (  String pkg : whichPackages) {
    try {
      PackageInfo info=mPackageManager.getPackageInfo(pkg,PackageManager.GET_SIGNATURES);
      if (!appIsEligibleForBackup(info.applicationInfo)) {
        if (MORE_DEBUG) {
          Slog.d(TAG,"Ignoring ineligible package " + pkg);
        }
        sendBackupOnResult(mBackupObserver,pkg,BackupManager.ERROR_BACKUP_NOT_ALLOWED);
        continue;
      }
 else       if (!appGetsFullBackup(info)) {
        if (MORE_DEBUG) {
          Slog.d(TAG,"Ignoring full-data backup of key/value participant " + pkg);
        }
        sendBackupOnResult(mBackupObserver,pkg,BackupManager.ERROR_BACKUP_NOT_ALLOWED);
        continue;
      }
 else       if (appIsStopped(info.applicationInfo)) {
        if (MORE_DEBUG) {
          Slog.d(TAG,"Ignoring stopped package " + pkg);
        }
        sendBackupOnResult(mBackupObserver,pkg,BackupManager.ERROR_BACKUP_NOT_ALLOWED);
        continue;
      }
      mPackages.add(info);
    }
 catch (    NameNotFoundException e) {
      Slog.i(TAG,"Requested package " + pkg + " not found; ignoring");
    }
  }
}
