{
  ParcelFileDescriptor[] enginePipes=null;
  ParcelFileDescriptor[] transportPipes=null;
  long backoff=0;
  int backupRunStatus=BackupManager.SUCCESS;
  try {
    if (!mEnabled || !mProvisioned) {
      if (DEBUG) {
        Slog.i(TAG,"full backup requested but e=" + mEnabled + " p="+ mProvisioned+ "; ignoring");
      }
      mUpdateSchedule=false;
      backupRunStatus=BackupManager.ERROR_BACKUP_NOT_ALLOWED;
      return;
    }
    IBackupTransport transport=getTransport(mCurrentTransport);
    if (transport == null) {
      Slog.w(TAG,"Transport not present; full data backup not performed");
      backupRunStatus=BackupManager.ERROR_TRANSPORT_ABORTED;
      return;
    }
    final int N=mPackages.size();
    final byte[] buffer=new byte[8192];
    for (int i=0; i < N; i++) {
      PackageInfo currentPackage=mPackages.get(i);
      String packageName=currentPackage.packageName;
      if (DEBUG) {
        Slog.i(TAG,"Initiating full-data transport backup of " + packageName);
      }
      EventLog.writeEvent(EventLogTags.FULL_BACKUP_PACKAGE,packageName);
      transportPipes=ParcelFileDescriptor.createPipe();
      int flags=mUserInitiated ? BackupTransport.FLAG_USER_INITIATED : 0;
      int backupPackageStatus=transport.performFullBackup(currentPackage,transportPipes[0],flags);
      if (backupPackageStatus == BackupTransport.TRANSPORT_OK) {
        transportPipes[0].close();
        transportPipes[0]=null;
        enginePipes=ParcelFileDescriptor.createPipe();
        SinglePackageBackupRunner backupRunner=new SinglePackageBackupRunner(enginePipes[1],currentPackage,transport);
        enginePipes[1].close();
        enginePipes[1]=null;
        (new Thread(backupRunner,"package-backup-bridge")).start();
        FileInputStream in=new FileInputStream(enginePipes[0].getFileDescriptor());
        FileOutputStream out=new FileOutputStream(transportPipes[1].getFileDescriptor());
        long totalRead=0;
        final long preflightResult=backupRunner.getPreflightResultBlocking();
        if (preflightResult < 0) {
          if (MORE_DEBUG) {
            Slog.d(TAG,"Backup error after preflight of package " + packageName + ": "+ preflightResult+ ", not running backup.");
          }
          backupPackageStatus=(int)preflightResult;
        }
 else {
          int nRead=0;
          do {
            if (!mKeepRunning.get()) {
              if (DEBUG_SCHEDULING) {
                Slog.i(TAG,"Full backup task told to stop");
              }
              break;
            }
            nRead=in.read(buffer);
            if (MORE_DEBUG) {
              Slog.v(TAG,"in.read(buffer) from app: " + nRead);
            }
            if (nRead > 0) {
              out.write(buffer,0,nRead);
              backupPackageStatus=transport.sendBackupData(nRead);
              totalRead+=nRead;
              if (mBackupObserver != null && preflightResult > 0) {
                sendBackupOnUpdate(mBackupObserver,packageName,new BackupProgress(preflightResult,totalRead));
              }
            }
          }
 while (nRead > 0 && backupPackageStatus == BackupTransport.TRANSPORT_OK);
          if (backupPackageStatus == BackupTransport.TRANSPORT_QUOTA_EXCEEDED) {
            long quota=transport.getBackupQuota(packageName,true);
            Slog.w(TAG,"Package hit quota limit in-flight " + packageName + ": "+ totalRead+ " of "+ quota);
            backupRunner.sendQuotaExceeded(totalRead,quota);
          }
        }
        if (!mKeepRunning.get()) {
          backupPackageStatus=BackupTransport.TRANSPORT_ERROR;
          transport.cancelFullBackup();
        }
 else {
          final int finishResult=transport.finishBackup();
          if (backupPackageStatus == BackupTransport.TRANSPORT_OK) {
            backupPackageStatus=finishResult;
          }
        }
        if (backupPackageStatus == BackupTransport.TRANSPORT_OK) {
          int backupRunnerResult=backupRunner.getBackupResultBlocking();
          if (backupRunnerResult != BackupTransport.TRANSPORT_OK) {
            backupPackageStatus=backupRunnerResult;
          }
        }
 else {
          if (MORE_DEBUG) {
            Slog.i(TAG,"Transport-level failure; cancelling agent work");
          }
        }
        if (MORE_DEBUG) {
          Slog.i(TAG,"Done delivering backup data: result=" + backupPackageStatus);
        }
        if (backupPackageStatus != BackupTransport.TRANSPORT_OK) {
          Slog.e(TAG,"Error " + backupPackageStatus + " backing up "+ packageName);
        }
        backoff=transport.requestFullBackupTime();
        if (DEBUG_SCHEDULING) {
          Slog.i(TAG,"Transport suggested backoff=" + backoff);
        }
      }
      if (mUpdateSchedule) {
        enqueueFullBackup(packageName,System.currentTimeMillis());
      }
      if (backupPackageStatus == BackupTransport.TRANSPORT_PACKAGE_REJECTED) {
        sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.ERROR_TRANSPORT_PACKAGE_REJECTED);
        if (DEBUG) {
          Slog.i(TAG,"Transport rejected backup of " + packageName + ", skipping");
        }
        EventLog.writeEvent(EventLogTags.FULL_BACKUP_AGENT_FAILURE,packageName,"transport rejected");
      }
 else       if (backupPackageStatus == BackupTransport.TRANSPORT_QUOTA_EXCEEDED) {
        sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.ERROR_TRANSPORT_QUOTA_EXCEEDED);
        if (DEBUG) {
          Slog.i(TAG,"Transport quota exceeded for package: " + packageName);
          EventLog.writeEvent(EventLogTags.FULL_BACKUP_QUOTA_EXCEEDED,packageName);
        }
      }
 else       if (backupPackageStatus == BackupTransport.AGENT_ERROR) {
        sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.ERROR_AGENT_FAILURE);
        Slog.w(TAG,"Application failure for package: " + packageName);
        EventLog.writeEvent(EventLogTags.BACKUP_AGENT_FAILURE,packageName);
        tearDownAgentAndKill(currentPackage.applicationInfo);
      }
 else       if (backupPackageStatus != BackupTransport.TRANSPORT_OK) {
        sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.ERROR_TRANSPORT_ABORTED);
        Slog.w(TAG,"Transport failed; aborting backup: " + backupPackageStatus);
        EventLog.writeEvent(EventLogTags.FULL_BACKUP_TRANSPORT_FAILURE);
        backupRunStatus=BackupManager.ERROR_TRANSPORT_ABORTED;
        return;
      }
 else {
        sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.SUCCESS);
        EventLog.writeEvent(EventLogTags.FULL_BACKUP_SUCCESS,packageName);
        logBackupComplete(packageName);
      }
      cleanUpPipes(transportPipes);
      cleanUpPipes(enginePipes);
    }
  }
 catch (  Exception e) {
    backupRunStatus=BackupManager.ERROR_TRANSPORT_ABORTED;
    Slog.w(TAG,"Exception trying full transport backup",e);
  }
 finally {
    if (DEBUG) {
      Slog.i(TAG,"Full backup completed with status: " + backupRunStatus);
    }
    sendBackupFinished(mBackupObserver,backupRunStatus);
    cleanUpPipes(transportPipes);
    cleanUpPipes(enginePipes);
    if (mJob != null) {
      mJob.finishBackupPass();
    }
synchronized (mQueueLock) {
      mRunningFullBackupTask=null;
    }
    mLatch.countDown();
    if (mUpdateSchedule) {
      scheduleNextFullBackupJob(backoff);
    }
    Slog.i(BackupManagerService.TAG,"Full data backup pass finished.");
    mWakelock.release();
  }
}
