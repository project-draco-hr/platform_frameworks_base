{
  final String packageName=mCurrentPackage.packageName;
  if (mCurrentPackage.applicationInfo.backupAgentName == null || "".equals(mCurrentPackage.applicationInfo.backupAgentName)) {
    if (MORE_DEBUG) {
      Slog.i(TAG,"Data exists for package " + packageName + " but app has no agent; skipping");
    }
    EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,packageName,"Package has no agent");
    executeNextState(UnifiedRestoreState.RUNNING_QUEUE);
    return;
  }
  Metadata metaInfo=mPmAgent.getRestoredMetadata(packageName);
  if (!BackupUtils.signaturesMatch(metaInfo.sigHashes,mCurrentPackage)) {
    Slog.w(TAG,"Signature mismatch restoring " + packageName);
    EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,packageName,"Signature mismatch");
    executeNextState(UnifiedRestoreState.RUNNING_QUEUE);
    return;
  }
  mAgent=bindToAgentSynchronous(mCurrentPackage.applicationInfo,IApplicationThread.BACKUP_MODE_INCREMENTAL);
  if (mAgent == null) {
    Slog.w(TAG,"Can't find backup agent for " + packageName);
    EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,packageName,"Restore agent missing");
    executeNextState(UnifiedRestoreState.RUNNING_QUEUE);
    return;
  }
  try {
    initiateOneRestore(mCurrentPackage,metaInfo.versionCode);
    ++mCount;
  }
 catch (  Exception e) {
    Slog.e(TAG,"Error when attempting restore: " + e.toString());
    keyValueAgentErrorCleanup();
    executeNextState(UnifiedRestoreState.RUNNING_QUEUE);
  }
}
