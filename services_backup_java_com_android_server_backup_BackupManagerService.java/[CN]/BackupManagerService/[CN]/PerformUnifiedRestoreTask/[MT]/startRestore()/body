{
  sendStartRestore(mAcceptSet.size());
  UnifiedRestoreState nextState=UnifiedRestoreState.RESTORE_FINISHED;
  try {
    String transportDir=mTransport.transportDirName();
    mStateDir=new File(mBaseStateDir,transportDir);
    File metadataDir=new File(mStateDir,"_metadata");
    metadataDir.mkdirs();
    File metadataFile=new File(metadataDir,Long.toHexString(mToken));
    try {
      mPmAgent=new PackageManagerBackupAgent(metadataFile);
    }
 catch (    IOException e) {
      if (MORE_DEBUG)       Slog.v(TAG,"Need to restore @pm@");
      PackageInfo pmPackage=new PackageInfo();
      pmPackage.packageName=PACKAGE_MANAGER_SENTINEL;
      mAcceptSet.add(0,pmPackage);
    }
    PackageInfo[] packages=mAcceptSet.toArray(new PackageInfo[0]);
    mStatus=mTransport.startRestore(mToken,packages);
    if (mStatus != BackupTransport.TRANSPORT_OK) {
      Slog.e(TAG,"Transport error " + mStatus + "; no restore possible");
      mStatus=BackupTransport.TRANSPORT_ERROR;
      nextState=UnifiedRestoreState.FINAL;
      return;
    }
    if (mPmAgent == null) {
      if (DEBUG) {
        Slog.v(TAG,"Need to fetch metadata for token " + Long.toHexString(mToken));
      }
      RestoreDescription desc=mTransport.nextRestorePackage();
      if (desc == null) {
        Slog.e(TAG,"No restore metadata available; halting");
        mStatus=BackupTransport.TRANSPORT_ERROR;
        nextState=UnifiedRestoreState.FINAL;
        return;
      }
      if (!PACKAGE_MANAGER_SENTINEL.equals(desc.getPackageName())) {
        Slog.e(TAG,"Required metadata but got " + desc.getPackageName());
        mStatus=BackupTransport.TRANSPORT_ERROR;
        nextState=UnifiedRestoreState.FINAL;
        return;
      }
      mCurrentPackage=new PackageInfo();
      mCurrentPackage.packageName=PACKAGE_MANAGER_SENTINEL;
      mPmAgent=new PackageManagerBackupAgent(mPackageManager,null);
      mAgent=IBackupAgent.Stub.asInterface(mPmAgent.onBind());
      if (MORE_DEBUG) {
        Slog.v(TAG,"initiating restore for PMBA");
      }
      initiateOneRestore(mCurrentPackage,0);
      if (!mPmAgent.hasMetadata()) {
        Slog.e(TAG,"No restore metadata available, so not restoring settings");
        EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,PACKAGE_MANAGER_SENTINEL,"Package manager restore metadata missing");
        mStatus=BackupTransport.TRANSPORT_ERROR;
        mBackupHandler.removeMessages(MSG_BACKUP_RESTORE_STEP,this);
        nextState=UnifiedRestoreState.FINAL;
        return;
      }
      if (DEBUG) {
        Slog.v(TAG,"Got metadata; caching and proceeding to restore");
      }
      try {
        mPmAgent.saveToDisk(metadataFile);
      }
 catch (      IOException e) {
        Slog.e(TAG,"Unable to write restored metadata");
        EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,PACKAGE_MANAGER_SENTINEL,"Unable to write restored metadata");
        mStatus=BackupTransport.TRANSPORT_ERROR;
        mBackupHandler.removeMessages(MSG_BACKUP_RESTORE_STEP,this);
        nextState=UnifiedRestoreState.FINAL;
        return;
      }
    }
 else {
      if (MORE_DEBUG)       Slog.v(TAG,"PMBA from cache; proceeding to run queue");
      nextState=UnifiedRestoreState.RUNNING_QUEUE;
    }
  }
 catch (  RemoteException e) {
    Slog.e(TAG,"Unable to contact transport for restore");
    mStatus=BackupTransport.TRANSPORT_ERROR;
    mBackupHandler.removeMessages(MSG_BACKUP_RESTORE_STEP,this);
    nextState=UnifiedRestoreState.FINAL;
    return;
  }
 finally {
    executeNextState(nextState);
  }
}
