{
  InputStream result=null;
  try {
    Cipher c=Cipher.getInstance("AES/CBC/PKCS5Padding");
    SecretKey userKey=buildPasswordKey(algorithm,mDecryptPassword,userSalt,rounds);
    byte[] IV=hexToByteArray(userIvHex);
    IvParameterSpec ivSpec=new IvParameterSpec(IV);
    c.init(Cipher.DECRYPT_MODE,new SecretKeySpec(userKey.getEncoded(),"AES"),ivSpec);
    byte[] mkCipher=hexToByteArray(masterKeyBlobHex);
    byte[] mkBlob=c.doFinal(mkCipher);
    int offset=0;
    int len=mkBlob[offset++];
    IV=Arrays.copyOfRange(mkBlob,offset,offset + len);
    offset+=len;
    len=mkBlob[offset++];
    byte[] mk=Arrays.copyOfRange(mkBlob,offset,offset + len);
    offset+=len;
    len=mkBlob[offset++];
    byte[] mkChecksum=Arrays.copyOfRange(mkBlob,offset,offset + len);
    byte[] calculatedCk=makeKeyChecksum(algorithm,mk,ckSalt,rounds);
    if (Arrays.equals(calculatedCk,mkChecksum)) {
      ivSpec=new IvParameterSpec(IV);
      c.init(Cipher.DECRYPT_MODE,new SecretKeySpec(mk,"AES"),ivSpec);
      result=new CipherInputStream(rawInStream,c);
    }
 else     if (doLog)     Slog.w(TAG,"Incorrect password");
  }
 catch (  InvalidAlgorithmParameterException e) {
    if (doLog)     Slog.e(TAG,"Needed parameter spec unavailable!",e);
  }
catch (  BadPaddingException e) {
    if (doLog)     Slog.w(TAG,"Incorrect password");
  }
catch (  IllegalBlockSizeException e) {
    if (doLog)     Slog.w(TAG,"Invalid block size in master key");
  }
catch (  NoSuchAlgorithmException e) {
    if (doLog)     Slog.e(TAG,"Needed decryption algorithm unavailable!");
  }
catch (  NoSuchPaddingException e) {
    if (doLog)     Slog.e(TAG,"Needed padding mechanism unavailable!");
  }
catch (  InvalidKeyException e) {
    if (doLog)     Slog.w(TAG,"Illegal password; aborting");
  }
  return result;
}
