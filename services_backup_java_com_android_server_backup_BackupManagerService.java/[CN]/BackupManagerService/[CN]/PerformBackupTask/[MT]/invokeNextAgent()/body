{
  mStatus=BackupTransport.TRANSPORT_OK;
  addBackupTrace("invoke q=" + mQueue.size());
  if (mQueue.isEmpty()) {
    if (DEBUG)     Slog.i(TAG,"queue now empty");
    executeNextState(BackupState.FINAL);
    return;
  }
  BackupRequest request=mQueue.get(0);
  mQueue.remove(0);
  Slog.d(TAG,"starting key/value backup of " + request);
  addBackupTrace("launch agent for " + request.packageName);
  try {
    mCurrentPackage=mPackageManager.getPackageInfo(request.packageName,PackageManager.GET_SIGNATURES);
    if (!appIsEligibleForBackup(mCurrentPackage.applicationInfo)) {
      Slog.i(TAG,"Package " + request.packageName + " no longer supports backup; skipping");
      addBackupTrace("skipping - not eligible, completion is noop");
      executeNextState(BackupState.RUNNING_QUEUE);
      return;
    }
    if (appGetsFullBackup(mCurrentPackage)) {
      Slog.i(TAG,"Package " + request.packageName + " requests full-data rather than key/value; skipping");
      addBackupTrace("skipping - fullBackupOnly, completion is noop");
      executeNextState(BackupState.RUNNING_QUEUE);
      return;
    }
    if ((mCurrentPackage.applicationInfo.flags & ApplicationInfo.FLAG_STOPPED) != 0) {
      addBackupTrace("skipping - stopped");
      executeNextState(BackupState.RUNNING_QUEUE);
      return;
    }
    IBackupAgent agent=null;
    try {
      mWakelock.setWorkSource(new WorkSource(mCurrentPackage.applicationInfo.uid));
      agent=bindToAgentSynchronous(mCurrentPackage.applicationInfo,IApplicationThread.BACKUP_MODE_INCREMENTAL);
      addBackupTrace("agent bound; a? = " + (agent != null));
      if (agent != null) {
        mAgentBinder=agent;
        mStatus=invokeAgentForBackup(request.packageName,agent,mTransport);
      }
 else {
        mStatus=BackupTransport.AGENT_ERROR;
      }
    }
 catch (    SecurityException ex) {
      Slog.d(TAG,"error in bind/backup",ex);
      mStatus=BackupTransport.AGENT_ERROR;
      addBackupTrace("agent SE");
    }
  }
 catch (  NameNotFoundException e) {
    Slog.d(TAG,"Package does not exist; skipping");
    addBackupTrace("no such package");
    mStatus=BackupTransport.AGENT_UNKNOWN;
  }
 finally {
    mWakelock.setWorkSource(null);
    if (mStatus != BackupTransport.TRANSPORT_OK) {
      BackupState nextState=BackupState.RUNNING_QUEUE;
      mAgentBinder=null;
      if (mStatus == BackupTransport.AGENT_ERROR) {
        if (MORE_DEBUG)         Slog.i(TAG,"Agent failure for " + request.packageName + " - restaging");
        dataChangedImpl(request.packageName);
        mStatus=BackupTransport.TRANSPORT_OK;
        if (mQueue.isEmpty())         nextState=BackupState.FINAL;
      }
 else       if (mStatus == BackupTransport.AGENT_UNKNOWN) {
        mStatus=BackupTransport.TRANSPORT_OK;
      }
 else {
        revertAndEndBackup();
        nextState=BackupState.FINAL;
      }
      executeNextState(nextState);
    }
 else {
      addBackupTrace("expecting completion/timeout callback");
    }
  }
}
