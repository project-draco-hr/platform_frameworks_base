{
  char[] temp=TextUtils.obtain(500);
  int length=text.length();
  boolean boring=true;
  outer:   for (int i=0; i < length; i+=500) {
    int j=i + 500;
    if (j > length)     j=length;
    TextUtils.getChars(text,i,j,temp,0);
    int n=j - i;
    for (int a=0; a < n; a++) {
      char c=temp[a];
      if (c == '\n' || c == '\t' || (c >= 0x0590 && c <= 0x08FF) || c == 0x200F || (c >= 0x202A && c <= 0x202E) || (c >= 0x2066 && c <= 0x2069) || (c >= 0xD800 && c <= 0xDFFF) || (c >= 0xFB1D && c <= 0xFDFF) || (c >= 0xFE70 && c <= 0xFEFE)) {
        boring=false;
        break outer;
      }
    }
    if (textDir != null && textDir.isRtl(temp,0,n)) {
      boring=false;
      break outer;
    }
  }
  TextUtils.recycle(temp);
  if (boring && text instanceof Spanned) {
    Spanned sp=(Spanned)text;
    Object[] styles=sp.getSpans(0,length,ParagraphStyle.class);
    if (styles.length > 0) {
      boring=false;
    }
  }
  if (boring) {
    Metrics fm=metrics;
    if (fm == null) {
      fm=new Metrics();
    }
    TextLine line=TextLine.obtain();
    line.set(paint,text,0,length,Layout.DIR_LEFT_TO_RIGHT,Layout.DIRS_ALL_LEFT_TO_RIGHT,false,null);
    fm.width=(int)Math.ceil(line.metrics(fm));
    TextLine.recycle(line);
    return fm;
  }
 else {
    return null;
  }
}
