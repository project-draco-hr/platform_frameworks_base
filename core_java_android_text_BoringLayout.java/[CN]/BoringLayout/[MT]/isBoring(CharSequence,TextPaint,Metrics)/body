{
  char[] temp=TextUtils.obtain(500);
  int len=text.length();
  boolean boring=true;
  outer:   for (int i=0; i < len; i+=500) {
    int j=i + 500;
    if (j > len)     j=len;
    TextUtils.getChars(text,i,j,temp,0);
    int n=j - i;
    for (int a=0; a < n; a++) {
      char c=temp[a];
      if (c == '\n' || c == '\t' || c >= FIRST_RIGHT_TO_LEFT) {
        boring=false;
        break outer;
      }
    }
  }
  TextUtils.recycle(temp);
  if (boring && text instanceof Spanned) {
    Spanned sp=(Spanned)text;
    Object[] styles=sp.getSpans(0,text.length(),ParagraphStyle.class);
    if (styles.length > 0) {
      boring=false;
    }
  }
  if (boring) {
    Metrics fm=metrics;
    if (fm == null) {
      fm=new Metrics();
    }
    int wid;
synchronized (sTemp) {
      wid=(int)(FloatMath.ceil(Styled.measureText(paint,sTemp,text,0,text.length(),fm)));
    }
    fm.width=wid;
    return fm;
  }
 else {
    return null;
  }
}
