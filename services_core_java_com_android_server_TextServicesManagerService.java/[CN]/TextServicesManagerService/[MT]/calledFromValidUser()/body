{
  final int uid=Binder.getCallingUid();
  final int userId=UserHandle.getUserId(uid);
  if (DBG) {
    Slog.d(TAG,"--- calledFromForegroundUserOrSystemProcess ? " + "calling uid = " + uid + " system uid = "+ Process.SYSTEM_UID+ " calling userId = "+ userId+ ", foreground user id = "+ mSettings.getCurrentUserId()+ ", calling pid = "+ Binder.getCallingPid());
    try {
      final String[] packageNames=AppGlobals.getPackageManager().getPackagesForUid(uid);
      for (int i=0; i < packageNames.length; ++i) {
        if (DBG) {
          Slog.d(TAG,"--- process name for " + uid + " = "+ packageNames[i]);
        }
      }
    }
 catch (    RemoteException e) {
    }
  }
  if (uid == Process.SYSTEM_UID || userId == mSettings.getCurrentUserId()) {
    return true;
  }
  final boolean isCurrentProfile=mSettings.isCurrentProfile(userId);
  if (DBG) {
    Slog.d(TAG,"--- userId = " + userId + " isCurrentProfile = "+ isCurrentProfile);
  }
  if (mSettings.isCurrentProfile(userId)) {
    final SpellCheckerInfo spellCheckerInfo=getCurrentSpellCheckerWithoutVerification();
    if (spellCheckerInfo != null) {
      final ServiceInfo serviceInfo=spellCheckerInfo.getServiceInfo();
      final boolean isSystemSpellChecker=(serviceInfo.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0;
      if (DBG) {
        Slog.d(TAG,"--- current spell checker = " + spellCheckerInfo.getPackageName() + " isSystem = "+ isSystemSpellChecker);
      }
      if (isSystemSpellChecker) {
        return true;
      }
    }
  }
  if (DBG) {
    Slog.d(TAG,"--- IPC from userId:" + userId + " is being ignored. \n"+ getStackTrace());
  }
  return false;
}
