{
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println("Permission Denial: can't dump TextServicesManagerService from from pid=" + Binder.getCallingPid() + ", uid="+ Binder.getCallingUid());
    return;
  }
synchronized (mSpellCheckerMap) {
    pw.println("Current Text Services Manager state:");
    pw.println("  Spell Checkers:");
    int spellCheckerIndex=0;
    for (    final SpellCheckerInfo info : mSpellCheckerMap.values()) {
      pw.println("  Spell Checker #" + spellCheckerIndex);
      info.dump(pw,"    ");
      ++spellCheckerIndex;
    }
    pw.println("");
    pw.println("  Spell Checker Bind Groups:");
    for (    final Map.Entry<String,SpellCheckerBindGroup> ent : mSpellCheckerBindGroups.entrySet()) {
      final SpellCheckerBindGroup grp=ent.getValue();
      pw.println("    " + ent.getKey() + " "+ grp+ ":");
      pw.println("      " + "mInternalConnection=" + grp.mInternalConnection);
      pw.println("      " + "mSpellChecker=" + grp.mSpellChecker);
      pw.println("      " + "mBound=" + grp.mBound + " mConnected="+ grp.mConnected);
      final int N=grp.mListeners.size();
      for (int i=0; i < N; i++) {
        final InternalDeathRecipient listener=grp.mListeners.get(i);
        pw.println("      " + "Listener #" + i + ":");
        pw.println("        " + "mTsListener=" + listener.mTsListener);
        pw.println("        " + "mScListener=" + listener.mScListener);
        pw.println("        " + "mGroup=" + listener.mGroup);
        pw.println("        " + "mScLocale=" + listener.mScLocale + " mUid="+ listener.mUid);
      }
    }
    pw.println("");
    pw.println("  mSettings:");
    mSettings.dumpLocked(pw,"    ");
  }
}
