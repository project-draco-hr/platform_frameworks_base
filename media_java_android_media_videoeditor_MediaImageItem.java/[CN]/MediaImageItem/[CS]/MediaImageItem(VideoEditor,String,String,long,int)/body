{
  super(editor,mediaItemId,filename,renderingMode);
  mMANativeHelper=((VideoEditorImpl)editor).getNativeContext();
  mVideoEditor=((VideoEditorImpl)editor);
  try {
    final Properties properties=mMANativeHelper.getMediaProperties(filename);
switch (mMANativeHelper.getFileType(properties.fileType)) {
case MediaProperties.FILE_JPEG:
case MediaProperties.FILE_PNG:
{
        break;
      }
default :
{
      throw new IllegalArgumentException("Unsupported Input File Type");
    }
}
}
 catch (Exception e) {
throw new IllegalArgumentException("Unsupported file or file not found: " + filename);
}
mFileName=filename;
final BitmapFactory.Options dbo=new BitmapFactory.Options();
dbo.inJustDecodeBounds=true;
BitmapFactory.decodeFile(filename,dbo);
mWidth=dbo.outWidth;
mHeight=dbo.outHeight;
mDurationMs=durationMs;
mDecodedFilename=String.format(mMANativeHelper.getProjectPath() + "/" + "decoded"+ getId()+ ".rgb");
try {
mAspectRatio=mMANativeHelper.getAspectRatio(mWidth,mHeight);
}
 catch (IllegalArgumentException e) {
throw new IllegalArgumentException("Null width and height");
}
mGeneratedClipHeight=0;
mGeneratedClipWidth=0;
final Pair<Integer,Integer>[] resolutions=MediaProperties.getSupportedResolutions(mAspectRatio);
final Pair<Integer,Integer> maxResolution=resolutions[resolutions.length - 1];
final Bitmap imageBitmap;
if (mHeight > maxResolution.second) {
imageBitmap=scaleImage(filename,maxResolution.first,maxResolution.second);
mScaledFilename=String.format(mMANativeHelper.getProjectPath() + "/" + "scaled"+ getId()+ ".JPG");
if (!((new File(mScaledFilename)).exists())) {
  super.mRegenerateClip=true;
  final FileOutputStream f1=new FileOutputStream(mScaledFilename);
  imageBitmap.compress(Bitmap.CompressFormat.JPEG,50,f1);
  f1.close();
}
mScaledWidth=(imageBitmap.getWidth() >> 1) << 1;
mScaledHeight=(imageBitmap.getHeight() >> 1) << 1;
}
 else {
mScaledFilename=filename;
mScaledWidth=(mWidth >> 1) << 1;
mScaledHeight=(mHeight >> 1) << 1;
imageBitmap=BitmapFactory.decodeFile(mScaledFilename);
}
int newWidth=mScaledWidth;
int newHeight=mScaledHeight;
if (!((new File(mDecodedFilename)).exists())) {
final FileOutputStream fl=new FileOutputStream(mDecodedFilename);
final DataOutputStream dos=new DataOutputStream(fl);
final int[] framingBuffer=new int[newWidth];
final ByteBuffer byteBuffer=ByteBuffer.allocate(framingBuffer.length * 4);
IntBuffer intBuffer;
final byte[] array=byteBuffer.array();
int tmp=0;
while (tmp < newHeight) {
  imageBitmap.getPixels(framingBuffer,0,mScaledWidth,0,tmp,newWidth,1);
  intBuffer=byteBuffer.asIntBuffer();
  intBuffer.put(framingBuffer,0,newWidth);
  dos.write(array);
  tmp+=1;
}
fl.close();
}
imageBitmap.recycle();
}
