{
  final BitmapFactory.Options dbo=new BitmapFactory.Options();
  dbo.inJustDecodeBounds=true;
  BitmapFactory.decodeFile(filename,dbo);
  final int nativeWidth=dbo.outWidth;
  final int nativeHeight=dbo.outHeight;
  if (Log.isLoggable(TAG,Log.DEBUG)) {
    Log.d(TAG,"generateThumbnail: Input: " + nativeWidth + "x"+ nativeHeight+ ", resize to: "+ width+ "x"+ height);
  }
  final Bitmap srcBitmap;
  float bitmapWidth, bitmapHeight;
  if (nativeWidth > width || nativeHeight > height) {
    float dx=((float)nativeWidth) / ((float)width);
    float dy=((float)nativeHeight) / ((float)height);
    if (dx > dy) {
      bitmapWidth=width;
      bitmapHeight=Math.round(nativeHeight / dx);
    }
 else {
      bitmapWidth=Math.round(nativeWidth / dy);
      bitmapHeight=height;
    }
    if (nativeWidth / bitmapWidth > 1) {
      final BitmapFactory.Options options=new BitmapFactory.Options();
      options.inSampleSize=nativeWidth / (int)bitmapWidth;
      srcBitmap=BitmapFactory.decodeFile(filename,options);
    }
 else {
      srcBitmap=BitmapFactory.decodeFile(filename);
    }
  }
 else {
    bitmapWidth=width;
    bitmapHeight=height;
    srcBitmap=BitmapFactory.decodeFile(filename);
  }
  if (srcBitmap == null) {
    Log.e(TAG,"generateThumbnail: Cannot decode image bytes");
    throw new IOException("Cannot decode file: " + mFilename);
  }
  final Bitmap bitmap=Bitmap.createBitmap((int)bitmapWidth,(int)bitmapHeight,Bitmap.Config.ARGB_8888);
  final Canvas canvas=new Canvas(bitmap);
  canvas.drawBitmap(srcBitmap,new Rect(0,0,srcBitmap.getWidth(),srcBitmap.getHeight()),new Rect(0,0,(int)bitmapWidth,(int)bitmapHeight),sResizePaint);
  srcBitmap.recycle();
  return bitmap;
}
