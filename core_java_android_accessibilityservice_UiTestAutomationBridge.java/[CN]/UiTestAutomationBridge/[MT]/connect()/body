{
  if (isConnected()) {
    throw new IllegalStateException("Already connected.");
  }
  HandlerThread handlerThread=new HandlerThread("UiTestAutomationBridge");
  handlerThread.start();
  Looper looper=handlerThread.getLooper();
  mListener=new IEventListenerWrapper(null,looper,new Callbacks(){
    @Override public void onServiceConnected(){
    }
    @Override public void onInterrupt(){
      UiTestAutomationBridge.this.onInterrupt();
    }
    @Override public void onAccessibilityEvent(    AccessibilityEvent event){
synchronized (mLock) {
        while (true) {
          if (!mWaitingForEventDelivery) {
            break;
          }
          if (!mUnprocessedEventAvailable) {
            mUnprocessedEventAvailable=true;
            mLastEvent=AccessibilityEvent.obtain(event);
            mLock.notifyAll();
            break;
          }
          try {
            mLock.wait();
          }
 catch (          InterruptedException ie) {
          }
        }
      }
      UiTestAutomationBridge.this.onAccessibilityEvent(event);
    }
    @Override public void onSetConnectionId(    int connectionId){
synchronized (mLock) {
        mConnectionId=connectionId;
        mLock.notifyAll();
      }
    }
  }
);
  final IAccessibilityManager manager=IAccessibilityManager.Stub.asInterface(ServiceManager.getService(Context.ACCESSIBILITY_SERVICE));
  final AccessibilityServiceInfo info=new AccessibilityServiceInfo();
  info.eventTypes=AccessibilityEvent.TYPES_ALL_MASK;
  info.feedbackType=AccessibilityServiceInfo.FEEDBACK_GENERIC;
  try {
    manager.registerUiTestAutomationService(mListener,info);
  }
 catch (  RemoteException re) {
    throw new IllegalStateException("Cound not register UiAutomationService.",re);
  }
synchronized (mLock) {
    final long startTimeMillis=SystemClock.uptimeMillis();
    while (true) {
      if (isConnected()) {
        return;
      }
      final long elapsedTimeMillis=SystemClock.uptimeMillis() - startTimeMillis;
      final long remainingTimeMillis=TIMEOUT_REGISTER_SERVICE - elapsedTimeMillis;
      if (remainingTimeMillis <= 0) {
        throw new IllegalStateException("Cound not register UiAutomationService.");
      }
      try {
        mLock.wait(remainingTimeMillis);
      }
 catch (      InterruptedException ie) {
      }
    }
  }
}
