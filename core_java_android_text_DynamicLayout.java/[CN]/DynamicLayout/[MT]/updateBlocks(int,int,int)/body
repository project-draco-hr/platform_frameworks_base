{
  int firstBlock=-1;
  int lastBlock=-1;
  for (int i=0; i < mNumberOfBlocks; i++) {
    if (mBlockEnds[i] >= startLine) {
      firstBlock=i;
      break;
    }
  }
  for (int i=firstBlock; i < mNumberOfBlocks; i++) {
    if (mBlockEnds[i] >= endLine) {
      lastBlock=i;
      break;
    }
  }
  final int lastBlockEndLine=mBlockEnds[lastBlock];
  boolean createBlockBefore=startLine > (firstBlock == 0 ? 0 : mBlockEnds[firstBlock - 1] + 1);
  boolean createBlock=newLineCount > 0;
  boolean createBlockAfter=endLine < mBlockEnds[lastBlock];
  int numAddedBlocks=0;
  if (createBlockBefore)   numAddedBlocks++;
  if (createBlock)   numAddedBlocks++;
  if (createBlockAfter)   numAddedBlocks++;
  final int numRemovedBlocks=lastBlock - firstBlock + 1;
  final int newNumberOfBlocks=mNumberOfBlocks + numAddedBlocks - numRemovedBlocks;
  if (newNumberOfBlocks == 0) {
    mBlockEnds[0]=0;
    mBlockIndices[0]=INVALID_BLOCK_INDEX;
    mNumberOfBlocks=1;
    return;
  }
  if (newNumberOfBlocks > mBlockEnds.length) {
    final int newSize=ArrayUtils.idealIntArraySize(newNumberOfBlocks);
    int[] blockEnds=new int[newSize];
    int[] blockIndices=new int[newSize];
    System.arraycopy(mBlockEnds,0,blockEnds,0,firstBlock);
    System.arraycopy(mBlockIndices,0,blockIndices,0,firstBlock);
    System.arraycopy(mBlockEnds,lastBlock + 1,blockEnds,firstBlock + numAddedBlocks,mNumberOfBlocks - lastBlock - 1);
    System.arraycopy(mBlockIndices,lastBlock + 1,blockIndices,firstBlock + numAddedBlocks,mNumberOfBlocks - lastBlock - 1);
    mBlockEnds=blockEnds;
    mBlockIndices=blockIndices;
  }
 else {
    System.arraycopy(mBlockEnds,lastBlock + 1,mBlockEnds,firstBlock + numAddedBlocks,mNumberOfBlocks - lastBlock - 1);
    System.arraycopy(mBlockIndices,lastBlock + 1,mBlockIndices,firstBlock + numAddedBlocks,mNumberOfBlocks - lastBlock - 1);
  }
  mNumberOfBlocks=newNumberOfBlocks;
  final int deltaLines=newLineCount - (endLine - startLine + 1);
  for (int i=firstBlock + numAddedBlocks; i < mNumberOfBlocks; i++) {
    mBlockEnds[i]+=deltaLines;
  }
  int blockIndex=firstBlock;
  if (createBlockBefore) {
    mBlockEnds[blockIndex]=startLine - 1;
    mBlockIndices[blockIndex]=INVALID_BLOCK_INDEX;
    blockIndex++;
  }
  if (createBlock) {
    mBlockEnds[blockIndex]=startLine + newLineCount - 1;
    mBlockIndices[blockIndex]=INVALID_BLOCK_INDEX;
    blockIndex++;
  }
  if (createBlockAfter) {
    mBlockEnds[blockIndex]=lastBlockEndLine + deltaLines;
    mBlockIndices[blockIndex]=INVALID_BLOCK_INDEX;
  }
}
