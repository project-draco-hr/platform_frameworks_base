{
  TextView view=mBinder.getTextView();
  assertEquals(mBindingObject.getAutoLink(),view.getAutoLinkMask());
  assertEquals(mBindingObject.getDrawablePadding(),view.getCompoundDrawablePadding());
  assertEquals(mBindingObject.getTextSize(),view.getTextSize());
  assertEquals(mBindingObject.getTextColorHint(),view.getHintTextColors().getDefaultColor());
  assertEquals(mBindingObject.getTextColorLink(),view.getLinkTextColors().getDefaultColor());
  assertEquals(mBindingObject.isAutoText(),isAutoTextEnabled(view));
  assertEquals(mBindingObject.getCapitalize(),getCapitalization(view));
  assertEquals(mBindingObject.getImeActionLabel(),view.getImeActionLabel());
  assertEquals(mBindingObject.getImeActionId(),view.getImeActionId());
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
    assertEquals(mBindingObject.getTextColorHighlight(),view.getHighlightColor());
    assertEquals(mBindingObject.getLineSpacingExtra(),view.getLineSpacingExtra());
    assertEquals(mBindingObject.getLineSpacingMultiplier(),view.getLineSpacingMultiplier());
    assertEquals(mBindingObject.getShadowColor(),view.getShadowColor());
    assertEquals(mBindingObject.getShadowDx(),view.getShadowDx());
    assertEquals(mBindingObject.getShadowDy(),view.getShadowDy());
    assertEquals(mBindingObject.getShadowRadius(),view.getShadowRadius());
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
      assertEquals(mBindingObject.getMaxLength(),getMaxLength(view));
    }
  }
  changeValues();
  assertEquals(mBindingObject.getAutoLink(),view.getAutoLinkMask());
  assertEquals(mBindingObject.getDrawablePadding(),view.getCompoundDrawablePadding());
  assertEquals(mBindingObject.getTextSize(),view.getTextSize());
  assertEquals(mBindingObject.getTextColorHint(),view.getHintTextColors().getDefaultColor());
  assertEquals(mBindingObject.getTextColorLink(),view.getLinkTextColors().getDefaultColor());
  assertEquals(mBindingObject.isAutoText(),isAutoTextEnabled(view));
  assertEquals(mBindingObject.getCapitalize(),getCapitalization(view));
  assertEquals(mBindingObject.getImeActionLabel(),view.getImeActionLabel());
  assertEquals(mBindingObject.getImeActionId(),view.getImeActionId());
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
    assertEquals(mBindingObject.getTextColorHighlight(),view.getHighlightColor());
    assertEquals(mBindingObject.getLineSpacingExtra(),view.getLineSpacingExtra());
    assertEquals(mBindingObject.getLineSpacingMultiplier(),view.getLineSpacingMultiplier());
    assertEquals(mBindingObject.getShadowColor(),view.getShadowColor());
    assertEquals(mBindingObject.getShadowDx(),view.getShadowDx());
    assertEquals(mBindingObject.getShadowDy(),view.getShadowDy());
    assertEquals(mBindingObject.getShadowRadius(),view.getShadowRadius());
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
      assertEquals(mBindingObject.getMaxLength(),getMaxLength(view));
    }
  }
  runTestOnUiThread(new Runnable(){
    @Override public void run(){
      mBindingObject.setCapitalize(TextKeyListener.Capitalize.CHARACTERS);
      mBinder.executePendingBindings();
    }
  }
);
  assertEquals(mBindingObject.getCapitalize(),getCapitalization(view));
  runTestOnUiThread(new Runnable(){
    @Override public void run(){
      mBindingObject.setCapitalize(TextKeyListener.Capitalize.WORDS);
      mBinder.executePendingBindings();
    }
  }
);
  assertEquals(mBindingObject.getCapitalize(),getCapitalization(view));
}
