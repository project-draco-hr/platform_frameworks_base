{
  InstallParams ip=sampleInstallFromRawResource(PackageManager.INSTALL_EXTERNAL | PackageManager.INSTALL_REPLACE_EXISTING,false);
  if (localLOGV)   Log.i(TAG,"Installed pkg on sdcard");
  boolean origState=getMediaState();
  SdMountReceiver receiver=new SdMountReceiver(new String[]{ip.pkg.packageName});
  try {
    if (localLOGV)     Log.i(TAG,"Unmounting media");
    assertTrue(unmountMedia());
    if (localLOGV)     Log.i(TAG,"Unmounted media");
    try {
      if (localLOGV)       Log.i(TAG,"Sleeping for 10 second");
      Thread.sleep(10 * 1000);
    }
 catch (    InterruptedException e) {
      failStr(e);
    }
    PackageManager pm=getPm();
    mContext.registerReceiver(receiver,receiver.filter);
synchronized (receiver) {
      if (localLOGV)       Log.i(TAG,"Mounting media");
      assertTrue(mountMedia());
      if (localLOGV)       Log.i(TAG,"Mounted media");
      if (localLOGV)       Log.i(TAG,"Waiting for notification");
      long waitTime=0;
      waitTime=0;
      while ((!receiver.isDone()) && (waitTime < MAX_WAIT_TIME)) {
        receiver.wait(WAIT_TIME_INCR);
        waitTime+=WAIT_TIME_INCR;
      }
      if (!receiver.isDone()) {
        failStr("Timed out waiting for EXTERNAL_APPLICATIONS notification");
      }
      return receiver.received;
    }
  }
 catch (  InterruptedException e) {
    failStr(e);
    return false;
  }
 finally {
    mContext.unregisterReceiver(receiver);
    if (origState) {
      mountMedia();
    }
 else {
      unmountMedia();
    }
    if (localLOGV)     Log.i(TAG,"Cleaning up install");
    cleanUpInstall(ip);
  }
}
