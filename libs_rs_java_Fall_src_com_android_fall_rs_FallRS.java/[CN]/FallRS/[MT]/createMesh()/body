{
  final RenderScript rs=mRS;
  rs.triangleMeshBegin(Element.XYZ_F32,Element.INDEX_16);
  int wResolution;
  int hResolution;
  final int width=mWidth;
  final int height=mHeight;
  if (width < height) {
    wResolution=MESH_RESOLUTION;
    hResolution=(int)(MESH_RESOLUTION * height / (float)width);
  }
 else {
    wResolution=(int)(MESH_RESOLUTION * width / (float)height);
    hResolution=MESH_RESOLUTION;
  }
  final float quadWidth=width / (float)wResolution;
  final float quadHeight=height / (float)hResolution;
  for (int y=0; y <= hResolution; y++) {
    final float yOffset=y * quadHeight;
    for (int x=0; x <= wResolution; x++) {
      rs.triangleMeshAddVertex_XYZ(x * quadWidth,yOffset,0.0f);
    }
  }
  for (int y=0; y < hResolution; y++) {
    for (int x=0; x < wResolution; x++) {
      final int index=y * (wResolution + 1) + x;
      final int iWR1=index + wResolution + 1;
      rs.triangleMeshAddTriangle(index,index + 1,iWR1);
      rs.triangleMeshAddTriangle(index + 1,iWR1,iWR1 + 1);
    }
  }
  mMesh=rs.triangleMeshCreate();
  mMesh.setName("mesh");
}
