{
  final int rippleMapSize=(mMeshWidth + 2) * (mMeshHeight + 2);
  final int[] data=new int[9];
  mState=Allocation.createSized(mRS,USER_I32,data.length);
  data[RSID_STATE_FRAMECOUNT]=0;
  data[RSID_STATE_WIDTH]=mWidth;
  data[RSID_STATE_HEIGHT]=mHeight;
  data[RSID_STATE_MESH_WIDTH]=mMeshWidth;
  data[RSID_STATE_MESH_HEIGHT]=mMeshHeight;
  data[RSID_STATE_RIPPLE_MAP_SIZE]=rippleMapSize;
  data[RSID_STATE_RIPPLE_INDEX]=0;
  data[RSID_STATE_DROP_X]=mMeshWidth / 2;
  data[RSID_STATE_DROP_Y]=mMeshHeight / 2;
  mState.data(data);
  final int[] rippleMap=new int[rippleMapSize * 2];
  mRippleMap=Allocation.createSized(mRS,USER_I32,rippleMap.length);
  final int[] refractionMap=new int[513];
  float ir=1.0f / 1.333f;
  for (int i=0; i < refractionMap.length; i++) {
    float d=(float)Math.tan(Math.asin(Math.sin(Math.atan(i * (1.0f / 256.0f))) * ir));
    refractionMap[i]=(int)Math.floor(d * (1 << 16) + 0.5f);
  }
  mRefractionMap=Allocation.createSized(mRS,USER_I32,refractionMap.length);
  mRefractionMap.data(refractionMap);
}
