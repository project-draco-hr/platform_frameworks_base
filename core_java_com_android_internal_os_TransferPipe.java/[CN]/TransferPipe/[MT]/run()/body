{
  final byte[] buffer=new byte[1024];
  final FileInputStream fis=new FileInputStream(getReadFd().getFileDescriptor());
  final FileOutputStream fos=new FileOutputStream(mOutFd);
  if (DEBUG)   Slog.i(TAG,"Ready to read pipe...");
  byte[] bufferPrefix=null;
  boolean needPrefix=true;
  if (mBufferPrefix != null) {
    bufferPrefix=mBufferPrefix.getBytes();
  }
  int size;
  try {
    while ((size=fis.read(buffer)) > 0) {
      if (DEBUG)       Slog.i(TAG,"Got " + size + " bytes");
      if (bufferPrefix == null) {
        fos.write(buffer,0,size);
      }
 else {
        int start=0;
        for (int i=0; i < size; i++) {
          if (buffer[i] != '\n') {
            if (i > start) {
              fos.write(buffer,start,i - start);
            }
            start=i;
            if (needPrefix) {
              fos.write(bufferPrefix);
              needPrefix=false;
            }
            do {
              i++;
            }
 while (i < size && buffer[i] != '\n');
            if (i < size) {
              needPrefix=true;
            }
          }
        }
        if (size > start) {
          fos.write(buffer,start,size - start);
        }
      }
    }
    if (DEBUG)     Slog.i(TAG,"End of pipe: size=" + size);
    if (mThread.isInterrupted()) {
      if (DEBUG)       Slog.i(TAG,"Interrupted!");
    }
  }
 catch (  IOException e) {
synchronized (this) {
      mFailure=e.toString();
      notifyAll();
      return;
    }
  }
synchronized (this) {
    mComplete=true;
    notifyAll();
  }
}
