{
  ArrayList<ActivityManager.RunningServiceInfo> res=new ArrayList<ActivityManager.RunningServiceInfo>();
  final int uid=Binder.getCallingUid();
  final long ident=Binder.clearCallingIdentity();
  try {
    if (ActivityManager.checkUidPermission(android.Manifest.permission.INTERACT_ACROSS_USERS_FULL,uid) == PackageManager.PERMISSION_GRANTED) {
      int[] users=mAm.getUsersLocked();
      for (int ui=0; ui < users.length && res.size() < maxNum; ui++) {
        if (mServiceMap.getAllServices(users[ui]).size() > 0) {
          Iterator<ServiceRecord> it=mServiceMap.getAllServices(users[ui]).iterator();
          while (it.hasNext() && res.size() < maxNum) {
            res.add(makeRunningServiceInfoLocked(it.next()));
          }
        }
      }
      for (int i=0; i < mRestartingServices.size() && res.size() < maxNum; i++) {
        ServiceRecord r=mRestartingServices.get(i);
        ActivityManager.RunningServiceInfo info=makeRunningServiceInfoLocked(r);
        info.restarting=r.nextRestartTime;
        res.add(info);
      }
    }
 else {
      int userId=UserHandle.getUserId(uid);
      if (mServiceMap.getAllServices(userId).size() > 0) {
        Iterator<ServiceRecord> it=mServiceMap.getAllServices(userId).iterator();
        while (it.hasNext() && res.size() < maxNum) {
          res.add(makeRunningServiceInfoLocked(it.next()));
        }
      }
      for (int i=0; i < mRestartingServices.size() && res.size() < maxNum; i++) {
        ServiceRecord r=mRestartingServices.get(i);
        if (r.userId == userId) {
          ActivityManager.RunningServiceInfo info=makeRunningServiceInfoLocked(r);
          info.restarting=r.nextRestartTime;
          res.add(info);
        }
      }
    }
  }
  finally {
    Binder.restoreCallingIdentity(ident);
  }
  return res;
}
