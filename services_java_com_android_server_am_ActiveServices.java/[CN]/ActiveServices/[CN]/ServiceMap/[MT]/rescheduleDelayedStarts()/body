{
  removeMessages(MSG_BG_START_TIMEOUT);
  final long now=SystemClock.uptimeMillis();
  for (int i=0, N=mStartingBackground.size(); i < N; i++) {
    ServiceRecord r=mStartingBackground.get(i);
    if (r.startingBgTimeout <= now) {
      Slog.i(TAG,"Waited long enough for: " + r);
      mStartingBackground.remove(i);
      N--;
    }
  }
  while (mDelayedStartList.size() > 0 && mStartingBackground.size() < mMaxStartingBackground) {
    ServiceRecord r=mDelayedStartList.remove(0);
    if (DEBUG_DELAYED_STARTS)     Slog.v(TAG,"REM FR DELAY LIST (exec next): " + r);
    if (r.pendingStarts.size() <= 0) {
      Slog.w(TAG,"**** NO PENDING STARTS! " + r + " startReq="+ r.startRequested+ " delayedStop="+ r.delayedStop);
    }
    if (DEBUG_DELAYED_SERVICE) {
      if (mDelayedStartList.size() > 0) {
        Slog.v(TAG,"Remaining delayed list:");
        for (int i=0; i < mDelayedStartList.size(); i++) {
          Slog.v(TAG,"  #" + i + ": "+ mDelayedStartList.get(i));
        }
      }
    }
    r.delayed=false;
    startServiceInnerLocked(this,r.pendingStarts.get(0).intent,r,false,true);
  }
  if (mStartingBackground.size() > 0) {
    ServiceRecord next=mStartingBackground.get(0);
    long when=next.startingBgTimeout > now ? next.startingBgTimeout : now;
    if (DEBUG_DELAYED_SERVICE)     Slog.v(TAG,"Top bg start is " + next + ", can delay others up to "+ when);
    Message msg=obtainMessage(MSG_BG_START_TIMEOUT);
    sendMessageAtTime(msg,when);
  }
  if (mStartingBackground.size() < mMaxStartingBackground) {
    mAm.backgroundServicesFinishedLocked(mUserId);
  }
}
