{
switch (message.what) {
case CMD_NETWORK_LINGER:
    log("Lingering");
  transitionTo(mLingeringState);
return HANDLED;
case CMD_NETWORK_CONNECTED:
transitionTo(mEvaluatingState);
return HANDLED;
case CMD_NETWORK_DISCONNECTED:
if (mLaunchCaptivePortalAppBroadcastReceiver != null) {
mContext.unregisterReceiver(mLaunchCaptivePortalAppBroadcastReceiver);
mLaunchCaptivePortalAppBroadcastReceiver=null;
}
quit();
return HANDLED;
case CMD_FORCE_REEVALUATION:
case CMD_CAPTIVE_PORTAL_RECHECK:
log("Forcing reevaluation for UID " + message.arg1);
mUidResponsibleForReeval=message.arg1;
transitionTo(mEvaluatingState);
return HANDLED;
case CMD_CAPTIVE_PORTAL_APP_FINISHED:
if (!mCaptivePortalLoggedInResponseToken.equals((String)message.obj)) return HANDLED;
log("CaptivePortal App responded with " + message.arg1);
mCaptivePortalLoggedInResponseToken=String.valueOf(new Random().nextLong());
switch (message.arg1) {
case ConnectivityManager.CAPTIVE_PORTAL_APP_RETURN_DISMISSED:
sendMessage(CMD_FORCE_REEVALUATION,0,0);
break;
case ConnectivityManager.CAPTIVE_PORTAL_APP_RETURN_WANTED_AS_IS:
mDontDisplaySigninNotification=true;
transitionTo(mValidatedState);
break;
case ConnectivityManager.CAPTIVE_PORTAL_APP_RETURN_UNWANTED:
mDontDisplaySigninNotification=true;
mUserDoesNotWant=true;
mConnectivityServiceHandler.sendMessage(obtainMessage(EVENT_NETWORK_TESTED,NETWORK_TEST_RESULT_INVALID,0,mNetworkAgentInfo));
mUidResponsibleForReeval=0;
transitionTo(mEvaluatingState);
break;
}
return HANDLED;
default :
return HANDLED;
}
}
