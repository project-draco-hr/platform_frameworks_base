{
switch (message.what) {
case CMD_REEVALUATE:
    if (message.arg1 != mReevaluateToken || mUserDoesNotWant)     return HANDLED;
  if (!mDefaultRequest.networkCapabilities.satisfiedByNetworkCapabilities(mNetworkAgentInfo.networkCapabilities)) {
    transitionTo(mValidatedState);
    return HANDLED;
  }
mAttempts++;
CaptivePortalProbeResult probeResult=isCaptivePortal();
CaptivePortalCheckResultEvent.logEvent(mNetId,probeResult.mHttpResponseCode);
if (probeResult.mHttpResponseCode == 204) {
transitionTo(mValidatedState);
}
 else if (probeResult.mHttpResponseCode >= 200 && probeResult.mHttpResponseCode <= 399) {
mConnectivityServiceHandler.sendMessage(obtainMessage(EVENT_NETWORK_TESTED,NETWORK_TEST_RESULT_INVALID,mNetId,probeResult.mRedirectUrl));
transitionTo(mCaptivePortalState);
}
 else {
final Message msg=obtainMessage(CMD_REEVALUATE,++mReevaluateToken,0);
sendMessageDelayed(msg,mReevaluateDelayMs);
mConnectivityServiceHandler.sendMessage(obtainMessage(EVENT_NETWORK_TESTED,NETWORK_TEST_RESULT_INVALID,mNetId,probeResult.mRedirectUrl));
if (mAttempts >= BLAME_FOR_EVALUATION_ATTEMPTS) {
TrafficStats.clearThreadStatsUid();
}
mReevaluateDelayMs*=2;
if (mReevaluateDelayMs > MAX_REEVALUATE_DELAY_MS) {
mReevaluateDelayMs=MAX_REEVALUATE_DELAY_MS;
}
}
return HANDLED;
case CMD_FORCE_REEVALUATION:
return (mAttempts < IGNORE_REEVALUATE_ATTEMPTS) ? HANDLED : NOT_HANDLED;
default :
return NOT_HANDLED;
}
}
