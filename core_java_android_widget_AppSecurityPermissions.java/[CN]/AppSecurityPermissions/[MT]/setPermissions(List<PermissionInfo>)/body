{
  mGroupLabelCache=new HashMap<String,CharSequence>();
  mGroupLabelCache.put(mDefaultGrpName,mDefaultGrpLabel);
  mDangerousMap=new HashMap<String,String>();
  mNormalMap=new HashMap<String,String>();
  Map<String,List<PermissionInfo>> dangerousMap=new HashMap<String,List<PermissionInfo>>();
  Map<String,List<PermissionInfo>> normalMap=new HashMap<String,List<PermissionInfo>>();
  PermissionInfoComparator permComparator=new PermissionInfoComparator(mPm);
  if (permList != null) {
    for (    PermissionInfo pInfo : permList) {
      if (localLOGV)       Log.i(TAG,"Processing permission:" + pInfo.name);
      if (!isDisplayablePermission(pInfo)) {
        if (localLOGV)         Log.i(TAG,"Permission:" + pInfo.name + " is not displayable");
        continue;
      }
      Map<String,List<PermissionInfo>> permInfoMap=(pInfo.protectionLevel == PermissionInfo.PROTECTION_DANGEROUS) ? dangerousMap : normalMap;
      String grpName=(pInfo.group == null) ? mDefaultGrpName : pInfo.group;
      if (localLOGV)       Log.i(TAG,"Permission:" + pInfo.name + " belongs to group:"+ grpName);
      List<PermissionInfo> grpPermsList=permInfoMap.get(grpName);
      if (grpPermsList == null) {
        grpPermsList=new ArrayList<PermissionInfo>();
        permInfoMap.put(grpName,grpPermsList);
        grpPermsList.add(pInfo);
      }
 else {
        int idx=Collections.binarySearch(grpPermsList,pInfo,permComparator);
        if (localLOGV)         Log.i(TAG,"idx=" + idx + ", list.size="+ grpPermsList.size());
        if (idx < 0) {
          idx=-idx - 1;
          grpPermsList.add(idx,pInfo);
        }
      }
    }
    aggregateGroupDescs(dangerousMap,mDangerousMap);
    aggregateGroupDescs(normalMap,mNormalMap);
  }
  mCurrentState=State.NO_PERMS;
  if (mDangerousMap.size() > 0) {
    mCurrentState=(mNormalMap.size() > 0) ? State.BOTH : State.DANGEROUS_ONLY;
  }
 else   if (mNormalMap.size() > 0) {
    mCurrentState=State.NORMAL_ONLY;
  }
  if (localLOGV)   Log.i(TAG,"mCurrentState=" + mCurrentState);
  showPermissions();
}
