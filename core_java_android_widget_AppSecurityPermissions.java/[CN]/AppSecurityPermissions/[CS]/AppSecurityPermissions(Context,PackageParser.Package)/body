{
  mContext=context;
  mPm=mContext.getPackageManager();
  loadResources();
  mPermComparator=new PermissionInfoComparator();
  mPermGroupComparator=new PermissionGroupInfoComparator();
  mPermsList=new ArrayList<MyPermissionInfo>();
  Set<MyPermissionInfo> permSet=new HashSet<MyPermissionInfo>();
  if (pkg == null) {
    return;
  }
  PackageInfo info=PackageParser.generatePackageInfo(pkg,null,PackageManager.GET_PERMISSIONS,0,0,null,new PackageUserState());
  PackageInfo installedPkgInfo=null;
  if (info.requestedPermissions != null) {
    try {
      installedPkgInfo=mPm.getPackageInfo(info.packageName,PackageManager.GET_PERMISSIONS);
    }
 catch (    NameNotFoundException e) {
    }
    extractPerms(info,permSet,installedPkgInfo);
  }
  if (pkg.mSharedUserId != null) {
    int sharedUid;
    try {
      sharedUid=mPm.getUidForSharedUser(pkg.mSharedUserId);
      getAllUsedPermissions(sharedUid,permSet);
    }
 catch (    NameNotFoundException e) {
      Log.w(TAG,"Could'nt retrieve shared user id for:" + pkg.packageName);
    }
  }
  for (  MyPermissionInfo tmpInfo : permSet) {
    mPermsList.add(tmpInfo);
  }
  setPermissions(mPermsList);
}
