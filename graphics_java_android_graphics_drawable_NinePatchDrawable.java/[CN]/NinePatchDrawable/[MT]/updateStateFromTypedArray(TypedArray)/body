{
  final Resources r=a.getResources();
  final NinePatchState state=mNinePatchState;
  if (a.hasValue(R.styleable.NinePatchDrawable_dither)) {
    state.mDither=a.getBoolean(R.styleable.NinePatchDrawable_dither,DEFAULT_DITHER);
  }
  if (a.hasValue(R.styleable.NinePatchDrawable_autoMirrored)) {
    state.mAutoMirrored=a.getBoolean(R.styleable.NinePatchDrawable_autoMirrored,false);
  }
  if (a.hasValue(R.styleable.NinePatchDrawable_src)) {
    final int id=a.getResourceId(R.styleable.NinePatchDrawable_src,0);
    if (id == 0) {
      throw new RuntimeException(a.getPositionDescription() + ": <nine-patch> requires a valid src attribute");
    }
    final BitmapFactory.Options options=new BitmapFactory.Options();
    options.inDither=!state.mDither;
    options.inScreenDensity=r.getDisplayMetrics().noncompatDensityDpi;
    final Rect padding=new Rect();
    final Rect opticalInsets=new Rect();
    Bitmap bitmap=null;
    try {
      final TypedValue value=new TypedValue();
      final InputStream is=r.openRawResource(id,value);
      bitmap=BitmapFactory.decodeResourceStream(r,value,is,padding,options);
      is.close();
    }
 catch (    IOException e) {
    }
    if (bitmap == null) {
      throw new RuntimeException(a.getPositionDescription() + ": <nine-patch> requires a valid src attribute");
    }
 else     if (bitmap.getNinePatchChunk() == null) {
      throw new RuntimeException(a.getPositionDescription() + ": <nine-patch> requires a valid 9-patch source image");
    }
    state.mNinePatch=new NinePatch(bitmap,bitmap.getNinePatchChunk());
    state.mPadding=padding;
    state.mOpticalInsets=Insets.of(opticalInsets);
  }
  if (a.hasValue(R.styleable.NinePatchDrawable_tintMode)) {
    final int modeValue=a.getInt(R.styleable.NinePatchDrawable_tintMode,-1);
    state.mTintMode=Drawable.parseTintMode(modeValue,Mode.SRC_IN);
  }
  if (a.hasValue(R.styleable.NinePatchDrawable_tint)) {
    final ColorStateList tint=a.getColorStateList(R.styleable.NinePatchDrawable_tint);
    if (tint != null) {
      state.mTint=tint;
      final int color=tint.getColorForState(getState(),0);
      mTintFilter=new PorterDuffColorFilter(color,state.mTintMode);
    }
  }
  initializeWithState(state,r);
  state.mTargetDensity=mTargetDensity;
}
