{
  final Resources r=a.getResources();
  final NinePatchState state=mNinePatchState;
  state.mChangingConfigurations|=a.getChangingConfigurations();
  state.mThemeAttrs=a.extractThemeAttrs();
  state.mDither=a.getBoolean(R.styleable.NinePatchDrawable_dither,state.mDither);
  final int srcResId=a.getResourceId(R.styleable.NinePatchDrawable_src,0);
  if (srcResId != 0) {
    final BitmapFactory.Options options=new BitmapFactory.Options();
    options.inDither=!state.mDither;
    options.inScreenDensity=r.getDisplayMetrics().noncompatDensityDpi;
    final Rect padding=new Rect();
    final Rect opticalInsets=new Rect();
    Bitmap bitmap=null;
    try {
      final TypedValue value=new TypedValue();
      final InputStream is=r.openRawResource(srcResId,value);
      bitmap=BitmapFactory.decodeResourceStream(r,value,is,padding,options);
      is.close();
    }
 catch (    IOException e) {
    }
    if (bitmap == null) {
      throw new XmlPullParserException(a.getPositionDescription() + ": <nine-patch> requires a valid src attribute");
    }
 else     if (bitmap.getNinePatchChunk() == null) {
      throw new XmlPullParserException(a.getPositionDescription() + ": <nine-patch> requires a valid 9-patch source image");
    }
    bitmap.getOpticalInsets(opticalInsets);
    state.mNinePatch=new NinePatch(bitmap,bitmap.getNinePatchChunk());
    state.mPadding=padding;
    state.mOpticalInsets=Insets.of(opticalInsets);
  }
  state.mAutoMirrored=a.getBoolean(R.styleable.NinePatchDrawable_autoMirrored,state.mAutoMirrored);
  state.mBaseAlpha=a.getFloat(R.styleable.NinePatchDrawable_alpha,state.mBaseAlpha);
  final int tintMode=a.getInt(R.styleable.NinePatchDrawable_tintMode,-1);
  if (tintMode != -1) {
    state.mTintMode=Drawable.parseTintMode(tintMode,Mode.SRC_IN);
  }
  final ColorStateList tint=a.getColorStateList(R.styleable.NinePatchDrawable_tint);
  if (tint != null) {
    state.mTint=tint;
  }
  state.mTargetDensity=Drawable.resolveDensity(r,state.mTargetDensity);
}
