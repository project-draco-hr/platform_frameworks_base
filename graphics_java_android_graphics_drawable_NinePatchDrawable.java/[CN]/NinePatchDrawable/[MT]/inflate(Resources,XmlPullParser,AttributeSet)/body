{
  super.inflate(r,parser,attrs);
  TypedArray a=r.obtainAttributes(attrs,com.android.internal.R.styleable.NinePatchDrawable);
  final int id=a.getResourceId(com.android.internal.R.styleable.NinePatchDrawable_src,0);
  if (id == 0) {
    throw new XmlPullParserException(parser.getPositionDescription() + ": <nine-patch> requires a valid src attribute");
  }
  final boolean dither=a.getBoolean(com.android.internal.R.styleable.NinePatchDrawable_dither,DEFAULT_DITHER);
  final BitmapFactory.Options options=new BitmapFactory.Options();
  if (dither) {
    options.inDither=false;
  }
  options.inScreenDensity=r.getDisplayMetrics().noncompatDensityDpi;
  final Rect padding=new Rect();
  final Rect opticalInsets=new Rect();
  Bitmap bitmap=null;
  try {
    final TypedValue value=new TypedValue();
    final InputStream is=r.openRawResource(id,value);
    bitmap=BitmapFactory.decodeResourceStream(r,value,is,padding,options);
    is.close();
  }
 catch (  IOException e) {
  }
  if (bitmap == null) {
    throw new XmlPullParserException(parser.getPositionDescription() + ": <nine-patch> requires a valid src attribute");
  }
 else   if (bitmap.getNinePatchChunk() == null) {
    throw new XmlPullParserException(parser.getPositionDescription() + ": <nine-patch> requires a valid 9-patch source image");
  }
  setNinePatchState(new NinePatchState(new NinePatch(bitmap,bitmap.getNinePatchChunk(),"XML 9-patch"),padding,opticalInsets,dither),r);
  mNinePatchState.mTargetDensity=mTargetDensity;
  a.recycle();
}
