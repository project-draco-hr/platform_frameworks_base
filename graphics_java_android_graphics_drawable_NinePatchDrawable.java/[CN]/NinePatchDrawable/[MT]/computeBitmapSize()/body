{
  final NinePatch ninePatch=mNinePatchState.mNinePatch;
  if (ninePatch == null) {
    return;
  }
  final int sourceDensity=ninePatch.getDensity();
  final int targetDensity=mTargetDensity;
  final Insets sourceOpticalInsets=mNinePatchState.mOpticalInsets;
  if (sourceOpticalInsets != Insets.NONE) {
    final int left=Drawable.scaleFromDensity(sourceOpticalInsets.left,sourceDensity,targetDensity,true);
    final int top=Drawable.scaleFromDensity(sourceOpticalInsets.top,sourceDensity,targetDensity,true);
    final int right=Drawable.scaleFromDensity(sourceOpticalInsets.right,sourceDensity,targetDensity,true);
    final int bottom=Drawable.scaleFromDensity(sourceOpticalInsets.bottom,sourceDensity,targetDensity,true);
    mOpticalInsets=Insets.of(left,top,right,bottom);
  }
 else {
    mOpticalInsets=Insets.NONE;
  }
  final Rect sourcePadding=mNinePatchState.mPadding;
  if (sourcePadding != null) {
    if (mPadding == null) {
      mPadding=new Rect();
    }
    mPadding.left=Drawable.scaleFromDensity(sourcePadding.left,sourceDensity,targetDensity,false);
    mPadding.top=Drawable.scaleFromDensity(sourcePadding.top,sourceDensity,targetDensity,false);
    mPadding.right=Drawable.scaleFromDensity(sourcePadding.right,sourceDensity,targetDensity,false);
    mPadding.bottom=Drawable.scaleFromDensity(sourcePadding.bottom,sourceDensity,targetDensity,false);
  }
 else {
    mPadding=null;
  }
  mBitmapHeight=Drawable.scaleFromDensity(ninePatch.getHeight(),sourceDensity,targetDensity,true);
  mBitmapWidth=Drawable.scaleFromDensity(ninePatch.getWidth(),sourceDensity,targetDensity,true);
  final NinePatch.InsetStruct insets=ninePatch.getBitmap().getNinePatchInsets();
  if (insets != null) {
    Rect outlineRect=insets.outlineRect;
    mOutlineInsets=NinePatch.InsetStruct.scaleInsets(outlineRect.left,outlineRect.top,outlineRect.right,outlineRect.bottom,targetDensity / (float)sourceDensity);
    mOutlineRadius=Drawable.scaleFromDensity(insets.outlineRadius,sourceDensity,targetDensity);
  }
 else {
    mOutlineInsets=null;
  }
}
