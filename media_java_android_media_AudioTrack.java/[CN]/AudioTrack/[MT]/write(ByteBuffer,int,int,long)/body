{
  if (mState == STATE_UNINITIALIZED) {
    Log.e(TAG,"AudioTrack.write() called in invalid state STATE_UNINITIALIZED");
    return ERROR_INVALID_OPERATION;
  }
  if ((writeMode != WRITE_BLOCKING) && (writeMode != WRITE_NON_BLOCKING)) {
    Log.e(TAG,"AudioTrack.write() called with invalid blocking mode");
    return ERROR_BAD_VALUE;
  }
  if (mDataLoadMode != MODE_STREAM) {
    Log.e(TAG,"AudioTrack.write() with timestamp called for non-streaming mode track");
    return ERROR_INVALID_OPERATION;
  }
  if ((mAttributes.getFlags() & AudioAttributes.FLAG_HW_AV_SYNC) == 0) {
    Log.d(TAG,"AudioTrack.write() called on a regular AudioTrack. Ignoring pts...");
    return write(audioData,sizeInBytes,writeMode);
  }
  if ((audioData == null) || (sizeInBytes < 0) || (sizeInBytes > audioData.remaining())) {
    Log.e(TAG,"AudioTrack.write() called with invalid size (" + sizeInBytes + ") value");
    return ERROR_BAD_VALUE;
  }
  if (mAvSyncHeader == null) {
    mAvSyncHeader=ByteBuffer.allocate(16);
    mAvSyncHeader.order(ByteOrder.BIG_ENDIAN);
    mAvSyncHeader.putInt(0x55550001);
    mAvSyncHeader.putInt(sizeInBytes);
    mAvSyncHeader.putLong(timestamp);
    mAvSyncHeader.position(0);
    mAvSyncBytesRemaining=sizeInBytes;
  }
  int ret=0;
  if (mAvSyncHeader.remaining() != 0) {
    ret=write(mAvSyncHeader,mAvSyncHeader.remaining(),writeMode);
    if (ret < 0) {
      Log.e(TAG,"AudioTrack.write() could not write timestamp header!");
      mAvSyncHeader=null;
      mAvSyncBytesRemaining=0;
      return ret;
    }
    if (mAvSyncHeader.remaining() > 0) {
      Log.v(TAG,"AudioTrack.write() partial timestamp header written.");
      return 0;
    }
  }
  int sizeToWrite=Math.min(mAvSyncBytesRemaining,sizeInBytes);
  ret=write(audioData,sizeToWrite,writeMode);
  if (ret < 0) {
    Log.e(TAG,"AudioTrack.write() could not write audio data!");
    mAvSyncHeader=null;
    mAvSyncBytesRemaining=0;
    return ret;
  }
  mAvSyncBytesRemaining-=ret;
  if (mAvSyncBytesRemaining == 0) {
    mAvSyncHeader=null;
  }
  return ret;
}
