{
  final ArrayList windows=mWindows;
  final int N=windows.size();
  for (int i=N - 1; i >= 0; i--) {
    final WindowState child=(WindowState)windows.get(i);
    if (child.mInputChannel == null) {
      continue;
    }
    final int flags=child.mAttrs.flags;
    final int type=child.mAttrs.type;
    final boolean hasFocus=(child == mInputFocus);
    final boolean isVisible=child.isVisibleLw();
    final boolean hasWallpaper=(child == mWallpaperTarget) && (type != WindowManager.LayoutParams.TYPE_KEYGUARD);
    final InputWindow inputWindow=mTempInputWindows.add();
    inputWindow.inputChannel=child.mInputChannel;
    inputWindow.layoutParamsFlags=flags;
    inputWindow.layoutParamsType=type;
    inputWindow.dispatchingTimeoutNanos=child.getInputDispatchingTimeoutNanos();
    inputWindow.visible=isVisible;
    inputWindow.hasFocus=hasFocus;
    inputWindow.hasWallpaper=hasWallpaper;
    inputWindow.paused=child.mAppToken != null ? child.mAppToken.paused : false;
    inputWindow.ownerPid=child.mSession.mPid;
    inputWindow.ownerUid=child.mSession.mUid;
    final Rect frame=child.mFrame;
    inputWindow.frameLeft=frame.left;
    inputWindow.frameTop=frame.top;
switch (child.mTouchableInsets) {
default :
case ViewTreeObserver.InternalInsetsInfo.TOUCHABLE_INSETS_FRAME:
      inputWindow.touchableAreaLeft=frame.left;
    inputWindow.touchableAreaTop=frame.top;
  inputWindow.touchableAreaRight=frame.right;
inputWindow.touchableAreaBottom=frame.bottom;
break;
case ViewTreeObserver.InternalInsetsInfo.TOUCHABLE_INSETS_CONTENT:
{
Rect inset=child.mGivenContentInsets;
inputWindow.touchableAreaLeft=frame.left + inset.left;
inputWindow.touchableAreaTop=frame.top + inset.top;
inputWindow.touchableAreaRight=frame.right - inset.right;
inputWindow.touchableAreaBottom=frame.bottom - inset.bottom;
break;
}
case ViewTreeObserver.InternalInsetsInfo.TOUCHABLE_INSETS_VISIBLE:
{
Rect inset=child.mGivenVisibleInsets;
inputWindow.touchableAreaLeft=frame.left + inset.left;
inputWindow.touchableAreaTop=frame.top + inset.top;
inputWindow.touchableAreaRight=frame.right - inset.right;
inputWindow.touchableAreaBottom=frame.bottom - inset.bottom;
break;
}
}
}
mInputManager.setInputWindows(mTempInputWindows.toNullTerminatedArray());
mTempInputWindows.clear();
}
