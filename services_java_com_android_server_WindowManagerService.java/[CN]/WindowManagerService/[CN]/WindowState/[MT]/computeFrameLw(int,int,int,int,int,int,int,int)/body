{
  mHaveFrame=true;
  final int pw=pr - pl;
  final int ph=pb - pt;
  int w, h;
  if ((mAttrs.flags & mAttrs.FLAG_SCALED) != 0) {
    w=mAttrs.width < 0 ? pw : mAttrs.width;
    h=mAttrs.height < 0 ? ph : mAttrs.height;
  }
 else {
    w=mAttrs.width == mAttrs.FILL_PARENT ? pw : mRequestedWidth;
    h=mAttrs.height == mAttrs.FILL_PARENT ? ph : mRequestedHeight;
  }
  final Rect container=mContainingFrame;
  container.left=pl;
  container.top=pt;
  container.right=pr;
  container.bottom=pb;
  final Rect frame=mFrame;
  Gravity.apply(mAttrs.gravity,w,h,container,(int)(mAttrs.x + mAttrs.horizontalMargin * pw),(int)(mAttrs.y + mAttrs.verticalMargin * ph),frame);
  int off=0;
  if (frame.left < dl)   off=dl - frame.left;
 else   if (frame.right > dr)   off=dr - frame.right;
  if (off != 0) {
    if (frame.width() > (dr - dl)) {
      frame.left=dl;
      frame.right=dr;
    }
 else {
      frame.left+=off;
      frame.right+=off;
    }
  }
  off=0;
  if (frame.top < dt)   off=dt - frame.top;
 else   if (frame.bottom > db)   off=db - frame.bottom;
  if (off != 0) {
    if (frame.height() > (db - dt)) {
      frame.top=dt;
      frame.bottom=db;
    }
 else {
      frame.top+=off;
      frame.bottom+=off;
    }
  }
  if (localLOGV)   Log.v(TAG,"Resolving (mRequestedWidth=" + mRequestedWidth + ", mRequestedheight="+ mRequestedHeight+ ") to"+ " (pw="+ pw+ ", dh="+ ph+ "): frame="+ mFrame);
}
