{
  super.dump(pw,prefix);
  if (appToken != null) {
    pw.print(prefix);
    pw.println("app=true");
  }
  if (allAppWindows.size() > 0) {
    pw.print(prefix);
    pw.print("allAppWindows=");
    pw.println(allAppWindows);
  }
  pw.print(prefix);
  pw.print("groupId=");
  pw.print(groupId);
  pw.print(" appFullscreen=");
  pw.print(appFullscreen);
  pw.print(" requestedOrientation=");
  pw.println(requestedOrientation);
  pw.print(prefix);
  pw.print("hiddenRequested=");
  pw.print(hiddenRequested);
  pw.print(" clientHidden=");
  pw.print(clientHidden);
  pw.print(" willBeHidden=");
  pw.print(willBeHidden);
  pw.print(" reportedVisible=");
  pw.println(reportedVisible);
  if (paused || freezingScreen) {
    pw.print(prefix);
    pw.print("paused=");
    pw.print(paused);
    pw.print(" freezingScreen=");
    pw.println(freezingScreen);
  }
  if (numInterestingWindows != 0 || numDrawnWindows != 0 || inPendingTransaction || allDrawn) {
    pw.print(prefix);
    pw.print("numInterestingWindows=");
    pw.print(numInterestingWindows);
    pw.print(" numDrawnWindows=");
    pw.print(numDrawnWindows);
    pw.print(" inPendingTransaction=");
    pw.print(inPendingTransaction);
    pw.print(" allDrawn=");
    pw.println(allDrawn);
  }
  if (animating || animation != null) {
    pw.print(prefix);
    pw.print("animating=");
    pw.print(animating);
    pw.print(" animation=");
    pw.println(animation);
  }
  if (hasTransformation) {
    pw.print(prefix);
    pw.print("XForm: ");
    transformation.printShortString(pw);
    pw.println();
  }
  if (animLayerAdjustment != 0) {
    pw.print(prefix);
    pw.print("animLayerAdjustment=");
    pw.println(animLayerAdjustment);
  }
  if (startingData != null || removed || firstWindowDrawn) {
    pw.print(prefix);
    pw.print("startingData=");
    pw.print(startingData);
    pw.print(" removed=");
    pw.print(removed);
    pw.print(" firstWindowDrawn=");
    pw.println(firstWindowDrawn);
  }
  if (startingWindow != null || startingView != null || startingDisplayed || startingMoved) {
    pw.print(prefix);
    pw.print("startingWindow=");
    pw.print(startingWindow);
    pw.print(" startingView=");
    pw.print(startingView);
    pw.print(" startingDisplayed=");
    pw.print(startingDisplayed);
    pw.print(" startingMoved");
    pw.println(startingMoved);
  }
}
