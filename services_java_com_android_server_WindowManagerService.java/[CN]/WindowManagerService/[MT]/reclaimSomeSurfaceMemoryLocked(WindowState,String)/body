{
  final Surface surface=win.mSurface;
  EventLog.writeEvent(EventLogTags.WM_NO_SURFACE_MEMORY,win.toString(),win.mSession.mPid,operation);
  if (mForceRemoves == null) {
    mForceRemoves=new ArrayList<WindowState>();
  }
  long callingIdentity=Binder.clearCallingIdentity();
  try {
    int N=mWindows.size();
    boolean leakedSurface=false;
    Log.i(TAG,"Out of memory for surface!  Looking for leaks...");
    for (int i=0; i < N; i++) {
      WindowState ws=(WindowState)mWindows.get(i);
      if (ws.mSurface != null) {
        if (!mSessions.contains(ws.mSession)) {
          Log.w(TAG,"LEAKED SURFACE (session doesn't exist): " + ws + " surface="+ ws.mSurface+ " token="+ win.mToken+ " pid="+ ws.mSession.mPid+ " uid="+ ws.mSession.mUid);
          ws.mSurface.destroy();
          ws.mSurface=null;
          mForceRemoves.add(ws);
          i--;
          N--;
          leakedSurface=true;
        }
 else         if (win.mAppToken != null && win.mAppToken.clientHidden) {
          Log.w(TAG,"LEAKED SURFACE (app token hidden): " + ws + " surface="+ ws.mSurface+ " token="+ win.mAppToken);
          ws.mSurface.destroy();
          ws.mSurface=null;
          leakedSurface=true;
        }
      }
    }
    boolean killedApps=false;
    if (!leakedSurface) {
      Log.w(TAG,"No leaked surfaces; killing applicatons!");
      SparseIntArray pidCandidates=new SparseIntArray();
      for (int i=0; i < N; i++) {
        WindowState ws=(WindowState)mWindows.get(i);
        if (ws.mSurface != null) {
          pidCandidates.append(ws.mSession.mPid,ws.mSession.mPid);
        }
      }
      if (pidCandidates.size() > 0) {
        int[] pids=new int[pidCandidates.size()];
        for (int i=0; i < pids.length; i++) {
          pids[i]=pidCandidates.keyAt(i);
        }
        try {
          if (mActivityManager.killPidsForMemory(pids)) {
            killedApps=true;
          }
        }
 catch (        RemoteException e) {
        }
      }
    }
    if (leakedSurface || killedApps) {
      Log.w(TAG,"Looks like we have reclaimed some memory, clearing surface for retry.");
      if (surface != null) {
        surface.destroy();
        win.mSurface=null;
      }
      try {
        win.mClient.dispatchGetNewSurface();
      }
 catch (      RemoteException e) {
      }
    }
  }
  finally {
    Binder.restoreCallingIdentity(callingIdentity);
  }
}
