{
  if (mTouchDown) {
    Slog.w(TAG,"Pointer down received while already down in: " + mTouchFocus);
    updateTouchFocusAfterUpTd(event,policyFlags);
  }
  mTouchDown=true;
  mPowerManager.logPointerDownEvent();
  final boolean screenWasOff=(policyFlags & WindowManagerPolicy.FLAG_BRIGHT_HERE) != 0;
synchronized (mWindowMap) {
    final int x=(int)event.getX();
    final int y=(int)event.getY();
    final ArrayList windows=mWindows;
    final int N=windows.size();
    WindowState topErrWindow=null;
    final Rect tmpRect=mTempRect;
    for (int i=N - 1; i >= 0; i--) {
      WindowState child=(WindowState)windows.get(i);
      final int flags=child.mAttrs.flags;
      if ((flags & WindowManager.LayoutParams.FLAG_SYSTEM_ERROR) != 0) {
        if (topErrWindow == null) {
          topErrWindow=child;
        }
      }
      if (!child.isVisibleLw()) {
        continue;
      }
      if ((flags & WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE) == 0) {
        tmpRect.set(child.mFrame);
        if (child.mTouchableInsets == ViewTreeObserver.InternalInsetsInfo.TOUCHABLE_INSETS_CONTENT) {
          tmpRect.left+=child.mGivenContentInsets.left;
          tmpRect.top+=child.mGivenContentInsets.top;
          tmpRect.right-=child.mGivenContentInsets.right;
          tmpRect.bottom-=child.mGivenContentInsets.bottom;
        }
 else         if (child.mTouchableInsets == ViewTreeObserver.InternalInsetsInfo.TOUCHABLE_INSETS_VISIBLE) {
          tmpRect.left+=child.mGivenVisibleInsets.left;
          tmpRect.top+=child.mGivenVisibleInsets.top;
          tmpRect.right-=child.mGivenVisibleInsets.right;
          tmpRect.bottom-=child.mGivenVisibleInsets.bottom;
        }
        final int touchFlags=flags & (WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL);
        if (tmpRect.contains(x,y) || touchFlags == 0) {
          if (!screenWasOff || (flags & WindowManager.LayoutParams.FLAG_TOUCHABLE_WHEN_WAKING) != 0) {
            mTouchFocus=child;
          }
 else {
            mTouchFocus=null;
          }
          break;
        }
      }
      if ((flags & WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH) != 0) {
        mOutsideTouchTargets.add(child);
      }
    }
    if (topErrWindow != null && mTouchFocus != topErrWindow) {
      mTouchFocus=null;
    }
    if (mTouchFocus != null && !mTouchFocus.isVisibleLw()) {
      mTouchFocus=null;
    }
    if (mTouchFocus != null && mTouchFocus == mWallpaperTarget && mTouchFocus.mAttrs.type != WindowManager.LayoutParams.TYPE_KEYGUARD) {
      int curTokenIndex=mWallpaperTokens.size();
      while (curTokenIndex > 0) {
        curTokenIndex--;
        WindowToken token=mWallpaperTokens.get(curTokenIndex);
        int curWallpaperIndex=token.windows.size();
        while (curWallpaperIndex > 0) {
          curWallpaperIndex--;
          WindowState wallpaper=token.windows.get(curWallpaperIndex);
          if ((wallpaper.mAttrs.flags & WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE) == 0) {
            mWallpaperTouchTargets.add(wallpaper);
          }
        }
      }
    }
  }
}
