{
  if (mContext.checkCallingOrSelfPermission("android.permission.DUMP") != PackageManager.PERMISSION_GRANTED) {
    pw.println("Permission Denial: can't dump WindowManager from from pid=" + Binder.getCallingPid() + ", uid="+ Binder.getCallingUid());
    return;
  }
synchronized (mWindowMap) {
    pw.println("Current Window Manager state:");
    for (int i=mWindows.size() - 1; i >= 0; i--) {
      WindowState w=(WindowState)mWindows.get(i);
      pw.println("  Window #" + i + ":");
      w.dump(pw,"    ");
    }
    if (mInputMethodDialogs.size() > 0) {
      pw.println(" ");
      pw.println("  Input method dialogs:");
      for (int i=mInputMethodDialogs.size() - 1; i >= 0; i--) {
        WindowState w=mInputMethodDialogs.get(i);
        pw.println("  IM Dialog #" + i + ": "+ w);
      }
    }
    if (mPendingRemove.size() > 0) {
      pw.println(" ");
      pw.println("  Remove pending for:");
      for (int i=mPendingRemove.size() - 1; i >= 0; i--) {
        WindowState w=mPendingRemove.get(i);
        pw.println("  Remove #" + i + ":");
        w.dump(pw,"    ");
      }
    }
    if (mForceRemoves != null && mForceRemoves.size() > 0) {
      pw.println(" ");
      pw.println("  Windows force removing:");
      for (int i=mForceRemoves.size() - 1; i >= 0; i--) {
        WindowState w=mForceRemoves.get(i);
        pw.println("  Removing #" + i + ":");
        w.dump(pw,"    ");
      }
    }
    if (mDestroySurface.size() > 0) {
      pw.println(" ");
      pw.println("  Windows waiting to destroy their surface:");
      for (int i=mDestroySurface.size() - 1; i >= 0; i--) {
        WindowState w=mDestroySurface.get(i);
        pw.println("  Destroy #" + i + ":");
        w.dump(pw,"    ");
      }
    }
    if (mLosingFocus.size() > 0) {
      pw.println(" ");
      pw.println("  Windows losing focus:");
      for (int i=mLosingFocus.size() - 1; i >= 0; i--) {
        WindowState w=mLosingFocus.get(i);
        pw.println("  Losing #" + i + ":");
        w.dump(pw,"    ");
      }
    }
    if (mSessions.size() > 0) {
      pw.println(" ");
      pw.println("  All active sessions:");
      Iterator<Session> it=mSessions.iterator();
      while (it.hasNext()) {
        Session s=it.next();
        pw.println("  Session " + s);
        s.dump(pw,"    ");
      }
    }
    if (mTokenMap.size() > 0) {
      pw.println(" ");
      pw.println("  All tokens:");
      Iterator<WindowToken> it=mTokenMap.values().iterator();
      while (it.hasNext()) {
        WindowToken token=it.next();
        pw.println("  Token " + token.token);
        token.dump(pw,"    ");
      }
    }
    if (mTokenList.size() > 0) {
      pw.println(" ");
      pw.println("  Window token list:");
      for (int i=0; i < mTokenList.size(); i++) {
        pw.println("  WindowToken #" + i + ": "+ mTokenList.get(i));
      }
    }
    if (mAppTokens.size() > 0) {
      pw.println(" ");
      pw.println("  Application tokens in Z order:");
      for (int i=mAppTokens.size() - 1; i >= 0; i--) {
        pw.println("  AppWindowToken #" + i + ": "+ mAppTokens.get(i));
      }
    }
    if (mFinishedStarting.size() > 0) {
      pw.println(" ");
      pw.println("  Finishing start of application tokens:");
      for (int i=mFinishedStarting.size() - 1; i >= 0; i--) {
        WindowToken token=mFinishedStarting.get(i);
        pw.println("  Finish Starting App Token #" + i + ":");
        token.dump(pw,"    ");
      }
    }
    if (mExitingTokens.size() > 0) {
      pw.println(" ");
      pw.println("  Exiting tokens:");
      for (int i=mExitingTokens.size() - 1; i >= 0; i--) {
        WindowToken token=mExitingTokens.get(i);
        pw.println("  Exiting Token #" + i + ":");
        token.dump(pw,"    ");
      }
    }
    if (mExitingAppTokens.size() > 0) {
      pw.println(" ");
      pw.println("  Exiting application tokens:");
      for (int i=mExitingAppTokens.size() - 1; i >= 0; i--) {
        WindowToken token=mExitingAppTokens.get(i);
        pw.println("  Exiting App Token #" + i + ":");
        token.dump(pw,"    ");
      }
    }
    pw.println(" ");
    pw.println("  mCurrentFocus=" + mCurrentFocus);
    pw.println("  mLastFocus=" + mLastFocus);
    pw.println("  mFocusedApp=" + mFocusedApp);
    pw.println("  mInputMethodTarget=" + mInputMethodTarget);
    pw.println("  mInputMethodWindow=" + mInputMethodWindow);
    pw.println("  mInTouchMode=" + mInTouchMode);
    pw.println("  mSystemBooted=" + mSystemBooted + " mDisplayEnabled="+ mDisplayEnabled);
    pw.println("  mLayoutNeeded=" + mLayoutNeeded + " mSurfacesChanged="+ mSurfacesChanged+ " mBlurShown="+ mBlurShown);
    pw.println("  mDimShown=" + mDimShown + " current="+ mDimCurrentAlpha+ " target="+ mDimTargetAlpha+ " delta="+ mDimDeltaPerMs+ " lastAnimTime="+ mLastDimAnimTime);
    pw.println("  mDisplayFrozen=" + mDisplayFrozen + " mWindowsFreezingScreen="+ mWindowsFreezingScreen+ " mAppsFreezingScreen="+ mAppsFreezingScreen);
    pw.println("  mRotation=" + mRotation + ", mForcedAppOrientation="+ mForcedAppOrientation+ ", mRequestedRotation="+ mRequestedRotation);
    pw.println("  mAnimationPending=" + mAnimationPending + " mWindowAnimationScale="+ mWindowAnimationScale+ " mTransitionWindowAnimationScale="+ mTransitionAnimationScale);
    pw.println("  mNextAppTransition=0x" + Integer.toHexString(mNextAppTransition) + ", mAppTransitionReady="+ mAppTransitionReady+ ", mAppTransitionTimeout="+ mAppTransitionTimeout);
    pw.println("  mStartingIconInTransition=" + mStartingIconInTransition + ", mSkipAppTransitionAnimation="+ mSkipAppTransitionAnimation);
    pw.println("  mOpeningApps=" + mOpeningApps);
    pw.println("  mClosingApps=" + mClosingApps);
    pw.println("  DisplayWidth=" + mDisplay.getWidth() + " DisplayHeight="+ mDisplay.getHeight());
    pw.println("  KeyWaiter state:");
    pw.println("    mLastWin=" + mKeyWaiter.mLastWin + " mLastBinder="+ mKeyWaiter.mLastBinder);
    pw.println("    mFinished=" + mKeyWaiter.mFinished + " mGotFirstWindow="+ mKeyWaiter.mGotFirstWindow+ " mEventDispatching"+ mKeyWaiter.mEventDispatching+ " mTimeToSwitch="+ mKeyWaiter.mTimeToSwitch);
  }
}
