{
  final IWindow client=win.mClient;
  final WindowToken token=win.mToken;
  final ArrayList localmWindows=mWindows;
  final int N=localmWindows.size();
  final WindowState attached=win.mAttachedWindow;
  int i;
  if (attached == null) {
    int tokenWindowsPos=token.windows.size();
    if (token.appWindowToken != null) {
      int index=tokenWindowsPos - 1;
      if (index >= 0) {
        if (win.mAttrs.type == TYPE_BASE_APPLICATION) {
          placeWindowBefore(token.windows.get(0),win);
          tokenWindowsPos=0;
        }
 else {
          AppWindowToken atoken=win.mAppToken;
          if (atoken != null && token.windows.get(index) == atoken.startingWindow) {
            placeWindowBefore(token.windows.get(index),win);
            tokenWindowsPos--;
          }
 else {
            int newIdx=findIdxBasedOnAppTokens(win);
            if (newIdx != -1) {
              localmWindows.add(newIdx + 1,win);
            }
          }
        }
      }
 else {
        if (localLOGV)         Log.v(TAG,"Figuring out where to add app window " + client.asBinder() + " (token="+ token+ ")");
        final int NA=mAppTokens.size();
        Object pos=null;
        for (i=NA - 1; i >= 0; i--) {
          AppWindowToken t=mAppTokens.get(i);
          if (t == token) {
            i--;
            break;
          }
          if (t.windows.size() > 0) {
            pos=t.windows.get(0);
          }
        }
        if (pos != null) {
          WindowToken atoken=mTokenMap.get(((WindowState)pos).mClient.asBinder());
          if (atoken != null) {
            final int NC=atoken.windows.size();
            if (NC > 0) {
              WindowState bottom=atoken.windows.get(0);
              if (bottom.mSubLayer < 0) {
                pos=bottom;
              }
            }
          }
          placeWindowBefore(pos,win);
        }
 else {
          while (i >= 0) {
            AppWindowToken t=mAppTokens.get(i);
            final int NW=t.windows.size();
            if (NW > 0) {
              pos=t.windows.get(NW - 1);
              break;
            }
            i--;
          }
          if (pos != null) {
            WindowToken atoken=mTokenMap.get(((WindowState)pos).mClient.asBinder());
            if (atoken != null) {
              final int NC=atoken.windows.size();
              if (NC > 0) {
                WindowState top=atoken.windows.get(NC - 1);
                if (top.mSubLayer >= 0) {
                  pos=top;
                }
              }
            }
            placeWindowAfter(pos,win);
          }
 else {
            final int myLayer=win.mBaseLayer;
            for (i=0; i < N; i++) {
              WindowState w=(WindowState)localmWindows.get(i);
              if (w.mBaseLayer > myLayer) {
                break;
              }
            }
            if (localLOGV || DEBUG_FOCUS)             Log.v(TAG,"Adding window " + win + " at "+ i+ " of "+ N);
            localmWindows.add(i,win);
          }
        }
      }
    }
 else {
      final int myLayer=win.mBaseLayer;
      for (i=N - 1; i >= 0; i--) {
        if (((WindowState)localmWindows.get(i)).mBaseLayer <= myLayer) {
          i++;
          break;
        }
      }
      if (i < 0)       i=0;
      if (localLOGV || DEBUG_FOCUS)       Log.v(TAG,"Adding window " + win + " at "+ i+ " of "+ N);
      localmWindows.add(i,win);
    }
    token.windows.add(tokenWindowsPos,win);
  }
 else {
    final int NA=token.windows.size();
    final int sublayer=win.mSubLayer;
    int largestSublayer=Integer.MIN_VALUE;
    WindowState windowWithLargestSublayer=null;
    for (i=0; i < NA; i++) {
      WindowState w=token.windows.get(i);
      final int wSublayer=w.mSubLayer;
      if (wSublayer >= largestSublayer) {
        largestSublayer=wSublayer;
        windowWithLargestSublayer=w;
      }
      if (sublayer < 0) {
        if (wSublayer >= sublayer) {
          token.windows.add(i,win);
          placeWindowBefore(wSublayer >= 0 ? attached : w,win);
          break;
        }
      }
 else {
        if (wSublayer > sublayer) {
          token.windows.add(i,win);
          placeWindowBefore(w,win);
          break;
        }
      }
    }
    if (i >= NA) {
      token.windows.add(win);
      if (sublayer < 0) {
        placeWindowBefore(attached,win);
      }
 else {
        placeWindowAfter(largestSublayer >= 0 ? windowWithLargestSublayer : attached,win);
      }
    }
  }
  if (win.mAppToken != null) {
    win.mAppToken.allAppWindows.add(win);
  }
}
