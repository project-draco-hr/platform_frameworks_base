{
  boolean changed=false;
synchronized (mWindowMap) {
    int pos=mAppTokens.size() - 1;
    int req=ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED;
    int curGroup=0;
    int lastOrientation=ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED;
    boolean haveGroup=false;
    while (pos >= 0) {
      AppWindowToken wtoken=mAppTokens.get(pos);
      pos--;
      if (!haveGroup) {
        if (wtoken.hiddenRequested || wtoken.willBeHidden) {
          continue;
        }
        haveGroup=true;
        curGroup=wtoken.groupId;
        lastOrientation=wtoken.requestedOrientation;
      }
 else       if (curGroup != wtoken.groupId) {
        if (lastOrientation != ActivityInfo.SCREEN_ORIENTATION_BEHIND) {
          break;
        }
      }
      int or=wtoken.requestedOrientation;
      if (or == ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE || or == ActivityInfo.SCREEN_ORIENTATION_PORTRAIT || or == ActivityInfo.SCREEN_ORIENTATION_SENSOR || or == ActivityInfo.SCREEN_ORIENTATION_NOSENSOR || or == ActivityInfo.SCREEN_ORIENTATION_USER) {
        req=or;
        break;
      }
    }
    if (req != mForcedAppOrientation) {
      changed=true;
      mForcedAppOrientation=req;
      mPolicy.setCurrentOrientation(req);
    }
    if (changed) {
      changed=setRotationUncheckedLocked(WindowManagerPolicy.USE_LAST_ROTATION);
      if (changed) {
        if (freezeThisOneIfNeeded != null) {
          AppWindowToken wtoken=findAppWindowToken(freezeThisOneIfNeeded);
          if (wtoken != null) {
            startAppFreezingScreenLocked(wtoken,ActivityInfo.CONFIG_ORIENTATION);
          }
        }
        Configuration config=computeNewConfigurationLocked();
        if (config != null) {
          mLayoutNeeded=true;
          performLayoutAndPlaceSurfacesLocked();
        }
        return config;
      }
    }
  }
  return null;
}
