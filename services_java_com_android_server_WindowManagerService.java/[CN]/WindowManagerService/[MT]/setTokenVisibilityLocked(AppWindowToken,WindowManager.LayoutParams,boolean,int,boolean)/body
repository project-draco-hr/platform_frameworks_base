{
  boolean delayed=false;
  if (wtoken.clientHidden == visible) {
    wtoken.clientHidden=!visible;
    wtoken.sendAppVisibilityToClients();
  }
  wtoken.willBeHidden=false;
  if (wtoken.hidden == visible) {
    final int N=wtoken.allAppWindows.size();
    boolean changed=false;
    if (DEBUG_APP_TRANSITIONS)     Log.v(TAG,"Changing app " + wtoken + " hidden="+ wtoken.hidden+ " performLayout="+ performLayout);
    if (transit != WindowManagerPolicy.TRANSIT_NONE) {
      applyAnimationLocked(wtoken,lp,transit,visible);
      changed=true;
      if (wtoken.animation != null) {
        delayed=true;
      }
    }
    for (int i=0; i < N; i++) {
      WindowState win=wtoken.allAppWindows.get(i);
      if (win == wtoken.startingWindow) {
        continue;
      }
      if (win.isAnimating()) {
        delayed=true;
      }
      if (visible) {
        if (!win.isVisible()) {
          changed=true;
        }
      }
 else       if (win.isVisible()) {
        mKeyWaiter.finishedKey(win.mSession,win.mClient,true,KeyWaiter.RETURN_NOTHING);
        changed=true;
      }
    }
    wtoken.hidden=wtoken.hiddenRequested=!visible;
    if (!visible) {
      unsetAppFreezingScreenLocked(wtoken,true,true);
    }
 else {
      WindowState swin=wtoken.startingWindow;
      if (swin != null && (swin.mDrawPending || swin.mCommitDrawPending)) {
        swin.mPolicyVisibility=false;
      }
    }
    if (DEBUG_APP_TRANSITIONS)     Log.v(TAG,"setTokenVisibilityLocked: " + wtoken + ": hidden="+ wtoken.hidden+ " hiddenRequested="+ wtoken.hiddenRequested);
    if (changed && performLayout) {
      mLayoutNeeded=true;
      performLayoutAndPlaceSurfacesLocked();
      updateFocusedWindowLocked();
    }
  }
  if (wtoken.animation != null) {
    delayed=true;
  }
  return delayed;
}
