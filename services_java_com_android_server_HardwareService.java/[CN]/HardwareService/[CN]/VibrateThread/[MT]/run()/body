{
synchronized (this) {
    int index=0;
    boolean nextState=false;
    long[] pattern=mPattern;
    if (pattern[0] == 0) {
      index++;
      nextState=true;
    }
    int len=pattern.length;
    long start=SystemClock.uptimeMillis();
    while (!mDone) {
      if (nextState) {
        HardwareService.this.on();
      }
 else {
        HardwareService.this.off();
      }
      nextState=!nextState;
      long bedtime=SystemClock.uptimeMillis();
      long duration=pattern[index];
      do {
        try {
          this.wait(duration);
        }
 catch (        InterruptedException e) {
        }
        if (mDone) {
          break;
        }
        duration=duration - SystemClock.uptimeMillis() - bedtime;
      }
 while (duration > 0);
      index++;
      if (index >= len) {
        if (mRepeat < 0) {
          HardwareService.this.off();
          break;
        }
 else {
          index=mRepeat;
        }
      }
    }
    mWakeLock.release();
  }
synchronized (HardwareService.this) {
    if (mThread == this) {
      mThread=null;
    }
  }
}
