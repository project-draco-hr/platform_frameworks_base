{
  if (events != 0) {
    if ((events & PhoneStateListener.LISTEN_CELL_LOCATION) != 0) {
      if (mContext.checkCallingPermission(android.Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
        mContext.enforceCallingOrSelfPermission(android.Manifest.permission.ACCESS_COARSE_LOCATION,null);
      }
    }
synchronized (mRecords) {
      Record r=null;
      find_and_add: {
        IBinder b=callback.asBinder();
        final int N=mRecords.size();
        for (int i=0; i < N; i++) {
          r=mRecords.get(i);
          if (b == r.binder) {
            break find_and_add;
          }
        }
        r=new Record();
        r.binder=b;
        r.callback=callback;
        r.pkgForDebug=pkgForDebug;
        mRecords.add(r);
      }
      int send=events & (events ^ r.events);
      r.events=events;
      if (notifyNow) {
        if ((events & PhoneStateListener.LISTEN_SERVICE_STATE) != 0) {
          sendServiceState(r,mServiceState);
        }
        if ((events & PhoneStateListener.LISTEN_SIGNAL_STRENGTH) != 0) {
          try {
            int gsmSignalStrength=mSignalStrength.getGsmSignalStrength();
            r.callback.onSignalStrengthChanged((gsmSignalStrength == 99 ? -1 : gsmSignalStrength));
          }
 catch (          RemoteException ex) {
            remove(r.binder);
          }
        }
        if ((events & PhoneStateListener.LISTEN_MESSAGE_WAITING_INDICATOR) != 0) {
          try {
            r.callback.onMessageWaitingIndicatorChanged(mMessageWaiting);
          }
 catch (          RemoteException ex) {
            remove(r.binder);
          }
        }
        if ((events & PhoneStateListener.LISTEN_CALL_FORWARDING_INDICATOR) != 0) {
          try {
            r.callback.onCallForwardingIndicatorChanged(mCallForwarding);
          }
 catch (          RemoteException ex) {
            remove(r.binder);
          }
        }
        if ((events & PhoneStateListener.LISTEN_CELL_LOCATION) != 0) {
          sendCellLocation(r,mCellLocation);
        }
        if ((events & PhoneStateListener.LISTEN_CALL_STATE) != 0) {
          try {
            r.callback.onCallStateChanged(mCallState,mCallIncomingNumber);
          }
 catch (          RemoteException ex) {
            remove(r.binder);
          }
        }
        if ((events & PhoneStateListener.LISTEN_DATA_CONNECTION_STATE) != 0) {
          try {
            r.callback.onDataConnectionStateChanged(mDataConnectionState);
          }
 catch (          RemoteException ex) {
            remove(r.binder);
          }
        }
        if ((events & PhoneStateListener.LISTEN_DATA_ACTIVITY) != 0) {
          try {
            r.callback.onDataActivity(mDataActivity);
          }
 catch (          RemoteException ex) {
            remove(r.binder);
          }
        }
        if ((events & PhoneStateListener.LISTEN_SIGNAL_STRENGTHS) != 0) {
          try {
            r.callback.onSignalStrengthsChanged(mSignalStrength);
          }
 catch (          RemoteException ex) {
            remove(r.binder);
          }
        }
      }
    }
  }
 else {
    remove(callback.asBinder());
  }
}
