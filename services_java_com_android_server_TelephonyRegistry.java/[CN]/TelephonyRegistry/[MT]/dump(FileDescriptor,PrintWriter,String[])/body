{
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println("Permission Denial: can't dump telephony.registry from from pid=" + Binder.getCallingPid() + ", uid="+ Binder.getCallingUid());
    return;
  }
synchronized (mRecords) {
    final int N=mRecords.size();
    pw.println("last known state:");
    pw.println("  mCallState=" + mCallState);
    pw.println("  mCallIncomingNumber=" + mCallIncomingNumber);
    pw.println("  mServiceState=" + mServiceState);
    pw.println("  mSignalStrength=" + mSignalStrength);
    pw.println("  mMessageWaiting=" + mMessageWaiting);
    pw.println("  mCallForwarding=" + mCallForwarding);
    pw.println("  mDataActivity=" + mDataActivity);
    pw.println("  mDataConnectionState=" + mDataConnectionState);
    pw.println("  mDataConnectionPossible=" + mDataConnectionPossible);
    pw.println("  mDataConnectionReason=" + mDataConnectionReason);
    pw.println("  mDataConnectionApn=" + mDataConnectionApn);
    pw.println("  mDataConnectionInterfaceName=" + mDataConnectionInterfaceName);
    pw.println("  mCellLocation=" + mCellLocation);
    pw.println("registrations: count=" + N);
    for (int i=0; i < N; i++) {
      Record r=mRecords.get(i);
      pw.println("  " + r.pkgForDebug + " 0x"+ Integer.toHexString(r.events));
    }
  }
}
