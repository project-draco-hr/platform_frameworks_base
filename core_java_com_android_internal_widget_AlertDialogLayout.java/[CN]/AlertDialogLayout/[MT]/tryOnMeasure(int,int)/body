{
  View topPanel=null;
  View buttonPanel=null;
  View middlePanel=null;
  final int count=getChildCount();
  for (int i=0; i < count; i++) {
    final View child=getChildAt(i);
    if (child.getVisibility() == View.GONE) {
      continue;
    }
    final int id=child.getId();
switch (id) {
case R.id.topPanel:
      topPanel=child;
    break;
case R.id.buttonPanel:
  buttonPanel=child;
break;
case R.id.contentPanel:
case R.id.customPanel:
if (middlePanel != null) {
return false;
}
middlePanel=child;
break;
default :
return false;
}
}
final int heightMode=MeasureSpec.getMode(heightMeasureSpec);
final int heightSize=MeasureSpec.getSize(heightMeasureSpec);
final int widthMode=MeasureSpec.getMode(widthMeasureSpec);
int childState=0;
int usedHeight=getPaddingTop() + getPaddingBottom();
if (topPanel != null) {
topPanel.measure(widthMeasureSpec,MeasureSpec.UNSPECIFIED);
usedHeight+=topPanel.getMeasuredHeight();
childState=combineMeasuredStates(childState,topPanel.getMeasuredState());
}
int buttonHeight=0;
int buttonWantsHeight=0;
if (buttonPanel != null) {
buttonPanel.measure(widthMeasureSpec,MeasureSpec.UNSPECIFIED);
buttonHeight=resolveMinimumHeight(buttonPanel);
buttonWantsHeight=buttonPanel.getMeasuredHeight() - buttonHeight;
usedHeight+=buttonHeight;
childState=combineMeasuredStates(childState,buttonPanel.getMeasuredState());
}
int middleHeight=0;
if (middlePanel != null) {
final int childHeightSpec;
if (heightMode == MeasureSpec.UNSPECIFIED) {
childHeightSpec=MeasureSpec.UNSPECIFIED;
}
 else {
childHeightSpec=MeasureSpec.makeMeasureSpec(Math.max(0,heightSize - usedHeight),heightMode);
}
middlePanel.measure(widthMeasureSpec,childHeightSpec);
middleHeight=middlePanel.getMeasuredHeight();
usedHeight+=middleHeight;
childState=combineMeasuredStates(childState,middlePanel.getMeasuredState());
}
int remainingHeight=heightSize - usedHeight;
if (buttonPanel != null) {
usedHeight-=buttonHeight;
final int heightToGive=Math.min(remainingHeight,buttonWantsHeight);
if (heightToGive > 0) {
remainingHeight-=heightToGive;
buttonHeight+=heightToGive;
}
final int childHeightSpec=MeasureSpec.makeMeasureSpec(buttonHeight,MeasureSpec.EXACTLY);
buttonPanel.measure(widthMeasureSpec,childHeightSpec);
usedHeight+=buttonPanel.getMeasuredHeight();
childState=combineMeasuredStates(childState,buttonPanel.getMeasuredState());
}
if (middlePanel != null && remainingHeight > 0) {
usedHeight-=middleHeight;
final int heightToGive=remainingHeight;
remainingHeight-=heightToGive;
middleHeight+=heightToGive;
final int childHeightSpec=MeasureSpec.makeMeasureSpec(middleHeight,heightMode);
middlePanel.measure(widthMeasureSpec,childHeightSpec);
usedHeight+=middlePanel.getMeasuredHeight();
childState=combineMeasuredStates(childState,middlePanel.getMeasuredState());
}
int maxWidth=0;
for (int i=0; i < count; i++) {
final View child=getChildAt(i);
if (child.getVisibility() != View.GONE) {
maxWidth=Math.max(maxWidth,child.getMeasuredWidth());
}
}
maxWidth+=getPaddingLeft() + getPaddingRight();
final int widthSizeAndState=resolveSizeAndState(maxWidth,widthMeasureSpec,childState);
final int heightSizeAndState=resolveSizeAndState(usedHeight,heightMeasureSpec,0);
setMeasuredDimension(widthSizeAndState,heightSizeAndState);
if (widthMode != MeasureSpec.EXACTLY) {
forceUniformWidth(count,heightMeasureSpec);
}
return true;
}
