{
  String targetUserIdString=parser.getAttributeValue(null,ATTR_TARGET_USER_ID);
  if (targetUserIdString == null) {
    targetUserIdString=parser.getAttributeValue(null,ATTR_USER_ID_DEST);
  }
  if (targetUserIdString == null) {
    String msg="Missing element under " + TAG + ": "+ ATTR_TARGET_USER_ID+ " at "+ parser.getPositionDescription();
    PackageManagerService.reportSettingsProblem(Log.WARN,msg);
    mTargetUserId=UserHandle.USER_NULL;
  }
 else {
    mTargetUserId=Integer.parseInt(targetUserIdString);
  }
  String removableString=parser.getAttributeValue(null,ATTR_REMOVABLE);
  if (removableString != null) {
    mRemovable=Boolean.parseBoolean(removableString);
  }
  int outerDepth=parser.getDepth();
  String tagName=parser.getName();
  int type;
  while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
    tagName=parser.getName();
    if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
      continue;
    }
 else     if (type == XmlPullParser.START_TAG) {
      if (tagName.equals(ATTR_FILTER)) {
        break;
      }
 else {
        String msg="Unknown element under " + Settings.TAG_FORWARDING_INTENT_FILTERS + ": "+ tagName+ " at "+ parser.getPositionDescription();
        PackageManagerService.reportSettingsProblem(Log.WARN,msg);
        XmlUtils.skipCurrentTag(parser);
      }
    }
  }
  if (tagName.equals(ATTR_FILTER)) {
    readFromXml(parser);
  }
 else {
    String msg="Missing element under " + TAG + ": "+ ATTR_FILTER+ " at "+ parser.getPositionDescription();
    PackageManagerService.reportSettingsProblem(Log.WARN,msg);
    XmlUtils.skipCurrentTag(parser);
  }
}
