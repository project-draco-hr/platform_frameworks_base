{
  assertRunOnServiceThread();
  mHandler.removeMessages(MSG_USER_CONTROL_RELEASE_TIMEOUT);
  if (mService.isPowerOnOrTransient() && isPowerOffOrToggleCommand(message)) {
    mService.standby();
    return true;
  }
 else   if (mService.isPowerStandbyOrTransient() && isPowerOnOrToggleCommand(message)) {
    mService.wakeUp();
    return true;
  }
  final long downTime=SystemClock.uptimeMillis();
  final byte[] params=message.getParams();
  final int keycode=HdmiCecKeycode.cecKeycodeAndParamsToAndroidKey(params);
  int keyRepeatCount=0;
  if (mLastKeycode != HdmiCecKeycode.UNSUPPORTED_KEYCODE) {
    if (keycode == mLastKeycode) {
      keyRepeatCount=mLastKeyRepeatCount + 1;
    }
 else {
      injectKeyEvent(downTime,KeyEvent.ACTION_UP,mLastKeycode,0);
    }
  }
  mLastKeycode=keycode;
  mLastKeyRepeatCount=keyRepeatCount;
  if (keycode != HdmiCecKeycode.UNSUPPORTED_KEYCODE) {
    injectKeyEvent(downTime,KeyEvent.ACTION_DOWN,keycode,keyRepeatCount);
    mHandler.sendMessageDelayed(Message.obtain(mHandler,MSG_USER_CONTROL_RELEASE_TIMEOUT),FOLLOWER_SAFETY_TIMEOUT);
    return true;
  }
  return false;
}
