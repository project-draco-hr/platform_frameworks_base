{
  String scheme=uri.getScheme();
  if (SCHEME_CONTENT.equals(scheme)) {
    ParcelFileDescriptor fd=openFileDescriptor(uri,"r");
    return fd != null ? new ParcelFileDescriptor.AutoCloseInputStream(fd) : null;
  }
 else   if (SCHEME_ANDROID_RESOURCE.equals(scheme)) {
    String authority=uri.getAuthority();
    Resources r;
    if (TextUtils.isEmpty(authority)) {
      throw new FileNotFoundException("No authority: " + uri);
    }
 else {
      try {
        r=mContext.getPackageManager().getResourcesForApplication(authority);
      }
 catch (      NameNotFoundException ex) {
        throw new FileNotFoundException("No package found for authority: " + uri);
      }
    }
    List<String> path=uri.getPathSegments();
    if (path == null) {
      throw new FileNotFoundException("No path: " + uri);
    }
    int len=path.size();
    int id;
    if (len == 1) {
      try {
        id=Integer.parseInt(path.get(0));
      }
 catch (      NumberFormatException e) {
        throw new FileNotFoundException("Single path segment is not a resource ID: " + uri);
      }
    }
 else     if (len == 2) {
      id=r.getIdentifier(path.get(1),path.get(0),authority);
    }
 else {
      throw new FileNotFoundException("More than two path segments: " + uri);
    }
    if (id == 0) {
      throw new FileNotFoundException("No resource found for: " + uri);
    }
    try {
      InputStream stream=r.openRawResource(id);
      return stream;
    }
 catch (    Resources.NotFoundException ex) {
      throw new FileNotFoundException("Resource ID does not exist: " + uri);
    }
  }
 else   if (SCHEME_FILE.equals(scheme)) {
    return new FileInputStream(uri.getPath());
  }
 else {
    throw new FileNotFoundException("Unknown scheme: " + uri);
  }
}
