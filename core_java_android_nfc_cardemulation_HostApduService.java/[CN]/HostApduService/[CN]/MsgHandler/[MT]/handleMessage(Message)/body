{
switch (msg.what) {
case MSG_COMMAND_APDU:
    Bundle dataBundle=msg.getData();
  if (dataBundle == null) {
    return;
  }
if (mNfcService == null) mNfcService=msg.replyTo;
byte[] apdu=dataBundle.getByteArray(KEY_DATA);
if (apdu != null) {
byte[] responseApdu=processCommandApdu(apdu,0);
if (responseApdu != null) {
if (mNfcService == null) {
  Log.e(TAG,"Response not sent; service was deactivated.");
  return;
}
Message responseMsg=Message.obtain(null,MSG_RESPONSE_APDU);
Bundle responseBundle=new Bundle();
responseBundle.putByteArray(KEY_DATA,responseApdu);
responseMsg.setData(responseBundle);
try {
  mNfcService.send(responseMsg);
}
 catch (RemoteException e) {
  Log.e("TAG","Response not sent; RemoteException calling into " + "NfcService.");
}
}
}
 else {
Log.e(TAG,"Received MSG_COMMAND_APDU without data.");
}
break;
case MSG_RESPONSE_APDU:
if (mNfcService == null) {
Log.e(TAG,"Response not sent; service was deactivated.");
return;
}
try {
mNfcService.send(msg);
}
 catch (RemoteException e) {
Log.e(TAG,"RemoteException calling into NfcService.");
}
break;
case MSG_DEACTIVATED:
mNfcService=null;
onDeactivated(msg.arg1);
break;
default :
super.handleMessage(msg);
}
}
