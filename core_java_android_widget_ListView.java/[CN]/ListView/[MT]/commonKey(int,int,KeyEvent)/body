{
  if (mAdapter == null) {
    return false;
  }
  if (mDataChanged) {
    layoutChildren();
  }
  boolean handled=false;
  int action=event.getAction();
  if (action != KeyEvent.ACTION_UP) {
    if (mSelectedPosition < 0) {
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
case KeyEvent.KEYCODE_DPAD_DOWN:
case KeyEvent.KEYCODE_DPAD_CENTER:
case KeyEvent.KEYCODE_ENTER:
case KeyEvent.KEYCODE_SPACE:
        if (resurrectSelection()) {
          return true;
        }
    }
  }
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
    if (!event.isAltPressed()) {
      while (count > 0) {
        handled=arrowScroll(FOCUS_UP);
        count--;
      }
    }
 else {
      handled=fullScroll(FOCUS_UP);
    }
  break;
case KeyEvent.KEYCODE_DPAD_DOWN:
if (!event.isAltPressed()) {
  while (count > 0) {
    handled=arrowScroll(FOCUS_DOWN);
    count--;
  }
}
 else {
  handled=fullScroll(FOCUS_DOWN);
}
break;
case KeyEvent.KEYCODE_DPAD_LEFT:
handled=handleHorizontalFocusWithinListItem(View.FOCUS_LEFT);
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
handled=handleHorizontalFocusWithinListItem(View.FOCUS_RIGHT);
break;
case KeyEvent.KEYCODE_DPAD_CENTER:
case KeyEvent.KEYCODE_ENTER:
if (mItemCount > 0 && event.getRepeatCount() == 0) {
keyPressed();
}
handled=true;
break;
case KeyEvent.KEYCODE_SPACE:
if (mPopup == null || !mPopup.isShowing()) {
if (!event.isShiftPressed()) {
pageScroll(FOCUS_DOWN);
}
 else {
pageScroll(FOCUS_UP);
}
handled=true;
}
break;
}
}
if (!handled) {
handled=sendToTextFilter(keyCode,count,event);
}
if (handled) {
return true;
}
 else {
switch (action) {
case KeyEvent.ACTION_DOWN:
return super.onKeyDown(keyCode,event);
case KeyEvent.ACTION_UP:
return super.onKeyUp(keyCode,event);
case KeyEvent.ACTION_MULTIPLE:
return super.onKeyMultiple(keyCode,count,event);
default :
return false;
}
}
}
