{
  if (mCachingStarted) {
    mCachingActive=true;
  }
  final int dividerHeight=mDividerHeight;
  final Drawable overscrollHeader=mOverScrollHeader;
  final Drawable overscrollFooter=mOverScrollFooter;
  final boolean drawOverscrollHeader=overscrollHeader != null;
  final boolean drawOverscrollFooter=overscrollFooter != null;
  final boolean drawDividers=dividerHeight > 0 && mDivider != null;
  if (drawDividers || drawOverscrollHeader || drawOverscrollFooter) {
    final Rect bounds=mTempRect;
    bounds.left=mPaddingLeft;
    bounds.right=mRight - mLeft - mPaddingRight;
    final int count=getChildCount();
    final int headerCount=mHeaderViewInfos.size();
    final int itemCount=mItemCount;
    final int footerLimit=(itemCount - mFooterViewInfos.size());
    final boolean headerDividers=mHeaderDividersEnabled;
    final boolean footerDividers=mFooterDividersEnabled;
    final int first=mFirstPosition;
    final boolean areAllItemsSelectable=mAreAllItemsSelectable;
    final ListAdapter adapter=mAdapter;
    final boolean fillForMissingDividers=isOpaque() && !super.isOpaque();
    if (fillForMissingDividers && mDividerPaint == null && mIsCacheColorOpaque) {
      mDividerPaint=new Paint();
      mDividerPaint.setColor(getCacheColorHint());
    }
    final Paint paint=mDividerPaint;
    int effectivePaddingTop=0;
    int effectivePaddingBottom=0;
    if ((mGroupFlags & CLIP_TO_PADDING_MASK) == CLIP_TO_PADDING_MASK) {
      effectivePaddingTop=mListPadding.top;
      effectivePaddingBottom=mListPadding.bottom;
    }
    final int listBottom=mBottom - mTop - effectivePaddingBottom + mScrollY;
    if (!mStackFromBottom) {
      int bottom=0;
      final int scrollY=mScrollY;
      if (count > 0 && scrollY < 0) {
        if (drawOverscrollHeader) {
          bounds.bottom=0;
          bounds.top=scrollY;
          drawOverscrollHeader(canvas,overscrollHeader,bounds);
        }
 else         if (drawDividers) {
          bounds.bottom=0;
          bounds.top=-dividerHeight;
          drawDivider(canvas,bounds,-1);
        }
      }
      for (int i=0; i < count; i++) {
        final int itemIndex=(first + i);
        final boolean isHeader=(itemIndex < headerCount);
        final boolean isFooter=(itemIndex >= footerLimit);
        if ((headerDividers || !isHeader) && (footerDividers || !isFooter)) {
          final View child=getChildAt(i);
          bottom=child.getBottom();
          final boolean isLastItem=(i == (count - 1));
          if (drawDividers && (bottom < listBottom) && !(drawOverscrollFooter && isLastItem)) {
            final int nextIndex=(itemIndex + 1);
            if (areAllItemsSelectable || ((adapter.isEnabled(itemIndex) || (headerDividers && isHeader) || (footerDividers && isFooter)) && (isLastItem || adapter.isEnabled(nextIndex) || (headerDividers && (nextIndex < headerCount))|| (footerDividers && (nextIndex >= footerLimit))))) {
              bounds.top=bottom;
              bounds.bottom=bottom + dividerHeight;
              drawDivider(canvas,bounds,i);
            }
 else             if (fillForMissingDividers) {
              bounds.top=bottom;
              bounds.bottom=bottom + dividerHeight;
              canvas.drawRect(bounds,paint);
            }
          }
        }
      }
      final int overFooterBottom=mBottom + mScrollY;
      if (drawOverscrollFooter && first + count == itemCount && overFooterBottom > bottom) {
        bounds.top=bottom;
        bounds.bottom=overFooterBottom;
        drawOverscrollFooter(canvas,overscrollFooter,bounds);
      }
    }
 else {
      int top;
      final int scrollY=mScrollY;
      if (count > 0 && drawOverscrollHeader) {
        bounds.top=scrollY;
        bounds.bottom=getChildAt(0).getTop();
        drawOverscrollHeader(canvas,overscrollHeader,bounds);
      }
      final int start=drawOverscrollHeader ? 1 : 0;
      for (int i=start; i < count; i++) {
        final int itemIndex=(first + i);
        final boolean isHeader=(itemIndex < headerCount);
        final boolean isFooter=(itemIndex >= footerLimit);
        if ((headerDividers || !isHeader) && (footerDividers || !isFooter)) {
          final View child=getChildAt(i);
          top=child.getTop();
          if (drawDividers && (top > effectivePaddingTop)) {
            final boolean isFirstItem=(i == start);
            final int previousIndex=(itemIndex - 1);
            if (areAllItemsSelectable || ((adapter.isEnabled(itemIndex) || (headerDividers && isHeader) || (footerDividers && isFooter)) && (isFirstItem || adapter.isEnabled(previousIndex) || (headerDividers && (previousIndex < headerCount))|| (footerDividers && (previousIndex >= footerLimit))))) {
              bounds.top=top - dividerHeight;
              bounds.bottom=top;
              drawDivider(canvas,bounds,i - 1);
            }
 else             if (fillForMissingDividers) {
              bounds.top=top - dividerHeight;
              bounds.bottom=top;
              canvas.drawRect(bounds,paint);
            }
          }
        }
      }
      if (count > 0 && scrollY > 0) {
        if (drawOverscrollFooter) {
          final int absListBottom=mBottom;
          bounds.top=absListBottom;
          bounds.bottom=absListBottom + scrollY;
          drawOverscrollFooter(canvas,overscrollFooter,bounds);
        }
 else         if (drawDividers) {
          bounds.top=listBottom;
          bounds.bottom=listBottom + dividerHeight;
          drawDivider(canvas,bounds,-1);
        }
      }
    }
  }
  super.dispatchDraw(canvas);
}
