{
  final int dividerHeight=mDividerHeight;
  final boolean drawDividers=dividerHeight > 0 && mDivider != null;
  if (drawDividers) {
    final Rect bounds=mTempRect;
    bounds.left=mPaddingLeft;
    bounds.right=mRight - mLeft - mPaddingRight;
    final int count=getChildCount();
    final int headerCount=mHeaderViewInfos.size();
    final int itemCount=mItemCount;
    final int footerLimit=itemCount - mFooterViewInfos.size() - 1;
    final boolean headerDividers=mHeaderDividersEnabled;
    final boolean footerDividers=mFooterDividersEnabled;
    final int first=mFirstPosition;
    final boolean areAllItemsSelectable=mAreAllItemsSelectable;
    final ListAdapter adapter=mAdapter;
    final boolean fillForMissingDividers=isOpaque() && !super.isOpaque();
    if (fillForMissingDividers && mDividerPaint == null && mIsCacheColorOpaque) {
      mDividerPaint=new Paint();
      mDividerPaint.setColor(getCacheColorHint());
    }
    final Paint paint=mDividerPaint;
    final int listBottom=mBottom - mTop - mListPadding.bottom + mScrollY;
    if (!mStackFromBottom) {
      int bottom;
      final int scrollY=mScrollY;
      for (int i=0; i < count; i++) {
        if ((headerDividers || first + i >= headerCount) && (footerDividers || first + i < footerLimit)) {
          View child=getChildAt(i);
          bottom=child.getBottom();
          if ((areAllItemsSelectable || (adapter.isEnabled(first + i) && (i == count - 1 || adapter.isEnabled(first + i + 1))))) {
            bounds.top=bottom;
            bounds.bottom=bottom + dividerHeight;
            drawDivider(canvas,bounds,i);
          }
 else           if (fillForMissingDividers) {
            bounds.top=bottom;
            bounds.bottom=bottom + dividerHeight;
            canvas.drawRect(bounds,paint);
          }
        }
      }
    }
 else {
      int top;
      int listTop=mListPadding.top;
      final int scrollY=mScrollY;
      for (int i=0; i < count; i++) {
        if ((headerDividers || first + i >= headerCount) && (footerDividers || first + i < footerLimit)) {
          View child=getChildAt(i);
          top=child.getTop();
          if (top > listTop) {
            if ((areAllItemsSelectable || (adapter.isEnabled(first + i) && (i == count - 1 || adapter.isEnabled(first + i + 1))))) {
              bounds.top=top - dividerHeight;
              bounds.bottom=top;
              drawDivider(canvas,bounds,i - 1);
            }
 else             if (fillForMissingDividers) {
              bounds.top=top - dividerHeight;
              bounds.bottom=top;
              canvas.drawRect(bounds,paint);
            }
          }
        }
      }
      if (count > 0 && scrollY > 0) {
        bounds.top=listBottom;
        bounds.bottom=listBottom + dividerHeight;
        drawDivider(canvas,bounds,-1);
      }
    }
  }
  super.dispatchDraw(canvas);
}
