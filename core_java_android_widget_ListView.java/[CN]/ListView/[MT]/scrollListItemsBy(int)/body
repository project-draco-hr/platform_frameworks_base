{
  offsetChildrenTopAndBottom(amount);
  final int listBottom=getHeight() - mListPadding.bottom;
  final int listTop=mListPadding.top;
  if (amount < 0) {
    int numChildren=getChildCount();
    View last=getChildAt(numChildren - 1);
    while (last.getBottom() < listBottom) {
      final int lastVisiblePosition=mFirstPosition + numChildren - 1;
      if (lastVisiblePosition < mItemCount - 1) {
        last=addViewBelow(last,lastVisiblePosition);
        numChildren++;
      }
 else {
        break;
      }
    }
    if (last.getBottom() < listBottom) {
      offsetChildrenTopAndBottom(listBottom - last.getBottom());
    }
    View first=getChildAt(0);
    while (first.getBottom() < listTop) {
      removeViewInLayout(first);
      mRecycler.addScrapView(first);
      first=getChildAt(0);
      mFirstPosition++;
    }
  }
 else {
    View first=getChildAt(0);
    while ((first.getTop() > listTop) && (mFirstPosition > 0)) {
      first=addViewAbove(first,mFirstPosition);
      mFirstPosition--;
    }
    if (first.getTop() > listTop) {
      offsetChildrenTopAndBottom(listTop - first.getTop());
    }
    int lastIndex=getChildCount() - 1;
    View last=getChildAt(lastIndex);
    while (last.getTop() > listBottom) {
      removeViewInLayout(last);
      mRecycler.addScrapView(last);
      last=getChildAt(--lastIndex);
    }
  }
}
