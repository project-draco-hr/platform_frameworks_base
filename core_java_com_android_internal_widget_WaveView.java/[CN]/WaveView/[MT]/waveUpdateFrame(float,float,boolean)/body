{
  double distX=mouseX - mLockCenterX;
  double distY=mouseY - mLockCenterY;
  int dragDistance=(int)Math.ceil(Math.hypot(distX,distY));
  double touchA=Math.atan2(distX,distY);
  float ringX=(float)(mLockCenterX + mRingRadius * Math.sin(touchA));
  float ringY=(float)(mLockCenterY + mRingRadius * Math.cos(touchA));
switch (mLockState) {
case STATE_RESET_LOCK:
    if (DBG)     Log.v(TAG,"State RESET_LOCK");
  mWaveTimerDelay=WAVE_DELAY;
for (int i=0; i < mLightWaves.size(); i++) {
  DrawableHolder holder=mLightWaves.get(i);
  holder.addAnimTo(300,0,"alpha",0.0f,false);
}
for (int i=0; i < mLightWaves.size(); i++) {
mLightWaves.get(i).startAnimations(this);
}
mUnlockRing.addAnimTo(DURATION,0,"x",mLockCenterX,true);
mUnlockRing.addAnimTo(DURATION,0,"y",mLockCenterY,true);
mUnlockRing.addAnimTo(DURATION,0,"scaleX",0.1f,true);
mUnlockRing.addAnimTo(DURATION,0,"scaleY",0.1f,true);
mUnlockRing.addAnimTo(DURATION,0,"alpha",0.0f,true);
mUnlockDefault.removeAnimationFor("x");
mUnlockDefault.removeAnimationFor("y");
mUnlockDefault.removeAnimationFor("scaleX");
mUnlockDefault.removeAnimationFor("scaleY");
mUnlockDefault.removeAnimationFor("alpha");
mUnlockDefault.setX(mLockCenterX);
mUnlockDefault.setY(mLockCenterY);
mUnlockDefault.setScaleX(0.1f);
mUnlockDefault.setScaleY(0.1f);
mUnlockDefault.setAlpha(0.0f);
mUnlockDefault.addAnimTo(DURATION,SHORT_DELAY,"scaleX",1.0f,true);
mUnlockDefault.addAnimTo(DURATION,SHORT_DELAY,"scaleY",1.0f,true);
mUnlockDefault.addAnimTo(DURATION,SHORT_DELAY,"alpha",1.0f,true);
mUnlockHalo.removeAnimationFor("x");
mUnlockHalo.removeAnimationFor("y");
mUnlockHalo.removeAnimationFor("scaleX");
mUnlockHalo.removeAnimationFor("scaleY");
mUnlockHalo.removeAnimationFor("alpha");
mUnlockHalo.setX(mLockCenterX);
mUnlockHalo.setY(mLockCenterY);
mUnlockHalo.setScaleX(0.1f);
mUnlockHalo.setScaleY(0.1f);
mUnlockHalo.setAlpha(0.0f);
mUnlockHalo.addAnimTo(DURATION,SHORT_DELAY,"x",mLockCenterX,true);
mUnlockHalo.addAnimTo(DURATION,SHORT_DELAY,"y",mLockCenterY,true);
mUnlockHalo.addAnimTo(DURATION,SHORT_DELAY,"scaleX",1.0f,true);
mUnlockHalo.addAnimTo(DURATION,SHORT_DELAY,"scaleY",1.0f,true);
mUnlockHalo.addAnimTo(DURATION,SHORT_DELAY,"alpha",1.0f,true);
removeCallbacks(mLockTimerActions);
mLockState=STATE_READY;
break;
case STATE_READY:
if (DBG) Log.v(TAG,"State READY");
break;
case STATE_START_ATTEMPT:
if (DBG) Log.v(TAG,"State START_ATTEMPT");
mUnlockDefault.removeAnimationFor("x");
mUnlockDefault.removeAnimationFor("y");
mUnlockDefault.removeAnimationFor("scaleX");
mUnlockDefault.removeAnimationFor("scaleY");
mUnlockDefault.removeAnimationFor("alpha");
mUnlockDefault.setX(mLockCenterX + 182);
mUnlockDefault.setY(mLockCenterY);
mUnlockDefault.setScaleX(0.1f);
mUnlockDefault.setScaleY(0.1f);
mUnlockDefault.setAlpha(0.0f);
mUnlockDefault.addAnimTo(DURATION,SHORT_DELAY,"scaleX",1.0f,false);
mUnlockDefault.addAnimTo(DURATION,SHORT_DELAY,"scaleY",1.0f,false);
mUnlockDefault.addAnimTo(DURATION,SHORT_DELAY,"alpha",1.0f,false);
mUnlockRing.addAnimTo(DURATION,0,"scaleX",1.0f,true);
mUnlockRing.addAnimTo(DURATION,0,"scaleY",1.0f,true);
mUnlockRing.addAnimTo(DURATION,0,"alpha",1.0f,true);
postDelayed(mAddWaveAction,mWaveTimerDelay);
mLockState=STATE_ATTEMPTING;
break;
case STATE_ATTEMPTING:
if (DBG) Log.v(TAG,"State ATTEMPTING (fingerDown = " + fingerDown + ")");
if (dragDistance > mSnapRadius) {
if (fingerDown) {
mUnlockHalo.addAnimTo(0,0,"x",ringX,true);
mUnlockHalo.addAnimTo(0,0,"y",ringY,true);
mUnlockHalo.addAnimTo(0,0,"scaleX",1.0f,true);
mUnlockHalo.addAnimTo(0,0,"scaleY",1.0f,true);
mUnlockHalo.addAnimTo(0,0,"alpha",1.0f,true);
}
 else {
if (DBG) Log.v(TAG,"up detected, moving to STATE_UNLOCK_ATTEMPT");
mLockState=STATE_UNLOCK_ATTEMPT;
}
}
 else {
mUnlockHalo.addAnimTo(0,0,"x",mouseX,true);
mUnlockHalo.addAnimTo(0,0,"y",mouseY,true);
mUnlockHalo.addAnimTo(0,0,"scaleX",1.0f,true);
mUnlockHalo.addAnimTo(0,0,"scaleY",1.0f,true);
mUnlockHalo.addAnimTo(0,0,"alpha",1.0f,true);
}
break;
case STATE_UNLOCK_ATTEMPT:
if (DBG) Log.v(TAG,"State UNLOCK_ATTEMPT");
if (dragDistance > mSnapRadius) {
for (int n=0; n < mLightWaves.size(); n++) {
DrawableHolder wave=mLightWaves.get(n);
long delay=1000L * (6 + n - mCurrentWave) / 10L;
wave.addAnimTo(FINAL_DURATION,delay,"x",ringX,true);
wave.addAnimTo(FINAL_DURATION,delay,"y",ringY,true);
wave.addAnimTo(FINAL_DURATION,delay,"scaleX",0.1f,true);
wave.addAnimTo(FINAL_DURATION,delay,"scaleY",0.1f,true);
wave.addAnimTo(FINAL_DURATION,delay,"alpha",0.0f,true);
}
for (int i=0; i < mLightWaves.size(); i++) {
mLightWaves.get(i).startAnimations(this);
}
mUnlockRing.addAnimTo(FINAL_DURATION,0,"x",ringX,false);
mUnlockRing.addAnimTo(FINAL_DURATION,0,"y",ringY,false);
mUnlockRing.addAnimTo(FINAL_DURATION,0,"scaleX",0.1f,false);
mUnlockRing.addAnimTo(FINAL_DURATION,0,"scaleY",0.1f,false);
mUnlockRing.addAnimTo(FINAL_DURATION,0,"alpha",0.0f,false);
mUnlockRing.addAnimTo(FINAL_DURATION,FINAL_DELAY,"alpha",0.0f,false);
mUnlockDefault.removeAnimationFor("x");
mUnlockDefault.removeAnimationFor("y");
mUnlockDefault.removeAnimationFor("scaleX");
mUnlockDefault.removeAnimationFor("scaleY");
mUnlockDefault.removeAnimationFor("alpha");
mUnlockDefault.setX(ringX);
mUnlockDefault.setY(ringY);
mUnlockDefault.setScaleX(0.1f);
mUnlockDefault.setScaleY(0.1f);
mUnlockDefault.setAlpha(0.0f);
mUnlockDefault.addAnimTo(FINAL_DURATION,0,"x",ringX,true);
mUnlockDefault.addAnimTo(FINAL_DURATION,0,"y",ringY,true);
mUnlockDefault.addAnimTo(FINAL_DURATION,0,"scaleX",1.0f,true);
mUnlockDefault.addAnimTo(FINAL_DURATION,0,"scaleY",1.0f,true);
mUnlockDefault.addAnimTo(FINAL_DURATION,0,"alpha",1.0f,true);
mUnlockDefault.addAnimTo(FINAL_DURATION,FINAL_DELAY,"scaleX",3.0f,false);
mUnlockDefault.addAnimTo(FINAL_DURATION,FINAL_DELAY,"scaleY",3.0f,false);
mUnlockDefault.addAnimTo(FINAL_DURATION,FINAL_DELAY,"alpha",0.0f,false);
mUnlockHalo.addAnimTo(FINAL_DURATION,0,"x",ringX,false);
mUnlockHalo.addAnimTo(FINAL_DURATION,0,"y",ringY,false);
mUnlockHalo.addAnimTo(FINAL_DURATION,FINAL_DELAY,"scaleX",3.0f,false);
mUnlockHalo.addAnimTo(FINAL_DURATION,FINAL_DELAY,"scaleY",3.0f,false);
mUnlockHalo.addAnimTo(FINAL_DURATION,FINAL_DELAY,"alpha",0.0f,false);
removeCallbacks(mLockTimerActions);
postDelayed(mLockTimerActions,RESET_TIMEOUT);
dispatchTriggerEvent(OnTriggerListener.CENTER_HANDLE);
mLockState=STATE_UNLOCK_SUCCESS;
}
 else {
mLockState=STATE_RESET_LOCK;
}
break;
case STATE_UNLOCK_SUCCESS:
if (DBG) Log.v(TAG,"State UNLOCK_SUCCESS");
removeCallbacks(mAddWaveAction);
break;
default :
if (DBG) Log.v(TAG,"Unknown state " + mLockState);
break;
}
mUnlockDefault.startAnimations(this);
mUnlockHalo.startAnimations(this);
mUnlockRing.startAnimations(this);
}
