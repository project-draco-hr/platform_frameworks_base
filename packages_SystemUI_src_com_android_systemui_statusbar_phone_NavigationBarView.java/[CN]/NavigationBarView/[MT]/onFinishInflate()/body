{
  mRotatedViews[Surface.ROTATION_0]=mRotatedViews[Surface.ROTATION_180]=findViewById(R.id.rot0);
  mRotatedViews[Surface.ROTATION_90]=findViewById(R.id.rot90);
  mRotatedViews[Surface.ROTATION_270]=mRotatedViews[Surface.ROTATION_90];
  mCurrentView=mRotatedViews[Surface.ROTATION_0];
  for (int i=0; i < mButtonDisatchers.size(); i++) {
    mButtonDisatchers.valueAt(i).setCurrentView(mCurrentView);
  }
  ((NavigationBarInflaterView)findViewById(R.id.navigation_inflater)).setButtonDispatchers(mButtonDisatchers);
  getImeSwitchButton().setOnClickListener(mImeSwitcherClickListener);
  try {
    WindowManagerGlobal.getWindowManagerService().registerDockedStackListener(new Stub(){
      @Override public void onDividerVisibilityChanged(      boolean visible) throws RemoteException {
      }
      @Override public void onDockedStackExistsChanged(      final boolean exists) throws RemoteException {
        mHandler.post(new Runnable(){
          @Override public void run(){
            mDockedStackExists=exists;
            updateRecentsIcon();
          }
        }
);
      }
      @Override public void onDockedStackMinimizedChanged(      boolean minimized,      long animDuration) throws RemoteException {
      }
      @Override public void onDockSideChanged(      int newDockSide) throws RemoteException {
      }
    }
);
  }
 catch (  RemoteException e) {
    Log.e(TAG,"Failed registering docked stack exists listener",e);
  }
}
