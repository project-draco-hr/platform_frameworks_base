{
  String packageName=null;
  String op=null;
  int userId=UserHandle.USER_CURRENT;
  for (String argument; (argument=nextArg()) != null; ) {
    if (ARGUMENT_USER.equals(argument)) {
      userId=Integer.parseInt(nextArgRequired());
    }
 else {
      if (packageName == null) {
        packageName=argument;
      }
 else       if (op == null) {
        op=argument;
      }
 else {
        System.err.println("Error: Unsupported argument: " + argument);
        return;
      }
    }
  }
  if (packageName == null) {
    System.err.println("Error: Package name not specified.");
    return;
  }
  final int opInt=op != null ? strOpToOp(op) : 0;
  if (userId == UserHandle.USER_CURRENT) {
    userId=ActivityManager.getCurrentUser();
  }
  final IPackageManager pm=ActivityThread.getPackageManager();
  final IAppOpsService appOpsService=IAppOpsService.Stub.asInterface(ServiceManager.getService(Context.APP_OPS_SERVICE));
  final int uid;
  if ("root".equals(packageName)) {
    uid=0;
  }
 else {
    uid=pm.getPackageUid(packageName,userId);
  }
  if (uid < 0) {
    System.err.println("Error: No UID for " + packageName + " in user "+ userId);
    return;
  }
  List<AppOpsManager.PackageOps> ops=appOpsService.getOpsForPackage(uid,packageName,op != null ? new int[]{opInt} : null);
  if (ops == null || ops.size() <= 0) {
    System.out.println("No operations.");
    return;
  }
  final long now=System.currentTimeMillis();
  for (int i=0; i < ops.size(); i++) {
    List<AppOpsManager.OpEntry> entries=ops.get(i).getOps();
    for (int j=0; j < entries.size(); j++) {
      AppOpsManager.OpEntry ent=entries.get(j);
      System.out.print(AppOpsManager.opToName(ent.getOp()));
      System.out.print(": ");
switch (ent.getMode()) {
case AppOpsManager.MODE_ALLOWED:
        System.out.print("allow");
      break;
case AppOpsManager.MODE_IGNORED:
    System.out.print("ignore");
  break;
case AppOpsManager.MODE_ERRORED:
System.out.print("deny");
break;
case AppOpsManager.MODE_DEFAULT:
System.out.print("default");
break;
default :
System.out.print("mode=");
System.out.print(ent.getMode());
break;
}
if (ent.getTime() != 0) {
System.out.print("; time=");
StringBuilder sb=new StringBuilder();
TimeUtils.formatDuration(now - ent.getTime(),sb);
System.out.print(sb);
System.out.print(" ago");
}
if (ent.getRejectTime() != 0) {
System.out.print("; rejectTime=");
StringBuilder sb=new StringBuilder();
TimeUtils.formatDuration(now - ent.getRejectTime(),sb);
System.out.print(sb);
System.out.print(" ago");
}
if (ent.getDuration() == -1) {
System.out.print(" (running)");
}
 else if (ent.getDuration() != 0) {
System.out.print("; duration=");
StringBuilder sb=new StringBuilder();
TimeUtils.formatDuration(ent.getDuration(),sb);
System.out.print(sb);
}
System.out.println();
}
}
}
