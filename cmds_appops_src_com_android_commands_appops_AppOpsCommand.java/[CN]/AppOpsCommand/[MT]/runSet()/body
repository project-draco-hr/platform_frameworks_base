{
  String packageName=null;
  String op=null;
  String mode=null;
  int userId=UserHandle.USER_CURRENT;
  for (String argument; (argument=nextArg()) != null; ) {
    if (ARGUMENT_USER.equals(argument)) {
      userId=Integer.parseInt(nextArgRequired());
    }
 else {
      if (packageName == null) {
        packageName=argument;
      }
 else       if (op == null) {
        op=argument;
      }
 else       if (mode == null) {
        mode=argument;
      }
 else {
        System.err.println("Error: Unsupported argument: " + argument);
        return;
      }
    }
  }
  if (packageName == null) {
    System.err.println("Error: Package name not specified.");
    return;
  }
 else   if (op == null) {
    System.err.println("Error: Operation not specified.");
    return;
  }
 else   if (mode == null) {
    System.err.println("Error: Mode not specified.");
    return;
  }
  final int opInt=strOpToOp(op);
  if (opInt < 0) {
    return;
  }
  final int modeInt;
switch (mode) {
case MODE_ALLOW:
    modeInt=AppOpsManager.MODE_ALLOWED;
  break;
case MODE_DENY:
modeInt=AppOpsManager.MODE_ERRORED;
break;
case MODE_IGNORE:
modeInt=AppOpsManager.MODE_IGNORED;
break;
case MODE_DEFAULT:
modeInt=AppOpsManager.MODE_DEFAULT;
break;
default :
System.err.println("Error: Mode " + mode + " is not valid,");
return;
}
if (userId == UserHandle.USER_CURRENT) {
userId=ActivityManager.getCurrentUser();
}
final IPackageManager pm=ActivityThread.getPackageManager();
final IAppOpsService appOpsService=IAppOpsService.Stub.asInterface(ServiceManager.getService(Context.APP_OPS_SERVICE));
final int uid=pm.getPackageUid(packageName,userId);
if (uid < 0) {
System.err.println("Error: No UID for " + packageName + " in user "+ userId);
return;
}
appOpsService.setMode(opInt,uid,packageName,modeInt);
}
