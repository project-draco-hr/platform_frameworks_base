{
synchronized (this) {
    if (mClassLoader != null) {
      return mClassLoader;
    }
    if (mPackageName.equals("android")) {
      if (mBaseClassLoader == null) {
        mClassLoader=ClassLoader.getSystemClassLoader();
      }
 else {
        mClassLoader=mBaseClassLoader;
      }
      return mClassLoader;
    }
    if (!Objects.equals(mPackageName,ActivityThread.currentPackageName())) {
      final String isa=VMRuntime.getRuntime().vmInstructionSet();
      try {
        ActivityThread.getPackageManager().notifyPackageUse(mPackageName);
      }
 catch (      RemoteException re) {
        throw re.rethrowFromSystemServer();
      }
    }
    final List<String> zipPaths=new ArrayList<>();
    final List<String> apkPaths=new ArrayList<>();
    final List<String> libPaths=new ArrayList<>();
    if (mRegisterPackage) {
      try {
        ActivityManagerNative.getDefault().addPackageDependency(mPackageName);
      }
 catch (      RemoteException e) {
        throw e.rethrowFromSystemServer();
      }
    }
    zipPaths.add(mAppDir);
    if (mSplitAppDirs != null) {
      Collections.addAll(zipPaths,mSplitAppDirs);
    }
    libPaths.add(mLibDir);
    String instrumentationPackageName=mActivityThread.mInstrumentationPackageName;
    String instrumentationAppDir=mActivityThread.mInstrumentationAppDir;
    String[] instrumentationSplitAppDirs=mActivityThread.mInstrumentationSplitAppDirs;
    String instrumentationLibDir=mActivityThread.mInstrumentationLibDir;
    String instrumentedAppDir=mActivityThread.mInstrumentedAppDir;
    String[] instrumentedSplitAppDirs=mActivityThread.mInstrumentedSplitAppDirs;
    String instrumentedLibDir=mActivityThread.mInstrumentedLibDir;
    String[] instrumentationLibs=null;
    if (mAppDir.equals(instrumentationAppDir) || mAppDir.equals(instrumentedAppDir)) {
      zipPaths.clear();
      zipPaths.add(instrumentationAppDir);
      if (instrumentationSplitAppDirs != null) {
        Collections.addAll(zipPaths,instrumentationSplitAppDirs);
      }
      zipPaths.add(instrumentedAppDir);
      if (instrumentedSplitAppDirs != null) {
        Collections.addAll(zipPaths,instrumentedSplitAppDirs);
      }
      libPaths.clear();
      libPaths.add(instrumentationLibDir);
      libPaths.add(instrumentedLibDir);
      if (!instrumentedAppDir.equals(instrumentationAppDir)) {
        instrumentationLibs=getLibrariesFor(instrumentationPackageName);
      }
    }
    apkPaths.addAll(zipPaths);
    if (mSharedLibraries != null) {
      for (      String lib : mSharedLibraries) {
        if (!zipPaths.contains(lib)) {
          zipPaths.add(0,lib);
        }
      }
    }
    if (instrumentationLibs != null) {
      for (      String lib : instrumentationLibs) {
        if (!zipPaths.contains(lib)) {
          zipPaths.add(0,lib);
        }
      }
    }
    final String zip=mIncludeCode ? TextUtils.join(File.pathSeparator,zipPaths) : "";
    if (mApplicationInfo.primaryCpuAbi != null) {
      for (      String apk : apkPaths) {
        libPaths.add(apk + "!/lib/" + mApplicationInfo.primaryCpuAbi);
      }
    }
    String libraryPermittedPath=mDataDir;
    boolean isBundledApp=false;
    if (mApplicationInfo.isSystemApp() && !mApplicationInfo.isUpdatedSystemApp()) {
      isBundledApp=true;
      libPaths.add(System.getProperty("java.library.path"));
      libraryPermittedPath+=File.pathSeparator + System.getProperty("java.library.path");
    }
    if (mApplicationInfo.targetSdkVersion <= 23) {
      libraryPermittedPath+=File.pathSeparator + "/data/app";
    }
    final String librarySearchPath=TextUtils.join(File.pathSeparator,libPaths);
    if (ActivityThread.localLOGV)     Slog.v(ActivityThread.TAG,"Class path: " + zip + ", JNI path: "+ librarySearchPath);
    StrictMode.ThreadPolicy oldPolicy=StrictMode.allowThreadDiskReads();
    mClassLoader=ApplicationLoaders.getDefault().getClassLoader(zip,mApplicationInfo.targetSdkVersion,isBundledApp,librarySearchPath,libraryPermittedPath,mBaseClassLoader);
    StrictMode.setThreadPolicy(oldPolicy);
    return mClassLoader;
  }
}
