{
synchronized (this) {
    if (mClassLoader != null) {
      return mClassLoader;
    }
    if (mIncludeCode && !mPackageName.equals("android")) {
      String zip=mAppDir;
      String libraryPath=mLibDir;
      String instrumentationAppDir=mActivityThread.mInstrumentationAppDir;
      String instrumentationAppLibraryDir=mActivityThread.mInstrumentationAppLibraryDir;
      String instrumentationAppPackage=mActivityThread.mInstrumentationAppPackage;
      String instrumentedAppDir=mActivityThread.mInstrumentedAppDir;
      String instrumentedAppLibraryDir=mActivityThread.mInstrumentedAppLibraryDir;
      String[] instrumentationLibs=null;
      if (mAppDir.equals(instrumentationAppDir) || mAppDir.equals(instrumentedAppDir)) {
        zip=instrumentationAppDir + ":" + instrumentedAppDir;
        libraryPath=instrumentationAppLibraryDir + ":" + instrumentedAppLibraryDir;
        if (!instrumentedAppDir.equals(instrumentationAppDir)) {
          instrumentationLibs=getLibrariesFor(instrumentationAppPackage);
        }
      }
      if ((mSharedLibraries != null) || (instrumentationLibs != null)) {
        zip=combineLibs(mSharedLibraries,instrumentationLibs) + ':' + zip;
      }
      if (ActivityThread.localLOGV)       Slog.v(ActivityThread.TAG,"Class path: " + zip + ", JNI path: "+ libraryPath);
      StrictMode.ThreadPolicy oldPolicy=StrictMode.allowThreadDiskReads();
      mClassLoader=ApplicationLoaders.getDefault().getClassLoader(zip,libraryPath,mBaseClassLoader);
      initializeJavaContextClassLoader();
      StrictMode.setThreadPolicy(oldPolicy);
    }
 else {
      if (mBaseClassLoader == null) {
        mClassLoader=ClassLoader.getSystemClassLoader();
      }
 else {
        mClassLoader=mBaseClassLoader;
      }
    }
    return mClassLoader;
  }
}
