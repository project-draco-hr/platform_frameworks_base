{
synchronized (this) {
    if (mClassLoader != null) {
      return mClassLoader;
    }
    if (mIncludeCode && !mPackageName.equals("android")) {
      final ArrayList<String> zipPaths=new ArrayList<>();
      final ArrayList<String> libPaths=new ArrayList<>();
      zipPaths.add(mAppDir);
      if (mSplitAppDirs != null) {
        Collections.addAll(zipPaths,mSplitAppDirs);
      }
      libPaths.add(mLibDir);
      String instrumentationPackageName=mActivityThread.mInstrumentationPackageName;
      String instrumentationAppDir=mActivityThread.mInstrumentationAppDir;
      String[] instrumentationSplitAppDirs=mActivityThread.mInstrumentationSplitAppDirs;
      String instrumentationLibDir=mActivityThread.mInstrumentationLibDir;
      String instrumentedAppDir=mActivityThread.mInstrumentedAppDir;
      String[] instrumentedSplitAppDirs=mActivityThread.mInstrumentedSplitAppDirs;
      String instrumentedLibDir=mActivityThread.mInstrumentedLibDir;
      String[] instrumentationLibs=null;
      if (mAppDir.equals(instrumentationAppDir) || mAppDir.equals(instrumentedAppDir)) {
        zipPaths.clear();
        zipPaths.add(instrumentationAppDir);
        if (instrumentationSplitAppDirs != null) {
          Collections.addAll(zipPaths,instrumentationSplitAppDirs);
        }
        zipPaths.add(instrumentedAppDir);
        if (instrumentedSplitAppDirs != null) {
          Collections.addAll(zipPaths,instrumentedSplitAppDirs);
        }
        libPaths.clear();
        libPaths.add(instrumentationLibDir);
        libPaths.add(instrumentedLibDir);
        if (!instrumentedAppDir.equals(instrumentationAppDir)) {
          instrumentationLibs=getLibrariesFor(instrumentationPackageName);
        }
      }
      if (mSharedLibraries != null) {
        for (        String lib : mSharedLibraries) {
          if (!zipPaths.contains(lib)) {
            zipPaths.add(0,lib);
          }
        }
      }
      if (instrumentationLibs != null) {
        for (        String lib : instrumentationLibs) {
          if (!zipPaths.contains(lib)) {
            zipPaths.add(0,lib);
          }
        }
      }
      final String zip=TextUtils.join(File.pathSeparator,zipPaths);
      final String lib=TextUtils.join(File.pathSeparator,libPaths);
      if (ActivityThread.localLOGV)       Slog.v(ActivityThread.TAG,"Class path: " + zip + ", JNI path: "+ lib);
      StrictMode.ThreadPolicy oldPolicy=StrictMode.allowThreadDiskReads();
      mClassLoader=ApplicationLoaders.getDefault().getClassLoader(zip,lib,mBaseClassLoader);
      initializeJavaContextClassLoader();
      StrictMode.setThreadPolicy(oldPolicy);
    }
 else {
      if (mBaseClassLoader == null) {
        mClassLoader=ClassLoader.getSystemClassLoader();
      }
 else {
        mClassLoader=mBaseClassLoader;
      }
    }
    return mClassLoader;
  }
}
