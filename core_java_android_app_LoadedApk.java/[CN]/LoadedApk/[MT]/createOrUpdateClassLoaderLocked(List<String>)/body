{
  final ClassLoader classLoader;
  if (mIncludeCode && !mPackageName.equals("android")) {
    if (!Objects.equals(mPackageName,ActivityThread.currentPackageName())) {
      VMRuntime.getRuntime().vmInstructionSet();
      try {
        ActivityThread.getPackageManager().notifyPackageUse(mPackageName);
      }
 catch (      RemoteException re) {
        throw re.rethrowFromSystemServer();
      }
    }
    final List<String> zipPaths=new ArrayList<>();
    final List<String> libPaths=new ArrayList<>();
    if (mRegisterPackage) {
      try {
        ActivityManagerNative.getDefault().addPackageDependency(mPackageName);
      }
 catch (      RemoteException e) {
        throw e.rethrowFromSystemServer();
      }
    }
    makePaths(mActivityThread,mApplicationInfo,zipPaths,libPaths);
    final String zip=TextUtils.join(File.pathSeparator,zipPaths);
    final boolean isBundledApp=mApplicationInfo.isSystemApp() && !mApplicationInfo.isUpdatedSystemApp();
    String libraryPermittedPath=mDataDir;
    if (isBundledApp) {
      libraryPermittedPath+=File.pathSeparator + System.getProperty("java.library.path");
    }
    if (mApplicationInfo.targetSdkVersion <= 23) {
      libraryPermittedPath+=File.pathSeparator + "/data/app";
    }
    final String librarySearchPath=TextUtils.join(File.pathSeparator,libPaths);
    if (ActivityThread.localLOGV)     Slog.v(ActivityThread.TAG,"Class path: " + zip + ", JNI path: "+ librarySearchPath);
    if (mClassLoader == null) {
      StrictMode.ThreadPolicy oldPolicy=StrictMode.allowThreadDiskReads();
      classLoader=ApplicationLoaders.getDefault().getClassLoader(zip,mApplicationInfo.targetSdkVersion,isBundledApp,librarySearchPath,libraryPermittedPath,mBaseClassLoader);
      StrictMode.setThreadPolicy(oldPolicy);
    }
 else     if (addedPaths != null && addedPaths.size() > 0) {
      final String add=TextUtils.join(File.pathSeparator,addedPaths);
      ApplicationLoaders.getDefault().addPath(mClassLoader,add);
      classLoader=mClassLoader;
    }
 else {
      classLoader=mClassLoader;
    }
  }
 else {
    if (mClassLoader == null) {
      if (mBaseClassLoader == null) {
        classLoader=ClassLoader.getSystemClassLoader();
      }
 else {
        classLoader=mBaseClassLoader;
      }
    }
 else {
      classLoader=mClassLoader;
    }
  }
  return classLoader;
}
