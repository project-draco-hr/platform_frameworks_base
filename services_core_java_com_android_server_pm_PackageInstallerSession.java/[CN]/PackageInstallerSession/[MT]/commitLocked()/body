{
  if (mDestroyed) {
    throw new PackageManagerException(INSTALL_FAILED_ALREADY_EXISTS,"Invalid session");
  }
  if (!mSealed) {
    for (    FileBridge bridge : mBridges) {
      if (!bridge.isClosed()) {
        throw new PackageManagerException(INSTALL_FAILED_PACKAGE_CHANGED,"Files still open");
      }
    }
    mSealed=true;
  }
  validateInstallLocked();
  Preconditions.checkNotNull(mPackageName);
  Preconditions.checkNotNull(mSignatures);
  Preconditions.checkNotNull(mResolvedBaseCodePath);
  if (!mPermissionsAccepted) {
    final Intent intent=new Intent(PackageInstaller.ACTION_CONFIRM_PERMISSIONS);
    intent.setPackage("com.android.packageinstaller");
    intent.putExtra(PackageInstaller.EXTRA_SESSION_ID,sessionId);
    try {
      mRemoteObserver.onUserActionRequired(intent);
    }
 catch (    RemoteException ignored) {
    }
    return;
  }
  if (params.mode == SessionParams.MODE_INHERIT_EXISTING) {
    spliceExistingFilesIntoStage();
  }
  mCallback.onSessionProgressChanged(this,0.9f);
  final IPackageInstallObserver2 localObserver=new IPackageInstallObserver2.Stub(){
    @Override public void onUserActionRequired(    Intent intent){
      throw new IllegalStateException();
    }
    @Override public void onPackageInstalled(    String basePackageName,    int returnCode,    String msg,    Bundle extras){
      destroyInternal();
      dispatchSessionFinished(returnCode,msg,extras);
    }
  }
;
  mPm.installStage(mPackageName,this.sessionStageDir,localObserver,params,installerPackageName,installerUid,new UserHandle(userId));
}
