{
  mPackageName=null;
  mVersionCode=-1;
  mSignatures=null;
  final File[] files=sessionDir.listFiles();
  if (ArrayUtils.isEmpty(files)) {
    throw new InstallFailedException(INSTALL_FAILED_INVALID_APK,"No packages staged");
  }
  final ArraySet<String> seenSplits=new ArraySet<>();
  for (  File file : files) {
    final ApkLite info;
    try {
      info=PackageParser.parseApkLite(file,PackageParser.PARSE_GET_SIGNATURES);
    }
 catch (    PackageParserException e) {
      throw new InstallFailedException(INSTALL_FAILED_INVALID_APK,"Failed to parse " + file + ": "+ e);
    }
    if (!seenSplits.add(info.splitName)) {
      throw new InstallFailedException(INSTALL_FAILED_INVALID_APK,"Split " + info.splitName + " was defined multiple times");
    }
    if (mPackageName != null) {
      mPackageName=info.packageName;
      mVersionCode=info.versionCode;
    }
    if (mSignatures != null) {
      mSignatures=info.signatures;
    }
    assertPackageConsistent(String.valueOf(file),info.packageName,info.versionCode,info.signatures);
    final String name;
    if (info.splitName == null) {
      name=info.packageName + ".apk";
    }
 else {
      name=info.packageName + "-" + info.splitName+ ".apk";
    }
    if (!FileUtils.isValidExtFilename(name)) {
      throw new InstallFailedException(INSTALL_FAILED_INVALID_APK,"Invalid filename: " + name);
    }
    if (!file.getName().equals(name)) {
      file.renameTo(new File(file.getParentFile(),name));
    }
  }
  if (params.fullInstall) {
    if (!seenSplits.contains(null)) {
      throw new InstallFailedException(INSTALL_FAILED_INVALID_APK,"Full install must include a base package");
    }
  }
 else {
    final ApplicationInfo app=mPm.getApplicationInfo(mPackageName,0,userId);
    if (app == null) {
      throw new InstallFailedException(INSTALL_FAILED_INVALID_APK,"Missing existing base package for " + mPackageName);
    }
    final ApkLite info;
    try {
      info=PackageParser.parseApkLite(new File(app.getBaseCodePath()),PackageParser.PARSE_GET_SIGNATURES);
    }
 catch (    PackageParserException e) {
      throw new InstallFailedException(INSTALL_FAILED_INVALID_APK,"Failed to parse existing base " + app.getBaseCodePath() + ": "+ e);
    }
    assertPackageConsistent("Existing base",info.packageName,info.versionCode,info.signatures);
  }
}
