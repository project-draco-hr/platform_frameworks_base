{
  mPackageName=null;
  mVersionCode=-1;
  mSignatures=null;
  mResolvedBaseCodePath=null;
  final File[] files=stageDir.listFiles();
  if (ArrayUtils.isEmpty(files)) {
    throw new PackageManagerException(INSTALL_FAILED_INVALID_APK,"No packages staged");
  }
  final ArraySet<String> seenSplits=new ArraySet<>();
  for (  File file : files) {
    if (file.isDirectory())     continue;
    final ApkLite info;
    try {
      info=PackageParser.parseApkLite(file,PackageParser.PARSE_COLLECT_CERTIFICATES);
    }
 catch (    PackageParserException e) {
      throw new PackageManagerException(INSTALL_FAILED_INVALID_APK,"Failed to parse " + file + ": "+ e);
    }
    if (!seenSplits.add(info.splitName)) {
      throw new PackageManagerException(INSTALL_FAILED_INVALID_APK,"Split " + info.splitName + " was defined multiple times");
    }
    if (mPackageName == null) {
      mPackageName=info.packageName;
      mVersionCode=info.versionCode;
    }
    if (mSignatures == null) {
      mSignatures=info.signatures;
    }
    assertPackageConsistent(String.valueOf(file),info.packageName,info.versionCode,info.signatures);
    final String targetName;
    if (info.splitName == null) {
      targetName="base.apk";
    }
 else {
      targetName="split_" + info.splitName + ".apk";
    }
    if (!FileUtils.isValidExtFilename(targetName)) {
      throw new PackageManagerException(INSTALL_FAILED_INVALID_APK,"Invalid filename: " + targetName);
    }
    final File targetFile=new File(stageDir,targetName);
    if (!file.equals(targetFile)) {
      file.renameTo(targetFile);
    }
    if (info.splitName == null) {
      mResolvedBaseCodePath=targetFile.getAbsolutePath();
    }
  }
  if (params.mode == SessionParams.MODE_FULL_INSTALL) {
    if (!seenSplits.contains(null)) {
      throw new PackageManagerException(INSTALL_FAILED_INVALID_APK,"Full install must include a base package");
    }
  }
 else {
    final ApplicationInfo app=mPm.getApplicationInfo(mPackageName,0,userId);
    if (app == null) {
      throw new PackageManagerException(INSTALL_FAILED_INVALID_APK,"Missing existing base package for " + mPackageName);
    }
    if (mResolvedBaseCodePath == null) {
      mResolvedBaseCodePath=app.getBaseCodePath();
    }
    final ApkLite info;
    try {
      info=PackageParser.parseApkLite(new File(app.getBaseCodePath()),PackageParser.PARSE_COLLECT_CERTIFICATES);
    }
 catch (    PackageParserException e) {
      throw new PackageManagerException(INSTALL_FAILED_INVALID_APK,"Failed to parse existing base " + app.getBaseCodePath() + ": "+ e);
    }
    assertPackageConsistent("Existing base",info.packageName,info.versionCode,info.signatures);
  }
}
