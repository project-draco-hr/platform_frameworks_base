{
  final File libDir=new File(sessionDir,"lib");
  if (!libDir.mkdir()) {
    throw new InstallFailedException(INSTALL_FAILED_INTERNAL_ERROR,"Failed to create " + libDir);
  }
  try {
    Libcore.os.chmod(libDir.getAbsolutePath(),0755);
  }
 catch (  ErrnoException e) {
    throw new InstallFailedException(INSTALL_FAILED_INTERNAL_ERROR,"Failed to prepare " + libDir + ": "+ e);
  }
  if (!SELinux.restorecon(libDir)) {
    throw new InstallFailedException(INSTALL_FAILED_INTERNAL_ERROR,"Failed to set context on " + libDir);
  }
  final File[] files=sessionDir.listFiles();
  if (ArrayUtils.isEmpty(files)) {
    throw new InstallFailedException(INSTALL_FAILED_INVALID_APK,"No packages staged");
  }
  for (  File file : files) {
    NativeLibraryHelper.ApkHandle handle=null;
    try {
      handle=NativeLibraryHelper.ApkHandle.create(file);
      final int abiIndex=NativeLibraryHelper.findSupportedAbi(handle,Build.SUPPORTED_ABIS);
      if (abiIndex >= 0) {
        int copyRet=NativeLibraryHelper.copyNativeBinariesIfNeededLI(handle,libDir,Build.SUPPORTED_ABIS[abiIndex]);
        if (copyRet != INSTALL_SUCCEEDED) {
          throw new InstallFailedException(copyRet,"Failed to copy native libraries for " + file);
        }
      }
 else       if (abiIndex != PackageManager.NO_NATIVE_LIBRARIES) {
        throw new InstallFailedException(abiIndex,"Failed to copy native libraries for " + file);
      }
    }
 catch (    IOException ioe) {
      throw new InstallFailedException(INSTALL_FAILED_INTERNAL_ERROR,"Failed to create handle for " + file);
    }
 finally {
      IoUtils.closeQuietly(handle);
    }
  }
}
