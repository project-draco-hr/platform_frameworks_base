{
  Preconditions.checkNotNull(mResolvedBaseFile);
  final ApkLite baseApk;
  try {
    baseApk=PackageParser.parseApkLite(mResolvedBaseFile,0);
  }
 catch (  PackageParserException e) {
    throw PackageManagerException.from(e);
  }
  final List<String> splitPaths=new ArrayList<>();
  for (  File file : mResolvedStagedFiles) {
    if (mResolvedBaseFile.equals(file))     continue;
    splitPaths.add(file.getAbsolutePath());
  }
  for (  File file : mResolvedInheritedFiles) {
    if (mResolvedBaseFile.equals(file))     continue;
    splitPaths.add(file.getAbsolutePath());
  }
  final PackageLite pkg=new PackageLite(null,baseApk,null,splitPaths.toArray(new String[splitPaths.size()]),null);
  final boolean isForwardLocked=(params.installFlags & PackageManager.INSTALL_FORWARD_LOCK) != 0;
  try {
    return PackageHelper.calculateInstalledSize(pkg,isForwardLocked,params.abiOverride);
  }
 catch (  IOException e) {
    throw new PackageManagerException(INSTALL_FAILED_INVALID_APK,"Failed to calculate install size",e);
  }
}
