{
switch (msg.what) {
case EVENT_WATCHDOG_SETTINGS_CHANGE:
    updateSettings();
  if (!mPoorNetworkDetectionEnabled) {
    sendLinkStatusNotification(true);
  }
break;
case EVENT_BSSID_CHANGE:
transitionTo(mVerifyingLinkState);
break;
case CMD_RSSI_FETCH:
if (msg.arg1 == mRssiFetchToken) {
mWsmChannel.sendMessage(WifiManager.RSSI_PKTCNT_FETCH);
sendMessageDelayed(obtainMessage(CMD_RSSI_FETCH,++mRssiFetchToken,0),LINK_SAMPLING_INTERVAL_MS);
}
break;
case WifiManager.RSSI_PKTCNT_FETCH_SUCCEEDED:
RssiPacketCountInfo info=(RssiPacketCountInfo)msg.obj;
int rssi=info.rssi;
if (DBG) logd("Fetch RSSI succeed, rssi=" + rssi);
long time=mCurrentBssid.mBssidAvoidTimeMax - SystemClock.elapsedRealtime();
if (time <= 0) {
if (DBG) logd("Max avoid time elapsed");
sendLinkStatusNotification(true);
}
 else {
if (rssi >= mCurrentBssid.mGoodLinkTargetRssi) {
if (++mSampleCount >= mCurrentBssid.mGoodLinkTargetCount) {
if (DBG) logd("Good link detected, rssi=" + rssi);
mCurrentBssid.mBssidAvoidTimeMax=0;
sendLinkStatusNotification(true);
}
}
 else {
mSampleCount=0;
if (DBG) logd("Link is still poor, time left=" + time);
}
}
break;
case WifiManager.RSSI_PKTCNT_FETCH_FAILED:
if (DBG) logd("RSSI_FETCH_FAILED");
break;
default :
return NOT_HANDLED;
}
return HANDLED;
}
