{
  for (  Element element : roundEnv.getElementsAnnotatedWith(BindingAdapter.class)) {
    if (element.getKind() != ElementKind.METHOD || !element.getModifiers().contains(Modifier.STATIC) || !element.getModifiers().contains(Modifier.PUBLIC)) {
      processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR,"@BindingAdapter on invalid element: " + element);
      continue;
    }
    BindingAdapter bindingAdapter=element.getAnnotation(BindingAdapter.class);
    ExecutableElement executableElement=(ExecutableElement)element;
    List<? extends VariableElement> parameters=executableElement.getParameters();
    if (parameters.size() != 2) {
      processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR,"@BindingAdapter does not take two parameters: " + element);
      continue;
    }
    try {
      processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE,"------------------ @BindingAdapter for " + element);
      store.addBindingAdapter(bindingAdapter.value(),executableElement);
    }
 catch (    IllegalArgumentException e) {
      processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR,"@BindingAdapter for duplicate View and parameter type: " + element);
    }
  }
}
