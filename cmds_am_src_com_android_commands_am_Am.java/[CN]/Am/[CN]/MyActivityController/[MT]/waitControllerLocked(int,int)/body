{
  if (mGdbPort != null) {
    killGdbLocked();
    try {
      System.out.println("Starting gdbserver on port " + mGdbPort);
      System.out.println("Do the following:");
      System.out.println("  adb forward tcp:" + mGdbPort + " tcp:"+ mGdbPort);
      System.out.println("  gdbclient app_process :" + mGdbPort);
      mGdbProcess=Runtime.getRuntime().exec(new String[]{"gdbserver",":" + mGdbPort,"--attach",Integer.toString(pid)});
      final InputStreamReader converter=new InputStreamReader(mGdbProcess.getInputStream());
      mGdbThread=new Thread(){
        @Override public void run(){
          BufferedReader in=new BufferedReader(converter);
          String line;
          int count=0;
          while (true) {
synchronized (MyActivityController.this) {
              if (mGdbThread == null) {
                return;
              }
              if (count == 2) {
                mGotGdbPrint=true;
                MyActivityController.this.notifyAll();
              }
            }
            try {
              line=in.readLine();
              if (line == null) {
                return;
              }
              System.out.println("GDB: " + line);
              count++;
            }
 catch (            IOException e) {
              return;
            }
          }
        }
      }
;
      mGdbThread.start();
      try {
        this.wait(500);
      }
 catch (      InterruptedException e) {
      }
    }
 catch (    IOException e) {
      System.err.println("Failure starting gdbserver: " + e);
      killGdbLocked();
    }
  }
  mState=state;
  System.out.println("");
  printMessageForState();
  while (mState != STATE_NORMAL) {
    try {
      wait();
    }
 catch (    InterruptedException e) {
    }
  }
  killGdbLocked();
  return mResult;
}
