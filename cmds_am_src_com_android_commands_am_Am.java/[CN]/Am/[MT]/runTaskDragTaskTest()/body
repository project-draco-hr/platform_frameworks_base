{
  final int taskId=Integer.parseInt(nextArgRequired());
  final int stepSize=Integer.parseInt(nextArgRequired());
  final String delayStr=nextArg();
  final int delay_ms=(delayStr != null) ? Integer.parseInt(delayStr) : 0;
  final StackInfo stackInfo;
  Rect taskBounds;
  try {
    stackInfo=mAm.getStackInfo(mAm.getFocusedStackId());
    taskBounds=mAm.getTaskBounds(taskId);
  }
 catch (  RemoteException e) {
    System.err.println("Error getting focus stack info or task bounds: " + e);
    return;
  }
  final Rect stackBounds=stackInfo.bounds;
  int travelRight=stackBounds.width() - taskBounds.width();
  int travelLeft=-travelRight;
  int travelDown=stackBounds.height() - taskBounds.height();
  int travelUp=-travelDown;
  int passes=0;
  while (passes < 2) {
    System.out.println("Moving right...");
    travelRight=moveTask(taskId,taskBounds,stackBounds,stepSize,travelRight,MOVING_FORWARD,MOVING_HORIZONTALLY,delay_ms);
    System.out.println("Still need to travel right by " + travelRight);
    System.out.println("Moving down...");
    travelDown=moveTask(taskId,taskBounds,stackBounds,stepSize,travelDown,MOVING_FORWARD,!MOVING_HORIZONTALLY,delay_ms);
    System.out.println("Still need to travel down by " + travelDown);
    System.out.println("Moving left...");
    travelLeft=moveTask(taskId,taskBounds,stackBounds,stepSize,travelLeft,!MOVING_FORWARD,MOVING_HORIZONTALLY,delay_ms);
    System.out.println("Still need to travel left by " + travelLeft);
    System.out.println("Moving up...");
    travelUp=moveTask(taskId,taskBounds,stackBounds,stepSize,travelUp,!MOVING_FORWARD,!MOVING_HORIZONTALLY,delay_ms);
    System.out.println("Still need to travel up by " + travelUp);
    try {
      taskBounds=mAm.getTaskBounds(taskId);
    }
 catch (    RemoteException e) {
      System.err.println("Error getting task bounds: " + e);
      return;
    }
    passes++;
  }
}
