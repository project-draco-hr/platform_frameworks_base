{
  int maxMove;
  if (movingForward) {
    while (maxToTravel > 0 && ((horizontal && taskRect.right < stackRect.right) || (!horizontal && taskRect.bottom < stackRect.bottom))) {
      if (horizontal) {
        maxMove=Math.min(stepSize,stackRect.right - taskRect.right);
        maxToTravel-=maxMove;
        taskRect.right+=maxMove;
        taskRect.left+=maxMove;
      }
 else {
        maxMove=Math.min(stepSize,stackRect.bottom - taskRect.bottom);
        maxToTravel-=maxMove;
        taskRect.top+=maxMove;
        taskRect.bottom+=maxMove;
      }
      taskResize(taskId,taskRect,delay_ms);
    }
  }
 else {
    while (maxToTravel < 0 && ((horizontal && taskRect.left > stackRect.left) || (!horizontal && taskRect.top > stackRect.top))) {
      if (horizontal) {
        maxMove=Math.min(stepSize,taskRect.left - stackRect.left);
        maxToTravel-=maxMove;
        taskRect.right-=maxMove;
        taskRect.left-=maxMove;
      }
 else {
        maxMove=Math.min(stepSize,taskRect.top - stackRect.top);
        maxToTravel-=maxMove;
        taskRect.top-=maxMove;
        taskRect.bottom-=maxMove;
      }
      taskResize(taskId,taskRect,delay_ms);
    }
  }
  return maxToTravel;
}
