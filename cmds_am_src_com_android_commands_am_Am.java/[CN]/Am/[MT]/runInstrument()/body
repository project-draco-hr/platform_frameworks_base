{
  String profileFile=null;
  boolean wait=false;
  boolean rawMode=false;
  boolean no_window_animation=false;
  int userId=UserHandle.USER_CURRENT;
  Bundle args=new Bundle();
  String argKey=null, argValue=null;
  IWindowManager wm=IWindowManager.Stub.asInterface(ServiceManager.getService("window"));
  String abi=null;
  String opt;
  while ((opt=nextOption()) != null) {
    if (opt.equals("-p")) {
      profileFile=nextArgRequired();
    }
 else     if (opt.equals("-w")) {
      wait=true;
    }
 else     if (opt.equals("-r")) {
      rawMode=true;
    }
 else     if (opt.equals("-e")) {
      argKey=nextArgRequired();
      argValue=nextArgRequired();
      args.putString(argKey,argValue);
    }
 else     if (opt.equals("--no_window_animation") || opt.equals("--no-window-animation")) {
      no_window_animation=true;
    }
 else     if (opt.equals("--user")) {
      userId=parseUserArg(nextArgRequired());
    }
 else     if (opt.equals("--abi")) {
      abi=nextArgRequired();
    }
 else {
      System.err.println("Error: Unknown option: " + opt);
      return;
    }
  }
  if (userId == UserHandle.USER_ALL) {
    System.err.println("Error: Can't start instrumentation with user 'all'");
    return;
  }
  String cnArg=nextArgRequired();
  ComponentName cn;
  if (cnArg.contains("/")) {
    cn=ComponentName.unflattenFromString(cnArg);
    if (cn == null)     throw new IllegalArgumentException("Bad component name: " + cnArg);
  }
 else {
    List<InstrumentationInfo> infos=mPm.queryInstrumentation(null,0).getList();
    final int numInfos=infos == null ? 0 : infos.size();
    List<ComponentName> cns=new ArrayList<>();
    for (int i=0; i < numInfos; i++) {
      InstrumentationInfo info=infos.get(i);
      ComponentName c=new ComponentName(info.packageName,info.name);
      if (cnArg.equals(info.packageName)) {
        cns.add(c);
      }
    }
    if (cns.size() == 0) {
      throw new IllegalArgumentException("No instrumentation found for: " + cnArg);
    }
 else     if (cns.size() == 1) {
      cn=cns.get(0);
    }
 else {
      StringBuilder cnsStr=new StringBuilder();
      final int numCns=cns.size();
      for (int i=0; i < numCns; i++) {
        cnsStr.append(cns.get(i).flattenToString());
        cnsStr.append(", ");
      }
      cnsStr.setLength(cnsStr.length() - 2);
      throw new IllegalArgumentException("Found multiple instrumentations: " + cnsStr.toString());
    }
  }
  InstrumentationWatcher watcher=null;
  UiAutomationConnection connection=null;
  if (wait) {
    watcher=new InstrumentationWatcher();
    watcher.setRawOutput(rawMode);
    connection=new UiAutomationConnection();
  }
  float[] oldAnims=null;
  if (no_window_animation) {
    oldAnims=wm.getAnimationScales();
    wm.setAnimationScale(0,0.0f);
    wm.setAnimationScale(1,0.0f);
  }
  if (abi != null) {
    final String[] supportedAbis=Build.SUPPORTED_ABIS;
    boolean matched=false;
    for (    String supportedAbi : supportedAbis) {
      if (supportedAbi.equals(abi)) {
        matched=true;
        break;
      }
    }
    if (!matched) {
      throw new AndroidException("INSTRUMENTATION_FAILED: Unsupported instruction set " + abi);
    }
  }
  if (!mAm.startInstrumentation(cn,profileFile,0,args,watcher,connection,userId,abi)) {
    throw new AndroidException("INSTRUMENTATION_FAILED: " + cn.flattenToString());
  }
  if (watcher != null) {
    if (!watcher.waitForFinish()) {
      System.out.println("INSTRUMENTATION_ABORTED: System has crashed.");
    }
  }
  if (oldAnims != null) {
    wm.setAnimationScales(oldAnims);
  }
}
