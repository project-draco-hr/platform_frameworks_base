{
  Intent intent=new Intent();
  boolean hasIntentInfo=false;
  mDebugOption=false;
  mWaitOption=false;
  Uri data=null;
  String type=null;
  String opt;
  while ((opt=nextOption()) != null) {
    if (opt.equals("-a")) {
      intent.setAction(nextArgRequired());
      hasIntentInfo=true;
    }
 else     if (opt.equals("-d")) {
      data=Uri.parse(nextArgRequired());
      hasIntentInfo=true;
    }
 else     if (opt.equals("-t")) {
      type=nextArgRequired();
      hasIntentInfo=true;
    }
 else     if (opt.equals("-c")) {
      intent.addCategory(nextArgRequired());
      hasIntentInfo=true;
    }
 else     if (opt.equals("-e") || opt.equals("--es")) {
      String key=nextArgRequired();
      String value=nextArgRequired();
      intent.putExtra(key,value);
      hasIntentInfo=true;
    }
 else     if (opt.equals("--esn")) {
      String key=nextArgRequired();
      intent.putExtra(key,(String)null);
      hasIntentInfo=true;
    }
 else     if (opt.equals("--ei")) {
      String key=nextArgRequired();
      String value=nextArgRequired();
      intent.putExtra(key,Integer.valueOf(value));
      hasIntentInfo=true;
    }
 else     if (opt.equals("--ez")) {
      String key=nextArgRequired();
      String value=nextArgRequired();
      intent.putExtra(key,Boolean.valueOf(value));
      hasIntentInfo=true;
    }
 else     if (opt.equals("-n")) {
      String str=nextArgRequired();
      ComponentName cn=ComponentName.unflattenFromString(str);
      if (cn == null)       throw new IllegalArgumentException("Bad component name: " + str);
      intent.setComponent(cn);
      hasIntentInfo=true;
    }
 else     if (opt.equals("-f")) {
      String str=nextArgRequired();
      intent.setFlags(Integer.decode(str).intValue());
    }
 else     if (opt.equals("--grant-read-uri-permission")) {
      intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
    }
 else     if (opt.equals("--grant-write-uri-permission")) {
      intent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
    }
 else     if (opt.equals("--debug-log-resolution")) {
      intent.addFlags(Intent.FLAG_DEBUG_LOG_RESOLUTION);
    }
 else     if (opt.equals("--activity-brought-to-front")) {
      intent.addFlags(Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT);
    }
 else     if (opt.equals("--activity-clear-top")) {
      intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
    }
 else     if (opt.equals("--activity-clear-when-task-reset")) {
      intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);
    }
 else     if (opt.equals("--activity-exclude-from-recents")) {
      intent.addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);
    }
 else     if (opt.equals("--activity-launched-from-history")) {
      intent.addFlags(Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY);
    }
 else     if (opt.equals("--activity-multiple-task")) {
      intent.addFlags(Intent.FLAG_ACTIVITY_MULTIPLE_TASK);
    }
 else     if (opt.equals("--activity-no-animation")) {
      intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
    }
 else     if (opt.equals("--activity-no-history")) {
      intent.addFlags(Intent.FLAG_ACTIVITY_NO_HISTORY);
    }
 else     if (opt.equals("--activity-no-user-action")) {
      intent.addFlags(Intent.FLAG_ACTIVITY_NO_USER_ACTION);
    }
 else     if (opt.equals("--activity-previous-is-top")) {
      intent.addFlags(Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP);
    }
 else     if (opt.equals("--activity-reorder-to-front")) {
      intent.addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
    }
 else     if (opt.equals("--activity-reset-task-if-needed")) {
      intent.addFlags(Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
    }
 else     if (opt.equals("--activity-single-top")) {
      intent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
    }
 else     if (opt.equals("--receiver-registered-only")) {
      intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
    }
 else     if (opt.equals("--receiver-replace-pending")) {
      intent.addFlags(Intent.FLAG_RECEIVER_REPLACE_PENDING);
    }
 else     if (opt.equals("-D")) {
      mDebugOption=true;
    }
 else     if (opt.equals("-W")) {
      mWaitOption=true;
    }
 else {
      System.err.println("Error: Unknown option: " + opt);
      showUsage();
      return null;
    }
  }
  intent.setDataAndType(data,type);
  String uri=nextArg();
  if (uri != null) {
    Intent oldIntent=intent;
    intent=Intent.parseUri(uri,0);
    if (oldIntent.getAction() != null) {
      intent.setAction(oldIntent.getAction());
    }
    if (oldIntent.getData() != null || oldIntent.getType() != null) {
      intent.setDataAndType(oldIntent.getData(),oldIntent.getType());
    }
    Set cats=oldIntent.getCategories();
    if (cats != null) {
      Iterator it=cats.iterator();
      while (it.hasNext()) {
        intent.addCategory((String)it.next());
      }
    }
    hasIntentInfo=true;
  }
  if (!hasIntentInfo)   throw new IllegalArgumentException("No intent supplied");
  return intent;
}
