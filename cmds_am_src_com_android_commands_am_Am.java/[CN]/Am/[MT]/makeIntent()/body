{
  Intent intent=new Intent();
  boolean hasIntentInfo=false;
  mDebugOption=false;
  mWaitOption=false;
  mStopOption=false;
  mProfileFile=null;
  Uri data=null;
  String type=null;
  String opt;
  while ((opt=nextOption()) != null) {
    if (opt.equals("-a")) {
      intent.setAction(nextArgRequired());
      hasIntentInfo=true;
    }
 else     if (opt.equals("-d")) {
      data=Uri.parse(nextArgRequired());
      hasIntentInfo=true;
    }
 else     if (opt.equals("-t")) {
      type=nextArgRequired();
      hasIntentInfo=true;
    }
 else     if (opt.equals("-c")) {
      intent.addCategory(nextArgRequired());
      hasIntentInfo=true;
    }
 else     if (opt.equals("-e") || opt.equals("--es")) {
      String key=nextArgRequired();
      String value=nextArgRequired();
      intent.putExtra(key,value);
      hasIntentInfo=true;
    }
 else     if (opt.equals("--esn")) {
      String key=nextArgRequired();
      intent.putExtra(key,(String)null);
      hasIntentInfo=true;
    }
 else     if (opt.equals("--ei")) {
      String key=nextArgRequired();
      String value=nextArgRequired();
      intent.putExtra(key,Integer.valueOf(value));
      hasIntentInfo=true;
    }
 else     if (opt.equals("--eu")) {
      String key=nextArgRequired();
      String value=nextArgRequired();
      intent.putExtra(key,Uri.parse(value));
      hasIntentInfo=true;
    }
 else     if (opt.equals("--eia")) {
      String key=nextArgRequired();
      String value=nextArgRequired();
      String[] strings=value.split(",");
      int[] list=new int[strings.length];
      for (int i=0; i < strings.length; i++) {
        list[i]=Integer.valueOf(strings[i]);
      }
      intent.putExtra(key,list);
      hasIntentInfo=true;
    }
 else     if (opt.equals("--el")) {
      String key=nextArgRequired();
      String value=nextArgRequired();
      intent.putExtra(key,Long.valueOf(value));
      hasIntentInfo=true;
    }
 else     if (opt.equals("--ela")) {
      String key=nextArgRequired();
      String value=nextArgRequired();
      String[] strings=value.split(",");
      long[] list=new long[strings.length];
      for (int i=0; i < strings.length; i++) {
        list[i]=Long.valueOf(strings[i]);
      }
      intent.putExtra(key,list);
      hasIntentInfo=true;
    }
 else     if (opt.equals("--ef")) {
      String key=nextArgRequired();
      String value=nextArgRequired();
      intent.putExtra(key,Float.valueOf(value));
      hasIntentInfo=true;
    }
 else     if (opt.equals("--efa")) {
      String key=nextArgRequired();
      String value=nextArgRequired();
      String[] strings=value.split(",");
      float[] list=new float[strings.length];
      for (int i=0; i < strings.length; i++) {
        list[i]=Float.valueOf(strings[i]);
      }
      intent.putExtra(key,list);
      hasIntentInfo=true;
    }
 else     if (opt.equals("--ez")) {
      String key=nextArgRequired();
      String value=nextArgRequired();
      intent.putExtra(key,Boolean.valueOf(value));
      hasIntentInfo=true;
    }
 else     if (opt.equals("-n")) {
      String str=nextArgRequired();
      ComponentName cn=ComponentName.unflattenFromString(str);
      if (cn == null)       throw new IllegalArgumentException("Bad component name: " + str);
      intent.setComponent(cn);
      hasIntentInfo=true;
    }
 else     if (opt.equals("-f")) {
      String str=nextArgRequired();
      intent.setFlags(Integer.decode(str).intValue());
    }
 else     if (opt.equals("--grant-read-uri-permission")) {
      intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
    }
 else     if (opt.equals("--grant-write-uri-permission")) {
      intent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
    }
 else     if (opt.equals("--exclude-stopped-packages")) {
      intent.addFlags(Intent.FLAG_EXCLUDE_STOPPED_PACKAGES);
    }
 else     if (opt.equals("--include-stopped-packages")) {
      intent.addFlags(Intent.FLAG_INCLUDE_STOPPED_PACKAGES);
    }
 else     if (opt.equals("--debug-log-resolution")) {
      intent.addFlags(Intent.FLAG_DEBUG_LOG_RESOLUTION);
    }
 else     if (opt.equals("--activity-brought-to-front")) {
      intent.addFlags(Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT);
    }
 else     if (opt.equals("--activity-clear-top")) {
      intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
    }
 else     if (opt.equals("--activity-clear-when-task-reset")) {
      intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);
    }
 else     if (opt.equals("--activity-exclude-from-recents")) {
      intent.addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);
    }
 else     if (opt.equals("--activity-launched-from-history")) {
      intent.addFlags(Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY);
    }
 else     if (opt.equals("--activity-multiple-task")) {
      intent.addFlags(Intent.FLAG_ACTIVITY_MULTIPLE_TASK);
    }
 else     if (opt.equals("--activity-no-animation")) {
      intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
    }
 else     if (opt.equals("--activity-no-history")) {
      intent.addFlags(Intent.FLAG_ACTIVITY_NO_HISTORY);
    }
 else     if (opt.equals("--activity-no-user-action")) {
      intent.addFlags(Intent.FLAG_ACTIVITY_NO_USER_ACTION);
    }
 else     if (opt.equals("--activity-previous-is-top")) {
      intent.addFlags(Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP);
    }
 else     if (opt.equals("--activity-reorder-to-front")) {
      intent.addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
    }
 else     if (opt.equals("--activity-reset-task-if-needed")) {
      intent.addFlags(Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
    }
 else     if (opt.equals("--activity-single-top")) {
      intent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
    }
 else     if (opt.equals("--activity-clear-task")) {
      intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);
    }
 else     if (opt.equals("--activity-task-on-home")) {
      intent.addFlags(Intent.FLAG_ACTIVITY_TASK_ON_HOME);
    }
 else     if (opt.equals("--receiver-registered-only")) {
      intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
    }
 else     if (opt.equals("--receiver-replace-pending")) {
      intent.addFlags(Intent.FLAG_RECEIVER_REPLACE_PENDING);
    }
 else     if (opt.equals("-D")) {
      mDebugOption=true;
    }
 else     if (opt.equals("-W")) {
      mWaitOption=true;
    }
 else     if (opt.equals("-P")) {
      mProfileFile=nextArgRequired();
      mProfileAutoStop=true;
    }
 else     if (opt.equals("--start-profiler")) {
      mProfileFile=nextArgRequired();
      mProfileAutoStop=false;
    }
 else     if (opt.equals("-S")) {
      mStopOption=true;
    }
 else {
      System.err.println("Error: Unknown option: " + opt);
      showUsage();
      return null;
    }
  }
  intent.setDataAndType(data,type);
  String arg=nextArg();
  if (arg != null) {
    Intent baseIntent;
    if (arg.indexOf(':') >= 0) {
      baseIntent=Intent.parseUri(arg,Intent.URI_INTENT_SCHEME);
    }
 else     if (arg.indexOf('/') >= 0) {
      baseIntent=new Intent(Intent.ACTION_MAIN);
      baseIntent.addCategory(Intent.CATEGORY_LAUNCHER);
      baseIntent.setComponent(ComponentName.unflattenFromString(arg));
    }
 else {
      baseIntent=new Intent(Intent.ACTION_MAIN);
      baseIntent.addCategory(Intent.CATEGORY_LAUNCHER);
      baseIntent.setPackage(arg);
    }
    Bundle extras=intent.getExtras();
    intent.replaceExtras((Bundle)null);
    Bundle uriExtras=baseIntent.getExtras();
    baseIntent.replaceExtras((Bundle)null);
    if (intent.getAction() != null && baseIntent.getCategories() != null) {
      HashSet<String> cats=new HashSet<String>(baseIntent.getCategories());
      for (      String c : cats) {
        baseIntent.removeCategory(c);
      }
    }
    intent.fillIn(baseIntent,Intent.FILL_IN_COMPONENT);
    if (extras == null) {
      extras=uriExtras;
    }
 else     if (uriExtras != null) {
      uriExtras.putAll(extras);
      extras=uriExtras;
    }
    intent.replaceExtras(extras);
    hasIntentInfo=true;
  }
  if (!hasIntentInfo)   throw new IllegalArgumentException("No intent supplied");
  return intent;
}
