{
  Intent intent=new Intent();
  boolean hasIntentInfo=false;
  mDebugOption=false;
  Uri data=null;
  String type=null;
  try {
    String opt;
    while ((opt=nextOption()) != null) {
      if (opt.equals("-a")) {
        intent.setAction(nextOptionData());
        hasIntentInfo=true;
      }
 else       if (opt.equals("-d")) {
        data=Uri.parse(nextOptionData());
        hasIntentInfo=true;
      }
 else       if (opt.equals("-t")) {
        type=nextOptionData();
        hasIntentInfo=true;
      }
 else       if (opt.equals("-c")) {
        intent.addCategory(nextOptionData());
        hasIntentInfo=true;
      }
 else       if (opt.equals("-e") || opt.equals("--es")) {
        String key=nextOptionData();
        String value=nextOptionData();
        intent.putExtra(key,value);
        hasIntentInfo=true;
      }
 else       if (opt.equals("--ei")) {
        String key=nextOptionData();
        String value=nextOptionData();
        intent.putExtra(key,Integer.valueOf(value));
        hasIntentInfo=true;
      }
 else       if (opt.equals("--ez")) {
        String key=nextOptionData();
        String value=nextOptionData();
        intent.putExtra(key,Boolean.valueOf(value));
        hasIntentInfo=true;
      }
 else       if (opt.equals("-n")) {
        String str=nextOptionData();
        ComponentName cn=ComponentName.unflattenFromString(str);
        if (cn == null) {
          System.err.println("Error: Bad component name: " + str);
          showUsage();
          return null;
        }
        intent.setComponent(cn);
        hasIntentInfo=true;
      }
 else       if (opt.equals("-f")) {
        String str=nextOptionData();
        intent.setFlags(Integer.decode(str).intValue());
      }
 else       if (opt.equals("-D")) {
        mDebugOption=true;
      }
 else {
        System.err.println("Error: Unknown option: " + opt);
        showUsage();
        return null;
      }
    }
  }
 catch (  RuntimeException ex) {
    System.err.println("Error: " + ex.toString());
    showUsage();
    return null;
  }
  intent.setDataAndType(data,type);
  String uri=nextArg();
  if (uri != null) {
    try {
      Intent oldIntent=intent;
      try {
        intent=Intent.getIntent(uri);
      }
 catch (      java.net.URISyntaxException ex) {
        System.err.println("Bad URI: " + uri);
        showUsage();
        return null;
      }
      if (oldIntent.getAction() != null) {
        intent.setAction(oldIntent.getAction());
      }
      if (oldIntent.getData() != null || oldIntent.getType() != null) {
        intent.setDataAndType(oldIntent.getData(),oldIntent.getType());
      }
      Set cats=oldIntent.getCategories();
      if (cats != null) {
        Iterator it=cats.iterator();
        while (it.hasNext()) {
          intent.addCategory((String)it.next());
        }
      }
    }
 catch (    RuntimeException ex) {
      System.err.println("Error creating from URI: " + ex.toString());
      showUsage();
      return null;
    }
  }
 else   if (!hasIntentInfo) {
    System.err.println("Error: No intent supplied");
    showUsage();
    return null;
  }
  return intent;
}
