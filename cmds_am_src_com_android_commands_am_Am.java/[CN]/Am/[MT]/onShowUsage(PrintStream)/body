{
  PrintWriter pw=new PrintWriter(out);
  pw.println("usage: am [subcommand] [options]\n" + "usage: am start [-D] [-N] [-W] [-P <FILE>] [--start-profiler <FILE>]\n" + "               [--sampling INTERVAL] [-R COUNT] [-S]\n"+ "               [--track-allocation] [--user <USER_ID> | current] <INTENT>\n"+ "       am startservice [--user <USER_ID> | current] <INTENT>\n"+ "       am stopservice [--user <USER_ID> | current] <INTENT>\n"+ "       am force-stop [--user <USER_ID> | all | current] <PACKAGE>\n"+ "       am kill [--user <USER_ID> | all | current] <PACKAGE>\n"+ "       am kill-all\n"+ "       am broadcast [--user <USER_ID> | all | current] <INTENT>\n"+ "       am instrument [-r] [-e <NAME> <VALUE>] [-p <FILE>] [-w]\n"+ "               [--user <USER_ID> | current]\n"+ "               [--no-window-animation] [--abi <ABI>] <COMPONENT>\n"+ "       am profile start [--user <USER_ID> current] [--sampling INTERVAL] <PROCESS> <FILE>\n"+ "       am profile stop [--user <USER_ID> current] [<PROCESS>]\n"+ "       am dumpheap [--user <USER_ID> current] [-n] <PROCESS> <FILE>\n"+ "       am set-debug-app [-w] [--persistent] <PACKAGE>\n"+ "       am clear-debug-app\n"+ "       am set-watch-heap <PROCESS> <MEM-LIMIT>\n"+ "       am clear-watch-heap\n"+ "       am bug-report [--progress]\n"+ "       am monitor [--gdb <port>]\n"+ "       am hang [--allow-restart]\n"+ "       am restart\n"+ "       am idle-maintenance\n"+ "       am screen-compat [on|off] <PACKAGE>\n"+ "       am package-importance <PACKAGE>\n"+ "       am to-uri [INTENT]\n"+ "       am to-intent-uri [INTENT]\n"+ "       am to-app-uri [INTENT]\n"+ "       am switch-user <USER_ID>\n"+ "       am start-user <USER_ID>\n"+ "       am unlock-user <USER_ID> [TOKEN_HEX]\n"+ "       am stop-user [-w] [-f] <USER_ID>\n"+ "       am stack start <DISPLAY_ID> <INTENT>\n"+ "       am stack movetask <TASK_ID> <STACK_ID> [true|false]\n"+ "       am stack resize <STACK_ID> <LEFT,TOP,RIGHT,BOTTOM>\n"+ "       am stack resize-animated <STACK_ID> <LEFT,TOP,RIGHT,BOTTOM>\n"+ "       am stack resize-docked-stack <LEFT,TOP,RIGHT,BOTTOM> [<TASK_LEFT,TASK_TOP,TASK_RIGHT,TASK_BOTTOM>]\n"+ "       am stack size-docked-stack-test: <STEP_SIZE> <l|t|r|b> [DELAY_MS]\n"+ "       am stack move-top-activity-to-pinned-stack: <STACK_ID> <LEFT,TOP,RIGHT,BOTTOM>\n"+ "       am stack positiontask <TASK_ID> <STACK_ID> <POSITION>\n"+ "       am stack list\n"+ "       am stack info <STACK_ID>\n"+ "       am task lock <TASK_ID>\n"+ "       am task lock stop\n"+ "       am task resizeable <TASK_ID> [0 (unresizeable) | 1 (crop_windows) | 2 (resizeable) | 3 (resizeable_and_pipable)]\n"+ "       am task resize <TASK_ID> <LEFT,TOP,RIGHT,BOTTOM>\n"+ "       am task drag-task-test <TASK_ID> <STEP_SIZE> [DELAY_MS] \n"+ "       am task size-task-test <TASK_ID> <STEP_SIZE> [DELAY_MS] \n"+ "       am get-config\n"+ "       am suppress-resize-config-changes <true|false>\n"+ "       am set-inactive [--user <USER_ID>] <PACKAGE> true|false\n"+ "       am get-inactive [--user <USER_ID>] <PACKAGE>\n"+ "       am send-trim-memory [--user <USER_ID>] <PROCESS>\n"+ "               [HIDDEN|RUNNING_MODERATE|BACKGROUND|RUNNING_LOW|MODERATE|RUNNING_CRITICAL|COMPLETE]\n"+ "       am get-current-user\n"+ "\n"+ "am start: start an Activity.  Options are:\n"+ "    -D: enable debugging\n"+ "    -N: enable native debugging\n"+ "    -W: wait for launch to complete\n"+ "    --start-profiler <FILE>: start profiler and send results to <FILE>\n"+ "    --sampling INTERVAL: use sample profiling with INTERVAL microseconds\n"+ "        between samples (use with --start-profiler)\n"+ "    -P <FILE>: like above, but profiling stops when app goes idle\n"+ "    -R: repeat the activity launch <COUNT> times.  Prior to each repeat,\n"+ "        the top activity will be finished.\n"+ "    -S: force stop the target app before starting the activity\n"+ "    --track-allocation: enable tracking of object allocations\n"+ "    --user <USER_ID> | current: Specify which user to run as; if not\n"+ "        specified then run as the current user.\n"+ "    --stack <STACK_ID>: Specify into which stack should the activity be put."+ "\n"+ "am startservice: start a Service.  Options are:\n"+ "    --user <USER_ID> | current: Specify which user to run as; if not\n"+ "        specified then run as the current user.\n"+ "\n"+ "am stopservice: stop a Service.  Options are:\n"+ "    --user <USER_ID> | current: Specify which user to run as; if not\n"+ "        specified then run as the current user.\n"+ "\n"+ "am force-stop: force stop everything associated with <PACKAGE>.\n"+ "    --user <USER_ID> | all | current: Specify user to force stop;\n"+ "        all users if not specified.\n"+ "\n"+ "am kill: Kill all processes associated with <PACKAGE>.  Only kills.\n"+ "  processes that are safe to kill -- that is, will not impact the user\n"+ "  experience.\n"+ "    --user <USER_ID> | all | current: Specify user whose processes to kill;\n"+ "        all users if not specified.\n"+ "\n"+ "am kill-all: Kill all background processes.\n"+ "\n"+ "am broadcast: send a broadcast Intent.  Options are:\n"+ "    --user <USER_ID> | all | current: Specify which user to send to; if not\n"+ "        specified then send to all users.\n"+ "    --receiver-permission <PERMISSION>: Require receiver to hold permission.\n"+ "\n"+ "am instrument: start an Instrumentation.  Typically this target <COMPONENT>\n"+ "  is the form <TEST_PACKAGE>/<RUNNER_CLASS>.  Options are:\n"+ "    -r: print raw results (otherwise decode REPORT_KEY_STREAMRESULT).  Use with\n"+ "        [-e perf true] to generate raw output for performance measurements.\n"+ "    -e <NAME> <VALUE>: set argument <NAME> to <VALUE>.  For test runners a\n"+ "        common form is [-e <testrunner_flag> <value>[,<value>...]].\n"+ "    -p <FILE>: write profiling data to <FILE>\n"+ "    -w: wait for instrumentation to finish before returning.  Required for\n"+ "        test runners.\n"+ "    --user <USER_ID> | current: Specify user instrumentation runs in;\n"+ "        current user if not specified.\n"+ "    --no-window-animation: turn off window animations while running.\n"+ "    --abi <ABI>: Launch the instrumented process with the selected ABI.\n"+ "        This assumes that the process supports the selected ABI.\n"+ "\n"+ "am trace-ipc: Trace IPC transactions.\n"+ "  start: start tracing IPC transactions.\n"+ "  stop: stop tracing IPC transactions and dump the results to file.\n"+ "    --dump-file <FILE>: Specify the file the trace should be dumped to.\n"+ "\n"+ "am profile: start and stop profiler on a process.  The given <PROCESS> argument\n"+ "  may be either a process name or pid.  Options are:\n"+ "    --user <USER_ID> | current: When supplying a process name,\n"+ "        specify user of process to profile; uses current user if not specified.\n"+ "\n"+ "am dumpheap: dump the heap of a process.  The given <PROCESS> argument may\n"+ "  be either a process name or pid.  Options are:\n"+ "    -n: dump native heap instead of managed heap\n"+ "    --user <USER_ID> | current: When supplying a process name,\n"+ "        specify user of process to dump; uses current user if not specified.\n"+ "\n"+ "am set-debug-app: set application <PACKAGE> to debug.  Options are:\n"+ "    -w: wait for debugger when application starts\n"+ "    --persistent: retain this value\n"+ "\n"+ "am clear-debug-app: clear the previously set-debug-app.\n"+ "\n"+ "am set-watch-heap: start monitoring pss size of <PROCESS>, if it is at or\n"+ "    above <HEAP-LIMIT> then a heap dump is collected for the user to report\n"+ "\n"+ "am clear-watch-heap: clear the previously set-watch-heap.\n"+ "\n"+ "am bug-report: request bug report generation; will launch a notification\n"+ "    when done to select where it should be delivered. Options are: \n"+ "   --progress: will launch a notification right away to show its progress.\n"+ "\n"+ "am monitor: start monitoring for crashes or ANRs.\n"+ "    --gdb: start gdbserv on the given port at crash/ANR\n"+ "\n"+ "am hang: hang the system.\n"+ "    --allow-restart: allow watchdog to perform normal system restart\n"+ "\n"+ "am restart: restart the user-space system.\n"+ "\n"+ "am idle-maintenance: perform idle maintenance now.\n"+ "\n"+ "am screen-compat: control screen compatibility mode of <PACKAGE>.\n"+ "\n"+ "am package-importance: print current importance of <PACKAGE>.\n"+ "\n"+ "am to-uri: print the given Intent specification as a URI.\n"+ "\n"+ "am to-intent-uri: print the given Intent specification as an intent: URI.\n"+ "\n"+ "am to-app-uri: print the given Intent specification as an android-app: URI.\n"+ "\n"+ "am switch-user: switch to put USER_ID in the foreground, starting\n"+ "  execution of that user if it is currently stopped.\n"+ "\n"+ "am start-user: start USER_ID in background if it is currently stopped,\n"+ "  use switch-user if you want to start the user in foreground.\n"+ "\n"+ "am stop-user: stop execution of USER_ID, not allowing it to run any\n"+ "  code until a later explicit start or switch to it.\n"+ "  -w: wait for stop-user to complete.\n"+ "  -f: force stop even if there are related users that cannot be stopped.\n"+ "\n"+ "am stack start: start a new activity on <DISPLAY_ID> using <INTENT>.\n"+ "\n"+ "am stack movetask: move <TASK_ID> from its current stack to the top (true) or"+ "   bottom (false) of <STACK_ID>.\n"+ "\n"+ "am stack resize: change <STACK_ID> size and position to <LEFT,TOP,RIGHT,BOTTOM>.\n"+ "\n"+ "am stack resize-docked-stack: change docked stack to <LEFT,TOP,RIGHT,BOTTOM>\n"+ "   and supplying temporary different task bounds indicated by\n"+ "   <TASK_LEFT,TOP,RIGHT,BOTTOM>\n"+ "\n"+ "am stack size-docked-stack-test: test command for sizing docked stack by\n"+ "   <STEP_SIZE> increments from the side <l>eft, <t>op, <r>ight, or <b>ottom\n"+ "   applying the optional [DELAY_MS] between each step.\n"+ "\n"+ "am stack move-top-activity-to-pinned-stack: moves the top activity from\n"+ "   <STACK_ID> to the pinned stack using <LEFT,TOP,RIGHT,BOTTOM> for the\n"+ "   bounds of the pinned stack.\n"+ "\n"+ "am stack positiontask: place <TASK_ID> in <STACK_ID> at <POSITION>"+ "\n"+ "am stack list: list all of the activity stacks and their sizes.\n"+ "\n"+ "am stack info: display the information about activity stack <STACK_ID>.\n"+ "\n"+ "am task lock: bring <TASK_ID> to the front and don't allow other tasks to run.\n"+ "\n"+ "am task lock stop: end the current task lock.\n"+ "\n"+ "am task resizeable: change resizeable mode of <TASK_ID>.\n"+ "   0 (unresizeable) | 1 (crop_windows) | 2 (resizeable) | 3 (resizeable_and_pipable)\n"+ "\n"+ "am task resize: makes sure <TASK_ID> is in a stack with the specified bounds.\n"+ "   Forces the task to be resizeable and creates a stack if no existing stack\n"+ "   has the specified bounds.\n"+ "\n"+ "am task drag-task-test: test command for dragging/moving <TASK_ID> by\n"+ "   <STEP_SIZE> increments around the screen applying the optional [DELAY_MS]\n"+ "   between each step.\n"+ "\n"+ "am task size-task-test: test command for sizing <TASK_ID> by <STEP_SIZE>"+ "   increments within the screen applying the optional [DELAY_MS] between\n"+ "   each step.\n"+ "\n"+ "am get-config: retrieve the configuration and any recent configurations\n"+ "  of the device.\n"+ "am suppress-resize-config-changes: suppresses configuration changes due to\n"+ "  user resizing an activity/task.\n"+ "\n"+ "am set-inactive: sets the inactive state of an app.\n"+ "\n"+ "am get-inactive: returns the inactive state of an app.\n"+ "\n"+ "am send-trim-memory: send a memory trim event to a <PROCESS>.\n"+ "\n"+ "am get-current-user: returns id of the current foreground user.\n"+ "\n");
  Intent.printIntentArgsHelp(pw,"");
  pw.flush();
}
