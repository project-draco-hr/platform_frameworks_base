{
  final int taskId=Integer.valueOf(nextArgRequired());
  final int stepSize=Integer.valueOf(nextArgRequired());
  final String delayStr=nextArg();
  final int delay_ms=(delayStr != null) ? Integer.valueOf(delayStr) : 0;
  final StackInfo stackInfo;
  final Rect initialTaskBounds;
  try {
    stackInfo=mAm.getStackInfo(mAm.getFocusedStackId());
    initialTaskBounds=mAm.getTaskBounds(taskId);
  }
 catch (  RemoteException e) {
    System.err.println("Error getting focus stack info or task bounds: " + e);
    return;
  }
  final Rect stackBounds=stackInfo.bounds;
  stackBounds.inset(STACK_BOUNDS_INSET,STACK_BOUNDS_INSET);
  final Rect currentTaskBounds=new Rect(initialTaskBounds);
  System.out.println("Growing top-left");
  do {
    currentTaskBounds.top-=getStepSize(currentTaskBounds.top,stackBounds.top,stepSize,GREATER_THAN_TARGET);
    currentTaskBounds.left-=getStepSize(currentTaskBounds.left,stackBounds.left,stepSize,GREATER_THAN_TARGET);
    taskResize(taskId,currentTaskBounds,delay_ms,true);
  }
 while (stackBounds.top < currentTaskBounds.top || stackBounds.left < currentTaskBounds.left);
  System.out.println("Shrinking top-left");
  do {
    currentTaskBounds.top+=getStepSize(currentTaskBounds.top,initialTaskBounds.top,stepSize,!GREATER_THAN_TARGET);
    currentTaskBounds.left+=getStepSize(currentTaskBounds.left,initialTaskBounds.left,stepSize,!GREATER_THAN_TARGET);
    taskResize(taskId,currentTaskBounds,delay_ms,true);
  }
 while (initialTaskBounds.top > currentTaskBounds.top || initialTaskBounds.left > currentTaskBounds.left);
  System.out.println("Growing top-right");
  do {
    currentTaskBounds.top-=getStepSize(currentTaskBounds.top,stackBounds.top,stepSize,GREATER_THAN_TARGET);
    currentTaskBounds.right+=getStepSize(currentTaskBounds.right,stackBounds.right,stepSize,!GREATER_THAN_TARGET);
    taskResize(taskId,currentTaskBounds,delay_ms,true);
  }
 while (stackBounds.top < currentTaskBounds.top || stackBounds.right > currentTaskBounds.right);
  System.out.println("Shrinking top-right");
  do {
    currentTaskBounds.top+=getStepSize(currentTaskBounds.top,initialTaskBounds.top,stepSize,!GREATER_THAN_TARGET);
    currentTaskBounds.right-=getStepSize(currentTaskBounds.right,initialTaskBounds.right,stepSize,GREATER_THAN_TARGET);
    taskResize(taskId,currentTaskBounds,delay_ms,true);
  }
 while (initialTaskBounds.top > currentTaskBounds.top || initialTaskBounds.right < currentTaskBounds.right);
  System.out.println("Growing bottom-left");
  do {
    currentTaskBounds.bottom+=getStepSize(currentTaskBounds.bottom,stackBounds.bottom,stepSize,!GREATER_THAN_TARGET);
    currentTaskBounds.left-=getStepSize(currentTaskBounds.left,stackBounds.left,stepSize,GREATER_THAN_TARGET);
    taskResize(taskId,currentTaskBounds,delay_ms,true);
  }
 while (stackBounds.bottom > currentTaskBounds.bottom || stackBounds.left < currentTaskBounds.left);
  System.out.println("Shrinking bottom-left");
  do {
    currentTaskBounds.bottom-=getStepSize(currentTaskBounds.bottom,initialTaskBounds.bottom,stepSize,GREATER_THAN_TARGET);
    currentTaskBounds.left+=getStepSize(currentTaskBounds.left,initialTaskBounds.left,stepSize,!GREATER_THAN_TARGET);
    taskResize(taskId,currentTaskBounds,delay_ms,true);
  }
 while (initialTaskBounds.bottom < currentTaskBounds.bottom || initialTaskBounds.left > currentTaskBounds.left);
  System.out.println("Growing bottom-right");
  do {
    currentTaskBounds.bottom+=getStepSize(currentTaskBounds.bottom,stackBounds.bottom,stepSize,!GREATER_THAN_TARGET);
    currentTaskBounds.right+=getStepSize(currentTaskBounds.right,stackBounds.right,stepSize,!GREATER_THAN_TARGET);
    taskResize(taskId,currentTaskBounds,delay_ms,true);
  }
 while (stackBounds.bottom > currentTaskBounds.bottom || stackBounds.right > currentTaskBounds.right);
  System.out.println("Shrinking bottom-right");
  do {
    currentTaskBounds.bottom-=getStepSize(currentTaskBounds.bottom,initialTaskBounds.bottom,stepSize,GREATER_THAN_TARGET);
    currentTaskBounds.right-=getStepSize(currentTaskBounds.right,initialTaskBounds.right,stepSize,GREATER_THAN_TARGET);
    taskResize(taskId,currentTaskBounds,delay_ms,true);
  }
 while (initialTaskBounds.bottom < currentTaskBounds.bottom || initialTaskBounds.right < currentTaskBounds.right);
}
