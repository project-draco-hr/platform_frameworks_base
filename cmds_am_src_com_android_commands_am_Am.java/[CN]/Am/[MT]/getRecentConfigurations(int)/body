{
  IUsageStatsManager usm=IUsageStatsManager.Stub.asInterface(ServiceManager.getService(Context.USAGE_STATS_SERVICE));
  final long now=System.currentTimeMillis();
  final long nDaysAgo=now - (days * 24 * 60* 60* 1000);
  try {
    @SuppressWarnings("unchecked") ParceledListSlice<ConfigurationStats> configStatsSlice=usm.queryConfigurationStats(UsageStatsManager.INTERVAL_BEST,nDaysAgo,now,"com.android.shell");
    if (configStatsSlice == null) {
      return Collections.emptyList();
    }
    final ArrayMap<Configuration,Integer> recentConfigs=new ArrayMap<>();
    final List<ConfigurationStats> configStatsList=configStatsSlice.getList();
    final int configStatsListSize=configStatsList.size();
    for (int i=0; i < configStatsListSize; i++) {
      final ConfigurationStats stats=configStatsList.get(i);
      final int indexOfKey=recentConfigs.indexOfKey(stats.getConfiguration());
      if (indexOfKey < 0) {
        recentConfigs.put(stats.getConfiguration(),stats.getActivationCount());
      }
 else {
        recentConfigs.setValueAt(indexOfKey,recentConfigs.valueAt(indexOfKey) + stats.getActivationCount());
      }
    }
    final Comparator<Configuration> comparator=new Comparator<Configuration>(){
      @Override public int compare(      Configuration a,      Configuration b){
        return recentConfigs.get(b).compareTo(recentConfigs.get(a));
      }
    }
;
    ArrayList<Configuration> configs=new ArrayList<>(recentConfigs.size());
    configs.addAll(recentConfigs.keySet());
    Collections.sort(configs,comparator);
    return configs;
  }
 catch (  RemoteException e) {
    return Collections.emptyList();
  }
}
