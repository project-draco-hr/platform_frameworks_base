{
  final int cellWidthHalf=mPaddedWidth / (DAYS_IN_WEEK * 2);
  final float halfLineHeight=(mDayPaint.ascent() + mDayPaint.descent()) / 2;
  float centerY=mMonthHeight + mDayOfWeekHeight + mDayHeight / 2f;
  for (int day=1, j=findDayOffset(); day <= mDaysInMonth; day++) {
    final int x=(2 * j + 1) * cellWidthHalf;
    int stateMask=0;
    if (day >= mEnabledDayStart && day <= mEnabledDayEnd) {
      stateMask|=StateSet.VIEW_STATE_ENABLED;
    }
    final boolean isDayActivated=mActivatedDay == day;
    if (isDayActivated) {
      stateMask|=StateSet.VIEW_STATE_ACTIVATED;
      canvas.drawCircle(x,centerY,mDaySelectorRadius,mDaySelectorPaint);
    }
 else     if (mTouchedDay == day) {
      stateMask|=StateSet.VIEW_STATE_PRESSED;
      canvas.drawCircle(x,centerY,mDaySelectorRadius,mDayHighlightPaint);
    }
    final boolean isDayToday=mToday == day;
    final int dayTextColor;
    if (isDayToday && !isDayActivated) {
      dayTextColor=mDaySelectorPaint.getColor();
    }
 else {
      final int[] stateSet=StateSet.get(stateMask);
      dayTextColor=mDayTextColor.getColorForState(stateSet,0);
    }
    mDayPaint.setColor(dayTextColor);
    canvas.drawText("" + day,x,centerY - halfLineHeight,mDayPaint);
    j++;
    if (j == DAYS_IN_WEEK) {
      j=0;
      centerY+=mDayHeight;
    }
  }
}
