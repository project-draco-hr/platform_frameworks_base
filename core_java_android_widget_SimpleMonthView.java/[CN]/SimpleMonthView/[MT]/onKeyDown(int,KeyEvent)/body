{
  boolean focusChanged=false;
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_DPAD_LEFT:
    if (event.hasNoModifiers()) {
      focusChanged=moveOneDay(isLayoutRtl());
    }
  break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if (event.hasNoModifiers()) {
  focusChanged=moveOneDay(!isLayoutRtl());
}
break;
case KeyEvent.KEYCODE_DPAD_UP:
if (event.hasNoModifiers()) {
ensureFocusedDay();
if (mHighlightedDay > 7) {
mHighlightedDay-=7;
focusChanged=true;
}
}
break;
case KeyEvent.KEYCODE_DPAD_DOWN:
if (event.hasNoModifiers()) {
ensureFocusedDay();
if (mHighlightedDay <= mDaysInMonth - 7) {
mHighlightedDay+=7;
focusChanged=true;
}
}
break;
case KeyEvent.KEYCODE_DPAD_CENTER:
case KeyEvent.KEYCODE_ENTER:
if (mHighlightedDay != -1) {
onDayClicked(mHighlightedDay);
return true;
}
break;
case KeyEvent.KEYCODE_TAB:
{
int focusChangeDirection=0;
if (event.hasNoModifiers()) {
focusChangeDirection=View.FOCUS_FORWARD;
}
 else if (event.hasModifiers(KeyEvent.META_SHIFT_ON)) {
focusChangeDirection=View.FOCUS_BACKWARD;
}
if (focusChangeDirection != 0) {
final ViewParent parent=getParent();
View nextFocus=this;
do {
nextFocus=nextFocus.focusSearch(focusChangeDirection);
}
 while (nextFocus != null && nextFocus != this && nextFocus.getParent() == parent);
if (nextFocus != null) {
nextFocus.requestFocus();
return true;
}
}
break;
}
}
if (focusChanged) {
invalidate();
return true;
}
 else {
return super.onKeyDown(keyCode,event);
}
}
