{
  if (gainFocus) {
    final int offset=findDayOffset();
switch (direction) {
case View.FOCUS_RIGHT:
{
        int row=findClosestRow(previouslyFocusedRect);
        mHighlightedDay=row == 0 ? 1 : (row * DAYS_IN_WEEK) - offset + 1;
        break;
      }
case View.FOCUS_LEFT:
{
      int row=findClosestRow(previouslyFocusedRect) + 1;
      mHighlightedDay=Math.min(mDaysInMonth,(row * DAYS_IN_WEEK) - offset);
      break;
    }
case View.FOCUS_DOWN:
{
    final int col=findClosestColumn(previouslyFocusedRect);
    final int day=col - offset + 1;
    mHighlightedDay=day < 1 ? day + DAYS_IN_WEEK : day;
    break;
  }
case View.FOCUS_UP:
{
  final int col=findClosestColumn(previouslyFocusedRect);
  final int maxWeeks=(offset + mDaysInMonth) / DAYS_IN_WEEK;
  final int day=col - offset + (DAYS_IN_WEEK * maxWeeks) + 1;
  mHighlightedDay=day > mDaysInMonth ? day - DAYS_IN_WEEK : day;
  break;
}
}
ensureFocusedDay();
invalidate();
}
super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
}
