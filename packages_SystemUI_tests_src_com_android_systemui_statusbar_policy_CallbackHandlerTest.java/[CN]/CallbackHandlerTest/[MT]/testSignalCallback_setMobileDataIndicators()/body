{
  IconState status=new IconState(true,0,"");
  IconState qs=new IconState(true,1,"");
  boolean in=true;
  boolean out=true;
  String typeDescription="Test 1";
  String description="Test 2";
  int type=R.drawable.stat_sys_data_fully_connected_1x;
  int qsType=R.drawable.ic_qs_signal_1x;
  boolean wide=true;
  int subId=5;
  mHandler.setMobileDataIndicators(status,qs,type,qsType,in,out,typeDescription,description,wide,subId);
  waitForCallbacks();
  ArgumentCaptor<IconState> statusArg=ArgumentCaptor.forClass(IconState.class);
  ArgumentCaptor<IconState> qsArg=ArgumentCaptor.forClass(IconState.class);
  ArgumentCaptor<Integer> typeIconArg=ArgumentCaptor.forClass(Integer.class);
  ArgumentCaptor<Integer> qsTypeIconArg=ArgumentCaptor.forClass(Integer.class);
  ArgumentCaptor<Boolean> inArg=ArgumentCaptor.forClass(Boolean.class);
  ArgumentCaptor<Boolean> outArg=ArgumentCaptor.forClass(Boolean.class);
  ArgumentCaptor<String> typeContentArg=ArgumentCaptor.forClass(String.class);
  ArgumentCaptor<String> descArg=ArgumentCaptor.forClass(String.class);
  ArgumentCaptor<Boolean> wideArg=ArgumentCaptor.forClass(Boolean.class);
  ArgumentCaptor<Integer> subIdArg=ArgumentCaptor.forClass(Integer.class);
  Mockito.verify(mSignalCallback).setMobileDataIndicators(statusArg.capture(),qsArg.capture(),typeIconArg.capture(),qsTypeIconArg.capture(),inArg.capture(),outArg.capture(),typeContentArg.capture(),descArg.capture(),wideArg.capture(),subIdArg.capture());
  assertEquals(status,statusArg.getValue());
  assertEquals(qs,qsArg.getValue());
  assertEquals(type,(int)typeIconArg.getValue());
  assertEquals(qsType,(int)qsTypeIconArg.getValue());
  assertEquals(in,(boolean)inArg.getValue());
  assertEquals(out,(boolean)outArg.getValue());
  assertEquals(typeDescription,typeContentArg.getValue());
  assertEquals(description,descArg.getValue());
  assertEquals(wide,(boolean)wideArg.getValue());
  assertEquals(subId,(int)subIdArg.getValue());
}
