{
  Resources resources=mResources;
  CursorTransformation transformation=null;
  TypedArray a=resources.obtainAttributes(mAttrs,com.android.internal.R.styleable.CursorAdapter_TransformItem);
  String className=a.getString(com.android.internal.R.styleable.CursorAdapter_TransformItem_withClass);
  if (className == null) {
    String expression=a.getString(com.android.internal.R.styleable.CursorAdapter_TransformItem_withExpression);
    transformation=createExpressionTransformation(expression);
  }
 else   if (!mContext.isRestricted()) {
    try {
      final Class<?> klas=Class.forName(className,true,mContext.getClassLoader());
      if (CursorTransformation.class.isAssignableFrom(klas)) {
        final Constructor<?> c=klas.getDeclaredConstructor(Context.class);
        transformation=(CursorTransformation)c.newInstance(mContext);
      }
    }
 catch (    ClassNotFoundException e) {
      throw new IllegalArgumentException("Cannot instanciate transform type in " + mContext.getResources().getResourceEntryName(mId) + ": "+ className,e);
    }
catch (    NoSuchMethodException e) {
      throw new IllegalArgumentException("Cannot instanciate transform type in " + mContext.getResources().getResourceEntryName(mId) + ": "+ className,e);
    }
catch (    InvocationTargetException e) {
      throw new IllegalArgumentException("Cannot instanciate transform type in " + mContext.getResources().getResourceEntryName(mId) + ": "+ className,e);
    }
catch (    InstantiationException e) {
      throw new IllegalArgumentException("Cannot instanciate transform type in " + mContext.getResources().getResourceEntryName(mId) + ": "+ className,e);
    }
catch (    IllegalAccessException e) {
      throw new IllegalArgumentException("Cannot instanciate transform type in " + mContext.getResources().getResourceEntryName(mId) + ": "+ className,e);
    }
  }
  a.recycle();
  if (transformation == null) {
    throw new IllegalArgumentException("A transform item in " + resources.getResourceEntryName(mId) + " must have a 'withClass' or "+ "'withExpression' attribute");
  }
  return transformation;
}
