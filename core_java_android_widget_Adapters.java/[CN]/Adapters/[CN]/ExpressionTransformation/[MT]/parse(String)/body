{
  ExpressionNode node=mFirstNode;
  int segmentStart;
  int count=expression.length();
  for (int i=0; i < count; i++) {
    char c=expression.charAt(i);
    segmentStart=i;
    if (c == '{') {
      while (i < count && (c=expression.charAt(i)) != '}') {
        i++;
      }
      if (c != '}') {
        throw new IllegalStateException("The transform expression contains a " + "non-closed column name: " + expression.substring(segmentStart + 1,i));
      }
      node.next=new ColumnExpressionNode(expression.substring(segmentStart + 1,i));
    }
 else {
      while (i < count && (c=expression.charAt(i)) != '{') {
        i++;
      }
      node.next=new ConstantExpressionNode(expression.substring(segmentStart,i));
      if (c == '{')       i--;
    }
    node=node.next;
  }
}
