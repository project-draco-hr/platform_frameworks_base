{
  EventLog.writeEvent(LOG_BOOT_PROGRESS_SYSTEM_RUN,SystemClock.uptimeMillis());
  ActivityManagerService.prepareTraceFile(false);
  Looper.prepare();
  android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_FOREGROUND);
  String factoryTestStr=SystemProperties.get("ro.factorytest");
  int factoryTest="".equals(factoryTestStr) ? SystemServer.FACTORY_TEST_OFF : Integer.parseInt(factoryTestStr);
  HardwareService hardware=null;
  PowerManagerService power=null;
  BatteryService battery=null;
  ConnectivityService connectivity=null;
  IPackageManager pm=null;
  Context context=null;
  WindowManagerService wm=null;
  BluetoothService bluetooth=null;
  BluetoothA2dpService bluetoothA2dp=null;
  HeadsetObserver headset=null;
  DockObserver dock=null;
  try {
    Log.i(TAG,"Entropy Service");
    ServiceManager.addService("entropy",new EntropyService());
    Log.i(TAG,"Power Manager");
    power=new PowerManagerService();
    ServiceManager.addService(Context.POWER_SERVICE,power);
    Log.i(TAG,"Activity Manager");
    context=ActivityManagerService.main(factoryTest);
    Log.i(TAG,"Telephony Registry");
    ServiceManager.addService("telephony.registry",new TelephonyRegistry(context));
    AttributeCache.init(context);
    Log.i(TAG,"Package Manager");
    pm=PackageManagerService.main(context,factoryTest != SystemServer.FACTORY_TEST_OFF);
    ActivityManagerService.setSystemProcess();
    mContentResolver=context.getContentResolver();
    try {
      Log.i(TAG,"Account Manager");
      ServiceManager.addService(Context.ACCOUNT_SERVICE,new AccountManagerService(context));
    }
 catch (    Throwable e) {
      Log.e(TAG,"Failure starting Account Manager",e);
    }
    Log.i(TAG,"Content Manager");
    ContentService.main(context,factoryTest == SystemServer.FACTORY_TEST_LOW_LEVEL);
    Log.i(TAG,"System Content Providers");
    ActivityManagerService.installSystemProviders();
    Log.i(TAG,"Battery Service");
    battery=new BatteryService(context);
    ServiceManager.addService("battery",battery);
    Log.i(TAG,"Hardware Service");
    hardware=new HardwareService(context);
    ServiceManager.addService("hardware",hardware);
    power.init(context,hardware,ActivityManagerService.getDefault(),battery);
    Log.i(TAG,"Alarm Manager");
    AlarmManagerService alarm=new AlarmManagerService(context);
    ServiceManager.addService(Context.ALARM_SERVICE,alarm);
    Log.i(TAG,"Init Watchdog");
    Watchdog.getInstance().init(context,battery,power,alarm,ActivityManagerService.self());
    Log.i(TAG,"Sensor Service");
    ServiceManager.addService(Context.SENSOR_SERVICE,new SensorService(context));
    Log.i(TAG,"Window Manager");
    wm=WindowManagerService.main(context,power,factoryTest != SystemServer.FACTORY_TEST_LOW_LEVEL);
    ServiceManager.addService(Context.WINDOW_SERVICE,wm);
    ((ActivityManagerService)ServiceManager.getService("activity")).setWindowManager(wm);
    if (SystemProperties.get("ro.kernel.qemu").equals("1")) {
      Log.i(TAG,"Registering null Bluetooth Service (emulator)");
      ServiceManager.addService(BluetoothAdapter.BLUETOOTH_SERVICE,null);
    }
 else     if (factoryTest == SystemServer.FACTORY_TEST_LOW_LEVEL) {
      Log.i(TAG,"Registering null Bluetooth Service (factory test)");
      ServiceManager.addService(BluetoothAdapter.BLUETOOTH_SERVICE,null);
    }
 else {
      Log.i(TAG,"Bluetooth Service");
      bluetooth=new BluetoothService(context);
      ServiceManager.addService(BluetoothAdapter.BLUETOOTH_SERVICE,bluetooth);
      bluetooth.initAfterRegistration();
      bluetoothA2dp=new BluetoothA2dpService(context,bluetooth);
      ServiceManager.addService(BluetoothA2dpService.BLUETOOTH_A2DP_SERVICE,bluetoothA2dp);
      int bluetoothOn=Settings.Secure.getInt(mContentResolver,Settings.Secure.BLUETOOTH_ON,0);
      if (bluetoothOn > 0) {
        bluetooth.enable();
      }
    }
  }
 catch (  RuntimeException e) {
    Log.e("System","Failure starting core service",e);
  }
  StatusBarService statusBar=null;
  InputMethodManagerService imm=null;
  AppWidgetService appWidget=null;
  NotificationManagerService notification=null;
  WallpaperManagerService wallpaper=null;
  if (factoryTest != SystemServer.FACTORY_TEST_LOW_LEVEL) {
    try {
      Log.i(TAG,"Status Bar");
      statusBar=new StatusBarService(context);
      ServiceManager.addService("statusbar",statusBar);
    }
 catch (    Throwable e) {
      Log.e(TAG,"Failure starting StatusBarService",e);
    }
    try {
      Log.i(TAG,"Clipboard Service");
      ServiceManager.addService("clipboard",new ClipboardService(context));
    }
 catch (    Throwable e) {
      Log.e(TAG,"Failure starting Clipboard Service",e);
    }
    try {
      Log.i(TAG,"Input Method Service");
      imm=new InputMethodManagerService(context,statusBar);
      ServiceManager.addService(Context.INPUT_METHOD_SERVICE,imm);
    }
 catch (    Throwable e) {
      Log.e(TAG,"Failure starting Input Manager Service",e);
    }
    try {
      Log.i(TAG,"NetStat Service");
      ServiceManager.addService("netstat",new NetStatService(context));
    }
 catch (    Throwable e) {
      Log.e(TAG,"Failure starting NetStat Service",e);
    }
    try {
      Log.i(TAG,"Connectivity Service");
      connectivity=ConnectivityService.getInstance(context);
      ServiceManager.addService(Context.CONNECTIVITY_SERVICE,connectivity);
    }
 catch (    Throwable e) {
      Log.e(TAG,"Failure starting Connectivity Service",e);
    }
    try {
      Log.i(TAG,"Accessibility Manager");
      ServiceManager.addService(Context.ACCESSIBILITY_SERVICE,new AccessibilityManagerService(context));
    }
 catch (    Throwable e) {
      Log.e(TAG,"Failure starting Accessibility Manager",e);
    }
    try {
      Log.i(TAG,"Notification Manager");
      notification=new NotificationManagerService(context,statusBar,hardware);
      ServiceManager.addService(Context.NOTIFICATION_SERVICE,notification);
    }
 catch (    Throwable e) {
      Log.e(TAG,"Failure starting Notification Manager",e);
    }
    try {
      Log.i(TAG,"Mount Service");
      ServiceManager.addService("mount",new MountService(context));
    }
 catch (    Throwable e) {
      Log.e(TAG,"Failure starting Mount Service",e);
    }
    try {
      Log.i(TAG,"Device Storage Monitor");
      ServiceManager.addService(DeviceStorageMonitorService.SERVICE,new DeviceStorageMonitorService(context));
    }
 catch (    Throwable e) {
      Log.e(TAG,"Failure starting DeviceStorageMonitor service",e);
    }
    try {
      Log.i(TAG,"Location Manager");
      ServiceManager.addService(Context.LOCATION_SERVICE,new LocationManagerService(context));
    }
 catch (    Throwable e) {
      Log.e(TAG,"Failure starting Location Manager",e);
    }
    try {
      Log.i(TAG,"Search Service");
      ServiceManager.addService(Context.SEARCH_SERVICE,new SearchManagerService(context));
    }
 catch (    Throwable e) {
      Log.e(TAG,"Failure starting Search Service",e);
    }
    if (INCLUDE_DEMO) {
      Log.i(TAG,"Installing demo data...");
      (new DemoThread(context)).start();
    }
    try {
      Log.i(TAG,"Checkin Service");
      Intent intent=new Intent().setComponent(new ComponentName("com.google.android.server.checkin","com.google.android.server.checkin.CheckinService"));
      if (context.startService(intent) == null) {
        Log.w(TAG,"Using fallback Checkin Service.");
        ServiceManager.addService("checkin",new FallbackCheckinService(context));
      }
    }
 catch (    Throwable e) {
      Log.e(TAG,"Failure starting Checkin Service",e);
    }
    try {
      Log.i(TAG,"Wallpaper Service");
      wallpaper=new WallpaperManagerService(context);
      ServiceManager.addService(Context.WALLPAPER_SERVICE,wallpaper);
    }
 catch (    Throwable e) {
      Log.e(TAG,"Failure starting Wallpaper Service",e);
    }
    try {
      Log.i(TAG,"Audio Service");
      ServiceManager.addService(Context.AUDIO_SERVICE,new AudioService(context));
    }
 catch (    Throwable e) {
      Log.e(TAG,"Failure starting Audio Service",e);
    }
    try {
      Log.i(TAG,"Headset Observer");
      headset=new HeadsetObserver(context);
    }
 catch (    Throwable e) {
      Log.e(TAG,"Failure starting HeadsetObserver",e);
    }
    try {
      Log.i(TAG,"Dock Observer");
      dock=new DockObserver(context,power);
    }
 catch (    Throwable e) {
      Log.e(TAG,"Failure starting DockObserver",e);
    }
    try {
      Log.i(TAG,"Backup Service");
      ServiceManager.addService(Context.BACKUP_SERVICE,new BackupManagerService(context));
    }
 catch (    Throwable e) {
      Log.e(TAG,"Failure starting Backup Service",e);
    }
    try {
      Log.i(TAG,"AppWidget Service");
      appWidget=new AppWidgetService(context);
      ServiceManager.addService(Context.APPWIDGET_SERVICE,appWidget);
    }
 catch (    Throwable e) {
      Log.e(TAG,"Failure starting AppWidget Service",e);
    }
    try {
      com.android.server.status.StatusBarPolicy.installIcons(context,statusBar);
    }
 catch (    Throwable e) {
      Log.e(TAG,"Failure installing status bar icons",e);
    }
  }
  Settings.Secure.putInt(mContentResolver,Settings.Secure.ADB_ENABLED,"1".equals(SystemProperties.get("persist.service.adb.enable")) ? 1 : 0);
  mContentResolver.registerContentObserver(Settings.Secure.getUriFor(Settings.Secure.ADB_ENABLED),false,new AdbSettingsObserver());
  final boolean safeMode=wm.detectSafeMode();
  if (safeMode) {
    try {
      ActivityManagerNative.getDefault().enterSafeMode();
    }
 catch (    RemoteException e) {
    }
  }
  if (notification != null) {
    notification.systemReady();
  }
  if (statusBar != null) {
    statusBar.systemReady();
  }
  wm.systemReady();
  power.systemReady();
  try {
    pm.systemReady();
  }
 catch (  RemoteException e) {
  }
  final BatteryService batteryF=battery;
  final ConnectivityService connectivityF=connectivity;
  final DockObserver dockF=dock;
  final AppWidgetService appWidgetF=appWidget;
  final WallpaperManagerService wallpaperF=wallpaper;
  final InputMethodManagerService immF=imm;
  ((ActivityManagerService)ActivityManagerNative.getDefault()).systemReady(new Runnable(){
    public void run(){
      Log.i(TAG,"Making services ready");
      if (batteryF != null)       batteryF.systemReady();
      if (connectivityF != null)       connectivityF.systemReady();
      if (dockF != null)       dockF.systemReady();
      Watchdog.getInstance().start();
      if (appWidgetF != null)       appWidgetF.systemReady(safeMode);
      if (wallpaperF != null)       wallpaperF.systemReady();
      if (immF != null)       immF.systemReady();
    }
  }
);
  Looper.loop();
  Log.d(TAG,"System ServerThread is exiting!");
}
