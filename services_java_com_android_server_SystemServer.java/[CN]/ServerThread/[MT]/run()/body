{
  EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_SYSTEM_RUN,SystemClock.uptimeMillis());
  Looper.prepareMainLooper();
  android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_FOREGROUND);
  BinderInternal.disableBackgroundScheduling(true);
  android.os.Process.setCanSelfBackground(false);
{
    final String shutdownAction=SystemProperties.get(ShutdownThread.SHUTDOWN_ACTION_PROPERTY,"");
    if (shutdownAction != null && shutdownAction.length() > 0) {
      boolean reboot=(shutdownAction.charAt(0) == '1');
      final String reason;
      if (shutdownAction.length() > 1) {
        reason=shutdownAction.substring(1,shutdownAction.length());
      }
 else {
        reason=null;
      }
      ShutdownThread.rebootOrShutdown(reboot,reason);
    }
  }
  String factoryTestStr=SystemProperties.get("ro.factorytest");
  int factoryTest="".equals(factoryTestStr) ? SystemServer.FACTORY_TEST_OFF : Integer.parseInt(factoryTestStr);
  final boolean headless="1".equals(SystemProperties.get("ro.config.headless","0"));
  AccountManagerService accountManager=null;
  ContentService contentService=null;
  LightsService lights=null;
  PowerManagerService power=null;
  DisplayManagerService display=null;
  BatteryService battery=null;
  VibratorService vibrator=null;
  AlarmManagerService alarm=null;
  NetworkManagementService networkManagement=null;
  NetworkStatsService networkStats=null;
  NetworkPolicyManagerService networkPolicy=null;
  ConnectivityService connectivity=null;
  WifiP2pService wifiP2p=null;
  WifiService wifi=null;
  NsdService serviceDiscovery=null;
  IPackageManager pm=null;
  Context context=null;
  WindowManagerService wm=null;
  BluetoothManagerService bluetooth=null;
  DockObserver dock=null;
  UsbService usb=null;
  SerialService serial=null;
  UiModeManagerService uiMode=null;
  RecognitionManagerService recognition=null;
  ThrottleService throttle=null;
  NetworkTimeUpdateService networkTimeUpdater=null;
  CommonTimeManagementService commonTimeMgmtService=null;
  InputManagerService inputManager=null;
  try {
    Slog.i(TAG,"Entropy Mixer");
    ServiceManager.addService("entropy",new EntropyMixer());
    Slog.i(TAG,"Power Manager");
    power=new PowerManagerService();
    ServiceManager.addService(Context.POWER_SERVICE,power);
    Slog.i(TAG,"Display Manager");
    display=new DisplayManagerService();
    ServiceManager.addService(Context.DISPLAY_SERVICE,display,true);
    Slog.i(TAG,"Activity Manager");
    context=ActivityManagerService.main(factoryTest);
    display.setContext(context);
    Slog.i(TAG,"Telephony Registry");
    ServiceManager.addService("telephony.registry",new TelephonyRegistry(context));
    Slog.i(TAG,"Scheduling Policy");
    ServiceManager.addService(Context.SCHEDULING_POLICY_SERVICE,new SchedulingPolicyService());
    AttributeCache.init(context);
    Slog.i(TAG,"Package Manager");
    String cryptState=SystemProperties.get("vold.decrypt");
    boolean onlyCore=false;
    if (ENCRYPTING_STATE.equals(cryptState)) {
      Slog.w(TAG,"Detected encryption in progress - only parsing core apps");
      onlyCore=true;
    }
 else     if (ENCRYPTED_STATE.equals(cryptState)) {
      Slog.w(TAG,"Device encrypted - only parsing core apps");
      onlyCore=true;
    }
    pm=PackageManagerService.main(context,factoryTest != SystemServer.FACTORY_TEST_OFF,onlyCore);
    boolean firstBoot=false;
    try {
      firstBoot=pm.isFirstBoot();
    }
 catch (    RemoteException e) {
    }
    ActivityManagerService.setSystemProcess();
    mContentResolver=context.getContentResolver();
    try {
      Slog.i(TAG,"Account Manager");
      accountManager=new AccountManagerService(context);
      ServiceManager.addService(Context.ACCOUNT_SERVICE,accountManager);
    }
 catch (    Throwable e) {
      Slog.e(TAG,"Failure starting Account Manager",e);
    }
    Slog.i(TAG,"Content Manager");
    contentService=ContentService.main(context,factoryTest == SystemServer.FACTORY_TEST_LOW_LEVEL);
    Slog.i(TAG,"System Content Providers");
    ActivityManagerService.installSystemProviders();
    Slog.i(TAG,"Lights Service");
    lights=new LightsService(context);
    Slog.i(TAG,"Battery Service");
    battery=new BatteryService(context,lights);
    ServiceManager.addService("battery",battery);
    Slog.i(TAG,"Vibrator Service");
    vibrator=new VibratorService(context);
    ServiceManager.addService("vibrator",vibrator);
    power.init(context,lights,ActivityManagerService.self(),battery,display);
    Slog.i(TAG,"Alarm Manager");
    alarm=new AlarmManagerService(context);
    ServiceManager.addService(Context.ALARM_SERVICE,alarm);
    Slog.i(TAG,"Init Watchdog");
    Watchdog.getInstance().init(context,battery,power,alarm,ActivityManagerService.self());
    Slog.i(TAG,"Window Manager");
    wm=WindowManagerService.main(context,power,display,factoryTest != SystemServer.FACTORY_TEST_LOW_LEVEL,!firstBoot,onlyCore);
    ServiceManager.addService(Context.WINDOW_SERVICE,wm);
    inputManager=wm.getInputManagerService();
    ServiceManager.addService(Context.INPUT_SERVICE,inputManager);
    ActivityManagerService.self().setWindowManager(wm);
    if (SystemProperties.get("ro.kernel.qemu").equals("1")) {
      Slog.i(TAG,"No Bluetooh Service (emulator)");
    }
 else     if (factoryTest == SystemServer.FACTORY_TEST_LOW_LEVEL) {
      Slog.i(TAG,"No Bluetooth Service (factory test)");
    }
 else {
      Slog.i(TAG,"Bluetooth Manager Service");
      bluetooth=new BluetoothManagerService(context);
      ServiceManager.addService(BluetoothAdapter.BLUETOOTH_MANAGER_SERVICE,bluetooth);
    }
  }
 catch (  RuntimeException e) {
    Slog.e("System","******************************************");
    Slog.e("System","************ Failure starting core service",e);
  }
  DevicePolicyManagerService devicePolicy=null;
  StatusBarManagerService statusBar=null;
  InputMethodManagerService imm=null;
  AppWidgetService appWidget=null;
  NotificationManagerService notification=null;
  WallpaperManagerService wallpaper=null;
  LocationManagerService location=null;
  CountryDetectorService countryDetector=null;
  TextServicesManagerService tsms=null;
  LockSettingsService lockSettings=null;
  DreamManagerService dreamy=null;
  if (factoryTest != SystemServer.FACTORY_TEST_LOW_LEVEL) {
    try {
      Slog.i(TAG,"Input Method Service");
      imm=new InputMethodManagerService(context,wm);
      ServiceManager.addService(Context.INPUT_METHOD_SERVICE,imm);
    }
 catch (    Throwable e) {
      reportWtf("starting Input Manager Service",e);
    }
    try {
      Slog.i(TAG,"Accessibility Manager");
      ServiceManager.addService(Context.ACCESSIBILITY_SERVICE,new AccessibilityManagerService(context));
    }
 catch (    Throwable e) {
      reportWtf("starting Accessibility Manager",e);
    }
  }
  try {
    wm.displayReady();
  }
 catch (  Throwable e) {
    reportWtf("making display ready",e);
  }
  try {
    pm.performBootDexOpt();
  }
 catch (  Throwable e) {
    reportWtf("performing boot dexopt",e);
  }
  try {
    ActivityManagerNative.getDefault().showBootMessage(context.getResources().getText(com.android.internal.R.string.android_upgrading_starting_apps),false);
  }
 catch (  RemoteException e) {
  }
  if (factoryTest != SystemServer.FACTORY_TEST_LOW_LEVEL) {
    MountService mountService=null;
    if (!"0".equals(SystemProperties.get("system_init.startmountservice"))) {
      try {
        Slog.i(TAG,"Mount Service");
        mountService=new MountService(context);
        ServiceManager.addService("mount",mountService);
      }
 catch (      Throwable e) {
        reportWtf("starting Mount Service",e);
      }
    }
    try {
      Slog.i(TAG,"LockSettingsService");
      lockSettings=new LockSettingsService(context);
      ServiceManager.addService("lock_settings",lockSettings);
    }
 catch (    Throwable e) {
      reportWtf("starting LockSettingsService service",e);
    }
    try {
      Slog.i(TAG,"Device Policy");
      devicePolicy=new DevicePolicyManagerService(context);
      ServiceManager.addService(Context.DEVICE_POLICY_SERVICE,devicePolicy);
    }
 catch (    Throwable e) {
      reportWtf("starting DevicePolicyService",e);
    }
    try {
      Slog.i(TAG,"Status Bar");
      statusBar=new StatusBarManagerService(context,wm);
      ServiceManager.addService(Context.STATUS_BAR_SERVICE,statusBar);
    }
 catch (    Throwable e) {
      reportWtf("starting StatusBarManagerService",e);
    }
    try {
      Slog.i(TAG,"Clipboard Service");
      ServiceManager.addService(Context.CLIPBOARD_SERVICE,new ClipboardService(context));
    }
 catch (    Throwable e) {
      reportWtf("starting Clipboard Service",e);
    }
    try {
      Slog.i(TAG,"NetworkManagement Service");
      networkManagement=NetworkManagementService.create(context);
      ServiceManager.addService(Context.NETWORKMANAGEMENT_SERVICE,networkManagement);
    }
 catch (    Throwable e) {
      reportWtf("starting NetworkManagement Service",e);
    }
    try {
      Slog.i(TAG,"Text Service Manager Service");
      tsms=new TextServicesManagerService(context);
      ServiceManager.addService(Context.TEXT_SERVICES_MANAGER_SERVICE,tsms);
    }
 catch (    Throwable e) {
      reportWtf("starting Text Service Manager Service",e);
    }
    try {
      Slog.i(TAG,"NetworkStats Service");
      networkStats=new NetworkStatsService(context,networkManagement,alarm);
      ServiceManager.addService(Context.NETWORK_STATS_SERVICE,networkStats);
    }
 catch (    Throwable e) {
      reportWtf("starting NetworkStats Service",e);
    }
    try {
      Slog.i(TAG,"NetworkPolicy Service");
      networkPolicy=new NetworkPolicyManagerService(context,ActivityManagerService.self(),power,networkStats,networkManagement);
      ServiceManager.addService(Context.NETWORK_POLICY_SERVICE,networkPolicy);
    }
 catch (    Throwable e) {
      reportWtf("starting NetworkPolicy Service",e);
    }
    try {
      Slog.i(TAG,"Wi-Fi P2pService");
      wifiP2p=new WifiP2pService(context);
      ServiceManager.addService(Context.WIFI_P2P_SERVICE,wifiP2p);
    }
 catch (    Throwable e) {
      reportWtf("starting Wi-Fi P2pService",e);
    }
    try {
      Slog.i(TAG,"Wi-Fi Service");
      wifi=new WifiService(context);
      ServiceManager.addService(Context.WIFI_SERVICE,wifi);
    }
 catch (    Throwable e) {
      reportWtf("starting Wi-Fi Service",e);
    }
    try {
      Slog.i(TAG,"Connectivity Service");
      connectivity=new ConnectivityService(context,networkManagement,networkStats,networkPolicy);
      ServiceManager.addService(Context.CONNECTIVITY_SERVICE,connectivity);
      networkStats.bindConnectivityManager(connectivity);
      networkPolicy.bindConnectivityManager(connectivity);
      wifi.checkAndStartWifi();
      wifiP2p.connectivityServiceReady();
    }
 catch (    Throwable e) {
      reportWtf("starting Connectivity Service",e);
    }
    try {
      Slog.i(TAG,"Network Service Discovery Service");
      serviceDiscovery=NsdService.create(context);
      ServiceManager.addService(Context.NSD_SERVICE,serviceDiscovery);
    }
 catch (    Throwable e) {
      reportWtf("starting Service Discovery Service",e);
    }
    try {
      Slog.i(TAG,"Throttle Service");
      throttle=new ThrottleService(context);
      ServiceManager.addService(Context.THROTTLE_SERVICE,throttle);
    }
 catch (    Throwable e) {
      reportWtf("starting ThrottleService",e);
    }
    try {
      Slog.i(TAG,"UpdateLock Service");
      ServiceManager.addService(Context.UPDATE_LOCK_SERVICE,new UpdateLockService(context));
    }
 catch (    Throwable e) {
      reportWtf("starting UpdateLockService",e);
    }
    if (mountService != null) {
      mountService.waitForAsecScan();
    }
    try {
      if (accountManager != null)       accountManager.systemReady();
    }
 catch (    Throwable e) {
      reportWtf("making Account Manager Service ready",e);
    }
    try {
      if (contentService != null)       contentService.systemReady();
    }
 catch (    Throwable e) {
      reportWtf("making Content Service ready",e);
    }
    try {
      Slog.i(TAG,"Notification Manager");
      notification=new NotificationManagerService(context,statusBar,lights);
      ServiceManager.addService(Context.NOTIFICATION_SERVICE,notification);
      networkPolicy.bindNotificationManager(notification);
    }
 catch (    Throwable e) {
      reportWtf("starting Notification Manager",e);
    }
    try {
      Slog.i(TAG,"Device Storage Monitor");
      ServiceManager.addService(DeviceStorageMonitorService.SERVICE,new DeviceStorageMonitorService(context));
    }
 catch (    Throwable e) {
      reportWtf("starting DeviceStorageMonitor service",e);
    }
    try {
      Slog.i(TAG,"Location Manager");
      location=new LocationManagerService(context);
      ServiceManager.addService(Context.LOCATION_SERVICE,location);
    }
 catch (    Throwable e) {
      reportWtf("starting Location Manager",e);
    }
    try {
      Slog.i(TAG,"Country Detector");
      countryDetector=new CountryDetectorService(context);
      ServiceManager.addService(Context.COUNTRY_DETECTOR,countryDetector);
    }
 catch (    Throwable e) {
      reportWtf("starting Country Detector",e);
    }
    try {
      Slog.i(TAG,"Search Service");
      ServiceManager.addService(Context.SEARCH_SERVICE,new SearchManagerService(context));
    }
 catch (    Throwable e) {
      reportWtf("starting Search Service",e);
    }
    try {
      Slog.i(TAG,"DropBox Service");
      ServiceManager.addService(Context.DROPBOX_SERVICE,new DropBoxManagerService(context,new File("/data/system/dropbox")));
    }
 catch (    Throwable e) {
      reportWtf("starting DropBoxManagerService",e);
    }
    if (context.getResources().getBoolean(com.android.internal.R.bool.config_enableWallpaperService)) {
      try {
        Slog.i(TAG,"Wallpaper Service");
        if (!headless) {
          wallpaper=new WallpaperManagerService(context);
          ServiceManager.addService(Context.WALLPAPER_SERVICE,wallpaper);
        }
      }
 catch (      Throwable e) {
        reportWtf("starting Wallpaper Service",e);
      }
    }
    if (!"0".equals(SystemProperties.get("system_init.startaudioservice"))) {
      try {
        Slog.i(TAG,"Audio Service");
        ServiceManager.addService(Context.AUDIO_SERVICE,new AudioService(context));
      }
 catch (      Throwable e) {
        reportWtf("starting Audio Service",e);
      }
    }
    try {
      Slog.i(TAG,"Dock Observer");
      dock=new DockObserver(context,power);
    }
 catch (    Throwable e) {
      reportWtf("starting DockObserver",e);
    }
    try {
      Slog.i(TAG,"Wired Accessory Observer");
      new WiredAccessoryObserver(context);
    }
 catch (    Throwable e) {
      reportWtf("starting WiredAccessoryObserver",e);
    }
    try {
      Slog.i(TAG,"USB Service");
      usb=new UsbService(context);
      ServiceManager.addService(Context.USB_SERVICE,usb);
    }
 catch (    Throwable e) {
      reportWtf("starting UsbService",e);
    }
    try {
      Slog.i(TAG,"Serial Service");
      serial=new SerialService(context);
      ServiceManager.addService(Context.SERIAL_SERVICE,serial);
    }
 catch (    Throwable e) {
      Slog.e(TAG,"Failure starting SerialService",e);
    }
    try {
      Slog.i(TAG,"UI Mode Manager Service");
      uiMode=new UiModeManagerService(context);
    }
 catch (    Throwable e) {
      reportWtf("starting UiModeManagerService",e);
    }
    try {
      Slog.i(TAG,"Backup Service");
      ServiceManager.addService(Context.BACKUP_SERVICE,new BackupManagerService(context));
    }
 catch (    Throwable e) {
      Slog.e(TAG,"Failure starting Backup Service",e);
    }
    try {
      Slog.i(TAG,"AppWidget Service");
      appWidget=new AppWidgetService(context);
      ServiceManager.addService(Context.APPWIDGET_SERVICE,appWidget);
    }
 catch (    Throwable e) {
      reportWtf("starting AppWidget Service",e);
    }
    try {
      Slog.i(TAG,"Recognition Service");
      recognition=new RecognitionManagerService(context);
    }
 catch (    Throwable e) {
      reportWtf("starting Recognition Service",e);
    }
    try {
      Slog.i(TAG,"DiskStats Service");
      ServiceManager.addService("diskstats",new DiskStatsService(context));
    }
 catch (    Throwable e) {
      reportWtf("starting DiskStats Service",e);
    }
    try {
      Slog.i(TAG,"SamplingProfiler Service");
      ServiceManager.addService("samplingprofiler",new SamplingProfilerService(context));
    }
 catch (    Throwable e) {
      reportWtf("starting SamplingProfiler Service",e);
    }
    try {
      Slog.i(TAG,"NetworkTimeUpdateService");
      networkTimeUpdater=new NetworkTimeUpdateService(context);
    }
 catch (    Throwable e) {
      reportWtf("starting NetworkTimeUpdate service",e);
    }
    try {
      Slog.i(TAG,"CommonTimeManagementService");
      commonTimeMgmtService=new CommonTimeManagementService(context);
      ServiceManager.addService("commontime_management",commonTimeMgmtService);
    }
 catch (    Throwable e) {
      reportWtf("starting CommonTimeManagementService service",e);
    }
    try {
      Slog.i(TAG,"CertBlacklister");
      CertBlacklister blacklister=new CertBlacklister(context);
    }
 catch (    Throwable e) {
      reportWtf("starting CertBlacklister",e);
    }
    if (context.getResources().getBoolean(com.android.internal.R.bool.config_enableDreams)) {
      try {
        Slog.i(TAG,"Dreams Service");
        dreamy=new DreamManagerService(context);
        ServiceManager.addService("dreams",dreamy);
      }
 catch (      Throwable e) {
        reportWtf("starting DreamManagerService",e);
      }
    }
  }
  final boolean safeMode=wm.detectSafeMode();
  if (safeMode) {
    ActivityManagerService.self().enterSafeMode();
    Zygote.systemInSafeMode=true;
    VMRuntime.getRuntime().disableJitCompilation();
  }
 else {
    VMRuntime.getRuntime().startJitCompilation();
  }
  try {
    vibrator.systemReady();
  }
 catch (  Throwable e) {
    reportWtf("making Vibrator Service ready",e);
  }
  if (devicePolicy != null) {
    try {
      devicePolicy.systemReady();
    }
 catch (    Throwable e) {
      reportWtf("making Device Policy Service ready",e);
    }
  }
  if (notification != null) {
    try {
      notification.systemReady();
    }
 catch (    Throwable e) {
      reportWtf("making Notification Service ready",e);
    }
  }
  try {
    lockSettings.systemReady();
  }
 catch (  Throwable e) {
    reportWtf("making Lock Settings Service ready",e);
  }
  try {
    wm.systemReady();
  }
 catch (  Throwable e) {
    reportWtf("making Window Manager Service ready",e);
  }
  if (safeMode) {
    ActivityManagerService.self().showSafeModeOverlay();
  }
  Configuration config=wm.computeNewConfiguration();
  DisplayMetrics metrics=new DisplayMetrics();
  WindowManager w=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);
  w.getDefaultDisplay().getMetrics(metrics);
  context.getResources().updateConfiguration(config,metrics);
  power.systemReady();
  try {
    pm.systemReady();
  }
 catch (  Throwable e) {
    reportWtf("making Package Manager Service ready",e);
  }
  final Context contextF=context;
  final BatteryService batteryF=battery;
  final NetworkManagementService networkManagementF=networkManagement;
  final NetworkStatsService networkStatsF=networkStats;
  final NetworkPolicyManagerService networkPolicyF=networkPolicy;
  final ConnectivityService connectivityF=connectivity;
  final DockObserver dockF=dock;
  final UsbService usbF=usb;
  final ThrottleService throttleF=throttle;
  final UiModeManagerService uiModeF=uiMode;
  final AppWidgetService appWidgetF=appWidget;
  final WallpaperManagerService wallpaperF=wallpaper;
  final InputMethodManagerService immF=imm;
  final RecognitionManagerService recognitionF=recognition;
  final LocationManagerService locationF=location;
  final CountryDetectorService countryDetectorF=countryDetector;
  final NetworkTimeUpdateService networkTimeUpdaterF=networkTimeUpdater;
  final CommonTimeManagementService commonTimeMgmtServiceF=commonTimeMgmtService;
  final TextServicesManagerService textServiceManagerServiceF=tsms;
  final StatusBarManagerService statusBarF=statusBar;
  final DreamManagerService dreamyF=dreamy;
  final InputManagerService inputManagerF=inputManager;
  ActivityManagerService.self().systemReady(new Runnable(){
    public void run(){
      Slog.i(TAG,"Making services ready");
      if (!headless)       startSystemUi(contextF);
      try {
        if (batteryF != null)         batteryF.systemReady();
      }
 catch (      Throwable e) {
        reportWtf("making Battery Service ready",e);
      }
      try {
        if (networkManagementF != null)         networkManagementF.systemReady();
      }
 catch (      Throwable e) {
        reportWtf("making Network Managment Service ready",e);
      }
      try {
        if (networkStatsF != null)         networkStatsF.systemReady();
      }
 catch (      Throwable e) {
        reportWtf("making Network Stats Service ready",e);
      }
      try {
        if (networkPolicyF != null)         networkPolicyF.systemReady();
      }
 catch (      Throwable e) {
        reportWtf("making Network Policy Service ready",e);
      }
      try {
        if (connectivityF != null)         connectivityF.systemReady();
      }
 catch (      Throwable e) {
        reportWtf("making Connectivity Service ready",e);
      }
      try {
        if (dockF != null)         dockF.systemReady();
      }
 catch (      Throwable e) {
        reportWtf("making Dock Service ready",e);
      }
      try {
        if (usbF != null)         usbF.systemReady();
      }
 catch (      Throwable e) {
        reportWtf("making USB Service ready",e);
      }
      try {
        if (uiModeF != null)         uiModeF.systemReady();
      }
 catch (      Throwable e) {
        reportWtf("making UI Mode Service ready",e);
      }
      try {
        if (recognitionF != null)         recognitionF.systemReady();
      }
 catch (      Throwable e) {
        reportWtf("making Recognition Service ready",e);
      }
      Watchdog.getInstance().start();
      try {
        if (appWidgetF != null)         appWidgetF.systemReady(safeMode);
      }
 catch (      Throwable e) {
        reportWtf("making App Widget Service ready",e);
      }
      try {
        if (wallpaperF != null)         wallpaperF.systemReady();
      }
 catch (      Throwable e) {
        reportWtf("making Wallpaper Service ready",e);
      }
      try {
        if (immF != null)         immF.systemReady(statusBarF);
      }
 catch (      Throwable e) {
        reportWtf("making Input Method Service ready",e);
      }
      try {
        if (locationF != null)         locationF.systemReady();
      }
 catch (      Throwable e) {
        reportWtf("making Location Service ready",e);
      }
      try {
        if (countryDetectorF != null)         countryDetectorF.systemReady();
      }
 catch (      Throwable e) {
        reportWtf("making Country Detector Service ready",e);
      }
      try {
        if (throttleF != null)         throttleF.systemReady();
      }
 catch (      Throwable e) {
        reportWtf("making Throttle Service ready",e);
      }
      try {
        if (networkTimeUpdaterF != null)         networkTimeUpdaterF.systemReady();
      }
 catch (      Throwable e) {
        reportWtf("making Network Time Service ready",e);
      }
      try {
        if (commonTimeMgmtServiceF != null)         commonTimeMgmtServiceF.systemReady();
      }
 catch (      Throwable e) {
        reportWtf("making Common time management service ready",e);
      }
      try {
        if (textServiceManagerServiceF != null)         textServiceManagerServiceF.systemReady();
      }
 catch (      Throwable e) {
        reportWtf("making Text Services Manager Service ready",e);
      }
      try {
        if (dreamyF != null)         dreamyF.systemReady();
      }
 catch (      Throwable e) {
        reportWtf("making DreamManagerService ready",e);
      }
      try {
        if (inputManagerF != null)         inputManagerF.systemReady();
      }
 catch (      Throwable e) {
        reportWtf("making InputManagerService ready",e);
      }
    }
  }
);
  if (StrictMode.conditionallyEnableDebugLogging()) {
    Slog.i(TAG,"Enabled StrictMode for system server main thread.");
  }
  Looper.loop();
  Slog.d(TAG,"System ServerThread is exiting!");
}
