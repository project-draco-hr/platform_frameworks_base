{
  final Context context=mSystemContext;
  AccountManagerService accountManager=null;
  ContentService contentService=null;
  LightsManager lights=null;
  BatteryService battery=null;
  VibratorService vibrator=null;
  IAlarmManager alarm=null;
  MountService mountService=null;
  NetworkManagementService networkManagement=null;
  NetworkStatsService networkStats=null;
  NetworkPolicyManagerService networkPolicy=null;
  ConnectivityService connectivity=null;
  WifiP2pService wifiP2p=null;
  WifiService wifi=null;
  NsdService serviceDiscovery=null;
  IPackageManager pm=null;
  WindowManagerService wm=null;
  BluetoothManagerService bluetooth=null;
  DockObserver dock=null;
  UsbService usb=null;
  SerialService serial=null;
  RecognitionManagerService recognition=null;
  NetworkTimeUpdateService networkTimeUpdater=null;
  CommonTimeManagementService commonTimeMgmtService=null;
  InputManagerService inputManager=null;
  TelephonyRegistry telephonyRegistry=null;
  ConsumerIrService consumerIr=null;
  boolean onlyCore=false;
  boolean firstBoot=false;
  boolean disableStorage=SystemProperties.getBoolean("config.disable_storage",false);
  boolean disableMedia=SystemProperties.getBoolean("config.disable_media",false);
  boolean disableBluetooth=SystemProperties.getBoolean("config.disable_bluetooth",false);
  boolean disableTelephony=SystemProperties.getBoolean("config.disable_telephony",false);
  boolean disableLocation=SystemProperties.getBoolean("config.disable_location",false);
  boolean disableSystemUI=SystemProperties.getBoolean("config.disable_systemui",false);
  boolean disableNonCoreServices=SystemProperties.getBoolean("config.disable_noncore",false);
  boolean disableNetwork=SystemProperties.getBoolean("config.disable_network",false);
  try {
    Slog.i(TAG,"Telephony Registry");
    telephonyRegistry=new TelephonyRegistry(context);
    ServiceManager.addService("telephony.registry",telephonyRegistry);
    Slog.i(TAG,"Scheduling Policy");
    ServiceManager.addService("scheduling_policy",new SchedulingPolicyService());
    AttributeCache.init(context);
    mSystemServiceManager.startBootPhase(SystemService.PHASE_WAIT_FOR_DEFAULT_DISPLAY);
    Slog.i(TAG,"Package Manager");
    String cryptState=SystemProperties.get("vold.decrypt");
    if (ENCRYPTING_STATE.equals(cryptState)) {
      Slog.w(TAG,"Detected encryption in progress - only parsing core apps");
      onlyCore=true;
    }
 else     if (ENCRYPTED_STATE.equals(cryptState)) {
      Slog.w(TAG,"Device encrypted - only parsing core apps");
      onlyCore=true;
    }
    pm=PackageManagerService.main(context,mInstaller,mFactoryTestMode != FactoryTest.FACTORY_TEST_OFF,onlyCore);
    try {
      firstBoot=pm.isFirstBoot();
    }
 catch (    RemoteException e) {
    }
    mActivityManagerService.setSystemProcess();
    Slog.i(TAG,"Entropy Mixer");
    ServiceManager.addService("entropy",new EntropyMixer(context));
    Slog.i(TAG,"User Service");
    ServiceManager.addService(Context.USER_SERVICE,UserManagerService.getInstance());
    mContentResolver=context.getContentResolver();
    try {
      Slog.i(TAG,"Account Manager");
      accountManager=new AccountManagerService(context);
      ServiceManager.addService(Context.ACCOUNT_SERVICE,accountManager);
    }
 catch (    Throwable e) {
      Slog.e(TAG,"Failure starting Account Manager",e);
    }
    Slog.i(TAG,"Content Manager");
    contentService=ContentService.main(context,mFactoryTestMode == FactoryTest.FACTORY_TEST_LOW_LEVEL);
    Slog.i(TAG,"System Content Providers");
    mActivityManagerService.installSystemProviders();
    mSystemServiceManager.startService(LightsService.class);
    lights=LocalServices.getService(LightsManager.class);
    Slog.i(TAG,"Battery Service");
    battery=new BatteryService(context,lights);
    ServiceManager.addService("battery",battery);
    Slog.i(TAG,"Vibrator Service");
    vibrator=new VibratorService(context);
    ServiceManager.addService("vibrator",vibrator);
    mPowerManagerService.init(lights,battery,BatteryStatsService.getService(),mActivityManagerService.getAppOpsService());
    Slog.i(TAG,"Consumer IR Service");
    consumerIr=new ConsumerIrService(context);
    ServiceManager.addService(Context.CONSUMER_IR_SERVICE,consumerIr);
    mSystemServiceManager.startService(AlarmManagerService.class);
    alarm=IAlarmManager.Stub.asInterface(ServiceManager.getService(Context.ALARM_SERVICE));
    Slog.i(TAG,"Init Watchdog");
    final Watchdog watchdog=Watchdog.getInstance();
    watchdog.init(context,mActivityManagerService);
    Slog.i(TAG,"Input Manager");
    inputManager=new InputManagerService(context);
    Slog.i(TAG,"Window Manager");
    wm=WindowManagerService.main(context,inputManager,mFactoryTestMode != FactoryTest.FACTORY_TEST_LOW_LEVEL,!firstBoot,onlyCore);
    ServiceManager.addService(Context.WINDOW_SERVICE,wm);
    ServiceManager.addService(Context.INPUT_SERVICE,inputManager);
    mActivityManagerService.setWindowManager(wm);
    inputManager.setWindowManagerCallbacks(wm.getInputMonitor());
    inputManager.start();
    mDisplayManagerService.windowManagerAndInputReady();
    if (SystemProperties.get("ro.kernel.qemu").equals("1")) {
      Slog.i(TAG,"No Bluetooh Service (emulator)");
    }
 else     if (mFactoryTestMode == FactoryTest.FACTORY_TEST_LOW_LEVEL) {
      Slog.i(TAG,"No Bluetooth Service (factory test)");
    }
 else     if (!context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_BLUETOOTH)) {
      Slog.i(TAG,"No Bluetooth Service (Bluetooth Hardware Not Present)");
    }
 else     if (disableBluetooth) {
      Slog.i(TAG,"Bluetooth Service disabled by config");
    }
 else {
      Slog.i(TAG,"Bluetooth Manager Service");
      bluetooth=new BluetoothManagerService(context);
      ServiceManager.addService(BluetoothAdapter.BLUETOOTH_MANAGER_SERVICE,bluetooth);
    }
  }
 catch (  RuntimeException e) {
    Slog.e("System","******************************************");
    Slog.e("System","************ Failure starting core service",e);
  }
  StatusBarManagerService statusBar=null;
  INotificationManager notification=null;
  InputMethodManagerService imm=null;
  WallpaperManagerService wallpaper=null;
  LocationManagerService location=null;
  CountryDetectorService countryDetector=null;
  TextServicesManagerService tsms=null;
  LockSettingsService lockSettings=null;
  AssetAtlasService atlas=null;
  MediaRouterService mediaRouter=null;
  if (mFactoryTestMode != FactoryTest.FACTORY_TEST_LOW_LEVEL) {
    if (true) {
      try {
        Slog.i(TAG,"Input Method Service");
        imm=new InputMethodManagerService(context,wm);
        ServiceManager.addService(Context.INPUT_METHOD_SERVICE,imm);
      }
 catch (      Throwable e) {
        reportWtf("starting Input Manager Service",e);
      }
      try {
        Slog.i(TAG,"Accessibility Manager");
        ServiceManager.addService(Context.ACCESSIBILITY_SERVICE,(IBinder)getClass().getClassLoader().loadClass("com.android.server.accessibility.AccessibilityManagerService").getConstructor(Context.class).newInstance(context));
      }
 catch (      Throwable e) {
        reportWtf("starting Accessibility Manager",e);
      }
    }
  }
  try {
    wm.displayReady();
  }
 catch (  Throwable e) {
    reportWtf("making display ready",e);
  }
  try {
    pm.performBootDexOpt();
  }
 catch (  Throwable e) {
    reportWtf("performing boot dexopt",e);
  }
  try {
    ActivityManagerNative.getDefault().showBootMessage(context.getResources().getText(com.android.internal.R.string.android_upgrading_starting_apps),false);
  }
 catch (  RemoteException e) {
  }
  if (mFactoryTestMode != FactoryTest.FACTORY_TEST_LOW_LEVEL) {
    if (!disableStorage && !"0".equals(SystemProperties.get("system_init.startmountservice"))) {
      try {
        Slog.i(TAG,"Mount Service");
        mountService=new MountService(context);
        ServiceManager.addService("mount",mountService);
      }
 catch (      Throwable e) {
        reportWtf("starting Mount Service",e);
      }
    }
    if (!disableNonCoreServices) {
      try {
        Slog.i(TAG,"LockSettingsService");
        lockSettings=new LockSettingsService(context);
        ServiceManager.addService("lock_settings",lockSettings);
      }
 catch (      Throwable e) {
        reportWtf("starting LockSettingsService service",e);
      }
      try {
        if (pm.hasSystemFeature(PackageManager.FEATURE_DEVICE_ADMIN)) {
          mSystemServiceManager.startService(DEVICE_POLICY_MANAGER_SERVICE_CLASS);
        }
      }
 catch (      Throwable e) {
        reportWtf("starting DevicePolicyService",e);
      }
    }
    if (!disableSystemUI) {
      try {
        Slog.i(TAG,"Status Bar");
        statusBar=new StatusBarManagerService(context,wm);
        ServiceManager.addService(Context.STATUS_BAR_SERVICE,statusBar);
      }
 catch (      Throwable e) {
        reportWtf("starting StatusBarManagerService",e);
      }
    }
    if (!disableNonCoreServices) {
      try {
        Slog.i(TAG,"Clipboard Service");
        ServiceManager.addService(Context.CLIPBOARD_SERVICE,new ClipboardService(context));
      }
 catch (      Throwable e) {
        reportWtf("starting Clipboard Service",e);
      }
    }
    if (!disableNetwork) {
      try {
        Slog.i(TAG,"NetworkManagement Service");
        networkManagement=NetworkManagementService.create(context);
        ServiceManager.addService(Context.NETWORKMANAGEMENT_SERVICE,networkManagement);
      }
 catch (      Throwable e) {
        reportWtf("starting NetworkManagement Service",e);
      }
    }
    if (!disableNonCoreServices) {
      try {
        Slog.i(TAG,"Text Service Manager Service");
        tsms=new TextServicesManagerService(context);
        ServiceManager.addService(Context.TEXT_SERVICES_MANAGER_SERVICE,tsms);
      }
 catch (      Throwable e) {
        reportWtf("starting Text Service Manager Service",e);
      }
    }
    if (!disableNetwork) {
      try {
        Slog.i(TAG,"NetworkStats Service");
        networkStats=new NetworkStatsService(context,networkManagement,alarm);
        ServiceManager.addService(Context.NETWORK_STATS_SERVICE,networkStats);
      }
 catch (      Throwable e) {
        reportWtf("starting NetworkStats Service",e);
      }
      try {
        Slog.i(TAG,"NetworkPolicy Service");
        networkPolicy=new NetworkPolicyManagerService(context,mActivityManagerService,(IPowerManager)ServiceManager.getService(Context.POWER_SERVICE),networkStats,networkManagement);
        ServiceManager.addService(Context.NETWORK_POLICY_SERVICE,networkPolicy);
      }
 catch (      Throwable e) {
        reportWtf("starting NetworkPolicy Service",e);
      }
      try {
        Slog.i(TAG,"Wi-Fi P2pService");
        wifiP2p=new WifiP2pService(context);
        ServiceManager.addService(Context.WIFI_P2P_SERVICE,wifiP2p);
      }
 catch (      Throwable e) {
        reportWtf("starting Wi-Fi P2pService",e);
      }
      try {
        Slog.i(TAG,"Wi-Fi Service");
        wifi=new WifiService(context);
        ServiceManager.addService(Context.WIFI_SERVICE,wifi);
      }
 catch (      Throwable e) {
        reportWtf("starting Wi-Fi Service",e);
      }
      try {
        Slog.i(TAG,"Connectivity Service");
        connectivity=new ConnectivityService(context,networkManagement,networkStats,networkPolicy);
        ServiceManager.addService(Context.CONNECTIVITY_SERVICE,connectivity);
        networkStats.bindConnectivityManager(connectivity);
        networkPolicy.bindConnectivityManager(connectivity);
        wifiP2p.connectivityServiceReady();
        wifi.checkAndStartWifi();
      }
 catch (      Throwable e) {
        reportWtf("starting Connectivity Service",e);
      }
      try {
        Slog.i(TAG,"Network Service Discovery Service");
        serviceDiscovery=NsdService.create(context);
        ServiceManager.addService(Context.NSD_SERVICE,serviceDiscovery);
      }
 catch (      Throwable e) {
        reportWtf("starting Service Discovery Service",e);
      }
    }
    if (!disableNonCoreServices) {
      try {
        Slog.i(TAG,"UpdateLock Service");
        ServiceManager.addService(Context.UPDATE_LOCK_SERVICE,new UpdateLockService(context));
      }
 catch (      Throwable e) {
        reportWtf("starting UpdateLockService",e);
      }
    }
    if (mountService != null && !onlyCore) {
      mountService.waitForAsecScan();
    }
    try {
      if (accountManager != null)       accountManager.systemReady();
    }
 catch (    Throwable e) {
      reportWtf("making Account Manager Service ready",e);
    }
    try {
      if (contentService != null)       contentService.systemReady();
    }
 catch (    Throwable e) {
      reportWtf("making Content Service ready",e);
    }
    mSystemServiceManager.startService(NotificationManagerService.class);
    notification=INotificationManager.Stub.asInterface(ServiceManager.getService(Context.NOTIFICATION_SERVICE));
    networkPolicy.bindNotificationManager(notification);
    mSystemServiceManager.startService(DeviceStorageMonitorService.class);
    if (!disableLocation) {
      try {
        Slog.i(TAG,"Location Manager");
        location=new LocationManagerService(context);
        ServiceManager.addService(Context.LOCATION_SERVICE,location);
      }
 catch (      Throwable e) {
        reportWtf("starting Location Manager",e);
      }
      try {
        Slog.i(TAG,"Country Detector");
        countryDetector=new CountryDetectorService(context);
        ServiceManager.addService(Context.COUNTRY_DETECTOR,countryDetector);
      }
 catch (      Throwable e) {
        reportWtf("starting Country Detector",e);
      }
    }
    if (!disableNonCoreServices) {
      try {
        Slog.i(TAG,"Search Service");
        ServiceManager.addService(Context.SEARCH_SERVICE,new SearchManagerService(context));
      }
 catch (      Throwable e) {
        reportWtf("starting Search Service",e);
      }
    }
    try {
      Slog.i(TAG,"DropBox Service");
      ServiceManager.addService(Context.DROPBOX_SERVICE,new DropBoxManagerService(context,new File("/data/system/dropbox")));
    }
 catch (    Throwable e) {
      reportWtf("starting DropBoxManagerService",e);
    }
    if (!disableNonCoreServices && context.getResources().getBoolean(R.bool.config_enableWallpaperService)) {
      try {
        Slog.i(TAG,"Wallpaper Service");
        wallpaper=new WallpaperManagerService(context);
        ServiceManager.addService(Context.WALLPAPER_SERVICE,wallpaper);
      }
 catch (      Throwable e) {
        reportWtf("starting Wallpaper Service",e);
      }
    }
    if (!disableMedia && !"0".equals(SystemProperties.get("system_init.startaudioservice"))) {
      try {
        Slog.i(TAG,"Audio Service");
        ServiceManager.addService(Context.AUDIO_SERVICE,new AudioService(context));
      }
 catch (      Throwable e) {
        reportWtf("starting Audio Service",e);
      }
    }
    if (!disableNonCoreServices) {
      try {
        Slog.i(TAG,"Dock Observer");
        dock=new DockObserver(context);
      }
 catch (      Throwable e) {
        reportWtf("starting DockObserver",e);
      }
    }
    if (!disableMedia) {
      try {
        Slog.i(TAG,"Wired Accessory Manager");
        inputManager.setWiredAccessoryCallbacks(new WiredAccessoryManager(context,inputManager));
      }
 catch (      Throwable e) {
        reportWtf("starting WiredAccessoryManager",e);
      }
    }
    if (!disableNonCoreServices) {
      try {
        if (pm.hasSystemFeature(PackageManager.FEATURE_USB_HOST) || pm.hasSystemFeature(PackageManager.FEATURE_USB_ACCESSORY)) {
          mSystemServiceManager.startService(USB_SERVICE_CLASS);
        }
      }
 catch (      Throwable e) {
        reportWtf("starting UsbService",e);
      }
      try {
        Slog.i(TAG,"Serial Service");
        serial=new SerialService(context);
        ServiceManager.addService(Context.SERIAL_SERVICE,serial);
      }
 catch (      Throwable e) {
        Slog.e(TAG,"Failure starting SerialService",e);
      }
    }
    mSystemServiceManager.startService(TwilightService.class);
    mSystemServiceManager.startService(UiModeManagerService.class);
    if (!disableNonCoreServices) {
      try {
        if (pm.hasSystemFeature(PackageManager.FEATURE_BACKUP)) {
          mSystemServiceManager.startService(BACKUP_MANAGER_SERVICE_CLASS);
        }
      }
 catch (      Throwable e) {
        Slog.e(TAG,"Failure starting Backup Service",e);
      }
      try {
        if (pm.hasSystemFeature(PackageManager.FEATURE_APP_WIDGETS)) {
          mSystemServiceManager.startService(APPWIDGET_SERVICE_CLASS);
        }
      }
 catch (      Throwable e) {
        reportWtf("starting AppWidget Service",e);
      }
      try {
        Slog.i(TAG,"Recognition Service");
        recognition=new RecognitionManagerService(context);
      }
 catch (      Throwable e) {
        reportWtf("starting Recognition Service",e);
      }
    }
    try {
      Slog.i(TAG,"DiskStats Service");
      ServiceManager.addService("diskstats",new DiskStatsService(context));
    }
 catch (    Throwable e) {
      reportWtf("starting DiskStats Service",e);
    }
    try {
      Slog.i(TAG,"SamplingProfiler Service");
      ServiceManager.addService("samplingprofiler",new SamplingProfilerService(context));
    }
 catch (    Throwable e) {
      reportWtf("starting SamplingProfiler Service",e);
    }
    if (!disableNetwork) {
      try {
        Slog.i(TAG,"NetworkTimeUpdateService");
        networkTimeUpdater=new NetworkTimeUpdateService(context);
      }
 catch (      Throwable e) {
        reportWtf("starting NetworkTimeUpdate service",e);
      }
    }
    if (!disableMedia) {
      try {
        Slog.i(TAG,"CommonTimeManagementService");
        commonTimeMgmtService=new CommonTimeManagementService(context);
        ServiceManager.addService("commontime_management",commonTimeMgmtService);
      }
 catch (      Throwable e) {
        reportWtf("starting CommonTimeManagementService service",e);
      }
    }
    if (!disableNetwork) {
      try {
        Slog.i(TAG,"CertBlacklister");
        CertBlacklister blacklister=new CertBlacklister(context);
      }
 catch (      Throwable e) {
        reportWtf("starting CertBlacklister",e);
      }
    }
    if (!disableNonCoreServices && context.getResources().getBoolean(R.bool.config_dreamsSupported)) {
      mSystemServiceManager.startService(DreamManagerService.class);
    }
    if (!disableNonCoreServices) {
      try {
        Slog.i(TAG,"Assets Atlas Service");
        atlas=new AssetAtlasService(context);
        ServiceManager.addService(AssetAtlasService.ASSET_ATLAS_SERVICE,atlas);
      }
 catch (      Throwable e) {
        reportWtf("starting AssetAtlasService",e);
      }
    }
    try {
      Slog.i(TAG,"IdleMaintenanceService");
      new IdleMaintenanceService(context,battery);
    }
 catch (    Throwable e) {
      reportWtf("starting IdleMaintenanceService",e);
    }
    try {
      if (pm.hasSystemFeature(PackageManager.FEATURE_PRINTING)) {
        mSystemServiceManager.startService(PRINT_MANAGER_SERVICE_CLASS);
      }
    }
 catch (    Throwable e) {
      reportWtf("starting Print Service",e);
    }
    if (!disableNonCoreServices) {
      try {
        Slog.i(TAG,"Media Router Service");
        mediaRouter=new MediaRouterService(context);
        ServiceManager.addService(Context.MEDIA_ROUTER_SERVICE,mediaRouter);
      }
 catch (      Throwable e) {
        reportWtf("starting MediaRouterService",e);
      }
    }
  }
  final boolean safeMode=wm.detectSafeMode();
  if (safeMode) {
    mActivityManagerService.enterSafeMode();
    Zygote.systemInSafeMode=true;
    VMRuntime.getRuntime().disableJitCompilation();
  }
 else {
    VMRuntime.getRuntime().startJitCompilation();
  }
  try {
    vibrator.systemReady();
  }
 catch (  Throwable e) {
    reportWtf("making Vibrator Service ready",e);
  }
  if (lockSettings != null) {
    try {
      lockSettings.systemReady();
    }
 catch (    Throwable e) {
      reportWtf("making Lock Settings Service ready",e);
    }
  }
  mSystemServiceManager.startBootPhase(SystemService.PHASE_LOCK_SETTINGS_READY);
  mSystemServiceManager.startBootPhase(SystemService.PHASE_SYSTEM_SERVICES_READY);
  try {
    wm.systemReady();
  }
 catch (  Throwable e) {
    reportWtf("making Window Manager Service ready",e);
  }
  if (safeMode) {
    mActivityManagerService.showSafeModeOverlay();
  }
  Configuration config=wm.computeNewConfiguration();
  DisplayMetrics metrics=new DisplayMetrics();
  WindowManager w=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);
  w.getDefaultDisplay().getMetrics(metrics);
  context.getResources().updateConfiguration(config,metrics);
  try {
    mPowerManagerService.systemReady();
  }
 catch (  Throwable e) {
    reportWtf("making Power Manager Service ready",e);
  }
  try {
    pm.systemReady();
  }
 catch (  Throwable e) {
    reportWtf("making Package Manager Service ready",e);
  }
  try {
    mDisplayManagerService.systemReady(safeMode,onlyCore);
  }
 catch (  Throwable e) {
    reportWtf("making Display Manager Service ready",e);
  }
  final MountService mountServiceF=mountService;
  final BatteryService batteryF=battery;
  final NetworkManagementService networkManagementF=networkManagement;
  final NetworkStatsService networkStatsF=networkStats;
  final NetworkPolicyManagerService networkPolicyF=networkPolicy;
  final ConnectivityService connectivityF=connectivity;
  final DockObserver dockF=dock;
  final WallpaperManagerService wallpaperF=wallpaper;
  final InputMethodManagerService immF=imm;
  final RecognitionManagerService recognitionF=recognition;
  final LocationManagerService locationF=location;
  final CountryDetectorService countryDetectorF=countryDetector;
  final NetworkTimeUpdateService networkTimeUpdaterF=networkTimeUpdater;
  final CommonTimeManagementService commonTimeMgmtServiceF=commonTimeMgmtService;
  final TextServicesManagerService textServiceManagerServiceF=tsms;
  final StatusBarManagerService statusBarF=statusBar;
  final AssetAtlasService atlasF=atlas;
  final InputManagerService inputManagerF=inputManager;
  final TelephonyRegistry telephonyRegistryF=telephonyRegistry;
  final MediaRouterService mediaRouterF=mediaRouter;
  mActivityManagerService.systemReady(new Runnable(){
    @Override public void run(){
      Slog.i(TAG,"Making services ready");
      mSystemServiceManager.startBootPhase(SystemService.PHASE_ACTIVITY_MANAGER_READY);
      try {
        mActivityManagerService.startObservingNativeCrashes();
      }
 catch (      Throwable e) {
        reportWtf("observing native crashes",e);
      }
      try {
        startSystemUi(context);
      }
 catch (      Throwable e) {
        reportWtf("starting System UI",e);
      }
      try {
        if (mountServiceF != null)         mountServiceF.systemReady();
      }
 catch (      Throwable e) {
        reportWtf("making Mount Service ready",e);
      }
      try {
        if (batteryF != null)         batteryF.systemReady();
      }
 catch (      Throwable e) {
        reportWtf("making Battery Service ready",e);
      }
      try {
        if (networkManagementF != null)         networkManagementF.systemReady();
      }
 catch (      Throwable e) {
        reportWtf("making Network Managment Service ready",e);
      }
      try {
        if (networkStatsF != null)         networkStatsF.systemReady();
      }
 catch (      Throwable e) {
        reportWtf("making Network Stats Service ready",e);
      }
      try {
        if (networkPolicyF != null)         networkPolicyF.systemReady();
      }
 catch (      Throwable e) {
        reportWtf("making Network Policy Service ready",e);
      }
      try {
        if (connectivityF != null)         connectivityF.systemReady();
      }
 catch (      Throwable e) {
        reportWtf("making Connectivity Service ready",e);
      }
      try {
        if (dockF != null)         dockF.systemReady();
      }
 catch (      Throwable e) {
        reportWtf("making Dock Service ready",e);
      }
      try {
        if (recognitionF != null)         recognitionF.systemReady();
      }
 catch (      Throwable e) {
        reportWtf("making Recognition Service ready",e);
      }
      Watchdog.getInstance().start();
      mSystemServiceManager.startBootPhase(SystemService.PHASE_THIRD_PARTY_APPS_CAN_START);
      try {
        if (wallpaperF != null)         wallpaperF.systemRunning();
      }
 catch (      Throwable e) {
        reportWtf("Notifying WallpaperService running",e);
      }
      try {
        if (immF != null)         immF.systemRunning(statusBarF);
      }
 catch (      Throwable e) {
        reportWtf("Notifying InputMethodService running",e);
      }
      try {
        if (locationF != null)         locationF.systemRunning();
      }
 catch (      Throwable e) {
        reportWtf("Notifying Location Service running",e);
      }
      try {
        if (countryDetectorF != null)         countryDetectorF.systemRunning();
      }
 catch (      Throwable e) {
        reportWtf("Notifying CountryDetectorService running",e);
      }
      try {
        if (networkTimeUpdaterF != null)         networkTimeUpdaterF.systemRunning();
      }
 catch (      Throwable e) {
        reportWtf("Notifying NetworkTimeService running",e);
      }
      try {
        if (commonTimeMgmtServiceF != null) {
          commonTimeMgmtServiceF.systemRunning();
        }
      }
 catch (      Throwable e) {
        reportWtf("Notifying CommonTimeManagementService running",e);
      }
      try {
        if (textServiceManagerServiceF != null)         textServiceManagerServiceF.systemRunning();
      }
 catch (      Throwable e) {
        reportWtf("Notifying TextServicesManagerService running",e);
      }
      try {
        if (atlasF != null)         atlasF.systemRunning();
      }
 catch (      Throwable e) {
        reportWtf("Notifying AssetAtlasService running",e);
      }
      try {
        if (inputManagerF != null)         inputManagerF.systemRunning();
      }
 catch (      Throwable e) {
        reportWtf("Notifying InputManagerService running",e);
      }
      try {
        if (telephonyRegistryF != null)         telephonyRegistryF.systemRunning();
      }
 catch (      Throwable e) {
        reportWtf("Notifying TelephonyRegistry running",e);
      }
      try {
        if (mediaRouterF != null)         mediaRouterF.systemRunning();
      }
 catch (      Throwable e) {
        reportWtf("Notifying MediaRouterService running",e);
      }
      mSystemServiceManager.startBootPhase(SystemService.PHASE_BOOT_COMPLETE);
    }
  }
);
}
