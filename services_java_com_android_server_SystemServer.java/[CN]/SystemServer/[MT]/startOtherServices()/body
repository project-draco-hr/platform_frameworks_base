{
  final Context context=mSystemContext;
  AccountManagerService accountManager=null;
  ContentService contentService=null;
  VibratorService vibrator=null;
  IAlarmManager alarm=null;
  IMountService mountService=null;
  NetworkManagementService networkManagement=null;
  NetworkStatsService networkStats=null;
  NetworkPolicyManagerService networkPolicy=null;
  ConnectivityService connectivity=null;
  NetworkScoreService networkScore=null;
  NsdService serviceDiscovery=null;
  WindowManagerService wm=null;
  SerialService serial=null;
  NetworkTimeUpdateService networkTimeUpdater=null;
  CommonTimeManagementService commonTimeMgmtService=null;
  InputManagerService inputManager=null;
  TelephonyRegistry telephonyRegistry=null;
  ConsumerIrService consumerIr=null;
  MmsServiceBroker mmsService=null;
  EntropyMixer entropyMixer=null;
  VrManagerService vrManagerService=null;
  HardwarePropertiesManagerService hardwarePropertiesService=null;
  boolean disableStorage=SystemProperties.getBoolean("config.disable_storage",false);
  boolean disableBluetooth=SystemProperties.getBoolean("config.disable_bluetooth",false);
  boolean disableLocation=SystemProperties.getBoolean("config.disable_location",false);
  boolean disableSystemUI=SystemProperties.getBoolean("config.disable_systemui",false);
  boolean disableNonCoreServices=SystemProperties.getBoolean("config.disable_noncore",false);
  boolean disableNetwork=SystemProperties.getBoolean("config.disable_network",false);
  boolean disableNetworkTime=SystemProperties.getBoolean("config.disable_networktime",false);
  boolean disableRtt=SystemProperties.getBoolean("config.disable_rtt",false);
  boolean disableMediaProjection=SystemProperties.getBoolean("config.disable_mediaproj",false);
  boolean disableSerial=SystemProperties.getBoolean("config.disable_serial",false);
  boolean disableSearchManager=SystemProperties.getBoolean("config.disable_searchmanager",false);
  boolean disableTrustManager=SystemProperties.getBoolean("config.disable_trustmanager",false);
  boolean disableTextServices=SystemProperties.getBoolean("config.disable_textservices",false);
  boolean disableSamplingProfiler=SystemProperties.getBoolean("config.disable_samplingprof",false);
  boolean isEmulator=SystemProperties.get("ro.kernel.qemu").equals("1");
  try {
    Slog.i(TAG,"Reading configuration...");
    SystemConfig.getInstance();
    traceBeginAndSlog("StartSchedulingPolicyService");
    ServiceManager.addService("scheduling_policy",new SchedulingPolicyService());
    Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
    mSystemServiceManager.startService(TelecomLoaderService.class);
    traceBeginAndSlog("StartTelephonyRegistry");
    telephonyRegistry=new TelephonyRegistry(context);
    ServiceManager.addService("telephony.registry",telephonyRegistry);
    Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
    traceBeginAndSlog("StartEntropyMixer");
    entropyMixer=new EntropyMixer(context);
    Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
    mContentResolver=context.getContentResolver();
    Slog.i(TAG,"Camera Service");
    mSystemServiceManager.startService(CameraService.class);
    traceBeginAndSlog("StartAccountManagerService");
    try {
      accountManager=new AccountManagerService(context);
      ServiceManager.addService(Context.ACCOUNT_SERVICE,accountManager);
    }
 catch (    Throwable e) {
      Slog.e(TAG,"Failure starting Account Manager",e);
    }
    Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
    traceBeginAndSlog("StartContentService");
    contentService=ContentService.main(context,mFactoryTestMode == FactoryTest.FACTORY_TEST_LOW_LEVEL);
    Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
    traceBeginAndSlog("InstallSystemProviders");
    mActivityManagerService.installSystemProviders();
    Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
    traceBeginAndSlog("StartVibratorService");
    vibrator=new VibratorService(context);
    ServiceManager.addService("vibrator",vibrator);
    Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
    traceBeginAndSlog("StartConsumerIrService");
    consumerIr=new ConsumerIrService(context);
    ServiceManager.addService(Context.CONSUMER_IR_SERVICE,consumerIr);
    Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
    mSystemServiceManager.startService(AlarmManagerService.class);
    alarm=IAlarmManager.Stub.asInterface(ServiceManager.getService(Context.ALARM_SERVICE));
    traceBeginAndSlog("InitWatchdog");
    final Watchdog watchdog=Watchdog.getInstance();
    watchdog.init(context,mActivityManagerService);
    Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
    traceBeginAndSlog("StartInputManagerService");
    inputManager=new InputManagerService(context);
    Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
    traceBeginAndSlog("StartWindowManagerService");
    wm=WindowManagerService.main(context,inputManager,mFactoryTestMode != FactoryTest.FACTORY_TEST_LOW_LEVEL,!mFirstBoot,mOnlyCore);
    ServiceManager.addService(Context.WINDOW_SERVICE,wm);
    ServiceManager.addService(Context.INPUT_SERVICE,inputManager);
    Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
    traceBeginAndSlog("StartVrManagerService");
    mSystemServiceManager.startService(VrManagerService.class);
    Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
    mActivityManagerService.setWindowManager(wm);
    inputManager.setWindowManagerCallbacks(wm.getInputMonitor());
    inputManager.start();
    mDisplayManagerService.windowManagerAndInputReady();
    if (isEmulator) {
      Slog.i(TAG,"No Bluetooth Service (emulator)");
    }
 else     if (mFactoryTestMode == FactoryTest.FACTORY_TEST_LOW_LEVEL) {
      Slog.i(TAG,"No Bluetooth Service (factory test)");
    }
 else     if (!context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_BLUETOOTH)) {
      Slog.i(TAG,"No Bluetooth Service (Bluetooth Hardware Not Present)");
    }
 else     if (disableBluetooth) {
      Slog.i(TAG,"Bluetooth Service disabled by config");
    }
 else {
      mSystemServiceManager.startService(BluetoothService.class);
    }
    traceBeginAndSlog("ConnectivityMetricsLoggerService");
    mSystemServiceManager.startService(MetricsLoggerService.class);
    Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
  }
 catch (  RuntimeException e) {
    Slog.e("System","******************************************");
    Slog.e("System","************ Failure starting core service",e);
  }
  StatusBarManagerService statusBar=null;
  INotificationManager notification=null;
  WallpaperManagerService wallpaper=null;
  LocationManagerService location=null;
  CountryDetectorService countryDetector=null;
  ILockSettings lockSettings=null;
  AssetAtlasService atlas=null;
  MediaRouterService mediaRouter=null;
  if (mFactoryTestMode != FactoryTest.FACTORY_TEST_LOW_LEVEL) {
    mSystemServiceManager.startService(InputMethodManagerService.Lifecycle.class);
    traceBeginAndSlog("StartAccessibilityManagerService");
    try {
      ServiceManager.addService(Context.ACCESSIBILITY_SERVICE,new AccessibilityManagerService(context));
    }
 catch (    Throwable e) {
      reportWtf("starting Accessibility Manager",e);
    }
    Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
  }
  try {
    wm.displayReady();
  }
 catch (  Throwable e) {
    reportWtf("making display ready",e);
  }
  if (mFactoryTestMode != FactoryTest.FACTORY_TEST_LOW_LEVEL) {
    if (!disableStorage && !"0".equals(SystemProperties.get("system_init.startmountservice"))) {
      try {
        mSystemServiceManager.startService(MOUNT_SERVICE_CLASS);
        mountService=IMountService.Stub.asInterface(ServiceManager.getService("mount"));
      }
 catch (      Throwable e) {
        reportWtf("starting Mount Service",e);
      }
    }
  }
  mSystemServiceManager.startService(UiModeManagerService.class);
  Trace.traceBegin(Trace.TRACE_TAG_SYSTEM_SERVER,"PerformFstrimIfNeeded");
  try {
    mPackageManagerService.performFstrimIfNeeded();
  }
 catch (  Throwable e) {
    reportWtf("performing fstrim",e);
  }
  Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
  Trace.traceBegin(Trace.TRACE_TAG_SYSTEM_SERVER,"ExtractPackagesIfNeeded");
  try {
    mPackageManagerService.extractPackagesIfNeeded();
  }
 catch (  Throwable e) {
    reportWtf("extract packages",e);
  }
  Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
  try {
    ActivityManagerNative.getDefault().showBootMessage(context.getResources().getText(com.android.internal.R.string.android_upgrading_starting_apps),false);
  }
 catch (  RemoteException e) {
  }
  if (mFactoryTestMode != FactoryTest.FACTORY_TEST_LOW_LEVEL) {
    if (!disableNonCoreServices) {
      traceBeginAndSlog("StartLockSettingsService");
      try {
        mSystemServiceManager.startService(LOCK_SETTINGS_SERVICE_CLASS);
        lockSettings=ILockSettings.Stub.asInterface(ServiceManager.getService("lock_settings"));
      }
 catch (      Throwable e) {
        reportWtf("starting LockSettingsService service",e);
      }
      Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
      if (!SystemProperties.get(PERSISTENT_DATA_BLOCK_PROP).equals("")) {
        mSystemServiceManager.startService(PersistentDataBlockService.class);
      }
      mSystemServiceManager.startService(DeviceIdleController.class);
      mSystemServiceManager.startService(DevicePolicyManagerService.Lifecycle.class);
    }
    if (!disableSystemUI) {
      traceBeginAndSlog("StartStatusBarManagerService");
      try {
        statusBar=new StatusBarManagerService(context,wm);
        ServiceManager.addService(Context.STATUS_BAR_SERVICE,statusBar);
      }
 catch (      Throwable e) {
        reportWtf("starting StatusBarManagerService",e);
      }
      Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
    }
    if (!disableNonCoreServices) {
      traceBeginAndSlog("StartClipboardService");
      try {
        ServiceManager.addService(Context.CLIPBOARD_SERVICE,new ClipboardService(context));
      }
 catch (      Throwable e) {
        reportWtf("starting Clipboard Service",e);
      }
      Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
    }
    if (!disableNetwork) {
      traceBeginAndSlog("StartNetworkManagementService");
      try {
        networkManagement=NetworkManagementService.create(context);
        ServiceManager.addService(Context.NETWORKMANAGEMENT_SERVICE,networkManagement);
      }
 catch (      Throwable e) {
        reportWtf("starting NetworkManagement Service",e);
      }
      Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
    }
    if (!disableNonCoreServices && !disableTextServices) {
      mSystemServiceManager.startService(TextServicesManagerService.Lifecycle.class);
    }
    if (!disableNetwork) {
      traceBeginAndSlog("StartNetworkScoreService");
      try {
        networkScore=new NetworkScoreService(context);
        ServiceManager.addService(Context.NETWORK_SCORE_SERVICE,networkScore);
      }
 catch (      Throwable e) {
        reportWtf("starting Network Score Service",e);
      }
      Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
      traceBeginAndSlog("StartNetworkStatsService");
      try {
        networkStats=NetworkStatsService.create(context,networkManagement);
        ServiceManager.addService(Context.NETWORK_STATS_SERVICE,networkStats);
      }
 catch (      Throwable e) {
        reportWtf("starting NetworkStats Service",e);
      }
      Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
      traceBeginAndSlog("StartNetworkPolicyManagerService");
      try {
        networkPolicy=new NetworkPolicyManagerService(context,mActivityManagerService,(IPowerManager)ServiceManager.getService(Context.POWER_SERVICE),networkStats,networkManagement);
        ServiceManager.addService(Context.NETWORK_POLICY_SERVICE,networkPolicy);
      }
 catch (      Throwable e) {
        reportWtf("starting NetworkPolicy Service",e);
      }
      Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
      if (context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_WIFI_NAN)) {
        mSystemServiceManager.startService(WIFI_NAN_SERVICE_CLASS);
      }
 else {
        Slog.i(TAG,"No Wi-Fi NAN Service (NAN support Not Present)");
      }
      mSystemServiceManager.startService(WIFI_P2P_SERVICE_CLASS);
      mSystemServiceManager.startService(WIFI_SERVICE_CLASS);
      mSystemServiceManager.startService("com.android.server.wifi.WifiScanningService");
      if (!disableRtt) {
        mSystemServiceManager.startService("com.android.server.wifi.RttService");
      }
      if (mPackageManager.hasSystemFeature(PackageManager.FEATURE_ETHERNET) || mPackageManager.hasSystemFeature(PackageManager.FEATURE_USB_HOST)) {
        mSystemServiceManager.startService(ETHERNET_SERVICE_CLASS);
      }
      traceBeginAndSlog("StartConnectivityService");
      try {
        connectivity=new ConnectivityService(context,networkManagement,networkStats,networkPolicy);
        ServiceManager.addService(Context.CONNECTIVITY_SERVICE,connectivity);
        networkStats.bindConnectivityManager(connectivity);
        networkPolicy.bindConnectivityManager(connectivity);
      }
 catch (      Throwable e) {
        reportWtf("starting Connectivity Service",e);
      }
      Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
      traceBeginAndSlog("StartNsdService");
      try {
        serviceDiscovery=NsdService.create(context);
        ServiceManager.addService(Context.NSD_SERVICE,serviceDiscovery);
      }
 catch (      Throwable e) {
        reportWtf("starting Service Discovery Service",e);
      }
      Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
    }
    if (!disableNonCoreServices) {
      traceBeginAndSlog("StartUpdateLockService");
      try {
        ServiceManager.addService(Context.UPDATE_LOCK_SERVICE,new UpdateLockService(context));
      }
 catch (      Throwable e) {
        reportWtf("starting UpdateLockService",e);
      }
      Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
    }
    if (!disableNonCoreServices) {
      mSystemServiceManager.startService(RecoverySystemService.class);
    }
    if (mountService != null && !mOnlyCore) {
      Trace.traceBegin(Trace.TRACE_TAG_SYSTEM_SERVER,"WaitForAsecScan");
      try {
        mountService.waitForAsecScan();
      }
 catch (      RemoteException ignored) {
      }
      Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
    }
    Trace.traceBegin(Trace.TRACE_TAG_SYSTEM_SERVER,"MakeAccountManagerServiceReady");
    try {
      if (accountManager != null)       accountManager.systemReady();
    }
 catch (    Throwable e) {
      reportWtf("making Account Manager Service ready",e);
    }
    Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
    Trace.traceBegin(Trace.TRACE_TAG_SYSTEM_SERVER,"MakeContentServiceReady");
    try {
      if (contentService != null)       contentService.systemReady();
    }
 catch (    Throwable e) {
      reportWtf("making Content Service ready",e);
    }
    Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
    mSystemServiceManager.startService(NotificationManagerService.class);
    notification=INotificationManager.Stub.asInterface(ServiceManager.getService(Context.NOTIFICATION_SERVICE));
    networkPolicy.bindNotificationManager(notification);
    mSystemServiceManager.startService(DeviceStorageMonitorService.class);
    if (!disableLocation) {
      traceBeginAndSlog("StartLocationManagerService");
      try {
        location=new LocationManagerService(context);
        ServiceManager.addService(Context.LOCATION_SERVICE,location);
      }
 catch (      Throwable e) {
        reportWtf("starting Location Manager",e);
      }
      Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
      traceBeginAndSlog("StartCountryDetectorService");
      try {
        countryDetector=new CountryDetectorService(context);
        ServiceManager.addService(Context.COUNTRY_DETECTOR,countryDetector);
      }
 catch (      Throwable e) {
        reportWtf("starting Country Detector",e);
      }
      Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
    }
    if (!disableNonCoreServices && !disableSearchManager) {
      traceBeginAndSlog("StartSearchManagerService");
      try {
        mSystemServiceManager.startService(SEARCH_MANAGER_SERVICE_CLASS);
      }
 catch (      Throwable e) {
        reportWtf("starting Search Service",e);
      }
      Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
    }
    mSystemServiceManager.startService(DropBoxManagerService.class);
    if (!disableNonCoreServices && context.getResources().getBoolean(R.bool.config_enableWallpaperService)) {
      traceBeginAndSlog("StartWallpaperManagerService");
      try {
        wallpaper=new WallpaperManagerService(context);
        ServiceManager.addService(Context.WALLPAPER_SERVICE,wallpaper);
      }
 catch (      Throwable e) {
        reportWtf("starting Wallpaper Service",e);
      }
      Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
    }
    traceBeginAndSlog("StartAudioService");
    mSystemServiceManager.startService(AudioService.Lifecycle.class);
    Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
    if (!disableNonCoreServices) {
      mSystemServiceManager.startService(DockObserver.class);
      if (context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_WATCH)) {
        mSystemServiceManager.startService(ThermalObserver.class);
      }
    }
    traceBeginAndSlog("StartWiredAccessoryManager");
    try {
      inputManager.setWiredAccessoryCallbacks(new WiredAccessoryManager(context,inputManager));
    }
 catch (    Throwable e) {
      reportWtf("starting WiredAccessoryManager",e);
    }
    Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
    if (!disableNonCoreServices) {
      if (mPackageManager.hasSystemFeature(PackageManager.FEATURE_MIDI)) {
        mSystemServiceManager.startService(MIDI_SERVICE_CLASS);
      }
      if (mPackageManager.hasSystemFeature(PackageManager.FEATURE_USB_HOST) || mPackageManager.hasSystemFeature(PackageManager.FEATURE_USB_ACCESSORY)) {
        Trace.traceBegin(Trace.TRACE_TAG_SYSTEM_SERVER,"StartUsbService");
        mSystemServiceManager.startService(USB_SERVICE_CLASS);
        Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
      }
      if (!disableSerial) {
        traceBeginAndSlog("StartSerialService");
        try {
          serial=new SerialService(context);
          ServiceManager.addService(Context.SERIAL_SERVICE,serial);
        }
 catch (        Throwable e) {
          Slog.e(TAG,"Failure starting SerialService",e);
        }
        Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
      }
      Trace.traceBegin(Trace.TRACE_TAG_SYSTEM_SERVER,"StartHardwarePropertiesManagerService");
      try {
        hardwarePropertiesService=new HardwarePropertiesManagerService(context);
        ServiceManager.addService(Context.HARDWARE_PROPERTIES_SERVICE,hardwarePropertiesService);
      }
 catch (      Throwable e) {
        Slog.e(TAG,"Failure starting HardwarePropertiesManagerService",e);
      }
      Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
    }
    mSystemServiceManager.startService(TwilightService.class);
    mSystemServiceManager.startService(JobSchedulerService.class);
    mSystemServiceManager.startService(SoundTriggerService.class);
    if (!disableNonCoreServices) {
      if (mPackageManager.hasSystemFeature(PackageManager.FEATURE_BACKUP)) {
        mSystemServiceManager.startService(BACKUP_MANAGER_SERVICE_CLASS);
      }
      if (mPackageManager.hasSystemFeature(PackageManager.FEATURE_APP_WIDGETS)) {
        mSystemServiceManager.startService(APPWIDGET_SERVICE_CLASS);
      }
      if (mPackageManager.hasSystemFeature(PackageManager.FEATURE_VOICE_RECOGNIZERS)) {
        mSystemServiceManager.startService(VOICE_RECOGNITION_MANAGER_SERVICE_CLASS);
      }
      if (GestureLauncherService.isGestureLauncherEnabled(context.getResources())) {
        Slog.i(TAG,"Gesture Launcher Service");
        mSystemServiceManager.startService(GestureLauncherService.class);
      }
      mSystemServiceManager.startService(SensorNotificationService.class);
      mSystemServiceManager.startService(ContextHubSystemService.class);
    }
    traceBeginAndSlog("StartDiskStatsService");
    try {
      ServiceManager.addService("diskstats",new DiskStatsService(context));
    }
 catch (    Throwable e) {
      reportWtf("starting DiskStats Service",e);
    }
    Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
    if (!disableSamplingProfiler) {
      traceBeginAndSlog("StartSamplingProfilerService");
      try {
        ServiceManager.addService("samplingprofiler",new SamplingProfilerService(context));
      }
 catch (      Throwable e) {
        reportWtf("starting SamplingProfiler Service",e);
      }
      Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
    }
    if (!disableNetwork && !disableNetworkTime) {
      traceBeginAndSlog("StartNetworkTimeUpdateService");
      try {
        networkTimeUpdater=new NetworkTimeUpdateService(context);
        ServiceManager.addService("network_time_update_service",networkTimeUpdater);
      }
 catch (      Throwable e) {
        reportWtf("starting NetworkTimeUpdate service",e);
      }
      Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
    }
    traceBeginAndSlog("StartCommonTimeManagementService");
    try {
      commonTimeMgmtService=new CommonTimeManagementService(context);
      ServiceManager.addService("commontime_management",commonTimeMgmtService);
    }
 catch (    Throwable e) {
      reportWtf("starting CommonTimeManagementService service",e);
    }
    Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
    if (!disableNetwork) {
      traceBeginAndSlog("CertBlacklister");
      try {
        CertBlacklister blacklister=new CertBlacklister(context);
      }
 catch (      Throwable e) {
        reportWtf("starting CertBlacklister",e);
      }
      Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
    }
    if (!disableNonCoreServices) {
      mSystemServiceManager.startService(DreamManagerService.class);
    }
    if (!disableNonCoreServices && ZygoteInit.PRELOAD_RESOURCES) {
      traceBeginAndSlog("StartAssetAtlasService");
      try {
        atlas=new AssetAtlasService(context);
        ServiceManager.addService(AssetAtlasService.ASSET_ATLAS_SERVICE,atlas);
      }
 catch (      Throwable e) {
        reportWtf("starting AssetAtlasService",e);
      }
      Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
    }
    if (!disableNonCoreServices) {
      ServiceManager.addService(GraphicsStatsService.GRAPHICS_STATS_SERVICE,new GraphicsStatsService(context));
    }
    if (mPackageManager.hasSystemFeature(PackageManager.FEATURE_PRINTING)) {
      mSystemServiceManager.startService(PRINT_MANAGER_SERVICE_CLASS);
    }
    mSystemServiceManager.startService(RestrictionsManagerService.class);
    mSystemServiceManager.startService(MediaSessionService.class);
    if (mPackageManager.hasSystemFeature(PackageManager.FEATURE_HDMI_CEC)) {
      mSystemServiceManager.startService(HdmiControlService.class);
    }
    if (mPackageManager.hasSystemFeature(PackageManager.FEATURE_LIVE_TV)) {
      mSystemServiceManager.startService(TvInputManagerService.class);
    }
    if (mPackageManager.hasSystemFeature(PackageManager.FEATURE_PICTURE_IN_PICTURE)) {
      mSystemServiceManager.startService(MediaResourceMonitorService.class);
    }
    if (!disableNonCoreServices) {
      traceBeginAndSlog("StartMediaRouterService");
      try {
        mediaRouter=new MediaRouterService(context);
        ServiceManager.addService(Context.MEDIA_ROUTER_SERVICE,mediaRouter);
      }
 catch (      Throwable e) {
        reportWtf("starting MediaRouterService",e);
      }
      Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
      if (!disableTrustManager) {
        mSystemServiceManager.startService(TrustManagerService.class);
      }
      if (mPackageManager.hasSystemFeature(PackageManager.FEATURE_FINGERPRINT)) {
        mSystemServiceManager.startService(FingerprintService.class);
      }
      traceBeginAndSlog("StartBackgroundDexOptService");
      try {
        BackgroundDexOptService.schedule(context);
      }
 catch (      Throwable e) {
        reportWtf("starting BackgroundDexOptService",e);
      }
      Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
    }
    mSystemServiceManager.startService(ShortcutService.Lifecycle.class);
    mSystemServiceManager.startService(LauncherAppsService.class);
  }
  if (!disableNonCoreServices && !disableMediaProjection) {
    mSystemServiceManager.startService(MediaProjectionManagerService.class);
  }
  final boolean safeMode=wm.detectSafeMode();
  if (safeMode) {
    mActivityManagerService.enterSafeMode();
    VMRuntime.getRuntime().disableJitCompilation();
  }
 else {
    VMRuntime.getRuntime().startJitCompilation();
  }
  mmsService=mSystemServiceManager.startService(MmsServiceBroker.class);
  Trace.traceBegin(Trace.TRACE_TAG_SYSTEM_SERVER,"MakeVibratorServiceReady");
  try {
    vibrator.systemReady();
  }
 catch (  Throwable e) {
    reportWtf("making Vibrator Service ready",e);
  }
  Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
  Trace.traceBegin(Trace.TRACE_TAG_SYSTEM_SERVER,"MakeLockSettingsServiceReady");
  if (lockSettings != null) {
    try {
      lockSettings.systemReady();
    }
 catch (    Throwable e) {
      reportWtf("making Lock Settings Service ready",e);
    }
  }
  Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
  mSystemServiceManager.startBootPhase(SystemService.PHASE_LOCK_SETTINGS_READY);
  mSystemServiceManager.startBootPhase(SystemService.PHASE_SYSTEM_SERVICES_READY);
  Trace.traceBegin(Trace.TRACE_TAG_SYSTEM_SERVER,"MakeWindowManagerServiceReady");
  try {
    wm.systemReady();
  }
 catch (  Throwable e) {
    reportWtf("making Window Manager Service ready",e);
  }
  Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
  if (safeMode) {
    mActivityManagerService.showSafeModeOverlay();
  }
  Configuration config=wm.computeNewConfiguration();
  DisplayMetrics metrics=new DisplayMetrics();
  WindowManager w=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);
  w.getDefaultDisplay().getMetrics(metrics);
  context.getResources().updateConfiguration(config,metrics);
  final Theme systemTheme=context.getTheme();
  if (systemTheme.getChangingConfigurations() != 0) {
    systemTheme.rebase();
  }
  Trace.traceBegin(Trace.TRACE_TAG_SYSTEM_SERVER,"MakePowerManagerServiceReady");
  try {
    mPowerManagerService.systemReady(mActivityManagerService.getAppOpsService());
    Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
  }
 catch (  Throwable e) {
    reportWtf("making Power Manager Service ready",e);
  }
  Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
  Trace.traceBegin(Trace.TRACE_TAG_SYSTEM_SERVER,"MakePackageManagerServiceReady");
  try {
    mPackageManagerService.systemReady();
  }
 catch (  Throwable e) {
    reportWtf("making Package Manager Service ready",e);
  }
  Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
  Trace.traceBegin(Trace.TRACE_TAG_SYSTEM_SERVER,"MakeDisplayManagerServiceReady");
  try {
    mDisplayManagerService.systemReady(safeMode,mOnlyCore);
  }
 catch (  Throwable e) {
    reportWtf("making Display Manager Service ready",e);
  }
  Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
  final NetworkManagementService networkManagementF=networkManagement;
  final NetworkStatsService networkStatsF=networkStats;
  final NetworkPolicyManagerService networkPolicyF=networkPolicy;
  final ConnectivityService connectivityF=connectivity;
  final NetworkScoreService networkScoreF=networkScore;
  final WallpaperManagerService wallpaperF=wallpaper;
  final LocationManagerService locationF=location;
  final CountryDetectorService countryDetectorF=countryDetector;
  final NetworkTimeUpdateService networkTimeUpdaterF=networkTimeUpdater;
  final CommonTimeManagementService commonTimeMgmtServiceF=commonTimeMgmtService;
  final StatusBarManagerService statusBarF=statusBar;
  final AssetAtlasService atlasF=atlas;
  final InputManagerService inputManagerF=inputManager;
  final TelephonyRegistry telephonyRegistryF=telephonyRegistry;
  final MediaRouterService mediaRouterF=mediaRouter;
  final MmsServiceBroker mmsServiceF=mmsService;
  mActivityManagerService.systemReady(new Runnable(){
    @Override public void run(){
      Slog.i(TAG,"Making services ready");
      mSystemServiceManager.startBootPhase(SystemService.PHASE_ACTIVITY_MANAGER_READY);
      Trace.traceBegin(Trace.TRACE_TAG_SYSTEM_SERVER,"PhaseActivityManagerReady");
      Trace.traceBegin(Trace.TRACE_TAG_SYSTEM_SERVER,"StartObservingNativeCrashes");
      try {
        mActivityManagerService.startObservingNativeCrashes();
      }
 catch (      Throwable e) {
        reportWtf("observing native crashes",e);
      }
      Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
      if (!mOnlyCore) {
        Slog.i(TAG,"WebViewFactory preparation");
        Trace.traceBegin(Trace.TRACE_TAG_SYSTEM_SERVER,"WebViewFactoryPreparation");
        mWebViewUpdateService.prepareWebViewInSystemServer();
        Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
      }
      Trace.traceBegin(Trace.TRACE_TAG_SYSTEM_SERVER,"StartSystemUI");
      try {
        startSystemUi(context);
      }
 catch (      Throwable e) {
        reportWtf("starting System UI",e);
      }
      Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
      Trace.traceBegin(Trace.TRACE_TAG_SYSTEM_SERVER,"MakeMountServiceReady");
      try {
        if (networkScoreF != null)         networkScoreF.systemReady();
      }
 catch (      Throwable e) {
        reportWtf("making Network Score Service ready",e);
      }
      Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
      Trace.traceBegin(Trace.TRACE_TAG_SYSTEM_SERVER,"MakeNetworkManagementServiceReady");
      try {
        if (networkManagementF != null)         networkManagementF.systemReady();
      }
 catch (      Throwable e) {
        reportWtf("making Network Managment Service ready",e);
      }
      Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
      Trace.traceBegin(Trace.TRACE_TAG_SYSTEM_SERVER,"MakeNetworkStatsServiceReady");
      try {
        if (networkStatsF != null)         networkStatsF.systemReady();
      }
 catch (      Throwable e) {
        reportWtf("making Network Stats Service ready",e);
      }
      Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
      Trace.traceBegin(Trace.TRACE_TAG_SYSTEM_SERVER,"MakeNetworkPolicyServiceReady");
      try {
        if (networkPolicyF != null)         networkPolicyF.systemReady();
      }
 catch (      Throwable e) {
        reportWtf("making Network Policy Service ready",e);
      }
      Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
      Trace.traceBegin(Trace.TRACE_TAG_SYSTEM_SERVER,"MakeConnectivityServiceReady");
      try {
        if (connectivityF != null)         connectivityF.systemReady();
      }
 catch (      Throwable e) {
        reportWtf("making Connectivity Service ready",e);
      }
      Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
      Watchdog.getInstance().start();
      Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
      Trace.traceBegin(Trace.TRACE_TAG_SYSTEM_SERVER,"PhaseThirdPartyAppsCanStart");
      mSystemServiceManager.startBootPhase(SystemService.PHASE_THIRD_PARTY_APPS_CAN_START);
      try {
        if (wallpaperF != null)         wallpaperF.systemRunning();
      }
 catch (      Throwable e) {
        reportWtf("Notifying WallpaperService running",e);
      }
      try {
        if (locationF != null)         locationF.systemRunning();
      }
 catch (      Throwable e) {
        reportWtf("Notifying Location Service running",e);
      }
      try {
        if (countryDetectorF != null)         countryDetectorF.systemRunning();
      }
 catch (      Throwable e) {
        reportWtf("Notifying CountryDetectorService running",e);
      }
      try {
        if (networkTimeUpdaterF != null)         networkTimeUpdaterF.systemRunning();
      }
 catch (      Throwable e) {
        reportWtf("Notifying NetworkTimeService running",e);
      }
      try {
        if (commonTimeMgmtServiceF != null) {
          commonTimeMgmtServiceF.systemRunning();
        }
      }
 catch (      Throwable e) {
        reportWtf("Notifying CommonTimeManagementService running",e);
      }
      try {
        if (atlasF != null)         atlasF.systemRunning();
      }
 catch (      Throwable e) {
        reportWtf("Notifying AssetAtlasService running",e);
      }
      try {
        if (inputManagerF != null)         inputManagerF.systemRunning();
      }
 catch (      Throwable e) {
        reportWtf("Notifying InputManagerService running",e);
      }
      try {
        if (telephonyRegistryF != null)         telephonyRegistryF.systemRunning();
      }
 catch (      Throwable e) {
        reportWtf("Notifying TelephonyRegistry running",e);
      }
      try {
        if (mediaRouterF != null)         mediaRouterF.systemRunning();
      }
 catch (      Throwable e) {
        reportWtf("Notifying MediaRouterService running",e);
      }
      try {
        if (mmsServiceF != null)         mmsServiceF.systemRunning();
      }
 catch (      Throwable e) {
        reportWtf("Notifying MmsService running",e);
      }
      Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);
    }
  }
);
}
