{
  if (System.currentTimeMillis() < EARLIEST_SUPPORTED_TIME) {
    Slog.w(TAG,"System clock is before 1970; setting to 1970.");
    SystemClock.setCurrentTimeMillis(EARLIEST_SUPPORTED_TIME);
  }
  if (!SystemProperties.get("persist.sys.language").isEmpty()) {
    final String languageTag=Locale.getDefault().toLanguageTag();
    SystemProperties.set("persist.sys.locale",languageTag);
    SystemProperties.set("persist.sys.language","");
    SystemProperties.set("persist.sys.country","");
    SystemProperties.set("persist.sys.localevar","");
  }
  Slog.i(TAG,"Entered the Android system server!");
  EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_SYSTEM_RUN,SystemClock.uptimeMillis());
  SystemProperties.set("persist.sys.dalvik.vm.lib.2",VMRuntime.getRuntime().vmLibrary());
  if (SamplingProfilerIntegration.isEnabled()) {
    SamplingProfilerIntegration.start();
    mProfilerSnapshotTimer=new Timer();
    mProfilerSnapshotTimer.schedule(new TimerTask(){
      @Override public void run(){
        SamplingProfilerIntegration.writeSnapshot("system_server",null);
      }
    }
,SNAPSHOT_INTERVAL,SNAPSHOT_INTERVAL);
  }
  VMRuntime.getRuntime().clearGrowthLimit();
  VMRuntime.getRuntime().setTargetHeapUtilization(0.8f);
  Build.ensureFingerprintProperty();
  Environment.setUserRequired(true);
  BinderInternal.disableBackgroundScheduling(true);
  android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_FOREGROUND);
  android.os.Process.setCanSelfBackground(false);
  Looper.prepareMainLooper();
  System.loadLibrary("android_servers");
  performPendingShutdown();
  createSystemContext();
  mSystemServiceManager=new SystemServiceManager(mSystemContext);
  LocalServices.addService(SystemServiceManager.class,mSystemServiceManager);
  try {
    startBootstrapServices();
    startCoreServices();
    startOtherServices();
  }
 catch (  Throwable ex) {
    Slog.e("System","******************************************");
    Slog.e("System","************ Failure starting system services",ex);
    throw ex;
  }
  if (StrictMode.conditionallyEnableDebugLogging()) {
    Slog.i(TAG,"Enabled StrictMode for system server main thread.");
  }
  Looper.loop();
  throw new RuntimeException("Main thread loop unexpectedly exited");
}
