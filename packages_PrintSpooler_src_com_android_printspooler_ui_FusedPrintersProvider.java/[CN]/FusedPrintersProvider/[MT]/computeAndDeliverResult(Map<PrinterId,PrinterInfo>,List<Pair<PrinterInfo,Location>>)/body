{
  List<PrinterInfo> printers=new ArrayList<>();
  HashSet<PrinterId> alreadyAddedPrinter=new HashSet<>(MAX_FAVORITE_PRINTER_COUNT);
  Location location=getCurrentLocation();
  final int favoritePrinterCount=favoritePrinters.size();
  if (location != null) {
    for (int i=0; i < favoritePrinterCount; i++) {
      if (printers.size() == MAX_FAVORITE_PRINTER_COUNT) {
        break;
      }
      PrinterInfo favoritePrinter=favoritePrinters.get(i).first;
      Location printerLocation=favoritePrinters.get(i).second;
      if (printerLocation != null && !alreadyAddedPrinter.contains(favoritePrinter.getId())) {
        if (printerLocation.distanceTo(location) <= MAX_PRINTER_DISTANCE) {
          updateAndAddPrinter(printers,favoritePrinter,discoveredPrinters);
          alreadyAddedPrinter.add(favoritePrinter.getId());
        }
      }
    }
  }
  for (int i=0; i < favoritePrinterCount; i++) {
    if (printers.size() == MAX_FAVORITE_PRINTER_COUNT) {
      break;
    }
    PrinterInfo favoritePrinter=favoritePrinters.get(i).first;
    if (!alreadyAddedPrinter.contains(favoritePrinter.getId())) {
      updateAndAddPrinter(printers,favoritePrinter,discoveredPrinters);
      alreadyAddedPrinter.add(favoritePrinter.getId());
    }
  }
  final int printerCount=mPrinters.size();
  for (int i=0; i < printerCount; i++) {
    PrinterInfo printer=mPrinters.get(i);
    PrinterInfo updatedPrinter=discoveredPrinters.remove(printer.getId());
    if (updatedPrinter != null) {
      printers.add(updatedPrinter);
    }
  }
  printers.addAll(discoveredPrinters.values());
  mPrinters.clear();
  mPrinters.addAll(printers);
  if (isStarted()) {
    deliverResult(printers);
  }
 else {
    onContentChanged();
  }
}
