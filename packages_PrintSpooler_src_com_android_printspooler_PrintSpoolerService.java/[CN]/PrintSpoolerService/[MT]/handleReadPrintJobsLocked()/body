{
  ArrayMap<PrintJobId,File> fileForJobMap=null;
  File[] files=getFilesDir().listFiles();
  if (files != null) {
    final int fileCount=files.length;
    for (int i=0; i < fileCount; i++) {
      File file=files[i];
      if (file.isFile() && file.getName().startsWith(PRINT_JOB_FILE_PREFIX)) {
        if (fileForJobMap == null) {
          fileForJobMap=new ArrayMap<PrintJobId,File>();
        }
        String printJobIdString=file.getName().substring(0,PRINT_JOB_FILE_PREFIX.length());
        PrintJobId printJobId=PrintJobId.unflattenFromString(printJobIdString);
        fileForJobMap.put(printJobId,file);
      }
    }
  }
  final int printJobCount=mPrintJobs.size();
  for (int i=0; i < printJobCount; i++) {
    PrintJobInfo printJob=mPrintJobs.get(i);
    if (fileForJobMap != null) {
      fileForJobMap.remove(printJob.getId());
    }
    mNotificationController.onPrintJobStateChanged(printJob);
switch (printJob.getState()) {
case PrintJobInfo.STATE_QUEUED:
case PrintJobInfo.STATE_STARTED:
case PrintJobInfo.STATE_BLOCKED:
{
        setPrintJobState(printJob.getId(),PrintJobInfo.STATE_FAILED,getString(R.string.no_connection_to_printer));
      }
    break;
}
}
if (fileForJobMap != null) {
final int orphanFileCount=fileForJobMap.size();
for (int i=0; i < orphanFileCount; i++) {
  File file=fileForJobMap.valueAt(i);
  file.delete();
}
}
}
