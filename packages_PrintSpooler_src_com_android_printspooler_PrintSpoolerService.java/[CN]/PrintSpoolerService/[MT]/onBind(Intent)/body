{
  return new IPrintSpooler.Stub(){
    @Override public void getPrintJobInfos(    IPrintSpoolerCallbacks callback,    ComponentName componentName,    int state,    int appId,    int sequence) throws RemoteException {
      List<PrintJobInfo> printJobs=null;
      try {
        printJobs=PrintSpoolerService.this.getPrintJobInfos(componentName,state,appId);
      }
  finally {
        callback.onGetPrintJobInfosResult(printJobs,sequence);
      }
    }
    @Override public void getPrintJobInfo(    int printJobId,    IPrintSpoolerCallbacks callback,    int appId,    int sequence) throws RemoteException {
      PrintJobInfo printJob=null;
      try {
        printJob=PrintSpoolerService.this.getPrintJobInfo(printJobId,appId);
      }
  finally {
        callback.onGetPrintJobInfoResult(printJob,sequence);
      }
    }
    @SuppressWarnings("deprecation") @Override public void createPrintJob(    String printJobName,    IPrintClient client,    IPrintDocumentAdapter printAdapter,    PrintAttributes attributes,    IPrintSpoolerCallbacks callback,    int appId,    int sequence) throws RemoteException {
      PrintJobInfo printJob=null;
      try {
        printJob=PrintSpoolerService.this.createPrintJob(printJobName,client,attributes,appId);
        if (printJob != null) {
          Intent intent=mStartPrintJobConfigActivityIntent;
          intent.putExtra(PrintJobConfigActivity.EXTRA_PRINT_DOCUMENT_ADAPTER,printAdapter.asBinder());
          intent.putExtra(PrintJobConfigActivity.EXTRA_PRINT_JOB_ID,printJob.getId());
          intent.putExtra(PrintJobConfigActivity.EXTRA_PRINT_ATTRIBUTES,attributes);
          IntentSender sender=PendingIntent.getActivity(PrintSpoolerService.this,0,intent,PendingIntent.FLAG_ONE_SHOT | PendingIntent.FLAG_CANCEL_CURRENT).getIntentSender();
          Message message=mHandlerCaller.obtainMessageOO(HandlerCallerCallback.MSG_START_PRINT_JOB_CONFIG_ACTIVITY,client,sender);
          mHandlerCaller.executeOrSendMessage(message);
        }
      }
  finally {
        callback.onCreatePrintJobResult(printJob,sequence);
      }
    }
    @Override public void setPrintJobState(    int printJobId,    int state,    String error,    IPrintSpoolerCallbacks callback,    int sequece) throws RemoteException {
      boolean success=false;
      try {
        success=PrintSpoolerService.this.setPrintJobState(printJobId,state,error);
      }
  finally {
        callback.onSetPrintJobStateResult(success,sequece);
      }
    }
    @Override public void setPrintJobTag(    int printJobId,    String tag,    IPrintSpoolerCallbacks callback,    int sequece) throws RemoteException {
      boolean success=false;
      try {
        success=PrintSpoolerService.this.setPrintJobTag(printJobId,tag);
      }
  finally {
        callback.onSetPrintJobTagResult(success,sequece);
      }
    }
    @Override public void writePrintJobData(    ParcelFileDescriptor fd,    int printJobId){
      PrintSpoolerService.this.writePrintJobData(fd,printJobId);
    }
    @Override public void setClient(    IPrintSpoolerClient client){
      Message message=mHandlerCaller.obtainMessageO(HandlerCallerCallback.MSG_SET_CLIENT,client);
      mHandlerCaller.executeOrSendMessage(message);
    }
    @Override public void onPrintersAdded(    List<PrinterInfo> printers){
      Message message=mHandlerCaller.obtainMessageO(HandlerCallerCallback.MSG_ON_PRINTERS_ADDED,printers);
      mHandlerCaller.executeOrSendMessage(message);
    }
    @Override public void onPrintersRemoved(    List<PrinterId> printerIds){
      Message message=mHandlerCaller.obtainMessageO(HandlerCallerCallback.MSG_ON_PRINTERS_REMOVED,printerIds);
      mHandlerCaller.executeOrSendMessage(message);
    }
    @Override public void onPrintersUpdated(    List<PrinterInfo> printers){
      Message message=mHandlerCaller.obtainMessageO(HandlerCallerCallback.MSG_ON_PRINTERS_UPDATED,printers);
      mHandlerCaller.executeOrSendMessage(message);
    }
  }
;
}
