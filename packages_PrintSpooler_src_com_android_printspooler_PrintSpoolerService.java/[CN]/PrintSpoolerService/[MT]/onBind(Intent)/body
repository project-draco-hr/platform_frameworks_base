{
  mSpooler.restorePersistedState();
  return new IPrintSpooler.Stub(){
    @Override public void getPrintJobInfos(    IPrintSpoolerCallbacks callback,    ComponentName componentName,    int state,    int appId,    int sequence) throws RemoteException {
      List<PrintJobInfo> printJobs=null;
      try {
        printJobs=mSpooler.getPrintJobInfos(componentName,state,appId);
      }
  finally {
        callback.onGetPrintJobInfosResult(printJobs,sequence);
      }
    }
    @Override public void getPrintJobInfo(    int printJobId,    IPrintSpoolerCallbacks callback,    int appId,    int sequence) throws RemoteException {
      PrintJobInfo printJob=null;
      try {
        printJob=mSpooler.getPrintJobInfo(printJobId,appId);
      }
  finally {
        callback.onGetPrintJobInfoResult(printJob,sequence);
      }
    }
    @Override public void cancelPrintJob(    int printJobId,    IPrintSpoolerCallbacks callback,    int appId,    int sequence) throws RemoteException {
      boolean success=false;
      try {
        success=mSpooler.cancelPrintJob(printJobId,appId);
      }
  finally {
        callback.onCancelPrintJobResult(success,sequence);
      }
    }
    @SuppressWarnings("deprecation") @Override public void createPrintJob(    String printJobName,    IPrintClient client,    IPrintDocumentAdapter printAdapter,    PrintAttributes attributes,    IPrintSpoolerCallbacks callback,    int appId,    int sequence) throws RemoteException {
      PrintJobInfo printJob=null;
      try {
        printJob=mSpooler.createPrintJob(printJobName,client,attributes,appId);
        if (printJob != null) {
          Intent intent=mStartPrintJobConfigActivityIntent;
          intent.putExtra(PrintJobConfigActivity.EXTRA_PRINTABLE,printAdapter.asBinder());
          intent.putExtra(PrintJobConfigActivity.EXTRA_APP_ID,appId);
          intent.putExtra(PrintJobConfigActivity.EXTRA_PRINT_JOB_ID,printJob.getId());
          intent.putExtra(PrintJobConfigActivity.EXTRA_ATTRIBUTES,attributes);
          IntentSender sender=PendingIntent.getActivity(PrintSpoolerService.this,0,intent,PendingIntent.FLAG_ONE_SHOT | PendingIntent.FLAG_CANCEL_CURRENT).getIntentSender();
          SomeArgs args=SomeArgs.obtain();
          args.arg1=client;
          args.arg2=sender;
          mHanlder.obtainMessage(0,args).sendToTarget();
        }
      }
  finally {
        callback.onCreatePrintJobResult(printJob,sequence);
      }
    }
    @Override public void setPrintJobState(    int printJobId,    int state,    IPrintSpoolerCallbacks callback,    int sequece) throws RemoteException {
      boolean success=false;
      try {
        success=mSpooler.setPrintJobState(printJobId,state);
      }
  finally {
        callback.onSetPrintJobStateResult(success,sequece);
      }
    }
    @Override public void setPrintJobTag(    int printJobId,    String tag,    IPrintSpoolerCallbacks callback,    int sequece) throws RemoteException {
      boolean success=false;
      try {
        success=mSpooler.setPrintJobTag(printJobId,tag);
      }
  finally {
        callback.onSetPrintJobTagResult(success,sequece);
      }
    }
    @Override public void writePrintJobData(    ParcelFileDescriptor fd,    int printJobId){
      mSpooler.writePrintJobData(fd,printJobId);
    }
    @Override public void setClient(    IPrintSpoolerClient client){
      mSpooler.setCleint(client);
    }
    @Override public void notifyClientForActivteJobs(){
      mSpooler.notifyClientForActivteJobs();
    }
  }
;
}
