{
  return new IPrintSpooler.Stub(){
    @Override public void getPrintJobInfos(    IPrintSpoolerCallbacks callback,    ComponentName componentName,    int state,    int appId,    int sequence) throws RemoteException {
      List<PrintJobInfo> printJobs=null;
      try {
        printJobs=PrintSpoolerService.this.getPrintJobInfos(componentName,state,appId);
      }
  finally {
        callback.onGetPrintJobInfosResult(printJobs,sequence);
      }
    }
    @Override public void getPrintJobInfo(    PrintJobId printJobId,    IPrintSpoolerCallbacks callback,    int appId,    int sequence) throws RemoteException {
      PrintJobInfo printJob=null;
      try {
        printJob=PrintSpoolerService.this.getPrintJobInfo(printJobId,appId);
      }
  finally {
        callback.onGetPrintJobInfoResult(printJob,sequence);
      }
    }
    @SuppressWarnings("deprecation") @Override public void createPrintJob(    PrintJobInfo printJob,    IPrintClient client,    IPrintDocumentAdapter printAdapter) throws RemoteException {
      PrintSpoolerService.this.createPrintJob(printJob);
      Intent intent=new Intent(printJob.getId().flattenToString());
      intent.setClass(PrintSpoolerService.this,PrintJobConfigActivity.class);
      intent.putExtra(PrintJobConfigActivity.EXTRA_PRINT_DOCUMENT_ADAPTER,printAdapter.asBinder());
      intent.putExtra(PrintJobConfigActivity.EXTRA_PRINT_JOB,printJob);
      IntentSender sender=PendingIntent.getActivity(PrintSpoolerService.this,0,intent,PendingIntent.FLAG_ONE_SHOT | PendingIntent.FLAG_CANCEL_CURRENT).getIntentSender();
      Message message=mHandlerCaller.obtainMessageOO(HandlerCallerCallback.MSG_START_PRINT_JOB_CONFIG_ACTIVITY,client,sender);
      mHandlerCaller.executeOrSendMessage(message);
    }
    @Override public void setPrintJobState(    PrintJobId printJobId,    int state,    String error,    IPrintSpoolerCallbacks callback,    int sequece) throws RemoteException {
      boolean success=false;
      try {
        success=PrintSpoolerService.this.setPrintJobState(printJobId,state,error);
      }
  finally {
        callback.onSetPrintJobStateResult(success,sequece);
      }
    }
    @Override public void setPrintJobTag(    PrintJobId printJobId,    String tag,    IPrintSpoolerCallbacks callback,    int sequece) throws RemoteException {
      boolean success=false;
      try {
        success=PrintSpoolerService.this.setPrintJobTag(printJobId,tag);
      }
  finally {
        callback.onSetPrintJobTagResult(success,sequece);
      }
    }
    @Override public void writePrintJobData(    ParcelFileDescriptor fd,    PrintJobId printJobId){
      PrintSpoolerService.this.writePrintJobData(fd,printJobId);
    }
    @Override public void setClient(    IPrintSpoolerClient client){
      Message message=mHandlerCaller.obtainMessageO(HandlerCallerCallback.MSG_SET_CLIENT,client);
      mHandlerCaller.executeOrSendMessage(message);
    }
    @Override public void removeObsoletePrintJobs(){
      PrintSpoolerService.this.removeObsoletePrintJobs();
    }
    @Override public void forgetPrintJobs(    List<PrintJobId> printJobIds){
      PrintSpoolerService.this.forgetPrintJobs(printJobIds);
    }
  }
;
}
