{
  if (startValues == null || endValues == null) {
    return null;
  }
  final boolean useParentOverlay=mFadeBehavior != FADE_BEHAVIOR_REVEAL;
  final View view=endValues.view;
  Map<String,Object> startVals=startValues.values;
  Map<String,Object> endVals=endValues.values;
  Rect startBounds=(Rect)startVals.get(PROPNAME_BOUNDS);
  Rect endBounds=(Rect)endVals.get(PROPNAME_BOUNDS);
  Bitmap startBitmap=(Bitmap)startVals.get(PROPNAME_BITMAP);
  Bitmap endBitmap=(Bitmap)endVals.get(PROPNAME_BITMAP);
  final BitmapDrawable startDrawable=(BitmapDrawable)startVals.get(PROPNAME_DRAWABLE);
  final BitmapDrawable endDrawable=(BitmapDrawable)endVals.get(PROPNAME_DRAWABLE);
  if (Transition.DBG) {
    Log.d(LOG_TAG,"StartBitmap.sameAs(endBitmap) = " + startBitmap.sameAs(endBitmap) + " for start, end: "+ startBitmap+ ", "+ endBitmap);
  }
  if (startDrawable != null && endDrawable != null && !startBitmap.sameAs(endBitmap)) {
    ViewOverlay overlay=useParentOverlay ? ((ViewGroup)view.getParent()).getOverlay() : view.getOverlay();
    if (mFadeBehavior == FADE_BEHAVIOR_REVEAL) {
      overlay.add(endDrawable);
    }
    overlay.add(startDrawable);
    ObjectAnimator anim;
    if (mFadeBehavior == FADE_BEHAVIOR_OUT_IN) {
      anim=ObjectAnimator.ofInt(startDrawable,"alpha",255,0,0);
    }
 else {
      anim=ObjectAnimator.ofInt(startDrawable,"alpha",0);
    }
    anim.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
      @Override public void onAnimationUpdate(      ValueAnimator animation){
        view.invalidate(startDrawable.getBounds());
      }
    }
);
    ObjectAnimator anim1=null;
    if (mFadeBehavior == FADE_BEHAVIOR_OUT_IN) {
      anim1=ObjectAnimator.ofFloat(view,View.ALPHA,0,0,1);
    }
 else     if (mFadeBehavior == FADE_BEHAVIOR_CROSSFADE) {
      anim1=ObjectAnimator.ofFloat(view,View.ALPHA,0,1);
    }
    if (Transition.DBG) {
      Log.d(LOG_TAG,"Crossfade: created anim " + anim + " for start, end values "+ startValues+ ", "+ endValues);
    }
    anim.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        ViewOverlay overlay=useParentOverlay ? ((ViewGroup)view.getParent()).getOverlay() : view.getOverlay();
        overlay.remove(startDrawable);
        if (mFadeBehavior == FADE_BEHAVIOR_REVEAL) {
          overlay.remove(endDrawable);
        }
      }
    }
);
    AnimatorSet set=new AnimatorSet();
    set.playTogether(anim);
    if (anim1 != null) {
      set.playTogether(anim1);
    }
    if (mResizeBehavior == RESIZE_BEHAVIOR_SCALE && !startBounds.equals(endBounds)) {
      if (Transition.DBG) {
        Log.d(LOG_TAG,"animating from startBounds to endBounds: " + startBounds + ", "+ endBounds);
      }
      Animator anim2=ObjectAnimator.ofObject(startDrawable,"bounds",sRectEvaluator,startBounds,endBounds);
      set.playTogether(anim2);
      if (mResizeBehavior == RESIZE_BEHAVIOR_SCALE) {
        Animator anim3=ObjectAnimator.ofObject(endDrawable,"bounds",sRectEvaluator,startBounds,endBounds);
        set.playTogether(anim3);
      }
    }
    return set;
  }
 else {
    return null;
  }
}
