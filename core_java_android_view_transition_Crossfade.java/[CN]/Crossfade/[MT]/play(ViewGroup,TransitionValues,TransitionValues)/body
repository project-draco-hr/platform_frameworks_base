{
  if (startValues == null || endValues == null) {
    return null;
  }
  HashMap<String,Object> startVals=startValues.values;
  HashMap<String,Object> endVals=endValues.values;
  final View view=endValues.view;
  Rect startBounds=(Rect)startVals.get(PROPNAME_BOUNDS);
  Rect endBounds=(Rect)endVals.get(PROPNAME_BOUNDS);
  final BitmapDrawable startDrawable=(BitmapDrawable)startVals.get(PROPNAME_DRAWABLE);
  final BitmapDrawable endDrawable=(BitmapDrawable)endVals.get(PROPNAME_DRAWABLE);
  ObjectAnimator anim=ObjectAnimator.ofInt(startDrawable,"alpha",0);
  anim.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    ValueAnimator animation){
      view.invalidate(startDrawable.getBounds());
    }
  }
);
  if (Transition.DBG) {
    Log.d(LOG_TAG,"Crossfade: created anim " + anim + " for start, end values "+ startValues+ ", "+ endValues);
  }
  anim.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      view.getOverlay().remove(startDrawable);
      view.getOverlay().remove(endDrawable);
    }
  }
);
  AnimatorSet set=new AnimatorSet();
  set.playTogether(anim);
  if (!startBounds.equals(endBounds)) {
    if (Transition.DBG) {
      Log.d(LOG_TAG,"animating from startBounds to endBounds: " + startBounds + ", "+ endBounds);
    }
    Animator anim2=ObjectAnimator.ofObject(startDrawable,"bounds",sRectEvaluator,startBounds,endBounds);
    Animator anim3=ObjectAnimator.ofObject(endDrawable,"bounds",sRectEvaluator,startBounds,endBounds);
    set.playTogether(anim2);
    set.playTogether(anim3);
  }
  return set;
}
