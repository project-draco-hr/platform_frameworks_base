{
  ensureOpen();
  if (isConnected) {
    throw new IOException("Already connected to server");
  }
synchronized (this) {
    if (isActive) {
      throw new IOException("OBEX request is already being performed");
    }
    isActive=true;
  }
  int totalLength=4;
  byte[] head=null;
  if (header != null) {
    if ((header).nonce != null) {
      challengeDigest=new byte[16];
      System.arraycopy((header).nonce,0,challengeDigest,0,16);
    }
    head=ObexHelper.createHeader(header,false);
    totalLength+=head.length;
  }
  byte[] requestPacket=new byte[totalLength];
  requestPacket[0]=(byte)0x10;
  requestPacket[1]=(byte)0x00;
  requestPacket[2]=(byte)(ObexHelper.MAX_PACKET_SIZE_INT >> 8);
  requestPacket[3]=(byte)(ObexHelper.MAX_PACKET_SIZE_INT & 0xFF);
  if (head != null) {
    System.arraycopy(head,0,requestPacket,4,head.length);
  }
  if ((requestPacket.length + 3) > ObexHelper.MAX_PACKET_SIZE_INT) {
    throw new IOException("Packet size exceeds max packet size");
  }
  HeaderSet returnHeaderSet=new HeaderSet();
  sendRequest(0x80,requestPacket,returnHeaderSet,null);
  if (returnHeaderSet.responseCode == ResponseCodes.OBEX_HTTP_OK) {
    isConnected=true;
  }
synchronized (this) {
    isActive=false;
  }
  return returnHeaderSet;
}
