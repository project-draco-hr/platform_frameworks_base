{
  try {
    DevicePolicyManager dpm=getDevicePolicyManager();
    if (password == null || password.length() < MIN_LOCK_PASSWORD_SIZE) {
      throw new IllegalArgumentException("password must not be null and at least " + "of length " + MIN_LOCK_PASSWORD_SIZE);
    }
    getLockSettings().setLockPassword(password,savedPassword,userHandle);
    int computedQuality=computePasswordQuality(password);
    if (userHandle == UserHandle.USER_SYSTEM && LockPatternUtils.isDeviceEncryptionEnabled()) {
      if (!shouldEncryptWithCredentials(true)) {
        clearEncryptionPassword();
      }
 else {
        boolean numeric=computedQuality == DevicePolicyManager.PASSWORD_QUALITY_NUMERIC;
        boolean numericComplex=computedQuality == DevicePolicyManager.PASSWORD_QUALITY_NUMERIC_COMPLEX;
        int type=numeric || numericComplex ? StorageManager.CRYPT_TYPE_PIN : StorageManager.CRYPT_TYPE_PASSWORD;
        updateEncryptionPassword(type,password);
      }
    }
    setLong(PASSWORD_TYPE_KEY,Math.max(quality,computedQuality),userHandle);
    if (computedQuality != DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED) {
      int letters=0;
      int uppercase=0;
      int lowercase=0;
      int numbers=0;
      int symbols=0;
      int nonletter=0;
      for (int i=0; i < password.length(); i++) {
        char c=password.charAt(i);
        if (c >= 'A' && c <= 'Z') {
          letters++;
          uppercase++;
        }
 else         if (c >= 'a' && c <= 'z') {
          letters++;
          lowercase++;
        }
 else         if (c >= '0' && c <= '9') {
          numbers++;
          nonletter++;
        }
 else {
          symbols++;
          nonletter++;
        }
      }
      dpm.setActivePasswordState(Math.max(quality,computedQuality),password.length(),letters,uppercase,lowercase,numbers,symbols,nonletter,userHandle);
    }
 else {
      dpm.setActivePasswordState(DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED,0,0,0,0,0,0,0,userHandle);
    }
    String passwordHistory=getString(PASSWORD_HISTORY_KEY,userHandle);
    if (passwordHistory == null) {
      passwordHistory="";
    }
    int passwordHistoryLength=getRequestedPasswordHistoryLength(userHandle);
    if (passwordHistoryLength == 0) {
      passwordHistory="";
    }
 else {
      byte[] hash=passwordToHash(password,userHandle);
      passwordHistory=new String(hash,StandardCharsets.UTF_8) + "," + passwordHistory;
      passwordHistory=passwordHistory.substring(0,Math.min(hash.length * passwordHistoryLength + passwordHistoryLength - 1,passwordHistory.length()));
    }
    setString(PASSWORD_HISTORY_KEY,passwordHistory,userHandle);
    onAfterChangingPassword(userHandle);
  }
 catch (  RemoteException re) {
    Log.e(TAG,"Unable to save lock password " + re);
  }
}
