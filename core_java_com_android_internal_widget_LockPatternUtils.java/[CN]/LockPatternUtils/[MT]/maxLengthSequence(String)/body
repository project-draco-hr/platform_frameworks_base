{
  if (string.length() == 0)   return 0;
  char previousChar=string.charAt(0);
  int category=categoryChar(previousChar);
  int diff=0;
  boolean hasDiff=false;
  int maxLength=0;
  int startSequence=0;
  for (int current=1; current < string.length(); current++) {
    char currentChar=string.charAt(current);
    int categoryCurrent=categoryChar(currentChar);
    int currentDiff=(int)currentChar - (int)previousChar;
    if (categoryCurrent != category || Math.abs(currentDiff) > maxDiffCategory(category)) {
      maxLength=Math.max(maxLength,current - startSequence);
      startSequence=current;
      hasDiff=false;
      category=categoryCurrent;
    }
 else {
      if (hasDiff && currentDiff != diff) {
        maxLength=Math.max(maxLength,current - startSequence);
        startSequence=current - 1;
      }
      diff=currentDiff;
      hasDiff=true;
    }
    previousChar=currentChar;
  }
  maxLength=Math.max(maxLength,string.length() - startSequence);
  return maxLength;
}
