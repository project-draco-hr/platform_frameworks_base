{
  final byte[] hash=passwordToHash(password);
  try {
    RandomAccessFile raf=new RandomAccessFile(sLockPasswordFilename,"rw");
    if (password == null) {
      raf.setLength(0);
    }
 else {
      raf.write(hash,0,hash.length);
    }
    raf.close();
    DevicePolicyManager dpm=getDevicePolicyManager();
    KeyStore keyStore=KeyStore.getInstance();
    if (password != null) {
      updateEncryptionPassword(password);
      keyStore.password(password);
      int computedQuality=computePasswordQuality(password);
      if (!isFallback) {
        setLong(PASSWORD_TYPE_KEY,Math.max(quality,computedQuality));
      }
 else {
        setLong(PASSWORD_TYPE_KEY,DevicePolicyManager.PASSWORD_QUALITY_BIOMETRIC_WEAK);
        setLong(PASSWORD_TYPE_ALTERNATE_KEY,Math.max(quality,computedQuality));
      }
      if (computedQuality != DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED) {
        int letters=0;
        int uppercase=0;
        int lowercase=0;
        int numbers=0;
        int symbols=0;
        int nonletter=0;
        for (int i=0; i < password.length(); i++) {
          char c=password.charAt(i);
          if (c >= 'A' && c <= 'Z') {
            letters++;
            uppercase++;
          }
 else           if (c >= 'a' && c <= 'z') {
            letters++;
            lowercase++;
          }
 else           if (c >= '0' && c <= '9') {
            numbers++;
            nonletter++;
          }
 else {
            symbols++;
            nonletter++;
          }
        }
        dpm.setActivePasswordState(Math.max(quality,computedQuality),password.length(),letters,uppercase,lowercase,numbers,symbols,nonletter);
      }
 else {
        dpm.setActivePasswordState(DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED,0,0,0,0,0,0,0);
      }
      String passwordHistory=getString(PASSWORD_HISTORY_KEY);
      if (passwordHistory == null) {
        passwordHistory=new String();
      }
      int passwordHistoryLength=getRequestedPasswordHistoryLength();
      if (passwordHistoryLength == 0) {
        passwordHistory="";
      }
 else {
        passwordHistory=new String(hash) + "," + passwordHistory;
        passwordHistory=passwordHistory.substring(0,Math.min(hash.length * passwordHistoryLength + passwordHistoryLength - 1,passwordHistory.length()));
      }
      setString(PASSWORD_HISTORY_KEY,passwordHistory);
    }
 else {
      if (keyStore.isEmpty()) {
        keyStore.reset();
      }
      dpm.setActivePasswordState(DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED,0,0,0,0,0,0,0);
    }
  }
 catch (  FileNotFoundException fnfe) {
    Log.e(TAG,"Unable to save lock pattern to " + sLockPasswordFilename);
  }
catch (  IOException ioe) {
    Log.e(TAG,"Unable to save lock pattern to " + sLockPasswordFilename);
  }
}
