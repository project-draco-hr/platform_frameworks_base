{
  boolean more=false;
  final int cl=child.mLeft;
  final int ct=child.mTop;
  final int cr=child.mRight;
  final int cb=child.mBottom;
  final boolean childHasIdentityMatrix=child.hasIdentityMatrix();
  final int flags=mGroupFlags;
  if ((flags & FLAG_CLEAR_TRANSFORMATION) == FLAG_CLEAR_TRANSFORMATION) {
    mChildTransformation.clear();
    mGroupFlags&=~FLAG_CLEAR_TRANSFORMATION;
  }
  Transformation transformToApply=null;
  Transformation invalidationTransform;
  final Animation a=child.getAnimation();
  boolean concatMatrix=false;
  boolean scalingRequired=false;
  boolean caching;
  int layerType=mDrawLayers ? child.getLayerType() : LAYER_TYPE_NONE;
  final boolean hardwareAccelerated=canvas.isHardwareAccelerated();
  if ((flags & FLAG_CHILDREN_DRAWN_WITH_CACHE) == FLAG_CHILDREN_DRAWN_WITH_CACHE || (flags & FLAG_ALWAYS_DRAWN_WITH_CACHE) == FLAG_ALWAYS_DRAWN_WITH_CACHE) {
    caching=true;
    if (mAttachInfo != null)     scalingRequired=mAttachInfo.mScalingRequired;
  }
 else {
    caching=(layerType != LAYER_TYPE_NONE) || hardwareAccelerated;
  }
  if (a != null) {
    final boolean initialized=a.isInitialized();
    if (!initialized) {
      a.initialize(cr - cl,cb - ct,getWidth(),getHeight());
      a.initializeInvalidateRegion(0,0,cr - cl,cb - ct);
      child.onAnimationStart();
    }
    more=a.getTransformation(drawingTime,mChildTransformation,scalingRequired ? mAttachInfo.mApplicationScale : 1f);
    if (scalingRequired && mAttachInfo.mApplicationScale != 1f) {
      if (mInvalidationTransformation == null) {
        mInvalidationTransformation=new Transformation();
      }
      invalidationTransform=mInvalidationTransformation;
      a.getTransformation(drawingTime,invalidationTransform,1f);
    }
 else {
      invalidationTransform=mChildTransformation;
    }
    transformToApply=mChildTransformation;
    concatMatrix=a.willChangeTransformationMatrix();
    if (more) {
      if (!a.willChangeBounds()) {
        if ((flags & (FLAG_OPTIMIZE_INVALIDATE | FLAG_ANIMATION_DONE)) == FLAG_OPTIMIZE_INVALIDATE) {
          mGroupFlags|=FLAG_INVALIDATE_REQUIRED;
        }
 else         if ((flags & FLAG_INVALIDATE_REQUIRED) == 0) {
          mPrivateFlags|=DRAW_ANIMATION;
          invalidate(cl,ct,cr,cb);
        }
      }
 else {
        if (mInvalidateRegion == null) {
          mInvalidateRegion=new RectF();
        }
        final RectF region=mInvalidateRegion;
        a.getInvalidateRegion(0,0,cr - cl,cb - ct,region,invalidationTransform);
        mPrivateFlags|=DRAW_ANIMATION;
        final int left=cl + (int)region.left;
        final int top=ct + (int)region.top;
        invalidate(left,top,left + (int)region.width(),top + (int)region.height());
      }
    }
  }
 else   if ((flags & FLAG_SUPPORT_STATIC_TRANSFORMATIONS) == FLAG_SUPPORT_STATIC_TRANSFORMATIONS) {
    final boolean hasTransform=getChildStaticTransformation(child,mChildTransformation);
    if (hasTransform) {
      final int transformType=mChildTransformation.getTransformationType();
      transformToApply=transformType != Transformation.TYPE_IDENTITY ? mChildTransformation : null;
      concatMatrix=(transformType & Transformation.TYPE_MATRIX) != 0;
    }
  }
  concatMatrix|=!childHasIdentityMatrix;
  child.mPrivateFlags|=DRAWN;
  if (!concatMatrix && canvas.quickReject(cl,ct,cr,cb,Canvas.EdgeType.BW) && (child.mPrivateFlags & DRAW_ANIMATION) == 0) {
    return more;
  }
  float alpha=child.getAlpha();
  if (alpha <= ViewConfiguration.ALPHA_THRESHOLD && (child.mPrivateFlags & ALPHA_SET) == 0 && !(child instanceof SurfaceView)) {
    return more;
  }
  if (hardwareAccelerated) {
    child.mRecreateDisplayList=(child.mPrivateFlags & INVALIDATED) == INVALIDATED;
    child.mPrivateFlags&=~INVALIDATED;
  }
  child.computeScroll();
  final int sx=child.mScrollX;
  final int sy=child.mScrollY;
  DisplayList displayList=null;
  Bitmap cache=null;
  boolean hasDisplayList=false;
  if (caching) {
    if (!hardwareAccelerated) {
      if (layerType != LAYER_TYPE_NONE) {
        layerType=LAYER_TYPE_SOFTWARE;
        child.buildDrawingCache(true);
      }
      cache=child.getDrawingCache(true);
    }
 else {
switch (layerType) {
case LAYER_TYPE_SOFTWARE:
        child.buildDrawingCache(true);
      cache=child.getDrawingCache(true);
    break;
case LAYER_TYPE_NONE:
  hasDisplayList=child.canHaveDisplayList();
break;
}
}
}
final boolean hasNoCache=cache == null || hasDisplayList;
final boolean offsetForScroll=cache == null && !hasDisplayList && layerType != LAYER_TYPE_HARDWARE;
final int restoreTo=canvas.save();
if (offsetForScroll) {
canvas.translate(cl - sx,ct - sy);
}
 else {
canvas.translate(cl,ct);
if (scalingRequired) {
final float scale=1.0f / mAttachInfo.mApplicationScale;
canvas.scale(scale,scale);
}
}
if (transformToApply != null || alpha < 1.0f || !child.hasIdentityMatrix()) {
if (transformToApply != null || !childHasIdentityMatrix) {
int transX=0;
int transY=0;
if (offsetForScroll) {
transX=-sx;
transY=-sy;
}
if (transformToApply != null) {
if (concatMatrix) {
canvas.translate(-transX,-transY);
canvas.concat(transformToApply.getMatrix());
canvas.translate(transX,transY);
mGroupFlags|=FLAG_CLEAR_TRANSFORMATION;
}
float transformAlpha=transformToApply.getAlpha();
if (transformAlpha < 1.0f) {
alpha*=transformToApply.getAlpha();
mGroupFlags|=FLAG_CLEAR_TRANSFORMATION;
}
}
if (!childHasIdentityMatrix) {
canvas.translate(-transX,-transY);
canvas.concat(child.getMatrix());
canvas.translate(transX,transY);
}
}
if (alpha < 1.0f) {
mGroupFlags|=FLAG_CLEAR_TRANSFORMATION;
if (hasNoCache) {
final int multipliedAlpha=(int)(255 * alpha);
if (!child.onSetAlpha(multipliedAlpha)) {
int layerFlags=Canvas.HAS_ALPHA_LAYER_SAVE_FLAG;
if ((flags & FLAG_CLIP_CHILDREN) == FLAG_CLIP_CHILDREN || layerType != LAYER_TYPE_NONE) {
  layerFlags|=Canvas.CLIP_TO_LAYER_SAVE_FLAG;
}
if (layerType == LAYER_TYPE_NONE) {
  final int scrollX=hasDisplayList ? 0 : sx;
  final int scrollY=hasDisplayList ? 0 : sy;
  canvas.saveLayerAlpha(scrollX,scrollY,scrollX + cr - cl,scrollY + cb - ct,multipliedAlpha,layerFlags);
}
}
 else {
child.mPrivateFlags|=ALPHA_SET;
}
}
}
}
 else if ((child.mPrivateFlags & ALPHA_SET) == ALPHA_SET) {
child.onSetAlpha(255);
child.mPrivateFlags&=~ALPHA_SET;
}
if ((flags & FLAG_CLIP_CHILDREN) == FLAG_CLIP_CHILDREN) {
if (offsetForScroll) {
canvas.clipRect(sx,sy,sx + (cr - cl),sy + (cb - ct));
}
 else {
if (!scalingRequired || cache == null) {
canvas.clipRect(0,0,cr - cl,cb - ct);
}
 else {
canvas.clipRect(0,0,cache.getWidth(),cache.getHeight());
}
}
}
if (hasDisplayList) {
displayList=child.getDisplayList();
}
if (hasNoCache) {
boolean layerRendered=false;
if (layerType == LAYER_TYPE_HARDWARE) {
final HardwareLayer layer=child.getHardwareLayer();
if (layer != null && layer.isValid()) {
child.mLayerPaint.setAlpha((int)(alpha * 255));
((HardwareCanvas)canvas).drawHardwareLayer(layer,0,0,child.mLayerPaint);
layerRendered=true;
}
 else {
final int scrollX=hasDisplayList ? 0 : sx;
final int scrollY=hasDisplayList ? 0 : sy;
canvas.saveLayer(scrollX,scrollY,scrollX + cr - cl,scrollY + cb - ct,child.mLayerPaint,Canvas.HAS_ALPHA_LAYER_SAVE_FLAG | Canvas.CLIP_TO_LAYER_SAVE_FLAG);
}
}
if (!layerRendered) {
if (!hasDisplayList) {
if ((child.mPrivateFlags & SKIP_DRAW) == SKIP_DRAW) {
if (ViewDebug.TRACE_HIERARCHY) {
  ViewDebug.trace(this,ViewDebug.HierarchyTraceType.DRAW);
}
child.mPrivateFlags&=~DIRTY_MASK;
child.dispatchDraw(canvas);
}
 else {
child.draw(canvas);
}
}
 else {
child.mPrivateFlags&=~DIRTY_MASK;
((HardwareCanvas)canvas).drawDisplayList(displayList,cr - cl,cb - ct,null);
}
}
}
 else if (cache != null) {
child.mPrivateFlags&=~DIRTY_MASK;
Paint cachePaint;
if (layerType == LAYER_TYPE_NONE) {
cachePaint=mCachePaint;
if (alpha < 1.0f) {
cachePaint.setAlpha((int)(alpha * 255));
mGroupFlags|=FLAG_ALPHA_LOWER_THAN_ONE;
}
 else if ((flags & FLAG_ALPHA_LOWER_THAN_ONE) == FLAG_ALPHA_LOWER_THAN_ONE) {
cachePaint.setAlpha(255);
mGroupFlags&=~FLAG_ALPHA_LOWER_THAN_ONE;
}
}
 else {
cachePaint=child.mLayerPaint;
cachePaint.setAlpha((int)(alpha * 255));
}
canvas.drawBitmap(cache,0.0f,0.0f,cachePaint);
}
canvas.restoreToCount(restoreTo);
if (a != null && !more) {
if (!hardwareAccelerated && !a.getFillAfter()) {
child.onSetAlpha(255);
}
finishAnimatingView(child,a);
}
if (more && hardwareAccelerated) {
invalidate(true);
if (a.hasAlpha()) {
child.invalidate(true);
}
}
child.mRecreateDisplayList=false;
return more;
}
