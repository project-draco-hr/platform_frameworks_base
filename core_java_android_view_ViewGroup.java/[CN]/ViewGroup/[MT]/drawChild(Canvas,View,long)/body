{
  boolean more=false;
  final int cl=child.mLeft;
  final int ct=child.mTop;
  final int cr=child.mRight;
  final int cb=child.mBottom;
  final int flags=mGroupFlags;
  if ((flags & FLAG_CLEAR_TRANSFORMATION) == FLAG_CLEAR_TRANSFORMATION) {
    if (mChildTransformation != null) {
      mChildTransformation.clear();
    }
    mGroupFlags&=~FLAG_CLEAR_TRANSFORMATION;
  }
  Transformation transformToApply=null;
  final Animation a=child.getAnimation();
  boolean concatMatrix=false;
  if (a != null) {
    if (mInvalidateRegion == null) {
      mInvalidateRegion=new RectF();
    }
    final RectF region=mInvalidateRegion;
    final boolean initialized=a.isInitialized();
    if (!initialized) {
      a.initialize(cr - cl,cb - ct,getWidth(),getHeight());
      a.initializeInvalidateRegion(cl,ct,cr,cb);
      child.onAnimationStart();
    }
    if (mChildTransformation == null) {
      mChildTransformation=new Transformation();
    }
    more=a.getTransformation(drawingTime,mChildTransformation);
    transformToApply=mChildTransformation;
    concatMatrix=a.willChangeTransformationMatrix();
    if (more) {
      if (!a.willChangeBounds()) {
        if ((flags & (FLAG_OPTIMIZE_INVALIDATE | FLAG_ANIMATION_DONE)) == FLAG_OPTIMIZE_INVALIDATE) {
          mGroupFlags|=FLAG_INVALIDATE_REQUIRED;
        }
 else         if ((flags & FLAG_INVALIDATE_REQUIRED) == 0) {
          mPrivateFlags|=DRAW_ANIMATION;
          invalidate(cl,ct,cr,cb);
        }
      }
 else {
        a.getInvalidateRegion(cl,ct,cr,cb,region,transformToApply);
        mPrivateFlags|=DRAW_ANIMATION;
        invalidate((int)(region.left - 1.0f),(int)(region.top - 1.0f),(int)(region.right + 1.0f),(int)(region.bottom + 1.0f));
      }
    }
  }
 else   if ((flags & FLAG_SUPPORT_STATIC_TRANSFORMATIONS) == FLAG_SUPPORT_STATIC_TRANSFORMATIONS) {
    if (mChildTransformation == null) {
      mChildTransformation=new Transformation();
    }
    final boolean hasTransform=getChildStaticTransformation(child,mChildTransformation);
    if (hasTransform) {
      final int transformType=mChildTransformation.getTransformationType();
      transformToApply=transformType != Transformation.TYPE_IDENTITY ? mChildTransformation : null;
      concatMatrix=(transformType & Transformation.TYPE_MATRIX) != 0;
    }
  }
  if (!concatMatrix && canvas.quickReject(cl,ct,cr,cb,Canvas.EdgeType.BW) && (child.mPrivateFlags & DRAW_ANIMATION) == 0) {
    return more;
  }
  child.computeScroll();
  final int sx=child.mScrollX;
  final int sy=child.mScrollY;
  Bitmap cache=null;
  if ((flags & FLAG_CHILDREN_DRAWN_WITH_CACHE) == FLAG_CHILDREN_DRAWN_WITH_CACHE || (flags & FLAG_ALWAYS_DRAWN_WITH_CACHE) == FLAG_ALWAYS_DRAWN_WITH_CACHE) {
    cache=child.getDrawingCache();
  }
  final boolean hasNoCache=cache == null;
  final int restoreTo=canvas.save();
  if (hasNoCache) {
    canvas.translate(cl - sx,ct - sy);
  }
 else {
    canvas.translate(cl,ct);
  }
  float alpha=1.0f;
  if (transformToApply != null) {
    if (concatMatrix) {
      int transX=0;
      int transY=0;
      if (hasNoCache) {
        transX=-sx;
        transY=-sy;
      }
      canvas.translate(-transX,-transY);
      canvas.concat(transformToApply.getMatrix());
      canvas.translate(transX,transY);
      mGroupFlags|=FLAG_CLEAR_TRANSFORMATION;
    }
    alpha=transformToApply.getAlpha();
    if (alpha < 1.0f) {
      mGroupFlags|=FLAG_CLEAR_TRANSFORMATION;
    }
    if (alpha < 1.0f && hasNoCache) {
      final int multipliedAlpha=(int)(255 * alpha);
      if (!child.onSetAlpha(multipliedAlpha)) {
        canvas.saveLayerAlpha(sx,sy,sx + cr - cl,sy + cb - ct,multipliedAlpha,Canvas.HAS_ALPHA_LAYER_SAVE_FLAG | Canvas.CLIP_TO_LAYER_SAVE_FLAG);
      }
 else {
        child.mPrivateFlags|=ALPHA_SET;
      }
    }
  }
 else   if ((child.mPrivateFlags & ALPHA_SET) == ALPHA_SET) {
    child.onSetAlpha(255);
  }
  if ((flags & FLAG_CLIP_CHILDREN) == FLAG_CLIP_CHILDREN) {
    if (hasNoCache) {
      canvas.clipRect(sx,sy,sx + cr - cl,sy + cb - ct);
    }
 else {
      canvas.clipRect(0,0,cr - cl,cb - ct);
    }
  }
  child.mPrivateFlags|=DRAWN;
  if (hasNoCache) {
    if ((child.mPrivateFlags & SKIP_DRAW) == SKIP_DRAW) {
      if (ViewDebug.TRACE_HIERARCHY) {
        ViewDebug.trace(this,ViewDebug.HierarchyTraceType.DRAW);
      }
      child.dispatchDraw(canvas);
    }
 else {
      child.draw(canvas);
    }
  }
 else {
    final Paint cachePaint=mCachePaint;
    if (alpha < 1.0f) {
      cachePaint.setAlpha((int)(alpha * 255));
      mGroupFlags|=FLAG_ALPHA_LOWER_THAN_ONE;
    }
 else     if ((flags & FLAG_ALPHA_LOWER_THAN_ONE) == FLAG_ALPHA_LOWER_THAN_ONE) {
      cachePaint.setAlpha(255);
      mGroupFlags&=~FLAG_ALPHA_LOWER_THAN_ONE;
    }
    if (ViewRoot.PROFILE_DRAWING) {
      EventLog.writeEvent(60003,hashCode());
    }
    canvas.drawBitmap(cache,0.0f,0.0f,cachePaint);
  }
  canvas.restoreToCount(restoreTo);
  if (a != null && !more) {
    child.onSetAlpha(255);
    finishAnimatingView(child,a);
  }
  return more;
}
