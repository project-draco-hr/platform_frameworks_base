{
  if ((event.getSource() & InputDevice.SOURCE_CLASS_POINTER) != 0) {
    final int childrenCount=mChildrenCount;
    if (childrenCount != 0) {
      final View[] children=mChildren;
      final float x=event.getX();
      final float y=event.getY();
      for (int i=childrenCount - 1; i >= 0; i--) {
        final View child=children[i];
        if ((child.mViewFlags & VISIBILITY_MASK) != VISIBLE && child.getAnimation() == null) {
          continue;
        }
        if (!isTransformedTouchPointInView(x,y,child,null)) {
          continue;
        }
        final float offsetX=mScrollX - child.mLeft;
        final float offsetY=mScrollY - child.mTop;
        final boolean handled;
        if (!child.hasIdentityMatrix()) {
          MotionEvent transformedEvent=MotionEvent.obtain(event);
          transformedEvent.offsetLocation(offsetX,offsetY);
          transformedEvent.transform(child.getInverseMatrix());
          handled=child.dispatchGenericMotionEvent(transformedEvent);
          transformedEvent.recycle();
        }
 else {
          event.offsetLocation(offsetX,offsetY);
          handled=child.dispatchGenericMotionEvent(event);
          event.offsetLocation(-offsetX,-offsetY);
        }
        if (handled) {
          return true;
        }
      }
    }
    return super.dispatchGenericMotionEvent(event);
  }
  if ((mPrivateFlags & (FOCUSED | HAS_BOUNDS)) == (FOCUSED | HAS_BOUNDS)) {
    return super.dispatchGenericMotionEvent(event);
  }
 else   if (mFocused != null && (mFocused.mPrivateFlags & HAS_BOUNDS) == HAS_BOUNDS) {
    return mFocused.dispatchGenericMotionEvent(event);
  }
  return false;
}
