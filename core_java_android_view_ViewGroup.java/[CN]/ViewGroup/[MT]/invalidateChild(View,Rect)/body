{
  if (ViewDebug.TRACE_HIERARCHY) {
    ViewDebug.trace(this,ViewDebug.HierarchyTraceType.INVALIDATE_CHILD);
  }
  ViewParent parent=this;
  final AttachInfo attachInfo=mAttachInfo;
  if (attachInfo != null) {
    final int[] location=attachInfo.mInvalidateChildLocation;
    location[CHILD_LEFT_INDEX]=child.mLeft;
    location[CHILD_TOP_INDEX]=child.mTop;
    Matrix childMatrix=child.getMatrix();
    if (!childMatrix.isIdentity()) {
      float[] boundingRectPoints=attachInfo.mTmpTransformBounds;
      boundingRectPoints[0]=dirty.left;
      boundingRectPoints[1]=dirty.top;
      boundingRectPoints[2]=dirty.right;
      boundingRectPoints[3]=dirty.top;
      boundingRectPoints[4]=dirty.right;
      boundingRectPoints[5]=dirty.bottom;
      boundingRectPoints[6]=dirty.left;
      boundingRectPoints[7]=dirty.bottom;
      childMatrix.mapPoints(boundingRectPoints);
      float left=Float.MAX_VALUE;
      float top=Float.MAX_VALUE;
      float right=-Float.MAX_VALUE;
      float bottom=-Float.MAX_VALUE;
      for (int i=0; i < 8; i+=2) {
        float x=boundingRectPoints[i];
        float y=boundingRectPoints[i + 1];
        if (x < left) {
          left=x;
        }
        if (x > right) {
          right=x;
        }
        if (y < top) {
          top=y;
        }
        if (y > bottom) {
          bottom=y;
        }
      }
      dirty.set((int)left,(int)top,(int)(right + .5f),(int)(bottom + .5f));
    }
    final boolean drawAnimation=(child.mPrivateFlags & DRAW_ANIMATION) == DRAW_ANIMATION;
    final boolean isOpaque=child.isOpaque() && !drawAnimation && child.getAnimation() != null;
    final int opaqueFlag=isOpaque ? DIRTY_OPAQUE : DIRTY;
    do {
      View view=null;
      if (parent instanceof View) {
        view=(View)parent;
      }
      if (drawAnimation) {
        if (view != null) {
          view.mPrivateFlags|=DRAW_ANIMATION;
        }
 else         if (parent instanceof ViewRoot) {
          ((ViewRoot)parent).mIsAnimating=true;
        }
      }
      if (view != null && (view.mPrivateFlags & DIRTY_MASK) != DIRTY) {
        view.mPrivateFlags=(view.mPrivateFlags & ~DIRTY_MASK) | opaqueFlag;
      }
      parent=parent.invalidateChildInParent(location,dirty);
      Matrix m=getMatrix();
      if (!m.isIdentity()) {
        float[] boundingRectPoints={dirty.left - mLeft,dirty.top - mTop,dirty.right - mLeft,dirty.top - mTop,dirty.right - mLeft,dirty.bottom - mTop,dirty.left - mLeft,dirty.bottom - mTop};
        m.mapPoints(boundingRectPoints);
        float left=Float.MAX_VALUE;
        float top=Float.MAX_VALUE;
        float right=Float.MIN_VALUE;
        float bottom=Float.MIN_VALUE;
        for (int i=0; i < 8; i+=2) {
          float x=boundingRectPoints[i];
          float y=boundingRectPoints[i + 1];
          if (x < left) {
            left=x;
          }
          if (x > right) {
            right=x;
          }
          if (y < top) {
            top=y;
          }
          if (y > bottom) {
            bottom=y;
          }
        }
        dirty.set((int)left + mLeft,(int)top + mTop,(int)(right + .5f) + mLeft,(int)(bottom + .5f) + mTop);
      }
    }
 while (parent != null);
  }
}
