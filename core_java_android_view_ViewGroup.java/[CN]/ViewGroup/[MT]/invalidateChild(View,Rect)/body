{
  ViewParent parent=this;
  final AttachInfo attachInfo=mAttachInfo;
  if (attachInfo != null) {
    final boolean drawAnimation=(child.mPrivateFlags & PFLAG_DRAW_ANIMATION) == PFLAG_DRAW_ANIMATION;
    Matrix childMatrix=child.getMatrix();
    final boolean isOpaque=child.isOpaque() && !drawAnimation && child.getAnimation() == null && childMatrix.isIdentity();
    int opaqueFlag=isOpaque ? PFLAG_DIRTY_OPAQUE : PFLAG_DIRTY;
    if (child.mLayerType != LAYER_TYPE_NONE) {
      mPrivateFlags|=PFLAG_INVALIDATED;
      mPrivateFlags&=~PFLAG_DRAWING_CACHE_VALID;
      child.mLocalDirtyRect.union(dirty);
    }
    final int[] location=attachInfo.mInvalidateChildLocation;
    location[CHILD_LEFT_INDEX]=child.mLeft;
    location[CHILD_TOP_INDEX]=child.mTop;
    if (!childMatrix.isIdentity() || (mGroupFlags & ViewGroup.FLAG_SUPPORT_STATIC_TRANSFORMATIONS) != 0) {
      RectF boundingRect=attachInfo.mTmpTransformRect;
      boundingRect.set(dirty);
      Matrix transformMatrix;
      if ((mGroupFlags & ViewGroup.FLAG_SUPPORT_STATIC_TRANSFORMATIONS) != 0) {
        Transformation t=attachInfo.mTmpTransformation;
        boolean transformed=getChildStaticTransformation(child,t);
        if (transformed) {
          transformMatrix=attachInfo.mTmpMatrix;
          transformMatrix.set(t.getMatrix());
          if (!childMatrix.isIdentity()) {
            transformMatrix.preConcat(childMatrix);
          }
        }
 else {
          transformMatrix=childMatrix;
        }
      }
 else {
        transformMatrix=childMatrix;
      }
      transformMatrix.mapRect(boundingRect);
      dirty.set((int)(boundingRect.left - 0.5f),(int)(boundingRect.top - 0.5f),(int)(boundingRect.right + 0.5f),(int)(boundingRect.bottom + 0.5f));
    }
    do {
      View view=null;
      if (parent instanceof View) {
        view=(View)parent;
      }
      if (drawAnimation) {
        if (view != null) {
          view.mPrivateFlags|=PFLAG_DRAW_ANIMATION;
        }
 else         if (parent instanceof ViewRootImpl) {
          ((ViewRootImpl)parent).mIsAnimating=true;
        }
      }
      if (view != null) {
        if ((view.mViewFlags & FADING_EDGE_MASK) != 0 && view.getSolidColor() == 0) {
          opaqueFlag=PFLAG_DIRTY;
        }
        if ((view.mPrivateFlags & PFLAG_DIRTY_MASK) != PFLAG_DIRTY) {
          view.mPrivateFlags=(view.mPrivateFlags & ~PFLAG_DIRTY_MASK) | opaqueFlag;
        }
      }
      parent=parent.invalidateChildInParent(location,dirty);
      if (view != null) {
        Matrix m=view.getMatrix();
        if (!m.isIdentity()) {
          RectF boundingRect=attachInfo.mTmpTransformRect;
          boundingRect.set(dirty);
          m.mapRect(boundingRect);
          dirty.set((int)(boundingRect.left - 0.5f),(int)(boundingRect.top - 0.5f),(int)(boundingRect.right + 0.5f),(int)(boundingRect.bottom + 0.5f));
        }
      }
    }
 while (parent != null);
  }
}
