{
  boolean retval=false;
  final float tx=event.mX;
  final float ty=event.mY;
  ViewRoot root=getViewRoot();
switch (event.mAction) {
case DragEvent.ACTION_DRAG_STARTED:
{
      root.setDragFocus(event,null);
      mChildAcceptsDrag=false;
      final int count=mChildrenCount;
      final View[] children=mChildren;
      for (int i=0; i < count; i++) {
        final View child=children[i];
        if (child.getVisibility() == VISIBLE) {
          final boolean handled=children[i].dispatchDragEvent(event);
          children[i].mCanAcceptDrop=handled;
          if (handled) {
            mChildAcceptsDrag=true;
          }
        }
      }
      if (mChildAcceptsDrag) {
        retval=true;
      }
    }
  break;
case DragEvent.ACTION_DRAG_ENDED:
{
  final int count=mChildrenCount;
  final View[] children=mChildren;
  for (int i=0; i < count; i++) {
    final View child=children[i];
    if (child.getVisibility() == VISIBLE) {
      child.dispatchDragEvent(event);
    }
  }
  if (mChildAcceptsDrag) {
    retval=true;
  }
}
break;
case DragEvent.ACTION_DRAG_LOCATION:
{
final View target=findFrontmostDroppableChildAt(event.mX,event.mY,mLocalPoint);
if (mCurrentDragView != target) {
root.setDragFocus(event,target);
mCurrentDragView=target;
}
if (target != null) {
event.mX=mLocalPoint.x;
event.mY=mLocalPoint.y;
retval=target.dispatchDragEvent(event);
event.mX=tx;
event.mY=ty;
}
}
break;
case DragEvent.ACTION_DROP:
{
if (ViewDebug.DEBUG_DRAG) Log.d(View.VIEW_LOG_TAG,"Drop event: " + event);
View target=findFrontmostDroppableChildAt(event.mX,event.mY,mLocalPoint);
if (target != null) {
if (ViewDebug.DEBUG_DRAG) Log.d(View.VIEW_LOG_TAG,"   dispatch drop to " + target);
event.mX=mLocalPoint.x;
event.mY=mLocalPoint.y;
retval=target.dispatchDragEvent(event);
event.mX=tx;
event.mY=ty;
}
 else {
if (ViewDebug.DEBUG_DRAG) {
Log.d(View.VIEW_LOG_TAG,"   not dropped on an accepting view");
}
}
}
break;
}
if (!retval) {
retval=super.dispatchDragEvent(event);
}
return retval;
}
