{
  boolean retval=false;
  final float tx=event.mX;
  final float ty=event.mY;
  ViewRootImpl root=getViewRootImpl();
  final PointF localPoint=getLocalPoint();
switch (event.mAction) {
case DragEvent.ACTION_DRAG_STARTED:
{
      mCurrentDragView=null;
      mCurrentDragStartEvent=DragEvent.obtain(event);
      if (mChildrenInterestedInDrag == null) {
        mChildrenInterestedInDrag=new HashSet<View>();
      }
 else {
        mChildrenInterestedInDrag.clear();
      }
      final int count=mChildrenCount;
      final View[] children=mChildren;
      for (int i=0; i < count; i++) {
        final View child=children[i];
        child.mPrivateFlags2&=~View.DRAG_MASK;
        if (child.getVisibility() == VISIBLE) {
          if (notifyChildOfDragStart(children[i])) {
            retval=true;
          }
        }
      }
      mIsInterestedInDrag=super.dispatchDragEvent(event);
      if (mIsInterestedInDrag) {
        retval=true;
      }
    }
  break;
case DragEvent.ACTION_DRAG_ENDED:
{
  final HashSet<View> childrenInterestedInDrag=mChildrenInterestedInDrag;
  if (childrenInterestedInDrag != null) {
    for (    View child : childrenInterestedInDrag) {
      if (child.dispatchDragEvent(event)) {
        retval=true;
      }
      child.mPrivateFlags2&=~View.DRAG_MASK;
      child.refreshDrawableState();
    }
    childrenInterestedInDrag.clear();
  }
  if (mCurrentDragStartEvent != null) {
    mCurrentDragStartEvent.recycle();
    mCurrentDragStartEvent=null;
  }
  if (mIsInterestedInDrag) {
    if (super.dispatchDragEvent(event)) {
      retval=true;
    }
    mIsInterestedInDrag=false;
  }
}
break;
case DragEvent.ACTION_DRAG_LOCATION:
{
View target=findFrontmostDroppableChildAt(event.mX,event.mY,localPoint);
if (target == null && mIsInterestedInDrag) {
target=this;
}
if (mCurrentDragView != target) {
root.setDragFocus(target);
final int action=event.mAction;
if (mCurrentDragView != null) {
  final View view=mCurrentDragView;
  event.mAction=DragEvent.ACTION_DRAG_EXITED;
  if (view != this) {
    view.dispatchDragEvent(event);
    view.mPrivateFlags2&=~View.PFLAG2_DRAG_HOVERED;
    view.refreshDrawableState();
  }
 else {
    super.dispatchDragEvent(event);
  }
}
mCurrentDragView=target;
if (target != null) {
  event.mAction=DragEvent.ACTION_DRAG_ENTERED;
  if (target != this) {
    target.dispatchDragEvent(event);
    target.mPrivateFlags2|=View.PFLAG2_DRAG_HOVERED;
    target.refreshDrawableState();
  }
 else {
    super.dispatchDragEvent(event);
  }
}
event.mAction=action;
}
if (target != null) {
if (target != this) {
  event.mX=localPoint.x;
  event.mY=localPoint.y;
  retval=target.dispatchDragEvent(event);
  event.mX=tx;
  event.mY=ty;
}
 else {
  retval=super.dispatchDragEvent(event);
}
}
}
break;
case DragEvent.ACTION_DRAG_EXITED:
{
if (mCurrentDragView != null) {
final View view=mCurrentDragView;
if (view != this) {
view.dispatchDragEvent(event);
view.mPrivateFlags2&=~View.PFLAG2_DRAG_HOVERED;
view.refreshDrawableState();
}
 else {
super.dispatchDragEvent(event);
}
mCurrentDragView=null;
}
}
break;
case DragEvent.ACTION_DROP:
{
if (ViewDebug.DEBUG_DRAG) Log.d(View.VIEW_LOG_TAG,"Drop event: " + event);
View target=findFrontmostDroppableChildAt(event.mX,event.mY,localPoint);
if (target != null) {
if (ViewDebug.DEBUG_DRAG) Log.d(View.VIEW_LOG_TAG,"   dispatch drop to " + target);
event.mX=localPoint.x;
event.mY=localPoint.y;
retval=target.dispatchDragEvent(event);
event.mX=tx;
event.mY=ty;
}
 else if (mIsInterestedInDrag) {
retval=super.dispatchDragEvent(event);
}
 else {
if (ViewDebug.DEBUG_DRAG) {
Log.d(View.VIEW_LOG_TAG,"   not dropped on an accepting view");
}
}
}
break;
}
return retval;
}
