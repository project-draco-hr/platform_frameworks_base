{
  final boolean handled;
  final int oldAction=event.getAction();
  if (cancel || oldAction == MotionEvent.ACTION_CANCEL) {
    event.setAction(MotionEvent.ACTION_CANCEL);
    if (child == null) {
      handled=super.dispatchTouchEvent(event);
    }
 else {
      handled=child.dispatchTouchEvent(event);
    }
    event.setAction(oldAction);
    return handled;
  }
  final int oldPointerCount=event.getPointerCount();
  int newPointerCount=0;
  if (desiredPointerIdBits == TouchTarget.ALL_POINTER_IDS) {
    newPointerCount=oldPointerCount;
  }
 else {
    for (int i=0; i < oldPointerCount; i++) {
      final int pointerId=event.getPointerId(i);
      final int pointerIdBit=1 << pointerId;
      if ((pointerIdBit & desiredPointerIdBits) != 0) {
        newPointerCount+=1;
      }
    }
  }
  if (newPointerCount == 0) {
    return false;
  }
  final boolean reuse=newPointerCount == oldPointerCount && (child == null || child.hasIdentityMatrix());
  if (reuse) {
    if (child == null) {
      handled=super.dispatchTouchEvent(event);
    }
 else {
      final float offsetX=mScrollX - child.mLeft;
      final float offsetY=mScrollY - child.mTop;
      event.offsetLocation(offsetX,offsetY);
      handled=child.dispatchTouchEvent(event);
      event.offsetLocation(-offsetX,-offsetY);
    }
    return handled;
  }
  MotionEvent transformedEvent;
  if (newPointerCount == oldPointerCount) {
    transformedEvent=MotionEvent.obtain(event);
  }
 else {
    growTmpPointerArrays(newPointerCount);
    final int[] newPointerIndexMap=mTmpPointerIndexMap;
    final int[] newPointerIds=mTmpPointerIds;
    final MotionEvent.PointerCoords[] newPointerCoords=mTmpPointerCoords;
    int newPointerIndex=0;
    int oldPointerIndex=0;
    while (newPointerIndex < newPointerCount) {
      final int pointerId=event.getPointerId(oldPointerIndex);
      final int pointerIdBits=1 << pointerId;
      if ((pointerIdBits & desiredPointerIdBits) != 0) {
        newPointerIndexMap[newPointerIndex]=oldPointerIndex;
        newPointerIds[newPointerIndex]=pointerId;
        if (newPointerCoords[newPointerIndex] == null) {
          newPointerCoords[newPointerIndex]=new MotionEvent.PointerCoords();
        }
        newPointerIndex+=1;
      }
      oldPointerIndex+=1;
    }
    final int newAction;
    if (cancel) {
      newAction=MotionEvent.ACTION_CANCEL;
    }
 else {
      final int oldMaskedAction=oldAction & MotionEvent.ACTION_MASK;
      if (oldMaskedAction == MotionEvent.ACTION_POINTER_DOWN || oldMaskedAction == MotionEvent.ACTION_POINTER_UP) {
        final int changedPointerId=event.getPointerId((oldAction & MotionEvent.ACTION_POINTER_INDEX_MASK) >> MotionEvent.ACTION_POINTER_INDEX_SHIFT);
        final int changedPointerIdBits=1 << changedPointerId;
        if ((changedPointerIdBits & desiredPointerIdBits) != 0) {
          if (newPointerCount == 1) {
            newAction=oldMaskedAction == MotionEvent.ACTION_POINTER_DOWN ? MotionEvent.ACTION_DOWN : MotionEvent.ACTION_UP;
          }
 else {
            int newChangedPointerIndex=0;
            while (newPointerIds[newChangedPointerIndex] != changedPointerId) {
              newChangedPointerIndex+=1;
            }
            newAction=oldMaskedAction | (newChangedPointerIndex << MotionEvent.ACTION_POINTER_INDEX_SHIFT);
          }
        }
 else {
          newAction=MotionEvent.ACTION_MOVE;
        }
      }
 else {
        newAction=oldMaskedAction;
      }
    }
    transformedEvent=null;
    final int historySize=event.getHistorySize();
    for (int historyIndex=0; historyIndex <= historySize; historyIndex++) {
      for (newPointerIndex=0; newPointerIndex < newPointerCount; newPointerIndex++) {
        final MotionEvent.PointerCoords c=newPointerCoords[newPointerIndex];
        oldPointerIndex=newPointerIndexMap[newPointerIndex];
        if (historyIndex != historySize) {
          event.getHistoricalPointerCoords(oldPointerIndex,historyIndex,c);
        }
 else {
          event.getPointerCoords(oldPointerIndex,c);
        }
      }
      final long eventTime;
      if (historyIndex != historySize) {
        eventTime=event.getHistoricalEventTime(historyIndex);
      }
 else {
        eventTime=event.getEventTime();
      }
      if (transformedEvent == null) {
        transformedEvent=MotionEvent.obtain(event.getDownTime(),eventTime,newAction,newPointerCount,newPointerIds,newPointerCoords,event.getMetaState(),event.getXPrecision(),event.getYPrecision(),event.getDeviceId(),event.getEdgeFlags(),event.getSource(),event.getFlags());
      }
 else {
        transformedEvent.addBatch(eventTime,newPointerCoords,0);
      }
    }
  }
  if (child == null) {
    handled=super.dispatchTouchEvent(transformedEvent);
  }
 else {
    final float offsetX=mScrollX - child.mLeft;
    final float offsetY=mScrollY - child.mTop;
    transformedEvent.offsetLocation(offsetX,offsetY);
    if (!child.hasIdentityMatrix()) {
      transformedEvent.transform(child.getInverseMatrix());
    }
    handled=child.dispatchTouchEvent(transformedEvent);
  }
  transformedEvent.recycle();
  return handled;
}
