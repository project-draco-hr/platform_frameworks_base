{
  super.dispatchProvideStructure(structure);
  if (!isAssistBlocked()) {
    if (structure.getChildCount() == 0) {
      final int childrenCount=getChildCount();
      if (childrenCount > 0) {
        structure.setChildCount(childrenCount);
        ArrayList<View> preorderedList=buildOrderedChildList();
        boolean customOrder=preorderedList == null && isChildrenDrawingOrderEnabled();
        final View[] children=mChildren;
        for (int i=0; i < childrenCount; i++) {
          int childIndex;
          try {
            childIndex=getAndVerifyPreorderedIndex(childrenCount,i,customOrder);
          }
 catch (          IndexOutOfBoundsException e) {
            childIndex=i;
            if (mContext.getApplicationInfo().targetSdkVersion < Build.VERSION_CODES.M) {
              Log.w(TAG,"Bad getChildDrawingOrder while collecting assist @ " + i + " of "+ childrenCount,e);
              customOrder=false;
              if (i > 0) {
                int[] permutation=new int[childrenCount];
                SparseBooleanArray usedIndices=new SparseBooleanArray();
                for (int j=0; j < i; j++) {
                  permutation[j]=getChildDrawingOrder(childrenCount,j);
                  usedIndices.put(permutation[j],true);
                }
                int nextIndex=0;
                for (int j=i; j < childrenCount; j++) {
                  while (usedIndices.get(nextIndex,false)) {
                    nextIndex++;
                  }
                  permutation[j]=nextIndex;
                  nextIndex++;
                }
                preorderedList=new ArrayList<>(childrenCount);
                for (int j=0; j < childrenCount; j++) {
                  preorderedList.add(children[permutation[j]]);
                }
              }
            }
 else {
              throw e;
            }
          }
          final View child=getAndVerifyPreorderedView(preorderedList,children,childIndex);
          final ViewStructure cstructure=structure.newChild(i);
          child.dispatchProvideStructure(cstructure);
        }
      }
    }
  }
}
