{
  if (mAttachInfo == null) {
    return false;
  }
  if (getAlpha() <= 0 || getTransitionAlpha() <= 0 || getVisibility() != VISIBLE) {
    return false;
  }
  if (!child.hasIdentityMatrix()) {
    Matrix matrix=child.getMatrix();
    matrix.mapRect(bounds);
    final int intersectionCount=intersections.size();
    for (int i=0; i < intersectionCount; i++) {
      RectF intersection=intersections.get(i);
      matrix.mapRect(intersection);
    }
  }
  final int dx=child.mLeft - mScrollX;
  final int dy=child.mTop - mScrollY;
  bounds.offset(dx,dy);
  offsetRects(intersections,dx,dy);
  if (!bounds.intersects(0,0,getWidth(),getHeight())) {
    return false;
  }
  ArrayList<View> orderedList=buildOrderedChildList();
  final boolean useCustomOrder=orderedList == null && isChildrenDrawingOrderEnabled();
  final int childCount=mChildrenCount;
  for (int i=childCount - 1; i >= 0; i--) {
    final int childIndex=useCustomOrder ? getChildDrawingOrder(childCount,i) : i;
    final View sibling=(orderedList == null) ? mChildren[childIndex] : orderedList.get(childIndex);
    if (sibling == child) {
      break;
    }
    if (sibling.getVisibility() != View.VISIBLE) {
      continue;
    }
    if (!sibling.isClickable() && !sibling.isLongClickable()) {
      continue;
    }
    RectF siblingBounds=mAttachInfo.mTmpTransformRect1;
    siblingBounds.set(0,0,sibling.getWidth(),sibling.getHeight());
    if (!sibling.hasIdentityMatrix()) {
      sibling.getMatrix().mapRect(siblingBounds);
    }
    final int siblingDx=sibling.mLeft - mScrollX;
    final int siblingDy=sibling.mTop - mScrollY;
    siblingBounds.offset(siblingDx,siblingDy);
    if (siblingBounds.intersect(bounds)) {
      if (siblingBounds.equals(bounds)) {
        return false;
      }
      RectF intersection=new RectF(siblingBounds);
      intersections.add(intersection);
    }
  }
  if (mParent instanceof ViewGroup) {
    ViewGroup parentGroup=(ViewGroup)mParent;
    return parentGroup.translateBoundsAndIntersectionsInWindowCoordinates(this,bounds,intersections);
  }
  return true;
}
