{
  final Element.Builder elementBuilder=new Element.Builder(mRS);
  elementBuilder.add(Element.DataType.UNSIGNED,Element.DataKind.RED,true,8);
  elementBuilder.add(Element.DataType.UNSIGNED,Element.DataKind.GREEN,true,8);
  elementBuilder.add(Element.DataType.UNSIGNED,Element.DataKind.BLUE,true,8);
  elementBuilder.add(Element.DataType.UNSIGNED,Element.DataKind.ALPHA,true,8);
  elementBuilder.add(Element.DataType.FLOAT,Element.DataKind.X,false,32);
  elementBuilder.add(Element.DataType.FLOAT,Element.DataKind.Y,false,32);
  elementBuilder.add(Element.DataType.FLOAT,Element.DataKind.Z,false,32);
  elementBuilder.add(Element.DataType.FLOAT,Element.DataKind.S,false,32);
  elementBuilder.add(Element.DataType.FLOAT,Element.DataKind.T,false,32);
  final Element vertexElement=elementBuilder.create();
  final SimpleMesh.Builder meshBuilder=new SimpleMesh.Builder(mRS);
  final int vertexSlot=meshBuilder.addVertexType(vertexElement,PARTICLES_COUNT * 3);
  meshBuilder.setPrimitive(Primitive.TRIANGLE);
  mParticlesMesh=meshBuilder.create();
  mParticlesMesh.setName("MParticles");
  mParticlesBuffer=mParticlesMesh.createVertexAllocation(vertexSlot);
  mParticlesBuffer.setName("BParticles");
  mParticlesMesh.bindVertexAllocation(mParticlesBuffer,0);
}
