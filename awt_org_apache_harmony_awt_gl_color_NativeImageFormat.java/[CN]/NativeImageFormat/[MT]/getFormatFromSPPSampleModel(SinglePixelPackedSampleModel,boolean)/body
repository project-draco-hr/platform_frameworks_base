{
  int mask=sm.getBitMasks()[0] >>> sm.getBitOffsets()[0];
  if (!(mask == 0xFF || mask == 0xFFFF || mask == 0xFFFFFFFF))   return 0;
  for (int i=1; i < sm.getNumBands(); i++) {
    if ((sm.getBitMasks()[i] >>> sm.getBitOffsets()[i]) != mask)     return 0;
  }
  int pixelSize=0;
  if (sm.getDataType() == DataBuffer.TYPE_USHORT)   pixelSize=2;
 else   if (sm.getDataType() == DataBuffer.TYPE_INT)   pixelSize=4;
 else   return 0;
  int bytes=0;
switch (mask) {
case 0xFF:
    bytes=1;
  break;
case 0xFFFF:
bytes=2;
break;
case 0xFFFFFFFF:
bytes=4;
break;
default :
return 0;
}
int channels=hasAlpha ? sm.getNumBands() - 1 : sm.getNumBands();
int extra=hasAlpha ? 1 : 0;
extra+=pixelSize / bytes - sm.getNumBands();
ArrayList<Integer> offsetsLst=new ArrayList<Integer>();
for (int k=0; k < sm.getNumBands(); k++) {
offsetsLst.add(new Integer(sm.getBitOffsets()[k] / (bytes * 8)));
}
for (int i=0; i < pixelSize / bytes; i++) {
if (offsetsLst.indexOf(new Integer(i)) < 0) offsetsLst.add(new Integer(i));
}
int offsets[]=new int[pixelSize / bytes];
for (int i=0; i < offsetsLst.size(); i++) {
offsets[i]=offsetsLst.get(i).intValue();
}
int doSwap=0;
int swapFirst=0;
boolean knownFormat=false;
int i;
for (i=0; i < pixelSize; i++) {
if (offsets[i] != i) break;
}
if (i == pixelSize) {
doSwap=0;
swapFirst=0;
knownFormat=true;
}
if (!knownFormat) {
for (i=0; i < pixelSize - 1; i++) {
if (offsets[i] != i + 1) break;
}
if (offsets[i] == 0) i++;
if (i == pixelSize) {
doSwap=0;
swapFirst=1;
knownFormat=true;
}
}
if (!knownFormat) {
for (i=0; i < pixelSize - 1; i++) {
if (offsets[i] != pixelSize - 2 - i) break;
}
if (offsets[i] == pixelSize - 1) i++;
if (i == pixelSize) {
doSwap=1;
swapFirst=1;
knownFormat=true;
}
}
if (!knownFormat) {
for (i=0; i < pixelSize; i++) {
if (offsets[i] != pixelSize - 1 - i) break;
}
if (i == pixelSize) {
doSwap=1;
swapFirst=0;
knownFormat=true;
}
}
if (!knownFormat) return 0;
return channelsSh(channels) | bytesSh(bytes) | extraSh(extra)| doswapSh(doSwap)| swapfirstSh(swapFirst);
}
