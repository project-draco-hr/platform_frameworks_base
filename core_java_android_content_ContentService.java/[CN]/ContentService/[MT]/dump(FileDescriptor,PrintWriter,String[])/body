{
  mContext.enforceCallingOrSelfPermission(Manifest.permission.DUMP,"caller doesn't have the DUMP permission");
  long identityToken=clearCallingIdentity();
  try {
    if (mSyncManager == null) {
      pw.println("No SyncManager created!  (Disk full?)");
    }
 else {
      mSyncManager.dump(fd,pw);
    }
    pw.println();
    pw.println("Observer tree:");
synchronized (mRootNode) {
      int[] counts=new int[2];
      final SparseIntArray pidCounts=new SparseIntArray();
      mRootNode.dumpLocked(fd,pw,args,"","  ",counts,pidCounts);
      pw.println();
      ArrayList<Integer> sorted=new ArrayList<Integer>();
      for (int i=0; i < pidCounts.size(); i++) {
        sorted.add(pidCounts.keyAt(i));
      }
      Collections.sort(sorted,new Comparator<Integer>(){
        @Override public int compare(        Integer lhs,        Integer rhs){
          int lc=pidCounts.get(lhs);
          int rc=pidCounts.get(rhs);
          if (lc < rc) {
            return 1;
          }
 else           if (lc > rc) {
            return -1;
          }
          return 0;
        }
      }
);
      for (int i=0; i < sorted.size(); i++) {
        int pid=sorted.get(i);
        pw.print("  pid ");
        pw.print(pid);
        pw.print(": ");
        pw.print(pidCounts.get(pid));
        pw.println(" observers");
      }
      pw.println();
      pw.print(" Total number of nodes: ");
      pw.println(counts[0]);
      pw.print(" Total number of observers: ");
      pw.println(counts[1]);
    }
  }
  finally {
    restoreCallingIdentity(identityToken);
  }
}
