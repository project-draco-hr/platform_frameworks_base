{
  final int restoreTo=canvas.save();
  final boolean childHasIdentityMatrix=child.hasIdentityMatrix();
  int flags=thisVG.mGroupFlags;
  Transformation transformToApply=null;
  boolean concatMatrix=false;
  if ((flags & ViewGroup.FLAG_SUPPORT_STATIC_TRANSFORMATIONS) != 0) {
    final Transformation t=thisVG.getChildTransformation();
    final boolean hasTransform=thisVG.getChildStaticTransformation(child,t);
    if (hasTransform) {
      final int transformType=t.getTransformationType();
      transformToApply=transformType != Transformation.TYPE_IDENTITY ? t : null;
      concatMatrix=(transformType & Transformation.TYPE_MATRIX) != 0;
    }
  }
  concatMatrix|=childHasIdentityMatrix;
  child.computeScroll();
  int sx=child.mScrollX;
  int sy=child.mScrollY;
  canvas.translate(child.mLeft - sx,child.mTop - sy);
  float alpha=child.getAlpha() * child.getTransitionAlpha();
  if (transformToApply != null || alpha < 1 || !childHasIdentityMatrix) {
    if (transformToApply != null || !childHasIdentityMatrix) {
      int transX=-sx;
      int transY=-sy;
      if (transformToApply != null) {
        if (concatMatrix) {
          canvas.translate(-transX,-transY);
          canvas.concat(transformToApply.getMatrix());
          canvas.translate(transX,transY);
        }
        if (!childHasIdentityMatrix) {
          canvas.translate(-transX,-transY);
          canvas.concat(child.getMatrix());
          canvas.translate(transX,transY);
        }
      }
    }
  }
  return restoreTo;
}
