{
  final Account account1=new Account("a@example.com","example.type");
  final Account account2=new Account("b@example.com","example.type.2");
  final String authority1="testprovider1";
  final String authority2="testprovider2";
  final Bundle extras1=new Bundle();
  extras1.putString("a","1");
  final Bundle extras2=new Bundle();
  extras2.putString("a","2");
  extras2.putLong("b",2);
  extras2.putInt("c",1);
  extras2.putBoolean("d",true);
  extras2.putDouble("e",1.2);
  extras2.putFloat("f",4.5f);
  extras2.putParcelable("g",account1);
  final int period1=200;
  final int period2=1000;
  PeriodicSync sync1=new PeriodicSync(account1,authority1,extras1,period1);
  PeriodicSync sync2=new PeriodicSync(account1,authority1,extras2,period1);
  PeriodicSync sync3=new PeriodicSync(account1,authority2,extras1,period1);
  PeriodicSync sync4=new PeriodicSync(account1,authority2,extras2,period2);
  PeriodicSync sync5=new PeriodicSync(account2,authority1,extras1,period1);
  MockContentResolver mockResolver=new MockContentResolver();
  SyncStorageEngine engine=SyncStorageEngine.newTestInstance(new TestContext(mockResolver,getContext()));
  removePeriodicSyncs(engine,account1,authority1);
  removePeriodicSyncs(engine,account2,authority1);
  removePeriodicSyncs(engine,account1,authority2);
  removePeriodicSyncs(engine,account2,authority2);
  engine.setMasterSyncAutomatically(false);
  engine.setIsSyncable(account1,authority1,1);
  engine.setSyncAutomatically(account1,authority1,true);
  engine.setIsSyncable(account2,authority1,1);
  engine.setSyncAutomatically(account2,authority1,true);
  engine.setIsSyncable(account1,authority2,1);
  engine.setSyncAutomatically(account1,authority2,false);
  engine.setIsSyncable(account2,authority2,0);
  engine.setSyncAutomatically(account2,authority2,true);
  engine.addPeriodicSync(sync1.account,sync1.authority,sync1.extras,sync1.period);
  engine.addPeriodicSync(sync2.account,sync2.authority,sync2.extras,sync2.period);
  engine.addPeriodicSync(sync3.account,sync3.authority,sync3.extras,sync3.period);
  engine.addPeriodicSync(sync4.account,sync4.authority,sync4.extras,sync4.period);
  engine.addPeriodicSync(sync5.account,sync5.authority,sync5.extras,sync5.period);
  engine.writeAllState();
  engine.clearAndReadState();
  List<PeriodicSync> syncs=engine.getPeriodicSyncs(account1,authority1);
  assertEquals(2,syncs.size());
  assertEquals(sync1,syncs.get(0));
  assertEquals(sync2,syncs.get(1));
  syncs=engine.getPeriodicSyncs(account1,authority2);
  assertEquals(2,syncs.size());
  assertEquals(sync3,syncs.get(0));
  assertEquals(sync4,syncs.get(1));
  syncs=engine.getPeriodicSyncs(account2,authority1);
  assertEquals(1,syncs.size());
  assertEquals(sync5,syncs.get(0));
  assertEquals(true,engine.getSyncAutomatically(account1,authority1));
  assertEquals(true,engine.getSyncAutomatically(account2,authority1));
  assertEquals(false,engine.getSyncAutomatically(account1,authority2));
  assertEquals(true,engine.getSyncAutomatically(account2,authority2));
  assertEquals(1,engine.getIsSyncable(account1,authority1));
  assertEquals(1,engine.getIsSyncable(account2,authority1));
  assertEquals(1,engine.getIsSyncable(account1,authority2));
  assertEquals(0,engine.getIsSyncable(account2,authority2));
}
