{
  if (StackId.isMultiWindowStack(stackId) && !mService.mSupportsMultiWindow) {
    throw new IllegalStateException("moveTaskToStackUncheckedLocked: Device doesn't " + "support multi-window task=" + task + " to stackId="+ stackId);
  }
  final ActivityRecord r=task.getTopActivity();
  final ActivityStack prevStack=task.stack;
  final boolean wasFocused=isFocusedStack(prevStack) && (topRunningActivityLocked() == r);
  final boolean wasResumed=wasFocused && (prevStack.mResumedActivity == r);
  final boolean wasFront=isFrontStack(prevStack) && (prevStack.topRunningActivityLocked() == r);
  if (stackId == DOCKED_STACK_ID && !task.isResizeable()) {
    stackId=(prevStack != null) ? prevStack.mStackId : FULLSCREEN_WORKSPACE_STACK_ID;
    Slog.w(TAG,"Can not move unresizeable task=" + task + " to docked stack. Moving to stackId="+ stackId+ " instead.");
  }
  task.mTemporarilyUnresizable=true;
  final ActivityStack stack=getStack(stackId,CREATE_IF_NEEDED,toTop);
  task.mTemporarilyUnresizable=false;
  mWindowManager.moveTaskToStack(task.taskId,stack.mStackId,toTop);
  stack.addTask(task,toTop,reason);
  stack.moveToFrontAndResumeStateIfNeeded(r,forceFocus || wasFocused || wasFront,wasResumed,reason);
  return stack;
}
