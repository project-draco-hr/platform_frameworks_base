{
  final TaskRecord task;
  final int callingUid;
  final String callingPackage;
  final Intent intent;
  final int userId;
  final ActivityOptions activityOptions=(bOptions != null) ? new ActivityOptions(bOptions) : null;
  final int launchStackId=(activityOptions != null) ? activityOptions.getLaunchStackId() : INVALID_STACK_ID;
  if (launchStackId == HOME_STACK_ID) {
    throw new IllegalArgumentException("startActivityFromRecentsInner: Task " + taskId + " can't be launch in the home stack.");
  }
  if (launchStackId == DOCKED_STACK_ID) {
    mWindowManager.setDockedStackCreateState(activityOptions.getDockCreateMode(),null);
    deferUpdateBounds(HOME_STACK_ID);
    mWindowManager.prepareAppTransition(TRANSIT_DOCK_TASK_FROM_RECENTS,false);
  }
  task=anyTaskForIdLocked(taskId,RESTORE_FROM_RECENTS,launchStackId);
  if (task == null) {
    continueUpdateBounds(HOME_STACK_ID);
    mWindowManager.executeAppTransition();
    throw new IllegalArgumentException("startActivityFromRecentsInner: Task " + taskId + " not found.");
  }
  if (launchStackId != INVALID_STACK_ID) {
    if (task.stack.mStackId != launchStackId) {
      moveTaskToStackLocked(taskId,launchStackId,ON_TOP,FORCE_FOCUS,"startActivityFromRecents",ANIMATE);
    }
  }
  if (!mService.mUserController.shouldConfirmCredentials(task.userId) && task.getRootActivity() != null) {
    mActivityMetricsLogger.notifyActivityLaunching();
    mService.moveTaskToFrontLocked(task.taskId,0,bOptions);
    if (launchStackId == DOCKED_STACK_ID) {
      setResizingDuringAnimation(taskId);
    }
    return ActivityManager.START_TASK_TO_FRONT;
  }
  callingUid=task.mCallingUid;
  callingPackage=task.mCallingPackage;
  intent=task.intent;
  intent.addFlags(Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY);
  userId=task.userId;
  int result=mService.startActivityInPackage(callingUid,callingPackage,intent,null,null,null,0,0,bOptions,userId,null,task);
  if (launchStackId == DOCKED_STACK_ID) {
    setResizingDuringAnimation(task.taskId);
  }
  return result;
}
