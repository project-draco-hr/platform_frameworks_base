{
  final int startAnyPerm=mService.checkPermission(START_ANY_ACTIVITY,callingPid,callingUid);
  if (startAnyPerm == PERMISSION_GRANTED) {
    return true;
  }
  final int componentRestriction=getComponentRestrictionForCallingPackage(aInfo,callingPackage,callingPid,callingUid,ignoreTargetSecurity);
  final int actionRestriction=getActionRestrictionForCallingPackage(intent.getAction(),callingPackage,callingPid,callingUid);
  if (componentRestriction == ACTIVITY_RESTRICTION_PERMISSION || actionRestriction == ACTIVITY_RESTRICTION_PERMISSION) {
    if (resultRecord != null) {
      resultStack.sendActivityResultLocked(-1,resultRecord,resultWho,requestCode,Activity.RESULT_CANCELED,null);
    }
    final String msg;
    if (actionRestriction == ACTIVITY_RESTRICTION_PERMISSION) {
      msg="Permission Denial: starting " + intent.toString() + " from "+ callerApp+ " (pid="+ callingPid+ ", uid="+ callingUid+ ")"+ " with revoked permission "+ ACTION_TO_RUNTIME_PERMISSION.get(intent.getAction());
    }
 else     if (!aInfo.exported) {
      msg="Permission Denial: starting " + intent.toString() + " from "+ callerApp+ " (pid="+ callingPid+ ", uid="+ callingUid+ ")"+ " not exported from uid "+ aInfo.applicationInfo.uid;
    }
 else {
      msg="Permission Denial: starting " + intent.toString() + " from "+ callerApp+ " (pid="+ callingPid+ ", uid="+ callingUid+ ")"+ " requires "+ aInfo.permission;
    }
    Slog.w(TAG,msg);
    throw new SecurityException(msg);
  }
  if (actionRestriction == ACTIVITY_RESTRICTION_APPOP) {
    final String message="Appop Denial: starting " + intent.toString() + " from "+ callerApp+ " (pid="+ callingPid+ ", uid="+ callingUid+ ")"+ " requires "+ AppOpsManager.permissionToOp(ACTION_TO_RUNTIME_PERMISSION.get(intent.getAction()));
    Slog.w(TAG,message);
    return false;
  }
 else   if (componentRestriction == ACTIVITY_RESTRICTION_APPOP) {
    final String message="Appop Denial: starting " + intent.toString() + " from "+ callerApp+ " (pid="+ callingPid+ ", uid="+ callingUid+ ")"+ " requires appop "+ AppOpsManager.permissionToOp(aInfo.permission);
    Slog.w(TAG,message);
    return false;
  }
  if (options != null && options.getLaunchTaskId() != -1) {
    final int startInTaskPerm=mService.checkPermission(START_TASKS_FROM_RECENTS,callingPid,callingUid);
    if (startInTaskPerm != PERMISSION_GRANTED) {
      final String msg="Permission Denial: starting " + intent.toString() + " from "+ callerApp+ " (pid="+ callingPid+ ", uid="+ callingUid+ ") with launchTaskId="+ options.getLaunchTaskId();
      Slog.w(TAG,msg);
      throw new SecurityException(msg);
    }
  }
  return true;
}
