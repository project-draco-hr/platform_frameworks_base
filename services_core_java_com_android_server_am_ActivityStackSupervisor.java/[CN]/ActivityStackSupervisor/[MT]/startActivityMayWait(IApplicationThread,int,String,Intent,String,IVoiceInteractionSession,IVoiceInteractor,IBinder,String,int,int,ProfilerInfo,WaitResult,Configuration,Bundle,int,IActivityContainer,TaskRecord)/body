{
  if (intent != null && intent.hasFileDescriptors()) {
    throw new IllegalArgumentException("File descriptors passed in Intent");
  }
  boolean componentSpecified=intent.getComponent() != null;
  intent=new Intent(intent);
  ActivityInfo aInfo=resolveActivity(intent,resolvedType,startFlags,profilerInfo,userId);
  ActivityContainer container=(ActivityContainer)iContainer;
synchronized (mService) {
    if (container != null && container.mParentActivity != null && container.mParentActivity.state != ActivityState.RESUMED) {
      return ActivityManager.START_CANCELED;
    }
    final int realCallingPid=Binder.getCallingPid();
    final int realCallingUid=Binder.getCallingUid();
    int callingPid;
    if (callingUid >= 0) {
      callingPid=-1;
    }
 else     if (caller == null) {
      callingPid=realCallingPid;
      callingUid=realCallingUid;
    }
 else {
      callingPid=callingUid=-1;
    }
    final ActivityStack stack;
    if (container == null || container.mStack.isOnHomeDisplay()) {
      stack=getFocusedStack();
    }
 else {
      stack=container.mStack;
    }
    stack.mConfigWillChange=config != null && mService.mConfiguration.diff(config) != 0;
    if (DEBUG_CONFIGURATION)     Slog.v(TAG,"Starting activity when config will change = " + stack.mConfigWillChange);
    final long origId=Binder.clearCallingIdentity();
    if (aInfo != null && (aInfo.applicationInfo.flags & ApplicationInfo.FLAG_CANT_SAVE_STATE) != 0) {
      if (aInfo.processName.equals(aInfo.applicationInfo.packageName)) {
        if (mService.mHeavyWeightProcess != null && (mService.mHeavyWeightProcess.info.uid != aInfo.applicationInfo.uid || !mService.mHeavyWeightProcess.processName.equals(aInfo.processName))) {
          int appCallingUid=callingUid;
          if (caller != null) {
            ProcessRecord callerApp=mService.getRecordForAppLocked(caller);
            if (callerApp != null) {
              appCallingUid=callerApp.info.uid;
            }
 else {
              Slog.w(TAG,"Unable to find app for caller " + caller + " (pid="+ callingPid+ ") when starting: "+ intent.toString());
              ActivityOptions.abort(options);
              return ActivityManager.START_PERMISSION_DENIED;
            }
          }
          IIntentSender target=mService.getIntentSenderLocked(ActivityManager.INTENT_SENDER_ACTIVITY,"android",appCallingUid,userId,null,null,0,new Intent[]{intent},new String[]{resolvedType},PendingIntent.FLAG_CANCEL_CURRENT | PendingIntent.FLAG_ONE_SHOT,null);
          Intent newIntent=new Intent();
          if (requestCode >= 0) {
            newIntent.putExtra(HeavyWeightSwitcherActivity.KEY_HAS_RESULT,true);
          }
          newIntent.putExtra(HeavyWeightSwitcherActivity.KEY_INTENT,new IntentSender(target));
          if (mService.mHeavyWeightProcess.activities.size() > 0) {
            ActivityRecord hist=mService.mHeavyWeightProcess.activities.get(0);
            newIntent.putExtra(HeavyWeightSwitcherActivity.KEY_CUR_APP,hist.packageName);
            newIntent.putExtra(HeavyWeightSwitcherActivity.KEY_CUR_TASK,hist.task.taskId);
          }
          newIntent.putExtra(HeavyWeightSwitcherActivity.KEY_NEW_APP,aInfo.packageName);
          newIntent.setFlags(intent.getFlags());
          newIntent.setClassName("android",HeavyWeightSwitcherActivity.class.getName());
          intent=newIntent;
          resolvedType=null;
          caller=null;
          callingUid=Binder.getCallingUid();
          callingPid=Binder.getCallingPid();
          componentSpecified=true;
          try {
            ResolveInfo rInfo=AppGlobals.getPackageManager().resolveIntent(intent,null,PackageManager.MATCH_DEFAULT_ONLY | ActivityManagerService.STOCK_PM_FLAGS,userId);
            aInfo=rInfo != null ? rInfo.activityInfo : null;
            aInfo=mService.getActivityInfoForUser(aInfo,userId);
          }
 catch (          RemoteException e) {
            aInfo=null;
          }
        }
      }
    }
    int res=startActivityLocked(caller,intent,resolvedType,aInfo,voiceSession,voiceInteractor,resultTo,resultWho,requestCode,callingPid,callingUid,callingPackage,realCallingPid,realCallingUid,startFlags,options,componentSpecified,null,container,inTask);
    Binder.restoreCallingIdentity(origId);
    if (stack.mConfigWillChange) {
      mService.enforceCallingPermission(android.Manifest.permission.CHANGE_CONFIGURATION,"updateConfiguration()");
      stack.mConfigWillChange=false;
      if (DEBUG_CONFIGURATION)       Slog.v(TAG,"Updating to new configuration after starting activity.");
      mService.updateConfigurationLocked(config,null,false,false);
    }
    if (outResult != null) {
      outResult.result=res;
      if (res == ActivityManager.START_SUCCESS) {
        mWaitingActivityLaunched.add(outResult);
        do {
          try {
            mService.wait();
          }
 catch (          InterruptedException e) {
          }
        }
 while (!outResult.timeout && outResult.who == null);
      }
 else       if (res == ActivityManager.START_TASK_TO_FRONT) {
        ActivityRecord r=stack.topRunningActivityLocked(null);
        if (r.nowVisible && r.state == ActivityState.RESUMED) {
          outResult.timeout=false;
          outResult.who=new ComponentName(r.info.packageName,r.info.name);
          outResult.totalTime=0;
          outResult.thisTime=0;
        }
 else {
          outResult.thisTime=SystemClock.uptimeMillis();
          mWaitingActivityVisible.add(outResult);
          do {
            try {
              mService.wait();
            }
 catch (            InterruptedException e) {
            }
          }
 while (!outResult.timeout && outResult.who == null);
        }
      }
    }
    return res;
  }
}
