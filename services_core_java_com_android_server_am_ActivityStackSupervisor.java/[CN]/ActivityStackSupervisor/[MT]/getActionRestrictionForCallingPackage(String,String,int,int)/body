{
  if (action == null) {
    return ACTIVITY_RESTRICTION_NONE;
  }
  String permission=ACTION_TO_RUNTIME_PERMISSION.get(action);
  if (permission == null) {
    return ACTIVITY_RESTRICTION_NONE;
  }
  final PackageInfo packageInfo;
  try {
    packageInfo=mService.mContext.getPackageManager().getPackageInfo(callingPackage,PackageManager.GET_PERMISSIONS);
  }
 catch (  PackageManager.NameNotFoundException e) {
    Slog.i(TAG,"Cannot find package info for " + callingPackage);
    return ACTIVITY_RESTRICTION_NONE;
  }
  if (!ArrayUtils.contains(packageInfo.requestedPermissions,permission)) {
    return ACTIVITY_RESTRICTION_NONE;
  }
  if (mService.checkPermission(permission,callingPid,callingUid) == PackageManager.PERMISSION_DENIED) {
    return ACTIVITY_RESTRICTION_PERMISSION;
  }
  final int opCode=AppOpsManager.permissionToOpCode(permission);
  if (opCode == AppOpsManager.OP_NONE) {
    return ACTIVITY_RESTRICTION_NONE;
  }
  if (mService.mAppOpsService.noteOperation(opCode,callingUid,callingPackage) != AppOpsManager.MODE_ALLOWED) {
    return ACTIVITY_RESTRICTION_APPOP;
  }
  return ACTIVITY_RESTRICTION_NONE;
}
