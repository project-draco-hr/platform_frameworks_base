{
  String[] tokens=string.split(" ");
  if (tokens.length < 2) {
    throw new IllegalArgumentException("Malformed event " + string);
  }
  if (tokens[0].endsWith("PBC-REQ"))   event=PBC_REQ;
 else   if (tokens[0].endsWith("PBC-RESP"))   event=PBC_RSP;
 else   if (tokens[0].endsWith("ENTER-PIN"))   event=ENTER_PIN;
 else   if (tokens[0].endsWith("SHOW-PIN"))   event=SHOW_PIN;
 else   throw new IllegalArgumentException("Malformed event " + string);
  device=new WifiP2pDevice();
  for (  String token : tokens) {
    String[] nameValue=token.split("=");
    if (nameValue.length != 2) {
      if (token.matches("(([0-9a-f]{2}:){5}[0-9a-f]{2})")) {
        device.deviceAddress=token;
      }
 else       if (token.matches("[0-9]+")) {
        pin=token;
      }
 else {
      }
      continue;
    }
    if (nameValue[0].equals("p2p_dev_addr")) {
      device.deviceAddress=nameValue[1];
      continue;
    }
    if (nameValue[0].equals("pri_dev_type")) {
      device.primaryDeviceType=nameValue[1];
      continue;
    }
    if (nameValue[0].equals("name")) {
      device.deviceName=trimQuotes(nameValue[1]);
      continue;
    }
    if (nameValue[0].equals("config_methods")) {
      device.wpsConfigMethodsSupported=parseHex(nameValue[1]);
      continue;
    }
    if (nameValue[0].equals("dev_capab")) {
      device.deviceCapability=parseHex(nameValue[1]);
      continue;
    }
    if (nameValue[0].equals("group_capab")) {
      device.groupCapability=parseHex(nameValue[1]);
      continue;
    }
  }
}
