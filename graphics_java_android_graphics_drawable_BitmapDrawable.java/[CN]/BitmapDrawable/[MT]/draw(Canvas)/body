{
  final Bitmap bitmap=mBitmap;
  if (bitmap == null) {
    return;
  }
  final BitmapState state=mBitmapState;
  final Paint paint=state.mPaint;
  if (state.mRebuildShader) {
    final Shader.TileMode tmx=state.mTileModeX;
    final Shader.TileMode tmy=state.mTileModeY;
    if (tmx == null && tmy == null) {
      paint.setShader(null);
    }
 else {
      paint.setShader(new BitmapShader(bitmap,tmx == null ? Shader.TileMode.CLAMP : tmx,tmy == null ? Shader.TileMode.CLAMP : tmy));
    }
    state.mRebuildShader=false;
    copyBounds(mDstRect);
  }
  final int restoreAlpha;
  if (state.mBaseAlpha != 1.0f) {
    final Paint p=getPaint();
    restoreAlpha=p.getAlpha();
    p.setAlpha((int)(restoreAlpha * state.mBaseAlpha + 0.5f));
  }
 else {
    restoreAlpha=-1;
  }
  final boolean clearColorFilter;
  if (mTintFilter != null && paint.getColorFilter() == null) {
    paint.setColorFilter(mTintFilter);
    clearColorFilter=true;
  }
 else {
    clearColorFilter=false;
  }
  final Shader shader=paint.getShader();
  final boolean needMirroring=needMirroring();
  if (shader == null) {
    if (mApplyGravity) {
      final int layoutDirection=getLayoutDirection();
      Gravity.apply(state.mGravity,mBitmapWidth,mBitmapHeight,getBounds(),mDstRect,layoutDirection);
      mApplyGravity=false;
    }
    if (needMirroring) {
      canvas.save();
      canvas.translate(mDstRect.right - mDstRect.left,0);
      canvas.scale(-1.0f,1.0f);
    }
    canvas.drawBitmap(bitmap,null,mDstRect,paint);
    if (needMirroring) {
      canvas.restore();
    }
  }
 else {
    if (mApplyGravity) {
      copyBounds(mDstRect);
      mApplyGravity=false;
    }
    if (needMirroring) {
      updateMirrorMatrix(mDstRect.right - mDstRect.left);
      shader.setLocalMatrix(mMirrorMatrix);
    }
 else {
      if (mMirrorMatrix != null) {
        mMirrorMatrix=null;
        shader.setLocalMatrix(Matrix.IDENTITY_MATRIX);
      }
    }
    canvas.drawRect(mDstRect,paint);
  }
  if (clearColorFilter) {
    paint.setColorFilter(null);
  }
  if (restoreAlpha >= 0) {
    paint.setAlpha(restoreAlpha);
  }
}
