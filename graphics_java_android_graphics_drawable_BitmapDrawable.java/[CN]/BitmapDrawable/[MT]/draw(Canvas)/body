{
  Bitmap bitmap=mBitmap;
  if (bitmap != null) {
    final BitmapState state=mBitmapState;
    if (state.mRebuildShader) {
      Shader.TileMode tmx=state.mTileModeX;
      Shader.TileMode tmy=state.mTileModeY;
      if (tmx == null && tmy == null) {
        state.mPaint.setShader(null);
      }
 else {
        state.mPaint.setShader(new BitmapShader(bitmap,tmx == null ? Shader.TileMode.CLAMP : tmx,tmy == null ? Shader.TileMode.CLAMP : tmy));
      }
      state.mRebuildShader=false;
      copyBounds(mDstRect);
    }
    Shader shader=state.mPaint.getShader();
    final boolean needMirroring=needMirroring();
    if (shader == null) {
      if (mApplyGravity) {
        final int layoutDirection=getLayoutDirection();
        Gravity.apply(state.mGravity,mBitmapWidth,mBitmapHeight,getBounds(),mDstRect,layoutDirection);
        mApplyGravity=false;
      }
      if (needMirroring) {
        canvas.save();
        canvas.translate(mDstRect.right - mDstRect.left,0);
        canvas.scale(-1.0f,1.0f);
      }
      canvas.drawBitmap(bitmap,null,mDstRect,state.mPaint);
      if (needMirroring) {
        canvas.restore();
      }
    }
 else {
      if (mApplyGravity) {
        copyBounds(mDstRect);
        mApplyGravity=false;
      }
      if (needMirroring) {
        updateMirrorMatrix(mDstRect.right - mDstRect.left);
        shader.setLocalMatrix(mMirrorMatrix);
      }
 else {
        if (mMirrorMatrix != null) {
          mMirrorMatrix=null;
          shader.setLocalMatrix(Matrix.IDENTITY_MATRIX);
        }
      }
      canvas.drawRect(mDstRect,state.mPaint);
    }
  }
}
