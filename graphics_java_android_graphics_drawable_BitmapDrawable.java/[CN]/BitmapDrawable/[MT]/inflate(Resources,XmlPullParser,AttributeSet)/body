{
  super.inflate(r,parser,attrs);
  final BitmapState state=mBitmapState;
  final TypedArray a=r.obtainAttributes(attrs,com.android.internal.R.styleable.BitmapDrawable);
  final int id=a.getResourceId(com.android.internal.R.styleable.BitmapDrawable_src,0);
  if (id == 0) {
    throw new XmlPullParserException(parser.getPositionDescription() + ": <bitmap> requires a valid src attribute");
  }
  final Bitmap bitmap=BitmapFactory.decodeResource(r,id);
  if (bitmap == null) {
    throw new XmlPullParserException(parser.getPositionDescription() + ": <bitmap> requires a valid src attribute");
  }
  state.mBitmap=bitmap;
  setBitmap(bitmap);
  setTargetDensity(r.getDisplayMetrics());
  setMipMap(a.getBoolean(com.android.internal.R.styleable.BitmapDrawable_mipMap,bitmap.hasMipMap()));
  setAutoMirrored(a.getBoolean(com.android.internal.R.styleable.BitmapDrawable_autoMirrored,false));
  final int tintModeValue=a.getInt(com.android.internal.R.styleable.BitmapDrawable_tintMode,-1);
  state.mTintMode=Drawable.parseTintMode(tintModeValue,Mode.SRC_IN);
  state.mTint=a.getColorStateList(com.android.internal.R.styleable.BitmapDrawable_tint);
  if (state.mTint != null) {
    final int color=state.mTint.getColorForState(getState(),0);
    mTintFilter=new PorterDuffColorFilter(color,mBitmapState.mTintMode);
  }
  final Paint paint=state.mPaint;
  paint.setAntiAlias(a.getBoolean(com.android.internal.R.styleable.BitmapDrawable_antialias,paint.isAntiAlias()));
  paint.setFilterBitmap(a.getBoolean(com.android.internal.R.styleable.BitmapDrawable_filter,paint.isFilterBitmap()));
  paint.setDither(a.getBoolean(com.android.internal.R.styleable.BitmapDrawable_dither,paint.isDither()));
  setGravity(a.getInt(com.android.internal.R.styleable.BitmapDrawable_gravity,Gravity.FILL));
  int tileMode=a.getInt(com.android.internal.R.styleable.BitmapDrawable_tileMode,-1);
  if (tileMode != -1) {
switch (tileMode) {
case 0:
      setTileModeXY(Shader.TileMode.CLAMP,Shader.TileMode.CLAMP);
    break;
case 1:
  setTileModeXY(Shader.TileMode.REPEAT,Shader.TileMode.REPEAT);
break;
case 2:
setTileModeXY(Shader.TileMode.MIRROR,Shader.TileMode.MIRROR);
break;
}
}
a.recycle();
}
