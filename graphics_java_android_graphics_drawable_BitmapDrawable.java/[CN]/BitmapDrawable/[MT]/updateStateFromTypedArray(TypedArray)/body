{
  final Resources r=a.getResources();
  final BitmapState state=mBitmapState;
  final Paint paint=mBitmapState.mPaint;
  if (a.hasValue(R.styleable.BitmapDrawable_antialias)) {
    final boolean antiAlias=a.getBoolean(R.styleable.BitmapDrawable_antialias,paint.isAntiAlias());
    paint.setAntiAlias(antiAlias);
  }
  if (a.hasValue(R.styleable.BitmapDrawable_filter)) {
    final boolean filter=a.getBoolean(R.styleable.BitmapDrawable_filter,paint.isFilterBitmap());
    paint.setFilterBitmap(filter);
  }
  if (a.hasValue(R.styleable.BitmapDrawable_dither)) {
    final boolean dither=a.getBoolean(R.styleable.BitmapDrawable_dither,paint.isDither());
    paint.setDither(dither);
  }
  if (a.hasValue(R.styleable.BitmapDrawable_gravity)) {
    final int gravity=a.getInt(R.styleable.BitmapDrawable_gravity,Gravity.FILL);
    setGravity(gravity);
  }
  if (a.hasValue(R.styleable.BitmapDrawable_tileMode)) {
    final int tileMode=a.getInt(R.styleable.BitmapDrawable_tileMode,-1);
    setTileModeInternal(tileMode);
  }
  if (a.hasValue(R.styleable.BitmapDrawable_src)) {
    final int id=a.getResourceId(R.styleable.BitmapDrawable_src,0);
    if (id == 0) {
      throw new RuntimeException(a.getPositionDescription() + ": <bitmap> requires a valid src attribute");
    }
    final Bitmap bitmap=BitmapFactory.decodeResource(r,id);
    if (bitmap == null) {
      throw new RuntimeException(a.getPositionDescription() + ": <bitmap> requires a valid src attribute");
    }
    setBitmap(bitmap);
  }
  setTargetDensity(r.getDisplayMetrics());
  if (a.hasValue(R.styleable.BitmapDrawable_mipMap)) {
    final boolean mipMap=a.getBoolean(R.styleable.BitmapDrawable_mipMap,state.mBitmap.hasMipMap());
    setMipMap(mipMap);
  }
  if (a.hasValue(R.styleable.BitmapDrawable_autoMirrored)) {
    final boolean autoMirrored=a.getBoolean(R.styleable.BitmapDrawable_autoMirrored,false);
    setAutoMirrored(autoMirrored);
  }
  if (a.hasValue(R.styleable.BitmapDrawable_tintMode)) {
    final int modeValue=a.getInt(R.styleable.BitmapDrawable_tintMode,-1);
    state.mTintMode=Drawable.parseTintMode(modeValue,Mode.SRC_IN);
  }
  if (a.hasValue(R.styleable.BitmapDrawable_tint)) {
    final ColorStateList tint=a.getColorStateList(R.styleable.BitmapDrawable_tint);
    if (tint != null) {
      state.mTint=tint;
      final int color=tint.getColorForState(getState(),0);
      mTintFilter=new PorterDuffColorFilter(color,state.mTintMode);
    }
  }
}
