{
  final Resources r=a.getResources();
  final BitmapState state=mBitmapState;
  final int[] themeAttrs=a.extractThemeAttrs();
  state.mThemeAttrs=themeAttrs;
  final int srcResId=a.getResourceId(R.styleable.BitmapDrawable_src,0);
  if (srcResId != 0) {
    final Bitmap bitmap=BitmapFactory.decodeResource(r,srcResId);
    if (bitmap == null) {
      throw new XmlPullParserException(a.getPositionDescription() + ": <bitmap> requires a valid src attribute");
    }
    state.mBitmap=bitmap;
  }
  state.mTargetDensity=r.getDisplayMetrics().densityDpi;
  final boolean defMipMap=state.mBitmap != null ? state.mBitmap.hasMipMap() : false;
  setMipMap(a.getBoolean(R.styleable.BitmapDrawable_mipMap,defMipMap));
  state.mAutoMirrored=a.getBoolean(R.styleable.BitmapDrawable_autoMirrored,state.mAutoMirrored);
  state.mBaseAlpha=a.getFloat(R.styleable.BitmapDrawable_alpha,state.mBaseAlpha);
  final int tintMode=a.getInt(R.styleable.BitmapDrawable_tintMode,-1);
  if (tintMode != -1) {
    state.mTintMode=Drawable.parseTintMode(tintMode,Mode.SRC_IN);
  }
  final ColorStateList tint=a.getColorStateList(R.styleable.BitmapDrawable_tint);
  if (tint != null) {
    state.mTint=tint;
  }
  final Paint paint=mBitmapState.mPaint;
  paint.setAntiAlias(a.getBoolean(R.styleable.BitmapDrawable_antialias,paint.isAntiAlias()));
  paint.setFilterBitmap(a.getBoolean(R.styleable.BitmapDrawable_filter,paint.isFilterBitmap()));
  paint.setDither(a.getBoolean(R.styleable.BitmapDrawable_dither,paint.isDither()));
  setGravity(a.getInt(R.styleable.BitmapDrawable_gravity,state.mGravity));
  final int tileMode=a.getInt(R.styleable.BitmapDrawable_tileMode,TILE_MODE_UNDEFINED);
  if (tileMode != TILE_MODE_UNDEFINED) {
    setTileModeInternal(tileMode);
  }
  initializeWithState(state,r);
}
