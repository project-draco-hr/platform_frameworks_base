{
  if (mMediaPlayer.mNativeContext == 0) {
    Log.w(TAG,"mediaplayer went away with unhandled events");
    return;
  }
switch (msg.what) {
case MEDIA_PREPARED:
    scanInternalSubtitleTracks();
  if (mOnPreparedListener != null)   mOnPreparedListener.onPrepared(mMediaPlayer);
return;
case MEDIA_PLAYBACK_COMPLETE:
if (mOnCompletionListener != null) mOnCompletionListener.onCompletion(mMediaPlayer);
stayAwake(false);
return;
case MEDIA_STOPPED:
{
TimeProvider timeProvider=mTimeProvider;
if (timeProvider != null) {
timeProvider.onStopped();
}
}
break;
case MEDIA_STARTED:
case MEDIA_PAUSED:
{
TimeProvider timeProvider=mTimeProvider;
if (timeProvider != null) {
timeProvider.onPaused(msg.what == MEDIA_PAUSED);
}
}
break;
case MEDIA_BUFFERING_UPDATE:
if (mOnBufferingUpdateListener != null) mOnBufferingUpdateListener.onBufferingUpdate(mMediaPlayer,msg.arg1);
return;
case MEDIA_SEEK_COMPLETE:
if (mOnSeekCompleteListener != null) {
mOnSeekCompleteListener.onSeekComplete(mMediaPlayer);
}
case MEDIA_SKIPPED:
{
TimeProvider timeProvider=mTimeProvider;
if (timeProvider != null) {
timeProvider.onSeekComplete(mMediaPlayer);
}
}
return;
case MEDIA_SET_VIDEO_SIZE:
if (mOnVideoSizeChangedListener != null) {
mOnVideoSizeChangedListener.onVideoSizeChanged(mMediaPlayer,msg.arg1,msg.arg2);
}
return;
case MEDIA_ERROR:
Log.e(TAG,"Error (" + msg.arg1 + ","+ msg.arg2+ ")");
boolean error_was_handled=false;
if (mOnErrorListener != null) {
error_was_handled=mOnErrorListener.onError(mMediaPlayer,msg.arg1,msg.arg2);
}
if (mOnCompletionListener != null && !error_was_handled) {
mOnCompletionListener.onCompletion(mMediaPlayer);
}
stayAwake(false);
return;
case MEDIA_INFO:
switch (msg.arg1) {
case MEDIA_INFO_VIDEO_TRACK_LAGGING:
Log.i(TAG,"Info (" + msg.arg1 + ","+ msg.arg2+ ")");
break;
case MEDIA_INFO_METADATA_UPDATE:
scanInternalSubtitleTracks();
case MEDIA_INFO_EXTERNAL_METADATA_UPDATE:
msg.arg1=MEDIA_INFO_METADATA_UPDATE;
if (mSubtitleController != null) {
mSubtitleController.selectDefaultTrack();
}
break;
}
if (mOnInfoListener != null) {
mOnInfoListener.onInfo(mMediaPlayer,msg.arg1,msg.arg2);
}
return;
case MEDIA_TIMED_TEXT:
if (mOnTimedTextListener == null) return;
if (msg.obj == null) {
mOnTimedTextListener.onTimedText(mMediaPlayer,null);
}
 else {
if (msg.obj instanceof Parcel) {
Parcel parcel=(Parcel)msg.obj;
TimedText text=new TimedText(parcel);
parcel.recycle();
mOnTimedTextListener.onTimedText(mMediaPlayer,text);
}
}
return;
case MEDIA_SUBTITLE_DATA:
if (mOnSubtitleDataListener == null) {
return;
}
if (msg.obj instanceof Parcel) {
Parcel parcel=(Parcel)msg.obj;
SubtitleData data=new SubtitleData(parcel);
parcel.recycle();
mOnSubtitleDataListener.onSubtitleData(mMediaPlayer,data);
}
return;
case MEDIA_META_DATA:
if (mOnTimedMetaDataListener == null) {
return;
}
if (msg.obj instanceof Parcel) {
Parcel parcel=(Parcel)msg.obj;
TimedMetaData data=TimedMetaData.createTimedMetaDataFromParcel(parcel);
parcel.recycle();
mOnTimedMetaDataListener.onTimedMetaData(mMediaPlayer,data);
}
return;
case MEDIA_NOP:
break;
default :
Log.e(TAG,"Unknown message type " + msg.what);
return;
}
}
