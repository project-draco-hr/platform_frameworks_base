{
  long nowUs;
  try {
    nowUs=getCurrentTimeUs(refreshTime,true);
  }
 catch (  IllegalStateException e) {
    mRefresh=true;
    mPausing=true;
    nowUs=getCurrentTimeUs(refreshTime,true);
  }
  long nextTimeUs=nowUs;
  if (DEBUG) {
    StringBuilder sb=new StringBuilder();
    sb.append("notifyTimedEvent(").append(mLastTimeUs).append(" -> ").append(nowUs).append(") from {");
    boolean first=true;
    for (    long time : mTimes) {
      if (time == NO_TIME) {
        continue;
      }
      if (!first)       sb.append(", ");
      sb.append(time);
      first=false;
    }
    sb.append("}");
    Log.d(TAG,sb.toString());
  }
  Vector<MediaTimeProvider.OnMediaTimeListener> activatedListeners=new Vector<MediaTimeProvider.OnMediaTimeListener>();
  for (int ix=0; ix < mTimes.length; ix++) {
    if (mListeners[ix] == null) {
      break;
    }
    if (mTimes[ix] <= NO_TIME) {
    }
 else     if (mTimes[ix] <= nowUs + MAX_EARLY_CALLBACK_US) {
      activatedListeners.add(mListeners[ix]);
      if (DEBUG)       Log.d(TAG,"removed");
      mTimes[ix]=NO_TIME;
    }
 else     if (nextTimeUs == nowUs || mTimes[ix] < nextTimeUs) {
      nextTimeUs=mTimes[ix];
    }
  }
  if (nextTimeUs > nowUs && !mPaused) {
    if (DEBUG)     Log.d(TAG,"scheduling for " + nextTimeUs + " and "+ nowUs);
    scheduleNotification(NOTIFY_TIME,nextTimeUs - nowUs);
  }
 else {
    mEventHandler.removeMessages(NOTIFY);
  }
  for (  MediaTimeProvider.OnMediaTimeListener listener : activatedListeners) {
    listener.onTimedEvent(nowUs);
  }
}
