{
  if (!availableMimeTypeForExternalSource(mime)) {
    throw new IllegalArgumentException("Illegal mimeType for timed text source: " + mime);
  }
  final FileDescriptor dupedFd;
  try {
    dupedFd=Libcore.os.dup(fd);
  }
 catch (  ErrnoException ex) {
    Log.e(TAG,ex.getMessage(),ex);
    throw new RuntimeException(ex);
  }
  final MediaFormat fFormat=new MediaFormat();
  fFormat.setString(MediaFormat.KEY_MIME,mime);
  fFormat.setInteger(MediaFormat.KEY_IS_TIMED_TEXT,1);
  if (mSubtitleController == null) {
    setSubtitleAnchor();
  }
  if (!mSubtitleController.hasRendererFor(fFormat)) {
    Context context=ActivityThread.currentApplication();
    mSubtitleController.registerRenderer(new SRTRenderer(context,mEventHandler));
  }
  final SubtitleTrack track=mSubtitleController.addTrack(fFormat);
synchronized (mIndexTrackPairs) {
    mIndexTrackPairs.add(Pair.<Integer,SubtitleTrack>create(null,track));
  }
  final long offset2=offset;
  final long length2=length;
  final HandlerThread thread=new HandlerThread("TimedTextReadThread",Process.THREAD_PRIORITY_BACKGROUND + Process.THREAD_PRIORITY_MORE_FAVORABLE);
  thread.start();
  Handler handler=new Handler(thread.getLooper());
  handler.post(new Runnable(){
    private int addTrack(){
      final ByteArrayOutputStream bos=new ByteArrayOutputStream();
      try {
        Libcore.os.lseek(dupedFd,offset2,OsConstants.SEEK_SET);
        byte[] buffer=new byte[4096];
        for (long total=0; total < length2; ) {
          int bytesToRead=(int)Math.min(buffer.length,length2 - total);
          int bytes=IoBridge.read(dupedFd,buffer,0,bytesToRead);
          if (bytes < 0) {
            break;
          }
 else {
            bos.write(buffer,0,bytes);
            total+=bytes;
          }
        }
        track.onData(bos.toByteArray(),true,~0);
        return MEDIA_INFO_EXTERNAL_METADATA_UPDATE;
      }
 catch (      Exception e) {
        Log.e(TAG,e.getMessage(),e);
        return MEDIA_INFO_TIMED_TEXT_ERROR;
      }
 finally {
        try {
          Libcore.os.close(dupedFd);
        }
 catch (        ErrnoException e) {
          Log.e(TAG,e.getMessage(),e);
        }
      }
    }
    public void run(){
      int res=addTrack();
      if (mEventHandler != null) {
        Message m=mEventHandler.obtainMessage(MEDIA_INFO,res,0,null);
        mEventHandler.sendMessage(m);
      }
      thread.getLooper().quitSafely();
    }
  }
);
}
