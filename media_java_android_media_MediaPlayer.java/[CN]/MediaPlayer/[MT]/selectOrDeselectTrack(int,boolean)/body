{
  populateInbandTracks();
  Pair<Integer,SubtitleTrack> p=null;
  try {
    p=mIndexTrackPairs.get(index);
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    return;
  }
  SubtitleTrack track=p.second;
  if (track == null) {
    selectOrDeselectInbandTrack(p.first,select);
    return;
  }
  if (mSubtitleController == null) {
    return;
  }
  if (!select) {
    if (mSubtitleController.getSelectedTrack() == track) {
      mSubtitleController.selectTrack(null);
    }
 else {
      Log.w(TAG,"trying to deselect track that was not selected");
    }
    return;
  }
  if (track.getTrackType() == TrackInfo.MEDIA_TRACK_TYPE_TIMEDTEXT) {
    int ttIndex=getSelectedTrack(TrackInfo.MEDIA_TRACK_TYPE_TIMEDTEXT);
synchronized (mIndexTrackPairs) {
      if (ttIndex >= 0 && ttIndex < mIndexTrackPairs.size()) {
        Pair<Integer,SubtitleTrack> p2=mIndexTrackPairs.get(ttIndex);
        if (p2.first != null && p2.second == null) {
          selectOrDeselectInbandTrack(p2.first,false);
        }
      }
    }
  }
  mSubtitleController.selectTrack(track);
}
