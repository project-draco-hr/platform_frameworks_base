{
  if (!mDataConnectionIsConnected)   return;
  if (mStorageIsLow)   return;
  final long notificationTime=(!mSyncHandler.mSyncNotificationInfo.isActive && mSyncHandler.mSyncNotificationInfo.startTime != null) ? mSyncHandler.mSyncNotificationInfo.startTime + SYNC_NOTIFICATION_DELAY : Long.MAX_VALUE;
  long earliestTimeoutTime=Long.MAX_VALUE;
  for (  ActiveSyncContext currentSyncContext : mActiveSyncContexts) {
    final long currentSyncTimeoutTime=currentSyncContext.mTimeoutStartTime + MAX_TIME_PER_SYNC;
    if (Log.isLoggable(TAG,Log.VERBOSE)) {
      Log.v(TAG,"manageSyncAlarm: active sync, mTimeoutStartTime + MAX is " + currentSyncTimeoutTime);
    }
    if (earliestTimeoutTime > currentSyncTimeoutTime) {
      earliestTimeoutTime=currentSyncTimeoutTime;
    }
  }
  if (Log.isLoggable(TAG,Log.VERBOSE)) {
    Log.v(TAG,"manageSyncAlarm: notificationTime is " + notificationTime);
  }
  if (Log.isLoggable(TAG,Log.VERBOSE)) {
    Log.v(TAG,"manageSyncAlarm: earliestTimeoutTime is " + earliestTimeoutTime);
  }
  if (Log.isLoggable(TAG,Log.VERBOSE)) {
    Log.v(TAG,"manageSyncAlarm: nextPeriodicEventElapsedTime is " + nextPeriodicEventElapsedTime);
  }
  if (Log.isLoggable(TAG,Log.VERBOSE)) {
    Log.v(TAG,"manageSyncAlarm: nextPendingEventElapsedTime is " + nextPendingEventElapsedTime);
  }
  long alarmTime=Math.min(notificationTime,earliestTimeoutTime);
  alarmTime=Math.min(alarmTime,nextPeriodicEventElapsedTime);
  alarmTime=Math.min(alarmTime,nextPendingEventElapsedTime);
  final long now=SystemClock.elapsedRealtime();
  if (alarmTime < now + SYNC_ALARM_TIMEOUT_MIN) {
    if (Log.isLoggable(TAG,Log.VERBOSE)) {
      Log.v(TAG,"manageSyncAlarm: the alarmTime is too small, " + alarmTime + ", setting to "+ (now + SYNC_ALARM_TIMEOUT_MIN));
    }
    alarmTime=now + SYNC_ALARM_TIMEOUT_MIN;
  }
 else   if (alarmTime > now + SYNC_ALARM_TIMEOUT_MAX) {
    if (Log.isLoggable(TAG,Log.VERBOSE)) {
      Log.v(TAG,"manageSyncAlarm: the alarmTime is too large, " + alarmTime + ", setting to "+ (now + SYNC_ALARM_TIMEOUT_MIN));
    }
    alarmTime=now + SYNC_ALARM_TIMEOUT_MAX;
  }
  boolean shouldSet=false;
  boolean shouldCancel=false;
  final boolean alarmIsActive=mAlarmScheduleTime != null;
  final boolean needAlarm=alarmTime != Long.MAX_VALUE;
  if (needAlarm) {
    if (!alarmIsActive || alarmTime < mAlarmScheduleTime) {
      shouldSet=true;
    }
  }
 else {
    shouldCancel=alarmIsActive;
  }
  ensureAlarmService();
  if (shouldSet) {
    if (Log.isLoggable(TAG,Log.VERBOSE)) {
      Log.v(TAG,"requesting that the alarm manager wake us up at elapsed time " + alarmTime + ", now is "+ now+ ", "+ ((alarmTime - now) / 1000)+ " secs from now");
    }
    mAlarmScheduleTime=alarmTime;
    mAlarmService.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,alarmTime,mSyncAlarmIntent);
  }
 else   if (shouldCancel) {
    mAlarmScheduleTime=null;
    mAlarmService.cancel(mSyncAlarmIntent);
  }
}
