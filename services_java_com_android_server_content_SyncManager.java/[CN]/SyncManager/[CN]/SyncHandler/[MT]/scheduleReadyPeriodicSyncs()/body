{
  final boolean isLoggable=Log.isLoggable(TAG,Log.VERBOSE);
  if (isLoggable) {
    Log.v(TAG,"scheduleReadyPeriodicSyncs");
  }
  long earliestFuturePollTime=Long.MAX_VALUE;
  final long nowAbsolute=System.currentTimeMillis();
  final long shiftedNowAbsolute=(0 < nowAbsolute - mSyncRandomOffsetMillis) ? (nowAbsolute - mSyncRandomOffsetMillis) : 0;
  ArrayList<Pair<AuthorityInfo,SyncStatusInfo>> infos=mSyncStorageEngine.getCopyOfAllAuthoritiesWithSyncStatus();
  for (  Pair<AuthorityInfo,SyncStatusInfo> info : infos) {
    final AuthorityInfo authorityInfo=info.first;
    final SyncStatusInfo status=info.second;
    if (!isDispatchable(authorityInfo.base)) {
      continue;
    }
    for (int i=0, N=authorityInfo.periodicSyncs.size(); i < N; i++) {
      final PeriodicSync sync=authorityInfo.periodicSyncs.get(i);
      final Bundle extras=sync.extras;
      final Long periodInMillis=sync.period * 1000;
      final Long flexInMillis=sync.flexTime * 1000;
      if (periodInMillis <= 0) {
        continue;
      }
      final long lastPollTimeAbsolute=status.getPeriodicSyncTime(i);
      final long shiftedLastPollTimeAbsolute=(0 < lastPollTimeAbsolute - mSyncRandomOffsetMillis) ? (lastPollTimeAbsolute - mSyncRandomOffsetMillis) : 0;
      long remainingMillis=periodInMillis - (shiftedNowAbsolute % periodInMillis);
      long timeSinceLastRunMillis=(nowAbsolute - lastPollTimeAbsolute);
      boolean runEarly=remainingMillis <= flexInMillis && timeSinceLastRunMillis > periodInMillis - flexInMillis;
      if (isLoggable) {
        Log.v(TAG,"sync: " + i + " for "+ authorityInfo.base+ "."+ " period: "+ (periodInMillis)+ " flex: "+ (flexInMillis)+ " remaining: "+ (remainingMillis)+ " time_since_last: "+ timeSinceLastRunMillis+ " last poll absol: "+ lastPollTimeAbsolute+ " last poll shifed: "+ shiftedLastPollTimeAbsolute+ " shifted now: "+ shiftedNowAbsolute+ " run_early: "+ runEarly);
      }
      if (remainingMillis == periodInMillis || lastPollTimeAbsolute > nowAbsolute || timeSinceLastRunMillis >= periodInMillis || runEarly) {
        SyncStorageEngine.EndPoint target=authorityInfo.base;
        final Pair<Long,Long> backoff=mSyncStorageEngine.getBackoff(target);
        mSyncStorageEngine.setPeriodicSyncTime(authorityInfo.ident,authorityInfo.periodicSyncs.get(i),nowAbsolute);
        if (target.target_provider) {
          final RegisteredServicesCache.ServiceInfo<SyncAdapterType> syncAdapterInfo=mSyncAdapters.getServiceInfo(SyncAdapterType.newKey(target.provider,target.account.type),target.userId);
          if (syncAdapterInfo == null) {
            continue;
          }
          scheduleSyncOperation(new SyncOperation(target.account,target.userId,SyncOperation.REASON_PERIODIC,SyncStorageEngine.SOURCE_PERIODIC,target.provider,extras,0,0,backoff != null ? backoff.first : 0,mSyncStorageEngine.getDelayUntilTime(target),syncAdapterInfo.type.allowParallelSyncs()));
        }
 else         if (target.target_service) {
          scheduleSyncOperation(new SyncOperation(target.service,target.userId,SyncOperation.REASON_PERIODIC,SyncStorageEngine.SOURCE_PERIODIC,extras,0,0,backoff != null ? backoff.first : 0,mSyncStorageEngine.getDelayUntilTime(target)));
        }
      }
      long nextPollTimeAbsolute;
      if (runEarly) {
        nextPollTimeAbsolute=nowAbsolute + periodInMillis + remainingMillis;
      }
 else {
        nextPollTimeAbsolute=nowAbsolute + remainingMillis;
      }
      if (nextPollTimeAbsolute < earliestFuturePollTime) {
        earliestFuturePollTime=nextPollTimeAbsolute;
      }
    }
  }
  if (earliestFuturePollTime == Long.MAX_VALUE) {
    return Long.MAX_VALUE;
  }
  return SystemClock.elapsedRealtime() + ((earliestFuturePollTime < nowAbsolute) ? 0 : (earliestFuturePollTime - nowAbsolute));
}
