{
  int level=(arg != null) ? (Integer)arg : mLevel;
  String percentage=NumberFormat.getPercentInstance().format((double)level / 100.0);
  state.icon=new Icon(){
    @Override public Drawable getDrawable(    Context context){
      BatteryMeterDrawable drawable=new BatteryMeterDrawable(context,new Handler(Looper.getMainLooper()),context.getColor(R.color.batterymeter_frame_color));
      drawable.onBatteryLevelChanged(mLevel,mPluggedIn,mCharging);
      drawable.onPowerSaveChanged(mPowerSave);
      return drawable;
    }
    @Override public int getPadding(){
      return mHost.getContext().getResources().getDimensionPixelSize(R.dimen.qs_battery_padding);
    }
  }
;
  state.label=percentage;
  state.contentDescription=mContext.getString(R.string.accessibility_quick_settings_battery,percentage) + "," + (mPowerSave ? mContext.getString(R.string.battery_saver_notification_title) : mCharging ? mContext.getString(R.string.expanded_header_battery_charging) : "")+ ","+ mContext.getString(R.string.accessibility_battery_details);
  state.minimalAccessibilityClassName=state.expandedAccessibilityClassName=Button.class.getName();
}
