{
  mService=service;
  ServiceInfo si=service.serviceInfo;
  mId=new ComponentName(si.packageName,si.name).flattenToShortString();
  mIsAuxIme=true;
  PackageManager pm=context.getPackageManager();
  String settingsActivityComponent=null;
  int isDefaultResId=0;
  XmlResourceParser parser=null;
  try {
    parser=si.loadXmlMetaData(pm,InputMethod.SERVICE_META_DATA);
    if (parser == null) {
      throw new XmlPullParserException("No " + InputMethod.SERVICE_META_DATA + " meta-data");
    }
    Resources res=pm.getResourcesForApplication(si.applicationInfo);
    AttributeSet attrs=Xml.asAttributeSet(parser);
    int type;
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && type != XmlPullParser.START_TAG) {
    }
    String nodeName=parser.getName();
    if (!"input-method".equals(nodeName)) {
      throw new XmlPullParserException("Meta-data does not start with input-method tag");
    }
    TypedArray sa=res.obtainAttributes(attrs,com.android.internal.R.styleable.InputMethod);
    settingsActivityComponent=sa.getString(com.android.internal.R.styleable.InputMethod_settingsActivity);
    isDefaultResId=sa.getResourceId(com.android.internal.R.styleable.InputMethod_isDefault,0);
    sa.recycle();
    final int depth=parser.getDepth();
    while (((type=parser.next()) != XmlPullParser.END_TAG || parser.getDepth() > depth) && type != XmlPullParser.END_DOCUMENT) {
      if (type == XmlPullParser.START_TAG) {
        nodeName=parser.getName();
        if (!"subtype".equals(nodeName)) {
          throw new XmlPullParserException("Meta-data in input-method does not start with subtype tag");
        }
        final TypedArray a=res.obtainAttributes(attrs,com.android.internal.R.styleable.InputMethod_Subtype);
        InputMethodSubtype subtype=new InputMethodSubtype(a.getResourceId(com.android.internal.R.styleable.InputMethod_Subtype_label,0),a.getResourceId(com.android.internal.R.styleable.InputMethod_Subtype_icon,0),a.getString(com.android.internal.R.styleable.InputMethod_Subtype_imeSubtypeLocale),a.getString(com.android.internal.R.styleable.InputMethod_Subtype_imeSubtypeMode),a.getString(com.android.internal.R.styleable.InputMethod_Subtype_imeSubtypeExtraValue),a.getBoolean(com.android.internal.R.styleable.InputMethod_Subtype_isAuxiliary,false),a.getBoolean(com.android.internal.R.styleable.InputMethod_Subtype_overridesImplicitlyEnabledSubtype,false));
        if (!subtype.isAuxiliary()) {
          mIsAuxIme=false;
        }
        mSubtypes.add(subtype);
      }
    }
  }
 catch (  NameNotFoundException e) {
    throw new XmlPullParserException("Unable to create context for: " + si.packageName);
  }
 finally {
    if (parser != null)     parser.close();
  }
  if (mSubtypes.size() == 0) {
    mIsAuxIme=false;
  }
  if (additionalSubtypesMap != null && additionalSubtypesMap.containsKey(mId)) {
    final List<InputMethodSubtype> additionalSubtypes=additionalSubtypesMap.get(mId);
    final int N=additionalSubtypes.size();
    for (int i=0; i < N; ++i) {
      final InputMethodSubtype subtype=additionalSubtypes.get(i);
      if (!mSubtypes.contains(subtype)) {
        mSubtypes.add(subtype);
      }
    }
  }
  mSettingsActivityName=settingsActivityComponent;
  mIsDefaultResId=isDefaultResId;
}
