{
  app.cpuTimeMs=(u.getUserCpuTimeUs(statsType) + u.getSystemCpuTimeUs(statsType)) / 1000;
  long totalTime=0;
  final int numClusters=mProfile.getNumCpuClusters();
  for (int cluster=0; cluster < numClusters; cluster++) {
    final int speedsForCluster=mProfile.getNumSpeedStepsInCpuCluster(cluster);
    for (int speed=0; speed < speedsForCluster; speed++) {
      totalTime+=u.getTimeAtCpuSpeed(cluster,speed,statsType);
    }
  }
  totalTime=Math.max(totalTime,1);
  double cpuPowerMaMs=0;
  for (int cluster=0; cluster < numClusters; cluster++) {
    final int speedsForCluster=mProfile.getNumSpeedStepsInCpuCluster(cluster);
    for (int speed=0; speed < speedsForCluster; speed++) {
      final double ratio=(double)u.getTimeAtCpuSpeed(cluster,speed,statsType) / totalTime;
      final double cpuSpeedStepPower=ratio * app.cpuTimeMs * mProfile.getAveragePowerForCpu(cluster,speed);
      if (DEBUG && ratio != 0) {
        Log.d(TAG,"UID " + u.getUid() + ": CPU cluster #"+ cluster+ " step #"+ speed+ " ratio="+ BatteryStatsHelper.makemAh(ratio)+ " power="+ BatteryStatsHelper.makemAh(cpuSpeedStepPower / (60 * 60 * 1000)));
      }
      cpuPowerMaMs+=cpuSpeedStepPower;
    }
  }
  app.cpuPowerMah=cpuPowerMaMs / (60 * 60 * 1000);
  if (DEBUG && (app.cpuTimeMs != 0 || app.cpuPowerMah != 0)) {
    Log.d(TAG,"UID " + u.getUid() + ": CPU time="+ app.cpuTimeMs+ " ms power="+ BatteryStatsHelper.makemAh(app.cpuPowerMah));
  }
  double highestDrain=0;
  app.cpuFgTimeMs=0;
  final ArrayMap<String,? extends BatteryStats.Uid.Proc> processStats=u.getProcessStats();
  final int processStatsCount=processStats.size();
  for (int i=0; i < processStatsCount; i++) {
    final BatteryStats.Uid.Proc ps=processStats.valueAt(i);
    final String processName=processStats.keyAt(i);
    app.cpuFgTimeMs+=ps.getForegroundTime(statsType);
    final long costValue=ps.getUserTime(statsType) + ps.getSystemTime(statsType) + ps.getForegroundTime(statsType);
    if (app.packageWithHighestDrain == null || app.packageWithHighestDrain.startsWith("*")) {
      highestDrain=costValue;
      app.packageWithHighestDrain=processName;
    }
 else     if (highestDrain < costValue && !processName.startsWith("*")) {
      highestDrain=costValue;
      app.packageWithHighestDrain=processName;
    }
  }
  if (app.cpuFgTimeMs > app.cpuTimeMs) {
    if (DEBUG && app.cpuFgTimeMs > app.cpuTimeMs + 10000) {
      Log.d(TAG,"WARNING! Cputime is more than 10 seconds behind Foreground time");
    }
    app.cpuTimeMs=app.cpuFgTimeMs;
  }
}
