{
  final int speedSteps=mSpeedStepTimes.length;
  long totalTimeAtSpeeds=0;
  for (int step=0; step < speedSteps; step++) {
    mSpeedStepTimes[step]=u.getTimeAtCpuSpeed(step,statsType);
    totalTimeAtSpeeds+=mSpeedStepTimes[step];
  }
  totalTimeAtSpeeds=Math.max(totalTimeAtSpeeds,1);
  app.cpuTimeMs=(u.getUserCpuTimeUs(statsType) + u.getSystemCpuTimeUs(statsType)) / 1000;
  if (DEBUG && app.cpuTimeMs != 0) {
    Log.d(TAG,"UID " + u.getUid() + ": CPU time "+ app.cpuTimeMs+ " ms");
  }
  double cpuPowerMaMs=0;
  for (int step=0; step < speedSteps; step++) {
    final double ratio=(double)mSpeedStepTimes[step] / totalTimeAtSpeeds;
    final double cpuSpeedStepPower=ratio * app.cpuTimeMs * mPowerCpuNormal[step];
    if (DEBUG && ratio != 0) {
      Log.d(TAG,"UID " + u.getUid() + ": CPU step #"+ step+ " ratio="+ BatteryStatsHelper.makemAh(ratio)+ " power="+ BatteryStatsHelper.makemAh(cpuSpeedStepPower / (60 * 60 * 1000)));
    }
    cpuPowerMaMs+=cpuSpeedStepPower;
  }
  if (DEBUG && cpuPowerMaMs != 0) {
    Log.d(TAG,"UID " + u.getUid() + ": cpu total power="+ BatteryStatsHelper.makemAh(cpuPowerMaMs / (60 * 60 * 1000)));
  }
  double highestDrain=0;
  app.cpuFgTimeMs=0;
  final ArrayMap<String,? extends BatteryStats.Uid.Proc> processStats=u.getProcessStats();
  final int processStatsCount=processStats.size();
  for (int i=0; i < processStatsCount; i++) {
    final BatteryStats.Uid.Proc ps=processStats.valueAt(i);
    final String processName=processStats.keyAt(i);
    app.cpuFgTimeMs+=ps.getForegroundTime(statsType);
    final long costValue=ps.getUserTime(statsType) + ps.getSystemTime(statsType) + ps.getForegroundTime(statsType);
    if (app.packageWithHighestDrain == null || app.packageWithHighestDrain.startsWith("*")) {
      highestDrain=costValue;
      app.packageWithHighestDrain=processName;
    }
 else     if (highestDrain < costValue && !processName.startsWith("*")) {
      highestDrain=costValue;
      app.packageWithHighestDrain=processName;
    }
  }
  if (app.cpuFgTimeMs > app.cpuTimeMs) {
    if (DEBUG && app.cpuFgTimeMs > app.cpuTimeMs + 10000) {
      Log.d(TAG,"WARNING! Cputime is more than 10 seconds behind Foreground time");
    }
    app.cpuTimeMs=app.cpuFgTimeMs;
  }
  app.cpuPowerMah=cpuPowerMaMs / (60 * 60 * 1000);
}
