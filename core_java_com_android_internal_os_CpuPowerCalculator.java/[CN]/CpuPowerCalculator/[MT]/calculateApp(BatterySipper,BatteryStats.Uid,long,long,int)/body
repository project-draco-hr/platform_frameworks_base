{
  final int speedSteps=mSpeedStepTimes.length;
  double highestDrain=0;
  final ArrayMap<String,? extends BatteryStats.Uid.Proc> processStats=u.getProcessStats();
  final int processStatsCount=processStats.size();
  for (int i=0; i < processStatsCount; i++) {
    final BatteryStats.Uid.Proc ps=processStats.valueAt(i);
    final String processName=processStats.keyAt(i);
    app.cpuFgTimeMs+=ps.getForegroundTime(statsType);
    final long totalCpuTime=ps.getUserTime(statsType) + ps.getSystemTime(statsType);
    app.cpuTimeMs+=totalCpuTime;
    long totalTimeAtSpeeds=0;
    for (int step=0; step < speedSteps; step++) {
      mSpeedStepTimes[step]=ps.getTimeAtCpuSpeedStep(step,statsType);
      totalTimeAtSpeeds+=mSpeedStepTimes[step];
    }
    totalTimeAtSpeeds=Math.max(totalTimeAtSpeeds,1);
    double cpuPower=0;
    for (int step=0; step < speedSteps; step++) {
      final double ratio=(double)mSpeedStepTimes[step] / totalTimeAtSpeeds;
      final double cpuSpeedStepPower=ratio * totalCpuTime * mPowerCpuNormal[step];
      if (DEBUG && ratio != 0) {
        Log.d(TAG,"UID " + u.getUid() + ": CPU step #"+ step+ " ratio="+ BatteryStatsHelper.makemAh(ratio)+ " power="+ BatteryStatsHelper.makemAh(cpuSpeedStepPower / (60 * 60 * 1000)));
      }
      cpuPower+=cpuSpeedStepPower;
    }
    if (DEBUG && cpuPower != 0) {
      Log.d(TAG,String.format("process %s, cpu power=%s",processName,BatteryStatsHelper.makemAh(cpuPower / (60 * 60 * 1000))));
    }
    app.cpuPowerMah+=cpuPower;
    if (app.packageWithHighestDrain == null || app.packageWithHighestDrain.startsWith("*")) {
      highestDrain=cpuPower;
      app.packageWithHighestDrain=processName;
    }
 else     if (highestDrain < cpuPower && !processName.startsWith("*")) {
      highestDrain=cpuPower;
      app.packageWithHighestDrain=processName;
    }
  }
  if (app.cpuFgTimeMs > app.cpuTimeMs) {
    if (DEBUG && app.cpuFgTimeMs > app.cpuTimeMs + 10000) {
      Log.d(TAG,"WARNING! Cputime is more than 10 seconds behind Foreground time");
    }
    app.cpuTimeMs=app.cpuFgTimeMs;
  }
  app.cpuPowerMah/=(60 * 60 * 1000);
}
