{
  if (TextUtils.isEmpty(keyStoreAlias)) {
    throw new IllegalArgumentException("keyStoreAlias must not be empty");
  }
 else   if ((userAuthenticationValidityDurationSeconds < 0) && (userAuthenticationValidityDurationSeconds != -1)) {
    throw new IllegalArgumentException("userAuthenticationValidityDurationSeconds must not be negative");
  }
  if (certificateSubject == null) {
    certificateSubject=DEFAULT_CERT_SUBJECT;
  }
  if (certificateNotBefore == null) {
    certificateNotBefore=DEFAULT_CERT_NOT_BEFORE;
  }
  if (certificateNotAfter == null) {
    certificateNotAfter=DEFAULT_CERT_NOT_AFTER;
  }
  if (certificateSerialNumber == null) {
    certificateSerialNumber=DEFAULT_CERT_SERIAL_NUMBER;
  }
  if (certificateNotAfter.before(certificateNotBefore)) {
    throw new IllegalArgumentException("certificateNotAfter < certificateNotBefore");
  }
  mKeystoreAlias=keyStoreAlias;
  mKeySize=keySize;
  mSpec=spec;
  mCertificateSubject=certificateSubject;
  mCertificateSerialNumber=certificateSerialNumber;
  mCertificateNotBefore=certificateNotBefore;
  mCertificateNotAfter=certificateNotAfter;
  mFlags=flags;
  mKeyValidityStart=keyValidityStart;
  mKeyValidityForOriginationEnd=keyValidityForOriginationEnd;
  mKeyValidityForConsumptionEnd=keyValidityForConsumptionEnd;
  mPurposes=purposes;
  mDigests=ArrayUtils.cloneIfNotEmpty(digests);
  mEncryptionPaddings=ArrayUtils.cloneIfNotEmpty(ArrayUtils.nullToEmpty(encryptionPaddings));
  mSignaturePaddings=ArrayUtils.cloneIfNotEmpty(ArrayUtils.nullToEmpty(signaturePaddings));
  mBlockModes=ArrayUtils.cloneIfNotEmpty(ArrayUtils.nullToEmpty(blockModes));
  mRandomizedEncryptionRequired=randomizedEncryptionRequired;
  mUserAuthenticationRequired=userAuthenticationRequired;
  mUserAuthenticationValidityDurationSeconds=userAuthenticationValidityDurationSeconds;
}
