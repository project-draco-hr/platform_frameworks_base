{
  final int marginLeft;
  final int marginTop;
  final int marginRight;
  if (margins == null) {
    marginLeft=0;
    marginTop=0;
    marginRight=0;
  }
 else {
    marginLeft=margins.left;
    marginTop=margins.top;
    marginRight=margins.right;
  }
  final Rect container=mContainerRect;
  final int containerWidth=container.width();
  final int maxWidth;
  if (adjacent == null) {
    maxWidth=containerWidth;
  }
 else   if (mLayoutFromRight) {
    maxWidth=adjacent.getLeft();
  }
 else {
    maxWidth=containerWidth - adjacent.getRight();
  }
  final int adjMaxWidth=maxWidth - marginLeft - marginRight;
  final int widthMeasureSpec=MeasureSpec.makeMeasureSpec(adjMaxWidth,MeasureSpec.AT_MOST);
  final int heightMeasureSpec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
  view.measure(widthMeasureSpec,heightMeasureSpec);
  final int width=Math.min(adjMaxWidth,view.getMeasuredWidth());
  final int left;
  final int right;
  if (mLayoutFromRight) {
    right=(adjacent == null ? container.right : adjacent.getLeft()) - marginRight;
    left=right - width;
  }
 else {
    left=(adjacent == null ? container.left : adjacent.getRight()) + marginLeft;
    right=left + width;
  }
  final int top=marginTop;
  final int bottom=top + view.getMeasuredHeight();
  out.set(left,top,right,bottom);
}
