{
  if (mState == STATE_NONE) {
    return;
  }
  final int y=mThumbY;
  final int viewWidth=mList.getWidth();
  final FastScroller.ScrollFade scrollFade=mScrollFade;
  int alpha=-1;
  if (mState == STATE_EXIT) {
    alpha=scrollFade.getAlpha();
    if (alpha < ScrollFade.ALPHA_MAX / 2) {
      mThumbDrawable.setAlpha(alpha * 2);
    }
    int left=0;
switch (mPosition) {
case View.SCROLLBAR_POSITION_RIGHT:
      left=viewWidth - (mThumbW * alpha) / ScrollFade.ALPHA_MAX;
    break;
case View.SCROLLBAR_POSITION_LEFT:
  left=-mThumbW + (mThumbW * alpha) / ScrollFade.ALPHA_MAX;
break;
}
mThumbDrawable.setBounds(left,0,left + mThumbW,mThumbH);
mChangedBounds=true;
}
if (mTrackDrawable != null) {
final Rect thumbBounds=mThumbDrawable.getBounds();
final int left=thumbBounds.left;
final int halfThumbHeight=(thumbBounds.bottom - thumbBounds.top) / 2;
final int trackWidth=mTrackDrawable.getIntrinsicWidth();
final int trackLeft=(left + mThumbW / 2) - trackWidth / 2;
mTrackDrawable.setBounds(trackLeft,halfThumbHeight,trackLeft + trackWidth,mList.getHeight() - halfThumbHeight);
mTrackDrawable.draw(canvas);
}
canvas.translate(0,y);
mThumbDrawable.draw(canvas);
canvas.translate(0,-y);
if (mState == STATE_DRAGGING && mDrawOverlay) {
final Drawable overlay=mOverlayDrawable;
final Paint paint=mPaint;
final String sectionText=mSectionText;
final Rect tmpRect=mTmpRect;
paint.getTextBounds(sectionText,0,sectionText.length(),tmpRect);
final int textWidth=tmpRect.width();
final int textHeight=tmpRect.height();
overlay.getPadding(tmpRect);
final int overlayWidth=Math.max(mOverlaySize,textWidth + tmpRect.left + tmpRect.right+ mOverlayPadding * 2);
final int overlayHeight=Math.max(mOverlaySize,textHeight + tmpRect.top + tmpRect.bottom+ mOverlayPadding * 2);
final RectF pos=mOverlayPos;
if (mOverlayPosition == OVERLAY_AT_THUMB) {
final Rect thumbBounds=mThumbDrawable.getBounds();
switch (mPosition) {
case View.SCROLLBAR_POSITION_LEFT:
pos.left=Math.min(thumbBounds.right + mThumbW,mList.getWidth() - overlayWidth);
break;
case View.SCROLLBAR_POSITION_RIGHT:
default :
pos.left=Math.max(0,thumbBounds.left - mThumbW - overlayWidth);
break;
}
pos.top=Math.max(0,Math.min(y + (mThumbH - overlayHeight) / 2,mList.getHeight() - overlayHeight));
}
pos.right=pos.left + overlayWidth;
pos.bottom=pos.top + overlayHeight;
overlay.setBounds((int)pos.left,(int)pos.top,(int)pos.right,(int)pos.bottom);
overlay.draw(canvas);
final float hOff=(tmpRect.right - tmpRect.left) / 2.0f;
final float vOff=(tmpRect.bottom - tmpRect.top) / 2.0f;
final float cX=pos.centerX() - hOff;
final float cY=pos.centerY() + (overlayHeight / 4.0f) - paint.descent() - vOff;
canvas.drawText(mSectionText,cX,cY,paint);
}
 else if (mState == STATE_EXIT) {
if (alpha == 0) {
setState(STATE_NONE);
}
 else {
final int left, right, top, bottom;
if (mTrackDrawable != null) {
top=0;
bottom=mList.getHeight();
}
 else {
top=y;
bottom=y + mThumbH;
}
switch (mList.getLayoutDirection()) {
case View.LAYOUT_DIRECTION_RTL:
left=0;
right=mThumbW;
break;
case View.LAYOUT_DIRECTION_LTR:
default :
left=viewWidth - mThumbW;
right=viewWidth;
}
mList.invalidate(left,top,right,bottom);
}
}
}
