{
  invalidateValues();
  int targetWidth=r - l;
  int targetHeight=b - t;
  int paddingLeft=getPaddingLeft();
  int paddingTop=getPaddingTop();
  int paddingRight=getPaddingRight();
  int paddingBottom=getPaddingBottom();
  mHorizontalAxis.layout(targetWidth - paddingLeft - paddingRight);
  mVerticalAxis.layout(targetHeight - paddingTop - paddingBottom);
  for (int i=0, size=getChildCount(); i < size; i++) {
    View view=getChildAt(i);
    LayoutParams constraints=getLayoutParams(view);
    Interval hRange=constraints.columnGroup.span;
    Interval vRange=constraints.rowGroup.span;
    int x1=getLocationIncludingMargin(mHorizontalAxis,hRange.min,true);
    int y1=getLocationIncludingMargin(mVerticalAxis,vRange.min,true);
    int x2=getLocationIncludingMargin(mHorizontalAxis,hRange.max,false);
    int y2=getLocationIncludingMargin(mVerticalAxis,vRange.max,false);
    int cellWidth=x2 - x1;
    int cellHeight=y2 - y1;
    Bounds minMaxX=mHorizontalAxis.getGroupBounds().getValue(i);
    Bounds minMaxY=mVerticalAxis.getGroupBounds().getValue(i);
    int pWidth=getMeasurement(view,true,PRF);
    int pHeight=getMeasurement(view,false,PRF);
    Alignment hAlignment=constraints.columnGroup.alignment;
    Alignment vAlignment=constraints.rowGroup.alignment;
    int ddx=protect(hAlignment.getAlignmentValue(null,cellWidth - minMaxX.size()));
    int ddy=protect(vAlignment.getAlignmentValue(null,cellHeight - minMaxY.size()));
    int dx=ddx + -minMaxX.below - hAlignment.getAlignmentValue(view,pWidth);
    int dy=ddy + -minMaxY.below - vAlignment.getAlignmentValue(view,pHeight);
    int width=hAlignment.getSizeInCell(view,pWidth,cellWidth);
    int height=vAlignment.getSizeInCell(view,pHeight,cellHeight);
    int cx=paddingLeft + x1 + dx;
    int cy=paddingTop + y1 + dy;
    view.layout(cx,cy,cx + width,cy + height);
  }
}
