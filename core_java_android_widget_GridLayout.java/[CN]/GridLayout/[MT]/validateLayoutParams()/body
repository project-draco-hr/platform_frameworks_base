{
  new Object(){
    public int maxSize=0;
    private int valueIfDefined2(    int value,    int defaultValue){
      if (value != UNDEFINED) {
        maxSize=0;
        return value;
      }
 else {
        return defaultValue;
      }
    }
{
      final boolean horizontal=(mOrientation == HORIZONTAL);
      final int axis=horizontal ? mHorizontalAxis.count : mVerticalAxis.count;
      final int count=valueIfDefined(axis,Integer.MAX_VALUE);
      int row=0;
      int col=0;
      for (int i=0, N=getChildCount(); i < N; i++) {
        View c=getChildAt(i);
        if (isGone(c))         continue;
        LayoutParams lp=getLayoutParams1(c);
        final Group colGroup=lp.columnGroup;
        final Interval cols=colGroup.span;
        final int colSpan=cols.size();
        final Group rowGroup=lp.rowGroup;
        final Interval rows=rowGroup.span;
        final int rowSpan=rows.size();
        if (horizontal) {
          row=valueIfDefined2(rows.min,row);
          int newCol=valueIfDefined(cols.min,(col + colSpan > count) ? 0 : col);
          if (newCol < col) {
            row+=maxSize;
            maxSize=0;
          }
          col=newCol;
          maxSize=max(maxSize,rowSpan);
        }
 else {
          col=valueIfDefined2(cols.min,col);
          int newRow=valueIfDefined(rows.min,(row + rowSpan > count) ? 0 : row);
          if (newRow < row) {
            col+=maxSize;
            maxSize=0;
          }
          row=newRow;
          maxSize=max(maxSize,colSpan);
        }
        lp.setColumnGroupSpan(new Interval(col,col + colSpan));
        lp.setRowGroupSpan(new Interval(row,row + rowSpan));
        if (horizontal) {
          col=col + colSpan;
        }
 else {
          row=row + rowSpan;
        }
      }
    }
  }
;
  invalidateStructure();
}
