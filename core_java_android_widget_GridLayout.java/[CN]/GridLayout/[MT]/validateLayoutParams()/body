{
  final boolean horizontal=(mOrientation == HORIZONTAL);
  final int axisCount=horizontal ? mHorizontalAxis.count : mVerticalAxis.count;
  final int count=valueIfDefined(axisCount,0);
  int major=0;
  int minor=0;
  int[] maxSizes=new int[count];
  for (int i=0, N=getChildCount(); i < N; i++) {
    LayoutParams lp=getLayoutParams1(getChildAt(i));
    final Interval majorRange=(horizontal ? lp.rowSpec : lp.columnSpec).span;
    final boolean majorWasDefined=(majorRange.min != UNDEFINED);
    final int majorSpan=majorRange.size();
    if (majorWasDefined) {
      major=majorRange.min;
    }
    final Interval minorRange=(horizontal ? lp.columnSpec : lp.rowSpec).span;
    final boolean minorWasDefined=(minorRange.min != UNDEFINED);
    final int minorSpan=clip(minorRange,minorWasDefined,count);
    if (minorWasDefined) {
      minor=minorRange.min;
    }
    if (count != 0) {
      if (!majorWasDefined || !minorWasDefined) {
        while (!fits(maxSizes,major,minor,minor + minorSpan)) {
          if (minorWasDefined) {
            major++;
          }
 else {
            if (minor + minorSpan <= count) {
              minor++;
            }
 else {
              minor=0;
              major++;
            }
          }
        }
      }
      procrusteanFill(maxSizes,minor,minor + minorSpan,major + majorSpan);
    }
    if (horizontal) {
      setCellGroup(lp,major,majorSpan,minor,minorSpan);
    }
 else {
      setCellGroup(lp,minor,minorSpan,major,majorSpan);
    }
    minor=minor + minorSpan;
  }
  invalidateStructure();
}
