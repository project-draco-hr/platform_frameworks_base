{
  Arrays.fill(getDeltas(),0);
  solve(a);
  int deltaMax=parentMin.value * getChildCount() + 1;
  if (deltaMax < 2) {
    return;
  }
  int deltaMin=0;
  float totalWeight=calculateTotalWeight();
  int validDelta=-1;
  boolean validSolution=true;
  while (deltaMin < deltaMax) {
    final int delta=(int)(((long)deltaMin + deltaMax) / 2);
    invalidateValues();
    shareOutDelta(delta,totalWeight);
    validSolution=solve(getArcs(),a,false);
    if (validSolution) {
      validDelta=delta;
      deltaMin=delta + 1;
    }
 else {
      deltaMax=delta;
    }
  }
  if (validDelta > 0 && !validSolution) {
    invalidateValues();
    shareOutDelta(validDelta,totalWeight);
    solve(a);
  }
}
