{
  List<Arc> spanToSize=new ArrayList<Arc>();
  PackedMap<Interval,Int> spanSizes=getSpanSizes();
  for (int i=0; i < spanSizes.keys.length; i++) {
    Interval key=spanSizes.keys[i];
    Int value=spanSizes.values[i];
    include2(spanToSize,key,value,value,accommodateBothMinAndMax,maximizing);
  }
  boolean[] used=findUsed(spanToSize);
  for (int i=0; i < getCount(); i++) {
    if (!used[i]) {
      Interval span=new Interval(i,i + 1);
      include(spanToSize,span,new Int(0),maximizing);
      include(spanToSize,span.inverse(),new Int(0),maximizing);
    }
  }
  if (mOrderPreserved) {
    for (int i=0; i < getCount(); i++) {
      if (used[i]) {
        include2(spanToSize,new Interval(i,i + 1),0,0,false,maximizing);
      }
    }
  }
 else {
    for (    Interval gap : getSpacers()) {
      include2(spanToSize,gap,0,0,false,maximizing);
    }
  }
  Arc[] arcs=spanToSize.toArray(new Arc[spanToSize.size()]);
  return sort(arcs,maximizing ? getCount() : 0);
}
