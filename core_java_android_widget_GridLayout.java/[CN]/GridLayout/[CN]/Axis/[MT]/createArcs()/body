{
  List<Arc> result=new ArrayList<Arc>();
  PackedMap<Interval,MutableInt> spanSizes=getSpanSizes();
  for (int i=0; i < spanSizes.keys.length; i++) {
    Interval key=spanSizes.keys[i];
    if (key == Interval.GONE)     continue;
    MutableInt value=spanSizes.values[i];
    include2(result,key,value,value,accommodateBothMinAndMax);
  }
  boolean[] used=findUsed(result);
  for (int i=0; i < getCount(); i++) {
    if (!used[i]) {
      Interval span=new Interval(i,i + 1);
      include(result,span,new MutableInt(0));
      include(result,span.inverse(),new MutableInt(0));
    }
  }
  if (mOrderPreserved) {
    for (int i=0; i < getCount(); i++) {
      if (used[i]) {
        include2(result,new Interval(i,i + 1),0,0,false);
      }
    }
  }
 else {
    for (    Interval gap : getSpacers()) {
      include2(result,gap,0,0,false);
    }
  }
  Arc[] arcs=result.toArray(new Arc[result.size()]);
  return topologicalSort(arcs,0);
}
