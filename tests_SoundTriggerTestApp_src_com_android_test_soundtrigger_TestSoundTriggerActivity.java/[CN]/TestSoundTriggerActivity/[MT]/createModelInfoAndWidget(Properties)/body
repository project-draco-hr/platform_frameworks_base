{
  try {
    ModelInfo modelInfo=new ModelInfo();
    if (!properties.containsKey("name")) {
      throw new RuntimeException("must have a 'name' property");
    }
    modelInfo.name=properties.getProperty("name");
    if (properties.containsKey("modelUuid")) {
      modelInfo.modelUuid=UUID.fromString(properties.getProperty("modelUuid"));
    }
 else {
      modelInfo.modelUuid=UUID.randomUUID();
    }
    if (properties.containsKey("vendorUuid")) {
      modelInfo.vendorUuid=UUID.fromString(properties.getProperty("vendorUuid"));
    }
 else {
      modelInfo.vendorUuid=UUID.randomUUID();
    }
    if (properties.containsKey("triggerAudio")) {
      modelInfo.triggerAudioPlayer=MediaPlayer.create(this,Uri.parse(getFilesDir().getPath() + "/" + properties.getProperty("triggerAudio")));
    }
    if (properties.containsKey("dataFile")) {
      File modelDataFile=new File(getFilesDir().getPath() + "/" + properties.getProperty("dataFile"));
      modelInfo.modelData=new byte[(int)modelDataFile.length()];
      FileInputStream input=new FileInputStream(modelDataFile);
      input.read(modelInfo.modelData,0,modelInfo.modelData.length);
    }
 else {
      modelInfo.modelData=new byte[1024];
      mRandom.nextBytes(modelInfo.modelData);
    }
    RadioButton button=new RadioButton(this);
    mRadioGroup.addView(button);
    button.setText(modelInfo.name);
    button.setOnClickListener(new View.OnClickListener(){
      public void onClick(      View v){
        onRadioButtonClicked(v);
      }
    }
);
    int newModelId=mModelIdMap.size() + 1;
    mModelIdMap.put(button,newModelId);
    mModelInfoMap.put(newModelId,modelInfo);
    if (mSelectedModelId < 0) {
      button.setChecked(true);
      onRadioButtonClicked(button);
    }
  }
 catch (  IOException e) {
    Log.e(TAG,"Error parsing properties for " + properties.getProperty("name"),e);
  }
}
