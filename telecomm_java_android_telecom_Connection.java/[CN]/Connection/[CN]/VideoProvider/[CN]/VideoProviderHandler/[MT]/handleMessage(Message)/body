{
switch (msg.what) {
case MSG_ADD_VIDEO_CALLBACK:
{
      IBinder binder=(IBinder)msg.obj;
      IVideoCallback callback=IVideoCallback.Stub.asInterface((IBinder)msg.obj);
      if (mVideoCallbacks.containsKey(binder)) {
        Log.i(this,"addVideoProvider - skipped; already present.");
        break;
      }
      mVideoCallbacks.put(binder,callback);
      Log.i(this,"addVideoProvider  " + mVideoCallbacks.size());
      break;
    }
case MSG_REMOVE_VIDEO_CALLBACK:
{
    IBinder binder=(IBinder)msg.obj;
    IVideoCallback callback=IVideoCallback.Stub.asInterface((IBinder)msg.obj);
    if (!mVideoCallbacks.containsKey(binder)) {
      Log.i(this,"removeVideoProvider - skipped; not present.");
      break;
    }
    mVideoCallbacks.remove(binder);
    break;
  }
case MSG_SET_CAMERA:
onSetCamera((String)msg.obj);
break;
case MSG_SET_PREVIEW_SURFACE:
onSetPreviewSurface((Surface)msg.obj);
break;
case MSG_SET_DISPLAY_SURFACE:
onSetDisplaySurface((Surface)msg.obj);
break;
case MSG_SET_DEVICE_ORIENTATION:
onSetDeviceOrientation(msg.arg1);
break;
case MSG_SET_ZOOM:
onSetZoom((Float)msg.obj);
break;
case MSG_SEND_SESSION_MODIFY_REQUEST:
{
SomeArgs args=(SomeArgs)msg.obj;
try {
onSendSessionModifyRequest((VideoProfile)args.arg1,(VideoProfile)args.arg2);
}
  finally {
args.recycle();
}
break;
}
case MSG_SEND_SESSION_MODIFY_RESPONSE:
onSendSessionModifyResponse((VideoProfile)msg.obj);
break;
case MSG_REQUEST_CAMERA_CAPABILITIES:
onRequestCameraCapabilities();
break;
case MSG_REQUEST_CONNECTION_DATA_USAGE:
onRequestConnectionDataUsage();
break;
case MSG_SET_PAUSE_IMAGE:
onSetPauseImage((String)msg.obj);
break;
default :
break;
}
}
