{
  LinkProperties expected=new LinkProperties();
  expected.setInterfaceName(IFACE);
  StaticIpConfiguration s=new StaticIpConfiguration();
  assertEquals(expected,s.toLinkProperties(IFACE));
  final RouteInfo connectedRoute=new RouteInfo(new IpPrefix(ADDRSTR),null,IFACE);
  s.ipAddress=ADDR;
  expected.addLinkAddress(ADDR);
  expected.addRoute(connectedRoute);
  assertEquals(expected,s.toLinkProperties(IFACE));
  s.gateway=GATEWAY;
  RouteInfo defaultRoute=new RouteInfo(new IpPrefix("0.0.0.0/0"),GATEWAY,IFACE);
  expected.addRoute(defaultRoute);
  assertEquals(expected,s.toLinkProperties(IFACE));
  s.gateway=OFFLINKGATEWAY;
  expected.removeRoute(defaultRoute);
  defaultRoute=new RouteInfo(new IpPrefix("0.0.0.0/0"),OFFLINKGATEWAY,IFACE);
  expected.addRoute(defaultRoute);
  RouteInfo gatewayRoute=new RouteInfo(new IpPrefix("192.0.2.129/32"),null,IFACE);
  expected.addRoute(gatewayRoute);
  assertEquals(expected,s.toLinkProperties(IFACE));
  s.dnsServers.add(DNS1);
  expected.addDnsServer(DNS1);
  assertEquals(expected,s.toLinkProperties(IFACE));
  s.dnsServers.add(DNS2);
  s.dnsServers.add(DNS3);
  expected.addDnsServer(DNS2);
  expected.addDnsServer(DNS3);
  assertEquals(expected,s.toLinkProperties(IFACE));
  s.domains="google.com";
  expected.setDomains("google.com");
  assertEquals(expected,s.toLinkProperties(IFACE));
  s.gateway=null;
  expected.removeRoute(defaultRoute);
  expected.removeRoute(gatewayRoute);
  assertEquals(expected,s.toLinkProperties(IFACE));
  s.gateway=OFFLINKGATEWAY;
  s.ipAddress=null;
  expected.removeLinkAddress(ADDR);
  expected.removeRoute(connectedRoute);
  expected.addRoute(defaultRoute);
  assertEquals(expected,s.toLinkProperties(IFACE));
}
