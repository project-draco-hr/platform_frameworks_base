{
  mUiScript=new ScriptC_ui_test(mRS,mRes,R.raw.ui_test);
  ProgramFragmentFixedFunction.Builder colBuilder=new ProgramFragmentFixedFunction.Builder(mRS);
  colBuilder.setVaryingColor(false);
  ProgramFragmentFixedFunction.Builder texBuilder=new ProgramFragmentFixedFunction.Builder(mRS);
  texBuilder.setTexture(ProgramFragmentFixedFunction.Builder.EnvMode.REPLACE,ProgramFragmentFixedFunction.Builder.Format.RGBA,0);
  ProgramVertexFixedFunction.Builder pvb=new ProgramVertexFixedFunction.Builder(mRS);
  ProgramVertexFixedFunction progVertex=pvb.create();
  ProgramVertexFixedFunction.Constants PVA=new ProgramVertexFixedFunction.Constants(mRS);
  ((ProgramVertexFixedFunction)progVertex).bindConstants(PVA);
  Matrix4f proj=new Matrix4f();
  proj.loadOrthoWindow(1280,720);
  PVA.setProjection(proj);
  mUiScript.set_gProgVertex(progVertex);
  mUiScript.set_gProgFragmentColor(colBuilder.create());
  mUiScript.set_gProgFragmentTexture(texBuilder.create());
  mUiScript.set_gProgStoreBlendAlpha(ProgramStore.BLEND_ALPHA_DEPTH_NONE(mRS));
  mUiScript.set_gLinearClamp(Sampler.CLAMP_LINEAR(mRS));
  mUiScript.set_gTexTorus(loadTextureRGB(R.drawable.torusmap));
  mUiScript.set_gTexOpaque(loadTextureRGB(R.drawable.data));
  mUiScript.set_gTexGlobe(loadTextureRGB(R.drawable.globe));
  mUiScript.set_gSingleMesh(mSingleMesh);
  ProgramStore.Builder psb=new ProgramStore.Builder(mRS);
  psb.setBlendFunc(BlendSrcFunc.ONE,BlendDstFunc.ZERO);
  mRS.bindProgramStore(psb.create());
  psb.setBlendFunc(BlendSrcFunc.SRC_ALPHA,BlendDstFunc.ONE);
  mUiScript.set_gPSLights(psb.create());
  ProgramFragmentFixedFunction.Builder builder=new ProgramFragmentFixedFunction.Builder(mRS);
  builder.setTexture(ProgramFragmentFixedFunction.Builder.EnvMode.REPLACE,ProgramFragmentFixedFunction.Builder.Format.RGB,0);
  ProgramFragment pfb=builder.create();
  pfb.bindSampler(Sampler.WRAP_NEAREST(mRS),0);
  mUiScript.set_gPFBackground(pfb);
  builder=new ProgramFragmentFixedFunction.Builder(mRS);
  builder.setPointSpriteTexCoordinateReplacement(true);
  builder.setTexture(ProgramFragmentFixedFunction.Builder.EnvMode.MODULATE,ProgramFragmentFixedFunction.Builder.Format.RGBA,0);
  builder.setVaryingColor(true);
  ProgramFragment pfs=builder.create();
  pfs.bindSampler(Sampler.WRAP_LINEAR_MIP_LINEAR(mRS),0);
  mUiScript.set_gPFStars(pfs);
  mTextureAllocs=new ScriptField_ListAllocs_s(mRS,100);
  for (int i=0; i < 100; i++) {
    ScriptField_ListAllocs_s.Item texElem=new ScriptField_ListAllocs_s.Item();
    texElem.item=loadTextureRGB(R.drawable.globe);
    mTextureAllocs.set(texElem,i,false);
  }
  mTextureAllocs.copyAll();
  mUiScript.bind_gTexList100(mTextureAllocs);
  mSampleTextAllocs=new ScriptField_ListAllocs_s(mRS,100);
  for (int i=0; i < 100; i++) {
    ScriptField_ListAllocs_s.Item textElem=new ScriptField_ListAllocs_s.Item();
    textElem.item=Allocation.createFromString(mRS,SAMPLE_TEXT,Allocation.USAGE_SCRIPT);
    mSampleTextAllocs.set(textElem,i,false);
  }
  mSampleTextAllocs.copyAll();
  mUiScript.bind_gSampleTextList100(mSampleTextAllocs);
  mSampleListViewAllocs=new ScriptField_ListAllocs_s(mRS,1000);
  for (int i=0; i < 1000; i++) {
    ScriptField_ListAllocs_s.Item textElem=new ScriptField_ListAllocs_s.Item();
    textElem.item=Allocation.createFromString(mRS,LIST_TEXT,Allocation.USAGE_SCRIPT);
    mSampleListViewAllocs.set(textElem,i,false);
  }
  mSampleListViewAllocs.copyAll();
  mUiScript.bind_gListViewText(mSampleListViewAllocs);
  mPvStarAlloc=new ScriptField_VpConsts(mRS,1);
  mUiScript.bind_vpConstants(mPvStarAlloc);
  mPvProjectionAlloc=new ProgramVertexFixedFunction.Constants(mRS);
  updateProjectionMatrices();
  pvb=new ProgramVertexFixedFunction.Builder(mRS);
  ProgramVertex pvbp=pvb.create();
  ((ProgramVertexFixedFunction)pvbp).bindConstants(mPvProjectionAlloc);
  mUiScript.set_gPVBkProj(pvbp);
  createParticlesMesh();
  ProgramVertex.Builder sb=new ProgramVertex.Builder(mRS);
  String t="varying vec4 varColor;\n" + "varying vec2 varTex0;\n" + "void main() {\n"+ "  float dist = ATTRIB_position.y;\n"+ "  float angle = ATTRIB_position.x;\n"+ "  float x = dist * sin(angle);\n"+ "  float y = dist * cos(angle) * 0.892;\n"+ "  float p = dist * 5.5;\n"+ "  float s = cos(p);\n"+ "  float t = sin(p);\n"+ "  vec4 pos;\n"+ "  pos.x = t * x + s * y;\n"+ "  pos.y = s * x - t * y;\n"+ "  pos.z = ATTRIB_position.z;\n"+ "  pos.w = 1.0;\n"+ "  gl_Position = UNI_MVP * pos;\n"+ "  gl_PointSize = ATTRIB_color.a * 10.0;\n"+ "  varColor.rgb = ATTRIB_color.rgb;\n"+ "  varColor.a = 1.0;\n"+ "}\n";
  sb.setShader(t);
  sb.addInput(mParticlesMesh.getVertexAllocation(0).getType().getElement());
  sb.addConstant(mPvStarAlloc.getType());
  ProgramVertex pvs=sb.create();
  pvs.bindConstants(mPvStarAlloc.getAllocation(),0);
  mUiScript.set_gPVStars(pvs);
  mUiScript.set_gTSpace(loadTextureRGB(R.drawable.space));
  mUiScript.set_gTLight1(loadTextureRGB(R.drawable.light1));
  mUiScript.set_gTFlares(loadTextureARGB(R.drawable.flares));
  mUiScript.set_gFontSans(mFontSans);
}
