{
switch (msg.what) {
case AsyncChannel.CMD_CHANNEL_FULL_CONNECTION:
{
      if (mAsyncChannel != null) {
        log("Received new connection while already connected!");
      }
 else {
        if (VDBG)         log("NetworkAgent fully connected");
        AsyncChannel ac=new AsyncChannel();
        ac.connected(null,this,msg.replyTo);
        ac.replyToMessage(msg,AsyncChannel.CMD_CHANNEL_FULLY_CONNECTED,AsyncChannel.STATUS_SUCCESSFUL);
synchronized (mPreConnectedQueue) {
          mAsyncChannel=ac;
          for (          Message m : mPreConnectedQueue) {
            ac.sendMessage(m);
          }
          mPreConnectedQueue.clear();
        }
      }
      break;
    }
case AsyncChannel.CMD_CHANNEL_DISCONNECT:
{
    if (VDBG)     log("CMD_CHANNEL_DISCONNECT");
    if (mAsyncChannel != null)     mAsyncChannel.disconnect();
    break;
  }
case AsyncChannel.CMD_CHANNEL_DISCONNECTED:
{
  if (DBG)   log("NetworkAgent channel lost");
  unwanted();
synchronized (mPreConnectedQueue) {
    mAsyncChannel=null;
  }
  break;
}
case CMD_SUSPECT_BAD:
{
log("Unhandled Message " + msg);
break;
}
case CMD_REQUEST_BANDWIDTH_UPDATE:
{
long currentTimeMs=System.currentTimeMillis();
if (VDBG) {
log("CMD_REQUEST_BANDWIDTH_UPDATE request received.");
}
if (currentTimeMs >= (mLastBwRefreshTime + BW_REFRESH_MIN_WIN_MS)) {
mPollLceScheduled=false;
if (mPollLcePending.getAndSet(true) == false) {
  pollLceData();
}
}
 else {
if (!mPollLceScheduled) {
  long waitTime=mLastBwRefreshTime + BW_REFRESH_MIN_WIN_MS - currentTimeMs + 1;
  mPollLceScheduled=sendEmptyMessageDelayed(CMD_REQUEST_BANDWIDTH_UPDATE,waitTime);
}
}
break;
}
case CMD_REPORT_NETWORK_STATUS:
{
String redirectUrl=((Bundle)msg.obj).getString(REDIRECT_URL_KEY);
if (VDBG) {
log("CMD_REPORT_NETWORK_STATUS(" + (msg.arg1 == VALID_NETWORK ? "VALID, " : "INVALID, ") + redirectUrl);
}
networkStatus(msg.arg1,redirectUrl);
break;
}
case CMD_SAVE_ACCEPT_UNVALIDATED:
{
saveAcceptUnvalidated(msg.arg1 != 0);
break;
}
case CMD_START_PACKET_KEEPALIVE:
{
startPacketKeepalive(msg);
break;
}
case CMD_STOP_PACKET_KEEPALIVE:
{
stopPacketKeepalive(msg);
break;
}
case CMD_SET_SIGNAL_STRENGTH_THRESHOLDS:
{
ArrayList<Integer> thresholds=((Bundle)msg.obj).getIntegerArrayList("thresholds");
int[] intThresholds=new int[(thresholds != null) ? thresholds.size() : 0];
for (int i=0; i < intThresholds.length; i++) {
intThresholds[i]=thresholds.get(i);
}
setSignalStrengthThresholds(intThresholds);
break;
}
case CMD_PREVENT_AUTOMATIC_RECONNECT:
{
preventAutomaticReconnect();
break;
}
}
}
