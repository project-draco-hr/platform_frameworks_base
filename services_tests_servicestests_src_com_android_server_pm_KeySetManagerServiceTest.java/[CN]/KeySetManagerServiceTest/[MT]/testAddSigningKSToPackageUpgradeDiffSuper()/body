{
  PackageSetting ps=generateFakePackageSetting("packageA");
  mPackagesMap.put(ps.name,ps);
  ArraySet<PublicKey> signingKeys=new ArraySet<PublicKey>();
  PublicKey keyA=PackageParser.parsePublicKey(KeySetStrings.ctsKeySetPublicKeyA);
  signingKeys.add(keyA);
  mKsms.addSigningKeySetToPackageLPw(ps,signingKeys);
  PublicKey keyB=PackageParser.parsePublicKey(KeySetStrings.ctsKeySetPublicKeyB);
  signingKeys.add(keyB);
  mKsms.addSigningKeySetToPackageLPw(ps,signingKeys);
  assertEquals(0,KeySetUtils.getKeySetRefCount(mKsms,1));
  assertEquals(1,KeySetUtils.getKeySetRefCount(mKsms,2));
  assertEquals(0,KeySetUtils.getPubKeyRefCount(mKsms,1));
  assertEquals(1,KeySetUtils.getPubKeyRefCount(mKsms,2));
  assertEquals(1,KeySetUtils.getPubKeyRefCount(mKsms,3));
  assertTrue(keyA.equals(KeySetUtils.getPubKey(mKsms,2)) || keyA.equals(KeySetUtils.getPubKey(mKsms,3)));
  assertTrue(keyB.equals(KeySetUtils.getPubKey(mKsms,2)) || keyB.equals(KeySetUtils.getPubKey(mKsms,3)));
  assertFalse(KeySetUtils.getPubKey(mKsms,2).equals(KeySetUtils.getPubKey(mKsms,3)));
  LongSparseArray<ArraySet<Long>> ksMapping=KeySetUtils.getKeySetMapping(mKsms);
  assertEquals(1,ksMapping.size());
  ArraySet<Long> mapping=ksMapping.get(2);
  assertEquals(2,mapping.size());
  assertTrue(mapping.contains(new Long(2)));
  assertTrue(mapping.contains(new Long(3)));
  assertEquals(2,ps.keySetData.getProperSigningKeySet());
}
