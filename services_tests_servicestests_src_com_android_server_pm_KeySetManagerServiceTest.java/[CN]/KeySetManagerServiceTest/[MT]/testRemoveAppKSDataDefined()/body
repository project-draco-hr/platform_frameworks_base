{
  PackageSetting ps=generateFakePackageSetting("packageA");
  mPackagesMap.put(ps.name,ps);
  ArrayMap<String,ArraySet<PublicKey>> definedKS=new ArrayMap<String,ArraySet<PublicKey>>();
  ArraySet<PublicKey> keys=new ArraySet<PublicKey>();
  PublicKey keyA=PackageParser.parsePublicKey(KeySetStrings.ctsKeySetPublicKeyA);
  keys.add(keyA);
  mKsms.addSigningKeySetToPackageLPw(ps,keys);
  definedKS.put("aliasA",keys);
  mKsms.addDefinedKeySetsToPackageLPw(ps,definedKS);
  ArraySet<String> upgradeKS=new ArraySet<String>();
  upgradeKS.add("aliasA");
  mKsms.addUpgradeKeySetsToPackageLPw(ps,upgradeKS);
  mKsms.removeAppKeySetDataLPw(ps.name);
  assertEquals(0,KeySetUtils.getKeySetRefCount(mKsms,1));
  assertEquals(0,KeySetUtils.getPubKeyRefCount(mKsms,1));
  LongSparseArray<ArraySet<Long>> ksMapping=KeySetUtils.getKeySetMapping(mKsms);
  assertEquals(0,ksMapping.size());
  assertEquals(PackageKeySetData.KEYSET_UNASSIGNED,ps.keySetData.getProperSigningKeySet());
  assertEquals(0,ps.keySetData.getAliases().size());
  assertNull(ps.keySetData.getUpgradeKeySets());
}
