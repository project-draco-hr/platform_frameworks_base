{
  PackageSetting ps=generateFakePackageSetting("packageA");
  mPackagesMap.put(ps.name,ps);
  ArrayMap<String,ArraySet<PublicKey>> definedKS=new ArrayMap<String,ArraySet<PublicKey>>();
  ArraySet<PublicKey> keys1=new ArraySet<PublicKey>();
  PublicKey keyA=PackageParser.parsePublicKey(KeySetStrings.ctsKeySetPublicKeyA);
  keys1.add(keyA);
  definedKS.put("aliasA",keys1);
  mKsms.addDefinedKeySetsToPackageLPw(ps,definedKS);
  ArraySet<PublicKey> keys2=new ArraySet<PublicKey>();
  PublicKey keyB=PackageParser.parsePublicKey(KeySetStrings.ctsKeySetPublicKeyB);
  keys2.add(keyB);
  definedKS.remove("aliasA");
  definedKS.put("aliasB",keys2);
  mKsms.addDefinedKeySetsToPackageLPw(ps,definedKS);
  definedKS.remove("aliasB");
  definedKS.put("aliasA",keys1);
  mKsms.addDefinedKeySetsToPackageLPw(ps,definedKS);
  assertEquals(0,KeySetUtils.getKeySetRefCount(mKsms,1));
  assertEquals(0,KeySetUtils.getKeySetRefCount(mKsms,2));
  assertEquals(1,KeySetUtils.getKeySetRefCount(mKsms,3));
  assertEquals(0,KeySetUtils.getPubKeyRefCount(mKsms,1));
  assertEquals(0,KeySetUtils.getPubKeyRefCount(mKsms,2));
  assertEquals(1,KeySetUtils.getPubKeyRefCount(mKsms,3));
  assertEquals(keyA,KeySetUtils.getPubKey(mKsms,3));
  LongSparseArray<ArraySet<Long>> ksMapping=KeySetUtils.getKeySetMapping(mKsms);
  assertEquals(1,ksMapping.size());
  ArraySet<Long> mapping=ksMapping.get(3);
  assertEquals(1,mapping.size());
  assertTrue(mapping.contains(new Long(3)));
  assertEquals(new Long(3),ps.keySetData.getAliases().get("aliasA"));
}
