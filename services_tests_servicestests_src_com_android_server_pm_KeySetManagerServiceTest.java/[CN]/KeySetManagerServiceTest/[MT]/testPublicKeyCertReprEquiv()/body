{
  PublicKey keyA=PackageParser.parsePublicKey(KeySetStrings.ctsKeySetPublicKeyA);
  PublicKey keyB=PackageParser.parsePublicKey(KeySetStrings.ctsKeySetPublicKeyB);
  PublicKey keyC=PackageParser.parsePublicKey(KeySetStrings.ctsKeySetPublicKeyC);
  Signature sigA=new Signature(KeySetStrings.ctsKeySetCertA);
  Signature sigB=new Signature(KeySetStrings.ctsKeySetCertB);
  Signature sigC=new Signature(KeySetStrings.ctsKeySetCertC);
  assertNotNull(keyA);
  assertNotNull(keyB);
  assertNotNull(keyC);
  assertEquals(keyA,sigA.getPublicKey());
  assertEquals(keyB,sigB.getPublicKey());
  assertEquals(keyC,sigC.getPublicKey());
  byte[] bArrayPk=keyA.getEncoded();
  byte[] bArrayCert=sigA.getPublicKey().getEncoded();
  assertEquals(bArrayPk.length,bArrayCert.length);
  assertEquals(true,ArrayUtils.equals(bArrayPk,bArrayCert,bArrayPk.length));
  bArrayPk=keyB.getEncoded();
  bArrayCert=sigB.getPublicKey().getEncoded();
  assertEquals(bArrayPk.length,bArrayCert.length);
  assertEquals(true,ArrayUtils.equals(bArrayPk,bArrayCert,bArrayPk.length));
  bArrayPk=keyC.getEncoded();
  bArrayCert=sigC.getPublicKey().getEncoded();
  assertEquals(bArrayPk.length,bArrayCert.length);
  assertEquals(true,ArrayUtils.equals(bArrayPk,bArrayCert,bArrayPk.length));
}
