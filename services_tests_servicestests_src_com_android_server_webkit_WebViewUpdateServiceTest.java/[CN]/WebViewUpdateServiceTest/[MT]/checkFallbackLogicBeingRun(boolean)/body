{
  String primaryPackage="primary";
  String fallbackPackage="fallback";
  WebViewProviderInfo[] packages=new WebViewProviderInfo[]{new WebViewProviderInfo(primaryPackage,"",true,false,null),new WebViewProviderInfo(fallbackPackage,"",true,true,null)};
  setupWithPackages(packages,fallbackLogicEnabled);
  setEnabledAndValidPackageInfos(packages);
  mWebViewUpdateServiceImpl.prepareWebViewInSystemServer();
  if (fallbackLogicEnabled) {
    Mockito.verify(mTestSystemImpl).uninstallAndDisablePackageForAllUsers(Matchers.anyObject(),Mockito.eq(fallbackPackage));
  }
 else {
    Mockito.verify(mTestSystemImpl,Mockito.never()).uninstallAndDisablePackageForAllUsers(Matchers.anyObject(),Matchers.anyObject());
  }
  Mockito.verify(mTestSystemImpl).onWebViewProviderChanged(Mockito.argThat(new IsPackageInfoWithName(primaryPackage)));
  mTestSystemImpl.setPackageInfo(createPackageInfo(fallbackPackage,true,true));
  mWebViewUpdateServiceImpl.packageStateChanged(fallbackPackage,WebViewUpdateService.PACKAGE_CHANGED);
  if (fallbackLogicEnabled) {
    Mockito.verify(mTestSystemImpl,Mockito.times(2)).uninstallAndDisablePackageForAllUsers(Matchers.anyObject(),Mockito.eq(fallbackPackage));
  }
 else {
    Mockito.verify(mTestSystemImpl,Mockito.never()).uninstallAndDisablePackageForAllUsers(Matchers.anyObject(),Matchers.anyObject());
  }
}
