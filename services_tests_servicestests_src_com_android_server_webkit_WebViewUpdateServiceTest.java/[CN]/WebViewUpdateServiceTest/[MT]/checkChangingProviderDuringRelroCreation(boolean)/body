{
  String firstPackage="first";
  String secondPackage="second";
  WebViewProviderInfo[] packages=new WebViewProviderInfo[]{new WebViewProviderInfo(firstPackage,"",true,false,null),new WebViewProviderInfo(secondPackage,"",true,false,null)};
  setupWithPackages(packages);
  if (settingsChange) {
    setEnabledAndValidPackageInfos(packages);
  }
 else {
    for (    WebViewProviderInfo wpi : packages) {
      mTestSystemImpl.setPackageInfo(createPackageInfo(wpi.packageName,false,true));
    }
  }
  CountDownLatch countdown=new CountDownLatch(1);
  mWebViewUpdateServiceImpl.prepareWebViewInSystemServer();
  Mockito.verify(mTestSystemImpl).onWebViewProviderChanged(Mockito.argThat(new IsPackageInfoWithName(firstPackage)));
  assertEquals(firstPackage,mWebViewUpdateServiceImpl.getCurrentWebViewPackageName());
  new Thread(new Runnable(){
    @Override public void run(){
      WebViewProviderResponse threadResponse=mWebViewUpdateServiceImpl.waitForAndGetProvider();
      assertEquals(WebViewFactory.LIBLOAD_SUCCESS,threadResponse.status);
      assertEquals(secondPackage,threadResponse.packageInfo.packageName);
      Mockito.verify(mTestSystemImpl).killPackageDependents(Mockito.eq(firstPackage));
      countdown.countDown();
    }
  }
).start();
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException e) {
  }
  if (settingsChange) {
    mWebViewUpdateServiceImpl.changeProviderAndSetting(secondPackage);
  }
 else {
    mTestSystemImpl.setPackageInfo(createPackageInfo(secondPackage,true,true));
    mWebViewUpdateServiceImpl.packageStateChanged(secondPackage,WebViewUpdateService.PACKAGE_CHANGED);
  }
  mWebViewUpdateServiceImpl.notifyRelroCreationCompleted();
  Mockito.verify(mTestSystemImpl).onWebViewProviderChanged(Mockito.argThat(new IsPackageInfoWithName(secondPackage)));
  mWebViewUpdateServiceImpl.notifyRelroCreationCompleted();
  try {
    countdown.await();
  }
 catch (  InterruptedException e) {
  }
}
