{
  String primaryPackage="primary";
  String fallbackPackage="fallback";
  WebViewProviderInfo[] packages=new WebViewProviderInfo[]{new WebViewProviderInfo(primaryPackage,"",true,false,null),new WebViewProviderInfo(fallbackPackage,"",true,true,null)};
  setupWithPackages(packages,true);
  mTestSystemImpl.setPackageInfo(createPackageInfo(primaryPackage,true,true,true,null,10));
  mTestSystemImpl.setPackageInfo(createPackageInfo(fallbackPackage,true,true,true));
  runWebViewBootPreparationOnMainSync();
  checkPreparationPhasesForPackage(primaryPackage,1);
  Mockito.verify(mTestSystemImpl,Mockito.times(1)).enablePackageForUser(Mockito.eq(fallbackPackage),Mockito.eq(false),Matchers.anyInt());
  mWebViewUpdateServiceImpl.packageStateChanged(primaryPackage,WebViewUpdateService.PACKAGE_ADDED_REPLACED,0);
  mWebViewUpdateServiceImpl.packageStateChanged(primaryPackage,WebViewUpdateService.PACKAGE_ADDED_REPLACED,1);
  mWebViewUpdateServiceImpl.packageStateChanged(primaryPackage,WebViewUpdateService.PACKAGE_ADDED_REPLACED,2);
  Mockito.verify(mTestSystemImpl,Mockito.times(1)).onWebViewProviderChanged(Mockito.argThat(new IsPackageInfoWithName(primaryPackage)));
  Mockito.verify(mTestSystemImpl,Mockito.times(1)).enablePackageForUser(Mockito.eq(fallbackPackage),Mockito.eq(false),Matchers.anyInt());
  WebViewProviderResponse response=mWebViewUpdateServiceImpl.waitForAndGetProvider();
  assertEquals(WebViewFactory.LIBLOAD_SUCCESS,response.status);
  assertEquals(primaryPackage,response.packageInfo.packageName);
  mTestSystemImpl.setPackageInfo(createPackageInfo(primaryPackage,true,true,true,null,20));
  mWebViewUpdateServiceImpl.packageStateChanged(primaryPackage,WebViewUpdateService.PACKAGE_ADDED_REPLACED,0);
  checkPreparationPhasesForPackage(primaryPackage,2);
  mTestSystemImpl.setPackageInfo(createPackageInfo(primaryPackage,true,true,true,null,50));
  mWebViewUpdateServiceImpl.packageStateChanged(primaryPackage,WebViewUpdateService.PACKAGE_ADDED_REPLACED,2);
  checkPreparationPhasesForPackage(primaryPackage,3);
}
