{
  String primaryPackage="primary";
  String fallbackPackage="fallback";
  WebViewProviderInfo[] packages=new WebViewProviderInfo[]{new WebViewProviderInfo(primaryPackage,"",true,false,null),new WebViewProviderInfo(fallbackPackage,"",true,true,null)};
  setupWithPackages(packages,true);
  mTestSystemImpl.setPackageInfo(createPackageInfo(fallbackPackage,true,true));
  mWebViewUpdateServiceImpl.prepareWebViewInSystemServer();
  Mockito.verify(mTestSystemImpl,Mockito.never()).uninstallAndDisablePackageForAllUsers(Matchers.anyObject(),Matchers.anyObject());
  Mockito.verify(mTestSystemImpl).onWebViewProviderChanged(Mockito.argThat(new IsPackageInfoWithName(fallbackPackage)));
  mWebViewUpdateServiceImpl.notifyRelroCreationCompleted();
  WebViewProviderResponse response=mWebViewUpdateServiceImpl.waitForAndGetProvider();
  assertEquals(WebViewFactory.LIBLOAD_SUCCESS,response.status);
  assertEquals(fallbackPackage,response.packageInfo.packageName);
  mTestSystemImpl.setPackageInfo(createPackageInfo(primaryPackage,true,true));
  mWebViewUpdateServiceImpl.packageStateChanged(primaryPackage,WebViewUpdateService.PACKAGE_ADDED);
  Mockito.verify(mTestSystemImpl).uninstallAndDisablePackageForAllUsers(Matchers.anyObject(),Mockito.eq(fallbackPackage));
  Mockito.verify(mTestSystemImpl).onWebViewProviderChanged(Mockito.argThat(new IsPackageInfoWithName(primaryPackage)));
  mWebViewUpdateServiceImpl.notifyRelroCreationCompleted();
  response=mWebViewUpdateServiceImpl.waitForAndGetProvider();
  assertEquals(WebViewFactory.LIBLOAD_SUCCESS,response.status);
  assertEquals(primaryPackage,response.packageInfo.packageName);
  Mockito.verify(mTestSystemImpl).killPackageDependents(Mockito.eq(fallbackPackage));
}
