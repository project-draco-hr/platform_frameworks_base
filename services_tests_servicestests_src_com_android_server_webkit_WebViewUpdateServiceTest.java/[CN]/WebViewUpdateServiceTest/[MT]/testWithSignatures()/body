{
  String validPackage="valid package";
  String invalidPackage="invalid package";
  Signature validSignature=new Signature("11");
  Signature invalidExpectedSignature=new Signature("22");
  Signature invalidPackageSignature=new Signature("33");
  WebViewProviderInfo[] packages=new WebViewProviderInfo[]{new WebViewProviderInfo(invalidPackage,"",true,false,new String[]{Base64.encodeToString(invalidExpectedSignature.toByteArray(),Base64.DEFAULT)}),new WebViewProviderInfo(validPackage,"",true,false,new String[]{Base64.encodeToString(validSignature.toByteArray(),Base64.DEFAULT)})};
  setupWithPackages(packages,true,1,false);
  mTestSystemImpl.setPackageInfo(createPackageInfo(invalidPackage,true,true,new Signature[]{invalidPackageSignature}));
  mTestSystemImpl.setPackageInfo(createPackageInfo(validPackage,true,true,new Signature[]{validSignature}));
  mWebViewUpdateServiceImpl.prepareWebViewInSystemServer();
  Mockito.verify(mTestSystemImpl).onWebViewProviderChanged(Mockito.argThat(new IsPackageInfoWithName(validPackage)));
  mWebViewUpdateServiceImpl.notifyRelroCreationCompleted();
  WebViewProviderResponse response=mWebViewUpdateServiceImpl.waitForAndGetProvider();
  assertEquals(WebViewFactory.LIBLOAD_SUCCESS,response.status);
  assertEquals(validPackage,response.packageInfo.packageName);
  WebViewProviderInfo[] validPackages=mWebViewUpdateServiceImpl.getValidWebViewPackages();
  assertEquals(1,validPackages.length);
  assertEquals(validPackage,validPackages[0].packageName);
}
