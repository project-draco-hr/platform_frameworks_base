{
  if (DBG) {
    log("##### CallerInfoAsyncQuery startQuery()... #####");
    log("- number: " + number);
    log("- cookie: " + cookie);
  }
  Uri contactRef;
  String selection;
  String[] selectionArgs;
  if (PhoneNumberUtils.isUriNumber(number)) {
    if (DBG)     log("  - Treating number as a SIP address: " + number);
    contactRef=Data.CONTENT_URI;
    selection="upper(" + Data.DATA1 + ")=?"+ " AND "+ Data.MIMETYPE+ "='"+ SipAddress.CONTENT_ITEM_TYPE+ "'";
    selectionArgs=new String[]{number.toUpperCase()};
  }
 else {
    contactRef=Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI,Uri.encode(number));
    selection=null;
    selectionArgs=null;
  }
  if (DBG) {
    log("==> contactRef: " + contactRef);
    log("==> selection: " + selection);
    if (selectionArgs != null) {
      for (int i=0; i < selectionArgs.length; i++) {
        log("==> selectionArgs[" + i + "]: "+ selectionArgs[i]);
      }
    }
  }
  CallerInfoAsyncQuery c=new CallerInfoAsyncQuery();
  c.allocate(context,contactRef);
  CookieWrapper cw=new CookieWrapper();
  cw.listener=listener;
  cw.cookie=cookie;
  cw.number=number;
  if (PhoneNumberUtils.isEmergencyNumber(number)) {
    cw.event=EVENT_EMERGENCY_NUMBER;
  }
 else   if (PhoneNumberUtils.isVoiceMailNumber(number)) {
    cw.event=EVENT_VOICEMAIL_NUMBER;
  }
 else {
    cw.event=EVENT_NEW_QUERY;
  }
  c.mHandler.startQuery(token,cw,contactRef,null,selection,selectionArgs,null);
  return c;
}
