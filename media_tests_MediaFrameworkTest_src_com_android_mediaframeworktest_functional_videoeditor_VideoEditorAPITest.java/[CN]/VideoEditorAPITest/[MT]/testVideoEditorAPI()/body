{
  final String videoItemFileName1=INPUT_FILE_PATH + "MPEG4_SP_720x480_30fps_280kbps_AACLC_48kHz_96kbps_s_0_21.mp4";
  final String videoItemFileName2=INPUT_FILE_PATH + "MPEG4_SP_640x480_15fps_1200kbps_AACLC_48khz_64kbps_m_1_17.3gp";
  final String videoItemFileName3=INPUT_FILE_PATH + "MPEG4_SP_640x480_15fps_512kbps_AACLC_48khz_132kbps_s_0_26.mp4";
  final String imageItemFileName1=INPUT_FILE_PATH + "IMG_640x480.jpg";
  final String imageItemFileName2=INPUT_FILE_PATH + "IMG_176x144.jpg";
  final String audioFilename1=INPUT_FILE_PATH + "AMRNB_8KHz_12.2Kbps_m_1_17.3gp";
  final String audioFilename2=INPUT_FILE_PATH + "AACLC_48KHz_256Kbps_s_1_17.3gp";
  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;
  boolean flagForException=false;
  TransitionCrossfade transition2And4;
  final MediaVideoItem mediaVideoItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFileName1,renderingMode);
  mediaVideoItem1.setExtractBoundaries(0,10000);
  mVideoEditor.addMediaItem(mediaVideoItem1);
  final MediaVideoItem mediaVideoItem2=mVideoEditorHelper.createMediaItem(mVideoEditor,"m2",videoItemFileName2,renderingMode);
  mediaVideoItem2.setExtractBoundaries(mediaVideoItem2.getDuration() / 4,mediaVideoItem2.getDuration() / 2);
  mVideoEditor.addMediaItem(mediaVideoItem2);
  final MediaVideoItem mediaVideoItem3=mVideoEditorHelper.createMediaItem(mVideoEditor,"m3",videoItemFileName3,renderingMode);
  mediaVideoItem3.setExtractBoundaries(mediaVideoItem3.getDuration() / 2,mediaVideoItem3.getDuration());
  mVideoEditor.addMediaItem(mediaVideoItem3);
  final MediaImageItem mediaImageItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"m4",imageItemFileName1,5000,renderingMode);
  final MediaImageItem mediaImageItem2=mVideoEditorHelper.createMediaItem(mVideoEditor,"m5",imageItemFileName2,5000,renderingMode);
  List<MediaItem> mediaList=mVideoEditor.getAllMediaItems();
  assertEquals("Media Item List Size",3,mediaList.size());
  mVideoEditor.insertMediaItem(mediaImageItem1,mediaVideoItem2.getId());
  mediaList=mVideoEditor.getAllMediaItems();
  assertEquals("Media Item List Size",4,mediaList.size());
  assertEquals("Media item 1",mediaVideoItem1,mediaList.get(0));
  assertEquals("Media item 2",mediaVideoItem2,mediaList.get(1));
  assertEquals("Media item 4",mediaImageItem1,mediaList.get(2));
  assertEquals("Media item 3",mediaVideoItem3,mediaList.get(3));
  mVideoEditor.insertMediaItem(mediaImageItem2,mediaImageItem1.getId());
  mediaList=mVideoEditor.getAllMediaItems();
  assertEquals("Media Item List Size",5,mediaList.size());
  assertEquals("Media item 1",mediaVideoItem1,mediaList.get(0));
  assertEquals("Media item 2",mediaVideoItem2,mediaList.get(1));
  assertEquals("Media item 4",mediaImageItem1,mediaList.get(2));
  assertEquals("Media item 5",mediaImageItem2,mediaList.get(3));
  assertEquals("Media item 3",mediaVideoItem3,mediaList.get(4));
  mVideoEditor.moveMediaItem(mediaVideoItem1.getId(),mediaImageItem2.getId());
  mediaList=mVideoEditor.getAllMediaItems();
  assertEquals("Media Item List Size",5,mediaList.size());
  assertEquals("Media item 2",mediaVideoItem2,mediaList.get(0));
  assertEquals("Media item 4",mediaImageItem1,mediaList.get(1));
  assertEquals("Media item 5",mediaImageItem2,mediaList.get(2));
  assertEquals("Media item 1",mediaVideoItem1,mediaList.get(3));
  assertEquals("Media item 3",mediaVideoItem3,mediaList.get(4));
  assertEquals("Media Item 1",mediaVideoItem1,mVideoEditor.getMediaItem(mediaVideoItem1.getId()));
  flagForException=false;
  transition2And4=null;
  try {
    transition2And4=mVideoEditorHelper.createTCrossFade("transition2And4",mediaVideoItem2,mediaImageItem1,2000,Transition.BEHAVIOR_MIDDLE_FAST);
    mVideoEditor.addTransition(transition2And4);
  }
 catch (  IllegalArgumentException e) {
    flagForException=true;
  }
  assertFalse("Transition2and4 cannot be created",flagForException);
  TransitionCrossfade transition1And3=null;
  flagForException=false;
  try {
    transition1And3=mVideoEditorHelper.createTCrossFade("transition1And3",mediaVideoItem1,mediaVideoItem2,5000,Transition.BEHAVIOR_MIDDLE_FAST);
    mVideoEditor.addTransition(transition1And3);
  }
 catch (  IllegalArgumentException e) {
    flagForException=true;
  }
  assertTrue("Transition1and3 cannot be created",flagForException);
  List<Transition> transitionList=mVideoEditor.getAllTransitions();
  assertEquals("Transition List",1,transitionList.size());
  assertEquals("Transition 2",transition2And4,mVideoEditor.getTransition(transition2And4.getId()));
  final AudioTrack audioTrack=mVideoEditorHelper.createAudio(mVideoEditor,"audioTrack",audioFilename1);
  mVideoEditor.addAudioTrack(audioTrack);
  List<AudioTrack> audioList=mVideoEditor.getAllAudioTracks();
  assertEquals("Audio List",1,audioList.size());
  final AudioTrack audioTrack1=mVideoEditorHelper.createAudio(mVideoEditor,"audioTrack1",audioFilename2);
  flagForException=false;
  try {
    mVideoEditor.addAudioTrack(audioTrack1);
  }
 catch (  IllegalArgumentException e) {
    flagForException=true;
  }
  assertTrue("Audio Track support is 1 ",flagForException);
  flagForException=false;
  try {
    mVideoEditor.insertAudioTrack(audioTrack1,"audioTrack");
  }
 catch (  IllegalArgumentException e) {
    flagForException=true;
  }
  assertTrue("Audio Track supports is 1 ",flagForException);
  assertEquals("Removing AudioTrack",audioTrack,mVideoEditor.removeAudioTrack(audioTrack.getId()));
  assertEquals("Removing transition",transition2And4,mVideoEditor.removeTransition(transition2And4.getId()));
  assertEquals("Removing Media Item",mediaVideoItem2,mVideoEditor.removeMediaItem(mediaVideoItem2.getId()));
  mVideoEditor.setAspectRatio(MediaProperties.ASPECT_RATIO_16_9);
  assertEquals("Check Aspect Ratio",MediaProperties.ASPECT_RATIO_16_9,mVideoEditor.getAspectRatio());
  long storyBoardDuration=mediaVideoItem1.getTimelineDuration() + mediaVideoItem3.getTimelineDuration() + mediaImageItem1.getDuration()+ mediaImageItem2.getDuration();
  assertEquals("Story Board Duration",storyBoardDuration,mVideoEditor.getDuration());
}
