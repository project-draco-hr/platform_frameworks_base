{
  final String audioFileName=INPUT_FILE_PATH + "AACLC_48KHz_256Kbps_s_1_17.3gp";
  boolean flagForException=false;
  final AudioTrack audioTrack=mVideoEditorHelper.createAudio(mVideoEditor,"audioTrack",audioFileName);
  mVideoEditor.addAudioTrack(audioTrack);
  assertFalse("Audio Ducking Disabled by default",audioTrack.isDuckingEnabled());
  audioTrack.enableDucking(45,70);
  assertTrue("Audio Ducking Enabled",audioTrack.isDuckingEnabled());
  assertEquals("Audio Ducking Threshold",45,audioTrack.getDuckingThreshhold());
  assertEquals("Audio Ducking Volume",70,audioTrack.getDuckedTrackVolume());
  audioTrack.enableDucking(85,70);
  assertEquals("Audio Ducking Threshold",85,audioTrack.getDuckingThreshhold());
  assertEquals("Audio Ducking Volume",70,audioTrack.getDuckedTrackVolume());
  try {
    audioTrack.enableDucking(91,70);
  }
 catch (  IllegalArgumentException e) {
    flagForException=true;
  }
  assertTrue("Enable ducking threshold > 90",flagForException);
  flagForException=false;
  try {
    audioTrack.enableDucking(90,101);
  }
 catch (  IllegalArgumentException e) {
    flagForException=true;
  }
  assertTrue("Enable ducking volume > 100",flagForException);
  flagForException=false;
  try {
    audioTrack.enableDucking(91,101);
  }
 catch (  IllegalArgumentException e) {
    flagForException=true;
  }
  assertTrue("Enable ducking volume > 100 and threshold > 91",flagForException);
  flagForException=false;
  try {
    audioTrack.enableDucking(-1,100);
  }
 catch (  IllegalArgumentException e) {
    flagForException=true;
  }
  assertTrue("Enable ducking threshold < 0",flagForException);
  flagForException=false;
  try {
    audioTrack.enableDucking(1,-1);
  }
 catch (  IllegalArgumentException e) {
    flagForException=true;
  }
  assertTrue("Enable ducking lowVolume < 0",flagForException);
  flagForException=false;
  try {
    audioTrack.enableDucking(0,50);
  }
 catch (  IllegalArgumentException e) {
    flagForException=true;
  }
  assertFalse("Enable ducking threshold = 0",flagForException);
}
