{
  final GradientState state=mGradientState;
  if (a.hasValue(R.styleable.GradientDrawable_shape)) {
    final int shapeType=a.getInt(R.styleable.GradientDrawable_shape,RECTANGLE);
    setShape(shapeType);
  }
  if (a.hasValue(R.styleable.GradientDrawable_dither)) {
    final boolean dither=a.getBoolean(R.styleable.GradientDrawable_dither,false);
    setDither(dither);
  }
  if (state.mShape == RING) {
    if (a.hasValue(R.styleable.GradientDrawable_innerRadius)) {
      state.mInnerRadius=a.getDimensionPixelSize(R.styleable.GradientDrawable_innerRadius,-1);
    }
    if (state.mInnerRadius == -1 && a.hasValue(R.styleable.GradientDrawable_innerRadiusRatio)) {
      state.mInnerRadiusRatio=a.getFloat(R.styleable.GradientDrawable_innerRadiusRatio,DEFAULT_INNER_RADIUS_RATIO);
    }
    if (a.hasValue(R.styleable.GradientDrawable_thickness)) {
      state.mThickness=a.getDimensionPixelSize(R.styleable.GradientDrawable_thickness,-1);
    }
    if (state.mThickness == -1 && a.hasValue(R.styleable.GradientDrawable_thicknessRatio)) {
      state.mThicknessRatio=a.getFloat(R.styleable.GradientDrawable_thicknessRatio,DEFAULT_THICKNESS_RATIO);
    }
    if (a.hasValue(R.styleable.GradientDrawable_useLevel)) {
      state.mUseLevelForShape=a.getBoolean(R.styleable.GradientDrawable_useLevel,true);
    }
  }
}
