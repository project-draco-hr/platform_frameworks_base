{
  final GradientState state=mGradientState;
  final int[] themeAttrs=a.extractThemeAttrs();
  state.mThemeAttrs=themeAttrs;
  final boolean needsRingAttrs;
  if (themeAttrs == null || themeAttrs[R.styleable.GradientDrawable_shape] == 0) {
    final int shapeType=a.getInt(R.styleable.GradientDrawable_shape,RECTANGLE);
    setShape(shapeType);
    needsRingAttrs=shapeType == RING;
  }
 else {
    needsRingAttrs=true;
  }
  if (needsRingAttrs) {
    if (themeAttrs == null || themeAttrs[R.styleable.GradientDrawable_innerRadius] == 0) {
      state.mInnerRadius=a.getDimensionPixelSize(R.styleable.GradientDrawable_innerRadius,-1);
    }
    if (state.mInnerRadius == -1 && (themeAttrs == null || themeAttrs[R.styleable.GradientDrawable_thicknessRatio] == 0)) {
      state.mInnerRadiusRatio=a.getFloat(R.styleable.GradientDrawable_innerRadiusRatio,DEFAULT_INNER_RADIUS_RATIO);
    }
    if (themeAttrs == null || themeAttrs[R.styleable.GradientDrawable_thickness] == 0) {
      state.mThickness=a.getDimensionPixelSize(R.styleable.GradientDrawable_thickness,-1);
    }
    if (state.mThickness == -1 && (themeAttrs == null || themeAttrs[R.styleable.GradientDrawable_thicknessRatio] == 0)) {
      state.mThicknessRatio=a.getFloat(R.styleable.GradientDrawable_thicknessRatio,DEFAULT_THICKNESS_RATIO);
    }
    if (themeAttrs == null || themeAttrs[R.styleable.GradientDrawable_useLevel] == 0) {
      state.mUseLevelForShape=a.getBoolean(R.styleable.GradientDrawable_useLevel,true);
    }
  }
  if (themeAttrs == null || themeAttrs[R.styleable.GradientDrawable_dither] == 0) {
    final boolean dither=a.getBoolean(R.styleable.GradientDrawable_dither,false);
    setDither(dither);
  }
}
