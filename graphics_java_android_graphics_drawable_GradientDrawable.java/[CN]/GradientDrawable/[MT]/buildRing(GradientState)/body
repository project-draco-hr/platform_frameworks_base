{
  if (mRingPath != null && (!st.mUseLevelForShape || !mPathIsDirty))   return mRingPath;
  mPathIsDirty=false;
  float sweep=st.mUseLevelForShape ? (360.0f * getLevel() / 10000.0f) : 360f;
  RectF bounds=new RectF(mRect);
  float x=bounds.width() / 2.0f;
  float y=bounds.height() / 2.0f;
  float thickness=st.mThickness != -1 ? st.mThickness : bounds.width() / st.mThicknessRatio;
  float radius=st.mInnerRadius != -1 ? st.mInnerRadius : bounds.width() / st.mInnerRadiusRatio;
  RectF innerBounds=new RectF(bounds);
  innerBounds.inset(x - radius,y - radius);
  bounds=new RectF(innerBounds);
  bounds.inset(-thickness,-thickness);
  if (mRingPath == null) {
    mRingPath=new Path();
  }
 else {
    mRingPath.reset();
  }
  final Path ringPath=mRingPath;
  if (sweep < 360 && sweep > -360) {
    ringPath.setFillType(Path.FillType.EVEN_ODD);
    ringPath.moveTo(x + radius,y);
    ringPath.lineTo(x + radius + thickness,y);
    ringPath.arcTo(bounds,0.0f,sweep,false);
    ringPath.arcTo(innerBounds,sweep,-sweep,false);
    ringPath.close();
  }
 else {
    ringPath.addOval(bounds,Path.Direction.CW);
    ringPath.addOval(innerBounds,Path.Direction.CCW);
  }
  return ringPath;
}
