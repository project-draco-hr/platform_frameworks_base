{
  TypedArray a;
  int type;
  final int innerDepth=parser.getDepth() + 1;
  int depth;
  while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && ((depth=parser.getDepth()) >= innerDepth || type != XmlPullParser.END_TAG)) {
    if (type != XmlPullParser.START_TAG) {
      continue;
    }
    if (depth > innerDepth) {
      continue;
    }
    String name=parser.getName();
    if (name.equals("size")) {
      a=obtainAttributes(r,theme,attrs,R.styleable.GradientDrawableSize);
      applyGradientDrawableSize(a);
      a.recycle();
    }
 else     if (name.equals("gradient")) {
      a=obtainAttributes(r,theme,attrs,R.styleable.GradientDrawableGradient);
      applyGradientDrawableGradient(r,a);
      a.recycle();
    }
 else     if (name.equals("solid")) {
      a=obtainAttributes(r,theme,attrs,R.styleable.GradientDrawableSolid);
      applyGradientDrawableSolid(a);
      a.recycle();
    }
 else     if (name.equals("stroke")) {
      a=obtainAttributes(r,theme,attrs,R.styleable.GradientDrawableStroke);
      applyGradientDrawableStroke(a);
      a.recycle();
    }
 else     if (name.equals("corners")) {
      a=obtainAttributes(r,theme,attrs,R.styleable.DrawableCorners);
      applyDrawableCorners(a);
      a.recycle();
    }
 else     if (name.equals("padding")) {
      a=obtainAttributes(r,theme,attrs,R.styleable.GradientDrawablePadding);
      applyGradientDrawablePadding(a);
      a.recycle();
    }
 else {
      Log.w("drawable","Bad element under <shape>: " + name);
    }
  }
}
