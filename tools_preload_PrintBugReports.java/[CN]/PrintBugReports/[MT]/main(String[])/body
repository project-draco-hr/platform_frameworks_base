{
  Root root=Root.fromFile(args[0]);
  String baseUrl="";
  if (args.length > 1) {
    baseUrl=args[1];
  }
  new File(DIR).mkdirs();
  Map<String,List<Proc>> procsByName=new HashMap<String,List<Proc>>();
  for (  Proc proc : root.processes.values()) {
    if (proc.fromZygote()) {
      List<Proc> procs=procsByName.get(proc.name);
      if (procs == null) {
        procs=new ArrayList<Proc>();
        procsByName.put(proc.name,procs);
      }
      procs.add(proc);
    }
  }
  Set<LoadedClass> coreClasses=new TreeSet<LoadedClass>(DEFAULT_ORDER);
  Set<LoadedClass> frameworkClasses=new TreeSet<LoadedClass>(DEFAULT_ORDER);
  for (  List<Proc> procs : procsByName.values()) {
    Proc first=procs.get(0);
    Set<LoadedClass> classes=new TreeSet<LoadedClass>(DEFAULT_ORDER);
    Set<LoadedClass> sharedClasses=new TreeSet<LoadedClass>(DEFAULT_ORDER);
    for (    Proc proc : procs) {
      for (      Operation operation : proc.operations) {
        LoadedClass clazz=operation.loadedClass;
        if (clazz.isSharable() && clazz.systemClass) {
          if (clazz.name.startsWith("dalvik") || clazz.name.startsWith("org") || clazz.name.startsWith("java")) {
            coreClasses.add(clazz);
          }
 else {
            frameworkClasses.add(clazz);
          }
          sharedClasses.add(clazz);
        }
 else {
          classes.add(clazz);
        }
      }
    }
    printApplicationHtml(first.name,root.baseline,classes,sharedClasses);
  }
  printHtml("core",root.baseline,coreClasses);
  printHtml("framework",root.baseline,frameworkClasses);
  PrintStream out=new PrintStream(DIR + "/toc.html");
  out.println("<html><body>");
  out.println("<a href='" + baseUrl + "/core.html'>core</a><br/>");
  out.println("<a href='" + baseUrl + "/framework.html'>framework</a><br/>");
  for (  String s : new TreeSet<String>(procsByName.keySet())) {
    out.println("<a href='" + baseUrl + "/"+ s+ ".html'>"+ s+ "</a><br/>");
  }
  out.println("</body></html>");
  out.close();
}
