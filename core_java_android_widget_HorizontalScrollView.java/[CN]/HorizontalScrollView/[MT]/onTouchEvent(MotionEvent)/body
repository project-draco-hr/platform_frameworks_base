{
  initVelocityTrackerIfNotExists();
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
{
      if (getChildCount() == 0) {
        return false;
      }
      if ((mIsBeingDragged=!mScroller.isFinished())) {
        final ViewParent parent=getParent();
        if (parent != null) {
          parent.requestDisallowInterceptTouchEvent(true);
        }
      }
      if (!mScroller.isFinished()) {
        mScroller.abortAnimation();
      }
      mLastMotionX=(int)ev.getX();
      mActivePointerId=ev.getPointerId(0);
      break;
    }
case MotionEvent.ACTION_MOVE:
  final int activePointerIndex=ev.findPointerIndex(mActivePointerId);
final int x=(int)ev.getX(activePointerIndex);
int deltaX=mLastMotionX - x;
if (!mIsBeingDragged && Math.abs(deltaX) > mTouchSlop) {
final ViewParent parent=getParent();
if (parent != null) {
parent.requestDisallowInterceptTouchEvent(true);
}
mIsBeingDragged=true;
if (deltaX > 0) {
deltaX-=mTouchSlop;
}
 else {
deltaX+=mTouchSlop;
}
}
if (mIsBeingDragged) {
mLastMotionX=x;
final int oldX=mScrollX;
final int oldY=mScrollY;
final int range=getScrollRange();
final int overscrollMode=getOverScrollMode();
final boolean canOverscroll=overscrollMode == OVER_SCROLL_ALWAYS || (overscrollMode == OVER_SCROLL_IF_CONTENT_SCROLLS && range > 0);
if (overScrollBy(deltaX,0,mScrollX,0,range,0,mOverscrollDistance,0,true)) {
mVelocityTracker.clear();
}
onScrollChanged(mScrollX,mScrollY,oldX,oldY);
if (canOverscroll) {
final int pulledToX=oldX + deltaX;
if (pulledToX < 0) {
mEdgeGlowLeft.onPull((float)deltaX / getWidth());
if (!mEdgeGlowRight.isFinished()) {
  mEdgeGlowRight.onRelease();
}
}
 else if (pulledToX > range) {
mEdgeGlowRight.onPull((float)deltaX / getWidth());
if (!mEdgeGlowLeft.isFinished()) {
  mEdgeGlowLeft.onRelease();
}
}
if (mEdgeGlowLeft != null && (!mEdgeGlowLeft.isFinished() || !mEdgeGlowRight.isFinished())) {
postInvalidateOnAnimation();
}
}
}
break;
case MotionEvent.ACTION_UP:
if (mIsBeingDragged) {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
int initialVelocity=(int)velocityTracker.getXVelocity(mActivePointerId);
if (getChildCount() > 0) {
if ((Math.abs(initialVelocity) > mMinimumVelocity)) {
fling(-initialVelocity);
}
 else {
if (mScroller.springBack(mScrollX,mScrollY,0,getScrollRange(),0,0)) {
postInvalidateOnAnimation();
}
}
}
mActivePointerId=INVALID_POINTER;
mIsBeingDragged=false;
recycleVelocityTracker();
if (mEdgeGlowLeft != null) {
mEdgeGlowLeft.onRelease();
mEdgeGlowRight.onRelease();
}
}
break;
case MotionEvent.ACTION_CANCEL:
if (mIsBeingDragged && getChildCount() > 0) {
if (mScroller.springBack(mScrollX,mScrollY,0,getScrollRange(),0,0)) {
postInvalidateOnAnimation();
}
mActivePointerId=INVALID_POINTER;
mIsBeingDragged=false;
recycleVelocityTracker();
if (mEdgeGlowLeft != null) {
mEdgeGlowLeft.onRelease();
mEdgeGlowRight.onRelease();
}
}
break;
case MotionEvent.ACTION_POINTER_UP:
onSecondaryPointerUp(ev);
break;
}
return true;
}
