{
  if (VDBG)   Log.v(TAG,"publish(): config=" + publishConfig);
  if (publishConfig.mPublishType == PublishConfig.PUBLISH_TYPE_UNSOLICITED && publishConfig.mRxFilterLength != 0) {
    throw new IllegalArgumentException("Invalid publish config: UNSOLICITED " + "publishes (active) can't have an Rx filter");
  }
  if (publishConfig.mPublishType == PublishConfig.PUBLISH_TYPE_SOLICITED && publishConfig.mTxFilterLength != 0) {
    throw new IllegalArgumentException("Invalid publish config: SOLICITED " + "publishes (passive) can't have a Tx filter");
  }
  if (listener == null) {
    throw new IllegalArgumentException("Invalid listener - must not be null");
  }
  int sessionId;
  try {
    sessionId=mService.createSession(mClientId,listener.callback,events);
    if (DBG)     Log.d(TAG,"publish: session created - sessionId=" + sessionId);
    mService.publish(mClientId,sessionId,publishConfig);
  }
 catch (  RemoteException e) {
    Log.w(TAG,"createSession/publish RemoteException: " + e);
    return null;
  }
  return new WifiNanPublishSession(this,sessionId);
}
