{
  if (VDBG) {
    Log.v(TAG,"createNetworkSpecifier: role=" + role + ", sessionId="+ sessionId+ ", peerHandle="+ peerHandle+ ", token="+ token);
  }
  int type;
  if (token != null && peerHandle != null) {
    type=NETWORK_SPECIFIER_TYPE_1A;
  }
 else   if (token == null && peerHandle != null) {
    type=NETWORK_SPECIFIER_TYPE_1B;
  }
 else   if (token != null && peerHandle == null) {
    type=NETWORK_SPECIFIER_TYPE_1C;
  }
 else {
    type=NETWORK_SPECIFIER_TYPE_1D;
  }
  if (role != WIFI_NAN_DATA_PATH_ROLE_INITIATOR && role != WIFI_NAN_DATA_PATH_ROLE_RESPONDER) {
    throw new IllegalArgumentException("createNetworkSpecifier: Invalid 'role' argument when creating a network " + "specifier");
  }
  if (role == WIFI_NAN_DATA_PATH_ROLE_INITIATOR) {
    if (token == null) {
      throw new IllegalArgumentException("createNetworkSpecifier: Invalid null token - not permitted on INITIATOR");
    }
    if (peerHandle == null) {
      throw new IllegalArgumentException("createNetworkSpecifier: Invalid peer handle (value of null) - not " + "permitted on INITIATOR");
    }
  }
  JSONObject json;
  try {
    json=new JSONObject();
    json.put(NETWORK_SPECIFIER_KEY_TYPE,type);
    json.put(NETWORK_SPECIFIER_KEY_ROLE,role);
    json.put(NETWORK_SPECIFIER_KEY_CLIENT_ID,clientId);
    json.put(NETWORK_SPECIFIER_KEY_SESSION_ID,sessionId);
    if (peerHandle != null) {
      json.put(NETWORK_SPECIFIER_KEY_PEER_ID,(Integer)peerHandle);
    }
    if (token != null) {
      json.put(NETWORK_SPECIFIER_KEY_TOKEN,Base64.encodeToString(token,0,token.length,Base64.DEFAULT));
    }
  }
 catch (  JSONException e) {
    return "";
  }
  return json.toString();
}
