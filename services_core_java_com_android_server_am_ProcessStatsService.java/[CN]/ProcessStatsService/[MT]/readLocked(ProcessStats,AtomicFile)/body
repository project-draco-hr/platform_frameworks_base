{
  try {
    FileInputStream stream=file.openRead();
    stats.read(stream);
    stream.close();
    if (stats.mReadError != null) {
      Slog.w(TAG,"Ignoring existing stats; " + stats.mReadError);
      if (DEBUG) {
        ArrayMap<String,SparseArray<ProcessStats.ProcessState>> procMap=stats.mProcesses.getMap();
        final int NPROC=procMap.size();
        for (int ip=0; ip < NPROC; ip++) {
          Slog.w(TAG,"Process: " + procMap.keyAt(ip));
          SparseArray<ProcessStats.ProcessState> uids=procMap.valueAt(ip);
          final int NUID=uids.size();
          for (int iu=0; iu < NUID; iu++) {
            Slog.w(TAG,"  Uid " + uids.keyAt(iu) + ": "+ uids.valueAt(iu));
          }
        }
        ArrayMap<String,SparseArray<SparseArray<ProcessStats.PackageState>>> pkgMap=stats.mPackages.getMap();
        final int NPKG=pkgMap.size();
        for (int ip=0; ip < NPKG; ip++) {
          Slog.w(TAG,"Package: " + pkgMap.keyAt(ip));
          SparseArray<SparseArray<ProcessStats.PackageState>> uids=pkgMap.valueAt(ip);
          final int NUID=uids.size();
          for (int iu=0; iu < NUID; iu++) {
            Slog.w(TAG,"  Uid: " + uids.keyAt(iu));
            SparseArray<ProcessStats.PackageState> vers=uids.valueAt(iu);
            final int NVERS=vers.size();
            for (int iv=0; iv < NVERS; iv++) {
              Slog.w(TAG,"    Vers: " + vers.keyAt(iv));
              ProcessStats.PackageState pkgState=vers.valueAt(iv);
              final int NPROCS=pkgState.mProcesses.size();
              for (int iproc=0; iproc < NPROCS; iproc++) {
                Slog.w(TAG,"      Process " + pkgState.mProcesses.keyAt(iproc) + ": "+ pkgState.mProcesses.valueAt(iproc));
              }
              final int NSRVS=pkgState.mServices.size();
              for (int isvc=0; isvc < NSRVS; isvc++) {
                Slog.w(TAG,"      Service " + pkgState.mServices.keyAt(isvc) + ": "+ pkgState.mServices.valueAt(isvc));
              }
            }
          }
        }
      }
      return false;
    }
  }
 catch (  Throwable e) {
    stats.mReadError="caught exception: " + e;
    Slog.e(TAG,"Error reading process statistics",e);
    return false;
  }
  return true;
}
