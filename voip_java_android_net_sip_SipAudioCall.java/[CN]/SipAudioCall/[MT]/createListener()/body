{
  return new SipSession.Listener(){
    @Override public void onCalling(    SipSession session){
      if (DBG)       log("onCalling: session=" + session);
      Listener listener=mListener;
      if (listener != null) {
        try {
          listener.onCalling(SipAudioCall.this);
        }
 catch (        Throwable t) {
          loge("onCalling():",t);
        }
      }
    }
    @Override public void onRingingBack(    SipSession session){
      if (DBG)       log("onRingingBackk: " + session);
      Listener listener=mListener;
      if (listener != null) {
        try {
          listener.onRingingBack(SipAudioCall.this);
        }
 catch (        Throwable t) {
          loge("onRingingBack():",t);
        }
      }
    }
    @Override public void onRinging(    SipSession session,    SipProfile peerProfile,    String sessionDescription){
synchronized (SipAudioCall.this) {
        if ((mSipSession == null) || !mInCall || !session.getCallId().equals(mSipSession.getCallId())) {
          session.endCall();
          return;
        }
        try {
          String answer=createAnswer(sessionDescription).encode();
          mSipSession.answerCall(answer,SESSION_TIMEOUT);
        }
 catch (        Throwable e) {
          loge("onRinging():",e);
          session.endCall();
        }
      }
    }
    @Override public void onCallEstablished(    SipSession session,    String sessionDescription){
      mPeerSd=sessionDescription;
      if (DBG)       log("onCallEstablished(): " + mPeerSd);
      if ((mTransferringSession != null) && (session == mTransferringSession)) {
        transferToNewSession();
        return;
      }
      Listener listener=mListener;
      if (listener != null) {
        try {
          if (mHold) {
            listener.onCallHeld(SipAudioCall.this);
          }
 else {
            listener.onCallEstablished(SipAudioCall.this);
          }
        }
 catch (        Throwable t) {
          loge("onCallEstablished(): ",t);
        }
      }
    }
    @Override public void onCallEnded(    SipSession session){
      if (DBG)       log("onCallEnded: " + session + " mSipSession:"+ mSipSession);
      if (session == mTransferringSession) {
        mTransferringSession=null;
        return;
      }
      if ((mTransferringSession != null) || (session != mSipSession))       return;
      Listener listener=mListener;
      if (listener != null) {
        try {
          listener.onCallEnded(SipAudioCall.this);
        }
 catch (        Throwable t) {
          loge("onCallEnded(): ",t);
        }
      }
      close();
    }
    @Override public void onCallBusy(    SipSession session){
      if (DBG)       log("onCallBusy: " + session);
      Listener listener=mListener;
      if (listener != null) {
        try {
          listener.onCallBusy(SipAudioCall.this);
        }
 catch (        Throwable t) {
          loge("onCallBusy(): ",t);
        }
      }
      close(false);
    }
    @Override public void onCallChangeFailed(    SipSession session,    int errorCode,    String message){
      if (DBG)       log("onCallChangedFailed: " + message);
      mErrorCode=errorCode;
      mErrorMessage=message;
      Listener listener=mListener;
      if (listener != null) {
        try {
          listener.onError(SipAudioCall.this,mErrorCode,message);
        }
 catch (        Throwable t) {
          loge("onCallBusy():",t);
        }
      }
    }
    @Override public void onError(    SipSession session,    int errorCode,    String message){
      SipAudioCall.this.onError(errorCode,message);
    }
    @Override public void onRegistering(    SipSession session){
    }
    @Override public void onRegistrationTimeout(    SipSession session){
    }
    @Override public void onRegistrationFailed(    SipSession session,    int errorCode,    String message){
    }
    @Override public void onRegistrationDone(    SipSession session,    int duration){
    }
    @Override public void onCallTransferring(    SipSession newSession,    String sessionDescription){
      if (DBG)       log("onCallTransferring: mSipSession=" + mSipSession + " newSession="+ newSession);
      mTransferringSession=newSession;
      try {
        if (sessionDescription == null) {
          newSession.makeCall(newSession.getPeerProfile(),createOffer().encode(),TRANSFER_TIMEOUT);
        }
 else {
          String answer=createAnswer(sessionDescription).encode();
          newSession.answerCall(answer,SESSION_TIMEOUT);
        }
      }
 catch (      Throwable e) {
        loge("onCallTransferring()",e);
        newSession.endCall();
      }
    }
  }
;
}
