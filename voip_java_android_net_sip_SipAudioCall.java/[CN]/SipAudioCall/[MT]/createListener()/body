{
  return new SipSession.Listener(){
    @Override public void onCalling(    SipSession session){
      Log.d(TAG,"calling... " + session);
      Listener listener=mListener;
      if (listener != null) {
        try {
          listener.onCalling(SipAudioCall.this);
        }
 catch (        Throwable t) {
          Log.i(TAG,"onCalling(): " + t);
        }
      }
    }
    @Override public void onRingingBack(    SipSession session){
      Log.d(TAG,"sip call ringing back: " + session);
      Listener listener=mListener;
      if (listener != null) {
        try {
          listener.onRingingBack(SipAudioCall.this);
        }
 catch (        Throwable t) {
          Log.i(TAG,"onRingingBack(): " + t);
        }
      }
    }
    @Override public void onRinging(    SipSession session,    SipProfile peerProfile,    String sessionDescription){
synchronized (SipAudioCall.this) {
        if ((mSipSession == null) || !mInCall || !session.getCallId().equals(mSipSession.getCallId())) {
          session.endCall();
          return;
        }
        try {
          String answer=createAnswer(sessionDescription).encode();
          mSipSession.answerCall(answer,SESSION_TIMEOUT);
        }
 catch (        Throwable e) {
          Log.e(TAG,"onRinging()",e);
          session.endCall();
        }
      }
    }
    @Override public void onCallEstablished(    SipSession session,    String sessionDescription){
      mPeerSd=sessionDescription;
      Log.v(TAG,"onCallEstablished()" + mPeerSd);
      Listener listener=mListener;
      if (listener != null) {
        try {
          if (mHold) {
            listener.onCallHeld(SipAudioCall.this);
          }
 else {
            listener.onCallEstablished(SipAudioCall.this);
          }
        }
 catch (        Throwable t) {
          Log.i(TAG,"onCallEstablished(): " + t);
        }
      }
    }
    @Override public void onCallEnded(    SipSession session){
      Log.d(TAG,"sip call ended: " + session);
      Listener listener=mListener;
      if (listener != null) {
        try {
          listener.onCallEnded(SipAudioCall.this);
        }
 catch (        Throwable t) {
          Log.i(TAG,"onCallEnded(): " + t);
        }
      }
      close();
    }
    @Override public void onCallBusy(    SipSession session){
      Log.d(TAG,"sip call busy: " + session);
      Listener listener=mListener;
      if (listener != null) {
        try {
          listener.onCallBusy(SipAudioCall.this);
        }
 catch (        Throwable t) {
          Log.i(TAG,"onCallBusy(): " + t);
        }
      }
      close(false);
    }
    @Override public void onCallChangeFailed(    SipSession session,    int errorCode,    String message){
      Log.d(TAG,"sip call change failed: " + message);
      mErrorCode=errorCode;
      mErrorMessage=message;
      Listener listener=mListener;
      if (listener != null) {
        try {
          listener.onError(SipAudioCall.this,mErrorCode,message);
        }
 catch (        Throwable t) {
          Log.i(TAG,"onCallBusy(): " + t);
        }
      }
    }
    @Override public void onError(    SipSession session,    int errorCode,    String message){
      SipAudioCall.this.onError(errorCode,message);
    }
    @Override public void onRegistering(    SipSession session){
    }
    @Override public void onRegistrationTimeout(    SipSession session){
    }
    @Override public void onRegistrationFailed(    SipSession session,    int errorCode,    String message){
    }
    @Override public void onRegistrationDone(    SipSession session,    int duration){
    }
  }
;
}
