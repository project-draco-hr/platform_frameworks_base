{
  int outerDepth=parser.getDepth();
  int type;
  while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
    if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
      continue;
    }
    String tag=parser.getName();
    if ("policies".equals(tag)) {
      info.readPoliciesFromXml(parser);
    }
 else     if ("password-quality".equals(tag)) {
      passwordQuality=Integer.parseInt(parser.getAttributeValue(null,"value"));
    }
 else     if ("min-password-length".equals(tag)) {
      minimumPasswordLength=Integer.parseInt(parser.getAttributeValue(null,"value"));
    }
 else     if ("password-history-length".equals(tag)) {
      passwordHistoryLength=Integer.parseInt(parser.getAttributeValue(null,"value"));
    }
 else     if ("min-password-uppercase".equals(tag)) {
      minimumPasswordUpperCase=Integer.parseInt(parser.getAttributeValue(null,"value"));
    }
 else     if ("min-password-lowercase".equals(tag)) {
      minimumPasswordLowerCase=Integer.parseInt(parser.getAttributeValue(null,"value"));
    }
 else     if ("min-password-letters".equals(tag)) {
      minimumPasswordLetters=Integer.parseInt(parser.getAttributeValue(null,"value"));
    }
 else     if ("min-password-numeric".equals(tag)) {
      minimumPasswordNumeric=Integer.parseInt(parser.getAttributeValue(null,"value"));
    }
 else     if ("min-password-symbols".equals(tag)) {
      minimumPasswordSymbols=Integer.parseInt(parser.getAttributeValue(null,"value"));
    }
 else     if ("min-password-nonletter".equals(tag)) {
      minimumPasswordNonLetter=Integer.parseInt(parser.getAttributeValue(null,"value"));
    }
 else     if ("max-time-to-unlock".equals(tag)) {
      maximumTimeToUnlock=Long.parseLong(parser.getAttributeValue(null,"value"));
    }
 else     if ("max-failed-password-wipe".equals(tag)) {
      maximumFailedPasswordsForWipe=Integer.parseInt(parser.getAttributeValue(null,"value"));
    }
 else     if ("specifies-global-proxy".equals(tag)) {
      specifiesGlobalProxy=Boolean.parseBoolean(parser.getAttributeValue(null,"value"));
    }
 else     if ("global-proxy-spec".equals(tag)) {
      globalProxySpec=parser.getAttributeValue(null,"value");
    }
 else     if ("global-proxy-exclusion-list".equals(tag)) {
      globalProxyExclusionList=parser.getAttributeValue(null,"value");
    }
 else     if ("password-expiration-timeout".equals(tag)) {
      passwordExpirationTimeout=Long.parseLong(parser.getAttributeValue(null,"value"));
    }
 else     if ("password-expiration-date".equals(tag)) {
      passwordExpirationDate=Long.parseLong(parser.getAttributeValue(null,"value"));
    }
 else     if ("encryption-requested".equals(tag)) {
      encryptionRequested=Boolean.parseBoolean(parser.getAttributeValue(null,"value"));
    }
 else     if ("disable-camera".equals(tag)) {
      disableCamera=Boolean.parseBoolean(parser.getAttributeValue(null,"value"));
    }
 else {
      Slog.w(TAG,"Unknown admin tag: " + tag);
    }
    XmlUtils.skipCurrentTag(parser);
  }
}
