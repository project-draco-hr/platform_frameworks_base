{
  JournaledFile journal=makeJournaledFile();
  FileOutputStream stream=null;
  try {
    stream=new FileOutputStream(journal.chooseForWrite(),false);
    XmlSerializer out=new FastXmlSerializer();
    out.setOutput(stream,"utf-8");
    out.startDocument(null,true);
    out.startTag(null,"policies");
    final int N=mAdminList.size();
    for (int i=0; i < N; i++) {
      ActiveAdmin ap=mAdminList.get(i);
      if (ap != null) {
        out.startTag(null,"admin");
        out.attribute(null,"name",ap.info.getComponent().flattenToString());
        ap.writeToXml(out);
        out.endTag(null,"admin");
      }
    }
    if (mPasswordOwner >= 0) {
      out.startTag(null,"password-owner");
      out.attribute(null,"value",Integer.toString(mPasswordOwner));
      out.endTag(null,"password-owner");
    }
    if (mFailedPasswordAttempts != 0) {
      out.startTag(null,"failed-password-attempts");
      out.attribute(null,"value",Integer.toString(mFailedPasswordAttempts));
      out.endTag(null,"failed-password-attempts");
    }
    if (mActivePasswordQuality != 0 || mActivePasswordLength != 0) {
      out.startTag(null,"active-password");
      out.attribute(null,"quality",Integer.toString(mActivePasswordQuality));
      out.attribute(null,"length",Integer.toString(mActivePasswordLength));
      out.endTag(null,"active-password");
    }
    out.endTag(null,"policies");
    out.endDocument();
    stream.close();
    journal.commit();
  }
 catch (  IOException e) {
    try {
      if (stream != null) {
        stream.close();
      }
    }
 catch (    IOException ex) {
    }
    journal.rollback();
  }
}
