{
  int quality;
synchronized (this) {
    getActiveAdminForCallerLocked(null,DeviceAdminInfo.USES_POLICY_RESET_PASSWORD);
    quality=getPasswordQuality(null);
    if (quality != DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED) {
      int realQuality=LockPatternUtils.computePasswordQuality(password);
      if (realQuality < quality && quality != DevicePolicyManager.PASSWORD_QUALITY_COMPLEX) {
        Slog.w(TAG,"resetPassword: password quality 0x" + Integer.toHexString(quality) + " does not meet required quality 0x"+ Integer.toHexString(quality));
        return false;
      }
      quality=Math.max(realQuality,quality);
    }
    int length=getPasswordMinimumLength(null);
    if (password.length() < length) {
      Slog.w(TAG,"resetPassword: password length " + password.length() + " does not meet required length "+ length);
      return false;
    }
    if (quality == DevicePolicyManager.PASSWORD_QUALITY_COMPLEX) {
      int letters=0;
      int uppercase=0;
      int lowercase=0;
      int numbers=0;
      int symbols=0;
      for (int i=0; i < password.length(); i++) {
        char c=password.charAt(i);
        if (c >= 'A' && c <= 'Z') {
          letters++;
          uppercase++;
        }
 else         if (c >= 'a' && c <= 'z') {
          letters++;
          lowercase++;
        }
 else         if (c >= '0' && c <= '9') {
          numbers++;
        }
 else {
          symbols++;
        }
      }
      int neededLetters=getPasswordMinimumLetters(null);
      if (letters < neededLetters) {
        Slog.w(TAG,"resetPassword: number of letters " + letters + " does not meet required number of letters "+ neededLetters);
        return false;
      }
      int neededNumbers=getPasswordMinimumNumeric(null);
      if (numbers < neededNumbers) {
        Slog.w(TAG,"resetPassword: number of numerical digits " + numbers + " does not meet required number of numerical digits "+ neededNumbers);
        return false;
      }
      int neededLowerCase=getPasswordMinimumLowerCase(null);
      if (lowercase < neededLowerCase) {
        Slog.w(TAG,"resetPassword: number of lowercase letters " + lowercase + " does not meet required number of lowercase letters "+ neededLowerCase);
        return false;
      }
      int neededUpperCase=getPasswordMinimumUpperCase(null);
      if (uppercase < neededUpperCase) {
        Slog.w(TAG,"resetPassword: number of uppercase letters " + uppercase + " does not meet required number of uppercase letters "+ neededUpperCase);
        return false;
      }
      int neededSymbols=getPasswordMinimumSymbols(null);
      if (symbols < neededSymbols) {
        Slog.w(TAG,"resetPassword: number of special symbols " + symbols + " does not meet required number of special symbols "+ neededSymbols);
        return false;
      }
    }
    LockPatternUtils utils=new LockPatternUtils(mContext);
    if (utils.checkPasswordHistory(password)) {
      Slog.w(TAG,"resetPassword: password is the same as one of the last " + getPasswordHistoryLength(null) + " passwords");
      return false;
    }
  }
  int callingUid=Binder.getCallingUid();
  if (mPasswordOwner >= 0 && mPasswordOwner != callingUid) {
    Slog.w(TAG,"resetPassword: already set by another uid and not entered by user");
    return false;
  }
  long ident=Binder.clearCallingIdentity();
  try {
    LockPatternUtils utils=new LockPatternUtils(mContext);
    utils.saveLockPassword(password,quality);
synchronized (this) {
      int newOwner=(flags & DevicePolicyManager.RESET_PASSWORD_REQUIRE_ENTRY) != 0 ? callingUid : -1;
      if (mPasswordOwner != newOwner) {
        mPasswordOwner=newOwner;
        saveSettingsLocked();
      }
    }
  }
  finally {
    Binder.restoreCallingIdentity(ident);
  }
  return true;
}
