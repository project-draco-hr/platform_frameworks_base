{
  if (view == null) {
    return;
  }
  if (!isValidTarget(view,view.getId())) {
    return;
  }
  boolean isListViewItem=false;
  if (view.getParent() instanceof ListView) {
    isListViewItem=true;
  }
  if (isListViewItem && !((ListView)view.getParent()).getAdapter().hasStableIds()) {
    return;
  }
  int id=View.NO_ID;
  long itemId=View.NO_ID;
  if (!isListViewItem) {
    id=view.getId();
  }
 else {
    ListView listview=(ListView)view.getParent();
    int position=listview.getPositionForView(view);
    itemId=listview.getItemIdAtPosition(position);
    view.setHasTransientState(true);
  }
  if (mTargetIdExcludes != null && mTargetIdExcludes.contains(id)) {
    return;
  }
  if (mTargetExcludes != null && mTargetExcludes.contains(view)) {
    return;
  }
  if (mTargetTypeExcludes != null && view != null) {
    int numTypes=mTargetTypeExcludes.size();
    for (int i=0; i < numTypes; ++i) {
      if (mTargetTypeExcludes.get(i).isInstance(view)) {
        return;
      }
    }
  }
  TransitionValues values=new TransitionValues();
  values.view=view;
  if (start) {
    captureStartValues(values);
  }
 else {
    captureEndValues(values);
  }
  if (start) {
    if (!isListViewItem) {
      mStartValues.viewValues.put(view,values);
      if (id >= 0) {
        mStartValues.idValues.put((int)id,values);
      }
    }
 else {
      mStartValues.itemIdValues.put(itemId,values);
    }
  }
 else {
    if (!isListViewItem) {
      mEndValues.viewValues.put(view,values);
      if (id >= 0) {
        mEndValues.idValues.put((int)id,values);
      }
    }
 else {
      mEndValues.itemIdValues.put(itemId,values);
    }
  }
  if (view instanceof ViewGroup) {
    if (mTargetIdChildExcludes != null && mTargetIdChildExcludes.contains(id)) {
      return;
    }
    if (mTargetChildExcludes != null && mTargetChildExcludes.contains(view)) {
      return;
    }
    if (mTargetTypeChildExcludes != null && view != null) {
      int numTypes=mTargetTypeChildExcludes.size();
      for (int i=0; i < numTypes; ++i) {
        if (mTargetTypeChildExcludes.get(i).isInstance(view)) {
          return;
        }
      }
    }
    ViewGroup parent=(ViewGroup)view;
    for (int i=0; i < parent.getChildCount(); ++i) {
      captureHierarchy(parent.getChildAt(i),start);
    }
  }
}
