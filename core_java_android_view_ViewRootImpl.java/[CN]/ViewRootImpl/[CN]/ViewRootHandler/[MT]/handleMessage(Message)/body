{
switch (msg.what) {
case MSG_INVALIDATE:
    ((View)msg.obj).invalidate();
  break;
case MSG_INVALIDATE_RECT:
final View.AttachInfo.InvalidateInfo info=(View.AttachInfo.InvalidateInfo)msg.obj;
info.target.invalidate(info.left,info.top,info.right,info.bottom);
info.recycle();
break;
case MSG_PROCESS_INPUT_EVENTS:
mProcessInputEventsScheduled=false;
doProcessInputEvents();
break;
case MSG_DISPATCH_APP_VISIBILITY:
handleAppVisibility(msg.arg1 != 0);
break;
case MSG_DISPATCH_GET_NEW_SURFACE:
handleGetNewSurface();
break;
case MSG_RESIZED:
{
SomeArgs args=(SomeArgs)msg.obj;
if (mWinFrame.equals(args.arg1) && mPendingOverscanInsets.equals(args.arg5) && mPendingContentInsets.equals(args.arg2)&& mPendingVisibleInsets.equals(args.arg3)&& args.arg4 == null) {
break;
}
}
case MSG_RESIZED_REPORT:
if (mAdded) {
SomeArgs args=(SomeArgs)msg.obj;
Configuration config=(Configuration)args.arg4;
if (config != null) {
updateConfiguration(config,false);
}
mWinFrame.set((Rect)args.arg1);
mPendingOverscanInsets.set((Rect)args.arg5);
mPendingContentInsets.set((Rect)args.arg2);
mPendingVisibleInsets.set((Rect)args.arg3);
args.recycle();
if (msg.what == MSG_RESIZED_REPORT) {
mReportNextDraw=true;
}
if (mView != null) {
forceLayout(mView);
}
requestLayout();
}
break;
case MSG_WINDOW_MOVED:
if (mAdded) {
final int w=mWinFrame.width();
final int h=mWinFrame.height();
final int l=msg.arg1;
final int t=msg.arg2;
mWinFrame.left=l;
mWinFrame.right=l + w;
mWinFrame.top=t;
mWinFrame.bottom=t + h;
if (mView != null) {
forceLayout(mView);
}
requestLayout();
}
break;
case MSG_WINDOW_FOCUS_CHANGED:
{
if (mAdded) {
boolean hasWindowFocus=msg.arg1 != 0;
mAttachInfo.mHasWindowFocus=hasWindowFocus;
profileRendering(hasWindowFocus);
if (hasWindowFocus) {
boolean inTouchMode=msg.arg2 != 0;
ensureTouchModeLocally(inTouchMode);
if (mAttachInfo.mHardwareRenderer != null && mSurface.isValid()) {
mFullRedrawNeeded=true;
try {
mAttachInfo.mHardwareRenderer.initializeIfNeeded(mWidth,mHeight,mHolder.getSurface());
}
 catch (Surface.OutOfResourcesException e) {
Log.e(TAG,"OutOfResourcesException locking surface",e);
try {
if (!mWindowSession.outOfMemory(mWindow)) {
Slog.w(TAG,"No processes killed for memory; killing self");
Process.killProcess(Process.myPid());
}
}
 catch (RemoteException ex) {
}
sendMessageDelayed(obtainMessage(msg.what,msg.arg1,msg.arg2),500);
return;
}
}
}
mLastWasImTarget=WindowManager.LayoutParams.mayUseInputMethod(mWindowAttributes.flags);
InputMethodManager imm=InputMethodManager.peekInstance();
if (mView != null) {
if (hasWindowFocus && imm != null && mLastWasImTarget) {
imm.startGettingWindowFocus(mView);
}
mAttachInfo.mKeyDispatchState.reset();
mView.dispatchWindowFocusChanged(hasWindowFocus);
mAttachInfo.mTreeObserver.dispatchOnWindowFocusChange(hasWindowFocus);
}
if (hasWindowFocus) {
if (imm != null && mLastWasImTarget) {
imm.onWindowFocus(mView,mView.findFocus(),mWindowAttributes.softInputMode,!mHasHadWindowFocus,mWindowAttributes.flags);
}
mWindowAttributes.softInputMode&=~WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION;
((WindowManager.LayoutParams)mView.getLayoutParams()).softInputMode&=~WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION;
mHasHadWindowFocus=true;
}
setAccessibilityFocus(null,null);
if (mView != null && mAccessibilityManager.isEnabled()) {
if (hasWindowFocus) {
mView.sendAccessibilityEvent(AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED);
}
}
}
}
break;
case MSG_DIE:
doDie();
break;
case MSG_DISPATCH_KEY:
{
KeyEvent event=(KeyEvent)msg.obj;
enqueueInputEvent(event,null,0,true);
}
break;
case MSG_DISPATCH_KEY_FROM_IME:
{
if (LOCAL_LOGV) Log.v(TAG,"Dispatching key " + msg.obj + " from IME to "+ mView);
KeyEvent event=(KeyEvent)msg.obj;
if ((event.getFlags() & KeyEvent.FLAG_FROM_SYSTEM) != 0) {
event=KeyEvent.changeFlags(event,event.getFlags() & ~KeyEvent.FLAG_FROM_SYSTEM);
}
enqueueInputEvent(event,null,QueuedInputEvent.FLAG_DELIVER_POST_IME,true);
}
break;
case MSG_FINISH_INPUT_CONNECTION:
{
InputMethodManager imm=InputMethodManager.peekInstance();
if (imm != null) {
imm.reportFinishInputConnection((InputConnection)msg.obj);
}
}
break;
case MSG_CHECK_FOCUS:
{
InputMethodManager imm=InputMethodManager.peekInstance();
if (imm != null) {
imm.checkFocus();
}
}
break;
case MSG_CLOSE_SYSTEM_DIALOGS:
{
if (mView != null) {
mView.onCloseSystemDialogs((String)msg.obj);
}
}
break;
case MSG_DISPATCH_DRAG_EVENT:
case MSG_DISPATCH_DRAG_LOCATION_EVENT:
{
DragEvent event=(DragEvent)msg.obj;
event.mLocalState=mLocalDragState;
handleDragEvent(event);
}
break;
case MSG_DISPATCH_SYSTEM_UI_VISIBILITY:
{
handleDispatchSystemUiVisibilityChanged((SystemUiVisibilityInfo)msg.obj);
}
break;
case MSG_UPDATE_CONFIGURATION:
{
Configuration config=(Configuration)msg.obj;
if (config.isOtherSeqNewer(mLastConfiguration)) {
config=mLastConfiguration;
}
updateConfiguration(config,false);
}
break;
case MSG_DISPATCH_SCREEN_STATE:
{
if (mView != null) {
handleScreenStateChange(msg.arg1 == 1);
}
}
break;
case MSG_CLEAR_ACCESSIBILITY_FOCUS_HOST:
{
setAccessibilityFocus(null,null);
}
break;
case MSG_DISPATCH_DONE_ANIMATING:
{
handleDispatchDoneAnimating();
}
break;
case MSG_INVALIDATE_WORLD:
{
if (mView != null) {
invalidateWorld(mView);
}
}
break;
case MSG_ENQUEUE_X_AXIS_KEY_REPEAT:
case MSG_ENQUEUE_Y_AXIS_KEY_REPEAT:
{
KeyEvent oldEvent=(KeyEvent)msg.obj;
KeyEvent e=KeyEvent.changeTimeRepeat(oldEvent,SystemClock.uptimeMillis(),oldEvent.getRepeatCount() + 1);
if (mAttachInfo.mHasWindowFocus) {
enqueueInputEvent(e);
Message m=obtainMessage(msg.what,e);
m.setAsynchronous(true);
sendMessageDelayed(m,mViewConfiguration.getKeyRepeatDelay());
}
}
break;
}
}
