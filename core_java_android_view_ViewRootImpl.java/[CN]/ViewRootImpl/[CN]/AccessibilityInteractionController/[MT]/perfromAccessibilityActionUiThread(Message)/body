{
  final int accessibilityViewId=message.arg1;
  final int virtualDescendantId=message.arg2;
  SomeArgs args=(SomeArgs)message.obj;
  final int action=args.argi1;
  final int interactionId=args.argi2;
  final IAccessibilityInteractionConnectionCallback callback=(IAccessibilityInteractionConnectionCallback)args.arg1;
  mPool.release(args);
  boolean succeeded=false;
  try {
    View target=findViewByAccessibilityId(accessibilityViewId);
    if (target != null && isDisplayedOnScreen(target)) {
      AccessibilityNodeProvider provider=target.getAccessibilityNodeProvider();
      if (provider != null) {
        succeeded=provider.performAccessibilityAction(action,virtualDescendantId);
      }
 else       if (virtualDescendantId == AccessibilityNodeInfo.UNDEFINED) {
switch (action) {
case AccessibilityNodeInfo.ACTION_FOCUS:
{
            if (!target.hasFocus()) {
              ensureTouchMode(false);
              succeeded=target.requestFocus();
            }
          }
        break;
case AccessibilityNodeInfo.ACTION_CLEAR_FOCUS:
{
        if (target.hasFocus()) {
          target.clearFocus();
          succeeded=!target.isFocused();
        }
      }
    break;
case AccessibilityNodeInfo.ACTION_SELECT:
{
    if (!target.isSelected()) {
      target.setSelected(true);
      succeeded=target.isSelected();
    }
  }
break;
case AccessibilityNodeInfo.ACTION_CLEAR_SELECTION:
{
if (target.isSelected()) {
  target.setSelected(false);
  succeeded=!target.isSelected();
}
}
break;
}
}
}
}
  finally {
try {
callback.setPerformAccessibilityActionResult(succeeded,interactionId);
}
 catch (RemoteException re) {
}
}
}
