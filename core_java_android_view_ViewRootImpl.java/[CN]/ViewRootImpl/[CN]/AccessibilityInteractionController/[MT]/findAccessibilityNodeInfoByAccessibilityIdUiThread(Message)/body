{
  SomeArgs args=(SomeArgs)message.obj;
  final int interrogatingPid=message.arg1;
  final int accessibilityViewId=args.argi1;
  final int virtualDescendantId=args.argi2;
  final int interactionId=args.argi3;
  final IAccessibilityInteractionConnectionCallback callback=(IAccessibilityInteractionConnectionCallback)args.arg1;
  mPool.release(args);
  List<AccessibilityNodeInfo> infos=mTempAccessibilityNodeInfoList;
  infos.clear();
  try {
    if (accessibilityViewId == AccessibilityNodeInfo.UNDEFINED) {
      View target=ViewRootImpl.this.mView;
      if (target != null && target.getVisibility() == View.VISIBLE) {
        infos.add(target.createAccessibilityNodeInfo());
      }
    }
 else {
      View target=findViewByAccessibilityId(accessibilityViewId);
      if (target != null && target.getVisibility() == View.VISIBLE) {
        AccessibilityNodeProvider provider=target.getAccessibilityNodeProvider();
        if (provider != null) {
          infos.add(provider.createAccessibilityNodeInfo(virtualDescendantId));
        }
 else         if (virtualDescendantId == AccessibilityNodeInfo.UNDEFINED) {
          getAccessibilityPrefetchStrategy().prefetchAccessibilityNodeInfos(interrogatingPid,target,infos);
        }
      }
    }
  }
  finally {
    try {
      callback.setFindAccessibilityNodeInfosResult(infos,interactionId);
      infos.clear();
    }
 catch (    RemoteException re) {
    }
  }
}
