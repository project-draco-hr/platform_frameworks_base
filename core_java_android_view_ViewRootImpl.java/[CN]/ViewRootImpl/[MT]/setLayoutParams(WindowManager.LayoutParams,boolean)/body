{
synchronized (this) {
    final int oldInsetLeft=mWindowAttributes.surfaceInsets.left;
    final int oldInsetTop=mWindowAttributes.surfaceInsets.top;
    final int oldInsetRight=mWindowAttributes.surfaceInsets.right;
    final int oldInsetBottom=mWindowAttributes.surfaceInsets.bottom;
    final int oldSoftInputMode=mWindowAttributes.softInputMode;
    final boolean oldHasManualSurfaceInsets=mWindowAttributes.hasManualSurfaceInsets;
    mClientWindowLayoutFlags=attrs.flags;
    final int compatibleWindowFlag=mWindowAttributes.privateFlags & WindowManager.LayoutParams.PRIVATE_FLAG_COMPATIBLE_WINDOW;
    attrs.systemUiVisibility=mWindowAttributes.systemUiVisibility;
    attrs.subtreeSystemUiVisibility=mWindowAttributes.subtreeSystemUiVisibility;
    mWindowAttributesChangesFlag=mWindowAttributes.copyFrom(attrs);
    if ((mWindowAttributesChangesFlag & WindowManager.LayoutParams.TRANSLUCENT_FLAGS_CHANGED) != 0) {
      mAttachInfo.mRecomputeGlobalAttributes=true;
    }
    if (mWindowAttributes.packageName == null) {
      mWindowAttributes.packageName=mBasePackageName;
    }
    mWindowAttributes.privateFlags|=compatibleWindowFlag;
    if (mWindowAttributes.preservePreviousSurfaceInsets) {
      mWindowAttributes.surfaceInsets.set(oldInsetLeft,oldInsetTop,oldInsetRight,oldInsetBottom);
      mWindowAttributes.hasManualSurfaceInsets=oldHasManualSurfaceInsets;
    }
    applyKeepScreenOnFlag(mWindowAttributes);
    if (newView) {
      mSoftInputMode=attrs.softInputMode;
      requestLayout();
    }
    if ((attrs.softInputMode & WindowManager.LayoutParams.SOFT_INPUT_MASK_ADJUST) == WindowManager.LayoutParams.SOFT_INPUT_ADJUST_UNSPECIFIED) {
      mWindowAttributes.softInputMode=(mWindowAttributes.softInputMode & ~WindowManager.LayoutParams.SOFT_INPUT_MASK_ADJUST) | (oldSoftInputMode & WindowManager.LayoutParams.SOFT_INPUT_MASK_ADJUST);
    }
    mWindowAttributesChanged=true;
    scheduleTraversals();
  }
}
