{
  if (attachInfo.mHardwareRenderer != null && !attachInfo.mHardwareRenderer.isEnabled() && attachInfo.mHardwareRenderer.isRequested()) {
    mFullRedrawNeeded=true;
    scheduleTraversals();
    return false;
  }
  Canvas canvas;
  try {
    int left=dirty.left;
    int top=dirty.top;
    int right=dirty.right;
    int bottom=dirty.bottom;
    canvas=mSurface.lockCanvas(dirty);
    if (left != dirty.left || top != dirty.top || right != dirty.right || bottom != dirty.bottom) {
      attachInfo.mIgnoreDirtyState=true;
    }
    canvas.setDensity(mDensity);
  }
 catch (  Surface.OutOfResourcesException e) {
    Log.e(TAG,"OutOfResourcesException locking surface",e);
    try {
      if (!sWindowSession.outOfMemory(mWindow)) {
        Slog.w(TAG,"No processes killed for memory; killing self");
        Process.killProcess(Process.myPid());
      }
    }
 catch (    RemoteException ex) {
    }
    mLayoutRequested=true;
    return false;
  }
catch (  IllegalArgumentException e) {
    Log.e(TAG,"Could not lock surface",e);
    mLayoutRequested=true;
    return false;
  }
  try {
    if (DEBUG_ORIENTATION || DEBUG_DRAW) {
      Log.v(TAG,"Surface " + surface + " drawing to bitmap w="+ canvas.getWidth()+ ", h="+ canvas.getHeight());
    }
    if (!canvas.isOpaque() || yoff != 0) {
      canvas.drawColor(0,PorterDuff.Mode.CLEAR);
    }
    dirty.setEmpty();
    mIsAnimating=false;
    attachInfo.mDrawingTime=SystemClock.uptimeMillis();
    mView.mPrivateFlags|=View.DRAWN;
    if (DEBUG_DRAW) {
      Context cxt=mView.getContext();
      Log.i(TAG,"Drawing: package:" + cxt.getPackageName() + ", metrics="+ cxt.getResources().getDisplayMetrics()+ ", compatibilityInfo="+ cxt.getResources().getCompatibilityInfo());
    }
    try {
      canvas.translate(0,-yoff);
      if (mTranslator != null) {
        mTranslator.translateCanvas(canvas);
      }
      canvas.setScreenDensity(scalingRequired ? mNoncompatDensity : 0);
      attachInfo.mSetIgnoreDirtyState=false;
      mView.draw(canvas);
      drawAccessibilityFocusedDrawableIfNeeded(canvas);
    }
  finally {
      if (!attachInfo.mSetIgnoreDirtyState) {
        attachInfo.mIgnoreDirtyState=false;
      }
    }
  }
  finally {
    try {
      surface.unlockCanvasAndPost(canvas);
    }
 catch (    IllegalArgumentException e) {
      Log.e(TAG,"Could not unlock surface",e);
      mLayoutRequested=true;
      return false;
    }
    if (LOCAL_LOGV) {
      Log.v(TAG,"Surface " + surface + " unlockCanvasAndPost");
    }
  }
  return true;
}
