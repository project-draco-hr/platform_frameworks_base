{
switch (msg.what) {
case View.AttachInfo.INVALIDATE_MSG:
    ((View)msg.obj).invalidate();
  break;
case View.AttachInfo.INVALIDATE_RECT_MSG:
final View.AttachInfo.InvalidateInfo info=(View.AttachInfo.InvalidateInfo)msg.obj;
info.target.invalidate(info.left,info.top,info.right,info.bottom);
info.release();
break;
case DO_TRAVERSAL:
if (mProfile) {
Debug.startMethodTracing("ViewAncestor");
}
final long traversalStartTime;
if (ViewDebug.DEBUG_LATENCY) {
traversalStartTime=System.nanoTime();
mLastDrawDurationNanos=0;
if (mLastTraversalFinishedTimeNanos != 0) {
Log.d(ViewDebug.DEBUG_LATENCY_TAG,"Starting performTraversals(); it has been " + ((traversalStartTime - mLastTraversalFinishedTimeNanos) * 0.000001f) + "ms since the last traversals finished.");
}
 else {
Log.d(ViewDebug.DEBUG_LATENCY_TAG,"Starting performTraversals().");
}
}
performTraversals();
if (ViewDebug.DEBUG_LATENCY) {
long now=System.nanoTime();
Log.d(ViewDebug.DEBUG_LATENCY_TAG,"performTraversals() took " + ((now - traversalStartTime) * 0.000001f) + "ms.");
mLastTraversalFinishedTimeNanos=now;
}
if (mProfile) {
Debug.stopMethodTracing();
mProfile=false;
}
break;
case IME_FINISHED_EVENT:
handleImeFinishedEvent(msg.arg1,msg.arg2 != 0);
break;
case DO_PROCESS_INPUT_EVENTS:
mProcessInputEventsPending=false;
processInputEvents();
break;
case DISPATCH_APP_VISIBILITY:
handleAppVisibility(msg.arg1 != 0);
break;
case DISPATCH_GET_NEW_SURFACE:
handleGetNewSurface();
break;
case RESIZED:
ResizedInfo ri=(ResizedInfo)msg.obj;
if (mWinFrame.width() == msg.arg1 && mWinFrame.height() == msg.arg2 && mPendingContentInsets.equals(ri.coveredInsets) && mPendingVisibleInsets.equals(ri.visibleInsets) && ((ResizedInfo)msg.obj).newConfig == null) {
break;
}
case RESIZED_REPORT:
if (mAdded) {
Configuration config=((ResizedInfo)msg.obj).newConfig;
if (config != null) {
updateConfiguration(config,false);
}
mWinFrame.left=0;
mWinFrame.right=msg.arg1;
mWinFrame.top=0;
mWinFrame.bottom=msg.arg2;
mPendingContentInsets.set(((ResizedInfo)msg.obj).coveredInsets);
mPendingVisibleInsets.set(((ResizedInfo)msg.obj).visibleInsets);
if (msg.what == RESIZED_REPORT) {
mReportNextDraw=true;
}
if (mView != null) {
forceLayout(mView);
}
requestLayout();
}
break;
case WINDOW_FOCUS_CHANGED:
{
if (mAdded) {
boolean hasWindowFocus=msg.arg1 != 0;
mAttachInfo.mHasWindowFocus=hasWindowFocus;
profileRendering(hasWindowFocus);
if (hasWindowFocus) {
boolean inTouchMode=msg.arg2 != 0;
ensureTouchModeLocally(inTouchMode);
if (mAttachInfo.mHardwareRenderer != null && mSurface != null && mSurface.isValid()) {
mFullRedrawNeeded=true;
try {
mAttachInfo.mHardwareRenderer.initializeIfNeeded(mWidth,mHeight,mAttachInfo,mHolder);
}
 catch (Surface.OutOfResourcesException e) {
Log.e(TAG,"OutOfResourcesException locking surface",e);
try {
if (!sWindowSession.outOfMemory(mWindow)) {
Slog.w(TAG,"No processes killed for memory; killing self");
Process.killProcess(Process.myPid());
}
}
 catch (RemoteException ex) {
}
sendMessageDelayed(obtainMessage(msg.what,msg.arg1,msg.arg2),500);
return;
}
}
}
mLastWasImTarget=WindowManager.LayoutParams.mayUseInputMethod(mWindowAttributes.flags);
InputMethodManager imm=InputMethodManager.peekInstance();
if (mView != null) {
if (hasWindowFocus && imm != null && mLastWasImTarget) {
imm.startGettingWindowFocus(mView);
}
mAttachInfo.mKeyDispatchState.reset();
mView.dispatchWindowFocusChanged(hasWindowFocus);
}
if (hasWindowFocus) {
if (imm != null && mLastWasImTarget) {
imm.onWindowFocus(mView,mView.findFocus(),mWindowAttributes.softInputMode,!mHasHadWindowFocus,mWindowAttributes.flags);
}
mWindowAttributes.softInputMode&=~WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION;
((WindowManager.LayoutParams)mView.getLayoutParams()).softInputMode&=~WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION;
mHasHadWindowFocus=true;
}
if (hasWindowFocus && mView != null) {
sendAccessibilityEvents();
}
}
}
break;
case DIE:
doDie();
break;
case DISPATCH_KEY_FROM_IME:
{
if (LOCAL_LOGV) Log.v(TAG,"Dispatching key " + msg.obj + " from IME to "+ mView);
KeyEvent event=(KeyEvent)msg.obj;
if ((event.getFlags() & KeyEvent.FLAG_FROM_SYSTEM) != 0) {
event=KeyEvent.changeFlags(event,event.getFlags() & ~KeyEvent.FLAG_FROM_SYSTEM);
}
enqueueInputEvent(event,null,QueuedInputEvent.FLAG_DELIVER_POST_IME);
}
break;
case FINISH_INPUT_CONNECTION:
{
InputMethodManager imm=InputMethodManager.peekInstance();
if (imm != null) {
imm.reportFinishInputConnection((InputConnection)msg.obj);
}
}
break;
case CHECK_FOCUS:
{
InputMethodManager imm=InputMethodManager.peekInstance();
if (imm != null) {
imm.checkFocus();
}
}
break;
case CLOSE_SYSTEM_DIALOGS:
{
if (mView != null) {
mView.onCloseSystemDialogs((String)msg.obj);
}
}
break;
case DISPATCH_DRAG_EVENT:
case DISPATCH_DRAG_LOCATION_EVENT:
{
DragEvent event=(DragEvent)msg.obj;
event.mLocalState=mLocalDragState;
handleDragEvent(event);
}
break;
case DISPATCH_SYSTEM_UI_VISIBILITY:
{
handleDispatchSystemUiVisibilityChanged((SystemUiVisibilityInfo)msg.obj);
}
break;
case UPDATE_CONFIGURATION:
{
Configuration config=(Configuration)msg.obj;
if (config.isOtherSeqNewer(mLastConfiguration)) {
config=mLastConfiguration;
}
updateConfiguration(config,false);
}
break;
case DO_FIND_ACCESSIBLITY_NODE_INFO_BY_ACCESSIBILITY_ID:
{
if (mView != null) {
getAccessibilityInteractionController().findAccessibilityNodeInfoByAccessibilityIdUiThread(msg);
}
}
break;
case DO_PERFORM_ACCESSIBILITY_ACTION:
{
if (mView != null) {
getAccessibilityInteractionController().perfromAccessibilityActionUiThread(msg);
}
}
break;
case DO_FIND_ACCESSIBLITY_NODE_INFO_BY_VIEW_ID:
{
if (mView != null) {
getAccessibilityInteractionController().findAccessibilityNodeInfoByViewIdUiThread(msg);
}
}
break;
case DO_FIND_ACCESSIBLITY_NODE_INFO_BY_TEXT:
{
if (mView != null) {
getAccessibilityInteractionController().findAccessibilityNodeInfosByTextUiThread(msg);
}
}
break;
}
}
