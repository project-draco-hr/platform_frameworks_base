{
  int getFlags=0;
  boolean listDisabled=false, listEnabled=false;
  boolean listSystem=false, listThirdParty=false;
  boolean listInstaller=false;
  int userId=UserHandle.USER_OWNER;
  try {
    String opt;
    while ((opt=nextOption()) != null) {
      if (opt.equals("-l")) {
      }
 else       if (opt.equals("-lf")) {
        showApplicationPackage=true;
      }
 else       if (opt.equals("-f")) {
        showApplicationPackage=true;
      }
 else       if (opt.equals("-d")) {
        listDisabled=true;
      }
 else       if (opt.equals("-e")) {
        listEnabled=true;
      }
 else       if (opt.equals("-s")) {
        listSystem=true;
      }
 else       if (opt.equals("-3")) {
        listThirdParty=true;
      }
 else       if (opt.equals("-i")) {
        listInstaller=true;
      }
 else       if (opt.equals("--user")) {
        userId=Integer.parseInt(nextArg());
      }
 else       if (opt.equals("-u")) {
        getFlags|=PackageManager.GET_UNINSTALLED_PACKAGES;
      }
 else {
        System.err.println("Error: Unknown option: " + opt);
        return 1;
      }
    }
  }
 catch (  RuntimeException ex) {
    System.err.println("Error: " + ex.toString());
    return 1;
  }
  String filter=nextArg();
  try {
    final List<PackageInfo> packages=getInstalledPackages(mPm,getFlags,userId);
    int count=packages.size();
    for (int p=0; p < count; p++) {
      PackageInfo info=packages.get(p);
      if (filter != null && !info.packageName.contains(filter)) {
        continue;
      }
      final boolean isSystem=(info.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0;
      if ((!listDisabled || !info.applicationInfo.enabled) && (!listEnabled || info.applicationInfo.enabled) && (!listSystem || isSystem)&& (!listThirdParty || !isSystem)) {
        System.out.print("package:");
        if (showApplicationPackage) {
          System.out.print(info.applicationInfo.sourceDir);
          System.out.print("=");
        }
        System.out.print(info.packageName);
        if (listInstaller) {
          System.out.print("  installer=");
          System.out.print(mPm.getInstallerPackageName(info.packageName));
        }
        System.out.println();
      }
    }
    return 0;
  }
 catch (  RemoteException e) {
    System.err.println(e.toString());
    System.err.println(PM_NOT_RUNNING_ERR);
    return 1;
  }
}
