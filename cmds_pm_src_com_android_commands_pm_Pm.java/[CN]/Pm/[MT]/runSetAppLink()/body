{
  int userId=UserHandle.USER_SYSTEM;
  String opt;
  while ((opt=nextOption()) != null) {
    if (opt.equals("--user")) {
      userId=Integer.parseInt(nextOptionData());
      if (userId < 0) {
        System.err.println("Error: user must be >= 0");
        return 1;
      }
    }
 else {
      System.err.println("Error: unknown option: " + opt);
      showUsage();
      return 1;
    }
  }
  final String pkg=nextArg();
  if (pkg == null) {
    System.err.println("Error: no package specified.");
    showUsage();
    return 1;
  }
  final String modeString=nextArg();
  if (modeString == null) {
    System.err.println("Error: no app link state specified.");
    showUsage();
    return 1;
  }
  final int newMode;
switch (modeString.toLowerCase()) {
case "undefined":
    newMode=INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_UNDEFINED;
  break;
case "always":
newMode=INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ALWAYS;
break;
case "ask":
newMode=INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ASK;
break;
case "never":
newMode=INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_NEVER;
break;
default :
System.err.println("Error: unknown app link state '" + modeString + "'");
return 1;
}
try {
final PackageInfo info=mPm.getPackageInfo(pkg,0,userId);
if (info == null) {
System.err.println("Error: package " + pkg + " not found.");
return 1;
}
if ((info.applicationInfo.privateFlags & ApplicationInfo.PRIVATE_FLAG_HAS_DOMAIN_URLS) == 0) {
System.err.println("Error: package " + pkg + " does not handle web links.");
return 1;
}
if (!mPm.updateIntentVerificationStatus(pkg,newMode,userId)) {
System.err.println("Error: unable to update app link status for " + pkg);
return 1;
}
}
 catch (Exception e) {
System.err.println(e.toString());
System.err.println(PM_NOT_RUNNING_ERR);
return 1;
}
return 0;
}
