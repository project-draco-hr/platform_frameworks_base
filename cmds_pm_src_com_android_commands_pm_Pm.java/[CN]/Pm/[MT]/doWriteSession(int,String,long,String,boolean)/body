{
  if ("-".equals(inPath)) {
    inPath=null;
  }
 else   if (inPath != null) {
    final File file=new File(inPath);
    if (file.isFile()) {
      sizeBytes=file.length();
    }
  }
  final SessionInfo info=mInstaller.getSessionInfo(sessionId);
  PackageInstaller.Session session=null;
  InputStream in=null;
  OutputStream out=null;
  try {
    session=new PackageInstaller.Session(mInstaller.openSession(sessionId));
    if (inPath != null) {
      in=new FileInputStream(inPath);
    }
 else {
      in=new SizedInputStream(System.in,sizeBytes);
    }
    out=session.openWrite(splitName,0,sizeBytes);
    int total=0;
    byte[] buffer=new byte[65536];
    int c;
    while ((c=in.read(buffer)) != -1) {
      total+=c;
      out.write(buffer,0,c);
      if (info.sizeBytes > 0) {
        final float fraction=((float)c / (float)info.sizeBytes);
        session.addProgress(fraction);
      }
    }
    session.fsync(out);
    if (logSuccess) {
      System.out.println("Success: streamed " + total + " bytes");
    }
    return PackageInstaller.STATUS_SUCCESS;
  }
 catch (  IOException e) {
    System.err.println("Error: failed to write; " + e.getMessage());
    return PackageInstaller.STATUS_FAILURE;
  }
 finally {
    IoUtils.closeQuietly(out);
    IoUtils.closeQuietly(in);
    IoUtils.closeQuietly(session);
  }
}
