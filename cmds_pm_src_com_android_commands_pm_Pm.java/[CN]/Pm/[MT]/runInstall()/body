{
  int installFlags=0;
  String installerPackageName=null;
  String opt;
  while ((opt=nextOption()) != null) {
    if (opt.equals("-l")) {
      installFlags|=PackageManager.INSTALL_FORWARD_LOCK;
    }
 else     if (opt.equals("-r")) {
      installFlags|=PackageManager.INSTALL_REPLACE_EXISTING;
    }
 else     if (opt.equals("-i")) {
      installerPackageName=nextOptionData();
      if (installerPackageName == null) {
        System.err.println("Error: no value specified for -i");
        showUsage();
        return;
      }
    }
 else     if (opt.equals("-t")) {
      installFlags|=PackageManager.INSTALL_ALLOW_TEST;
    }
 else     if (opt.equals("-s")) {
      installFlags|=PackageManager.INSTALL_EXTERNAL;
    }
 else     if (opt.equals("-f")) {
      installFlags|=PackageManager.INSTALL_INTERNAL;
    }
 else {
      System.err.println("Error: Unknown option: " + opt);
      showUsage();
      return;
    }
  }
  final Uri apkURI;
  final Uri verificationURI;
  final String apkFilePath=nextArg();
  System.err.println("\tpkg: " + apkFilePath);
  if (apkFilePath != null) {
    apkURI=Uri.fromFile(new File(apkFilePath));
  }
 else {
    System.err.println("Error: no package specified");
    showUsage();
    return;
  }
  final String verificationFilePath=nextArg();
  if (verificationFilePath != null) {
    System.err.println("\tver: " + verificationFilePath);
    verificationURI=Uri.fromFile(new File(verificationFilePath));
  }
 else {
    verificationURI=null;
  }
  PackageInstallObserver obs=new PackageInstallObserver();
  try {
    mPm.installPackageWithVerification(apkURI,obs,installFlags,installerPackageName,verificationURI,null);
synchronized (obs) {
      while (!obs.finished) {
        try {
          obs.wait();
        }
 catch (        InterruptedException e) {
        }
      }
      if (obs.result == PackageManager.INSTALL_SUCCEEDED) {
        System.out.println("Success");
      }
 else {
        System.err.println("Failure [" + installFailureToString(obs.result) + "]");
      }
    }
  }
 catch (  RemoteException e) {
    System.err.println(e.toString());
    System.err.println(PM_NOT_RUNNING_ERR);
  }
}
