{
  int installFlags=0;
  int userId=UserHandle.USER_ALL;
  String installerPackageName=null;
  String opt;
  String originatingUriString=null;
  String referrer=null;
  String abi=null;
  while ((opt=nextOption()) != null) {
    if (opt.equals("-l")) {
      installFlags|=PackageManager.INSTALL_FORWARD_LOCK;
    }
 else     if (opt.equals("-r")) {
      installFlags|=PackageManager.INSTALL_REPLACE_EXISTING;
    }
 else     if (opt.equals("-i")) {
      installerPackageName=nextOptionData();
      if (installerPackageName == null) {
        System.err.println("Error: no value specified for -i");
        return 1;
      }
    }
 else     if (opt.equals("-t")) {
      installFlags|=PackageManager.INSTALL_ALLOW_TEST;
    }
 else     if (opt.equals("-s")) {
      installFlags|=PackageManager.INSTALL_EXTERNAL;
    }
 else     if (opt.equals("-f")) {
      installFlags|=PackageManager.INSTALL_INTERNAL;
    }
 else     if (opt.equals("-d")) {
      installFlags|=PackageManager.INSTALL_ALLOW_DOWNGRADE;
    }
 else     if (opt.equals("-g")) {
      installFlags|=PackageManager.INSTALL_GRANT_RUNTIME_PERMISSIONS;
    }
 else     if (opt.equals("--originating-uri")) {
      originatingUriString=nextOptionData();
      if (originatingUriString == null) {
        System.err.println("Error: must supply argument for --originating-uri");
        return 1;
      }
    }
 else     if (opt.equals("--referrer")) {
      referrer=nextOptionData();
      if (referrer == null) {
        System.err.println("Error: must supply argument for --referrer");
        return 1;
      }
    }
 else     if (opt.equals("--abi")) {
      abi=checkAbiArgument(nextOptionData());
    }
 else     if (opt.equals("--user")) {
      userId=Integer.parseInt(nextOptionData());
    }
 else {
      System.err.println("Error: Unknown option: " + opt);
      return 1;
    }
  }
  if (userId == UserHandle.USER_ALL) {
    userId=UserHandle.USER_OWNER;
    installFlags|=PackageManager.INSTALL_ALL_USERS;
  }
  final Uri verificationURI;
  final Uri originatingURI;
  final Uri referrerURI;
  if (originatingUriString != null) {
    originatingURI=Uri.parse(originatingUriString);
  }
 else {
    originatingURI=null;
  }
  if (referrer != null) {
    referrerURI=Uri.parse(referrer);
  }
 else {
    referrerURI=null;
  }
  final String apkFilePath=nextArg();
  System.err.println("\tpkg: " + apkFilePath);
  if (apkFilePath == null) {
    System.err.println("Error: no package specified");
    return 1;
  }
  final String verificationFilePath=nextArg();
  if (verificationFilePath != null) {
    System.err.println("\tver: " + verificationFilePath);
    verificationURI=Uri.fromFile(new File(verificationFilePath));
  }
 else {
    verificationURI=null;
  }
  LocalPackageInstallObserver obs=new LocalPackageInstallObserver();
  try {
    VerificationParams verificationParams=new VerificationParams(verificationURI,originatingURI,referrerURI,VerificationParams.NO_UID,null);
    mPm.installPackageAsUser(apkFilePath,obs.getBinder(),installFlags,installerPackageName,verificationParams,abi,userId);
synchronized (obs) {
      while (!obs.finished) {
        try {
          obs.wait();
        }
 catch (        InterruptedException e) {
        }
      }
      if (obs.result == PackageManager.INSTALL_SUCCEEDED) {
        System.out.println("Success");
        return 0;
      }
 else {
        System.err.println("Failure [" + installFailureToString(obs) + "]");
        return 1;
      }
    }
  }
 catch (  RemoteException e) {
    System.err.println(e.toString());
    System.err.println(PM_NOT_RUNNING_ERR);
    return 1;
  }
}
