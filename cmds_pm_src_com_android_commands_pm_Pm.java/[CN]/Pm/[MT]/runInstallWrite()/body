{
  long sizeBytes=-1;
  String opt;
  while ((opt=nextOption()) != null) {
    if (opt.equals("-S")) {
      sizeBytes=Long.parseLong(nextOptionData());
    }
 else {
      throw new IllegalArgumentException("Unknown option: " + opt);
    }
  }
  final int sessionId=Integer.parseInt(nextArg());
  final String splitName=nextArg();
  String path=nextArg();
  if ("-".equals(path)) {
    path=null;
  }
 else   if (path != null) {
    final File file=new File(path);
    if (file.isFile()) {
      sizeBytes=file.length();
    }
  }
  PackageInstaller.Session session=null;
  InputStream in=null;
  OutputStream out=null;
  try {
    session=new PackageInstaller.Session(mInstaller.openSession(sessionId));
    if (path != null) {
      in=new FileInputStream(path);
    }
 else {
      in=new SizedInputStream(System.in,sizeBytes);
    }
    out=session.openWrite(splitName,0,sizeBytes);
    final int n=Streams.copy(in,out);
    out.flush();
    System.out.println("Success: streamed " + n + " bytes");
  }
  finally {
    IoUtils.closeQuietly(out);
    IoUtils.closeQuietly(in);
    IoUtils.closeQuietly(session);
  }
}
