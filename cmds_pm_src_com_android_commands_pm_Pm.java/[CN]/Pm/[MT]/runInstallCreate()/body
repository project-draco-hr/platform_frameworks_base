{
  String installerPackageName=null;
  final InstallSessionParams params=new InstallSessionParams();
  params.installFlags=PackageManager.INSTALL_ALL_USERS;
  params.fullInstall=true;
  String opt;
  while ((opt=nextOption()) != null) {
    if (opt.equals("-l")) {
      params.installFlags|=PackageManager.INSTALL_FORWARD_LOCK;
    }
 else     if (opt.equals("-r")) {
      params.installFlags|=PackageManager.INSTALL_REPLACE_EXISTING;
    }
 else     if (opt.equals("-i")) {
      installerPackageName=nextArg();
      if (installerPackageName == null) {
        throw new IllegalArgumentException("Missing installer package");
      }
    }
 else     if (opt.equals("-t")) {
      params.installFlags|=PackageManager.INSTALL_ALLOW_TEST;
    }
 else     if (opt.equals("-s")) {
      params.installFlags|=PackageManager.INSTALL_EXTERNAL;
    }
 else     if (opt.equals("-f")) {
      params.installFlags|=PackageManager.INSTALL_INTERNAL;
    }
 else     if (opt.equals("-d")) {
      params.installFlags|=PackageManager.INSTALL_ALLOW_DOWNGRADE;
    }
 else     if (opt.equals("-p")) {
      params.fullInstall=false;
    }
 else     if (opt.equals("-S")) {
      params.deltaSize=Long.parseLong(nextOptionData());
    }
 else {
      throw new IllegalArgumentException("Unknown option " + opt);
    }
  }
  final int sessionId=mInstaller.createSession(installerPackageName,params,UserHandle.USER_OWNER);
  System.out.println("Success: created install session [" + sessionId + "]");
}
