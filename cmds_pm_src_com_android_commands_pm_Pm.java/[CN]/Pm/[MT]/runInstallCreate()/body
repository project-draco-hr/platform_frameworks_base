{
  int userId=UserHandle.USER_ALL;
  String installerPackageName=null;
  final SessionParams params=new SessionParams(SessionParams.MODE_FULL_INSTALL);
  String opt;
  while ((opt=nextOption()) != null) {
    if (opt.equals("-l")) {
      params.installFlags|=PackageManager.INSTALL_FORWARD_LOCK;
    }
 else     if (opt.equals("-r")) {
      params.installFlags|=PackageManager.INSTALL_REPLACE_EXISTING;
    }
 else     if (opt.equals("-i")) {
      installerPackageName=nextArg();
      if (installerPackageName == null) {
        throw new IllegalArgumentException("Missing installer package");
      }
    }
 else     if (opt.equals("-t")) {
      params.installFlags|=PackageManager.INSTALL_ALLOW_TEST;
    }
 else     if (opt.equals("-s")) {
      params.installFlags|=PackageManager.INSTALL_EXTERNAL;
    }
 else     if (opt.equals("-f")) {
      params.installFlags|=PackageManager.INSTALL_INTERNAL;
    }
 else     if (opt.equals("-d")) {
      params.installFlags|=PackageManager.INSTALL_ALLOW_DOWNGRADE;
    }
 else     if (opt.equals("-g")) {
      params.installFlags|=PackageManager.INSTALL_GRANT_RUNTIME_PERMISSIONS;
    }
 else     if (opt.equals("--originating-uri")) {
      params.originatingUri=Uri.parse(nextOptionData());
    }
 else     if (opt.equals("--referrer")) {
      params.referrerUri=Uri.parse(nextOptionData());
    }
 else     if (opt.equals("-p")) {
      params.mode=SessionParams.MODE_INHERIT_EXISTING;
      params.appPackageName=nextOptionData();
      if (params.appPackageName == null) {
        throw new IllegalArgumentException("Missing inherit package name");
      }
    }
 else     if (opt.equals("-S")) {
      params.setSize(Long.parseLong(nextOptionData()));
    }
 else     if (opt.equals("--abi")) {
      params.abiOverride=checkAbiArgument(nextOptionData());
    }
 else     if (opt.equals("--user")) {
      userId=Integer.parseInt(nextOptionData());
    }
 else     if (opt.equals("--install-location")) {
      params.installLocation=Integer.parseInt(nextOptionData());
    }
 else     if (opt.equals("--force-uuid")) {
      params.installFlags|=PackageManager.INSTALL_FORCE_VOLUME_UUID;
      params.volumeUuid=nextOptionData();
      if ("internal".equals(params.volumeUuid)) {
        params.volumeUuid=null;
      }
    }
 else {
      throw new IllegalArgumentException("Unknown option " + opt);
    }
  }
  if (userId == UserHandle.USER_ALL) {
    userId=UserHandle.USER_OWNER;
    params.installFlags|=PackageManager.INSTALL_ALL_USERS;
  }
  final int sessionId=mInstaller.createSession(params,installerPackageName,userId);
  System.out.println("Success: created install session [" + sessionId + "]");
  return 0;
}
