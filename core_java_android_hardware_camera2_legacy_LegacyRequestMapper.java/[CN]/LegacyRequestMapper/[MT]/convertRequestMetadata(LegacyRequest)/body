{
  CameraCharacteristics characteristics=legacyRequest.characteristics;
  CaptureRequest request=legacyRequest.captureRequest;
  Size previewSize=legacyRequest.previewSize;
  Camera.Parameters params=legacyRequest.parameters;
  Rect activeArray=characteristics.get(CameraCharacteristics.SENSOR_INFO_ACTIVE_ARRAY_SIZE);
  ParameterUtils.ZoomData zoomData;
{
    zoomData=ParameterUtils.convertScalerCropRegion(activeArray,request.get(SCALER_CROP_REGION),previewSize,params);
    if (params.isZoomSupported()) {
      params.setZoom(zoomData.zoomIndex);
    }
 else     if (VERBOSE) {
      Log.v(TAG,"convertRequestToMetadata - zoom is not supported");
    }
  }
{
    String legacyMode;
    Integer antiBandingMode=request.get(CONTROL_AE_ANTIBANDING_MODE);
    if (antiBandingMode != null) {
      legacyMode=convertAeAntiBandingModeToLegacy(antiBandingMode);
    }
 else {
      legacyMode=ListUtils.listSelectFirstFrom(params.getSupportedAntibanding(),new String[]{Parameters.ANTIBANDING_AUTO,Parameters.ANTIBANDING_OFF,Parameters.ANTIBANDING_50HZ,Parameters.ANTIBANDING_60HZ});
    }
    if (legacyMode != null) {
      params.setAntibanding(legacyMode);
    }
  }
{
{
      MeteringRectangle[] aeRegions=request.get(CONTROL_AE_REGIONS);
      int maxNumMeteringAreas=params.getMaxNumMeteringAreas();
      List<Camera.Area> meteringAreaList=convertMeteringRegionsToLegacy(activeArray,zoomData,aeRegions,maxNumMeteringAreas,"AE");
      params.setMeteringAreas(meteringAreaList);
    }
{
      MeteringRectangle[] afRegions=request.get(CONTROL_AF_REGIONS);
      int maxNumFocusAreas=params.getMaxNumFocusAreas();
      List<Camera.Area> focusAreaList=convertMeteringRegionsToLegacy(activeArray,zoomData,afRegions,maxNumFocusAreas,"AF");
      params.setFocusAreas(focusAreaList);
    }
  }
  Range<Integer> aeFpsRange=request.get(CONTROL_AE_TARGET_FPS_RANGE);
  if (aeFpsRange != null) {
    int[] legacyFps=convertAeFpsRangeToLegacy(aeFpsRange);
    boolean supported=false;
    for (    int[] range : params.getSupportedPreviewFpsRange()) {
      if (legacyFps[0] == range[0] && legacyFps[1] == range[1]) {
        supported=true;
        break;
      }
    }
    if (supported) {
      params.setPreviewFpsRange(legacyFps[Camera.Parameters.PREVIEW_FPS_MIN_INDEX],legacyFps[Camera.Parameters.PREVIEW_FPS_MAX_INDEX]);
      params.setRecordingHint(false);
    }
 else {
      Log.w(TAG,"Unsupported FPS range set [" + legacyFps[0] + ","+ legacyFps[1]+ "]");
      params.setRecordingHint(true);
    }
  }
{
    Range<Integer> compensationRange=characteristics.get(CameraCharacteristics.CONTROL_AE_COMPENSATION_RANGE);
    int compensation=ParamsUtils.getOrDefault(request,CONTROL_AE_EXPOSURE_COMPENSATION,0);
    if (!compensationRange.contains(compensation)) {
      Log.w(TAG,"convertRequestMetadata - control.aeExposureCompensation " + "is out of range, ignoring value");
      compensation=0;
    }
    params.setExposureCompensation(compensation);
  }
{
    Boolean aeLock=getIfSupported(request,CONTROL_AE_LOCK,false,params.isAutoExposureLockSupported(),false);
    if (aeLock != null) {
      params.setAutoExposureLock(aeLock);
    }
    if (VERBOSE) {
      Log.v(TAG,"convertRequestToMetadata - control.aeLock set to " + aeLock);
    }
  }
  mapAeAndFlashMode(request,params);
{
    int afMode=ParamsUtils.getOrDefault(request,CONTROL_AF_MODE,CONTROL_AF_MODE_OFF);
    String focusMode=LegacyMetadataMapper.convertAfModeToLegacy(afMode,params.getSupportedFocusModes());
    if (focusMode != null) {
      params.setFocusMode(focusMode);
    }
    if (VERBOSE) {
      Log.v(TAG,"convertRequestToMetadata - control.afMode " + afMode + " mapped to "+ focusMode);
    }
  }
{
    Boolean awbLock=getIfSupported(request,CONTROL_AWB_LOCK,false,params.isAutoWhiteBalanceLockSupported(),false);
    if (awbLock != null) {
      params.setAutoWhiteBalanceLock(awbLock);
    }
  }
{
    boolean infinityFocusSupported=ListUtils.listContains(params.getSupportedFocusModes(),Parameters.FOCUS_MODE_INFINITY);
    Float focusDistance=getIfSupported(request,LENS_FOCUS_DISTANCE,0f,infinityFocusSupported,0f);
    if (focusDistance == null || focusDistance != 0f) {
      Log.w(TAG,"convertRequestToMetadata - Ignoring android.lens.focusDistance " + infinityFocusSupported + ", only 0.0f is supported");
    }
  }
}
