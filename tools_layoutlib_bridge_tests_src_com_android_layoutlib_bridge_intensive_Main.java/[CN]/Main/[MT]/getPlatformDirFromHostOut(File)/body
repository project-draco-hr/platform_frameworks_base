{
  if (!out.isDirectory()) {
    return null;
  }
  File sdkDir=new File(out,"sdk");
  if (!sdkDir.isDirectory()) {
    return null;
  }
  File[] possibleSdks=sdkDir.listFiles(new FileFilter(){
    @Override public boolean accept(    File path){
      return path.isDirectory() && path.getName().contains("android-sdk");
    }
  }
);
  for (  File possibleSdk : possibleSdks) {
    File platformsDir=new File(possibleSdk,"platforms");
    File[] platforms=platformsDir.listFiles(new FileFilter(){
      @Override public boolean accept(      File path){
        return path.isDirectory() && path.getName().startsWith("android-");
      }
    }
);
    if (platforms == null || platforms.length == 0) {
      continue;
    }
    Arrays.sort(platforms,new Comparator<File>(){
      @Override public int compare(      File o1,      File o2){
        final int MAX_VALUE=1000;
        String suffix1=o1.getName().substring("android-".length());
        String suffix2=o2.getName().substring("android-".length());
        int suff1, suff2;
        try {
          suff1=Integer.parseInt(suffix1);
        }
 catch (        NumberFormatException e) {
          suff1=MAX_VALUE;
        }
        try {
          suff2=Integer.parseInt(suffix2);
        }
 catch (        NumberFormatException e) {
          suff2=MAX_VALUE;
        }
        if (suff1 != MAX_VALUE || suff2 != MAX_VALUE) {
          return suff2 - suff1;
        }
        return suffix2.compareTo(suffix1);
      }
    }
);
    return platforms[0].getAbsolutePath();
  }
  return null;
}
